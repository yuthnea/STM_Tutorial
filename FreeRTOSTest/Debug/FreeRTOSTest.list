
FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b24  0801b380  0801b380  0001c380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cea4  0801cea4  000236cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801cea4  0801cea4  0001dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ceac  0801ceac  000236cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ceac  0801ceac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ceb0  0801ceb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0801ceb4  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .nzds         00000028  200001d0  0801d084  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       000046cc  10000000  0801d0ac  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a49c  200001f8  200001f8  000241f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000a694  2000a694  000241f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000236cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004da5b  00000000  00000000  000236fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bb91  00000000  00000000  00071157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e00  00000000  00000000  0007cce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000222f  00000000  00000000  0007fae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002dbd0  00000000  00000000  00081d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00048859  00000000  00000000  000af8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6ec9  00000000  00000000  000f8140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  001ef009  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bf78  00000000  00000000  001ef0c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  001fb03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000015c0  00000000  00000000  001fb090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000060  00000000  00000000  001fc650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b368 	.word	0x0801b368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0801b368 	.word	0x0801b368

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_frsub>:
 8000b5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b60:	e002      	b.n	8000b68 <__addsf3>
 8000b62:	bf00      	nop

08000b64 <__aeabi_fsub>:
 8000b64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b68 <__addsf3>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	bf1f      	itttt	ne
 8000b6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b70:	ea92 0f03 	teqne	r2, r3
 8000b74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7c:	d06a      	beq.n	8000c54 <__addsf3+0xec>
 8000b7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b86:	bfc1      	itttt	gt
 8000b88:	18d2      	addgt	r2, r2, r3
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	4048      	eorgt	r0, r1
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	bfb8      	it	lt
 8000b92:	425b      	neglt	r3, r3
 8000b94:	2b19      	cmp	r3, #25
 8000b96:	bf88      	it	hi
 8000b98:	4770      	bxhi	lr
 8000b9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4249      	negne	r1, r1
 8000bba:	ea92 0f03 	teq	r2, r3
 8000bbe:	d03f      	beq.n	8000c40 <__addsf3+0xd8>
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc8:	eb10 000c 	adds.w	r0, r0, ip
 8000bcc:	f1c3 0320 	rsb	r3, r3, #32
 8000bd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__addsf3+0x78>
 8000bda:	4249      	negs	r1, r1
 8000bdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be4:	d313      	bcc.n	8000c0e <__addsf3+0xa6>
 8000be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bea:	d306      	bcc.n	8000bfa <__addsf3+0x92>
 8000bec:	0840      	lsrs	r0, r0, #1
 8000bee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf2:	f102 0201 	add.w	r2, r2, #1
 8000bf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf8:	d251      	bcs.n	8000c9e <__addsf3+0x136>
 8000bfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	ea40 0003 	orr.w	r0, r0, r3
 8000c0c:	4770      	bx	lr
 8000c0e:	0049      	lsls	r1, r1, #1
 8000c10:	eb40 0000 	adc.w	r0, r0, r0
 8000c14:	3a01      	subs	r2, #1
 8000c16:	bf28      	it	cs
 8000c18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c1c:	d2ed      	bcs.n	8000bfa <__addsf3+0x92>
 8000c1e:	fab0 fc80 	clz	ip, r0
 8000c22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c26:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2e:	bfaa      	itet	ge
 8000c30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c34:	4252      	neglt	r2, r2
 8000c36:	4318      	orrge	r0, r3
 8000c38:	bfbc      	itt	lt
 8000c3a:	40d0      	lsrlt	r0, r2
 8000c3c:	4318      	orrlt	r0, r3
 8000c3e:	4770      	bx	lr
 8000c40:	f092 0f00 	teq	r2, #0
 8000c44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c48:	bf06      	itte	eq
 8000c4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	3201      	addeq	r2, #1
 8000c50:	3b01      	subne	r3, #1
 8000c52:	e7b5      	b.n	8000bc0 <__addsf3+0x58>
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d021      	beq.n	8000ca8 <__addsf3+0x140>
 8000c64:	ea92 0f03 	teq	r2, r3
 8000c68:	d004      	beq.n	8000c74 <__addsf3+0x10c>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	bf08      	it	eq
 8000c70:	4608      	moveq	r0, r1
 8000c72:	4770      	bx	lr
 8000c74:	ea90 0f01 	teq	r0, r1
 8000c78:	bf1c      	itt	ne
 8000c7a:	2000      	movne	r0, #0
 8000c7c:	4770      	bxne	lr
 8000c7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c82:	d104      	bne.n	8000c8e <__addsf3+0x126>
 8000c84:	0040      	lsls	r0, r0, #1
 8000c86:	bf28      	it	cs
 8000c88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	4770      	bx	lr
 8000c8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c92:	bf3c      	itt	cc
 8000c94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c98:	4770      	bxcc	lr
 8000c9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ca2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	4770      	bx	lr
 8000ca8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cac:	bf16      	itet	ne
 8000cae:	4608      	movne	r0, r1
 8000cb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb4:	4601      	movne	r1, r0
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	bf06      	itte	eq
 8000cba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cbe:	ea90 0f01 	teqeq	r0, r1
 8000cc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_ui2f>:
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e004      	b.n	8000cd8 <__aeabi_i2f+0x8>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_i2f>:
 8000cd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	bf48      	it	mi
 8000cd6:	4240      	negmi	r0, r0
 8000cd8:	ea5f 0c00 	movs.w	ip, r0
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	f04f 0000 	mov.w	r0, #0
 8000cea:	e01c      	b.n	8000d26 <__aeabi_l2f+0x2a>

08000cec <__aeabi_ul2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e00a      	b.n	8000d10 <__aeabi_l2f+0x14>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_l2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_l2f+0x14>
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	ea5f 0c01 	movs.w	ip, r1
 8000d14:	bf02      	ittt	eq
 8000d16:	4684      	moveq	ip, r0
 8000d18:	4601      	moveq	r1, r0
 8000d1a:	2000      	moveq	r0, #0
 8000d1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d20:	bf08      	it	eq
 8000d22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	fabc f28c 	clz	r2, ip
 8000d2e:	3a08      	subs	r2, #8
 8000d30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d34:	db10      	blt.n	8000d58 <__aeabi_l2f+0x5c>
 8000d36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d48:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f102 0220 	add.w	r2, r2, #32
 8000d5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d68:	fa21 f202 	lsr.w	r2, r1, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_ldivmod>:
 8000d78:	b97b      	cbnz	r3, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7a:	b972      	cbnz	r2, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bfbe      	ittt	lt
 8000d80:	2000      	movlt	r0, #0
 8000d82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d86:	e006      	blt.n	8000d96 <__aeabi_ldivmod+0x1e>
 8000d88:	bf08      	it	eq
 8000d8a:	2800      	cmpeq	r0, #0
 8000d8c:	bf1c      	itt	ne
 8000d8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d92:	f04f 30ff 	movne.w	r0, #4294967295
 8000d96:	f000 b9b5 	b.w	8001104 <__aeabi_idiv0>
 8000d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da2:	2900      	cmp	r1, #0
 8000da4:	db09      	blt.n	8000dba <__aeabi_ldivmod+0x42>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db1a      	blt.n	8000de0 <__aeabi_ldivmod+0x68>
 8000daa:	f000 f84d 	bl	8000e48 <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4770      	bx	lr
 8000dba:	4240      	negs	r0, r0
 8000dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db1b      	blt.n	8000dfc <__aeabi_ldivmod+0x84>
 8000dc4:	f000 f840 	bl	8000e48 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	4252      	negs	r2, r2
 8000dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dde:	4770      	bx	lr
 8000de0:	4252      	negs	r2, r2
 8000de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de6:	f000 f82f 	bl	8000e48 <__udivmoddi4>
 8000dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df2:	b004      	add	sp, #16
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	4770      	bx	lr
 8000dfc:	4252      	negs	r2, r2
 8000dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e02:	f000 f821 	bl	8000e48 <__udivmoddi4>
 8000e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e0e:	b004      	add	sp, #16
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_uldivmod>:
 8000e18:	b953      	cbnz	r3, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1a:	b94a      	cbnz	r2, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	bf08      	it	eq
 8000e20:	2800      	cmpeq	r0, #0
 8000e22:	bf1c      	itt	ne
 8000e24:	f04f 31ff 	movne.w	r1, #4294967295
 8000e28:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2c:	f000 b96a 	b.w	8001104 <__aeabi_idiv0>
 8000e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e38:	f000 f806 	bl	8000e48 <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4770      	bx	lr

08000e48 <__udivmoddi4>:
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	9d08      	ldr	r5, [sp, #32]
 8000e4e:	460c      	mov	r4, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d14e      	bne.n	8000ef2 <__udivmoddi4+0xaa>
 8000e54:	4694      	mov	ip, r2
 8000e56:	458c      	cmp	ip, r1
 8000e58:	4686      	mov	lr, r0
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	d962      	bls.n	8000f26 <__udivmoddi4+0xde>
 8000e60:	b14a      	cbz	r2, 8000e76 <__udivmoddi4+0x2e>
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	4091      	lsls	r1, r2
 8000e68:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	4319      	orrs	r1, r3
 8000e72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f f68c 	uxth.w	r6, ip
 8000e7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e86:	fb07 1114 	mls	r1, r7, r4, r1
 8000e8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8e:	fb04 f106 	mul.w	r1, r4, r6
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x64>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e9e:	f080 8112 	bcs.w	80010c6 <__udivmoddi4+0x27e>
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	f240 810f 	bls.w	80010c6 <__udivmoddi4+0x27e>
 8000ea8:	3c02      	subs	r4, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1a59      	subs	r1, r3, r1
 8000eae:	fa1f f38e 	uxth.w	r3, lr
 8000eb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f606 	mul.w	r6, r0, r6
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d90a      	bls.n	8000edc <__udivmoddi4+0x94>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ece:	f080 80fc 	bcs.w	80010ca <__udivmoddi4+0x282>
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	f240 80f9 	bls.w	80010ca <__udivmoddi4+0x282>
 8000ed8:	4463      	add	r3, ip
 8000eda:	3802      	subs	r0, #2
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	b11d      	cbz	r5, 8000eee <__udivmoddi4+0xa6>
 8000ee6:	40d3      	lsrs	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	e9c5 3200 	strd	r3, r2, [r5]
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d905      	bls.n	8000f02 <__udivmoddi4+0xba>
 8000ef6:	b10d      	cbz	r5, 8000efc <__udivmoddi4+0xb4>
 8000ef8:	e9c5 0100 	strd	r0, r1, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4608      	mov	r0, r1
 8000f00:	e7f5      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f02:	fab3 f183 	clz	r1, r3
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d146      	bne.n	8000f98 <__udivmoddi4+0x150>
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0xcc>
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	f0c0 80f0 	bcc.w	80010f4 <__udivmoddi4+0x2ac>
 8000f14:	1a86      	subs	r6, r0, r2
 8000f16:	eb64 0303 	sbc.w	r3, r4, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d0e6      	beq.n	8000eee <__udivmoddi4+0xa6>
 8000f20:	e9c5 6300 	strd	r6, r3, [r5]
 8000f24:	e7e3      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8090 	bne.w	800104c <__udivmoddi4+0x204>
 8000f2c:	eba1 040c 	sub.w	r4, r1, ip
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f42:	fb08 4416 	mls	r4, r8, r6, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb07 f006 	mul.w	r0, r7, r6
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x11c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x11a>
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	f200 80cd 	bhi.w	80010fc <__udivmoddi4+0x2b4>
 8000f62:	4626      	mov	r6, r4
 8000f64:	1a1c      	subs	r4, r3, r0
 8000f66:	fa1f f38e 	uxth.w	r3, lr
 8000f6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f76:	fb00 f707 	mul.w	r7, r0, r7
 8000f7a:	429f      	cmp	r7, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x148>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x146>
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	f200 80b0 	bhi.w	80010ee <__udivmoddi4+0x2a6>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	1bdb      	subs	r3, r3, r7
 8000f92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f96:	e7a5      	b.n	8000ee4 <__udivmoddi4+0x9c>
 8000f98:	f1c1 0620 	rsb	r6, r1, #32
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000fa2:	431f      	orrs	r7, r3
 8000fa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fac:	ea43 030c 	orr.w	r3, r3, ip
 8000fb0:	40f4      	lsrs	r4, r6
 8000fb2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb6:	0c38      	lsrs	r0, r7, #16
 8000fb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fc0:	fa1f fc87 	uxth.w	ip, r7
 8000fc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000fd0:	45a1      	cmp	r9, r4
 8000fd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd6:	d90a      	bls.n	8000fee <__udivmoddi4+0x1a6>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fde:	f080 8084 	bcs.w	80010ea <__udivmoddi4+0x2a2>
 8000fe2:	45a1      	cmp	r9, r4
 8000fe4:	f240 8081 	bls.w	80010ea <__udivmoddi4+0x2a2>
 8000fe8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	eba4 0409 	sub.w	r4, r4, r9
 8000ff2:	fa1f f983 	uxth.w	r9, r3
 8000ff6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ffa:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001002:	fb03 fc0c 	mul.w	ip, r3, ip
 8001006:	45a4      	cmp	ip, r4
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x1d2>
 800100a:	193c      	adds	r4, r7, r4
 800100c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001010:	d267      	bcs.n	80010e2 <__udivmoddi4+0x29a>
 8001012:	45a4      	cmp	ip, r4
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0x29a>
 8001016:	3b02      	subs	r3, #2
 8001018:	443c      	add	r4, r7
 800101a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101e:	fba0 9302 	umull	r9, r3, r0, r2
 8001022:	eba4 040c 	sub.w	r4, r4, ip
 8001026:	429c      	cmp	r4, r3
 8001028:	46ce      	mov	lr, r9
 800102a:	469c      	mov	ip, r3
 800102c:	d351      	bcc.n	80010d2 <__udivmoddi4+0x28a>
 800102e:	d04e      	beq.n	80010ce <__udivmoddi4+0x286>
 8001030:	b155      	cbz	r5, 8001048 <__udivmoddi4+0x200>
 8001032:	ebb8 030e 	subs.w	r3, r8, lr
 8001036:	eb64 040c 	sbc.w	r4, r4, ip
 800103a:	fa04 f606 	lsl.w	r6, r4, r6
 800103e:	40cb      	lsrs	r3, r1
 8001040:	431e      	orrs	r6, r3
 8001042:	40cc      	lsrs	r4, r1
 8001044:	e9c5 6400 	strd	r6, r4, [r5]
 8001048:	2100      	movs	r1, #0
 800104a:	e750      	b.n	8000eee <__udivmoddi4+0xa6>
 800104c:	f1c2 0320 	rsb	r3, r2, #32
 8001050:	fa20 f103 	lsr.w	r1, r0, r3
 8001054:	fa0c fc02 	lsl.w	ip, ip, r2
 8001058:	fa24 f303 	lsr.w	r3, r4, r3
 800105c:	4094      	lsls	r4, r2
 800105e:	430c      	orrs	r4, r1
 8001060:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001064:	fa00 fe02 	lsl.w	lr, r0, r2
 8001068:	fa1f f78c 	uxth.w	r7, ip
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3110 	mls	r1, r8, r0, r3
 8001074:	0c23      	lsrs	r3, r4, #16
 8001076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107a:	fb00 f107 	mul.w	r1, r0, r7
 800107e:	4299      	cmp	r1, r3
 8001080:	d908      	bls.n	8001094 <__udivmoddi4+0x24c>
 8001082:	eb1c 0303 	adds.w	r3, ip, r3
 8001086:	f100 36ff 	add.w	r6, r0, #4294967295
 800108a:	d22c      	bcs.n	80010e6 <__udivmoddi4+0x29e>
 800108c:	4299      	cmp	r1, r3
 800108e:	d92a      	bls.n	80010e6 <__udivmoddi4+0x29e>
 8001090:	3802      	subs	r0, #2
 8001092:	4463      	add	r3, ip
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb3 f1f8 	udiv	r1, r3, r8
 800109c:	fb08 3311 	mls	r3, r8, r1, r3
 80010a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a4:	fb01 f307 	mul.w	r3, r1, r7
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x276>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010b4:	d213      	bcs.n	80010de <__udivmoddi4+0x296>
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	d911      	bls.n	80010de <__udivmoddi4+0x296>
 80010ba:	3902      	subs	r1, #2
 80010bc:	4464      	add	r4, ip
 80010be:	1ae4      	subs	r4, r4, r3
 80010c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c4:	e739      	b.n	8000f3a <__udivmoddi4+0xf2>
 80010c6:	4604      	mov	r4, r0
 80010c8:	e6f0      	b.n	8000eac <__udivmoddi4+0x64>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e706      	b.n	8000edc <__udivmoddi4+0x94>
 80010ce:	45c8      	cmp	r8, r9
 80010d0:	d2ae      	bcs.n	8001030 <__udivmoddi4+0x1e8>
 80010d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010da:	3801      	subs	r0, #1
 80010dc:	e7a8      	b.n	8001030 <__udivmoddi4+0x1e8>
 80010de:	4631      	mov	r1, r6
 80010e0:	e7ed      	b.n	80010be <__udivmoddi4+0x276>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e799      	b.n	800101a <__udivmoddi4+0x1d2>
 80010e6:	4630      	mov	r0, r6
 80010e8:	e7d4      	b.n	8001094 <__udivmoddi4+0x24c>
 80010ea:	46d6      	mov	lr, sl
 80010ec:	e77f      	b.n	8000fee <__udivmoddi4+0x1a6>
 80010ee:	4463      	add	r3, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e74d      	b.n	8000f90 <__udivmoddi4+0x148>
 80010f4:	4606      	mov	r6, r0
 80010f6:	4623      	mov	r3, r4
 80010f8:	4608      	mov	r0, r1
 80010fa:	e70f      	b.n	8000f1c <__udivmoddi4+0xd4>
 80010fc:	3e02      	subs	r6, #2
 80010fe:	4463      	add	r3, ip
 8001100:	e730      	b.n	8000f64 <__udivmoddi4+0x11c>
 8001102:	bf00      	nop

08001104 <__aeabi_idiv0>:
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f8c8 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000214 	.word	0x20000214

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ff99 	bl	8001250 <NVIC_EncodePriority>
 800131e:	4602      	mov	r2, r0
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff68 	bl	80011fc <__NVIC_SetPriority>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff3c 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <SysTick_Config>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ff0a 	bl	800118c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fef1 	bl	800118c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa91 	bl	8001994 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa48 	bl	8001928 <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	223f      	movs	r2, #63	@ 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_DMA_Start_IT+0x26>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e040      	b.n	800156c <HAL_DMA_Start_IT+0xa8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12f      	bne.n	800155e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9da 	bl	80018cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	223f      	movs	r2, #63	@ 0x3f
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0216 	orr.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0208 	orr.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e005      	b.n	800156a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00c      	b.n	80015ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001800 <HAL_DMA_IRQHandler+0x248>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001804 <HAL_DMA_IRQHandler+0x24c>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0a9b      	lsrs	r3, r3, #10
 80015d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2208      	movs	r2, #8
 80015e4:	409a      	lsls	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0204 	bic.w	r2, r2, #4
 800160a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	2208      	movs	r2, #8
 8001612:	409a      	lsls	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	2201      	movs	r2, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	2201      	movs	r2, #1
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	2204      	movs	r2, #4
 8001660:	409a      	lsls	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	2204      	movs	r2, #4
 800167e:	409a      	lsls	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2210      	movs	r2, #16
 8001696:	409a      	lsls	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d043      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03c      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	2210      	movs	r2, #16
 80016b4:	409a      	lsls	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
 80016e6:	e01f      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01b      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e016      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0208 	bic.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2220      	movs	r2, #32
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 808f 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8087 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174e:	2220      	movs	r2, #32
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d136      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_IRQHandler+0x1da>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	223f      	movs	r2, #63	@ 0x3f
 80017a8:	409a      	lsls	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d07e      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
        }
        return;
 80017ce:	e079      	b.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01d      	beq.n	800181a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e02c      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e01e      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0210 	bic.w	r2, r2, #16
 8001836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d032      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d022      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2205      	movs	r2, #5
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3301      	adds	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	d307      	bcc.n	80018a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f2      	bne.n	8001884 <HAL_DMA_IRQHandler+0x2cc>
 800189e:	e000      	b.n	80018a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018c4:	bf00      	nop
    }
  }
}
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b40      	cmp	r3, #64	@ 0x40
 80018f8:	d108      	bne.n	800190c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800190a:	e007      	b.n	800191c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3b10      	subs	r3, #16
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <DMA_CalcBaseAndBitshift+0x64>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001942:	4a13      	ldr	r2, [pc, #76]	@ (8001990 <DMA_CalcBaseAndBitshift+0x68>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d909      	bls.n	800196a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	@ 0x58
 8001968:	e007      	b.n	800197a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	aaaaaaab 	.word	0xaaaaaaab
 8001990:	0801c220 	.word	0x0801c220

08001994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11f      	bne.n	80019ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d856      	bhi.n	8001a62 <DMA_CheckFifoParam+0xce>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <DMA_CheckFifoParam+0x28>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019df 	.word	0x080019df
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	08001a63 	.word	0x08001a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d046      	beq.n	8001a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019dc:	e043      	b.n	8001a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019e6:	d140      	bne.n	8001a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e03d      	b.n	8001a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019f6:	d121      	bne.n	8001a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d837      	bhi.n	8001a6e <DMA_CheckFifoParam+0xda>
 80019fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <DMA_CheckFifoParam+0x70>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a1b 	.word	0x08001a1b
 8001a0c:	08001a15 	.word	0x08001a15
 8001a10:	08001a2d 	.word	0x08001a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e030      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d025      	beq.n	8001a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2a:	e022      	b.n	8001a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a34:	d11f      	bne.n	8001a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a3a:	e01c      	b.n	8001a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d903      	bls.n	8001a4a <DMA_CheckFifoParam+0xb6>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d003      	beq.n	8001a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a48:	e018      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4e:	e015      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a60:	e00b      	b.n	8001a7a <DMA_CheckFifoParam+0xe6>
      break;
 8001a62:	bf00      	nop
 8001a64:	e00a      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e008      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e006      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	@ (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e08:	887a      	ldrh	r2, [r7, #2]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	400b      	ands	r3, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e12b      	b.n	8002096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f008 fc5c 	bl	800a710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	@ 0x24
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e90:	f001 fc64 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8001e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a81      	ldr	r2, [pc, #516]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d807      	bhi.n	8001eb0 <HAL_I2C_Init+0x84>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a80      	ldr	r2, [pc, #512]	@ (80020a4 <HAL_I2C_Init+0x278>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bf94      	ite	ls
 8001ea8:	2301      	movls	r3, #1
 8001eaa:	2300      	movhi	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e006      	b.n	8001ebe <HAL_I2C_Init+0x92>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80020a8 <HAL_I2C_Init+0x27c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e7      	b.n	8002096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a78      	ldr	r2, [pc, #480]	@ (80020ac <HAL_I2C_Init+0x280>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d802      	bhi.n	8001f00 <HAL_I2C_Init+0xd4>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	e009      	b.n	8001f14 <HAL_I2C_Init+0xe8>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_I2C_Init+0x284>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	3301      	adds	r3, #1
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	495c      	ldr	r1, [pc, #368]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d819      	bhi.n	8001f68 <HAL_I2C_Init+0x13c>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e59      	subs	r1, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f48:	400b      	ands	r3, r1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_I2C_Init+0x138>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e59      	subs	r1, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	e051      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e04f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_I2C_Init+0x168>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e012      	b.n	8001fba <HAL_I2C_Init+0x18e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Init+0x196>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e022      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_I2C_Init+0x1bc>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e58      	subs	r0, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe6:	e00f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	6809      	ldr	r1, [r1, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002036:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6911      	ldr	r1, [r2, #16]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68d2      	ldr	r2, [r2, #12]
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	000186a0 	.word	0x000186a0
 80020a4:	001e847f 	.word	0x001e847f
 80020a8:	003d08ff 	.word	0x003d08ff
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ce:	f7ff f85d 	bl	800118c <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	f040 80d9 	bne.w	8002294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2319      	movs	r3, #25
 80020e8:	2201      	movs	r2, #1
 80020ea:	496d      	ldr	r1, [pc, #436]	@ (80022a0 <HAL_I2C_Mem_Write+0x1ec>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fc8f 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0cc      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_I2C_Mem_Write+0x56>
 8002106:	2302      	movs	r3, #2
 8002108:	e0c5      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d007      	beq.n	8002130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2221      	movs	r2, #33	@ 0x21
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a4d      	ldr	r2, [pc, #308]	@ (80022a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002172:	88f8      	ldrh	r0, [r7, #6]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fac6 	bl	8002714 <I2C_RequestMemoryWrite>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d052      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fd54 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11b      	bne.n	8002234 <HAL_I2C_Mem_Write+0x180>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1aa      	bne.n	8002192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fd47 	bl	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e016      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00100002 	.word	0x00100002
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c2:	f7fe ff63 	bl	800118c <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	f040 8218 	bne.w	8002706 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2319      	movs	r3, #25
 80022dc:	2201      	movs	r2, #1
 80022de:	497c      	ldr	r1, [pc, #496]	@ (80024d0 <HAL_I2C_Mem_Read+0x228>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb95 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e20b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Mem_Read+0x56>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e204      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	@ 0x22
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a5c      	ldr	r2, [pc, #368]	@ (80024d4 <HAL_I2C_Mem_Read+0x22c>)
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c
//    hal_flage = 1;//JH
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002366:	88f8      	ldrh	r0, [r7, #6]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4603      	mov	r3, r0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa62 	bl	8002840 <I2C_RequestMemoryRead>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_I2C_Mem_Read+0xe4>
    {
    	hal_flage = 1;//JH
 8002382:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <HAL_I2C_Mem_Read+0x230>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e1bd      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
//      hal_flage = 1;// Not follow rule can't debug
    }
//    hal_flage = 1;//NJH

    if (hi2c->XferSize == 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <HAL_I2C_Mem_Read+0x114>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e191      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11b      	bne.n	80023fc <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e171      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 2U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11b      	bne.n	800243c <HAL_I2C_Mem_Read+0x194>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002412:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	e151      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    }
//    hal_flage = 1;//NJH
    while (hi2c->XferSize > 0U)
 8002452:	e145      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	2b03      	cmp	r3, #3
 800245a:	f200 80f2 	bhi.w	8002642 <HAL_I2C_Mem_Read+0x39a>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	2b01      	cmp	r3, #1
 8002464:	d123      	bne.n	80024ae <HAL_I2C_Mem_Read+0x206>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002468:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fc7a 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Mem_Read+0x1d2>
          {
            return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e146      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024ac:	e118      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d14f      	bne.n	8002556 <HAL_I2C_Mem_Read+0x2ae>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	2200      	movs	r2, #0
 80024be:	4907      	ldr	r1, [pc, #28]	@ (80024dc <HAL_I2C_Mem_Read+0x234>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 faa5 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x238>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e11b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000
 80024d8:	20000218 	.word	0x20000218
 80024dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002554:	e0c4      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	496c      	ldr	r1, [pc, #432]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa55 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x2c8>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cb      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	4955      	ldr	r1, [pc, #340]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa27 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x324>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e09d      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002640:	e04e      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002644:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb8c 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Mem_Read+0x3ae>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e058      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d124      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        {
          if (hi2c->XferSize == 3U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	2b03      	cmp	r3, #3
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Read+0x406>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f aeb5 	bne.w	8002454 <HAL_I2C_Mem_Read+0x1ac>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
//    hal_flage = 1;//NJH
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
//    hal_flage = 1;//NJH
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
//	  hal_flage = 1;//NJH
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010004 	.word	0x00010004

08002714 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2200      	movs	r2, #0
 8002746:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f960 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d103      	bne.n	800276e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e05f      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002780:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	492d      	ldr	r1, [pc, #180]	@ (800283c <I2C_RequestMemoryWrite+0x128>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9bb 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e04c      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa46 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02b      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e021      	b.n	8002830 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa20 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e005      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	00010002 	.word	0x00010002

08002840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8c2 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a0:	d103      	bne.n	80028aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0aa      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	4952      	ldr	r1, [pc, #328]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f91d 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e097      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9a8 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e076      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	e021      	b.n	800296c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f982 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e050      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f967 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e035      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f82b 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ce:	d103      	bne.n	80029d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e013      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f886 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e048      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d044      	beq.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fbaf 	bl	800118c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d139      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	e00c      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e023      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0xca>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	e00c      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d093      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b12:	e071      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b22:	d123      	bne.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e067      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d041      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fe fb0a 	bl	800118c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d136      	bne.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10c      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e00b      	b.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e021      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e00b      	b.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f af6d 	bne.w	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8e3 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d028      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fa8f 	bl	800118c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d1c3      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f89b 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d028      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fe fa47 	bl	800118c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d016      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1c3      	bne.n	8002ce2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d70:	e049      	b.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d119      	bne.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e030      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fe f9ea 	bl	800118c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d016      	beq.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d1ae      	bne.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e34:	d11b      	bne.n	8002e6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe f92a 	bl	800118c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f926 	bl	800118c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f916 	bl	800118c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f912 	bl	800118c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f8cb 	bl	800118c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f8c7 	bl	800118c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f8aa 	bl	800118c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe f8a6 	bl	800118c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f88a 	bl	800118c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f886 	bl	800118c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f873 	bl	800118c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe f86f 	bl	800118c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe f82f 	bl	800118c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe f82b 	bl	800118c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fd fff0 	bl	800118c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fd ffec 	bl	800118c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fd ffda 	bl	800118c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fd ffd6 	bl	800118c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd ffaa 	bl	800118c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd ffa6 	bl	800118c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fd ff7f 	bl	800118c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd ff7b 	bl	800118c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff68 	bl	800118c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ff64 	bl	800118c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fd fe96 	bl	800118c <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd fe92 	bl	800118c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fe0a 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	0801c208 	.word	0x0801c208
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b094      	sub	sp, #80	@ 0x50
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80e1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e0db      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 800356e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003570:	e0db      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x208>)
 8003574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003576:	e0d8      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4621      	mov	r1, r4
 80035c4:	1a51      	subs	r1, r2, r1
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035dc:	4659      	mov	r1, fp
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e6:	4651      	mov	r1, sl
 80035e8:	018a      	lsls	r2, r1, #6
 80035ea:	4651      	mov	r1, sl
 80035ec:	ebb2 0801 	subs.w	r8, r2, r1
 80035f0:	4659      	mov	r1, fp
 80035f2:	eb63 0901 	sbc.w	r9, r3, r1
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360a:	4690      	mov	r8, r2
 800360c:	4699      	mov	r9, r3
 800360e:	4623      	mov	r3, r4
 8003610:	eb18 0303 	adds.w	r3, r8, r3
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	462b      	mov	r3, r5
 8003618:	eb49 0303 	adc.w	r3, r9, r3
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362a:	4629      	mov	r1, r5
 800362c:	024b      	lsls	r3, r1, #9
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003634:	4621      	mov	r1, r4
 8003636:	024a      	lsls	r2, r1, #9
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003648:	f7fd fbe6 	bl	8000e18 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	e058      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	4618      	mov	r0, r3
 8003660:	4611      	mov	r1, r2
 8003662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
 800366c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	0159      	lsls	r1, r3, #5
 800367e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003682:	0150      	lsls	r0, r2, #5
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4641      	mov	r1, r8
 800368a:	ebb2 0a01 	subs.w	sl, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb63 0b01 	sbc.w	fp, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036a8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ac:	eb63 050b 	sbc.w	r5, r3, fp
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	00eb      	lsls	r3, r5, #3
 80036ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036be:	00e2      	lsls	r2, r4, #3
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	18e3      	adds	r3, r4, r3
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	464b      	mov	r3, r9
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	61fa      	str	r2, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	f7fd fb8c 	bl	8000e18 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800372c:	4618      	mov	r0, r3
 800372e:	3750      	adds	r7, #80	@ 0x50
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a9b      	lsrs	r3, r3, #10
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	0801c218 	.word	0x0801c218

08003784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003788:	f7ff ffdc 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0b5b      	lsrs	r3, r3, #13
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	0801c218 	.word	0x0801c218

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07b      	b.n	80038b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f007 fb18 	bl	800ae34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0104 	and.w	r1, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	f003 0210 	and.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ce:	f7fd fc5d 	bl	800118c <HAL_GetTick>
 80038d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
 80038e6:	e12a      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_SPI_Transmit+0x36>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e122      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_SPI_Transmit+0x48>
 8003902:	2302      	movs	r3, #2
 8003904:	e11b      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2203      	movs	r2, #3
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003954:	d10f      	bne.n	8003976 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	d007      	beq.n	8003994 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800399c:	d152      	bne.n	8003a44 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0xee>
 80039a6:	8b7b      	ldrh	r3, [r7, #26]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d145      	bne.n	8003a38 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039d0:	e032      	b.n	8003a38 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d112      	bne.n	8003a06 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a04:	e018      	b.n	8003a38 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a06:	f7fd fbc1 	bl	800118c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d803      	bhi.n	8003a1e <HAL_SPI_Transmit+0x160>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_Transmit+0x166>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e082      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1c7      	bne.n	80039d2 <HAL_SPI_Transmit+0x114>
 8003a42:	e053      	b.n	8003aec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Transmit+0x194>
 8003a4c:	8b7b      	ldrh	r3, [r7, #26]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d147      	bne.n	8003ae2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a78:	e033      	b.n	8003ae2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d113      	bne.n	8003ab0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003aae:	e018      	b.n	8003ae2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab0:	f7fd fb6c 	bl	800118c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_Transmit+0x20a>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x210>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e02d      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1c6      	bne.n	8003a7a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fceb 	bl	80044cc <SPI_EndRxTxTransaction>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b088      	sub	sp, #32
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d001      	beq.n	8003b66 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	e104      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b6e:	d112      	bne.n	8003b96 <HAL_SPI_Receive+0x50>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8f3 	bl	8003d78 <HAL_SPI_TransmitReceive>
 8003b92:	4603      	mov	r3, r0
 8003b94:	e0ec      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b96:	f7fd faf9 	bl	800118c <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Receive+0x62>
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0e1      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_SPI_Receive+0x74>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0da      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	88fa      	ldrh	r2, [r7, #6]
 8003bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c08:	d10f      	bne.n	8003c2a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d007      	beq.n	8003c48 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d170      	bne.n	8003d32 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c50:	e035      	b.n	8003cbe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d115      	bne.n	8003c8c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f103 020c 	add.w	r2, r3, #12
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c8a:	e018      	b.n	8003cbe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8c:	f7fd fa7e 	bl	800118c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_Receive+0x15e>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_Receive+0x164>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e058      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1c4      	bne.n	8003c52 <HAL_SPI_Receive+0x10c>
 8003cc8:	e038      	b.n	8003d3c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d113      	bne.n	8003d00 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cfe:	e018      	b.n	8003d32 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fd fa44 	bl	800118c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_Receive+0x1d2>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Receive+0x1d8>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e01e      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1c6      	bne.n	8003cca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fb5d 	bl	8004400 <SPI_EndRxTransaction>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	@ 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d86:	2301      	movs	r3, #1
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d8a:	f7fd f9ff 	bl	800118c <HAL_GetTick>
 8003d8e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d96:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003da2:	7ffb      	ldrb	r3, [r7, #31]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d00c      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x4a>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dae:	d106      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x46>
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d001      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e17f      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x5c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x5c>
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e174      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x6e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e16d      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	887a      	ldrh	r2, [r7, #2]
 8003e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	887a      	ldrh	r2, [r7, #2]
 8003e2a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d007      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5e:	d17e      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_SPI_TransmitReceive+0xf6>
 8003e68:	8afb      	ldrh	r3, [r7, #22]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d16c      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e92:	e059      	b.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d11b      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x162>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x162>
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d113      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d119      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x1a4>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d014      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	b292      	uxth	r2, r2
 8003efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f1c:	f7fd f936 	bl	800118c <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d80d      	bhi.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d009      	beq.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0bc      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1a0      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x11c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d19b      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x11c>
 8003f5c:	e082      	b.n	8004064 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x1f4>
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d171      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f92:	e05d      	b.n	8004050 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d11c      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x264>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d017      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x264>
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d114      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d119      	bne.n	800401e <HAL_SPI_TransmitReceive+0x2a6>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d014      	beq.n	800401e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800401e:	f7fd f8b5 	bl	800118c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402a:	429a      	cmp	r2, r3
 800402c:	d803      	bhi.n	8004036 <HAL_SPI_TransmitReceive+0x2be>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d102      	bne.n	800403c <HAL_SPI_TransmitReceive+0x2c4>
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e038      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d19c      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x21c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d197      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fa2f 	bl	80044cc <SPI_EndRxTxTransaction>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e01d      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	@ 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
    return;
 800410a:	e0ce      	b.n	80042aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_SPI_IRQHandler+0x5e>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
    return;
 8004128:	e0bf      	b.n	80042aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <HAL_SPI_IRQHandler+0x7e>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80b0 	beq.w	80042aa <HAL_SPI_IRQHandler+0x1de>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80aa 	beq.w	80042aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b03      	cmp	r3, #3
 800416a:	d011      	beq.n	8004190 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0204 	orr.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	e00b      	b.n	80041a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
        return;
 80041a6:	e080      	b.n	80042aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04f      	beq.n	80042a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004216:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_SPI_IRQHandler+0x168>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d034      	beq.n	800429e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0203 	bic.w	r2, r2, #3
 8004242:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004250:	4a17      	ldr	r2, [pc, #92]	@ (80042b0 <HAL_SPI_IRQHandler+0x1e4>)
 8004252:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd f98b 	bl	8001574 <HAL_DMA_Abort_IT>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427c:	4a0c      	ldr	r2, [pc, #48]	@ (80042b0 <HAL_SPI_IRQHandler+0x1e4>)
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd f975 	bl	8001574 <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004294:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800429c:	e003      	b.n	80042a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f808 	bl	80042b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80042a4:	e000      	b.n	80042a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80042a6:	bf00      	nop
    return;
 80042a8:	bf00      	nop
  }
}
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	080042c9 	.word	0x080042c9

080042b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff ffe6 	bl	80042b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004300:	f7fc ff44 	bl	800118c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004310:	f7fc ff3c 	bl	800118c <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004316:	4b39      	ldr	r3, [pc, #228]	@ (80043fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	0d1b      	lsrs	r3, r3, #20
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004326:	e054      	b.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d050      	beq.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004330:	f7fc ff2c 	bl	800118c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d902      	bls.n	8004346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13d      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435e:	d111      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004368:	d004      	beq.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004372:	d107      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d10f      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e017      	b.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d19b      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004414:	d111      	bne.n	800443a <SPI_EndRxTransaction+0x3a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441e:	d004      	beq.n	800442a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	d107      	bne.n	800443a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004442:	d12a      	bne.n	800449a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444c:	d012      	beq.n	8004474 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	@ 0x80
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ff49 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02d      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e026      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	2101      	movs	r1, #1
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff ff36 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01a      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e013      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2101      	movs	r1, #1
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff ff23 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e000      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2201      	movs	r2, #1
 80044e0:	2102      	movs	r1, #2
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ff04 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e032      	b.n	8004564 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <SPI_EndRxTxTransaction+0xa0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <SPI_EndRxTxTransaction+0xa4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	0d5b      	lsrs	r3, r3, #21
 800450a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800451c:	d112      	bne.n	8004544 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	@ 0x80
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fee1 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e00f      	b.n	8004564 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	3b01      	subs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455a:	2b80      	cmp	r3, #128	@ 0x80
 800455c:	d0f2      	beq.n	8004544 <SPI_EndRxTxTransaction+0x78>
 800455e:	e000      	b.n	8004562 <SPI_EndRxTxTransaction+0x96>
        break;
 8004560:	bf00      	nop
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000000 	.word	0x20000000
 8004570:	165e9f81 	.word	0x165e9f81

08004574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e041      	b.n	800460a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f006 ffd4 	bl	800b548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fc58 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04e      	b.n	80046ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a23      	ldr	r2, [pc, #140]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_TIM_Base_Start_IT+0xc8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e041      	b.n	800478a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f006 fd30 	bl	800b180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fb98 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x24>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e022      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x3e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e015      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x58>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e008      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07c      	b.n	8004900 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0x82>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004814:	e013      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0x92>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004824:	e00b      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xa2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004834:	e003      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fe04 	bl	8005454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <HAL_TIM_PWM_Start+0x174>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_PWM_Start+0xcc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <HAL_TIM_PWM_Start+0x178>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_TIM_PWM_Start+0xd0>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_TIM_PWM_Start+0xd2>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004878:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a22      	ldr	r2, [pc, #136]	@ (8004908 <HAL_TIM_PWM_Start+0x174>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d01d      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <HAL_TIM_PWM_Start+0x17c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_TIM_PWM_Start+0x180>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <HAL_TIM_PWM_Start+0x184>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <HAL_TIM_PWM_Start+0x178>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIM_PWM_Start+0x188>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	@ (8004920 <HAL_TIM_PWM_Start+0x18c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d111      	bne.n	80048ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d010      	beq.n	80048fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	e007      	b.n	80048fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40001800 	.word	0x40001800

08004924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0202 	mvn.w	r2, #2
 8004958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa5b 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa4d 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa5e 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0204 	mvn.w	r2, #4
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa35 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa27 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fa38 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa0f 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa01 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa12 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0210 	mvn.w	r2, #16
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2208      	movs	r2, #8
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9e9 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9db 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f9ec 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0201 	mvn.w	r2, #1
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f004 fb60 	bl	8009150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fd7c 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9bd 	bl	8004e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00c      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0220 	mvn.w	r2, #32
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fd4e 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e0ae      	b.n	8004c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	f200 809f 	bhi.w	8004c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b32:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004c71 	.word	0x08004c71
 8004b40:	08004c71 	.word	0x08004c71
 8004b44:	08004c71 	.word	0x08004c71
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004c71 	.word	0x08004c71
 8004b50:	08004c71 	.word	0x08004c71
 8004b54:	08004c71 	.word	0x08004c71
 8004b58:	08004bef 	.word	0x08004bef
 8004b5c:	08004c71 	.word	0x08004c71
 8004b60:	08004c71 	.word	0x08004c71
 8004b64:	08004c71 	.word	0x08004c71
 8004b68:	08004c2f 	.word	0x08004c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa24 	bl	8004fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6999      	ldr	r1, [r3, #24]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]
      break;
 8004baa:	e064      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa74 	bl	80050a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6999      	ldr	r1, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]
      break;
 8004bec:	e043      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fac9 	bl	800518c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0208 	orr.w	r2, r2, #8
 8004c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0204 	bic.w	r2, r2, #4
 8004c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
      break;
 8004c2c:	e023      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fb1d 	bl	8005274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	021a      	lsls	r2, r3, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	61da      	str	r2, [r3, #28]
      break;
 8004c6e:	e002      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0b4      	b.n	8004e0e <HAL_TIM_ConfigClockSource+0x186>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cdc:	d03e      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0xd4>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce2:	f200 8087 	bhi.w	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	f000 8086 	beq.w	8004dfa <HAL_TIM_ConfigClockSource+0x172>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf2:	d87f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b70      	cmp	r3, #112	@ 0x70
 8004cf6:	d01a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xa6>
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d87b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b60      	cmp	r3, #96	@ 0x60
 8004cfe:	d050      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d00:	2b60      	cmp	r3, #96	@ 0x60
 8004d02:	d877      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b50      	cmp	r3, #80	@ 0x50
 8004d06:	d03c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xfa>
 8004d08:	2b50      	cmp	r3, #80	@ 0x50
 8004d0a:	d873      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d058      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d86f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b30      	cmp	r3, #48	@ 0x30
 8004d16:	d064      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d18:	2b30      	cmp	r3, #48	@ 0x30
 8004d1a:	d86b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d060      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d867      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d05a      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	e062      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3e:	f000 fb69 	bl	8005414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
      break;
 8004d5a:	e04f      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	f000 fb52 	bl	8005414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7e:	609a      	str	r2, [r3, #8]
      break;
 8004d80:	e03c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fac6 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2150      	movs	r1, #80	@ 0x50
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fb1f 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004da0:	e02c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fae5 	bl	800537e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2160      	movs	r1, #96	@ 0x60
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb0f 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e01c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 faa6 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	@ 0x40
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 faff 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004de0:	e00c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f000 faf6 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a46      	ldr	r2, [pc, #280]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <TIM_Base_SetConfig+0x130>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a42      	ldr	r2, [pc, #264]	@ (8004f9c <TIM_Base_SetConfig+0x134>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	@ (8004fa0 <TIM_Base_SetConfig+0x138>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a35      	ldr	r2, [pc, #212]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d027      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <TIM_Base_SetConfig+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d023      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a31      	ldr	r2, [pc, #196]	@ (8004f9c <TIM_Base_SetConfig+0x134>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01f      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a30      	ldr	r2, [pc, #192]	@ (8004fa0 <TIM_Base_SetConfig+0x138>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d017      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <TIM_Base_SetConfig+0x140>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8004fac <TIM_Base_SetConfig+0x144>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <TIM_Base_SetConfig+0x148>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb4 <TIM_Base_SetConfig+0x14c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <TIM_Base_SetConfig+0x150>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <TIM_Base_SetConfig+0x154>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a10      	ldr	r2, [pc, #64]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d103      	bne.n	8004f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]
  }
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40010400 	.word	0x40010400
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40014400 	.word	0x40014400
 8004fb0:	40014800 	.word	0x40014800
 8004fb4:	40001800 	.word	0x40001800
 8004fb8:	40001c00 	.word	0x40001c00
 8004fbc:	40002000 	.word	0x40002000

08004fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f023 0201 	bic.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f023 0302 	bic.w	r3, r3, #2
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a20      	ldr	r2, [pc, #128]	@ (8005098 <TIM_OC1_SetConfig+0xd8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC1_SetConfig+0x64>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <TIM_OC1_SetConfig+0xdc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10c      	bne.n	800503e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0308 	bic.w	r3, r3, #8
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <TIM_OC1_SetConfig+0xd8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_OC1_SetConfig+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a14      	ldr	r2, [pc, #80]	@ (800509c <TIM_OC1_SetConfig+0xdc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40010000 	.word	0x40010000
 800509c:	40010400 	.word	0x40010400

080050a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0210 	bic.w	r2, r3, #16
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0320 	bic.w	r3, r3, #32
 80050ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a22      	ldr	r2, [pc, #136]	@ (8005184 <TIM_OC2_SetConfig+0xe4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC2_SetConfig+0x68>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a21      	ldr	r2, [pc, #132]	@ (8005188 <TIM_OC2_SetConfig+0xe8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10d      	bne.n	8005124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <TIM_OC2_SetConfig+0xe4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC2_SetConfig+0x94>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <TIM_OC2_SetConfig+0xe8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d113      	bne.n	800515c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800513a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400

0800518c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a21      	ldr	r2, [pc, #132]	@ (800526c <TIM_OC3_SetConfig+0xe0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC3_SetConfig+0x66>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <TIM_OC3_SetConfig+0xe4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10d      	bne.n	800520e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800520c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a16      	ldr	r2, [pc, #88]	@ (800526c <TIM_OC3_SetConfig+0xe0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_OC3_SetConfig+0x92>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <TIM_OC3_SetConfig+0xe4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d113      	bne.n	8005246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000
 8005270:	40010400 	.word	0x40010400

08005274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a12      	ldr	r2, [pc, #72]	@ (8005318 <TIM_OC4_SetConfig+0xa4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_OC4_SetConfig+0x68>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a11      	ldr	r2, [pc, #68]	@ (800531c <TIM_OC4_SetConfig+0xa8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d109      	bne.n	80052f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400

08005320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 030a 	bic.w	r3, r3, #10
 800535c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537e:	b480      	push	{r7}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0210 	bic.w	r2, r3, #16
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f043 0307 	orr.w	r3, r3, #7
 8005400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800542e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	021a      	lsls	r2, r3, #8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	431a      	orrs	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2201      	movs	r2, #1
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	43db      	mvns	r3, r3
 8005476:	401a      	ands	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	431a      	orrs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e05a      	b.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d01d      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1a      	ldr	r2, [pc, #104]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e042      	b.n	8005658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f006 f800 	bl	800b5ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	@ 0x24
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fa95 	bl	8005b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	d112      	bne.n	80056a0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_UART_Receive_DMA+0x26>
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e00b      	b.n	80056a2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	461a      	mov	r2, r3
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f926 	bl	80058e8 <UART_Start_Receive_DMA>
 800569c:	4603      	mov	r3, r0
 800569e:	e000      	b.n	80056a2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056a0:	2302      	movs	r3, #2
  }
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b09c      	sub	sp, #112	@ 0x70
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d172      	bne.n	80057ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005708:	2200      	movs	r2, #0
 800570a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800571c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800572c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800572e:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005732:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800573a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e5      	bne.n	800570c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	667b      	str	r3, [r7, #100]	@ 0x64
 8005758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3314      	adds	r3, #20
 800575e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005760:	647a      	str	r2, [r7, #68]	@ 0x44
 8005762:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e5      	bne.n	8005740 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	623b      	str	r3, [r7, #32]
   return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578a:	663b      	str	r3, [r7, #96]	@ 0x60
 800578c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3314      	adds	r3, #20
 8005792:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005794:	633a      	str	r2, [r7, #48]	@ 0x30
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d119      	bne.n	80057ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80057d8:	61fa      	str	r2, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ee:	2200      	movs	r2, #0
 80057f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d106      	bne.n	8005808 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057fe:	4619      	mov	r1, r3
 8005800:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005802:	f7ff ff66 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005806:	e002      	b.n	800580e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005808:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800580a:	f003 fcc1 	bl	8009190 <HAL_UART_RxCpltCallback>
}
 800580e:	bf00      	nop
 8005810:	3770      	adds	r7, #112	@ 0x70
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	2b01      	cmp	r3, #1
 8005830:	d108      	bne.n	8005844 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	4619      	mov	r1, r3
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff48 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005842:	e002      	b.n	800584a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff30 	bl	80056aa <HAL_UART_RxHalfCpltCallback>
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005862:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586e:	2b80      	cmp	r3, #128	@ 0x80
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b21      	cmp	r3, #33	@ 0x21
 8005884:	d108      	bne.n	8005898 <UART_DMAError+0x46>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005892:	68b8      	ldr	r0, [r7, #8]
 8005894:	f000 f8c2 	bl	8005a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b22      	cmp	r3, #34	@ 0x22
 80058b8:	d108      	bne.n	80058cc <UART_DMAError+0x7a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f000 f8d0 	bl	8005a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d0:	f043 0210 	orr.w	r2, r3, #16
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f7ff fef0 	bl	80056be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b098      	sub	sp, #96	@ 0x60
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2222      	movs	r2, #34	@ 0x22
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	4a3e      	ldr	r2, [pc, #248]	@ (8005a10 <UART_Start_Receive_DMA+0x128>)
 8005916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a14 <UART_Start_Receive_DMA+0x12c>)
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	4a3c      	ldr	r2, [pc, #240]	@ (8005a18 <UART_Start_Receive_DMA+0x130>)
 8005926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	2200      	movs	r2, #0
 800592e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005930:	f107 0308 	add.w	r3, r7, #8
 8005934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	f7fb fdbc 	bl	80014c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d019      	beq.n	800599e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800597a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005980:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800598a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800598c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059be:	63ba      	str	r2, [r7, #56]	@ 0x38
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80059f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6a39      	ldr	r1, [r7, #32]
 80059f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e5      	bne.n	80059d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3760      	adds	r7, #96	@ 0x60
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	080056eb 	.word	0x080056eb
 8005a14:	08005817 	.word	0x08005817
 8005a18:	08005853 	.word	0x08005853

08005a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b089      	sub	sp, #36	@ 0x24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	61ba      	str	r2, [r7, #24]
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a60:	bf00      	nop
 8005a62:	3724      	adds	r7, #36	@ 0x24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b095      	sub	sp, #84	@ 0x54
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a94:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d119      	bne.n	8005b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f023 0310 	bic.w	r3, r3, #16
 8005afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b04:	61ba      	str	r2, [r7, #24]
 8005b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e5      	bne.n	8005ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b26:	bf00      	nop
 8005b28:	3754      	adds	r7, #84	@ 0x54
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b38:	b0c0      	sub	sp, #256	@ 0x100
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	68d9      	ldr	r1, [r3, #12]
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	ea40 0301 	orr.w	r3, r0, r1
 8005b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b8c:	f021 010c 	bic.w	r1, r1, #12
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	6999      	ldr	r1, [r3, #24]
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	ea40 0301 	orr.w	r3, r0, r1
 8005bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8005e00 <UART_SetConfig+0x2cc>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d005      	beq.n	8005bd4 <UART_SetConfig+0xa0>
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b8d      	ldr	r3, [pc, #564]	@ (8005e04 <UART_SetConfig+0x2d0>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d104      	bne.n	8005bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd4:	f7fd fdd6 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 8005bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bdc:	e003      	b.n	8005be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bde:	f7fd fdbd 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8005be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf0:	f040 810c 	bne.w	8005e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	1891      	adds	r1, r2, r2
 8005c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c16:	4621      	mov	r1, r4
 8005c18:	eb12 0801 	adds.w	r8, r2, r1
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	eb43 0901 	adc.w	r9, r3, r1
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c36:	4690      	mov	r8, r2
 8005c38:	4699      	mov	r9, r3
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	eb18 0303 	adds.w	r3, r8, r3
 8005c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c44:	462b      	mov	r3, r5
 8005c46:	eb49 0303 	adc.w	r3, r9, r3
 8005c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c62:	460b      	mov	r3, r1
 8005c64:	18db      	adds	r3, r3, r3
 8005c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c68:	4613      	mov	r3, r2
 8005c6a:	eb42 0303 	adc.w	r3, r2, r3
 8005c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c78:	f7fb f8ce 	bl	8000e18 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4b61      	ldr	r3, [pc, #388]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005c82:	fba3 2302 	umull	r2, r3, r3, r2
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	011c      	lsls	r4, r3, #4
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cac:	4641      	mov	r1, r8
 8005cae:	eb12 0a01 	adds.w	sl, r2, r1
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ccc:	4692      	mov	sl, r2
 8005cce:	469b      	mov	fp, r3
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8005cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	18db      	adds	r3, r3, r3
 8005cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cfe:	4613      	mov	r3, r2
 8005d00:	eb42 0303 	adc.w	r3, r2, r3
 8005d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d0e:	f7fb f883 	bl	8000e18 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	4b3b      	ldr	r3, [pc, #236]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	@ 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1acb      	subs	r3, r1, r3
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d2e:	4b36      	ldr	r3, [pc, #216]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005d30:	fba3 2302 	umull	r2, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d3c:	441c      	add	r4, r3
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d60:	4641      	mov	r1, r8
 8005d62:	1851      	adds	r1, r2, r1
 8005d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d66:	4649      	mov	r1, r9
 8005d68:	414b      	adcs	r3, r1
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d78:	4659      	mov	r1, fp
 8005d7a:	00cb      	lsls	r3, r1, #3
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d82:	4651      	mov	r1, sl
 8005d84:	00ca      	lsls	r2, r1, #3
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	189b      	adds	r3, r3, r2
 8005d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d94:	464b      	mov	r3, r9
 8005d96:	460a      	mov	r2, r1
 8005d98:	eb42 0303 	adc.w	r3, r2, r3
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005db4:	460b      	mov	r3, r1
 8005db6:	18db      	adds	r3, r3, r3
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dba:	4613      	mov	r3, r2
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dca:	f7fb f825 	bl	8000e18 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	@ 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3332      	adds	r3, #50	@ 0x32
 8005de6:	4a08      	ldr	r2, [pc, #32]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 0207 	and.w	r2, r3, #7
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4422      	add	r2, r4
 8005dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dfc:	e106      	b.n	800600c <UART_SetConfig+0x4d8>
 8005dfe:	bf00      	nop
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40011400 	.word	0x40011400
 8005e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e1e:	4642      	mov	r2, r8
 8005e20:	464b      	mov	r3, r9
 8005e22:	1891      	adds	r1, r2, r2
 8005e24:	6239      	str	r1, [r7, #32]
 8005e26:	415b      	adcs	r3, r3
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e2e:	4641      	mov	r1, r8
 8005e30:	1854      	adds	r4, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb43 0501 	adc.w	r5, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	00eb      	lsls	r3, r5, #3
 8005e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e46:	00e2      	lsls	r2, r4, #3
 8005e48:	4614      	mov	r4, r2
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	4643      	mov	r3, r8
 8005e4e:	18e3      	adds	r3, r4, r3
 8005e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e54:	464b      	mov	r3, r9
 8005e56:	eb45 0303 	adc.w	r3, r5, r3
 8005e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	008b      	lsls	r3, r1, #2
 8005e7e:	4621      	mov	r1, r4
 8005e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e84:	4621      	mov	r1, r4
 8005e86:	008a      	lsls	r2, r1, #2
 8005e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e8c:	f7fa ffc4 	bl	8000e18 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4b60      	ldr	r3, [pc, #384]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005e96:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	011c      	lsls	r4, r3, #4
 8005e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	61b9      	str	r1, [r7, #24]
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	1851      	adds	r1, r2, r1
 8005ec4:	6139      	str	r1, [r7, #16]
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	414b      	adcs	r3, r1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ed8:	4659      	mov	r1, fp
 8005eda:	00cb      	lsls	r3, r1, #3
 8005edc:	4651      	mov	r1, sl
 8005ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	00ca      	lsls	r2, r1, #3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4642      	mov	r2, r8
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	eb42 0303 	adc.w	r3, r2, r3
 8005efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f18:	4649      	mov	r1, r9
 8005f1a:	008b      	lsls	r3, r1, #2
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f22:	4641      	mov	r1, r8
 8005f24:	008a      	lsls	r2, r1, #2
 8005f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f2a:	f7fa ff75 	bl	8000e18 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	4b38      	ldr	r3, [pc, #224]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005f36:	fba3 2301 	umull	r2, r3, r3, r1
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2264      	movs	r2, #100	@ 0x64
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	1acb      	subs	r3, r1, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	@ 0x32
 8005f48:	4a33      	ldr	r2, [pc, #204]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f54:	441c      	add	r4, r3
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	1891      	adds	r1, r2, r2
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	415b      	adcs	r3, r3
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f74:	4641      	mov	r1, r8
 8005f76:	1851      	adds	r1, r2, r1
 8005f78:	6039      	str	r1, [r7, #0]
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	414b      	adcs	r3, r1
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	00cb      	lsls	r3, r1, #3
 8005f90:	4651      	mov	r1, sl
 8005f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f96:	4651      	mov	r1, sl
 8005f98:	00ca      	lsls	r2, r1, #3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	460a      	mov	r2, r1
 8005faa:	eb42 0303 	adc.w	r3, r2, r3
 8005fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fc8:	4649      	mov	r1, r9
 8005fca:	008b      	lsls	r3, r1, #2
 8005fcc:	4641      	mov	r1, r8
 8005fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	008a      	lsls	r2, r1, #2
 8005fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fda:	f7fa ff1d 	bl	8000e18 <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	2164      	movs	r1, #100	@ 0x64
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	3332      	adds	r3, #50	@ 0x32
 8005ff6:	4a08      	ldr	r2, [pc, #32]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4422      	add	r2, r4
 800600a:	609a      	str	r2, [r3, #8]
}
 800600c:	bf00      	nop
 800600e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006012:	46bd      	mov	sp, r7
 8006014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006018:	51eb851f 	.word	0x51eb851f

0800601c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0208 	add.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f103 0208 	add.w	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0208 	add.w	r2, r3, #8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d103      	bne.n	80060de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e00c      	b.n	80060f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3308      	adds	r3, #8
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e002      	b.n	80060ec <vListInsert+0x2e>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d2f6      	bcs.n	80060e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6892      	ldr	r2, [r2, #8]
 8006146:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6852      	ldr	r2, [r2, #4]
 8006150:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d103      	bne.n	8006164 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <xQueueGenericReset+0x20>
 8006198:	f240 120d 	movw	r2, #269	@ 0x10d
 800619c:	492a      	ldr	r1, [pc, #168]	@ (8006248 <xQueueGenericReset+0xc4>)
 800619e:	482b      	ldr	r0, [pc, #172]	@ (800624c <xQueueGenericReset+0xc8>)
 80061a0:	f00d fdc2 	bl	8013d28 <assertFail>

    taskENTER_CRITICAL();
 80061a4:	f002 fc62 	bl	8008a6c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	3b01      	subs	r3, #1
 80061d6:	68f9      	ldr	r1, [r7, #12]
 80061d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061da:	fb01 f303 	mul.w	r3, r1, r3
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	22ff      	movs	r2, #255	@ 0xff
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	22ff      	movs	r2, #255	@ 0xff
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d114      	bne.n	8006224 <xQueueGenericReset+0xa0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01a      	beq.n	8006238 <xQueueGenericReset+0xb4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3310      	adds	r3, #16
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fc1c 	bl	8007a44 <xTaskRemoveFromEventList>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d012      	beq.n	8006238 <xQueueGenericReset+0xb4>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006212:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <xQueueGenericReset+0xcc>)
 8006214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	e009      	b.n	8006238 <xQueueGenericReset+0xb4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3310      	adds	r3, #16
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fef7 	bl	800601c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3324      	adds	r3, #36	@ 0x24
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fef2 	bl	800601c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006238:	f002 fc46 	bl	8008ac8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800623c:	2301      	movs	r3, #1
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	0801b380 	.word	0x0801b380
 800624c:	0801b394 	.word	0x0801b394
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <xQueueGenericCreateStatic+0x20>
 8006268:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800626c:	4929      	ldr	r1, [pc, #164]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 800626e:	482a      	ldr	r0, [pc, #168]	@ (8006318 <xQueueGenericCreateStatic+0xc4>)
 8006270:	f00d fd5a 	bl	8013d28 <assertFail>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <xQueueGenericCreateStatic+0x32>
 800627a:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800627e:	4925      	ldr	r1, [pc, #148]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 8006280:	4826      	ldr	r0, [pc, #152]	@ (800631c <xQueueGenericCreateStatic+0xc8>)
 8006282:	f00d fd51 	bl	8013d28 <assertFail>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <xQueueGenericCreateStatic+0x3e>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <xQueueGenericCreateStatic+0x42>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueGenericCreateStatic+0x44>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <xQueueGenericCreateStatic+0x54>
 800629c:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80062a0:	491c      	ldr	r1, [pc, #112]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 80062a2:	481f      	ldr	r0, [pc, #124]	@ (8006320 <xQueueGenericCreateStatic+0xcc>)
 80062a4:	f00d fd40 	bl	8013d28 <assertFail>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xQueueGenericCreateStatic+0x60>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <xQueueGenericCreateStatic+0x64>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <xQueueGenericCreateStatic+0x66>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <xQueueGenericCreateStatic+0x76>
 80062be:	f240 1251 	movw	r2, #337	@ 0x151
 80062c2:	4914      	ldr	r1, [pc, #80]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 80062c4:	4817      	ldr	r0, [pc, #92]	@ (8006324 <xQueueGenericCreateStatic+0xd0>)
 80062c6:	f00d fd2f 	bl	8013d28 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80062ca:	2350      	movs	r3, #80	@ 0x50
 80062cc:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Queue_t ) );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b50      	cmp	r3, #80	@ 0x50
 80062d2:	d005      	beq.n	80062e0 <xQueueGenericCreateStatic+0x8c>
 80062d4:	f240 1259 	movw	r2, #345	@ 0x159
 80062d8:	490e      	ldr	r1, [pc, #56]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 80062da:	4813      	ldr	r0, [pc, #76]	@ (8006328 <xQueueGenericCreateStatic+0xd4>)
 80062dc:	f00d fd24 	bl	8013d28 <assertFail>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062e0:	693b      	ldr	r3, [r7, #16]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	617b      	str	r3, [r7, #20]

        if( pxNewQueue != NULL )
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <xQueueGenericCreateStatic+0xb4>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f862 	bl	80063cc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006308:	697b      	ldr	r3, [r7, #20]
    }
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	0801b380 	.word	0x0801b380
 8006318:	0801b39c 	.word	0x0801b39c
 800631c:	0801b3c0 	.word	0x0801b3c0
 8006320:	0801b3d8 	.word	0x0801b3d8
 8006324:	0801b410 	.word	0x0801b410
 8006328:	0801b448 	.word	0x0801b448

0800632c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	@ 0x28
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <xQueueGenericCreate+0x20>
 8006340:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8006344:	491e      	ldr	r1, [pc, #120]	@ (80063c0 <xQueueGenericCreate+0x94>)
 8006346:	481f      	ldr	r0, [pc, #124]	@ (80063c4 <xQueueGenericCreate+0x98>)
 8006348:	f00d fcee 	bl	8013d28 <assertFail>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <xQueueGenericCreate+0x3e>
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d101      	bne.n	800636e <xQueueGenericCreate+0x42>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericCreate+0x44>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <xQueueGenericCreate+0x54>
 8006374:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 8006378:	4911      	ldr	r1, [pc, #68]	@ (80063c0 <xQueueGenericCreate+0x94>)
 800637a:	4813      	ldr	r0, [pc, #76]	@ (80063c8 <xQueueGenericCreate+0x9c>)
 800637c:	f00d fcd4 	bl	8013d28 <assertFail>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	3350      	adds	r3, #80	@ 0x50
 8006384:	4618      	mov	r0, r3
 8006386:	f002 fc83 	bl	8008c90 <pvPortMalloc>
 800638a:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <xQueueGenericCreate+0x8a>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	3350      	adds	r3, #80	@ 0x50
 800639a:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063a4:	79fa      	ldrb	r2, [r7, #7]
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f80b 	bl	80063cc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80063b6:	69bb      	ldr	r3, [r7, #24]
    }
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	0801b380 	.word	0x0801b380
 80063c4:	0801b39c 	.word	0x0801b39c
 80063c8:	0801b464 	.word	0x0801b464

080063cc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063fa:	2101      	movs	r1, #1
 80063fc:	69b8      	ldr	r0, [r7, #24]
 80063fe:	f7ff fec1 	bl	8006184 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00e      	beq.n	800643e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f81f 	bl	800647c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af02      	add	r7, sp, #8
 800644c:	4603      	mov	r3, r0
 800644e:	6039      	str	r1, [r7, #0]
 8006450:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	6978      	ldr	r0, [r7, #20]
 8006466:	f7ff fef5 	bl	8006254 <xQueueGenericCreateStatic>
 800646a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff ffd0 	bl	8006412 <prvInitialiseMutex>

        return xNewQueue;
 8006472:	68fb      	ldr	r3, [r7, #12]
    }
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <xQueueGenericSend+0x28>
 8006498:	f240 3209 	movw	r2, #777	@ 0x309
 800649c:	4977      	ldr	r1, [pc, #476]	@ (800667c <xQueueGenericSend+0x200>)
 800649e:	4878      	ldr	r0, [pc, #480]	@ (8006680 <xQueueGenericSend+0x204>)
 80064a0:	f00d fc42 	bl	8013d28 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x36>
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0x3a>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0x3c>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <xQueueGenericSend+0x4c>
 80064bc:	f240 320a 	movw	r2, #778	@ 0x30a
 80064c0:	496e      	ldr	r1, [pc, #440]	@ (800667c <xQueueGenericSend+0x200>)
 80064c2:	4870      	ldr	r0, [pc, #448]	@ (8006684 <xQueueGenericSend+0x208>)
 80064c4:	f00d fc30 	bl	8013d28 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d103      	bne.n	80064d6 <xQueueGenericSend+0x5a>
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0x5e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0x60>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <xQueueGenericSend+0x70>
 80064e0:	f240 320b 	movw	r2, #779	@ 0x30b
 80064e4:	4965      	ldr	r1, [pc, #404]	@ (800667c <xQueueGenericSend+0x200>)
 80064e6:	4868      	ldr	r0, [pc, #416]	@ (8006688 <xQueueGenericSend+0x20c>)
 80064e8:	f00d fc1e 	bl	8013d28 <assertFail>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ec:	f001 fc52 	bl	8007d94 <xTaskGetSchedulerState>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <xQueueGenericSend+0x80>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <xQueueGenericSend+0x84>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <xQueueGenericSend+0x86>
 8006500:	2300      	movs	r3, #0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <xQueueGenericSend+0x96>
 8006506:	f240 320e 	movw	r2, #782	@ 0x30e
 800650a:	495c      	ldr	r1, [pc, #368]	@ (800667c <xQueueGenericSend+0x200>)
 800650c:	485f      	ldr	r0, [pc, #380]	@ (800668c <xQueueGenericSend+0x210>)
 800650e:	f00d fc0b 	bl	8013d28 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006512:	f002 faab 	bl	8008a6c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <xQueueGenericSend+0xac>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d12f      	bne.n	8006588 <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652c:	4a58      	ldr	r2, [pc, #352]	@ (8006690 <xQueueGenericSend+0x214>)
 800652e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006532:	6013      	str	r3, [r2, #0]
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	6a38      	ldr	r0, [r7, #32]
 800653a:	f000 fbdf 	bl	8006cfc <prvCopyDataToQueue>
 800653e:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <xQueueGenericSend+0xee>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	3324      	adds	r3, #36	@ 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fa79 	bl	8007a44 <xTaskRemoveFromEventList>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d013      	beq.n	8006580 <xQueueGenericSend+0x104>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006558:	4b4e      	ldr	r3, [pc, #312]	@ (8006694 <xQueueGenericSend+0x218>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	e00a      	b.n	8006580 <xQueueGenericSend+0x104>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <xQueueGenericSend+0x104>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006570:	4b48      	ldr	r3, [pc, #288]	@ (8006694 <xQueueGenericSend+0x218>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006580:	f002 faa2 	bl	8008ac8 <vPortExitCritical>
                return pdPASS;
 8006584:	2301      	movs	r3, #1
 8006586:	e075      	b.n	8006674 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <xQueueGenericSend+0x126>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800658e:	f002 fa9b 	bl	8008ac8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006596:	4a3e      	ldr	r2, [pc, #248]	@ (8006690 <xQueueGenericSend+0x214>)
 8006598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800659c:	6013      	str	r3, [r2, #0]
                    return errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	e068      	b.n	8006674 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 faab 	bl	8007b08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80065b6:	f002 fa87 	bl	8008ac8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80065ba:	f000 ffd1 	bl	8007560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80065be:	f002 fa55 	bl	8008a6c <vPortEnterCritical>
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d103      	bne.n	80065d8 <xQueueGenericSend+0x15c>
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSend+0x172>
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ee:	f002 fa6b 	bl	8008ac8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065f2:	1d3a      	adds	r2, r7, #4
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fa9a 	bl	8007b34 <xTaskCheckForTimeOut>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d12a      	bne.n	800665c <xQueueGenericSend+0x1e0>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006606:	6a38      	ldr	r0, [r7, #32]
 8006608:	f000 fc70 	bl	8006eec <prvIsQueueFull>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01e      	beq.n	8006650 <xQueueGenericSend+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006616:	4a1e      	ldr	r2, [pc, #120]	@ (8006690 <xQueueGenericSend+0x214>)
 8006618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800661c:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	3310      	adds	r3, #16
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f001 f9be 	bl	80079a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800662c:	6a38      	ldr	r0, [r7, #32]
 800662e:	f000 fbf5 	bl	8006e1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006632:	f000 ffa3 	bl	800757c <xTaskResumeAll>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	f47f af6a 	bne.w	8006512 <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 800663e:	4b15      	ldr	r3, [pc, #84]	@ (8006694 <xQueueGenericSend+0x218>)
 8006640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	e760      	b.n	8006512 <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006650:	6a38      	ldr	r0, [r7, #32]
 8006652:	f000 fbe3 	bl	8006e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006656:	f000 ff91 	bl	800757c <xTaskResumeAll>
 800665a:	e75a      	b.n	8006512 <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800665c:	6a38      	ldr	r0, [r7, #32]
 800665e:	f000 fbdd 	bl	8006e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006662:	f000 ff8b 	bl	800757c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666a:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <xQueueGenericSend+0x214>)
 800666c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006670:	6013      	str	r3, [r2, #0]
            return errQUEUE_FULL;
 8006672:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006674:	4618      	mov	r0, r3
 8006676:	3728      	adds	r7, #40	@ 0x28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	0801b380 	.word	0x0801b380
 8006680:	0801b394 	.word	0x0801b394
 8006684:	0801b4b4 	.word	0x0801b4b4
 8006688:	0801b504 	.word	0x0801b504
 800668c:	0801b54c 	.word	0x0801b54c
 8006690:	e000000c 	.word	0xe000000c
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	@ 0x30
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <xQueueGenericSendFromISR+0x24>
 80066b0:	f240 32dd 	movw	r2, #989	@ 0x3dd
 80066b4:	4943      	ldr	r1, [pc, #268]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 80066b6:	4844      	ldr	r0, [pc, #272]	@ (80067c8 <xQueueGenericSendFromISR+0x130>)
 80066b8:	f00d fb36 	bl	8013d28 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <xQueueGenericSendFromISR+0x32>
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueGenericSendFromISR+0x36>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueGenericSendFromISR+0x38>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <xQueueGenericSendFromISR+0x48>
 80066d4:	f240 32de 	movw	r2, #990	@ 0x3de
 80066d8:	493a      	ldr	r1, [pc, #232]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 80066da:	483c      	ldr	r0, [pc, #240]	@ (80067cc <xQueueGenericSendFromISR+0x134>)
 80066dc:	f00d fb24 	bl	8013d28 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d103      	bne.n	80066ee <xQueueGenericSendFromISR+0x56>
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <xQueueGenericSendFromISR+0x5a>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <xQueueGenericSendFromISR+0x5c>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <xQueueGenericSendFromISR+0x6c>
 80066f8:	f240 32df 	movw	r2, #991	@ 0x3df
 80066fc:	4931      	ldr	r1, [pc, #196]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 80066fe:	4834      	ldr	r0, [pc, #208]	@ (80067d0 <xQueueGenericSendFromISR+0x138>)
 8006700:	f00d fb12 	bl	8013d28 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006704:	f002 fa8a 	bl	8008c1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006708:	f3ef 8211 	mrs	r2, BASEPRI
 800670c:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61ba      	str	r2, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006720:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <xQueueGenericSendFromISR+0x9e>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d139      	bne.n	80067aa <xQueueGenericSendFromISR+0x112>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800673c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800674c:	f000 fad6 	bl	8006cfc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006750:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d112      	bne.n	8006780 <xQueueGenericSendFromISR+0xe8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <xQueueGenericSendFromISR+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	3324      	adds	r3, #36	@ 0x24
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f96c 	bl	8007a44 <xTaskRemoveFromEventList>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <xQueueGenericSendFromISR+0x10c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <xQueueGenericSendFromISR+0x10c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e011      	b.n	80067a4 <xQueueGenericSendFromISR+0x10c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006780:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006784:	2b7f      	cmp	r3, #127	@ 0x7f
 8006786:	d105      	bne.n	8006794 <xQueueGenericSendFromISR+0xfc>
 8006788:	f44f 628d 	mov.w	r2, #1128	@ 0x468
 800678c:	490d      	ldr	r1, [pc, #52]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 800678e:	4811      	ldr	r0, [pc, #68]	@ (80067d4 <xQueueGenericSendFromISR+0x13c>)
 8006790:	f00d faca 	bl	8013d28 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006798:	3301      	adds	r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	b25a      	sxtb	r2, r3
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80067a4:	2301      	movs	r3, #1
 80067a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 80067a8:	e001      	b.n	80067ae <xQueueGenericSendFromISR+0x116>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80067b8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3730      	adds	r7, #48	@ 0x30
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	0801b380 	.word	0x0801b380
 80067c8:	0801b394 	.word	0x0801b394
 80067cc:	0801b4b4 	.word	0x0801b4b4
 80067d0:	0801b504 	.word	0x0801b504
 80067d4:	0801b5a4 	.word	0x0801b5a4

080067d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	@ 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <xQueueGiveFromISR+0x20>
 80067ec:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 80067f0:	493c      	ldr	r1, [pc, #240]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 80067f2:	483d      	ldr	r0, [pc, #244]	@ (80068e8 <xQueueGiveFromISR+0x110>)
 80067f4:	f00d fa98 	bl	8013d28 <assertFail>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <xQueueGiveFromISR+0x34>
 8006800:	f240 428c 	movw	r2, #1164	@ 0x48c
 8006804:	4937      	ldr	r1, [pc, #220]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 8006806:	4839      	ldr	r0, [pc, #228]	@ (80068ec <xQueueGiveFromISR+0x114>)
 8006808:	f00d fa8e 	bl	8013d28 <assertFail>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <xQueueGiveFromISR+0x44>
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <xQueueGiveFromISR+0x48>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <xQueueGiveFromISR+0x4a>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <xQueueGiveFromISR+0x5a>
 8006826:	f240 4291 	movw	r2, #1169	@ 0x491
 800682a:	492e      	ldr	r1, [pc, #184]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 800682c:	4830      	ldr	r0, [pc, #192]	@ (80068f0 <xQueueGiveFromISR+0x118>)
 800682e:	f00d fa7b 	bl	8013d28 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006832:	f002 f9f3 	bl	8008c1c <vPortValidateInterruptPriority>
        __asm volatile
 8006836:	f3ef 8211 	mrs	r2, BASEPRI
 800683a:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	613a      	str	r2, [r7, #16]
 800684c:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 800684e:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006850:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006856:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d233      	bcs.n	80068ca <xQueueGiveFromISR+0xf2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006868:	75fb      	strb	r3, [r7, #23]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d112      	bne.n	80068a2 <xQueueGiveFromISR+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01f      	beq.n	80068c4 <xQueueGiveFromISR+0xec>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	3324      	adds	r3, #36	@ 0x24
 8006888:	4618      	mov	r0, r3
 800688a:	f001 f8db 	bl	8007a44 <xTaskRemoveFromEventList>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <xQueueGiveFromISR+0xec>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <xQueueGiveFromISR+0xec>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e010      	b.n	80068c4 <xQueueGiveFromISR+0xec>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80068a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068a8:	d105      	bne.n	80068b6 <xQueueGiveFromISR+0xde>
 80068aa:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 80068ae:	490d      	ldr	r1, [pc, #52]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 80068b0:	4810      	ldr	r0, [pc, #64]	@ (80068f4 <xQueueGiveFromISR+0x11c>)
 80068b2:	f00d fa39 	bl	8013d28 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	3301      	adds	r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	b25a      	sxtb	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80068c4:	2301      	movs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	e001      	b.n	80068ce <xQueueGiveFromISR+0xf6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f383 8811 	msr	BASEPRI, r3
    }
 80068d8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3728      	adds	r7, #40	@ 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	0801b380 	.word	0x0801b380
 80068e8:	0801b394 	.word	0x0801b394
 80068ec:	0801b5c0 	.word	0x0801b5c0
 80068f0:	0801b5dc 	.word	0x0801b5dc
 80068f4:	0801b5a4 	.word	0x0801b5a4

080068f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	@ 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d105      	bne.n	800691e <xQueueReceive+0x26>
 8006912:	f240 522c 	movw	r2, #1324	@ 0x52c
 8006916:	4962      	ldr	r1, [pc, #392]	@ (8006aa0 <xQueueReceive+0x1a8>)
 8006918:	4862      	ldr	r0, [pc, #392]	@ (8006aa4 <xQueueReceive+0x1ac>)
 800691a:	f00d fa05 	bl	8013d28 <assertFail>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d103      	bne.n	800692c <xQueueReceive+0x34>
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <xQueueReceive+0x38>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <xQueueReceive+0x3a>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <xQueueReceive+0x4a>
 8006936:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800693a:	4959      	ldr	r1, [pc, #356]	@ (8006aa0 <xQueueReceive+0x1a8>)
 800693c:	485a      	ldr	r0, [pc, #360]	@ (8006aa8 <xQueueReceive+0x1b0>)
 800693e:	f00d f9f3 	bl	8013d28 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006942:	f001 fa27 	bl	8007d94 <xTaskGetSchedulerState>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <xQueueReceive+0x5a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <xQueueReceive+0x5e>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueReceive+0x60>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <xQueueReceive+0x70>
 800695c:	f240 5235 	movw	r2, #1333	@ 0x535
 8006960:	494f      	ldr	r1, [pc, #316]	@ (8006aa0 <xQueueReceive+0x1a8>)
 8006962:	4852      	ldr	r0, [pc, #328]	@ (8006aac <xQueueReceive+0x1b4>)
 8006964:	f00d f9e0 	bl	8013d28 <assertFail>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006968:	f002 f880 	bl	8008a6c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006970:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01f      	beq.n	80069b8 <xQueueReceive+0xc0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	6a38      	ldr	r0, [r7, #32]
 800697c:	f000 fa28 	bl	8006dd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	1e5a      	subs	r2, r3, #1
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <xQueueReceive+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	3310      	adds	r3, #16
 8006994:	4618      	mov	r0, r3
 8006996:	f001 f855 	bl	8007a44 <xTaskRemoveFromEventList>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <xQueueReceive+0xb8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80069a0:	4b43      	ldr	r3, [pc, #268]	@ (8006ab0 <xQueueReceive+0x1b8>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80069b0:	f002 f88a 	bl	8008ac8 <vPortExitCritical>
                return pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e06f      	b.n	8006a98 <xQueueReceive+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueReceive+0xce>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80069be:	f002 f883 	bl	8008ac8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e068      	b.n	8006a98 <xQueueReceive+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <xQueueReceive+0xe2>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80069cc:	f107 0314 	add.w	r3, r7, #20
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f899 	bl	8007b08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80069da:	f002 f875 	bl	8008ac8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80069de:	f000 fdbf 	bl	8007560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80069e2:	f002 f843 	bl	8008a6c <vPortEnterCritical>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d103      	bne.n	80069fc <xQueueReceive+0x104>
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d103      	bne.n	8006a12 <xQueueReceive+0x11a>
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a12:	f002 f859 	bl	8008ac8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a16:	1d3a      	adds	r2, r7, #4
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f888 	bl	8007b34 <xTaskCheckForTimeOut>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d129      	bne.n	8006a7e <xQueueReceive+0x186>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a2a:	6a38      	ldr	r0, [r7, #32]
 8006a2c:	f000 fa48 	bl	8006ec0 <prvIsQueueEmpty>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01d      	beq.n	8006a72 <xQueueReceive+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab4 <xQueueReceive+0x1bc>)
 8006a3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006a40:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3324      	adds	r3, #36	@ 0x24
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 ffac 	bl	80079a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006a50:	6a38      	ldr	r0, [r7, #32]
 8006a52:	f000 f9e3 	bl	8006e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006a56:	f000 fd91 	bl	800757c <xTaskResumeAll>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d183      	bne.n	8006968 <xQueueReceive+0x70>
                {
                    portYIELD_WITHIN_API();
 8006a60:	4b13      	ldr	r3, [pc, #76]	@ (8006ab0 <xQueueReceive+0x1b8>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	e77a      	b.n	8006968 <xQueueReceive+0x70>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006a72:	6a38      	ldr	r0, [r7, #32]
 8006a74:	f000 f9d2 	bl	8006e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006a78:	f000 fd80 	bl	800757c <xTaskResumeAll>
 8006a7c:	e774      	b.n	8006968 <xQueueReceive+0x70>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006a7e:	6a38      	ldr	r0, [r7, #32]
 8006a80:	f000 f9cc 	bl	8006e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006a84:	f000 fd7a 	bl	800757c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a88:	6a38      	ldr	r0, [r7, #32]
 8006a8a:	f000 fa19 	bl	8006ec0 <prvIsQueueEmpty>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f43f af69 	beq.w	8006968 <xQueueReceive+0x70>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006a96:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	@ 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	0801b380 	.word	0x0801b380
 8006aa4:	0801b644 	.word	0x0801b644
 8006aa8:	0801b650 	.word	0x0801b650
 8006aac:	0801b54c 	.word	0x0801b54c
 8006ab0:	e000ed04 	.word	0xe000ed04
 8006ab4:	e000000c 	.word	0xe000000c

08006ab8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	@ 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d105      	bne.n	8006ae0 <xQueueSemaphoreTake+0x28>
 8006ad4:	f240 52be 	movw	r2, #1470	@ 0x5be
 8006ad8:	4975      	ldr	r1, [pc, #468]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006ada:	4876      	ldr	r0, [pc, #472]	@ (8006cb4 <xQueueSemaphoreTake+0x1fc>)
 8006adc:	f00d f924 	bl	8013d28 <assertFail>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <xQueueSemaphoreTake+0x3c>
 8006ae8:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 8006aec:	4970      	ldr	r1, [pc, #448]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006aee:	4872      	ldr	r0, [pc, #456]	@ (8006cb8 <xQueueSemaphoreTake+0x200>)
 8006af0:	f00d f91a 	bl	8013d28 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af4:	f001 f94e 	bl	8007d94 <xTaskGetSchedulerState>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <xQueueSemaphoreTake+0x4c>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <xQueueSemaphoreTake+0x50>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <xQueueSemaphoreTake+0x52>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <xQueueSemaphoreTake+0x62>
 8006b0e:	f240 52c7 	movw	r2, #1479	@ 0x5c7
 8006b12:	4967      	ldr	r1, [pc, #412]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006b14:	4869      	ldr	r0, [pc, #420]	@ (8006cbc <xQueueSemaphoreTake+0x204>)
 8006b16:	f00d f907 	bl	8013d28 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006b1a:	f001 ffa7 	bl	8008a6c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d024      	beq.n	8006b74 <xQueueSemaphoreTake+0xbc>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	1e5a      	subs	r2, r3, #1
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <xQueueSemaphoreTake+0x8c>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b3a:	f001 fabf 	bl	80080bc <pvTaskIncrementMutexHeldCount>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00f      	beq.n	8006b6c <xQueueSemaphoreTake+0xb4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3310      	adds	r3, #16
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 ff77 	bl	8007a44 <xTaskRemoveFromEventList>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <xQueueSemaphoreTake+0xb4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006b5c:	4b58      	ldr	r3, [pc, #352]	@ (8006cc0 <xQueueSemaphoreTake+0x208>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006b6c:	f001 ffac 	bl	8008ac8 <vPortExitCritical>
                return pdPASS;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e098      	b.n	8006ca6 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <xQueueSemaphoreTake+0xdc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <xQueueSemaphoreTake+0xd4>
 8006b80:	f240 620d 	movw	r2, #1549	@ 0x60d
 8006b84:	494a      	ldr	r1, [pc, #296]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006b86:	484f      	ldr	r0, [pc, #316]	@ (8006cc4 <xQueueSemaphoreTake+0x20c>)
 8006b88:	f00d f8ce 	bl	8013d28 <assertFail>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006b8c:	f001 ff9c 	bl	8008ac8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e088      	b.n	8006ca6 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <xQueueSemaphoreTake+0xf0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 ffb2 	bl	8007b08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006ba8:	f001 ff8e 	bl	8008ac8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006bac:	f000 fcd8 	bl	8007560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006bb0:	f001 ff5c 	bl	8008a6c <vPortEnterCritical>
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d103      	bne.n	8006bca <xQueueSemaphoreTake+0x112>
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d103      	bne.n	8006be0 <xQueueSemaphoreTake+0x128>
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006be0:	f001 ff72 	bl	8008ac8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be4:	463a      	mov	r2, r7
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ffa1 	bl	8007b34 <xTaskCheckForTimeOut>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d138      	bne.n	8006c6a <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf8:	69f8      	ldr	r0, [r7, #28]
 8006bfa:	f000 f961 	bl	8006ec0 <prvIsQueueEmpty>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02c      	beq.n	8006c5e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c08:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc8 <xQueueSemaphoreTake+0x210>)
 8006c0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006c0e:	6013      	str	r3, [r2, #0]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <xQueueSemaphoreTake+0x174>
                        {
                            taskENTER_CRITICAL();
 8006c18:	f001 ff28 	bl	8008a6c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 f8d5 	bl	8007dd0 <xTaskPriorityInherit>
 8006c26:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 8006c28:	f001 ff4e 	bl	8008ac8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3324      	adds	r3, #36	@ 0x24
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 feb7 	bl	80079a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006c3a:	69f8      	ldr	r0, [r7, #28]
 8006c3c:	f000 f8ee 	bl	8006e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006c40:	f000 fc9c 	bl	800757c <xTaskResumeAll>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f47f af67 	bne.w	8006b1a <xQueueSemaphoreTake+0x62>
                {
                    portYIELD_WITHIN_API();
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <xQueueSemaphoreTake+0x208>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	e75d      	b.n	8006b1a <xQueueSemaphoreTake+0x62>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006c5e:	69f8      	ldr	r0, [r7, #28]
 8006c60:	f000 f8dc 	bl	8006e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006c64:	f000 fc8a 	bl	800757c <xTaskResumeAll>
 8006c68:	e757      	b.n	8006b1a <xQueueSemaphoreTake+0x62>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f000 f8d6 	bl	8006e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006c70:	f000 fc84 	bl	800757c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c74:	69f8      	ldr	r0, [r7, #28]
 8006c76:	f000 f923 	bl	8006ec0 <prvIsQueueEmpty>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f43f af4c 	beq.w	8006b1a <xQueueSemaphoreTake+0x62>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <xQueueSemaphoreTake+0x1ec>
                        {
                            taskENTER_CRITICAL();
 8006c88:	f001 fef0 	bl	8008a6c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c8c:	69f8      	ldr	r0, [r7, #28]
 8006c8e:	f000 f81d 	bl	8006ccc <prvGetDisinheritPriorityAfterTimeout>
 8006c92:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 f984 	bl	8007fa8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006ca0:	f001 ff12 	bl	8008ac8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006ca4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	@ 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	0801b380 	.word	0x0801b380
 8006cb4:	0801b644 	.word	0x0801b644
 8006cb8:	0801b5c0 	.word	0x0801b5c0
 8006cbc:	0801b54c 	.word	0x0801b54c
 8006cc0:	e000ed04 	.word	0xe000ed04
 8006cc4:	0801b6a4 	.word	0x0801b6a4
 8006cc8:	e000000c 	.word	0xe000000c

08006ccc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1c3 0306 	rsb	r3, r3, #6
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e001      	b.n	8006cee <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006cee:	68fb      	ldr	r3, [r7, #12]
    }
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d14d      	bne.n	8006dbe <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 f8c8 	bl	8007ebc <xTaskPriorityDisinherit>
 8006d2c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	e043      	b.n	8006dbe <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d119      	bne.n	8006d70 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6858      	ldr	r0, [r3, #4]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d44:	461a      	mov	r2, r3
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	f012 fae6 	bl	8019318 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	441a      	add	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d32b      	bcc.n	8006dbe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e026      	b.n	8006dbe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68d8      	ldr	r0, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	f012 facc 	bl	8019318 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	425b      	negs	r3, r3
 8006d8a:	441a      	add	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d207      	bcs.n	8006dac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da4:	425b      	negs	r3, r3
 8006da6:	441a      	add	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d105      	bne.n	8006dbe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d018      	beq.n	8006e14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	441a      	add	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d303      	bcc.n	8006e04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68d9      	ldr	r1, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f012 fa82 	bl	8019318 <memcpy>
    }
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006e24:	f001 fe22 	bl	8008a6c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e30:	e011      	b.n	8006e56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d012      	beq.n	8006e60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3324      	adds	r3, #36	@ 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fe00 	bl	8007a44 <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006e4a:	f000 fed5 	bl	8007bf8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dce9      	bgt.n	8006e32 <prvUnlockQueue+0x16>
 8006e5e:	e000      	b.n	8006e62 <prvUnlockQueue+0x46>
                        break;
 8006e60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	22ff      	movs	r2, #255	@ 0xff
 8006e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006e6a:	f001 fe2d 	bl	8008ac8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006e6e:	f001 fdfd 	bl	8008a6c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e7a:	e011      	b.n	8006ea0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d012      	beq.n	8006eaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3310      	adds	r3, #16
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fddb 	bl	8007a44 <xTaskRemoveFromEventList>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006e94:	f000 feb0 	bl	8007bf8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dce9      	bgt.n	8006e7c <prvUnlockQueue+0x60>
 8006ea8:	e000      	b.n	8006eac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006eaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	22ff      	movs	r2, #255	@ 0xff
 8006eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006eb4:	f001 fe08 	bl	8008ac8 <vPortExitCritical>
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006ec8:	f001 fdd0 	bl	8008a6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e001      	b.n	8006ede <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006ede:	f001 fdf3 	bl	8008ac8 <vPortExitCritical>

    return xReturn;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006ef4:	f001 fdba 	bl	8008a6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d102      	bne.n	8006f0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e001      	b.n	8006f0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006f0e:	f001 fddb 	bl	8008ac8 <vPortExitCritical>

    return xReturn;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e014      	b.n	8006f56 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006f6c <vQueueAddToRegistry+0x50>)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f38:	490c      	ldr	r1, [pc, #48]	@ (8006f6c <vQueueAddToRegistry+0x50>)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006f42:	4a0a      	ldr	r2, [pc, #40]	@ (8006f6c <vQueueAddToRegistry+0x50>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4413      	add	r3, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006f4e:	e006      	b.n	8006f5e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d9e7      	bls.n	8006f2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	2000021c 	.word	0x2000021c

08006f70 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006f80:	f001 fd74 	bl	8008a6c <vPortEnterCritical>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d103      	bne.n	8006f9a <vQueueWaitForMessageRestricted+0x2a>
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d103      	bne.n	8006fb0 <vQueueWaitForMessageRestricted+0x40>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fb0:	f001 fd8a 	bl	8008ac8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d106      	bne.n	8006fca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3324      	adds	r3, #36	@ 0x24
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fd13 	bl	80079f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006fca:	6978      	ldr	r0, [r7, #20]
 8006fcc:	f7ff ff26 	bl	8006e1c <prvUnlockQueue>
    }
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	@ 0x30
 8006fdc:	af04      	add	r7, sp, #16
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <xTaskCreateStatic+0x20>
 8006fec:	f240 2243 	movw	r2, #579	@ 0x243
 8006ff0:	4920      	ldr	r1, [pc, #128]	@ (8007074 <xTaskCreateStatic+0x9c>)
 8006ff2:	4821      	ldr	r0, [pc, #132]	@ (8007078 <xTaskCreateStatic+0xa0>)
 8006ff4:	f00c fe98 	bl	8013d28 <assertFail>
        configASSERT( pxTaskBuffer != NULL );
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d105      	bne.n	800700a <xTaskCreateStatic+0x32>
 8006ffe:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8007002:	491c      	ldr	r1, [pc, #112]	@ (8007074 <xTaskCreateStatic+0x9c>)
 8007004:	481d      	ldr	r0, [pc, #116]	@ (800707c <xTaskCreateStatic+0xa4>)
 8007006:	f00c fe8f 	bl	8013d28 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800700a:	2364      	movs	r3, #100	@ 0x64
 800700c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b64      	cmp	r3, #100	@ 0x64
 8007012:	d005      	beq.n	8007020 <xTaskCreateStatic+0x48>
 8007014:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8007018:	4916      	ldr	r1, [pc, #88]	@ (8007074 <xTaskCreateStatic+0x9c>)
 800701a:	4819      	ldr	r0, [pc, #100]	@ (8007080 <xTaskCreateStatic+0xa8>)
 800701c:	f00c fe84 	bl	8013d28 <assertFail>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007020:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01e      	beq.n	8007066 <xTaskCreateStatic+0x8e>
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01b      	beq.n	8007066 <xTaskCreateStatic+0x8e>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007040:	2300      	movs	r3, #0
 8007042:	9303      	str	r3, [sp, #12]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	9302      	str	r3, [sp, #8]
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f859 	bl	8007110 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800705e:	69f8      	ldr	r0, [r7, #28]
 8007060:	f000 f8f4 	bl	800724c <prvAddNewTaskToReadyList>
 8007064:	e001      	b.n	800706a <xTaskCreateStatic+0x92>
        }
        else
        {
            xReturn = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800706a:	69bb      	ldr	r3, [r7, #24]
    }
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	0801b750 	.word	0x0801b750
 8007078:	0801b764 	.word	0x0801b764
 800707c:	0801b77c 	.word	0x0801b77c
 8007080:	0801b794 	.word	0x0801b794

08007084 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	@ 0x30
 8007088:	af04      	add	r7, sp, #16
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fdf9 	bl	8008c90 <pvPortMalloc>
 800709e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070a6:	2064      	movs	r0, #100	@ 0x64
 80070a8:	f001 fdf2 	bl	8008c90 <pvPortMalloc>
 80070ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ba:	e005      	b.n	80070c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f001 feaf 	bl	8008e20 <vPortFree>
 80070c2:	e001      	b.n	80070c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d017      	beq.n	80070fe <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	2300      	movs	r3, #0
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f80f 	bl	8007110 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80070f2:	69f8      	ldr	r0, [r7, #28]
 80070f4:	f000 f8aa 	bl	800724c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80070f8:	2301      	movs	r3, #1
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e002      	b.n	8007104 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007104:	69bb      	ldr	r3, [r7, #24]
    }
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	461a      	mov	r2, r3
 8007128:	21a5      	movs	r1, #165	@ 0xa5
 800712a:	f012 f8af 	bl	801928c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007138:	3b01      	subs	r3, #1
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <prvInitialiseNewTask+0x4e>
 8007152:	f240 3259 	movw	r2, #857	@ 0x359
 8007156:	493b      	ldr	r1, [pc, #236]	@ (8007244 <prvInitialiseNewTask+0x134>)
 8007158:	483b      	ldr	r0, [pc, #236]	@ (8007248 <prvInitialiseNewTask+0x138>)
 800715a:	f00c fde5 	bl	8013d28 <assertFail>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	641a      	str	r2, [r3, #64]	@ 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01f      	beq.n	80071aa <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e012      	b.n	8007196 <prvInitialiseNewTask+0x86>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	7819      	ldrb	r1, [r3, #0]
 8007178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4413      	add	r3, r2
 800717e:	3334      	adds	r3, #52	@ 0x34
 8007180:	460a      	mov	r2, r1
 8007182:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4413      	add	r3, r2
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <prvInitialiseNewTask+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3301      	adds	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b09      	cmp	r3, #9
 800719a:	d9e9      	bls.n	8007170 <prvInitialiseNewTask+0x60>
 800719c:	e000      	b.n	80071a0 <prvInitialiseNewTask+0x90>
            {
                break;
 800719e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80071a8:	e003      	b.n	80071b2 <prvInitialiseNewTask+0xa2>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2b05      	cmp	r3, #5
 80071b6:	d901      	bls.n	80071bc <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071b8:	2305      	movs	r3, #5
 80071ba:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	2200      	movs	r2, #0
 80071cc:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	3304      	adds	r3, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe ff42 	bl	800605c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	3318      	adds	r3, #24
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe ff3d 	bl	800605c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	f1c3 0206 	rsb	r2, r3, #6
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2200      	movs	r2, #0
 80071fc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	2200      	movs	r2, #0
 8007202:	659a      	str	r2, [r3, #88]	@ 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	335c      	adds	r3, #92	@ 0x5c
 8007208:	2204      	movs	r2, #4
 800720a:	2100      	movs	r1, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f012 f83d 	bl	801928c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	3360      	adds	r3, #96	@ 0x60
 8007216:	2201      	movs	r2, #1
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f012 f836 	bl	801928c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	6938      	ldr	r0, [r7, #16]
 8007226:	f001 fb0d 	bl	8008844 <pxPortInitialiseStack>
 800722a:	4602      	mov	r2, r0
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <prvInitialiseNewTask+0x12c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800723a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800723c:	bf00      	nop
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	0801b750 	.word	0x0801b750
 8007248:	0801b7b0 	.word	0x0801b7b0

0800724c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007254:	f001 fc0a 	bl	8008a6c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007258:	4b2c      	ldr	r3, [pc, #176]	@ (800730c <prvAddNewTaskToReadyList+0xc0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3301      	adds	r3, #1
 800725e:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <prvAddNewTaskToReadyList+0xc0>)
 8007260:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007262:	4b2b      	ldr	r3, [pc, #172]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800726a:	4a29      	ldr	r2, [pc, #164]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007270:	4b26      	ldr	r3, [pc, #152]	@ (800730c <prvAddNewTaskToReadyList+0xc0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d110      	bne.n	800729a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007278:	f000 fcd4 	bl	8007c24 <prvInitialiseTaskLists>
 800727c:	e00d      	b.n	800729a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800727e:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <prvAddNewTaskToReadyList+0xc8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007286:	4b22      	ldr	r3, [pc, #136]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	429a      	cmp	r2, r3
 8007292:	d802      	bhi.n	800729a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007294:	4a1e      	ldr	r2, [pc, #120]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800729a:	4b1f      	ldr	r3, [pc, #124]	@ (8007318 <prvAddNewTaskToReadyList+0xcc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007318 <prvAddNewTaskToReadyList+0xcc>)
 80072a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007318 <prvAddNewTaskToReadyList+0xcc>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	2201      	movs	r2, #1
 80072b2:	409a      	lsls	r2, r3
 80072b4:	4b19      	ldr	r3, [pc, #100]	@ (800731c <prvAddNewTaskToReadyList+0xd0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	4a18      	ldr	r2, [pc, #96]	@ (800731c <prvAddNewTaskToReadyList+0xd0>)
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <prvAddNewTaskToReadyList+0xd4>)
 80072cc:	441a      	add	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3304      	adds	r3, #4
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7fe fece 	bl	8006076 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80072da:	f001 fbf5 	bl	8008ac8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80072de:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <prvAddNewTaskToReadyList+0xc8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d207      	bcs.n	8007304 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80072f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <prvAddNewTaskToReadyList+0xd8>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20000358 	.word	0x20000358
 8007310:	2000026c 	.word	0x2000026c
 8007314:	20000364 	.word	0x20000364
 8007318:	20000374 	.word	0x20000374
 800731c:	20000360 	.word	0x20000360
 8007320:	20000270 	.word	0x20000270
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <vTaskDelayUntil+0x20>
 800733c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8007340:	492d      	ldr	r1, [pc, #180]	@ (80073f8 <vTaskDelayUntil+0xd0>)
 8007342:	482e      	ldr	r0, [pc, #184]	@ (80073fc <vTaskDelayUntil+0xd4>)
 8007344:	f00c fcf0 	bl	8013d28 <assertFail>
        configASSERT( ( xTimeIncrement > 0U ) );
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d105      	bne.n	800735a <vTaskDelayUntil+0x32>
 800734e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8007352:	4929      	ldr	r1, [pc, #164]	@ (80073f8 <vTaskDelayUntil+0xd0>)
 8007354:	482a      	ldr	r0, [pc, #168]	@ (8007400 <vTaskDelayUntil+0xd8>)
 8007356:	f00c fce7 	bl	8013d28 <assertFail>
        configASSERT( uxSchedulerSuspended == 0 );
 800735a:	4b2a      	ldr	r3, [pc, #168]	@ (8007404 <vTaskDelayUntil+0xdc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <vTaskDelayUntil+0x46>
 8007362:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 8007366:	4924      	ldr	r1, [pc, #144]	@ (80073f8 <vTaskDelayUntil+0xd0>)
 8007368:	4827      	ldr	r0, [pc, #156]	@ (8007408 <vTaskDelayUntil+0xe0>)
 800736a:	f00c fcdd 	bl	8013d28 <assertFail>

        vTaskSuspendAll();
 800736e:	f000 f8f7 	bl	8007560 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8007372:	4b26      	ldr	r3, [pc, #152]	@ (800740c <vTaskDelayUntil+0xe4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	4413      	add	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	429a      	cmp	r2, r3
 800738a:	d20b      	bcs.n	80073a4 <vTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d211      	bcs.n	80073ba <vTaskDelayUntil+0x92>
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d90d      	bls.n	80073ba <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e00a      	b.n	80073ba <vTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d303      	bcc.n	80073b6 <vTaskDelayUntil+0x8e>
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d901      	bls.n	80073ba <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <vTaskDelayUntil+0xac>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fe88 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80073d4:	f000 f8d2 	bl	800757c <xTaskResumeAll>
 80073d8:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d107      	bne.n	80073f0 <vTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 80073e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <vTaskDelayUntil+0xe8>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	0801b750 	.word	0x0801b750
 80073fc:	0801b838 	.word	0x0801b838
 8007400:	0801b84c 	.word	0x0801b84c
 8007404:	20000380 	.word	0x20000380
 8007408:	0801b81c 	.word	0x0801b81c
 800740c:	2000035c 	.word	0x2000035c
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8007426:	4b11      	ldr	r3, [pc, #68]	@ (800746c <vTaskDelay+0x58>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <vTaskDelay+0x26>
 800742e:	f44f 62a7 	mov.w	r2, #1336	@ 0x538
 8007432:	490f      	ldr	r1, [pc, #60]	@ (8007470 <vTaskDelay+0x5c>)
 8007434:	480f      	ldr	r0, [pc, #60]	@ (8007474 <vTaskDelay+0x60>)
 8007436:	f00c fc77 	bl	8013d28 <assertFail>
            vTaskSuspendAll();
 800743a:	f000 f891 	bl	8007560 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fe4f 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007446:	f000 f899 	bl	800757c <xTaskResumeAll>
 800744a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <vTaskDelay+0x4e>
        {
            portYIELD_WITHIN_API();
 8007452:	4b09      	ldr	r3, [pc, #36]	@ (8007478 <vTaskDelay+0x64>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000380 	.word	0x20000380
 8007470:	0801b750 	.word	0x0801b750
 8007474:	0801b81c 	.word	0x0801b81c
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	@ 0x28
 8007480:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800748a:	1d3a      	adds	r2, r7, #4
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4618      	mov	r0, r3
 8007496:	f007 f981 	bl	800e79c <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	9202      	str	r2, [sp, #8]
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	2300      	movs	r3, #0
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2300      	movs	r3, #0
 80074aa:	460a      	mov	r2, r1
 80074ac:	4922      	ldr	r1, [pc, #136]	@ (8007538 <vTaskStartScheduler+0xbc>)
 80074ae:	4823      	ldr	r0, [pc, #140]	@ (800753c <vTaskStartScheduler+0xc0>)
 80074b0:	f7ff fd92 	bl	8006fd8 <xTaskCreateStatic>
 80074b4:	4603      	mov	r3, r0
 80074b6:	4a22      	ldr	r2, [pc, #136]	@ (8007540 <vTaskStartScheduler+0xc4>)
 80074b8:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80074ba:	4b21      	ldr	r3, [pc, #132]	@ (8007540 <vTaskStartScheduler+0xc4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <vTaskStartScheduler+0x4c>
            {
                xReturn = pdPASS;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e001      	b.n	80074cc <vTaskStartScheduler+0x50>
            }
            else
            {
                xReturn = pdFAIL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d102      	bne.n	80074d8 <vTaskStartScheduler+0x5c>
            {
                xReturn = xTimerCreateTimerTask();
 80074d2:	f000 fe6d 	bl	80081b0 <xTimerCreateTimerTask>
 80074d6:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d11e      	bne.n	800751c <vTaskStartScheduler+0xa0>
        __asm volatile
 80074de:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	613b      	str	r3, [r7, #16]
    }
 80074f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80074f2:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <vTaskStartScheduler+0xc8>)
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295
 80074f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80074fa:	4b13      	ldr	r3, [pc, #76]	@ (8007548 <vTaskStartScheduler+0xcc>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007500:	4b12      	ldr	r3, [pc, #72]	@ (800754c <vTaskStartScheduler+0xd0>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007506:	f005 ffa9 	bl	800d45c <usecTimerInit>

        traceTASK_SWITCHED_IN();
 800750a:	4b11      	ldr	r3, [pc, #68]	@ (8007550 <vTaskStartScheduler+0xd4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3334      	adds	r3, #52	@ 0x34
 8007510:	4a10      	ldr	r2, [pc, #64]	@ (8007554 <vTaskStartScheduler+0xd8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6013      	str	r3, [r2, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007516:	f001 fa1d 	bl	8008954 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 800751a:	e009      	b.n	8007530 <vTaskStartScheduler+0xb4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d105      	bne.n	8007530 <vTaskStartScheduler+0xb4>
 8007524:	f640 022a 	movw	r2, #2090	@ 0x82a
 8007528:	490b      	ldr	r1, [pc, #44]	@ (8007558 <vTaskStartScheduler+0xdc>)
 800752a:	480c      	ldr	r0, [pc, #48]	@ (800755c <vTaskStartScheduler+0xe0>)
 800752c:	f00c fbfc 	bl	8013d28 <assertFail>
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	0801b8b0 	.word	0x0801b8b0
 800753c:	08007c11 	.word	0x08007c11
 8007540:	2000037c 	.word	0x2000037c
 8007544:	20000378 	.word	0x20000378
 8007548:	20000364 	.word	0x20000364
 800754c:	2000035c 	.word	0x2000035c
 8007550:	2000026c 	.word	0x2000026c
 8007554:	e0000004 	.word	0xe0000004
 8007558:	0801b750 	.word	0x0801b750
 800755c:	0801b8b8 	.word	0x0801b8b8

08007560 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <vTaskSuspendAll+0x18>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a03      	ldr	r2, [pc, #12]	@ (8007578 <vTaskSuspendAll+0x18>)
 800756c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	20000380 	.word	0x20000380

0800757c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800758a:	4b3f      	ldr	r3, [pc, #252]	@ (8007688 <xTaskResumeAll+0x10c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <xTaskResumeAll+0x22>
 8007592:	f640 0299 	movw	r2, #2201	@ 0x899
 8007596:	493d      	ldr	r1, [pc, #244]	@ (800768c <xTaskResumeAll+0x110>)
 8007598:	483d      	ldr	r0, [pc, #244]	@ (8007690 <xTaskResumeAll+0x114>)
 800759a:	f00c fbc5 	bl	8013d28 <assertFail>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800759e:	f001 fa65 	bl	8008a6c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80075a2:	4b39      	ldr	r3, [pc, #228]	@ (8007688 <xTaskResumeAll+0x10c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	4a37      	ldr	r2, [pc, #220]	@ (8007688 <xTaskResumeAll+0x10c>)
 80075aa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ac:	4b36      	ldr	r3, [pc, #216]	@ (8007688 <xTaskResumeAll+0x10c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d161      	bne.n	8007678 <xTaskResumeAll+0xfc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075b4:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d05d      	beq.n	8007678 <xTaskResumeAll+0xfc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075bc:	e02e      	b.n	800761c <xTaskResumeAll+0xa0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075be:	4b36      	ldr	r3, [pc, #216]	@ (8007698 <xTaskResumeAll+0x11c>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3318      	adds	r3, #24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fdb0 	bl	8006130 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fdab 	bl	8006130 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	2201      	movs	r2, #1
 80075e0:	409a      	lsls	r2, r3
 80075e2:	4b2e      	ldr	r3, [pc, #184]	@ (800769c <xTaskResumeAll+0x120>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	4a2c      	ldr	r2, [pc, #176]	@ (800769c <xTaskResumeAll+0x120>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a29      	ldr	r2, [pc, #164]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075fa:	441a      	add	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fe fd37 	bl	8006076 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760c:	4b25      	ldr	r3, [pc, #148]	@ (80076a4 <xTaskResumeAll+0x128>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <xTaskResumeAll+0xa0>
                    {
                        xYieldPending = pdTRUE;
 8007616:	4b24      	ldr	r3, [pc, #144]	@ (80076a8 <xTaskResumeAll+0x12c>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800761c:	4b1e      	ldr	r3, [pc, #120]	@ (8007698 <xTaskResumeAll+0x11c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1cc      	bne.n	80075be <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <xTaskResumeAll+0xb2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800762a:	f000 fb97 	bl	8007d5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800762e:	4b1f      	ldr	r3, [pc, #124]	@ (80076ac <xTaskResumeAll+0x130>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <xTaskResumeAll+0xe0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800763a:	f000 f84b 	bl	80076d4 <xTaskIncrementTick>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <xTaskResumeAll+0xce>
                            {
                                xYieldPending = pdTRUE;
 8007644:	4b18      	ldr	r3, [pc, #96]	@ (80076a8 <xTaskResumeAll+0x12c>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f1      	bne.n	800763a <xTaskResumeAll+0xbe>

                        xPendedTicks = 0;
 8007656:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <xTaskResumeAll+0x130>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800765c:	4b12      	ldr	r3, [pc, #72]	@ (80076a8 <xTaskResumeAll+0x12c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <xTaskResumeAll+0xfc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007668:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <xTaskResumeAll+0x134>)
 800766a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007678:	f001 fa26 	bl	8008ac8 <vPortExitCritical>

    return xAlreadyYielded;
 800767c:	68bb      	ldr	r3, [r7, #8]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000380 	.word	0x20000380
 800768c:	0801b750 	.word	0x0801b750
 8007690:	0801b8ec 	.word	0x0801b8ec
 8007694:	20000358 	.word	0x20000358
 8007698:	20000318 	.word	0x20000318
 800769c:	20000360 	.word	0x20000360
 80076a0:	20000270 	.word	0x20000270
 80076a4:	2000026c 	.word	0x2000026c
 80076a8:	2000036c 	.word	0x2000036c
 80076ac:	20000368 	.word	0x20000368
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80076ba:	4b05      	ldr	r3, [pc, #20]	@ (80076d0 <xTaskGetTickCount+0x1c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80076c0:	687b      	ldr	r3, [r7, #4]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	2000035c 	.word	0x2000035c

080076d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80076de:	4a4e      	ldr	r2, [pc, #312]	@ (8007818 <xTaskIncrementTick+0x144>)
 80076e0:	4b4e      	ldr	r3, [pc, #312]	@ (800781c <xTaskIncrementTick+0x148>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6013      	str	r3, [r2, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007820 <xTaskIncrementTick+0x14c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 8089 	bne.w	8007802 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076f0:	4b4a      	ldr	r3, [pc, #296]	@ (800781c <xTaskIncrementTick+0x148>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3301      	adds	r3, #1
 80076f6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80076f8:	4a48      	ldr	r2, [pc, #288]	@ (800781c <xTaskIncrementTick+0x148>)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d11b      	bne.n	800773c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8007704:	4b47      	ldr	r3, [pc, #284]	@ (8007824 <xTaskIncrementTick+0x150>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <xTaskIncrementTick+0x46>
 800770e:	f640 22ac 	movw	r2, #2732	@ 0xaac
 8007712:	4945      	ldr	r1, [pc, #276]	@ (8007828 <xTaskIncrementTick+0x154>)
 8007714:	4845      	ldr	r0, [pc, #276]	@ (800782c <xTaskIncrementTick+0x158>)
 8007716:	f00c fb07 	bl	8013d28 <assertFail>
 800771a:	4b42      	ldr	r3, [pc, #264]	@ (8007824 <xTaskIncrementTick+0x150>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	4b43      	ldr	r3, [pc, #268]	@ (8007830 <xTaskIncrementTick+0x15c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a3f      	ldr	r2, [pc, #252]	@ (8007824 <xTaskIncrementTick+0x150>)
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	4a41      	ldr	r2, [pc, #260]	@ (8007830 <xTaskIncrementTick+0x15c>)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	4b41      	ldr	r3, [pc, #260]	@ (8007834 <xTaskIncrementTick+0x160>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a3f      	ldr	r2, [pc, #252]	@ (8007834 <xTaskIncrementTick+0x160>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	f000 fb10 	bl	8007d5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800773c:	4b3e      	ldr	r3, [pc, #248]	@ (8007838 <xTaskIncrementTick+0x164>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	429a      	cmp	r2, r3
 8007744:	d348      	bcc.n	80077d8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007746:	4b37      	ldr	r3, [pc, #220]	@ (8007824 <xTaskIncrementTick+0x150>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d104      	bne.n	800775a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007750:	4b39      	ldr	r3, [pc, #228]	@ (8007838 <xTaskIncrementTick+0x164>)
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	601a      	str	r2, [r3, #0]
                    break;
 8007758:	e03e      	b.n	80077d8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775a:	4b32      	ldr	r3, [pc, #200]	@ (8007824 <xTaskIncrementTick+0x150>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	429a      	cmp	r2, r3
 8007770:	d203      	bcs.n	800777a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007772:	4a31      	ldr	r2, [pc, #196]	@ (8007838 <xTaskIncrementTick+0x164>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007778:	e02e      	b.n	80077d8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3304      	adds	r3, #4
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fcd6 	bl	8006130 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3318      	adds	r3, #24
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fccd 	bl	8006130 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	2201      	movs	r2, #1
 800779c:	409a      	lsls	r2, r3
 800779e:	4b27      	ldr	r3, [pc, #156]	@ (800783c <xTaskIncrementTick+0x168>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	4a25      	ldr	r2, [pc, #148]	@ (800783c <xTaskIncrementTick+0x168>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a22      	ldr	r2, [pc, #136]	@ (8007840 <xTaskIncrementTick+0x16c>)
 80077b6:	441a      	add	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe fc59 	bl	8006076 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007844 <xTaskIncrementTick+0x170>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b9      	bcc.n	8007746 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d6:	e7b6      	b.n	8007746 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007844 <xTaskIncrementTick+0x170>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077de:	4918      	ldr	r1, [pc, #96]	@ (8007840 <xTaskIncrementTick+0x16c>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d901      	bls.n	80077f4 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80077f4:	4b14      	ldr	r3, [pc, #80]	@ (8007848 <xTaskIncrementTick+0x174>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e004      	b.n	800780c <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007802:	4b12      	ldr	r3, [pc, #72]	@ (800784c <xTaskIncrementTick+0x178>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a10      	ldr	r2, [pc, #64]	@ (800784c <xTaskIncrementTick+0x178>)
 800780a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	e0000008 	.word	0xe0000008
 800781c:	2000035c 	.word	0x2000035c
 8007820:	20000380 	.word	0x20000380
 8007824:	20000310 	.word	0x20000310
 8007828:	0801b750 	.word	0x0801b750
 800782c:	0801b920 	.word	0x0801b920
 8007830:	20000314 	.word	0x20000314
 8007834:	20000370 	.word	0x20000370
 8007838:	20000378 	.word	0x20000378
 800783c:	20000360 	.word	0x20000360
 8007840:	20000270 	.word	0x20000270
 8007844:	2000026c 	.word	0x2000026c
 8007848:	2000036c 	.word	0x2000036c
 800784c:	20000368 	.word	0x20000368

08007850 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <vTaskSetApplicationTaskTag+0x34>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e001      	b.n	800786c <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 800786c:	f001 f8fe 	bl	8008a6c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        taskEXIT_CRITICAL();
 8007876:	f001 f927 	bl	8008ac8 <vPortExitCritical>
    }
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	2000026c 	.word	0x2000026c

08007888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800788e:	4b3c      	ldr	r3, [pc, #240]	@ (8007980 <vTaskSwitchContext+0xf8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007896:	4b3b      	ldr	r3, [pc, #236]	@ (8007984 <vTaskSwitchContext+0xfc>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800789c:	e06b      	b.n	8007976 <vTaskSwitchContext+0xee>
        xYieldPending = pdFALSE;
 800789e:	4b39      	ldr	r3, [pc, #228]	@ (8007984 <vTaskSwitchContext+0xfc>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80078a4:	f005 fe12 	bl	800d4cc <usecTimestamp>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4b36      	ldr	r3, [pc, #216]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078ae:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 80078b0:	4b35      	ldr	r3, [pc, #212]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4b35      	ldr	r3, [pc, #212]	@ (800798c <vTaskSwitchContext+0x104>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d909      	bls.n	80078d0 <vTaskSwitchContext+0x48>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80078bc:	4b32      	ldr	r3, [pc, #200]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	4b32      	ldr	r3, [pc, #200]	@ (800798c <vTaskSwitchContext+0x104>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	1ad1      	subs	r1, r2, r3
 80078c6:	4b32      	ldr	r3, [pc, #200]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078cc:	440a      	add	r2, r1
 80078ce:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 80078d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2d      	ldr	r2, [pc, #180]	@ (800798c <vTaskSwitchContext+0x104>)
 80078d6:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80078d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	4b2c      	ldr	r3, [pc, #176]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d808      	bhi.n	80078fa <vTaskSwitchContext+0x72>
 80078e8:	4b29      	ldr	r3, [pc, #164]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b28      	ldr	r3, [pc, #160]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3334      	adds	r3, #52	@ 0x34
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f007 f895 	bl	800ea24 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fa:	4b26      	ldr	r3, [pc, #152]	@ (8007994 <vTaskSwitchContext+0x10c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	fab3 f383 	clz	r3, r3
 8007906:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	f1c3 031f 	rsb	r3, r3, #31
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	4921      	ldr	r1, [pc, #132]	@ (8007998 <vTaskSwitchContext+0x110>)
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <vTaskSwitchContext+0xa8>
 8007924:	f640 32e7 	movw	r2, #3047	@ 0xbe7
 8007928:	491c      	ldr	r1, [pc, #112]	@ (800799c <vTaskSwitchContext+0x114>)
 800792a:	481d      	ldr	r0, [pc, #116]	@ (80079a0 <vTaskSwitchContext+0x118>)
 800792c:	f00c f9fc 	bl	8013d28 <assertFail>
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4a17      	ldr	r2, [pc, #92]	@ (8007998 <vTaskSwitchContext+0x110>)
 800793c:	4413      	add	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3308      	adds	r3, #8
 8007952:	429a      	cmp	r2, r3
 8007954:	d104      	bne.n	8007960 <vTaskSwitchContext+0xd8>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4a0a      	ldr	r2, [pc, #40]	@ (8007990 <vTaskSwitchContext+0x108>)
 8007968:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <vTaskSwitchContext+0x108>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3334      	adds	r3, #52	@ 0x34
 8007970:	4a0c      	ldr	r2, [pc, #48]	@ (80079a4 <vTaskSwitchContext+0x11c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6013      	str	r3, [r2, #0]
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000380 	.word	0x20000380
 8007984:	2000036c 	.word	0x2000036c
 8007988:	20000388 	.word	0x20000388
 800798c:	20000384 	.word	0x20000384
 8007990:	2000026c 	.word	0x2000026c
 8007994:	20000360 	.word	0x20000360
 8007998:	20000270 	.word	0x20000270
 800799c:	0801b750 	.word	0x0801b750
 80079a0:	0801b94c 	.word	0x0801b94c
 80079a4:	e0000004 	.word	0xe0000004

080079a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <vTaskPlaceOnEventList+0x1c>
 80079b8:	f640 4201 	movw	r2, #3073	@ 0xc01
 80079bc:	4909      	ldr	r1, [pc, #36]	@ (80079e4 <vTaskPlaceOnEventList+0x3c>)
 80079be:	480a      	ldr	r0, [pc, #40]	@ (80079e8 <vTaskPlaceOnEventList+0x40>)
 80079c0:	f00c f9b2 	bl	8013d28 <assertFail>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c4:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <vTaskPlaceOnEventList+0x44>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3318      	adds	r3, #24
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fe fb76 	bl	80060be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079d2:	2101      	movs	r1, #1
 80079d4:	6838      	ldr	r0, [r7, #0]
 80079d6:	f000 fb85 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	0801b750 	.word	0x0801b750
 80079e8:	0801b994 	.word	0x0801b994
 80079ec:	2000026c 	.word	0x2000026c

080079f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <vTaskPlaceOnEventListRestricted+0x1e>
 8007a02:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8007a06:	490c      	ldr	r1, [pc, #48]	@ (8007a38 <vTaskPlaceOnEventListRestricted+0x48>)
 8007a08:	480c      	ldr	r0, [pc, #48]	@ (8007a3c <vTaskPlaceOnEventListRestricted+0x4c>)
 8007a0a:	f00c f98d 	bl	8013d28 <assertFail>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <vTaskPlaceOnEventListRestricted+0x50>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3318      	adds	r3, #24
 8007a14:	4619      	mov	r1, r3
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7fe fb2d 	bl	8006076 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <vTaskPlaceOnEventListRestricted+0x38>
        {
            xTicksToWait = portMAX_DELAY;
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295
 8007a26:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	68b8      	ldr	r0, [r7, #8]
 8007a2c:	f000 fb5a 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
    }
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	0801b750 	.word	0x0801b750
 8007a3c:	0801b994 	.word	0x0801b994
 8007a40:	2000026c 	.word	0x2000026c

08007a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <xTaskRemoveFromEventList+0x22>
 8007a5a:	f44f 6246 	mov.w	r2, #3168	@ 0xc60
 8007a5e:	4922      	ldr	r1, [pc, #136]	@ (8007ae8 <xTaskRemoveFromEventList+0xa4>)
 8007a60:	4822      	ldr	r0, [pc, #136]	@ (8007aec <xTaskRemoveFromEventList+0xa8>)
 8007a62:	f00c f961 	bl	8013d28 <assertFail>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3318      	adds	r3, #24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fb60 	bl	8006130 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a70:	4b1f      	ldr	r3, [pc, #124]	@ (8007af0 <xTaskRemoveFromEventList+0xac>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11c      	bne.n	8007ab2 <xTaskRemoveFromEventList+0x6e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fb57 	bl	8006130 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	2201      	movs	r2, #1
 8007a88:	409a      	lsls	r2, r3
 8007a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007af4 <xTaskRemoveFromEventList+0xb0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	4a18      	ldr	r2, [pc, #96]	@ (8007af4 <xTaskRemoveFromEventList+0xb0>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <xTaskRemoveFromEventList+0xb4>)
 8007aa2:	441a      	add	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f7fe fae3 	bl	8006076 <vListInsertEnd>
 8007ab0:	e005      	b.n	8007abe <xTaskRemoveFromEventList+0x7a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4810      	ldr	r0, [pc, #64]	@ (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007aba:	f7fe fadc 	bl	8006076 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <xTaskRemoveFromEventList+0xbc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d905      	bls.n	8007ad8 <xTaskRemoveFromEventList+0x94>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b04 <xTaskRemoveFromEventList+0xc0>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e001      	b.n	8007adc <xTaskRemoveFromEventList+0x98>
    }
    else
    {
        xReturn = pdFALSE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8007adc:	68fb      	ldr	r3, [r7, #12]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	0801b750 	.word	0x0801b750
 8007aec:	0801b9bc 	.word	0x0801b9bc
 8007af0:	20000380 	.word	0x20000380
 8007af4:	20000360 	.word	0x20000360
 8007af8:	20000270 	.word	0x20000270
 8007afc:	20000318 	.word	0x20000318
 8007b00:	2000026c 	.word	0x2000026c
 8007b04:	2000036c 	.word	0x2000036c

08007b08 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b10:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <vTaskInternalSetTimeOutState+0x24>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007b18:	4b05      	ldr	r3, [pc, #20]	@ (8007b30 <vTaskInternalSetTimeOutState+0x28>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	20000370 	.word	0x20000370
 8007b30:	2000035c 	.word	0x2000035c

08007b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <xTaskCheckForTimeOut+0x1c>
 8007b44:	f640 42db 	movw	r2, #3291	@ 0xcdb
 8007b48:	4926      	ldr	r1, [pc, #152]	@ (8007be4 <xTaskCheckForTimeOut+0xb0>)
 8007b4a:	4827      	ldr	r0, [pc, #156]	@ (8007be8 <xTaskCheckForTimeOut+0xb4>)
 8007b4c:	f00c f8ec 	bl	8013d28 <assertFail>
    configASSERT( pxTicksToWait );
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <xTaskCheckForTimeOut+0x2e>
 8007b56:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8007b5a:	4922      	ldr	r1, [pc, #136]	@ (8007be4 <xTaskCheckForTimeOut+0xb0>)
 8007b5c:	4823      	ldr	r0, [pc, #140]	@ (8007bec <xTaskCheckForTimeOut+0xb8>)
 8007b5e:	f00c f8e3 	bl	8013d28 <assertFail>

    taskENTER_CRITICAL();
 8007b62:	f000 ff83 	bl	8008a6c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007b66:	4b22      	ldr	r3, [pc, #136]	@ (8007bf0 <xTaskCheckForTimeOut+0xbc>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	d102      	bne.n	8007b86 <xTaskCheckForTimeOut+0x52>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e026      	b.n	8007bd4 <xTaskCheckForTimeOut+0xa0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf4 <xTaskCheckForTimeOut+0xc0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d00a      	beq.n	8007ba8 <xTaskCheckForTimeOut+0x74>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d305      	bcc.n	8007ba8 <xTaskCheckForTimeOut+0x74>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e015      	b.n	8007bd4 <xTaskCheckForTimeOut+0xa0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d20b      	bcs.n	8007bca <xTaskCheckForTimeOut+0x96>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ffa2 	bl	8007b08 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e004      	b.n	8007bd4 <xTaskCheckForTimeOut+0xa0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8007bd4:	f000 ff78 	bl	8008ac8 <vPortExitCritical>

    return xReturn;
 8007bd8:	697b      	ldr	r3, [r7, #20]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	0801b750 	.word	0x0801b750
 8007be8:	0801b9ec 	.word	0x0801b9ec
 8007bec:	0801b9f8 	.word	0x0801b9f8
 8007bf0:	2000035c 	.word	0x2000035c
 8007bf4:	20000370 	.word	0x20000370

08007bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007bfc:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <vTaskMissedYield+0x14>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	2000036c 	.word	0x2000036c

08007c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007c18:	f000 f844 	bl	8007ca4 <prvCheckTasksWaitingTermination>
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8007c1c:	f006 feec 	bl	800e9f8 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8007c20:	bf00      	nop
 8007c22:	e7f9      	b.n	8007c18 <prvIdleTask+0x8>

08007c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	e00c      	b.n	8007c4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4a12      	ldr	r2, [pc, #72]	@ (8007c84 <prvInitialiseTaskLists+0x60>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe f9ec 	bl	800601c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3301      	adds	r3, #1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d9ef      	bls.n	8007c30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007c50:	480d      	ldr	r0, [pc, #52]	@ (8007c88 <prvInitialiseTaskLists+0x64>)
 8007c52:	f7fe f9e3 	bl	800601c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007c56:	480d      	ldr	r0, [pc, #52]	@ (8007c8c <prvInitialiseTaskLists+0x68>)
 8007c58:	f7fe f9e0 	bl	800601c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007c5c:	480c      	ldr	r0, [pc, #48]	@ (8007c90 <prvInitialiseTaskLists+0x6c>)
 8007c5e:	f7fe f9dd 	bl	800601c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007c62:	480c      	ldr	r0, [pc, #48]	@ (8007c94 <prvInitialiseTaskLists+0x70>)
 8007c64:	f7fe f9da 	bl	800601c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007c68:	480b      	ldr	r0, [pc, #44]	@ (8007c98 <prvInitialiseTaskLists+0x74>)
 8007c6a:	f7fe f9d7 	bl	800601c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <prvInitialiseTaskLists+0x78>)
 8007c70:	4a05      	ldr	r2, [pc, #20]	@ (8007c88 <prvInitialiseTaskLists+0x64>)
 8007c72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca0 <prvInitialiseTaskLists+0x7c>)
 8007c76:	4a05      	ldr	r2, [pc, #20]	@ (8007c8c <prvInitialiseTaskLists+0x68>)
 8007c78:	601a      	str	r2, [r3, #0]
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000270 	.word	0x20000270
 8007c88:	200002e8 	.word	0x200002e8
 8007c8c:	200002fc 	.word	0x200002fc
 8007c90:	20000318 	.word	0x20000318
 8007c94:	2000032c 	.word	0x2000032c
 8007c98:	20000344 	.word	0x20000344
 8007c9c:	20000310 	.word	0x20000310
 8007ca0:	20000314 	.word	0x20000314

08007ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007caa:	e019      	b.n	8007ce0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007cac:	f000 fede 	bl	8008a6c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb0:	4b10      	ldr	r3, [pc, #64]	@ (8007cf4 <prvCheckTasksWaitingTermination+0x50>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fa37 	bl	8006130 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x54>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x54>)
 8007cca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <prvCheckTasksWaitingTermination+0x58>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8007cfc <prvCheckTasksWaitingTermination+0x58>)
 8007cd4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007cd6:	f000 fef7 	bl	8008ac8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f810 	bl	8007d00 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ce0:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <prvCheckTasksWaitingTermination+0x58>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e1      	bne.n	8007cac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	2000032c 	.word	0x2000032c
 8007cf8:	20000358 	.word	0x20000358
 8007cfc:	20000340 	.word	0x20000340

08007d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d108      	bne.n	8007d24 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f882 	bl	8008e20 <vPortFree>
                    vPortFree( pxTCB );
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f87f 	bl	8008e20 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007d22:	e013      	b.n	8007d4c <prvDeleteTCB+0x4c>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d103      	bne.n	8007d36 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f876 	bl	8008e20 <vPortFree>
    }
 8007d34:	e00a      	b.n	8007d4c <prvDeleteTCB+0x4c>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d005      	beq.n	8007d4c <prvDeleteTCB+0x4c>
 8007d40:	f640 727a 	movw	r2, #3962	@ 0xf7a
 8007d44:	4903      	ldr	r1, [pc, #12]	@ (8007d54 <prvDeleteTCB+0x54>)
 8007d46:	4804      	ldr	r0, [pc, #16]	@ (8007d58 <prvDeleteTCB+0x58>)
 8007d48:	f00b ffee 	bl	8013d28 <assertFail>
    }
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	0801b750 	.word	0x0801b750
 8007d58:	0801ba08 	.word	0x0801ba08

08007d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d60:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <prvResetNextTaskUnblockTime+0x30>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007d6a:	4b09      	ldr	r3, [pc, #36]	@ (8007d90 <prvResetNextTaskUnblockTime+0x34>)
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007d72:	e005      	b.n	8007d80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <prvResetNextTaskUnblockTime+0x30>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a04      	ldr	r2, [pc, #16]	@ (8007d90 <prvResetNextTaskUnblockTime+0x34>)
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000310 	.word	0x20000310
 8007d90:	20000378 	.word	0x20000378

08007d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc8 <xTaskGetSchedulerState+0x34>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007da2:	2301      	movs	r3, #1
 8007da4:	607b      	str	r3, [r7, #4]
 8007da6:	e008      	b.n	8007dba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da8:	4b08      	ldr	r3, [pc, #32]	@ (8007dcc <xTaskGetSchedulerState+0x38>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007db0:	2302      	movs	r3, #2
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	e001      	b.n	8007dba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007db6:	2300      	movs	r3, #0
 8007db8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007dba:	687b      	ldr	r3, [r7, #4]
    }
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	20000364 	.word	0x20000364
 8007dcc:	20000380 	.word	0x20000380

08007dd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d05e      	beq.n	8007ea4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dea:	4b31      	ldr	r3, [pc, #196]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d24e      	bcs.n	8007e92 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db06      	blt.n	8007e0a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e02:	f1c3 0206 	rsb	r2, r3, #6
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6959      	ldr	r1, [r3, #20]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4a26      	ldr	r2, [pc, #152]	@ (8007eb4 <xTaskPriorityInherit+0xe4>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d12f      	bne.n	8007e82 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe f982 	bl	8006130 <uxListRemove>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	2201      	movs	r2, #1
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	43da      	mvns	r2, r3
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4013      	ands	r3, r2
 8007e44:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e46:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	2201      	movs	r2, #1
 8007e58:	409a      	lsls	r2, r3
 8007e5a:	4b17      	ldr	r3, [pc, #92]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	4a15      	ldr	r2, [pc, #84]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4a10      	ldr	r2, [pc, #64]	@ (8007eb4 <xTaskPriorityInherit+0xe4>)
 8007e72:	441a      	add	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fe f8fb 	bl	8006076 <vListInsertEnd>
 8007e80:	e004      	b.n	8007e8c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e82:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e008      	b.n	8007ea4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d201      	bcs.n	8007ea4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
    }
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	2000026c 	.word	0x2000026c
 8007eb4:	20000270 	.word	0x20000270
 8007eb8:	20000360 	.word	0x20000360

08007ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d059      	beq.n	8007f86 <xTaskPriorityDisinherit+0xca>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8007f90 <xTaskPriorityDisinherit+0xd4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d005      	beq.n	8007ee8 <xTaskPriorityDisinherit+0x2c>
 8007edc:	f241 022d 	movw	r2, #4141	@ 0x102d
 8007ee0:	492c      	ldr	r1, [pc, #176]	@ (8007f94 <xTaskPriorityDisinherit+0xd8>)
 8007ee2:	482d      	ldr	r0, [pc, #180]	@ (8007f98 <xTaskPriorityDisinherit+0xdc>)
 8007ee4:	f00b ff20 	bl	8013d28 <assertFail>
            configASSERT( pxTCB->uxMutexesHeld );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <xTaskPriorityDisinherit+0x40>
 8007ef0:	f241 022e 	movw	r2, #4142	@ 0x102e
 8007ef4:	4927      	ldr	r1, [pc, #156]	@ (8007f94 <xTaskPriorityDisinherit+0xd8>)
 8007ef6:	4829      	ldr	r0, [pc, #164]	@ (8007f9c <xTaskPriorityDisinherit+0xe0>)
 8007ef8:	f00b ff16 	bl	8013d28 <assertFail>
            ( pxTCB->uxMutexesHeld )--;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f00:	1e5a      	subs	r2, r3, #1
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d039      	beq.n	8007f86 <xTaskPriorityDisinherit+0xca>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d135      	bne.n	8007f86 <xTaskPriorityDisinherit+0xca>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe f906 	bl	8006130 <uxListRemove>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <xTaskPriorityDisinherit+0x84>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	2201      	movs	r2, #1
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	43da      	mvns	r2, r3
 8007f36:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	4a18      	ldr	r2, [pc, #96]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f3e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	f1c3 0206 	rsb	r2, r3, #6
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	2201      	movs	r2, #1
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4a0c      	ldr	r2, [pc, #48]	@ (8007fa4 <xTaskPriorityDisinherit+0xe8>)
 8007f74:	441a      	add	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fe f87a 	bl	8006076 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007f82:	2301      	movs	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007f86:	68fb      	ldr	r3, [r7, #12]
    }
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	2000026c 	.word	0x2000026c
 8007f94:	0801b750 	.word	0x0801b750
 8007f98:	0801ba50 	.word	0x0801ba50
 8007f9c:	0801ba68 	.word	0x0801ba68
 8007fa0:	20000360 	.word	0x20000360
 8007fa4:	20000270 	.word	0x20000270

08007fa8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d06d      	beq.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d105      	bne.n	8007fd4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8007fc8:	f241 027d 	movw	r2, #4221	@ 0x107d
 8007fcc:	4935      	ldr	r1, [pc, #212]	@ (80080a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fce:	4836      	ldr	r0, [pc, #216]	@ (80080a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fd0:	f00b feaa 	bl	8013d28 <assertFail>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d902      	bls.n	8007fe4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e002      	b.n	8007fea <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe8:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d053      	beq.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d14e      	bne.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80080ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	429a      	cmp	r2, r3
 8008006:	d105      	bne.n	8008014 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8008008:	f241 0298 	movw	r2, #4248	@ 0x1098
 800800c:	4925      	ldr	r1, [pc, #148]	@ (80080a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800800e:	4828      	ldr	r0, [pc, #160]	@ (80080b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008010:	f00b fe8a 	bl	8013d28 <assertFail>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	db04      	blt.n	8008032 <vTaskPriorityDisinheritAfterTimeout+0x8a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f1c3 0206 	rsb	r2, r3, #6
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6959      	ldr	r1, [r3, #20]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4a1c      	ldr	r2, [pc, #112]	@ (80080b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008042:	4413      	add	r3, r2
 8008044:	4299      	cmp	r1, r3
 8008046:	d129      	bne.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe f86f 	bl	8006130 <uxListRemove>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <vTaskPriorityDisinheritAfterTimeout+0xc6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	2201      	movs	r2, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43da      	mvns	r2, r3
 8008064:	4b14      	ldr	r3, [pc, #80]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4013      	ands	r3, r2
 800806a:	4a13      	ldr	r2, [pc, #76]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800806c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008072:	2201      	movs	r2, #1
 8008074:	409a      	lsls	r2, r3
 8008076:	4b10      	ldr	r3, [pc, #64]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	4a0e      	ldr	r2, [pc, #56]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4a09      	ldr	r2, [pc, #36]	@ (80080b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800808e:	441a      	add	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3304      	adds	r3, #4
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f7fd ffed 	bl	8006076 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	0801b750 	.word	0x0801b750
 80080a8:	0801ba68 	.word	0x0801ba68
 80080ac:	2000026c 	.word	0x2000026c
 80080b0:	0801ba80 	.word	0x0801ba80
 80080b4:	20000270 	.word	0x20000270
 80080b8:	20000360 	.word	0x20000360

080080bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80080c0:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80080c8:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ce:	3201      	adds	r2, #1
 80080d0:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80080d2:	4b03      	ldr	r3, [pc, #12]	@ (80080e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080d4:	681b      	ldr	r3, [r3, #0]
    }
 80080d6:	4618      	mov	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	2000026c 	.word	0x2000026c

080080e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80080ee:	4b29      	ldr	r3, [pc, #164]	@ (8008194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f4:	4b28      	ldr	r3, [pc, #160]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f818 	bl	8006130 <uxListRemove>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008106:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810c:	2201      	movs	r2, #1
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	43da      	mvns	r2, r3
 8008114:	4b21      	ldr	r3, [pc, #132]	@ (800819c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4013      	ands	r3, r2
 800811a:	4a20      	ldr	r2, [pc, #128]	@ (800819c <prvAddCurrentTaskToDelayedList+0xb8>)
 800811c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d10a      	bne.n	800813c <prvAddCurrentTaskToDelayedList+0x58>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812c:	4b1a      	ldr	r3, [pc, #104]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	481a      	ldr	r0, [pc, #104]	@ (80081a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008136:	f7fd ff9e 	bl	8006076 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800813a:	e026      	b.n	800818a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008144:	4b14      	ldr	r3, [pc, #80]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	429a      	cmp	r2, r3
 8008152:	d209      	bcs.n	8008168 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008154:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3304      	adds	r3, #4
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f7fd ffac 	bl	80060be <vListInsert>
}
 8008166:	e010      	b.n	800818a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008168:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fd ffa2 	bl	80060be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800817a:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d202      	bcs.n	800818a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008184:	4a09      	ldr	r2, [pc, #36]	@ (80081ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6013      	str	r3, [r2, #0]
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	2000035c 	.word	0x2000035c
 8008198:	2000026c 	.word	0x2000026c
 800819c:	20000360 	.word	0x20000360
 80081a0:	20000344 	.word	0x20000344
 80081a4:	20000314 	.word	0x20000314
 80081a8:	20000310 	.word	0x20000310
 80081ac:	20000378 	.word	0x20000378

080081b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80081ba:	f000 fb03 	bl	80087c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80081be:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <xTimerCreateTimerTask+0x74>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d020      	beq.n	8008208 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081ce:	463a      	mov	r2, r7
 80081d0:	1d39      	adds	r1, r7, #4
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f006 fafa 	bl	800e7d0 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	9202      	str	r2, [sp, #8]
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	2301      	movs	r3, #1
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	460a      	mov	r2, r1
 80081ee:	490e      	ldr	r1, [pc, #56]	@ (8008228 <xTimerCreateTimerTask+0x78>)
 80081f0:	480e      	ldr	r0, [pc, #56]	@ (800822c <xTimerCreateTimerTask+0x7c>)
 80081f2:	f7fe fef1 	bl	8006fd8 <xTaskCreateStatic>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008230 <xTimerCreateTimerTask+0x80>)
 80081fa:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80081fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008230 <xTimerCreateTimerTask+0x80>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8008204:	2301      	movs	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <xTimerCreateTimerTask+0x6a>
 800820e:	f240 120d 	movw	r2, #269	@ 0x10d
 8008212:	4908      	ldr	r1, [pc, #32]	@ (8008234 <xTimerCreateTimerTask+0x84>)
 8008214:	4808      	ldr	r0, [pc, #32]	@ (8008238 <xTimerCreateTimerTask+0x88>)
 8008216:	f00b fd87 	bl	8013d28 <assertFail>
        return xReturn;
 800821a:	68fb      	ldr	r3, [r7, #12]
    }
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	200003bc 	.word	0x200003bc
 8008228:	0801bbb0 	.word	0x0801bbb0
 800822c:	0800836d 	.word	0x0800836d
 8008230:	200003c0 	.word	0x200003c0
 8008234:	0801bbb8 	.word	0x0801bbb8
 8008238:	0801bbd0 	.word	0x0801bbd0

0800823c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800824a:	2300      	movs	r3, #0
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <xTimerGenericCommand+0x24>
 8008254:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8008258:	491b      	ldr	r1, [pc, #108]	@ (80082c8 <xTimerGenericCommand+0x8c>)
 800825a:	481c      	ldr	r0, [pc, #112]	@ (80082cc <xTimerGenericCommand+0x90>)
 800825c:	f00b fd64 	bl	8013d28 <assertFail>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008260:	4b1b      	ldr	r3, [pc, #108]	@ (80082d0 <xTimerGenericCommand+0x94>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d02a      	beq.n	80082be <xTimerGenericCommand+0x82>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b05      	cmp	r3, #5
 8008278:	dc18      	bgt.n	80082ac <xTimerGenericCommand+0x70>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800827a:	f7ff fd8b 	bl	8007d94 <xTaskGetSchedulerState>
 800827e:	4603      	mov	r3, r0
 8008280:	2b02      	cmp	r3, #2
 8008282:	d109      	bne.n	8008298 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008284:	4b12      	ldr	r3, [pc, #72]	@ (80082d0 <xTimerGenericCommand+0x94>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	f107 0114 	add.w	r1, r7, #20
 800828c:	2300      	movs	r3, #0
 800828e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008290:	f7fe f8f4 	bl	800647c <xQueueGenericSend>
 8008294:	6278      	str	r0, [r7, #36]	@ 0x24
 8008296:	e012      	b.n	80082be <xTimerGenericCommand+0x82>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008298:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <xTimerGenericCommand+0x94>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	f107 0114 	add.w	r1, r7, #20
 80082a0:	2300      	movs	r3, #0
 80082a2:	2200      	movs	r2, #0
 80082a4:	f7fe f8ea 	bl	800647c <xQueueGenericSend>
 80082a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80082aa:	e008      	b.n	80082be <xTimerGenericCommand+0x82>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082ac:	4b08      	ldr	r3, [pc, #32]	@ (80082d0 <xTimerGenericCommand+0x94>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	f107 0114 	add.w	r1, r7, #20
 80082b4:	2300      	movs	r3, #0
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	f7fe f9ee 	bl	8006698 <xQueueGenericSendFromISR>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80082c0:	4618      	mov	r0, r3
 80082c2:	3728      	adds	r7, #40	@ 0x28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	0801bbb8 	.word	0x0801bbb8
 80082cc:	0801bc20 	.word	0x0801bc20
 80082d0:	200003bc 	.word	0x200003bc

080082d4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af02      	add	r7, sp, #8
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082de:	4b20      	ldr	r3, [pc, #128]	@ (8008360 <prvProcessExpiredTimer+0x8c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd ff1f 	bl	8006130 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01e      	beq.n	800833e <prvProcessExpiredTimer+0x6a>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	18d1      	adds	r1, r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f8d3 	bl	80084b8 <prvInsertTimerInActiveList>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01b      	beq.n	8008350 <prvProcessExpiredTimer+0x7c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008318:	2300      	movs	r3, #0
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	2300      	movs	r3, #0
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff ff8a 	bl	800823c <xTimerGenericCommand>
 8008328:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10f      	bne.n	8008350 <prvProcessExpiredTimer+0x7c>
 8008330:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8008334:	490b      	ldr	r1, [pc, #44]	@ (8008364 <prvProcessExpiredTimer+0x90>)
 8008336:	480c      	ldr	r0, [pc, #48]	@ (8008368 <prvProcessExpiredTimer+0x94>)
 8008338:	f00b fcf6 	bl	8013d28 <assertFail>
 800833c:	e008      	b.n	8008350 <prvProcessExpiredTimer+0x7c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	4798      	blx	r3
    }
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	200003b4 	.word	0x200003b4
 8008364:	0801bbb8 	.word	0x0801bbb8
 8008368:	0801bc48 	.word	0x0801bc48

0800836c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f859 	bl	8008430 <prvGetNextExpireTime>
 800837e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f805 	bl	8008394 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800838a:	f000 f8d7 	bl	800853c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800838e:	bf00      	nop
 8008390:	e7f0      	b.n	8008374 <prvTimerTask+0x8>
	...

08008394 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800839e:	f7ff f8df 	bl	8007560 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f866 	bl	8008478 <prvSampleTimeNow>
 80083ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d130      	bne.n	8008416 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <prvProcessTimerOrBlockTask+0x3c>
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d806      	bhi.n	80083d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80083c2:	f7ff f8db 	bl	800757c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff83 	bl	80082d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80083ce:	e024      	b.n	800841a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d008      	beq.n	80083e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083d6:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <prvProcessTimerOrBlockTask+0x90>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <prvProcessTimerOrBlockTask+0x50>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x52>
 80083e4:	2300      	movs	r3, #0
 80083e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008428 <prvProcessTimerOrBlockTask+0x94>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	4619      	mov	r1, r3
 80083f6:	f7fe fdbb 	bl	8006f70 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80083fa:	f7ff f8bf 	bl	800757c <xTaskResumeAll>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <prvProcessTimerOrBlockTask+0x98>)
 8008406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	f3bf 8f6f 	isb	sy
    }
 8008414:	e001      	b.n	800841a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008416:	f7ff f8b1 	bl	800757c <xTaskResumeAll>
    }
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200003b8 	.word	0x200003b8
 8008428:	200003bc 	.word	0x200003bc
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008438:	4b0e      	ldr	r3, [pc, #56]	@ (8008474 <prvGetNextExpireTime+0x44>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <prvGetNextExpireTime+0x16>
 8008442:	2201      	movs	r2, #1
 8008444:	e000      	b.n	8008448 <prvGetNextExpireTime+0x18>
 8008446:	2200      	movs	r2, #0
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008454:	4b07      	ldr	r3, [pc, #28]	@ (8008474 <prvGetNextExpireTime+0x44>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e001      	b.n	8008464 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008464:	68fb      	ldr	r3, [r7, #12]
    }
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	200003b4 	.word	0x200003b4

08008478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008480:	f7ff f918 	bl	80076b4 <xTaskGetTickCount>
 8008484:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008486:	4b0b      	ldr	r3, [pc, #44]	@ (80084b4 <prvSampleTimeNow+0x3c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	429a      	cmp	r2, r3
 800848e:	d205      	bcs.n	800849c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008490:	f000 f934 	bl	80086fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e002      	b.n	80084a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80084a2:	4a04      	ldr	r2, [pc, #16]	@ (80084b4 <prvSampleTimeNow+0x3c>)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80084a8:	68fb      	ldr	r3, [r7, #12]
    }
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200003c4 	.word	0x200003c4

080084b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d812      	bhi.n	8008504 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e01b      	b.n	800852a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <prvInsertTimerInActiveList+0x7c>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7fd fdde 	bl	80060be <vListInsert>
 8008502:	e012      	b.n	800852a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d206      	bcs.n	800851a <prvInsertTimerInActiveList+0x62>
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d302      	bcc.n	800851a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e007      	b.n	800852a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800851a:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <prvInsertTimerInActiveList+0x80>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3304      	adds	r3, #4
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7fd fdca 	bl	80060be <vListInsert>
            }
        }

        return xProcessTimerNow;
 800852a:	697b      	ldr	r3, [r7, #20]
    }
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200003b8 	.word	0x200003b8
 8008538:	200003b4 	.word	0x200003b4

0800853c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	@ 0x30
 8008540:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008542:	e0bf      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	da14      	bge.n	8008574 <prvProcessReceivedCommands+0x38>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	3304      	adds	r3, #4
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <prvProcessReceivedCommands+0x28>
 8008558:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800855c:	4962      	ldr	r1, [pc, #392]	@ (80086e8 <prvProcessReceivedCommands+0x1ac>)
 800855e:	4863      	ldr	r0, [pc, #396]	@ (80086ec <prvProcessReceivedCommands+0x1b0>)
 8008560:	f00b fbe2 	bl	8013d28 <assertFail>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856a:	6850      	ldr	r0, [r2, #4]
 800856c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856e:	6892      	ldr	r2, [r2, #8]
 8008570:	4611      	mov	r1, r2
 8008572:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f2c0 80a4 	blt.w	80086c4 <prvProcessReceivedCommands+0x188>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <prvProcessReceivedCommands+0x56>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	3304      	adds	r3, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd fdcf 	bl	8006130 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff ff6f 	bl	8008478 <prvSampleTimeNow>
 800859a:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b09      	cmp	r3, #9
 80085a0:	f200 808d 	bhi.w	80086be <prvProcessReceivedCommands+0x182>
 80085a4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <prvProcessReceivedCommands+0x70>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085d5 	.word	0x080085d5
 80085b8:	08008641 	.word	0x08008641
 80085bc:	08008655 	.word	0x08008655
 80085c0:	08008695 	.word	0x08008695
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085d5 	.word	0x080085d5
 80085cc:	08008641 	.word	0x08008641
 80085d0:	08008655 	.word	0x08008655
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	18d1      	adds	r1, r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	6a38      	ldr	r0, [r7, #32]
 80085f4:	f7ff ff60 	bl	80084b8 <prvInsertTimerInActiveList>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d061      	beq.n	80086c2 <prvProcessReceivedCommands+0x186>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	6a38      	ldr	r0, [r7, #32]
 8008604:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d056      	beq.n	80086c2 <prvProcessReceivedCommands+0x186>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	441a      	add	r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2300      	movs	r3, #0
 8008622:	2100      	movs	r1, #0
 8008624:	6a38      	ldr	r0, [r7, #32]
 8008626:	f7ff fe09 	bl	800823c <xTimerGenericCommand>
 800862a:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d147      	bne.n	80086c2 <prvProcessReceivedCommands+0x186>
 8008632:	f240 3236 	movw	r2, #822	@ 0x336
 8008636:	492c      	ldr	r1, [pc, #176]	@ (80086e8 <prvProcessReceivedCommands+0x1ac>)
 8008638:	482d      	ldr	r0, [pc, #180]	@ (80086f0 <prvProcessReceivedCommands+0x1b4>)
 800863a:	f00b fb75 	bl	8013d28 <assertFail>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800863e:	e040      	b.n	80086c2 <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008652:	e037      	b.n	80086c4 <prvProcessReceivedCommands+0x188>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	b2da      	uxtb	r2, r3
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <prvProcessReceivedCommands+0x144>
 8008674:	f240 324f 	movw	r2, #847	@ 0x34f
 8008678:	491b      	ldr	r1, [pc, #108]	@ (80086e8 <prvProcessReceivedCommands+0x1ac>)
 800867a:	481e      	ldr	r0, [pc, #120]	@ (80086f4 <prvProcessReceivedCommands+0x1b8>)
 800867c:	f00b fb54 	bl	8013d28 <assertFail>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	699a      	ldr	r2, [r3, #24]
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	18d1      	adds	r1, r2, r3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	6a38      	ldr	r0, [r7, #32]
 800868e:	f7ff ff13 	bl	80084b8 <prvInsertTimerInActiveList>
                        break;
 8008692:	e017      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <prvProcessReceivedCommands+0x16e>
                                {
                                    vPortFree( pxTimer );
 80086a2:	6a38      	ldr	r0, [r7, #32]
 80086a4:	f000 fbbc 	bl	8008e20 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80086a8:	e00c      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80086bc:	e002      	b.n	80086c4 <prvProcessReceivedCommands+0x188>

                    default:
                        /* Don't expect to get here. */
                        break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
                        break;
 80086c2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086c4:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <prvProcessReceivedCommands+0x1bc>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	2200      	movs	r2, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe f912 	bl	80068f8 <xQueueReceive>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f47f af34 	bne.w	8008544 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	3728      	adds	r7, #40	@ 0x28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	0801bbb8 	.word	0x0801bbb8
 80086ec:	0801bc50 	.word	0x0801bc50
 80086f0:	0801bc48 	.word	0x0801bc48
 80086f4:	0801bc5c 	.word	0x0801bc5c
 80086f8:	200003bc 	.word	0x200003bc

080086fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008702:	e043      	b.n	800878c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008704:	4b2b      	ldr	r3, [pc, #172]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	4b29      	ldr	r3, [pc, #164]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3304      	adds	r3, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f7fd fd07 	bl	8006130 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d029      	beq.n	800878c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	429a      	cmp	r2, r3
 8008748:	d90e      	bls.n	8008768 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008756:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7fd fcac 	bl	80060be <vListInsert>
 8008766:	e011      	b.n	800878c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	2100      	movs	r1, #0
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff fd62 	bl	800823c <xTimerGenericCommand>
 8008778:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d105      	bne.n	800878c <prvSwitchTimerLists+0x90>
 8008780:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8008784:	490c      	ldr	r1, [pc, #48]	@ (80087b8 <prvSwitchTimerLists+0xbc>)
 8008786:	480d      	ldr	r0, [pc, #52]	@ (80087bc <prvSwitchTimerLists+0xc0>)
 8008788:	f00b face 	bl	8013d28 <assertFail>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800878c:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1b6      	bne.n	8008704 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008796:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800879c:	4b08      	ldr	r3, [pc, #32]	@ (80087c0 <prvSwitchTimerLists+0xc4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a04      	ldr	r2, [pc, #16]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 80087a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80087a4:	4a06      	ldr	r2, [pc, #24]	@ (80087c0 <prvSwitchTimerLists+0xc4>)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6013      	str	r3, [r2, #0]
    }
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200003b4 	.word	0x200003b4
 80087b8:	0801bbb8 	.word	0x0801bbb8
 80087bc:	0801bc48 	.word	0x0801bc48
 80087c0:	200003b8 	.word	0x200003b8

080087c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80087ca:	f000 f94f 	bl	8008a6c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80087ce:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d120      	bne.n	8008818 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80087d6:	4814      	ldr	r0, [pc, #80]	@ (8008828 <prvCheckForValidListAndQueue+0x64>)
 80087d8:	f7fd fc20 	bl	800601c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80087dc:	4813      	ldr	r0, [pc, #76]	@ (800882c <prvCheckForValidListAndQueue+0x68>)
 80087de:	f7fd fc1d 	bl	800601c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80087e2:	4b13      	ldr	r3, [pc, #76]	@ (8008830 <prvCheckForValidListAndQueue+0x6c>)
 80087e4:	4a10      	ldr	r2, [pc, #64]	@ (8008828 <prvCheckForValidListAndQueue+0x64>)
 80087e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80087e8:	4b12      	ldr	r3, [pc, #72]	@ (8008834 <prvCheckForValidListAndQueue+0x70>)
 80087ea:	4a10      	ldr	r2, [pc, #64]	@ (800882c <prvCheckForValidListAndQueue+0x68>)
 80087ec:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087ee:	2300      	movs	r3, #0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	4b11      	ldr	r3, [pc, #68]	@ (8008838 <prvCheckForValidListAndQueue+0x74>)
 80087f4:	4a11      	ldr	r2, [pc, #68]	@ (800883c <prvCheckForValidListAndQueue+0x78>)
 80087f6:	2110      	movs	r1, #16
 80087f8:	2014      	movs	r0, #20
 80087fa:	f7fd fd2b 	bl	8006254 <xQueueGenericCreateStatic>
 80087fe:	4603      	mov	r3, r0
 8008800:	4a08      	ldr	r2, [pc, #32]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 8008802:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008804:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800880c:	4b05      	ldr	r3, [pc, #20]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	490b      	ldr	r1, [pc, #44]	@ (8008840 <prvCheckForValidListAndQueue+0x7c>)
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fb82 	bl	8006f1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008818:	f000 f956 	bl	8008ac8 <vPortExitCritical>
    }
 800881c:	bf00      	nop
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200003bc 	.word	0x200003bc
 8008828:	2000038c 	.word	0x2000038c
 800882c:	200003a0 	.word	0x200003a0
 8008830:	200003b4 	.word	0x200003b4
 8008834:	200003b8 	.word	0x200003b8
 8008838:	20000508 	.word	0x20000508
 800883c:	200003c8 	.word	0x200003c8
 8008840:	0801bc84 	.word	0x0801bc84

08008844 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3b04      	subs	r3, #4
 8008854:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800885c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3b04      	subs	r3, #4
 8008862:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f023 0201 	bic.w	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3b04      	subs	r3, #4
 8008872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008874:	4a0c      	ldr	r2, [pc, #48]	@ (80088a8 <pxPortInitialiseStack+0x64>)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3b14      	subs	r3, #20
 800887e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3b04      	subs	r3, #4
 800888a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f06f 0202 	mvn.w	r2, #2
 8008892:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b20      	subs	r3, #32
 8008898:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800889a:	68fb      	ldr	r3, [r7, #12]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	080088ad 	.word	0x080088ad

080088ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80088b6:	4b0e      	ldr	r3, [pc, #56]	@ (80088f0 <prvTaskExitError+0x44>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d004      	beq.n	80088ca <prvTaskExitError+0x1e>
 80088c0:	22e5      	movs	r2, #229	@ 0xe5
 80088c2:	490c      	ldr	r1, [pc, #48]	@ (80088f4 <prvTaskExitError+0x48>)
 80088c4:	480c      	ldr	r0, [pc, #48]	@ (80088f8 <prvTaskExitError+0x4c>)
 80088c6:	f00b fa2f 	bl	8013d28 <assertFail>
        __asm volatile
 80088ca:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	607b      	str	r3, [r7, #4]
    }
 80088dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80088de:	bf00      	nop
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0fc      	beq.n	80088e0 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	0801bc98 	.word	0x0801bc98
 80088f8:	0801bcc4 	.word	0x0801bcc4
 80088fc:	00000000 	.word	0x00000000

08008900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <pxCurrentTCBConst2>)
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f380 8809 	msr	PSP, r0
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	4770      	bx	lr
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst2>:
 8008920:	2000026c 	.word	0x2000026c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008928:	4808      	ldr	r0, [pc, #32]	@ (800894c <prvPortStartFirstTask+0x24>)
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f380 8808 	msr	MSP, r0
 8008932:	f04f 0000 	mov.w	r0, #0
 8008936:	f380 8814 	msr	CONTROL, r0
 800893a:	b662      	cpsie	i
 800893c:	b661      	cpsie	f
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	df00      	svc	0
 8008948:	bf00      	nop
 800894a:	0000      	.short	0x0000
 800894c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop

08008954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800895a:	4b38      	ldr	r3, [pc, #224]	@ (8008a3c <xPortStartScheduler+0xe8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a38      	ldr	r2, [pc, #224]	@ (8008a40 <xPortStartScheduler+0xec>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d105      	bne.n	8008970 <xPortStartScheduler+0x1c>
 8008964:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008968:	4936      	ldr	r1, [pc, #216]	@ (8008a44 <xPortStartScheduler+0xf0>)
 800896a:	4837      	ldr	r0, [pc, #220]	@ (8008a48 <xPortStartScheduler+0xf4>)
 800896c:	f00b f9dc 	bl	8013d28 <assertFail>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008970:	4b32      	ldr	r3, [pc, #200]	@ (8008a3c <xPortStartScheduler+0xe8>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a35      	ldr	r2, [pc, #212]	@ (8008a4c <xPortStartScheduler+0xf8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d105      	bne.n	8008986 <xPortStartScheduler+0x32>
 800897a:	f240 122d 	movw	r2, #301	@ 0x12d
 800897e:	4931      	ldr	r1, [pc, #196]	@ (8008a44 <xPortStartScheduler+0xf0>)
 8008980:	4833      	ldr	r0, [pc, #204]	@ (8008a50 <xPortStartScheduler+0xfc>)
 8008982:	f00b f9d1 	bl	8013d28 <assertFail>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008986:	4b33      	ldr	r3, [pc, #204]	@ (8008a54 <xPortStartScheduler+0x100>)
 8008988:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22ff      	movs	r2, #255	@ 0xff
 8008996:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008a58 <xPortStartScheduler+0x104>)
 80089ac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ae:	4b2b      	ldr	r3, [pc, #172]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b4:	e009      	b.n	80089ca <xPortStartScheduler+0x76>
            {
                ulMaxPRIGROUPValue--;
 80089b6:	4b29      	ldr	r3, [pc, #164]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a27      	ldr	r2, [pc, #156]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089be:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b80      	cmp	r3, #128	@ 0x80
 80089d4:	d0ef      	beq.n	80089b6 <xPortStartScheduler+0x62>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089d6:	4b21      	ldr	r3, [pc, #132]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	4a1f      	ldr	r2, [pc, #124]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089de:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089e0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089e8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089ea:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80089f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a60 <xPortStartScheduler+0x10c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a19      	ldr	r2, [pc, #100]	@ (8008a60 <xPortStartScheduler+0x10c>)
 80089fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008a00:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <xPortStartScheduler+0x10c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <xPortStartScheduler+0x10c>)
 8008a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008a0c:	f000 f8de 	bl	8008bcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008a10:	4b14      	ldr	r3, [pc, #80]	@ (8008a64 <xPortStartScheduler+0x110>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008a16:	f000 f8f5 	bl	8008c04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a1a:	4b13      	ldr	r3, [pc, #76]	@ (8008a68 <xPortStartScheduler+0x114>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a12      	ldr	r2, [pc, #72]	@ (8008a68 <xPortStartScheduler+0x114>)
 8008a20:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a24:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008a26:	f7ff ff7f 	bl	8008928 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008a2a:	f7fe ff2d 	bl	8007888 <vTaskSwitchContext>
    prvTaskExitError();
 8008a2e:	f7ff ff3d 	bl	80088ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	e000ed00 	.word	0xe000ed00
 8008a40:	410fc271 	.word	0x410fc271
 8008a44:	0801bc98 	.word	0x0801bc98
 8008a48:	0801bce0 	.word	0x0801bce0
 8008a4c:	410fc270 	.word	0x410fc270
 8008a50:	0801bd04 	.word	0x0801bd04
 8008a54:	e000e400 	.word	0xe000e400
 8008a58:	20000558 	.word	0x20000558
 8008a5c:	2000055c 	.word	0x2000055c
 8008a60:	e000ed20 	.word	0xe000ed20
 8008a64:	2000000c 	.word	0x2000000c
 8008a68:	e000ef34 	.word	0xe000ef34

08008a6c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
        __asm volatile
 8008a72:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
    }
 8008a84:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008a86:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab8 <vPortEnterCritical+0x4c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab8 <vPortEnterCritical+0x4c>)
 8008a8e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008a90:	4b09      	ldr	r3, [pc, #36]	@ (8008ab8 <vPortEnterCritical+0x4c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d10a      	bne.n	8008aae <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a98:	4b08      	ldr	r3, [pc, #32]	@ (8008abc <vPortEnterCritical+0x50>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <vPortEnterCritical+0x42>
 8008aa2:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8008aa6:	4906      	ldr	r1, [pc, #24]	@ (8008ac0 <vPortEnterCritical+0x54>)
 8008aa8:	4806      	ldr	r0, [pc, #24]	@ (8008ac4 <vPortEnterCritical+0x58>)
 8008aaa:	f00b f93d 	bl	8013d28 <assertFail>
    }
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	2000000c 	.word	0x2000000c
 8008abc:	e000ed04 	.word	0xe000ed04
 8008ac0:	0801bc98 	.word	0x0801bc98
 8008ac4:	0801bd44 	.word	0x0801bd44

08008ac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <vPortExitCritical+0x40>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d105      	bne.n	8008ae2 <vPortExitCritical+0x1a>
 8008ad6:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8008ada:	490c      	ldr	r1, [pc, #48]	@ (8008b0c <vPortExitCritical+0x44>)
 8008adc:	480c      	ldr	r0, [pc, #48]	@ (8008b10 <vPortExitCritical+0x48>)
 8008ade:	f00b f923 	bl	8013d28 <assertFail>
    uxCriticalNesting--;
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <vPortExitCritical+0x40>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	4a07      	ldr	r2, [pc, #28]	@ (8008b08 <vPortExitCritical+0x40>)
 8008aea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008aec:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <vPortExitCritical+0x40>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <vPortExitCritical+0x38>
 8008af4:	2300      	movs	r3, #0
 8008af6:	607b      	str	r3, [r7, #4]
        __asm volatile
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f383 8811 	msr	BASEPRI, r3
    }
 8008afe:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	2000000c 	.word	0x2000000c
 8008b0c:	0801bc98 	.word	0x0801bc98
 8008b10:	0801bd7c 	.word	0x0801bd7c
	...

08008b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008b20:	f3ef 8009 	mrs	r0, PSP
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <pxCurrentTCBConst>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	f01e 0f10 	tst.w	lr, #16
 8008b30:	bf08      	it	eq
 8008b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	6010      	str	r0, [r2, #0]
 8008b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b40:	f04f 005f 	mov.w	r0, #95	@ 0x5f
 8008b44:	f380 8811 	msr	BASEPRI, r0
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f7fe fe9a 	bl	8007888 <vTaskSwitchContext>
 8008b54:	f04f 0000 	mov.w	r0, #0
 8008b58:	f380 8811 	msr	BASEPRI, r0
 8008b5c:	bc09      	pop	{r0, r3}
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	6808      	ldr	r0, [r1, #0]
 8008b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b66:	f01e 0f10 	tst.w	lr, #16
 8008b6a:	bf08      	it	eq
 8008b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b70:	f380 8809 	msr	PSP, r0
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst>:
 8008b80:	2000026c 	.word	0x2000026c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
        __asm volatile
 8008b8e:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
    }
 8008ba0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008ba2:	f7fe fd97 	bl	80076d4 <xTaskIncrementTick>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <tickFreeRTOS+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <tickFreeRTOS+0x40>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f383 8811 	msr	BASEPRI, r3
    }
 8008bbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bd0:	4b08      	ldr	r3, [pc, #32]	@ (8008bf4 <vPortSetupTimerInterrupt+0x28>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bd6:	4b08      	ldr	r3, [pc, #32]	@ (8008bf8 <vPortSetupTimerInterrupt+0x2c>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <vPortSetupTimerInterrupt+0x30>)
 8008bde:	4a08      	ldr	r2, [pc, #32]	@ (8008c00 <vPortSetupTimerInterrupt+0x34>)
 8008be0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008be2:	4b04      	ldr	r3, [pc, #16]	@ (8008bf4 <vPortSetupTimerInterrupt+0x28>)
 8008be4:	2207      	movs	r2, #7
 8008be6:	601a      	str	r2, [r3, #0]
}
 8008be8:	bf00      	nop
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	e000e010 	.word	0xe000e010
 8008bf8:	e000e018 	.word	0xe000e018
 8008bfc:	e000e014 	.word	0xe000e014
 8008c00:	0002903f 	.word	0x0002903f

08008c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c14 <vPortEnableVFP+0x10>
 8008c08:	6801      	ldr	r1, [r0, #0]
 8008c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c0e:	6001      	str	r1, [r0, #0]
 8008c10:	4770      	bx	lr
 8008c12:	0000      	.short	0x0000
 8008c14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop

08008c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008c22:	f3ef 8305 	mrs	r3, IPSR
 8008c26:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b0f      	cmp	r3, #15
 8008c2c:	d90f      	bls.n	8008c4e <vPortValidateInterruptPriority+0x32>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c2e:	4a11      	ldr	r2, [pc, #68]	@ (8008c74 <vPortValidateInterruptPriority+0x58>)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c38:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <vPortValidateInterruptPriority+0x5c>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d205      	bcs.n	8008c4e <vPortValidateInterruptPriority+0x32>
 8008c42:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8008c46:	490d      	ldr	r1, [pc, #52]	@ (8008c7c <vPortValidateInterruptPriority+0x60>)
 8008c48:	480d      	ldr	r0, [pc, #52]	@ (8008c80 <vPortValidateInterruptPriority+0x64>)
 8008c4a:	f00b f86d 	bl	8013d28 <assertFail>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <vPortValidateInterruptPriority+0x68>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c56:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <vPortValidateInterruptPriority+0x6c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d905      	bls.n	8008c6a <vPortValidateInterruptPriority+0x4e>
 8008c5e:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8008c62:	4906      	ldr	r1, [pc, #24]	@ (8008c7c <vPortValidateInterruptPriority+0x60>)
 8008c64:	4809      	ldr	r0, [pc, #36]	@ (8008c8c <vPortValidateInterruptPriority+0x70>)
 8008c66:	f00b f85f 	bl	8013d28 <assertFail>
    }
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	e000e3f0 	.word	0xe000e3f0
 8008c78:	20000558 	.word	0x20000558
 8008c7c:	0801bc98 	.word	0x0801bc98
 8008c80:	0801bd90 	.word	0x0801bd90
 8008c84:	e000ed0c 	.word	0xe000ed0c
 8008c88:	2000055c 	.word	0x2000055c
 8008c8c:	0801bdbc 	.word	0x0801bdbc

08008c90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8008c9c:	f7fe fc60 	bl	8007560 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008ca0:	4b55      	ldr	r3, [pc, #340]	@ (8008df8 <pvPortMalloc+0x168>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008ca8:	f000 f918 	bl	8008edc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cac:	4b53      	ldr	r3, [pc, #332]	@ (8008dfc <pvPortMalloc+0x16c>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f040 8087 	bne.w	8008dc8 <pvPortMalloc+0x138>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <pvPortMalloc+0x60>
            {
                xWantedSize += xHeapStructSize;
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00e      	beq.n	8008cf0 <pvPortMalloc+0x60>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f023 0307 	bic.w	r3, r3, #7
 8008cd8:	3308      	adds	r3, #8
 8008cda:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <pvPortMalloc+0x60>
 8008ce6:	2297      	movs	r2, #151	@ 0x97
 8008ce8:	4945      	ldr	r1, [pc, #276]	@ (8008e00 <pvPortMalloc+0x170>)
 8008cea:	4846      	ldr	r0, [pc, #280]	@ (8008e04 <pvPortMalloc+0x174>)
 8008cec:	f00b f81c 	bl	8013d28 <assertFail>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d068      	beq.n	8008dc8 <pvPortMalloc+0x138>
 8008cf6:	4b44      	ldr	r3, [pc, #272]	@ (8008e08 <pvPortMalloc+0x178>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d863      	bhi.n	8008dc8 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008d00:	4b42      	ldr	r3, [pc, #264]	@ (8008e0c <pvPortMalloc+0x17c>)
 8008d02:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8008d04:	4b41      	ldr	r3, [pc, #260]	@ (8008e0c <pvPortMalloc+0x17c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0a:	e004      	b.n	8008d16 <pvPortMalloc+0x86>
                {
                    pxPreviousBlock = pxBlock;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d903      	bls.n	8008d28 <pvPortMalloc+0x98>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f1      	bne.n	8008d0c <pvPortMalloc+0x7c>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8008d28:	4b33      	ldr	r3, [pc, #204]	@ (8008df8 <pvPortMalloc+0x168>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d04a      	beq.n	8008dc8 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2208      	movs	r2, #8
 8008d38:	4413      	add	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d919      	bls.n	8008d88 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 0307 	and.w	r3, r3, #7
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d004      	beq.n	8008d70 <pvPortMalloc+0xe0>
 8008d66:	22c5      	movs	r2, #197	@ 0xc5
 8008d68:	4925      	ldr	r1, [pc, #148]	@ (8008e00 <pvPortMalloc+0x170>)
 8008d6a:	4829      	ldr	r0, [pc, #164]	@ (8008e10 <pvPortMalloc+0x180>)
 8008d6c:	f00a ffdc 	bl	8013d28 <assertFail>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d82:	68b8      	ldr	r0, [r7, #8]
 8008d84:	f000 f90c 	bl	8008fa0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d88:	4b1f      	ldr	r3, [pc, #124]	@ (8008e08 <pvPortMalloc+0x178>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <pvPortMalloc+0x178>)
 8008d94:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d96:	4b1c      	ldr	r3, [pc, #112]	@ (8008e08 <pvPortMalloc+0x178>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008e14 <pvPortMalloc+0x184>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d203      	bcs.n	8008daa <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da2:	4b19      	ldr	r3, [pc, #100]	@ (8008e08 <pvPortMalloc+0x178>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e14 <pvPortMalloc+0x184>)
 8008da8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	4b13      	ldr	r3, [pc, #76]	@ (8008dfc <pvPortMalloc+0x16c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008dbe:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <pvPortMalloc+0x188>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a14      	ldr	r2, [pc, #80]	@ (8008e18 <pvPortMalloc+0x188>)
 8008dc6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008dc8:	f7fe fbd8 	bl	800757c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <pvPortMalloc+0x146>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008dd2:	f005 fe32 	bl	800ea3a <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f003 0307 	and.w	r3, r3, #7
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <pvPortMalloc+0x15c>
 8008de0:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8008de4:	4906      	ldr	r1, [pc, #24]	@ (8008e00 <pvPortMalloc+0x170>)
 8008de6:	480d      	ldr	r0, [pc, #52]	@ (8008e1c <pvPortMalloc+0x18c>)
 8008de8:	f00a ff9e 	bl	8013d28 <assertFail>
    return pvReturn;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20007a98 	.word	0x20007a98
 8008dfc:	20007aac 	.word	0x20007aac
 8008e00:	0801be00 	.word	0x0801be00
 8008e04:	0801be28 	.word	0x0801be28
 8008e08:	20007a9c 	.word	0x20007a9c
 8008e0c:	20007a90 	.word	0x20007a90
 8008e10:	0801be58 	.word	0x0801be58
 8008e14:	20007aa0 	.word	0x20007aa0
 8008e18:	20007aa4 	.word	0x20007aa4
 8008e1c:	0801be9c 	.word	0x0801be9c

08008e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d043      	beq.n	8008eba <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008e32:	2308      	movs	r3, #8
 8008e34:	425b      	negs	r3, r3
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec4 <vPortFree+0xa4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <vPortFree+0x3a>
 8008e4e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8008e52:	491d      	ldr	r1, [pc, #116]	@ (8008ec8 <vPortFree+0xa8>)
 8008e54:	481d      	ldr	r0, [pc, #116]	@ (8008ecc <vPortFree+0xac>)
 8008e56:	f00a ff67 	bl	8013d28 <assertFail>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <vPortFree+0x4e>
 8008e62:	f240 121b 	movw	r2, #283	@ 0x11b
 8008e66:	4918      	ldr	r1, [pc, #96]	@ (8008ec8 <vPortFree+0xa8>)
 8008e68:	4819      	ldr	r0, [pc, #100]	@ (8008ed0 <vPortFree+0xb0>)
 8008e6a:	f00a ff5d 	bl	8013d28 <assertFail>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	4b14      	ldr	r3, [pc, #80]	@ (8008ec4 <vPortFree+0xa4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01e      	beq.n	8008eba <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d11a      	bne.n	8008eba <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec4 <vPortFree+0xa4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	43db      	mvns	r3, r3
 8008e8e:	401a      	ands	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008e94:	f7fe fb64 	bl	8007560 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed4 <vPortFree+0xb4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed4 <vPortFree+0xb4>)
 8008ea4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ea6:	68b8      	ldr	r0, [r7, #8]
 8008ea8:	f000 f87a 	bl	8008fa0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008eac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed8 <vPortFree+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	4a09      	ldr	r2, [pc, #36]	@ (8008ed8 <vPortFree+0xb8>)
 8008eb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008eb6:	f7fe fb61 	bl	800757c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20007aac 	.word	0x20007aac
 8008ec8:	0801be00 	.word	0x0801be00
 8008ecc:	0801bee4 	.word	0x0801bee4
 8008ed0:	0801bf18 	.word	0x0801bf18
 8008ed4:	20007a9c 	.word	0x20007a9c
 8008ed8:	20007aa8 	.word	0x20007aa8

08008edc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ee2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008ee6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008ee8:	4b27      	ldr	r3, [pc, #156]	@ (8008f88 <prvHeapInit+0xac>)
 8008eea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3307      	adds	r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <prvHeapInit+0xac>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f14:	4a1d      	ldr	r2, [pc, #116]	@ (8008f8c <prvHeapInit+0xb0>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f8c <prvHeapInit+0xb0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008f28:	2208      	movs	r2, #8
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008f3e:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008f46:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a0a      	ldr	r2, [pc, #40]	@ (8008f94 <prvHeapInit+0xb8>)
 8008f6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4a09      	ldr	r2, [pc, #36]	@ (8008f98 <prvHeapInit+0xbc>)
 8008f72:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f74:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <prvHeapInit+0xc0>)
 8008f76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f7a:	601a      	str	r2, [r3, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000560 	.word	0x20000560
 8008f8c:	20007a90 	.word	0x20007a90
 8008f90:	20007a98 	.word	0x20007a98
 8008f94:	20007aa0 	.word	0x20007aa0
 8008f98:	20007a9c 	.word	0x20007a9c
 8008f9c:	20007aac 	.word	0x20007aac

08008fa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa8:	4b28      	ldr	r3, [pc, #160]	@ (800904c <prvInsertBlockIntoFreeList+0xac>)
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e002      	b.n	8008fb4 <prvInsertBlockIntoFreeList+0x14>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d8f7      	bhi.n	8008fae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d108      	bne.n	8008fe2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	441a      	add	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d118      	bne.n	8009028 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <prvInsertBlockIntoFreeList+0xb0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d00d      	beq.n	800901e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	441a      	add	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	e008      	b.n	8009030 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800901e:	4b0c      	ldr	r3, [pc, #48]	@ (8009050 <prvInsertBlockIntoFreeList+0xb0>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e003      	b.n	8009030 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d002      	beq.n	800903e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20007a90 	.word	0x20007a90
 8009050:	20007a98 	.word	0x20007a98

08009054 <main>:

void SystemClock_Config(void);


int main( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0

//	HAL_Init();
	SystemClock_Config();
 800905a:	f000 f80f 	bl	800907c <SystemClock_Config>

	int err = platformInit();
 800905e:	f00a fd5c 	bl	8013b1a <platformInit>
 8009062:	6078      	str	r0, [r7, #4]
	if (err != 0) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <main+0x1a>
		// The firmware is running on the wrong hardware. Halt
		while (1);
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <main+0x16>
	}

	systemLaunch();
 800906e:	f005 fbc9 	bl	800e804 <systemLaunch>
//	counter +=1;
//	cournter_timint = 1;
//	HAL_TIM_Base_Start_IT(&htim4);
//	cournter_timint = 2;
	//JH
	vTaskStartScheduler();
 8009072:	f7fe fa03 	bl	800747c <vTaskStartScheduler>
//	cournter_timint = 2;
	//NJH
//	counter +=1;

    for(;;)
 8009076:	bf00      	nop
 8009078:	e7fd      	b.n	8009076 <main+0x22>
	...

0800907c <SystemClock_Config>:
//			counter +=1;
//		}
    }
}
void SystemClock_Config(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b094      	sub	sp, #80	@ 0x50
 8009080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009082:	f107 0320 	add.w	r3, r7, #32
 8009086:	2230      	movs	r2, #48	@ 0x30
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f010 f8fe 	bl	801928c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	609a      	str	r2, [r3, #8]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80090a0:	2300      	movs	r3, #0
 80090a2:	60bb      	str	r3, [r7, #8]
 80090a4:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <SystemClock_Config+0xcc>)
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	4a27      	ldr	r2, [pc, #156]	@ (8009148 <SystemClock_Config+0xcc>)
 80090aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80090b0:	4b25      	ldr	r3, [pc, #148]	@ (8009148 <SystemClock_Config+0xcc>)
 80090b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090bc:	2300      	movs	r3, #0
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	4b22      	ldr	r3, [pc, #136]	@ (800914c <SystemClock_Config+0xd0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a21      	ldr	r2, [pc, #132]	@ (800914c <SystemClock_Config+0xd0>)
 80090c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	4b1f      	ldr	r3, [pc, #124]	@ (800914c <SystemClock_Config+0xd0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80090d8:	2301      	movs	r3, #1
 80090da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80090dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090e2:	2302      	movs	r3, #2
 80090e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80090ec:	2304      	movs	r3, #4
 80090ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80090f0:	23a8      	movs	r3, #168	@ 0xa8
 80090f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80090f4:	2302      	movs	r3, #2
 80090f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80090f8:	2304      	movs	r3, #4
 80090fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090fc:	f107 0320 	add.w	r3, r7, #32
 8009100:	4618      	mov	r0, r3
 8009102:	f7f9 febb 	bl	8002e7c <HAL_RCC_OscConfig>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800910c:	f000 f850 	bl	80091b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009110:	230f      	movs	r3, #15
 8009112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009114:	2302      	movs	r3, #2
 8009116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800911c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	2105      	movs	r1, #5
 800912e:	4618      	mov	r0, r3
 8009130:	f7fa f91c 	bl	800336c <HAL_RCC_ClockConfig>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800913a:	f000 f839 	bl	80091b0 <Error_Handler>
  }
}
 800913e:	bf00      	nop
 8009140:	3750      	adds	r7, #80	@ 0x50
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40023800 	.word	0x40023800
 800914c:	40007000 	.word	0x40007000

08009150 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a09      	ldr	r2, [pc, #36]	@ (8009184 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d10b      	bne.n	800917a <HAL_TIM_PeriodElapsedCallback+0x2a>
//		cournter += 1;
//		  hal_dshot_write(my_motor_values);
		  cournter_timint += 1;
 8009162:	4b09      	ldr	r3, [pc, #36]	@ (8009188 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a07      	ldr	r2, [pc, #28]	@ (8009188 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800916a:	6013      	str	r3, [r2, #0]
		  hal_ibus_read(ibus_data);
 800916c:	4807      	ldr	r0, [pc, #28]	@ (800918c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800916e:	f000 fe3d 	bl	8009dec <hal_ibus_read>
		  ibus_soft_failsafe(ibus_data, 10);
 8009172:	210a      	movs	r1, #10
 8009174:	4805      	ldr	r0, [pc, #20]	@ (800918c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009176:	f000 fecd 	bl	8009f14 <ibus_soft_failsafe>
//		  HAL_Delay(1);
	}
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	40000800 	.word	0x40000800
 8009188:	20007ab0 	.word	0x20007ab0
 800918c:	20007ab4 	.word	0x20007ab4

08009190 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART){
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a04      	ldr	r2, [pc, #16]	@ (80091ac <HAL_UART_RxCpltCallback+0x1c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d101      	bne.n	80091a4 <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 80091a0:	f000 fef4 	bl	8009f8c <ibus_reset_failsafe>
	}
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	200080b4 	.word	0x200080b4

080091b0 <Error_Handler>:



void Error_Handler(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80091b4:	b672      	cpsid	i
}
 80091b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80091b8:	bf00      	nop
 80091ba:	e7fd      	b.n	80091b8 <Error_Handler+0x8>

080091bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80091bc:	480d      	ldr	r0, [pc, #52]	@ (80091f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80091be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80091c0:	f7f7 ffa2 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c4:	480c      	ldr	r0, [pc, #48]	@ (80091f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80091c6:	490d      	ldr	r1, [pc, #52]	@ (80091fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80091c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009200 <LoopForever+0xe>)
  movs r3, #0
 80091ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091cc:	e002      	b.n	80091d4 <LoopCopyDataInit>

080091ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091d2:	3304      	adds	r3, #4

080091d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091d8:	d3f9      	bcc.n	80091ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091da:	4a0a      	ldr	r2, [pc, #40]	@ (8009204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091dc:	4c0a      	ldr	r4, [pc, #40]	@ (8009208 <LoopForever+0x16>)
  movs r3, #0
 80091de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091e0:	e001      	b.n	80091e6 <LoopFillZerobss>

080091e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e4:	3204      	adds	r2, #4

080091e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091e8:	d3fb      	bcc.n	80091e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80091ea:	f010 f871 	bl	80192d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091ee:	f7ff ff31 	bl	8009054 <main>

080091f2 <LoopForever>:

LoopForever:
  b LoopForever
 80091f2:	e7fe      	b.n	80091f2 <LoopForever>
  ldr   r0, =_estack
 80091f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80091f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091fc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8009200:	0801ceb4 	.word	0x0801ceb4
  ldr r2, =_sbss
 8009204:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8009208:	2000a694 	.word	0x2000a694

0800920c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800920c:	e7fe      	b.n	800920c <ADC_IRQHandler>
	...

08009210 <SPI3_IRQHandler>:
//	}
//
//
//}
void SPI3_IRQHandler(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0

  HAL_SPI_IRQHandler(&hspi3);
 8009214:	4802      	ldr	r0, [pc, #8]	@ (8009220 <SPI3_IRQHandler+0x10>)
 8009216:	f7fa ff59 	bl	80040cc <HAL_SPI_IRQHandler>

}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20007d34 	.word	0x20007d34

08009224 <zRanger2GetMeasurementAndRestart>:
bool checkRangeID;

NO_DMA_CCM_SAFE_ZERO_INIT static VL53L1_Dev_t dev;

static uint16_t zRanger2GetMeasurementAndRestart(VL53L1_Dev_t *dev)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08c      	sub	sp, #48	@ 0x30
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
    VL53L1_Error status = VL53L1_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
 800922e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    VL53L1_RangingMeasurementData_t rangingData;
    uint8_t dataReady = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
    uint16_t range;

    while (dataReady == 0)
 8009236:	e00b      	b.n	8009250 <zRanger2GetMeasurementAndRestart+0x2c>
    {
        status = VL53L1_GetMeasurementDataReady(dev, &dataReady);
 8009238:	f107 030f 	add.w	r3, r7, #15
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f00b fc24 	bl	8014a8c <VL53L1_GetMeasurementDataReady>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        vTaskDelay(M2T(1));
 800924a:	2001      	movs	r0, #1
 800924c:	f7fe f8e2 	bl	8007414 <vTaskDelay>
    while (dataReady == 0)
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0f0      	beq.n	8009238 <zRanger2GetMeasurementAndRestart+0x14>
    }

    status = VL53L1_GetRangingMeasurementData(dev, &rangingData);
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f00b fdd1 	bl	8014e04 <VL53L1_GetRangingMeasurementData>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    range = rangingData.RangeMilliMeter;
 8009268:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800926c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    VL53L1_StopMeasurement(dev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f00b fbf3 	bl	8014a5a <VL53L1_StopMeasurement>
    status = VL53L1_StartMeasurement(dev);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f00b fbb1 	bl	80149dc <VL53L1_StartMeasurement>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    status = status;

    return range;
 8009280:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8009282:	4618      	mov	r0, r3
 8009284:	3730      	adds	r7, #48	@ 0x30
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <zRanger2Init>:

void zRanger2Init()
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af02      	add	r7, sp, #8
  if (isInit)
 8009292:	4b1a      	ldr	r3, [pc, #104]	@ (80092fc <zRanger2Init+0x70>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d12d      	bne.n	80092f6 <zRanger2Init+0x6a>
    return;

  checkRangeID = vl53l1xInit(&dev, &hi2c2);
 800929a:	4919      	ldr	r1, [pc, #100]	@ (8009300 <zRanger2Init+0x74>)
 800929c:	4819      	ldr	r0, [pc, #100]	@ (8009304 <zRanger2Init+0x78>)
 800929e:	f002 fb49 	bl	800b934 <vl53l1xInit>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b18      	ldr	r3, [pc, #96]	@ (8009308 <zRanger2Init+0x7c>)
 80092a8:	701a      	strb	r2, [r3, #0]


  xTaskCreate(zRanger2Task, ZRANGER2_TASK_NAME, ZRANGER2_TASK_STACKSIZE, NULL, ZRANGER2_TASK_PRI, NULL);
 80092aa:	2300      	movs	r3, #0
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	2302      	movs	r3, #2
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	2300      	movs	r3, #0
 80092b4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80092b8:	4914      	ldr	r1, [pc, #80]	@ (800930c <zRanger2Init+0x80>)
 80092ba:	4815      	ldr	r0, [pc, #84]	@ (8009310 <zRanger2Init+0x84>)
 80092bc:	f7fd fee2 	bl	8007084 <xTaskCreate>

  // pre-compute constant in the measurement noise model for kalman
  expCoeff = logf(expStdB / expStdA) / (expPointB - expPointA);
 80092c0:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8009314 <zRanger2Init+0x88>
 80092c4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009318 <zRanger2Init+0x8c>
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eeb0 0a67 	vmov.f32	s0, s15
 80092d0:	f010 f8c0 	bl	8019454 <logf>
 80092d4:	eef0 6a40 	vmov.f32	s13, s0
 80092d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80092dc:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 80092e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80092e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e8:	4b0c      	ldr	r3, [pc, #48]	@ (800931c <zRanger2Init+0x90>)
 80092ea:	edc3 7a00 	vstr	s15, [r3]

  isInit = true;
 80092ee:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <zRanger2Init+0x70>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	701a      	strb	r2, [r3, #0]
 80092f4:	e000      	b.n	80092f8 <zRanger2Init+0x6c>
    return;
 80092f6:	bf00      	nop
}
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20007ac6 	.word	0x20007ac6
 8009300:	20007c84 	.word	0x20007c84
 8009304:	10000000 	.word	0x10000000
 8009308:	20007acc 	.word	0x20007acc
 800930c:	0801bf38 	.word	0x0801bf38
 8009310:	08009321 	.word	0x08009321
 8009314:	3e4ccccd 	.word	0x3e4ccccd
 8009318:	3b23d70a 	.word	0x3b23d70a
 800931c:	20007ac0 	.word	0x20007ac0

08009320 <zRanger2Task>:

  return true;
}

void zRanger2Task(void* arg)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  TickType_t lastWakeTime;

  systemWaitStart();
 8009328:	f005 fb44 	bl	800e9b4 <systemWaitStart>

  // Restart sensor
  VL53L1_StopMeasurement(&dev);
 800932c:	4835      	ldr	r0, [pc, #212]	@ (8009404 <zRanger2Task+0xe4>)
 800932e:	f00b fb94 	bl	8014a5a <VL53L1_StopMeasurement>
  VL53L1_SetDistanceMode(&dev, VL53L1_DISTANCEMODE_MEDIUM);
 8009332:	2102      	movs	r1, #2
 8009334:	4833      	ldr	r0, [pc, #204]	@ (8009404 <zRanger2Task+0xe4>)
 8009336:	f00b f8b0 	bl	801449a <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds(&dev, 25000);
 800933a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800933e:	4831      	ldr	r0, [pc, #196]	@ (8009404 <zRanger2Task+0xe4>)
 8009340:	f00b f932 	bl	80145a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>

  VL53L1_StartMeasurement(&dev);
 8009344:	482f      	ldr	r0, [pc, #188]	@ (8009404 <zRanger2Task+0xe4>)
 8009346:	f00b fb49 	bl	80149dc <VL53L1_StartMeasurement>

  lastWakeTime = xTaskGetTickCount();
 800934a:	f7fe f9b3 	bl	80076b4 <xTaskGetTickCount>
 800934e:	4603      	mov	r3, r0
 8009350:	60fb      	str	r3, [r7, #12]

  while (1) {
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	2119      	movs	r1, #25
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd ffe5 	bl	8007328 <vTaskDelayUntil>
    rangeCounter++;
 800935e:	4b2a      	ldr	r3, [pc, #168]	@ (8009408 <zRanger2Task+0xe8>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a28      	ldr	r2, [pc, #160]	@ (8009408 <zRanger2Task+0xe8>)
 8009366:	6013      	str	r3, [r2, #0]
    range_last = zRanger2GetMeasurementAndRestart(&dev);
 8009368:	4826      	ldr	r0, [pc, #152]	@ (8009404 <zRanger2Task+0xe4>)
 800936a:	f7ff ff5b 	bl	8009224 <zRanger2GetMeasurementAndRestart>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	4b26      	ldr	r3, [pc, #152]	@ (800940c <zRanger2Task+0xec>)
 8009374:	801a      	strh	r2, [r3, #0]
    rangeSet(rangeDown, range_last / 1000.0f);
 8009376:	4b25      	ldr	r3, [pc, #148]	@ (800940c <zRanger2Task+0xec>)
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009382:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8009410 <zRanger2Task+0xf0>
 8009386:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800938a:	eeb0 0a47 	vmov.f32	s0, s14
 800938e:	2005      	movs	r0, #5
 8009390:	f004 fa40 	bl	800d814 <rangeSet>

    // check if range is feasible and push into the estimator
    // the sensor should not be able to measure >5 [m], and outliers typically
    // occur as >8 [m] measurements
    if (range_last < RANGE_OUTLIER_LIMIT) {
 8009394:	4b1d      	ldr	r3, [pc, #116]	@ (800940c <zRanger2Task+0xec>)
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	f241 3287 	movw	r2, #4999	@ 0x1387
 800939c:	4293      	cmp	r3, r2
 800939e:	d8d8      	bhi.n	8009352 <zRanger2Task+0x32>
      float distance = (float)range_last * 0.001f; // Scale from [mm] to [m]
 80093a0:	4b1a      	ldr	r3, [pc, #104]	@ (800940c <zRanger2Task+0xec>)
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009414 <zRanger2Task+0xf4>
 80093b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093b4:	edc7 7a05 	vstr	s15, [r7, #20]
      float stdDev = expStdA * (1.0f  + expf( expCoeff * (distance - expPointA)));
 80093b8:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80093bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80093c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80093c4:	4b14      	ldr	r3, [pc, #80]	@ (8009418 <zRanger2Task+0xf8>)
 80093c6:	edd3 7a00 	vldr	s15, [r3]
 80093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ce:	eeb0 0a67 	vmov.f32	s0, s15
 80093d2:	f010 f809 	bl	80193e8 <expf>
 80093d6:	eef0 7a40 	vmov.f32	s15, s0
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800941c <zRanger2Task+0xfc>
 80093e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093ea:	edc7 7a04 	vstr	s15, [r7, #16]
      rangeEnqueueDownRangeInEstimator(distance, stdDev, xTaskGetTickCount());
 80093ee:	f7fe f961 	bl	80076b4 <xTaskGetTickCount>
 80093f2:	4603      	mov	r3, r0
 80093f4:	4618      	mov	r0, r3
 80093f6:	edd7 0a04 	vldr	s1, [r7, #16]
 80093fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80093fe:	f004 fa2d 	bl	800d85c <rangeEnqueueDownRangeInEstimator>
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8009402:	e7a6      	b.n	8009352 <zRanger2Task+0x32>
 8009404:	10000000 	.word	0x10000000
 8009408:	20007ac8 	.word	0x20007ac8
 800940c:	20007ac4 	.word	0x20007ac4
 8009410:	447a0000 	.word	0x447a0000
 8009414:	3a83126f 	.word	0x3a83126f
 8009418:	20007ac0 	.word	0x20007ac0
 800941c:	3b23d70a 	.word	0x3b23d70a

08009420 <bmp280_StartUp>:

static int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9;
static uint16_t t1, p1;
static int32_t t_fine;

static void bmp280_StartUp(){
 8009420:	b580      	push	{r7, lr}
 8009422:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8009424:	2200      	movs	r2, #0
 8009426:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800942a:	4807      	ldr	r0, [pc, #28]	@ (8009448 <bmp280_StartUp+0x28>)
 800942c:	f7f8 fcca 	bl	8001dc4 <HAL_GPIO_WritePin>
	vTaskDelay(5);
 8009430:	2005      	movs	r0, #5
 8009432:	f7fd ffef 	bl	8007414 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8009436:	2201      	movs	r2, #1
 8009438:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800943c:	4802      	ldr	r0, [pc, #8]	@ (8009448 <bmp280_StartUp+0x28>)
 800943e:	f7f8 fcc1 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 8009442:	bf00      	nop
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	40020400 	.word	0x40020400

0800944c <bmp280_WriteReg>:
static void bmp280_WriteReg(uint8_t reg, uint8_t val){
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	460a      	mov	r2, r1
 8009456:	71fb      	strb	r3, [r7, #7]
 8009458:	4613      	mov	r3, r2
 800945a:	71bb      	strb	r3, [r7, #6]

	uint8_t buf[2];
	buf[0] = reg;
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(1<<7);
 8009460:	7b3b      	ldrb	r3, [r7, #12]
 8009462:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009466:	b2db      	uxtb	r3, r3
 8009468:	733b      	strb	r3, [r7, #12]
	buf[1] = val;
 800946a:	79bb      	ldrb	r3, [r7, #6]
 800946c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800946e:	2200      	movs	r2, #0
 8009470:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009474:	4809      	ldr	r0, [pc, #36]	@ (800949c <bmp280_WriteReg+0x50>)
 8009476:	f7f8 fca5 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, buf, 2, 100);
 800947a:	f107 010c 	add.w	r1, r7, #12
 800947e:	2364      	movs	r3, #100	@ 0x64
 8009480:	2202      	movs	r2, #2
 8009482:	4807      	ldr	r0, [pc, #28]	@ (80094a0 <bmp280_WriteReg+0x54>)
 8009484:	f7fa fa1b 	bl	80038be <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8009488:	2201      	movs	r2, #1
 800948a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800948e:	4803      	ldr	r0, [pc, #12]	@ (800949c <bmp280_WriteReg+0x50>)
 8009490:	f7f8 fc98 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8009494:	bf00      	nop
 8009496:	3710      	adds	r7, #16
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	40020400 	.word	0x40020400
 80094a0:	20007cdc 	.word	0x20007cdc

080094a4 <bmp280_ReadReg>:
void bmp280_ReadReg(uint8_t reg, uint8_t *buffer, uint8_t len){
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	6039      	str	r1, [r7, #0]
 80094ae:	71fb      	strb	r3, [r7, #7]
 80094b0:	4613      	mov	r3, r2
 80094b2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 80094b4:	79fb      	ldrb	r3, [r7, #7]
 80094b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80094be:	2200      	movs	r2, #0
 80094c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80094c4:	480d      	ldr	r0, [pc, #52]	@ (80094fc <bmp280_ReadReg+0x58>)
 80094c6:	f7f8 fc7d 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 100);
 80094ca:	f107 010f 	add.w	r1, r7, #15
 80094ce:	2364      	movs	r3, #100	@ 0x64
 80094d0:	2201      	movs	r2, #1
 80094d2:	480b      	ldr	r0, [pc, #44]	@ (8009500 <bmp280_ReadReg+0x5c>)
 80094d4:	f7fa f9f3 	bl	80038be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buffer, len, 100);
 80094d8:	79bb      	ldrb	r3, [r7, #6]
 80094da:	b29a      	uxth	r2, r3
 80094dc:	2364      	movs	r3, #100	@ 0x64
 80094de:	6839      	ldr	r1, [r7, #0]
 80094e0:	4807      	ldr	r0, [pc, #28]	@ (8009500 <bmp280_ReadReg+0x5c>)
 80094e2:	f7fa fb30 	bl	8003b46 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80094e6:	2201      	movs	r2, #1
 80094e8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80094ec:	4803      	ldr	r0, [pc, #12]	@ (80094fc <bmp280_ReadReg+0x58>)
 80094ee:	f7f8 fc69 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 80094f2:	bf00      	nop
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40020400 	.word	0x40020400
 8009500:	20007cdc 	.word	0x20007cdc

08009504 <bmp280_ReadCalibrateValue>:
static void bmp280_ReadCalibrateValue(){
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0

	uint8_t buf[24];
	bmp280_ReadReg(DIG_T1, buf, 24);
 800950a:	463b      	mov	r3, r7
 800950c:	2218      	movs	r2, #24
 800950e:	4619      	mov	r1, r3
 8009510:	2088      	movs	r0, #136	@ 0x88
 8009512:	f7ff ffc7 	bl	80094a4 <bmp280_ReadReg>

	t1 = buf[1] << 8 | buf[0];
 8009516:	787b      	ldrb	r3, [r7, #1]
 8009518:	021b      	lsls	r3, r3, #8
 800951a:	b21a      	sxth	r2, r3
 800951c:	783b      	ldrb	r3, [r7, #0]
 800951e:	b21b      	sxth	r3, r3
 8009520:	4313      	orrs	r3, r2
 8009522:	b21b      	sxth	r3, r3
 8009524:	b29a      	uxth	r2, r3
 8009526:	4b35      	ldr	r3, [pc, #212]	@ (80095fc <bmp280_ReadCalibrateValue+0xf8>)
 8009528:	801a      	strh	r2, [r3, #0]
	t2 = buf[3] << 8 | buf[2];
 800952a:	78fb      	ldrb	r3, [r7, #3]
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	b21a      	sxth	r2, r3
 8009530:	78bb      	ldrb	r3, [r7, #2]
 8009532:	b21b      	sxth	r3, r3
 8009534:	4313      	orrs	r3, r2
 8009536:	b21a      	sxth	r2, r3
 8009538:	4b31      	ldr	r3, [pc, #196]	@ (8009600 <bmp280_ReadCalibrateValue+0xfc>)
 800953a:	801a      	strh	r2, [r3, #0]
	t3 = buf[5] << 8 | buf[4];
 800953c:	797b      	ldrb	r3, [r7, #5]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	b21a      	sxth	r2, r3
 8009542:	793b      	ldrb	r3, [r7, #4]
 8009544:	b21b      	sxth	r3, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	b21a      	sxth	r2, r3
 800954a:	4b2e      	ldr	r3, [pc, #184]	@ (8009604 <bmp280_ReadCalibrateValue+0x100>)
 800954c:	801a      	strh	r2, [r3, #0]

	p1 = buf[7] << 8 | buf[6];
 800954e:	79fb      	ldrb	r3, [r7, #7]
 8009550:	021b      	lsls	r3, r3, #8
 8009552:	b21a      	sxth	r2, r3
 8009554:	79bb      	ldrb	r3, [r7, #6]
 8009556:	b21b      	sxth	r3, r3
 8009558:	4313      	orrs	r3, r2
 800955a:	b21b      	sxth	r3, r3
 800955c:	b29a      	uxth	r2, r3
 800955e:	4b2a      	ldr	r3, [pc, #168]	@ (8009608 <bmp280_ReadCalibrateValue+0x104>)
 8009560:	801a      	strh	r2, [r3, #0]
	p2 = buf[9] << 8 | buf[8];
 8009562:	7a7b      	ldrb	r3, [r7, #9]
 8009564:	021b      	lsls	r3, r3, #8
 8009566:	b21a      	sxth	r2, r3
 8009568:	7a3b      	ldrb	r3, [r7, #8]
 800956a:	b21b      	sxth	r3, r3
 800956c:	4313      	orrs	r3, r2
 800956e:	b21a      	sxth	r2, r3
 8009570:	4b26      	ldr	r3, [pc, #152]	@ (800960c <bmp280_ReadCalibrateValue+0x108>)
 8009572:	801a      	strh	r2, [r3, #0]
	p3 = buf[11]<< 8 | buf[10];
 8009574:	7afb      	ldrb	r3, [r7, #11]
 8009576:	021b      	lsls	r3, r3, #8
 8009578:	b21a      	sxth	r2, r3
 800957a:	7abb      	ldrb	r3, [r7, #10]
 800957c:	b21b      	sxth	r3, r3
 800957e:	4313      	orrs	r3, r2
 8009580:	b21a      	sxth	r2, r3
 8009582:	4b23      	ldr	r3, [pc, #140]	@ (8009610 <bmp280_ReadCalibrateValue+0x10c>)
 8009584:	801a      	strh	r2, [r3, #0]
	p4 = buf[13]<< 8 | buf[12];
 8009586:	7b7b      	ldrb	r3, [r7, #13]
 8009588:	021b      	lsls	r3, r3, #8
 800958a:	b21a      	sxth	r2, r3
 800958c:	7b3b      	ldrb	r3, [r7, #12]
 800958e:	b21b      	sxth	r3, r3
 8009590:	4313      	orrs	r3, r2
 8009592:	b21a      	sxth	r2, r3
 8009594:	4b1f      	ldr	r3, [pc, #124]	@ (8009614 <bmp280_ReadCalibrateValue+0x110>)
 8009596:	801a      	strh	r2, [r3, #0]
	p5 = buf[15]<< 8 | buf[14];
 8009598:	7bfb      	ldrb	r3, [r7, #15]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	b21a      	sxth	r2, r3
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	b21b      	sxth	r3, r3
 80095a2:	4313      	orrs	r3, r2
 80095a4:	b21a      	sxth	r2, r3
 80095a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009618 <bmp280_ReadCalibrateValue+0x114>)
 80095a8:	801a      	strh	r2, [r3, #0]
	p6 = buf[17]<< 8 | buf[16];
 80095aa:	7c7b      	ldrb	r3, [r7, #17]
 80095ac:	021b      	lsls	r3, r3, #8
 80095ae:	b21a      	sxth	r2, r3
 80095b0:	7c3b      	ldrb	r3, [r7, #16]
 80095b2:	b21b      	sxth	r3, r3
 80095b4:	4313      	orrs	r3, r2
 80095b6:	b21a      	sxth	r2, r3
 80095b8:	4b18      	ldr	r3, [pc, #96]	@ (800961c <bmp280_ReadCalibrateValue+0x118>)
 80095ba:	801a      	strh	r2, [r3, #0]
	p7 = buf[19]<< 8 | buf[18];
 80095bc:	7cfb      	ldrb	r3, [r7, #19]
 80095be:	021b      	lsls	r3, r3, #8
 80095c0:	b21a      	sxth	r2, r3
 80095c2:	7cbb      	ldrb	r3, [r7, #18]
 80095c4:	b21b      	sxth	r3, r3
 80095c6:	4313      	orrs	r3, r2
 80095c8:	b21a      	sxth	r2, r3
 80095ca:	4b15      	ldr	r3, [pc, #84]	@ (8009620 <bmp280_ReadCalibrateValue+0x11c>)
 80095cc:	801a      	strh	r2, [r3, #0]
	p8 = buf[21]<< 8 | buf[20];
 80095ce:	7d7b      	ldrb	r3, [r7, #21]
 80095d0:	021b      	lsls	r3, r3, #8
 80095d2:	b21a      	sxth	r2, r3
 80095d4:	7d3b      	ldrb	r3, [r7, #20]
 80095d6:	b21b      	sxth	r3, r3
 80095d8:	4313      	orrs	r3, r2
 80095da:	b21a      	sxth	r2, r3
 80095dc:	4b11      	ldr	r3, [pc, #68]	@ (8009624 <bmp280_ReadCalibrateValue+0x120>)
 80095de:	801a      	strh	r2, [r3, #0]
	p9 = buf[23]<< 8 | buf[22];
 80095e0:	7dfb      	ldrb	r3, [r7, #23]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	b21a      	sxth	r2, r3
 80095e6:	7dbb      	ldrb	r3, [r7, #22]
 80095e8:	b21b      	sxth	r3, r3
 80095ea:	4313      	orrs	r3, r2
 80095ec:	b21a      	sxth	r2, r3
 80095ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009628 <bmp280_ReadCalibrateValue+0x124>)
 80095f0:	801a      	strh	r2, [r3, #0]

}
 80095f2:	bf00      	nop
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20007ae2 	.word	0x20007ae2
 8009600:	20007ace 	.word	0x20007ace
 8009604:	20007ad0 	.word	0x20007ad0
 8009608:	20007ae4 	.word	0x20007ae4
 800960c:	20007ad2 	.word	0x20007ad2
 8009610:	20007ad4 	.word	0x20007ad4
 8009614:	20007ad6 	.word	0x20007ad6
 8009618:	20007ad8 	.word	0x20007ad8
 800961c:	20007ada 	.word	0x20007ada
 8009620:	20007adc 	.word	0x20007adc
 8009624:	20007ade 	.word	0x20007ade
 8009628:	20007ae0 	.word	0x20007ae0

0800962c <bmp280GetTemperature>:
static void bmp280GetTemperature(float* temperature)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b086      	sub	sp, #24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf[3];
	int32_t temp_adc;
	int32_t var1, var2;

	bmp280_ReadReg(BMP280_TEMP_REG_DATA, temp_buf, 3);
 8009634:	f107 0308 	add.w	r3, r7, #8
 8009638:	2203      	movs	r2, #3
 800963a:	4619      	mov	r1, r3
 800963c:	20fa      	movs	r0, #250	@ 0xfa
 800963e:	f7ff ff31 	bl	80094a4 <bmp280_ReadReg>
	temp_adc = (temp_buf[0] << 16) | (temp_buf[1] << 8) | temp_buf[2];
 8009642:	7a3b      	ldrb	r3, [r7, #8]
 8009644:	041a      	lsls	r2, r3, #16
 8009646:	7a7b      	ldrb	r3, [r7, #9]
 8009648:	021b      	lsls	r3, r3, #8
 800964a:	4313      	orrs	r3, r2
 800964c:	7aba      	ldrb	r2, [r7, #10]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
	temp_adc >>= 4;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	111b      	asrs	r3, r3, #4
 8009656:	617b      	str	r3, [r7, #20]

	var1  = ((((temp_adc>>3) - ((int32_t)t1 <<1))) * ((int32_t)t2)) >> 11;
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	10da      	asrs	r2, r3, #3
 800965c:	4b1c      	ldr	r3, [pc, #112]	@ (80096d0 <bmp280GetTemperature+0xa4>)
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	005b      	lsls	r3, r3, #1
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	4a1b      	ldr	r2, [pc, #108]	@ (80096d4 <bmp280GetTemperature+0xa8>)
 8009666:	f9b2 2000 	ldrsh.w	r2, [r2]
 800966a:	fb02 f303 	mul.w	r3, r2, r3
 800966e:	12db      	asrs	r3, r3, #11
 8009670:	613b      	str	r3, [r7, #16]
	var2  = (((((temp_adc >> 4) - ((int32_t) t1)) * ((temp_adc >> 4) - ((int32_t) t1))) >> 12) * ((int32_t) t3)) >> 14;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	111b      	asrs	r3, r3, #4
 8009676:	4a16      	ldr	r2, [pc, #88]	@ (80096d0 <bmp280GetTemperature+0xa4>)
 8009678:	8812      	ldrh	r2, [r2, #0]
 800967a:	1a9b      	subs	r3, r3, r2
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	1112      	asrs	r2, r2, #4
 8009680:	4913      	ldr	r1, [pc, #76]	@ (80096d0 <bmp280GetTemperature+0xa4>)
 8009682:	8809      	ldrh	r1, [r1, #0]
 8009684:	1a52      	subs	r2, r2, r1
 8009686:	fb02 f303 	mul.w	r3, r2, r3
 800968a:	131b      	asrs	r3, r3, #12
 800968c:	4a12      	ldr	r2, [pc, #72]	@ (80096d8 <bmp280GetTemperature+0xac>)
 800968e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009692:	fb02 f303 	mul.w	r3, r2, r3
 8009696:	139b      	asrs	r3, r3, #14
 8009698:	60fb      	str	r3, [r7, #12]

	t_fine = (var1 + var2);
 800969a:	693a      	ldr	r2, [r7, #16]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	4a0e      	ldr	r2, [pc, #56]	@ (80096dc <bmp280GetTemperature+0xb0>)
 80096a2:	6013      	str	r3, [r2, #0]

	*temperature = (((t_fine * 5) + 128 ) >> 8) /100.0f;
 80096a4:	4b0d      	ldr	r3, [pc, #52]	@ (80096dc <bmp280GetTemperature+0xb0>)
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	4613      	mov	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	3380      	adds	r3, #128	@ 0x80
 80096b0:	121b      	asrs	r3, r3, #8
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80096ba:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80096e0 <bmp280GetTemperature+0xb4>
 80096be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	edc3 7a00 	vstr	s15, [r3]
}
 80096c8:	bf00      	nop
 80096ca:	3718      	adds	r7, #24
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}
 80096d0:	20007ae2 	.word	0x20007ae2
 80096d4:	20007ace 	.word	0x20007ace
 80096d8:	20007ad0 	.word	0x20007ad0
 80096dc:	20007ae8 	.word	0x20007ae8
 80096e0:	42c80000 	.word	0x42c80000

080096e4 <bmp280GetPressure>:
static void bmp280GetPressure(float *pressure)
{
 80096e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096e8:	b0ce      	sub	sp, #312	@ 0x138
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	uint8_t pres_buf[3];
	int32_t pres_adc;
	int64_t var1, var2, p;
	float temp;

	bmp280GetTemperature(&temp);
 80096f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff ff99 	bl	800962c <bmp280GetTemperature>
	bmp280_ReadReg(BMP280_PRESSURE_REG_DAT, pres_buf, 3);
 80096fa:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80096fe:	2203      	movs	r2, #3
 8009700:	4619      	mov	r1, r3
 8009702:	20f7      	movs	r0, #247	@ 0xf7
 8009704:	f7ff fece 	bl	80094a4 <bmp280_ReadReg>

	pres_adc = (pres_buf[0] << 16) | (pres_buf[1] << 8) | pres_buf[2];
 8009708:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 800970c:	041a      	lsls	r2, r3, #16
 800970e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	431a      	orrs	r2, r3
 8009716:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800971a:	4313      	orrs	r3, r2
 800971c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	pres_adc >>= 4;
 8009720:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009724:	111b      	asrs	r3, r3, #4
 8009726:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	var1 = ((int64_t)t_fine) - 128000;
 800972a:	4baa      	ldr	r3, [pc, #680]	@ (80099d4 <bmp280GetPressure+0x2f0>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	17da      	asrs	r2, r3, #31
 8009730:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009734:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009738:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800973c:	460b      	mov	r3, r1
 800973e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8009742:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009744:	4613      	mov	r3, r2
 8009746:	f143 33ff 	adc.w	r3, r3, #4294967295
 800974a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800974c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009750:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t)p6;
 8009754:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009758:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800975c:	fb03 f102 	mul.w	r1, r3, r2
 8009760:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009764:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009768:	fb02 f303 	mul.w	r3, r2, r3
 800976c:	18ca      	adds	r2, r1, r3
 800976e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009772:	fba3 4503 	umull	r4, r5, r3, r3
 8009776:	1953      	adds	r3, r2, r5
 8009778:	461d      	mov	r5, r3
 800977a:	4b97      	ldr	r3, [pc, #604]	@ (80099d8 <bmp280GetPressure+0x2f4>)
 800977c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009780:	b21b      	sxth	r3, r3
 8009782:	17da      	asrs	r2, r3, #31
 8009784:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009788:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800978c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8009790:	4603      	mov	r3, r0
 8009792:	fb03 f205 	mul.w	r2, r3, r5
 8009796:	460b      	mov	r3, r1
 8009798:	fb04 f303 	mul.w	r3, r4, r3
 800979c:	4413      	add	r3, r2
 800979e:	4602      	mov	r2, r0
 80097a0:	fba4 8902 	umull	r8, r9, r4, r2
 80097a4:	444b      	add	r3, r9
 80097a6:	4699      	mov	r9, r3
 80097a8:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 80097ac:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 80097b0:	4b8a      	ldr	r3, [pc, #552]	@ (80099dc <bmp280GetPressure+0x2f8>)
 80097b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097b6:	b21b      	sxth	r3, r3
 80097b8:	17da      	asrs	r2, r3, #31
 80097ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80097be:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80097c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097c6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80097ca:	462a      	mov	r2, r5
 80097cc:	fb02 f203 	mul.w	r2, r2, r3
 80097d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097d4:	4621      	mov	r1, r4
 80097d6:	fb01 f303 	mul.w	r3, r1, r3
 80097da:	441a      	add	r2, r3
 80097dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097e0:	4621      	mov	r1, r4
 80097e2:	fba3 ab01 	umull	sl, fp, r3, r1
 80097e6:	eb02 030b 	add.w	r3, r2, fp
 80097ea:	469b      	mov	fp, r3
 80097ec:	f04f 0000 	mov.w	r0, #0
 80097f0:	f04f 0100 	mov.w	r1, #0
 80097f4:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80097f8:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80097fc:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8009800:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009804:	1814      	adds	r4, r2, r0
 8009806:	643c      	str	r4, [r7, #64]	@ 0x40
 8009808:	414b      	adcs	r3, r1
 800980a:	647b      	str	r3, [r7, #68]	@ 0x44
 800980c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8009810:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t)p4)<<35);
 8009814:	4b72      	ldr	r3, [pc, #456]	@ (80099e0 <bmp280GetPressure+0x2fc>)
 8009816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800981a:	b21b      	sxth	r3, r3
 800981c:	17da      	asrs	r2, r3, #31
 800981e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009822:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8009826:	f04f 0000 	mov.w	r0, #0
 800982a:	f04f 0100 	mov.w	r1, #0
 800982e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009832:	00d9      	lsls	r1, r3, #3
 8009834:	2000      	movs	r0, #0
 8009836:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800983a:	1814      	adds	r4, r2, r0
 800983c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800983e:	414b      	adcs	r3, r1
 8009840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009842:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8009846:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t)p3)>>8) + ((var1 * (int64_t)p2)<<12);
 800984a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800984e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009852:	fb03 f102 	mul.w	r1, r3, r2
 8009856:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800985a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800985e:	fb02 f303 	mul.w	r3, r2, r3
 8009862:	18ca      	adds	r2, r1, r3
 8009864:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009868:	fba3 1303 	umull	r1, r3, r3, r3
 800986c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009870:	460b      	mov	r3, r1
 8009872:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800987a:	18d3      	adds	r3, r2, r3
 800987c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009880:	4b58      	ldr	r3, [pc, #352]	@ (80099e4 <bmp280GetPressure+0x300>)
 8009882:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009886:	b21b      	sxth	r3, r3
 8009888:	17da      	asrs	r2, r3, #31
 800988a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800988e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009892:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8009896:	462b      	mov	r3, r5
 8009898:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800989c:	4642      	mov	r2, r8
 800989e:	fb02 f203 	mul.w	r2, r2, r3
 80098a2:	464b      	mov	r3, r9
 80098a4:	4621      	mov	r1, r4
 80098a6:	fb01 f303 	mul.w	r3, r1, r3
 80098aa:	4413      	add	r3, r2
 80098ac:	4622      	mov	r2, r4
 80098ae:	4641      	mov	r1, r8
 80098b0:	fba2 1201 	umull	r1, r2, r2, r1
 80098b4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80098b8:	460a      	mov	r2, r1
 80098ba:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80098be:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80098c2:	4413      	add	r3, r2
 80098c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80098c8:	f04f 0000 	mov.w	r0, #0
 80098cc:	f04f 0100 	mov.w	r1, #0
 80098d0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80098d4:	4623      	mov	r3, r4
 80098d6:	0a18      	lsrs	r0, r3, #8
 80098d8:	462b      	mov	r3, r5
 80098da:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80098de:	462b      	mov	r3, r5
 80098e0:	1219      	asrs	r1, r3, #8
 80098e2:	4b41      	ldr	r3, [pc, #260]	@ (80099e8 <bmp280GetPressure+0x304>)
 80098e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80098e8:	b21b      	sxth	r3, r3
 80098ea:	17da      	asrs	r2, r3, #31
 80098ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80098f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80098f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80098f8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80098fc:	464a      	mov	r2, r9
 80098fe:	fb02 f203 	mul.w	r2, r2, r3
 8009902:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8009906:	4644      	mov	r4, r8
 8009908:	fb04 f303 	mul.w	r3, r4, r3
 800990c:	441a      	add	r2, r3
 800990e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009912:	4644      	mov	r4, r8
 8009914:	fba3 4304 	umull	r4, r3, r3, r4
 8009918:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800991c:	4623      	mov	r3, r4
 800991e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009926:	18d3      	adds	r3, r2, r3
 8009928:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800992c:	f04f 0200 	mov.w	r2, #0
 8009930:	f04f 0300 	mov.w	r3, #0
 8009934:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009938:	464c      	mov	r4, r9
 800993a:	0323      	lsls	r3, r4, #12
 800993c:	4644      	mov	r4, r8
 800993e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009942:	4644      	mov	r4, r8
 8009944:	0322      	lsls	r2, r4, #12
 8009946:	1884      	adds	r4, r0, r2
 8009948:	633c      	str	r4, [r7, #48]	@ 0x30
 800994a:	eb41 0303 	adc.w	r3, r1, r3
 800994e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009950:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009954:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8009958:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800995c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8009960:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8009964:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8009968:	4b20      	ldr	r3, [pc, #128]	@ (80099ec <bmp280GetPressure+0x308>)
 800996a:	881b      	ldrh	r3, [r3, #0]
 800996c:	b29b      	uxth	r3, r3
 800996e:	2200      	movs	r2, #0
 8009970:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009974:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009978:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800997c:	462b      	mov	r3, r5
 800997e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8009982:	4642      	mov	r2, r8
 8009984:	fb02 f203 	mul.w	r2, r2, r3
 8009988:	464b      	mov	r3, r9
 800998a:	4621      	mov	r1, r4
 800998c:	fb01 f303 	mul.w	r3, r1, r3
 8009990:	4413      	add	r3, r2
 8009992:	4622      	mov	r2, r4
 8009994:	4641      	mov	r1, r8
 8009996:	fba2 1201 	umull	r1, r2, r2, r1
 800999a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800999e:	460a      	mov	r2, r1
 80099a0:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80099a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80099a8:	4413      	add	r3, r2
 80099aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80099ae:	f04f 0200 	mov.w	r2, #0
 80099b2:	f04f 0300 	mov.w	r3, #0
 80099b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80099ba:	4629      	mov	r1, r5
 80099bc:	104a      	asrs	r2, r1, #1
 80099be:	4629      	mov	r1, r5
 80099c0:	17cb      	asrs	r3, r1, #31
 80099c2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if ( var1 == 0 ) return;
 80099c6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f000 8165 	beq.w	8009c9a <bmp280GetPressure+0x5b6>
 80099d0:	e00e      	b.n	80099f0 <bmp280GetPressure+0x30c>
 80099d2:	bf00      	nop
 80099d4:	20007ae8 	.word	0x20007ae8
 80099d8:	20007ada 	.word	0x20007ada
 80099dc:	20007ad8 	.word	0x20007ad8
 80099e0:	20007ad6 	.word	0x20007ad6
 80099e4:	20007ad4 	.word	0x20007ad4
 80099e8:	20007ad2 	.word	0x20007ad2
 80099ec:	20007ae4 	.word	0x20007ae4

	p = 1048576 - pres_adc;
 80099f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80099f4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80099f8:	17da      	asrs	r2, r3, #31
 80099fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099fe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009a02:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p<<31) - var2)*3125) / var1;
 8009a06:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009a0a:	105b      	asrs	r3, r3, #1
 8009a0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009a10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009a14:	07db      	lsls	r3, r3, #31
 8009a16:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009a1a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009a1e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8009a22:	4621      	mov	r1, r4
 8009a24:	1a89      	subs	r1, r1, r2
 8009a26:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8009a2a:	4629      	mov	r1, r5
 8009a2c:	eb61 0303 	sbc.w	r3, r1, r3
 8009a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009a34:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8009a38:	4622      	mov	r2, r4
 8009a3a:	462b      	mov	r3, r5
 8009a3c:	1891      	adds	r1, r2, r2
 8009a3e:	6239      	str	r1, [r7, #32]
 8009a40:	415b      	adcs	r3, r3
 8009a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a48:	4621      	mov	r1, r4
 8009a4a:	1851      	adds	r1, r2, r1
 8009a4c:	61b9      	str	r1, [r7, #24]
 8009a4e:	4629      	mov	r1, r5
 8009a50:	414b      	adcs	r3, r1
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	f04f 0300 	mov.w	r3, #0
 8009a5c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009a60:	4649      	mov	r1, r9
 8009a62:	018b      	lsls	r3, r1, #6
 8009a64:	4641      	mov	r1, r8
 8009a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009a6a:	4641      	mov	r1, r8
 8009a6c:	018a      	lsls	r2, r1, #6
 8009a6e:	4641      	mov	r1, r8
 8009a70:	1889      	adds	r1, r1, r2
 8009a72:	6139      	str	r1, [r7, #16]
 8009a74:	4649      	mov	r1, r9
 8009a76:	eb43 0101 	adc.w	r1, r3, r1
 8009a7a:	6179      	str	r1, [r7, #20]
 8009a7c:	f04f 0200 	mov.w	r2, #0
 8009a80:	f04f 0300 	mov.w	r3, #0
 8009a84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009a88:	4649      	mov	r1, r9
 8009a8a:	008b      	lsls	r3, r1, #2
 8009a8c:	4641      	mov	r1, r8
 8009a8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a92:	4641      	mov	r1, r8
 8009a94:	008a      	lsls	r2, r1, #2
 8009a96:	4610      	mov	r0, r2
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4622      	mov	r2, r4
 8009a9e:	189b      	adds	r3, r3, r2
 8009aa0:	60bb      	str	r3, [r7, #8]
 8009aa2:	460b      	mov	r3, r1
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	eb42 0303 	adc.w	r3, r2, r3
 8009aaa:	60fb      	str	r3, [r7, #12]
 8009aac:	f04f 0200 	mov.w	r2, #0
 8009ab0:	f04f 0300 	mov.w	r3, #0
 8009ab4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8009ab8:	4649      	mov	r1, r9
 8009aba:	008b      	lsls	r3, r1, #2
 8009abc:	4641      	mov	r1, r8
 8009abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ac2:	4641      	mov	r1, r8
 8009ac4:	008a      	lsls	r2, r1, #2
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4603      	mov	r3, r0
 8009acc:	4622      	mov	r2, r4
 8009ace:	189b      	adds	r3, r3, r2
 8009ad0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ad2:	462b      	mov	r3, r5
 8009ad4:	460a      	mov	r2, r1
 8009ad6:	eb42 0303 	adc.w	r3, r2, r3
 8009ada:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009adc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009ae0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8009ae4:	f7f7 f948 	bl	8000d78 <__aeabi_ldivmod>
 8009ae8:	4602      	mov	r2, r0
 8009aea:	460b      	mov	r3, r1
 8009aec:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8009af0:	4b6d      	ldr	r3, [pc, #436]	@ (8009ca8 <bmp280GetPressure+0x5c4>)
 8009af2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af6:	b21b      	sxth	r3, r3
 8009af8:	17da      	asrs	r2, r3, #31
 8009afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8009afc:	677a      	str	r2, [r7, #116]	@ 0x74
 8009afe:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f04f 0100 	mov.w	r1, #0
 8009b0a:	0b50      	lsrs	r0, r2, #13
 8009b0c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009b10:	1359      	asrs	r1, r3, #13
 8009b12:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8009b16:	462b      	mov	r3, r5
 8009b18:	fb00 f203 	mul.w	r2, r0, r3
 8009b1c:	4623      	mov	r3, r4
 8009b1e:	fb03 f301 	mul.w	r3, r3, r1
 8009b22:	4413      	add	r3, r2
 8009b24:	4622      	mov	r2, r4
 8009b26:	fba2 1200 	umull	r1, r2, r2, r0
 8009b2a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8009b2e:	460a      	mov	r2, r1
 8009b30:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8009b34:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009b38:	4413      	add	r3, r2
 8009b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009b3e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009b42:	f04f 0000 	mov.w	r0, #0
 8009b46:	f04f 0100 	mov.w	r1, #0
 8009b4a:	0b50      	lsrs	r0, r2, #13
 8009b4c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009b50:	1359      	asrs	r1, r3, #13
 8009b52:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8009b56:	462b      	mov	r3, r5
 8009b58:	fb00 f203 	mul.w	r2, r0, r3
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	fb03 f301 	mul.w	r3, r3, r1
 8009b62:	4413      	add	r3, r2
 8009b64:	4622      	mov	r2, r4
 8009b66:	fba2 1200 	umull	r1, r2, r2, r0
 8009b6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009b6e:	460a      	mov	r2, r1
 8009b70:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8009b74:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009b78:	4413      	add	r3, r2
 8009b7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	f04f 0300 	mov.w	r3, #0
 8009b86:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8009b8a:	4621      	mov	r1, r4
 8009b8c:	0e4a      	lsrs	r2, r1, #25
 8009b8e:	4629      	mov	r1, r5
 8009b90:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8009b94:	4629      	mov	r1, r5
 8009b96:	164b      	asrs	r3, r1, #25
 8009b98:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = (((int64_t)p8) * p) >> 19;
 8009b9c:	4b43      	ldr	r3, [pc, #268]	@ (8009cac <bmp280GetPressure+0x5c8>)
 8009b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba2:	b21b      	sxth	r3, r3
 8009ba4:	17da      	asrs	r2, r3, #31
 8009ba6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ba8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009baa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009bae:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8009bb2:	462a      	mov	r2, r5
 8009bb4:	fb02 f203 	mul.w	r2, r2, r3
 8009bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009bbc:	4621      	mov	r1, r4
 8009bbe:	fb01 f303 	mul.w	r3, r1, r3
 8009bc2:	4413      	add	r3, r2
 8009bc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009bc8:	4621      	mov	r1, r4
 8009bca:	fba2 1201 	umull	r1, r2, r2, r1
 8009bce:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009bd2:	460a      	mov	r2, r1
 8009bd4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8009bd8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8009bdc:	4413      	add	r3, r2
 8009bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009be2:	f04f 0200 	mov.w	r2, #0
 8009be6:	f04f 0300 	mov.w	r3, #0
 8009bea:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8009bee:	4621      	mov	r1, r4
 8009bf0:	0cca      	lsrs	r2, r1, #19
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8009bf8:	4629      	mov	r1, r5
 8009bfa:	14cb      	asrs	r3, r1, #19
 8009bfc:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8009c00:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009c04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009c08:	1884      	adds	r4, r0, r2
 8009c0a:	663c      	str	r4, [r7, #96]	@ 0x60
 8009c0c:	eb41 0303 	adc.w	r3, r1, r3
 8009c10:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c12:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009c16:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009c1a:	4621      	mov	r1, r4
 8009c1c:	1889      	adds	r1, r1, r2
 8009c1e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009c20:	4629      	mov	r1, r5
 8009c22:	eb43 0101 	adc.w	r1, r3, r1
 8009c26:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8009c28:	f04f 0000 	mov.w	r0, #0
 8009c2c:	f04f 0100 	mov.w	r1, #0
 8009c30:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009c34:	4623      	mov	r3, r4
 8009c36:	0a18      	lsrs	r0, r3, #8
 8009c38:	462b      	mov	r3, r5
 8009c3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009c3e:	462b      	mov	r3, r5
 8009c40:	1219      	asrs	r1, r3, #8
 8009c42:	4b1b      	ldr	r3, [pc, #108]	@ (8009cb0 <bmp280GetPressure+0x5cc>)
 8009c44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c48:	b21b      	sxth	r3, r3
 8009c4a:	17da      	asrs	r2, r3, #31
 8009c4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c4e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009c50:	f04f 0200 	mov.w	r2, #0
 8009c54:	f04f 0300 	mov.w	r3, #0
 8009c58:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009c5c:	464c      	mov	r4, r9
 8009c5e:	0123      	lsls	r3, r4, #4
 8009c60:	4644      	mov	r4, r8
 8009c62:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009c66:	4644      	mov	r4, r8
 8009c68:	0122      	lsls	r2, r4, #4
 8009c6a:	1884      	adds	r4, r0, r2
 8009c6c:	603c      	str	r4, [r7, #0]
 8009c6e:	eb41 0303 	adc.w	r3, r1, r3
 8009c72:	607b      	str	r3, [r7, #4]
 8009c74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009c78:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	*pressure = (float) p / 256.0f;
 8009c7c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009c80:	f7f7 f83c 	bl	8000cfc <__aeabi_l2f>
 8009c84:	ee06 0a90 	vmov	s13, r0
 8009c88:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8009cb4 <bmp280GetPressure+0x5d0>
 8009c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009c94:	edc3 7a00 	vstr	s15, [r3]
 8009c98:	e000      	b.n	8009c9c <bmp280GetPressure+0x5b8>
	if ( var1 == 0 ) return;
 8009c9a:	bf00      	nop

}
 8009c9c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ca6:	bf00      	nop
 8009ca8:	20007ae0 	.word	0x20007ae0
 8009cac:	20007ade 	.word	0x20007ade
 8009cb0:	20007adc 	.word	0x20007adc
 8009cb4:	43800000 	.word	0x43800000

08009cb8 <bmp280Init>:
void bmp280Init()
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	af00      	add	r7, sp, #0

	bmp280_StartUp();
 8009cbc:	f7ff fbb0 	bl	8009420 <bmp280_StartUp>
	vTaskDelay(5);
 8009cc0:	2005      	movs	r0, #5
 8009cc2:	f7fd fba7 	bl	8007414 <vTaskDelay>
	bmp280_ReadCalibrateValue();
 8009cc6:	f7ff fc1d 	bl	8009504 <bmp280_ReadCalibrateValue>
	vTaskDelay(5);
 8009cca:	2005      	movs	r0, #5
 8009ccc:	f7fd fba2 	bl	8007414 <vTaskDelay>
	bmp280_WriteReg(BMP280_REG_CTRL, ( (TEMP_18BIT_RES<<5) | (PRES_18BIT_RES<<2) | BMP280_NORMAL_MODE));
 8009cd0:	216f      	movs	r1, #111	@ 0x6f
 8009cd2:	20f4      	movs	r0, #244	@ 0xf4
 8009cd4:	f7ff fbba 	bl	800944c <bmp280_WriteReg>
	isInit = true;
 8009cd8:	4b02      	ldr	r3, [pc, #8]	@ (8009ce4 <bmp280Init+0x2c>)
 8009cda:	2201      	movs	r2, #1
 8009cdc:	701a      	strb	r2, [r3, #0]
}
 8009cde:	bf00      	nop
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	20007acd 	.word	0x20007acd

08009ce8 <bmp280TestConnection>:
{

	return true;
}
bool bmp280TestConnection()
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	uint8_t checkID;

	if (!isInit) return false;
 8009cee:	4b0d      	ldr	r3, [pc, #52]	@ (8009d24 <bmp280TestConnection+0x3c>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	f083 0301 	eor.w	r3, r3, #1
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d001      	beq.n	8009d00 <bmp280TestConnection+0x18>
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	e00d      	b.n	8009d1c <bmp280TestConnection+0x34>

	bmp280_StartUp();
 8009d00:	f7ff fb8e 	bl	8009420 <bmp280_StartUp>
	bmp280_ReadReg(BMP280_REG_ID, &checkID, 1);
 8009d04:	1dfb      	adds	r3, r7, #7
 8009d06:	2201      	movs	r2, #1
 8009d08:	4619      	mov	r1, r3
 8009d0a:	20d0      	movs	r0, #208	@ 0xd0
 8009d0c:	f7ff fbca 	bl	80094a4 <bmp280_ReadReg>

	if ( checkID != 0x58 ) return false;
 8009d10:	79fb      	ldrb	r3, [r7, #7]
 8009d12:	2b58      	cmp	r3, #88	@ 0x58
 8009d14:	d001      	beq.n	8009d1a <bmp280TestConnection+0x32>
 8009d16:	2300      	movs	r3, #0
 8009d18:	e000      	b.n	8009d1c <bmp280TestConnection+0x34>

	return true;
 8009d1a:	2301      	movs	r3, #1
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	20007acd 	.word	0x20007acd

08009d28 <bmp280GetData>:
void bmp280GetData(float* pressure, float* temperature, float* asl)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
	bmp280GetTemperature(temperature);
 8009d34:	68b8      	ldr	r0, [r7, #8]
 8009d36:	f7ff fc79 	bl	800962c <bmp280GetTemperature>
	bmp280GetPressure(pressure);
 8009d3a:	68f8      	ldr	r0, [r7, #12]
 8009d3c:	f7ff fcd2 	bl	80096e4 <bmp280GetPressure>
	*asl = bmp280PressureToAltitude(pressure);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f000 f809 	bl	8009d58 <bmp280PressureToAltitude>
 8009d46:	eef0 7a40 	vmov.f32	s15, s0
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	edc3 7a00 	vstr	s15, [r3]

}
 8009d50:	bf00      	nop
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <bmp280PressureToAltitude>:
#define CONST_PF2 44330.0f
#define FIX_TEMP 25         // Fixed Temperature. ASL is a function of pressure and temperature, but as the temperature changes so much (blow a little towards the flie and watch it drop 5 degrees) it corrupts the ASL estimates.
                            // TLDR: Adjusting for temp changes does more harm than good.

float bmp280PressureToAltitude(float* pressure)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
    if (*pressure > 0)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	edd3 7a00 	vldr	s15, [r3]
 8009d66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6e:	dd1b      	ble.n	8009da8 <bmp280PressureToAltitude+0x50>
    {
        //return (1.f - pow(*pressure / CONST_SEA_PRESSURE, CONST_PF)) * CONST_PF2;
        //return ((pow((1015.7 / *pressure), CONST_PF) - 1.0) * (25. + 273.15)) / 0.0065;
        return ((powf((1015.7f / *pressure), CONST_PF) - 1.0f) * (FIX_TEMP + 273.15f)) / 0.0065f;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	edd3 7a00 	vldr	s15, [r3]
 8009d76:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8009dbc <bmp280PressureToAltitude+0x64>
 8009d7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7e:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8009dc0 <bmp280PressureToAltitude+0x68>
 8009d82:	eeb0 0a47 	vmov.f32	s0, s14
 8009d86:	f00f fb93 	bl	80194b0 <powf>
 8009d8a:	eef0 7a40 	vmov.f32	s15, s0
 8009d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009d92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d96:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8009dc4 <bmp280PressureToAltitude+0x6c>
 8009d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d9e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8009dc8 <bmp280PressureToAltitude+0x70>
 8009da2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009da6:	e001      	b.n	8009dac <bmp280PressureToAltitude+0x54>
    }
    else
    {
        return 0;
 8009da8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009dcc <bmp280PressureToAltitude+0x74>
    }
}
 8009dac:	eef0 7a47 	vmov.f32	s15, s14
 8009db0:	eeb0 0a67 	vmov.f32	s0, s15
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	447deccd 	.word	0x447deccd
 8009dc0:	3e42d454 	.word	0x3e42d454
 8009dc4:	43951333 	.word	0x43951333
 8009dc8:	3bd4fdf4 	.word	0x3bd4fdf4
 8009dcc:	00000000 	.word	0x00000000

08009dd0 <hal_ibus_init>:
static uint8_t fail_safe_flag = 0;

/*
 * Main Function
 */
void hal_ibus_init(){
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8009dd4:	2220      	movs	r2, #32
 8009dd6:	4903      	ldr	r1, [pc, #12]	@ (8009de4 <hal_ibus_init+0x14>)
 8009dd8:	4803      	ldr	r0, [pc, #12]	@ (8009de8 <hal_ibus_init+0x18>)
 8009dda:	f7fb fc41 	bl	8005660 <HAL_UART_Receive_DMA>
}
 8009dde:	bf00      	nop
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	20007aec 	.word	0x20007aec
 8009de8:	200080b4 	.word	0x200080b4

08009dec <hal_ibus_read>:
void hal_ibus_read(uint16_t* ibus_data){
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()){
 8009df4:	f000 f818 	bl	8009e28 <ibus_is_valid>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	f083 0301 	eor.w	r3, r3, #1
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d10b      	bne.n	8009e1c <hal_ibus_read+0x30>
		return false;
	}
	if(!ibus_checksum()){
 8009e04:	f000 f828 	bl	8009e58 <ibus_checksum>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f083 0301 	eor.w	r3, r3, #1
 8009e0e:	b2db      	uxtb	r3, r3
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d105      	bne.n	8009e20 <hal_ibus_read+0x34>
		return false;
	}
	ibus_update(ibus_data);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f84f 	bl	8009eb8 <ibus_update>
	return true;
 8009e1a:	e002      	b.n	8009e22 <hal_ibus_read+0x36>
		return false;
 8009e1c:	bf00      	nop
 8009e1e:	e000      	b.n	8009e22 <hal_ibus_read+0x36>
		return false;
 8009e20:	bf00      	nop
}
 8009e22:	3708      	adds	r7, #8
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}

08009e28 <ibus_is_valid>:
/*
 * Helper Functions
 */
bool ibus_is_valid(){
 8009e28:	b480      	push	{r7}
 8009e2a:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8009e2c:	4b09      	ldr	r3, [pc, #36]	@ (8009e54 <ibus_is_valid+0x2c>)
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	2b20      	cmp	r3, #32
 8009e32:	d105      	bne.n	8009e40 <ibus_is_valid+0x18>
 8009e34:	4b07      	ldr	r3, [pc, #28]	@ (8009e54 <ibus_is_valid+0x2c>)
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b40      	cmp	r3, #64	@ 0x40
 8009e3a:	d101      	bne.n	8009e40 <ibus_is_valid+0x18>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e000      	b.n	8009e42 <ibus_is_valid+0x1a>
 8009e40:	2300      	movs	r3, #0
 8009e42:	f003 0301 	and.w	r3, r3, #1
 8009e46:	b2db      	uxtb	r3, r3
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20007aec 	.word	0x20007aec

08009e58 <ibus_checksum>:
bool ibus_checksum(){
 8009e58:	b480      	push	{r7}
 8009e5a:	b085      	sub	sp, #20
 8009e5c:	af00      	add	r7, sp, #0
	uint16_t checksum_cal = 0xffff;
 8009e5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e62:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i=0; i < 30; i++ ){
 8009e64:	2300      	movs	r3, #0
 8009e66:	60bb      	str	r3, [r7, #8]
 8009e68:	e00a      	b.n	8009e80 <ibus_checksum+0x28>
		checksum_cal -= uart_rx_buffer[i];
 8009e6a:	4a12      	ldr	r2, [pc, #72]	@ (8009eb4 <ibus_checksum+0x5c>)
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	4413      	add	r3, r2
 8009e70:	781b      	ldrb	r3, [r3, #0]
 8009e72:	461a      	mov	r2, r3
 8009e74:	89fb      	ldrh	r3, [r7, #14]
 8009e76:	1a9b      	subs	r3, r3, r2
 8009e78:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i < 30; i++ ){
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	60bb      	str	r3, [r7, #8]
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	2b1d      	cmp	r3, #29
 8009e84:	ddf1      	ble.n	8009e6a <ibus_checksum+0x12>
	}
	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 8009e86:	4b0b      	ldr	r3, [pc, #44]	@ (8009eb4 <ibus_checksum+0x5c>)
 8009e88:	7fdb      	ldrb	r3, [r3, #31]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	b21a      	sxth	r2, r3
 8009e8e:	4b09      	ldr	r3, [pc, #36]	@ (8009eb4 <ibus_checksum+0x5c>)
 8009e90:	7f9b      	ldrb	r3, [r3, #30]
 8009e92:	b21b      	sxth	r3, r3
 8009e94:	4313      	orrs	r3, r2
 8009e96:	b21b      	sxth	r3, r3
 8009e98:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 8009e9a:	88fa      	ldrh	r2, [r7, #6]
 8009e9c:	89fb      	ldrh	r3, [r7, #14]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	bf0c      	ite	eq
 8009ea2:	2301      	moveq	r3, #1
 8009ea4:	2300      	movne	r3, #0
 8009ea6:	b2db      	uxtb	r3, r3
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	20007aec 	.word	0x20007aec

08009eb8 <ibus_update>:

void ibus_update(uint16_t* ibus_data){
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index ++, bf_index +=2){
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	60bb      	str	r3, [r7, #8]
 8009ec8:	e018      	b.n	8009efc <ibus_update+0x44>
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8| uart_rx_buffer[bf_index];
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	4a10      	ldr	r2, [pc, #64]	@ (8009f10 <ibus_update+0x58>)
 8009ed0:	5cd3      	ldrb	r3, [r2, r3]
 8009ed2:	021b      	lsls	r3, r3, #8
 8009ed4:	b21a      	sxth	r2, r3
 8009ed6:	490e      	ldr	r1, [pc, #56]	@ (8009f10 <ibus_update+0x58>)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	440b      	add	r3, r1
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	b21b      	sxth	r3, r3
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	b219      	sxth	r1, r3
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	005b      	lsls	r3, r3, #1
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	4413      	add	r3, r2
 8009eec:	b28a      	uxth	r2, r1
 8009eee:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index ++, bf_index +=2){
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	60fb      	str	r3, [r7, #12]
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	3302      	adds	r3, #2
 8009efa:	60bb      	str	r3, [r7, #8]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b05      	cmp	r3, #5
 8009f00:	dde3      	ble.n	8009eca <ibus_update+0x12>
	}
}
 8009f02:	bf00      	nop
 8009f04:	bf00      	nop
 8009f06:	3714      	adds	r7, #20
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0e:	4770      	bx	lr
 8009f10:	20007aec 	.word	0x20007aec

08009f14 <ibus_soft_failsafe>:

// @note FS-A8S don't have fail soft feature, So we make software fail-soft
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max){
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag ++;
 8009f20:	4b18      	ldr	r3, [pc, #96]	@ (8009f84 <ibus_soft_failsafe+0x70>)
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	3301      	adds	r3, #1
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	4b16      	ldr	r3, [pc, #88]	@ (8009f84 <ibus_soft_failsafe+0x70>)
 8009f2a:	701a      	strb	r2, [r3, #0]
	if(fail_safe_max > fail_safe_flag){
 8009f2c:	4b15      	ldr	r3, [pc, #84]	@ (8009f84 <ibus_soft_failsafe+0x70>)
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	78fa      	ldrb	r2, [r7, #3]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d820      	bhi.n	8009f78 <ibus_soft_failsafe+0x64>
		return;
	}
	// clear ibus data
	for(int i = 0; i< IBUS_USER_CHANNELS; i++){
 8009f36:	2300      	movs	r3, #0
 8009f38:	60fb      	str	r3, [r7, #12]
 8009f3a:	e008      	b.n	8009f4e <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	4413      	add	r3, r2
 8009f44:	2200      	movs	r2, #0
 8009f46:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i< IBUS_USER_CHANNELS; i++){
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b05      	cmp	r3, #5
 8009f52:	ddf3      	ble.n	8009f3c <ibus_soft_failsafe+0x28>
	}
	// clear ibus buffer
	for(int j=0; j < IBUS_LENGTH; j++){
 8009f54:	2300      	movs	r3, #0
 8009f56:	60bb      	str	r3, [r7, #8]
 8009f58:	e007      	b.n	8009f6a <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 8009f5a:	4a0b      	ldr	r2, [pc, #44]	@ (8009f88 <ibus_soft_failsafe+0x74>)
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	4413      	add	r3, r2
 8009f60:	2200      	movs	r2, #0
 8009f62:	701a      	strb	r2, [r3, #0]
	for(int j=0; j < IBUS_LENGTH; j++){
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	3301      	adds	r3, #1
 8009f68:	60bb      	str	r3, [r7, #8]
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	2b1f      	cmp	r3, #31
 8009f6e:	ddf4      	ble.n	8009f5a <ibus_soft_failsafe+0x46>
	}
	fail_safe_flag = 0;
 8009f70:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <ibus_soft_failsafe+0x70>)
 8009f72:	2200      	movs	r2, #0
 8009f74:	701a      	strb	r2, [r3, #0]
	return;
 8009f76:	e000      	b.n	8009f7a <ibus_soft_failsafe+0x66>
		return;
 8009f78:	bf00      	nop
}
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr
 8009f84:	20007b0c 	.word	0x20007b0c
 8009f88:	20007aec 	.word	0x20007aec

08009f8c <ibus_reset_failsafe>:

//@note this function is located in HAL_UART_RxCpltCallback.
void ibus_reset_failsafe(){
 8009f8c:	b480      	push	{r7}
 8009f8e:	af00      	add	r7, sp, #0
	fail_safe_flag = 0; // flag reset
 8009f90:	4b03      	ldr	r3, [pc, #12]	@ (8009fa0 <ibus_reset_failsafe+0x14>)
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
}
 8009f96:	bf00      	nop
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr
 8009fa0:	20007b0c 	.word	0x20007b0c

08009fa4 <MPU_CS>:
#include "dragonll_imu6500.h"

#include "system.h"
#include "sleepus.h"

static void MPU_CS(uint8_t state) {
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	71fb      	strb	r3, [r7, #7]
	if (!state)
 8009fae:	79fb      	ldrb	r3, [r7, #7]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d105      	bne.n	8009fc0 <MPU_CS+0x1c>
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, 0);
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2110      	movs	r1, #16
 8009fb8:	4806      	ldr	r0, [pc, #24]	@ (8009fd4 <MPU_CS+0x30>)
 8009fba:	f7f7 ff03 	bl	8001dc4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, 1);
}
 8009fbe:	e004      	b.n	8009fca <MPU_CS+0x26>
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, 1);
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	2110      	movs	r1, #16
 8009fc4:	4803      	ldr	r0, [pc, #12]	@ (8009fd4 <MPU_CS+0x30>)
 8009fc6:	f7f7 fefd 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}
 8009fd2:	bf00      	nop
 8009fd4:	40020000 	.word	0x40020000

08009fd8 <MPU_Wirte_Register>:
static void MPU_Wirte_Register(uint8_t reg, uint8_t value) {
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	4603      	mov	r3, r0
 8009fe0:	460a      	mov	r2, r1
 8009fe2:	71fb      	strb	r3, [r7, #7]
 8009fe4:	4613      	mov	r3, r2
 8009fe6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = reg;
 8009fe8:	79fb      	ldrb	r3, [r7, #7]
 8009fea:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(0x80);
 8009fec:	7b3b      	ldrb	r3, [r7, #12]
 8009fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 8009ff6:	79bb      	ldrb	r3, [r7, #6]
 8009ff8:	737b      	strb	r3, [r7, #13]
	MPU_CS(0);
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f7ff ffd2 	bl	8009fa4 <MPU_CS>
	HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 800a000:	f107 010c 	add.w	r1, r7, #12
 800a004:	2364      	movs	r3, #100	@ 0x64
 800a006:	2202      	movs	r2, #2
 800a008:	4804      	ldr	r0, [pc, #16]	@ (800a01c <MPU_Wirte_Register+0x44>)
 800a00a:	f7f9 fc58 	bl	80038be <HAL_SPI_Transmit>
	MPU_CS(1);
 800a00e:	2001      	movs	r0, #1
 800a010:	f7ff ffc8 	bl	8009fa4 <MPU_CS>
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20007e4c 	.word	0x20007e4c

0800a020 <MPU_Read_Register>:
static void MPU_Read_Register(uint8_t reg, uint8_t *buffer, uint8_t len) {
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
 800a02c:	4613      	mov	r3, r2
 800a02e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 800a030:	79fb      	ldrb	r3, [r7, #7]
 800a032:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a036:	b2db      	uxtb	r3, r3
 800a038:	73fb      	strb	r3, [r7, #15]
	MPU_CS(0);
 800a03a:	2000      	movs	r0, #0
 800a03c:	f7ff ffb2 	bl	8009fa4 <MPU_CS>
	HAL_SPI_Transmit(&hspi1, &buf, 1, 100);
 800a040:	f107 010f 	add.w	r1, r7, #15
 800a044:	2364      	movs	r3, #100	@ 0x64
 800a046:	2201      	movs	r2, #1
 800a048:	4808      	ldr	r0, [pc, #32]	@ (800a06c <MPU_Read_Register+0x4c>)
 800a04a:	f7f9 fc38 	bl	80038be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, len, 100);
 800a04e:	79bb      	ldrb	r3, [r7, #6]
 800a050:	b29a      	uxth	r2, r3
 800a052:	2364      	movs	r3, #100	@ 0x64
 800a054:	6839      	ldr	r1, [r7, #0]
 800a056:	4805      	ldr	r0, [pc, #20]	@ (800a06c <MPU_Read_Register+0x4c>)
 800a058:	f7f9 fd75 	bl	8003b46 <HAL_SPI_Receive>
	MPU_CS(1);
 800a05c:	2001      	movs	r0, #1
 800a05e:	f7ff ffa1 	bl	8009fa4 <MPU_CS>
}
 800a062:	bf00      	nop
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20007e4c 	.word	0x20007e4c

0800a070 <MPU6500_Init>:
uint8_t MPU6500_Init(MPU6500_IMU *imu) {
 800a070:	b580      	push	{r7, lr}
 800a072:	b084      	sub	sp, #16
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]

	imu->acc[0] = 0.0f;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	801a      	strh	r2, [r3, #0]
	imu->acc[1] = 0.0f;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	805a      	strh	r2, [r3, #2]
	imu->acc[2] = 0.0f;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	809a      	strh	r2, [r3, #4]
	imu->gyr[0] = 0.0f;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	80da      	strh	r2, [r3, #6]
	imu->gyr[1] = 0.0f;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	811a      	strh	r2, [r3, #8]
	imu->gyr[2] = 0.0f;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2200      	movs	r2, #0
 800a09a:	815a      	strh	r2, [r3, #10]

//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800a09c:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a0a0:	f00a f817 	bl	80140d2 <sleepus>
	//use internal 100Mhz
	uint8_t imuID;
	MPU_Read_Register(WHO_AM_I_ADDR, &imuID, 1);
 800a0a4:	f107 0309 	add.w	r3, r7, #9
 800a0a8:	2201      	movs	r2, #1
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	2075      	movs	r0, #117	@ 0x75
 800a0ae:	f7ff ffb7 	bl	800a020 <MPU_Read_Register>
	if (imuID != 0x70)
 800a0b2:	7a7b      	ldrb	r3, [r7, #9]
 800a0b4:	2b70      	cmp	r3, #112	@ 0x70
 800a0b6:	d001      	beq.n	800a0bc <MPU6500_Init+0x4c>
		return 0;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	e03e      	b.n	800a13a <MPU6500_Init+0xca>

//	HAL_Delay(50);
//	vTaskDelay(50);
	// 1 % 0.05 = 20
	sleepus(50000);
 800a0bc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800a0c0:	f00a f807 	bl	80140d2 <sleepus>
	// use 20Mhz internal
	uint8_t imuMode = 0x00;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]
	MPU_Wirte_Register(PWR_MGMT_1, imuMode);
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	206b      	movs	r0, #107	@ 0x6b
 800a0ce:	f7ff ff83 	bl	8009fd8 <MPU_Wirte_Register>

	//Configure sample rate to 1KHz
	uint8_t sampleRateConfig = 0x00;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	73bb      	strb	r3, [r7, #14]
	MPU_Wirte_Register(SMPLRT_DIV_REG, sampleRateConfig);
 800a0d6:	7bbb      	ldrb	r3, [r7, #14]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	2019      	movs	r0, #25
 800a0dc:	f7ff ff7c 	bl	8009fd8 <MPU_Wirte_Register>
	/* GYRO Configure */

	// Configure digital low-pass filter bandwidth to 184Hz with 1KHz
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800a0e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a0e4:	f009 fff5 	bl	80140d2 <sleepus>
	uint8_t gyroDLPFConfig = 0x01;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	737b      	strb	r3, [r7, #13]
	MPU_Wirte_Register(CONFIG_REG, gyroDLPFConfig);
 800a0ec:	7b7b      	ldrb	r3, [r7, #13]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	201a      	movs	r0, #26
 800a0f2:	f7ff ff71 	bl	8009fd8 <MPU_Wirte_Register>

	// Configure GYRO range to +-500dps
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800a0f6:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a0fa:	f009 ffea 	bl	80140d2 <sleepus>
	uint8_t gyroRange = 0x0B;
 800a0fe:	230b      	movs	r3, #11
 800a100:	733b      	strb	r3, [r7, #12]
	MPU_Wirte_Register(GYRO_CONFIG_REG, gyroRange);
 800a102:	7b3b      	ldrb	r3, [r7, #12]
 800a104:	4619      	mov	r1, r3
 800a106:	201b      	movs	r0, #27
 800a108:	f7ff ff66 	bl	8009fd8 <MPU_Wirte_Register>
	/* Accel configure */

	// Configure digital low-pass filter bandwidth to 184Hz with 1KHz
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800a10c:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a110:	f009 ffdf 	bl	80140d2 <sleepus>
	uint8_t accelDLPFConfig = 0x01;
 800a114:	2301      	movs	r3, #1
 800a116:	72fb      	strb	r3, [r7, #11]
	MPU_Wirte_Register(ACCEL_CONFIG_2_REG, accelDLPFConfig);
 800a118:	7afb      	ldrb	r3, [r7, #11]
 800a11a:	4619      	mov	r1, r3
 800a11c:	201d      	movs	r0, #29
 800a11e:	f7ff ff5b 	bl	8009fd8 <MPU_Wirte_Register>

	// Configure ACCEL range to +-8g
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800a122:	f242 7010 	movw	r0, #10000	@ 0x2710
 800a126:	f009 ffd4 	bl	80140d2 <sleepus>
	uint8_t accelRange = 0x10;
 800a12a:	2310      	movs	r3, #16
 800a12c:	72bb      	strb	r3, [r7, #10]
	MPU_Wirte_Register(ACCEL_CONFIG_REG, accelRange);
 800a12e:	7abb      	ldrb	r3, [r7, #10]
 800a130:	4619      	mov	r1, r3
 800a132:	201c      	movs	r0, #28
 800a134:	f7ff ff50 	bl	8009fd8 <MPU_Wirte_Register>

	return 1;
 800a138:	2301      	movs	r3, #1
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <MPU6500_ReadAcc>:

void MPU6500_ReadAcc(MPU6500_IMU *imu) {
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];

	MPU_Read_Register(ACCEL_DATA_REG, rxBuf, 6);
 800a14a:	f107 030c 	add.w	r3, r7, #12
 800a14e:	2206      	movs	r2, #6
 800a150:	4619      	mov	r1, r3
 800a152:	203b      	movs	r0, #59	@ 0x3b
 800a154:	f7ff ff64 	bl	800a020 <MPU_Read_Register>

	int16_t accelX = rxBuf[0] << 8 | rxBuf[1];
 800a158:	7b3b      	ldrb	r3, [r7, #12]
 800a15a:	021b      	lsls	r3, r3, #8
 800a15c:	b21a      	sxth	r2, r3
 800a15e:	7b7b      	ldrb	r3, [r7, #13]
 800a160:	b21b      	sxth	r3, r3
 800a162:	4313      	orrs	r3, r2
 800a164:	82fb      	strh	r3, [r7, #22]
	int16_t accelY = rxBuf[2] << 8 | rxBuf[3];
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	021b      	lsls	r3, r3, #8
 800a16a:	b21a      	sxth	r2, r3
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
 800a16e:	b21b      	sxth	r3, r3
 800a170:	4313      	orrs	r3, r2
 800a172:	82bb      	strh	r3, [r7, #20]
	int16_t accelZ = rxBuf[4] << 8 | rxBuf[5];
 800a174:	7c3b      	ldrb	r3, [r7, #16]
 800a176:	021b      	lsls	r3, r3, #8
 800a178:	b21a      	sxth	r2, r3
 800a17a:	7c7b      	ldrb	r3, [r7, #17]
 800a17c:	b21b      	sxth	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	827b      	strh	r3, [r7, #18]

	// +-8g
	imu->acc[0] = accelX;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	8afa      	ldrh	r2, [r7, #22]
 800a186:	801a      	strh	r2, [r3, #0]
	imu->acc[1] = accelY;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	8aba      	ldrh	r2, [r7, #20]
 800a18c:	805a      	strh	r2, [r3, #2]
	imu->acc[2] = accelZ;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	8a7a      	ldrh	r2, [r7, #18]
 800a192:	809a      	strh	r2, [r3, #4]



}
 800a194:	bf00      	nop
 800a196:	3718      	adds	r7, #24
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <MPU6500_ReadGyr>:
void MPU6500_ReadGyr(MPU6500_IMU *imu) {
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b086      	sub	sp, #24
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]

	uint8_t rxBuf[6];

	MPU_Read_Register(GYRO_DATA_REG, rxBuf, 6);
 800a1a4:	f107 030c 	add.w	r3, r7, #12
 800a1a8:	2206      	movs	r2, #6
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	2043      	movs	r0, #67	@ 0x43
 800a1ae:	f7ff ff37 	bl	800a020 <MPU_Read_Register>

	int16_t gyroX = rxBuf[0] << 8 | rxBuf[1];
 800a1b2:	7b3b      	ldrb	r3, [r7, #12]
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	b21a      	sxth	r2, r3
 800a1b8:	7b7b      	ldrb	r3, [r7, #13]
 800a1ba:	b21b      	sxth	r3, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	82fb      	strh	r3, [r7, #22]
	int16_t gyroY = rxBuf[2] << 8 | rxBuf[3];
 800a1c0:	7bbb      	ldrb	r3, [r7, #14]
 800a1c2:	021b      	lsls	r3, r3, #8
 800a1c4:	b21a      	sxth	r2, r3
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	b21b      	sxth	r3, r3
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	82bb      	strh	r3, [r7, #20]
	int16_t gyroZ = rxBuf[4] << 8 | rxBuf[5];
 800a1ce:	7c3b      	ldrb	r3, [r7, #16]
 800a1d0:	021b      	lsls	r3, r3, #8
 800a1d2:	b21a      	sxth	r2, r3
 800a1d4:	7c7b      	ldrb	r3, [r7, #17]
 800a1d6:	b21b      	sxth	r3, r3
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	827b      	strh	r3, [r7, #18]

	imu->gyr[0] = gyroX;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	8afa      	ldrh	r2, [r7, #22]
 800a1e0:	80da      	strh	r2, [r3, #6]
	imu->gyr[1] = gyroY;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	8aba      	ldrh	r2, [r7, #20]
 800a1e6:	811a      	strh	r2, [r3, #8]
	imu->gyr[2] = gyroZ;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	8a7a      	ldrh	r2, [r7, #18]
 800a1ec:	815a      	strh	r2, [r3, #10]

}
 800a1ee:	bf00      	nop
 800a1f0:	3718      	adds	r7, #24
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <hal_dshot_init>:
static void dshot_enable_dma_request();

/*
 * Functions
 */
void hal_dshot_init(dshot_type dshot_type){
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b082      	sub	sp, #8
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800a200:	79fb      	ldrb	r3, [r7, #7]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 f834 	bl	800a270 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800a208:	f000 f8d2 	bl	800a3b0 <dshot_put_tc_callback_function>
	// tc tranfer complet = disable dma( if chang to circular mode maybe modify this )
	dshot_start_pwm();
 800a20c:	f000 f8ec 	bl	800a3e8 <dshot_start_pwm>
}
 800a210:	bf00      	nop
 800a212:	3708      	adds	r7, #8
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <hal_dshot_write>:

void hal_dshot_write(uint16_t* motor_value){
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 f95d 	bl	800a4e0 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800a226:	f000 f987 	bl	800a538 <dshot_dma_start>
	dshot_enable_dma_request();
 800a22a:	f000 f9bb 	bl	800a5a4 <dshot_enable_dma_request>
//	step_after = 1;
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <dshot_choose_type>:
/*
 * Static Functions
 */

static uint32_t dshot_choose_type(dshot_type dshot_type)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	4603      	mov	r3, r0
 800a240:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d003      	beq.n	800a250 <dshot_choose_type+0x18>
 800a248:	2b02      	cmp	r3, #2
 800a24a:	d103      	bne.n	800a254 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return dshot600_hz;
 800a24c:	4b05      	ldr	r3, [pc, #20]	@ (800a264 <dshot_choose_type+0x2c>)
 800a24e:	e002      	b.n	800a256 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return dshot300_hz;
 800a250:	4b05      	ldr	r3, [pc, #20]	@ (800a268 <dshot_choose_type+0x30>)
 800a252:	e000      	b.n	800a256 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return dshot150_hz;
 800a254:	4b05      	ldr	r3, [pc, #20]	@ (800a26c <dshot_choose_type+0x34>)
	}
}
 800a256:	4618      	mov	r0, r3
 800a258:	370c      	adds	r7, #12
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	00b71b00 	.word	0x00b71b00
 800a268:	005b8d80 	.word	0x005b8d80
 800a26c:	002dc6c0 	.word	0x002dc6c0

0800a270 <dshot_set_timer>:


static void dshot_set_timer(dshot_type dshot_type)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	ed2d 8b02 	vpush	{d8}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	4603      	mov	r3, r0
 800a27c:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 800a27e:	4b27      	ldr	r3, [pc, #156]	@ (800a31c <dshot_set_timer+0xac>)
 800a280:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	ee07 3a90 	vmov	s15, r3
 800a288:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800a28c:	79fb      	ldrb	r3, [r7, #7]
 800a28e:	4618      	mov	r0, r3
 800a290:	f7ff ffd2 	bl	800a238 <dshot_choose_type>
 800a294:	ee07 0a90 	vmov	s15, r0
 800a298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a29c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800a2a0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800a320 <dshot_set_timer+0xb0>
 800a2a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a2ac:	f00f fa44 	bl	8019738 <lrintf>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	817b      	strh	r3, [r7, #10]
	//if we choose dshot600 = 12 Mhz => time clock / 12Mhzh -1 = 6
	// dshot prescalar = 6 and atore load = 20
	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800a2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	897a      	ldrh	r2, [r7, #10]
 800a2be:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 800a2c0:	4b18      	ldr	r3, [pc, #96]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2214      	movs	r2, #20
 800a2c6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a2c8:	4b16      	ldr	r3, [pc, #88]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2ca:	2214      	movs	r2, #20
 800a2cc:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800a2ce:	4b15      	ldr	r3, [pc, #84]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	897a      	ldrh	r2, [r7, #10]
 800a2d4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800a2d6:	4b13      	ldr	r3, [pc, #76]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	2214      	movs	r2, #20
 800a2dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a2de:	4b11      	ldr	r3, [pc, #68]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2e0:	2214      	movs	r2, #20
 800a2e2:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 800a2e4:	4b0f      	ldr	r3, [pc, #60]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	897a      	ldrh	r2, [r7, #10]
 800a2ea:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2214      	movs	r2, #20
 800a2f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a2f4:	4b0b      	ldr	r3, [pc, #44]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2f6:	2214      	movs	r2, #20
 800a2f8:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800a2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800a324 <dshot_set_timer+0xb4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	897a      	ldrh	r2, [r7, #10]
 800a300:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800a302:	4b08      	ldr	r3, [pc, #32]	@ (800a324 <dshot_set_timer+0xb4>)
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	2214      	movs	r2, #20
 800a308:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a30a:	4b06      	ldr	r3, [pc, #24]	@ (800a324 <dshot_set_timer+0xb4>)
 800a30c:	2214      	movs	r2, #20
 800a30e:	60da      	str	r2, [r3, #12]
}
 800a310:	bf00      	nop
 800a312:	3710      	adds	r7, #16
 800a314:	46bd      	mov	sp, r7
 800a316:	ecbd 8b02 	vpop	{d8}
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	0501bd00 	.word	0x0501bd00
 800a320:	3c23d70a 	.word	0x3c23d70a
 800a324:	20007ea4 	.word	0x20007ea4

0800a328 <dshot_dma_tc_callback>:


static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a334:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a33a:	687a      	ldr	r2, [r7, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d108      	bne.n	800a352 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68da      	ldr	r2, [r3, #12]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800a34e:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 800a350:	e028      	b.n	800a3a4 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a356:	687a      	ldr	r2, [r7, #4]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d108      	bne.n	800a36e <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68da      	ldr	r2, [r3, #12]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a36a:	60da      	str	r2, [r3, #12]
}
 800a36c:	e01a      	b.n	800a3a4 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	429a      	cmp	r2, r3
 800a376:	d108      	bne.n	800a38a <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	68da      	ldr	r2, [r3, #12]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a386:	60da      	str	r2, [r3, #12]
}
 800a388:	e00c      	b.n	800a3a4 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	429a      	cmp	r2, r3
 800a392:	d107      	bne.n	800a3a4 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68da      	ldr	r2, [r3, #12]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a3a2:	60da      	str	r2, [r3, #12]
}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 800a3b4:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e0 <dshot_put_tc_callback_function+0x30>)
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b8:	4a0a      	ldr	r2, [pc, #40]	@ (800a3e4 <dshot_put_tc_callback_function+0x34>)
 800a3ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800a3bc:	4b08      	ldr	r3, [pc, #32]	@ (800a3e0 <dshot_put_tc_callback_function+0x30>)
 800a3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3c0:	4a08      	ldr	r2, [pc, #32]	@ (800a3e4 <dshot_put_tc_callback_function+0x34>)
 800a3c2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800a3c4:	4b06      	ldr	r3, [pc, #24]	@ (800a3e0 <dshot_put_tc_callback_function+0x30>)
 800a3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3c8:	4a06      	ldr	r2, [pc, #24]	@ (800a3e4 <dshot_put_tc_callback_function+0x34>)
 800a3ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 800a3cc:	4b04      	ldr	r3, [pc, #16]	@ (800a3e0 <dshot_put_tc_callback_function+0x30>)
 800a3ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3d0:	4a04      	ldr	r2, [pc, #16]	@ (800a3e4 <dshot_put_tc_callback_function+0x34>)
 800a3d2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a3d4:	bf00      	nop
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20007ea4 	.word	0x20007ea4
 800a3e4:	0800a329 	.word	0x0800a329

0800a3e8 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	4808      	ldr	r0, [pc, #32]	@ (800a410 <dshot_start_pwm+0x28>)
 800a3f0:	f7fa f9d0 	bl	8004794 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 800a3f4:	2104      	movs	r1, #4
 800a3f6:	4806      	ldr	r0, [pc, #24]	@ (800a410 <dshot_start_pwm+0x28>)
 800a3f8:	f7fa f9cc 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 800a3fc:	2108      	movs	r1, #8
 800a3fe:	4804      	ldr	r0, [pc, #16]	@ (800a410 <dshot_start_pwm+0x28>)
 800a400:	f7fa f9c8 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 800a404:	210c      	movs	r1, #12
 800a406:	4802      	ldr	r0, [pc, #8]	@ (800a410 <dshot_start_pwm+0x28>)
 800a408:	f7fa f9c4 	bl	8004794 <HAL_TIM_PWM_Start>
}
 800a40c:	bf00      	nop
 800a40e:	bd80      	pop	{r7, pc}
 800a410:	20007ea4 	.word	0x20007ea4

0800a414 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	4603      	mov	r3, r0
 800a41c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 800a41e:	2300      	movs	r3, #0
 800a420:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800a422:	88fb      	ldrh	r3, [r7, #6]
 800a424:	005b      	lsls	r3, r3, #1
 800a426:	b21a      	sxth	r2, r3
 800a428:	7afb      	ldrb	r3, [r7, #11]
 800a42a:	b21b      	sxth	r3, r3
 800a42c:	4313      	orrs	r3, r2
 800a42e:	b21b      	sxth	r3, r3
 800a430:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 800a432:	2300      	movs	r3, #0
 800a434:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet; // if value = 50 => packet = 100
 800a436:	893b      	ldrh	r3, [r7, #8]
 800a438:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
 800a43e:	e009      	b.n	800a454 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	4053      	eors	r3, r2
 800a446:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	091b      	lsrs	r3, r3, #4
 800a44c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	3301      	adds	r3, #1
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2b02      	cmp	r3, #2
 800a458:	ddf2      	ble.n	800a440 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;// 0 1111
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f003 030f 	and.w	r3, r3, #15
 800a460:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800a462:	893b      	ldrh	r3, [r7, #8]
 800a464:	011b      	lsls	r3, r3, #4
 800a466:	b29a      	uxth	r2, r3
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	4313      	orrs	r3, r2
 800a46e:	813b      	strh	r3, [r7, #8]

	return packet;
 800a470:	893b      	ldrh	r3, [r7, #8]
}
 800a472:	4618      	mov	r0, r3
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47c:	4770      	bx	lr

0800a47e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 800a47e:	b580      	push	{r7, lr}
 800a480:	b084      	sub	sp, #16
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	460b      	mov	r3, r1
 800a488:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 800a48a:	887b      	ldrh	r3, [r7, #2]
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7ff ffc1 	bl	800a414 <dshot_prepare_packet>
 800a492:	4603      	mov	r3, r0
 800a494:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 800a496:	2300      	movs	r3, #0
 800a498:	60bb      	str	r3, [r7, #8]
 800a49a:	e011      	b.n	800a4c0 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 800a49c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da01      	bge.n	800a4a8 <dshot_prepare_dmabuffer+0x2a>
 800a4a4:	220e      	movs	r2, #14
 800a4a6:	e000      	b.n	800a4aa <dshot_prepare_dmabuffer+0x2c>
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	009b      	lsls	r3, r3, #2
 800a4ae:	6879      	ldr	r1, [r7, #4]
 800a4b0:	440b      	add	r3, r1
 800a4b2:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 800a4b4:	89fb      	ldrh	r3, [r7, #14]
 800a4b6:	005b      	lsls	r3, r3, #1
 800a4b8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	60bb      	str	r3, [r7, #8]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2b0f      	cmp	r3, #15
 800a4c4:	ddea      	ble.n	800a49c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3340      	adds	r3, #64	@ 0x40
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	3344      	adds	r3, #68	@ 0x44
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	601a      	str	r2, [r3, #0]
}
 800a4d6:	bf00      	nop
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}
	...

0800a4e0 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b082      	sub	sp, #8
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	480e      	ldr	r0, [pc, #56]	@ (800a528 <dshot_prepare_dmabuffer_all+0x48>)
 800a4f0:	f7ff ffc5 	bl	800a47e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3302      	adds	r3, #2
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	480b      	ldr	r0, [pc, #44]	@ (800a52c <dshot_prepare_dmabuffer_all+0x4c>)
 800a4fe:	f7ff ffbe 	bl	800a47e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3304      	adds	r3, #4
 800a506:	881b      	ldrh	r3, [r3, #0]
 800a508:	4619      	mov	r1, r3
 800a50a:	4809      	ldr	r0, [pc, #36]	@ (800a530 <dshot_prepare_dmabuffer_all+0x50>)
 800a50c:	f7ff ffb7 	bl	800a47e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	3306      	adds	r3, #6
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	4619      	mov	r1, r3
 800a518:	4806      	ldr	r0, [pc, #24]	@ (800a534 <dshot_prepare_dmabuffer_all+0x54>)
 800a51a:	f7ff ffb0 	bl	800a47e <dshot_prepare_dmabuffer>
}
 800a51e:	bf00      	nop
 800a520:	3708      	adds	r7, #8
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	20007b10 	.word	0x20007b10
 800a52c:	20007b58 	.word	0x20007b58
 800a530:	20007ba0 	.word	0x20007ba0
 800a534:	20007be8 	.word	0x20007be8

0800a538 <dshot_dma_start>:

static void dshot_dma_start()
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 800a53c:	4b14      	ldr	r3, [pc, #80]	@ (800a590 <dshot_dma_start+0x58>)
 800a53e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a540:	4914      	ldr	r1, [pc, #80]	@ (800a594 <dshot_dma_start+0x5c>)
 800a542:	4b13      	ldr	r3, [pc, #76]	@ (800a590 <dshot_dma_start+0x58>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	3334      	adds	r3, #52	@ 0x34
 800a548:	461a      	mov	r2, r3
 800a54a:	2312      	movs	r3, #18
 800a54c:	f7f6 ffba 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 800a550:	4b0f      	ldr	r3, [pc, #60]	@ (800a590 <dshot_dma_start+0x58>)
 800a552:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a554:	4910      	ldr	r1, [pc, #64]	@ (800a598 <dshot_dma_start+0x60>)
 800a556:	4b0e      	ldr	r3, [pc, #56]	@ (800a590 <dshot_dma_start+0x58>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	3338      	adds	r3, #56	@ 0x38
 800a55c:	461a      	mov	r2, r3
 800a55e:	2312      	movs	r3, #18
 800a560:	f7f6 ffb0 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 800a564:	4b0a      	ldr	r3, [pc, #40]	@ (800a590 <dshot_dma_start+0x58>)
 800a566:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a568:	490c      	ldr	r1, [pc, #48]	@ (800a59c <dshot_dma_start+0x64>)
 800a56a:	4b09      	ldr	r3, [pc, #36]	@ (800a590 <dshot_dma_start+0x58>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	333c      	adds	r3, #60	@ 0x3c
 800a570:	461a      	mov	r2, r3
 800a572:	2312      	movs	r3, #18
 800a574:	f7f6 ffa6 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 800a578:	4b05      	ldr	r3, [pc, #20]	@ (800a590 <dshot_dma_start+0x58>)
 800a57a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a57c:	4908      	ldr	r1, [pc, #32]	@ (800a5a0 <dshot_dma_start+0x68>)
 800a57e:	4b04      	ldr	r3, [pc, #16]	@ (800a590 <dshot_dma_start+0x58>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3340      	adds	r3, #64	@ 0x40
 800a584:	461a      	mov	r2, r3
 800a586:	2312      	movs	r3, #18
 800a588:	f7f6 ff9c 	bl	80014c4 <HAL_DMA_Start_IT>
}
 800a58c:	bf00      	nop
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	20007ea4 	.word	0x20007ea4
 800a594:	20007b10 	.word	0x20007b10
 800a598:	20007b58 	.word	0x20007b58
 800a59c:	20007ba0 	.word	0x20007ba0
 800a5a0:	20007be8 	.word	0x20007be8

0800a5a4 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC1);
 800a5a8:	4b12      	ldr	r3, [pc, #72]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	4b11      	ldr	r3, [pc, #68]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5b6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC2);
 800a5b8:	4b0e      	ldr	r3, [pc, #56]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	4b0d      	ldr	r3, [pc, #52]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a5c6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC3);
 800a5c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68da      	ldr	r2, [r3, #12]
 800a5ce:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a5d6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC4);
 800a5d8:	4b06      	ldr	r3, [pc, #24]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	4b05      	ldr	r3, [pc, #20]	@ (800a5f4 <dshot_enable_dma_request+0x50>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a5e6:	60da      	str	r2, [r3, #12]
}
 800a5e8:	bf00      	nop
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	20007ea4 	.word	0x20007ea4

0800a5f8 <GPIO_Init>:
 *      Author: AI FARM
 */

#include "gpio_drv.h"

void GPIO_Init(void){
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
	  /* GPIO Ports Clock Enable */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5fe:	f107 030c 	add.w	r3, r7, #12
 800a602:	2200      	movs	r2, #0
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	605a      	str	r2, [r3, #4]
 800a608:	609a      	str	r2, [r3, #8]
 800a60a:	60da      	str	r2, [r3, #12]
 800a60c:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a60e:	2300      	movs	r3, #0
 800a610:	60bb      	str	r3, [r7, #8]
 800a612:	4b25      	ldr	r3, [pc, #148]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a616:	4a24      	ldr	r2, [pc, #144]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a61c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a61e:	4b22      	ldr	r3, [pc, #136]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a626:	60bb      	str	r3, [r7, #8]
 800a628:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a62a:	2300      	movs	r3, #0
 800a62c:	607b      	str	r3, [r7, #4]
 800a62e:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a632:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a634:	f043 0304 	orr.w	r3, r3, #4
 800a638:	6313      	str	r3, [r2, #48]	@ 0x30
 800a63a:	4b1b      	ldr	r3, [pc, #108]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a63e:	f003 0304 	and.w	r3, r3, #4
 800a642:	607b      	str	r3, [r7, #4]
 800a644:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a646:	2300      	movs	r3, #0
 800a648:	603b      	str	r3, [r7, #0]
 800a64a:	4b17      	ldr	r3, [pc, #92]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a64c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a64e:	4a16      	ldr	r2, [pc, #88]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a650:	f043 0301 	orr.w	r3, r3, #1
 800a654:	6313      	str	r3, [r2, #48]	@ 0x30
 800a656:	4b14      	ldr	r3, [pc, #80]	@ (800a6a8 <GPIO_Init+0xb0>)
 800a658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	603b      	str	r3, [r7, #0]
 800a660:	683b      	ldr	r3, [r7, #0]

	  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800a662:	2200      	movs	r2, #0
 800a664:	2110      	movs	r1, #16
 800a666:	4811      	ldr	r0, [pc, #68]	@ (800a6ac <GPIO_Init+0xb4>)
 800a668:	f7f7 fbac 	bl	8001dc4 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : GYRO_CS_Pin */
	  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800a66c:	2310      	movs	r3, #16
 800a66e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a670:	2301      	movs	r3, #1
 800a672:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a674:	2300      	movs	r3, #0
 800a676:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a678:	2300      	movs	r3, #0
 800a67a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800a67c:	f107 030c 	add.w	r3, r7, #12
 800a680:	4619      	mov	r1, r3
 800a682:	480a      	ldr	r0, [pc, #40]	@ (800a6ac <GPIO_Init+0xb4>)
 800a684:	f7f7 fa02 	bl	8001a8c <HAL_GPIO_Init>

	  /*Configure GPIO pin : GYRO_INT_Pin */
	  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 800a688:	2310      	movs	r3, #16
 800a68a:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a690:	2300      	movs	r3, #0
 800a692:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800a694:	f107 030c 	add.w	r3, r7, #12
 800a698:	4619      	mov	r1, r3
 800a69a:	4805      	ldr	r0, [pc, #20]	@ (800a6b0 <GPIO_Init+0xb8>)
 800a69c:	f7f7 f9f6 	bl	8001a8c <HAL_GPIO_Init>



}
 800a6a0:	bf00      	nop
 800a6a2:	3720      	adds	r7, #32
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}
 800a6a8:	40023800 	.word	0x40023800
 800a6ac:	40020000 	.word	0x40020000
 800a6b0:	40020800 	.word	0x40020800

0800a6b4 <I2C2_Init>:
		Error_Handler();
	}

}
void I2C2_Init(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800a6b8:	4b12      	ldr	r3, [pc, #72]	@ (800a704 <I2C2_Init+0x50>)
 800a6ba:	4a13      	ldr	r2, [pc, #76]	@ (800a708 <I2C2_Init+0x54>)
 800a6bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800a6be:	4b11      	ldr	r3, [pc, #68]	@ (800a704 <I2C2_Init+0x50>)
 800a6c0:	4a12      	ldr	r2, [pc, #72]	@ (800a70c <I2C2_Init+0x58>)
 800a6c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a6c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a704 <I2C2_Init+0x50>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800a704 <I2C2_Init+0x50>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a6d0:	4b0c      	ldr	r3, [pc, #48]	@ (800a704 <I2C2_Init+0x50>)
 800a6d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a6d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a704 <I2C2_Init+0x50>)
 800a6da:	2200      	movs	r2, #0
 800a6dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a6de:	4b09      	ldr	r3, [pc, #36]	@ (800a704 <I2C2_Init+0x50>)
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a6e4:	4b07      	ldr	r3, [pc, #28]	@ (800a704 <I2C2_Init+0x50>)
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a6ea:	4b06      	ldr	r3, [pc, #24]	@ (800a704 <I2C2_Init+0x50>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a6f0:	4804      	ldr	r0, [pc, #16]	@ (800a704 <I2C2_Init+0x50>)
 800a6f2:	f7f7 fb9b 	bl	8001e2c <HAL_I2C_Init>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <I2C2_Init+0x4c>
  {
    Error_Handler();
 800a6fc:	f7fe fd58 	bl	80091b0 <Error_Handler>
  }

}
 800a700:	bf00      	nop
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20007c84 	.word	0x20007c84
 800a708:	40005800 	.word	0x40005800
 800a70c:	00061a80 	.word	0x00061a80

0800a710 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b08c      	sub	sp, #48	@ 0x30
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a718:	f107 031c 	add.w	r3, r7, #28
 800a71c:	2200      	movs	r2, #0
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	605a      	str	r2, [r3, #4]
 800a722:	609a      	str	r2, [r3, #8]
 800a724:	60da      	str	r2, [r3, #12]
 800a726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a32      	ldr	r2, [pc, #200]	@ (800a7f8 <HAL_I2C_MspInit+0xe8>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d12b      	bne.n	800a78a <HAL_I2C_MspInit+0x7a>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a732:	2300      	movs	r3, #0
 800a734:	61bb      	str	r3, [r7, #24]
 800a736:	4b31      	ldr	r3, [pc, #196]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a73a:	4a30      	ldr	r2, [pc, #192]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a73c:	f043 0302 	orr.w	r3, r3, #2
 800a740:	6313      	str	r3, [r2, #48]	@ 0x30
 800a742:	4b2e      	ldr	r3, [pc, #184]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	61bb      	str	r3, [r7, #24]
 800a74c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a74e:	23c0      	movs	r3, #192	@ 0xc0
 800a750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a752:	2312      	movs	r3, #18
 800a754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a756:	2300      	movs	r3, #0
 800a758:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a75a:	2303      	movs	r3, #3
 800a75c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a75e:	2304      	movs	r3, #4
 800a760:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a762:	f107 031c 	add.w	r3, r7, #28
 800a766:	4619      	mov	r1, r3
 800a768:	4825      	ldr	r0, [pc, #148]	@ (800a800 <HAL_I2C_MspInit+0xf0>)
 800a76a:	f7f7 f98f 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a76e:	2300      	movs	r3, #0
 800a770:	617b      	str	r3, [r7, #20]
 800a772:	4b22      	ldr	r3, [pc, #136]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a776:	4a21      	ldr	r2, [pc, #132]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a778:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a77c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a77e:	4b1f      	ldr	r3, [pc, #124]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a786:	617b      	str	r3, [r7, #20]
 800a788:	697b      	ldr	r3, [r7, #20]

  }
  if(i2cHandle->Instance==I2C2)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a1d      	ldr	r2, [pc, #116]	@ (800a804 <HAL_I2C_MspInit+0xf4>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d12c      	bne.n	800a7ee <HAL_I2C_MspInit+0xde>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a794:	2300      	movs	r3, #0
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	4b18      	ldr	r3, [pc, #96]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79c:	4a17      	ldr	r2, [pc, #92]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a79e:	f043 0302 	orr.w	r3, r3, #2
 800a7a2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7a4:	4b15      	ldr	r3, [pc, #84]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a8:	f003 0302 	and.w	r3, r3, #2
 800a7ac:	613b      	str	r3, [r7, #16]
 800a7ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a7b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a7b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a7b6:	2312      	movs	r3, #18
 800a7b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a7c2:	2304      	movs	r3, #4
 800a7c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a7c6:	f107 031c 	add.w	r3, r7, #28
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	480c      	ldr	r0, [pc, #48]	@ (800a800 <HAL_I2C_MspInit+0xf0>)
 800a7ce:	f7f7 f95d 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	4b09      	ldr	r3, [pc, #36]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7da:	4a08      	ldr	r2, [pc, #32]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a7dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a7e0:	6413      	str	r3, [r2, #64]	@ 0x40
 800a7e2:	4b06      	ldr	r3, [pc, #24]	@ (800a7fc <HAL_I2C_MspInit+0xec>)
 800a7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a7ea:	60fb      	str	r3, [r7, #12]
 800a7ec:	68fb      	ldr	r3, [r7, #12]

  }
}
 800a7ee:	bf00      	nop
 800a7f0:	3730      	adds	r7, #48	@ 0x30
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40005400 	.word	0x40005400
 800a7fc:	40023800 	.word	0x40023800
 800a800:	40020400 	.word	0x40020400
 800a804:	40005800 	.word	0x40005800

0800a808 <i2cdevReadReg16>:
#include "i2cdev.h"
#include "stdbool.h"


bool i2cdevReadReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b08a      	sub	sp, #40	@ 0x28
 800a80c:	af04      	add	r7, sp, #16
 800a80e:	60f8      	str	r0, [r7, #12]
 800a810:	4608      	mov	r0, r1
 800a812:	4611      	mov	r1, r2
 800a814:	461a      	mov	r2, r3
 800a816:	4603      	mov	r3, r0
 800a818:	72fb      	strb	r3, [r7, #11]
 800a81a:	460b      	mov	r3, r1
 800a81c:	813b      	strh	r3, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800a822:	7afb      	ldrb	r3, [r7, #11]
 800a824:	b29b      	uxth	r3, r3
 800a826:	005b      	lsls	r3, r3, #1
 800a828:	b299      	uxth	r1, r3
 800a82a:	893a      	ldrh	r2, [r7, #8]
 800a82c:	2364      	movs	r3, #100	@ 0x64
 800a82e:	9302      	str	r3, [sp, #8]
 800a830:	88fb      	ldrh	r3, [r7, #6]
 800a832:	9301      	str	r3, [sp, #4]
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	9300      	str	r3, [sp, #0]
 800a838:	2310      	movs	r3, #16
 800a83a:	4807      	ldr	r0, [pc, #28]	@ (800a858 <i2cdevReadReg16+0x50>)
 800a83c:	f7f7 fd34 	bl	80022a8 <HAL_I2C_Mem_Read>
 800a840:	4603      	mov	r3, r0
 800a842:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800a844:	7dfb      	ldrb	r3, [r7, #23]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d101      	bne.n	800a84e <i2cdevReadReg16+0x46>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <i2cdevReadReg16+0x48>
	else return false;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}
 800a858:	20007c84 	.word	0x20007c84

0800a85c <i2cdevWriteReg16>:
bool i2cdevWriteReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	@ 0x28
 800a860:	af04      	add	r7, sp, #16
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	461a      	mov	r2, r3
 800a86a:	4603      	mov	r3, r0
 800a86c:	72fb      	strb	r3, [r7, #11]
 800a86e:	460b      	mov	r3, r1
 800a870:	813b      	strh	r3, [r7, #8]
 800a872:	4613      	mov	r3, r2
 800a874:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800a876:	7afb      	ldrb	r3, [r7, #11]
 800a878:	b29b      	uxth	r3, r3
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	b299      	uxth	r1, r3
 800a87e:	893a      	ldrh	r2, [r7, #8]
 800a880:	2364      	movs	r3, #100	@ 0x64
 800a882:	9302      	str	r3, [sp, #8]
 800a884:	88fb      	ldrh	r3, [r7, #6]
 800a886:	9301      	str	r3, [sp, #4]
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	9300      	str	r3, [sp, #0]
 800a88c:	2310      	movs	r3, #16
 800a88e:	4807      	ldr	r0, [pc, #28]	@ (800a8ac <i2cdevWriteReg16+0x50>)
 800a890:	f7f7 fc10 	bl	80020b4 <HAL_I2C_Mem_Write>
 800a894:	4603      	mov	r3, r0
 800a896:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800a898:	7dfb      	ldrb	r3, [r7, #23]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d101      	bne.n	800a8a2 <i2cdevWriteReg16+0x46>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	e000      	b.n	800a8a4 <i2cdevWriteReg16+0x48>
	else return false;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3718      	adds	r7, #24
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}
 800a8ac:	20007c84 	.word	0x20007c84

0800a8b0 <ledInit>:

static bool isInit;


void ledInit()
{
 800a8b0:	b580      	push	{r7, lr}
 800a8b2:	b086      	sub	sp, #24
 800a8b4:	af00      	add	r7, sp, #0

	if (isInit)
 800a8b6:	4b1a      	ldr	r3, [pc, #104]	@ (800a920 <ledInit+0x70>)
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d12c      	bne.n	800a918 <ledInit+0x68>
		return;
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800a8be:	1d3b      	adds	r3, r7, #4
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	605a      	str	r2, [r3, #4]
 800a8c6:	609a      	str	r2, [r3, #8]
 800a8c8:	60da      	str	r2, [r3, #12]
 800a8ca:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	603b      	str	r3, [r7, #0]
 800a8d0:	4b14      	ldr	r3, [pc, #80]	@ (800a924 <ledInit+0x74>)
 800a8d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8d4:	4a13      	ldr	r2, [pc, #76]	@ (800a924 <ledInit+0x74>)
 800a8d6:	f043 0304 	orr.w	r3, r3, #4
 800a8da:	6313      	str	r3, [r2, #48]	@ 0x30
 800a8dc:	4b11      	ldr	r3, [pc, #68]	@ (800a924 <ledInit+0x74>)
 800a8de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8e0:	f003 0304 	and.w	r3, r3, #4
 800a8e4:	603b      	str	r3, [r7, #0]
 800a8e6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a8ee:	480e      	ldr	r0, [pc, #56]	@ (800a928 <ledInit+0x78>)
 800a8f0:	f7f7 fa68 	bl	8001dc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LED_PIN;
 800a8f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a8f8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8fe:	2300      	movs	r3, #0
 800a900:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a902:	2300      	movs	r3, #0
 800a904:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800a906:	1d3b      	adds	r3, r7, #4
 800a908:	4619      	mov	r1, r3
 800a90a:	4807      	ldr	r0, [pc, #28]	@ (800a928 <ledInit+0x78>)
 800a90c:	f7f7 f8be 	bl	8001a8c <HAL_GPIO_Init>

	isInit = true;
 800a910:	4b03      	ldr	r3, [pc, #12]	@ (800a920 <ledInit+0x70>)
 800a912:	2201      	movs	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	e000      	b.n	800a91a <ledInit+0x6a>
		return;
 800a918:	bf00      	nop
}
 800a91a:	3718      	adds	r7, #24
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	20007cd8 	.word	0x20007cd8
 800a924:	40023800 	.word	0x40023800
 800a928:	40020800 	.word	0x40020800

0800a92c <ledSet>:


void ledSet(bool value)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	71fb      	strb	r3, [r7, #7]
	if ( value == 0 ) HAL_GPIO_WritePin(LED_PORT, LED_PIN, 0);
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	f083 0301 	eor.w	r3, r3, #1
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d006      	beq.n	800a950 <ledSet+0x24>
 800a942:	2200      	movs	r2, #0
 800a944:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a948:	4806      	ldr	r0, [pc, #24]	@ (800a964 <ledSet+0x38>)
 800a94a:	f7f7 fa3b 	bl	8001dc4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);

}
 800a94e:	e005      	b.n	800a95c <ledSet+0x30>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 800a950:	2201      	movs	r2, #1
 800a952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a956:	4803      	ldr	r0, [pc, #12]	@ (800a964 <ledSet+0x38>)
 800a958:	f7f7 fa34 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 800a95c:	bf00      	nop
 800a95e:	3708      	adds	r7, #8
 800a960:	46bd      	mov	sp, r7
 800a962:	bd80      	pop	{r7, pc}
 800a964:	40020800 	.word	0x40020800

0800a968 <mpu6500TestConnection>:
#include "mpu6500.h"
#include "i2c_drv.h"

uint8_t walk = 0;

bool mpu6500TestConnection() {
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af04      	add	r7, sp, #16
	uint8_t mpuID;
//	walk = 1;//JH
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, WHO_AM_I_REG, 1, &mpuID, 1, 100);
 800a96e:	2364      	movs	r3, #100	@ 0x64
 800a970:	9302      	str	r3, [sp, #8]
 800a972:	2301      	movs	r3, #1
 800a974:	9301      	str	r3, [sp, #4]
 800a976:	1dfb      	adds	r3, r7, #7
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	2301      	movs	r3, #1
 800a97c:	2275      	movs	r2, #117	@ 0x75
 800a97e:	21d0      	movs	r1, #208	@ 0xd0
 800a980:	4806      	ldr	r0, [pc, #24]	@ (800a99c <mpu6500TestConnection+0x34>)
 800a982:	f7f7 fc91 	bl	80022a8 <HAL_I2C_Mem_Read>
//	walk =1;//NJH
	if (mpuID != 0x75)
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	2b75      	cmp	r3, #117	@ 0x75
 800a98a:	d001      	beq.n	800a990 <mpu6500TestConnection+0x28>
		return false;
 800a98c:	2300      	movs	r3, #0
 800a98e:	e000      	b.n	800a992 <mpu6500TestConnection+0x2a>
//	walk = 1;//NJH
	return true;
 800a990:	2301      	movs	r3, #1
}
 800a992:	4618      	mov	r0, r3
 800a994:	3708      	adds	r7, #8
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	20007c30 	.word	0x20007c30

0800a9a0 <mpu6500SelfTest>:
		//                string, (double)low, (double)high, (double)value);
		return false;
	}
	return true;
}
bool mpu6500SelfTest() {
 800a9a0:	b480      	push	{r7}
 800a9a2:	af00      	add	r7, sp, #0
	return true;
 800a9a4:	2301      	movs	r3, #1
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <mpu6500Init>:
void mpu6500Init(void) {
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af04      	add	r7, sp, #16
	uint8_t data;
	data = 0x00;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1,
 800a9ba:	2364      	movs	r3, #100	@ 0x64
 800a9bc:	9302      	str	r3, [sp, #8]
 800a9be:	2301      	movs	r3, #1
 800a9c0:	9301      	str	r3, [sp, #4]
 800a9c2:	1dfb      	adds	r3, r7, #7
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	226b      	movs	r2, #107	@ 0x6b
 800a9ca:	21d0      	movs	r1, #208	@ 0xd0
 800a9cc:	482d      	ldr	r0, [pc, #180]	@ (800aa84 <mpu6500Init+0xd4>)
 800a9ce:	f7f7 fb71 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(500);
 800a9d2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a9d6:	f7fc fd1d 	bl	8007414 <vTaskDelay>
	// Set ACCEL to +-16g, GYRO to +-2000dps
	data = 0x18;
 800a9da:	2318      	movs	r3, #24
 800a9dc:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1,
 800a9de:	2364      	movs	r3, #100	@ 0x64
 800a9e0:	9302      	str	r3, [sp, #8]
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	1dfb      	adds	r3, r7, #7
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	221b      	movs	r2, #27
 800a9ee:	21d0      	movs	r1, #208	@ 0xd0
 800a9f0:	4824      	ldr	r0, [pc, #144]	@ (800aa84 <mpu6500Init+0xd4>)
 800a9f2:	f7f7 fb5f 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 800a9f6:	200a      	movs	r0, #10
 800a9f8:	f7fc fd0c 	bl	8007414 <vTaskDelay>
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1,
 800a9fc:	2364      	movs	r3, #100	@ 0x64
 800a9fe:	9302      	str	r3, [sp, #8]
 800aa00:	2301      	movs	r3, #1
 800aa02:	9301      	str	r3, [sp, #4]
 800aa04:	1dfb      	adds	r3, r7, #7
 800aa06:	9300      	str	r3, [sp, #0]
 800aa08:	2301      	movs	r3, #1
 800aa0a:	221c      	movs	r2, #28
 800aa0c:	21d0      	movs	r1, #208	@ 0xd0
 800aa0e:	481d      	ldr	r0, [pc, #116]	@ (800aa84 <mpu6500Init+0xd4>)
 800aa10:	f7f7 fb50 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 800aa14:	200a      	movs	r0, #10
 800aa16:	f7fc fcfd 	bl	8007414 <vTaskDelay>
	// Set sampling rate to 1khz
	data = 0x07;
 800aa1a:	2307      	movs	r3, #7
 800aa1c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1,
 800aa1e:	2364      	movs	r3, #100	@ 0x64
 800aa20:	9302      	str	r3, [sp, #8]
 800aa22:	2301      	movs	r3, #1
 800aa24:	9301      	str	r3, [sp, #4]
 800aa26:	1dfb      	adds	r3, r7, #7
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	2219      	movs	r2, #25
 800aa2e:	21d0      	movs	r1, #208	@ 0xd0
 800aa30:	4814      	ldr	r0, [pc, #80]	@ (800aa84 <mpu6500Init+0xd4>)
 800aa32:	f7f7 fb3f 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);

	vTaskDelay(10);
 800aa36:	200a      	movs	r0, #10
 800aa38:	f7fc fcec 	bl	8007414 <vTaskDelay>
	// Set GYRO to 41hz bandwidth
	data = 0x03;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, CONFIG_REG, 1, &data, 1, 100);
 800aa40:	2364      	movs	r3, #100	@ 0x64
 800aa42:	9302      	str	r3, [sp, #8]
 800aa44:	2301      	movs	r3, #1
 800aa46:	9301      	str	r3, [sp, #4]
 800aa48:	1dfb      	adds	r3, r7, #7
 800aa4a:	9300      	str	r3, [sp, #0]
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	221a      	movs	r2, #26
 800aa50:	21d0      	movs	r1, #208	@ 0xd0
 800aa52:	480c      	ldr	r0, [pc, #48]	@ (800aa84 <mpu6500Init+0xd4>)
 800aa54:	f7f7 fb2e 	bl	80020b4 <HAL_I2C_Mem_Write>

	// Enable data ready interrupt to propagate to interrupt pin
	vTaskDelay(10);
 800aa58:	200a      	movs	r0, #10
 800aa5a:	f7fc fcdb 	bl	8007414 <vTaskDelay>
	data = 0x01;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, INT_ENABLE_REG, 1, &data, 1,
 800aa62:	2364      	movs	r3, #100	@ 0x64
 800aa64:	9302      	str	r3, [sp, #8]
 800aa66:	2301      	movs	r3, #1
 800aa68:	9301      	str	r3, [sp, #4]
 800aa6a:	1dfb      	adds	r3, r7, #7
 800aa6c:	9300      	str	r3, [sp, #0]
 800aa6e:	2301      	movs	r3, #1
 800aa70:	2238      	movs	r2, #56	@ 0x38
 800aa72:	21d0      	movs	r1, #208	@ 0xd0
 800aa74:	4803      	ldr	r0, [pc, #12]	@ (800aa84 <mpu6500Init+0xd4>)
 800aa76:	f7f7 fb1d 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 800aa7a:	bf00      	nop
 800aa7c:	3708      	adds	r7, #8
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop
 800aa84:	20007c30 	.word	0x20007c30

0800aa88 <mpu6500SetAccelDLPF>:

void mpu6500SetAccelDLPF(uint8_t range) {
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af04      	add	r7, sp, #16
 800aa8e:	4603      	mov	r3, r0
 800aa90:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_2_REG, 1, &range, 1,
 800aa92:	2364      	movs	r3, #100	@ 0x64
 800aa94:	9302      	str	r3, [sp, #8]
 800aa96:	2301      	movs	r3, #1
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	1dfb      	adds	r3, r7, #7
 800aa9c:	9300      	str	r3, [sp, #0]
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	221d      	movs	r2, #29
 800aaa2:	21d0      	movs	r1, #208	@ 0xd0
 800aaa4:	4803      	ldr	r0, [pc, #12]	@ (800aab4 <mpu6500SetAccelDLPF+0x2c>)
 800aaa6:	f7f7 fb05 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	20007c30 	.word	0x20007c30

0800aab8 <mpu6500GetAccelGyroData>:
void mpu6500GetAccelGyroData(mpu6500_t *mpu6500TypeDef) {
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b086      	sub	sp, #24
 800aabc:	af04      	add	r7, sp, #16
 800aabe:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
			mpu6500TypeDef->buf, sizeof(mpu6500_t), 100);
 800aac0:	687b      	ldr	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
 800aac2:	2264      	movs	r2, #100	@ 0x64
 800aac4:	9202      	str	r2, [sp, #8]
 800aac6:	220e      	movs	r2, #14
 800aac8:	9201      	str	r2, [sp, #4]
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	2301      	movs	r3, #1
 800aace:	223b      	movs	r2, #59	@ 0x3b
 800aad0:	21d0      	movs	r1, #208	@ 0xd0
 800aad2:	4803      	ldr	r0, [pc, #12]	@ (800aae0 <mpu6500GetAccelGyroData+0x28>)
 800aad4:	f7f7 fbe8 	bl	80022a8 <HAL_I2C_Mem_Read>
}
 800aad8:	bf00      	nop
 800aada:	3708      	adds	r7, #8
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	20007c30 	.word	0x20007c30

0800aae4 <mpu6500GetMotion6>:
void mpu6500GetMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx,
		int16_t *gy, int16_t *gz) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08c      	sub	sp, #48	@ 0x30
 800aae8:	af04      	add	r7, sp, #16
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	60b9      	str	r1, [r7, #8]
 800aaee:	607a      	str	r2, [r7, #4]
 800aaf0:	603b      	str	r3, [r7, #0]
	uint8_t buf[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1, buf, 14,
 800aaf2:	2364      	movs	r3, #100	@ 0x64
 800aaf4:	9302      	str	r3, [sp, #8]
 800aaf6:	230e      	movs	r3, #14
 800aaf8:	9301      	str	r3, [sp, #4]
 800aafa:	f107 0310 	add.w	r3, r7, #16
 800aafe:	9300      	str	r3, [sp, #0]
 800ab00:	2301      	movs	r3, #1
 800ab02:	223b      	movs	r2, #59	@ 0x3b
 800ab04:	21d0      	movs	r1, #208	@ 0xd0
 800ab06:	481e      	ldr	r0, [pc, #120]	@ (800ab80 <mpu6500GetMotion6+0x9c>)
 800ab08:	f7f7 fbce 	bl	80022a8 <HAL_I2C_Mem_Read>
			100);
	*ax = (((int16_t) buf[0]) << 8) | buf[1];
 800ab0c:	7c3b      	ldrb	r3, [r7, #16]
 800ab0e:	021b      	lsls	r3, r3, #8
 800ab10:	b21a      	sxth	r2, r3
 800ab12:	7c7b      	ldrb	r3, [r7, #17]
 800ab14:	b21b      	sxth	r3, r3
 800ab16:	4313      	orrs	r3, r2
 800ab18:	b21a      	sxth	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	801a      	strh	r2, [r3, #0]
	*ay = (((int16_t) buf[2]) << 8) | buf[3];
 800ab1e:	7cbb      	ldrb	r3, [r7, #18]
 800ab20:	021b      	lsls	r3, r3, #8
 800ab22:	b21a      	sxth	r2, r3
 800ab24:	7cfb      	ldrb	r3, [r7, #19]
 800ab26:	b21b      	sxth	r3, r3
 800ab28:	4313      	orrs	r3, r2
 800ab2a:	b21a      	sxth	r2, r3
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	801a      	strh	r2, [r3, #0]
	*az = (((int16_t) buf[4]) << 8) | buf[5];
 800ab30:	7d3b      	ldrb	r3, [r7, #20]
 800ab32:	021b      	lsls	r3, r3, #8
 800ab34:	b21a      	sxth	r2, r3
 800ab36:	7d7b      	ldrb	r3, [r7, #21]
 800ab38:	b21b      	sxth	r3, r3
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	b21a      	sxth	r2, r3
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	801a      	strh	r2, [r3, #0]
	*gx = (((int16_t) buf[8]) << 8) | buf[9];
 800ab42:	7e3b      	ldrb	r3, [r7, #24]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	b21a      	sxth	r2, r3
 800ab48:	7e7b      	ldrb	r3, [r7, #25]
 800ab4a:	b21b      	sxth	r3, r3
 800ab4c:	4313      	orrs	r3, r2
 800ab4e:	b21a      	sxth	r2, r3
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	801a      	strh	r2, [r3, #0]
	*gy = (((int16_t) buf[10]) << 8) | buf[11];
 800ab54:	7ebb      	ldrb	r3, [r7, #26]
 800ab56:	021b      	lsls	r3, r3, #8
 800ab58:	b21a      	sxth	r2, r3
 800ab5a:	7efb      	ldrb	r3, [r7, #27]
 800ab5c:	b21b      	sxth	r3, r3
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	b21a      	sxth	r2, r3
 800ab62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab64:	801a      	strh	r2, [r3, #0]
	*gz = (((int16_t) buf[12]) << 8) | buf[13];
 800ab66:	7f3b      	ldrb	r3, [r7, #28]
 800ab68:	021b      	lsls	r3, r3, #8
 800ab6a:	b21a      	sxth	r2, r3
 800ab6c:	7f7b      	ldrb	r3, [r7, #29]
 800ab6e:	b21b      	sxth	r3, r3
 800ab70:	4313      	orrs	r3, r2
 800ab72:	b21a      	sxth	r2, r3
 800ab74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab76:	801a      	strh	r2, [r3, #0]
}
 800ab78:	bf00      	nop
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	20007c30 	.word	0x20007c30

0800ab84 <nvicInit>:
extern DMA_HandleTypeDef hdma_usart1_rx;

#define DONT_DISCARD __attribute__((used))

void nvicInit(void)
{
 800ab84:	b480      	push	{r7}
 800ab86:	af00      	add	r7, sp, #0
//  NVIC_PriorityGroupConfig((uint32_t)0x300);
}
 800ab88:	bf00      	nop
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 */
extern void tickFreeRTOS(void);

void DONT_DISCARD SysTick_Handler(void)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	af00      	add	r7, sp, #0
    tickFreeRTOS();
 800ab96:	f7fd fff7 	bl	8008b88 <tickFreeRTOS>
}
 800ab9a:	bf00      	nop
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <NMI_Handler>:

/**
  * @brief  This function handles NMI exception.
  */
void DONT_DISCARD NMI_Handler(void)
{
 800ab9e:	b480      	push	{r7}
 800aba0:	af00      	add	r7, sp, #0
}
 800aba2:	bf00      	nop
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <HardFault_Handler>:

/**
 * @brief  This function handles Hard Fault exception.
 */
void DONT_DISCARD HardFault_Handler(void)
{
 800abac:	b480      	push	{r7}
 800abae:	af00      	add	r7, sp, #0
  //To test this application, you can use this snippet anywhere:
  // //Let's crash the MCU!
  // asm (" MOVS r0, #1 \n"
  // " LDM r0,{r1-r2} \n"
  // " BX LR; \n");
  asm( "TST LR, #4 \n"
 800abb0:	f01e 0f04 	tst.w	lr, #4
 800abb4:	bf0c      	ite	eq
 800abb6:	f3ef 8008 	mrseq	r0, MSP
 800abba:	f3ef 8009 	mrsne	r0, PSP
 800abbe:	f000 b805 	b.w	800abcc <printHardFault>
  "ITE EQ \n"
  "MRSEQ R0, MSP \n"
  "MRSNE R0, PSP \n"
  "B printHardFault");
}
 800abc2:	bf00      	nop
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <printHardFault>:

void DONT_DISCARD printHardFault(uint32_t* hardfaultArgs)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
//    stacked_r3,
//    stacked_r12,
//    stacked_lr,
//    stacked_pc,
//    stacked_psr);
  while (1)
 800abd4:	bf00      	nop
 800abd6:	e7fd      	b.n	800abd4 <printHardFault+0x8>

0800abd8 <BusFault_Handler>:

/**
 * @brief  This function handles Bus Fault exception.
 */
void DONT_DISCARD BusFault_Handler(void)
{
 800abd8:	b480      	push	{r7}
 800abda:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("BusFault");
  while (1)
 800abdc:	bf00      	nop
 800abde:	e7fd      	b.n	800abdc <BusFault_Handler+0x4>

0800abe0 <UsageFault_Handler>:

/**
 * @brief  This function handles Usage Fault exception.
 */
void DONT_DISCARD UsageFault_Handler(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("UsageFault");
  while (1)
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <UsageFault_Handler+0x4>

0800abe8 <DebugMon_Handler>:

/**
 * @brief  This function handles Debug Monitor exception.
 */
void DONT_DISCARD DebugMon_Handler(void)
{
 800abe8:	b480      	push	{r7}
 800abea:	af00      	add	r7, sp, #0
}
 800abec:	bf00      	nop
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
	...

0800abf8 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800abfc:	4802      	ldr	r0, [pc, #8]	@ (800ac08 <DMA1_Stream2_IRQHandler+0x10>)
 800abfe:	f7f6 fcdb 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800ac02:	bf00      	nop
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	2000800c 	.word	0x2000800c

0800ac0c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800ac10:	4802      	ldr	r0, [pc, #8]	@ (800ac1c <DMA1_Stream4_IRQHandler+0x10>)
 800ac12:	f7f6 fcd1 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800ac16:	bf00      	nop
 800ac18:	bd80      	pop	{r7, pc}
 800ac1a:	bf00      	nop
 800ac1c:	20007eec 	.word	0x20007eec

0800ac20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800ac24:	4802      	ldr	r0, [pc, #8]	@ (800ac30 <DMA1_Stream5_IRQHandler+0x10>)
 800ac26:	f7f6 fcc7 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800ac2a:	bf00      	nop
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	20007f4c 	.word	0x20007f4c

0800ac34 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800ac38:	4802      	ldr	r0, [pc, #8]	@ (800ac44 <DMA1_Stream7_IRQHandler+0x10>)
 800ac3a:	f7f6 fcbd 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800ac3e:	bf00      	nop
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	20007fac 	.word	0x20007fac

0800ac48 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800ac4c:	4802      	ldr	r0, [pc, #8]	@ (800ac58 <TIM4_IRQHandler+0x10>)
 800ac4e:	f7f9 fe69 	bl	8004924 <HAL_TIM_IRQHandler>
}
 800ac52:	bf00      	nop
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000806c 	.word	0x2000806c

0800ac5c <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void) {
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800ac60:	4802      	ldr	r0, [pc, #8]	@ (800ac6c <DMA2_Stream2_IRQHandler+0x10>)
 800ac62:	f7f6 fca9 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800ac66:	bf00      	nop
 800ac68:	bd80      	pop	{r7, pc}
 800ac6a:	bf00      	nop
 800ac6c:	200080fc 	.word	0x200080fc

0800ac70 <qmc5883p_Write_Reg>:
#include "system.h"
#include "sleepus.h"

extern I2C_HandleTypeDef hi2c2;

static void qmc5883p_Write_Reg(uint8_t reg, uint8_t value){
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b088      	sub	sp, #32
 800ac74:	af04      	add	r7, sp, #16
 800ac76:	4603      	mov	r3, r0
 800ac78:	460a      	mov	r2, r1
 800ac7a:	71fb      	strb	r3, [r7, #7]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = value;
 800ac80:	79bb      	ldrb	r3, [r7, #6]
 800ac82:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, Q5883P_ADDR, reg, 1, &buf, 1, 100);
 800ac84:	79fb      	ldrb	r3, [r7, #7]
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	2364      	movs	r3, #100	@ 0x64
 800ac8a:	9302      	str	r3, [sp, #8]
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	9301      	str	r3, [sp, #4]
 800ac90:	f107 030f 	add.w	r3, r7, #15
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	2301      	movs	r3, #1
 800ac98:	2158      	movs	r1, #88	@ 0x58
 800ac9a:	4803      	ldr	r0, [pc, #12]	@ (800aca8 <qmc5883p_Write_Reg+0x38>)
 800ac9c:	f7f7 fa0a 	bl	80020b4 <HAL_I2C_Mem_Write>

}
 800aca0:	bf00      	nop
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20007c84 	.word	0x20007c84

0800acac <qmc5883p_Read_Reg>:
static void qmc5883p_Read_Reg(uint8_t reg, uint8_t *buffer, uint8_t len){
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af04      	add	r7, sp, #16
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
 800acb8:	4613      	mov	r3, r2
 800acba:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, Q5883P_ADDR, reg, 1, buffer, len, 100);
 800acbc:	79fb      	ldrb	r3, [r7, #7]
 800acbe:	b29a      	uxth	r2, r3
 800acc0:	79bb      	ldrb	r3, [r7, #6]
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	2164      	movs	r1, #100	@ 0x64
 800acc6:	9102      	str	r1, [sp, #8]
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	2301      	movs	r3, #1
 800acd0:	2158      	movs	r1, #88	@ 0x58
 800acd2:	4803      	ldr	r0, [pc, #12]	@ (800ace0 <qmc5883p_Read_Reg+0x34>)
 800acd4:	f7f7 fae8 	bl	80022a8 <HAL_I2C_Mem_Read>

}
 800acd8:	bf00      	nop
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20007c84 	.word	0x20007c84

0800ace4 <qmc5883p_init>:
uint8_t qmc5883p_init(){
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0

	uint8_t set_osr = 0xCD;		// set OSR to 200Hz
 800acea:	23cd      	movs	r3, #205	@ 0xcd
 800acec:	71fb      	strb	r3, [r7, #7]
	uint8_t set_range = 0x08;	// set full range to 8 Guass
 800acee:	2308      	movs	r3, #8
 800acf0:	71bb      	strb	r3, [r7, #6]
	uint8_t qmc_ID;
	qmc5883p_Read_Reg(Q5883P_ID_ADDR, &qmc_ID, 1);
 800acf2:	1d7b      	adds	r3, r7, #5
 800acf4:	2201      	movs	r2, #1
 800acf6:	4619      	mov	r1, r3
 800acf8:	2000      	movs	r0, #0
 800acfa:	f7ff ffd7 	bl	800acac <qmc5883p_Read_Reg>

	if ( qmc_ID != 0x80 ) return 0;
 800acfe:	797b      	ldrb	r3, [r7, #5]
 800ad00:	2b80      	cmp	r3, #128	@ 0x80
 800ad02:	d001      	beq.n	800ad08 <qmc5883p_init+0x24>
 800ad04:	2300      	movs	r3, #0
 800ad06:	e022      	b.n	800ad4e <qmc5883p_init+0x6a>

	qmc5883p_Write_Reg(0x29, 0x06);
 800ad08:	2106      	movs	r1, #6
 800ad0a:	2029      	movs	r0, #41	@ 0x29
 800ad0c:	f7ff ffb0 	bl	800ac70 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(5000);
 800ad10:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ad14:	f009 f9dd 	bl	80140d2 <sleepus>
	qmc5883p_Write_Reg(Q5883P_CONTR_2, 0x40);
 800ad18:	2140      	movs	r1, #64	@ 0x40
 800ad1a:	200b      	movs	r0, #11
 800ad1c:	f7ff ffa8 	bl	800ac70 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(50000);
 800ad20:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800ad24:	f009 f9d5 	bl	80140d2 <sleepus>

	qmc5883p_Write_Reg(Q5883P_CONTR_2, set_range);
 800ad28:	79bb      	ldrb	r3, [r7, #6]
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	200b      	movs	r0, #11
 800ad2e:	f7ff ff9f 	bl	800ac70 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(5000);
 800ad32:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ad36:	f009 f9cc 	bl	80140d2 <sleepus>

	qmc5883p_Write_Reg(Q5883P_CONTR_1, set_osr);
 800ad3a:	79fb      	ldrb	r3, [r7, #7]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	200a      	movs	r0, #10
 800ad40:	f7ff ff96 	bl	800ac70 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(5000);
 800ad44:	f241 3088 	movw	r0, #5000	@ 0x1388
 800ad48:	f009 f9c3 	bl	80140d2 <sleepus>


	return 1;
 800ad4c:	2301      	movs	r3, #1

}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3708      	adds	r7, #8
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}

0800ad56 <qmc5883p_read>:
uint8_t qmc5883p_read(qmc_typedef *qmc){
 800ad56:	b580      	push	{r7, lr}
 800ad58:	b084      	sub	sp, #16
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	6078      	str	r0, [r7, #4]

	uint8_t qmc_data_status;
	uint8_t buf[6];

	qmc5883p_Read_Reg(Q5883P_DATA_READY, &qmc_data_status, 1);
 800ad5e:	f107 030f 	add.w	r3, r7, #15
 800ad62:	2201      	movs	r2, #1
 800ad64:	4619      	mov	r1, r3
 800ad66:	2009      	movs	r0, #9
 800ad68:	f7ff ffa0 	bl	800acac <qmc5883p_Read_Reg>

	if ( (qmc_data_status & 0x01) != 1 ) {
 800ad6c:	7bfb      	ldrb	r3, [r7, #15]
 800ad6e:	f003 0301 	and.w	r3, r3, #1
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d101      	bne.n	800ad7a <qmc5883p_read+0x24>

		return 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	e022      	b.n	800adc0 <qmc5883p_read+0x6a>
	}

	qmc5883p_Read_Reg(Q5883P_DATA_REG, buf, 6);
 800ad7a:	f107 0308 	add.w	r3, r7, #8
 800ad7e:	2206      	movs	r2, #6
 800ad80:	4619      	mov	r1, r3
 800ad82:	2001      	movs	r0, #1
 800ad84:	f7ff ff92 	bl	800acac <qmc5883p_Read_Reg>

	qmc->qmc_x = buf[1] << 8 | buf[0];
 800ad88:	7a7b      	ldrb	r3, [r7, #9]
 800ad8a:	021b      	lsls	r3, r3, #8
 800ad8c:	b21a      	sxth	r2, r3
 800ad8e:	7a3b      	ldrb	r3, [r7, #8]
 800ad90:	b21b      	sxth	r3, r3
 800ad92:	4313      	orrs	r3, r2
 800ad94:	b21a      	sxth	r2, r3
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	801a      	strh	r2, [r3, #0]
	qmc->qmc_y = buf[3] << 8 | buf[2];
 800ad9a:	7afb      	ldrb	r3, [r7, #11]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	b21a      	sxth	r2, r3
 800ada0:	7abb      	ldrb	r3, [r7, #10]
 800ada2:	b21b      	sxth	r3, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	b21a      	sxth	r2, r3
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	805a      	strh	r2, [r3, #2]
	qmc->qmc_z = buf[5] << 8 | buf[4];
 800adac:	7b7b      	ldrb	r3, [r7, #13]
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	b21a      	sxth	r2, r3
 800adb2:	7b3b      	ldrb	r3, [r7, #12]
 800adb4:	b21b      	sxth	r3, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b21a      	sxth	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	809a      	strh	r2, [r3, #4]

	return 1;
 800adbe:	2301      	movs	r3, #1

}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <spi1_init>:

SPI_HandleTypeDef hspi1;


void spi1_init(void)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800adcc:	4b17      	ldr	r3, [pc, #92]	@ (800ae2c <spi1_init+0x64>)
 800adce:	4a18      	ldr	r2, [pc, #96]	@ (800ae30 <spi1_init+0x68>)
 800add0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800add2:	4b16      	ldr	r3, [pc, #88]	@ (800ae2c <spi1_init+0x64>)
 800add4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800add8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800adda:	4b14      	ldr	r3, [pc, #80]	@ (800ae2c <spi1_init+0x64>)
 800addc:	2200      	movs	r2, #0
 800adde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800ade0:	4b12      	ldr	r3, [pc, #72]	@ (800ae2c <spi1_init+0x64>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ade6:	4b11      	ldr	r3, [pc, #68]	@ (800ae2c <spi1_init+0x64>)
 800ade8:	2200      	movs	r2, #0
 800adea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800adec:	4b0f      	ldr	r3, [pc, #60]	@ (800ae2c <spi1_init+0x64>)
 800adee:	2200      	movs	r2, #0
 800adf0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800adf2:	4b0e      	ldr	r3, [pc, #56]	@ (800ae2c <spi1_init+0x64>)
 800adf4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800adf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800adfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ae2c <spi1_init+0x64>)
 800adfc:	2200      	movs	r2, #0
 800adfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ae00:	4b0a      	ldr	r3, [pc, #40]	@ (800ae2c <spi1_init+0x64>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ae06:	4b09      	ldr	r3, [pc, #36]	@ (800ae2c <spi1_init+0x64>)
 800ae08:	2200      	movs	r2, #0
 800ae0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae0c:	4b07      	ldr	r3, [pc, #28]	@ (800ae2c <spi1_init+0x64>)
 800ae0e:	2200      	movs	r2, #0
 800ae10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800ae12:	4b06      	ldr	r3, [pc, #24]	@ (800ae2c <spi1_init+0x64>)
 800ae14:	220a      	movs	r2, #10
 800ae16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ae18:	4804      	ldr	r0, [pc, #16]	@ (800ae2c <spi1_init+0x64>)
 800ae1a:	f7f8 fcc7 	bl	80037ac <HAL_SPI_Init>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <spi1_init+0x60>
  {
    Error_Handler();
 800ae24:	f7fe f9c4 	bl	80091b0 <Error_Handler>
  }
}
 800ae28:	bf00      	nop
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	20007e4c 	.word	0x20007e4c
 800ae30:	40013000 	.word	0x40013000

0800ae34 <HAL_SPI_MspInit>:
	}


}
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b08e      	sub	sp, #56	@ 0x38
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ae40:	2200      	movs	r2, #0
 800ae42:	601a      	str	r2, [r3, #0]
 800ae44:	605a      	str	r2, [r3, #4]
 800ae46:	609a      	str	r2, [r3, #8]
 800ae48:	60da      	str	r2, [r3, #12]
 800ae4a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4a84      	ldr	r2, [pc, #528]	@ (800b064 <HAL_SPI_MspInit+0x230>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d12b      	bne.n	800aeae <HAL_SPI_MspInit+0x7a>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ae56:	2300      	movs	r3, #0
 800ae58:	623b      	str	r3, [r7, #32]
 800ae5a:	4b83      	ldr	r3, [pc, #524]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800ae5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae5e:	4a82      	ldr	r2, [pc, #520]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800ae60:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800ae64:	6453      	str	r3, [r2, #68]	@ 0x44
 800ae66:	4b80      	ldr	r3, [pc, #512]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800ae68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ae6e:	623b      	str	r3, [r7, #32]
 800ae70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae72:	2300      	movs	r3, #0
 800ae74:	61fb      	str	r3, [r7, #28]
 800ae76:	4b7c      	ldr	r3, [pc, #496]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800ae78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7a:	4a7b      	ldr	r2, [pc, #492]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800ae7c:	f043 0301 	orr.w	r3, r3, #1
 800ae80:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae82:	4b79      	ldr	r3, [pc, #484]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800ae84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	61fb      	str	r3, [r7, #28]
 800ae8c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ae8e:	23e0      	movs	r3, #224	@ 0xe0
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae92:	2302      	movs	r3, #2
 800ae94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae96:	2300      	movs	r3, #0
 800ae98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae9a:	2303      	movs	r3, #3
 800ae9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ae9e:	2305      	movs	r3, #5
 800aea0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aea6:	4619      	mov	r1, r3
 800aea8:	4870      	ldr	r0, [pc, #448]	@ (800b06c <HAL_SPI_MspInit+0x238>)
 800aeaa:	f7f6 fdef 	bl	8001a8c <HAL_GPIO_Init>
  }

  if(spiHandle->Instance==SPI2)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a6f      	ldr	r2, [pc, #444]	@ (800b070 <HAL_SPI_MspInit+0x23c>)
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d13b      	bne.n	800af30 <HAL_SPI_MspInit+0xfc>
  {

    __HAL_RCC_SPI2_CLK_ENABLE();
 800aeb8:	2300      	movs	r3, #0
 800aeba:	61bb      	str	r3, [r7, #24]
 800aebc:	4b6a      	ldr	r3, [pc, #424]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800aebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aec0:	4a69      	ldr	r2, [pc, #420]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800aec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aec6:	6413      	str	r3, [r2, #64]	@ 0x40
 800aec8:	4b67      	ldr	r3, [pc, #412]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aed0:	61bb      	str	r3, [r7, #24]
 800aed2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	4b63      	ldr	r3, [pc, #396]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800aeda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aedc:	4a62      	ldr	r2, [pc, #392]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800aede:	f043 0302 	orr.w	r3, r3, #2
 800aee2:	6313      	str	r3, [r2, #48]	@ 0x30
 800aee4:	4b60      	ldr	r3, [pc, #384]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800aee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aee8:	f003 0302 	and.w	r3, r3, #2
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800aef0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800aef4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aef6:	2302      	movs	r3, #2
 800aef8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aefa:	2300      	movs	r3, #0
 800aefc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aefe:	2303      	movs	r3, #3
 800af00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800af02:	2305      	movs	r3, #5
 800af04:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af0a:	4619      	mov	r1, r3
 800af0c:	4859      	ldr	r0, [pc, #356]	@ (800b074 <HAL_SPI_MspInit+0x240>)
 800af0e:	f7f6 fdbd 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800af12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800af16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af18:	2301      	movs	r3, #1
 800af1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800af20:	2301      	movs	r3, #1
 800af22:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af28:	4619      	mov	r1, r3
 800af2a:	4852      	ldr	r0, [pc, #328]	@ (800b074 <HAL_SPI_MspInit+0x240>)
 800af2c:	f7f6 fdae 	bl	8001a8c <HAL_GPIO_Init>

  }
  if(spiHandle->Instance==SPI3)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a50      	ldr	r2, [pc, #320]	@ (800b078 <HAL_SPI_MspInit+0x244>)
 800af36:	4293      	cmp	r3, r2
 800af38:	f040 8090 	bne.w	800b05c <HAL_SPI_MspInit+0x228>
  {
    __HAL_RCC_SPI3_CLK_ENABLE();
 800af3c:	2300      	movs	r3, #0
 800af3e:	613b      	str	r3, [r7, #16]
 800af40:	4b49      	ldr	r3, [pc, #292]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800af42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af44:	4a48      	ldr	r2, [pc, #288]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800af46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af4a:	6413      	str	r3, [r2, #64]	@ 0x40
 800af4c:	4b46      	ldr	r3, [pc, #280]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800af4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800af54:	613b      	str	r3, [r7, #16]
 800af56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af58:	2300      	movs	r3, #0
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	4b42      	ldr	r3, [pc, #264]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800af5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af60:	4a41      	ldr	r2, [pc, #260]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800af62:	f043 0302 	orr.w	r3, r3, #2
 800af66:	6313      	str	r3, [r2, #48]	@ 0x30
 800af68:	4b3f      	ldr	r3, [pc, #252]	@ (800b068 <HAL_SPI_MspInit+0x234>)
 800af6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af6c:	f003 0302 	and.w	r3, r3, #2
 800af70:	60fb      	str	r3, [r7, #12]
 800af72:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800af74:	2338      	movs	r3, #56	@ 0x38
 800af76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af78:	2302      	movs	r3, #2
 800af7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af7c:	2300      	movs	r3, #0
 800af7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af80:	2303      	movs	r3, #3
 800af82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800af84:	2306      	movs	r3, #6
 800af86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800af8c:	4619      	mov	r1, r3
 800af8e:	4839      	ldr	r0, [pc, #228]	@ (800b074 <HAL_SPI_MspInit+0x240>)
 800af90:	f7f6 fd7c 	bl	8001a8c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800af94:	4b39      	ldr	r3, [pc, #228]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800af96:	4a3a      	ldr	r2, [pc, #232]	@ (800b080 <HAL_SPI_MspInit+0x24c>)
 800af98:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800af9a:	4b38      	ldr	r3, [pc, #224]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800afa0:	4b36      	ldr	r3, [pc, #216]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afa2:	2200      	movs	r2, #0
 800afa4:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800afa6:	4b35      	ldr	r3, [pc, #212]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afa8:	2200      	movs	r2, #0
 800afaa:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800afac:	4b33      	ldr	r3, [pc, #204]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800afb2:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800afb4:	4b31      	ldr	r3, [pc, #196]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afb6:	2200      	movs	r2, #0
 800afb8:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800afba:	4b30      	ldr	r3, [pc, #192]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afbc:	2200      	movs	r2, #0
 800afbe:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800afc0:	4b2e      	ldr	r3, [pc, #184]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800afc6:	4b2d      	ldr	r3, [pc, #180]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800afcc:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800afce:	4b2b      	ldr	r3, [pc, #172]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afd0:	2200      	movs	r2, #0
 800afd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800afd4:	4829      	ldr	r0, [pc, #164]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afd6:	f7f6 f9c7 	bl	8001368 <HAL_DMA_Init>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d001      	beq.n	800afe4 <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 800afe0:	f7fe f8e6 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a25      	ldr	r2, [pc, #148]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afe8:	64da      	str	r2, [r3, #76]	@ 0x4c
 800afea:	4a24      	ldr	r2, [pc, #144]	@ (800b07c <HAL_SPI_MspInit+0x248>)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6393      	str	r3, [r2, #56]	@ 0x38

    hdma_spi3_tx.Instance = DMA1_Stream5;
 800aff0:	4b24      	ldr	r3, [pc, #144]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800aff2:	4a25      	ldr	r2, [pc, #148]	@ (800b088 <HAL_SPI_MspInit+0x254>)
 800aff4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800aff6:	4b23      	ldr	r3, [pc, #140]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800aff8:	2200      	movs	r2, #0
 800affa:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800affc:	4b21      	ldr	r3, [pc, #132]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800affe:	2240      	movs	r2, #64	@ 0x40
 800b000:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b002:	4b20      	ldr	r3, [pc, #128]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b004:	2200      	movs	r2, #0
 800b006:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b008:	4b1e      	ldr	r3, [pc, #120]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b00a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b00e:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b010:	4b1c      	ldr	r3, [pc, #112]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b012:	2200      	movs	r2, #0
 800b014:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b016:	4b1b      	ldr	r3, [pc, #108]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b018:	2200      	movs	r2, #0
 800b01a:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800b01c:	4b19      	ldr	r3, [pc, #100]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b01e:	2200      	movs	r2, #0
 800b020:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800b022:	4b18      	ldr	r3, [pc, #96]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b024:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b028:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b02a:	4b16      	ldr	r3, [pc, #88]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b02c:	2200      	movs	r2, #0
 800b02e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800b030:	4814      	ldr	r0, [pc, #80]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b032:	f7f6 f999 	bl	8001368 <HAL_DMA_Init>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <HAL_SPI_MspInit+0x20c>
    {
      Error_Handler();
 800b03c:	f7fe f8b8 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a10      	ldr	r2, [pc, #64]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b044:	649a      	str	r2, [r3, #72]	@ 0x48
 800b046:	4a0f      	ldr	r2, [pc, #60]	@ (800b084 <HAL_SPI_MspInit+0x250>)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6393      	str	r3, [r2, #56]	@ 0x38

    HAL_NVIC_SetPriority(SPI3_IRQn, 7, 0);
 800b04c:	2200      	movs	r2, #0
 800b04e:	2107      	movs	r1, #7
 800b050:	2033      	movs	r0, #51	@ 0x33
 800b052:	f7f6 f953 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800b056:	2033      	movs	r0, #51	@ 0x33
 800b058:	f7f6 f96c 	bl	8001334 <HAL_NVIC_EnableIRQ>

  }
}
 800b05c:	bf00      	nop
 800b05e:	3738      	adds	r7, #56	@ 0x38
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	40013000 	.word	0x40013000
 800b068:	40023800 	.word	0x40023800
 800b06c:	40020000 	.word	0x40020000
 800b070:	40003800 	.word	0x40003800
 800b074:	40020400 	.word	0x40020400
 800b078:	40003c00 	.word	0x40003c00
 800b07c:	20007d8c 	.word	0x20007d8c
 800b080:	40026010 	.word	0x40026010
 800b084:	20007dec 	.word	0x20007dec
 800b088:	40026088 	.word	0x40026088

0800b08c <TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;

TIM_HandleTypeDef htim4;

void TIM3_Init(void)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b08a      	sub	sp, #40	@ 0x28
 800b090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b092:	f107 0320 	add.w	r3, r7, #32
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]
 800b09a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b09c:	1d3b      	adds	r3, r7, #4
 800b09e:	2200      	movs	r2, #0
 800b0a0:	601a      	str	r2, [r3, #0]
 800b0a2:	605a      	str	r2, [r3, #4]
 800b0a4:	609a      	str	r2, [r3, #8]
 800b0a6:	60da      	str	r2, [r3, #12]
 800b0a8:	611a      	str	r2, [r3, #16]
 800b0aa:	615a      	str	r2, [r3, #20]
 800b0ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b0ae:	4b32      	ldr	r3, [pc, #200]	@ (800b178 <TIM3_Init+0xec>)
 800b0b0:	4a32      	ldr	r2, [pc, #200]	@ (800b17c <TIM3_Init+0xf0>)
 800b0b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b0b4:	4b30      	ldr	r3, [pc, #192]	@ (800b178 <TIM3_Init+0xec>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0ba:	4b2f      	ldr	r3, [pc, #188]	@ (800b178 <TIM3_Init+0xec>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800b0c0:	4b2d      	ldr	r3, [pc, #180]	@ (800b178 <TIM3_Init+0xec>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0c6:	4b2c      	ldr	r3, [pc, #176]	@ (800b178 <TIM3_Init+0xec>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0cc:	4b2a      	ldr	r3, [pc, #168]	@ (800b178 <TIM3_Init+0xec>)
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b0d2:	4829      	ldr	r0, [pc, #164]	@ (800b178 <TIM3_Init+0xec>)
 800b0d4:	f7f9 fb0e 	bl	80046f4 <HAL_TIM_PWM_Init>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <TIM3_Init+0x56>
  {
    Error_Handler();
 800b0de:	f7fe f867 	bl	80091b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b0ea:	f107 0320 	add.w	r3, r7, #32
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4821      	ldr	r0, [pc, #132]	@ (800b178 <TIM3_Init+0xec>)
 800b0f2:	f7fa f9d5 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d001      	beq.n	800b100 <TIM3_Init+0x74>
  {
    Error_Handler();
 800b0fc:	f7fe f858 	bl	80091b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b100:	2360      	movs	r3, #96	@ 0x60
 800b102:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b108:	2300      	movs	r3, #0
 800b10a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b10c:	2300      	movs	r3, #0
 800b10e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b110:	1d3b      	adds	r3, r7, #4
 800b112:	2200      	movs	r2, #0
 800b114:	4619      	mov	r1, r3
 800b116:	4818      	ldr	r0, [pc, #96]	@ (800b178 <TIM3_Init+0xec>)
 800b118:	f7f9 fcf4 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d001      	beq.n	800b126 <TIM3_Init+0x9a>
  {
    Error_Handler();
 800b122:	f7fe f845 	bl	80091b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b126:	1d3b      	adds	r3, r7, #4
 800b128:	2204      	movs	r2, #4
 800b12a:	4619      	mov	r1, r3
 800b12c:	4812      	ldr	r0, [pc, #72]	@ (800b178 <TIM3_Init+0xec>)
 800b12e:	f7f9 fce9 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <TIM3_Init+0xb0>
  {
    Error_Handler();
 800b138:	f7fe f83a 	bl	80091b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b13c:	1d3b      	adds	r3, r7, #4
 800b13e:	2208      	movs	r2, #8
 800b140:	4619      	mov	r1, r3
 800b142:	480d      	ldr	r0, [pc, #52]	@ (800b178 <TIM3_Init+0xec>)
 800b144:	f7f9 fcde 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <TIM3_Init+0xc6>
  {
    Error_Handler();
 800b14e:	f7fe f82f 	bl	80091b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800b152:	1d3b      	adds	r3, r7, #4
 800b154:	220c      	movs	r2, #12
 800b156:	4619      	mov	r1, r3
 800b158:	4807      	ldr	r0, [pc, #28]	@ (800b178 <TIM3_Init+0xec>)
 800b15a:	f7f9 fcd3 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d001      	beq.n	800b168 <TIM3_Init+0xdc>
  {
    Error_Handler();
 800b164:	f7fe f824 	bl	80091b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b168:	4803      	ldr	r0, [pc, #12]	@ (800b178 <TIM3_Init+0xec>)
 800b16a:	f000 f92d 	bl	800b3c8 <HAL_TIM_MspPostInit>

}
 800b16e:	bf00      	nop
 800b170:	3728      	adds	r7, #40	@ 0x28
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}
 800b176:	bf00      	nop
 800b178:	20007ea4 	.word	0x20007ea4
 800b17c:	40000400 	.word	0x40000400

0800b180 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a84      	ldr	r2, [pc, #528]	@ (800b3a0 <HAL_TIM_PWM_MspInit+0x220>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	f040 8102 	bne.w	800b398 <HAL_TIM_PWM_MspInit+0x218>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b194:	2300      	movs	r3, #0
 800b196:	60fb      	str	r3, [r7, #12]
 800b198:	4b82      	ldr	r3, [pc, #520]	@ (800b3a4 <HAL_TIM_PWM_MspInit+0x224>)
 800b19a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b19c:	4a81      	ldr	r2, [pc, #516]	@ (800b3a4 <HAL_TIM_PWM_MspInit+0x224>)
 800b19e:	f043 0302 	orr.w	r3, r3, #2
 800b1a2:	6413      	str	r3, [r2, #64]	@ 0x40
 800b1a4:	4b7f      	ldr	r3, [pc, #508]	@ (800b3a4 <HAL_TIM_PWM_MspInit+0x224>)
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1a8:	f003 0302 	and.w	r3, r3, #2
 800b1ac:	60fb      	str	r3, [r7, #12]
 800b1ae:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800b1b0:	4b7d      	ldr	r3, [pc, #500]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1b2:	4a7e      	ldr	r2, [pc, #504]	@ (800b3ac <HAL_TIM_PWM_MspInit+0x22c>)
 800b1b4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800b1b6:	4b7c      	ldr	r3, [pc, #496]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1b8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800b1bc:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b1be:	4b7a      	ldr	r3, [pc, #488]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1c0:	2240      	movs	r2, #64	@ 0x40
 800b1c2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1c4:	4b78      	ldr	r3, [pc, #480]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800b1ca:	4b77      	ldr	r3, [pc, #476]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b1d0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b1d2:	4b75      	ldr	r3, [pc, #468]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b1d8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b1da:	4b73      	ldr	r3, [pc, #460]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b1e0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800b1e2:	4b71      	ldr	r3, [pc, #452]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800b1e8:	4b6f      	ldr	r3, [pc, #444]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b1ee:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b1f0:	4b6d      	ldr	r3, [pc, #436]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1f2:	2204      	movs	r2, #4
 800b1f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b1f6:	4b6c      	ldr	r3, [pc, #432]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch1_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800b1fc:	4b6a      	ldr	r3, [pc, #424]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b1fe:	2200      	movs	r2, #0
 800b200:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch1_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b202:	4b69      	ldr	r3, [pc, #420]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b204:	2200      	movs	r2, #0
 800b206:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800b208:	4867      	ldr	r0, [pc, #412]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b20a:	f7f6 f8ad 	bl	8001368 <HAL_DMA_Init>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d001      	beq.n	800b218 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 800b214:	f7fd ffcc 	bl	80091b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	4a63      	ldr	r2, [pc, #396]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b21c:	625a      	str	r2, [r3, #36]	@ 0x24
 800b21e:	4a62      	ldr	r2, [pc, #392]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	4a60      	ldr	r2, [pc, #384]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b228:	639a      	str	r2, [r3, #56]	@ 0x38
 800b22a:	4a5f      	ldr	r2, [pc, #380]	@ (800b3a8 <HAL_TIM_PWM_MspInit+0x228>)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800b230:	4b5f      	ldr	r3, [pc, #380]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b232:	4a60      	ldr	r2, [pc, #384]	@ (800b3b4 <HAL_TIM_PWM_MspInit+0x234>)
 800b234:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800b236:	4b5e      	ldr	r3, [pc, #376]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b238:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800b23c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b23e:	4b5c      	ldr	r3, [pc, #368]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b240:	2240      	movs	r2, #64	@ 0x40
 800b242:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800b244:	4b5a      	ldr	r3, [pc, #360]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b246:	2200      	movs	r2, #0
 800b248:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800b24a:	4b59      	ldr	r3, [pc, #356]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b24c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b250:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b252:	4b57      	ldr	r3, [pc, #348]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b254:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b258:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b25a:	4b55      	ldr	r3, [pc, #340]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b25c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b260:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800b262:	4b53      	ldr	r3, [pc, #332]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b264:	2200      	movs	r2, #0
 800b266:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800b268:	4b51      	ldr	r3, [pc, #324]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b26a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b26e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b270:	4b4f      	ldr	r3, [pc, #316]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b272:	2204      	movs	r2, #4
 800b274:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b276:	4b4e      	ldr	r3, [pc, #312]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b278:	2200      	movs	r2, #0
 800b27a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800b27c:	4b4c      	ldr	r3, [pc, #304]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b27e:	2200      	movs	r2, #0
 800b280:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b282:	4b4b      	ldr	r3, [pc, #300]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b284:	2200      	movs	r2, #0
 800b286:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800b288:	4849      	ldr	r0, [pc, #292]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b28a:	f7f6 f86d 	bl	8001368 <HAL_DMA_Init>
 800b28e:	4603      	mov	r3, r0
 800b290:	2b00      	cmp	r3, #0
 800b292:	d001      	beq.n	800b298 <HAL_TIM_PWM_MspInit+0x118>
    {
      Error_Handler();
 800b294:	f7fd ff8c 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a45      	ldr	r2, [pc, #276]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b29c:	629a      	str	r2, [r3, #40]	@ 0x28
 800b29e:	4a44      	ldr	r2, [pc, #272]	@ (800b3b0 <HAL_TIM_PWM_MspInit+0x230>)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800b2a4:	4b44      	ldr	r3, [pc, #272]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2a6:	4a45      	ldr	r2, [pc, #276]	@ (800b3bc <HAL_TIM_PWM_MspInit+0x23c>)
 800b2a8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800b2aa:	4b43      	ldr	r3, [pc, #268]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2ac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800b2b0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b2b2:	4b41      	ldr	r3, [pc, #260]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2b4:	2240      	movs	r2, #64	@ 0x40
 800b2b6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800b2b8:	4b3f      	ldr	r3, [pc, #252]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800b2be:	4b3e      	ldr	r3, [pc, #248]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b2c4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b2c6:	4b3c      	ldr	r3, [pc, #240]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b2cc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b2ce:	4b3a      	ldr	r3, [pc, #232]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b2d4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800b2d6:	4b38      	ldr	r3, [pc, #224]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2d8:	2200      	movs	r2, #0
 800b2da:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800b2dc:	4b36      	ldr	r3, [pc, #216]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b2e2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b2e4:	4b34      	ldr	r3, [pc, #208]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2e6:	2204      	movs	r2, #4
 800b2e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b2ea:	4b33      	ldr	r3, [pc, #204]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800b2f0:	4b31      	ldr	r3, [pc, #196]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b2f6:	4b30      	ldr	r3, [pc, #192]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800b2fc:	482e      	ldr	r0, [pc, #184]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b2fe:	f7f6 f833 	bl	8001368 <HAL_DMA_Init>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <HAL_TIM_PWM_MspInit+0x18c>
    {
      Error_Handler();
 800b308:	f7fd ff52 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	4a2a      	ldr	r2, [pc, #168]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b310:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b312:	4a29      	ldr	r2, [pc, #164]	@ (800b3b8 <HAL_TIM_PWM_MspInit+0x238>)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800b318:	4b29      	ldr	r3, [pc, #164]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b31a:	4a2a      	ldr	r2, [pc, #168]	@ (800b3c4 <HAL_TIM_PWM_MspInit+0x244>)
 800b31c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800b31e:	4b28      	ldr	r3, [pc, #160]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b320:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800b324:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b326:	4b26      	ldr	r3, [pc, #152]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b328:	2240      	movs	r2, #64	@ 0x40
 800b32a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800b32c:	4b24      	ldr	r3, [pc, #144]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b32e:	2200      	movs	r2, #0
 800b330:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800b332:	4b23      	ldr	r3, [pc, #140]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b334:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b338:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800b33a:	4b21      	ldr	r3, [pc, #132]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b33c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b340:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800b342:	4b1f      	ldr	r3, [pc, #124]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b344:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800b348:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800b34a:	4b1d      	ldr	r3, [pc, #116]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800b350:	4b1b      	ldr	r3, [pc, #108]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b352:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800b356:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800b358:	4b19      	ldr	r3, [pc, #100]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b35a:	2204      	movs	r2, #4
 800b35c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800b35e:	4b18      	ldr	r3, [pc, #96]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b360:	2200      	movs	r2, #0
 800b362:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800b364:	4b16      	ldr	r3, [pc, #88]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b366:	2200      	movs	r2, #0
 800b368:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800b36a:	4b15      	ldr	r3, [pc, #84]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800b370:	4813      	ldr	r0, [pc, #76]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b372:	f7f5 fff9 	bl	8001368 <HAL_DMA_Init>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <HAL_TIM_PWM_MspInit+0x200>
    {
      Error_Handler();
 800b37c:	f7fd ff18 	bl	80091b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4a0f      	ldr	r2, [pc, #60]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b384:	631a      	str	r2, [r3, #48]	@ 0x30
 800b386:	4a0e      	ldr	r2, [pc, #56]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b390:	621a      	str	r2, [r3, #32]
 800b392:	4a0b      	ldr	r2, [pc, #44]	@ (800b3c0 <HAL_TIM_PWM_MspInit+0x240>)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b398:	bf00      	nop
 800b39a:	3710      	adds	r7, #16
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	40000400 	.word	0x40000400
 800b3a4:	40023800 	.word	0x40023800
 800b3a8:	20007eec 	.word	0x20007eec
 800b3ac:	40026070 	.word	0x40026070
 800b3b0:	20007f4c 	.word	0x20007f4c
 800b3b4:	40026088 	.word	0x40026088
 800b3b8:	20007fac 	.word	0x20007fac
 800b3bc:	400260b8 	.word	0x400260b8
 800b3c0:	2000800c 	.word	0x2000800c
 800b3c4:	40026040 	.word	0x40026040

0800b3c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b088      	sub	sp, #32
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b3d0:	f107 030c 	add.w	r3, r7, #12
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
 800b3d8:	605a      	str	r2, [r3, #4]
 800b3da:	609a      	str	r2, [r3, #8]
 800b3dc:	60da      	str	r2, [r3, #12]
 800b3de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a12      	ldr	r2, [pc, #72]	@ (800b430 <HAL_TIM_MspPostInit+0x68>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d11e      	bne.n	800b428 <HAL_TIM_MspPostInit+0x60>
  {
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60bb      	str	r3, [r7, #8]
 800b3ee:	4b11      	ldr	r3, [pc, #68]	@ (800b434 <HAL_TIM_MspPostInit+0x6c>)
 800b3f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f2:	4a10      	ldr	r2, [pc, #64]	@ (800b434 <HAL_TIM_MspPostInit+0x6c>)
 800b3f4:	f043 0304 	orr.w	r3, r3, #4
 800b3f8:	6313      	str	r3, [r2, #48]	@ 0x30
 800b3fa:	4b0e      	ldr	r3, [pc, #56]	@ (800b434 <HAL_TIM_MspPostInit+0x6c>)
 800b3fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3fe:	f003 0304 	and.w	r3, r3, #4
 800b402:	60bb      	str	r3, [r7, #8]
 800b404:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800b406:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800b40a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b40c:	2302      	movs	r3, #2
 800b40e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b410:	2300      	movs	r3, #0
 800b412:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b414:	2300      	movs	r3, #0
 800b416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b418:	2302      	movs	r3, #2
 800b41a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b41c:	f107 030c 	add.w	r3, r7, #12
 800b420:	4619      	mov	r1, r3
 800b422:	4805      	ldr	r0, [pc, #20]	@ (800b438 <HAL_TIM_MspPostInit+0x70>)
 800b424:	f7f6 fb32 	bl	8001a8c <HAL_GPIO_Init>
  }

}
 800b428:	bf00      	nop
 800b42a:	3720      	adds	r7, #32
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	40000400 	.word	0x40000400
 800b434:	40023800 	.word	0x40023800
 800b438:	40020800 	.word	0x40020800

0800b43c <TIM3_DMA_Init>:
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_UPDATE]);
  }
}

void TIM3_DMA_Init(void)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b442:	2300      	movs	r3, #0
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	4b18      	ldr	r3, [pc, #96]	@ (800b4a8 <TIM3_DMA_Init+0x6c>)
 800b448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b44a:	4a17      	ldr	r2, [pc, #92]	@ (800b4a8 <TIM3_DMA_Init+0x6c>)
 800b44c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b450:	6313      	str	r3, [r2, #48]	@ 0x30
 800b452:	4b15      	ldr	r3, [pc, #84]	@ (800b4a8 <TIM3_DMA_Init+0x6c>)
 800b454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b456:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b45a:	607b      	str	r3, [r7, #4]
 800b45c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800b45e:	2200      	movs	r2, #0
 800b460:	2100      	movs	r1, #0
 800b462:	200d      	movs	r0, #13
 800b464:	f7f5 ff4a 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800b468:	200d      	movs	r0, #13
 800b46a:	f7f5 ff63 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800b46e:	2200      	movs	r2, #0
 800b470:	2100      	movs	r1, #0
 800b472:	200f      	movs	r0, #15
 800b474:	f7f5 ff42 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800b478:	200f      	movs	r0, #15
 800b47a:	f7f5 ff5b 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800b47e:	2200      	movs	r2, #0
 800b480:	2100      	movs	r1, #0
 800b482:	2010      	movs	r0, #16
 800b484:	f7f5 ff3a 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800b488:	2010      	movs	r0, #16
 800b48a:	f7f5 ff53 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800b48e:	2200      	movs	r2, #0
 800b490:	2100      	movs	r1, #0
 800b492:	202f      	movs	r0, #47	@ 0x2f
 800b494:	f7f5 ff32 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800b498:	202f      	movs	r0, #47	@ 0x2f
 800b49a:	f7f5 ff4b 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800b49e:	bf00      	nop
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	40023800 	.word	0x40023800

0800b4ac <TIM4_Init>:

void TIM4_Init(void)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b4b2:	f107 0308 	add.w	r3, r7, #8
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	605a      	str	r2, [r3, #4]
 800b4bc:	609a      	str	r2, [r3, #8]
 800b4be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b4c0:	463b      	mov	r3, r7
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800b4c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b540 <TIM4_Init+0x94>)
 800b4ca:	4a1e      	ldr	r2, [pc, #120]	@ (800b544 <TIM4_Init+0x98>)
 800b4cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800b4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800b540 <TIM4_Init+0x94>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b4d4:	4b1a      	ldr	r3, [pc, #104]	@ (800b540 <TIM4_Init+0x94>)
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800b4da:	4b19      	ldr	r3, [pc, #100]	@ (800b540 <TIM4_Init+0x94>)
 800b4dc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b4e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b4e2:	4b17      	ldr	r3, [pc, #92]	@ (800b540 <TIM4_Init+0x94>)
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b4e8:	4b15      	ldr	r3, [pc, #84]	@ (800b540 <TIM4_Init+0x94>)
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800b4ee:	4814      	ldr	r0, [pc, #80]	@ (800b540 <TIM4_Init+0x94>)
 800b4f0:	f7f9 f840 	bl	8004574 <HAL_TIM_Base_Init>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <TIM4_Init+0x52>
  {
    Error_Handler();
 800b4fa:	f7fd fe59 	bl	80091b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b4fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800b504:	f107 0308 	add.w	r3, r7, #8
 800b508:	4619      	mov	r1, r3
 800b50a:	480d      	ldr	r0, [pc, #52]	@ (800b540 <TIM4_Init+0x94>)
 800b50c:	f7f9 fbbc 	bl	8004c88 <HAL_TIM_ConfigClockSource>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <TIM4_Init+0x6e>
  {
    Error_Handler();
 800b516:	f7fd fe4b 	bl	80091b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b51a:	2300      	movs	r3, #0
 800b51c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b51e:	2300      	movs	r3, #0
 800b520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800b522:	463b      	mov	r3, r7
 800b524:	4619      	mov	r1, r3
 800b526:	4806      	ldr	r0, [pc, #24]	@ (800b540 <TIM4_Init+0x94>)
 800b528:	f7f9 ffba 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 800b52c:	4603      	mov	r3, r0
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d001      	beq.n	800b536 <TIM4_Init+0x8a>
  {
    Error_Handler();
 800b532:	f7fd fe3d 	bl	80091b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800b536:	bf00      	nop
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	2000806c 	.word	0x2000806c
 800b544:	40000800 	.word	0x40000800

0800b548 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a0e      	ldr	r2, [pc, #56]	@ (800b590 <HAL_TIM_Base_MspInit+0x48>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d115      	bne.n	800b586 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800b55a:	2300      	movs	r3, #0
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	4b0d      	ldr	r3, [pc, #52]	@ (800b594 <HAL_TIM_Base_MspInit+0x4c>)
 800b560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b562:	4a0c      	ldr	r2, [pc, #48]	@ (800b594 <HAL_TIM_Base_MspInit+0x4c>)
 800b564:	f043 0304 	orr.w	r3, r3, #4
 800b568:	6413      	str	r3, [r2, #64]	@ 0x40
 800b56a:	4b0a      	ldr	r3, [pc, #40]	@ (800b594 <HAL_TIM_Base_MspInit+0x4c>)
 800b56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	60fb      	str	r3, [r7, #12]
 800b574:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800b576:	2200      	movs	r2, #0
 800b578:	2100      	movs	r1, #0
 800b57a:	201e      	movs	r0, #30
 800b57c:	f7f5 febe 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800b580:	201e      	movs	r0, #30
 800b582:	f7f5 fed7 	bl	8001334 <HAL_NVIC_EnableIRQ>
  }
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	40000800 	.word	0x40000800
 800b594:	40023800 	.word	0x40023800

0800b598 <MX_USART1_UART_Init>:
  }

}

void MX_USART1_UART_Init(void)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800b59c:	4b11      	ldr	r3, [pc, #68]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b59e:	4a12      	ldr	r2, [pc, #72]	@ (800b5e8 <MX_USART1_UART_Init+0x50>)
 800b5a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b5a2:	4b10      	ldr	r3, [pc, #64]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800b5a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b5aa:	4b0e      	ldr	r3, [pc, #56]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b5b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b5bc:	4b09      	ldr	r3, [pc, #36]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5be:	220c      	movs	r2, #12
 800b5c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b5c2:	4b08      	ldr	r3, [pc, #32]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b5c8:	4b06      	ldr	r3, [pc, #24]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b5ce:	4805      	ldr	r0, [pc, #20]	@ (800b5e4 <MX_USART1_UART_Init+0x4c>)
 800b5d0:	f7f9 fff6 	bl	80055c0 <HAL_UART_Init>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800b5da:	f7fd fde9 	bl	80091b0 <Error_Handler>
  }

}
 800b5de:	bf00      	nop
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	200080b4 	.word	0x200080b4
 800b5e8:	40011000 	.word	0x40011000

0800b5ec <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b090      	sub	sp, #64	@ 0x40
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b5f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
 800b5fc:	605a      	str	r2, [r3, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
 800b600:	60da      	str	r2, [r3, #12]
 800b602:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a79      	ldr	r2, [pc, #484]	@ (800b7f0 <HAL_UART_MspInit+0x204>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d12c      	bne.n	800b668 <HAL_UART_MspInit+0x7c>
  {

    __HAL_RCC_UART4_CLK_ENABLE();
 800b60e:	2300      	movs	r3, #0
 800b610:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b612:	4b78      	ldr	r3, [pc, #480]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b616:	4a77      	ldr	r2, [pc, #476]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b618:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b61c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b61e:	4b75      	ldr	r3, [pc, #468]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b622:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b626:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b628:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b62a:	2300      	movs	r3, #0
 800b62c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b62e:	4b71      	ldr	r3, [pc, #452]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b632:	4a70      	ldr	r2, [pc, #448]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b634:	f043 0301 	orr.w	r3, r3, #1
 800b638:	6313      	str	r3, [r2, #48]	@ 0x30
 800b63a:	4b6e      	ldr	r3, [pc, #440]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b63c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	627b      	str	r3, [r7, #36]	@ 0x24
 800b644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b646:	2303      	movs	r3, #3
 800b648:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b64a:	2302      	movs	r3, #2
 800b64c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b652:	2303      	movs	r3, #3
 800b654:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800b656:	2308      	movs	r3, #8
 800b658:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b65a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b65e:	4619      	mov	r1, r3
 800b660:	4865      	ldr	r0, [pc, #404]	@ (800b7f8 <HAL_UART_MspInit+0x20c>)
 800b662:	f7f6 fa13 	bl	8001a8c <HAL_GPIO_Init>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);

  }
}
 800b666:	e136      	b.n	800b8d6 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a63      	ldr	r2, [pc, #396]	@ (800b7fc <HAL_UART_MspInit+0x210>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d15c      	bne.n	800b72c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b672:	2300      	movs	r3, #0
 800b674:	623b      	str	r3, [r7, #32]
 800b676:	4b5f      	ldr	r3, [pc, #380]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b67a:	4a5e      	ldr	r2, [pc, #376]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b67c:	f043 0310 	orr.w	r3, r3, #16
 800b680:	6453      	str	r3, [r2, #68]	@ 0x44
 800b682:	4b5c      	ldr	r3, [pc, #368]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b686:	f003 0310 	and.w	r3, r3, #16
 800b68a:	623b      	str	r3, [r7, #32]
 800b68c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b68e:	2300      	movs	r3, #0
 800b690:	61fb      	str	r3, [r7, #28]
 800b692:	4b58      	ldr	r3, [pc, #352]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b696:	4a57      	ldr	r2, [pc, #348]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b698:	f043 0301 	orr.w	r3, r3, #1
 800b69c:	6313      	str	r3, [r2, #48]	@ 0x30
 800b69e:	4b55      	ldr	r3, [pc, #340]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b6a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	61fb      	str	r3, [r7, #28]
 800b6a8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b6aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800b6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b6bc:	2307      	movs	r3, #7
 800b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b6c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	484c      	ldr	r0, [pc, #304]	@ (800b7f8 <HAL_UART_MspInit+0x20c>)
 800b6c8:	f7f6 f9e0 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800b6cc:	4b4c      	ldr	r3, [pc, #304]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6ce:	4a4d      	ldr	r2, [pc, #308]	@ (800b804 <HAL_UART_MspInit+0x218>)
 800b6d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800b6d2:	4b4b      	ldr	r3, [pc, #300]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b6d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b6da:	4b49      	ldr	r3, [pc, #292]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b6e0:	4b47      	ldr	r3, [pc, #284]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b6e6:	4b46      	ldr	r3, [pc, #280]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b6ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b6ee:	4b44      	ldr	r3, [pc, #272]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b6f4:	4b42      	ldr	r3, [pc, #264]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800b6fa:	4b41      	ldr	r3, [pc, #260]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b6fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b700:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b702:	4b3f      	ldr	r3, [pc, #252]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b704:	2200      	movs	r2, #0
 800b706:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b708:	4b3d      	ldr	r3, [pc, #244]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b70a:	2200      	movs	r2, #0
 800b70c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b70e:	483c      	ldr	r0, [pc, #240]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b710:	f7f5 fe2a 	bl	8001368 <HAL_DMA_Init>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800b71a:	f7fd fd49 	bl	80091b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a37      	ldr	r2, [pc, #220]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b722:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b724:	4a36      	ldr	r2, [pc, #216]	@ (800b800 <HAL_UART_MspInit+0x214>)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b72a:	e0d4      	b.n	800b8d6 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART2)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4a35      	ldr	r2, [pc, #212]	@ (800b808 <HAL_UART_MspInit+0x21c>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d16e      	bne.n	800b814 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b736:	2300      	movs	r3, #0
 800b738:	61bb      	str	r3, [r7, #24]
 800b73a:	4b2e      	ldr	r3, [pc, #184]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b73c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b73e:	4a2d      	ldr	r2, [pc, #180]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b740:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b744:	6413      	str	r3, [r2, #64]	@ 0x40
 800b746:	4b2b      	ldr	r3, [pc, #172]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b74a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b74e:	61bb      	str	r3, [r7, #24]
 800b750:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b752:	2300      	movs	r3, #0
 800b754:	617b      	str	r3, [r7, #20]
 800b756:	4b27      	ldr	r3, [pc, #156]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b75a:	4a26      	ldr	r2, [pc, #152]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b75c:	f043 0301 	orr.w	r3, r3, #1
 800b760:	6313      	str	r3, [r2, #48]	@ 0x30
 800b762:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <HAL_UART_MspInit+0x208>)
 800b764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800b76e:	230c      	movs	r3, #12
 800b770:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b772:	2302      	movs	r3, #2
 800b774:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b776:	2300      	movs	r3, #0
 800b778:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b77a:	2303      	movs	r3, #3
 800b77c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b77e:	2307      	movs	r3, #7
 800b780:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b782:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b786:	4619      	mov	r1, r3
 800b788:	481b      	ldr	r0, [pc, #108]	@ (800b7f8 <HAL_UART_MspInit+0x20c>)
 800b78a:	f7f6 f97f 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800b78e:	4b1f      	ldr	r3, [pc, #124]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b790:	4a1f      	ldr	r2, [pc, #124]	@ (800b810 <HAL_UART_MspInit+0x224>)
 800b792:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800b794:	4b1d      	ldr	r3, [pc, #116]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b796:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b79a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b79c:	4b1b      	ldr	r3, [pc, #108]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b7a2:	4b1a      	ldr	r3, [pc, #104]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b7a8:	4b18      	ldr	r3, [pc, #96]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b7ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b7b0:	4b16      	ldr	r3, [pc, #88]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b7b6:	4b15      	ldr	r3, [pc, #84]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800b7bc:	4b13      	ldr	r3, [pc, #76]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b7c2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b7c4:	4b11      	ldr	r3, [pc, #68]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b7ca:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b7cc:	4b0f      	ldr	r3, [pc, #60]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800b7d2:	480e      	ldr	r0, [pc, #56]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7d4:	f7f5 fdc8 	bl	8001368 <HAL_DMA_Init>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d001      	beq.n	800b7e2 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800b7de:	f7fd fce7 	bl	80091b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a09      	ldr	r2, [pc, #36]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b7e8:	4a08      	ldr	r2, [pc, #32]	@ (800b80c <HAL_UART_MspInit+0x220>)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b7ee:	e072      	b.n	800b8d6 <HAL_UART_MspInit+0x2ea>
 800b7f0:	40004c00 	.word	0x40004c00
 800b7f4:	40023800 	.word	0x40023800
 800b7f8:	40020000 	.word	0x40020000
 800b7fc:	40011000 	.word	0x40011000
 800b800:	200080fc 	.word	0x200080fc
 800b804:	40026440 	.word	0x40026440
 800b808:	40004400 	.word	0x40004400
 800b80c:	2000815c 	.word	0x2000815c
 800b810:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a31      	ldr	r2, [pc, #196]	@ (800b8e0 <HAL_UART_MspInit+0x2f4>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d15b      	bne.n	800b8d6 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b81e:	2300      	movs	r3, #0
 800b820:	613b      	str	r3, [r7, #16]
 800b822:	4b30      	ldr	r3, [pc, #192]	@ (800b8e4 <HAL_UART_MspInit+0x2f8>)
 800b824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b826:	4a2f      	ldr	r2, [pc, #188]	@ (800b8e4 <HAL_UART_MspInit+0x2f8>)
 800b828:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b82c:	6413      	str	r3, [r2, #64]	@ 0x40
 800b82e:	4b2d      	ldr	r3, [pc, #180]	@ (800b8e4 <HAL_UART_MspInit+0x2f8>)
 800b830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b832:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b836:	613b      	str	r3, [r7, #16]
 800b838:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	4b29      	ldr	r3, [pc, #164]	@ (800b8e4 <HAL_UART_MspInit+0x2f8>)
 800b840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b842:	4a28      	ldr	r2, [pc, #160]	@ (800b8e4 <HAL_UART_MspInit+0x2f8>)
 800b844:	f043 0304 	orr.w	r3, r3, #4
 800b848:	6313      	str	r3, [r2, #48]	@ 0x30
 800b84a:	4b26      	ldr	r3, [pc, #152]	@ (800b8e4 <HAL_UART_MspInit+0x2f8>)
 800b84c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b84e:	f003 0304 	and.w	r3, r3, #4
 800b852:	60fb      	str	r3, [r7, #12]
 800b854:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b856:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b85a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b85c:	2302      	movs	r3, #2
 800b85e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b860:	2300      	movs	r3, #0
 800b862:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b864:	2303      	movs	r3, #3
 800b866:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b868:	2307      	movs	r3, #7
 800b86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b86c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b870:	4619      	mov	r1, r3
 800b872:	481d      	ldr	r0, [pc, #116]	@ (800b8e8 <HAL_UART_MspInit+0x2fc>)
 800b874:	f7f6 f90a 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800b878:	4b1c      	ldr	r3, [pc, #112]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b87a:	4a1d      	ldr	r2, [pc, #116]	@ (800b8f0 <HAL_UART_MspInit+0x304>)
 800b87c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800b87e:	4b1b      	ldr	r3, [pc, #108]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b880:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b884:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b886:	4b19      	ldr	r3, [pc, #100]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b888:	2200      	movs	r2, #0
 800b88a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b88c:	4b17      	ldr	r3, [pc, #92]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b88e:	2200      	movs	r2, #0
 800b890:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b892:	4b16      	ldr	r3, [pc, #88]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b894:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b898:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b89a:	4b14      	ldr	r3, [pc, #80]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b89c:	2200      	movs	r2, #0
 800b89e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b8a0:	4b12      	ldr	r3, [pc, #72]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800b8a6:	4b11      	ldr	r3, [pc, #68]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b8ac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b8b4:	4b0d      	ldr	r3, [pc, #52]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b8ba:	480c      	ldr	r0, [pc, #48]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8bc:	f7f5 fd54 	bl	8001368 <HAL_DMA_Init>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <HAL_UART_MspInit+0x2de>
      Error_Handler();
 800b8c6:	f7fd fc73 	bl	80091b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	4a07      	ldr	r2, [pc, #28]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b8d0:	4a06      	ldr	r2, [pc, #24]	@ (800b8ec <HAL_UART_MspInit+0x300>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b8d6:	bf00      	nop
 800b8d8:	3740      	adds	r7, #64	@ 0x40
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
 800b8de:	bf00      	nop
 800b8e0:	40004800 	.word	0x40004800
 800b8e4:	40023800 	.word	0x40023800
 800b8e8:	40020800 	.word	0x40020800
 800b8ec:	200081bc 	.word	0x200081bc
 800b8f0:	40026028 	.word	0x40026028

0800b8f4 <uart_dma_init>:
    HAL_DMA_DeInit(uartHandle->hdmarx);

  }
}

void uart_dma_init(void) {
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	607b      	str	r3, [r7, #4]
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b930 <uart_dma_init+0x3c>)
 800b900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b902:	4a0b      	ldr	r2, [pc, #44]	@ (800b930 <uart_dma_init+0x3c>)
 800b904:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b908:	6313      	str	r3, [r2, #48]	@ 0x30
 800b90a:	4b09      	ldr	r3, [pc, #36]	@ (800b930 <uart_dma_init+0x3c>)
 800b90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b90e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b912:	607b      	str	r3, [r7, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800b916:	2200      	movs	r2, #0
 800b918:	2100      	movs	r1, #0
 800b91a:	203a      	movs	r0, #58	@ 0x3a
 800b91c:	f7f5 fcee 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800b920:	203a      	movs	r0, #58	@ 0x3a
 800b922:	f7f5 fd07 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800b926:	bf00      	nop
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}
 800b92e:	bf00      	nop
 800b930:	40023800 	.word	0x40023800

0800b934 <vl53l1xInit>:
// Set the start address 1 step after the VL53L0 dynamic addresses
static int nextI2CAddress = VL53L1X_DEFAULT_ADDRESS+1;


bool vl53l1xInit(VL53L1_Dev_t *pdev, I2C_HandleTypeDef *I2Cx)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	6039      	str	r1, [r7, #0]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800b93e:	2300      	movs	r3, #0
 800b940:	73fb      	strb	r3, [r7, #15]

  pdev->I2Cx = I2Cx;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	683a      	ldr	r2, [r7, #0]
 800b946:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c
  pdev->devAddr = VL53L1X_DEFAULT_ADDRESS;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2229      	movs	r2, #41	@ 0x29
 800b94e:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

  /* Move initialized sensor to a new I2C address */
  int newAddress;

  taskENTER_CRITICAL();
 800b952:	f7fd f88b 	bl	8008a6c <vPortEnterCritical>
  newAddress = nextI2CAddress++;
 800b956:	4b13      	ldr	r3, [pc, #76]	@ (800b9a4 <vl53l1xInit+0x70>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	4911      	ldr	r1, [pc, #68]	@ (800b9a4 <vl53l1xInit+0x70>)
 800b95e:	600a      	str	r2, [r1, #0]
 800b960:	60bb      	str	r3, [r7, #8]
  taskEXIT_CRITICAL();
 800b962:	f7fd f8b1 	bl	8008ac8 <vPortExitCritical>

  vl53l1xSetI2CAddress(pdev, newAddress);
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f81b 	bl	800b9a8 <vl53l1xSetI2CAddress>

  status = VL53L1_DataInit(pdev);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f008 fbe4 	bl	8014140 <VL53L1_DataInit>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]

  if (status == VL53L1_ERROR_NONE)
 800b97c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <vl53l1xInit+0x5a>
  {
    status = VL53L1_StaticInit(pdev);
 800b984:	6878      	ldr	r0, [r7, #4]
 800b986:	f008 fc4a 	bl	801421e <VL53L1_StaticInit>
 800b98a:	4603      	mov	r3, r0
 800b98c:	73fb      	strb	r3, [r7, #15]
  }

  return status == VL53L1_ERROR_NONE;
 800b98e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b992:	2b00      	cmp	r3, #0
 800b994:	bf0c      	ite	eq
 800b996:	2301      	moveq	r3, #1
 800b998:	2300      	movne	r3, #0
 800b99a:	b2db      	uxtb	r3, r3
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3710      	adds	r7, #16
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}
 800b9a4:	20000010 	.word	0x20000010

0800b9a8 <vl53l1xSetI2CAddress>:
 * Any subsequent communication will be on the new address
 * The address passed is the 7bit I2C address from LSB (ie. without the
 * read/write bit)
 */
VL53L1_Error vl53l1xSetI2CAddress(VL53L1_Dev_t* pdev, uint8_t address)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	70fb      	strb	r3, [r7, #3]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	73fb      	strb	r3, [r7, #15]

  status = VL53L1_SetDeviceAddress(pdev, address);
 800b9b8:	78fb      	ldrb	r3, [r7, #3]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f008 fba9 	bl	8014114 <VL53L1_SetDeviceAddress>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	73fb      	strb	r3, [r7, #15]
  pdev->devAddr = address;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	78fa      	ldrb	r2, [r7, #3]
 800b9ca:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  return  status;
 800b9ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3710      	adds	r7, #16
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <VL53L1_WriteMulti>:
VL53L1_Error VL53L1_WriteMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800b9da:	b590      	push	{r4, r7, lr}
 800b9dc:	b089      	sub	sp, #36	@ 0x24
 800b9de:	af02      	add	r7, sp, #8
 800b9e0:	60f8      	str	r0, [r7, #12]
 800b9e2:	607a      	str	r2, [r7, #4]
 800b9e4:	603b      	str	r3, [r7, #0]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	b29c      	uxth	r4, r3
 800b9fe:	897a      	ldrh	r2, [r7, #10]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	9300      	str	r3, [sp, #0]
 800ba04:	4623      	mov	r3, r4
 800ba06:	f7fe ff29 	bl	800a85c <i2cdevWriteReg16>
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	f083 0301 	eor.w	r3, r3, #1
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <VL53L1_WriteMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ba16:	23f3      	movs	r3, #243	@ 0xf3
 800ba18:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800ba1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	371c      	adds	r7, #28
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd90      	pop	{r4, r7, pc}

0800ba26 <VL53L1_ReadMulti>:
VL53L1_Error VL53L1_ReadMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800ba26:	b590      	push	{r4, r7, lr}
 800ba28:	b089      	sub	sp, #36	@ 0x24
 800ba2a:	af02      	add	r7, sp, #8
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	603b      	str	r3, [r7, #0]
 800ba32:	460b      	mov	r3, r1
 800ba34:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800ba36:	2300      	movs	r3, #0
 800ba38:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	b29c      	uxth	r4, r3
 800ba4a:	897a      	ldrh	r2, [r7, #10]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	9300      	str	r3, [sp, #0]
 800ba50:	4623      	mov	r3, r4
 800ba52:	f7fe fed9 	bl	800a808 <i2cdevReadReg16>
 800ba56:	4603      	mov	r3, r0
 800ba58:	f083 0301 	eor.w	r3, r3, #1
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <VL53L1_ReadMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800ba62:	23f3      	movs	r3, #243	@ 0xf3
 800ba64:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800ba66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	371c      	adds	r7, #28
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd90      	pop	{r4, r7, pc}

0800ba72 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t       data)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b086      	sub	sp, #24
 800ba76:	af02      	add	r7, sp, #8
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	807b      	strh	r3, [r7, #2]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	707b      	strb	r3, [r7, #1]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]

	if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, 1, &data))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800ba92:	887a      	ldrh	r2, [r7, #2]
 800ba94:	1c7b      	adds	r3, r7, #1
 800ba96:	9300      	str	r3, [sp, #0]
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f7fe fedf 	bl	800a85c <i2cdevWriteReg16>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f083 0301 	eor.w	r3, r3, #1
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d001      	beq.n	800baae <VL53L1_WrByte+0x3c>
	{
	  status = VL53L1_ERROR_CONTROL_INTERFACE;
 800baaa:	23f3      	movs	r3, #243	@ 0xf3
 800baac:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800baae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3710      	adds	r7, #16
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
	...

0800babc <VL53L1_RdByte>:

VL53L1_Error VL53L1_RdByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af02      	add	r7, sp, #8
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	460b      	mov	r3, r1
 800bac6:	607a      	str	r2, [r7, #4]
 800bac8:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800baca:	2300      	movs	r3, #0
 800bacc:	75fb      	strb	r3, [r7, #23]
  static uint8_t r8data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 1, &r8data))
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800bada:	897a      	ldrh	r2, [r7, #10]
 800badc:	4b0b      	ldr	r3, [pc, #44]	@ (800bb0c <VL53L1_RdByte+0x50>)
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	2301      	movs	r3, #1
 800bae2:	f7fe fe91 	bl	800a808 <i2cdevReadReg16>
 800bae6:	4603      	mov	r3, r0
 800bae8:	f083 0301 	eor.w	r3, r3, #1
 800baec:	b2db      	uxtb	r3, r3
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d001      	beq.n	800baf6 <VL53L1_RdByte+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800baf2:	23f3      	movs	r3, #243	@ 0xf3
 800baf4:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r8data;
 800baf6:	4b05      	ldr	r3, [pc, #20]	@ (800bb0c <VL53L1_RdByte+0x50>)
 800baf8:	781a      	ldrb	r2, [r3, #0]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	701a      	strb	r2, [r3, #0]

  return status;
 800bafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3718      	adds	r7, #24
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	2000821c 	.word	0x2000821c

0800bb10 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint16_t     *pdata)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b088      	sub	sp, #32
 800bb14:	af02      	add	r7, sp, #8
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	460b      	mov	r3, r1
 800bb1a:	607a      	str	r2, [r7, #4]
 800bb1c:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	75fb      	strb	r3, [r7, #23]
  static uint16_t r16data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 2, (uint8_t *)&r16data))
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800bb2e:	897a      	ldrh	r2, [r7, #10]
 800bb30:	4b0b      	ldr	r3, [pc, #44]	@ (800bb60 <VL53L1_RdWord+0x50>)
 800bb32:	9300      	str	r3, [sp, #0]
 800bb34:	2302      	movs	r3, #2
 800bb36:	f7fe fe67 	bl	800a808 <i2cdevReadReg16>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	f083 0301 	eor.w	r3, r3, #1
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d001      	beq.n	800bb4a <VL53L1_RdWord+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800bb46:	23f3      	movs	r3, #243	@ 0xf3
 800bb48:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r16data;
 800bb4a:	4b05      	ldr	r3, [pc, #20]	@ (800bb60 <VL53L1_RdWord+0x50>)
 800bb4c:	881a      	ldrh	r2, [r3, #0]
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	801a      	strh	r2, [r3, #0]
  
  return status;
 800bb52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	2000821e 	.word	0x2000821e

0800bb64 <imu_task_test>:

MPU6500_IMU imu;

//uint16_t imu_flage = 0;

static void imu_task_test(void *param){
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
//	imu_flage = 1;
	//JH
	if(MPU6500_Init(&imu) == 0){
 800bb6c:	4808      	ldr	r0, [pc, #32]	@ (800bb90 <imu_task_test+0x2c>)
 800bb6e:	f7fe fa7f 	bl	800a070 <MPU6500_Init>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d101      	bne.n	800bb7c <imu_task_test+0x18>
//		imu_flage = 1;
		//NJH
		for(;;);
 800bb78:	bf00      	nop
 800bb7a:	e7fd      	b.n	800bb78 <imu_task_test+0x14>
	}
//	imu_flage = 1;
	//JH
	for(;;){
		MPU6500_ReadAcc(&imu);
 800bb7c:	4804      	ldr	r0, [pc, #16]	@ (800bb90 <imu_task_test+0x2c>)
 800bb7e:	f7fe fae0 	bl	800a142 <MPU6500_ReadAcc>
		MPU6500_ReadGyr(&imu);
 800bb82:	4803      	ldr	r0, [pc, #12]	@ (800bb90 <imu_task_test+0x2c>)
 800bb84:	f7fe fb0a 	bl	800a19c <MPU6500_ReadGyr>
		vTaskDelay(10);
 800bb88:	200a      	movs	r0, #10
 800bb8a:	f7fb fc43 	bl	8007414 <vTaskDelay>
		MPU6500_ReadAcc(&imu);
 800bb8e:	e7f5      	b.n	800bb7c <imu_task_test+0x18>
 800bb90:	20008220 	.word	0x20008220

0800bb94 <imu_test>:
	}
}

void imu_test(){
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af02      	add	r7, sp, #8
	xTaskCreate(imu_task_test, IMU_TASK_NAME_TEST, IMU_TASK_STACKSIZE, NULL, IMU_TASK_PRI_TEST, NULL);
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	2303      	movs	r3, #3
 800bba0:	9300      	str	r3, [sp, #0]
 800bba2:	2300      	movs	r3, #0
 800bba4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bba8:	4903      	ldr	r1, [pc, #12]	@ (800bbb8 <imu_test+0x24>)
 800bbaa:	4804      	ldr	r0, [pc, #16]	@ (800bbbc <imu_test+0x28>)
 800bbac:	f7fb fa6a 	bl	8007084 <xTaskCreate>
}
 800bbb0:	bf00      	nop
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	0801bf44 	.word	0x0801bf44
 800bbbc:	0800bb65 	.word	0x0800bb65

0800bbc0 <qmc_task_test>:
#include <stdlib.h>

//uint32_t qmc_flage = 0;
qmc_typedef qmc;

static void qmc_task_test(void *param){
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
//	qmc_flage = 1;
	qmc5883p_init();
 800bbc8:	f7ff f88c 	bl	800ace4 <qmc5883p_init>

	for(;;){
		qmc5883p_read(&qmc);
 800bbcc:	4803      	ldr	r0, [pc, #12]	@ (800bbdc <qmc_task_test+0x1c>)
 800bbce:	f7ff f8c2 	bl	800ad56 <qmc5883p_read>
		vTaskDelay(10);
 800bbd2:	200a      	movs	r0, #10
 800bbd4:	f7fb fc1e 	bl	8007414 <vTaskDelay>
		qmc5883p_read(&qmc);
 800bbd8:	bf00      	nop
 800bbda:	e7f7      	b.n	800bbcc <qmc_task_test+0xc>
 800bbdc:	20008244 	.word	0x20008244

0800bbe0 <qmc_test>:
//		qmc_flage = 1;
	}
}

void qmc_test(){
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af02      	add	r7, sp, #8
	xTaskCreate(qmc_task_test, QMC_TASK_NAME_TEST, QMC_TASK_STACKSIZE, NULL, QMC_TASK_PRI_TEST, NULL);
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	2303      	movs	r3, #3
 800bbec:	9300      	str	r3, [sp, #0]
 800bbee:	2300      	movs	r3, #0
 800bbf0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bbf4:	4903      	ldr	r1, [pc, #12]	@ (800bc04 <qmc_test+0x24>)
 800bbf6:	4804      	ldr	r0, [pc, #16]	@ (800bc08 <qmc_test+0x28>)
 800bbf8:	f7fb fa44 	bl	8007084 <xTaskCreate>
}
 800bbfc:	bf00      	nop
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	0801bf50 	.word	0x0801bf50
 800bc08:	0800bbc1 	.word	0x0800bbc1

0800bc0c <led_task_test>:
#include <stdlib.h>

uint32_t counter_led_task = 0;


static void led_task_test(void *param){
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
//	systemWaitStart();
//	uint64_t lastTime  = usecTimestamp();
// Open made code belowe not work

	while(1){
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800bc14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800bc18:	4803      	ldr	r0, [pc, #12]	@ (800bc28 <led_task_test+0x1c>)
 800bc1a:	f7f6 f8ec 	bl	8001df6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800bc1e:	2064      	movs	r0, #100	@ 0x64
 800bc20:	f7fb fbf8 	bl	8007414 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800bc24:	bf00      	nop
 800bc26:	e7f5      	b.n	800bc14 <led_task_test+0x8>
 800bc28:	40020800 	.word	0x40020800

0800bc2c <ledblink_test>:
	}
}
void ledblink_test(){
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af02      	add	r7, sp, #8
	xTaskCreate(led_task_test, LED_TASK_NAME, LED_TASK_STACKSIZE, NULL, LED_TASK_PRI_TEST, NULL);
 800bc32:	2300      	movs	r3, #0
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	2303      	movs	r3, #3
 800bc38:	9300      	str	r3, [sp, #0]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	2296      	movs	r2, #150	@ 0x96
 800bc3e:	4903      	ldr	r1, [pc, #12]	@ (800bc4c <ledblink_test+0x20>)
 800bc40:	4803      	ldr	r0, [pc, #12]	@ (800bc50 <ledblink_test+0x24>)
 800bc42:	f7fb fa1f 	bl	8007084 <xTaskCreate>
}
 800bc46:	bf00      	nop
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	0801bf5c 	.word	0x0801bf5c
 800bc50:	0800bc0d 	.word	0x0800bc0d

0800bc54 <motors_task_test>:
uint32_t motors_value = 0;
uint16_t my_motor_value[4] = {0, 0, 0, 0};
uint8_t next_state = 0;


static void motors_task_test(void *param) {
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
//	hal_dshot_init(DSHOT600);
//	vTaskDelay(100);
	//JH
	while(1){
		motors_value += 1;
 800bc5c:	4b06      	ldr	r3, [pc, #24]	@ (800bc78 <motors_task_test+0x24>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	3301      	adds	r3, #1
 800bc62:	4a05      	ldr	r2, [pc, #20]	@ (800bc78 <motors_task_test+0x24>)
 800bc64:	6013      	str	r3, [r2, #0]
		hal_dshot_write(my_motor_value);
 800bc66:	4805      	ldr	r0, [pc, #20]	@ (800bc7c <motors_task_test+0x28>)
 800bc68:	f7fe fad6 	bl	800a218 <hal_dshot_write>
		//JH only a round
//		next_state = 1;
		vTaskDelay(1);
 800bc6c:	2001      	movs	r0, #1
 800bc6e:	f7fb fbd1 	bl	8007414 <vTaskDelay>
	while(1){
 800bc72:	bf00      	nop
 800bc74:	e7f2      	b.n	800bc5c <motors_task_test+0x8>
 800bc76:	bf00      	nop
 800bc78:	20008254 	.word	0x20008254
 800bc7c:	20008258 	.word	0x20008258

0800bc80 <motors_test>:
	}
}
void motors_test(){
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af02      	add	r7, sp, #8
	xTaskCreate(motors_task_test, MOTORS_TASK_NAME_TEST, MOTORS_TASK_STACKSIZE_TEST, NULL, MOTORS_TASK_PRI_TEST, NULL);
 800bc86:	2300      	movs	r3, #0
 800bc88:	9301      	str	r3, [sp, #4]
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	9300      	str	r3, [sp, #0]
 800bc8e:	2300      	movs	r3, #0
 800bc90:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bc94:	4903      	ldr	r1, [pc, #12]	@ (800bca4 <motors_test+0x24>)
 800bc96:	4804      	ldr	r0, [pc, #16]	@ (800bca8 <motors_test+0x28>)
 800bc98:	f7fb f9f4 	bl	8007084 <xTaskCreate>
}
 800bc9c:	bf00      	nop
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
 800bca2:	bf00      	nop
 800bca4:	0801bf68 	.word	0x0801bf68
 800bca8:	0800bc55 	.word	0x0800bc55

0800bcac <rc_task_test>:
#include "dragonll_ibus.h"

uint32_t rc_cournter = 0;
//uint16_t ibus_data[IBUS_USER_CHANNELS];

static void rc_task_test(void *param) {
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]

	for (;;) {
		rc_cournter += 1;
 800bcb4:	4b04      	ldr	r3, [pc, #16]	@ (800bcc8 <rc_task_test+0x1c>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	3301      	adds	r3, #1
 800bcba:	4a03      	ldr	r2, [pc, #12]	@ (800bcc8 <rc_task_test+0x1c>)
 800bcbc:	6013      	str	r3, [r2, #0]
//		hal_ibus_read(ibus_data);
		vTaskDelay(1);
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	f7fb fba8 	bl	8007414 <vTaskDelay>
		rc_cournter += 1;
 800bcc4:	bf00      	nop
 800bcc6:	e7f5      	b.n	800bcb4 <rc_task_test+0x8>
 800bcc8:	20008260 	.word	0x20008260

0800bccc <rc_test>:
	}

}

void rc_test(){
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b082      	sub	sp, #8
 800bcd0:	af02      	add	r7, sp, #8
	xTaskCreate(rc_task_test, RC_TASK_NAME_TEST, RC_TASK_STACKSIZE, NULL, RC_TASK_PRI_TEST, NULL);
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	9301      	str	r3, [sp, #4]
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	9300      	str	r3, [sp, #0]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800bce0:	4903      	ldr	r1, [pc, #12]	@ (800bcf0 <rc_test+0x24>)
 800bce2:	4804      	ldr	r0, [pc, #16]	@ (800bcf4 <rc_test+0x28>)
 800bce4:	f7fb f9ce 	bl	8007084 <xTaskCreate>
}
 800bce8:	bf00      	nop
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	0801bf74 	.word	0x0801bf74
 800bcf4:	0800bcad 	.word	0x0800bcad

0800bcf8 <nullFunction>:
  void (*dataAvailableCallback)(void);
} sensorsImplementation_t;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
static void nullFunction(void) {}
 800bcf8:	b480      	push	{r7}
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	bf00      	nop
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr
	...

0800bd08 <sensorsInit>:

static const sensorsImplementation_t* activeImplementation;
static bool isInit = false;
static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation);

void sensorsInit(void) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
  if (isInit) {
 800bd0e:	4b0d      	ldr	r3, [pc, #52]	@ (800bd44 <sensorsInit+0x3c>)
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d112      	bne.n	800bd3c <sensorsInit+0x34>
    return;
  }

#ifndef SENSORS_FORCE
  SensorImplementation_t sensorImplementation = platformConfigGetSensorImplementation();
 800bd16:	f007 ffa1 	bl	8013c5c <platformConfigGetSensorImplementation>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
  SensorImplementation_t sensorImplementation = SENSORS_FORCE;
  DEBUG_PRINT("Forcing sensors to " xstr(SENSORS_FORCE) "\n");
#endif
//run = 1;//JH

  activeImplementation = findImplementation(sensorImplementation);
 800bd1e:	79fb      	ldrb	r3, [r7, #7]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 f879 	bl	800be18 <findImplementation>
 800bd26:	4603      	mov	r3, r0
 800bd28:	4a07      	ldr	r2, [pc, #28]	@ (800bd48 <sensorsInit+0x40>)
 800bd2a:	6013      	str	r3, [r2, #0]
//  run = 1;//JH

  activeImplementation->init();
 800bd2c:	4b06      	ldr	r3, [pc, #24]	@ (800bd48 <sensorsInit+0x40>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	4798      	blx	r3
//  run = 1; // NJH

  isInit = true;
 800bd34:	4b03      	ldr	r3, [pc, #12]	@ (800bd44 <sensorsInit+0x3c>)
 800bd36:	2201      	movs	r2, #1
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	e000      	b.n	800bd3e <sensorsInit+0x36>
    return;
 800bd3c:	bf00      	nop
}
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20008268 	.word	0x20008268
 800bd48:	20008264 	.word	0x20008264

0800bd4c <sensorsAreCalibrated>:
bool sensorsTest(void) {
  return activeImplementation->test();
}

bool sensorsAreCalibrated(void) {
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	af00      	add	r7, sp, #0
  return activeImplementation->areCalibrated();
 800bd50:	4b03      	ldr	r3, [pc, #12]	@ (800bd60 <sensorsAreCalibrated+0x14>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	4798      	blx	r3
 800bd58:	4603      	mov	r3, r0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	bd80      	pop	{r7, pc}
 800bd5e:	bf00      	nop
 800bd60:	20008264 	.word	0x20008264

0800bd64 <sensorsAcquire>:

bool sensorsManufacturingTest(void){
  return activeImplementation->manufacturingTest;
}

void sensorsAcquire(sensorData_t *sensors) {
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  activeImplementation->acquire(sensors);
 800bd6c:	4b04      	ldr	r3, [pc, #16]	@ (800bd80 <sensorsAcquire+0x1c>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	695b      	ldr	r3, [r3, #20]
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
}
 800bd76:	bf00      	nop
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
 800bd7e:	bf00      	nop
 800bd80:	20008264 	.word	0x20008264

0800bd84 <sensorsWaitDataReady>:

void sensorsWaitDataReady(void) {
 800bd84:	b580      	push	{r7, lr}
 800bd86:	af00      	add	r7, sp, #0
  activeImplementation->waitDataReady();
 800bd88:	4b02      	ldr	r3, [pc, #8]	@ (800bd94 <sensorsWaitDataReady+0x10>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	699b      	ldr	r3, [r3, #24]
 800bd8e:	4798      	blx	r3
}
 800bd90:	bf00      	nop
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20008264 	.word	0x20008264

0800bd98 <sensorsReadGyro>:

bool sensorsReadGyro(Axis3f *gyro) {
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  return activeImplementation->readGyro(gyro);
 800bda0:	4b04      	ldr	r3, [pc, #16]	@ (800bdb4 <sensorsReadGyro+0x1c>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	69db      	ldr	r3, [r3, #28]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	4798      	blx	r3
 800bdaa:	4603      	mov	r3, r0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3708      	adds	r7, #8
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	20008264 	.word	0x20008264

0800bdb8 <sensorsReadAcc>:

bool sensorsReadAcc(Axis3f *acc) {
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b082      	sub	sp, #8
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	6078      	str	r0, [r7, #4]
  return activeImplementation->readAcc(acc);
 800bdc0:	4b04      	ldr	r3, [pc, #16]	@ (800bdd4 <sensorsReadAcc+0x1c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	6a1b      	ldr	r3, [r3, #32]
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	4798      	blx	r3
 800bdca:	4603      	mov	r3, r0
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20008264 	.word	0x20008264

0800bdd8 <sensorsReadMag>:

bool sensorsReadMag(Axis3f *mag) {
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  return activeImplementation->readMag(mag);
 800bde0:	4b04      	ldr	r3, [pc, #16]	@ (800bdf4 <sensorsReadMag+0x1c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	4798      	blx	r3
 800bdea:	4603      	mov	r3, r0
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	3708      	adds	r7, #8
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	bd80      	pop	{r7, pc}
 800bdf4:	20008264 	.word	0x20008264

0800bdf8 <sensorsReadBaro>:

bool sensorsReadBaro(baro_t *baro) {
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  return activeImplementation->readBaro(baro);
 800be00:	4b04      	ldr	r3, [pc, #16]	@ (800be14 <sensorsReadBaro+0x1c>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
 800be0a:	4603      	mov	r3, r0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	3708      	adds	r7, #8
 800be10:	46bd      	mov	sp, r7
 800be12:	bd80      	pop	{r7, pc}
 800be14:	20008264 	.word	0x20008264

0800be18 <findImplementation>:

void __attribute__((used)) EXTI1_Callback(void) {
  activeImplementation->dataAvailableCallback();
}

static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation) {
 800be18:	b480      	push	{r7}
 800be1a:	b085      	sub	sp, #20
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	4603      	mov	r3, r0
 800be20:	71fb      	strb	r3, [r7, #7]
  const sensorsImplementation_t* result = 0;
 800be22:	2300      	movs	r3, #0
 800be24:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800be26:	2300      	movs	r3, #0
 800be28:	60bb      	str	r3, [r7, #8]
 800be2a:	e014      	b.n	800be56 <findImplementation+0x3e>
    if (sensorImplementations[i].implements == implementation) {
 800be2c:	4a0f      	ldr	r2, [pc, #60]	@ (800be6c <findImplementation+0x54>)
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	2134      	movs	r1, #52	@ 0x34
 800be32:	fb01 f303 	mul.w	r3, r1, r3
 800be36:	4413      	add	r3, r2
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	79fa      	ldrb	r2, [r7, #7]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d107      	bne.n	800be50 <findImplementation+0x38>
      result = &sensorImplementations[i];
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	2234      	movs	r2, #52	@ 0x34
 800be44:	fb02 f303 	mul.w	r3, r2, r3
 800be48:	4a08      	ldr	r2, [pc, #32]	@ (800be6c <findImplementation+0x54>)
 800be4a:	4413      	add	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
      break;
 800be4e:	e005      	b.n	800be5c <findImplementation+0x44>
  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	3301      	adds	r3, #1
 800be54:	60bb      	str	r3, [r7, #8]
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	dde7      	ble.n	800be2c <findImplementation+0x14>
    }
  }

  return result;
 800be5c:	68fb      	ldr	r3, [r7, #12]
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3714      	adds	r7, #20
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	0801c228 	.word	0x0801c228

0800be70 <sensorsMpu6500Bmp280ReadGyro>:

STATIC_MEM_TASK_ALLOC(sensorsTask, SENSORS_TASK_STACKSIZE);


bool sensorsMpu6500Bmp280ReadGyro(Axis3f *gyro)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(gyroDataQueue, gyro, 0));
 800be78:	4b08      	ldr	r3, [pc, #32]	@ (800be9c <sensorsMpu6500Bmp280ReadGyro+0x2c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2200      	movs	r2, #0
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	4618      	mov	r0, r3
 800be82:	f7fa fd39 	bl	80068f8 <xQueueReceive>
 800be86:	4603      	mov	r3, r0
 800be88:	2b01      	cmp	r3, #1
 800be8a:	bf0c      	ite	eq
 800be8c:	2301      	moveq	r3, #1
 800be8e:	2300      	movne	r3, #0
 800be90:	b2db      	uxtb	r3, r3
}
 800be92:	4618      	mov	r0, r3
 800be94:	3708      	adds	r7, #8
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	20008270 	.word	0x20008270

0800bea0 <sensorsMpu6500Bmp280ReadAcc>:
bool sensorsMpu6500Bmp280ReadAcc(Axis3f *acc)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(accelerometerDataQueue, acc, 0));
 800bea8:	4b08      	ldr	r3, [pc, #32]	@ (800becc <sensorsMpu6500Bmp280ReadAcc+0x2c>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2200      	movs	r2, #0
 800beae:	6879      	ldr	r1, [r7, #4]
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fa fd21 	bl	80068f8 <xQueueReceive>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b01      	cmp	r3, #1
 800beba:	bf0c      	ite	eq
 800bebc:	2301      	moveq	r3, #1
 800bebe:	2300      	movne	r3, #0
 800bec0:	b2db      	uxtb	r3, r3
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	2000826c 	.word	0x2000826c

0800bed0 <sensorsMpu6500Bmp280ReadMag>:
bool sensorsMpu6500Bmp280ReadMag(Axis3f *mag)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b082      	sub	sp, #8
 800bed4:	af00      	add	r7, sp, #0
 800bed6:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(magnetometerDataQueue, mag, 0));
 800bed8:	4b08      	ldr	r3, [pc, #32]	@ (800befc <sensorsMpu6500Bmp280ReadMag+0x2c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2200      	movs	r2, #0
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fa fd09 	bl	80068f8 <xQueueReceive>
 800bee6:	4603      	mov	r3, r0
 800bee8:	2b01      	cmp	r3, #1
 800beea:	bf0c      	ite	eq
 800beec:	2301      	moveq	r3, #1
 800beee:	2300      	movne	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	20008274 	.word	0x20008274

0800bf00 <sensorsMpu6500Bmp280ReadBaro>:
bool sensorsMpu6500Bmp280ReadBaro(baro_t *baro)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b082      	sub	sp, #8
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(barometerDataQueue, baro, 0));
 800bf08:	4b08      	ldr	r3, [pc, #32]	@ (800bf2c <sensorsMpu6500Bmp280ReadBaro+0x2c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	6879      	ldr	r1, [r7, #4]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fa fcf1 	bl	80068f8 <xQueueReceive>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	bf0c      	ite	eq
 800bf1c:	2301      	moveq	r3, #1
 800bf1e:	2300      	movne	r3, #0
 800bf20:	b2db      	uxtb	r3, r3
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3708      	adds	r7, #8
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	20008278 	.word	0x20008278

0800bf30 <sensorsMpu6500Bmp280Acquire>:
void sensorsMpu6500Bmp280Acquire(sensorData_t *sensors)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b082      	sub	sp, #8
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	sensorsReadGyro(&sensors->gyro);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	330c      	adds	r3, #12
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff ff2b 	bl	800bd98 <sensorsReadGyro>
	sensorsReadAcc(&sensors->acc);
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	4618      	mov	r0, r3
 800bf46:	f7ff ff37 	bl	800bdb8 <sensorsReadAcc>
	sensorsReadMag(&sensors->mag);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3318      	adds	r3, #24
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7ff ff42 	bl	800bdd8 <sensorsReadMag>
	sensorsReadBaro(&sensors->baro);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	3324      	adds	r3, #36	@ 0x24
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff ff4d 	bl	800bdf8 <sensorsReadBaro>
	sensors->interruptTimestamp = sensorData.interruptTimestamp;
 800bf5e:	4b05      	ldr	r3, [pc, #20]	@ (800bf74 <sensorsMpu6500Bmp280Acquire+0x44>)
 800bf60:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 800bf6a:	bf00      	nop
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	20008328 	.word	0x20008328

0800bf78 <sensorsMpu6500Bmp280AreCalibrated>:
bool sensorsMpu6500Bmp280AreCalibrated(void)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	af00      	add	r7, sp, #0
	return gyroBiasFound;
 800bf7c:	4b03      	ldr	r3, [pc, #12]	@ (800bf8c <sensorsMpu6500Bmp280AreCalibrated+0x14>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr
 800bf8a:	bf00      	nop
 800bf8c:	20008390 	.word	0x20008390

0800bf90 <sensorsTask>:

static void sensorsTask(void *param)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08e      	sub	sp, #56	@ 0x38
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
	measurement_t measurement;
	vTaskDelay(10);
 800bf98:	200a      	movs	r0, #10
 800bf9a:	f7fb fa3b 	bl	8007414 <vTaskDelay>

	systemWaitStart();
 800bf9e:	f002 fd09 	bl	800e9b4 <systemWaitStart>

	while (1) {


	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800bfa2:	4b45      	ldr	r3, [pc, #276]	@ (800c0b8 <sensorsTask+0x128>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f04f 31ff 	mov.w	r1, #4294967295
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7fa fd84 	bl	8006ab8 <xQueueSemaphoreTake>
 800bfb0:	4603      	mov	r3, r0
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d1f5      	bne.n	800bfa2 <sensorsTask+0x12>
	    {
	    	sensorData.interruptTimestamp = imuIntTimestamp;
 800bfb6:	4b41      	ldr	r3, [pc, #260]	@ (800c0bc <sensorsTask+0x12c>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	4940      	ldr	r1, [pc, #256]	@ (800c0c0 <sensorsTask+0x130>)
 800bfbe:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	    	sysCounter++;
 800bfc2:	4b40      	ldr	r3, [pc, #256]	@ (800c0c4 <sensorsTask+0x134>)
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	4a3e      	ldr	r2, [pc, #248]	@ (800c0c4 <sensorsTask+0x134>)
 800bfca:	6013      	str	r3, [r2, #0]
	    	mpu6500GetAccelGyroData(&imu);
 800bfcc:	483e      	ldr	r0, [pc, #248]	@ (800c0c8 <sensorsTask+0x138>)
 800bfce:	f7fe fd73 	bl	800aab8 <mpu6500GetAccelGyroData>
	    	processAccGyroMeasurements();
 800bfd2:	f000 f8a7 	bl	800c124 <processAccGyroMeasurements>
	    	if (isBarometerPresent)
 800bfd6:	4b3d      	ldr	r3, [pc, #244]	@ (800c0cc <sensorsTask+0x13c>)
 800bfd8:	781b      	ldrb	r3, [r3, #0]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <sensorsTask+0x52>
	    	{
	    		processBarometerMeasurements();
 800bfde:	f000 f9b1 	bl	800c344 <processBarometerMeasurements>

	    	}

	        measurement.type = MeasurementTypeAcceleration;
 800bfe2:	230a      	movs	r3, #10
 800bfe4:	723b      	strb	r3, [r7, #8]
	        measurement.data.acceleration.acc = sensorData.acc;
 800bfe6:	4a36      	ldr	r2, [pc, #216]	@ (800c0c0 <sensorsTask+0x130>)
 800bfe8:	f107 030c 	add.w	r3, r7, #12
 800bfec:	ca07      	ldmia	r2, {r0, r1, r2}
 800bfee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        ax = sensorData.acc.x;
 800bff2:	4b33      	ldr	r3, [pc, #204]	@ (800c0c0 <sensorsTask+0x130>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	4a36      	ldr	r2, [pc, #216]	@ (800c0d0 <sensorsTask+0x140>)
 800bff8:	6013      	str	r3, [r2, #0]
	        ay = sensorData.acc.y;
 800bffa:	4b31      	ldr	r3, [pc, #196]	@ (800c0c0 <sensorsTask+0x130>)
 800bffc:	685b      	ldr	r3, [r3, #4]
 800bffe:	4a35      	ldr	r2, [pc, #212]	@ (800c0d4 <sensorsTask+0x144>)
 800c000:	6013      	str	r3, [r2, #0]
	        az = sensorData.acc.z;
 800c002:	4b2f      	ldr	r3, [pc, #188]	@ (800c0c0 <sensorsTask+0x130>)
 800c004:	689b      	ldr	r3, [r3, #8]
 800c006:	4a34      	ldr	r2, [pc, #208]	@ (800c0d8 <sensorsTask+0x148>)
 800c008:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800c00a:	f107 0308 	add.w	r3, r7, #8
 800c00e:	4618      	mov	r0, r3
 800c010:	f002 fe2c 	bl	800ec6c <estimatorEnqueue>
	        xQueueOverwrite(accelerometerDataQueue, &sensorData.acc);
 800c014:	4b31      	ldr	r3, [pc, #196]	@ (800c0dc <sensorsTask+0x14c>)
 800c016:	6818      	ldr	r0, [r3, #0]
 800c018:	2302      	movs	r3, #2
 800c01a:	2200      	movs	r2, #0
 800c01c:	4928      	ldr	r1, [pc, #160]	@ (800c0c0 <sensorsTask+0x130>)
 800c01e:	f7fa fa2d 	bl	800647c <xQueueGenericSend>

	        measurement.type = MeasurementTypeGyroscope;
 800c022:	2309      	movs	r3, #9
 800c024:	723b      	strb	r3, [r7, #8]
	        measurement.data.gyroscope.gyro = sensorData.gyro;
 800c026:	4a26      	ldr	r2, [pc, #152]	@ (800c0c0 <sensorsTask+0x130>)
 800c028:	f107 030c 	add.w	r3, r7, #12
 800c02c:	320c      	adds	r2, #12
 800c02e:	ca07      	ldmia	r2, {r0, r1, r2}
 800c030:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        gx = sensorData.gyro.x;
 800c034:	4b22      	ldr	r3, [pc, #136]	@ (800c0c0 <sensorsTask+0x130>)
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	4a29      	ldr	r2, [pc, #164]	@ (800c0e0 <sensorsTask+0x150>)
 800c03a:	6013      	str	r3, [r2, #0]
	        gy = sensorData.gyro.y;
 800c03c:	4b20      	ldr	r3, [pc, #128]	@ (800c0c0 <sensorsTask+0x130>)
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	4a28      	ldr	r2, [pc, #160]	@ (800c0e4 <sensorsTask+0x154>)
 800c042:	6013      	str	r3, [r2, #0]
	        gz = sensorData.gyro.z;
 800c044:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c0 <sensorsTask+0x130>)
 800c046:	695b      	ldr	r3, [r3, #20]
 800c048:	4a27      	ldr	r2, [pc, #156]	@ (800c0e8 <sensorsTask+0x158>)
 800c04a:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800c04c:	f107 0308 	add.w	r3, r7, #8
 800c050:	4618      	mov	r0, r3
 800c052:	f002 fe0b 	bl	800ec6c <estimatorEnqueue>
	        xQueueOverwrite(gyroDataQueue, &sensorData.gyro);
 800c056:	4b25      	ldr	r3, [pc, #148]	@ (800c0ec <sensorsTask+0x15c>)
 800c058:	6818      	ldr	r0, [r3, #0]
 800c05a:	2302      	movs	r3, #2
 800c05c:	2200      	movs	r2, #0
 800c05e:	4924      	ldr	r1, [pc, #144]	@ (800c0f0 <sensorsTask+0x160>)
 800c060:	f7fa fa0c 	bl	800647c <xQueueGenericSend>

			if (isBarometerPresent) {
 800c064:	4b19      	ldr	r3, [pc, #100]	@ (800c0cc <sensorsTask+0x13c>)
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d01c      	beq.n	800c0a6 <sensorsTask+0x116>
				measurement.type = MeasurementTypeBarometer;
 800c06c:	230b      	movs	r3, #11
 800c06e:	723b      	strb	r3, [r7, #8]
				measurement.data.barometer.baro = sensorData.baro;
 800c070:	4a13      	ldr	r2, [pc, #76]	@ (800c0c0 <sensorsTask+0x130>)
 800c072:	f107 030c 	add.w	r3, r7, #12
 800c076:	3224      	adds	r2, #36	@ 0x24
 800c078:	ca07      	ldmia	r2, {r0, r1, r2}
 800c07a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				press = sensorData.baro.pressure;
 800c07e:	4b10      	ldr	r3, [pc, #64]	@ (800c0c0 <sensorsTask+0x130>)
 800c080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c082:	4a1c      	ldr	r2, [pc, #112]	@ (800c0f4 <sensorsTask+0x164>)
 800c084:	6013      	str	r3, [r2, #0]
				asl = sensorData.baro.asl;
 800c086:	4b0e      	ldr	r3, [pc, #56]	@ (800c0c0 <sensorsTask+0x130>)
 800c088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c08a:	4a1b      	ldr	r2, [pc, #108]	@ (800c0f8 <sensorsTask+0x168>)
 800c08c:	6013      	str	r3, [r2, #0]
				estimatorEnqueue(&measurement);
 800c08e:	f107 0308 	add.w	r3, r7, #8
 800c092:	4618      	mov	r0, r3
 800c094:	f002 fdea 	bl	800ec6c <estimatorEnqueue>
				xQueueOverwrite(barometerDataQueue, &sensorData.baro);
 800c098:	4b18      	ldr	r3, [pc, #96]	@ (800c0fc <sensorsTask+0x16c>)
 800c09a:	6818      	ldr	r0, [r3, #0]
 800c09c:	2302      	movs	r3, #2
 800c09e:	2200      	movs	r2, #0
 800c0a0:	4917      	ldr	r1, [pc, #92]	@ (800c100 <sensorsTask+0x170>)
 800c0a2:	f7fa f9eb 	bl	800647c <xQueueGenericSend>
			}

	    	xSemaphoreGive(dataReady);
 800c0a6:	4b17      	ldr	r3, [pc, #92]	@ (800c104 <sensorsTask+0x174>)
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	2100      	movs	r1, #0
 800c0b0:	f7fa f9e4 	bl	800647c <xQueueGenericSend>
	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800c0b4:	e775      	b.n	800bfa2 <sensorsTask+0x12>
 800c0b6:	bf00      	nop
 800c0b8:	2000827c 	.word	0x2000827c
 800c0bc:	20008360 	.word	0x20008360
 800c0c0:	20008328 	.word	0x20008328
 800c0c4:	20008484 	.word	0x20008484
 800c0c8:	20008474 	.word	0x20008474
 800c0cc:	20008440 	.word	0x20008440
 800c0d0:	2000849c 	.word	0x2000849c
 800c0d4:	200084a0 	.word	0x200084a0
 800c0d8:	200084a4 	.word	0x200084a4
 800c0dc:	2000826c 	.word	0x2000826c
 800c0e0:	20008490 	.word	0x20008490
 800c0e4:	20008494 	.word	0x20008494
 800c0e8:	20008498 	.word	0x20008498
 800c0ec:	20008270 	.word	0x20008270
 800c0f0:	20008334 	.word	0x20008334
 800c0f4:	20008488 	.word	0x20008488
 800c0f8:	2000848c 	.word	0x2000848c
 800c0fc:	20008278 	.word	0x20008278
 800c100:	2000834c 	.word	0x2000834c
 800c104:	200082d0 	.word	0x200082d0

0800c108 <sensorsMpu6500Bmp280WaitDataReady>:
	    }
	}

}
void sensorsMpu6500Bmp280WaitDataReady(void)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	af00      	add	r7, sp, #0
	xSemaphoreTake(dataReady, portMAX_DELAY);
 800c10c:	4b04      	ldr	r3, [pc, #16]	@ (800c120 <sensorsMpu6500Bmp280WaitDataReady+0x18>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f04f 31ff 	mov.w	r1, #4294967295
 800c114:	4618      	mov	r0, r3
 800c116:	f7fa fccf 	bl	8006ab8 <xQueueSemaphoreTake>
}
 800c11a:	bf00      	nop
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200082d0 	.word	0x200082d0

0800c124 <processAccGyroMeasurements>:
void processAccGyroMeasurements()
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
	Axis3f gyroScaledIMU;
	Axis3f accScaledIMU;
//	Axis3f accScaled;
	accelRaw.x = ((int16_t) imu.buf[0] << 8 | imu.buf[1]);
 800c12a:	4b79      	ldr	r3, [pc, #484]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	021b      	lsls	r3, r3, #8
 800c130:	b21a      	sxth	r2, r3
 800c132:	4b77      	ldr	r3, [pc, #476]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c134:	785b      	ldrb	r3, [r3, #1]
 800c136:	b21b      	sxth	r3, r3
 800c138:	4313      	orrs	r3, r2
 800c13a:	b21a      	sxth	r2, r3
 800c13c:	4b75      	ldr	r3, [pc, #468]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c13e:	801a      	strh	r2, [r3, #0]
	accelRaw.y = ((int16_t) imu.buf[2] << 8 | imu.buf[3]);
 800c140:	4b73      	ldr	r3, [pc, #460]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c142:	789b      	ldrb	r3, [r3, #2]
 800c144:	021b      	lsls	r3, r3, #8
 800c146:	b21a      	sxth	r2, r3
 800c148:	4b71      	ldr	r3, [pc, #452]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c14a:	78db      	ldrb	r3, [r3, #3]
 800c14c:	b21b      	sxth	r3, r3
 800c14e:	4313      	orrs	r3, r2
 800c150:	b21a      	sxth	r2, r3
 800c152:	4b70      	ldr	r3, [pc, #448]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c154:	805a      	strh	r2, [r3, #2]
	accelRaw.z = ((int16_t) imu.buf[4] << 8 | imu.buf[5]);
 800c156:	4b6e      	ldr	r3, [pc, #440]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c158:	791b      	ldrb	r3, [r3, #4]
 800c15a:	021b      	lsls	r3, r3, #8
 800c15c:	b21a      	sxth	r2, r3
 800c15e:	4b6c      	ldr	r3, [pc, #432]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c160:	795b      	ldrb	r3, [r3, #5]
 800c162:	b21b      	sxth	r3, r3
 800c164:	4313      	orrs	r3, r2
 800c166:	b21a      	sxth	r2, r3
 800c168:	4b6a      	ldr	r3, [pc, #424]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c16a:	809a      	strh	r2, [r3, #4]
	gyroRaw.x = ((int16_t) imu.buf[8] << 8 | imu.buf[9]);
 800c16c:	4b68      	ldr	r3, [pc, #416]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c16e:	7a1b      	ldrb	r3, [r3, #8]
 800c170:	021b      	lsls	r3, r3, #8
 800c172:	b21a      	sxth	r2, r3
 800c174:	4b66      	ldr	r3, [pc, #408]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c176:	7a5b      	ldrb	r3, [r3, #9]
 800c178:	b21b      	sxth	r3, r3
 800c17a:	4313      	orrs	r3, r2
 800c17c:	b21a      	sxth	r2, r3
 800c17e:	4b66      	ldr	r3, [pc, #408]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c180:	801a      	strh	r2, [r3, #0]
	gyroRaw.y = ((int16_t) imu.buf[10] << 8 | imu.buf[11]);
 800c182:	4b63      	ldr	r3, [pc, #396]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c184:	7a9b      	ldrb	r3, [r3, #10]
 800c186:	021b      	lsls	r3, r3, #8
 800c188:	b21a      	sxth	r2, r3
 800c18a:	4b61      	ldr	r3, [pc, #388]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c18c:	7adb      	ldrb	r3, [r3, #11]
 800c18e:	b21b      	sxth	r3, r3
 800c190:	4313      	orrs	r3, r2
 800c192:	b21a      	sxth	r2, r3
 800c194:	4b60      	ldr	r3, [pc, #384]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c196:	805a      	strh	r2, [r3, #2]
	gyroRaw.z = ((int16_t) imu.buf[12] << 8 | imu.buf[13]);
 800c198:	4b5d      	ldr	r3, [pc, #372]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c19a:	7b1b      	ldrb	r3, [r3, #12]
 800c19c:	021b      	lsls	r3, r3, #8
 800c19e:	b21a      	sxth	r2, r3
 800c1a0:	4b5b      	ldr	r3, [pc, #364]	@ (800c310 <processAccGyroMeasurements+0x1ec>)
 800c1a2:	7b5b      	ldrb	r3, [r3, #13]
 800c1a4:	b21b      	sxth	r3, r3
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	b21a      	sxth	r2, r3
 800c1aa:	4b5b      	ldr	r3, [pc, #364]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c1ac:	809a      	strh	r2, [r3, #4]

	gyroBiasFound = processGyroBias(gyroRaw.x, gyroRaw.y, gyroRaw.z, &gyroBias);
 800c1ae:	4b5a      	ldr	r3, [pc, #360]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c1b0:	f9b3 0000 	ldrsh.w	r0, [r3]
 800c1b4:	4b58      	ldr	r3, [pc, #352]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c1b6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800c1ba:	4b57      	ldr	r3, [pc, #348]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c1bc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800c1c0:	4b56      	ldr	r3, [pc, #344]	@ (800c31c <processAccGyroMeasurements+0x1f8>)
 800c1c2:	f000 fb53 	bl	800c86c <processGyroBias>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	461a      	mov	r2, r3
 800c1ca:	4b55      	ldr	r3, [pc, #340]	@ (800c320 <processAccGyroMeasurements+0x1fc>)
 800c1cc:	701a      	strb	r2, [r3, #0]

	if (gyroBiasFound) {
 800c1ce:	4b54      	ldr	r3, [pc, #336]	@ (800c320 <processAccGyroMeasurements+0x1fc>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d00b      	beq.n	800c1ee <processAccGyroMeasurements+0xca>
		processAccScale(accelRaw.x, accelRaw.y, accelRaw.z);
 800c1d6:	4b4f      	ldr	r3, [pc, #316]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c1d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1dc:	4a4d      	ldr	r2, [pc, #308]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c1de:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800c1e2:	4a4c      	ldr	r2, [pc, #304]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c1e4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 fa4d 	bl	800c688 <processAccScale>
	}

	gyroScaledIMU.x = -(gyroRaw.x - gyroBias.x) * SENSORS_DEG_PER_LSB_CFG;
 800c1ee:	4b4a      	ldr	r3, [pc, #296]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c1f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1f4:	ee07 3a90 	vmov	s15, r3
 800c1f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c1fc:	4b47      	ldr	r3, [pc, #284]	@ (800c31c <processAccGyroMeasurements+0x1f8>)
 800c1fe:	edd3 7a00 	vldr	s15, [r3]
 800c202:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c206:	eef1 7a67 	vneg.f32	s15, s15
 800c20a:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800c324 <processAccGyroMeasurements+0x200>
 800c20e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c212:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroScaledIMU.y = (gyroRaw.y - gyroBias.y) * SENSORS_DEG_PER_LSB_CFG;
 800c216:	4b40      	ldr	r3, [pc, #256]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c218:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c21c:	ee07 3a90 	vmov	s15, r3
 800c220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c224:	4b3d      	ldr	r3, [pc, #244]	@ (800c31c <processAccGyroMeasurements+0x1f8>)
 800c226:	edd3 7a01 	vldr	s15, [r3, #4]
 800c22a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c22e:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800c324 <processAccGyroMeasurements+0x200>
 800c232:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c236:	edc7 7a04 	vstr	s15, [r7, #16]
	gyroScaledIMU.z = (gyroRaw.z - gyroBias.z) * SENSORS_DEG_PER_LSB_CFG;
 800c23a:	4b37      	ldr	r3, [pc, #220]	@ (800c318 <processAccGyroMeasurements+0x1f4>)
 800c23c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c240:	ee07 3a90 	vmov	s15, r3
 800c244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c248:	4b34      	ldr	r3, [pc, #208]	@ (800c31c <processAccGyroMeasurements+0x1f8>)
 800c24a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c24e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c252:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800c324 <processAccGyroMeasurements+0x200>
 800c256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c25a:	edc7 7a05 	vstr	s15, [r7, #20]
	sensorsAlignToAirframe(&gyroScaledIMU, &sensorData.gyro);
 800c25e:	f107 030c 	add.w	r3, r7, #12
 800c262:	4931      	ldr	r1, [pc, #196]	@ (800c328 <processAccGyroMeasurements+0x204>)
 800c264:	4618      	mov	r0, r3
 800c266:	f000 fe6f 	bl	800cf48 <sensorsAlignToAirframe>
	applyAxis3fLpf((lpf2pData*) (&gyroLpf), &sensorData.gyro);
 800c26a:	492f      	ldr	r1, [pc, #188]	@ (800c328 <processAccGyroMeasurements+0x204>)
 800c26c:	482f      	ldr	r0, [pc, #188]	@ (800c32c <processAccGyroMeasurements+0x208>)
 800c26e:	f001 f845 	bl	800d2fc <applyAxis3fLpf>

	accScaledIMU.x = -(accelRaw.x - accBias.x) * SENSORS_G_PER_LSB_CFG / accScale;
 800c272:	4b28      	ldr	r3, [pc, #160]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c274:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c278:	ee07 3a90 	vmov	s15, r3
 800c27c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c280:	4b2b      	ldr	r3, [pc, #172]	@ (800c330 <processAccGyroMeasurements+0x20c>)
 800c282:	edd3 7a00 	vldr	s15, [r3]
 800c286:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c28a:	eef1 7a67 	vneg.f32	s15, s15
 800c28e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800c334 <processAccGyroMeasurements+0x210>
 800c292:	ee67 6a87 	vmul.f32	s13, s15, s14
 800c296:	4b28      	ldr	r3, [pc, #160]	@ (800c338 <processAccGyroMeasurements+0x214>)
 800c298:	ed93 7a00 	vldr	s14, [r3]
 800c29c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2a0:	edc7 7a00 	vstr	s15, [r7]
	accScaledIMU.y = (accelRaw.y - accBias.y) * SENSORS_G_PER_LSB_CFG / accScale;
 800c2a4:	4b1b      	ldr	r3, [pc, #108]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c2a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800c2aa:	ee07 3a90 	vmov	s15, r3
 800c2ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c2b2:	4b1f      	ldr	r3, [pc, #124]	@ (800c330 <processAccGyroMeasurements+0x20c>)
 800c2b4:	edd3 7a01 	vldr	s15, [r3, #4]
 800c2b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2bc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800c334 <processAccGyroMeasurements+0x210>
 800c2c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 800c2c4:	4b1c      	ldr	r3, [pc, #112]	@ (800c338 <processAccGyroMeasurements+0x214>)
 800c2c6:	ed93 7a00 	vldr	s14, [r3]
 800c2ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2ce:	edc7 7a01 	vstr	s15, [r7, #4]
	accScaledIMU.z = (accelRaw.z) * SENSORS_G_PER_LSB_CFG / accScale;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	@ (800c314 <processAccGyroMeasurements+0x1f0>)
 800c2d4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c2d8:	ee07 3a90 	vmov	s15, r3
 800c2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c2e0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800c334 <processAccGyroMeasurements+0x210>
 800c2e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 800c2e8:	4b13      	ldr	r3, [pc, #76]	@ (800c338 <processAccGyroMeasurements+0x214>)
 800c2ea:	ed93 7a00 	vldr	s14, [r3]
 800c2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f2:	edc7 7a02 	vstr	s15, [r7, #8]
	sensorsAlignToAirframe(&accScaledIMU, &sensorData.acc);
 800c2f6:	463b      	mov	r3, r7
 800c2f8:	4910      	ldr	r1, [pc, #64]	@ (800c33c <processAccGyroMeasurements+0x218>)
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 fe24 	bl	800cf48 <sensorsAlignToAirframe>
//	sensorsAccAlignToGravity(&accScaled, &sensorData.acc);
	applyAxis3fLpf((lpf2pData*) (&accLpf), &sensorData.acc);
 800c300:	490e      	ldr	r1, [pc, #56]	@ (800c33c <processAccGyroMeasurements+0x218>)
 800c302:	480f      	ldr	r0, [pc, #60]	@ (800c340 <processAccGyroMeasurements+0x21c>)
 800c304:	f000 fffa 	bl	800d2fc <applyAxis3fLpf>


}
 800c308:	bf00      	nop
 800c30a:	3718      	adds	r7, #24
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	20008474 	.word	0x20008474
 800c314:	20008370 	.word	0x20008370
 800c318:	20008368 	.word	0x20008368
 800c31c:	20008378 	.word	0x20008378
 800c320:	20008390 	.word	0x20008390
 800c324:	3d7a0000 	.word	0x3d7a0000
 800c328:	20008334 	.word	0x20008334
 800c32c:	200083ec 	.word	0x200083ec
 800c330:	20008384 	.word	0x20008384
 800c334:	3a000000 	.word	0x3a000000
 800c338:	20000014 	.word	0x20000014
 800c33c:	20008328 	.word	0x20008328
 800c340:	20008398 	.word	0x20008398

0800c344 <processBarometerMeasurements>:
static void processBarometerMeasurements()
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b084      	sub	sp, #16
 800c348:	af00      	add	r7, sp, #0
	float pressure, temperature,asl;
	bmp280GetData(&pressure, &temperature, &asl);
 800c34a:	1d3a      	adds	r2, r7, #4
 800c34c:	f107 0108 	add.w	r1, r7, #8
 800c350:	f107 030c 	add.w	r3, r7, #12
 800c354:	4618      	mov	r0, r3
 800c356:	f7fd fce7 	bl	8009d28 <bmp280GetData>

	sensorData.baro.pressure = pressure / 100.0f;
 800c35a:	ed97 7a03 	vldr	s14, [r7, #12]
 800c35e:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800c38c <processBarometerMeasurements+0x48>
 800c362:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c366:	4b0a      	ldr	r3, [pc, #40]	@ (800c390 <processBarometerMeasurements+0x4c>)
 800c368:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensorData.baro.temperature = temperature;
 800c36c:	68bb      	ldr	r3, [r7, #8]
 800c36e:	4a08      	ldr	r2, [pc, #32]	@ (800c390 <processBarometerMeasurements+0x4c>)
 800c370:	6293      	str	r3, [r2, #40]	@ 0x28
	sensorData.baro.asl = bmp280PressureToAltitude(&sensorData.baro.pressure);
 800c372:	4808      	ldr	r0, [pc, #32]	@ (800c394 <processBarometerMeasurements+0x50>)
 800c374:	f7fd fcf0 	bl	8009d58 <bmp280PressureToAltitude>
 800c378:	eef0 7a40 	vmov.f32	s15, s0
 800c37c:	4b04      	ldr	r3, [pc, #16]	@ (800c390 <processBarometerMeasurements+0x4c>)
 800c37e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800c382:	bf00      	nop
 800c384:	3710      	adds	r7, #16
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	42c80000 	.word	0x42c80000
 800c390:	20008328 	.word	0x20008328
 800c394:	2000834c 	.word	0x2000834c

0800c398 <sensorsDeviceInit>:
static void sensorsDeviceInit(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
	isMagnetometerPresent = false;
 800c39e:	4b2f      	ldr	r3, [pc, #188]	@ (800c45c <sensorsDeviceInit+0xc4>)
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	701a      	strb	r2, [r3, #0]
	isBarometerPresent = false;
 800c3a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c460 <sensorsDeviceInit+0xc8>)
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	701a      	strb	r2, [r3, #0]
	TickType_t xStartTime = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	603b      	str	r3, [r7, #0]
	vTaskDelayUntil(&xStartTime, T2M(1000));
 800c3ae:	463b      	mov	r3, r7
 800c3b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	f7fa ffb7 	bl	8007328 <vTaskDelayUntil>
//	stand = 1;// JH

	if ( mpu6500TestConnection() == false ){
 800c3ba:	f7fe fad5 	bl	800a968 <mpu6500TestConnection>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	f083 0301 	eor.w	r3, r3, #1
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <sensorsDeviceInit+0x36>
//		stand = 1;//NJH
		while(1);
 800c3ca:	bf00      	nop
 800c3cc:	e7fd      	b.n	800c3ca <sensorsDeviceInit+0x32>
	}
	vTaskDelay(100);
 800c3ce:	2064      	movs	r0, #100	@ 0x64
 800c3d0:	f7fb f820 	bl	8007414 <vTaskDelay>
//	stand = 1;// NJH
	mpu6500Init();
 800c3d4:	f7fe faec 	bl	800a9b0 <mpu6500Init>
//	stand = 1;// NJH

	vTaskDelay(100);
 800c3d8:	2064      	movs	r0, #100	@ 0x64
 800c3da:	f7fb f81b 	bl	8007414 <vTaskDelay>
	for (uint8_t i = 0; i < 3; i++) {
 800c3de:	2300      	movs	r3, #0
 800c3e0:	71fb      	strb	r3, [r7, #7]
 800c3e2:	e01e      	b.n	800c422 <sensorsDeviceInit+0x8a>
		lpf2pInit(&gyroLpf[i], 1000, GYRO_LPF_CUTOFF_FREQ);
 800c3e4:	79fa      	ldrb	r2, [r7, #7]
 800c3e6:	4613      	mov	r3, r2
 800c3e8:	00db      	lsls	r3, r3, #3
 800c3ea:	1a9b      	subs	r3, r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c464 <sensorsDeviceInit+0xcc>)
 800c3f0:	4413      	add	r3, r2
 800c3f2:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800c468 <sensorsDeviceInit+0xd0>
 800c3f6:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800c46c <sensorsDeviceInit+0xd4>
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f007 fcce 	bl	8013d9c <lpf2pInit>
		lpf2pInit(&accLpf[i], 1000, ACCEL_LPF_CUTOFF_FREQ);
 800c400:	79fa      	ldrb	r2, [r7, #7]
 800c402:	4613      	mov	r3, r2
 800c404:	00db      	lsls	r3, r3, #3
 800c406:	1a9b      	subs	r3, r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4a19      	ldr	r2, [pc, #100]	@ (800c470 <sensorsDeviceInit+0xd8>)
 800c40c:	4413      	add	r3, r2
 800c40e:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800c412:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800c46c <sensorsDeviceInit+0xd4>
 800c416:	4618      	mov	r0, r3
 800c418:	f007 fcc0 	bl	8013d9c <lpf2pInit>
	for (uint8_t i = 0; i < 3; i++) {
 800c41c:	79fb      	ldrb	r3, [r7, #7]
 800c41e:	3301      	adds	r3, #1
 800c420:	71fb      	strb	r3, [r7, #7]
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	2b02      	cmp	r3, #2
 800c426:	d9dd      	bls.n	800c3e4 <sensorsDeviceInit+0x4c>
	}

	vTaskDelay(10);
 800c428:	200a      	movs	r0, #10
 800c42a:	f7fa fff3 	bl	8007414 <vTaskDelay>
	bmp280Init();
 800c42e:	f7fd fc43 	bl	8009cb8 <bmp280Init>
	if (bmp280TestConnection() == true){
 800c432:	f7fd fc59 	bl	8009ce8 <bmp280TestConnection>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <sensorsDeviceInit+0xac>
		isBarometerPresent = true;
 800c43c:	4b08      	ldr	r3, [pc, #32]	@ (800c460 <sensorsDeviceInit+0xc8>)
 800c43e:	2201      	movs	r2, #1
 800c440:	701a      	strb	r2, [r3, #0]
 800c442:	e004      	b.n	800c44e <sensorsDeviceInit+0xb6>
	}
	else{
		isBarometerPresent = false;
 800c444:	4b06      	ldr	r3, [pc, #24]	@ (800c460 <sensorsDeviceInit+0xc8>)
 800c446:	2200      	movs	r2, #0
 800c448:	701a      	strb	r2, [r3, #0]
		while(1);
 800c44a:	bf00      	nop
 800c44c:	e7fd      	b.n	800c44a <sensorsDeviceInit+0xb2>
	}
	vTaskDelay(10);
 800c44e:	200a      	movs	r0, #10
 800c450:	f7fa ffe0 	bl	8007414 <vTaskDelay>

}
 800c454:	bf00      	nop
 800c456:	3708      	adds	r7, #8
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	20008441 	.word	0x20008441
 800c460:	20008440 	.word	0x20008440
 800c464:	200083ec 	.word	0x200083ec
 800c468:	42a00000 	.word	0x42a00000
 800c46c:	447a0000 	.word	0x447a0000
 800c470:	20008398 	.word	0x20008398

0800c474 <sensorsTaskInit>:
static void sensorsTaskInit(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af04      	add	r7, sp, #16
	accelerometerDataQueue = STATIC_MEM_QUEUE_CREATE(accelerometerDataQueue);
 800c47a:	2301      	movs	r3, #1
 800c47c:	4618      	mov	r0, r3
 800c47e:	230c      	movs	r3, #12
 800c480:	4619      	mov	r1, r3
 800c482:	2300      	movs	r3, #0
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	4b1f      	ldr	r3, [pc, #124]	@ (800c504 <sensorsTaskInit+0x90>)
 800c488:	4a1f      	ldr	r2, [pc, #124]	@ (800c508 <sensorsTaskInit+0x94>)
 800c48a:	f7f9 fee3 	bl	8006254 <xQueueGenericCreateStatic>
 800c48e:	4603      	mov	r3, r0
 800c490:	4a1e      	ldr	r2, [pc, #120]	@ (800c50c <sensorsTaskInit+0x98>)
 800c492:	6013      	str	r3, [r2, #0]
	gyroDataQueue = STATIC_MEM_QUEUE_CREATE(gyroDataQueue);
 800c494:	2301      	movs	r3, #1
 800c496:	4618      	mov	r0, r3
 800c498:	230c      	movs	r3, #12
 800c49a:	4619      	mov	r1, r3
 800c49c:	2300      	movs	r3, #0
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	4b1b      	ldr	r3, [pc, #108]	@ (800c510 <sensorsTaskInit+0x9c>)
 800c4a2:	4a1c      	ldr	r2, [pc, #112]	@ (800c514 <sensorsTaskInit+0xa0>)
 800c4a4:	f7f9 fed6 	bl	8006254 <xQueueGenericCreateStatic>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c518 <sensorsTaskInit+0xa4>)
 800c4ac:	6013      	str	r3, [r2, #0]
	magnetometerDataQueue = STATIC_MEM_QUEUE_CREATE(magnetometerDataQueue);
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	230c      	movs	r3, #12
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	9300      	str	r3, [sp, #0]
 800c4ba:	4b18      	ldr	r3, [pc, #96]	@ (800c51c <sensorsTaskInit+0xa8>)
 800c4bc:	4a18      	ldr	r2, [pc, #96]	@ (800c520 <sensorsTaskInit+0xac>)
 800c4be:	f7f9 fec9 	bl	8006254 <xQueueGenericCreateStatic>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	4a17      	ldr	r2, [pc, #92]	@ (800c524 <sensorsTaskInit+0xb0>)
 800c4c6:	6013      	str	r3, [r2, #0]
	barometerDataQueue = STATIC_MEM_QUEUE_CREATE(barometerDataQueue);
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	230c      	movs	r3, #12
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	4b14      	ldr	r3, [pc, #80]	@ (800c528 <sensorsTaskInit+0xb4>)
 800c4d6:	4a15      	ldr	r2, [pc, #84]	@ (800c52c <sensorsTaskInit+0xb8>)
 800c4d8:	f7f9 febc 	bl	8006254 <xQueueGenericCreateStatic>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	4a14      	ldr	r2, [pc, #80]	@ (800c530 <sensorsTaskInit+0xbc>)
 800c4e0:	6013      	str	r3, [r2, #0]

	STATIC_MEM_TASK_CREATE(sensorsTask, sensorsTask, SENSORS_TASK_NAME, NULL, SENSORS_TASK_PRI);
 800c4e2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	4b12      	ldr	r3, [pc, #72]	@ (800c534 <sensorsTaskInit+0xc0>)
 800c4ea:	9302      	str	r3, [sp, #8]
 800c4ec:	4b12      	ldr	r3, [pc, #72]	@ (800c538 <sensorsTaskInit+0xc4>)
 800c4ee:	9301      	str	r3, [sp, #4]
 800c4f0:	2304      	movs	r3, #4
 800c4f2:	9300      	str	r3, [sp, #0]
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	4911      	ldr	r1, [pc, #68]	@ (800c53c <sensorsTaskInit+0xc8>)
 800c4f8:	4811      	ldr	r0, [pc, #68]	@ (800c540 <sensorsTaskInit+0xcc>)
 800c4fa:	f7fa fd6d 	bl	8006fd8 <xTaskCreateStatic>

}
 800c4fe:	bf00      	nop
 800c500:	46bd      	mov	sp, r7
 800c502:	bd80      	pop	{r7, pc}
 800c504:	100003b0 	.word	0x100003b0
 800c508:	100003a4 	.word	0x100003a4
 800c50c:	2000826c 	.word	0x2000826c
 800c510:	1000040c 	.word	0x1000040c
 800c514:	10000400 	.word	0x10000400
 800c518:	20008270 	.word	0x20008270
 800c51c:	10000468 	.word	0x10000468
 800c520:	1000045c 	.word	0x1000045c
 800c524:	20008274 	.word	0x20008274
 800c528:	100004c4 	.word	0x100004c4
 800c52c:	100004b8 	.word	0x100004b8
 800c530:	20008278 	.word	0x20008278
 800c534:	10001d40 	.word	0x10001d40
 800c538:	200084a8 	.word	0x200084a8
 800c53c:	0801bf7c 	.word	0x0801bf7c
 800c540:	0800bf91 	.word	0x0800bf91

0800c544 <sensorsInterruptInit>:

static void sensorsInterruptInit(void)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c54a:	1d3b      	adds	r3, r7, #4
 800c54c:	2200      	movs	r2, #0
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	605a      	str	r2, [r3, #4]
 800c552:	609a      	str	r2, [r3, #8]
 800c554:	60da      	str	r2, [r3, #12]
 800c556:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800c558:	2300      	movs	r3, #0
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	4b1c      	ldr	r3, [pc, #112]	@ (800c5d0 <sensorsInterruptInit+0x8c>)
 800c55e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c560:	4a1b      	ldr	r2, [pc, #108]	@ (800c5d0 <sensorsInterruptInit+0x8c>)
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	6313      	str	r3, [r2, #48]	@ 0x30
 800c568:	4b19      	ldr	r3, [pc, #100]	@ (800c5d0 <sensorsInterruptInit+0x8c>)
 800c56a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c56c:	f003 0301 	and.w	r3, r3, #1
 800c570:	603b      	str	r3, [r7, #0]
 800c572:	683b      	ldr	r3, [r7, #0]

	sensorsDataReady = xSemaphoreCreateBinaryStatic(&sensorsDataReadyBuffer);
 800c574:	2303      	movs	r3, #3
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	4b16      	ldr	r3, [pc, #88]	@ (800c5d4 <sensorsInterruptInit+0x90>)
 800c57a:	2200      	movs	r2, #0
 800c57c:	2100      	movs	r1, #0
 800c57e:	2001      	movs	r0, #1
 800c580:	f7f9 fe68 	bl	8006254 <xQueueGenericCreateStatic>
 800c584:	4603      	mov	r3, r0
 800c586:	4a14      	ldr	r2, [pc, #80]	@ (800c5d8 <sensorsInterruptInit+0x94>)
 800c588:	6013      	str	r3, [r2, #0]
	dataReady = xSemaphoreCreateBinaryStatic(&dataReadyBuffer);
 800c58a:	2303      	movs	r3, #3
 800c58c:	9300      	str	r3, [sp, #0]
 800c58e:	4b13      	ldr	r3, [pc, #76]	@ (800c5dc <sensorsInterruptInit+0x98>)
 800c590:	2200      	movs	r2, #0
 800c592:	2100      	movs	r1, #0
 800c594:	2001      	movs	r0, #1
 800c596:	f7f9 fe5d 	bl	8006254 <xQueueGenericCreateStatic>
 800c59a:	4603      	mov	r3, r0
 800c59c:	4a10      	ldr	r2, [pc, #64]	@ (800c5e0 <sensorsInterruptInit+0x9c>)
 800c59e:	6013      	str	r3, [r2, #0]


	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800c5a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800c5a8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5ae:	1d3b      	adds	r3, r7, #4
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	480c      	ldr	r0, [pc, #48]	@ (800c5e4 <sensorsInterruptInit+0xa0>)
 800c5b4:	f7f5 fa6a 	bl	8001a8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2107      	movs	r1, #7
 800c5bc:	2007      	movs	r0, #7
 800c5be:	f7f4 fe9d 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800c5c2:	2007      	movs	r0, #7
 800c5c4:	f7f4 feb6 	bl	8001334 <HAL_NVIC_EnableIRQ>
}
 800c5c8:	bf00      	nop
 800c5ca:	3718      	adds	r7, #24
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}
 800c5d0:	40023800 	.word	0x40023800
 800c5d4:	20008280 	.word	0x20008280
 800c5d8:	2000827c 	.word	0x2000827c
 800c5dc:	200082d4 	.word	0x200082d4
 800c5e0:	200082d0 	.word	0x200082d0
 800c5e4:	40020000 	.word	0x40020000

0800c5e8 <sensorsMpu6500Bmp280Init>:

void sensorsMpu6500Bmp280Init(void)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	af00      	add	r7, sp, #0
	if (isInit) {
 800c5ec:	4b09      	ldr	r3, [pc, #36]	@ (800c614 <sensorsMpu6500Bmp280Init+0x2c>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10c      	bne.n	800c60e <sensorsMpu6500Bmp280Init+0x26>
		return;
	}
	sensorsBiasObjInit(&gyroBiasRunning);
 800c5f4:	4808      	ldr	r0, [pc, #32]	@ (800c618 <sensorsMpu6500Bmp280Init+0x30>)
 800c5f6:	f000 f96d 	bl	800c8d4 <sensorsBiasObjInit>
//	stand = 1;//JH

	sensorsDeviceInit();
 800c5fa:	f7ff fecd 	bl	800c398 <sensorsDeviceInit>
//	stand = 1;//NJH

	sensorsInterruptInit();
 800c5fe:	f7ff ffa1 	bl	800c544 <sensorsInterruptInit>
	sensorsTaskInit();
 800c602:	f7ff ff37 	bl	800c474 <sensorsTaskInit>

	isInit = true;
 800c606:	4b03      	ldr	r3, [pc, #12]	@ (800c614 <sensorsMpu6500Bmp280Init+0x2c>)
 800c608:	2201      	movs	r2, #1
 800c60a:	701a      	strb	r2, [r3, #0]
 800c60c:	e000      	b.n	800c610 <sensorsMpu6500Bmp280Init+0x28>
		return;
 800c60e:	bf00      	nop
}
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20008324 	.word	0x20008324
 800c618:	10000514 	.word	0x10000514

0800c61c <sensorsMpu6500Bmp280Test>:
bool sensorsMpu6500Bmp280Test(void)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
	  bool testStatus = true;
 800c622:	2301      	movs	r3, #1
 800c624:	71fb      	strb	r3, [r7, #7]

	  if (!isInit)
 800c626:	4b16      	ldr	r3, [pc, #88]	@ (800c680 <sensorsMpu6500Bmp280Test+0x64>)
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	f083 0301 	eor.w	r3, r3, #1
 800c62e:	b2db      	uxtb	r3, r3
 800c630:	2b00      	cmp	r3, #0
 800c632:	d001      	beq.n	800c638 <sensorsMpu6500Bmp280Test+0x1c>
	  {
	    testStatus = false;
 800c634:	2300      	movs	r3, #0
 800c636:	71fb      	strb	r3, [r7, #7]
	  }

	  // Try for 3 seconds so the quad has stabilized enough to pass the test
	  for (int i = 0; i < 300; i++)
 800c638:	2300      	movs	r3, #0
 800c63a:	603b      	str	r3, [r7, #0]
 800c63c:	e00e      	b.n	800c65c <sensorsMpu6500Bmp280Test+0x40>
	  {
	    if(mpu6500SelfTest() == true)
 800c63e:	f7fe f9af 	bl	800a9a0 <mpu6500SelfTest>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <sensorsMpu6500Bmp280Test+0x34>
	    {
	    	isMpu6500TestPassed = true;
 800c648:	4b0e      	ldr	r3, [pc, #56]	@ (800c684 <sensorsMpu6500Bmp280Test+0x68>)
 800c64a:	2201      	movs	r2, #1
 800c64c:	701a      	strb	r2, [r3, #0]
	      break;
 800c64e:	e009      	b.n	800c664 <sensorsMpu6500Bmp280Test+0x48>
	    }
	    else
	    {
	      vTaskDelay(M2T(10));
 800c650:	200a      	movs	r0, #10
 800c652:	f7fa fedf 	bl	8007414 <vTaskDelay>
	  for (int i = 0; i < 300; i++)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	3301      	adds	r3, #1
 800c65a:	603b      	str	r3, [r7, #0]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800c662:	dbec      	blt.n	800c63e <sensorsMpu6500Bmp280Test+0x22>
	    }
	  }
	  testStatus &= isMpu6500TestPassed;
 800c664:	79fb      	ldrb	r3, [r7, #7]
 800c666:	4a07      	ldr	r2, [pc, #28]	@ (800c684 <sensorsMpu6500Bmp280Test+0x68>)
 800c668:	7812      	ldrb	r2, [r2, #0]
 800c66a:	4013      	ands	r3, r2
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	bf14      	ite	ne
 800c670:	2301      	movne	r3, #1
 800c672:	2300      	moveq	r3, #0
 800c674:	71fb      	strb	r3, [r7, #7]
	    isLPS25HTestPassed = lps25hSelfTest();
	    testStatus = isLPS25HTestPassed;
	  }
	#endif

	  return true;
 800c676:	2301      	movs	r3, #1
//	  return testStatus;
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3708      	adds	r7, #8
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}
 800c680:	20008324 	.word	0x20008324
 800c684:	20008442 	.word	0x20008442

0800c688 <processAccScale>:

static bool processAccScale(int16_t ax, int16_t ay, int16_t az)
{
 800c688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c68c:	ed2d 8b02 	vpush	{d8}
 800c690:	b088      	sub	sp, #32
 800c692:	af00      	add	r7, sp, #0
 800c694:	4603      	mov	r3, r0
 800c696:	83fb      	strh	r3, [r7, #30]
 800c698:	460b      	mov	r3, r1
 800c69a:	83bb      	strh	r3, [r7, #28]
 800c69c:	4613      	mov	r3, r2
 800c69e:	837b      	strh	r3, [r7, #26]
  static bool accBiasFound = false;
  static uint32_t accScaleSumCount = 0;
  static int64_t accSum[GYRO_NBR_OF_AXES] = {0};


  if (!accBiasFound)
 800c6a0:	4b6a      	ldr	r3, [pc, #424]	@ (800c84c <processAccScale+0x1c4>)
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	f083 0301 	eor.w	r3, r3, #1
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	f000 80c5 	beq.w	800c83a <processAccScale+0x1b2>
  {
    accScaleSum += sqrtf(powf(ax * SENSORS_G_PER_LSB_CFG, 2) + powf(ay * SENSORS_G_PER_LSB_CFG, 2) + powf(az * SENSORS_G_PER_LSB_CFG, 2));
 800c6b0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800c6b4:	ee07 3a90 	vmov	s15, r3
 800c6b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6bc:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800c850 <processAccScale+0x1c8>
 800c6c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6c4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c6c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c6cc:	f00c fef0 	bl	80194b0 <powf>
 800c6d0:	eeb0 8a40 	vmov.f32	s16, s0
 800c6d4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c6d8:	ee07 3a90 	vmov	s15, r3
 800c6dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c6e0:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800c850 <processAccScale+0x1c8>
 800c6e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c6e8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c6ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c6f0:	f00c fede 	bl	80194b0 <powf>
 800c6f4:	eef0 7a40 	vmov.f32	s15, s0
 800c6f8:	ee38 8a27 	vadd.f32	s16, s16, s15
 800c6fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800c700:	ee07 3a90 	vmov	s15, r3
 800c704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c708:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800c850 <processAccScale+0x1c8>
 800c70c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c710:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c714:	eeb0 0a67 	vmov.f32	s0, s15
 800c718:	f00c feca 	bl	80194b0 <powf>
 800c71c:	eef0 7a40 	vmov.f32	s15, s0
 800c720:	ee78 7a27 	vadd.f32	s15, s16, s15
 800c724:	eeb0 0a67 	vmov.f32	s0, s15
 800c728:	f00c ff1a 	bl	8019560 <sqrtf>
 800c72c:	eeb0 7a40 	vmov.f32	s14, s0
 800c730:	4b48      	ldr	r3, [pc, #288]	@ (800c854 <processAccScale+0x1cc>)
 800c732:	edd3 7a00 	vldr	s15, [r3]
 800c736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c73a:	4b46      	ldr	r3, [pc, #280]	@ (800c854 <processAccScale+0x1cc>)
 800c73c:	edc3 7a00 	vstr	s15, [r3]
    accScaleSumCount++;
 800c740:	4b45      	ldr	r3, [pc, #276]	@ (800c858 <processAccScale+0x1d0>)
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	3301      	adds	r3, #1
 800c746:	4a44      	ldr	r2, [pc, #272]	@ (800c858 <processAccScale+0x1d0>)
 800c748:	6013      	str	r3, [r2, #0]
    accSum[0] += ax;
 800c74a:	4b44      	ldr	r3, [pc, #272]	@ (800c85c <processAccScale+0x1d4>)
 800c74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c750:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800c754:	17c8      	asrs	r0, r1, #31
 800c756:	468a      	mov	sl, r1
 800c758:	4683      	mov	fp, r0
 800c75a:	eb12 010a 	adds.w	r1, r2, sl
 800c75e:	6139      	str	r1, [r7, #16]
 800c760:	eb43 030b 	adc.w	r3, r3, fp
 800c764:	617b      	str	r3, [r7, #20]
 800c766:	4b3d      	ldr	r3, [pc, #244]	@ (800c85c <processAccScale+0x1d4>)
 800c768:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c76c:	e9c3 1200 	strd	r1, r2, [r3]
    accSum[1] += ay;
 800c770:	4b3a      	ldr	r3, [pc, #232]	@ (800c85c <processAccScale+0x1d4>)
 800c772:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c776:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800c77a:	17c8      	asrs	r0, r1, #31
 800c77c:	4688      	mov	r8, r1
 800c77e:	4681      	mov	r9, r0
 800c780:	eb12 0108 	adds.w	r1, r2, r8
 800c784:	60b9      	str	r1, [r7, #8]
 800c786:	eb43 0309 	adc.w	r3, r3, r9
 800c78a:	60fb      	str	r3, [r7, #12]
 800c78c:	4b33      	ldr	r3, [pc, #204]	@ (800c85c <processAccScale+0x1d4>)
 800c78e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c792:	e9c3 1202 	strd	r1, r2, [r3, #8]
    accSum[2] += az;
 800c796:	4b31      	ldr	r3, [pc, #196]	@ (800c85c <processAccScale+0x1d4>)
 800c798:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c79c:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800c7a0:	17c8      	asrs	r0, r1, #31
 800c7a2:	460c      	mov	r4, r1
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	1911      	adds	r1, r2, r4
 800c7a8:	6039      	str	r1, [r7, #0]
 800c7aa:	416b      	adcs	r3, r5
 800c7ac:	607b      	str	r3, [r7, #4]
 800c7ae:	4b2b      	ldr	r3, [pc, #172]	@ (800c85c <processAccScale+0x1d4>)
 800c7b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c7b4:	e9c3 1204 	strd	r1, r2, [r3, #16]

    if (accScaleSumCount == SENSORS_ACC_SCALE_SAMPLES)
 800c7b8:	4b27      	ldr	r3, [pc, #156]	@ (800c858 <processAccScale+0x1d0>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	2bc8      	cmp	r3, #200	@ 0xc8
 800c7be:	d13c      	bne.n	800c83a <processAccScale+0x1b2>
    {
      accScale = accScaleSum / SENSORS_ACC_SCALE_SAMPLES;
 800c7c0:	4b24      	ldr	r3, [pc, #144]	@ (800c854 <processAccScale+0x1cc>)
 800c7c2:	ed93 7a00 	vldr	s14, [r3]
 800c7c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c860 <processAccScale+0x1d8>
 800c7ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c7ce:	4b25      	ldr	r3, [pc, #148]	@ (800c864 <processAccScale+0x1dc>)
 800c7d0:	edc3 7a00 	vstr	s15, [r3]
      accBias.x = (float) accSum[0] / SENSORS_ACC_SCALE_SAMPLES;
 800c7d4:	4b21      	ldr	r3, [pc, #132]	@ (800c85c <processAccScale+0x1d4>)
 800c7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7da:	4610      	mov	r0, r2
 800c7dc:	4619      	mov	r1, r3
 800c7de:	f7f4 fa8d 	bl	8000cfc <__aeabi_l2f>
 800c7e2:	ee06 0a90 	vmov	s13, r0
 800c7e6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800c860 <processAccScale+0x1d8>
 800c7ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c868 <processAccScale+0x1e0>)
 800c7f0:	edc3 7a00 	vstr	s15, [r3]
      accBias.y = (float) accSum[1] / SENSORS_ACC_SCALE_SAMPLES;
 800c7f4:	4b19      	ldr	r3, [pc, #100]	@ (800c85c <processAccScale+0x1d4>)
 800c7f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c7fa:	4610      	mov	r0, r2
 800c7fc:	4619      	mov	r1, r3
 800c7fe:	f7f4 fa7d 	bl	8000cfc <__aeabi_l2f>
 800c802:	ee06 0a90 	vmov	s13, r0
 800c806:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800c860 <processAccScale+0x1d8>
 800c80a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c80e:	4b16      	ldr	r3, [pc, #88]	@ (800c868 <processAccScale+0x1e0>)
 800c810:	edc3 7a01 	vstr	s15, [r3, #4]
      accBias.z = (float) accSum[2] / SENSORS_ACC_SCALE_SAMPLES;
 800c814:	4b11      	ldr	r3, [pc, #68]	@ (800c85c <processAccScale+0x1d4>)
 800c816:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c81a:	4610      	mov	r0, r2
 800c81c:	4619      	mov	r1, r3
 800c81e:	f7f4 fa6d 	bl	8000cfc <__aeabi_l2f>
 800c822:	ee06 0a90 	vmov	s13, r0
 800c826:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c860 <processAccScale+0x1d8>
 800c82a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c82e:	4b0e      	ldr	r3, [pc, #56]	@ (800c868 <processAccScale+0x1e0>)
 800c830:	edc3 7a02 	vstr	s15, [r3, #8]
      accBiasFound = true;
 800c834:	4b05      	ldr	r3, [pc, #20]	@ (800c84c <processAccScale+0x1c4>)
 800c836:	2201      	movs	r2, #1
 800c838:	701a      	strb	r2, [r3, #0]
    }
  }

  return accBiasFound;
 800c83a:	4b04      	ldr	r3, [pc, #16]	@ (800c84c <processAccScale+0x1c4>)
 800c83c:	781b      	ldrb	r3, [r3, #0]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	ecbd 8b02 	vpop	{d8}
 800c848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c84c:	20008958 	.word	0x20008958
 800c850:	3a000000 	.word	0x3a000000
 800c854:	20008394 	.word	0x20008394
 800c858:	2000895c 	.word	0x2000895c
 800c85c:	20008960 	.word	0x20008960
 800c860:	43480000 	.word	0x43480000
 800c864:	20000014 	.word	0x20000014
 800c868:	20008384 	.word	0x20008384

0800c86c <processGyroBias>:
static bool processGyroBias(int16_t gx, int16_t gy, int16_t gz,  Axis3f *gyroBiasOut)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b084      	sub	sp, #16
 800c870:	af00      	add	r7, sp, #0
 800c872:	607b      	str	r3, [r7, #4]
 800c874:	4603      	mov	r3, r0
 800c876:	81fb      	strh	r3, [r7, #14]
 800c878:	460b      	mov	r3, r1
 800c87a:	81bb      	strh	r3, [r7, #12]
 800c87c:	4613      	mov	r3, r2
 800c87e:	817b      	strh	r3, [r7, #10]
	sensorsAddBiasValue(&gyroBiasRunning, gx, gy, gz);
 800c880:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c884:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c888:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800c88c:	4810      	ldr	r0, [pc, #64]	@ (800c8d0 <processGyroBias+0x64>)
 800c88e:	f000 f9e3 	bl	800cc58 <sensorsAddBiasValue>

	if (!gyroBiasRunning.isBiasValueFound)
 800c892:	4b0f      	ldr	r3, [pc, #60]	@ (800c8d0 <processGyroBias+0x64>)
 800c894:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c898:	f083 0301 	eor.w	r3, r3, #1
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d002      	beq.n	800c8a8 <processGyroBias+0x3c>
	{
		sensorsFindBiasValue(&gyroBiasRunning);
 800c8a2:	480b      	ldr	r0, [pc, #44]	@ (800c8d0 <processGyroBias+0x64>)
 800c8a4:	f000 fa0e 	bl	800ccc4 <sensorsFindBiasValue>
	}

	gyroBiasOut->x = gyroBiasRunning.bias.x;
 800c8a8:	4b09      	ldr	r3, [pc, #36]	@ (800c8d0 <processGyroBias+0x64>)
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	601a      	str	r2, [r3, #0]
	gyroBiasOut->y = gyroBiasRunning.bias.y;
 800c8b0:	4b07      	ldr	r3, [pc, #28]	@ (800c8d0 <processGyroBias+0x64>)
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	605a      	str	r2, [r3, #4]
	gyroBiasOut->z = gyroBiasRunning.bias.z;
 800c8b8:	4b05      	ldr	r3, [pc, #20]	@ (800c8d0 <processGyroBias+0x64>)
 800c8ba:	689a      	ldr	r2, [r3, #8]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	609a      	str	r2, [r3, #8]

	return gyroBiasRunning.isBiasValueFound;
 800c8c0:	4b03      	ldr	r3, [pc, #12]	@ (800c8d0 <processGyroBias+0x64>)
 800c8c2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3710      	adds	r7, #16
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	10000514 	.word	0x10000514

0800c8d4 <sensorsBiasObjInit>:
static void sensorsBiasObjInit(BiasObj* bias)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  bias->isBufferFilled = false;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  bias->bufHead = bias->buffer;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c8ee:	bf00      	nop
 800c8f0:	370c      	adds	r7, #12
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
	...

0800c8fc <sensorsCalculateVarianceAndMean>:

static void sensorsCalculateVarianceAndMean(BiasObj* bias, Axis3f* varOut, Axis3f* meanOut)
{
 800c8fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c900:	b0ac      	sub	sp, #176	@ 0xb0
 800c902:	af00      	add	r7, sp, #0
 800c904:	6778      	str	r0, [r7, #116]	@ 0x74
 800c906:	6739      	str	r1, [r7, #112]	@ 0x70
 800c908:	66fa      	str	r2, [r7, #108]	@ 0x6c
  uint32_t i;
  int64_t sum[GYRO_NBR_OF_AXES] = {0};
 800c90a:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800c90e:	2300      	movs	r3, #0
 800c910:	6013      	str	r3, [r2, #0]
 800c912:	6053      	str	r3, [r2, #4]
 800c914:	6093      	str	r3, [r2, #8]
 800c916:	60d3      	str	r3, [r2, #12]
 800c918:	6113      	str	r3, [r2, #16]
 800c91a:	6153      	str	r3, [r2, #20]
  int64_t sumSq[GYRO_NBR_OF_AXES] = {0};
 800c91c:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800c920:	2300      	movs	r3, #0
 800c922:	6013      	str	r3, [r2, #0]
 800c924:	6053      	str	r3, [r2, #4]
 800c926:	6093      	str	r3, [r2, #8]
 800c928:	60d3      	str	r3, [r2, #12]
 800c92a:	6113      	str	r3, [r2, #16]
 800c92c:	6153      	str	r3, [r2, #20]

  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800c92e:	2300      	movs	r3, #0
 800c930:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c934:	e0d8      	b.n	800cae8 <sensorsCalculateVarianceAndMean+0x1ec>
  {
		sum[0] += bias->buffer[i].x;
 800c936:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800c93a:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c93c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c940:	4613      	mov	r3, r2
 800c942:	005b      	lsls	r3, r3, #1
 800c944:	4413      	add	r3, r2
 800c946:	005b      	lsls	r3, r3, #1
 800c948:	4423      	add	r3, r4
 800c94a:	332c      	adds	r3, #44	@ 0x2c
 800c94c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c950:	b21b      	sxth	r3, r3
 800c952:	17da      	asrs	r2, r3, #31
 800c954:	663b      	str	r3, [r7, #96]	@ 0x60
 800c956:	667a      	str	r2, [r7, #100]	@ 0x64
 800c958:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c95c:	4623      	mov	r3, r4
 800c95e:	18c3      	adds	r3, r0, r3
 800c960:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c962:	462b      	mov	r3, r5
 800c964:	eb41 0303 	adc.w	r3, r1, r3
 800c968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c96a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c96e:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
		sum[1] += bias->buffer[i].y;
 800c972:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c976:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c978:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c97c:	4613      	mov	r3, r2
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	4413      	add	r3, r2
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	4423      	add	r3, r4
 800c986:	332e      	adds	r3, #46	@ 0x2e
 800c988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c98c:	b21b      	sxth	r3, r3
 800c98e:	17da      	asrs	r2, r3, #31
 800c990:	653b      	str	r3, [r7, #80]	@ 0x50
 800c992:	657a      	str	r2, [r7, #84]	@ 0x54
 800c994:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c998:	4623      	mov	r3, r4
 800c99a:	18c3      	adds	r3, r0, r3
 800c99c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c99e:	462b      	mov	r3, r5
 800c9a0:	eb41 0303 	adc.w	r3, r1, r3
 800c9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9a6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800c9aa:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
		sum[2] += bias->buffer[i].z;
 800c9ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800c9b2:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c9b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	005b      	lsls	r3, r3, #1
 800c9bc:	4413      	add	r3, r2
 800c9be:	005b      	lsls	r3, r3, #1
 800c9c0:	4423      	add	r3, r4
 800c9c2:	3330      	adds	r3, #48	@ 0x30
 800c9c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c8:	b21b      	sxth	r3, r3
 800c9ca:	17da      	asrs	r2, r3, #31
 800c9cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800c9ce:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9d0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c9d4:	4623      	mov	r3, r4
 800c9d6:	18c3      	adds	r3, r0, r3
 800c9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c9da:	462b      	mov	r3, r5
 800c9dc:	eb41 0303 	adc.w	r3, r1, r3
 800c9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c9e2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c9e6:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
		sumSq[0] += bias->buffer[i].x * bias->buffer[i].x;
 800c9ea:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800c9ee:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c9f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	005b      	lsls	r3, r3, #1
 800c9f8:	4413      	add	r3, r2
 800c9fa:	005b      	lsls	r3, r3, #1
 800c9fc:	4423      	add	r3, r4
 800c9fe:	332c      	adds	r3, #44	@ 0x2c
 800ca00:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca04:	461d      	mov	r5, r3
 800ca06:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800ca08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ca0c:	4613      	mov	r3, r2
 800ca0e:	005b      	lsls	r3, r3, #1
 800ca10:	4413      	add	r3, r2
 800ca12:	005b      	lsls	r3, r3, #1
 800ca14:	4423      	add	r3, r4
 800ca16:	332c      	adds	r3, #44	@ 0x2c
 800ca18:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca1c:	fb05 f303 	mul.w	r3, r5, r3
 800ca20:	17da      	asrs	r2, r3, #31
 800ca22:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca24:	637a      	str	r2, [r7, #52]	@ 0x34
 800ca26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800ca2a:	4623      	mov	r3, r4
 800ca2c:	18c3      	adds	r3, r0, r3
 800ca2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca30:	462b      	mov	r3, r5
 800ca32:	eb41 0303 	adc.w	r3, r1, r3
 800ca36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca38:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800ca3c:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
		sumSq[1] += bias->buffer[i].y * bias->buffer[i].y;
 800ca40:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800ca44:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800ca46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	005b      	lsls	r3, r3, #1
 800ca52:	4423      	add	r3, r4
 800ca54:	332e      	adds	r3, #46	@ 0x2e
 800ca56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca5a:	461d      	mov	r5, r3
 800ca5c:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800ca5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800ca62:	4613      	mov	r3, r2
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	4413      	add	r3, r2
 800ca68:	005b      	lsls	r3, r3, #1
 800ca6a:	4423      	add	r3, r4
 800ca6c:	332e      	adds	r3, #46	@ 0x2e
 800ca6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ca72:	fb05 f303 	mul.w	r3, r5, r3
 800ca76:	17da      	asrs	r2, r3, #31
 800ca78:	623b      	str	r3, [r7, #32]
 800ca7a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ca7c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800ca80:	4623      	mov	r3, r4
 800ca82:	18c3      	adds	r3, r0, r3
 800ca84:	61bb      	str	r3, [r7, #24]
 800ca86:	462b      	mov	r3, r5
 800ca88:	eb41 0303 	adc.w	r3, r1, r3
 800ca8c:	61fb      	str	r3, [r7, #28]
 800ca8e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800ca92:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
		sumSq[2] += bias->buffer[i].z * bias->buffer[i].z;
 800ca96:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800ca9a:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800ca9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800caa0:	4613      	mov	r3, r2
 800caa2:	005b      	lsls	r3, r3, #1
 800caa4:	4413      	add	r3, r2
 800caa6:	005b      	lsls	r3, r3, #1
 800caa8:	4423      	add	r3, r4
 800caaa:	3330      	adds	r3, #48	@ 0x30
 800caac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cab0:	461d      	mov	r5, r3
 800cab2:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800cab4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cab8:	4613      	mov	r3, r2
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	4413      	add	r3, r2
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	4423      	add	r3, r4
 800cac2:	3330      	adds	r3, #48	@ 0x30
 800cac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800cac8:	fb05 f303 	mul.w	r3, r5, r3
 800cacc:	17da      	asrs	r2, r3, #31
 800cace:	4698      	mov	r8, r3
 800cad0:	4691      	mov	r9, r2
 800cad2:	eb10 0a08 	adds.w	sl, r0, r8
 800cad6:	eb41 0b09 	adc.w	fp, r1, r9
 800cada:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88
  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800cade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cae2:	3301      	adds	r3, #1
 800cae4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cae8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800caf0:	f4ff af21 	bcc.w	800c936 <sensorsCalculateVarianceAndMean+0x3a>

  }



  meanOut->x = (float) sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800caf4:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800caf8:	4610      	mov	r0, r2
 800cafa:	4619      	mov	r1, r3
 800cafc:	f7f4 f8fe 	bl	8000cfc <__aeabi_l2f>
 800cb00:	ee06 0a90 	vmov	s13, r0
 800cb04:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800cc54 <sensorsCalculateVarianceAndMean+0x358>
 800cb08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb0e:	edc3 7a00 	vstr	s15, [r3]
  meanOut->y = (float) sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800cb12:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800cb16:	4610      	mov	r0, r2
 800cb18:	4619      	mov	r1, r3
 800cb1a:	f7f4 f8ef 	bl	8000cfc <__aeabi_l2f>
 800cb1e:	ee06 0a90 	vmov	s13, r0
 800cb22:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800cc54 <sensorsCalculateVarianceAndMean+0x358>
 800cb26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb2c:	edc3 7a01 	vstr	s15, [r3, #4]
  meanOut->z = (float) sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800cb30:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800cb34:	4610      	mov	r0, r2
 800cb36:	4619      	mov	r1, r3
 800cb38:	f7f4 f8e0 	bl	8000cfc <__aeabi_l2f>
 800cb3c:	ee06 0a90 	vmov	s13, r0
 800cb40:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800cc54 <sensorsCalculateVarianceAndMean+0x358>
 800cb44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb4a:	edc3 7a02 	vstr	s15, [r3, #8]

  varOut->x = sumSq[0] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->x * meanOut->x;
 800cb4e:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	da08      	bge.n	800cb68 <sensorsCalculateVarianceAndMean+0x26c>
 800cb56:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800cb5a:	1851      	adds	r1, r2, r1
 800cb5c:	6139      	str	r1, [r7, #16]
 800cb5e:	f143 0300 	adc.w	r3, r3, #0
 800cb62:	617b      	str	r3, [r7, #20]
 800cb64:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cb68:	f04f 0000 	mov.w	r0, #0
 800cb6c:	f04f 0100 	mov.w	r1, #0
 800cb70:	0a90      	lsrs	r0, r2, #10
 800cb72:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800cb76:	1299      	asrs	r1, r3, #10
 800cb78:	4602      	mov	r2, r0
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4610      	mov	r0, r2
 800cb7e:	4619      	mov	r1, r3
 800cb80:	f7f4 f8bc 	bl	8000cfc <__aeabi_l2f>
 800cb84:	ee06 0a90 	vmov	s13, r0
 800cb88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb8a:	ed93 7a00 	vldr	s14, [r3]
 800cb8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb90:	edd3 7a00 	vldr	s15, [r3]
 800cb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb98:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cb9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cb9e:	edc3 7a00 	vstr	s15, [r3]
  varOut->y = sumSq[1] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->y * meanOut->y;
 800cba2:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	da08      	bge.n	800cbbc <sensorsCalculateVarianceAndMean+0x2c0>
 800cbaa:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800cbae:	1851      	adds	r1, r2, r1
 800cbb0:	60b9      	str	r1, [r7, #8]
 800cbb2:	f143 0300 	adc.w	r3, r3, #0
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cbbc:	f04f 0000 	mov.w	r0, #0
 800cbc0:	f04f 0100 	mov.w	r1, #0
 800cbc4:	0a90      	lsrs	r0, r2, #10
 800cbc6:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800cbca:	1299      	asrs	r1, r3, #10
 800cbcc:	4602      	mov	r2, r0
 800cbce:	460b      	mov	r3, r1
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	f7f4 f892 	bl	8000cfc <__aeabi_l2f>
 800cbd8:	ee06 0a90 	vmov	s13, r0
 800cbdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbde:	ed93 7a01 	vldr	s14, [r3, #4]
 800cbe2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbe4:	edd3 7a01 	vldr	s15, [r3, #4]
 800cbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbec:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cbf0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbf2:	edc3 7a01 	vstr	s15, [r3, #4]
  varOut->z = sumSq[2] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->z * meanOut->z;
 800cbf6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	da08      	bge.n	800cc10 <sensorsCalculateVarianceAndMean+0x314>
 800cbfe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800cc02:	1851      	adds	r1, r2, r1
 800cc04:	6039      	str	r1, [r7, #0]
 800cc06:	f143 0300 	adc.w	r3, r3, #0
 800cc0a:	607b      	str	r3, [r7, #4]
 800cc0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc10:	f04f 0000 	mov.w	r0, #0
 800cc14:	f04f 0100 	mov.w	r1, #0
 800cc18:	0a90      	lsrs	r0, r2, #10
 800cc1a:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800cc1e:	1299      	asrs	r1, r3, #10
 800cc20:	4602      	mov	r2, r0
 800cc22:	460b      	mov	r3, r1
 800cc24:	4610      	mov	r0, r2
 800cc26:	4619      	mov	r1, r3
 800cc28:	f7f4 f868 	bl	8000cfc <__aeabi_l2f>
 800cc2c:	ee06 0a90 	vmov	s13, r0
 800cc30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc32:	ed93 7a02 	vldr	s14, [r3, #8]
 800cc36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cc38:	edd3 7a02 	vldr	s15, [r3, #8]
 800cc3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800cc44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cc46:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800cc4a:	bf00      	nop
 800cc4c:	37b0      	adds	r7, #176	@ 0xb0
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc54:	44800000 	.word	0x44800000

0800cc58 <sensorsAddBiasValue>:
  meanOut->x = sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->y = sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->z = sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
}
static void sensorsAddBiasValue(BiasObj* bias, int16_t x, int16_t y, int16_t z)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	4608      	mov	r0, r1
 800cc62:	4611      	mov	r1, r2
 800cc64:	461a      	mov	r2, r3
 800cc66:	4603      	mov	r3, r0
 800cc68:	817b      	strh	r3, [r7, #10]
 800cc6a:	460b      	mov	r3, r1
 800cc6c:	813b      	strh	r3, [r7, #8]
 800cc6e:	4613      	mov	r3, r2
 800cc70:	80fb      	strh	r3, [r7, #6]
  bias->bufHead->x = x;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc76:	897a      	ldrh	r2, [r7, #10]
 800cc78:	801a      	strh	r2, [r3, #0]
  bias->bufHead->y = y;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7e:	893a      	ldrh	r2, [r7, #8]
 800cc80:	805a      	strh	r2, [r3, #2]
  bias->bufHead->z = z;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc86:	88fa      	ldrh	r2, [r7, #6]
 800cc88:	809a      	strh	r2, [r3, #4]
  bias->bufHead++;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc8e:	1d9a      	adds	r2, r3, #6
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (bias->bufHead >= &bias->buffer[SENSORS_NBR_OF_BIAS_SAMPLES])
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f503 53c1 	add.w	r3, r3, #6176	@ 0x1820
 800cc9e:	330c      	adds	r3, #12
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d308      	bcc.n	800ccb6 <sensorsAddBiasValue+0x5e>
  {
    bias->bufHead = bias->buffer;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	629a      	str	r2, [r3, #40]	@ 0x28
    bias->isBufferFilled = true;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2201      	movs	r2, #1
 800ccb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
}
 800ccb6:	bf00      	nop
 800ccb8:	3714      	adds	r7, #20
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc0:	4770      	bx	lr
	...

0800ccc4 <sensorsFindBiasValue>:
static bool sensorsFindBiasValue(BiasObj* bias)
{
 800ccc4:	b590      	push	{r4, r7, lr}
 800ccc6:	b085      	sub	sp, #20
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  static int32_t varianceSampleTime;
  bool foundBias = false;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73fb      	strb	r3, [r7, #15]

  if (bias->isBufferFilled)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d047      	beq.n	800cd6a <sensorsFindBiasValue+0xa6>
  {
    sensorsCalculateVarianceAndMean(bias, &bias->variance, &bias->mean);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	f103 010c 	add.w	r1, r3, #12
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	3318      	adds	r3, #24
 800cce4:	461a      	mov	r2, r3
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fe08 	bl	800c8fc <sensorsCalculateVarianceAndMean>

    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	edd3 7a03 	vldr	s15, [r3, #12]
 800ccf2:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800cd74 <sensorsFindBiasValue+0xb0>
 800ccf6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ccfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccfe:	d534      	bpl.n	800cd6a <sensorsFindBiasValue+0xa6>
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	edd3 7a04 	vldr	s15, [r3, #16]
    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800cd06:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800cd74 <sensorsFindBiasValue+0xb0>
 800cd0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd12:	d52a      	bpl.n	800cd6a <sensorsFindBiasValue+0xa6>
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	edd3 7a05 	vldr	s15, [r3, #20]
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800cd1a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800cd74 <sensorsFindBiasValue+0xb0>
 800cd1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd26:	d520      	bpl.n	800cd6a <sensorsFindBiasValue+0xa6>
        (varianceSampleTime + GYRO_MIN_BIAS_TIMEOUT_MS < xTaskGetTickCount()))
 800cd28:	4b13      	ldr	r3, [pc, #76]	@ (800cd78 <sensorsFindBiasValue+0xb4>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 800cd30:	f7fa fcc0 	bl	80076b4 <xTaskGetTickCount>
 800cd34:	4603      	mov	r3, r0
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800cd36:	429c      	cmp	r4, r3
 800cd38:	d217      	bcs.n	800cd6a <sensorsFindBiasValue+0xa6>
    {
      varianceSampleTime = xTaskGetTickCount();
 800cd3a:	f7fa fcbb 	bl	80076b4 <xTaskGetTickCount>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	461a      	mov	r2, r3
 800cd42:	4b0d      	ldr	r3, [pc, #52]	@ (800cd78 <sensorsFindBiasValue+0xb4>)
 800cd44:	601a      	str	r2, [r3, #0]
      bias->bias.x = bias->mean.x;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	699a      	ldr	r2, [r3, #24]
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	601a      	str	r2, [r3, #0]
      bias->bias.y = bias->mean.y;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	69da      	ldr	r2, [r3, #28]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	605a      	str	r2, [r3, #4]
      bias->bias.z = bias->mean.z;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6a1a      	ldr	r2, [r3, #32]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	609a      	str	r2, [r3, #8]
      foundBias = true;
 800cd5e:	2301      	movs	r3, #1
 800cd60:	73fb      	strb	r3, [r7, #15]
      bias->isBiasValueFound = true;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
  }

  return foundBias;
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3714      	adds	r7, #20
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd90      	pop	{r4, r7, pc}
 800cd74:	42480000 	.word	0x42480000
 800cd78:	20008978 	.word	0x20008978

0800cd7c <sensorsMpu6500Bmp280ManufacturingTest>:

bool sensorsMpu6500Bmp280ManufacturingTest(void)
{
 800cd7c:	b590      	push	{r4, r7, lr}
 800cd7e:	ed2d 8b02 	vpush	{d8}
 800cd82:	b08f      	sub	sp, #60	@ 0x3c
 800cd84:	af02      	add	r7, sp, #8
	bool testStatus = false;
 800cd86:	2300      	movs	r3, #0
 800cd88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	Axis3i16 g;
	Axis3i16 a;
	Axis3f acc;  // Accelerometer axis data in mG
	float pitch, roll;
	uint32_t startTick = xTaskGetTickCount();
 800cd8c:	f7fa fc92 	bl	80076b4 <xTaskGetTickCount>
 800cd90:	62b8      	str	r0, [r7, #40]	@ 0x28

	testStatus = mpu6500SelfTest();
 800cd92:	f7fd fe05 	bl	800a9a0 <mpu6500SelfTest>
 800cd96:	4603      	mov	r3, r0
 800cd98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (testStatus)
 800cd9c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	f000 80bc 	beq.w	800cf1e <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
	{
		sensorsBiasObjInit(&gyroBiasRunning);
 800cda6:	4862      	ldr	r0, [pc, #392]	@ (800cf30 <sensorsMpu6500Bmp280ManufacturingTest+0x1b4>)
 800cda8:	f7ff fd94 	bl	800c8d4 <sensorsBiasObjInit>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800cdac:	e024      	b.n	800cdf8 <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
		{
			mpu6500GetMotion6(&a.y, &a.x, &a.z, &g.y, &g.x, &g.z);
 800cdae:	f107 0318 	add.w	r3, r7, #24
 800cdb2:	1c9c      	adds	r4, r3, #2
 800cdb4:	f107 0310 	add.w	r3, r7, #16
 800cdb8:	1d1a      	adds	r2, r3, #4
 800cdba:	f107 0110 	add.w	r1, r7, #16
 800cdbe:	f107 0310 	add.w	r3, r7, #16
 800cdc2:	1c98      	adds	r0, r3, #2
 800cdc4:	f107 0318 	add.w	r3, r7, #24
 800cdc8:	3304      	adds	r3, #4
 800cdca:	9301      	str	r3, [sp, #4]
 800cdcc:	f107 0318 	add.w	r3, r7, #24
 800cdd0:	9300      	str	r3, [sp, #0]
 800cdd2:	4623      	mov	r3, r4
 800cdd4:	f7fd fe86 	bl	800aae4 <mpu6500GetMotion6>
			if (processGyroBias(g.x, g.y, g.z, &gyroBias))
 800cdd8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800cddc:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800cde0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800cde4:	4b53      	ldr	r3, [pc, #332]	@ (800cf34 <sensorsMpu6500Bmp280ManufacturingTest+0x1b8>)
 800cde6:	f7ff fd41 	bl	800c86c <processGyroBias>
 800cdea:	4603      	mov	r3, r0
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d003      	beq.n	800cdf8 <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
			{
				gyroBiasFound = true;
 800cdf0:	4b51      	ldr	r3, [pc, #324]	@ (800cf38 <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	701a      	strb	r2, [r3, #0]
				break;
 800cdf6:	e007      	b.n	800ce08 <sensorsMpu6500Bmp280ManufacturingTest+0x8c>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800cdf8:	f7fa fc5c 	bl	80076b4 <xTaskGetTickCount>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ce06:	d3d2      	bcc.n	800cdae <sensorsMpu6500Bmp280ManufacturingTest+0x32>
			}
		}

		if (gyroBiasFound) {
 800ce08:	4b4b      	ldr	r3, [pc, #300]	@ (800cf38 <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800ce0a:	781b      	ldrb	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f000 8083 	beq.w	800cf18 <sensorsMpu6500Bmp280ManufacturingTest+0x19c>
			acc.x = -(a.x) * SENSORS_G_PER_LSB_CFG;
 800ce12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ce16:	425b      	negs	r3, r3
 800ce18:	ee07 3a90 	vmov	s15, r3
 800ce1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce20:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800cf3c <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800ce24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce28:	edc7 7a01 	vstr	s15, [r7, #4]
			acc.y = (a.y) * SENSORS_G_PER_LSB_CFG;
 800ce2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce30:	ee07 3a90 	vmov	s15, r3
 800ce34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce38:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800cf3c <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800ce3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce40:	edc7 7a02 	vstr	s15, [r7, #8]
			acc.z = (a.z) * SENSORS_G_PER_LSB_CFG;
 800ce44:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ce48:	ee07 3a90 	vmov	s15, r3
 800ce4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce50:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800cf3c <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800ce54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce58:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate pitch and roll based on accelerometer. Board must be level
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800ce5c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ce60:	eeb1 8a67 	vneg.f32	s16, s15
 800ce64:	ed97 7a02 	vldr	s14, [r7, #8]
 800ce68:	edd7 7a02 	vldr	s15, [r7, #8]
 800ce6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce70:	edd7 6a03 	vldr	s13, [r7, #12]
 800ce74:	edd7 7a03 	vldr	s15, [r7, #12]
 800ce78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce80:	eeb0 0a67 	vmov.f32	s0, s15
 800ce84:	f00c fb6c 	bl	8019560 <sqrtf>
 800ce88:	eeb0 7a40 	vmov.f32	s14, s0
 800ce8c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800ce90:	eeb0 0a67 	vmov.f32	s0, s15
 800ce94:	f00c fc14 	bl	80196c0 <tanf>
 800ce98:	eef0 7a40 	vmov.f32	s15, s0
					* 180/(float) M_PI;
 800ce9c:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800cf40 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800cea0:	ee27 7a87 	vmul.f32	s14, s15, s14
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800cea4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800cf44 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800cea8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ceac:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			roll = tanf(acc.y / acc.z) * 180 / (float) M_PI;
 800ceb0:	ed97 7a02 	vldr	s14, [r7, #8]
 800ceb4:	edd7 7a03 	vldr	s15, [r7, #12]
 800ceb8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800cebc:	eeb0 0a66 	vmov.f32	s0, s13
 800cec0:	f00c fbfe 	bl	80196c0 <tanf>
 800cec4:	eef0 7a40 	vmov.f32	s15, s0
 800cec8:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800cf40 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800cecc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ced0:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800cf44 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800ced4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ced8:	edc7 7a08 	vstr	s15, [r7, #32]

			if ((fabsf(roll) < SENSORS_MAN_TEST_LEVEL_MAX) && (fabsf(pitch) < SENSORS_MAN_TEST_LEVEL_MAX))
 800cedc:	edd7 7a08 	vldr	s15, [r7, #32]
 800cee0:	eef0 7ae7 	vabs.f32	s15, s15
 800cee4:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800cee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ceec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef0:	d50e      	bpl.n	800cf10 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
 800cef2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800cef6:	eef0 7ae7 	vabs.f32	s15, s15
 800cefa:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800cefe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800cf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf06:	d503      	bpl.n	800cf10 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
			{
				testStatus = true;
 800cf08:	2301      	movs	r3, #1
 800cf0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cf0e:	e006      	b.n	800cf1e <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
			else
			{
				testStatus = false;
 800cf10:	2300      	movs	r3, #0
 800cf12:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800cf16:	e002      	b.n	800cf1e <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
		} else {

			testStatus = false;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}

	return testStatus;
 800cf1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3734      	adds	r7, #52	@ 0x34
 800cf26:	46bd      	mov	sp, r7
 800cf28:	ecbd 8b02 	vpop	{d8}
 800cf2c:	bd90      	pop	{r4, r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	10000514 	.word	0x10000514
 800cf34:	20008378 	.word	0x20008378
 800cf38:	20008390 	.word	0x20008390
 800cf3c:	3a000000 	.word	0x3a000000
 800cf40:	43340000 	.word	0x43340000
 800cf44:	40490fdb 	.word	0x40490fdb

0800cf48 <sensorsAlignToAirframe>:
	}

}

static void sensorsAlignToAirframe(Axis3f* in, Axis3f* out)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  // IMU alignment
  static float sphi, cphi, stheta, ctheta, spsi, cpsi;

  sphi   = sinf(imuPhi * (float) M_PI / 180);
 800cf52:	4bba      	ldr	r3, [pc, #744]	@ (800d23c <sensorsAlignToAirframe+0x2f4>)
 800cf54:	edd3 7a00 	vldr	s15, [r3]
 800cf58:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800d240 <sensorsAlignToAirframe+0x2f8>
 800cf5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf60:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 800d244 <sensorsAlignToAirframe+0x2fc>
 800cf64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cf68:	eeb0 0a47 	vmov.f32	s0, s14
 800cf6c:	f00c fb62 	bl	8019634 <sinf>
 800cf70:	eef0 7a40 	vmov.f32	s15, s0
 800cf74:	4bb4      	ldr	r3, [pc, #720]	@ (800d248 <sensorsAlignToAirframe+0x300>)
 800cf76:	edc3 7a00 	vstr	s15, [r3]
  cphi   = cosf(imuPhi * (float) M_PI / 180);
 800cf7a:	4bb0      	ldr	r3, [pc, #704]	@ (800d23c <sensorsAlignToAirframe+0x2f4>)
 800cf7c:	edd3 7a00 	vldr	s15, [r3]
 800cf80:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800d240 <sensorsAlignToAirframe+0x2f8>
 800cf84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cf88:	eddf 6aae 	vldr	s13, [pc, #696]	@ 800d244 <sensorsAlignToAirframe+0x2fc>
 800cf8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cf90:	eeb0 0a47 	vmov.f32	s0, s14
 800cf94:	f00c fb02 	bl	801959c <cosf>
 800cf98:	eef0 7a40 	vmov.f32	s15, s0
 800cf9c:	4bab      	ldr	r3, [pc, #684]	@ (800d24c <sensorsAlignToAirframe+0x304>)
 800cf9e:	edc3 7a00 	vstr	s15, [r3]
  stheta = sinf(imuTheta * (float) M_PI / 180);
 800cfa2:	4bab      	ldr	r3, [pc, #684]	@ (800d250 <sensorsAlignToAirframe+0x308>)
 800cfa4:	edd3 7a00 	vldr	s15, [r3]
 800cfa8:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800d240 <sensorsAlignToAirframe+0x2f8>
 800cfac:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfb0:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800d244 <sensorsAlignToAirframe+0x2fc>
 800cfb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cfb8:	eeb0 0a47 	vmov.f32	s0, s14
 800cfbc:	f00c fb3a 	bl	8019634 <sinf>
 800cfc0:	eef0 7a40 	vmov.f32	s15, s0
 800cfc4:	4ba3      	ldr	r3, [pc, #652]	@ (800d254 <sensorsAlignToAirframe+0x30c>)
 800cfc6:	edc3 7a00 	vstr	s15, [r3]
  ctheta = cosf(imuTheta * (float) M_PI / 180);
 800cfca:	4ba1      	ldr	r3, [pc, #644]	@ (800d250 <sensorsAlignToAirframe+0x308>)
 800cfcc:	edd3 7a00 	vldr	s15, [r3]
 800cfd0:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800d240 <sensorsAlignToAirframe+0x2f8>
 800cfd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800cfd8:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800d244 <sensorsAlignToAirframe+0x2fc>
 800cfdc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800cfe0:	eeb0 0a47 	vmov.f32	s0, s14
 800cfe4:	f00c fada 	bl	801959c <cosf>
 800cfe8:	eef0 7a40 	vmov.f32	s15, s0
 800cfec:	4b9a      	ldr	r3, [pc, #616]	@ (800d258 <sensorsAlignToAirframe+0x310>)
 800cfee:	edc3 7a00 	vstr	s15, [r3]
  spsi   = sinf(imuPsi * (float) M_PI / 180);
 800cff2:	4b9a      	ldr	r3, [pc, #616]	@ (800d25c <sensorsAlignToAirframe+0x314>)
 800cff4:	edd3 7a00 	vldr	s15, [r3]
 800cff8:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800d240 <sensorsAlignToAirframe+0x2f8>
 800cffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d000:	eddf 6a90 	vldr	s13, [pc, #576]	@ 800d244 <sensorsAlignToAirframe+0x2fc>
 800d004:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d008:	eeb0 0a47 	vmov.f32	s0, s14
 800d00c:	f00c fb12 	bl	8019634 <sinf>
 800d010:	eef0 7a40 	vmov.f32	s15, s0
 800d014:	4b92      	ldr	r3, [pc, #584]	@ (800d260 <sensorsAlignToAirframe+0x318>)
 800d016:	edc3 7a00 	vstr	s15, [r3]
  cpsi   = cosf(imuPsi * (float) M_PI / 180);
 800d01a:	4b90      	ldr	r3, [pc, #576]	@ (800d25c <sensorsAlignToAirframe+0x314>)
 800d01c:	edd3 7a00 	vldr	s15, [r3]
 800d020:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800d240 <sensorsAlignToAirframe+0x2f8>
 800d024:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d028:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800d244 <sensorsAlignToAirframe+0x2fc>
 800d02c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d030:	eeb0 0a47 	vmov.f32	s0, s14
 800d034:	f00c fab2 	bl	801959c <cosf>
 800d038:	eef0 7a40 	vmov.f32	s15, s0
 800d03c:	4b89      	ldr	r3, [pc, #548]	@ (800d264 <sensorsAlignToAirframe+0x31c>)
 800d03e:	edc3 7a00 	vstr	s15, [r3]

  // tait-bryan passive rotation in order: yaw, psi (1) -> pitch, theta (2) ->  roll, phi (3) [https://en.wikipedia.org/wiki/Euler_angles#cite_note-3]
  // mathematically R = R_x(phi)^T . R_y(theta)^T . R_z(psi)^T  [http://eecs.qmul.ac.uk/~gslabaugh/publications/euler.pdf]
  // transpose because it's a passive rotation not active [https://en.wikipedia.org/wiki/Active_and_passive_transformation]
  R[0][0] = ctheta * cpsi;
 800d042:	4b85      	ldr	r3, [pc, #532]	@ (800d258 <sensorsAlignToAirframe+0x310>)
 800d044:	ed93 7a00 	vldr	s14, [r3]
 800d048:	4b86      	ldr	r3, [pc, #536]	@ (800d264 <sensorsAlignToAirframe+0x31c>)
 800d04a:	edd3 7a00 	vldr	s15, [r3]
 800d04e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d052:	4b85      	ldr	r3, [pc, #532]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d054:	edc3 7a00 	vstr	s15, [r3]
  R[0][1] = ctheta * spsi;
 800d058:	4b7f      	ldr	r3, [pc, #508]	@ (800d258 <sensorsAlignToAirframe+0x310>)
 800d05a:	ed93 7a00 	vldr	s14, [r3]
 800d05e:	4b80      	ldr	r3, [pc, #512]	@ (800d260 <sensorsAlignToAirframe+0x318>)
 800d060:	edd3 7a00 	vldr	s15, [r3]
 800d064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d068:	4b7f      	ldr	r3, [pc, #508]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d06a:	edc3 7a01 	vstr	s15, [r3, #4]
  R[0][2] = -stheta;
 800d06e:	4b79      	ldr	r3, [pc, #484]	@ (800d254 <sensorsAlignToAirframe+0x30c>)
 800d070:	edd3 7a00 	vldr	s15, [r3]
 800d074:	eef1 7a67 	vneg.f32	s15, s15
 800d078:	4b7b      	ldr	r3, [pc, #492]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d07a:	edc3 7a02 	vstr	s15, [r3, #8]
  R[1][0] = sphi * stheta * cpsi - cphi * spsi;
 800d07e:	4b72      	ldr	r3, [pc, #456]	@ (800d248 <sensorsAlignToAirframe+0x300>)
 800d080:	ed93 7a00 	vldr	s14, [r3]
 800d084:	4b73      	ldr	r3, [pc, #460]	@ (800d254 <sensorsAlignToAirframe+0x30c>)
 800d086:	edd3 7a00 	vldr	s15, [r3]
 800d08a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d08e:	4b75      	ldr	r3, [pc, #468]	@ (800d264 <sensorsAlignToAirframe+0x31c>)
 800d090:	edd3 7a00 	vldr	s15, [r3]
 800d094:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d098:	4b6c      	ldr	r3, [pc, #432]	@ (800d24c <sensorsAlignToAirframe+0x304>)
 800d09a:	edd3 6a00 	vldr	s13, [r3]
 800d09e:	4b70      	ldr	r3, [pc, #448]	@ (800d260 <sensorsAlignToAirframe+0x318>)
 800d0a0:	edd3 7a00 	vldr	s15, [r3]
 800d0a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0ac:	4b6e      	ldr	r3, [pc, #440]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d0ae:	edc3 7a03 	vstr	s15, [r3, #12]
  R[1][1] = sphi * stheta * spsi + cphi * cpsi;
 800d0b2:	4b65      	ldr	r3, [pc, #404]	@ (800d248 <sensorsAlignToAirframe+0x300>)
 800d0b4:	ed93 7a00 	vldr	s14, [r3]
 800d0b8:	4b66      	ldr	r3, [pc, #408]	@ (800d254 <sensorsAlignToAirframe+0x30c>)
 800d0ba:	edd3 7a00 	vldr	s15, [r3]
 800d0be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0c2:	4b67      	ldr	r3, [pc, #412]	@ (800d260 <sensorsAlignToAirframe+0x318>)
 800d0c4:	edd3 7a00 	vldr	s15, [r3]
 800d0c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d0cc:	4b5f      	ldr	r3, [pc, #380]	@ (800d24c <sensorsAlignToAirframe+0x304>)
 800d0ce:	edd3 6a00 	vldr	s13, [r3]
 800d0d2:	4b64      	ldr	r3, [pc, #400]	@ (800d264 <sensorsAlignToAirframe+0x31c>)
 800d0d4:	edd3 7a00 	vldr	s15, [r3]
 800d0d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d0dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0e0:	4b61      	ldr	r3, [pc, #388]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d0e2:	edc3 7a04 	vstr	s15, [r3, #16]
  R[1][2] = sphi * ctheta;
 800d0e6:	4b58      	ldr	r3, [pc, #352]	@ (800d248 <sensorsAlignToAirframe+0x300>)
 800d0e8:	ed93 7a00 	vldr	s14, [r3]
 800d0ec:	4b5a      	ldr	r3, [pc, #360]	@ (800d258 <sensorsAlignToAirframe+0x310>)
 800d0ee:	edd3 7a00 	vldr	s15, [r3]
 800d0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0f6:	4b5c      	ldr	r3, [pc, #368]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d0f8:	edc3 7a05 	vstr	s15, [r3, #20]
  R[2][0] = cphi * stheta * cpsi + sphi * spsi;
 800d0fc:	4b53      	ldr	r3, [pc, #332]	@ (800d24c <sensorsAlignToAirframe+0x304>)
 800d0fe:	ed93 7a00 	vldr	s14, [r3]
 800d102:	4b54      	ldr	r3, [pc, #336]	@ (800d254 <sensorsAlignToAirframe+0x30c>)
 800d104:	edd3 7a00 	vldr	s15, [r3]
 800d108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d10c:	4b55      	ldr	r3, [pc, #340]	@ (800d264 <sensorsAlignToAirframe+0x31c>)
 800d10e:	edd3 7a00 	vldr	s15, [r3]
 800d112:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d116:	4b4c      	ldr	r3, [pc, #304]	@ (800d248 <sensorsAlignToAirframe+0x300>)
 800d118:	edd3 6a00 	vldr	s13, [r3]
 800d11c:	4b50      	ldr	r3, [pc, #320]	@ (800d260 <sensorsAlignToAirframe+0x318>)
 800d11e:	edd3 7a00 	vldr	s15, [r3]
 800d122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d12a:	4b4f      	ldr	r3, [pc, #316]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d12c:	edc3 7a06 	vstr	s15, [r3, #24]
  R[2][1] = cphi * stheta * spsi - sphi * cpsi;
 800d130:	4b46      	ldr	r3, [pc, #280]	@ (800d24c <sensorsAlignToAirframe+0x304>)
 800d132:	ed93 7a00 	vldr	s14, [r3]
 800d136:	4b47      	ldr	r3, [pc, #284]	@ (800d254 <sensorsAlignToAirframe+0x30c>)
 800d138:	edd3 7a00 	vldr	s15, [r3]
 800d13c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d140:	4b47      	ldr	r3, [pc, #284]	@ (800d260 <sensorsAlignToAirframe+0x318>)
 800d142:	edd3 7a00 	vldr	s15, [r3]
 800d146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d14a:	4b3f      	ldr	r3, [pc, #252]	@ (800d248 <sensorsAlignToAirframe+0x300>)
 800d14c:	edd3 6a00 	vldr	s13, [r3]
 800d150:	4b44      	ldr	r3, [pc, #272]	@ (800d264 <sensorsAlignToAirframe+0x31c>)
 800d152:	edd3 7a00 	vldr	s15, [r3]
 800d156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d15a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d15e:	4b42      	ldr	r3, [pc, #264]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d160:	edc3 7a07 	vstr	s15, [r3, #28]
  R[2][2] = cphi * ctheta;
 800d164:	4b39      	ldr	r3, [pc, #228]	@ (800d24c <sensorsAlignToAirframe+0x304>)
 800d166:	ed93 7a00 	vldr	s14, [r3]
 800d16a:	4b3b      	ldr	r3, [pc, #236]	@ (800d258 <sensorsAlignToAirframe+0x310>)
 800d16c:	edd3 7a00 	vldr	s15, [r3]
 800d170:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d174:	4b3c      	ldr	r3, [pc, #240]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d176:	edc3 7a08 	vstr	s15, [r3, #32]

  out->x = in->x*R[0][0] + in->y*R[0][1] + in->z*R[0][2];
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	ed93 7a00 	vldr	s14, [r3]
 800d180:	4b39      	ldr	r3, [pc, #228]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d182:	edd3 7a00 	vldr	s15, [r3]
 800d186:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d190:	4b35      	ldr	r3, [pc, #212]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d192:	edd3 7a01 	vldr	s15, [r3, #4]
 800d196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d19a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	edd3 6a02 	vldr	s13, [r3, #8]
 800d1a4:	4b30      	ldr	r3, [pc, #192]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d1a6:	edd3 7a02 	vldr	s15, [r3, #8]
 800d1aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	edc3 7a00 	vstr	s15, [r3]
  out->y = in->x*R[1][0] + in->y*R[1][1] + in->z*R[1][2];
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	ed93 7a00 	vldr	s14, [r3]
 800d1be:	4b2a      	ldr	r3, [pc, #168]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d1c0:	edd3 7a03 	vldr	s15, [r3, #12]
 800d1c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	edd3 6a01 	vldr	s13, [r3, #4]
 800d1ce:	4b26      	ldr	r3, [pc, #152]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d1d0:	edd3 7a04 	vldr	s15, [r3, #16]
 800d1d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	edd3 6a02 	vldr	s13, [r3, #8]
 800d1e2:	4b21      	ldr	r3, [pc, #132]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d1e4:	edd3 7a05 	vldr	s15, [r3, #20]
 800d1e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d1ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = in->x*R[2][0] + in->y*R[2][1] + in->z*R[2][2];
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	ed93 7a00 	vldr	s14, [r3]
 800d1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d1fe:	edd3 7a06 	vldr	s15, [r3, #24]
 800d202:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	edd3 6a01 	vldr	s13, [r3, #4]
 800d20c:	4b16      	ldr	r3, [pc, #88]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d20e:	edd3 7a07 	vldr	s15, [r3, #28]
 800d212:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d216:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	edd3 6a02 	vldr	s13, [r3, #8]
 800d220:	4b11      	ldr	r3, [pc, #68]	@ (800d268 <sensorsAlignToAirframe+0x320>)
 800d222:	edd3 7a08 	vldr	s15, [r3, #32]
 800d226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d22a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800d234:	bf00      	nop
 800d236:	3708      	adds	r7, #8
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}
 800d23c:	20008444 	.word	0x20008444
 800d240:	40490fdb 	.word	0x40490fdb
 800d244:	43340000 	.word	0x43340000
 800d248:	2000897c 	.word	0x2000897c
 800d24c:	20008980 	.word	0x20008980
 800d250:	20008448 	.word	0x20008448
 800d254:	20008984 	.word	0x20008984
 800d258:	20008988 	.word	0x20008988
 800d25c:	2000844c 	.word	0x2000844c
 800d260:	2000898c 	.word	0x2000898c
 800d264:	20008990 	.word	0x20008990
 800d268:	20008450 	.word	0x20008450

0800d26c <sensorsMpu6500Bmp280SetAccMode>:
//  out->x = ry.x;
//  out->y = ry.y;
//  out->z = ry.z;
//}
void sensorsMpu6500Bmp280SetAccMode(accModes accMode)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	b084      	sub	sp, #16
 800d270:	af00      	add	r7, sp, #0
 800d272:	4603      	mov	r3, r0
 800d274:	71fb      	strb	r3, [r7, #7]
  switch (accMode)
 800d276:	79fb      	ldrb	r3, [r7, #7]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d11a      	bne.n	800d2b2 <sensorsMpu6500Bmp280SetAccMode+0x46>
  {
    case ACC_MODE_PROPTEST:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_460);
 800d27c:	2000      	movs	r0, #0
 800d27e:	f7fd fc03 	bl	800aa88 <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800d282:	2300      	movs	r3, #0
 800d284:	73fb      	strb	r3, [r7, #15]
 800d286:	e010      	b.n	800d2aa <sensorsMpu6500Bmp280SetAccMode+0x3e>
      {
        lpf2pInit(&accLpf[i],  1000, 500);
 800d288:	7bfa      	ldrb	r2, [r7, #15]
 800d28a:	4613      	mov	r3, r2
 800d28c:	00db      	lsls	r3, r3, #3
 800d28e:	1a9b      	subs	r3, r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4a17      	ldr	r2, [pc, #92]	@ (800d2f0 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800d294:	4413      	add	r3, r2
 800d296:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800d2f4 <sensorsMpu6500Bmp280SetAccMode+0x88>
 800d29a:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800d2f8 <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f006 fd7c 	bl	8013d9c <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
 800d2a6:	3301      	adds	r3, #1
 800d2a8:	73fb      	strb	r3, [r7, #15]
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d9eb      	bls.n	800d288 <sensorsMpu6500Bmp280SetAccMode+0x1c>
      }
      break;
 800d2b0:	e01a      	b.n	800d2e8 <sensorsMpu6500Bmp280SetAccMode+0x7c>
    case ACC_MODE_FLIGHT:
    default:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_44);
 800d2b2:	2003      	movs	r0, #3
 800d2b4:	f7fd fbe8 	bl	800aa88 <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	73bb      	strb	r3, [r7, #14]
 800d2bc:	e010      	b.n	800d2e0 <sensorsMpu6500Bmp280SetAccMode+0x74>
      {
        lpf2pInit(&accLpf[i],  1000, ACCEL_LPF_CUTOFF_FREQ);
 800d2be:	7bba      	ldrb	r2, [r7, #14]
 800d2c0:	4613      	mov	r3, r2
 800d2c2:	00db      	lsls	r3, r3, #3
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4a09      	ldr	r2, [pc, #36]	@ (800d2f0 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800d2ca:	4413      	add	r3, r2
 800d2cc:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800d2d0:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800d2f8 <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f006 fd61 	bl	8013d9c <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800d2da:	7bbb      	ldrb	r3, [r7, #14]
 800d2dc:	3301      	adds	r3, #1
 800d2de:	73bb      	strb	r3, [r7, #14]
 800d2e0:	7bbb      	ldrb	r3, [r7, #14]
 800d2e2:	2b02      	cmp	r3, #2
 800d2e4:	d9eb      	bls.n	800d2be <sensorsMpu6500Bmp280SetAccMode+0x52>
      }
      break;
 800d2e6:	bf00      	nop
  }
}
 800d2e8:	bf00      	nop
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20008398 	.word	0x20008398
 800d2f4:	43fa0000 	.word	0x43fa0000
 800d2f8:	447a0000 	.word	0x447a0000

0800d2fc <applyAxis3fLpf>:
static void applyAxis3fLpf(lpf2pData *data, Axis3f* in)
{
 800d2fc:	b590      	push	{r4, r7, lr}
 800d2fe:	b085      	sub	sp, #20
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 3; i++) {
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]
 800d30a:	e01d      	b.n	800d348 <applyAxis3fLpf+0x4c>
    in->axis[i] = lpf2pApply(&data[i], in->axis[i]);
 800d30c:	7bfa      	ldrb	r2, [r7, #15]
 800d30e:	4613      	mov	r3, r2
 800d310:	00db      	lsls	r3, r3, #3
 800d312:	1a9b      	subs	r3, r3, r2
 800d314:	009b      	lsls	r3, r3, #2
 800d316:	461a      	mov	r2, r3
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	1899      	adds	r1, r3, r2
 800d31c:	7bfb      	ldrb	r3, [r7, #15]
 800d31e:	683a      	ldr	r2, [r7, #0]
 800d320:	009b      	lsls	r3, r3, #2
 800d322:	4413      	add	r3, r2
 800d324:	edd3 7a00 	vldr	s15, [r3]
 800d328:	7bfc      	ldrb	r4, [r7, #15]
 800d32a:	eeb0 0a67 	vmov.f32	s0, s15
 800d32e:	4608      	mov	r0, r1
 800d330:	f006 fdd0 	bl	8013ed4 <lpf2pApply>
 800d334:	eef0 7a40 	vmov.f32	s15, s0
 800d338:	683a      	ldr	r2, [r7, #0]
 800d33a:	00a3      	lsls	r3, r4, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 3; i++) {
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	3301      	adds	r3, #1
 800d346:	73fb      	strb	r3, [r7, #15]
 800d348:	7bfb      	ldrb	r3, [r7, #15]
 800d34a:	2b02      	cmp	r3, #2
 800d34c:	d9de      	bls.n	800d30c <applyAxis3fLpf+0x10>
  }
}
 800d34e:	bf00      	nop
 800d350:	bf00      	nop
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	bd90      	pop	{r4, r7, pc}

0800d358 <EXTI1_IRQHandler>:
	return testStatus;

}

void __attribute__((used)) EXTI1_IRQHandler(void)
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d35e:	2300      	movs	r3, #0
 800d360:	607b      	str	r3, [r7, #4]
	imuIntTimestamp = usecTimestamp();
 800d362:	f000 f8b3 	bl	800d4cc <usecTimestamp>
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	4913      	ldr	r1, [pc, #76]	@ (800d3b8 <EXTI1_IRQHandler+0x60>)
 800d36c:	e9c1 2300 	strd	r2, r3, [r1]
    // Check if EXTI line 1 triggered the interrupt
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 800d370:	4b12      	ldr	r3, [pc, #72]	@ (800d3bc <EXTI1_IRQHandler+0x64>)
 800d372:	695b      	ldr	r3, [r3, #20]
 800d374:	f003 0302 	and.w	r3, r3, #2
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d009      	beq.n	800d390 <EXTI1_IRQHandler+0x38>
    {
        // Clear the interrupt flag
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 800d37c:	4b0f      	ldr	r3, [pc, #60]	@ (800d3bc <EXTI1_IRQHandler+0x64>)
 800d37e:	2202      	movs	r2, #2
 800d380:	615a      	str	r2, [r3, #20]
    	xSemaphoreGiveFromISR(sensorsDataReady, &xHigherPriorityTaskWoken);
 800d382:	4b0f      	ldr	r3, [pc, #60]	@ (800d3c0 <EXTI1_IRQHandler+0x68>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	1d3a      	adds	r2, r7, #4
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f7f9 fa24 	bl	80067d8 <xQueueGiveFromISR>
    }

	intCounter++;
 800d390:	4b0c      	ldr	r3, [pc, #48]	@ (800d3c4 <EXTI1_IRQHandler+0x6c>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	3301      	adds	r3, #1
 800d396:	4a0b      	ldr	r2, [pc, #44]	@ (800d3c4 <EXTI1_IRQHandler+0x6c>)
 800d398:	6013      	str	r3, [r2, #0]
	if (xHigherPriorityTaskWoken) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d007      	beq.n	800d3b0 <EXTI1_IRQHandler+0x58>
		portYIELD();
 800d3a0:	4b09      	ldr	r3, [pc, #36]	@ (800d3c8 <EXTI1_IRQHandler+0x70>)
 800d3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	f3bf 8f6f 	isb	sy
	}

}
 800d3b0:	bf00      	nop
 800d3b2:	3708      	adds	r7, #8
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	20008998 	.word	0x20008998
 800d3bc:	40013c00 	.word	0x40013c00
 800d3c0:	20008994 	.word	0x20008994
 800d3c4:	200089a0 	.word	0x200089a0
 800d3c8:	e000ed04 	.word	0xe000ed04

0800d3cc <__NVIC_EnableIRQ>:
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d3d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	db0b      	blt.n	800d3f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d3de:	79fb      	ldrb	r3, [r7, #7]
 800d3e0:	f003 021f 	and.w	r2, r3, #31
 800d3e4:	4907      	ldr	r1, [pc, #28]	@ (800d404 <__NVIC_EnableIRQ+0x38>)
 800d3e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d3ea:	095b      	lsrs	r3, r3, #5
 800d3ec:	2001      	movs	r0, #1
 800d3ee:	fa00 f202 	lsl.w	r2, r0, r2
 800d3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800d3f6:	bf00      	nop
 800d3f8:	370c      	adds	r7, #12
 800d3fa:	46bd      	mov	sp, r7
 800d3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d400:	4770      	bx	lr
 800d402:	bf00      	nop
 800d404:	e000e100 	.word	0xe000e100

0800d408 <__NVIC_SetPriority>:
{
 800d408:	b480      	push	{r7}
 800d40a:	b083      	sub	sp, #12
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	4603      	mov	r3, r0
 800d410:	6039      	str	r1, [r7, #0]
 800d412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	db0a      	blt.n	800d432 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	490c      	ldr	r1, [pc, #48]	@ (800d454 <__NVIC_SetPriority+0x4c>)
 800d422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d426:	0112      	lsls	r2, r2, #4
 800d428:	b2d2      	uxtb	r2, r2
 800d42a:	440b      	add	r3, r1
 800d42c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d430:	e00a      	b.n	800d448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	b2da      	uxtb	r2, r3
 800d436:	4908      	ldr	r1, [pc, #32]	@ (800d458 <__NVIC_SetPriority+0x50>)
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	f003 030f 	and.w	r3, r3, #15
 800d43e:	3b04      	subs	r3, #4
 800d440:	0112      	lsls	r2, r2, #4
 800d442:	b2d2      	uxtb	r2, r2
 800d444:	440b      	add	r3, r1
 800d446:	761a      	strb	r2, [r3, #24]
}
 800d448:	bf00      	nop
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr
 800d454:	e000e100 	.word	0xe000e100
 800d458:	e000ed00 	.word	0xe000ed00

0800d45c <usecTimerInit>:
static bool isInit = false;

static uint32_t usecTimerHighCount;

void usecTimerInit(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  if (isInit) {
 800d460:	4b16      	ldr	r3, [pc, #88]	@ (800d4bc <usecTimerInit+0x60>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d126      	bne.n	800d4b6 <usecTimerInit+0x5a>
    return;
  }

  usecTimerHighCount = 0;
 800d468:	4b15      	ldr	r3, [pc, #84]	@ (800d4c0 <usecTimerInit+0x64>)
 800d46a:	2200      	movs	r2, #0
 800d46c:	601a      	str	r2, [r3, #0]

  // 1. Enable the clock for TIM7
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800d46e:	4b15      	ldr	r3, [pc, #84]	@ (800d4c4 <usecTimerInit+0x68>)
 800d470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d472:	4a14      	ldr	r2, [pc, #80]	@ (800d4c4 <usecTimerInit+0x68>)
 800d474:	f043 0320 	orr.w	r3, r3, #32
 800d478:	6413      	str	r3, [r2, #64]	@ 0x40

  // 2. Set the prescaler value
  // Assuming the APB1 clock is 42 MHz (84 MHz/2) and you want a 1 kHz timer clock (1 ms per tick)
  TIM7->PSC = 41;  // Prescaler = 42000 - 1
 800d47a:	4b13      	ldr	r3, [pc, #76]	@ (800d4c8 <usecTimerInit+0x6c>)
 800d47c:	2229      	movs	r2, #41	@ 0x29
 800d47e:	629a      	str	r2, [r3, #40]	@ 0x28

  // 3. Set the auto-reload value
  TIM7->ARR = 999;  // 1000 ticks -> 1 second (1 ms per tick)
 800d480:	4b11      	ldr	r3, [pc, #68]	@ (800d4c8 <usecTimerInit+0x6c>)
 800d482:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800d486:	62da      	str	r2, [r3, #44]	@ 0x2c

  // 4. Enable the update interrupt (UIE)
  TIM7->DIER |= TIM_DIER_UIE;
 800d488:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c8 <usecTimerInit+0x6c>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	4a0e      	ldr	r2, [pc, #56]	@ (800d4c8 <usecTimerInit+0x6c>)
 800d48e:	f043 0301 	orr.w	r3, r3, #1
 800d492:	60d3      	str	r3, [r2, #12]

  // 5. Enable the counter
  TIM7->CR1 |= TIM_CR1_CEN;
 800d494:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c8 <usecTimerInit+0x6c>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	4a0b      	ldr	r2, [pc, #44]	@ (800d4c8 <usecTimerInit+0x6c>)
 800d49a:	f043 0301 	orr.w	r3, r3, #1
 800d49e:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(TIM7_IRQn, 3);
 800d4a0:	2103      	movs	r1, #3
 800d4a2:	2037      	movs	r0, #55	@ 0x37
 800d4a4:	f7ff ffb0 	bl	800d408 <__NVIC_SetPriority>
  // 6. Enable TIM7 interrupt in NVIC
  NVIC_EnableIRQ(TIM7_IRQn);
 800d4a8:	2037      	movs	r0, #55	@ 0x37
 800d4aa:	f7ff ff8f 	bl	800d3cc <__NVIC_EnableIRQ>
  isInit = true;
 800d4ae:	4b03      	ldr	r3, [pc, #12]	@ (800d4bc <usecTimerInit+0x60>)
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	701a      	strb	r2, [r3, #0]
 800d4b4:	e000      	b.n	800d4b8 <usecTimerInit+0x5c>
    return;
 800d4b6:	bf00      	nop
}
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	200089a4 	.word	0x200089a4
 800d4c0:	200089a8 	.word	0x200089a8
 800d4c4:	40023800 	.word	0x40023800
 800d4c8:	40001400 	.word	0x40001400

0800d4cc <usecTimestamp>:

  TIM7->CNT = 0;
}

uint64_t usecTimestamp(void)
{
 800d4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4d0:	b08c      	sub	sp, #48	@ 0x30
 800d4d2:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800d4d4:	4b2b      	ldr	r3, [pc, #172]	@ (800d584 <usecTimestamp+0xb8>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d104      	bne.n	800d4e6 <usecTimestamp+0x1a>
 800d4dc:	224e      	movs	r2, #78	@ 0x4e
 800d4de:	492a      	ldr	r1, [pc, #168]	@ (800d588 <usecTimestamp+0xbc>)
 800d4e0:	482a      	ldr	r0, [pc, #168]	@ (800d58c <usecTimestamp+0xc0>)
 800d4e2:	f006 fc21 	bl	8013d28 <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 800d4e6:	4b2a      	ldr	r3, [pc, #168]	@ (800d590 <usecTimestamp+0xc4>)
 800d4e8:	f3bf 8f5b 	dmb	ish
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	f3bf 8f5b 	dmb	ish
 800d4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t low = TIM7->CNT;
 800d4f4:	4b27      	ldr	r3, [pc, #156]	@ (800d594 <usecTimestamp+0xc8>)
 800d4f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 800d4fa:	4b25      	ldr	r3, [pc, #148]	@ (800d590 <usecTimestamp+0xc4>)
 800d4fc:	f3bf 8f5b 	dmb	ish
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f3bf 8f5b 	dmb	ish
 800d506:	627b      	str	r3, [r7, #36]	@ 0x24

  // There was no increment in between
  if (high == high0)
 800d508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d118      	bne.n	800d542 <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 800d510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d512:	2200      	movs	r2, #0
 800d514:	61bb      	str	r3, [r7, #24]
 800d516:	61fa      	str	r2, [r7, #28]
 800d518:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d51c:	460b      	mov	r3, r1
 800d51e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d522:	460b      	mov	r3, r1
 800d524:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800d528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d52a:	2200      	movs	r2, #0
 800d52c:	613b      	str	r3, [r7, #16]
 800d52e:	617a      	str	r2, [r7, #20]
 800d530:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d534:	460b      	mov	r3, r1
 800d536:	eb1a 0403 	adds.w	r4, sl, r3
 800d53a:	4613      	mov	r3, r2
 800d53c:	eb4b 0503 	adc.w	r5, fp, r3
 800d540:	e018      	b.n	800d574 <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 800d542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d544:	2200      	movs	r2, #0
 800d546:	60bb      	str	r3, [r7, #8]
 800d548:	60fa      	str	r2, [r7, #12]
 800d54a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d54e:	460b      	mov	r3, r1
 800d550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800d554:	460b      	mov	r3, r1
 800d556:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800d55a:	4b0e      	ldr	r3, [pc, #56]	@ (800d594 <usecTimestamp+0xc8>)
 800d55c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d55e:	2200      	movs	r2, #0
 800d560:	603b      	str	r3, [r7, #0]
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d568:	460b      	mov	r3, r1
 800d56a:	eb18 0403 	adds.w	r4, r8, r3
 800d56e:	4613      	mov	r3, r2
 800d570:	eb49 0503 	adc.w	r5, r9, r3
}
 800d574:	4622      	mov	r2, r4
 800d576:	462b      	mov	r3, r5
 800d578:	4610      	mov	r0, r2
 800d57a:	4619      	mov	r1, r3
 800d57c:	3730      	adds	r7, #48	@ 0x30
 800d57e:	46bd      	mov	sp, r7
 800d580:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d584:	200089a4 	.word	0x200089a4
 800d588:	0801bf84 	.word	0x0801bf84
 800d58c:	0801bf9c 	.word	0x0801bf9c
 800d590:	200089a8 	.word	0x200089a8
 800d594:	40001400 	.word	0x40001400

0800d598 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800d598:	b480      	push	{r7}
 800d59a:	af00      	add	r7, sp, #0

    if (TIM7->SR & TIM_SR_UIF) {
 800d59c:	4b0e      	ldr	r3, [pc, #56]	@ (800d5d8 <TIM7_IRQHandler+0x40>)
 800d59e:	691b      	ldr	r3, [r3, #16]
 800d5a0:	f003 0301 	and.w	r3, r3, #1
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d005      	beq.n	800d5b4 <TIM7_IRQHandler+0x1c>
        // Clear the update interrupt flag
        TIM7->SR &= ~TIM_SR_UIF;
 800d5a8:	4b0b      	ldr	r3, [pc, #44]	@ (800d5d8 <TIM7_IRQHandler+0x40>)
 800d5aa:	691b      	ldr	r3, [r3, #16]
 800d5ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d5d8 <TIM7_IRQHandler+0x40>)
 800d5ae:	f023 0301 	bic.w	r3, r3, #1
 800d5b2:	6113      	str	r3, [r2, #16]
    }

  __sync_fetch_and_add(&usecTimerHighCount, 1);
 800d5b4:	4b09      	ldr	r3, [pc, #36]	@ (800d5dc <TIM7_IRQHandler+0x44>)
 800d5b6:	f3bf 8f5b 	dmb	ish
 800d5ba:	e853 1f00 	ldrex	r1, [r3]
 800d5be:	f101 0101 	add.w	r1, r1, #1
 800d5c2:	e843 1200 	strex	r2, r1, [r3]
 800d5c6:	2a00      	cmp	r2, #0
 800d5c8:	d1f7      	bne.n	800d5ba <TIM7_IRQHandler+0x22>
 800d5ca:	f3bf 8f5b 	dmb	ish
}
 800d5ce:	bf00      	nop
 800d5d0:	46bd      	mov	sp, r7
 800d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d6:	4770      	bx	lr
 800d5d8:	40001400 	.word	0x40001400
 800d5dc:	200089a8 	.word	0x200089a8

0800d5e0 <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 800d5ec:	2220      	movs	r2, #32
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f00b fe4b 	bl	801928c <memset>
  this->conversionFactor = conversionFactor;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	683a      	ldr	r2, [r7, #0]
 800d5fa:	611a      	str	r2, [r3, #16]
}
 800d5fc:	bf00      	nop
 800d5fe:	3708      	adds	r7, #8
 800d600:	46bd      	mov	sp, r7
 800d602:	bd80      	pop	{r7, pc}

0800d604 <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
 800d60c:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	ed93 7a00 	vldr	s14, [r3]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	edd3 7a00 	vldr	s15, [r3]
 800d61a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	ed93 7a01 	vldr	s14, [r3, #4]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d630:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	ed93 7a02 	vldr	s14, [r3, #8]
 800d640:	683b      	ldr	r3, [r7, #0]
 800d642:	edd3 7a02 	vldr	s15, [r3, #8]
 800d646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	1c5a      	adds	r2, r3, #1
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	60da      	str	r2, [r3, #12]
}
 800d65a:	bf00      	nop
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 800d666:	b480      	push	{r7}
 800d668:	b087      	sub	sp, #28
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d041      	beq.n	800d6fa <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	ed93 7a00 	vldr	s14, [r3]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	edd3 7a04 	vldr	s15, [r3, #16]
 800d682:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	ed93 7a01 	vldr	s14, [r3, #4]
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	edd3 7a04 	vldr	s15, [r3, #16]
 800d6a8:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68db      	ldr	r3, [r3, #12]
 800d6b0:	ee07 3a90 	vmov	s15, r3
 800d6b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d6b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	ed93 7a02 	vldr	s14, [r3, #8]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	edd3 7a04 	vldr	s15, [r3, #16]
 800d6ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	68db      	ldr	r3, [r3, #12]
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d6de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	461a      	mov	r2, r3
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	6053      	str	r3, [r2, #4]
 800d6f8:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	3314      	adds	r3, #20
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	371c      	adds	r7, #28
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
	...

0800d70c <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 800d70c:	b480      	push	{r7}
 800d70e:	b085      	sub	sp, #20
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800d714:	2300      	movs	r3, #0
 800d716:	60fb      	str	r3, [r7, #12]
 800d718:	e058      	b.n	800d7cc <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 800d71a:	4b31      	ldr	r3, [pc, #196]	@ (800d7e0 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800d71c:	edd3 7a00 	vldr	s15, [r3]
 800d720:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d728:	dd21      	ble.n	800d76e <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 800d72a:	687a      	ldr	r2, [r7, #4]
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	4413      	add	r3, r2
 800d732:	ed93 7a00 	vldr	s14, [r3]
 800d736:	4b2a      	ldr	r3, [pc, #168]	@ (800d7e0 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800d738:	edd3 7a00 	vldr	s15, [r3]
 800d73c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d744:	dd01      	ble.n	800d74a <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 800d746:	2300      	movs	r3, #0
 800d748:	e044      	b.n	800d7d4 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 800d74a:	687a      	ldr	r2, [r7, #4]
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	4413      	add	r3, r2
 800d752:	ed93 7a00 	vldr	s14, [r3]
 800d756:	4b22      	ldr	r3, [pc, #136]	@ (800d7e0 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800d758:	edd3 7a00 	vldr	s15, [r3]
 800d75c:	eef1 7a67 	vneg.f32	s15, s15
 800d760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d768:	d501      	bpl.n	800d76e <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 800d76a:	2300      	movs	r3, #0
 800d76c:	e032      	b.n	800d7d4 <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800d76e:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e4 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800d770:	edd3 7a00 	vldr	s15, [r3]
 800d774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d77c:	dd23      	ble.n	800d7c6 <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3303      	adds	r3, #3
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	009b      	lsls	r3, r3, #2
 800d786:	4413      	add	r3, r2
 800d788:	ed93 7a00 	vldr	s14, [r3]
 800d78c:	4b15      	ldr	r3, [pc, #84]	@ (800d7e4 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800d78e:	edd3 7a00 	vldr	s15, [r3]
 800d792:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d79a:	dd01      	ble.n	800d7a0 <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 800d79c:	2300      	movs	r3, #0
 800d79e:	e019      	b.n	800d7d4 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	3303      	adds	r3, #3
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	4413      	add	r3, r2
 800d7aa:	ed93 7a00 	vldr	s14, [r3]
 800d7ae:	4b0d      	ldr	r3, [pc, #52]	@ (800d7e4 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800d7b0:	edd3 7a00 	vldr	s15, [r3]
 800d7b4:	eef1 7a67 	vneg.f32	s15, s15
 800d7b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7c0:	d501      	bpl.n	800d7c6 <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e006      	b.n	800d7d4 <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	60fb      	str	r3, [r7, #12]
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	dda3      	ble.n	800d71a <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 800d7d2:	2301      	movs	r3, #1
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3714      	adds	r7, #20
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	20000018 	.word	0x20000018
 800d7e4:	2000001c 	.word	0x2000001c

0800d7e8 <estimatorEnqueueTOF>:
  m.data.distance = *distance;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueueTOF(const tofMeasurement_t *tof)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b08e      	sub	sp, #56	@ 0x38
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypeTOF;
 800d7f0:	2304      	movs	r3, #4
 800d7f2:	723b      	strb	r3, [r7, #8]
  m.data.tof = *tof;
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	f107 030c 	add.w	r3, r7, #12
 800d7fa:	ca07      	ldmia	r2, {r0, r1, r2}
 800d7fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  estimatorEnqueue(&m);
 800d800:	f107 0308 	add.w	r3, r7, #8
 800d804:	4618      	mov	r0, r3
 800d806:	f001 fa31 	bl	800ec6c <estimatorEnqueue>
}
 800d80a:	bf00      	nop
 800d80c:	3738      	adds	r7, #56	@ 0x38
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
	...

0800d814 <rangeSet>:
#include "estimator.h"

static uint16_t ranges[RANGE_T_END] = {0,};

void rangeSet(rangeDirection_t direction, float range_m)
{
 800d814:	b480      	push	{r7}
 800d816:	b083      	sub	sp, #12
 800d818:	af00      	add	r7, sp, #0
 800d81a:	4603      	mov	r3, r0
 800d81c:	ed87 0a00 	vstr	s0, [r7]
 800d820:	71fb      	strb	r3, [r7, #7]
  if (direction > (RANGE_T_END-1)) return;
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	2b05      	cmp	r3, #5
 800d826:	d80f      	bhi.n	800d848 <rangeSet+0x34>

  ranges[direction] = range_m * 1000;
 800d828:	edd7 7a00 	vldr	s15, [r7]
 800d82c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800d854 <rangeSet+0x40>
 800d830:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d834:	79fb      	ldrb	r3, [r7, #7]
 800d836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d83a:	ee17 2a90 	vmov	r2, s15
 800d83e:	b291      	uxth	r1, r2
 800d840:	4a05      	ldr	r2, [pc, #20]	@ (800d858 <rangeSet+0x44>)
 800d842:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d846:	e000      	b.n	800d84a <rangeSet+0x36>
  if (direction > (RANGE_T_END-1)) return;
 800d848:	bf00      	nop
}
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr
 800d854:	447a0000 	.word	0x447a0000
 800d858:	200089ac 	.word	0x200089ac

0800d85c <rangeEnqueueDownRangeInEstimator>:
    if (direction > (RANGE_T_END-1)) return 0;

  return ranges[direction];
}

void rangeEnqueueDownRangeInEstimator(float distance, float stdDev, uint32_t timeStamp) {
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b088      	sub	sp, #32
 800d860:	af00      	add	r7, sp, #0
 800d862:	ed87 0a03 	vstr	s0, [r7, #12]
 800d866:	edc7 0a02 	vstr	s1, [r7, #8]
 800d86a:	6078      	str	r0, [r7, #4]
  tofMeasurement_t tofData;
  tofData.timestamp = timeStamp;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	617b      	str	r3, [r7, #20]
  tofData.distance = distance;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	61bb      	str	r3, [r7, #24]
  tofData.stdDev = stdDev;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	61fb      	str	r3, [r7, #28]
  estimatorEnqueueTOF(&tofData);
 800d878:	f107 0314 	add.w	r3, r7, #20
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7ff ffb3 	bl	800d7e8 <estimatorEnqueueTOF>
}
 800d882:	bf00      	nop
 800d884:	3720      	adds	r7, #32
 800d886:	46bd      	mov	sp, r7
 800d888:	bd80      	pop	{r7, pc}
	...

0800d88c <sensfusion6Init>:

// TODO: Make math util file
static float invSqrt(float x);

void sensfusion6Init()
{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
  if(isInit)
 800d890:	4b06      	ldr	r3, [pc, #24]	@ (800d8ac <sensfusion6Init+0x20>)
 800d892:	781b      	ldrb	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d103      	bne.n	800d8a0 <sensfusion6Init+0x14>
    return;

  isInit = true;
 800d898:	4b04      	ldr	r3, [pc, #16]	@ (800d8ac <sensfusion6Init+0x20>)
 800d89a:	2201      	movs	r2, #1
 800d89c:	701a      	strb	r2, [r3, #0]
 800d89e:	e000      	b.n	800d8a2 <sensfusion6Init+0x16>
    return;
 800d8a0:	bf00      	nop
}
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop
 800d8ac:	200089dc 	.word	0x200089dc

0800d8b0 <sensfusion6Test>:

bool sensfusion6Test(void)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
  return isInit;
 800d8b4:	4b03      	ldr	r3, [pc, #12]	@ (800d8c4 <sensfusion6Test+0x14>)
 800d8b6:	781b      	ldrb	r3, [r3, #0]
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr
 800d8c2:	bf00      	nop
 800d8c4:	200089dc 	.word	0x200089dc

0800d8c8 <sensfusion6UpdateQ>:

void sensfusion6UpdateQ(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b088      	sub	sp, #32
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	ed87 0a07 	vstr	s0, [r7, #28]
 800d8d2:	edc7 0a06 	vstr	s1, [r7, #24]
 800d8d6:	ed87 1a05 	vstr	s2, [r7, #20]
 800d8da:	edc7 1a04 	vstr	s3, [r7, #16]
 800d8de:	ed87 2a03 	vstr	s4, [r7, #12]
 800d8e2:	edc7 2a02 	vstr	s5, [r7, #8]
 800d8e6:	ed87 3a01 	vstr	s6, [r7, #4]
  sensfusion6UpdateQImpl(gx, gy, gz, ax, ay, az, dt);
 800d8ea:	ed97 3a01 	vldr	s6, [r7, #4]
 800d8ee:	edd7 2a02 	vldr	s5, [r7, #8]
 800d8f2:	ed97 2a03 	vldr	s4, [r7, #12]
 800d8f6:	edd7 1a04 	vldr	s3, [r7, #16]
 800d8fa:	ed97 1a05 	vldr	s2, [r7, #20]
 800d8fe:	edd7 0a06 	vldr	s1, [r7, #24]
 800d902:	ed97 0a07 	vldr	s0, [r7, #28]
 800d906:	f000 f82b 	bl	800d960 <sensfusion6UpdateQImpl>
  estimatedGravityDirection(&gravX, &gravY, &gravZ);
 800d90a:	4a10      	ldr	r2, [pc, #64]	@ (800d94c <sensfusion6UpdateQ+0x84>)
 800d90c:	4910      	ldr	r1, [pc, #64]	@ (800d950 <sensfusion6UpdateQ+0x88>)
 800d90e:	4811      	ldr	r0, [pc, #68]	@ (800d954 <sensfusion6UpdateQ+0x8c>)
 800d910:	f000 fc1c 	bl	800e14c <estimatedGravityDirection>

  if (!isCalibrated) {
 800d914:	4b10      	ldr	r3, [pc, #64]	@ (800d958 <sensfusion6UpdateQ+0x90>)
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	f083 0301 	eor.w	r3, r3, #1
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00f      	beq.n	800d942 <sensfusion6UpdateQ+0x7a>
    baseZacc = sensfusion6GetAccZ(ax, ay, az);
 800d922:	ed97 1a02 	vldr	s2, [r7, #8]
 800d926:	edd7 0a03 	vldr	s1, [r7, #12]
 800d92a:	ed97 0a04 	vldr	s0, [r7, #16]
 800d92e:	f000 fbdd 	bl	800e0ec <sensfusion6GetAccZ>
 800d932:	eef0 7a40 	vmov.f32	s15, s0
 800d936:	4b09      	ldr	r3, [pc, #36]	@ (800d95c <sensfusion6UpdateQ+0x94>)
 800d938:	edc3 7a00 	vstr	s15, [r3]
    isCalibrated = true;
 800d93c:	4b06      	ldr	r3, [pc, #24]	@ (800d958 <sensfusion6UpdateQ+0x90>)
 800d93e:	2201      	movs	r2, #1
 800d940:	701a      	strb	r2, [r3, #0]
  }
}
 800d942:	bf00      	nop
 800d944:	3720      	adds	r7, #32
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	200089d8 	.word	0x200089d8
 800d950:	200089d4 	.word	0x200089d4
 800d954:	200089d0 	.word	0x200089d0
 800d958:	200089dd 	.word	0x200089dd
 800d95c:	2000002c 	.word	0x2000002c

0800d960 <sensfusion6UpdateQImpl>:
//
// Date     Author      Notes
// 29/09/2011 SOH Madgwick    Initial release
// 02/10/2011 SOH Madgwick  Optimised for reduced CPU load
static void sensfusion6UpdateQImpl(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b092      	sub	sp, #72	@ 0x48
 800d964:	af00      	add	r7, sp, #0
 800d966:	ed87 0a07 	vstr	s0, [r7, #28]
 800d96a:	edc7 0a06 	vstr	s1, [r7, #24]
 800d96e:	ed87 1a05 	vstr	s2, [r7, #20]
 800d972:	edc7 1a04 	vstr	s3, [r7, #16]
 800d976:	ed87 2a03 	vstr	s4, [r7, #12]
 800d97a:	edc7 2a02 	vstr	s5, [r7, #8]
 800d97e:	ed87 3a01 	vstr	s6, [r7, #4]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = gx * M_PI_F / 180;
 800d982:	edd7 7a07 	vldr	s15, [r7, #28]
 800d986:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800dbec <sensfusion6UpdateQImpl+0x28c>
 800d98a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d98e:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800dbf0 <sensfusion6UpdateQImpl+0x290>
 800d992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d996:	edc7 7a07 	vstr	s15, [r7, #28]
  gy = gy * M_PI_F / 180;
 800d99a:	edd7 7a06 	vldr	s15, [r7, #24]
 800d99e:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800dbec <sensfusion6UpdateQImpl+0x28c>
 800d9a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d9a6:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800dbf0 <sensfusion6UpdateQImpl+0x290>
 800d9aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9ae:	edc7 7a06 	vstr	s15, [r7, #24]
  gz = gz * M_PI_F / 180;
 800d9b2:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9b6:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800dbec <sensfusion6UpdateQImpl+0x28c>
 800d9ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d9be:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800dbf0 <sensfusion6UpdateQImpl+0x290>
 800d9c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d9c6:	edc7 7a05 	vstr	s15, [r7, #20]

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800d9ca:	edd7 7a04 	vldr	s15, [r7, #16]
 800d9ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d6:	d10e      	bne.n	800d9f6 <sensfusion6UpdateQImpl+0x96>
 800d9d8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d9dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	d107      	bne.n	800d9f6 <sensfusion6UpdateQImpl+0x96>
 800d9e6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d9ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f2:	f000 8142 	beq.w	800dc7a <sensfusion6UpdateQImpl+0x31a>
  {
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800d9f6:	edd7 7a04 	vldr	s15, [r7, #16]
 800d9fa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d9fe:	edd7 7a03 	vldr	s15, [r7, #12]
 800da02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800da06:	ee37 7a27 	vadd.f32	s14, s14, s15
 800da0a:	edd7 7a02 	vldr	s15, [r7, #8]
 800da0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800da12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da16:	eeb0 0a67 	vmov.f32	s0, s15
 800da1a:	f000 fb2b 	bl	800e074 <invSqrt>
 800da1e:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    ax *= recipNorm;
 800da22:	ed97 7a04 	vldr	s14, [r7, #16]
 800da26:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800da2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da2e:	edc7 7a04 	vstr	s15, [r7, #16]
    ay *= recipNorm;
 800da32:	ed97 7a03 	vldr	s14, [r7, #12]
 800da36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800da3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3e:	edc7 7a03 	vstr	s15, [r7, #12]
    az *= recipNorm;
 800da42:	ed97 7a02 	vldr	s14, [r7, #8]
 800da46:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800da4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da4e:	edc7 7a02 	vstr	s15, [r7, #8]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = qx * qz - qw * qy;
 800da52:	4b68      	ldr	r3, [pc, #416]	@ (800dbf4 <sensfusion6UpdateQImpl+0x294>)
 800da54:	ed93 7a00 	vldr	s14, [r3]
 800da58:	4b67      	ldr	r3, [pc, #412]	@ (800dbf8 <sensfusion6UpdateQImpl+0x298>)
 800da5a:	edd3 7a00 	vldr	s15, [r3]
 800da5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da62:	4b66      	ldr	r3, [pc, #408]	@ (800dbfc <sensfusion6UpdateQImpl+0x29c>)
 800da64:	edd3 6a00 	vldr	s13, [r3]
 800da68:	4b65      	ldr	r3, [pc, #404]	@ (800dc00 <sensfusion6UpdateQImpl+0x2a0>)
 800da6a:	edd3 7a00 	vldr	s15, [r3]
 800da6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da72:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da76:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    halfvy = qw * qx + qy * qz;
 800da7a:	4b60      	ldr	r3, [pc, #384]	@ (800dbfc <sensfusion6UpdateQImpl+0x29c>)
 800da7c:	ed93 7a00 	vldr	s14, [r3]
 800da80:	4b5c      	ldr	r3, [pc, #368]	@ (800dbf4 <sensfusion6UpdateQImpl+0x294>)
 800da82:	edd3 7a00 	vldr	s15, [r3]
 800da86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da8a:	4b5d      	ldr	r3, [pc, #372]	@ (800dc00 <sensfusion6UpdateQImpl+0x2a0>)
 800da8c:	edd3 6a00 	vldr	s13, [r3]
 800da90:	4b59      	ldr	r3, [pc, #356]	@ (800dbf8 <sensfusion6UpdateQImpl+0x298>)
 800da92:	edd3 7a00 	vldr	s15, [r3]
 800da96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da9e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    halfvz = qw * qw - 0.5f + qz * qz;
 800daa2:	4b56      	ldr	r3, [pc, #344]	@ (800dbfc <sensfusion6UpdateQImpl+0x29c>)
 800daa4:	ed93 7a00 	vldr	s14, [r3]
 800daa8:	4b54      	ldr	r3, [pc, #336]	@ (800dbfc <sensfusion6UpdateQImpl+0x29c>)
 800daaa:	edd3 7a00 	vldr	s15, [r3]
 800daae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dab2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dab6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800daba:	4b4f      	ldr	r3, [pc, #316]	@ (800dbf8 <sensfusion6UpdateQImpl+0x298>)
 800dabc:	edd3 6a00 	vldr	s13, [r3]
 800dac0:	4b4d      	ldr	r3, [pc, #308]	@ (800dbf8 <sensfusion6UpdateQImpl+0x298>)
 800dac2:	edd3 7a00 	vldr	s15, [r3]
 800dac6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dace:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800dad2:	ed97 7a03 	vldr	s14, [r7, #12]
 800dad6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800dada:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dade:	edd7 6a02 	vldr	s13, [r7, #8]
 800dae2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800dae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800daea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800daee:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    halfey = (az * halfvx - ax * halfvz);
 800daf2:	ed97 7a02 	vldr	s14, [r7, #8]
 800daf6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800dafa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dafe:	edd7 6a04 	vldr	s13, [r7, #16]
 800db02:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800db06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db0e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    halfez = (ax * halfvy - ay * halfvx);
 800db12:	ed97 7a04 	vldr	s14, [r7, #16]
 800db16:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800db1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db1e:	edd7 6a03 	vldr	s13, [r7, #12]
 800db22:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800db26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db2e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f)
 800db32:	4b34      	ldr	r3, [pc, #208]	@ (800dc04 <sensfusion6UpdateQImpl+0x2a4>)
 800db34:	edd3 7a00 	vldr	s15, [r3]
 800db38:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800db3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db40:	dd68      	ble.n	800dc14 <sensfusion6UpdateQImpl+0x2b4>
    {
      integralFBx += twoKi * halfex * dt;  // integral error scaled by Ki
 800db42:	4b30      	ldr	r3, [pc, #192]	@ (800dc04 <sensfusion6UpdateQImpl+0x2a4>)
 800db44:	ed93 7a00 	vldr	s14, [r3]
 800db48:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800db4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db50:	edd7 7a01 	vldr	s15, [r7, #4]
 800db54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db58:	4b2b      	ldr	r3, [pc, #172]	@ (800dc08 <sensfusion6UpdateQImpl+0x2a8>)
 800db5a:	edd3 7a00 	vldr	s15, [r3]
 800db5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db62:	4b29      	ldr	r3, [pc, #164]	@ (800dc08 <sensfusion6UpdateQImpl+0x2a8>)
 800db64:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * dt;
 800db68:	4b26      	ldr	r3, [pc, #152]	@ (800dc04 <sensfusion6UpdateQImpl+0x2a4>)
 800db6a:	ed93 7a00 	vldr	s14, [r3]
 800db6e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800db72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db76:	edd7 7a01 	vldr	s15, [r7, #4]
 800db7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db7e:	4b23      	ldr	r3, [pc, #140]	@ (800dc0c <sensfusion6UpdateQImpl+0x2ac>)
 800db80:	edd3 7a00 	vldr	s15, [r3]
 800db84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db88:	4b20      	ldr	r3, [pc, #128]	@ (800dc0c <sensfusion6UpdateQImpl+0x2ac>)
 800db8a:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * dt;
 800db8e:	4b1d      	ldr	r3, [pc, #116]	@ (800dc04 <sensfusion6UpdateQImpl+0x2a4>)
 800db90:	ed93 7a00 	vldr	s14, [r3]
 800db94:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800db98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db9c:	edd7 7a01 	vldr	s15, [r7, #4]
 800dba0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dba4:	4b1a      	ldr	r3, [pc, #104]	@ (800dc10 <sensfusion6UpdateQImpl+0x2b0>)
 800dba6:	edd3 7a00 	vldr	s15, [r3]
 800dbaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbae:	4b18      	ldr	r3, [pc, #96]	@ (800dc10 <sensfusion6UpdateQImpl+0x2b0>)
 800dbb0:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx;  // apply integral feedback
 800dbb4:	4b14      	ldr	r3, [pc, #80]	@ (800dc08 <sensfusion6UpdateQImpl+0x2a8>)
 800dbb6:	edd3 7a00 	vldr	s15, [r3]
 800dbba:	ed97 7a07 	vldr	s14, [r7, #28]
 800dbbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbc2:	edc7 7a07 	vstr	s15, [r7, #28]
      gy += integralFBy;
 800dbc6:	4b11      	ldr	r3, [pc, #68]	@ (800dc0c <sensfusion6UpdateQImpl+0x2ac>)
 800dbc8:	edd3 7a00 	vldr	s15, [r3]
 800dbcc:	ed97 7a06 	vldr	s14, [r7, #24]
 800dbd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbd4:	edc7 7a06 	vstr	s15, [r7, #24]
      gz += integralFBz;
 800dbd8:	4b0d      	ldr	r3, [pc, #52]	@ (800dc10 <sensfusion6UpdateQImpl+0x2b0>)
 800dbda:	edd3 7a00 	vldr	s15, [r3]
 800dbde:	ed97 7a05 	vldr	s14, [r7, #20]
 800dbe2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbe6:	edc7 7a05 	vstr	s15, [r7, #20]
 800dbea:	e01f      	b.n	800dc2c <sensfusion6UpdateQImpl+0x2cc>
 800dbec:	40490fdb 	.word	0x40490fdb
 800dbf0:	43340000 	.word	0x43340000
 800dbf4:	200089c4 	.word	0x200089c4
 800dbf8:	200089cc 	.word	0x200089cc
 800dbfc:	20000028 	.word	0x20000028
 800dc00:	200089c8 	.word	0x200089c8
 800dc04:	20000024 	.word	0x20000024
 800dc08:	200089b8 	.word	0x200089b8
 800dc0c:	200089bc 	.word	0x200089bc
 800dc10:	200089c0 	.word	0x200089c0
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800dc14:	4b9a      	ldr	r3, [pc, #616]	@ (800de80 <sensfusion6UpdateQImpl+0x520>)
 800dc16:	f04f 0200 	mov.w	r2, #0
 800dc1a:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800dc1c:	4b99      	ldr	r3, [pc, #612]	@ (800de84 <sensfusion6UpdateQImpl+0x524>)
 800dc1e:	f04f 0200 	mov.w	r2, #0
 800dc22:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800dc24:	4b98      	ldr	r3, [pc, #608]	@ (800de88 <sensfusion6UpdateQImpl+0x528>)
 800dc26:	f04f 0200 	mov.w	r2, #0
 800dc2a:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800dc2c:	4b97      	ldr	r3, [pc, #604]	@ (800de8c <sensfusion6UpdateQImpl+0x52c>)
 800dc2e:	ed93 7a00 	vldr	s14, [r3]
 800dc32:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800dc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc3a:	ed97 7a07 	vldr	s14, [r7, #28]
 800dc3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc42:	edc7 7a07 	vstr	s15, [r7, #28]
    gy += twoKp * halfey;
 800dc46:	4b91      	ldr	r3, [pc, #580]	@ (800de8c <sensfusion6UpdateQImpl+0x52c>)
 800dc48:	ed93 7a00 	vldr	s14, [r3]
 800dc4c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800dc50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc54:	ed97 7a06 	vldr	s14, [r7, #24]
 800dc58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc5c:	edc7 7a06 	vstr	s15, [r7, #24]
    gz += twoKp * halfez;
 800dc60:	4b8a      	ldr	r3, [pc, #552]	@ (800de8c <sensfusion6UpdateQImpl+0x52c>)
 800dc62:	ed93 7a00 	vldr	s14, [r3]
 800dc66:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800dc6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc6e:	ed97 7a05 	vldr	s14, [r7, #20]
 800dc72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc76:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * dt);   // pre-multiply common factors
 800dc7a:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc7e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dc82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc86:	ed97 7a07 	vldr	s14, [r7, #28]
 800dc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc8e:	edc7 7a07 	vstr	s15, [r7, #28]
  gy *= (0.5f * dt);
 800dc92:	edd7 7a01 	vldr	s15, [r7, #4]
 800dc96:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dc9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc9e:	ed97 7a06 	vldr	s14, [r7, #24]
 800dca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca6:	edc7 7a06 	vstr	s15, [r7, #24]
  gz *= (0.5f * dt);
 800dcaa:	edd7 7a01 	vldr	s15, [r7, #4]
 800dcae:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dcb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dcb6:	ed97 7a05 	vldr	s14, [r7, #20]
 800dcba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcbe:	edc7 7a05 	vstr	s15, [r7, #20]
  qa = qw;
 800dcc2:	4b73      	ldr	r3, [pc, #460]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  qb = qx;
 800dcc8:	4b72      	ldr	r3, [pc, #456]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	627b      	str	r3, [r7, #36]	@ 0x24
  qc = qy;
 800dcce:	4b72      	ldr	r3, [pc, #456]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	623b      	str	r3, [r7, #32]
  qw += (-qb * gx - qc * gy - qz * gz);
 800dcd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800dcd8:	eeb1 7a67 	vneg.f32	s14, s15
 800dcdc:	edd7 7a07 	vldr	s15, [r7, #28]
 800dce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dce4:	edd7 6a08 	vldr	s13, [r7, #32]
 800dce8:	edd7 7a06 	vldr	s15, [r7, #24]
 800dcec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcf0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dcf4:	4b69      	ldr	r3, [pc, #420]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800dcf6:	edd3 6a00 	vldr	s13, [r3]
 800dcfa:	edd7 7a05 	vldr	s15, [r7, #20]
 800dcfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd02:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd06:	4b62      	ldr	r3, [pc, #392]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800dd08:	edd3 7a00 	vldr	s15, [r3]
 800dd0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd10:	4b5f      	ldr	r3, [pc, #380]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800dd12:	edc3 7a00 	vstr	s15, [r3]
  qx += (qa * gx + qc * gz - qz * gy);
 800dd16:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800dd1a:	edd7 7a07 	vldr	s15, [r7, #28]
 800dd1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd22:	edd7 6a08 	vldr	s13, [r7, #32]
 800dd26:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd32:	4b5a      	ldr	r3, [pc, #360]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800dd34:	edd3 6a00 	vldr	s13, [r3]
 800dd38:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd40:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd44:	4b53      	ldr	r3, [pc, #332]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800dd46:	edd3 7a00 	vldr	s15, [r3]
 800dd4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd4e:	4b51      	ldr	r3, [pc, #324]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800dd50:	edc3 7a00 	vstr	s15, [r3]
  qy += (qa * gy - qb * gz + qz * gx);
 800dd54:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800dd58:	edd7 7a06 	vldr	s15, [r7, #24]
 800dd5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd60:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800dd64:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800dd70:	4b4a      	ldr	r3, [pc, #296]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800dd72:	edd3 6a00 	vldr	s13, [r3]
 800dd76:	edd7 7a07 	vldr	s15, [r7, #28]
 800dd7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dd82:	4b45      	ldr	r3, [pc, #276]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800dd84:	edd3 7a00 	vldr	s15, [r3]
 800dd88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd8c:	4b42      	ldr	r3, [pc, #264]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800dd8e:	edc3 7a00 	vstr	s15, [r3]
  qz += (qa * gz + qb * gy - qc * gx);
 800dd92:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800dd96:	edd7 7a05 	vldr	s15, [r7, #20]
 800dd9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd9e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800dda2:	edd7 7a06 	vldr	s15, [r7, #24]
 800dda6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ddaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddae:	edd7 6a08 	vldr	s13, [r7, #32]
 800ddb2:	edd7 7a07 	vldr	s15, [r7, #28]
 800ddb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ddba:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ddbe:	4b37      	ldr	r3, [pc, #220]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800ddc0:	edd3 7a00 	vldr	s15, [r3]
 800ddc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddc8:	4b34      	ldr	r3, [pc, #208]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800ddca:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 800ddce:	4b30      	ldr	r3, [pc, #192]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800ddd0:	ed93 7a00 	vldr	s14, [r3]
 800ddd4:	4b2e      	ldr	r3, [pc, #184]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800ddd6:	edd3 7a00 	vldr	s15, [r3]
 800ddda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ddde:	4b2d      	ldr	r3, [pc, #180]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800dde0:	edd3 6a00 	vldr	s13, [r3]
 800dde4:	4b2b      	ldr	r3, [pc, #172]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800dde6:	edd3 7a00 	vldr	s15, [r3]
 800ddea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ddee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddf2:	4b29      	ldr	r3, [pc, #164]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800ddf4:	edd3 6a00 	vldr	s13, [r3]
 800ddf8:	4b27      	ldr	r3, [pc, #156]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800ddfa:	edd3 7a00 	vldr	s15, [r3]
 800ddfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800de06:	4b25      	ldr	r3, [pc, #148]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800de08:	edd3 6a00 	vldr	s13, [r3]
 800de0c:	4b23      	ldr	r3, [pc, #140]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800de0e:	edd3 7a00 	vldr	s15, [r3]
 800de12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800de16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800de1a:	eeb0 0a67 	vmov.f32	s0, s15
 800de1e:	f000 f929 	bl	800e074 <invSqrt>
 800de22:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
  qw *= recipNorm;
 800de26:	4b1a      	ldr	r3, [pc, #104]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800de28:	ed93 7a00 	vldr	s14, [r3]
 800de2c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800de30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de34:	4b16      	ldr	r3, [pc, #88]	@ (800de90 <sensfusion6UpdateQImpl+0x530>)
 800de36:	edc3 7a00 	vstr	s15, [r3]
  qx *= recipNorm;
 800de3a:	4b16      	ldr	r3, [pc, #88]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800de3c:	ed93 7a00 	vldr	s14, [r3]
 800de40:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800de44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de48:	4b12      	ldr	r3, [pc, #72]	@ (800de94 <sensfusion6UpdateQImpl+0x534>)
 800de4a:	edc3 7a00 	vstr	s15, [r3]
  qy *= recipNorm;
 800de4e:	4b12      	ldr	r3, [pc, #72]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800de50:	ed93 7a00 	vldr	s14, [r3]
 800de54:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800de58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de5c:	4b0e      	ldr	r3, [pc, #56]	@ (800de98 <sensfusion6UpdateQImpl+0x538>)
 800de5e:	edc3 7a00 	vstr	s15, [r3]
  qz *= recipNorm;
 800de62:	4b0e      	ldr	r3, [pc, #56]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800de64:	ed93 7a00 	vldr	s14, [r3]
 800de68:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800de6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de70:	4b0a      	ldr	r3, [pc, #40]	@ (800de9c <sensfusion6UpdateQImpl+0x53c>)
 800de72:	edc3 7a00 	vstr	s15, [r3]
}
 800de76:	bf00      	nop
 800de78:	3748      	adds	r7, #72	@ 0x48
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	200089b8 	.word	0x200089b8
 800de84:	200089bc 	.word	0x200089bc
 800de88:	200089c0 	.word	0x200089c0
 800de8c:	20000020 	.word	0x20000020
 800de90:	20000028 	.word	0x20000028
 800de94:	200089c4 	.word	0x200089c4
 800de98:	200089c8 	.word	0x200089c8
 800de9c:	200089cc 	.word	0x200089cc

0800dea0 <sensfusion6GetQuaternion>:
#endif

void sensfusion6GetQuaternion(float* q_x, float* q_y, float* q_z, float* q_w)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	603b      	str	r3, [r7, #0]
  *q_x = qx;
 800deae:	4b0b      	ldr	r3, [pc, #44]	@ (800dedc <sensfusion6GetQuaternion+0x3c>)
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	601a      	str	r2, [r3, #0]
  *q_y = qy;
 800deb6:	4b0a      	ldr	r3, [pc, #40]	@ (800dee0 <sensfusion6GetQuaternion+0x40>)
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	601a      	str	r2, [r3, #0]
  *q_z = qz;
 800debe:	4b09      	ldr	r3, [pc, #36]	@ (800dee4 <sensfusion6GetQuaternion+0x44>)
 800dec0:	681a      	ldr	r2, [r3, #0]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	601a      	str	r2, [r3, #0]
  *q_w = qw;
 800dec6:	4b08      	ldr	r3, [pc, #32]	@ (800dee8 <sensfusion6GetQuaternion+0x48>)
 800dec8:	681a      	ldr	r2, [r3, #0]
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	601a      	str	r2, [r3, #0]
}
 800dece:	bf00      	nop
 800ded0:	3714      	adds	r7, #20
 800ded2:	46bd      	mov	sp, r7
 800ded4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded8:	4770      	bx	lr
 800deda:	bf00      	nop
 800dedc:	200089c4 	.word	0x200089c4
 800dee0:	200089c8 	.word	0x200089c8
 800dee4:	200089cc 	.word	0x200089cc
 800dee8:	20000028 	.word	0x20000028

0800deec <sensfusion6GetEulerRPY>:

void sensfusion6GetEulerRPY(float* roll, float* pitch, float* yaw)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
  float gx = gravX;
 800def8:	4b44      	ldr	r3, [pc, #272]	@ (800e00c <sensfusion6GetEulerRPY+0x120>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	61fb      	str	r3, [r7, #28]
  float gy = gravY;
 800defe:	4b44      	ldr	r3, [pc, #272]	@ (800e010 <sensfusion6GetEulerRPY+0x124>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	61bb      	str	r3, [r7, #24]
  float gz = gravZ;
 800df04:	4b43      	ldr	r3, [pc, #268]	@ (800e014 <sensfusion6GetEulerRPY+0x128>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	617b      	str	r3, [r7, #20]

  if (gx>1) gx=1;
 800df0a:	edd7 7a07 	vldr	s15, [r7, #28]
 800df0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df12:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df1a:	dd02      	ble.n	800df22 <sensfusion6GetEulerRPY+0x36>
 800df1c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800df20:	61fb      	str	r3, [r7, #28]
  if (gx<-1) gx=-1;
 800df22:	edd7 7a07 	vldr	s15, [r7, #28]
 800df26:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800df2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df32:	d501      	bpl.n	800df38 <sensfusion6GetEulerRPY+0x4c>
 800df34:	4b38      	ldr	r3, [pc, #224]	@ (800e018 <sensfusion6GetEulerRPY+0x12c>)
 800df36:	61fb      	str	r3, [r7, #28]

  *yaw = -atan2f(2*(qw*qz + qx*qy), (+1.0f - 2.0f * (qy*qy + qz*qz))) * 180 / M_PI_F;
 800df38:	4b38      	ldr	r3, [pc, #224]	@ (800e01c <sensfusion6GetEulerRPY+0x130>)
 800df3a:	ed93 7a00 	vldr	s14, [r3]
 800df3e:	4b38      	ldr	r3, [pc, #224]	@ (800e020 <sensfusion6GetEulerRPY+0x134>)
 800df40:	edd3 7a00 	vldr	s15, [r3]
 800df44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df48:	4b36      	ldr	r3, [pc, #216]	@ (800e024 <sensfusion6GetEulerRPY+0x138>)
 800df4a:	edd3 6a00 	vldr	s13, [r3]
 800df4e:	4b36      	ldr	r3, [pc, #216]	@ (800e028 <sensfusion6GetEulerRPY+0x13c>)
 800df50:	edd3 7a00 	vldr	s15, [r3]
 800df54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df58:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df5c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800df60:	4b31      	ldr	r3, [pc, #196]	@ (800e028 <sensfusion6GetEulerRPY+0x13c>)
 800df62:	ed93 7a00 	vldr	s14, [r3]
 800df66:	4b30      	ldr	r3, [pc, #192]	@ (800e028 <sensfusion6GetEulerRPY+0x13c>)
 800df68:	edd3 7a00 	vldr	s15, [r3]
 800df6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df70:	4b2b      	ldr	r3, [pc, #172]	@ (800e020 <sensfusion6GetEulerRPY+0x134>)
 800df72:	edd3 6a00 	vldr	s13, [r3]
 800df76:	4b2a      	ldr	r3, [pc, #168]	@ (800e020 <sensfusion6GetEulerRPY+0x134>)
 800df78:	edd3 7a00 	vldr	s15, [r3]
 800df7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df84:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800df88:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df90:	eef0 0a67 	vmov.f32	s1, s15
 800df94:	eeb0 0a46 	vmov.f32	s0, s12
 800df98:	f00b fa24 	bl	80193e4 <atan2f>
 800df9c:	eef0 7a40 	vmov.f32	s15, s0
 800dfa0:	eef1 7a67 	vneg.f32	s15, s15
 800dfa4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800e02c <sensfusion6GetEulerRPY+0x140>
 800dfa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dfac:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800e030 <sensfusion6GetEulerRPY+0x144>
 800dfb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	edc3 7a00 	vstr	s15, [r3]
  *pitch = asinf(gx) * 180 / M_PI_F; //Pitch seems to be inverted
 800dfba:	ed97 0a07 	vldr	s0, [r7, #28]
 800dfbe:	f00b f9e5 	bl	801938c <asinf>
 800dfc2:	eef0 7a40 	vmov.f32	s15, s0
 800dfc6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800e02c <sensfusion6GetEulerRPY+0x140>
 800dfca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dfce:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800e030 <sensfusion6GetEulerRPY+0x144>
 800dfd2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	edc3 7a00 	vstr	s15, [r3]
  *roll = atan2f(gy, gz) * 180 / M_PI_F;
 800dfdc:	edd7 0a05 	vldr	s1, [r7, #20]
 800dfe0:	ed97 0a06 	vldr	s0, [r7, #24]
 800dfe4:	f00b f9fe 	bl	80193e4 <atan2f>
 800dfe8:	eef0 7a40 	vmov.f32	s15, s0
 800dfec:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800e02c <sensfusion6GetEulerRPY+0x140>
 800dff0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800dff4:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e030 <sensfusion6GetEulerRPY+0x144>
 800dff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	edc3 7a00 	vstr	s15, [r3]
}
 800e002:	bf00      	nop
 800e004:	3720      	adds	r7, #32
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	200089d0 	.word	0x200089d0
 800e010:	200089d4 	.word	0x200089d4
 800e014:	200089d8 	.word	0x200089d8
 800e018:	bf800000 	.word	0xbf800000
 800e01c:	20000028 	.word	0x20000028
 800e020:	200089cc 	.word	0x200089cc
 800e024:	200089c4 	.word	0x200089c4
 800e028:	200089c8 	.word	0x200089c8
 800e02c:	43340000 	.word	0x43340000
 800e030:	40490fdb 	.word	0x40490fdb

0800e034 <sensfusion6GetAccZWithoutGravity>:

float sensfusion6GetAccZWithoutGravity(const float ax, const float ay, const float az)
{
 800e034:	b580      	push	{r7, lr}
 800e036:	b084      	sub	sp, #16
 800e038:	af00      	add	r7, sp, #0
 800e03a:	ed87 0a03 	vstr	s0, [r7, #12]
 800e03e:	edc7 0a02 	vstr	s1, [r7, #8]
 800e042:	ed87 1a01 	vstr	s2, [r7, #4]
  return sensfusion6GetAccZ(ax, ay, az) - baseZacc;
 800e046:	ed97 1a01 	vldr	s2, [r7, #4]
 800e04a:	edd7 0a02 	vldr	s1, [r7, #8]
 800e04e:	ed97 0a03 	vldr	s0, [r7, #12]
 800e052:	f000 f84b 	bl	800e0ec <sensfusion6GetAccZ>
 800e056:	eeb0 7a40 	vmov.f32	s14, s0
 800e05a:	4b05      	ldr	r3, [pc, #20]	@ (800e070 <sensfusion6GetAccZWithoutGravity+0x3c>)
 800e05c:	edd3 7a00 	vldr	s15, [r3]
 800e060:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800e064:	eeb0 0a67 	vmov.f32	s0, s15
 800e068:	3710      	adds	r7, #16
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}
 800e06e:	bf00      	nop
 800e070:	2000002c 	.word	0x2000002c

0800e074 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x)
{
 800e074:	b480      	push	{r7}
 800e076:	b087      	sub	sp, #28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800e07e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e082:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e08a:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 800e092:	f107 0310 	add.w	r3, r7, #16
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i>>1);
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	105a      	asrs	r2, r3, #1
 800e09e:	4b12      	ldr	r3, [pc, #72]	@ (800e0e8 <invSqrt+0x74>)
 800e0a0:	1a9b      	subs	r3, r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 800e0a4:	f107 030c 	add.w	r3, r7, #12
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800e0ac:	ed97 7a04 	vldr	s14, [r7, #16]
 800e0b0:	edd7 7a05 	vldr	s15, [r7, #20]
 800e0b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0c0:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800e0c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e0c8:	edd7 7a04 	vldr	s15, [r7, #16]
 800e0cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0d0:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800e0d4:	693b      	ldr	r3, [r7, #16]
 800e0d6:	ee07 3a90 	vmov	s15, r3
}
 800e0da:	eeb0 0a67 	vmov.f32	s0, s15
 800e0de:	371c      	adds	r7, #28
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e6:	4770      	bx	lr
 800e0e8:	5f3759df 	.word	0x5f3759df

0800e0ec <sensfusion6GetAccZ>:

static float sensfusion6GetAccZ(const float ax, const float ay, const float az)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b085      	sub	sp, #20
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	ed87 0a03 	vstr	s0, [r7, #12]
 800e0f6:	edc7 0a02 	vstr	s1, [r7, #8]
 800e0fa:	ed87 1a01 	vstr	s2, [r7, #4]
  // return vertical acceleration
  // (A dot G) / |G|,  (|G| = 1) -> (A dot G)
  return (ax * gravX + ay * gravY + az * gravZ);
 800e0fe:	4b10      	ldr	r3, [pc, #64]	@ (800e140 <sensfusion6GetAccZ+0x54>)
 800e100:	ed93 7a00 	vldr	s14, [r3]
 800e104:	edd7 7a03 	vldr	s15, [r7, #12]
 800e108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e10c:	4b0d      	ldr	r3, [pc, #52]	@ (800e144 <sensfusion6GetAccZ+0x58>)
 800e10e:	edd3 6a00 	vldr	s13, [r3]
 800e112:	edd7 7a02 	vldr	s15, [r7, #8]
 800e116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e11a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e11e:	4b0a      	ldr	r3, [pc, #40]	@ (800e148 <sensfusion6GetAccZ+0x5c>)
 800e120:	edd3 6a00 	vldr	s13, [r3]
 800e124:	edd7 7a01 	vldr	s15, [r7, #4]
 800e128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e12c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800e130:	eeb0 0a67 	vmov.f32	s0, s15
 800e134:	3714      	adds	r7, #20
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr
 800e13e:	bf00      	nop
 800e140:	200089d0 	.word	0x200089d0
 800e144:	200089d4 	.word	0x200089d4
 800e148:	200089d8 	.word	0x200089d8

0800e14c <estimatedGravityDirection>:

static void estimatedGravityDirection(float* gx, float* gy, float* gz)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b085      	sub	sp, #20
 800e150:	af00      	add	r7, sp, #0
 800e152:	60f8      	str	r0, [r7, #12]
 800e154:	60b9      	str	r1, [r7, #8]
 800e156:	607a      	str	r2, [r7, #4]
  *gx = 2 * (qx * qz - qw * qy);
 800e158:	4b2e      	ldr	r3, [pc, #184]	@ (800e214 <estimatedGravityDirection+0xc8>)
 800e15a:	ed93 7a00 	vldr	s14, [r3]
 800e15e:	4b2e      	ldr	r3, [pc, #184]	@ (800e218 <estimatedGravityDirection+0xcc>)
 800e160:	edd3 7a00 	vldr	s15, [r3]
 800e164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e168:	4b2c      	ldr	r3, [pc, #176]	@ (800e21c <estimatedGravityDirection+0xd0>)
 800e16a:	edd3 6a00 	vldr	s13, [r3]
 800e16e:	4b2c      	ldr	r3, [pc, #176]	@ (800e220 <estimatedGravityDirection+0xd4>)
 800e170:	edd3 7a00 	vldr	s15, [r3]
 800e174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e17c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	edc3 7a00 	vstr	s15, [r3]
  *gy = 2 * (qw * qx + qy * qz);
 800e186:	4b25      	ldr	r3, [pc, #148]	@ (800e21c <estimatedGravityDirection+0xd0>)
 800e188:	ed93 7a00 	vldr	s14, [r3]
 800e18c:	4b21      	ldr	r3, [pc, #132]	@ (800e214 <estimatedGravityDirection+0xc8>)
 800e18e:	edd3 7a00 	vldr	s15, [r3]
 800e192:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e196:	4b22      	ldr	r3, [pc, #136]	@ (800e220 <estimatedGravityDirection+0xd4>)
 800e198:	edd3 6a00 	vldr	s13, [r3]
 800e19c:	4b1e      	ldr	r3, [pc, #120]	@ (800e218 <estimatedGravityDirection+0xcc>)
 800e19e:	edd3 7a00 	vldr	s15, [r3]
 800e1a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e1ae:	68bb      	ldr	r3, [r7, #8]
 800e1b0:	edc3 7a00 	vstr	s15, [r3]
  *gz = qw * qw - qx * qx - qy * qy + qz * qz;
 800e1b4:	4b19      	ldr	r3, [pc, #100]	@ (800e21c <estimatedGravityDirection+0xd0>)
 800e1b6:	ed93 7a00 	vldr	s14, [r3]
 800e1ba:	4b18      	ldr	r3, [pc, #96]	@ (800e21c <estimatedGravityDirection+0xd0>)
 800e1bc:	edd3 7a00 	vldr	s15, [r3]
 800e1c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1c4:	4b13      	ldr	r3, [pc, #76]	@ (800e214 <estimatedGravityDirection+0xc8>)
 800e1c6:	edd3 6a00 	vldr	s13, [r3]
 800e1ca:	4b12      	ldr	r3, [pc, #72]	@ (800e214 <estimatedGravityDirection+0xc8>)
 800e1cc:	edd3 7a00 	vldr	s15, [r3]
 800e1d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1d8:	4b11      	ldr	r3, [pc, #68]	@ (800e220 <estimatedGravityDirection+0xd4>)
 800e1da:	edd3 6a00 	vldr	s13, [r3]
 800e1de:	4b10      	ldr	r3, [pc, #64]	@ (800e220 <estimatedGravityDirection+0xd4>)
 800e1e0:	edd3 7a00 	vldr	s15, [r3]
 800e1e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e1ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e218 <estimatedGravityDirection+0xcc>)
 800e1ee:	edd3 6a00 	vldr	s13, [r3]
 800e1f2:	4b09      	ldr	r3, [pc, #36]	@ (800e218 <estimatedGravityDirection+0xcc>)
 800e1f4:	edd3 7a00 	vldr	s15, [r3]
 800e1f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	edc3 7a00 	vstr	s15, [r3]
}
 800e206:	bf00      	nop
 800e208:	3714      	adds	r7, #20
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	200089c4 	.word	0x200089c4
 800e218:	200089cc 	.word	0x200089cc
 800e21c:	20000028 	.word	0x20000028
 800e220:	200089c8 	.word	0x200089c8

0800e224 <quatcompress>:
#include <stdint.h>
#include <math.h>

// assumes input quaternion is normalized. will fail if not.
static inline uint32_t quatcompress(float const q[4])
{
 800e224:	b480      	push	{r7}
 800e226:	b08b      	sub	sp, #44	@ 0x2c
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
	// we send the values of the quaternion's smallest 3 elements.
	unsigned i_largest = 0;
 800e22c:	2300      	movs	r3, #0
 800e22e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800e230:	2301      	movs	r3, #1
 800e232:	623b      	str	r3, [r7, #32]
 800e234:	e019      	b.n	800e26a <quatcompress+0x46>
		if (fabsf(q[i]) > fabsf(q[i_largest])) {
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	4413      	add	r3, r2
 800e23e:	edd3 7a00 	vldr	s15, [r3]
 800e242:	eeb0 7ae7 	vabs.f32	s14, s15
 800e246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e248:	009b      	lsls	r3, r3, #2
 800e24a:	687a      	ldr	r2, [r7, #4]
 800e24c:	4413      	add	r3, r2
 800e24e:	edd3 7a00 	vldr	s15, [r3]
 800e252:	eef0 7ae7 	vabs.f32	s15, s15
 800e256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e25e:	dd01      	ble.n	800e264 <quatcompress+0x40>
			i_largest = i;
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800e264:	6a3b      	ldr	r3, [r7, #32]
 800e266:	3301      	adds	r3, #1
 800e268:	623b      	str	r3, [r7, #32]
 800e26a:	6a3b      	ldr	r3, [r7, #32]
 800e26c:	2b03      	cmp	r3, #3
 800e26e:	d9e2      	bls.n	800e236 <quatcompress+0x12>
	}

	// since -q represents the same rotation as q,
	// transform the quaternion so the largest element is positive.
	// this avoids having to send its sign bit.
	unsigned negate = q[i_largest] < 0;
 800e270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	687a      	ldr	r2, [r7, #4]
 800e276:	4413      	add	r3, r2
 800e278:	edd3 7a00 	vldr	s15, [r3]
 800e27c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e284:	bf4c      	ite	mi
 800e286:	2301      	movmi	r3, #1
 800e288:	2300      	movpl	r3, #0
 800e28a:	b2db      	uxtb	r3, r3
 800e28c:	617b      	str	r3, [r7, #20]

	// 1/sqrt(2) is the largest possible value 
	// of the second-largest element in a unit quaternion.

	// do compression using sign bit and 9-bit precision per element.
	uint32_t comp = i_largest;
 800e28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e290:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800e292:	2300      	movs	r3, #0
 800e294:	61bb      	str	r3, [r7, #24]
 800e296:	e039      	b.n	800e30c <quatcompress+0xe8>
		if (i != i_largest) {
 800e298:	69ba      	ldr	r2, [r7, #24]
 800e29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d032      	beq.n	800e306 <quatcompress+0xe2>
			unsigned negbit = (q[i] < 0) ^ negate;
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	edd3 7a00 	vldr	s15, [r3]
 800e2ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e2b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2b4:	bf4c      	ite	mi
 800e2b6:	2301      	movmi	r3, #1
 800e2b8:	2300      	movpl	r3, #0
 800e2ba:	b2db      	uxtb	r3, r3
 800e2bc:	461a      	mov	r2, r3
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	4053      	eors	r3, r2
 800e2c2:	613b      	str	r3, [r7, #16]
			unsigned mag = ((1 << 9) - 1) * (fabsf(q[i]) / (float)M_SQRT1_2) + 0.5f;
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	4413      	add	r3, r2
 800e2cc:	edd3 7a00 	vldr	s15, [r3]
 800e2d0:	eeb0 7ae7 	vabs.f32	s14, s15
 800e2d4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800e320 <quatcompress+0xfc>
 800e2d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e2dc:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800e324 <quatcompress+0x100>
 800e2e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2e4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e2e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e2f0:	ee17 3a90 	vmov	r3, s15
 800e2f4:	60fb      	str	r3, [r7, #12]
			comp = (comp << 10) | (negbit << 9) | mag;
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	029a      	lsls	r2, r3, #10
 800e2fa:	693b      	ldr	r3, [r7, #16]
 800e2fc:	025b      	lsls	r3, r3, #9
 800e2fe:	4313      	orrs	r3, r2
 800e300:	68fa      	ldr	r2, [r7, #12]
 800e302:	4313      	orrs	r3, r2
 800e304:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	3301      	adds	r3, #1
 800e30a:	61bb      	str	r3, [r7, #24]
 800e30c:	69bb      	ldr	r3, [r7, #24]
 800e30e:	2b03      	cmp	r3, #3
 800e310:	d9c2      	bls.n	800e298 <quatcompress+0x74>
		}
	}

	return comp;
 800e312:	69fb      	ldr	r3, [r7, #28]
}
 800e314:	4618      	mov	r0, r3
 800e316:	372c      	adds	r7, #44	@ 0x2c
 800e318:	46bd      	mov	sp, r7
 800e31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31e:	4770      	bx	lr
 800e320:	3f3504f3 	.word	0x3f3504f3
 800e324:	43ff8000 	.word	0x43ff8000

0800e328 <calcSensorToOutputLatency>:
STATIC_MEM_TASK_ALLOC(stabilizerTask, STABILIZER_TASK_STACKSIZE);

static void stabilizerTask(void* param);

static void calcSensorToOutputLatency(const sensorData_t *sensorData)
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b084      	sub	sp, #16
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  uint64_t outTimestamp = usecTimestamp();
 800e330:	f7ff f8cc 	bl	800d4cc <usecTimestamp>
 800e334:	e9c7 0102 	strd	r0, r1, [r7, #8]
  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;
 800e338:	68b9      	ldr	r1, [r7, #8]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800e340:	4613      	mov	r3, r2
 800e342:	1acb      	subs	r3, r1, r3
 800e344:	4a02      	ldr	r2, [pc, #8]	@ (800e350 <calcSensorToOutputLatency+0x28>)
 800e346:	6013      	str	r3, [r2, #0]
}
 800e348:	bf00      	nop
 800e34a:	3710      	adds	r7, #16
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}
 800e350:	200089e0 	.word	0x200089e0

0800e354 <compressState>:

static void compressState()
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
  stateCompressed.x = state.position.x * 1000.0f;
 800e35a:	4b6a      	ldr	r3, [pc, #424]	@ (800e504 <compressState+0x1b0>)
 800e35c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e360:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800e508 <compressState+0x1b4>
 800e364:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e368:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e36c:	ee17 3a90 	vmov	r3, s15
 800e370:	b21a      	sxth	r2, r3
 800e372:	4b66      	ldr	r3, [pc, #408]	@ (800e50c <compressState+0x1b8>)
 800e374:	801a      	strh	r2, [r3, #0]
  stateCompressed.y = state.position.y * 1000.0f;
 800e376:	4b63      	ldr	r3, [pc, #396]	@ (800e504 <compressState+0x1b0>)
 800e378:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e37c:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800e508 <compressState+0x1b4>
 800e380:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e388:	ee17 3a90 	vmov	r3, s15
 800e38c:	b21a      	sxth	r2, r3
 800e38e:	4b5f      	ldr	r3, [pc, #380]	@ (800e50c <compressState+0x1b8>)
 800e390:	805a      	strh	r2, [r3, #2]
  stateCompressed.z = state.position.z * 1000.0f;
 800e392:	4b5c      	ldr	r3, [pc, #368]	@ (800e504 <compressState+0x1b0>)
 800e394:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e398:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800e508 <compressState+0x1b4>
 800e39c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3a4:	ee17 3a90 	vmov	r3, s15
 800e3a8:	b21a      	sxth	r2, r3
 800e3aa:	4b58      	ldr	r3, [pc, #352]	@ (800e50c <compressState+0x1b8>)
 800e3ac:	809a      	strh	r2, [r3, #4]

  stateCompressed.vx = state.velocity.x * 1000.0f;
 800e3ae:	4b55      	ldr	r3, [pc, #340]	@ (800e504 <compressState+0x1b0>)
 800e3b0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800e3b4:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800e508 <compressState+0x1b4>
 800e3b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3c0:	ee17 3a90 	vmov	r3, s15
 800e3c4:	b21a      	sxth	r2, r3
 800e3c6:	4b51      	ldr	r3, [pc, #324]	@ (800e50c <compressState+0x1b8>)
 800e3c8:	80da      	strh	r2, [r3, #6]
  stateCompressed.vy = state.velocity.y * 1000.0f;
 800e3ca:	4b4e      	ldr	r3, [pc, #312]	@ (800e504 <compressState+0x1b0>)
 800e3cc:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800e3d0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800e508 <compressState+0x1b4>
 800e3d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3dc:	ee17 3a90 	vmov	r3, s15
 800e3e0:	b21a      	sxth	r2, r3
 800e3e2:	4b4a      	ldr	r3, [pc, #296]	@ (800e50c <compressState+0x1b8>)
 800e3e4:	811a      	strh	r2, [r3, #8]
  stateCompressed.vz = state.velocity.z * 1000.0f;
 800e3e6:	4b47      	ldr	r3, [pc, #284]	@ (800e504 <compressState+0x1b0>)
 800e3e8:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800e3ec:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e508 <compressState+0x1b4>
 800e3f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e3f8:	ee17 3a90 	vmov	r3, s15
 800e3fc:	b21a      	sxth	r2, r3
 800e3fe:	4b43      	ldr	r3, [pc, #268]	@ (800e50c <compressState+0x1b8>)
 800e400:	815a      	strh	r2, [r3, #10]

  stateCompressed.ax = state.acc.x * 9.81f * 1000.0f;
 800e402:	4b40      	ldr	r3, [pc, #256]	@ (800e504 <compressState+0x1b0>)
 800e404:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e408:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800e510 <compressState+0x1bc>
 800e40c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e410:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800e508 <compressState+0x1b4>
 800e414:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e41c:	ee17 3a90 	vmov	r3, s15
 800e420:	b21a      	sxth	r2, r3
 800e422:	4b3a      	ldr	r3, [pc, #232]	@ (800e50c <compressState+0x1b8>)
 800e424:	819a      	strh	r2, [r3, #12]
  stateCompressed.ay = state.acc.y * 9.81f * 1000.0f;
 800e426:	4b37      	ldr	r3, [pc, #220]	@ (800e504 <compressState+0x1b0>)
 800e428:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800e42c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800e510 <compressState+0x1bc>
 800e430:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e434:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e508 <compressState+0x1b4>
 800e438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e43c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e440:	ee17 3a90 	vmov	r3, s15
 800e444:	b21a      	sxth	r2, r3
 800e446:	4b31      	ldr	r3, [pc, #196]	@ (800e50c <compressState+0x1b8>)
 800e448:	81da      	strh	r2, [r3, #14]
  stateCompressed.az = (state.acc.z + 1) * 9.81f * 1000.0f;
 800e44a:	4b2e      	ldr	r3, [pc, #184]	@ (800e504 <compressState+0x1b0>)
 800e44c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e450:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e454:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e458:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800e510 <compressState+0x1bc>
 800e45c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e460:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800e508 <compressState+0x1b4>
 800e464:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e46c:	ee17 3a90 	vmov	r3, s15
 800e470:	b21a      	sxth	r2, r3
 800e472:	4b26      	ldr	r3, [pc, #152]	@ (800e50c <compressState+0x1b8>)
 800e474:	821a      	strh	r2, [r3, #16]

  float const q[4] = {
    state.attitudeQuaternion.x,
 800e476:	4b23      	ldr	r3, [pc, #140]	@ (800e504 <compressState+0x1b0>)
 800e478:	691b      	ldr	r3, [r3, #16]
  float const q[4] = {
 800e47a:	607b      	str	r3, [r7, #4]
    state.attitudeQuaternion.y,
 800e47c:	4b21      	ldr	r3, [pc, #132]	@ (800e504 <compressState+0x1b0>)
 800e47e:	695b      	ldr	r3, [r3, #20]
  float const q[4] = {
 800e480:	60bb      	str	r3, [r7, #8]
    state.attitudeQuaternion.z,
 800e482:	4b20      	ldr	r3, [pc, #128]	@ (800e504 <compressState+0x1b0>)
 800e484:	699b      	ldr	r3, [r3, #24]
  float const q[4] = {
 800e486:	60fb      	str	r3, [r7, #12]
    state.attitudeQuaternion.w};
 800e488:	4b1e      	ldr	r3, [pc, #120]	@ (800e504 <compressState+0x1b0>)
 800e48a:	69db      	ldr	r3, [r3, #28]
  float const q[4] = {
 800e48c:	613b      	str	r3, [r7, #16]
  stateCompressed.quat = quatcompress(q);
 800e48e:	1d3b      	adds	r3, r7, #4
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff fec7 	bl	800e224 <quatcompress>
 800e496:	4603      	mov	r3, r0
 800e498:	461a      	mov	r2, r3
 800e49a:	4b1c      	ldr	r3, [pc, #112]	@ (800e50c <compressState+0x1b8>)
 800e49c:	615a      	str	r2, [r3, #20]

  float const deg2millirad = ((float)M_PI * 1000.0f) / 180.0f;
 800e49e:	4b1d      	ldr	r3, [pc, #116]	@ (800e514 <compressState+0x1c0>)
 800e4a0:	617b      	str	r3, [r7, #20]
  stateCompressed.rateRoll = sensorData.gyro.x * deg2millirad;
 800e4a2:	4b1d      	ldr	r3, [pc, #116]	@ (800e518 <compressState+0x1c4>)
 800e4a4:	ed93 7a03 	vldr	s14, [r3, #12]
 800e4a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4b4:	ee17 3a90 	vmov	r3, s15
 800e4b8:	b21a      	sxth	r2, r3
 800e4ba:	4b14      	ldr	r3, [pc, #80]	@ (800e50c <compressState+0x1b8>)
 800e4bc:	831a      	strh	r2, [r3, #24]
  stateCompressed.ratePitch = -sensorData.gyro.y * deg2millirad;
 800e4be:	4b16      	ldr	r3, [pc, #88]	@ (800e518 <compressState+0x1c4>)
 800e4c0:	edd3 7a04 	vldr	s15, [r3, #16]
 800e4c4:	eeb1 7a67 	vneg.f32	s14, s15
 800e4c8:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4d4:	ee17 3a90 	vmov	r3, s15
 800e4d8:	b21a      	sxth	r2, r3
 800e4da:	4b0c      	ldr	r3, [pc, #48]	@ (800e50c <compressState+0x1b8>)
 800e4dc:	835a      	strh	r2, [r3, #26]
  stateCompressed.rateYaw = sensorData.gyro.z * deg2millirad;
 800e4de:	4b0e      	ldr	r3, [pc, #56]	@ (800e518 <compressState+0x1c4>)
 800e4e0:	ed93 7a05 	vldr	s14, [r3, #20]
 800e4e4:	edd7 7a05 	vldr	s15, [r7, #20]
 800e4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4f0:	ee17 3a90 	vmov	r3, s15
 800e4f4:	b21a      	sxth	r2, r3
 800e4f6:	4b05      	ldr	r3, [pc, #20]	@ (800e50c <compressState+0x1b8>)
 800e4f8:	839a      	strh	r2, [r3, #28]
}
 800e4fa:	bf00      	nop
 800e4fc:	3718      	adds	r7, #24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	bd80      	pop	{r7, pc}
 800e502:	bf00      	nop
 800e504:	20008a90 	.word	0x20008a90
 800e508:	447a0000 	.word	0x447a0000
 800e50c:	20008b00 	.word	0x20008b00
 800e510:	411cf5c3 	.word	0x411cf5c3
 800e514:	418ba058 	.word	0x418ba058
 800e518:	20008a58 	.word	0x20008a58

0800e51c <compressSetpoint>:

static void compressSetpoint()
{
 800e51c:	b480      	push	{r7}
 800e51e:	af00      	add	r7, sp, #0
  setpointCompressed.x = setpoint.position.x * 1000.0f;
 800e520:	4b41      	ldr	r3, [pc, #260]	@ (800e628 <compressSetpoint+0x10c>)
 800e522:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800e526:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800e62c <compressSetpoint+0x110>
 800e52a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e52e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e532:	ee17 3a90 	vmov	r3, s15
 800e536:	b21a      	sxth	r2, r3
 800e538:	4b3d      	ldr	r3, [pc, #244]	@ (800e630 <compressSetpoint+0x114>)
 800e53a:	801a      	strh	r2, [r3, #0]
  setpointCompressed.y = setpoint.position.y * 1000.0f;
 800e53c:	4b3a      	ldr	r3, [pc, #232]	@ (800e628 <compressSetpoint+0x10c>)
 800e53e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800e542:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800e62c <compressSetpoint+0x110>
 800e546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e54a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e54e:	ee17 3a90 	vmov	r3, s15
 800e552:	b21a      	sxth	r2, r3
 800e554:	4b36      	ldr	r3, [pc, #216]	@ (800e630 <compressSetpoint+0x114>)
 800e556:	805a      	strh	r2, [r3, #2]
  setpointCompressed.z = setpoint.position.z * 1000.0f;
 800e558:	4b33      	ldr	r3, [pc, #204]	@ (800e628 <compressSetpoint+0x10c>)
 800e55a:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800e55e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800e62c <compressSetpoint+0x110>
 800e562:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e566:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e56a:	ee17 3a90 	vmov	r3, s15
 800e56e:	b21a      	sxth	r2, r3
 800e570:	4b2f      	ldr	r3, [pc, #188]	@ (800e630 <compressSetpoint+0x114>)
 800e572:	809a      	strh	r2, [r3, #4]

  setpointCompressed.vx = setpoint.velocity.x * 1000.0f;
 800e574:	4b2c      	ldr	r3, [pc, #176]	@ (800e628 <compressSetpoint+0x10c>)
 800e576:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e57a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800e62c <compressSetpoint+0x110>
 800e57e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e582:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e586:	ee17 3a90 	vmov	r3, s15
 800e58a:	b21a      	sxth	r2, r3
 800e58c:	4b28      	ldr	r3, [pc, #160]	@ (800e630 <compressSetpoint+0x114>)
 800e58e:	80da      	strh	r2, [r3, #6]
  setpointCompressed.vy = setpoint.velocity.y * 1000.0f;
 800e590:	4b25      	ldr	r3, [pc, #148]	@ (800e628 <compressSetpoint+0x10c>)
 800e592:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800e596:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800e62c <compressSetpoint+0x110>
 800e59a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e59e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5a2:	ee17 3a90 	vmov	r3, s15
 800e5a6:	b21a      	sxth	r2, r3
 800e5a8:	4b21      	ldr	r3, [pc, #132]	@ (800e630 <compressSetpoint+0x114>)
 800e5aa:	811a      	strh	r2, [r3, #8]
  setpointCompressed.vz = setpoint.velocity.z * 1000.0f;
 800e5ac:	4b1e      	ldr	r3, [pc, #120]	@ (800e628 <compressSetpoint+0x10c>)
 800e5ae:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800e5b2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800e62c <compressSetpoint+0x110>
 800e5b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5be:	ee17 3a90 	vmov	r3, s15
 800e5c2:	b21a      	sxth	r2, r3
 800e5c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e630 <compressSetpoint+0x114>)
 800e5c6:	815a      	strh	r2, [r3, #10]

  setpointCompressed.ax = setpoint.acceleration.x * 1000.0f;
 800e5c8:	4b17      	ldr	r3, [pc, #92]	@ (800e628 <compressSetpoint+0x10c>)
 800e5ca:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800e5ce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800e62c <compressSetpoint+0x110>
 800e5d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5da:	ee17 3a90 	vmov	r3, s15
 800e5de:	b21a      	sxth	r2, r3
 800e5e0:	4b13      	ldr	r3, [pc, #76]	@ (800e630 <compressSetpoint+0x114>)
 800e5e2:	819a      	strh	r2, [r3, #12]
  setpointCompressed.ay = setpoint.acceleration.y * 1000.0f;
 800e5e4:	4b10      	ldr	r3, [pc, #64]	@ (800e628 <compressSetpoint+0x10c>)
 800e5e6:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800e5ea:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800e62c <compressSetpoint+0x110>
 800e5ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e5f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e5f6:	ee17 3a90 	vmov	r3, s15
 800e5fa:	b21a      	sxth	r2, r3
 800e5fc:	4b0c      	ldr	r3, [pc, #48]	@ (800e630 <compressSetpoint+0x114>)
 800e5fe:	81da      	strh	r2, [r3, #14]
  setpointCompressed.az = setpoint.acceleration.z * 1000.0f;
 800e600:	4b09      	ldr	r3, [pc, #36]	@ (800e628 <compressSetpoint+0x10c>)
 800e602:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800e606:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800e62c <compressSetpoint+0x110>
 800e60a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e60e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e612:	ee17 3a90 	vmov	r3, s15
 800e616:	b21a      	sxth	r2, r3
 800e618:	4b05      	ldr	r3, [pc, #20]	@ (800e630 <compressSetpoint+0x114>)
 800e61a:	821a      	strh	r2, [r3, #16]
}
 800e61c:	bf00      	nop
 800e61e:	46bd      	mov	sp, r7
 800e620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e624:	4770      	bx	lr
 800e626:	bf00      	nop
 800e628:	200089e4 	.word	0x200089e4
 800e62c:	447a0000 	.word	0x447a0000
 800e630:	20008b20 	.word	0x20008b20

0800e634 <stabilizerInit>:

void stabilizerInit(StateEstimatorType estimator)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af04      	add	r7, sp, #16
 800e63a:	4603      	mov	r3, r0
 800e63c:	71fb      	strb	r3, [r7, #7]
  if(isInit)
 800e63e:	4b13      	ldr	r3, [pc, #76]	@ (800e68c <stabilizerInit+0x58>)
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d11d      	bne.n	800e682 <stabilizerInit+0x4e>
    return;
//  skip = 1;//JH

  sensorsInit();
 800e646:	f7fd fb5f 	bl	800bd08 <sensorsInit>
//  skip = 1;// NJH

  stateEstimatorInit(estimator);
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f000 fa45 	bl	800eadc <stateEstimatorInit>

//  controllerInit(ControllerTypeAutoSelect);
//  powerDistributionInit();
//  motorsInit(platformConfigGetMotorMapping());
//  collisionAvoidanceInit();
  estimatorType = stateEstimatorGetType();
 800e652:	f000 fa8f 	bl	800eb74 <stateEstimatorGetType>
 800e656:	4603      	mov	r3, r0
 800e658:	461a      	mov	r2, r3
 800e65a:	4b0d      	ldr	r3, [pc, #52]	@ (800e690 <stabilizerInit+0x5c>)
 800e65c:	701a      	strb	r2, [r3, #0]
//  skip = 1;
//  controllerType = controllerGetType();

  STATIC_MEM_TASK_CREATE(stabilizerTask, stabilizerTask, STABILIZER_TASK_NAME, NULL, STABILIZER_TASK_PRI);
 800e65e:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800e662:	461a      	mov	r2, r3
 800e664:	4b0b      	ldr	r3, [pc, #44]	@ (800e694 <stabilizerInit+0x60>)
 800e666:	9302      	str	r3, [sp, #8]
 800e668:	4b0b      	ldr	r3, [pc, #44]	@ (800e698 <stabilizerInit+0x64>)
 800e66a:	9301      	str	r3, [sp, #4]
 800e66c:	2305      	movs	r3, #5
 800e66e:	9300      	str	r3, [sp, #0]
 800e670:	2300      	movs	r3, #0
 800e672:	490a      	ldr	r1, [pc, #40]	@ (800e69c <stabilizerInit+0x68>)
 800e674:	480a      	ldr	r0, [pc, #40]	@ (800e6a0 <stabilizerInit+0x6c>)
 800e676:	f7f8 fcaf 	bl	8006fd8 <xTaskCreateStatic>

  isInit = true;
 800e67a:	4b04      	ldr	r3, [pc, #16]	@ (800e68c <stabilizerInit+0x58>)
 800e67c:	2201      	movs	r2, #1
 800e67e:	701a      	strb	r2, [r3, #0]
 800e680:	e000      	b.n	800e684 <stabilizerInit+0x50>
    return;
 800e682:	bf00      	nop
}
 800e684:	3708      	adds	r7, #8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	200089de 	.word	0x200089de
 800e690:	20008ae0 	.word	0x20008ae0
 800e694:	10001da4 	.word	0x10001da4
 800e698:	20008b34 	.word	0x20008b34
 800e69c:	0801bfa4 	.word	0x0801bfa4
 800e6a0:	0800e705 	.word	0x0800e705

0800e6a4 <stabilizerTest>:

bool stabilizerTest(void)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
  bool pass = true;
 800e6aa:	2301      	movs	r3, #1
 800e6ac:	71fb      	strb	r3, [r7, #7]

//  pass &= sensorsTest();
  pass &= stateEstimatorTest();
 800e6ae:	f000 faab 	bl	800ec08 <stateEstimatorTest>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	4013      	ands	r3, r2
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	bf14      	ite	ne
 800e6be:	2301      	movne	r3, #1
 800e6c0:	2300      	moveq	r3, #0
 800e6c2:	71fb      	strb	r3, [r7, #7]
//  pass &= controllerTest();
//  pass &= powerDistributionTest();
//  pass &= motorsTest();
//  pass &= collisionAvoidanceTest();

  return pass;
 800e6c4:	79fb      	ldrb	r3, [r7, #7]
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3708      	adds	r7, #8
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}
	...

0800e6d0 <updateStateEstimatorAndControllerTypes>:
//  motorsSetRatio(MOTOR_M2, motorPwm->motors.m2);
//  motorsSetRatio(MOTOR_M3, motorPwm->motors.m3);
//  motorsSetRatio(MOTOR_M4, motorPwm->motors.m4);
//}

static void updateStateEstimatorAndControllerTypes() {
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
  if (stateEstimatorGetType() != estimatorType) {
 800e6d4:	f000 fa4e 	bl	800eb74 <stateEstimatorGetType>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	461a      	mov	r2, r3
 800e6dc:	4b08      	ldr	r3, [pc, #32]	@ (800e700 <updateStateEstimatorAndControllerTypes+0x30>)
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	429a      	cmp	r2, r3
 800e6e2:	d00a      	beq.n	800e6fa <updateStateEstimatorAndControllerTypes+0x2a>
    stateEstimatorSwitchTo(estimatorType);
 800e6e4:	4b06      	ldr	r3, [pc, #24]	@ (800e700 <updateStateEstimatorAndControllerTypes+0x30>)
 800e6e6:	781b      	ldrb	r3, [r3, #0]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f000 fa17 	bl	800eb1c <stateEstimatorSwitchTo>
    estimatorType = stateEstimatorGetType();
 800e6ee:	f000 fa41 	bl	800eb74 <stateEstimatorGetType>
 800e6f2:	4603      	mov	r3, r0
 800e6f4:	461a      	mov	r2, r3
 800e6f6:	4b02      	ldr	r3, [pc, #8]	@ (800e700 <updateStateEstimatorAndControllerTypes+0x30>)
 800e6f8:	701a      	strb	r2, [r3, #0]

//  if (controllerGetType() != controllerType) {
//    controllerInit(controllerType);
//    controllerType = controllerGetType();
//  }
}
 800e6fa:	bf00      	nop
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	20008ae0 	.word	0x20008ae0

0800e704 <stabilizerTask>:
/* The stabilizer loop runs at 1kHz. It is the
 * responsibility of the different functions to run slower by skipping call
 * (ie. returning without modifying the output structure).
 */
static void stabilizerTask(void* param)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b086      	sub	sp, #24
 800e708:	af02      	add	r7, sp, #8
 800e70a:	6078      	str	r0, [r7, #4]
  stabilizerStep_t stabilizerStep;
  uint32_t lastWakeTime;
  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);
 800e70c:	2103      	movs	r1, #3
 800e70e:	2000      	movs	r0, #0
 800e710:	f7f9 f89e 	bl	8007850 <vTaskSetApplicationTaskTag>

  //Wait for the system to be fully started to start stabilization loop
  systemWaitStart();
 800e714:	f000 f94e 	bl	800e9b4 <systemWaitStart>

//  DEBUG_PRINT("Wait for sensor calibration...\n");

  // Wait for sensors to be calibrated
  lastWakeTime = xTaskGetTickCount();
 800e718:	f7f8 ffcc 	bl	80076b4 <xTaskGetTickCount>
 800e71c:	4603      	mov	r3, r0
 800e71e:	60bb      	str	r3, [r7, #8]
  while(!sensorsAreCalibrated()) {
 800e720:	e005      	b.n	800e72e <stabilizerTask+0x2a>
    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));
 800e722:	f107 0308 	add.w	r3, r7, #8
 800e726:	2101      	movs	r1, #1
 800e728:	4618      	mov	r0, r3
 800e72a:	f7f8 fdfd 	bl	8007328 <vTaskDelayUntil>
  while(!sensorsAreCalibrated()) {
 800e72e:	f7fd fb0d 	bl	800bd4c <sensorsAreCalibrated>
 800e732:	4603      	mov	r3, r0
 800e734:	f083 0301 	eor.w	r3, r3, #1
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f1      	bne.n	800e722 <stabilizerTask+0x1e>
  }
  // Initialize stabilizerStep to something else than 0
  stabilizerStep = 1;
 800e73e:	2301      	movs	r3, #1
 800e740:	60fb      	str	r3, [r7, #12]


//  DEBUG_PRINT("Starting stabilizer loop\n");
  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997, 1003, 1);
 800e742:	f7f8 ffb7 	bl	80076b4 <xTaskGetTickCount>
 800e746:	4601      	mov	r1, r0
 800e748:	2301      	movs	r3, #1
 800e74a:	9301      	str	r3, [sp, #4]
 800e74c:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	f240 33e5 	movw	r3, #997	@ 0x3e5
 800e756:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e75a:	480d      	ldr	r0, [pc, #52]	@ (800e790 <stabilizerTask+0x8c>)
 800e75c:	f005 fc55 	bl	801400a <rateSupervisorInit>

  while(1) {
    // The sensor should unlock at 1kHz
    sensorsWaitDataReady();
 800e760:	f7fd fb10 	bl	800bd84 <sensorsWaitDataReady>

    // update sensorData struct (for logging variables)
    sensorsAcquire(&sensorData);
 800e764:	480b      	ldr	r0, [pc, #44]	@ (800e794 <stabilizerTask+0x90>)
 800e766:	f7fd fafd 	bl	800bd64 <sensorsAcquire>

//    if (healthShallWeRunTest()) {
//      healthRunTests(&sensorData);
//    }
//    else {
      updateStateEstimatorAndControllerTypes();
 800e76a:	f7ff ffb1 	bl	800e6d0 <updateStateEstimatorAndControllerTypes>

      stateEstimator(&state, stabilizerStep);
 800e76e:	68f9      	ldr	r1, [r7, #12]
 800e770:	4809      	ldr	r0, [pc, #36]	@ (800e798 <stabilizerTask+0x94>)
 800e772:	f000 fa5f 	bl	800ec34 <stateEstimator>
//      } else {
//        motorsStop();
//      }

      // Compute compressed log formats
      compressState();
 800e776:	f7ff fded 	bl	800e354 <compressState>
      compressSetpoint();
 800e77a:	f7ff fecf 	bl	800e51c <compressSetpoint>
          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer
          && RATE_DO_EXECUTE(usddeckFrequency(), stabilizerStep)) {
        usddeckTriggerLogging();
      }
#endif
      calcSensorToOutputLatency(&sensorData);
 800e77e:	4805      	ldr	r0, [pc, #20]	@ (800e794 <stabilizerTask+0x90>)
 800e780:	f7ff fdd2 	bl	800e328 <calcSensorToOutputLatency>
      stabilizerStep++;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3301      	adds	r3, #1
 800e788:	60fb      	str	r3, [r7, #12]
    sensorsWaitDataReady();
 800e78a:	bf00      	nop
 800e78c:	e7e8      	b.n	800e760 <stabilizerTask+0x5c>
 800e78e:	bf00      	nop
 800e790:	20008ae4 	.word	0x20008ae4
 800e794:	20008a58 	.word	0x20008a58
 800e798:	20008a90 	.word	0x20008a90

0800e79c <vApplicationGetIdleTaskMemory>:
 * used by the Idle task.
 */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 800e79c:	b480      	push	{r7}
 800e79e:	b085      	sub	sp, #20
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	60b9      	str	r1, [r7, #8]
 800e7a6:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xIdleTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4a07      	ldr	r2, [pc, #28]	@ (800e7c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800e7ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	4a06      	ldr	r2, [pc, #24]	@ (800e7cc <vApplicationGetIdleTaskMemory+0x30>)
 800e7b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2296      	movs	r2, #150	@ 0x96
 800e7b8:	601a      	str	r2, [r3, #0]
}
 800e7ba:	bf00      	nop
 800e7bc:	3714      	adds	r7, #20
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c4:	4770      	bx	lr
 800e7c6:	bf00      	nop
 800e7c8:	10001e08 	.word	0x10001e08
 800e7cc:	10001e6c 	.word	0x10001e6c

0800e7d0 <vApplicationGetTimerTaskMemory>:
 * to provide the memory that is used by the Timer service task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	60f8      	str	r0, [r7, #12]
 800e7d8:	60b9      	str	r1, [r7, #8]
 800e7da:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xTimerTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	4a07      	ldr	r2, [pc, #28]	@ (800e7fc <vApplicationGetTimerTaskMemory+0x2c>)
 800e7e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	4a06      	ldr	r2, [pc, #24]	@ (800e800 <vApplicationGetTimerTaskMemory+0x30>)
 800e7e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800e7ee:	601a      	str	r2, [r3, #0]
}
 800e7f0:	bf00      	nop
 800e7f2:	3714      	adds	r7, #20
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fa:	4770      	bx	lr
 800e7fc:	100020c4 	.word	0x100020c4
 800e800:	10002128 	.word	0x10002128

0800e804 <systemLaunch>:

static void systemTask(void *arg);


void systemLaunch(void)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b084      	sub	sp, #16
 800e808:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 800e80a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800e80e:	461a      	mov	r2, r3
 800e810:	4b06      	ldr	r3, [pc, #24]	@ (800e82c <systemLaunch+0x28>)
 800e812:	9302      	str	r3, [sp, #8]
 800e814:	4b06      	ldr	r3, [pc, #24]	@ (800e830 <systemLaunch+0x2c>)
 800e816:	9301      	str	r3, [sp, #4]
 800e818:	2302      	movs	r3, #2
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	2300      	movs	r3, #0
 800e81e:	4905      	ldr	r1, [pc, #20]	@ (800e834 <systemLaunch+0x30>)
 800e820:	4805      	ldr	r0, [pc, #20]	@ (800e838 <systemLaunch+0x34>)
 800e822:	f7f8 fbd9 	bl	8006fd8 <xTaskCreateStatic>
}
 800e826:	bf00      	nop
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}
 800e82c:	10002a88 	.word	0x10002a88
 800e830:	20009240 	.word	0x20009240
 800e834:	0801bfb0 	.word	0x0801bfb0
 800e838:	0800e8b1 	.word	0x0800e8b1

0800e83c <systemInit>:
void systemInit(void)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	af00      	add	r7, sp, #0

	if (isInit) return;
 800e840:	4b0c      	ldr	r3, [pc, #48]	@ (800e874 <systemInit+0x38>)
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d113      	bne.n	800e870 <systemInit+0x34>

	canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 800e848:	490b      	ldr	r1, [pc, #44]	@ (800e878 <systemInit+0x3c>)
 800e84a:	2001      	movs	r0, #1
 800e84c:	f7f7 fdfb 	bl	8006446 <xQueueCreateMutexStatic>
 800e850:	4603      	mov	r3, r0
 800e852:	4a0a      	ldr	r2, [pc, #40]	@ (800e87c <systemInit+0x40>)
 800e854:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800e856:	4b09      	ldr	r3, [pc, #36]	@ (800e87c <systemInit+0x40>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f04f 31ff 	mov.w	r1, #4294967295
 800e85e:	4618      	mov	r0, r3
 800e860:	f7f8 f92a 	bl	8006ab8 <xQueueSemaphoreTake>

	workerInit();
 800e864:	f000 f8ee 	bl	800ea44 <workerInit>

	isInit = true;
 800e868:	4b02      	ldr	r3, [pc, #8]	@ (800e874 <systemInit+0x38>)
 800e86a:	2201      	movs	r2, #1
 800e86c:	701a      	strb	r2, [r3, #0]
 800e86e:	e000      	b.n	800e872 <systemInit+0x36>
	if (isInit) return;
 800e870:	bf00      	nop
}
 800e872:	bd80      	pop	{r7, pc}
 800e874:	2000923c 	.word	0x2000923c
 800e878:	200096f4 	.word	0x200096f4
 800e87c:	200096f0 	.word	0x200096f0

0800e880 <systemTest>:
bool systemTest(void)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
	bool pass=isInit;
 800e886:	4b09      	ldr	r3, [pc, #36]	@ (800e8ac <systemTest+0x2c>)
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	71fb      	strb	r3, [r7, #7]
	pass &= workerTest();
 800e88c:	f000 f8f8 	bl	800ea80 <workerTest>
 800e890:	4603      	mov	r3, r0
 800e892:	461a      	mov	r2, r3
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	4013      	ands	r3, r2
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bf14      	ite	ne
 800e89c:	2301      	movne	r3, #1
 800e89e:	2300      	moveq	r3, #0
 800e8a0:	71fb      	strb	r3, [r7, #7]

	return pass;
 800e8a2:	79fb      	ldrb	r3, [r7, #7]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}
 800e8ac:	2000923c 	.word	0x2000923c

0800e8b0 <systemTask>:
void systemTask(void *arg) {
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
	bool pass = true;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	73fb      	strb	r3, [r7, #15]
//	counter += 1; // JUMP HERE
	ledInit();
 800e8bc:	f7fb fff8 	bl	800a8b0 <ledInit>
//		vTaskDelay(1);
//	}
//	HAL_Init();
	//JH

	usecTimerInit();
 800e8c0:	f7fe fdcc 	bl	800d45c <usecTimerInit>
	GPIO_Init();
 800e8c4:	f7fb fe98 	bl	800a5f8 <GPIO_Init>
	TIM3_DMA_Init();
 800e8c8:	f7fc fdb8 	bl	800b43c <TIM3_DMA_Init>
	uart_dma_init();
 800e8cc:	f7fd f812 	bl	800b8f4 <uart_dma_init>
	TIM4_Init();
 800e8d0:	f7fc fdec 	bl	800b4ac <TIM4_Init>
	TIM3_Init();
 800e8d4:	f7fc fbda 	bl	800b08c <TIM3_Init>
	spi1_init();
 800e8d8:	f7fc fa76 	bl	800adc8 <spi1_init>
	I2C2_Init();
 800e8dc:	f7fb feea 	bl	800a6b4 <I2C2_Init>
	MX_USART1_UART_Init();
 800e8e0:	f7fc fe5a 	bl	800b598 <MX_USART1_UART_Init>

	hal_dshot_init(DSHOT600);
 800e8e4:	2002      	movs	r0, #2
 800e8e6:	f7fb fc86 	bl	800a1f6 <hal_dshot_init>
	vTaskDelay(10);
 800e8ea:	200a      	movs	r0, #10
 800e8ec:	f7f8 fd92 	bl	8007414 <vTaskDelay>
	hal_ibus_init();
 800e8f0:	f7fb fa6e 	bl	8009dd0 <hal_ibus_init>
//	flage_rc = 1;
	// JH
	vTaskDelay(10);
 800e8f4:	200a      	movs	r0, #10
 800e8f6:	f7f8 fd8d 	bl	8007414 <vTaskDelay>
//	if(MPU6500_Init(&imu) == 0){
//		imu_flage = 1;
//		//JH
//		for(;;);
//	}
	HAL_TIM_Base_Start_IT(&htim4);
 800e8fa:	4826      	ldr	r0, [pc, #152]	@ (800e994 <systemTask+0xe4>)
 800e8fc:	f7f5 fe8a 	bl	8004614 <HAL_TIM_Base_Start_IT>
//	MX_UART4_Init();
//	MX_USART1_UART_Init();
//	MX_USART2_UART_Init();
//	MX_USART3_UART_Init();

	systemInit();
 800e900:	f7ff ff9c 	bl	800e83c <systemInit>
//	counter +=1 ; // JUMP HERE

	StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 800e904:	2300      	movs	r3, #0
 800e906:	73bb      	strb	r3, [r7, #14]
	//Macro-Work when we defind its
#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 1;
	estimatorKalmanTaskInit();
 800e908:	f000 faf0 	bl	800eeec <estimatorKalmanTaskInit>
//	counter = 2;
	//JH
#endif
	zRanger2Init();
 800e90c:	f7fa fcbe 	bl	800928c <zRanger2Init>
	//Test LED
	ledblink_test();
 800e910:	f7fd f98c 	bl	800bc2c <ledblink_test>
	motors_test();
 800e914:	f7fd f9b4 	bl	800bc80 <motors_test>
	rc_test();
 800e918:	f7fd f9d8 	bl	800bccc <rc_test>
	imu_test();
 800e91c:	f7fd f93a 	bl	800bb94 <imu_test>
	qmc_test();
 800e920:	f7fd f95e 	bl	800bbe0 <qmc_test>
//	counter +=1; // Not JUMP HERE
//	flowTofInit();
//	tofInit();

//	estimator = deckGetRequiredEstimator();
	stabilizerInit(estimator);
 800e924:	7bbb      	ldrb	r3, [r7, #14]
 800e926:	4618      	mov	r0, r3
 800e928:	f7ff fe84 	bl	800e634 <stabilizerInit>
//	counter +=1 ;// NJH
	if (systemTest() == false) {
 800e92c:	f7ff ffa8 	bl	800e880 <systemTest>
 800e930:	4603      	mov	r3, r0
 800e932:	f083 0301 	eor.w	r3, r3, #1
 800e936:	b2db      	uxtb	r3, r3
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <systemTask+0x90>
		pass = false;
 800e93c:	2300      	movs	r3, #0
 800e93e:	73fb      	strb	r3, [r7, #15]
	}

	if ( stabilizerTest() == false )
 800e940:	f7ff feb0 	bl	800e6a4 <stabilizerTest>
 800e944:	4603      	mov	r3, r0
 800e946:	f083 0301 	eor.w	r3, r3, #1
 800e94a:	b2db      	uxtb	r3, r3
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d001      	beq.n	800e954 <systemTask+0xa4>
	{
		pass = false;
 800e950:	2300      	movs	r3, #0
 800e952:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 3;
	//NJH
if (estimatorKalmanTaskTest() == false) {
 800e954:	f000 fb12 	bl	800ef7c <estimatorKalmanTaskTest>
 800e958:	4603      	mov	r3, r0
 800e95a:	f083 0301 	eor.w	r3, r3, #1
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	2b00      	cmp	r3, #0
 800e962:	d001      	beq.n	800e968 <systemTask+0xb8>
//	counter = 1;
	//NJH
  pass = false;
 800e964:	2300      	movs	r3, #0
 800e966:	73fb      	strb	r3, [r7, #15]
}
#endif

	vTaskDelay(100);
 800e968:	2064      	movs	r0, #100	@ 0x64
 800e96a:	f7f8 fd53 	bl	8007414 <vTaskDelay>
	ledSet(1);
 800e96e:	2001      	movs	r0, #1
 800e970:	f7fb ffdc 	bl	800a92c <ledSet>
	if (pass) {
 800e974:	7bfb      	ldrb	r3, [r7, #15]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <systemTask+0xce>
		systemStart();
 800e97a:	f000 f80d 	bl	800e998 <systemStart>
	}
	vTaskDelay(100);
 800e97e:	2064      	movs	r0, #100	@ 0x64
 800e980:	f7f8 fd48 	bl	8007414 <vTaskDelay>
	workerLoop();
 800e984:	f000 f88c 	bl	800eaa0 <workerLoop>
	while(1)
	{

		vTaskDelay(1000);
 800e988:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e98c:	f7f8 fd42 	bl	8007414 <vTaskDelay>
 800e990:	e7fa      	b.n	800e988 <systemTask+0xd8>
 800e992:	bf00      	nop
 800e994:	2000806c 	.word	0x2000806c

0800e998 <systemStart>:
	}
}
void systemStart()
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	af00      	add	r7, sp, #0
	xSemaphoreGive(canStartMutex);
 800e99c:	4b04      	ldr	r3, [pc, #16]	@ (800e9b0 <systemStart+0x18>)
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	2100      	movs	r1, #0
 800e9a6:	f7f7 fd69 	bl	800647c <xQueueGenericSend>
}
 800e9aa:	bf00      	nop
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	200096f0 	.word	0x200096f0

0800e9b4 <systemWaitStart>:
void systemWaitStart(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
//	flage = 2;
	while (!isInit) vTaskDelay(2);
 800e9b8:	e002      	b.n	800e9c0 <systemWaitStart+0xc>
 800e9ba:	2002      	movs	r0, #2
 800e9bc:	f7f8 fd2a 	bl	8007414 <vTaskDelay>
 800e9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800e9f0 <systemWaitStart+0x3c>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f083 0301 	eor.w	r3, r3, #1
 800e9c8:	b2db      	uxtb	r3, r3
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d1f5      	bne.n	800e9ba <systemWaitStart+0x6>
//	flage = 2; // nan JUMP HERE
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800e9ce:	4b09      	ldr	r3, [pc, #36]	@ (800e9f4 <systemWaitStart+0x40>)
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f04f 31ff 	mov.w	r1, #4294967295
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7f8 f86e 	bl	8006ab8 <xQueueSemaphoreTake>
	xSemaphoreGive(canStartMutex);
 800e9dc:	4b05      	ldr	r3, [pc, #20]	@ (800e9f4 <systemWaitStart+0x40>)
 800e9de:	6818      	ldr	r0, [r3, #0]
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	2100      	movs	r1, #0
 800e9e6:	f7f7 fd49 	bl	800647c <xQueueGenericSend>
}
 800e9ea:	bf00      	nop
 800e9ec:	bd80      	pop	{r7, pc}
 800e9ee:	bf00      	nop
 800e9f0:	2000923c 	.word	0x2000923c
 800e9f4:	200096f0 	.word	0x200096f0

0800e9f8 <vApplicationIdleHook>:


void vApplicationIdleHook(void) {
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b082      	sub	sp, #8
 800e9fc:	af00      	add	r7, sp, #0

	static uint32_t tickOfLatestWatchdogReset = M2T(0);

	portTickType tickCount = xTaskGetTickCount();
 800e9fe:	f7f8 fe59 	bl	80076b4 <xTaskGetTickCount>
 800ea02:	6078      	str	r0, [r7, #4]

	if (tickCount - tickOfLatestWatchdogReset > M2T(80)) {
 800ea04:	4b06      	ldr	r3, [pc, #24]	@ (800ea20 <vApplicationIdleHook+0x28>)
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	687a      	ldr	r2, [r7, #4]
 800ea0a:	1ad3      	subs	r3, r2, r3
 800ea0c:	2b50      	cmp	r3, #80	@ 0x50
 800ea0e:	d902      	bls.n	800ea16 <vApplicationIdleHook+0x1e>
		tickOfLatestWatchdogReset = tickCount;
 800ea10:	4a03      	ldr	r2, [pc, #12]	@ (800ea20 <vApplicationIdleHook+0x28>)
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	6013      	str	r3, [r2, #0]
//		watchdogReset();
	}

}
 800ea16:	bf00      	nop
 800ea18:	3708      	adds	r7, #8
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
 800ea1e:	bf00      	nop
 800ea20:	20009744 	.word	0x20009744

0800ea24 <vApplicationStackOverflowHook>:

#if ( configCHECK_FOR_STACK_OVERFLOW > 0 )

    void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                        char * pcTaskName )
    {
 800ea24:	b480      	push	{r7}
 800ea26:	b083      	sub	sp, #12
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
        /* Check pcTaskName for the name of the offending task,
         * or pxCurrentTCB if pcTaskName has itself been corrupted. */
        ( void ) xTask;
        ( void ) pcTaskName;
    }
 800ea2e:	bf00      	nop
 800ea30:	370c      	adds	r7, #12
 800ea32:	46bd      	mov	sp, r7
 800ea34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea38:	4770      	bx	lr

0800ea3a <vApplicationMallocFailedHook>:

#endif /* #if ( configCHECK_FOR_STACK_OVERFLOW > 0 ) */

void vApplicationMallocFailedHook( void ){
 800ea3a:	b480      	push	{r7}
 800ea3c:	af00      	add	r7, sp, #0
	while(1);
 800ea3e:	bf00      	nop
 800ea40:	e7fd      	b.n	800ea3e <vApplicationMallocFailedHook+0x4>
	...

0800ea44 <workerInit>:
static xQueueHandle workerQueue;

STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af02      	add	r7, sp, #8
  if (workerQueue)
 800ea4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ea74 <workerInit+0x30>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d10d      	bne.n	800ea6e <workerInit+0x2a>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 800ea52:	2305      	movs	r3, #5
 800ea54:	4618      	mov	r0, r3
 800ea56:	2308      	movs	r3, #8
 800ea58:	4619      	mov	r1, r3
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	9300      	str	r3, [sp, #0]
 800ea5e:	4b06      	ldr	r3, [pc, #24]	@ (800ea78 <workerInit+0x34>)
 800ea60:	4a06      	ldr	r2, [pc, #24]	@ (800ea7c <workerInit+0x38>)
 800ea62:	f7f7 fbf7 	bl	8006254 <xQueueGenericCreateStatic>
 800ea66:	4603      	mov	r3, r0
 800ea68:	4a02      	ldr	r2, [pc, #8]	@ (800ea74 <workerInit+0x30>)
 800ea6a:	6013      	str	r3, [r2, #0]
 800ea6c:	e000      	b.n	800ea70 <workerInit+0x2c>
    return;
 800ea6e:	bf00      	nop

}
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}
 800ea74:	20009748 	.word	0x20009748
 800ea78:	10002b14 	.word	0x10002b14
 800ea7c:	10002aec 	.word	0x10002aec

0800ea80 <workerTest>:

bool workerTest()
{
 800ea80:	b480      	push	{r7}
 800ea82:	af00      	add	r7, sp, #0
  return (workerQueue != NULL);
 800ea84:	4b05      	ldr	r3, [pc, #20]	@ (800ea9c <workerTest+0x1c>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bf14      	ite	ne
 800ea8c:	2301      	movne	r3, #1
 800ea8e:	2300      	moveq	r3, #0
 800ea90:	b2db      	uxtb	r3, r3
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	20009748 	.word	0x20009748

0800eaa0 <workerLoop>:

void workerLoop()
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
  struct worker_work work;

  if (!workerQueue)
 800eaa6:	4b0c      	ldr	r3, [pc, #48]	@ (800ead8 <workerLoop+0x38>)
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d00f      	beq.n	800eace <workerLoop+0x2e>
    return;

  while (1)
  {
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800eaae:	4b0a      	ldr	r3, [pc, #40]	@ (800ead8 <workerLoop+0x38>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	4639      	mov	r1, r7
 800eab4:	f04f 32ff 	mov.w	r2, #4294967295
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7f7 ff1d 	bl	80068f8 <xQueueReceive>

    if (work.function)
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0f4      	beq.n	800eaae <workerLoop+0xe>
      work.function(work.arg);
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	4610      	mov	r0, r2
 800eaca:	4798      	blx	r3
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800eacc:	e7ef      	b.n	800eaae <workerLoop+0xe>
    return;
 800eace:	bf00      	nop
  }
}
 800ead0:	3708      	adds	r7, #8
 800ead2:	46bd      	mov	sp, r7
 800ead4:	bd80      	pop	{r7, pc}
 800ead6:	bf00      	nop
 800ead8:	20009748 	.word	0x20009748

0800eadc <stateEstimatorInit>:
        .name = "OutOfTree",
    },
#endif
};

void stateEstimatorInit(StateEstimatorType estimator) {
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af02      	add	r7, sp, #8
 800eae2:	4603      	mov	r3, r0
 800eae4:	71fb      	strb	r3, [r7, #7]
  measurementsQueue = STATIC_MEM_QUEUE_CREATE(measurementsQueue);
 800eae6:	2314      	movs	r3, #20
 800eae8:	4618      	mov	r0, r3
 800eaea:	2330      	movs	r3, #48	@ 0x30
 800eaec:	4619      	mov	r1, r3
 800eaee:	2300      	movs	r3, #0
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	4b07      	ldr	r3, [pc, #28]	@ (800eb10 <stateEstimatorInit+0x34>)
 800eaf4:	4a07      	ldr	r2, [pc, #28]	@ (800eb14 <stateEstimatorInit+0x38>)
 800eaf6:	f7f7 fbad 	bl	8006254 <xQueueGenericCreateStatic>
 800eafa:	4603      	mov	r3, r0
 800eafc:	4a06      	ldr	r2, [pc, #24]	@ (800eb18 <stateEstimatorInit+0x3c>)
 800eafe:	6013      	str	r3, [r2, #0]
  stateEstimatorSwitchTo(estimator);
 800eb00:	79fb      	ldrb	r3, [r7, #7]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f000 f80a 	bl	800eb1c <stateEstimatorSwitchTo>
}
 800eb08:	bf00      	nop
 800eb0a:	3708      	adds	r7, #8
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}
 800eb10:	10002f24 	.word	0x10002f24
 800eb14:	10002b64 	.word	0x10002b64
 800eb18:	20009750 	.word	0x20009750

0800eb1c <stateEstimatorSwitchTo>:

void stateEstimatorSwitchTo(StateEstimatorType estimator) {
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	4603      	mov	r3, r0
 800eb24:	71fb      	strb	r3, [r7, #7]
  if (estimator < 0 || estimator >= StateEstimatorType_COUNT) {
 800eb26:	79fb      	ldrb	r3, [r7, #7]
 800eb28:	2b01      	cmp	r3, #1
 800eb2a:	d81c      	bhi.n	800eb66 <stateEstimatorSwitchTo+0x4a>
    return;
  }

  StateEstimatorType newEstimator = estimator;
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
 800eb2e:	73fb      	strb	r3, [r7, #15]

  if (StateEstimatorTypeAutoSelect == newEstimator) {
 800eb30:	7bfb      	ldrb	r3, [r7, #15]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d101      	bne.n	800eb3a <stateEstimatorSwitchTo+0x1e>
    newEstimator = DEFAULT_ESTIMATOR;
 800eb36:	2301      	movs	r3, #1
 800eb38:	73fb      	strb	r3, [r7, #15]
    #define ESTIMATOR StateEstimatorTypeComplementary
  #else
    #define ESTIMATOR StateEstimatorTypeAutoSelect
  #endif

  StateEstimatorType forcedEstimator = ESTIMATOR;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	73bb      	strb	r3, [r7, #14]
  if (forcedEstimator != StateEstimatorTypeAutoSelect) {
 800eb3e:	7bbb      	ldrb	r3, [r7, #14]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d001      	beq.n	800eb48 <stateEstimatorSwitchTo+0x2c>
//    DEBUG_PRINT("Estimator type forced\n");
    newEstimator = forcedEstimator;
 800eb44:	7bbb      	ldrb	r3, [r7, #14]
 800eb46:	73fb      	strb	r3, [r7, #15]
  }

  initEstimator(newEstimator);
 800eb48:	7bfb      	ldrb	r3, [r7, #15]
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 f81e 	bl	800eb8c <initEstimator>
  StateEstimatorType previousEstimator = currentEstimator;
 800eb50:	4b07      	ldr	r3, [pc, #28]	@ (800eb70 <stateEstimatorSwitchTo+0x54>)
 800eb52:	781b      	ldrb	r3, [r3, #0]
 800eb54:	737b      	strb	r3, [r7, #13]
  currentEstimator = newEstimator;
 800eb56:	4a06      	ldr	r2, [pc, #24]	@ (800eb70 <stateEstimatorSwitchTo+0x54>)
 800eb58:	7bfb      	ldrb	r3, [r7, #15]
 800eb5a:	7013      	strb	r3, [r2, #0]
  deinitEstimator(previousEstimator);
 800eb5c:	7b7b      	ldrb	r3, [r7, #13]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f000 f832 	bl	800ebc8 <deinitEstimator>
 800eb64:	e000      	b.n	800eb68 <stateEstimatorSwitchTo+0x4c>
    return;
 800eb66:	bf00      	nop

//  DEBUG_PRINT("Using %s (%d) estimator\n", stateEstimatorGetName(), currentEstimator);
}
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	2000974c 	.word	0x2000974c

0800eb74 <stateEstimatorGetType>:

StateEstimatorType stateEstimatorGetType(void) {
 800eb74:	b480      	push	{r7}
 800eb76:	af00      	add	r7, sp, #0
  return currentEstimator;
 800eb78:	4b03      	ldr	r3, [pc, #12]	@ (800eb88 <stateEstimatorGetType+0x14>)
 800eb7a:	781b      	ldrb	r3, [r3, #0]
}
 800eb7c:	4618      	mov	r0, r3
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop
 800eb88:	2000974c 	.word	0x2000974c

0800eb8c <initEstimator>:

static void initEstimator(const StateEstimatorType estimator) {
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b082      	sub	sp, #8
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	4603      	mov	r3, r0
 800eb94:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].init) {
 800eb96:	79fa      	ldrb	r2, [r7, #7]
 800eb98:	490a      	ldr	r1, [pc, #40]	@ (800ebc4 <initEstimator+0x38>)
 800eb9a:	4613      	mov	r3, r2
 800eb9c:	009b      	lsls	r3, r3, #2
 800eb9e:	4413      	add	r3, r2
 800eba0:	009b      	lsls	r3, r3, #2
 800eba2:	440b      	add	r3, r1
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d008      	beq.n	800ebbc <initEstimator+0x30>
    estimatorFunctions[estimator].init();
 800ebaa:	79fa      	ldrb	r2, [r7, #7]
 800ebac:	4905      	ldr	r1, [pc, #20]	@ (800ebc4 <initEstimator+0x38>)
 800ebae:	4613      	mov	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	440b      	add	r3, r1
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4798      	blx	r3
  }
}
 800ebbc:	bf00      	nop
 800ebbe:	3708      	adds	r7, #8
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}
 800ebc4:	20000030 	.word	0x20000030

0800ebc8 <deinitEstimator>:

static void deinitEstimator(const StateEstimatorType estimator) {
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	4603      	mov	r3, r0
 800ebd0:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].deinit) {
 800ebd2:	79fa      	ldrb	r2, [r7, #7]
 800ebd4:	490b      	ldr	r1, [pc, #44]	@ (800ec04 <deinitEstimator+0x3c>)
 800ebd6:	4613      	mov	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	4413      	add	r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	440b      	add	r3, r1
 800ebe0:	3304      	adds	r3, #4
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d009      	beq.n	800ebfc <deinitEstimator+0x34>
    estimatorFunctions[estimator].deinit();
 800ebe8:	79fa      	ldrb	r2, [r7, #7]
 800ebea:	4906      	ldr	r1, [pc, #24]	@ (800ec04 <deinitEstimator+0x3c>)
 800ebec:	4613      	mov	r3, r2
 800ebee:	009b      	lsls	r3, r3, #2
 800ebf0:	4413      	add	r3, r2
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	440b      	add	r3, r1
 800ebf6:	3304      	adds	r3, #4
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4798      	blx	r3
  }
}
 800ebfc:	bf00      	nop
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	20000030 	.word	0x20000030

0800ec08 <stateEstimatorTest>:

bool stateEstimatorTest(void) {
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	af00      	add	r7, sp, #0
  return estimatorFunctions[currentEstimator].test();
 800ec0c:	4b07      	ldr	r3, [pc, #28]	@ (800ec2c <stateEstimatorTest+0x24>)
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	4619      	mov	r1, r3
 800ec12:	4a07      	ldr	r2, [pc, #28]	@ (800ec30 <stateEstimatorTest+0x28>)
 800ec14:	460b      	mov	r3, r1
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	440b      	add	r3, r1
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	4413      	add	r3, r2
 800ec1e:	3308      	adds	r3, #8
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4798      	blx	r3
 800ec24:	4603      	mov	r3, r0
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	bd80      	pop	{r7, pc}
 800ec2a:	bf00      	nop
 800ec2c:	2000974c 	.word	0x2000974c
 800ec30:	20000030 	.word	0x20000030

0800ec34 <stateEstimator>:

void stateEstimator(state_t *state, const stabilizerStep_t tick) {
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
  estimatorFunctions[currentEstimator].update(state, tick);
 800ec3e:	4b09      	ldr	r3, [pc, #36]	@ (800ec64 <stateEstimator+0x30>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	4619      	mov	r1, r3
 800ec44:	4a08      	ldr	r2, [pc, #32]	@ (800ec68 <stateEstimator+0x34>)
 800ec46:	460b      	mov	r3, r1
 800ec48:	009b      	lsls	r3, r3, #2
 800ec4a:	440b      	add	r3, r1
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4413      	add	r3, r2
 800ec50:	330c      	adds	r3, #12
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6839      	ldr	r1, [r7, #0]
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	4798      	blx	r3
}
 800ec5a:	bf00      	nop
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	2000974c 	.word	0x2000974c
 800ec68:	20000030 	.word	0x20000030

0800ec6c <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b086      	sub	sp, #24
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 800ec74:	4b19      	ldr	r3, [pc, #100]	@ (800ecdc <estimatorEnqueue+0x70>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d02b      	beq.n	800ecd4 <estimatorEnqueue+0x68>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 800ec7c:	4b18      	ldr	r3, [pc, #96]	@ (800ece0 <estimatorEnqueue+0x74>)
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	bf14      	ite	ne
 800ec88:	2301      	movne	r3, #1
 800ec8a:	2300      	moveq	r3, #0
 800ec8c:	75fb      	strb	r3, [r7, #23]
  if (isInInterrupt) {
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d016      	beq.n	800ecc2 <estimatorEnqueue+0x56>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800ec94:	2300      	movs	r3, #0
 800ec96:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 800ec98:	4b10      	ldr	r3, [pc, #64]	@ (800ecdc <estimatorEnqueue+0x70>)
 800ec9a:	6818      	ldr	r0, [r3, #0]
 800ec9c:	f107 020c 	add.w	r2, r7, #12
 800eca0:	2300      	movs	r3, #0
 800eca2:	6879      	ldr	r1, [r7, #4]
 800eca4:	f7f7 fcf8 	bl	8006698 <xQueueGenericSendFromISR>
 800eca8:	6138      	str	r0, [r7, #16]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	d112      	bne.n	800ecd6 <estimatorEnqueue+0x6a>
      portYIELD();
 800ecb0:	4b0c      	ldr	r3, [pc, #48]	@ (800ece4 <estimatorEnqueue+0x78>)
 800ecb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ecb6:	601a      	str	r2, [r3, #0]
 800ecb8:	f3bf 8f4f 	dsb	sy
 800ecbc:	f3bf 8f6f 	isb	sy
 800ecc0:	e009      	b.n	800ecd6 <estimatorEnqueue+0x6a>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 800ecc2:	4b06      	ldr	r3, [pc, #24]	@ (800ecdc <estimatorEnqueue+0x70>)
 800ecc4:	6818      	ldr	r0, [r3, #0]
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2200      	movs	r2, #0
 800ecca:	6879      	ldr	r1, [r7, #4]
 800eccc:	f7f7 fbd6 	bl	800647c <xQueueGenericSend>
 800ecd0:	6138      	str	r0, [r7, #16]
 800ecd2:	e000      	b.n	800ecd6 <estimatorEnqueue+0x6a>
    return;
 800ecd4:	bf00      	nop
//    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
  } else {
//    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
  }

}
 800ecd6:	3718      	adds	r7, #24
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}
 800ecdc:	20009750 	.word	0x20009750
 800ece0:	e000ed00 	.word	0xe000ed00
 800ece4:	e000ed04 	.word	0xe000ed04

0800ece8 <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b082      	sub	sp, #8
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 800ecf0:	4b08      	ldr	r3, [pc, #32]	@ (800ed14 <estimatorDequeue+0x2c>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	6879      	ldr	r1, [r7, #4]
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	f7f7 fdfd 	bl	80068f8 <xQueueReceive>
 800ecfe:	4603      	mov	r3, r0
 800ed00:	2b01      	cmp	r3, #1
 800ed02:	bf0c      	ite	eq
 800ed04:	2301      	moveq	r3, #1
 800ed06:	2300      	movne	r3, #0
 800ed08:	b2db      	uxtb	r3, r3
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20009750 	.word	0x20009750

0800ed18 <estimatorComplementaryInit>:
#define POS_UPDATE_RATE RATE_100_HZ
#define POS_UPDATE_DT 1.0/POS_UPDATE_RATE


void estimatorComplementaryInit(void)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	af00      	add	r7, sp, #0
  sensfusion6Init();
 800ed1c:	f7fe fdb6 	bl	800d88c <sensfusion6Init>
}
 800ed20:	bf00      	nop
 800ed22:	bd80      	pop	{r7, pc}

0800ed24 <estimatorComplementaryTest>:

bool estimatorComplementaryTest(void)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b082      	sub	sp, #8
 800ed28:	af00      	add	r7, sp, #0
  bool pass = true;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	71fb      	strb	r3, [r7, #7]

  pass &= sensfusion6Test();
 800ed2e:	f7fe fdbf 	bl	800d8b0 <sensfusion6Test>
 800ed32:	4603      	mov	r3, r0
 800ed34:	461a      	mov	r2, r3
 800ed36:	79fb      	ldrb	r3, [r7, #7]
 800ed38:	4013      	ands	r3, r2
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	bf14      	ite	ne
 800ed3e:	2301      	movne	r3, #1
 800ed40:	2300      	moveq	r3, #0
 800ed42:	71fb      	strb	r3, [r7, #7]

  return pass;
 800ed44:	79fb      	ldrb	r3, [r7, #7]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
	...

0800ed50 <estimatorComplementary>:

void estimatorComplementary(state_t *state, const stabilizerStep_t stabilizerStep)
{
 800ed50:	b590      	push	{r4, r7, lr}
 800ed52:	b08f      	sub	sp, #60	@ 0x3c
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800ed5a:	e03c      	b.n	800edd6 <estimatorComplementary+0x86>
    switch (m.type)
 800ed5c:	7a3b      	ldrb	r3, [r7, #8]
 800ed5e:	3b04      	subs	r3, #4
 800ed60:	2b07      	cmp	r3, #7
 800ed62:	d837      	bhi.n	800edd4 <estimatorComplementary+0x84>
 800ed64:	a201      	add	r2, pc, #4	@ (adr r2, 800ed6c <estimatorComplementary+0x1c>)
 800ed66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6a:	bf00      	nop
 800ed6c:	0800edc3 	.word	0x0800edc3
 800ed70:	0800edd5 	.word	0x0800edd5
 800ed74:	0800edd5 	.word	0x0800edd5
 800ed78:	0800edd5 	.word	0x0800edd5
 800ed7c:	0800edd5 	.word	0x0800edd5
 800ed80:	0800ed8d 	.word	0x0800ed8d
 800ed84:	0800ed9f 	.word	0x0800ed9f
 800ed88:	0800edb1 	.word	0x0800edb1
    {
    case MeasurementTypeGyroscope:
      gyro = m.data.gyroscope.gyro;
 800ed8c:	4b50      	ldr	r3, [pc, #320]	@ (800eed0 <estimatorComplementary+0x180>)
 800ed8e:	461c      	mov	r4, r3
 800ed90:	f107 030c 	add.w	r3, r7, #12
 800ed94:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ed98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800ed9c:	e01b      	b.n	800edd6 <estimatorComplementary+0x86>
    case MeasurementTypeAcceleration:
      acc = m.data.acceleration.acc;
 800ed9e:	4b4d      	ldr	r3, [pc, #308]	@ (800eed4 <estimatorComplementary+0x184>)
 800eda0:	461c      	mov	r4, r3
 800eda2:	f107 030c 	add.w	r3, r7, #12
 800eda6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800edae:	e012      	b.n	800edd6 <estimatorComplementary+0x86>
    case MeasurementTypeBarometer:
      baro = m.data.barometer.baro;
 800edb0:	4b49      	ldr	r3, [pc, #292]	@ (800eed8 <estimatorComplementary+0x188>)
 800edb2:	461c      	mov	r4, r3
 800edb4:	f107 030c 	add.w	r3, r7, #12
 800edb8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edbc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800edc0:	e009      	b.n	800edd6 <estimatorComplementary+0x86>
    case MeasurementTypeTOF:
      tof = m.data.tof;
 800edc2:	4b46      	ldr	r3, [pc, #280]	@ (800eedc <estimatorComplementary+0x18c>)
 800edc4:	461c      	mov	r4, r3
 800edc6:	f107 030c 	add.w	r3, r7, #12
 800edca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800edce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800edd2:	e000      	b.n	800edd6 <estimatorComplementary+0x86>
    default:
      break;
 800edd4:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800edd6:	f107 0308 	add.w	r3, r7, #8
 800edda:	4618      	mov	r0, r3
 800eddc:	f7ff ff84 	bl	800ece8 <estimatorDequeue>
 800ede0:	4603      	mov	r3, r0
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1ba      	bne.n	800ed5c <estimatorComplementary+0xc>
    }
  }

  // Update filter
  if (RATE_DO_EXECUTE(ATTITUDE_UPDATE_RATE, stabilizerStep)) {
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	f003 0303 	and.w	r3, r3, #3
 800edec:	2b00      	cmp	r3, #0
 800edee:	d157      	bne.n	800eea0 <estimatorComplementary+0x150>
    sensfusion6UpdateQ(gyro.x, gyro.y, gyro.z,
 800edf0:	4b37      	ldr	r3, [pc, #220]	@ (800eed0 <estimatorComplementary+0x180>)
 800edf2:	edd3 7a00 	vldr	s15, [r3]
 800edf6:	4b36      	ldr	r3, [pc, #216]	@ (800eed0 <estimatorComplementary+0x180>)
 800edf8:	ed93 7a01 	vldr	s14, [r3, #4]
 800edfc:	4b34      	ldr	r3, [pc, #208]	@ (800eed0 <estimatorComplementary+0x180>)
 800edfe:	edd3 6a02 	vldr	s13, [r3, #8]
 800ee02:	4b34      	ldr	r3, [pc, #208]	@ (800eed4 <estimatorComplementary+0x184>)
 800ee04:	ed93 6a00 	vldr	s12, [r3]
 800ee08:	4b32      	ldr	r3, [pc, #200]	@ (800eed4 <estimatorComplementary+0x184>)
 800ee0a:	edd3 5a01 	vldr	s11, [r3, #4]
 800ee0e:	4b31      	ldr	r3, [pc, #196]	@ (800eed4 <estimatorComplementary+0x184>)
 800ee10:	ed93 5a02 	vldr	s10, [r3, #8]
 800ee14:	ed9f 3a32 	vldr	s6, [pc, #200]	@ 800eee0 <estimatorComplementary+0x190>
 800ee18:	eef0 2a45 	vmov.f32	s5, s10
 800ee1c:	eeb0 2a65 	vmov.f32	s4, s11
 800ee20:	eef0 1a46 	vmov.f32	s3, s12
 800ee24:	eeb0 1a66 	vmov.f32	s2, s13
 800ee28:	eef0 0a47 	vmov.f32	s1, s14
 800ee2c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee30:	f7fe fd4a 	bl	800d8c8 <sensfusion6UpdateQ>
                        acc.x, acc.y, acc.z,
                        ATTITUDE_UPDATE_DT);

    // Save attitude, adjusted for the legacy CF2 body coordinate system
    sensfusion6GetEulerRPY(&state->attitude.roll, &state->attitude.pitch, &state->attitude.yaw);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	1d18      	adds	r0, r3, #4
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f103 0108 	add.w	r1, r3, #8
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	330c      	adds	r3, #12
 800ee42:	461a      	mov	r2, r3
 800ee44:	f7ff f852 	bl	800deec <sensfusion6GetEulerRPY>

    // Save quaternion, hopefully one day this could be used in a better controller.
    // Note that this is not adjusted for the legacy coordinate system
    sensfusion6GetQuaternion(
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f103 0010 	add.w	r0, r3, #16
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f103 0114 	add.w	r1, r3, #20
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f103 0218 	add.w	r2, r3, #24
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	331c      	adds	r3, #28
 800ee5e:	f7ff f81f 	bl	800dea0 <sensfusion6GetQuaternion>
      &state->attitudeQuaternion.x,
      &state->attitudeQuaternion.y,
      &state->attitudeQuaternion.z,
      &state->attitudeQuaternion.w);

    state->acc.z = sensfusion6GetAccZWithoutGravity(acc.x,
 800ee62:	4b1c      	ldr	r3, [pc, #112]	@ (800eed4 <estimatorComplementary+0x184>)
 800ee64:	edd3 7a00 	vldr	s15, [r3]
 800ee68:	4b1a      	ldr	r3, [pc, #104]	@ (800eed4 <estimatorComplementary+0x184>)
 800ee6a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ee6e:	4b19      	ldr	r3, [pc, #100]	@ (800eed4 <estimatorComplementary+0x184>)
 800ee70:	edd3 6a02 	vldr	s13, [r3, #8]
 800ee74:	eeb0 1a66 	vmov.f32	s2, s13
 800ee78:	eef0 0a47 	vmov.f32	s1, s14
 800ee7c:	eeb0 0a67 	vmov.f32	s0, s15
 800ee80:	f7ff f8d8 	bl	800e034 <sensfusion6GetAccZWithoutGravity>
 800ee84:	eef0 7a40 	vmov.f32	s15, s0
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                                                    acc.y,
                                                    acc.z);

    positionUpdateVelocity(state->acc.z, ATTITUDE_UPDATE_DT);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800ee94:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800eee0 <estimatorComplementary+0x190>
 800ee98:	eeb0 0a67 	vmov.f32	s0, s15
 800ee9c:	f000 fa06 	bl	800f2ac <positionUpdateVelocity>
  }

  if (RATE_DO_EXECUTE(POS_UPDATE_RATE, stabilizerStep)) {
 800eea0:	6839      	ldr	r1, [r7, #0]
 800eea2:	4b10      	ldr	r3, [pc, #64]	@ (800eee4 <estimatorComplementary+0x194>)
 800eea4:	fba3 2301 	umull	r2, r3, r3, r1
 800eea8:	08da      	lsrs	r2, r3, #3
 800eeaa:	4613      	mov	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4413      	add	r3, r2
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	1aca      	subs	r2, r1, r3
 800eeb4:	2a00      	cmp	r2, #0
 800eeb6:	d107      	bne.n	800eec8 <estimatorComplementary+0x178>
    positionEstimate(state, &baro, &tof, POS_UPDATE_DT, stabilizerStep);
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800eee8 <estimatorComplementary+0x198>
 800eebe:	4a07      	ldr	r2, [pc, #28]	@ (800eedc <estimatorComplementary+0x18c>)
 800eec0:	4905      	ldr	r1, [pc, #20]	@ (800eed8 <estimatorComplementary+0x188>)
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f000 f9d8 	bl	800f278 <positionEstimate>
  }
}
 800eec8:	bf00      	nop
 800eeca:	373c      	adds	r7, #60	@ 0x3c
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd90      	pop	{r4, r7, pc}
 800eed0:	20009754 	.word	0x20009754
 800eed4:	20009760 	.word	0x20009760
 800eed8:	2000976c 	.word	0x2000976c
 800eedc:	20009778 	.word	0x20009778
 800eee0:	3b83126f 	.word	0x3b83126f
 800eee4:	cccccccd 	.word	0xcccccccd
 800eee8:	3c23d70a 	.word	0x3c23d70a

0800eeec <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 800eef2:	4817      	ldr	r0, [pc, #92]	@ (800ef50 <estimatorKalmanTaskInit+0x64>)
 800eef4:	f000 fb98 	bl	800f628 <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 800eef8:	2203      	movs	r2, #3
 800eefa:	2100      	movs	r1, #0
 800eefc:	2001      	movs	r0, #1
 800eefe:	f7f7 fa15 	bl	800632c <xQueueGenericCreate>
 800ef02:	4603      	mov	r3, r0
 800ef04:	4a13      	ldr	r2, [pc, #76]	@ (800ef54 <estimatorKalmanTaskInit+0x68>)
 800ef06:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 800ef08:	4b12      	ldr	r3, [pc, #72]	@ (800ef54 <estimatorKalmanTaskInit+0x68>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d104      	bne.n	800ef1a <estimatorKalmanTaskInit+0x2e>
 800ef10:	22b8      	movs	r2, #184	@ 0xb8
 800ef12:	4911      	ldr	r1, [pc, #68]	@ (800ef58 <estimatorKalmanTaskInit+0x6c>)
 800ef14:	4811      	ldr	r0, [pc, #68]	@ (800ef5c <estimatorKalmanTaskInit+0x70>)
 800ef16:	f004 ff07 	bl	8013d28 <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 800ef1a:	4911      	ldr	r1, [pc, #68]	@ (800ef60 <estimatorKalmanTaskInit+0x74>)
 800ef1c:	2001      	movs	r0, #1
 800ef1e:	f7f7 fa92 	bl	8006446 <xQueueCreateMutexStatic>
 800ef22:	4603      	mov	r3, r0
 800ef24:	4a0f      	ldr	r2, [pc, #60]	@ (800ef64 <estimatorKalmanTaskInit+0x78>)
 800ef26:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 800ef28:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800ef2c:	461a      	mov	r2, r3
 800ef2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ef68 <estimatorKalmanTaskInit+0x7c>)
 800ef30:	9302      	str	r3, [sp, #8]
 800ef32:	4b0e      	ldr	r3, [pc, #56]	@ (800ef6c <estimatorKalmanTaskInit+0x80>)
 800ef34:	9301      	str	r3, [sp, #4]
 800ef36:	2302      	movs	r3, #2
 800ef38:	9300      	str	r3, [sp, #0]
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	490c      	ldr	r1, [pc, #48]	@ (800ef70 <estimatorKalmanTaskInit+0x84>)
 800ef3e:	480d      	ldr	r0, [pc, #52]	@ (800ef74 <estimatorKalmanTaskInit+0x88>)
 800ef40:	f7f8 f84a 	bl	8006fd8 <xTaskCreateStatic>

  isInit = true;
 800ef44:	4b0c      	ldr	r3, [pc, #48]	@ (800ef78 <estimatorKalmanTaskInit+0x8c>)
 800ef46:	2201      	movs	r2, #1
 800ef48:	701a      	strb	r2, [r3, #0]
}
 800ef4a:	bf00      	nop
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	2000983c 	.word	0x2000983c
 800ef54:	20009784 	.word	0x20009784
 800ef58:	0801bfd0 	.word	0x0801bfd0
 800ef5c:	0801bffc 	.word	0x0801bffc
 800ef60:	2000978c 	.word	0x2000978c
 800ef64:	20009788 	.word	0x20009788
 800ef68:	10003a98 	.word	0x10003a98
 800ef6c:	10003138 	.word	0x10003138
 800ef70:	0801c010 	.word	0x0801c010
 800ef74:	0800ef95 	.word	0x0800ef95
 800ef78:	200097de 	.word	0x200097de

0800ef7c <estimatorKalmanTaskTest>:

bool estimatorKalmanTaskTest() {
 800ef7c:	b480      	push	{r7}
 800ef7e:	af00      	add	r7, sp, #0
  return isInit;
 800ef80:	4b03      	ldr	r3, [pc, #12]	@ (800ef90 <estimatorKalmanTaskTest+0x14>)
 800ef82:	781b      	ldrb	r3, [r3, #0]
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
 800ef8e:	bf00      	nop
 800ef90:	200097de 	.word	0x200097de

0800ef94 <kalmanTask>:

static void kalmanTask(void* parameters) {
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b088      	sub	sp, #32
 800ef98:	af02      	add	r7, sp, #8
 800ef9a:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 800ef9c:	f7ff fd0a 	bl	800e9b4 <systemWaitStart>
  flage_hit = 1;
 800efa0:	4b38      	ldr	r3, [pc, #224]	@ (800f084 <kalmanTask+0xf0>)
 800efa2:	2201      	movs	r2, #1
 800efa4:	701a      	strb	r2, [r3, #0]

  uint32_t nowMs = T2M(xTaskGetTickCount());
 800efa6:	f7f8 fb85 	bl	80076b4 <xTaskGetTickCount>
 800efaa:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 800efac:	693b      	ldr	r3, [r7, #16]
 800efae:	617b      	str	r3, [r7, #20]

//  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 800efb0:	4b35      	ldr	r3, [pc, #212]	@ (800f088 <kalmanTask+0xf4>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f04f 31ff 	mov.w	r1, #4294967295
 800efb8:	4618      	mov	r0, r3
 800efba:	f7f7 fd7d 	bl	8006ab8 <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 800efbe:	f7f8 fb79 	bl	80076b4 <xTaskGetTickCount>
 800efc2:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 800efc4:	4b31      	ldr	r3, [pc, #196]	@ (800f08c <kalmanTask+0xf8>)
 800efc6:	781b      	ldrb	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <kalmanTask+0x42>
      estimatorKalmanInit();
 800efcc:	f000 f92e 	bl	800f22c <estimatorKalmanInit>
      resetEstimation = false;
 800efd0:	4b2e      	ldr	r3, [pc, #184]	@ (800f08c <kalmanTask+0xf8>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	701a      	strb	r2, [r3, #0]
    }
    flage_hit = 2;
 800efd6:	4b2b      	ldr	r3, [pc, #172]	@ (800f084 <kalmanTask+0xf0>)
 800efd8:	2202      	movs	r2, #2
 800efda:	701a      	strb	r2, [r3, #0]

//    bool quadIsFlying = supervisorIsFlying();
    bool quadIsFlying = true;
 800efdc:	2301      	movs	r3, #1
 800efde:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 800efe0:	693a      	ldr	r2, [r7, #16]
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d315      	bcc.n	800f014 <kalmanTask+0x80>
      axis3fSubSamplerFinalize(&accSubSampler);
 800efe8:	4829      	ldr	r0, [pc, #164]	@ (800f090 <kalmanTask+0xfc>)
 800efea:	f7fe fb3c 	bl	800d666 <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 800efee:	4829      	ldr	r0, [pc, #164]	@ (800f094 <kalmanTask+0x100>)
 800eff0:	f7fe fb39 	bl	800d666 <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	9300      	str	r3, [sp, #0]
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	4a27      	ldr	r2, [pc, #156]	@ (800f098 <kalmanTask+0x104>)
 800effc:	4927      	ldr	r1, [pc, #156]	@ (800f09c <kalmanTask+0x108>)
 800effe:	4828      	ldr	r0, [pc, #160]	@ (800f0a0 <kalmanTask+0x10c>)
 800f000:	f002 f826 	bl	8011050 <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 800f004:	2214      	movs	r2, #20
 800f006:	693b      	ldr	r3, [r7, #16]
 800f008:	4413      	add	r3, r2
 800f00a:	617b      	str	r3, [r7, #20]

//      STATS_CNT_RATE_EVENT(&predictionCounter);

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 800f00c:	6939      	ldr	r1, [r7, #16]
 800f00e:	4825      	ldr	r0, [pc, #148]	@ (800f0a4 <kalmanTask+0x110>)
 800f010:	f005 f81f 	bl	8014052 <rateSupervisorValidate>
//        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 800f014:	693a      	ldr	r2, [r7, #16]
 800f016:	4924      	ldr	r1, [pc, #144]	@ (800f0a8 <kalmanTask+0x114>)
 800f018:	4821      	ldr	r0, [pc, #132]	@ (800f0a0 <kalmanTask+0x10c>)
 800f01a:	f002 fa4b 	bl	80114b4 <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 800f01e:	7bfb      	ldrb	r3, [r7, #15]
 800f020:	4619      	mov	r1, r3
 800f022:	6938      	ldr	r0, [r7, #16]
 800f024:	f000 f84a 	bl	800f0bc <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 800f028:	481d      	ldr	r0, [pc, #116]	@ (800f0a0 <kalmanTask+0x10c>)
 800f02a:	f002 fa71 	bl	8011510 <kalmanCoreFinalize>
    {
//      STATS_CNT_RATE_EVENT(&finalizeCounter);
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 800f02e:	481c      	ldr	r0, [pc, #112]	@ (800f0a0 <kalmanTask+0x10c>)
 800f030:	f7fe fb6c 	bl	800d70c <kalmanSupervisorIsStateWithinBounds>
 800f034:	4603      	mov	r3, r0
 800f036:	f083 0301 	eor.w	r3, r3, #1
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00c      	beq.n	800f05a <kalmanTask+0xc6>
      resetEstimation = true;
 800f040:	4b12      	ldr	r3, [pc, #72]	@ (800f08c <kalmanTask+0xf8>)
 800f042:	2201      	movs	r2, #1
 800f044:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 800f046:	4b19      	ldr	r3, [pc, #100]	@ (800f0ac <kalmanTask+0x118>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	693a      	ldr	r2, [r7, #16]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d904      	bls.n	800f05a <kalmanTask+0xc6>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 800f050:	693b      	ldr	r3, [r7, #16]
 800f052:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800f056:	4a15      	ldr	r2, [pc, #84]	@ (800f0ac <kalmanTask+0x118>)
 800f058:	6013      	str	r3, [r2, #0]

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 800f05a:	4b15      	ldr	r3, [pc, #84]	@ (800f0b0 <kalmanTask+0x11c>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	f04f 31ff 	mov.w	r1, #4294967295
 800f062:	4618      	mov	r0, r3
 800f064:	f7f7 fd28 	bl	8006ab8 <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 800f068:	4a12      	ldr	r2, [pc, #72]	@ (800f0b4 <kalmanTask+0x120>)
 800f06a:	4913      	ldr	r1, [pc, #76]	@ (800f0b8 <kalmanTask+0x124>)
 800f06c:	480c      	ldr	r0, [pc, #48]	@ (800f0a0 <kalmanTask+0x10c>)
 800f06e:	f002 ff05 	bl	8011e7c <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 800f072:	4b0f      	ldr	r3, [pc, #60]	@ (800f0b0 <kalmanTask+0x11c>)
 800f074:	6818      	ldr	r0, [r3, #0]
 800f076:	2300      	movs	r3, #0
 800f078:	2200      	movs	r2, #0
 800f07a:	2100      	movs	r1, #0
 800f07c:	f7f7 f9fe 	bl	800647c <xQueueGenericSend>
  while (true) {
 800f080:	e796      	b.n	800efb0 <kalmanTask+0x1c>
 800f082:	bf00      	nop
 800f084:	200097dd 	.word	0x200097dd
 800f088:	20009784 	.word	0x20009784
 800f08c:	20009838 	.word	0x20009838
 800f090:	200097e0 	.word	0x200097e0
 800f094:	20009800 	.word	0x20009800
 800f098:	20009814 	.word	0x20009814
 800f09c:	200097f4 	.word	0x200097f4
 800f0a0:	10002f74 	.word	0x10002f74
 800f0a4:	200098d0 	.word	0x200098d0
 800f0a8:	2000983c 	.word	0x2000983c
 800f0ac:	200098ec 	.word	0x200098ec
 800f0b0:	20009788 	.word	0x20009788
 800f0b4:	20009820 	.word	0x20009820
 800f0b8:	20009880 	.word	0x20009880

0800f0bc <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 800f0bc:	b590      	push	{r4, r7, lr}
 800f0be:	b08f      	sub	sp, #60	@ 0x3c
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	460b      	mov	r3, r1
 800f0c6:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800f0c8:	e094      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
    switch (m.type) {
 800f0ca:	7a3b      	ldrb	r3, [r7, #8]
 800f0cc:	2b0b      	cmp	r3, #11
 800f0ce:	f200 808e 	bhi.w	800f1ee <updateQueuedMeasurements+0x132>
 800f0d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d8 <updateQueuedMeasurements+0x1c>)
 800f0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d8:	0800f1ef 	.word	0x0800f1ef
 800f0dc:	0800f109 	.word	0x0800f109
 800f0e0:	0800f119 	.word	0x0800f119
 800f0e4:	0800f129 	.word	0x0800f129
 800f0e8:	0800f151 	.word	0x0800f151
 800f0ec:	0800f161 	.word	0x0800f161
 800f0f0:	0800f171 	.word	0x0800f171
 800f0f4:	0800f183 	.word	0x0800f183
 800f0f8:	0800f1ef 	.word	0x0800f1ef
 800f0fc:	0800f193 	.word	0x0800f193
 800f100:	0800f1b3 	.word	0x0800f1b3
 800f104:	0800f1d3 	.word	0x0800f1d3
          // standard KF update
//          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
        }
        break;
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 800f108:	f107 0308 	add.w	r3, r7, #8
 800f10c:	3304      	adds	r3, #4
 800f10e:	4619      	mov	r1, r3
 800f110:	483f      	ldr	r0, [pc, #252]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f112:	f004 fc07 	bl	8013924 <kalmanCoreUpdateWithPosition>
        break;
 800f116:	e06d      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 800f118:	f107 0308 	add.w	r3, r7, #8
 800f11c:	3304      	adds	r3, #4
 800f11e:	4619      	mov	r1, r3
 800f120:	483b      	ldr	r0, [pc, #236]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f122:	f004 fa87 	bl	8013634 <kalmanCoreUpdateWithPose>
        break;
 800f126:	e065      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeDistance:
        if(robustTwr){
 800f128:	4b3a      	ldr	r3, [pc, #232]	@ (800f214 <updateQueuedMeasurements+0x158>)
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d007      	beq.n	800f140 <updateQueuedMeasurements+0x84>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 800f130:	f107 0308 	add.w	r3, r7, #8
 800f134:	3304      	adds	r3, #4
 800f136:	4619      	mov	r1, r3
 800f138:	4835      	ldr	r0, [pc, #212]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f13a:	f003 fb5b 	bl	80127f4 <kalmanCoreRobustUpdateWithDistance>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
        }
        break;
 800f13e:	e059      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 800f140:	f107 0308 	add.w	r3, r7, #8
 800f144:	3304      	adds	r3, #4
 800f146:	4619      	mov	r1, r3
 800f148:	4831      	ldr	r0, [pc, #196]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f14a:	f003 f8c5 	bl	80122d8 <kalmanCoreUpdateWithDistance>
        break;
 800f14e:	e051      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 800f150:	f107 0308 	add.w	r3, r7, #8
 800f154:	3304      	adds	r3, #4
 800f156:	4619      	mov	r1, r3
 800f158:	482d      	ldr	r0, [pc, #180]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f15a:	f004 fc29 	bl	80139b0 <kalmanCoreUpdateWithTof>
        break;
 800f15e:	e049      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 800f160:	f107 0308 	add.w	r3, r7, #8
 800f164:	3304      	adds	r3, #4
 800f166:	4619      	mov	r1, r3
 800f168:	4829      	ldr	r0, [pc, #164]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f16a:	f003 f849 	bl	8012200 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 800f16e:	e041      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 800f170:	f107 0308 	add.w	r3, r7, #8
 800f174:	3304      	adds	r3, #4
 800f176:	4a28      	ldr	r2, [pc, #160]	@ (800f218 <updateQueuedMeasurements+0x15c>)
 800f178:	4619      	mov	r1, r3
 800f17a:	4825      	ldr	r0, [pc, #148]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f17c:	f003 feee 	bl	8012f5c <kalmanCoreUpdateWithFlow>
        break;
 800f180:	e038      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 800f182:	f107 0308 	add.w	r3, r7, #8
 800f186:	3304      	adds	r3, #4
 800f188:	4619      	mov	r1, r3
 800f18a:	4821      	ldr	r0, [pc, #132]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f18c:	f004 fc96 	bl	8013abc <kalmanCoreUpdateWithYawError>
        break;
 800f190:	e030      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeSweepAngle:
//        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
        break;
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 800f192:	f107 0308 	add.w	r3, r7, #8
 800f196:	3304      	adds	r3, #4
 800f198:	4619      	mov	r1, r3
 800f19a:	4820      	ldr	r0, [pc, #128]	@ (800f21c <updateQueuedMeasurements+0x160>)
 800f19c:	f7fe fa32 	bl	800d604 <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 800f1a0:	4b1d      	ldr	r3, [pc, #116]	@ (800f218 <updateQueuedMeasurements+0x15c>)
 800f1a2:	461c      	mov	r4, r3
 800f1a4:	f107 030c 	add.w	r3, r7, #12
 800f1a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800f1b0:	e020      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 800f1b2:	f107 0308 	add.w	r3, r7, #8
 800f1b6:	3304      	adds	r3, #4
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	4819      	ldr	r0, [pc, #100]	@ (800f220 <updateQueuedMeasurements+0x164>)
 800f1bc:	f7fe fa22 	bl	800d604 <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 800f1c0:	4b18      	ldr	r3, [pc, #96]	@ (800f224 <updateQueuedMeasurements+0x168>)
 800f1c2:	461c      	mov	r4, r3
 800f1c4:	f107 030c 	add.w	r3, r7, #12
 800f1c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f1cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800f1d0:	e010      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00c      	beq.n	800f1f2 <updateQueuedMeasurements+0x136>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 800f1d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	461a      	mov	r2, r3
 800f1e0:	eeb0 0a67 	vmov.f32	s0, s15
 800f1e4:	4910      	ldr	r1, [pc, #64]	@ (800f228 <updateQueuedMeasurements+0x16c>)
 800f1e6:	480a      	ldr	r0, [pc, #40]	@ (800f210 <updateQueuedMeasurements+0x154>)
 800f1e8:	f000 ffba 	bl	8010160 <kalmanCoreUpdateWithBaro>
        }
        break;
 800f1ec:	e001      	b.n	800f1f2 <updateQueuedMeasurements+0x136>
      default:
        break;
 800f1ee:	bf00      	nop
 800f1f0:	e000      	b.n	800f1f4 <updateQueuedMeasurements+0x138>
        break;
 800f1f2:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800f1f4:	f107 0308 	add.w	r3, r7, #8
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff fd75 	bl	800ece8 <estimatorDequeue>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	f47f af62 	bne.w	800f0ca <updateQueuedMeasurements+0xe>
    }
  }
}
 800f206:	bf00      	nop
 800f208:	bf00      	nop
 800f20a:	373c      	adds	r7, #60	@ 0x3c
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd90      	pop	{r4, r7, pc}
 800f210:	10002f74 	.word	0x10002f74
 800f214:	200097dc 	.word	0x200097dc
 800f218:	2000982c 	.word	0x2000982c
 800f21c:	20009800 	.word	0x20009800
 800f220:	200097e0 	.word	0x200097e0
 800f224:	20009820 	.word	0x20009820
 800f228:	2000983c 	.word	0x2000983c

0800f22c <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b082      	sub	sp, #8
 800f230:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 800f232:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800f260 <estimatorKalmanInit+0x34>
 800f236:	480b      	ldr	r0, [pc, #44]	@ (800f264 <estimatorKalmanInit+0x38>)
 800f238:	f7fe f9d2 	bl	800d5e0 <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 800f23c:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800f268 <estimatorKalmanInit+0x3c>
 800f240:	480a      	ldr	r0, [pc, #40]	@ (800f26c <estimatorKalmanInit+0x40>)
 800f242:	f7fe f9cd 	bl	800d5e0 <axis3fSubSamplerInit>


  uint32_t nowMs = T2M(xTaskGetTickCount());
 800f246:	f7f8 fa35 	bl	80076b4 <xTaskGetTickCount>
 800f24a:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4908      	ldr	r1, [pc, #32]	@ (800f270 <estimatorKalmanInit+0x44>)
 800f250:	4808      	ldr	r0, [pc, #32]	@ (800f274 <estimatorKalmanInit+0x48>)
 800f252:	f000 fa37 	bl	800f6c4 <kalmanCoreInit>
}
 800f256:	bf00      	nop
 800f258:	3708      	adds	r7, #8
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	411cf5c3 	.word	0x411cf5c3
 800f264:	200097e0 	.word	0x200097e0
 800f268:	3c8efa35 	.word	0x3c8efa35
 800f26c:	20009800 	.word	0x20009800
 800f270:	2000983c 	.word	0x2000983c
 800f274:	10002f74 	.word	0x10002f74

0800f278 <positionEstimate>:
};

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state);
static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state);

void positionEstimate(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep) {
 800f278:	b580      	push	{r7, lr}
 800f27a:	b088      	sub	sp, #32
 800f27c:	af02      	add	r7, sp, #8
 800f27e:	6178      	str	r0, [r7, #20]
 800f280:	6139      	str	r1, [r7, #16]
 800f282:	60fa      	str	r2, [r7, #12]
 800f284:	ed87 0a02 	vstr	s0, [r7, #8]
 800f288:	607b      	str	r3, [r7, #4]
  positionEstimateInternal(estimate, baro, tofMeasurement, dt, stabilizerStep, &state);
 800f28a:	4b07      	ldr	r3, [pc, #28]	@ (800f2a8 <positionEstimate+0x30>)
 800f28c:	9300      	str	r3, [sp, #0]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	ed97 0a02 	vldr	s0, [r7, #8]
 800f294:	68fa      	ldr	r2, [r7, #12]
 800f296:	6939      	ldr	r1, [r7, #16]
 800f298:	6978      	ldr	r0, [r7, #20]
 800f29a:	f000 f81b 	bl	800f2d4 <positionEstimateInternal>
}
 800f29e:	bf00      	nop
 800f2a0:	3718      	adds	r7, #24
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}
 800f2a6:	bf00      	nop
 800f2a8:	20000058 	.word	0x20000058

0800f2ac <positionUpdateVelocity>:

void positionUpdateVelocity(float accWZ, float dt) {
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	ed87 0a01 	vstr	s0, [r7, #4]
 800f2b6:	edc7 0a00 	vstr	s1, [r7]
  positionUpdateVelocityInternal(accWZ, dt, &state);
 800f2ba:	4805      	ldr	r0, [pc, #20]	@ (800f2d0 <positionUpdateVelocity+0x24>)
 800f2bc:	edd7 0a00 	vldr	s1, [r7]
 800f2c0:	ed97 0a01 	vldr	s0, [r7, #4]
 800f2c4:	f000 f8b2 	bl	800f42c <positionUpdateVelocityInternal>
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	20000058 	.word	0x20000058

0800f2d4 <positionEstimateInternal>:

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state) {
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b08a      	sub	sp, #40	@ 0x28
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6178      	str	r0, [r7, #20]
 800f2dc:	6139      	str	r1, [r7, #16]
 800f2de:	60fa      	str	r2, [r7, #12]
 800f2e0:	ed87 0a02 	vstr	s0, [r7, #8]
 800f2e4:	607b      	str	r3, [r7, #4]
  float filteredZ;
  static float prev_estimatedZ = 0;
  static bool surfaceFollowingMode = false;

  const uint32_t MAX_SAMPLE_AGE = M2T(50);
 800f2e6:	2332      	movs	r3, #50	@ 0x32
 800f2e8:	623b      	str	r3, [r7, #32]

  uint32_t now = xTaskGetTickCount();
 800f2ea:	f7f8 f9e3 	bl	80076b4 <xTaskGetTickCount>
 800f2ee:	61f8      	str	r0, [r7, #28]
//  bool isSampleUseful = ((now - tofMeasurement->timestamp) <= MAX_SAMPLE_AGE);
  bool isSampleUseful  =  false;
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	76fb      	strb	r3, [r7, #27]
  if (isSampleUseful) {
 800f2f4:	7efb      	ldrb	r3, [r7, #27]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d002      	beq.n	800f300 <positionEstimateInternal+0x2c>
    surfaceFollowingMode = true;
 800f2fa:	4b4a      	ldr	r3, [pc, #296]	@ (800f424 <positionEstimateInternal+0x150>)
 800f2fc:	2201      	movs	r2, #1
 800f2fe:	701a      	strb	r2, [r3, #0]
  }

  if (surfaceFollowingMode) {
 800f300:	4b48      	ldr	r3, [pc, #288]	@ (800f424 <positionEstimateInternal+0x150>)
 800f302:	781b      	ldrb	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d02e      	beq.n	800f366 <positionEstimateInternal+0x92>
    if (isSampleUseful) {
 800f308:	7efb      	ldrb	r3, [r7, #27]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d062      	beq.n	800f3d4 <positionEstimateInternal+0x100>
      // IIR filter zrange
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800f30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f310:	ed93 7a02 	vldr	s14, [r3, #8]
 800f314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f316:	edd3 7a00 	vldr	s15, [r3]
 800f31a:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaZrange) * tofMeasurement->distance;
 800f31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f320:	edd3 7a02 	vldr	s15, [r3, #8]
 800f324:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f328:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	edd3 7a01 	vldr	s15, [r3, #4]
 800f332:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800f336:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f33a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      // Use zrange as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800f33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f340:	ed93 7a04 	vldr	s14, [r3, #16]
 800f344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f346:	edd3 7a01 	vldr	s15, [r3, #4]
 800f34a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f34e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f352:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f356:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f35a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f360:	edc3 7a00 	vstr	s15, [r3]
 800f364:	e036      	b.n	800f3d4 <positionEstimateInternal+0x100>
    }
  } else {
    // FIXME: A bit of an hack to init IIR filter
    if (state->estimatedZ == 0.0f) {
 800f366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f368:	edd3 7a00 	vldr	s15, [r3]
 800f36c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f374:	d103      	bne.n	800f37e <positionEstimateInternal+0xaa>
      filteredZ = baro->asl;
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f37c:	e017      	b.n	800f3ae <positionEstimateInternal+0xda>
    } else {
      // IIR filter asl
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800f37e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f380:	ed93 7a03 	vldr	s14, [r3, #12]
 800f384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f386:	edd3 7a00 	vldr	s15, [r3]
 800f38a:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaAsl) * baro->asl;
 800f38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f390:	edd3 7a03 	vldr	s15, [r3, #12]
 800f394:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f398:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f39c:	693b      	ldr	r3, [r7, #16]
 800f39e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f3a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800f3a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3aa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    #if CONFIG_CONTROLLER_PID_IMPROVED_BARO_Z_HOLD
      state->estimatedZ = filteredZ;
    #else
      // Use asl as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800f3ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b0:	ed93 7a04 	vldr	s14, [r3, #16]
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3be:	edd7 7a02 	vldr	s15, [r7, #8]
 800f3c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f3c6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d0:	edc3 7a00 	vstr	s15, [r3]
    #endif
  }

  estimate->position.x = 0.0f;
 800f3d4:	697b      	ldr	r3, [r7, #20]
 800f3d6:	f04f 0200 	mov.w	r2, #0
 800f3da:	625a      	str	r2, [r3, #36]	@ 0x24
  estimate->position.y = 0.0f;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	f04f 0200 	mov.w	r2, #0
 800f3e2:	629a      	str	r2, [r3, #40]	@ 0x28
  estimate->position.z = state->estimatedZ;
 800f3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e6:	681a      	ldr	r2, [r3, #0]
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  estimate->velocity.z = (state->estimatedZ - prev_estimatedZ) / dt;
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ee:	ed93 7a00 	vldr	s14, [r3]
 800f3f2:	4b0d      	ldr	r3, [pc, #52]	@ (800f428 <positionEstimateInternal+0x154>)
 800f3f4:	edd3 7a00 	vldr	s15, [r3]
 800f3f8:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f3fc:	ed97 7a02 	vldr	s14, [r7, #8]
 800f400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f404:	697b      	ldr	r3, [r7, #20]
 800f406:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  state->estimatedVZ = estimate->velocity.z;
 800f40a:	697b      	ldr	r3, [r7, #20]
 800f40c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f410:	61da      	str	r2, [r3, #28]
  prev_estimatedZ = state->estimatedZ;
 800f412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4a04      	ldr	r2, [pc, #16]	@ (800f428 <positionEstimateInternal+0x154>)
 800f418:	6013      	str	r3, [r2, #0]
}
 800f41a:	bf00      	nop
 800f41c:	3728      	adds	r7, #40	@ 0x28
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	200098f0 	.word	0x200098f0
 800f428:	200098f4 	.word	0x200098f4

0800f42c <positionUpdateVelocityInternal>:

static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state) {
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	ed87 0a03 	vstr	s0, [r7, #12]
 800f436:	edc7 0a02 	vstr	s1, [r7, #8]
 800f43a:	6078      	str	r0, [r7, #4]
  state->velocityZ += deadband(accWZ, state->vAccDeadband) * dt * G;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	edd3 7a05 	vldr	s15, [r3, #20]
 800f442:	eef0 0a67 	vmov.f32	s1, s15
 800f446:	ed97 0a03 	vldr	s0, [r7, #12]
 800f44a:	f004 fd9f 	bl	8013f8c <deadband>
 800f44e:	eeb0 7a40 	vmov.f32	s14, s0
 800f452:	edd7 7a02 	vldr	s15, [r7, #8]
 800f456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f45a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f490 <positionUpdateVelocityInternal+0x64>
 800f45e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	edd3 7a01 	vldr	s15, [r3, #4]
 800f468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	edc3 7a01 	vstr	s15, [r3, #4]
  state->velocityZ *= state->velZAlpha;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	ed93 7a01 	vldr	s14, [r3, #4]
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	edd3 7a06 	vldr	s15, [r3, #24]
 800f47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800f488:	bf00      	nop
 800f48a:	3710      	adds	r7, #16
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	411cf5c3 	.word	0x411cf5c3

0800f494 <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800f494:	b580      	push	{r7, lr}
 800f496:	b084      	sub	sp, #16
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f003 0303 	and.w	r3, r3, #3
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d004      	beq.n	800f4b6 <assert_aligned_4_bytes+0x22>
 800f4ac:	2239      	movs	r2, #57	@ 0x39
 800f4ae:	4904      	ldr	r1, [pc, #16]	@ (800f4c0 <assert_aligned_4_bytes+0x2c>)
 800f4b0:	4804      	ldr	r0, [pc, #16]	@ (800f4c4 <assert_aligned_4_bytes+0x30>)
 800f4b2:	f004 fc39 	bl	8013d28 <assertFail>
}
 800f4b6:	bf00      	nop
 800f4b8:	3710      	adds	r7, #16
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	0801c018 	.word	0x0801c018
 800f4c4:	0801c058 	.word	0x0801c058

0800f4c8 <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800f4d2:	6878      	ldr	r0, [r7, #4]
 800f4d4:	f7ff ffde 	bl	800f494 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800f4d8:	6838      	ldr	r0, [r7, #0]
 800f4da:	f7ff ffdb 	bl	800f494 <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f009 fbef 	bl	8018cc4 <arm_mat_trans_f32>
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f4ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d004      	beq.n	800f4fc <mat_trans+0x34>
 800f4f2:	2241      	movs	r2, #65	@ 0x41
 800f4f4:	4903      	ldr	r1, [pc, #12]	@ (800f504 <mat_trans+0x3c>)
 800f4f6:	4804      	ldr	r0, [pc, #16]	@ (800f508 <mat_trans+0x40>)
 800f4f8:	f004 fc16 	bl	8013d28 <assertFail>
}
 800f4fc:	bf00      	nop
 800f4fe:	3710      	adds	r7, #16
 800f500:	46bd      	mov	sp, r7
 800f502:	bd80      	pop	{r7, pc}
 800f504:	0801c018 	.word	0x0801c018
 800f508:	0801c070 	.word	0x0801c070

0800f50c <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b086      	sub	sp, #24
 800f510:	af00      	add	r7, sp, #0
 800f512:	60f8      	str	r0, [r7, #12]
 800f514:	60b9      	str	r1, [r7, #8]
 800f516:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f7ff ffbb 	bl	800f494 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800f51e:	68b8      	ldr	r0, [r7, #8]
 800f520:	f7ff ffb8 	bl	800f494 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7ff ffb5 	bl	800f494 <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	68b9      	ldr	r1, [r7, #8]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f009 fc76 	bl	8018e20 <arm_mat_mult_f32>
 800f534:	4603      	mov	r3, r0
 800f536:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d004      	beq.n	800f54a <mat_mult+0x3e>
 800f540:	2252      	movs	r2, #82	@ 0x52
 800f542:	4904      	ldr	r1, [pc, #16]	@ (800f554 <mat_mult+0x48>)
 800f544:	4804      	ldr	r0, [pc, #16]	@ (800f558 <mat_mult+0x4c>)
 800f546:	f004 fbef 	bl	8013d28 <assertFail>
}
 800f54a:	bf00      	nop
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}
 800f552:	bf00      	nop
 800f554:	0801c018 	.word	0x0801c018
 800f558:	0801c070 	.word	0x0801c070

0800f55c <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b086      	sub	sp, #24
 800f560:	af00      	add	r7, sp, #0
 800f562:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800f566:	f04f 0300 	mov.w	r3, #0
 800f56a:	60bb      	str	r3, [r7, #8]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	613b      	str	r3, [r7, #16]
 800f570:	f107 0308 	add.w	r3, r7, #8
 800f574:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800f576:	edd7 7a04 	vldr	s15, [r7, #16]
 800f57a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f582:	db0a      	blt.n	800f59a <arm_sqrt+0x3e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800f584:	ed97 0a04 	vldr	s0, [r7, #16]
 800f588:	f009 ffea 	bl	8019560 <sqrtf>
 800f58c:	eef0 7a40 	vmov.f32	s15, s0
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800f596:	2300      	movs	r3, #0
 800f598:	e005      	b.n	800f5a6 <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	f04f 0200 	mov.w	r2, #0
 800f5a0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f5a2:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 800f5a6:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f5a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d004      	beq.n	800f5ba <arm_sqrt+0x5e>
 800f5b0:	2258      	movs	r2, #88	@ 0x58
 800f5b2:	4906      	ldr	r1, [pc, #24]	@ (800f5cc <arm_sqrt+0x70>)
 800f5b4:	4806      	ldr	r0, [pc, #24]	@ (800f5d0 <arm_sqrt+0x74>)
 800f5b6:	f004 fbb7 	bl	8013d28 <assertFail>
  return pOut;
 800f5ba:	68bb      	ldr	r3, [r7, #8]
 800f5bc:	ee07 3a90 	vmov	s15, r3
}
 800f5c0:	eeb0 0a67 	vmov.f32	s0, s15
 800f5c4:	3718      	adds	r7, #24
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}
 800f5ca:	bf00      	nop
 800f5cc:	0801c018 	.word	0x0801c018
 800f5d0:	0801c070 	.word	0x0801c070

0800f5d4 <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	ed87 0a02 	vstr	s0, [r7, #8]
 800f5e0:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 800f5e2:	6879      	ldr	r1, [r7, #4]
 800f5e4:	ed97 0a02 	vldr	s0, [r7, #8]
 800f5e8:	68f8      	ldr	r0, [r7, #12]
 800f5ea:	f009 fbc7 	bl	8018d7c <arm_mat_scale_f32>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d004      	beq.n	800f604 <mat_scale+0x30>
 800f5fa:	2272      	movs	r2, #114	@ 0x72
 800f5fc:	4903      	ldr	r1, [pc, #12]	@ (800f60c <mat_scale+0x38>)
 800f5fe:	4804      	ldr	r0, [pc, #16]	@ (800f610 <mat_scale+0x3c>)
 800f600:	f004 fb92 	bl	8013d28 <assertFail>
}
 800f604:	bf00      	nop
 800f606:	3718      	adds	r7, #24
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	0801c018 	.word	0x0801c018
 800f610:	0801c070 	.word	0x0801c070

0800f614 <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 800f614:	b480      	push	{r7}
 800f616:	b083      	sub	sp, #12
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  return;
 800f61c:	bf00      	nop
}
 800f61e:	370c      	adds	r7, #12
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a21      	ldr	r2, [pc, #132]	@ (800f6b8 <kalmanCoreDefaultParams+0x90>)
 800f634:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800f63c:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4a1e      	ldr	r2, [pc, #120]	@ (800f6bc <kalmanCoreDefaultParams+0x94>)
 800f642:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	4a1d      	ldr	r2, [pc, #116]	@ (800f6bc <kalmanCoreDefaultParams+0x94>)
 800f648:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	4a1b      	ldr	r2, [pc, #108]	@ (800f6bc <kalmanCoreDefaultParams+0x94>)
 800f64e:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800f656:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800f65e:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f04f 0200 	mov.w	r2, #0
 800f666:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f04f 0200 	mov.w	r2, #0
 800f66e:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f04f 0200 	mov.w	r2, #0
 800f676:	625a      	str	r2, [r3, #36]	@ 0x24
  params->measNoiseBaro = 2.0f;           // meters
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800f67e:	629a      	str	r2, [r3, #40]	@ 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	4a0f      	ldr	r2, [pc, #60]	@ (800f6c0 <kalmanCoreDefaultParams+0x98>)
 800f684:	62da      	str	r2, [r3, #44]	@ 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	4a0d      	ldr	r2, [pc, #52]	@ (800f6c0 <kalmanCoreDefaultParams+0x98>)
 800f68a:	631a      	str	r2, [r3, #48]	@ 0x30

  params->initialX = 0.0;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f04f 0200 	mov.w	r2, #0
 800f692:	635a      	str	r2, [r3, #52]	@ 0x34
  params->initialY = 0.0;
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	f04f 0200 	mov.w	r2, #0
 800f69a:	639a      	str	r2, [r3, #56]	@ 0x38
  params->initialZ = 0.0;
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f04f 0200 	mov.w	r2, #0
 800f6a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	f04f 0200 	mov.w	r2, #0
 800f6aa:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr
 800f6b8:	42c80000 	.word	0x42c80000
 800f6bc:	3c23d70a 	.word	0x3c23d70a
 800f6c0:	3dcccccd 	.word	0x3dcccccd

0800f6c4 <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b08a      	sub	sp, #40	@ 0x28
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	60f8      	str	r0, [r7, #12]
 800f6cc:	60b9      	str	r1, [r7, #8]
 800f6ce:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 800f6d0:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f009 fdd8 	bl	801928c <memset>

  this->S[KC_STATE_X] = params->initialX;
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 800f6e4:	68bb      	ldr	r3, [r7, #8]
 800f6e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800f6fa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f6fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f702:	eeb0 0a47 	vmov.f32	s0, s14
 800f706:	f009 fd77 	bl	80191f8 <arm_cos_f32>
 800f70a:	eef0 7a40 	vmov.f32	s15, s0
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
  this->initialQuaternion[1] = 0.0;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f04f 0200 	mov.w	r2, #0
 800f71a:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  this->initialQuaternion[2] = 0.0;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	f04f 0200 	mov.w	r2, #0
 800f724:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 800f728:	68bb      	ldr	r3, [r7, #8]
 800f72a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800f72e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f732:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800f736:	eeb0 0a47 	vmov.f32	s0, s14
 800f73a:	f009 fd17 	bl	801916c <arm_sin_f32>
 800f73e:	eef0 7a40 	vmov.f32	s15, s0
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 800f748:	2300      	movs	r3, #0
 800f74a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f74c:	e00f      	b.n	800f76e <kalmanCoreInit+0xaa>
 800f74e:	68fa      	ldr	r2, [r7, #12]
 800f750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f752:	336a      	adds	r3, #106	@ 0x6a
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	4413      	add	r3, r2
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	68f9      	ldr	r1, [r7, #12]
 800f75c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75e:	3308      	adds	r3, #8
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	440b      	add	r3, r1
 800f764:	3304      	adds	r3, #4
 800f766:	601a      	str	r2, [r3, #0]
 800f768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f76a:	3301      	adds	r3, #1
 800f76c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f770:	2b03      	cmp	r3, #3
 800f772:	ddec      	ble.n	800f74e <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 800f774:	2300      	movs	r3, #0
 800f776:	623b      	str	r3, [r7, #32]
 800f778:	e020      	b.n	800f7bc <kalmanCoreInit+0xf8>
 800f77a:	2300      	movs	r3, #0
 800f77c:	61fb      	str	r3, [r7, #28]
 800f77e:	e017      	b.n	800f7b0 <kalmanCoreInit+0xec>
 800f780:	6a3a      	ldr	r2, [r7, #32]
 800f782:	69fb      	ldr	r3, [r7, #28]
 800f784:	429a      	cmp	r2, r3
 800f786:	d102      	bne.n	800f78e <kalmanCoreInit+0xca>
 800f788:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800f78c:	e001      	b.n	800f792 <kalmanCoreInit+0xce>
 800f78e:	f04f 0100 	mov.w	r1, #0
 800f792:	68f8      	ldr	r0, [r7, #12]
 800f794:	6a3a      	ldr	r2, [r7, #32]
 800f796:	4613      	mov	r3, r2
 800f798:	005b      	lsls	r3, r3, #1
 800f79a:	4413      	add	r3, r2
 800f79c:	69fa      	ldr	r2, [r7, #28]
 800f79e:	4413      	add	r3, r2
 800f7a0:	330c      	adds	r3, #12
 800f7a2:	009b      	lsls	r3, r3, #2
 800f7a4:	4403      	add	r3, r0
 800f7a6:	3304      	adds	r3, #4
 800f7a8:	6019      	str	r1, [r3, #0]
 800f7aa:	69fb      	ldr	r3, [r7, #28]
 800f7ac:	3301      	adds	r3, #1
 800f7ae:	61fb      	str	r3, [r7, #28]
 800f7b0:	69fb      	ldr	r3, [r7, #28]
 800f7b2:	2b02      	cmp	r3, #2
 800f7b4:	dde4      	ble.n	800f780 <kalmanCoreInit+0xbc>
 800f7b6:	6a3b      	ldr	r3, [r7, #32]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	623b      	str	r3, [r7, #32]
 800f7bc:	6a3b      	ldr	r3, [r7, #32]
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	dddb      	ble.n	800f77a <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	61bb      	str	r3, [r7, #24]
 800f7c6:	e018      	b.n	800f7fa <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	617b      	str	r3, [r7, #20]
 800f7cc:	e00f      	b.n	800f7ee <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 800f7ce:	68f9      	ldr	r1, [r7, #12]
 800f7d0:	69ba      	ldr	r2, [r7, #24]
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	00db      	lsls	r3, r3, #3
 800f7d6:	4413      	add	r3, r2
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	4413      	add	r3, r2
 800f7dc:	3316      	adds	r3, #22
 800f7de:	009b      	lsls	r3, r3, #2
 800f7e0:	440b      	add	r3, r1
 800f7e2:	f04f 0200 	mov.w	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	617b      	str	r3, [r7, #20]
 800f7ee:	697b      	ldr	r3, [r7, #20]
 800f7f0:	2b08      	cmp	r3, #8
 800f7f2:	ddec      	ble.n	800f7ce <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	3301      	adds	r3, #1
 800f7f8:	61bb      	str	r3, [r7, #24]
 800f7fa:	69bb      	ldr	r3, [r7, #24]
 800f7fc:	2b08      	cmp	r3, #8
 800f7fe:	dde3      	ble.n	800f7c8 <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	edd3 7a00 	vldr	s15, [r3]
 800f806:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f80a:	eeb0 0a67 	vmov.f32	s0, s15
 800f80e:	f009 fe4f 	bl	80194b0 <powf>
 800f812:	eef0 7a40 	vmov.f32	s15, s0
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	edd3 7a00 	vldr	s15, [r3]
 800f822:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f826:	eeb0 0a67 	vmov.f32	s0, s15
 800f82a:	f009 fe41 	bl	80194b0 <powf>
 800f82e:	eef0 7a40 	vmov.f32	s15, s0
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	edd3 7a01 	vldr	s15, [r3, #4]
 800f83e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f842:	eeb0 0a67 	vmov.f32	s0, s15
 800f846:	f009 fe33 	bl	80194b0 <powf>
 800f84a:	eef0 7a40 	vmov.f32	s15, s0
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	edd3 7a02 	vldr	s15, [r3, #8]
 800f85a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f85e:	eeb0 0a67 	vmov.f32	s0, s15
 800f862:	f009 fe25 	bl	80194b0 <powf>
 800f866:	eef0 7a40 	vmov.f32	s15, s0
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	edd3 7a02 	vldr	s15, [r3, #8]
 800f876:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f87a:	eeb0 0a67 	vmov.f32	s0, s15
 800f87e:	f009 fe17 	bl	80194b0 <powf>
 800f882:	eef0 7a40 	vmov.f32	s15, s0
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f892:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f896:	eeb0 0a67 	vmov.f32	s0, s15
 800f89a:	f009 fe09 	bl	80194b0 <powf>
 800f89e:	eef0 7a40 	vmov.f32	s15, s0
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8ae:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f8b2:	eeb0 0a67 	vmov.f32	s0, s15
 800f8b6:	f009 fdfb 	bl	80194b0 <powf>
 800f8ba:	eef0 7a40 	vmov.f32	s15, s0
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	edd3 7a03 	vldr	s15, [r3, #12]
 800f8ca:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f8ce:	eeb0 0a67 	vmov.f32	s0, s15
 800f8d2:	f009 fded 	bl	80194b0 <powf>
 800f8d6:	eef0 7a40 	vmov.f32	s15, s0
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	edd3 7a04 	vldr	s15, [r3, #16]
 800f8e6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f8ea:	eeb0 0a67 	vmov.f32	s0, s15
 800f8ee:	f009 fddf 	bl	80194b0 <powf>
 800f8f2:	eef0 7a40 	vmov.f32	s15, s0
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  this->Pm.numRows = KC_STATE_DIM;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2209      	movs	r2, #9
 800f900:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2209      	movs	r2, #9
 800f908:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
  this->Pm.pData = (float*)this->P;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

  this->baroReferenceHeight = 0.0;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	f04f 0200 	mov.w	r2, #0
 800f91e:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  this->isUpdated = false;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	2200      	movs	r2, #0
 800f926:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  this->lastPredictionMs = nowMs;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	687a      	ldr	r2, [r7, #4]
 800f92e:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 800f93a:	bf00      	nop
 800f93c:	3728      	adds	r7, #40	@ 0x28
 800f93e:	46bd      	mov	sp, r7
 800f940:	bd80      	pop	{r7, pc}
 800f942:	0000      	movs	r0, r0
 800f944:	0000      	movs	r0, r0
	...

0800f948 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b090      	sub	sp, #64	@ 0x40
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	60f8      	str	r0, [r7, #12]
 800f950:	60b9      	str	r1, [r7, #8]
 800f952:	ed87 0a01 	vstr	s0, [r7, #4]
 800f956:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	881b      	ldrh	r3, [r3, #0]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d004      	beq.n	800f96c <kalmanCoreScalarUpdate+0x24>
 800f962:	22e8      	movs	r2, #232	@ 0xe8
 800f964:	49ac      	ldr	r1, [pc, #688]	@ (800fc18 <kalmanCoreScalarUpdate+0x2d0>)
 800f966:	48ad      	ldr	r0, [pc, #692]	@ (800fc1c <kalmanCoreScalarUpdate+0x2d4>)
 800f968:	f004 f9de 	bl	8013d28 <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	885b      	ldrh	r3, [r3, #2]
 800f970:	2b09      	cmp	r3, #9
 800f972:	d004      	beq.n	800f97e <kalmanCoreScalarUpdate+0x36>
 800f974:	22e9      	movs	r2, #233	@ 0xe9
 800f976:	49a8      	ldr	r1, [pc, #672]	@ (800fc18 <kalmanCoreScalarUpdate+0x2d0>)
 800f978:	48a9      	ldr	r0, [pc, #676]	@ (800fc20 <kalmanCoreScalarUpdate+0x2d8>)
 800f97a:	f004 f9d5 	bl	8013d28 <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 800f97e:	49a9      	ldr	r1, [pc, #676]	@ (800fc24 <kalmanCoreScalarUpdate+0x2dc>)
 800f980:	68b8      	ldr	r0, [r7, #8]
 800f982:	f7ff fda1 	bl	800f4c8 <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800f98c:	4aa6      	ldr	r2, [pc, #664]	@ (800fc28 <kalmanCoreScalarUpdate+0x2e0>)
 800f98e:	49a5      	ldr	r1, [pc, #660]	@ (800fc24 <kalmanCoreScalarUpdate+0x2dc>)
 800f990:	4618      	mov	r0, r3
 800f992:	f7ff fdbb 	bl	800f50c <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 800f996:	edd7 7a00 	vldr	s15, [r7]
 800f99a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f99e:	edc7 7a08 	vstr	s15, [r7, #32]
  double HPHR = R; // HPH' + R
 800f9a2:	6a38      	ldr	r0, [r7, #32]
 800f9a4:	f7f0 fd82 	bl	80004ac <__aeabi_f2d>
 800f9a8:	4602      	mov	r2, r0
 800f9aa:	460b      	mov	r3, r1
 800f9ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9b4:	e01f      	b.n	800f9f6 <kalmanCoreScalarUpdate+0xae>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	685a      	ldr	r2, [r3, #4]
 800f9ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	4413      	add	r3, r2
 800f9c0:	ed93 7a00 	vldr	s14, [r3]
 800f9c4:	4a99      	ldr	r2, [pc, #612]	@ (800fc2c <kalmanCoreScalarUpdate+0x2e4>)
 800f9c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9c8:	009b      	lsls	r3, r3, #2
 800f9ca:	4413      	add	r3, r2
 800f9cc:	edd3 7a00 	vldr	s15, [r3]
 800f9d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9d4:	ee17 0a90 	vmov	r0, s15
 800f9d8:	f7f0 fd68 	bl	80004ac <__aeabi_f2d>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	460b      	mov	r3, r1
 800f9e0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f9e4:	f7f0 fc04 	bl	80001f0 <__adddf3>
 800f9e8:	4602      	mov	r2, r0
 800f9ea:	460b      	mov	r3, r1
 800f9ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800f9f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9f2:	3301      	adds	r3, #1
 800f9f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800f9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f9f8:	2b08      	cmp	r3, #8
 800f9fa:	dddc      	ble.n	800f9b6 <kalmanCoreScalarUpdate+0x6e>

  }
  ASSERT(!isnan(HPHR));
 800f9fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800fa00:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800fa04:	f7f1 f844 	bl	8000a90 <__aeabi_dcmpun>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d004      	beq.n	800fa18 <kalmanCoreScalarUpdate+0xd0>
 800fa0e:	22f6      	movs	r2, #246	@ 0xf6
 800fa10:	4981      	ldr	r1, [pc, #516]	@ (800fc18 <kalmanCoreScalarUpdate+0x2d0>)
 800fa12:	4887      	ldr	r0, [pc, #540]	@ (800fc30 <kalmanCoreScalarUpdate+0x2e8>)
 800fa14:	f004 f988 	bl	8013d28 <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 800fa18:	2300      	movs	r3, #0
 800fa1a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa1c:	e032      	b.n	800fa84 <kalmanCoreScalarUpdate+0x13c>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 800fa1e:	4a83      	ldr	r2, [pc, #524]	@ (800fc2c <kalmanCoreScalarUpdate+0x2e4>)
 800fa20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7f0 fd3f 	bl	80004ac <__aeabi_f2d>
 800fa2e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800fa32:	f7f0 febd 	bl	80007b0 <__aeabi_ddiv>
 800fa36:	4602      	mov	r2, r0
 800fa38:	460b      	mov	r3, r1
 800fa3a:	4610      	mov	r0, r2
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	f7f1 f83d 	bl	8000abc <__aeabi_d2f>
 800fa42:	4602      	mov	r2, r0
 800fa44:	497b      	ldr	r1, [pc, #492]	@ (800fc34 <kalmanCoreScalarUpdate+0x2ec>)
 800fa46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa48:	009b      	lsls	r3, r3, #2
 800fa4a:	440b      	add	r3, r1
 800fa4c:	601a      	str	r2, [r3, #0]
    this->S[i] = this->S[i] + K[i] * error; // state update
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	4413      	add	r3, r2
 800fa56:	ed93 7a00 	vldr	s14, [r3]
 800fa5a:	4a76      	ldr	r2, [pc, #472]	@ (800fc34 <kalmanCoreScalarUpdate+0x2ec>)
 800fa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa5e:	009b      	lsls	r3, r3, #2
 800fa60:	4413      	add	r3, r2
 800fa62:	edd3 6a00 	vldr	s13, [r3]
 800fa66:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa72:	68fa      	ldr	r2, [r7, #12]
 800fa74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	4413      	add	r3, r2
 800fa7a:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 800fa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa80:	3301      	adds	r3, #1
 800fa82:	633b      	str	r3, [r7, #48]	@ 0x30
 800fa84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fa86:	2b08      	cmp	r3, #8
 800fa88:	ddc9      	ble.n	800fa1e <kalmanCoreScalarUpdate+0xd6>
  }
  assertStateNotNaN(this);
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7ff fdc2 	bl	800f614 <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 800fa90:	4a69      	ldr	r2, [pc, #420]	@ (800fc38 <kalmanCoreScalarUpdate+0x2f0>)
 800fa92:	68b9      	ldr	r1, [r7, #8]
 800fa94:	4869      	ldr	r0, [pc, #420]	@ (800fc3c <kalmanCoreScalarUpdate+0x2f4>)
 800fa96:	f7ff fd39 	bl	800f50c <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fa9e:	e01a      	b.n	800fad6 <kalmanCoreScalarUpdate+0x18e>
 800faa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800faa2:	4613      	mov	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	4413      	add	r3, r2
 800faa8:	005b      	lsls	r3, r3, #1
 800faaa:	4a65      	ldr	r2, [pc, #404]	@ (800fc40 <kalmanCoreScalarUpdate+0x2f8>)
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	edd3 7a00 	vldr	s15, [r3]
 800fab4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fab6:	4613      	mov	r3, r2
 800fab8:	009b      	lsls	r3, r3, #2
 800faba:	4413      	add	r3, r2
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fac6:	4a5e      	ldr	r2, [pc, #376]	@ (800fc40 <kalmanCoreScalarUpdate+0x2f8>)
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4413      	add	r3, r2
 800facc:	edc3 7a00 	vstr	s15, [r3]
 800fad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad2:	3301      	adds	r3, #1
 800fad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fad8:	2b08      	cmp	r3, #8
 800fada:	dde1      	ble.n	800faa0 <kalmanCoreScalarUpdate+0x158>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 800fadc:	4959      	ldr	r1, [pc, #356]	@ (800fc44 <kalmanCoreScalarUpdate+0x2fc>)
 800fade:	4856      	ldr	r0, [pc, #344]	@ (800fc38 <kalmanCoreScalarUpdate+0x2f0>)
 800fae0:	f7ff fcf2 	bl	800f4c8 <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800faea:	4a57      	ldr	r2, [pc, #348]	@ (800fc48 <kalmanCoreScalarUpdate+0x300>)
 800faec:	4619      	mov	r1, r3
 800faee:	4852      	ldr	r0, [pc, #328]	@ (800fc38 <kalmanCoreScalarUpdate+0x2f0>)
 800faf0:	f7ff fd0c 	bl	800f50c <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800fafa:	461a      	mov	r2, r3
 800fafc:	4951      	ldr	r1, [pc, #324]	@ (800fc44 <kalmanCoreScalarUpdate+0x2fc>)
 800fafe:	4852      	ldr	r0, [pc, #328]	@ (800fc48 <kalmanCoreScalarUpdate+0x300>)
 800fb00:	f7ff fd04 	bl	800f50c <mat_mult>
  assertStateNotNaN(this);
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7ff fd85 	bl	800f614 <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fb0e:	e101      	b.n	800fd14 <kalmanCoreScalarUpdate+0x3cc>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800fb10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb12:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb14:	e0f7      	b.n	800fd06 <kalmanCoreScalarUpdate+0x3be>
      double v = K[i] * R * K[j];
 800fb16:	4a47      	ldr	r2, [pc, #284]	@ (800fc34 <kalmanCoreScalarUpdate+0x2ec>)
 800fb18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb1a:	009b      	lsls	r3, r3, #2
 800fb1c:	4413      	add	r3, r2
 800fb1e:	ed93 7a00 	vldr	s14, [r3]
 800fb22:	edd7 7a08 	vldr	s15, [r7, #32]
 800fb26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb2a:	4a42      	ldr	r2, [pc, #264]	@ (800fc34 <kalmanCoreScalarUpdate+0x2ec>)
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	4413      	add	r3, r2
 800fb32:	edd3 7a00 	vldr	s15, [r3]
 800fb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb3a:	ee17 0a90 	vmov	r0, s15
 800fb3e:	f7f0 fcb5 	bl	80004ac <__aeabi_f2d>
 800fb42:	4602      	mov	r2, r0
 800fb44:	460b      	mov	r3, r1
 800fb46:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 800fb4a:	68f9      	ldr	r1, [r7, #12]
 800fb4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb4e:	4613      	mov	r3, r2
 800fb50:	00db      	lsls	r3, r3, #3
 800fb52:	4413      	add	r3, r2
 800fb54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb56:	4413      	add	r3, r2
 800fb58:	3316      	adds	r3, #22
 800fb5a:	009b      	lsls	r3, r3, #2
 800fb5c:	440b      	add	r3, r1
 800fb5e:	edd3 7a00 	vldr	s15, [r3]
 800fb62:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fb66:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fb6a:	68f9      	ldr	r1, [r7, #12]
 800fb6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb6e:	4613      	mov	r3, r2
 800fb70:	00db      	lsls	r3, r3, #3
 800fb72:	4413      	add	r3, r2
 800fb74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb76:	4413      	add	r3, r2
 800fb78:	3316      	adds	r3, #22
 800fb7a:	009b      	lsls	r3, r3, #2
 800fb7c:	440b      	add	r3, r1
 800fb7e:	edd3 7a00 	vldr	s15, [r3]
 800fb82:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800fb86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fb8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb8e:	ee17 0a90 	vmov	r0, s15
 800fb92:	f7f0 fc8b 	bl	80004ac <__aeabi_f2d>
 800fb96:	4602      	mov	r2, r0
 800fb98:	460b      	mov	r3, r1
 800fb9a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800fb9e:	f7f0 fb27 	bl	80001f0 <__adddf3>
 800fba2:	4602      	mov	r2, r0
 800fba4:	460b      	mov	r3, r1
 800fba6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800fbaa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fbae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fbb2:	f7f0 ff6d 	bl	8000a90 <__aeabi_dcmpun>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d109      	bne.n	800fbd0 <kalmanCoreScalarUpdate+0x288>
 800fbbc:	f04f 0200 	mov.w	r2, #0
 800fbc0:	4b22      	ldr	r3, [pc, #136]	@ (800fc4c <kalmanCoreScalarUpdate+0x304>)
 800fbc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fbc6:	f7f0 ff59 	bl	8000a7c <__aeabi_dcmpgt>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d041      	beq.n	800fc54 <kalmanCoreScalarUpdate+0x30c>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800fbd0:	68f9      	ldr	r1, [r7, #12]
 800fbd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbd4:	4613      	mov	r3, r2
 800fbd6:	00db      	lsls	r3, r3, #3
 800fbd8:	4413      	add	r3, r2
 800fbda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbdc:	4413      	add	r3, r2
 800fbde:	3316      	adds	r3, #22
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	440b      	add	r3, r1
 800fbe4:	4a1a      	ldr	r2, [pc, #104]	@ (800fc50 <kalmanCoreScalarUpdate+0x308>)
 800fbe6:	601a      	str	r2, [r3, #0]
 800fbe8:	68f9      	ldr	r1, [r7, #12]
 800fbea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fbec:	4613      	mov	r3, r2
 800fbee:	00db      	lsls	r3, r3, #3
 800fbf0:	4413      	add	r3, r2
 800fbf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fbf4:	4413      	add	r3, r2
 800fbf6:	3316      	adds	r3, #22
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	440b      	add	r3, r1
 800fbfc:	6819      	ldr	r1, [r3, #0]
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc02:	4613      	mov	r3, r2
 800fc04:	00db      	lsls	r3, r3, #3
 800fc06:	4413      	add	r3, r2
 800fc08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc0a:	4413      	add	r3, r2
 800fc0c:	3316      	adds	r3, #22
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	4403      	add	r3, r0
 800fc12:	6019      	str	r1, [r3, #0]
 800fc14:	e074      	b.n	800fd00 <kalmanCoreScalarUpdate+0x3b8>
 800fc16:	bf00      	nop
 800fc18:	0801c08c 	.word	0x0801c08c
 800fc1c:	0801c0b8 	.word	0x0801c0b8
 800fc20:	0801c0cc 	.word	0x0801c0cc
 800fc24:	20000078 	.word	0x20000078
 800fc28:	20000080 	.word	0x20000080
 800fc2c:	10003f10 	.word	0x10003f10
 800fc30:	0801c0e8 	.word	0x0801c0e8
 800fc34:	10003afc 	.word	0x10003afc
 800fc38:	20000090 	.word	0x20000090
 800fc3c:	20000088 	.word	0x20000088
 800fc40:	10003b20 	.word	0x10003b20
 800fc44:	20000098 	.word	0x20000098
 800fc48:	200000a0 	.word	0x200000a0
 800fc4c:	40590000 	.word	0x40590000
 800fc50:	42c80000 	.word	0x42c80000
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800fc54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc58:	429a      	cmp	r2, r3
 800fc5a:	d12c      	bne.n	800fcb6 <kalmanCoreScalarUpdate+0x36e>
 800fc5c:	a337      	add	r3, pc, #220	@ (adr r3, 800fd3c <kalmanCoreScalarUpdate+0x3f4>)
 800fc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fc66:	f7f0 feeb 	bl	8000a40 <__aeabi_dcmplt>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d022      	beq.n	800fcb6 <kalmanCoreScalarUpdate+0x36e>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800fc70:	68f9      	ldr	r1, [r7, #12]
 800fc72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc74:	4613      	mov	r3, r2
 800fc76:	00db      	lsls	r3, r3, #3
 800fc78:	4413      	add	r3, r2
 800fc7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3316      	adds	r3, #22
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	440b      	add	r3, r1
 800fc84:	4a2c      	ldr	r2, [pc, #176]	@ (800fd38 <kalmanCoreScalarUpdate+0x3f0>)
 800fc86:	601a      	str	r2, [r3, #0]
 800fc88:	68f9      	ldr	r1, [r7, #12]
 800fc8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fc8c:	4613      	mov	r3, r2
 800fc8e:	00db      	lsls	r3, r3, #3
 800fc90:	4413      	add	r3, r2
 800fc92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fc94:	4413      	add	r3, r2
 800fc96:	3316      	adds	r3, #22
 800fc98:	009b      	lsls	r3, r3, #2
 800fc9a:	440b      	add	r3, r1
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fca2:	4613      	mov	r3, r2
 800fca4:	00db      	lsls	r3, r3, #3
 800fca6:	4413      	add	r3, r2
 800fca8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcaa:	4413      	add	r3, r2
 800fcac:	3316      	adds	r3, #22
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4403      	add	r3, r0
 800fcb2:	6019      	str	r1, [r3, #0]
 800fcb4:	e024      	b.n	800fd00 <kalmanCoreScalarUpdate+0x3b8>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800fcb6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800fcba:	f7f0 feff 	bl	8000abc <__aeabi_d2f>
 800fcbe:	68f9      	ldr	r1, [r7, #12]
 800fcc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	00db      	lsls	r3, r3, #3
 800fcc6:	4413      	add	r3, r2
 800fcc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcca:	4413      	add	r3, r2
 800fccc:	3316      	adds	r3, #22
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	440b      	add	r3, r1
 800fcd2:	6018      	str	r0, [r3, #0]
 800fcd4:	68f9      	ldr	r1, [r7, #12]
 800fcd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcd8:	4613      	mov	r3, r2
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	4413      	add	r3, r2
 800fcde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fce0:	4413      	add	r3, r2
 800fce2:	3316      	adds	r3, #22
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	440b      	add	r3, r1
 800fce8:	6819      	ldr	r1, [r3, #0]
 800fcea:	68f8      	ldr	r0, [r7, #12]
 800fcec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcee:	4613      	mov	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	4413      	add	r3, r2
 800fcf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcf6:	4413      	add	r3, r2
 800fcf8:	3316      	adds	r3, #22
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	4403      	add	r3, r0
 800fcfe:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800fd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd02:	3301      	adds	r3, #1
 800fd04:	627b      	str	r3, [r7, #36]	@ 0x24
 800fd06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd08:	2b08      	cmp	r3, #8
 800fd0a:	f77f af04 	ble.w	800fb16 <kalmanCoreScalarUpdate+0x1ce>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800fd0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd10:	3301      	adds	r3, #1
 800fd12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd16:	2b08      	cmp	r3, #8
 800fd18:	f77f aefa 	ble.w	800fb10 <kalmanCoreScalarUpdate+0x1c8>
      }
    }
  }

  assertStateNotNaN(this);
 800fd1c:	68f8      	ldr	r0, [r7, #12]
 800fd1e:	f7ff fc79 	bl	800f614 <assertStateNotNaN>

  this->isUpdated = true;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2201      	movs	r2, #1
 800fd26:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800fd2a:	bf00      	nop
 800fd2c:	3740      	adds	r7, #64	@ 0x40
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	bd80      	pop	{r7, pc}
 800fd32:	bf00      	nop
 800fd34:	f3af 8000 	nop.w
 800fd38:	358637bd 	.word	0x358637bd
 800fd3c:	a0000000 	.word	0xa0000000
 800fd40:	3eb0c6f7 	.word	0x3eb0c6f7
 800fd44:	00000000 	.word	0x00000000

0800fd48 <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 800fd48:	b590      	push	{r4, r7, lr}
 800fd4a:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 800fd4e:	af00      	add	r7, sp, #0
 800fd50:	f507 7430 	add.w	r4, r7, #704	@ 0x2c0
 800fd54:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 800fd58:	6020      	str	r0, [r4, #0]
 800fd5a:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800fd5e:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 800fd62:	6001      	str	r1, [r0, #0]
 800fd64:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 800fd68:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 800fd6c:	600a      	str	r2, [r1, #0]
 800fd6e:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 800fd72:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800fd76:	6013      	str	r3, [r2, #0]
 800fd78:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fd7c:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800fd80:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static double tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 800fd84:	2300      	movs	r3, #0
 800fd86:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800fd8a:	e030      	b.n	800fdee <kalmanCoreUpdateWithPKE+0xa6>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 800fd8c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fd90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800fd94:	681a      	ldr	r2, [r3, #0]
 800fd96:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	4413      	add	r3, r2
 800fd9e:	ed93 7a00 	vldr	s14, [r3]
 800fda2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fda6:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	685a      	ldr	r2, [r3, #4]
 800fdae:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800fdb2:	009b      	lsls	r3, r3, #2
 800fdb4:	4413      	add	r3, r2
 800fdb6:	edd3 6a00 	vldr	s13, [r3]
 800fdba:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fdbe:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800fdc2:	edd3 7a00 	vldr	s15, [r3]
 800fdc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fdca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fdce:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fdd2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800fdd6:	681a      	ldr	r2, [r3, #0]
 800fdd8:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800fddc:	009b      	lsls	r3, r3, #2
 800fdde:	4413      	add	r3, r2
 800fde0:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 800fde4:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800fde8:	3301      	adds	r3, #1
 800fdea:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800fdee:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800fdf2:	2b08      	cmp	r3, #8
 800fdf4:	ddca      	ble.n	800fd8c <kalmanCoreUpdateWithPKE+0x44>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 800fdf6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fdfa:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 800fdfe:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fe02:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800fe06:	4ad0      	ldr	r2, [pc, #832]	@ (8010148 <kalmanCoreUpdateWithPKE+0x400>)
 800fe08:	6809      	ldr	r1, [r1, #0]
 800fe0a:	6818      	ldr	r0, [r3, #0]
 800fe0c:	f7ff fb7e 	bl	800f50c <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 800fe10:	49cd      	ldr	r1, [pc, #820]	@ (8010148 <kalmanCoreUpdateWithPKE+0x400>)
 800fe12:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800fe16:	48cc      	ldr	r0, [pc, #816]	@ (8010148 <kalmanCoreUpdateWithPKE+0x400>)
 800fe18:	f7ff fbdc 	bl	800f5d4 <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800fe22:	e021      	b.n	800fe68 <kalmanCoreUpdateWithPKE+0x120>
 800fe24:	49c9      	ldr	r1, [pc, #804]	@ (801014c <kalmanCoreUpdateWithPKE+0x404>)
 800fe26:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800fe2a:	4613      	mov	r3, r2
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	011b      	lsls	r3, r3, #4
 800fe32:	440b      	add	r3, r1
 800fe34:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fe38:	f04f 0200 	mov.w	r2, #0
 800fe3c:	4bc4      	ldr	r3, [pc, #784]	@ (8010150 <kalmanCoreUpdateWithPKE+0x408>)
 800fe3e:	f7f0 f9d7 	bl	80001f0 <__adddf3>
 800fe42:	4602      	mov	r2, r0
 800fe44:	460b      	mov	r3, r1
 800fe46:	4610      	mov	r0, r2
 800fe48:	4619      	mov	r1, r3
 800fe4a:	4cc0      	ldr	r4, [pc, #768]	@ (801014c <kalmanCoreUpdateWithPKE+0x404>)
 800fe4c:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800fe50:	4613      	mov	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	011b      	lsls	r3, r3, #4
 800fe58:	4423      	add	r3, r4
 800fe5a:	e9c3 0100 	strd	r0, r1, [r3]
 800fe5e:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800fe62:	3301      	adds	r3, #1
 800fe64:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800fe68:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800fe6c:	2b08      	cmp	r3, #8
 800fe6e:	ddd9      	ble.n	800fe24 <kalmanCoreUpdateWithPKE+0xdc>
    double Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 800fe70:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fe74:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f44f 7322 	mov.w	r3, #648	@ 0x288
 800fe7e:	461a      	mov	r2, r3
 800fe80:	2100      	movs	r1, #0
 800fe82:	f009 fa03 	bl	801928c <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 800fe86:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fe8a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800fe8e:	2209      	movs	r2, #9
 800fe90:	801a      	strh	r2, [r3, #0]
 800fe92:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fe96:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800fe9a:	2209      	movs	r2, #9
 800fe9c:	805a      	strh	r2, [r3, #2]
 800fe9e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fea2:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800fea6:	f107 0220 	add.w	r2, r7, #32
 800feaa:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 800feac:	f107 0218 	add.w	r2, r7, #24
 800feb0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800feb4:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800feb8:	6819      	ldr	r1, [r3, #0]
 800feba:	48a3      	ldr	r0, [pc, #652]	@ (8010148 <kalmanCoreUpdateWithPKE+0x400>)
 800febc:	f7ff fb26 	bl	800f50c <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 800fec0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fec4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	3358      	adds	r3, #88	@ 0x58
 800fecc:	f107 0120 	add.w	r1, r7, #32
 800fed0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800fed4:	4618      	mov	r0, r3
 800fed6:	f009 fa1f 	bl	8019318 <memcpy>

    assertStateNotNaN(this);
 800feda:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fede:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	f7ff fb96 	bl	800f614 <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 800fee8:	2300      	movs	r3, #0
 800feea:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800feee:	e10d      	b.n	801010c <kalmanCoreUpdateWithPKE+0x3c4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 800fef0:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800fef4:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800fef8:	e0fe      	b.n	80100f8 <kalmanCoreUpdateWithPKE+0x3b0>
        double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800fefa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800fefe:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ff02:	6819      	ldr	r1, [r3, #0]
 800ff04:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800ff08:	4613      	mov	r3, r2
 800ff0a:	00db      	lsls	r3, r3, #3
 800ff0c:	4413      	add	r3, r2
 800ff0e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800ff12:	4413      	add	r3, r2
 800ff14:	3316      	adds	r3, #22
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	440b      	add	r3, r1
 800ff1a:	edd3 7a00 	vldr	s15, [r3]
 800ff1e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ff22:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ff26:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ff2a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ff2e:	6819      	ldr	r1, [r3, #0]
 800ff30:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800ff34:	4613      	mov	r3, r2
 800ff36:	00db      	lsls	r3, r3, #3
 800ff38:	4413      	add	r3, r2
 800ff3a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800ff3e:	4413      	add	r3, r2
 800ff40:	3316      	adds	r3, #22
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	440b      	add	r3, r1
 800ff46:	edd3 7a00 	vldr	s15, [r3]
 800ff4a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800ff4e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ff52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff56:	ee17 0a90 	vmov	r0, s15
 800ff5a:	f7f0 faa7 	bl	80004ac <__aeabi_f2d>
 800ff5e:	4602      	mov	r2, r0
 800ff60:	460b      	mov	r3, r1
 800ff62:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
        if (isnan(p) || p > MAX_COVARIANCE) {
 800ff66:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800ff6a:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800ff6e:	f7f0 fd8f 	bl	8000a90 <__aeabi_dcmpun>
 800ff72:	4603      	mov	r3, r0
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d109      	bne.n	800ff8c <kalmanCoreUpdateWithPKE+0x244>
 800ff78:	f04f 0200 	mov.w	r2, #0
 800ff7c:	4b75      	ldr	r3, [pc, #468]	@ (8010154 <kalmanCoreUpdateWithPKE+0x40c>)
 800ff7e:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800ff82:	f7f0 fd7b 	bl	8000a7c <__aeabi_dcmpgt>
 800ff86:	4603      	mov	r3, r0
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d034      	beq.n	800fff6 <kalmanCoreUpdateWithPKE+0x2ae>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800ff8c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ff90:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ff94:	6819      	ldr	r1, [r3, #0]
 800ff96:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	00db      	lsls	r3, r3, #3
 800ff9e:	4413      	add	r3, r2
 800ffa0:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800ffa4:	4413      	add	r3, r2
 800ffa6:	3316      	adds	r3, #22
 800ffa8:	009b      	lsls	r3, r3, #2
 800ffaa:	440b      	add	r3, r1
 800ffac:	4a6a      	ldr	r2, [pc, #424]	@ (8010158 <kalmanCoreUpdateWithPKE+0x410>)
 800ffae:	601a      	str	r2, [r3, #0]
 800ffb0:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ffb4:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ffb8:	6819      	ldr	r1, [r3, #0]
 800ffba:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800ffbe:	4613      	mov	r3, r2
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	4413      	add	r3, r2
 800ffc4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800ffc8:	4413      	add	r3, r2
 800ffca:	3316      	adds	r3, #22
 800ffcc:	009b      	lsls	r3, r3, #2
 800ffce:	440b      	add	r3, r1
 800ffd0:	6819      	ldr	r1, [r3, #0]
 800ffd2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ffd6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ffda:	6818      	ldr	r0, [r3, #0]
 800ffdc:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800ffe0:	4613      	mov	r3, r2
 800ffe2:	00db      	lsls	r3, r3, #3
 800ffe4:	4413      	add	r3, r2
 800ffe6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800ffea:	4413      	add	r3, r2
 800ffec:	3316      	adds	r3, #22
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	4403      	add	r3, r0
 800fff2:	6019      	str	r1, [r3, #0]
 800fff4:	e07b      	b.n	80100ee <kalmanCoreUpdateWithPKE+0x3a6>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 800fff6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800fffa:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800fffe:	429a      	cmp	r2, r3
 8010000:	d13e      	bne.n	8010080 <kalmanCoreUpdateWithPKE+0x338>
 8010002:	a34f      	add	r3, pc, #316	@ (adr r3, 8010140 <kalmanCoreUpdateWithPKE+0x3f8>)
 8010004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010008:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 801000c:	f7f0 fd18 	bl	8000a40 <__aeabi_dcmplt>
 8010010:	4603      	mov	r3, r0
 8010012:	2b00      	cmp	r3, #0
 8010014:	d034      	beq.n	8010080 <kalmanCoreUpdateWithPKE+0x338>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8010016:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 801001a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 801001e:	6819      	ldr	r1, [r3, #0]
 8010020:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8010024:	4613      	mov	r3, r2
 8010026:	00db      	lsls	r3, r3, #3
 8010028:	4413      	add	r3, r2
 801002a:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 801002e:	4413      	add	r3, r2
 8010030:	3316      	adds	r3, #22
 8010032:	009b      	lsls	r3, r3, #2
 8010034:	440b      	add	r3, r1
 8010036:	4a49      	ldr	r2, [pc, #292]	@ (801015c <kalmanCoreUpdateWithPKE+0x414>)
 8010038:	601a      	str	r2, [r3, #0]
 801003a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 801003e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8010042:	6819      	ldr	r1, [r3, #0]
 8010044:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8010048:	4613      	mov	r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	4413      	add	r3, r2
 801004e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8010052:	4413      	add	r3, r2
 8010054:	3316      	adds	r3, #22
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	440b      	add	r3, r1
 801005a:	6819      	ldr	r1, [r3, #0]
 801005c:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8010060:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8010064:	6818      	ldr	r0, [r3, #0]
 8010066:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 801006a:	4613      	mov	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	4413      	add	r3, r2
 8010070:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8010074:	4413      	add	r3, r2
 8010076:	3316      	adds	r3, #22
 8010078:	009b      	lsls	r3, r3, #2
 801007a:	4403      	add	r3, r0
 801007c:	6019      	str	r1, [r3, #0]
 801007e:	e036      	b.n	80100ee <kalmanCoreUpdateWithPKE+0x3a6>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 8010080:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8010084:	f7f0 fd1a 	bl	8000abc <__aeabi_d2f>
 8010088:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 801008c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8010090:	6819      	ldr	r1, [r3, #0]
 8010092:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8010096:	4613      	mov	r3, r2
 8010098:	00db      	lsls	r3, r3, #3
 801009a:	4413      	add	r3, r2
 801009c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80100a0:	4413      	add	r3, r2
 80100a2:	3316      	adds	r3, #22
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	440b      	add	r3, r1
 80100a8:	6018      	str	r0, [r3, #0]
 80100aa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80100ae:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80100b2:	6819      	ldr	r1, [r3, #0]
 80100b4:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 80100b8:	4613      	mov	r3, r2
 80100ba:	00db      	lsls	r3, r3, #3
 80100bc:	4413      	add	r3, r2
 80100be:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80100c2:	4413      	add	r3, r2
 80100c4:	3316      	adds	r3, #22
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	440b      	add	r3, r1
 80100ca:	6819      	ldr	r1, [r3, #0]
 80100cc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 80100d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 80100d4:	6818      	ldr	r0, [r3, #0]
 80100d6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 80100da:	4613      	mov	r3, r2
 80100dc:	00db      	lsls	r3, r3, #3
 80100de:	4413      	add	r3, r2
 80100e0:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 80100e4:	4413      	add	r3, r2
 80100e6:	3316      	adds	r3, #22
 80100e8:	009b      	lsls	r3, r3, #2
 80100ea:	4403      	add	r3, r0
 80100ec:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 80100ee:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80100f2:	3301      	adds	r3, #1
 80100f4:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 80100f8:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 80100fc:	2b08      	cmp	r3, #8
 80100fe:	f77f aefc 	ble.w	800fefa <kalmanCoreUpdateWithPKE+0x1b2>
    for (int i=0; i<KC_STATE_DIM; i++) {
 8010102:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8010106:	3301      	adds	r3, #1
 8010108:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 801010c:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8010110:	2b08      	cmp	r3, #8
 8010112:	f77f aeed 	ble.w	800fef0 <kalmanCoreUpdateWithPKE+0x1a8>
            }
        }
    }
    assertStateNotNaN(this);
 8010116:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 801011a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 801011e:	6818      	ldr	r0, [r3, #0]
 8010120:	f7ff fa78 	bl	800f614 <assertStateNotNaN>

    this->isUpdated = true;
 8010124:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8010128:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	2201      	movs	r2, #1
 8010130:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8010134:	bf00      	nop
 8010136:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 801013a:	46bd      	mov	sp, r7
 801013c:	bd90      	pop	{r4, r7, pc}
 801013e:	bf00      	nop
 8010140:	a0000000 	.word	0xa0000000
 8010144:	3eb0c6f7 	.word	0x3eb0c6f7
 8010148:	200000a8 	.word	0x200000a8
 801014c:	20009908 	.word	0x20009908
 8010150:	3ff00000 	.word	0x3ff00000
 8010154:	40590000 	.word	0x40590000
 8010158:	42c80000 	.word	0x42c80000
 801015c:	358637bd 	.word	0x358637bd

08010160 <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b090      	sub	sp, #64	@ 0x40
 8010164:	af00      	add	r7, sp, #0
 8010166:	60f8      	str	r0, [r7, #12]
 8010168:	60b9      	str	r1, [r7, #8]
 801016a:	ed87 0a01 	vstr	s0, [r7, #4]
 801016e:	4613      	mov	r3, r2
 8010170:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 8010172:	f107 0318 	add.w	r3, r7, #24
 8010176:	2224      	movs	r2, #36	@ 0x24
 8010178:	2100      	movs	r1, #0
 801017a:	4618      	mov	r0, r3
 801017c:	f009 f886 	bl	801928c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8010180:	2301      	movs	r3, #1
 8010182:	823b      	strh	r3, [r7, #16]
 8010184:	2309      	movs	r3, #9
 8010186:	827b      	strh	r3, [r7, #18]
 8010188:	f107 0318 	add.w	r3, r7, #24
 801018c:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 801018e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010192:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 8010194:	78fb      	ldrb	r3, [r7, #3]
 8010196:	f083 0301 	eor.w	r3, r3, #1
 801019a:	b2db      	uxtb	r3, r3
 801019c:	2b00      	cmp	r3, #0
 801019e:	d109      	bne.n	80101b4 <kalmanCoreUpdateWithBaro+0x54>
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 80101a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80101ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101b2:	d503      	bpl.n	80101bc <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  }

  float meas = (baroAsl - this->baroReferenceHeight);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 80101c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80101c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101ca:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80101d4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80101d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80101e2:	f107 0310 	add.w	r3, r7, #16
 80101e6:	eef0 0a47 	vmov.f32	s1, s14
 80101ea:	eeb0 0a67 	vmov.f32	s0, s15
 80101ee:	4619      	mov	r1, r3
 80101f0:	68f8      	ldr	r0, [r7, #12]
 80101f2:	f7ff fba9 	bl	800f948 <kalmanCoreScalarUpdate>
}
 80101f6:	bf00      	nop
 80101f8:	3740      	adds	r7, #64	@ 0x40
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b0a2      	sub	sp, #136	@ 0x88
 8010204:	af00      	add	r7, sp, #0
 8010206:	6178      	str	r0, [r7, #20]
 8010208:	6139      	str	r1, [r7, #16]
 801020a:	60fa      	str	r2, [r7, #12]
 801020c:	ed87 0a02 	vstr	s0, [r7, #8]
 8010210:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 8010212:	edd7 7a02 	vldr	s15, [r7, #8]
 8010216:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801021a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 801021e:	4bd2      	ldr	r3, [pc, #840]	@ (8010568 <predictDt+0x368>)
 8010220:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010224:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 8010226:	4bd0      	ldr	r3, [pc, #832]	@ (8010568 <predictDt+0x368>)
 8010228:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801022c:	629a      	str	r2, [r3, #40]	@ 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 801022e:	4bce      	ldr	r3, [pc, #824]	@ (8010568 <predictDt+0x368>)
 8010230:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010234:	651a      	str	r2, [r3, #80]	@ 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 8010236:	4bcc      	ldr	r3, [pc, #816]	@ (8010568 <predictDt+0x368>)
 8010238:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801023c:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 801023e:	4bca      	ldr	r3, [pc, #808]	@ (8010568 <predictDt+0x368>)
 8010240:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010244:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 8010248:	4bc7      	ldr	r3, [pc, #796]	@ (8010568 <predictDt+0x368>)
 801024a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801024e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 8010252:	4bc5      	ldr	r3, [pc, #788]	@ (8010568 <predictDt+0x368>)
 8010254:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010258:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 801025c:	4bc2      	ldr	r3, [pc, #776]	@ (8010568 <predictDt+0x368>)
 801025e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010262:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 8010266:	4bc0      	ldr	r3, [pc, #768]	@ (8010568 <predictDt+0x368>)
 8010268:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801026c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 8010270:	697b      	ldr	r3, [r7, #20]
 8010272:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8010276:	edd7 7a02 	vldr	s15, [r7, #8]
 801027a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801027e:	4bba      	ldr	r3, [pc, #744]	@ (8010568 <predictDt+0x368>)
 8010280:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 8010284:	697b      	ldr	r3, [r7, #20]
 8010286:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 801028a:	edd7 7a02 	vldr	s15, [r7, #8]
 801028e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010292:	4bb5      	ldr	r3, [pc, #724]	@ (8010568 <predictDt+0x368>)
 8010294:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 801029e:	edd7 7a02 	vldr	s15, [r7, #8]
 80102a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102a6:	4bb0      	ldr	r3, [pc, #704]	@ (8010568 <predictDt+0x368>)
 80102a8:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80102b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80102b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102ba:	4bab      	ldr	r3, [pc, #684]	@ (8010568 <predictDt+0x368>)
 80102bc:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 80102c0:	697b      	ldr	r3, [r7, #20]
 80102c2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80102c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80102ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102ce:	4ba6      	ldr	r3, [pc, #664]	@ (8010568 <predictDt+0x368>)
 80102d0:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 80102d4:	697b      	ldr	r3, [r7, #20]
 80102d6:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 80102da:	edd7 7a02 	vldr	s15, [r7, #8]
 80102de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102e2:	4ba1      	ldr	r3, [pc, #644]	@ (8010568 <predictDt+0x368>)
 80102e4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80102ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80102f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80102f6:	4b9c      	ldr	r3, [pc, #624]	@ (8010568 <predictDt+0x368>)
 80102f8:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 8010302:	edd7 7a02 	vldr	s15, [r7, #8]
 8010306:	ee67 7a27 	vmul.f32	s15, s14, s15
 801030a:	4b97      	ldr	r3, [pc, #604]	@ (8010568 <predictDt+0x368>)
 801030c:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 8010316:	edd7 7a02 	vldr	s15, [r7, #8]
 801031a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801031e:	4b92      	ldr	r3, [pc, #584]	@ (8010568 <predictDt+0x368>)
 8010320:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	ed93 7a04 	vldr	s14, [r3, #16]
 801032a:	697b      	ldr	r3, [r7, #20]
 801032c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8010330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	edd3 6a05 	vldr	s13, [r3, #20]
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8010340:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010348:	edd7 7a02 	vldr	s15, [r7, #8]
 801034c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010350:	4b85      	ldr	r3, [pc, #532]	@ (8010568 <predictDt+0x368>)
 8010352:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 8010356:	697b      	ldr	r3, [r7, #20]
 8010358:	ed93 7a04 	vldr	s14, [r3, #16]
 801035c:	697b      	ldr	r3, [r7, #20]
 801035e:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8010362:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	edd3 6a05 	vldr	s13, [r3, #20]
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8010372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010376:	ee37 7a67 	vsub.f32	s14, s14, s15
 801037a:	edd7 7a02 	vldr	s15, [r7, #8]
 801037e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010382:	4b79      	ldr	r3, [pc, #484]	@ (8010568 <predictDt+0x368>)
 8010384:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	ed93 7a04 	vldr	s14, [r3, #16]
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010394:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	edd3 6a05 	vldr	s13, [r3, #20]
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80103a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80103b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103b4:	4b6c      	ldr	r3, [pc, #432]	@ (8010568 <predictDt+0x368>)
 80103b6:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80103c0:	eeb1 7a67 	vneg.f32	s14, s15
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80103ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	edd3 6a05 	vldr	s13, [r3, #20]
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 80103da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80103e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80103e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103ea:	4b5f      	ldr	r3, [pc, #380]	@ (8010568 <predictDt+0x368>)
 80103ec:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80103f6:	eeb1 7a67 	vneg.f32	s14, s15
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8010400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	edd3 6a05 	vldr	s13, [r3, #20]
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8010410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010418:	edd7 7a02 	vldr	s15, [r7, #8]
 801041c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010420:	4b51      	ldr	r3, [pc, #324]	@ (8010568 <predictDt+0x368>)
 8010422:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	edd3 7a03 	vldr	s15, [r3, #12]
 801042c:	eeb1 7a67 	vneg.f32	s14, s15
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010436:	ee27 7a27 	vmul.f32	s14, s14, s15
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	edd3 6a05 	vldr	s13, [r3, #20]
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801044a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801044e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010456:	4b44      	ldr	r3, [pc, #272]	@ (8010568 <predictDt+0x368>)
 8010458:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	ed93 7a03 	vldr	s14, [r3, #12]
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8010468:	ee27 7a27 	vmul.f32	s14, s14, s15
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	edd3 6a04 	vldr	s13, [r3, #16]
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8010478:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801047c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010480:	edd7 7a02 	vldr	s15, [r7, #8]
 8010484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010488:	4b37      	ldr	r3, [pc, #220]	@ (8010568 <predictDt+0x368>)
 801048a:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 801048e:	697b      	ldr	r3, [r7, #20]
 8010490:	ed93 7a03 	vldr	s14, [r3, #12]
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 801049a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801049e:	697b      	ldr	r3, [r7, #20]
 80104a0:	edd3 6a04 	vldr	s13, [r3, #16]
 80104a4:	697b      	ldr	r3, [r7, #20]
 80104a6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80104aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80104b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104ba:	4b2b      	ldr	r3, [pc, #172]	@ (8010568 <predictDt+0x368>)
 80104bc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80104cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	edd3 6a04 	vldr	s13, [r3, #16]
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80104dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80104e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104ec:	4b1e      	ldr	r3, [pc, #120]	@ (8010568 <predictDt+0x368>)
 80104ee:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 80104f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010568 <predictDt+0x368>)
 80104f4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80104f8:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8010500:	eeb1 7a67 	vneg.f32	s14, s15
 8010504:	edd7 7a02 	vldr	s15, [r7, #8]
 8010508:	ee67 7a27 	vmul.f32	s15, s14, s15
 801050c:	4b16      	ldr	r3, [pc, #88]	@ (8010568 <predictDt+0x368>)
 801050e:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	ed93 7a01 	vldr	s14, [r3, #4]
 8010518:	edd7 7a02 	vldr	s15, [r7, #8]
 801051c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010520:	4b11      	ldr	r3, [pc, #68]	@ (8010568 <predictDt+0x368>)
 8010522:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	ed93 7a02 	vldr	s14, [r3, #8]
 801052c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010534:	4b0c      	ldr	r3, [pc, #48]	@ (8010568 <predictDt+0x368>)
 8010536:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 801053a:	4b0b      	ldr	r3, [pc, #44]	@ (8010568 <predictDt+0x368>)
 801053c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010540:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	edd3 7a00 	vldr	s15, [r3]
 801054a:	eeb1 7a67 	vneg.f32	s14, s15
 801054e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010556:	4b04      	ldr	r3, [pc, #16]	@ (8010568 <predictDt+0x368>)
 8010558:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010562:	eeb1 7a67 	vneg.f32	s14, s15
 8010566:	e001      	b.n	801056c <predictDt+0x36c>
 8010568:	10003f34 	.word	0x10003f34
 801056c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010574:	4bb2      	ldr	r3, [pc, #712]	@ (8010840 <predictDt+0x640>)
 8010576:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	ed93 7a00 	vldr	s14, [r3]
 8010580:	edd7 7a02 	vldr	s15, [r7, #8]
 8010584:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010588:	4bad      	ldr	r3, [pc, #692]	@ (8010840 <predictDt+0x640>)
 801058a:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 801058e:	4bac      	ldr	r3, [pc, #688]	@ (8010840 <predictDt+0x640>)
 8010590:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010594:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 8010598:	4ba9      	ldr	r3, [pc, #676]	@ (8010840 <predictDt+0x640>)
 801059a:	f04f 0200 	mov.w	r2, #0
 801059e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80105a8:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8010844 <predictDt+0x644>
 80105ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80105b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105b8:	4ba1      	ldr	r3, [pc, #644]	@ (8010840 <predictDt+0x640>)
 80105ba:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80105c4:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8010854 <predictDt+0x654>
 80105c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80105d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105d4:	4b9a      	ldr	r3, [pc, #616]	@ (8010840 <predictDt+0x640>)
 80105d6:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 80105da:	697b      	ldr	r3, [r7, #20]
 80105dc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80105e0:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8010854 <predictDt+0x654>
 80105e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80105e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80105ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80105f0:	4b93      	ldr	r3, [pc, #588]	@ (8010840 <predictDt+0x640>)
 80105f2:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 80105f6:	4b92      	ldr	r3, [pc, #584]	@ (8010840 <predictDt+0x640>)
 80105f8:	f04f 0200 	mov.w	r2, #0
 80105fc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010606:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8010844 <predictDt+0x644>
 801060a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801060e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010616:	4b8a      	ldr	r3, [pc, #552]	@ (8010840 <predictDt+0x640>)
 8010618:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8010622:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8010844 <predictDt+0x644>
 8010626:	ee27 7a87 	vmul.f32	s14, s15, s14
 801062a:	edd7 7a02 	vldr	s15, [r7, #8]
 801062e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010632:	4b83      	ldr	r3, [pc, #524]	@ (8010840 <predictDt+0x640>)
 8010634:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801063e:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8010854 <predictDt+0x654>
 8010642:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010646:	edd7 7a02 	vldr	s15, [r7, #8]
 801064a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801064e:	4b7c      	ldr	r3, [pc, #496]	@ (8010840 <predictDt+0x640>)
 8010650:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 8010654:	4b7a      	ldr	r3, [pc, #488]	@ (8010840 <predictDt+0x640>)
 8010656:	f04f 0200 	mov.w	r2, #0
 801065a:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	ed93 7a00 	vldr	s14, [r3]
 8010664:	edd7 7a02 	vldr	s15, [r7, #8]
 8010668:	ee27 7a27 	vmul.f32	s14, s14, s15
 801066c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010670:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010674:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float d1 = gyro->y*dt/2;
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	ed93 7a01 	vldr	s14, [r3, #4]
 801067e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010682:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010686:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801068a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801068e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float d2 = gyro->z*dt/2;
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	ed93 7a02 	vldr	s14, [r3, #8]
 8010698:	edd7 7a02 	vldr	s15, [r7, #8]
 801069c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106a0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80106a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80106a8:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 80106ac:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80106b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80106b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80106b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80106bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80106c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106c4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80106c8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80106cc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80106d0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80106d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106d8:	4b59      	ldr	r3, [pc, #356]	@ (8010840 <predictDt+0x640>)
 80106da:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 80106de:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80106e2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80106e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80106ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80106ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80106f2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80106f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106fa:	4b51      	ldr	r3, [pc, #324]	@ (8010840 <predictDt+0x640>)
 80106fc:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 8010700:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8010704:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8010708:	ee67 7a27 	vmul.f32	s15, s14, s15
 801070c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010710:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010714:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8010718:	ee77 7a67 	vsub.f32	s15, s14, s15
 801071c:	4b48      	ldr	r3, [pc, #288]	@ (8010840 <predictDt+0x640>)
 801071e:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 8010722:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8010726:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801072a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801072e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010732:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010736:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801073a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801073e:	4b40      	ldr	r3, [pc, #256]	@ (8010840 <predictDt+0x640>)
 8010740:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 8010744:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8010748:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801074c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010758:	ee37 7a67 	vsub.f32	s14, s14, s15
 801075c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8010760:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010764:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010768:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801076c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010770:	4b33      	ldr	r3, [pc, #204]	@ (8010840 <predictDt+0x640>)
 8010772:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 8010776:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 801077a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801077e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010782:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010786:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801078a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801078e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010792:	4b2b      	ldr	r3, [pc, #172]	@ (8010840 <predictDt+0x640>)
 8010794:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 8010798:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 801079c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80107a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80107a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80107ac:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80107b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107b4:	4b22      	ldr	r3, [pc, #136]	@ (8010840 <predictDt+0x640>)
 80107b6:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 80107ba:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 80107be:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80107c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80107c6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80107ca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80107ce:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80107d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80107d6:	4b1a      	ldr	r3, [pc, #104]	@ (8010840 <predictDt+0x640>)
 80107d8:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 80107dc:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80107e0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80107e4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80107e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80107ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80107f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107f4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80107f8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80107fc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010800:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010808:	4b0d      	ldr	r3, [pc, #52]	@ (8010840 <predictDt+0x640>)
 801080a:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8010814:	4a0c      	ldr	r2, [pc, #48]	@ (8010848 <predictDt+0x648>)
 8010816:	4619      	mov	r1, r3
 8010818:	480c      	ldr	r0, [pc, #48]	@ (801084c <predictDt+0x64c>)
 801081a:	f7fe fe77 	bl	800f50c <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 801081e:	490c      	ldr	r1, [pc, #48]	@ (8010850 <predictDt+0x650>)
 8010820:	480a      	ldr	r0, [pc, #40]	@ (801084c <predictDt+0x64c>)
 8010822:	f7fe fe51 	bl	800f4c8 <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801082c:	461a      	mov	r2, r3
 801082e:	4908      	ldr	r1, [pc, #32]	@ (8010850 <predictDt+0x650>)
 8010830:	4805      	ldr	r0, [pc, #20]	@ (8010848 <predictDt+0x648>)
 8010832:	f7fe fe6b 	bl	800f50c <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 8010836:	79fb      	ldrb	r3, [r7, #7]
 8010838:	2b00      	cmp	r3, #0
 801083a:	f000 8125 	beq.w	8010a88 <predictDt+0x888>
 801083e:	e00b      	b.n	8010858 <predictDt+0x658>
 8010840:	10003f34 	.word	0x10003f34
 8010844:	c11cf5c3 	.word	0xc11cf5c3
 8010848:	200000b8 	.word	0x200000b8
 801084c:	200000b0 	.word	0x200000b0
 8010850:	200000c0 	.word	0x200000c0
 8010854:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	689b      	ldr	r3, [r3, #8]
 801085c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	edd3 7a03 	vldr	s15, [r3, #12]
 8010864:	ed97 7a02 	vldr	s14, [r7, #8]
 8010868:	ee67 7a27 	vmul.f32	s15, s14, s15
 801086c:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt;
 8010870:	697b      	ldr	r3, [r7, #20]
 8010872:	edd3 7a04 	vldr	s15, [r3, #16]
 8010876:	ed97 7a02 	vldr	s14, [r7, #8]
 801087a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801087e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	ed93 7a05 	vldr	s14, [r3, #20]
 8010888:	edd7 7a02 	vldr	s15, [r7, #8]
 801088c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010890:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8010894:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010898:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801089c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80108a0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80108a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108a8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	ed93 7a00 	vldr	s14, [r3]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80108b8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80108bc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 80108c6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80108ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80108ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80108d2:	697b      	ldr	r3, [r7, #20]
 80108d4:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80108d8:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80108dc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80108e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80108e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80108fa:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80108fe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8010908:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 801090c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010910:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010914:	697b      	ldr	r3, [r7, #20]
 8010916:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 801091a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 801091e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010926:	ee77 7a27 	vadd.f32	s15, s14, s15
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	ed93 7a02 	vldr	s14, [r3, #8]
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 801093c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010944:	697b      	ldr	r3, [r7, #20]
 8010946:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 801094a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 801094e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 801095c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010960:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010964:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010968:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801096c:	ed1f 6a47 	vldr	s12, [pc, #-284]	@ 8010854 <predictDt+0x654>
 8010970:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010974:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8010978:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801097c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	691b      	ldr	r3, [r3, #16]
 8010994:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	695b      	ldr	r3, [r3, #20]
 801099a:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	ed93 7a03 	vldr	s14, [r3, #12]
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80109a8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80109ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	ed93 6a01 	vldr	s12, [r3, #4]
 80109b6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80109ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80109be:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80109c2:	697b      	ldr	r3, [r7, #20]
 80109c4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80109c8:	ed1f 6a5e 	vldr	s12, [pc, #-376]	@ 8010854 <predictDt+0x654>
 80109cc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80109d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80109d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80109d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80109dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109e0:	697b      	ldr	r3, [r7, #20]
 80109e2:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	ed93 7a04 	vldr	s14, [r3, #16]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80109f2:	eef1 6a67 	vneg.f32	s13, s15
 80109f6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80109fa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	ed93 6a00 	vldr	s12, [r3]
 8010a04:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8010a08:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010a0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8010a16:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 8010854 <predictDt+0x654>
 8010a1a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a1e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010a22:	edd7 7a02 	vldr	s15, [r7, #8]
 8010a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	ed93 7a05 	vldr	s14, [r3, #20]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	edd3 6a01 	vldr	s13, [r3, #4]
 8010a40:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8010a44:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010a48:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8010a4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	ed93 6a00 	vldr	s12, [r3]
 8010a56:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8010a5a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010a5e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010a62:	697b      	ldr	r3, [r7, #20]
 8010a64:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010a68:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 8010854 <predictDt+0x654>
 8010a6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010a74:	edd7 7a02 	vldr	s15, [r7, #8]
 8010a78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	edc3 7a05 	vstr	s15, [r3, #20]
 8010a86:	e137      	b.n	8010cf8 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	ed93 7a03 	vldr	s14, [r3, #12]
 8010a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010a92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a96:	693b      	ldr	r3, [r7, #16]
 8010a98:	edd3 6a00 	vldr	s13, [r3]
 8010a9c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010aa0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010aa4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010aa8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ab0:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	ed93 7a04 	vldr	s14, [r3, #16]
 8010aba:	edd7 7a02 	vldr	s15, [r7, #8]
 8010abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ac2:	693b      	ldr	r3, [r7, #16]
 8010ac4:	edd3 6a01 	vldr	s13, [r3, #4]
 8010ac8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010acc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010ad0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010ad4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010adc:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	ed93 7a05 	vldr	s14, [r3, #20]
 8010ae6:	edd7 7a02 	vldr	s15, [r7, #8]
 8010aea:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010aee:	693b      	ldr	r3, [r7, #16]
 8010af0:	edd3 6a02 	vldr	s13, [r3, #8]
 8010af4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010af8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010afc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010b00:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b08:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	ed93 7a00 	vldr	s14, [r3]
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8010b18:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010b1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010b20:	697b      	ldr	r3, [r7, #20]
 8010b22:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 8010b26:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010b2a:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010b2e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8010b38:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010b3c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 8010b4e:	697b      	ldr	r3, [r7, #20]
 8010b50:	ed93 7a01 	vldr	s14, [r3, #4]
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8010b5a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010b5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8010b68:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010b6c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010b70:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8010b7a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010b7e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b8a:	697b      	ldr	r3, [r7, #20]
 8010b8c:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8010b9c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010ba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010ba4:	697b      	ldr	r3, [r7, #20]
 8010ba6:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 8010baa:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010bae:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010bb2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8010bbc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010bc0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010bc4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010bc8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010bcc:	ed9f 6ae1 	vldr	s12, [pc, #900]	@ 8010f54 <predictDt+0xd54>
 8010bd0:	ee27 6a86 	vmul.f32	s12, s15, s12
 8010bd4:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8010bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010bdc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010be4:	697b      	ldr	r3, [r7, #20]
 8010be6:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	691b      	ldr	r3, [r3, #16]
 8010bf4:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	695b      	ldr	r3, [r3, #20]
 8010bfa:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	ed93 7a03 	vldr	s14, [r3, #12]
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	edd3 6a00 	vldr	s13, [r3]
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	ed93 6a02 	vldr	s12, [r3, #8]
 8010c0e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8010c12:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010c16:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	ed93 6a01 	vldr	s12, [r3, #4]
 8010c20:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8010c24:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010c28:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010c32:	ed9f 6ac8 	vldr	s12, [pc, #800]	@ 8010f54 <predictDt+0xd54>
 8010c36:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010c3a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8010c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	ed93 7a04 	vldr	s14, [r3, #16]
 8010c56:	693b      	ldr	r3, [r7, #16]
 8010c58:	edd3 6a01 	vldr	s13, [r3, #4]
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	ed93 6a02 	vldr	s12, [r3, #8]
 8010c62:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8010c66:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010c6a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	ed93 6a00 	vldr	s12, [r3]
 8010c74:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8010c78:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010c7c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8010c86:	ed9f 6ab3 	vldr	s12, [pc, #716]	@ 8010f54 <predictDt+0xd54>
 8010c8a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010c8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8010c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010c9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010c9e:	697b      	ldr	r3, [r7, #20]
 8010ca0:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	ed93 7a05 	vldr	s14, [r3, #20]
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	edd3 6a02 	vldr	s13, [r3, #8]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	ed93 6a01 	vldr	s12, [r3, #4]
 8010cb6:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8010cba:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010cbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	ed93 6a00 	vldr	s12, [r3]
 8010cc8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8010ccc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010cd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010cda:	ed9f 6a9e 	vldr	s12, [pc, #632]	@ 8010f54 <predictDt+0xd54>
 8010cde:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010ce2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010ce6:	edd7 7a02 	vldr	s15, [r7, #8]
 8010cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010cf2:	697b      	ldr	r3, [r7, #20]
 8010cf4:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	edd3 7a00 	vldr	s15, [r3]
 8010cfe:	ed97 7a02 	vldr	s14, [r7, #8]
 8010d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d06:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  float dtwy = dt*gyro->y;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8010d10:	ed97 7a02 	vldr	s14, [r7, #8]
 8010d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d18:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dtwz = dt*gyro->z;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010d22:	ed97 7a02 	vldr	s14, [r7, #8]
 8010d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d2a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 8010d2e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8010d32:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010d36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010d3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d42:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8010d46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010d4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8010d52:	f7fe fc03 	bl	800f55c <arm_sqrt>
 8010d56:	eef0 7a40 	vmov.f32	s15, s0
 8010d5a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8010f60 <predictDt+0xd60>
 8010d5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d62:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 8010d66:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8010d6a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010d72:	eeb0 0a47 	vmov.f32	s0, s14
 8010d76:	f008 fa3f 	bl	80191f8 <arm_cos_f32>
 8010d7a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
  float sa = arm_sin_f32(angle/2.0f);
 8010d7e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8010d82:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010d86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8010d8e:	f008 f9ed 	bl	801916c <arm_sin_f32>
 8010d92:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 8010d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d98:	61fb      	str	r3, [r7, #28]
 8010d9a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010d9e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8010da2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010da6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8010daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dae:	edc7 7a08 	vstr	s15, [r7, #32]
 8010db2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010db6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010dba:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010dbe:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8010dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dc6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8010dca:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010dce:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8010dd2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010dd6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8010dda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010dde:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 8010de2:	ed97 7a07 	vldr	s14, [r7, #28]
 8010de6:	697b      	ldr	r3, [r7, #20]
 8010de8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010df0:	edd7 6a08 	vldr	s13, [r7, #32]
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010dfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010dfe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e02:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010e06:	697b      	ldr	r3, [r7, #20]
 8010e08:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e14:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010e1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e26:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 8010e2a:	ed97 7a08 	vldr	s14, [r7, #32]
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010e34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e4a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010e54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010e5c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010e66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010e6e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 8010e72:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010e76:	697b      	ldr	r3, [r7, #20]
 8010e78:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010e7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e80:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010e8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8010e96:	697b      	ldr	r3, [r7, #20]
 8010e98:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010e9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ea0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ea4:	edd7 6a08 	vldr	s13, [r7, #32]
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010eb6:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 8010eba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010ebe:	697b      	ldr	r3, [r7, #20]
 8010ec0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ec8:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010ecc:	697b      	ldr	r3, [r7, #20]
 8010ece:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010eda:	edd7 6a08 	vldr	s13, [r7, #32]
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ee8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010eec:	edd7 6a07 	vldr	s13, [r7, #28]
 8010ef0:	697b      	ldr	r3, [r7, #20]
 8010ef2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010ef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010efa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010efe:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

  if (! quadIsFlying) {
 8010f02:	79fb      	ldrb	r3, [r7, #7]
 8010f04:	f083 0301 	eor.w	r3, r3, #1
 8010f08:	b2db      	uxtb	r3, r3
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d04e      	beq.n	8010fac <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 8010f0e:	4b12      	ldr	r3, [pc, #72]	@ (8010f58 <predictDt+0xd58>)
 8010f10:	633b      	str	r3, [r7, #48]	@ 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 8010f12:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010f16:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f1e:	697b      	ldr	r3, [r7, #20]
 8010f20:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 8010f24:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8010f5c <predictDt+0xd5c>
 8010f28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f30:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 8010f34:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010f38:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8010f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	edd3 7a6b 	vldr	s15, [r3, #428]	@ 0x1ac
 8010f46:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8010f5c <predictDt+0xd5c>
 8010f4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f52:	e007      	b.n	8010f64 <predictDt+0xd64>
 8010f54:	411cf5c3 	.word	0x411cf5c3
 8010f58:	3f7fbe77 	.word	0x3f7fbe77
 8010f5c:	3a83126f 	.word	0x3a83126f
 8010f60:	358637bd 	.word	0x358637bd
 8010f64:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 8010f68:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010f6c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8010f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	edd3 7a6c 	vldr	s15, [r3, #432]	@ 0x1b0
 8010f7a:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8010f5c <predictDt+0xd5c>
 8010f7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f86:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 8010f8a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010f8e:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8010f92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f96:	697b      	ldr	r3, [r7, #20]
 8010f98:	edd3 7a6d 	vldr	s15, [r3, #436]	@ 0x1b4
 8010f9c:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 8010f5c <predictDt+0xd5c>
 8010fa0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fa8:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 8010fac:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010fb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010fb4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8010fb8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010fbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fc0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8010fc4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010fc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fcc:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8010fd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8010fdc:	f7fe fabe 	bl	800f55c <arm_sqrt>
 8010fe0:	eef0 7a40 	vmov.f32	s15, s0
 8010fe4:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8010f60 <predictDt+0xd60>
 8010fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010fec:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 8010ff0:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8010ff4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ffc:	697b      	ldr	r3, [r7, #20]
 8010ffe:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8011002:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8011006:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801100a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801100e:	697b      	ldr	r3, [r7, #20]
 8011010:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8011014:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8011018:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801101c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8011026:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 801102a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801102e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  assertStateNotNaN(this);
 8011038:	6978      	ldr	r0, [r7, #20]
 801103a:	f7fe faeb 	bl	800f614 <assertStateNotNaN>

  this->isUpdated = true;
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	2201      	movs	r2, #1
 8011042:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8011046:	bf00      	nop
 8011048:	3788      	adds	r7, #136	@ 0x88
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop

08011050 <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 8011050:	b580      	push	{r7, lr}
 8011052:	b086      	sub	sp, #24
 8011054:	af00      	add	r7, sp, #0
 8011056:	60f8      	str	r0, [r7, #12]
 8011058:	60b9      	str	r1, [r7, #8]
 801105a:	607a      	str	r2, [r7, #4]
 801105c:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	1ad3      	subs	r3, r2, r3
 8011068:	ee07 3a90 	vmov	s15, r3
 801106c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011070:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80110a0 <kalmanCorePredict+0x50>
 8011074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011078:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 801107c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011080:	ed97 0a05 	vldr	s0, [r7, #20]
 8011084:	687a      	ldr	r2, [r7, #4]
 8011086:	68b9      	ldr	r1, [r7, #8]
 8011088:	68f8      	ldr	r0, [r7, #12]
 801108a:	f7ff f8b9 	bl	8010200 <predictDt>
  this->lastPredictionMs = nowMs;
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
}
 8011096:	bf00      	nop
 8011098:	3718      	adds	r7, #24
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	447a0000 	.word	0x447a0000
 80110a4:	00000000 	.word	0x00000000

080110a8 <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b088      	sub	sp, #32
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	60f8      	str	r0, [r7, #12]
 80110b0:	60b9      	str	r1, [r7, #8]
 80110b2:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	ed93 7a05 	vldr	s14, [r3, #20]
 80110bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80110c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80110c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	edd3 6a07 	vldr	s13, [r3, #28]
 80110d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80110d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80110da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80110e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110e8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80110ec:	eeb0 0a67 	vmov.f32	s0, s15
 80110f0:	f008 f9de 	bl	80194b0 <powf>
 80110f4:	eeb0 7a40 	vmov.f32	s14, s0
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80110fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	ed93 7a05 	vldr	s14, [r3, #20]
 801110e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011112:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011116:	edd7 7a01 	vldr	s15, [r7, #4]
 801111a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	edd3 6a07 	vldr	s13, [r3, #28]
 8011124:	edd7 7a01 	vldr	s15, [r7, #4]
 8011128:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801112c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	edd3 7a08 	vldr	s15, [r3, #32]
 8011136:	ee77 7a27 	vadd.f32	s15, s14, s15
 801113a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801113e:	eeb0 0a67 	vmov.f32	s0, s15
 8011142:	f008 f9b5 	bl	80194b0 <powf>
 8011146:	eeb0 7a40 	vmov.f32	s14, s0
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8011150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	ed93 7a06 	vldr	s14, [r3, #24]
 8011160:	edd7 7a01 	vldr	s15, [r7, #4]
 8011164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011168:	edd7 7a01 	vldr	s15, [r7, #4]
 801116c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	edd3 6a07 	vldr	s13, [r3, #28]
 8011176:	edd7 7a01 	vldr	s15, [r7, #4]
 801117a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801117e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011182:	68bb      	ldr	r3, [r7, #8]
 8011184:	edd3 7a08 	vldr	s15, [r3, #32]
 8011188:	ee77 7a27 	vadd.f32	s15, s14, s15
 801118c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011190:	eeb0 0a67 	vmov.f32	s0, s15
 8011194:	f008 f98c 	bl	80194b0 <powf>
 8011198:	eeb0 7a40 	vmov.f32	s14, s0
 801119c:	68fb      	ldr	r3, [r7, #12]
 801119e:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 80111a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80111b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80111b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	edd3 7a07 	vldr	s15, [r3, #28]
 80111c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111c4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80111c8:	eeb0 0a67 	vmov.f32	s0, s15
 80111cc:	f008 f970 	bl	80194b0 <powf>
 80111d0:	eeb0 7a40 	vmov.f32	s14, s0
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80111da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	ed93 7a05 	vldr	s14, [r3, #20]
 80111ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80111ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	edd3 7a07 	vldr	s15, [r3, #28]
 80111f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111fc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011200:	eeb0 0a67 	vmov.f32	s0, s15
 8011204:	f008 f954 	bl	80194b0 <powf>
 8011208:	eeb0 7a40 	vmov.f32	s14, s0
 801120c:	68fb      	ldr	r3, [r7, #12]
 801120e:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8011212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 801121c:	68bb      	ldr	r3, [r7, #8]
 801121e:	ed93 7a06 	vldr	s14, [r3, #24]
 8011222:	edd7 7a01 	vldr	s15, [r7, #4]
 8011226:	ee27 7a27 	vmul.f32	s14, s14, s15
 801122a:	68bb      	ldr	r3, [r7, #8]
 801122c:	edd3 7a07 	vldr	s15, [r3, #28]
 8011230:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011234:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011238:	eeb0 0a67 	vmov.f32	s0, s15
 801123c:	f008 f938 	bl	80194b0 <powf>
 8011240:	eeb0 7a40 	vmov.f32	s14, s0
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 801124a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 801125a:	edd7 7a01 	vldr	s15, [r7, #4]
 801125e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011268:	ee77 7a27 	vadd.f32	s15, s14, s15
 801126c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011270:	eeb0 0a67 	vmov.f32	s0, s15
 8011274:	f008 f91c 	bl	80194b0 <powf>
 8011278:	eeb0 7a40 	vmov.f32	s14, s0
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 8011282:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 801128c:	68bb      	ldr	r3, [r7, #8]
 801128e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8011292:	edd7 7a01 	vldr	s15, [r7, #4]
 8011296:	ee27 7a27 	vmul.f32	s14, s14, s15
 801129a:	68bb      	ldr	r3, [r7, #8]
 801129c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80112a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112a4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80112a8:	eeb0 0a67 	vmov.f32	s0, s15
 80112ac:	f008 f900 	bl	80194b0 <powf>
 80112b0:	eeb0 7a40 	vmov.f32	s14, s0
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 80112ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 80112c4:	68bb      	ldr	r3, [r7, #8]
 80112c6:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80112ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80112ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80112d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112dc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80112e0:	eeb0 0a67 	vmov.f32	s0, s15
 80112e4:	f008 f8e4 	bl	80194b0 <powf>
 80112e8:	eeb0 7a40 	vmov.f32	s14, s0
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 80112f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 80112fc:	2300      	movs	r3, #0
 80112fe:	61fb      	str	r3, [r7, #28]
 8011300:	e0c2      	b.n	8011488 <addProcessNoiseDt+0x3e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	61bb      	str	r3, [r7, #24]
 8011306:	e0b8      	b.n	801147a <addProcessNoiseDt+0x3d2>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8011308:	68f9      	ldr	r1, [r7, #12]
 801130a:	69fa      	ldr	r2, [r7, #28]
 801130c:	4613      	mov	r3, r2
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	4413      	add	r3, r2
 8011312:	69ba      	ldr	r2, [r7, #24]
 8011314:	4413      	add	r3, r2
 8011316:	3316      	adds	r3, #22
 8011318:	009b      	lsls	r3, r3, #2
 801131a:	440b      	add	r3, r1
 801131c:	edd3 7a00 	vldr	s15, [r3]
 8011320:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011328:	68f9      	ldr	r1, [r7, #12]
 801132a:	69ba      	ldr	r2, [r7, #24]
 801132c:	4613      	mov	r3, r2
 801132e:	00db      	lsls	r3, r3, #3
 8011330:	4413      	add	r3, r2
 8011332:	69fa      	ldr	r2, [r7, #28]
 8011334:	4413      	add	r3, r2
 8011336:	3316      	adds	r3, #22
 8011338:	009b      	lsls	r3, r3, #2
 801133a:	440b      	add	r3, r1
 801133c:	edd3 7a00 	vldr	s15, [r3]
 8011340:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8011344:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011348:	ee77 7a27 	vadd.f32	s15, s14, s15
 801134c:	ee17 0a90 	vmov	r0, s15
 8011350:	f7ef f8ac 	bl	80004ac <__aeabi_f2d>
 8011354:	4602      	mov	r2, r0
 8011356:	460b      	mov	r3, r1
 8011358:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 801135c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011364:	f7ef fb94 	bl	8000a90 <__aeabi_dcmpun>
 8011368:	4603      	mov	r3, r0
 801136a:	2b00      	cmp	r3, #0
 801136c:	d109      	bne.n	8011382 <addProcessNoiseDt+0x2da>
 801136e:	f04f 0200 	mov.w	r2, #0
 8011372:	4b4d      	ldr	r3, [pc, #308]	@ (80114a8 <addProcessNoiseDt+0x400>)
 8011374:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011378:	f7ef fb80 	bl	8000a7c <__aeabi_dcmpgt>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d022      	beq.n	80113c8 <addProcessNoiseDt+0x320>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8011382:	68f9      	ldr	r1, [r7, #12]
 8011384:	69ba      	ldr	r2, [r7, #24]
 8011386:	4613      	mov	r3, r2
 8011388:	00db      	lsls	r3, r3, #3
 801138a:	4413      	add	r3, r2
 801138c:	69fa      	ldr	r2, [r7, #28]
 801138e:	4413      	add	r3, r2
 8011390:	3316      	adds	r3, #22
 8011392:	009b      	lsls	r3, r3, #2
 8011394:	440b      	add	r3, r1
 8011396:	4a45      	ldr	r2, [pc, #276]	@ (80114ac <addProcessNoiseDt+0x404>)
 8011398:	601a      	str	r2, [r3, #0]
 801139a:	68f9      	ldr	r1, [r7, #12]
 801139c:	69ba      	ldr	r2, [r7, #24]
 801139e:	4613      	mov	r3, r2
 80113a0:	00db      	lsls	r3, r3, #3
 80113a2:	4413      	add	r3, r2
 80113a4:	69fa      	ldr	r2, [r7, #28]
 80113a6:	4413      	add	r3, r2
 80113a8:	3316      	adds	r3, #22
 80113aa:	009b      	lsls	r3, r3, #2
 80113ac:	440b      	add	r3, r1
 80113ae:	6819      	ldr	r1, [r3, #0]
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	69fa      	ldr	r2, [r7, #28]
 80113b4:	4613      	mov	r3, r2
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	4413      	add	r3, r2
 80113ba:	69ba      	ldr	r2, [r7, #24]
 80113bc:	4413      	add	r3, r2
 80113be:	3316      	adds	r3, #22
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	4403      	add	r3, r0
 80113c4:	6019      	str	r1, [r3, #0]
 80113c6:	e055      	b.n	8011474 <addProcessNoiseDt+0x3cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 80113c8:	69fa      	ldr	r2, [r7, #28]
 80113ca:	69bb      	ldr	r3, [r7, #24]
 80113cc:	429a      	cmp	r2, r3
 80113ce:	d12c      	bne.n	801142a <addProcessNoiseDt+0x382>
 80113d0:	a333      	add	r3, pc, #204	@ (adr r3, 80114a0 <addProcessNoiseDt+0x3f8>)
 80113d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80113da:	f7ef fb31 	bl	8000a40 <__aeabi_dcmplt>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d022      	beq.n	801142a <addProcessNoiseDt+0x382>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 80113e4:	68f9      	ldr	r1, [r7, #12]
 80113e6:	69ba      	ldr	r2, [r7, #24]
 80113e8:	4613      	mov	r3, r2
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	4413      	add	r3, r2
 80113ee:	69fa      	ldr	r2, [r7, #28]
 80113f0:	4413      	add	r3, r2
 80113f2:	3316      	adds	r3, #22
 80113f4:	009b      	lsls	r3, r3, #2
 80113f6:	440b      	add	r3, r1
 80113f8:	4a2d      	ldr	r2, [pc, #180]	@ (80114b0 <addProcessNoiseDt+0x408>)
 80113fa:	601a      	str	r2, [r3, #0]
 80113fc:	68f9      	ldr	r1, [r7, #12]
 80113fe:	69ba      	ldr	r2, [r7, #24]
 8011400:	4613      	mov	r3, r2
 8011402:	00db      	lsls	r3, r3, #3
 8011404:	4413      	add	r3, r2
 8011406:	69fa      	ldr	r2, [r7, #28]
 8011408:	4413      	add	r3, r2
 801140a:	3316      	adds	r3, #22
 801140c:	009b      	lsls	r3, r3, #2
 801140e:	440b      	add	r3, r1
 8011410:	6819      	ldr	r1, [r3, #0]
 8011412:	68f8      	ldr	r0, [r7, #12]
 8011414:	69fa      	ldr	r2, [r7, #28]
 8011416:	4613      	mov	r3, r2
 8011418:	00db      	lsls	r3, r3, #3
 801141a:	4413      	add	r3, r2
 801141c:	69ba      	ldr	r2, [r7, #24]
 801141e:	4413      	add	r3, r2
 8011420:	3316      	adds	r3, #22
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	4403      	add	r3, r0
 8011426:	6019      	str	r1, [r3, #0]
 8011428:	e024      	b.n	8011474 <addProcessNoiseDt+0x3cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 801142a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801142e:	f7ef fb45 	bl	8000abc <__aeabi_d2f>
 8011432:	68f9      	ldr	r1, [r7, #12]
 8011434:	69ba      	ldr	r2, [r7, #24]
 8011436:	4613      	mov	r3, r2
 8011438:	00db      	lsls	r3, r3, #3
 801143a:	4413      	add	r3, r2
 801143c:	69fa      	ldr	r2, [r7, #28]
 801143e:	4413      	add	r3, r2
 8011440:	3316      	adds	r3, #22
 8011442:	009b      	lsls	r3, r3, #2
 8011444:	440b      	add	r3, r1
 8011446:	6018      	str	r0, [r3, #0]
 8011448:	68f9      	ldr	r1, [r7, #12]
 801144a:	69ba      	ldr	r2, [r7, #24]
 801144c:	4613      	mov	r3, r2
 801144e:	00db      	lsls	r3, r3, #3
 8011450:	4413      	add	r3, r2
 8011452:	69fa      	ldr	r2, [r7, #28]
 8011454:	4413      	add	r3, r2
 8011456:	3316      	adds	r3, #22
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	440b      	add	r3, r1
 801145c:	6819      	ldr	r1, [r3, #0]
 801145e:	68f8      	ldr	r0, [r7, #12]
 8011460:	69fa      	ldr	r2, [r7, #28]
 8011462:	4613      	mov	r3, r2
 8011464:	00db      	lsls	r3, r3, #3
 8011466:	4413      	add	r3, r2
 8011468:	69ba      	ldr	r2, [r7, #24]
 801146a:	4413      	add	r3, r2
 801146c:	3316      	adds	r3, #22
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4403      	add	r3, r0
 8011472:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8011474:	69bb      	ldr	r3, [r7, #24]
 8011476:	3301      	adds	r3, #1
 8011478:	61bb      	str	r3, [r7, #24]
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	2b08      	cmp	r3, #8
 801147e:	f77f af43 	ble.w	8011308 <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011482:	69fb      	ldr	r3, [r7, #28]
 8011484:	3301      	adds	r3, #1
 8011486:	61fb      	str	r3, [r7, #28]
 8011488:	69fb      	ldr	r3, [r7, #28]
 801148a:	2b08      	cmp	r3, #8
 801148c:	f77f af39 	ble.w	8011302 <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 8011490:	68f8      	ldr	r0, [r7, #12]
 8011492:	f7fe f8bf 	bl	800f614 <assertStateNotNaN>
}
 8011496:	bf00      	nop
 8011498:	3720      	adds	r7, #32
 801149a:	46bd      	mov	sp, r7
 801149c:	bd80      	pop	{r7, pc}
 801149e:	bf00      	nop
 80114a0:	a0000000 	.word	0xa0000000
 80114a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80114a8:	40590000 	.word	0x40590000
 80114ac:	42c80000 	.word	0x42c80000
 80114b0:	358637bd 	.word	0x358637bd

080114b4 <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 80114c6:	687a      	ldr	r2, [r7, #4]
 80114c8:	1ad3      	subs	r3, r2, r3
 80114ca:	ee07 3a90 	vmov	s15, r3
 80114ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80114d2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801150c <kalmanCoreAddProcessNoise+0x58>
 80114d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80114da:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 80114de:	edd7 7a05 	vldr	s15, [r7, #20]
 80114e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80114e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114ea:	dc00      	bgt.n	80114ee <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 80114ec:	e009      	b.n	8011502 <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 80114ee:	ed97 0a05 	vldr	s0, [r7, #20]
 80114f2:	68b9      	ldr	r1, [r7, #8]
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f7ff fdd7 	bl	80110a8 <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	687a      	ldr	r2, [r7, #4]
 80114fe:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 8011502:	bf00      	nop
 8011504:	3718      	adds	r7, #24
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	447a0000 	.word	0x447a0000

08011510 <kalmanCoreFinalize>:
float v0;
float v1;
float v2;
bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b096      	sub	sp, #88	@ 0x58
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 801151e:	f083 0301 	eor.w	r3, r3, #1
 8011522:	b2db      	uxtb	r3, r3
 8011524:	2b00      	cmp	r3, #0
 8011526:	d002      	beq.n	801152e <kalmanCoreFinalize+0x1e>
    return false;
 8011528:	2300      	movs	r3, #0
 801152a:	f000 bc98 	b.w	8011e5e <kalmanCoreFinalize+0x94e>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  v0 = this->S[KC_STATE_D0];
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	699b      	ldr	r3, [r3, #24]
 8011532:	4ade      	ldr	r2, [pc, #888]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 8011534:	6013      	str	r3, [r2, #0]
  v1 = this->S[KC_STATE_D1];
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	69db      	ldr	r3, [r3, #28]
 801153a:	4add      	ldr	r2, [pc, #884]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 801153c:	6013      	str	r3, [r2, #0]
  v2 = this->S[KC_STATE_D2];
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6a1b      	ldr	r3, [r3, #32]
 8011542:	4adc      	ldr	r2, [pc, #880]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 8011544:	6013      	str	r3, [r2, #0]

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 8011546:	4bd9      	ldr	r3, [pc, #868]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 8011548:	edd3 7a00 	vldr	s15, [r3]
 801154c:	eef0 7ae7 	vabs.f32	s15, s15
 8011550:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 80118b8 <kalmanCoreFinalize+0x3a8>
 8011554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801155c:	dc18      	bgt.n	8011590 <kalmanCoreFinalize+0x80>
 801155e:	4bd4      	ldr	r3, [pc, #848]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 8011560:	edd3 7a00 	vldr	s15, [r3]
 8011564:	eef0 7ae7 	vabs.f32	s15, s15
 8011568:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 80118b8 <kalmanCoreFinalize+0x3a8>
 801156c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011574:	dc0c      	bgt.n	8011590 <kalmanCoreFinalize+0x80>
 8011576:	4bcf      	ldr	r3, [pc, #828]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 8011578:	edd3 7a00 	vldr	s15, [r3]
 801157c:	eef0 7ae7 	vabs.f32	s15, s15
 8011580:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 80118b8 <kalmanCoreFinalize+0x3a8>
 8011584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801158c:	f340 8278 	ble.w	8011a80 <kalmanCoreFinalize+0x570>
 8011590:	4bc6      	ldr	r3, [pc, #792]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 8011592:	edd3 7a00 	vldr	s15, [r3]
 8011596:	eef0 7ae7 	vabs.f32	s15, s15
 801159a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115a6:	f140 826b 	bpl.w	8011a80 <kalmanCoreFinalize+0x570>
 80115aa:	4bc1      	ldr	r3, [pc, #772]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 80115ac:	edd3 7a00 	vldr	s15, [r3]
 80115b0:	eef0 7ae7 	vabs.f32	s15, s15
 80115b4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80115b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115c0:	f140 825e 	bpl.w	8011a80 <kalmanCoreFinalize+0x570>
 80115c4:	4bbb      	ldr	r3, [pc, #748]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 80115c6:	edd3 7a00 	vldr	s15, [r3]
 80115ca:	eef0 7ae7 	vabs.f32	s15, s15
 80115ce:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80115d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80115d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115da:	f140 8251 	bpl.w	8011a80 <kalmanCoreFinalize+0x570>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 80115de:	4bb3      	ldr	r3, [pc, #716]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 80115e0:	ed93 7a00 	vldr	s14, [r3]
 80115e4:	4bb1      	ldr	r3, [pc, #708]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 80115e6:	edd3 7a00 	vldr	s15, [r3]
 80115ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80115ee:	4bb0      	ldr	r3, [pc, #704]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 80115f0:	edd3 6a00 	vldr	s13, [r3]
 80115f4:	4bae      	ldr	r3, [pc, #696]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 80115f6:	edd3 7a00 	vldr	s15, [r3]
 80115fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80115fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011602:	4bac      	ldr	r3, [pc, #688]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 8011604:	edd3 6a00 	vldr	s13, [r3]
 8011608:	4baa      	ldr	r3, [pc, #680]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 801160a:	edd3 7a00 	vldr	s15, [r3]
 801160e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011616:	eeb0 0a67 	vmov.f32	s0, s15
 801161a:	f7fd ff9f 	bl	800f55c <arm_sqrt>
 801161e:	eef0 7a40 	vmov.f32	s15, s0
 8011622:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80118bc <kalmanCoreFinalize+0x3ac>
 8011626:	ee77 7a87 	vadd.f32	s15, s15, s14
 801162a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float ca = arm_cos_f32(angle / 2.0f);
 801162e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8011632:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011636:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801163a:	eeb0 0a47 	vmov.f32	s0, s14
 801163e:	f007 fddb 	bl	80191f8 <arm_cos_f32>
 8011642:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float sa = arm_sin_f32(angle / 2.0f);
 8011646:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 801164a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801164e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011652:	eeb0 0a47 	vmov.f32	s0, s14
 8011656:	f007 fd89 	bl	801916c <arm_sin_f32>
 801165a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 801165e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011660:	60bb      	str	r3, [r7, #8]
 8011662:	4b92      	ldr	r3, [pc, #584]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 8011664:	ed93 7a00 	vldr	s14, [r3]
 8011668:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801166c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8011670:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8011674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011678:	edc7 7a03 	vstr	s15, [r7, #12]
 801167c:	4b8c      	ldr	r3, [pc, #560]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 801167e:	ed93 7a00 	vldr	s14, [r3]
 8011682:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8011686:	ee67 6a27 	vmul.f32	s13, s14, s15
 801168a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801168e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011692:	edc7 7a04 	vstr	s15, [r7, #16]
 8011696:	4b87      	ldr	r3, [pc, #540]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 8011698:	ed93 7a00 	vldr	s14, [r3]
 801169c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80116a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80116a4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80116a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80116ac:	edc7 7a05 	vstr	s15, [r7, #20]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 80116b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80116ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116be:	edd7 6a03 	vldr	s13, [r7, #12]
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80116c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116d0:	edd7 6a04 	vldr	s13, [r7, #16]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80116da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80116e2:	edd7 6a05 	vldr	s13, [r7, #20]
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80116ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80116f4:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 80116f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011702:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011706:	edd7 6a02 	vldr	s13, [r7, #8]
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011714:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011718:	edd7 6a05 	vldr	s13, [r7, #20]
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011722:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011726:	ee37 7a27 	vadd.f32	s14, s14, s15
 801172a:	edd7 6a04 	vldr	s13, [r7, #16]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011734:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011738:	ee77 7a67 	vsub.f32	s15, s14, s15
 801173c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 8011740:	ed97 7a04 	vldr	s14, [r7, #16]
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801174a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801174e:	edd7 6a05 	vldr	s13, [r7, #20]
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011758:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801175c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011760:	edd7 6a02 	vldr	s13, [r7, #8]
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011772:	edd7 6a03 	vldr	s13, [r7, #12]
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801177c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011780:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011784:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 8011788:	ed97 7a05 	vldr	s14, [r7, #20]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011796:	edd7 6a04 	vldr	s13, [r7, #16]
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80117a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117a8:	edd7 6a03 	vldr	s13, [r7, #12]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80117b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80117ba:	edd7 6a02 	vldr	s13, [r7, #8]
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80117c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80117c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117cc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 80117d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80117d4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80117d8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80117dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80117e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80117e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80117ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80117f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80117f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117fc:	eeb0 0a67 	vmov.f32	s0, s15
 8011800:	f7fd feac 	bl	800f55c <arm_sqrt>
 8011804:	eef0 7a40 	vmov.f32	s15, s0
 8011808:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80118bc <kalmanCoreFinalize+0x3ac>
 801180c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011810:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    this->q[0] = tmpq0 / norm;
 8011814:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8011818:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801181c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    this->q[1] = tmpq1 / norm;
 8011826:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 801182a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801182e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    this->q[2] = tmpq2 / norm;
 8011838:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 801183c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    this->q[3] = tmpq3 / norm;
 801184a:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 801184e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 801185c:	4b13      	ldr	r3, [pc, #76]	@ (80118ac <kalmanCoreFinalize+0x39c>)
 801185e:	ed93 7a00 	vldr	s14, [r3]
 8011862:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011866:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801186a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 801186e:	4b10      	ldr	r3, [pc, #64]	@ (80118b0 <kalmanCoreFinalize+0x3a0>)
 8011870:	ed93 7a00 	vldr	s14, [r3]
 8011874:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011878:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801187c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d2 = v2/2;
 8011880:	4b0c      	ldr	r3, [pc, #48]	@ (80118b4 <kalmanCoreFinalize+0x3a4>)
 8011882:	ed93 7a00 	vldr	s14, [r3]
 8011886:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801188a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801188e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    A[KC_STATE_X][KC_STATE_X] = 1;
 8011892:	4b0b      	ldr	r3, [pc, #44]	@ (80118c0 <kalmanCoreFinalize+0x3b0>)
 8011894:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011898:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 801189a:	4b09      	ldr	r3, [pc, #36]	@ (80118c0 <kalmanCoreFinalize+0x3b0>)
 801189c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80118a0:	629a      	str	r2, [r3, #40]	@ 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 80118a2:	4b07      	ldr	r3, [pc, #28]	@ (80118c0 <kalmanCoreFinalize+0x3b0>)
 80118a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80118a8:	e00c      	b.n	80118c4 <kalmanCoreFinalize+0x3b4>
 80118aa:	bf00      	nop
 80118ac:	200098f8 	.word	0x200098f8
 80118b0:	200098fc 	.word	0x200098fc
 80118b4:	20009900 	.word	0x20009900
 80118b8:	38d1b717 	.word	0x38d1b717
 80118bc:	358637bd 	.word	0x358637bd
 80118c0:	10004300 	.word	0x10004300
 80118c4:	651a      	str	r2, [r3, #80]	@ 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 80118c6:	4b6a      	ldr	r3, [pc, #424]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 80118c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80118cc:	679a      	str	r2, [r3, #120]	@ 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 80118ce:	4b68      	ldr	r3, [pc, #416]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 80118d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80118d4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 80118d8:	4b65      	ldr	r3, [pc, #404]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 80118da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80118de:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 80118e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80118e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80118ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80118ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80118f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80118f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80118fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80118fe:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011902:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011906:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801190a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801190e:	4b58      	ldr	r3, [pc, #352]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 8011910:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 8011914:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011918:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801191c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011920:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011924:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011928:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801192c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011930:	4b4f      	ldr	r3, [pc, #316]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 8011932:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 8011936:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801193a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801193e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011942:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011946:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801194a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801194e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011952:	4b47      	ldr	r3, [pc, #284]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 8011954:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 8011958:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801195c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011964:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011968:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801196c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011974:	4b3e      	ldr	r3, [pc, #248]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 8011976:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 801197a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801197e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011982:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011986:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801198a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801198e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011992:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011996:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801199a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801199e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80119a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80119a6:	4b32      	ldr	r3, [pc, #200]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 80119a8:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 80119ac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80119b0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80119b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119b8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80119bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80119c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80119c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119c8:	4b29      	ldr	r3, [pc, #164]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 80119ca:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 80119ce:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80119d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80119d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80119de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80119e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80119e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119ea:	4b21      	ldr	r3, [pc, #132]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 80119ec:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 80119f0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80119f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80119f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119fc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011a00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011a04:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011a08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a0c:	4b18      	ldr	r3, [pc, #96]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 8011a0e:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 8011a12:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011a1a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011a26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011a2a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011a2e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011a32:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011a36:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8011a70 <kalmanCoreFinalize+0x560>)
 8011a40:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 8011a44:	490b      	ldr	r1, [pc, #44]	@ (8011a74 <kalmanCoreFinalize+0x564>)
 8011a46:	480c      	ldr	r0, [pc, #48]	@ (8011a78 <kalmanCoreFinalize+0x568>)
 8011a48:	f7fd fd3e 	bl	800f4c8 <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8011a52:	4a0a      	ldr	r2, [pc, #40]	@ (8011a7c <kalmanCoreFinalize+0x56c>)
 8011a54:	4619      	mov	r1, r3
 8011a56:	4808      	ldr	r0, [pc, #32]	@ (8011a78 <kalmanCoreFinalize+0x568>)
 8011a58:	f7fd fd58 	bl	800f50c <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8011a62:	461a      	mov	r2, r3
 8011a64:	4903      	ldr	r1, [pc, #12]	@ (8011a74 <kalmanCoreFinalize+0x564>)
 8011a66:	4805      	ldr	r0, [pc, #20]	@ (8011a7c <kalmanCoreFinalize+0x56c>)
 8011a68:	f7fd fd50 	bl	800f50c <mat_mult>
 8011a6c:	e008      	b.n	8011a80 <kalmanCoreFinalize+0x570>
 8011a6e:	bf00      	nop
 8011a70:	10004300 	.word	0x10004300
 8011a74:	200000d0 	.word	0x200000d0
 8011a78:	200000c8 	.word	0x200000c8
 8011a7c:	200000d8 	.word	0x200000d8
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011a8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011ab0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011ac4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011ad8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011ae2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011aec:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011af6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011b0a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011b14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011b1e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011b28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011b3c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011b46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011b50:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011b74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011b84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011b98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011bb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011bc0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011bca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011bd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011bde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011bf2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011c06:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011c24:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011c2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011c38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011c5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011c94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f04f 0200 	mov.w	r2, #0
 8011ca8:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f04f 0200 	mov.w	r2, #0
 8011cb0:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f04f 0200 	mov.w	r2, #0
 8011cb8:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011cba:	2300      	movs	r3, #0
 8011cbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8011cbe:	e0c2      	b.n	8011e46 <kalmanCoreFinalize+0x936>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8011cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011cc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011cc4:	e0b8      	b.n	8011e38 <kalmanCoreFinalize+0x928>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8011cc6:	6879      	ldr	r1, [r7, #4]
 8011cc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011cca:	4613      	mov	r3, r2
 8011ccc:	00db      	lsls	r3, r3, #3
 8011cce:	4413      	add	r3, r2
 8011cd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011cd2:	4413      	add	r3, r2
 8011cd4:	3316      	adds	r3, #22
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	440b      	add	r3, r1
 8011cda:	edd3 7a00 	vldr	s15, [r3]
 8011cde:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011ce2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011ce6:	6879      	ldr	r1, [r7, #4]
 8011ce8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011cea:	4613      	mov	r3, r2
 8011cec:	00db      	lsls	r3, r3, #3
 8011cee:	4413      	add	r3, r2
 8011cf0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011cf2:	4413      	add	r3, r2
 8011cf4:	3316      	adds	r3, #22
 8011cf6:	009b      	lsls	r3, r3, #2
 8011cf8:	440b      	add	r3, r1
 8011cfa:	edd3 7a00 	vldr	s15, [r3]
 8011cfe:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8011d02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d0a:	ee17 0a90 	vmov	r0, s15
 8011d0e:	f7ee fbcd 	bl	80004ac <__aeabi_f2d>
 8011d12:	4602      	mov	r2, r0
 8011d14:	460b      	mov	r3, r1
 8011d16:	e9c7 2306 	strd	r2, r3, [r7, #24]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8011d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011d1e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011d22:	f7ee feb5 	bl	8000a90 <__aeabi_dcmpun>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d109      	bne.n	8011d40 <kalmanCoreFinalize+0x830>
 8011d2c:	f04f 0200 	mov.w	r2, #0
 8011d30:	4b4f      	ldr	r3, [pc, #316]	@ (8011e70 <kalmanCoreFinalize+0x960>)
 8011d32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011d36:	f7ee fea1 	bl	8000a7c <__aeabi_dcmpgt>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d022      	beq.n	8011d86 <kalmanCoreFinalize+0x876>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8011d40:	6879      	ldr	r1, [r7, #4]
 8011d42:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d44:	4613      	mov	r3, r2
 8011d46:	00db      	lsls	r3, r3, #3
 8011d48:	4413      	add	r3, r2
 8011d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d4c:	4413      	add	r3, r2
 8011d4e:	3316      	adds	r3, #22
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	440b      	add	r3, r1
 8011d54:	4a47      	ldr	r2, [pc, #284]	@ (8011e74 <kalmanCoreFinalize+0x964>)
 8011d56:	601a      	str	r2, [r3, #0]
 8011d58:	6879      	ldr	r1, [r7, #4]
 8011d5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	4413      	add	r3, r2
 8011d62:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d64:	4413      	add	r3, r2
 8011d66:	3316      	adds	r3, #22
 8011d68:	009b      	lsls	r3, r3, #2
 8011d6a:	440b      	add	r3, r1
 8011d6c:	6819      	ldr	r1, [r3, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d72:	4613      	mov	r3, r2
 8011d74:	00db      	lsls	r3, r3, #3
 8011d76:	4413      	add	r3, r2
 8011d78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d7a:	4413      	add	r3, r2
 8011d7c:	3316      	adds	r3, #22
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	4403      	add	r3, r0
 8011d82:	6019      	str	r1, [r3, #0]
 8011d84:	e055      	b.n	8011e32 <kalmanCoreFinalize+0x922>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 8011d86:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011d88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d8a:	429a      	cmp	r2, r3
 8011d8c:	d12c      	bne.n	8011de8 <kalmanCoreFinalize+0x8d8>
 8011d8e:	a336      	add	r3, pc, #216	@ (adr r3, 8011e68 <kalmanCoreFinalize+0x958>)
 8011d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d94:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011d98:	f7ee fe52 	bl	8000a40 <__aeabi_dcmplt>
 8011d9c:	4603      	mov	r3, r0
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d022      	beq.n	8011de8 <kalmanCoreFinalize+0x8d8>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8011da2:	6879      	ldr	r1, [r7, #4]
 8011da4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011da6:	4613      	mov	r3, r2
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	4413      	add	r3, r2
 8011dac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011dae:	4413      	add	r3, r2
 8011db0:	3316      	adds	r3, #22
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	440b      	add	r3, r1
 8011db6:	4a30      	ldr	r2, [pc, #192]	@ (8011e78 <kalmanCoreFinalize+0x968>)
 8011db8:	601a      	str	r2, [r3, #0]
 8011dba:	6879      	ldr	r1, [r7, #4]
 8011dbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011dbe:	4613      	mov	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	4413      	add	r3, r2
 8011dc4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011dc6:	4413      	add	r3, r2
 8011dc8:	3316      	adds	r3, #22
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	440b      	add	r3, r1
 8011dce:	6819      	ldr	r1, [r3, #0]
 8011dd0:	6878      	ldr	r0, [r7, #4]
 8011dd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	00db      	lsls	r3, r3, #3
 8011dd8:	4413      	add	r3, r2
 8011dda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011ddc:	4413      	add	r3, r2
 8011dde:	3316      	adds	r3, #22
 8011de0:	009b      	lsls	r3, r3, #2
 8011de2:	4403      	add	r3, r0
 8011de4:	6019      	str	r1, [r3, #0]
 8011de6:	e024      	b.n	8011e32 <kalmanCoreFinalize+0x922>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8011de8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011dec:	f7ee fe66 	bl	8000abc <__aeabi_d2f>
 8011df0:	6879      	ldr	r1, [r7, #4]
 8011df2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011df4:	4613      	mov	r3, r2
 8011df6:	00db      	lsls	r3, r3, #3
 8011df8:	4413      	add	r3, r2
 8011dfa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011dfc:	4413      	add	r3, r2
 8011dfe:	3316      	adds	r3, #22
 8011e00:	009b      	lsls	r3, r3, #2
 8011e02:	440b      	add	r3, r1
 8011e04:	6018      	str	r0, [r3, #0]
 8011e06:	6879      	ldr	r1, [r7, #4]
 8011e08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e0a:	4613      	mov	r3, r2
 8011e0c:	00db      	lsls	r3, r3, #3
 8011e0e:	4413      	add	r3, r2
 8011e10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e12:	4413      	add	r3, r2
 8011e14:	3316      	adds	r3, #22
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	440b      	add	r3, r1
 8011e1a:	6819      	ldr	r1, [r3, #0]
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011e20:	4613      	mov	r3, r2
 8011e22:	00db      	lsls	r3, r3, #3
 8011e24:	4413      	add	r3, r2
 8011e26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011e28:	4413      	add	r3, r2
 8011e2a:	3316      	adds	r3, #22
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	4403      	add	r3, r0
 8011e30:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8011e32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e34:	3301      	adds	r3, #1
 8011e36:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011e3a:	2b08      	cmp	r3, #8
 8011e3c:	f77f af43 	ble.w	8011cc6 <kalmanCoreFinalize+0x7b6>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e42:	3301      	adds	r3, #1
 8011e44:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e48:	2b08      	cmp	r3, #8
 8011e4a:	f77f af39 	ble.w	8011cc0 <kalmanCoreFinalize+0x7b0>
      }
    }
  }

  assertStateNotNaN(this);
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f7fd fbe0 	bl	800f614 <assertStateNotNaN>

  this->isUpdated = false;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2200      	movs	r2, #0
 8011e58:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  return true;
 8011e5c:	2301      	movs	r3, #1
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3758      	adds	r7, #88	@ 0x58
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}
 8011e66:	bf00      	nop
 8011e68:	a0000000 	.word	0xa0000000
 8011e6c:	3eb0c6f7 	.word	0x3eb0c6f7
 8011e70:	40590000 	.word	0x40590000
 8011e74:	42c80000 	.word	0x42c80000
 8011e78:	358637bd 	.word	0x358637bd

08011e7c <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 8011e7c:	b590      	push	{r4, r7, lr}
 8011e7e:	b09d      	sub	sp, #116	@ 0x74
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	60f8      	str	r0, [r7, #12]
 8011e84:	60b9      	str	r1, [r7, #8]
 8011e86:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 8011e94:	68bb      	ldr	r3, [r7, #8]
 8011e96:	3320      	adds	r3, #32
 8011e98:	2200      	movs	r2, #0
 8011e9a:	601a      	str	r2, [r3, #0]
 8011e9c:	605a      	str	r2, [r3, #4]
 8011e9e:	609a      	str	r2, [r3, #8]
 8011ea0:	60da      	str	r2, [r3, #12]
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	625c      	str	r4, [r3, #36]	@ 0x24
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	6298      	str	r0, [r3, #40]	@ 0x28
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	62d9      	str	r1, [r3, #44]	@ 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8011eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8011eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	edd3 7a05 	vldr	s15, [r3, #20]
 8011ede:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011ee2:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	edd3 7a03 	vldr	s15, [r3, #12]
 8011ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	edd3 7a04 	vldr	s15, [r3, #16]
 8011f02:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	edd3 7a05 	vldr	s15, [r3, #20]
 8011f16:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 8011f24:	68fb      	ldr	r3, [r7, #12]
 8011f26:	edd3 7a03 	vldr	s15, [r3, #12]
 8011f2a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	edd3 7a04 	vldr	s15, [r3, #16]
 8011f3a:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011f3e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8011f4e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011f52:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	3330      	adds	r3, #48	@ 0x30
 8011f5a:	2200      	movs	r2, #0
 8011f5c:	601a      	str	r2, [r3, #0]
 8011f5e:	605a      	str	r2, [r3, #4]
 8011f60:	609a      	str	r2, [r3, #8]
 8011f62:	60da      	str	r2, [r3, #12]
 8011f64:	68bb      	ldr	r3, [r7, #8]
 8011f66:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
 8011f6a:	68bb      	ldr	r3, [r7, #8]
 8011f6c:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
 8011f70:	68bb      	ldr	r3, [r7, #8]
 8011f72:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	edd3 7a00 	vldr	s15, [r3]
 8011f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011f92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8011fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011faa:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	edd3 7a00 	vldr	s15, [r3]
 8011fba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8011fca:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011fce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8011fde:	ee66 7a27 	vmul.f32	s15, s12, s15
 8011fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	edd3 7a00 	vldr	s15, [r3]
 8011ff2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	edd3 7a01 	vldr	s15, [r3, #4]
 8012002:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8012006:	ee36 6a27 	vadd.f32	s12, s12, s15
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	edd3 7a02 	vldr	s15, [r3, #8]
 8012016:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801201a:	ee76 7a27 	vadd.f32	s15, s12, s15
 801201e:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8012022:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	3340      	adds	r3, #64	@ 0x40
 801202a:	2200      	movs	r2, #0
 801202c:	601a      	str	r2, [r3, #0]
 801202e:	605a      	str	r2, [r3, #4]
 8012030:	609a      	str	r2, [r3, #8]
 8012032:	60da      	str	r2, [r3, #12]
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
 801203a:	68bb      	ldr	r3, [r7, #8]
 801203c:	ed83 7a12 	vstr	s14, [r3, #72]	@ 0x48
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012066:	ee77 7a27 	vadd.f32	s15, s14, s15
 801206a:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801207a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801208a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801208e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801209e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80120ac:	68fb      	ldr	r3, [r7, #12]
 80120ae:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80120b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120ba:	eef0 0a67 	vmov.f32	s1, s15
 80120be:	eeb0 0a46 	vmov.f32	s0, s12
 80120c2:	f007 f98f 	bl	80193e4 <atan2f>
 80120c6:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80120d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80120e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120ee:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80120f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80120f6:	eeb0 0a67 	vmov.f32	s0, s15
 80120fa:	f007 f947 	bl	801938c <asinf>
 80120fe:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801210e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801211e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012126:	ee37 6aa7 	vadd.f32	s12, s15, s15
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012136:	ee27 7a27 	vmul.f32	s14, s14, s15
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8012146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801214a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801215a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801215e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801216e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012176:	eef0 0a67 	vmov.f32	s1, s15
 801217a:	eeb0 0a46 	vmov.f32	s0, s12
 801217e:	f007 f931 	bl	80193e4 <atan2f>
 8012182:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 8012186:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 801218a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80121fc <kalmanCoreExternalizeState+0x380>
 801218e:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 8012192:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012196:	eef1 7a67 	vneg.f32	s15, s15
 801219a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80121fc <kalmanCoreExternalizeState+0x380>
 801219e:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 80121a2:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80121a6:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80121fc <kalmanCoreExternalizeState+0x380>
 80121aa:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 80121ae:	68bb      	ldr	r3, [r7, #8]
 80121b0:	461a      	mov	r2, r3
 80121b2:	2300      	movs	r3, #0
 80121b4:	6013      	str	r3, [r2, #0]
 80121b6:	6053      	str	r3, [r2, #4]
 80121b8:	6093      	str	r3, [r2, #8]
 80121ba:	60d3      	str	r3, [r2, #12]
 80121bc:	68bb      	ldr	r3, [r7, #8]
 80121be:	edc3 6a01 	vstr	s13, [r3, #4]
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	ed83 7a02 	vstr	s14, [r3, #8]
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      .y = this->q[2],
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
      .z = this->q[3]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
      .w = this->q[0],
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  state->attitudeQuaternion = (quaternion_t){
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	611c      	str	r4, [r3, #16]
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	6158      	str	r0, [r3, #20]
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	6199      	str	r1, [r3, #24]
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 80121ee:	68f8      	ldr	r0, [r7, #12]
 80121f0:	f7fd fa10 	bl	800f614 <assertStateNotNaN>
}
 80121f4:	bf00      	nop
 80121f6:	3774      	adds	r7, #116	@ 0x74
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bd90      	pop	{r4, r7, pc}
 80121fc:	42652ee0 	.word	0x42652ee0

08012200 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 8012200:	b580      	push	{r7, lr}
 8012202:	b08e      	sub	sp, #56	@ 0x38
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
 8012208:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 801220a:	f107 0314 	add.w	r3, r7, #20
 801220e:	2224      	movs	r2, #36	@ 0x24
 8012210:	2100      	movs	r1, #0
 8012212:	4618      	mov	r0, r3
 8012214:	f007 f83a 	bl	801928c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8012218:	2301      	movs	r3, #1
 801221a:	81bb      	strh	r3, [r7, #12]
 801221c:	2309      	movs	r3, #9
 801221e:	81fb      	strh	r3, [r7, #14]
 8012220:	f107 0314 	add.w	r3, r7, #20
 8012224:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 8012226:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801222a:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	ed93 7a01 	vldr	s14, [r3, #4]
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	edd3 7a02 	vldr	s15, [r3, #8]
 8012238:	ee77 7a67 	vsub.f32	s15, s14, s15
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	ed93 7a02 	vldr	s14, [r3, #8]
 8012242:	f107 030c 	add.w	r3, r7, #12
 8012246:	eef0 0a47 	vmov.f32	s1, s14
 801224a:	eeb0 0a67 	vmov.f32	s0, s15
 801224e:	4619      	mov	r1, r3
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f7fd fb79 	bl	800f948 <kalmanCoreScalarUpdate>
}
 8012256:	bf00      	nop
 8012258:	3738      	adds	r7, #56	@ 0x38
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
	...

08012260 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8012260:	b580      	push	{r7, lr}
 8012262:	b086      	sub	sp, #24
 8012264:	af00      	add	r7, sp, #0
 8012266:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 801226a:	f04f 0300 	mov.w	r3, #0
 801226e:	60bb      	str	r3, [r7, #8]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	613b      	str	r3, [r7, #16]
 8012274:	f107 0308 	add.w	r3, r7, #8
 8012278:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 801227a:	edd7 7a04 	vldr	s15, [r7, #16]
 801227e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012286:	db0a      	blt.n	801229e <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 8012288:	ed97 0a04 	vldr	s0, [r7, #16]
 801228c:	f007 f968 	bl	8019560 <sqrtf>
 8012290:	eef0 7a40 	vmov.f32	s15, s0
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 801229a:	2300      	movs	r3, #0
 801229c:	e005      	b.n	80122aa <arm_sqrt+0x4a>
      *pOut = 0.0f;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	f04f 0200 	mov.w	r2, #0
 80122a4:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80122a6:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 80122aa:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 80122ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d004      	beq.n	80122be <arm_sqrt+0x5e>
 80122b4:	2258      	movs	r2, #88	@ 0x58
 80122b6:	4906      	ldr	r1, [pc, #24]	@ (80122d0 <arm_sqrt+0x70>)
 80122b8:	4806      	ldr	r0, [pc, #24]	@ (80122d4 <arm_sqrt+0x74>)
 80122ba:	f001 fd35 	bl	8013d28 <assertFail>
  return pOut;
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	ee07 3a90 	vmov	s15, r3
}
 80122c4:	eeb0 0a67 	vmov.f32	s0, s15
 80122c8:	3718      	adds	r7, #24
 80122ca:	46bd      	mov	sp, r7
 80122cc:	bd80      	pop	{r7, pc}
 80122ce:	bf00      	nop
 80122d0:	0801c0f8 	.word	0x0801c0f8
 80122d4:	0801c138 	.word	0x0801c138

080122d8 <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 80122d8:	b580      	push	{r7, lr}
 80122da:	ed2d 8b02 	vpush	{d8}
 80122de:	b092      	sub	sp, #72	@ 0x48
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 80122e6:	f107 0310 	add.w	r3, r7, #16
 80122ea:	2224      	movs	r2, #36	@ 0x24
 80122ec:	2100      	movs	r1, #0
 80122ee:	4618      	mov	r0, r3
 80122f0:	f006 ffcc 	bl	801928c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80122f4:	2301      	movs	r3, #1
 80122f6:	813b      	strh	r3, [r7, #8]
 80122f8:	2309      	movs	r3, #9
 80122fa:	817b      	strh	r3, [r7, #10]
 80122fc:	f107 0310 	add.w	r3, r7, #16
 8012300:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	ed93 7a00 	vldr	s14, [r3]
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	edd3 7a00 	vldr	s15, [r3]
 801230e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012312:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	ed93 7a01 	vldr	s14, [r3, #4]
 801231c:	683b      	ldr	r3, [r7, #0]
 801231e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012326:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012330:	683b      	ldr	r3, [r7, #0]
 8012332:	edd3 7a02 	vldr	s15, [r3, #8]
 8012336:	ee77 7a67 	vsub.f32	s15, s14, s15
 801233a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

  float measuredDistance = d->distance;
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	691b      	ldr	r3, [r3, #16]
 8012342:	63bb      	str	r3, [r7, #56]	@ 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8012344:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012348:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 801234c:	f007 f8b0 	bl	80194b0 <powf>
 8012350:	eeb0 8a40 	vmov.f32	s16, s0
 8012354:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012358:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 801235c:	f007 f8a8 	bl	80194b0 <powf>
 8012360:	eef0 7a40 	vmov.f32	s15, s0
 8012364:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012368:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801236c:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8012370:	f007 f89e 	bl	80194b0 <powf>
 8012374:	eef0 7a40 	vmov.f32	s15, s0
 8012378:	ee78 7a27 	vadd.f32	s15, s16, s15
 801237c:	eeb0 0a67 	vmov.f32	s0, s15
 8012380:	f7ff ff6e 	bl	8012260 <arm_sqrt>
 8012384:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  if (predictedDistance != 0.0f) {
 8012388:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801238c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012394:	d018      	beq.n	80123c8 <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 8012396:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 801239a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801239e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123a2:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 80123a6:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80123aa:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80123ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123b2:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 80123b6:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80123ba:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80123be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123c2:	edc7 7a06 	vstr	s15, [r7, #24]
 80123c6:	e008      	b.n	80123da <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 80123c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80123cc:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 80123ce:	f04f 0300 	mov.w	r3, #0
 80123d2:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 80123d4:	f04f 0300 	mov.w	r3, #0
 80123d8:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 80123da:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80123de:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80123e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	ed93 7a05 	vldr	s14, [r3, #20]
 80123ec:	f107 0308 	add.w	r3, r7, #8
 80123f0:	eef0 0a47 	vmov.f32	s1, s14
 80123f4:	eeb0 0a67 	vmov.f32	s0, s15
 80123f8:	4619      	mov	r1, r3
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7fd faa4 	bl	800f948 <kalmanCoreScalarUpdate>
}
 8012400:	bf00      	nop
 8012402:	3748      	adds	r7, #72	@ 0x48
 8012404:	46bd      	mov	sp, r7
 8012406:	ecbd 8b02 	vpop	{d8}
 801240a:	bd80      	pop	{r7, pc}

0801240c <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f003 0303 	and.w	r3, r3, #3
 8012420:	2b00      	cmp	r3, #0
 8012422:	d004      	beq.n	801242e <assert_aligned_4_bytes+0x22>
 8012424:	2239      	movs	r2, #57	@ 0x39
 8012426:	4904      	ldr	r1, [pc, #16]	@ (8012438 <assert_aligned_4_bytes+0x2c>)
 8012428:	4804      	ldr	r0, [pc, #16]	@ (801243c <assert_aligned_4_bytes+0x30>)
 801242a:	f001 fc7d 	bl	8013d28 <assertFail>
}
 801242e:	bf00      	nop
 8012430:	3710      	adds	r7, #16
 8012432:	46bd      	mov	sp, r7
 8012434:	bd80      	pop	{r7, pc}
 8012436:	bf00      	nop
 8012438:	0801c154 	.word	0x0801c154
 801243c:	0801c194 	.word	0x0801c194

08012440 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7ff ffde 	bl	801240c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8012450:	6838      	ldr	r0, [r7, #0]
 8012452:	f7ff ffdb 	bl	801240c <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 8012456:	6839      	ldr	r1, [r7, #0]
 8012458:	6878      	ldr	r0, [r7, #4]
 801245a:	f006 fc33 	bl	8018cc4 <arm_mat_trans_f32>
 801245e:	4603      	mov	r3, r0
 8012460:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8012462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d004      	beq.n	8012474 <mat_trans+0x34>
 801246a:	2241      	movs	r2, #65	@ 0x41
 801246c:	4903      	ldr	r1, [pc, #12]	@ (801247c <mat_trans+0x3c>)
 801246e:	4804      	ldr	r0, [pc, #16]	@ (8012480 <mat_trans+0x40>)
 8012470:	f001 fc5a 	bl	8013d28 <assertFail>
}
 8012474:	bf00      	nop
 8012476:	3710      	adds	r7, #16
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	0801c154 	.word	0x0801c154
 8012480:	0801c1ac 	.word	0x0801c1ac

08012484 <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8012484:	b580      	push	{r7, lr}
 8012486:	b084      	sub	sp, #16
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f7ff ffbc 	bl	801240c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8012494:	6838      	ldr	r0, [r7, #0]
 8012496:	f7ff ffb9 	bl	801240c <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 801249a:	6839      	ldr	r1, [r7, #0]
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f006 fd5f 	bl	8018f60 <arm_mat_inverse_f32>
 80124a2:	4603      	mov	r3, r0
 80124a4:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 80124a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d004      	beq.n	80124b8 <mat_inv+0x34>
 80124ae:	2249      	movs	r2, #73	@ 0x49
 80124b0:	4903      	ldr	r1, [pc, #12]	@ (80124c0 <mat_inv+0x3c>)
 80124b2:	4804      	ldr	r0, [pc, #16]	@ (80124c4 <mat_inv+0x40>)
 80124b4:	f001 fc38 	bl	8013d28 <assertFail>
}
 80124b8:	bf00      	nop
 80124ba:	3710      	adds	r7, #16
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	0801c154 	.word	0x0801c154
 80124c4:	0801c1ac 	.word	0x0801c1ac

080124c8 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b086      	sub	sp, #24
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	60f8      	str	r0, [r7, #12]
 80124d0:	60b9      	str	r1, [r7, #8]
 80124d2:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f7ff ff99 	bl	801240c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 80124da:	68b8      	ldr	r0, [r7, #8]
 80124dc:	f7ff ff96 	bl	801240c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f7ff ff93 	bl	801240c <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 80124e6:	687a      	ldr	r2, [r7, #4]
 80124e8:	68b9      	ldr	r1, [r7, #8]
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f006 fc98 	bl	8018e20 <arm_mat_mult_f32>
 80124f0:	4603      	mov	r3, r0
 80124f2:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 80124f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d004      	beq.n	8012506 <mat_mult+0x3e>
 80124fc:	2252      	movs	r2, #82	@ 0x52
 80124fe:	4904      	ldr	r1, [pc, #16]	@ (8012510 <mat_mult+0x48>)
 8012500:	4804      	ldr	r0, [pc, #16]	@ (8012514 <mat_mult+0x4c>)
 8012502:	f001 fc11 	bl	8013d28 <assertFail>
}
 8012506:	bf00      	nop
 8012508:	3718      	adds	r7, #24
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	0801c154 	.word	0x0801c154
 8012514:	0801c1ac 	.word	0x0801c1ac

08012518 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8012518:	b580      	push	{r7, lr}
 801251a:	b086      	sub	sp, #24
 801251c:	af00      	add	r7, sp, #0
 801251e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8012522:	f04f 0300 	mov.w	r3, #0
 8012526:	60bb      	str	r3, [r7, #8]
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	613b      	str	r3, [r7, #16]
 801252c:	f107 0308 	add.w	r3, r7, #8
 8012530:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8012532:	edd7 7a04 	vldr	s15, [r7, #16]
 8012536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801253a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801253e:	db0a      	blt.n	8012556 <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 8012540:	ed97 0a04 	vldr	s0, [r7, #16]
 8012544:	f007 f80c 	bl	8019560 <sqrtf>
 8012548:	eef0 7a40 	vmov.f32	s15, s0
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8012552:	2300      	movs	r3, #0
 8012554:	e005      	b.n	8012562 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	f04f 0200 	mov.w	r2, #0
 801255c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 801255e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 8012562:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8012564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d004      	beq.n	8012576 <arm_sqrt+0x5e>
 801256c:	2258      	movs	r2, #88	@ 0x58
 801256e:	4906      	ldr	r1, [pc, #24]	@ (8012588 <arm_sqrt+0x70>)
 8012570:	4806      	ldr	r0, [pc, #24]	@ (801258c <arm_sqrt+0x74>)
 8012572:	f001 fbd9 	bl	8013d28 <assertFail>
  return pOut;
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	ee07 3a90 	vmov	s15, r3
}
 801257c:	eeb0 0a67 	vmov.f32	s0, s15
 8012580:	3718      	adds	r7, #24
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}
 8012586:	bf00      	nop
 8012588:	0801c154 	.word	0x0801c154
 801258c:	0801c1ac 	.word	0x0801c1ac

08012590 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 8012590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012594:	b08d      	sub	sp, #52	@ 0x34
 8012596:	af00      	add	r7, sp, #0
 8012598:	60f8      	str	r0, [r7, #12]
 801259a:	60b9      	str	r1, [r7, #8]
 801259c:	607a      	str	r2, [r7, #4]
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	603a      	str	r2, [r7, #0]
 80125a2:	1e53      	subs	r3, r2, #1
 80125a4:	61bb      	str	r3, [r7, #24]
 80125a6:	2300      	movs	r3, #0
 80125a8:	4690      	mov	r8, r2
 80125aa:	4699      	mov	r9, r3
 80125ac:	f04f 0200 	mov.w	r2, #0
 80125b0:	f04f 0300 	mov.w	r3, #0
 80125b4:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80125b8:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80125bc:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80125c0:	68fe      	ldr	r6, [r7, #12]
 80125c2:	1e73      	subs	r3, r6, #1
 80125c4:	617b      	str	r3, [r7, #20]
 80125c6:	4632      	mov	r2, r6
 80125c8:	2300      	movs	r3, #0
 80125ca:	4614      	mov	r4, r2
 80125cc:	461d      	mov	r5, r3
 80125ce:	f04f 0200 	mov.w	r2, #0
 80125d2:	f04f 0300 	mov.w	r3, #0
 80125d6:	016b      	lsls	r3, r5, #5
 80125d8:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80125dc:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 80125de:	2300      	movs	r3, #0
 80125e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80125e2:	e0af      	b.n	8012744 <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 80125e4:	2300      	movs	r3, #0
 80125e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80125e8:	e0a4      	b.n	8012734 <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 80125ea:	f04f 0300 	mov.w	r3, #0
 80125ee:	627b      	str	r3, [r7, #36]	@ 0x24
            if (j == i) // summation for diagnols 
 80125f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d146      	bne.n	8012686 <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 80125f8:	2300      	movs	r3, #0
 80125fa:	623b      	str	r3, [r7, #32]
 80125fc:	e01c      	b.n	8012638 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 80125fe:	4632      	mov	r2, r6
 8012600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012602:	fb02 f303 	mul.w	r3, r2, r3
 8012606:	009b      	lsls	r3, r3, #2
 8012608:	687a      	ldr	r2, [r7, #4]
 801260a:	441a      	add	r2, r3
 801260c:	6a3b      	ldr	r3, [r7, #32]
 801260e:	009b      	lsls	r3, r3, #2
 8012610:	4413      	add	r3, r2
 8012612:	edd3 7a00 	vldr	s15, [r3]
 8012616:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801261a:	eeb0 0a67 	vmov.f32	s0, s15
 801261e:	f006 ff47 	bl	80194b0 <powf>
 8012622:	eeb0 7a40 	vmov.f32	s14, s0
 8012626:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801262a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801262e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 8012632:	6a3b      	ldr	r3, [r7, #32]
 8012634:	3301      	adds	r3, #1
 8012636:	623b      	str	r3, [r7, #32]
 8012638:	6a3a      	ldr	r2, [r7, #32]
 801263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801263c:	429a      	cmp	r2, r3
 801263e:	dbde      	blt.n	80125fe <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 8012640:	683a      	ldr	r2, [r7, #0]
 8012642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012644:	fb02 f303 	mul.w	r3, r2, r3
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	68ba      	ldr	r2, [r7, #8]
 801264c:	441a      	add	r2, r3
 801264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012650:	009b      	lsls	r3, r3, #2
 8012652:	4413      	add	r3, r2
 8012654:	ed93 7a00 	vldr	s14, [r3]
 8012658:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801265c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012660:	4632      	mov	r2, r6
 8012662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012664:	fb02 f303 	mul.w	r3, r2, r3
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	687a      	ldr	r2, [r7, #4]
 801266c:	18d4      	adds	r4, r2, r3
 801266e:	eeb0 0a67 	vmov.f32	s0, s15
 8012672:	f006 ff75 	bl	8019560 <sqrtf>
 8012676:	eef0 7a40 	vmov.f32	s15, s0
 801267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801267c:	009b      	lsls	r3, r3, #2
 801267e:	4423      	add	r3, r4
 8012680:	edc3 7a00 	vstr	s15, [r3]
 8012684:	e053      	b.n	801272e <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 8012686:	2300      	movs	r3, #0
 8012688:	61fb      	str	r3, [r7, #28]
 801268a:	e022      	b.n	80126d2 <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 801268c:	4632      	mov	r2, r6
 801268e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012690:	fb02 f303 	mul.w	r3, r2, r3
 8012694:	009b      	lsls	r3, r3, #2
 8012696:	687a      	ldr	r2, [r7, #4]
 8012698:	441a      	add	r2, r3
 801269a:	69fb      	ldr	r3, [r7, #28]
 801269c:	009b      	lsls	r3, r3, #2
 801269e:	4413      	add	r3, r2
 80126a0:	ed93 7a00 	vldr	s14, [r3]
 80126a4:	4632      	mov	r2, r6
 80126a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126a8:	fb02 f303 	mul.w	r3, r2, r3
 80126ac:	009b      	lsls	r3, r3, #2
 80126ae:	687a      	ldr	r2, [r7, #4]
 80126b0:	441a      	add	r2, r3
 80126b2:	69fb      	ldr	r3, [r7, #28]
 80126b4:	009b      	lsls	r3, r3, #2
 80126b6:	4413      	add	r3, r2
 80126b8:	edd3 7a00 	vldr	s15, [r3]
 80126bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126c0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80126c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126c8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	3301      	adds	r3, #1
 80126d0:	61fb      	str	r3, [r7, #28]
 80126d2:	69fa      	ldr	r2, [r7, #28]
 80126d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126d6:	429a      	cmp	r2, r3
 80126d8:	dbd8      	blt.n	801268c <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 80126da:	683a      	ldr	r2, [r7, #0]
 80126dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126de:	fb02 f303 	mul.w	r3, r2, r3
 80126e2:	009b      	lsls	r3, r3, #2
 80126e4:	68ba      	ldr	r2, [r7, #8]
 80126e6:	441a      	add	r2, r3
 80126e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ea:	009b      	lsls	r3, r3, #2
 80126ec:	4413      	add	r3, r2
 80126ee:	ed93 7a00 	vldr	s14, [r3]
 80126f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80126f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80126fa:	4632      	mov	r2, r6
 80126fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126fe:	fb02 f303 	mul.w	r3, r2, r3
 8012702:	009b      	lsls	r3, r3, #2
 8012704:	687a      	ldr	r2, [r7, #4]
 8012706:	441a      	add	r2, r3
 8012708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801270a:	009b      	lsls	r3, r3, #2
 801270c:	4413      	add	r3, r2
 801270e:	ed93 7a00 	vldr	s14, [r3]
 8012712:	4632      	mov	r2, r6
 8012714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012716:	fb02 f303 	mul.w	r3, r2, r3
 801271a:	009b      	lsls	r3, r3, #2
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	441a      	add	r2, r3
 8012720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012726:	009b      	lsls	r3, r3, #2
 8012728:	4413      	add	r3, r2
 801272a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 801272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012730:	3301      	adds	r3, #1
 8012732:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012734:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012738:	429a      	cmp	r2, r3
 801273a:	f77f af56 	ble.w	80125ea <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 801273e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012740:	3301      	adds	r3, #1
 8012742:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012744:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	429a      	cmp	r2, r3
 801274a:	f6ff af4b 	blt.w	80125e4 <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 801274e:	bf00      	nop
 8012750:	bf00      	nop
 8012752:	3734      	adds	r7, #52	@ 0x34
 8012754:	46bd      	mov	sp, r7
 8012756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801275a <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 801275a:	b480      	push	{r7}
 801275c:	b085      	sub	sp, #20
 801275e:	af00      	add	r7, sp, #0
 8012760:	ed87 0a01 	vstr	s0, [r7, #4]
 8012764:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 8012766:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801276a:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 801276c:	edd7 7a01 	vldr	s15, [r7, #4]
 8012770:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012774:	ed97 7a03 	vldr	s14, [r7, #12]
 8012778:	ee77 7a27 	vadd.f32	s15, s14, s15
 801277c:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8012780:	edd7 7a03 	vldr	s15, [r7, #12]
 8012784:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012788:	edd7 7a02 	vldr	s15, [r7, #8]
 801278c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	edc3 7a00 	vstr	s15, [r3]
}
 801279a:	bf00      	nop
 801279c:	3714      	adds	r7, #20
 801279e:	46bd      	mov	sp, r7
 80127a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a4:	4770      	bx	lr

080127a6 <GM_state>:

static void GM_state(float e, float * GM_e){
 80127a6:	b480      	push	{r7}
 80127a8:	b085      	sub	sp, #20
 80127aa:	af00      	add	r7, sp, #0
 80127ac:	ed87 0a01 	vstr	s0, [r7, #4]
 80127b0:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 80127b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80127b6:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 80127b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80127bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80127c0:	ed97 7a03 	vldr	s14, [r7, #12]
 80127c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80127c8:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 80127cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80127d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80127d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80127d8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80127dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127e0:	683b      	ldr	r3, [r7, #0]
 80127e2:	edc3 7a00 	vstr	s15, [r3]
}
 80127e6:	bf00      	nop
 80127e8:	3714      	adds	r7, #20
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
	...

080127f4 <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	ed2d 8b02 	vpush	{d8}
 80127fa:	b0f8      	sub	sp, #480	@ 0x1e0
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012802:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8012806:	6018      	str	r0, [r3, #0]
 8012808:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801280c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012810:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 8012812:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012816:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	ed93 7a00 	vldr	s14, [r3]
 8012820:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012824:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	edd3 7a00 	vldr	s15, [r3]
 801282e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012832:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 8012836:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801283a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	ed93 7a01 	vldr	s14, [r3, #4]
 8012844:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012848:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012852:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012856:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 801285a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801285e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	ed93 7a02 	vldr	s14, [r3, #8]
 8012868:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801286c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	edd3 7a02 	vldr	s15, [r3, #8]
 8012876:	ee77 7a67 	vsub.f32	s15, s14, s15
 801287a:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8
    float measuredDistance = d->distance;
 801287e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012882:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	691b      	ldr	r3, [r3, #16]
 801288a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 801288e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012892:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 8012896:	f006 fe0b 	bl	80194b0 <powf>
 801289a:	eeb0 8a40 	vmov.f32	s16, s0
 801289e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80128a2:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 80128a6:	f006 fe03 	bl	80194b0 <powf>
 80128aa:	eef0 7a40 	vmov.f32	s15, s0
 80128ae:	ee38 8a27 	vadd.f32	s16, s16, s15
 80128b2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80128b6:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 80128ba:	f006 fdf9 	bl	80194b0 <powf>
 80128be:	eef0 7a40 	vmov.f32	s15, s0
 80128c2:	ee78 7a27 	vadd.f32	s15, s16, s15
 80128c6:	eeb0 0a67 	vmov.f32	s0, s15
 80128ca:	f7ff fe25 	bl	8012518 <arm_sqrt>
 80128ce:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 80128d2:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 80128d6:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80128da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128de:	edc7 7a67 	vstr	s15, [r7, #412]	@ 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 80128e2:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80128e6:	2224      	movs	r2, #36	@ 0x24
 80128e8:	2100      	movs	r1, #0
 80128ea:	4618      	mov	r0, r3
 80128ec:	f006 fcce 	bl	801928c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 80128f0:	2301      	movs	r3, #1
 80128f2:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 80128f6:	2309      	movs	r3, #9
 80128f8:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
 80128fc:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8012900:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 8012904:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012908:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8012912:	f107 0310 	add.w	r3, r7, #16
 8012916:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 801291a:	4618      	mov	r0, r3
 801291c:	f006 fcfc 	bl	8019318 <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 8012920:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012924:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	ed93 7a05 	vldr	s14, [r3, #20]
 801292e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012932:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	edd3 7a05 	vldr	s15, [r3, #20]
 801293c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012940:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 8012944:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012948:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	2224      	movs	r2, #36	@ 0x24
 8012950:	4619      	mov	r1, r3
 8012952:	48cf      	ldr	r0, [pc, #828]	@ (8012c90 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 8012954:	f006 fce0 	bl	8019318 <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 8012958:	2300      	movs	r3, #0
 801295a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 801295e:	e2c3      	b.n	8012ee8 <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 8012960:	f107 0310 	add.w	r3, r7, #16
 8012964:	4acb      	ldr	r2, [pc, #812]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012966:	4619      	mov	r1, r3
 8012968:	2009      	movs	r0, #9
 801296a:	f7ff fe11 	bl	8012590 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 801296e:	49ca      	ldr	r1, [pc, #808]	@ (8012c98 <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 8012970:	48ca      	ldr	r0, [pc, #808]	@ (8012c9c <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 8012972:	f7ff fd65 	bl	8012440 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 8012976:	ed97 0a77 	vldr	s0, [r7, #476]	@ 0x1dc
 801297a:	f006 fdf1 	bl	8019560 <sqrtf>
 801297e:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 8012982:	4bc3      	ldr	r3, [pc, #780]	@ (8012c90 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 801298a:	4bc1      	ldr	r3, [pc, #772]	@ (8012c90 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 801298c:	685b      	ldr	r3, [r3, #4]
 801298e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8012992:	4bbf      	ldr	r3, [pc, #764]	@ (8012c90 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 801299a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801299e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	edd3 7a00 	vldr	s15, [r3]
 80129a8:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 80129ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129b0:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
 80129b4:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80129b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	edd3 7a01 	vldr	s15, [r3, #4]
 80129c2:	ed97 7a64 	vldr	s14, [r7, #400]	@ 0x190
 80129c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129ca:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
 80129ce:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80129d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80129dc:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80129e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80129e4:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 80129e8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80129ec:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 80129f0:	f006 fd5e 	bl	80194b0 <powf>
 80129f4:	eeb0 8a40 	vmov.f32	s16, s0
 80129f8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80129fc:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 8012a00:	f006 fd56 	bl	80194b0 <powf>
 8012a04:	eef0 7a40 	vmov.f32	s15, s0
 8012a08:	ee38 8a27 	vadd.f32	s16, s16, s15
 8012a0c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012a10:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 8012a14:	f006 fd4c 	bl	80194b0 <powf>
 8012a18:	eef0 7a40 	vmov.f32	s15, s0
 8012a1c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8012a20:	eeb0 0a67 	vmov.f32	s0, s15
 8012a24:	f7ff fd78 	bl	8012518 <arm_sqrt>
 8012a28:	ed87 0a62 	vstr	s0, [r7, #392]	@ 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 8012a2c:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8012a30:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8012a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012a38:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184

        float e_y = error_iter;
 8012a3c:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8012a40:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

        if (predicted_iter != 0.0f) {
 8012a44:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8012a48:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a50:	d018      	beq.n	8012a84 <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 8012a52:	edd7 6a6c 	vldr	s13, [r7, #432]	@ 0x1b0
 8012a56:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8012a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a5e:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 8012a62:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 8012a66:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8012a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a6e:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 8012a72:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 8012a76:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8012a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012a7e:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
 8012a82:	e00b      	b.n	8012a9c <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 8012a84:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8012a88:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = 0.0f;
 8012a8c:	f04f 0300 	mov.w	r3, #0
 8012a90:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = 0.0f;
 8012a94:	f04f 0300 	mov.w	r3, #0
 8012a98:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 8012a9c:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8012aa0:	eef0 7ae7 	vabs.f32	s15, s15
 8012aa4:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8012ca0 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 8012aa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab0:	d508      	bpl.n	8012ac4 <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 8012ab2:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 8012ab6:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8012ca0 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 8012aba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012abe:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
 8012ac2:	e007      	b.n	8012ad4 <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 8012ac4:	edd7 6a61 	vldr	s13, [r7, #388]	@ 0x184
 8012ac8:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 8012acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012ad0:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 8012ad4:	2300      	movs	r3, #0
 8012ad6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8012ada:	e095      	b.n	8012c08 <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 8012adc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012ae0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8012ae4:	e086      	b.n	8012bf4 <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 8012ae6:	496b      	ldr	r1, [pc, #428]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012ae8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012aec:	4613      	mov	r3, r2
 8012aee:	00db      	lsls	r3, r3, #3
 8012af0:	4413      	add	r3, r2
 8012af2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012af6:	4413      	add	r3, r2
 8012af8:	009b      	lsls	r3, r3, #2
 8012afa:	440b      	add	r3, r1
 8012afc:	edd3 7a00 	vldr	s15, [r3]
 8012b00:	eef4 7a67 	vcmp.f32	s15, s15
 8012b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b08:	d613      	bvs.n	8012b32 <kalmanCoreRobustUpdateWithDistance+0x33e>
 8012b0a:	4962      	ldr	r1, [pc, #392]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012b0c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012b10:	4613      	mov	r3, r2
 8012b12:	00db      	lsls	r3, r3, #3
 8012b14:	4413      	add	r3, r2
 8012b16:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012b1a:	4413      	add	r3, r2
 8012b1c:	009b      	lsls	r3, r3, #2
 8012b1e:	440b      	add	r3, r1
 8012b20:	edd3 7a00 	vldr	s15, [r3]
 8012b24:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8012ca4 <kalmanCoreRobustUpdateWithDistance+0x4b0>
 8012b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b30:	dd0d      	ble.n	8012b4e <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 8012b32:	4958      	ldr	r1, [pc, #352]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012b34:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012b38:	4613      	mov	r3, r2
 8012b3a:	00db      	lsls	r3, r3, #3
 8012b3c:	4413      	add	r3, r2
 8012b3e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012b42:	4413      	add	r3, r2
 8012b44:	009b      	lsls	r3, r3, #2
 8012b46:	440b      	add	r3, r1
 8012b48:	4a57      	ldr	r2, [pc, #348]	@ (8012ca8 <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 8012b4a:	601a      	str	r2, [r3, #0]
 8012b4c:	e04d      	b.n	8012bea <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 8012b4e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012b52:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d021      	beq.n	8012b9e <kalmanCoreRobustUpdateWithDistance+0x3aa>
 8012b5a:	494e      	ldr	r1, [pc, #312]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012b5c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012b60:	4613      	mov	r3, r2
 8012b62:	00db      	lsls	r3, r3, #3
 8012b64:	4413      	add	r3, r2
 8012b66:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012b6a:	4413      	add	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	440b      	add	r3, r1
 8012b70:	edd3 7a00 	vldr	s15, [r3]
 8012b74:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012cac <kalmanCoreRobustUpdateWithDistance+0x4b8>
 8012b78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b80:	d50d      	bpl.n	8012b9e <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 8012b82:	4944      	ldr	r1, [pc, #272]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012b84:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012b88:	4613      	mov	r3, r2
 8012b8a:	00db      	lsls	r3, r3, #3
 8012b8c:	4413      	add	r3, r2
 8012b8e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012b92:	4413      	add	r3, r2
 8012b94:	009b      	lsls	r3, r3, #2
 8012b96:	440b      	add	r3, r1
 8012b98:	4a45      	ldr	r2, [pc, #276]	@ (8012cb0 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 8012b9a:	601a      	str	r2, [r3, #0]
 8012b9c:	e025      	b.n	8012bea <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 8012b9e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012ba2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d11f      	bne.n	8012bea <kalmanCoreRobustUpdateWithDistance+0x3f6>
 8012baa:	493a      	ldr	r1, [pc, #232]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012bac:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012bb0:	4613      	mov	r3, r2
 8012bb2:	00db      	lsls	r3, r3, #3
 8012bb4:	4413      	add	r3, r2
 8012bb6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012bba:	4413      	add	r3, r2
 8012bbc:	009b      	lsls	r3, r3, #2
 8012bbe:	440b      	add	r3, r1
 8012bc0:	edd3 7a00 	vldr	s15, [r3]
 8012bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bcc:	d50d      	bpl.n	8012bea <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 8012bce:	4931      	ldr	r1, [pc, #196]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012bd0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	00db      	lsls	r3, r3, #3
 8012bd8:	4413      	add	r3, r2
 8012bda:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012bde:	4413      	add	r3, r2
 8012be0:	009b      	lsls	r3, r3, #2
 8012be2:	440b      	add	r3, r1
 8012be4:	f04f 0200 	mov.w	r2, #0
 8012be8:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 8012bea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8012bee:	3301      	adds	r3, #1
 8012bf0:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8012bf4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8012bf8:	2b08      	cmp	r3, #8
 8012bfa:	f77f af74 	ble.w	8012ae6 <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 8012bfe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012c02:	3301      	adds	r3, #1
 8012c04:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8012c08:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8012c0c:	2b08      	cmp	r3, #8
 8012c0e:	f77f af65 	ble.w	8012adc <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 8012c12:	4b28      	ldr	r3, [pc, #160]	@ (8012cb4 <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 8012c14:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 8012c18:	2300      	movs	r3, #0
 8012c1a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8012c1e:	e01c      	b.n	8012c5a <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 8012c20:	491c      	ldr	r1, [pc, #112]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012c22:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8012c26:	4613      	mov	r3, r2
 8012c28:	009b      	lsls	r3, r3, #2
 8012c2a:	4413      	add	r3, r2
 8012c2c:	00db      	lsls	r3, r3, #3
 8012c2e:	440b      	add	r3, r1
 8012c30:	ed93 7a00 	vldr	s14, [r3]
 8012c34:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8012c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c3c:	4915      	ldr	r1, [pc, #84]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012c3e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8012c42:	4613      	mov	r3, r2
 8012c44:	009b      	lsls	r3, r3, #2
 8012c46:	4413      	add	r3, r2
 8012c48:	00db      	lsls	r3, r3, #3
 8012c4a:	440b      	add	r3, r1
 8012c4c:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 8012c50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8012c54:	3301      	adds	r3, #1
 8012c56:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8012c5a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8012c5e:	2b08      	cmp	r3, #8
 8012c60:	ddde      	ble.n	8012c20 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 8012c62:	4a15      	ldr	r2, [pc, #84]	@ (8012cb8 <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 8012c64:	4b0b      	ldr	r3, [pc, #44]	@ (8012c94 <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012c66:	4610      	mov	r0, r2
 8012c68:	4619      	mov	r1, r3
 8012c6a:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8012c6e:	461a      	mov	r2, r3
 8012c70:	f006 fb52 	bl	8019318 <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 8012c74:	4911      	ldr	r1, [pc, #68]	@ (8012cbc <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 8012c76:	4812      	ldr	r0, [pc, #72]	@ (8012cc0 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 8012c78:	f7ff fc04 	bl	8012484 <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 8012c7c:	4a11      	ldr	r2, [pc, #68]	@ (8012cc4 <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 8012c7e:	4912      	ldr	r1, [pc, #72]	@ (8012cc8 <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 8012c80:	480e      	ldr	r0, [pc, #56]	@ (8012cbc <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 8012c82:	f7ff fc21 	bl	80124c8 <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 8012c86:	2300      	movs	r3, #0
 8012c88:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8012c8c:	e04f      	b.n	8012d2e <kalmanCoreRobustUpdateWithDistance+0x53a>
 8012c8e:	bf00      	nop
 8012c90:	20009b90 	.word	0x20009b90
 8012c94:	20009bb4 	.word	0x20009bb4
 8012c98:	200000e8 	.word	0x200000e8
 8012c9c:	200000e0 	.word	0x200000e0
 8012ca0:	38d1b717 	.word	0x38d1b717
 8012ca4:	42c80000 	.word	0x42c80000
 8012ca8:	42c80000 	.word	0x42c80000
 8012cac:	c2c80000 	.word	0xc2c80000
 8012cb0:	c2c80000 	.word	0xc2c80000
 8012cb4:	3089705f 	.word	0x3089705f
 8012cb8:	20009cf8 	.word	0x20009cf8
 8012cbc:	200000f8 	.word	0x200000f8
 8012cc0:	200000f0 	.word	0x200000f0
 8012cc4:	20000108 	.word	0x20000108
 8012cc8:	20000100 	.word	0x20000100
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 8012ccc:	4a93      	ldr	r2, [pc, #588]	@ (8012f1c <kalmanCoreRobustUpdateWithDistance+0x728>)
 8012cce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8012cd2:	009b      	lsls	r3, r3, #2
 8012cd4:	4413      	add	r3, r2
 8012cd6:	edd3 7a00 	vldr	s15, [r3]
 8012cda:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8012cde:	4613      	mov	r3, r2
 8012ce0:	009b      	lsls	r3, r3, #2
 8012ce2:	4413      	add	r3, r2
 8012ce4:	00db      	lsls	r3, r3, #3
 8012ce6:	4a8e      	ldr	r2, [pc, #568]	@ (8012f20 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8012ce8:	4413      	add	r3, r2
 8012cea:	4618      	mov	r0, r3
 8012cec:	eeb0 0a67 	vmov.f32	s0, s15
 8012cf0:	f7ff fd59 	bl	80127a6 <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 8012cf4:	498a      	ldr	r1, [pc, #552]	@ (8012f20 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8012cf6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8012cfa:	4613      	mov	r3, r2
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	00db      	lsls	r3, r3, #3
 8012d02:	440b      	add	r3, r1
 8012d04:	ed93 7a00 	vldr	s14, [r3]
 8012d08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012d10:	4983      	ldr	r1, [pc, #524]	@ (8012f20 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8012d12:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8012d16:	4613      	mov	r3, r2
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	00db      	lsls	r3, r3, #3
 8012d1e:	440b      	add	r3, r1
 8012d20:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 8012d24:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8012d28:	3301      	adds	r3, #1
 8012d2a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8012d2e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8012d32:	2b08      	cmp	r3, #8
 8012d34:	ddca      	ble.n	8012ccc <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 8012d36:	4a7b      	ldr	r2, [pc, #492]	@ (8012f24 <kalmanCoreRobustUpdateWithDistance+0x730>)
 8012d38:	497b      	ldr	r1, [pc, #492]	@ (8012f28 <kalmanCoreRobustUpdateWithDistance+0x734>)
 8012d3a:	487c      	ldr	r0, [pc, #496]	@ (8012f2c <kalmanCoreRobustUpdateWithDistance+0x738>)
 8012d3c:	f7ff fbc4 	bl	80124c8 <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 8012d40:	4a7b      	ldr	r2, [pc, #492]	@ (8012f30 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8012d42:	497c      	ldr	r1, [pc, #496]	@ (8012f34 <kalmanCoreRobustUpdateWithDistance+0x740>)
 8012d44:	4877      	ldr	r0, [pc, #476]	@ (8012f24 <kalmanCoreRobustUpdateWithDistance+0x730>)
 8012d46:	f7ff fbbf 	bl	80124c8 <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 8012d4a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012d4e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012d52:	f04f 0200 	mov.w	r2, #0
 8012d56:	601a      	str	r2, [r3, #0]
 8012d58:	f04f 0300 	mov.w	r3, #0
 8012d5c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 8012d60:	f107 030c 	add.w	r3, r7, #12
 8012d64:	4618      	mov	r0, r3
 8012d66:	ed97 0a75 	vldr	s0, [r7, #468]	@ 0x1d4
 8012d6a:	f7ff fcf6 	bl	801275a <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 8012d6e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012d72:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012d76:	edd3 7a00 	vldr	s15, [r3]
 8012d7a:	eef0 7ae7 	vabs.f32	s15, s15
 8012d7e:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8012f38 <kalmanCoreRobustUpdateWithDistance+0x744>
 8012d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d8a:	d50a      	bpl.n	8012da2 <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 8012d8c:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8012d90:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012d94:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8012f38 <kalmanCoreRobustUpdateWithDistance+0x744>
 8012d98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012d9c:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
 8012da0:	e00d      	b.n	8012dbe <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 8012da2:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8012da6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012daa:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012dae:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8012db2:	ed93 7a00 	vldr	s14, [r3]
 8012db6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dba:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 8012dbe:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8012dc2:	495e      	ldr	r1, [pc, #376]	@ (8012f3c <kalmanCoreRobustUpdateWithDistance+0x748>)
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7ff fb3b 	bl	8012440 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 8012dca:	4a5d      	ldr	r2, [pc, #372]	@ (8012f40 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 8012dcc:	495b      	ldr	r1, [pc, #364]	@ (8012f3c <kalmanCoreRobustUpdateWithDistance+0x748>)
 8012dce:	4858      	ldr	r0, [pc, #352]	@ (8012f30 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8012dd0:	f7ff fb7a 	bl	80124c8 <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 8012dd4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8012dd8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 8012ddc:	2300      	movs	r3, #0
 8012dde:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8012de2:	e01c      	b.n	8012e1e <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 8012de4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8012de8:	009b      	lsls	r3, r3, #2
 8012dea:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8012dee:	443b      	add	r3, r7
 8012df0:	3b84      	subs	r3, #132	@ 0x84
 8012df2:	ed93 7a00 	vldr	s14, [r3]
 8012df6:	4a53      	ldr	r2, [pc, #332]	@ (8012f44 <kalmanCoreRobustUpdateWithDistance+0x750>)
 8012df8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8012dfc:	009b      	lsls	r3, r3, #2
 8012dfe:	4413      	add	r3, r2
 8012e00:	edd3 7a00 	vldr	s15, [r3]
 8012e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e08:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 8012e0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e10:	edc7 7a6f 	vstr	s15, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 8012e14:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8012e18:	3301      	adds	r3, #1
 8012e1a:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8012e1e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8012e22:	2b08      	cmp	r3, #8
 8012e24:	ddde      	ble.n	8012de4 <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 8012e26:	2300      	movs	r3, #0
 8012e28:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8012e2c:	e043      	b.n	8012eb6 <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 8012e2e:	4a45      	ldr	r2, [pc, #276]	@ (8012f44 <kalmanCoreRobustUpdateWithDistance+0x750>)
 8012e30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012e34:	009b      	lsls	r3, r3, #2
 8012e36:	4413      	add	r3, r2
 8012e38:	edd3 6a00 	vldr	s13, [r3]
 8012e3c:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 8012e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012e44:	4a40      	ldr	r2, [pc, #256]	@ (8012f48 <kalmanCoreRobustUpdateWithDistance+0x754>)
 8012e46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	4413      	add	r3, r2
 8012e4e:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 8012e52:	4a3d      	ldr	r2, [pc, #244]	@ (8012f48 <kalmanCoreRobustUpdateWithDistance+0x754>)
 8012e54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012e58:	009b      	lsls	r3, r3, #2
 8012e5a:	4413      	add	r3, r2
 8012e5c:	ed93 7a00 	vldr	s14, [r3]
 8012e60:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8012e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012e68:	4a38      	ldr	r2, [pc, #224]	@ (8012f4c <kalmanCoreRobustUpdateWithDistance+0x758>)
 8012e6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	4413      	add	r3, r2
 8012e72:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 8012e76:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012e7a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012e84:	009b      	lsls	r3, r3, #2
 8012e86:	4413      	add	r3, r2
 8012e88:	ed93 7a00 	vldr	s14, [r3]
 8012e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8012f4c <kalmanCoreRobustUpdateWithDistance+0x758>)
 8012e8e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012e92:	009b      	lsls	r3, r3, #2
 8012e94:	4413      	add	r3, r2
 8012e96:	edd3 7a00 	vldr	s15, [r3]
 8012e9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e9e:	4a2c      	ldr	r2, [pc, #176]	@ (8012f50 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 8012ea0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012ea4:	009b      	lsls	r3, r3, #2
 8012ea6:	4413      	add	r3, r2
 8012ea8:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 8012eac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012eb0:	3301      	adds	r3, #1
 8012eb2:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8012eb6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012eba:	2b08      	cmp	r3, #8
 8012ebc:	ddb7      	ble.n	8012e2e <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 8012ebe:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012ec2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8012ec6:	4a23      	ldr	r2, [pc, #140]	@ (8012f54 <kalmanCoreRobustUpdateWithDistance+0x760>)
 8012ec8:	4618      	mov	r0, r3
 8012eca:	4611      	mov	r1, r2
 8012ecc:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	f006 fa21 	bl	8019318 <memcpy>
        R_iter = R_w;
 8012ed6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8012eda:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 8012ede:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8012ee8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	f77f ad37 	ble.w	8012960 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 8012ef2:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 8012ef6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012efa:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 8012efe:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 8012f02:	4b0b      	ldr	r3, [pc, #44]	@ (8012f30 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8012f04:	4a14      	ldr	r2, [pc, #80]	@ (8012f58 <kalmanCoreRobustUpdateWithDistance+0x764>)
 8012f06:	6800      	ldr	r0, [r0, #0]
 8012f08:	f7fc ff1e 	bl	800fd48 <kalmanCoreUpdateWithPKE>

}  
 8012f0c:	bf00      	nop
 8012f0e:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8012f12:	46bd      	mov	sp, r7
 8012f14:	ecbd 8b02 	vpop	{d8}
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20009e3c 	.word	0x20009e3c
 8012f20:	20009e60 	.word	0x20009e60
 8012f24:	20000118 	.word	0x20000118
 8012f28:	20000110 	.word	0x20000110
 8012f2c:	200000e0 	.word	0x200000e0
 8012f30:	20000120 	.word	0x20000120
 8012f34:	200000e8 	.word	0x200000e8
 8012f38:	38d1b717 	.word	0x38d1b717
 8012f3c:	20000128 	.word	0x20000128
 8012f40:	20000130 	.word	0x20000130
 8012f44:	20009fa4 	.word	0x20009fa4
 8012f48:	20009fc8 	.word	0x20009fc8
 8012f4c:	20009fec 	.word	0x20009fec
 8012f50:	20009b90 	.word	0x20009b90
 8012f54:	2000a010 	.word	0x2000a010
 8012f58:	20000138 	.word	0x20000138

08012f5c <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b0a2      	sub	sp, #136	@ 0x88
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 8012f68:	4ba2      	ldr	r3, [pc, #648]	@ (80131f4 <kalmanCoreUpdateWithFlow+0x298>)
 8012f6a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 8012f6e:	4ba2      	ldr	r3, [pc, #648]	@ (80131f8 <kalmanCoreUpdateWithFlow+0x29c>)
 8012f70:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	edd3 7a00 	vldr	s15, [r3]
 8012f78:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80131fc <kalmanCoreUpdateWithFlow+0x2a0>
 8012f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f80:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8012f8a:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80131fc <kalmanCoreUpdateWithFlow+0x2a0>
 8012f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012f92:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	673b      	str	r3, [r7, #112]	@ 0x70
  float dy_g = this->S[KC_STATE_PY];
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	691b      	ldr	r3, [r3, #16]
 8012fa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float z_g = 0.0;
 8012fa2:	f04f 0300 	mov.w	r3, #0
 8012fa6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	edd3 7a02 	vldr	s15, [r3, #8]
 8012fb0:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8013200 <kalmanCoreUpdateWithFlow+0x2a4>
 8012fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fbc:	d503      	bpl.n	8012fc6 <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 8012fbe:	4b91      	ldr	r3, [pc, #580]	@ (8013204 <kalmanCoreUpdateWithFlow+0x2a8>)
 8012fc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8012fc4:	e003      	b.n	8012fce <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	689b      	ldr	r3, [r3, #8]
 8012fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 8012fce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8012fd2:	2224      	movs	r2, #36	@ 0x24
 8012fd4:	2100      	movs	r1, #0
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f006 f958 	bl	801928c <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 8012fdc:	2301      	movs	r3, #1
 8012fde:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8012fe2:	2309      	movs	r3, #9
 8012fe4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8012fe8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8012fec:	647b      	str	r3, [r7, #68]	@ 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 8012fee:	68bb      	ldr	r3, [r7, #8]
 8012ff0:	ed93 7a05 	vldr	s14, [r3, #20]
 8012ff4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012ff8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012ffc:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8013000:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801300a:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801300e:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8013012:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8013016:	eec6 6a27 	vdiv.f32	s13, s12, s15
 801301a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801301e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8013022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013026:	4b78      	ldr	r3, [pc, #480]	@ (8013208 <kalmanCoreUpdateWithFlow+0x2ac>)
 8013028:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013032:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8013200 <kalmanCoreUpdateWithFlow+0x2a4>
 8013036:	ee67 7a87 	vmul.f32	s15, s15, s14
 801303a:	4b74      	ldr	r3, [pc, #464]	@ (801320c <kalmanCoreUpdateWithFlow+0x2b0>)
 801303c:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	ed93 7a05 	vldr	s14, [r3, #20]
 8013046:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801304a:	ee67 6a27 	vmul.f32	s13, s14, s15
 801304e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8013052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 801305c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8013060:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8013064:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8013068:	eef1 6a67 	vneg.f32	s13, s15
 801306c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8013070:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013074:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8013078:	ee67 7a27 	vmul.f32	s15, s14, s15
 801307c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	ed93 7a05 	vldr	s14, [r3, #20]
 8013086:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801308a:	ee67 6a27 	vmul.f32	s13, s14, s15
 801308e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8013092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 801309c:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80130a0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80130a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130a8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 80130ac:	4b57      	ldr	r3, [pc, #348]	@ (801320c <kalmanCoreUpdateWithFlow+0x2b0>)
 80130ae:	ed93 7a00 	vldr	s14, [r3]
 80130b2:	4b55      	ldr	r3, [pc, #340]	@ (8013208 <kalmanCoreUpdateWithFlow+0x2ac>)
 80130b4:	edd3 7a00 	vldr	s15, [r3]
 80130b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80130bc:	68bb      	ldr	r3, [r7, #8]
 80130be:	edd3 7a03 	vldr	s15, [r3, #12]
 80130c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8013200 <kalmanCoreUpdateWithFlow+0x2a4>
 80130c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80130ca:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80130ce:	eef0 0a67 	vmov.f32	s1, s15
 80130d2:	eeb0 0a47 	vmov.f32	s0, s14
 80130d6:	4619      	mov	r1, r3
 80130d8:	68f8      	ldr	r0, [r7, #12]
 80130da:	f7fc fc35 	bl	800f948 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 80130de:	f107 031c 	add.w	r3, r7, #28
 80130e2:	2224      	movs	r2, #36	@ 0x24
 80130e4:	2100      	movs	r1, #0
 80130e6:	4618      	mov	r0, r3
 80130e8:	f006 f8d0 	bl	801928c <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 80130ec:	2301      	movs	r3, #1
 80130ee:	82bb      	strh	r3, [r7, #20]
 80130f0:	2309      	movs	r3, #9
 80130f2:	82fb      	strh	r3, [r7, #22]
 80130f4:	f107 031c 	add.w	r3, r7, #28
 80130f8:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 80130fa:	68bb      	ldr	r3, [r7, #8]
 80130fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8013100:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8013104:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013108:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801310c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8013116:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801311a:	ee26 6aa7 	vmul.f32	s12, s13, s15
 801311e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8013122:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8013126:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801312a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013132:	4b37      	ldr	r3, [pc, #220]	@ (8013210 <kalmanCoreUpdateWithFlow+0x2b4>)
 8013134:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	edd3 7a02 	vldr	s15, [r3, #8]
 801313e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8013200 <kalmanCoreUpdateWithFlow+0x2a4>
 8013142:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013146:	4b33      	ldr	r3, [pc, #204]	@ (8013214 <kalmanCoreUpdateWithFlow+0x2b8>)
 8013148:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 801314c:	68bb      	ldr	r3, [r7, #8]
 801314e:	ed93 7a05 	vldr	s14, [r3, #20]
 8013152:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8013156:	ee67 6a27 	vmul.f32	s13, s14, s15
 801315a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8013168:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801316c:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8013170:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8013174:	eef1 6a67 	vneg.f32	s13, s15
 8013178:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 801317c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8013180:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8013184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013188:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	ed93 7a05 	vldr	s14, [r3, #20]
 8013192:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8013196:	ee67 6a27 	vmul.f32	s13, s14, s15
 801319a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801319e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 80131a8:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80131ac:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80131b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80131b4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 80131b8:	4b16      	ldr	r3, [pc, #88]	@ (8013214 <kalmanCoreUpdateWithFlow+0x2b8>)
 80131ba:	ed93 7a00 	vldr	s14, [r3]
 80131be:	4b14      	ldr	r3, [pc, #80]	@ (8013210 <kalmanCoreUpdateWithFlow+0x2b4>)
 80131c0:	edd3 7a00 	vldr	s15, [r3]
 80131c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80131c8:	68bb      	ldr	r3, [r7, #8]
 80131ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80131ce:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8013200 <kalmanCoreUpdateWithFlow+0x2a4>
 80131d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80131d6:	f107 0314 	add.w	r3, r7, #20
 80131da:	eef0 0a67 	vmov.f32	s1, s15
 80131de:	eeb0 0a47 	vmov.f32	s0, s14
 80131e2:	4619      	mov	r1, r3
 80131e4:	68f8      	ldr	r0, [r7, #12]
 80131e6:	f7fc fbaf 	bl	800f948 <kalmanCoreScalarUpdate>
}
 80131ea:	bf00      	nop
 80131ec:	3788      	adds	r7, #136	@ 0x88
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd80      	pop	{r7, pc}
 80131f2:	bf00      	nop
 80131f4:	420c0000 	.word	0x420c0000
 80131f8:	3f377c46 	.word	0x3f377c46
 80131fc:	3c8efa35 	.word	0x3c8efa35
 8013200:	3dcccccd 	.word	0x3dcccccd
 8013204:	3dcccccd 	.word	0x3dcccccd
 8013208:	2000a544 	.word	0x2000a544
 801320c:	2000a54c 	.word	0x2000a54c
 8013210:	2000a548 	.word	0x2000a548
 8013214:	2000a550 	.word	0x2000a550

08013218 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 8013218:	b480      	push	{r7}
 801321a:	b08f      	sub	sp, #60	@ 0x3c
 801321c:	af00      	add	r7, sp, #0
 801321e:	ed87 0a07 	vstr	s0, [r7, #28]
 8013222:	edc7 0a06 	vstr	s1, [r7, #24]
 8013226:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	623b      	str	r3, [r7, #32]
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	627b      	str	r3, [r7, #36]	@ 0x24
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	62bb      	str	r3, [r7, #40]	@ 0x28
	return v;
 8013236:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801323a:	f107 0220 	add.w	r2, r7, #32
 801323e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8013244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801324a:	ee06 1a90 	vmov	s13, r1
 801324e:	ee07 2a10 	vmov	s14, r2
 8013252:	ee07 3a90 	vmov	s15, r3
}
 8013256:	eeb0 0a66 	vmov.f32	s0, s13
 801325a:	eef0 0a47 	vmov.f32	s1, s14
 801325e:	eeb0 1a67 	vmov.f32	s2, s15
 8013262:	373c      	adds	r7, #60	@ 0x3c
 8013264:	46bd      	mov	sp, r7
 8013266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326a:	4770      	bx	lr

0801326c <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 801326c:	b580      	push	{r7, lr}
 801326e:	b08c      	sub	sp, #48	@ 0x30
 8013270:	af00      	add	r7, sp, #0
 8013272:	ed87 0a07 	vstr	s0, [r7, #28]
 8013276:	eef0 6a60 	vmov.f32	s13, s1
 801327a:	eeb0 7a41 	vmov.f32	s14, s2
 801327e:	eef0 7a61 	vmov.f32	s15, s3
 8013282:	edc7 6a04 	vstr	s13, [r7, #16]
 8013286:	ed87 7a05 	vstr	s14, [r7, #20]
 801328a:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 801328e:	ed97 7a04 	vldr	s14, [r7, #16]
 8013292:	edd7 7a07 	vldr	s15, [r7, #28]
 8013296:	ee67 6a27 	vmul.f32	s13, s14, s15
 801329a:	ed97 7a05 	vldr	s14, [r7, #20]
 801329e:	edd7 7a07 	vldr	s15, [r7, #28]
 80132a2:	ee27 6a27 	vmul.f32	s12, s14, s15
 80132a6:	ed97 7a06 	vldr	s14, [r7, #24]
 80132aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80132ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80132b2:	eeb0 1a67 	vmov.f32	s2, s15
 80132b6:	eef0 0a46 	vmov.f32	s1, s12
 80132ba:	eeb0 0a66 	vmov.f32	s0, s13
 80132be:	f7ff ffab 	bl	8013218 <mkvec>
 80132c2:	eef0 6a40 	vmov.f32	s13, s0
 80132c6:	eeb0 7a60 	vmov.f32	s14, s1
 80132ca:	eef0 7a41 	vmov.f32	s15, s2
 80132ce:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 80132d2:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 80132d6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80132da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80132dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80132de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132e0:	ee06 1a90 	vmov	s13, r1
 80132e4:	ee07 2a10 	vmov	s14, r2
 80132e8:	ee07 3a90 	vmov	s15, r3
}
 80132ec:	eeb0 0a66 	vmov.f32	s0, s13
 80132f0:	eef0 0a47 	vmov.f32	s1, s14
 80132f4:	eeb0 1a67 	vmov.f32	s2, s15
 80132f8:	3730      	adds	r7, #48	@ 0x30
 80132fa:	46bd      	mov	sp, r7
 80132fc:	bd80      	pop	{r7, pc}

080132fe <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 80132fe:	b490      	push	{r4, r7}
 8013300:	b090      	sub	sp, #64	@ 0x40
 8013302:	af00      	add	r7, sp, #0
 8013304:	ed87 0a07 	vstr	s0, [r7, #28]
 8013308:	edc7 0a06 	vstr	s1, [r7, #24]
 801330c:	ed87 1a05 	vstr	s2, [r7, #20]
 8013310:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 8013314:	69fb      	ldr	r3, [r7, #28]
 8013316:	623b      	str	r3, [r7, #32]
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	627b      	str	r3, [r7, #36]	@ 0x24
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8013320:	693b      	ldr	r3, [r7, #16]
 8013322:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return q;
 8013324:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8013328:	f107 0320 	add.w	r3, r7, #32
 801332c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801332e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8013332:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013334:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013336:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013338:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801333a:	ee06 0a10 	vmov	s12, r0
 801333e:	ee06 1a90 	vmov	s13, r1
 8013342:	ee07 2a10 	vmov	s14, r2
 8013346:	ee07 3a90 	vmov	s15, r3
}
 801334a:	eeb0 0a46 	vmov.f32	s0, s12
 801334e:	eef0 0a66 	vmov.f32	s1, s13
 8013352:	eeb0 1a47 	vmov.f32	s2, s14
 8013356:	eef0 1a67 	vmov.f32	s3, s15
 801335a:	3740      	adds	r7, #64	@ 0x40
 801335c:	46bd      	mov	sp, r7
 801335e:	bc90      	pop	{r4, r7}
 8013360:	4770      	bx	lr

08013362 <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 8013362:	b580      	push	{r7, lr}
 8013364:	b08c      	sub	sp, #48	@ 0x30
 8013366:	af00      	add	r7, sp, #0
 8013368:	eeb0 6a40 	vmov.f32	s12, s0
 801336c:	eef0 6a60 	vmov.f32	s13, s1
 8013370:	eeb0 7a41 	vmov.f32	s14, s2
 8013374:	eef0 7a61 	vmov.f32	s15, s3
 8013378:	ed87 6a04 	vstr	s12, [r7, #16]
 801337c:	edc7 6a05 	vstr	s13, [r7, #20]
 8013380:	ed87 7a06 	vstr	s14, [r7, #24]
 8013384:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 8013388:	edd7 7a04 	vldr	s15, [r7, #16]
 801338c:	ed97 7a05 	vldr	s14, [r7, #20]
 8013390:	edd7 6a06 	vldr	s13, [r7, #24]
 8013394:	eeb0 1a66 	vmov.f32	s2, s13
 8013398:	eef0 0a47 	vmov.f32	s1, s14
 801339c:	eeb0 0a67 	vmov.f32	s0, s15
 80133a0:	f7ff ff3a 	bl	8013218 <mkvec>
 80133a4:	eef0 6a40 	vmov.f32	s13, s0
 80133a8:	eeb0 7a60 	vmov.f32	s14, s1
 80133ac:	eef0 7a41 	vmov.f32	s15, s2
 80133b0:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 80133b4:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 80133b8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80133bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80133be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80133c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133c2:	ee06 1a90 	vmov	s13, r1
 80133c6:	ee07 2a10 	vmov	s14, r2
 80133ca:	ee07 3a90 	vmov	s15, r3
}
 80133ce:	eeb0 0a66 	vmov.f32	s0, s13
 80133d2:	eef0 0a47 	vmov.f32	s1, s14
 80133d6:	eeb0 1a67 	vmov.f32	s2, s15
 80133da:	3730      	adds	r7, #48	@ 0x30
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}

080133e0 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 80133e0:	b580      	push	{r7, lr}
 80133e2:	b094      	sub	sp, #80	@ 0x50
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	eeb0 4a40 	vmov.f32	s8, s0
 80133ea:	eef0 4a60 	vmov.f32	s9, s1
 80133ee:	eeb0 5a41 	vmov.f32	s10, s2
 80133f2:	eef0 5a61 	vmov.f32	s11, s3
 80133f6:	eeb0 6a42 	vmov.f32	s12, s4
 80133fa:	eef0 6a62 	vmov.f32	s13, s5
 80133fe:	eeb0 7a43 	vmov.f32	s14, s6
 8013402:	eef0 7a63 	vmov.f32	s15, s7
 8013406:	ed87 4a08 	vstr	s8, [r7, #32]
 801340a:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 801340e:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8013412:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8013416:	ed87 6a04 	vstr	s12, [r7, #16]
 801341a:	edc7 6a05 	vstr	s13, [r7, #20]
 801341e:	ed87 7a06 	vstr	s14, [r7, #24]
 8013422:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 8013426:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801342a:	edd7 7a04 	vldr	s15, [r7, #16]
 801342e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013432:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8013436:	edd7 7a05 	vldr	s15, [r7, #20]
 801343a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801343e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013442:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8013446:	edd7 7a06 	vldr	s15, [r7, #24]
 801344a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801344e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013452:	edd7 6a08 	vldr	s13, [r7, #32]
 8013456:	edd7 7a07 	vldr	s15, [r7, #28]
 801345a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013462:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 8013466:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801346a:	eeb1 7a67 	vneg.f32	s14, s15
 801346e:	edd7 7a04 	vldr	s15, [r7, #16]
 8013472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013476:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 801347a:	edd7 7a05 	vldr	s15, [r7, #20]
 801347e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013486:	edd7 6a08 	vldr	s13, [r7, #32]
 801348a:	edd7 7a06 	vldr	s15, [r7, #24]
 801348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013496:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 801349a:	edd7 7a07 	vldr	s15, [r7, #28]
 801349e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134a6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 80134aa:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80134ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80134b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80134ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80134be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80134c6:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80134ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80134ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134d6:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80134da:	edd7 7a07 	vldr	s15, [r7, #28]
 80134de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80134e6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 80134ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80134ee:	eeb1 7a67 	vneg.f32	s14, s15
 80134f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80134f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134fa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80134fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8013502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013506:	ee37 7a67 	vsub.f32	s14, s14, s15
 801350a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801350e:	edd7 7a06 	vldr	s15, [r7, #24]
 8013512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013516:	ee37 7a67 	vsub.f32	s14, s14, s15
 801351a:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 801351e:	edd7 7a07 	vldr	s15, [r7, #28]
 8013522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801352a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	return mkquat(x, y, z, w);
 801352e:	edd7 1a10 	vldr	s3, [r7, #64]	@ 0x40
 8013532:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 8013536:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 801353a:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 801353e:	f7ff fede 	bl	80132fe <mkquat>
 8013542:	eeb0 6a40 	vmov.f32	s12, s0
 8013546:	eef0 6a60 	vmov.f32	s13, s1
 801354a:	eeb0 7a41 	vmov.f32	s14, s2
 801354e:	eef0 7a61 	vmov.f32	s15, s3
 8013552:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 8013556:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 801355a:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 801355e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8013562:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8013564:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013566:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8013568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801356a:	ee06 0a10 	vmov	s12, r0
 801356e:	ee06 1a90 	vmov	s13, r1
 8013572:	ee07 2a10 	vmov	s14, r2
 8013576:	ee07 3a90 	vmov	s15, r3
}
 801357a:	eeb0 0a46 	vmov.f32	s0, s12
 801357e:	eef0 0a66 	vmov.f32	s1, s13
 8013582:	eeb0 1a47 	vmov.f32	s2, s14
 8013586:	eef0 1a67 	vmov.f32	s3, s15
 801358a:	3750      	adds	r7, #80	@ 0x50
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 8013590:	b580      	push	{r7, lr}
 8013592:	b08c      	sub	sp, #48	@ 0x30
 8013594:	af00      	add	r7, sp, #0
 8013596:	eeb0 6a40 	vmov.f32	s12, s0
 801359a:	eef0 6a60 	vmov.f32	s13, s1
 801359e:	eeb0 7a41 	vmov.f32	s14, s2
 80135a2:	eef0 7a61 	vmov.f32	s15, s3
 80135a6:	ed87 6a04 	vstr	s12, [r7, #16]
 80135aa:	edc7 6a05 	vstr	s13, [r7, #20]
 80135ae:	ed87 7a06 	vstr	s14, [r7, #24]
 80135b2:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 80135b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80135ba:	eeb1 7a67 	vneg.f32	s14, s15
 80135be:	edd7 7a05 	vldr	s15, [r7, #20]
 80135c2:	eef1 6a67 	vneg.f32	s13, s15
 80135c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80135ca:	eef1 7a67 	vneg.f32	s15, s15
 80135ce:	ed97 6a07 	vldr	s12, [r7, #28]
 80135d2:	eef0 1a46 	vmov.f32	s3, s12
 80135d6:	eeb0 1a67 	vmov.f32	s2, s15
 80135da:	eef0 0a66 	vmov.f32	s1, s13
 80135de:	eeb0 0a47 	vmov.f32	s0, s14
 80135e2:	f7ff fe8c 	bl	80132fe <mkquat>
 80135e6:	eeb0 6a40 	vmov.f32	s12, s0
 80135ea:	eef0 6a60 	vmov.f32	s13, s1
 80135ee:	eeb0 7a41 	vmov.f32	s14, s2
 80135f2:	eef0 7a61 	vmov.f32	s15, s3
 80135f6:	ed87 6a08 	vstr	s12, [r7, #32]
 80135fa:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 80135fe:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8013602:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8013606:	6a38      	ldr	r0, [r7, #32]
 8013608:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801360a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801360c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801360e:	ee06 0a10 	vmov	s12, r0
 8013612:	ee06 1a90 	vmov	s13, r1
 8013616:	ee07 2a10 	vmov	s14, r2
 801361a:	ee07 3a90 	vmov	s15, r3
}
 801361e:	eeb0 0a46 	vmov.f32	s0, s12
 8013622:	eef0 0a66 	vmov.f32	s1, s13
 8013626:	eeb0 1a47 	vmov.f32	s2, s14
 801362a:	eef0 1a67 	vmov.f32	s3, s15
 801362e:	3730      	adds	r7, #48	@ 0x30
 8013630:	46bd      	mov	sp, r7
 8013632:	bd80      	pop	{r7, pc}

08013634 <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	ed2d 8b02 	vpush	{d8}
 801363a:	b0a6      	sub	sp, #152	@ 0x98
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 8013642:	2300      	movs	r3, #0
 8013644:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013648:	e038      	b.n	80136bc <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 801364a:	f107 0308 	add.w	r3, r7, #8
 801364e:	2224      	movs	r2, #36	@ 0x24
 8013650:	2100      	movs	r1, #0
 8013652:	4618      	mov	r0, r3
 8013654:	f005 fe1a 	bl	801928c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8013658:	2301      	movs	r3, #1
 801365a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 801365c:	2309      	movs	r3, #9
 801365e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8013660:	f107 0308 	add.w	r3, r7, #8
 8013664:	63bb      	str	r3, [r7, #56]	@ 0x38
    h[KC_STATE_X+i] = 1;
 8013666:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801366a:	009b      	lsls	r3, r3, #2
 801366c:	3398      	adds	r3, #152	@ 0x98
 801366e:	443b      	add	r3, r7
 8013670:	3b90      	subs	r3, #144	@ 0x90
 8013672:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013676:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 8013678:	683a      	ldr	r2, [r7, #0]
 801367a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801367e:	009b      	lsls	r3, r3, #2
 8013680:	4413      	add	r3, r2
 8013682:	ed93 7a00 	vldr	s14, [r3]
 8013686:	687a      	ldr	r2, [r7, #4]
 8013688:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801368c:	009b      	lsls	r3, r3, #2
 801368e:	4413      	add	r3, r2
 8013690:	edd3 7a00 	vldr	s15, [r3]
 8013694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	ed93 7a07 	vldr	s14, [r3, #28]
 801369e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80136a2:	eef0 0a47 	vmov.f32	s1, s14
 80136a6:	eeb0 0a67 	vmov.f32	s0, s15
 80136aa:	4619      	mov	r1, r3
 80136ac:	6878      	ldr	r0, [r7, #4]
 80136ae:	f7fc f94b 	bl	800f948 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 80136b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80136b6:	3301      	adds	r3, #1
 80136b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80136bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80136c0:	2b02      	cmp	r3, #2
 80136c2:	ddc2      	ble.n	801364a <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 80136dc:	eef0 1a46 	vmov.f32	s3, s12
 80136e0:	eeb0 1a66 	vmov.f32	s2, s13
 80136e4:	eef0 0a47 	vmov.f32	s1, s14
 80136e8:	eeb0 0a67 	vmov.f32	s0, s15
 80136ec:	f7ff fe07 	bl	80132fe <mkquat>
 80136f0:	eeb0 6a40 	vmov.f32	s12, s0
 80136f4:	eef0 6a60 	vmov.f32	s13, s1
 80136f8:	eeb0 7a41 	vmov.f32	s14, s2
 80136fc:	eef0 7a61 	vmov.f32	s15, s3
 8013700:	ed87 6a1a 	vstr	s12, [r7, #104]	@ 0x68
 8013704:	edc7 6a1b 	vstr	s13, [r7, #108]	@ 0x6c
 8013708:	ed87 7a1c 	vstr	s14, [r7, #112]	@ 0x70
 801370c:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 8013710:	683b      	ldr	r3, [r7, #0]
 8013712:	edd3 7a03 	vldr	s15, [r3, #12]
 8013716:	683b      	ldr	r3, [r7, #0]
 8013718:	ed93 7a04 	vldr	s14, [r3, #16]
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	edd3 6a05 	vldr	s13, [r3, #20]
 8013722:	683b      	ldr	r3, [r7, #0]
 8013724:	ed93 6a06 	vldr	s12, [r3, #24]
 8013728:	eef0 1a46 	vmov.f32	s3, s12
 801372c:	eeb0 1a66 	vmov.f32	s2, s13
 8013730:	eef0 0a47 	vmov.f32	s1, s14
 8013734:	eeb0 0a67 	vmov.f32	s0, s15
 8013738:	f7ff fde1 	bl	80132fe <mkquat>
 801373c:	eeb0 6a40 	vmov.f32	s12, s0
 8013740:	eef0 6a60 	vmov.f32	s13, s1
 8013744:	eeb0 7a41 	vmov.f32	s14, s2
 8013748:	eef0 7a61 	vmov.f32	s15, s3
 801374c:	ed87 6a16 	vstr	s12, [r7, #88]	@ 0x58
 8013750:	edc7 6a17 	vstr	s13, [r7, #92]	@ 0x5c
 8013754:	ed87 7a18 	vstr	s14, [r7, #96]	@ 0x60
 8013758:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 801375c:	ed97 6a1a 	vldr	s12, [r7, #104]	@ 0x68
 8013760:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8013764:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8013768:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 801376c:	eeb0 0a46 	vmov.f32	s0, s12
 8013770:	eef0 0a66 	vmov.f32	s1, s13
 8013774:	eeb0 1a47 	vmov.f32	s2, s14
 8013778:	eef0 1a67 	vmov.f32	s3, s15
 801377c:	f7ff ff08 	bl	8013590 <qinv>
 8013780:	eeb0 6a40 	vmov.f32	s12, s0
 8013784:	eef0 6a60 	vmov.f32	s13, s1
 8013788:	eeb0 7a41 	vmov.f32	s14, s2
 801378c:	eef0 7a61 	vmov.f32	s15, s3
 8013790:	ed87 6a1e 	vstr	s12, [r7, #120]	@ 0x78
 8013794:	edc7 6a1f 	vstr	s13, [r7, #124]	@ 0x7c
 8013798:	ed87 7a20 	vstr	s14, [r7, #128]	@ 0x80
 801379c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 80137a0:	ed97 4a16 	vldr	s8, [r7, #88]	@ 0x58
 80137a4:	edd7 4a17 	vldr	s9, [r7, #92]	@ 0x5c
 80137a8:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 80137ac:	edd7 5a19 	vldr	s11, [r7, #100]	@ 0x64
 80137b0:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 80137b4:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80137b8:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80137bc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80137c0:	eeb0 2a44 	vmov.f32	s4, s8
 80137c4:	eef0 2a64 	vmov.f32	s5, s9
 80137c8:	eeb0 3a45 	vmov.f32	s6, s10
 80137cc:	eef0 3a65 	vmov.f32	s7, s11
 80137d0:	eeb0 0a46 	vmov.f32	s0, s12
 80137d4:	eef0 0a66 	vmov.f32	s1, s13
 80137d8:	eeb0 1a47 	vmov.f32	s2, s14
 80137dc:	eef0 1a67 	vmov.f32	s3, s15
 80137e0:	f7ff fdfe 	bl	80133e0 <qqmul>
 80137e4:	eeb0 6a40 	vmov.f32	s12, s0
 80137e8:	eef0 6a60 	vmov.f32	s13, s1
 80137ec:	eeb0 7a41 	vmov.f32	s14, s2
 80137f0:	eef0 7a61 	vmov.f32	s15, s3
 80137f4:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 80137f8:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 80137fc:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8013800:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 8013804:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013808:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801380c:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8013810:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 8013814:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8013818:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 801381c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8013820:	eeb0 0a46 	vmov.f32	s0, s12
 8013824:	eef0 0a66 	vmov.f32	s1, s13
 8013828:	eeb0 1a47 	vmov.f32	s2, s14
 801382c:	eef0 1a67 	vmov.f32	s3, s15
 8013830:	f7ff fd97 	bl	8013362 <quatimagpart>
 8013834:	eef0 6a40 	vmov.f32	s13, s0
 8013838:	eeb0 7a60 	vmov.f32	s14, s1
 801383c:	eef0 7a41 	vmov.f32	s15, s2
 8013840:	edc7 6a22 	vstr	s13, [r7, #136]	@ 0x88
 8013844:	ed87 7a23 	vstr	s14, [r7, #140]	@ 0x8c
 8013848:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 801384c:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8013850:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8013854:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8013858:	eef0 0a66 	vmov.f32	s1, s13
 801385c:	eeb0 1a47 	vmov.f32	s2, s14
 8013860:	eef0 1a67 	vmov.f32	s3, s15
 8013864:	eeb0 0a48 	vmov.f32	s0, s16
 8013868:	f7ff fd00 	bl	801326c <vscl>
 801386c:	eef0 6a40 	vmov.f32	s13, s0
 8013870:	eeb0 7a60 	vmov.f32	s14, s1
 8013874:	eef0 7a41 	vmov.f32	s15, s2
 8013878:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 801387c:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8013880:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 8013884:	f107 0308 	add.w	r3, r7, #8
 8013888:	2224      	movs	r2, #36	@ 0x24
 801388a:	2100      	movs	r1, #0
 801388c:	4618      	mov	r0, r3
 801388e:	f005 fcfd 	bl	801928c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8013892:	2301      	movs	r3, #1
 8013894:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8013896:	2309      	movs	r3, #9
 8013898:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801389a:	f107 0308 	add.w	r3, r7, #8
 801389e:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_D0] = 1;
 80138a0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80138a4:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 80138a6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80138aa:	683b      	ldr	r3, [r7, #0]
 80138ac:	ed93 7a08 	vldr	s14, [r3, #32]
 80138b0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80138b4:	eef0 0a47 	vmov.f32	s1, s14
 80138b8:	eeb0 0a67 	vmov.f32	s0, s15
 80138bc:	4619      	mov	r1, r3
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f7fc f842 	bl	800f948 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 80138c4:	f04f 0300 	mov.w	r3, #0
 80138c8:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 80138ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80138ce:	627b      	str	r3, [r7, #36]	@ 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 80138d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80138d4:	683b      	ldr	r3, [r7, #0]
 80138d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80138da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80138de:	eef0 0a47 	vmov.f32	s1, s14
 80138e2:	eeb0 0a67 	vmov.f32	s0, s15
 80138e6:	4619      	mov	r1, r3
 80138e8:	6878      	ldr	r0, [r7, #4]
 80138ea:	f7fc f82d 	bl	800f948 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 80138ee:	f04f 0300 	mov.w	r3, #0
 80138f2:	627b      	str	r3, [r7, #36]	@ 0x24

    h[KC_STATE_D2] = 1;
 80138f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80138f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 80138fa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	ed93 7a08 	vldr	s14, [r3, #32]
 8013904:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013908:	eef0 0a47 	vmov.f32	s1, s14
 801390c:	eeb0 0a67 	vmov.f32	s0, s15
 8013910:	4619      	mov	r1, r3
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f7fc f818 	bl	800f948 <kalmanCoreScalarUpdate>
  }
}
 8013918:	bf00      	nop
 801391a:	3798      	adds	r7, #152	@ 0x98
 801391c:	46bd      	mov	sp, r7
 801391e:	ecbd 8b02 	vpop	{d8}
 8013922:	bd80      	pop	{r7, pc}

08013924 <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b08e      	sub	sp, #56	@ 0x38
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
 801392c:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 801392e:	2300      	movs	r3, #0
 8013930:	637b      	str	r3, [r7, #52]	@ 0x34
 8013932:	e033      	b.n	801399c <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 8013934:	f107 0308 	add.w	r3, r7, #8
 8013938:	2224      	movs	r2, #36	@ 0x24
 801393a:	2100      	movs	r1, #0
 801393c:	4618      	mov	r0, r3
 801393e:	f005 fca5 	bl	801928c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8013942:	2301      	movs	r3, #1
 8013944:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8013946:	2309      	movs	r3, #9
 8013948:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801394a:	f107 0308 	add.w	r3, r7, #8
 801394e:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_X+i] = 1;
 8013950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013952:	009b      	lsls	r3, r3, #2
 8013954:	3338      	adds	r3, #56	@ 0x38
 8013956:	443b      	add	r3, r7
 8013958:	3b30      	subs	r3, #48	@ 0x30
 801395a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801395e:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 8013960:	683a      	ldr	r2, [r7, #0]
 8013962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013964:	009b      	lsls	r3, r3, #2
 8013966:	4413      	add	r3, r2
 8013968:	ed93 7a00 	vldr	s14, [r3]
 801396c:	687a      	ldr	r2, [r7, #4]
 801396e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013970:	009b      	lsls	r3, r3, #2
 8013972:	4413      	add	r3, r2
 8013974:	edd3 7a00 	vldr	s15, [r3]
 8013978:	ee77 7a67 	vsub.f32	s15, s14, s15
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	ed93 7a03 	vldr	s14, [r3, #12]
 8013982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8013986:	eef0 0a47 	vmov.f32	s1, s14
 801398a:	eeb0 0a67 	vmov.f32	s0, s15
 801398e:	4619      	mov	r1, r3
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7fb ffd9 	bl	800f948 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 8013996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013998:	3301      	adds	r3, #1
 801399a:	637b      	str	r3, [r7, #52]	@ 0x34
 801399c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801399e:	2b02      	cmp	r3, #2
 80139a0:	ddc8      	ble.n	8013934 <kalmanCoreUpdateWithPosition+0x10>
  }
}
 80139a2:	bf00      	nop
 80139a4:	bf00      	nop
 80139a6:	3738      	adds	r7, #56	@ 0x38
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}
 80139ac:	0000      	movs	r0, r0
	...

080139b0 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	ed2d 8b02 	vpush	{d8}
 80139b6:	b090      	sub	sp, #64	@ 0x40
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
 80139bc:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 80139be:	f107 0310 	add.w	r3, r7, #16
 80139c2:	2224      	movs	r2, #36	@ 0x24
 80139c4:	2100      	movs	r1, #0
 80139c6:	4618      	mov	r0, r3
 80139c8:	f005 fc60 	bl	801928c <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80139cc:	2301      	movs	r3, #1
 80139ce:	813b      	strh	r3, [r7, #8]
 80139d0:	2309      	movs	r3, #9
 80139d2:	817b      	strh	r3, [r7, #10]
 80139d4:	f107 0310 	add.w	r3, r7, #16
 80139d8:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80139e0:	eef0 7ae7 	vabs.f32	s15, s15
 80139e4:	ee17 0a90 	vmov	r0, s15
 80139e8:	f7ec fd60 	bl	80004ac <__aeabi_f2d>
 80139ec:	a331      	add	r3, pc, #196	@ (adr r3, 8013ab4 <kalmanCoreUpdateWithTof+0x104>)
 80139ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f2:	f7ed f843 	bl	8000a7c <__aeabi_dcmpgt>
 80139f6:	4603      	mov	r3, r0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d100      	bne.n	80139fe <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 80139fc:	e050      	b.n	8013aa0 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013a04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a0c:	dc00      	bgt.n	8013a10 <kalmanCoreUpdateWithTof+0x60>
}
 8013a0e:	e047      	b.n	8013aa0 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8013a16:	eeb0 0a67 	vmov.f32	s0, s15
 8013a1a:	f005 fc8b 	bl	8019334 <acosf>
 8013a1e:	eef0 7a40 	vmov.f32	s15, s0
 8013a22:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8013ab0 <kalmanCoreUpdateWithTof+0x100>
 8013a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013a2a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (angle < 0.0f) {
 8013a2e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013a32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a3a:	d502      	bpl.n	8013a42 <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 8013a3c:	f04f 0300 	mov.w	r3, #0
 8013a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	ed93 8a02 	vldr	s16, [r3, #8]
 8013a48:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8013a4c:	f005 fda6 	bl	801959c <cosf>
 8013a50:	eeb0 7a40 	vmov.f32	s14, s0
 8013a54:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013a58:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float measuredDistance = tof->distance; // [m]
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	637b      	str	r3, [r7, #52]	@ 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 8013a62:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8013a66:	f005 fd99 	bl	801959c <cosf>
 8013a6a:	eeb0 7a40 	vmov.f32	s14, s0
 8013a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8013a72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013a76:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 8013a7a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8013a7e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013a86:	683b      	ldr	r3, [r7, #0]
 8013a88:	ed93 7a02 	vldr	s14, [r3, #8]
 8013a8c:	f107 0308 	add.w	r3, r7, #8
 8013a90:	eef0 0a47 	vmov.f32	s1, s14
 8013a94:	eeb0 0a67 	vmov.f32	s0, s15
 8013a98:	4619      	mov	r1, r3
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7fb ff54 	bl	800f948 <kalmanCoreScalarUpdate>
}
 8013aa0:	bf00      	nop
 8013aa2:	3740      	adds	r7, #64	@ 0x40
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	ecbd 8b02 	vpop	{d8}
 8013aaa:	bd80      	pop	{r7, pc}
 8013aac:	f3af 8000 	nop.w
 8013ab0:	3e060a92 	.word	0x3e060a92
 8013ab4:	9999999a 	.word	0x9999999a
 8013ab8:	3fb99999 	.word	0x3fb99999

08013abc <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 8013abc:	b580      	push	{r7, lr}
 8013abe:	b08e      	sub	sp, #56	@ 0x38
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
 8013ac4:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 8013ac6:	f107 0314 	add.w	r3, r7, #20
 8013aca:	2224      	movs	r2, #36	@ 0x24
 8013acc:	2100      	movs	r1, #0
 8013ace:	4618      	mov	r0, r3
 8013ad0:	f005 fbdc 	bl	801928c <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8013ad4:	2301      	movs	r3, #1
 8013ad6:	81bb      	strh	r3, [r7, #12]
 8013ad8:	2309      	movs	r3, #9
 8013ada:	81fb      	strh	r3, [r7, #14]
 8013adc:	f107 0314 	add.w	r3, r7, #20
 8013ae0:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 8013ae2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8013ae6:	637b      	str	r3, [r7, #52]	@ 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	ed93 7a08 	vldr	s14, [r3, #32]
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	edd3 7a01 	vldr	s15, [r3, #4]
 8013af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013af8:	683b      	ldr	r3, [r7, #0]
 8013afa:	ed93 7a02 	vldr	s14, [r3, #8]
 8013afe:	f107 030c 	add.w	r3, r7, #12
 8013b02:	eef0 0a47 	vmov.f32	s1, s14
 8013b06:	eeb0 0a67 	vmov.f32	s0, s15
 8013b0a:	4619      	mov	r1, r3
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f7fb ff1b 	bl	800f948 <kalmanCoreScalarUpdate>
}
 8013b12:	bf00      	nop
 8013b14:	3738      	adds	r7, #56	@ 0x38
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b084      	sub	sp, #16
 8013b1e:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8013b20:	2300      	movs	r3, #0
 8013b22:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8013b24:	1d3b      	adds	r3, r7, #4
 8013b26:	4618      	mov	r0, r3
 8013b28:	f000 f8a6 	bl	8013c78 <platformGetListOfConfigurations>
 8013b2c:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	4619      	mov	r1, r3
 8013b32:	68f8      	ldr	r0, [r7, #12]
 8013b34:	f000 f856 	bl	8013be4 <platformInitConfiguration>
 8013b38:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8013b3a:	68bb      	ldr	r3, [r7, #8]
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d001      	beq.n	8013b44 <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8013b40:	2301      	movs	r3, #1
 8013b42:	e002      	b.n	8013b4a <platformInit+0x30>
  }

  platformInitHardware();
 8013b44:	f000 f8a8 	bl	8013c98 <platformInitHardware>
  return 0;
 8013b48:	2300      	movs	r3, #0
}
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	3710      	adds	r7, #16
 8013b4e:	46bd      	mov	sp, r7
 8013b50:	bd80      	pop	{r7, pc}

08013b52 <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8013b52:	b580      	push	{r7, lr}
 8013b54:	b086      	sub	sp, #24
 8013b56:	af00      	add	r7, sp, #0
 8013b58:	6078      	str	r0, [r7, #4]
 8013b5a:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	781b      	ldrb	r3, [r3, #0]
 8013b60:	2b30      	cmp	r3, #48	@ 0x30
 8013b62:	d104      	bne.n	8013b6e <platformParseDeviceTypeString+0x1c>
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	3301      	adds	r3, #1
 8013b68:	781b      	ldrb	r3, [r3, #0]
 8013b6a:	2b3b      	cmp	r3, #59	@ 0x3b
 8013b6c:	d001      	beq.n	8013b72 <platformParseDeviceTypeString+0x20>
    return 1;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	e034      	b.n	8013bdc <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8013b72:	2302      	movs	r3, #2
 8013b74:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	3304      	adds	r3, #4
 8013b7a:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8013b80:	693b      	ldr	r3, [r7, #16]
 8013b82:	617b      	str	r3, [r7, #20]
 8013b84:	e00e      	b.n	8013ba4 <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	687a      	ldr	r2, [r7, #4]
 8013b8a:	4413      	add	r3, r2
 8013b8c:	781b      	ldrb	r3, [r3, #0]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00c      	beq.n	8013bac <platformParseDeviceTypeString+0x5a>
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	687a      	ldr	r2, [r7, #4]
 8013b96:	4413      	add	r3, r2
 8013b98:	781b      	ldrb	r3, [r3, #0]
 8013b9a:	2b3b      	cmp	r3, #59	@ 0x3b
 8013b9c:	d006      	beq.n	8013bac <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	617b      	str	r3, [r7, #20]
 8013ba4:	697a      	ldr	r2, [r7, #20]
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	429a      	cmp	r2, r3
 8013baa:	ddec      	ble.n	8013b86 <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8013bac:	697a      	ldr	r2, [r7, #20]
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	429a      	cmp	r2, r3
 8013bb2:	dd01      	ble.n	8013bb8 <platformParseDeviceTypeString+0x66>
    return 1;
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	e011      	b.n	8013bdc <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8013bb8:	697a      	ldr	r2, [r7, #20]
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	1ad3      	subs	r3, r2, r3
 8013bbe:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	687a      	ldr	r2, [r7, #4]
 8013bc4:	4413      	add	r3, r2
 8013bc6:	68ba      	ldr	r2, [r7, #8]
 8013bc8:	4619      	mov	r1, r3
 8013bca:	6838      	ldr	r0, [r7, #0]
 8013bcc:	f005 fba4 	bl	8019318 <memcpy>
  deviceType[length] = '\0';
 8013bd0:	68bb      	ldr	r3, [r7, #8]
 8013bd2:	683a      	ldr	r2, [r7, #0]
 8013bd4:	4413      	add	r3, r2
 8013bd6:	2200      	movs	r2, #0
 8013bd8:	701a      	strb	r2, [r3, #0]
  return 0;
 8013bda:	2300      	movs	r3, #0
}
 8013bdc:	4618      	mov	r0, r3
 8013bde:	3718      	adds	r7, #24
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b090      	sub	sp, #64	@ 0x40
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8013bee:	f107 0314 	add.w	r3, r7, #20
 8013bf2:	4618      	mov	r0, r3
 8013bf4:	f000 f866 	bl	8013cc4 <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8013bf8:	f107 020c 	add.w	r2, r7, #12
 8013bfc:	f107 0314 	add.w	r3, r7, #20
 8013c00:	4611      	mov	r1, r2
 8013c02:	4618      	mov	r0, r3
 8013c04:	f7ff ffa5 	bl	8013b52 <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8013c08:	2300      	movs	r3, #0
 8013c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c0c:	e01a      	b.n	8013c44 <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8013c0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013c10:	4613      	mov	r3, r2
 8013c12:	00db      	lsls	r3, r3, #3
 8013c14:	4413      	add	r3, r2
 8013c16:	009b      	lsls	r3, r3, #2
 8013c18:	4413      	add	r3, r2
 8013c1a:	687a      	ldr	r2, [r7, #4]
 8013c1c:	4413      	add	r3, r2
 8013c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8013c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c22:	f107 020c 	add.w	r2, r7, #12
 8013c26:	4611      	mov	r1, r2
 8013c28:	4618      	mov	r0, r3
 8013c2a:	f7ec fad1 	bl	80001d0 <strcmp>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d104      	bne.n	8013c3e <platformInitConfiguration+0x5a>
      active_config = config;
 8013c34:	4a08      	ldr	r2, [pc, #32]	@ (8013c58 <platformInitConfiguration+0x74>)
 8013c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c38:	6013      	str	r3, [r2, #0]
      return 0;
 8013c3a:	2300      	movs	r3, #0
 8013c3c:	e007      	b.n	8013c4e <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8013c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c40:	3301      	adds	r3, #1
 8013c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013c44:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	429a      	cmp	r2, r3
 8013c4a:	dbe0      	blt.n	8013c0e <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8013c4c:	2301      	movs	r3, #1
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3740      	adds	r7, #64	@ 0x40
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	2000a554 	.word	0x2000a554

08013c5c <platformConfigGetSensorImplementation>:

const char* platformConfigGetDeviceTypeName() {
  return active_config->deviceTypeName;
}

SensorImplementation_t platformConfigGetSensorImplementation() {
 8013c5c:	b480      	push	{r7}
 8013c5e:	af00      	add	r7, sp, #0
  return active_config->sensorImplementation;
 8013c60:	4b04      	ldr	r3, [pc, #16]	@ (8013c74 <platformConfigGetSensorImplementation+0x18>)
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
}
 8013c68:	4618      	mov	r0, r3
 8013c6a:	46bd      	mov	sp, r7
 8013c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	2000a554 	.word	0x2000a554

08013c78 <platformGetListOfConfigurations>:
//    .motorMap = motorMapCF21Brushless,
//  },
//#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2201      	movs	r2, #1
 8013c84:	601a      	str	r2, [r3, #0]
  return configs;
 8013c86:	4b03      	ldr	r3, [pc, #12]	@ (8013c94 <platformGetListOfConfigurations+0x1c>)
}
 8013c88:	4618      	mov	r0, r3
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr
 8013c94:	20000140 	.word	0x20000140

08013c98 <platformInitHardware>:

void platformInitHardware() {
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	af00      	add	r7, sp, #0
  //Low level init: Clock and Interrupt controller
  nvicInit();
 8013c9c:	f7f6 ff72 	bl	800ab84 <nvicInit>

  //EXTI interrupts
//  extiInit();
}
 8013ca0:	bf00      	nop
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;DG20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8013cb2:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8013cb6:	015b      	lsls	r3, r3, #5
}
 8013cb8:	4618      	mov	r0, r3
 8013cba:	370c      	adds	r7, #12
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr

08013cc4 <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	613b      	str	r3, [r7, #16]
 8013cd4:	e00d      	b.n	8013cf2 <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8013cd6:	6938      	ldr	r0, [r7, #16]
 8013cd8:	f7ff ffe4 	bl	8013ca4 <getAddressOfOtpMemoryBlock>
 8013cdc:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d002      	beq.n	8013cec <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	617b      	str	r3, [r7, #20]
      break;
 8013cea:	e005      	b.n	8013cf8 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8013cec:	693b      	ldr	r3, [r7, #16]
 8013cee:	3301      	adds	r3, #1
 8013cf0:	613b      	str	r3, [r7, #16]
 8013cf2:	693b      	ldr	r3, [r7, #16]
 8013cf4:	2b0f      	cmp	r3, #15
 8013cf6:	ddee      	ble.n	8013cd6 <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8013cf8:	697b      	ldr	r3, [r7, #20]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d003      	beq.n	8013d06 <platformGetDeviceTypeString+0x42>
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	2bff      	cmp	r3, #255	@ 0xff
 8013d04:	d101      	bne.n	8013d0a <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8013d06:	4b07      	ldr	r3, [pc, #28]	@ (8013d24 <platformGetDeviceTypeString+0x60>)
 8013d08:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8013d0a:	2220      	movs	r2, #32
 8013d0c:	6979      	ldr	r1, [r7, #20]
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f005 fac4 	bl	801929c <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	3320      	adds	r3, #32
 8013d18:	2200      	movs	r2, #0
 8013d1a:	701a      	strb	r2, [r3, #0]
}
 8013d1c:	bf00      	nop
 8013d1e:	3718      	adds	r7, #24
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}
 8013d24:	0801c1c8 	.word	0x0801c1c8

08013d28 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b086      	sub	sp, #24
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
        __asm volatile
 8013d34:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8013d38:	f383 8811 	msr	BASEPRI, r3
 8013d3c:	f3bf 8f6f 	isb	sy
 8013d40:	f3bf 8f4f 	dsb	sy
 8013d44:	617b      	str	r3, [r7, #20]
    }
 8013d46:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8013d48:	6879      	ldr	r1, [r7, #4]
 8013d4a:	68b8      	ldr	r0, [r7, #8]
 8013d4c:	f000 f804 	bl	8013d58 <storeAssertFileData>
//  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
//  {
//    // Only reset if debugger is not connected
//    NVIC_SystemReset();
//  }
}
 8013d50:	bf00      	nop
 8013d52:	3718      	adds	r7, #24
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd80      	pop	{r7, pc}

08013d58 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8013d58:	b480      	push	{r7}
 8013d5a:	b083      	sub	sp, #12
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	6078      	str	r0, [r7, #4]
 8013d60:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8013d62:	4b0b      	ldr	r3, [pc, #44]	@ (8013d90 <storeAssertFileData+0x38>)
 8013d64:	4a0b      	ldr	r2, [pc, #44]	@ (8013d94 <storeAssertFileData+0x3c>)
 8013d66:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8013d68:	4b09      	ldr	r3, [pc, #36]	@ (8013d90 <storeAssertFileData+0x38>)
 8013d6a:	2201      	movs	r2, #1
 8013d6c:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8013d6e:	4b08      	ldr	r3, [pc, #32]	@ (8013d90 <storeAssertFileData+0x38>)
 8013d70:	791a      	ldrb	r2, [r3, #4]
 8013d72:	4b09      	ldr	r3, [pc, #36]	@ (8013d98 <storeAssertFileData+0x40>)
 8013d74:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8013d76:	4a06      	ldr	r2, [pc, #24]	@ (8013d90 <storeAssertFileData+0x38>)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8013d7c:	4a04      	ldr	r2, [pc, #16]	@ (8013d90 <storeAssertFileData+0x38>)
 8013d7e:	683b      	ldr	r3, [r7, #0]
 8013d80:	60d3      	str	r3, [r2, #12]
}
 8013d82:	bf00      	nop
 8013d84:	370c      	adds	r7, #12
 8013d86:	46bd      	mov	sp, r7
 8013d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d8c:	4770      	bx	lr
 8013d8e:	bf00      	nop
 8013d90:	200001d0 	.word	0x200001d0
 8013d94:	2f8a001f 	.word	0x2f8a001f
 8013d98:	2000a558 	.word	0x2000a558

08013d9c <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
 8013da2:	60f8      	str	r0, [r7, #12]
 8013da4:	ed87 0a02 	vstr	s0, [r7, #8]
 8013da8:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d00e      	beq.n	8013dd0 <lpf2pInit+0x34>
 8013db2:	edd7 7a01 	vldr	s15, [r7, #4]
 8013db6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dbe:	d907      	bls.n	8013dd0 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8013dc0:	edd7 0a01 	vldr	s1, [r7, #4]
 8013dc4:	ed97 0a02 	vldr	s0, [r7, #8]
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f000 f805 	bl	8013dd8 <lpf2pSetCutoffFreq>
 8013dce:	e000      	b.n	8013dd2 <lpf2pInit+0x36>
    return;
 8013dd0:	bf00      	nop
}
 8013dd2:	3710      	adds	r7, #16
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b088      	sub	sp, #32
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	60f8      	str	r0, [r7, #12]
 8013de0:	ed87 0a02 	vstr	s0, [r7, #8]
 8013de4:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 8013de8:	edd7 6a02 	vldr	s13, [r7, #8]
 8013dec:	ed97 7a01 	vldr	s14, [r7, #4]
 8013df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013df4:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 8013df8:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8013ecc <lpf2pSetCutoffFreq+0xf4>
 8013dfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8013e00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013e04:	eeb0 0a47 	vmov.f32	s0, s14
 8013e08:	f005 fc5a 	bl	80196c0 <tanf>
 8013e0c:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8013e10:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e14:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8013ed0 <lpf2pSetCutoffFreq+0xf8>
 8013e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e20:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013e24:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e28:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e30:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 8013e34:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e38:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013e3c:	ed97 7a05 	vldr	s14, [r7, #20]
 8013e40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	edd3 7a02 	vldr	s15, [r3, #8]
 8013e50:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	689a      	ldr	r2, [r3, #8]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 8013e62:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013e6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e72:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8013e76:	ed97 7a05 	vldr	s14, [r7, #20]
 8013e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 8013e84:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e88:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8013ed0 <lpf2pSetCutoffFreq+0xf8>
 8013e8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013e94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e98:	edd7 7a06 	vldr	s15, [r7, #24]
 8013e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013ea0:	ee77 6a27 	vadd.f32	s13, s14, s15
 8013ea4:	ed97 7a05 	vldr	s14, [r7, #20]
 8013ea8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f04f 0200 	mov.w	r2, #0
 8013eb8:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	f04f 0200 	mov.w	r2, #0
 8013ec0:	619a      	str	r2, [r3, #24]
}
 8013ec2:	bf00      	nop
 8013ec4:	3720      	adds	r7, #32
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	40490fdb 	.word	0x40490fdb
 8013ed0:	3fb504f3 	.word	0x3fb504f3

08013ed4 <lpf2pApply>:

float lpf2pApply(lpf2pData* lpfData, float sample)
{
 8013ed4:	b480      	push	{r7}
 8013ed6:	b085      	sub	sp, #20
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
 8013edc:	ed87 0a00 	vstr	s0, [r7]
  float delay_element_0 = sample - lpfData->delay_element_1 * lpfData->a1 - lpfData->delay_element_2 * lpfData->a2;
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	ed93 7a05 	vldr	s14, [r3, #20]
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	edd3 7a00 	vldr	s15, [r3]
 8013eec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013ef0:	ed97 7a00 	vldr	s14, [r7]
 8013ef4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	edd3 6a06 	vldr	s13, [r3, #24]
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	edd3 7a01 	vldr	s15, [r3, #4]
 8013f04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013f0c:	edc7 7a03 	vstr	s15, [r7, #12]
  if (!isfinite(delay_element_0)) {
 8013f10:	edd7 7a03 	vldr	s15, [r7, #12]
 8013f14:	eef0 7ae7 	vabs.f32	s15, s15
 8013f18:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8013f88 <lpf2pApply+0xb4>
 8013f1c:	eef4 7a47 	vcmp.f32	s15, s14
 8013f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f24:	d901      	bls.n	8013f2a <lpf2pApply+0x56>
    // don't allow bad values to propigate via the filter
    delay_element_0 = sample;
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	60fb      	str	r3, [r7, #12]
  }

  float output = delay_element_0 * lpfData->b0 + lpfData->delay_element_1 * lpfData->b1 + lpfData->delay_element_2 * lpfData->b2;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8013f30:	edd7 7a03 	vldr	s15, [r7, #12]
 8013f34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	edd3 6a05 	vldr	s13, [r3, #20]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	edd3 7a03 	vldr	s15, [r3, #12]
 8013f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	edd3 6a06 	vldr	s13, [r3, #24]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	edd3 7a04 	vldr	s15, [r3, #16]
 8013f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f60:	edc7 7a02 	vstr	s15, [r7, #8]

  lpfData->delay_element_2 = lpfData->delay_element_1;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	695a      	ldr	r2, [r3, #20]
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	619a      	str	r2, [r3, #24]
  lpfData->delay_element_1 = delay_element_0;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	68fa      	ldr	r2, [r7, #12]
 8013f70:	615a      	str	r2, [r3, #20]
  return output;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	ee07 3a90 	vmov	s15, r3
}
 8013f78:	eeb0 0a67 	vmov.f32	s0, s15
 8013f7c:	3714      	adds	r7, #20
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f84:	4770      	bx	lr
 8013f86:	bf00      	nop
 8013f88:	7f7fffff 	.word	0x7f7fffff

08013f8c <deadband>:
{
  return fminf(maxVal, fmaxf(minVal,value));
}

float deadband(float value, const float threshold)
{
 8013f8c:	b480      	push	{r7}
 8013f8e:	b083      	sub	sp, #12
 8013f90:	af00      	add	r7, sp, #0
 8013f92:	ed87 0a01 	vstr	s0, [r7, #4]
 8013f96:	edc7 0a00 	vstr	s1, [r7]
  if (fabsf(value) < threshold)
 8013f9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8013f9e:	eef0 7ae7 	vabs.f32	s15, s15
 8013fa2:	ed97 7a00 	vldr	s14, [r7]
 8013fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fae:	dd03      	ble.n	8013fb8 <deadband+0x2c>
  {
    value = 0;
 8013fb0:	f04f 0300 	mov.w	r3, #0
 8013fb4:	607b      	str	r3, [r7, #4]
 8013fb6:	e01e      	b.n	8013ff6 <deadband+0x6a>
  }
  else if (value > 0)
 8013fb8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013fbc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc4:	dd08      	ble.n	8013fd8 <deadband+0x4c>
  {
    value -= threshold;
 8013fc6:	ed97 7a01 	vldr	s14, [r7, #4]
 8013fca:	edd7 7a00 	vldr	s15, [r7]
 8013fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fd2:	edc7 7a01 	vstr	s15, [r7, #4]
 8013fd6:	e00e      	b.n	8013ff6 <deadband+0x6a>
  }
  else if (value < 0)
 8013fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8013fdc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fe4:	d507      	bpl.n	8013ff6 <deadband+0x6a>
  {
    value += threshold;
 8013fe6:	ed97 7a01 	vldr	s14, [r7, #4]
 8013fea:	edd7 7a00 	vldr	s15, [r7]
 8013fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ff2:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	ee07 3a90 	vmov	s15, r3
}
 8013ffc:	eeb0 0a67 	vmov.f32	s0, s15
 8014000:	370c      	adds	r7, #12
 8014002:	46bd      	mov	sp, r7
 8014004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014008:	4770      	bx	lr

0801400a <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 801400a:	b480      	push	{r7}
 801400c:	b085      	sub	sp, #20
 801400e:	af00      	add	r7, sp, #0
 8014010:	60f8      	str	r0, [r7, #12]
 8014012:	60b9      	str	r1, [r7, #8]
 8014014:	607a      	str	r2, [r7, #4]
 8014016:	603b      	str	r3, [r7, #0]
    context->count = 0;
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	2200      	movs	r2, #0
 801401c:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 8014024:	68fb      	ldr	r3, [r7, #12]
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	69ba      	ldr	r2, [r7, #24]
 801402e:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 8014030:	68ba      	ldr	r2, [r7, #8]
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	441a      	add	r2, r3
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2200      	movs	r2, #0
 801403e:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 8014040:	68fb      	ldr	r3, [r7, #12]
 8014042:	7f3a      	ldrb	r2, [r7, #28]
 8014044:	761a      	strb	r2, [r3, #24]
}
 8014046:	bf00      	nop
 8014048:	3714      	adds	r7, #20
 801404a:	46bd      	mov	sp, r7
 801404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014050:	4770      	bx	lr

08014052 <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 8014052:	b480      	push	{r7}
 8014054:	b085      	sub	sp, #20
 8014056:	af00      	add	r7, sp, #0
 8014058:	6078      	str	r0, [r7, #4]
 801405a:	6039      	str	r1, [r7, #0]
    bool result = true;
 801405c:	2301      	movs	r3, #1
 801405e:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	1c5a      	adds	r2, r3, #1
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	68db      	ldr	r3, [r3, #12]
 801406e:	683a      	ldr	r2, [r7, #0]
 8014070:	429a      	cmp	r2, r3
 8014072:	d927      	bls.n	80140c4 <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	681b      	ldr	r3, [r3, #0]
 8014078:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	68ba      	ldr	r2, [r7, #8]
 8014080:	429a      	cmp	r2, r3
 8014082:	d304      	bcc.n	801408e <rateSupervisorValidate+0x3c>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	689b      	ldr	r3, [r3, #8]
 8014088:	68ba      	ldr	r2, [r7, #8]
 801408a:	429a      	cmp	r2, r3
 801408c:	d901      	bls.n	8014092 <rateSupervisorValidate+0x40>
            result = false;
 801408e:	2300      	movs	r3, #0
 8014090:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	681a      	ldr	r2, [r3, #0]
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	615a      	str	r2, [r3, #20]
        context->count = 0;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2200      	movs	r2, #0
 801409e:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	691a      	ldr	r2, [r3, #16]
 80140a4:	683b      	ldr	r3, [r7, #0]
 80140a6:	441a      	add	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	7e1b      	ldrb	r3, [r3, #24]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d007      	beq.n	80140c4 <rateSupervisorValidate+0x72>
            result = true;
 80140b4:	2301      	movs	r3, #1
 80140b6:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	7e1b      	ldrb	r3, [r3, #24]
 80140bc:	3b01      	subs	r3, #1
 80140be:	b2da      	uxtb	r2, r3
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 80140c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3714      	adds	r7, #20
 80140ca:	46bd      	mov	sp, r7
 80140cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140d0:	4770      	bx	lr

080140d2 <sleepus>:
 */
#include "sleepus.h"
#include "usec_time.h"

void sleepus(uint32_t us)
{
 80140d2:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80140d6:	b084      	sub	sp, #16
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  uint64_t start = usecTimestamp();
 80140dc:	f7f9 f9f6 	bl	800d4cc <usecTimestamp>
 80140e0:	e9c7 0102 	strd	r0, r1, [r7, #8]
  while ((start+us) > usecTimestamp()) {
 80140e4:	bf00      	nop
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2200      	movs	r2, #0
 80140ea:	4698      	mov	r8, r3
 80140ec:	4691      	mov	r9, r2
 80140ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80140f2:	eb18 0402 	adds.w	r4, r8, r2
 80140f6:	eb49 0503 	adc.w	r5, r9, r3
 80140fa:	f7f9 f9e7 	bl	800d4cc <usecTimestamp>
 80140fe:	4602      	mov	r2, r0
 8014100:	460b      	mov	r3, r1
 8014102:	42a2      	cmp	r2, r4
 8014104:	41ab      	sbcs	r3, r5
 8014106:	d3ee      	bcc.n	80140e6 <sleepus+0x14>
  }
}
 8014108:	bf00      	nop
 801410a:	bf00      	nop
 801410c:	3710      	adds	r7, #16
 801410e:	46bd      	mov	sp, r7
 8014110:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08014114 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	460b      	mov	r3, r1
 801411e:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014120:	2300      	movs	r3, #0
 8014122:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8014124:	78fb      	ldrb	r3, [r7, #3]
 8014126:	461a      	mov	r2, r3
 8014128:	2101      	movs	r1, #1
 801412a:	6878      	ldr	r0, [r7, #4]
 801412c:	f7f7 fca1 	bl	800ba72 <VL53L1_WrByte>
 8014130:	4603      	mov	r3, r0
 8014132:	73fb      	strb	r3, [r7, #15]
		DeviceAddress);

	LOG_FUNCTION_END(Status);
	return Status;
 8014134:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3710      	adds	r7, #16
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014148:	2300      	movs	r3, #0
 801414a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 801414c:	f107 030e 	add.w	r3, r7, #14
 8014150:	461a      	mov	r2, r3
 8014152:	212e      	movs	r1, #46	@ 0x2e
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7f7 fcb1 	bl	800babc <VL53L1_RdByte>
 801415a:	4603      	mov	r3, r0
 801415c:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 801415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014162:	2b00      	cmp	r3, #0
 8014164:	d10c      	bne.n	8014180 <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 8014166:	7bbb      	ldrb	r3, [r7, #14]
 8014168:	f043 0301 	orr.w	r3, r3, #1
 801416c:	b2db      	uxtb	r3, r3
 801416e:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 8014170:	7bbb      	ldrb	r3, [r7, #14]
 8014172:	461a      	mov	r2, r3
 8014174:	212e      	movs	r1, #46	@ 0x2e
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7f7 fc7b 	bl	800ba72 <VL53L1_WrByte>
 801417c:	4603      	mov	r3, r0
 801417e:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8014180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d105      	bne.n	8014194 <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 8014188:	2101      	movs	r1, #1
 801418a:	6878      	ldr	r0, [r7, #4]
 801418c:	f000 fe76 	bl	8014e7c <VL53L1_data_init>
 8014190:	4603      	mov	r3, r0
 8014192:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8014194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d107      	bne.n	80141ac <VL53L1_DataInit+0x6c>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2201      	movs	r2, #1
 80141a0:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	2208      	movs	r2, #8
 80141a8:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80141ac:	2300      	movs	r3, #0
 80141ae:	73bb      	strb	r3, [r7, #14]
 80141b0:	e012      	b.n	80141d8 <VL53L1_DataInit+0x98>
		if (Status == VL53L1_ERROR_NONE)
 80141b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d112      	bne.n	80141e0 <VL53L1_DataInit+0xa0>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 80141ba:	7bbb      	ldrb	r3, [r7, #14]
 80141bc:	2201      	movs	r2, #1
 80141be:	4619      	mov	r1, r3
 80141c0:	6878      	ldr	r0, [r7, #4]
 80141c2:	f000 fb03 	bl	80147cc <VL53L1_SetLimitCheckEnable>
 80141c6:	4603      	mov	r3, r0
 80141c8:	461a      	mov	r2, r3
 80141ca:	7bfb      	ldrb	r3, [r7, #15]
 80141cc:	4313      	orrs	r3, r2
 80141ce:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80141d0:	7bbb      	ldrb	r3, [r7, #14]
 80141d2:	3301      	adds	r3, #1
 80141d4:	b2db      	uxtb	r3, r3
 80141d6:	73bb      	strb	r3, [r7, #14]
 80141d8:	7bbb      	ldrb	r3, [r7, #14]
 80141da:	2b01      	cmp	r3, #1
 80141dc:	d9e9      	bls.n	80141b2 <VL53L1_DataInit+0x72>
 80141de:	e000      	b.n	80141e2 <VL53L1_DataInit+0xa2>
		else
			break;
 80141e0:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 80141e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d107      	bne.n	80141fa <VL53L1_DataInit+0xba>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80141ea:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 80141ee:	2100      	movs	r1, #0
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f000 fb4c 	bl	801488e <VL53L1_SetLimitCheckValue>
 80141f6:	4603      	mov	r3, r0
 80141f8:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 80141fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d107      	bne.n	8014212 <VL53L1_DataInit+0xd2>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8014202:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8014206:	2101      	movs	r1, #1
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f000 fb40 	bl	801488e <VL53L1_SetLimitCheckValue>
 801420e:	4603      	mov	r3, r0
 8014210:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8014212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014216:	4618      	mov	r0, r3
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}

0801421e <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 801421e:	b580      	push	{r7, lr}
 8014220:	b084      	sub	sp, #16
 8014222:	af00      	add	r7, sp, #0
 8014224:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014226:	2300      	movs	r3, #0
 8014228:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2203      	movs	r2, #3
 801422e:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8014232:	2320      	movs	r3, #32
 8014234:	73bb      	strb	r3, [r7, #14]
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	7bba      	ldrb	r2, [r7, #14]
 801423a:	709a      	strb	r2, [r3, #2]

	PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	2203      	movs	r2, #3
 8014240:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	2203      	movs	r2, #3
 8014248:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	2203      	movs	r2, #3
 8014250:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8014254:	2108      	movs	r1, #8
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 f8d7 	bl	801440a <VL53L1_SetPresetMode>
 801425c:	4603      	mov	r3, r0
 801425e:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8014260:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014264:	4618      	mov	r0, r3
 8014266:	3710      	adds	r7, #16
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 801426c:	b480      	push	{r7}
 801426e:	b087      	sub	sp, #28
 8014270:	af00      	add	r7, sp, #0
 8014272:	4603      	mov	r3, r0
 8014274:	603a      	str	r2, [r7, #0]
 8014276:	71fb      	strb	r3, [r7, #7]
 8014278:	460b      	mov	r3, r1
 801427a:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801427c:	2300      	movs	r3, #0
 801427e:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8014280:	4a2b      	ldr	r2, [pc, #172]	@ (8014330 <ComputeDevicePresetMode+0xc4>)
 8014282:	f107 0310 	add.w	r3, r7, #16
 8014286:	6812      	ldr	r2, [r2, #0]
 8014288:	4611      	mov	r1, r2
 801428a:	8019      	strh	r1, [r3, #0]
 801428c:	3302      	adds	r3, #2
 801428e:	0c12      	lsrs	r2, r2, #16
 8014290:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8014292:	4a28      	ldr	r2, [pc, #160]	@ (8014334 <ComputeDevicePresetMode+0xc8>)
 8014294:	f107 030c 	add.w	r3, r7, #12
 8014298:	6812      	ldr	r2, [r2, #0]
 801429a:	4611      	mov	r1, r2
 801429c:	8019      	strh	r1, [r3, #0]
 801429e:	3302      	adds	r3, #2
 80142a0:	0c12      	lsrs	r2, r2, #16
 80142a2:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 80142a4:	4a24      	ldr	r2, [pc, #144]	@ (8014338 <ComputeDevicePresetMode+0xcc>)
 80142a6:	f107 0308 	add.w	r3, r7, #8
 80142aa:	6812      	ldr	r2, [r2, #0]
 80142ac:	4611      	mov	r1, r2
 80142ae:	8019      	strh	r1, [r3, #0]
 80142b0:	3302      	adds	r3, #2
 80142b2:	0c12      	lsrs	r2, r2, #16
 80142b4:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	2201      	movs	r2, #1
 80142ba:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 80142bc:	79bb      	ldrb	r3, [r7, #6]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d002      	beq.n	80142c8 <ComputeDevicePresetMode+0x5c>
 80142c2:	2b02      	cmp	r3, #2
 80142c4:	d003      	beq.n	80142ce <ComputeDevicePresetMode+0x62>
 80142c6:	e005      	b.n	80142d4 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80142c8:	2300      	movs	r3, #0
 80142ca:	75bb      	strb	r3, [r7, #22]
		break;
 80142cc:	e004      	b.n	80142d8 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80142ce:	2301      	movs	r3, #1
 80142d0:	75bb      	strb	r3, [r7, #22]
		break;
 80142d2:	e001      	b.n	80142d8 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80142d4:	2302      	movs	r3, #2
 80142d6:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80142d8:	79fb      	ldrb	r3, [r7, #7]
 80142da:	2b08      	cmp	r3, #8
 80142dc:	d015      	beq.n	801430a <ComputeDevicePresetMode+0x9e>
 80142de:	2b08      	cmp	r3, #8
 80142e0:	dc1b      	bgt.n	801431a <ComputeDevicePresetMode+0xae>
 80142e2:	2b03      	cmp	r3, #3
 80142e4:	d009      	beq.n	80142fa <ComputeDevicePresetMode+0x8e>
 80142e6:	2b04      	cmp	r3, #4
 80142e8:	d117      	bne.n	801431a <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80142ea:	7dbb      	ldrb	r3, [r7, #22]
 80142ec:	3318      	adds	r3, #24
 80142ee:	443b      	add	r3, r7
 80142f0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80142f4:	683b      	ldr	r3, [r7, #0]
 80142f6:	701a      	strb	r2, [r3, #0]
		break;
 80142f8:	e011      	b.n	801431e <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80142fa:	7dbb      	ldrb	r3, [r7, #22]
 80142fc:	3318      	adds	r3, #24
 80142fe:	443b      	add	r3, r7
 8014300:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	701a      	strb	r2, [r3, #0]
		break;
 8014308:	e009      	b.n	801431e <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 801430a:	7dbb      	ldrb	r3, [r7, #22]
 801430c:	3318      	adds	r3, #24
 801430e:	443b      	add	r3, r7
 8014310:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	701a      	strb	r2, [r3, #0]
		break;
 8014318:	e001      	b.n	801431e <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 801431a:	23f8      	movs	r3, #248	@ 0xf8
 801431c:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 801431e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014322:	4618      	mov	r0, r3
 8014324:	371c      	adds	r7, #28
 8014326:	46bd      	mov	sp, r7
 8014328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801432c:	4770      	bx	lr
 801432e:	bf00      	nop
 8014330:	0801c1fc 	.word	0x0801c1fc
 8014334:	0801c200 	.word	0x0801c200
 8014338:	0801c204 	.word	0x0801c204

0801433c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 801433c:	b5b0      	push	{r4, r5, r7, lr}
 801433e:	b08e      	sub	sp, #56	@ 0x38
 8014340:	af04      	add	r7, sp, #16
 8014342:	60f8      	str	r0, [r7, #12]
 8014344:	607b      	str	r3, [r7, #4]
 8014346:	460b      	mov	r3, r1
 8014348:	72fb      	strb	r3, [r7, #11]
 801434a:	4613      	mov	r3, r2
 801434c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801434e:	2300      	movs	r3, #0
 8014350:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8014354:	7afb      	ldrb	r3, [r7, #11]
 8014356:	2b03      	cmp	r3, #3
 8014358:	d002      	beq.n	8014360 <SetPresetMode+0x24>
 801435a:	7afb      	ldrb	r3, [r7, #11]
 801435c:	2b08      	cmp	r3, #8
 801435e:	d103      	bne.n	8014368 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8014360:	2340      	movs	r3, #64	@ 0x40
 8014362:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014366:	e002      	b.n	801436e <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8014368:	2320      	movs	r3, #32
 801436a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 801436e:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8014372:	7ab9      	ldrb	r1, [r7, #10]
 8014374:	7afb      	ldrb	r3, [r7, #11]
 8014376:	4618      	mov	r0, r3
 8014378:	f7ff ff78 	bl	801426c <ComputeDevicePresetMode>
 801437c:	4603      	mov	r3, r0
 801437e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8014382:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8014386:	2b00      	cmp	r3, #0
 8014388:	d112      	bne.n	80143b0 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 801438a:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 801438e:	f107 001c 	add.w	r0, r7, #28
 8014392:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8014396:	f107 0314 	add.w	r3, r7, #20
 801439a:	9301      	str	r3, [sp, #4]
 801439c:	f107 0318 	add.w	r3, r7, #24
 80143a0:	9300      	str	r3, [sp, #0]
 80143a2:	4603      	mov	r3, r0
 80143a4:	68f8      	ldr	r0, [r7, #12]
 80143a6:	f001 f801 	bl	80153ac <VL53L1_get_preset_mode_timing_cfg>
 80143aa:	4603      	mov	r3, r0
 80143ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 80143b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d112      	bne.n	80143de <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 80143b8:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 80143bc:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 80143be:	69fd      	ldr	r5, [r7, #28]
 80143c0:	69bb      	ldr	r3, [r7, #24]
 80143c2:	697a      	ldr	r2, [r7, #20]
 80143c4:	6879      	ldr	r1, [r7, #4]
 80143c6:	9102      	str	r1, [sp, #8]
 80143c8:	9201      	str	r2, [sp, #4]
 80143ca:	9300      	str	r3, [sp, #0]
 80143cc:	462b      	mov	r3, r5
 80143ce:	4622      	mov	r2, r4
 80143d0:	4601      	mov	r1, r0
 80143d2:	68f8      	ldr	r0, [r7, #12]
 80143d4:	f001 f894 	bl	8015500 <VL53L1_set_preset_mode>
 80143d8:	4603      	mov	r3, r0
 80143da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80143de:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d103      	bne.n	80143ee <SetPresetMode+0xb2>
		PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80143ec:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 80143ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d103      	bne.n	80143fe <SetPresetMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	7afa      	ldrb	r2, [r7, #11]
 80143fa:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 80143fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8014402:	4618      	mov	r0, r3
 8014404:	3728      	adds	r7, #40	@ 0x28
 8014406:	46bd      	mov	sp, r7
 8014408:	bdb0      	pop	{r4, r5, r7, pc}

0801440a <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 801440a:	b580      	push	{r7, lr}
 801440c:	b084      	sub	sp, #16
 801440e:	af00      	add	r7, sp, #0
 8014410:	6078      	str	r0, [r7, #4]
 8014412:	460b      	mov	r3, r1
 8014414:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014416:	2300      	movs	r3, #0
 8014418:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 801441a:	2303      	movs	r3, #3
 801441c:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 801441e:	7bba      	ldrb	r2, [r7, #14]
 8014420:	78f9      	ldrb	r1, [r7, #3]
 8014422:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f7ff ff88 	bl	801433c <SetPresetMode>
 801442c:	4603      	mov	r3, r0
 801442e:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8014430:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d11f      	bne.n	8014478 <VL53L1_SetPresetMode+0x6e>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	7bba      	ldrb	r2, [r7, #14]
 801443c:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				DistanceMode);

		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	7bba      	ldrb	r2, [r7, #14]
 8014444:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8014448:	78fb      	ldrb	r3, [r7, #3]
 801444a:	2b04      	cmp	r3, #4
 801444c:	d005      	beq.n	801445a <VL53L1_SetPresetMode+0x50>
 801444e:	78fb      	ldrb	r3, [r7, #3]
 8014450:	2b03      	cmp	r3, #3
 8014452:	d002      	beq.n	801445a <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8014454:	78fb      	ldrb	r3, [r7, #3]
 8014456:	2b08      	cmp	r3, #8
 8014458:	d107      	bne.n	801446a <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 801445a:	f24a 0128 	movw	r1, #41000	@ 0xa028
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f000 f8a2 	bl	80145a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014464:	4603      	mov	r3, r0
 8014466:	73fb      	strb	r3, [r7, #15]
 8014468:	e006      	b.n	8014478 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 801446a:	f248 2135 	movw	r1, #33333	@ 0x8235
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f000 f89a 	bl	80145a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8014474:	4603      	mov	r3, r0
 8014476:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8014478:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d106      	bne.n	801448e <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8014480:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8014484:	6878      	ldr	r0, [r7, #4]
 8014486:	f000 f965 	bl	8014754 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 801448a:	4603      	mov	r3, r0
 801448c:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801448e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014492:	4618      	mov	r0, r3
 8014494:	3710      	adds	r7, #16
 8014496:	46bd      	mov	sp, r7
 8014498:	bd80      	pop	{r7, pc}

0801449a <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 801449a:	b580      	push	{r7, lr}
 801449c:	b088      	sub	sp, #32
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
 80144a2:	460b      	mov	r3, r1
 80144a4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80144a6:	2300      	movs	r3, #0
 80144a8:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80144b0:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 80144b2:	78fb      	ldrb	r3, [r7, #3]
 80144b4:	2b01      	cmp	r3, #1
 80144b6:	d008      	beq.n	80144ca <VL53L1_SetDistanceMode+0x30>
 80144b8:	78fb      	ldrb	r3, [r7, #3]
 80144ba:	2b02      	cmp	r3, #2
 80144bc:	d005      	beq.n	80144ca <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 80144be:	78fb      	ldrb	r3, [r7, #3]
 80144c0:	2b03      	cmp	r3, #3
 80144c2:	d002      	beq.n	80144ca <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80144c4:	f06f 0303 	mvn.w	r3, #3
 80144c8:	e069      	b.n	801459e <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 80144ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d10a      	bne.n	80144e8 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 80144d2:	78fb      	ldrb	r3, [r7, #3]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d002      	beq.n	80144de <VL53L1_SetDistanceMode+0x44>
 80144d8:	78fb      	ldrb	r3, [r7, #3]
 80144da:	2b02      	cmp	r3, #2
 80144dc:	d102      	bne.n	80144e4 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 80144de:	78fb      	ldrb	r3, [r7, #3]
 80144e0:	77bb      	strb	r3, [r7, #30]
 80144e2:	e001      	b.n	80144e8 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80144e4:	2303      	movs	r3, #3
 80144e6:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 80144e8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d107      	bne.n	8014500 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80144f0:	f107 0308 	add.w	r3, r7, #8
 80144f4:	4619      	mov	r1, r3
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f000 ff01 	bl	80152fe <VL53L1_get_user_zone>
 80144fc:	4603      	mov	r3, r0
 80144fe:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  PALDevDataGet(Dev,
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	695b      	ldr	r3, [r3, #20]
 8014504:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8014506:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d10a      	bne.n	8014524 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 801450e:	f107 0314 	add.w	r3, r7, #20
 8014512:	f107 0210 	add.w	r2, r7, #16
 8014516:	f107 010c 	add.w	r1, r7, #12
 801451a:	6878      	ldr	r0, [r7, #4]
 801451c:	f000 fe2c 	bl	8015178 <VL53L1_get_timeouts_us>
 8014520:	4603      	mov	r3, r0
 8014522:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8014524:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d107      	bne.n	801453c <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 801452c:	7fba      	ldrb	r2, [r7, #30]
 801452e:	7f79      	ldrb	r1, [r7, #29]
 8014530:	69bb      	ldr	r3, [r7, #24]
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f7ff ff02 	bl	801433c <SetPresetMode>
 8014538:	4603      	mov	r3, r0
 801453a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 801453c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014540:	2b00      	cmp	r3, #0
 8014542:	d10b      	bne.n	801455c <VL53L1_SetDistanceMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	7fba      	ldrb	r2, [r7, #30]
 8014548:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	7fba      	ldrb	r2, [r7, #30]
 8014550:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	78fa      	ldrb	r2, [r7, #3]
 8014558:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 801455c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d10e      	bne.n	8014582 <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8014564:	68f9      	ldr	r1, [r7, #12]
 8014566:	693a      	ldr	r2, [r7, #16]
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f000 fdcc 	bl	8015108 <VL53L1_set_timeouts_us>
 8014570:	4603      	mov	r3, r0
 8014572:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8014574:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d102      	bne.n	8014582 <VL53L1_SetDistanceMode+0xe8>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 801457c:	697a      	ldr	r2, [r7, #20]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8014582:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d107      	bne.n	801459a <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 801458a:	f107 0308 	add.w	r3, r7, #8
 801458e:	4619      	mov	r1, r3
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f000 fe91 	bl	80152b8 <VL53L1_set_user_zone>
 8014596:	4603      	mov	r3, r0
 8014598:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 801459a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3720      	adds	r7, #32
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}
	...

080145a8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b08e      	sub	sp, #56	@ 0x38
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
 80145b0:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80145b2:	2300      	movs	r3, #0
 80145b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 80145b8:	4b64      	ldr	r3, [pc, #400]	@ (801474c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 80145ba:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_LLDriverData_t   *pLLData;

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	4a64      	ldr	r2, [pc, #400]	@ (8014750 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 80145c0:	4293      	cmp	r3, r2
 80145c2:	d902      	bls.n	80145ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80145c4:	23fc      	movs	r3, #252	@ 0xfc
 80145c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (Status == VL53L1_ERROR_NONE) {
 80145ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d109      	bne.n	80145e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80145d2:	f107 0317 	add.w	r3, r7, #23
 80145d6:	461a      	mov	r2, r3
 80145d8:	2105      	movs	r1, #5
 80145da:	6878      	ldr	r0, [r7, #4]
 80145dc:	f000 f9e7 	bl	80149ae <VL53L1_GetSequenceStepEnable>
 80145e0:	4603      	mov	r3, r0
 80145e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80145e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d109      	bne.n	8014602 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 80145ee:	f107 0316 	add.w	r3, r7, #22
 80145f2:	461a      	mov	r2, r3
 80145f4:	2106      	movs	r1, #6
 80145f6:	6878      	ldr	r0, [r7, #4]
 80145f8:	f000 f9d9 	bl	80149ae <VL53L1_GetSequenceStepEnable>
 80145fc:	4603      	mov	r3, r0
 80145fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8014602:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014606:	2b00      	cmp	r3, #0
 8014608:	d10b      	bne.n	8014622 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 801460a:	f107 0310 	add.w	r3, r7, #16
 801460e:	f107 020c 	add.w	r2, r7, #12
 8014612:	f107 0108 	add.w	r1, r7, #8
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f000 fdae 	bl	8015178 <VL53L1_get_timeouts_us>
 801461c:	4603      	mov	r3, r0
 801461e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8014622:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014626:	2b00      	cmp	r3, #0
 8014628:	f040 8081 	bne.w	801472e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8014632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		TimingGuard = 0;
 8014636:	2300      	movs	r3, #0
 8014638:	633b      	str	r3, [r7, #48]	@ 0x30
		divisor = 1;
 801463a:	2301      	movs	r3, #1
 801463c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		switch (PresetMode) {
 801463e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014642:	2b08      	cmp	r3, #8
 8014644:	d026      	beq.n	8014694 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8014646:	2b08      	cmp	r3, #8
 8014648:	dc41      	bgt.n	80146ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 801464a:	2b03      	cmp	r3, #3
 801464c:	d00f      	beq.n	801466e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 801464e:	2b04      	cmp	r3, #4
 8014650:	d13d      	bne.n	80146ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8014652:	7dfb      	ldrb	r3, [r7, #23]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d002      	beq.n	801465e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
 8014658:	7dbb      	ldrb	r3, [r7, #22]
 801465a:	2b01      	cmp	r3, #1
 801465c:	d103      	bne.n	8014666 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
				TimingGuard = 5000;
 801465e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8014662:	633b      	str	r3, [r7, #48]	@ 0x30
			else
				TimingGuard = 1000;
		break;
 8014664:	e036      	b.n	80146d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 8014666:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801466a:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 801466c:	e032      	b.n	80146d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 801466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014670:	005b      	lsls	r3, r3, #1
 8014672:	627b      	str	r3, [r7, #36]	@ 0x24
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8014674:	7dfb      	ldrb	r3, [r7, #23]
 8014676:	2b01      	cmp	r3, #1
 8014678:	d002      	beq.n	8014680 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
 801467a:	7dbb      	ldrb	r3, [r7, #22]
 801467c:	2b01      	cmp	r3, #1
 801467e:	d103      	bne.n	8014688 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe0>
				TimingGuard = 26600;
 8014680:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8014684:	633b      	str	r3, [r7, #48]	@ 0x30
 8014686:	e002      	b.n	801468e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe6>
			else
				TimingGuard = 21600;
 8014688:	f245 4360 	movw	r3, #21600	@ 0x5460
 801468c:	633b      	str	r3, [r7, #48]	@ 0x30
			divisor = 2;
 801468e:	2302      	movs	r3, #2
 8014690:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8014692:	e01f      	b.n	80146d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8014694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014696:	005b      	lsls	r3, r3, #1
 8014698:	627b      	str	r3, [r7, #36]	@ 0x24
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 801469a:	23f5      	movs	r3, #245	@ 0xf5
 801469c:	62bb      	str	r3, [r7, #40]	@ 0x28
			pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	61fb      	str	r3, [r7, #28]
			vhv_loops = pLLData->low_power_auto_data.vhv_loop_bound;
 80146a2:	69fb      	ldr	r3, [r7, #28]
 80146a4:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80146a8:	61bb      	str	r3, [r7, #24]
			if (vhv_loops > 0) {
 80146aa:	69bb      	ldr	r3, [r7, #24]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	dd07      	ble.n	80146c0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 80146b0:	69bb      	ldr	r3, [r7, #24]
 80146b2:	22f5      	movs	r2, #245	@ 0xf5
 80146b4:	fb02 f303 	mul.w	r3, r2, r3
 80146b8:	461a      	mov	r2, r3
 80146ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146bc:	4413      	add	r3, r2
 80146be:	62bb      	str	r3, [r7, #40]	@ 0x28
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 80146c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146c2:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 80146c6:	633b      	str	r3, [r7, #48]	@ 0x30
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 80146c8:	2302      	movs	r3, #2
 80146ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 80146cc:	e002      	b.n	80146d4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80146ce:	23f8      	movs	r3, #248	@ 0xf8
 80146d0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 80146d4:	683a      	ldr	r2, [r7, #0]
 80146d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146d8:	429a      	cmp	r2, r3
 80146da:	d803      	bhi.n	80146e4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80146dc:	23fc      	movs	r3, #252	@ 0xfc
 80146de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80146e2:	e003      	b.n	80146ec <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 80146e4:	683a      	ldr	r2, [r7, #0]
 80146e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146e8:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 80146ea:	613b      	str	r3, [r7, #16]
		}

		if (Status == VL53L1_ERROR_NONE) {
 80146ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d11c      	bne.n	801472e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 80146f4:	693b      	ldr	r3, [r7, #16]
 80146f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d203      	bcs.n	8014704 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80146fc:	23fc      	movs	r3, #252	@ 0xfc
 80146fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8014702:	e00d      	b.n	8014720 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 8014704:	693a      	ldr	r2, [r7, #16]
 8014706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014708:	fbb2 f3f3 	udiv	r3, r2, r3
 801470c:	613b      	str	r3, [r7, #16]
				Status = VL53L1_set_timeouts_us(
 801470e:	68b9      	ldr	r1, [r7, #8]
 8014710:	68fa      	ldr	r2, [r7, #12]
 8014712:	693b      	ldr	r3, [r7, #16]
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f000 fcf7 	bl	8015108 <VL53L1_set_timeouts_us>
 801471a:	4603      	mov	r3, r0
 801471c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8014720:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014724:	2b00      	cmp	r3, #0
 8014726:	d102      	bne.n	801472e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				PALDevDataSet(Dev,
 8014728:	693a      	ldr	r2, [r7, #16]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 801472e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014732:	2b00      	cmp	r3, #0
 8014734:	d103      	bne.n	801473e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		PALDevDataSet(Dev,
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	683a      	ldr	r2, [r7, #0]
 801473a:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801473e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8014742:	4618      	mov	r0, r3
 8014744:	3738      	adds	r7, #56	@ 0x38
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}
 801474a:	bf00      	nop
 801474c:	00086470 	.word	0x00086470
 8014750:	00989680 	.word	0x00989680

08014754 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8014754:	b580      	push	{r7, lr}
 8014756:	b084      	sub	sp, #16
 8014758:	af00      	add	r7, sp, #0
 801475a:	6078      	str	r0, [r7, #4]
 801475c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801475e:	2300      	movs	r3, #0
 8014760:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8014762:	6839      	ldr	r1, [r7, #0]
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f000 fca6 	bl	80150b6 <VL53L1_set_inter_measurement_period_ms>
 801476a:	4603      	mov	r3, r0
 801476c:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 801476e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014772:	4618      	mov	r0, r3
 8014774:	3710      	adds	r7, #16
 8014776:	46bd      	mov	sp, r7
 8014778:	bd80      	pop	{r7, pc}

0801477a <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 801477a:	b580      	push	{r7, lr}
 801477c:	b086      	sub	sp, #24
 801477e:	af00      	add	r7, sp, #0
 8014780:	60f8      	str	r0, [r7, #12]
 8014782:	460b      	mov	r3, r1
 8014784:	607a      	str	r2, [r7, #4]
 8014786:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014788:	2300      	movs	r3, #0
 801478a:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 801478c:	897b      	ldrh	r3, [r7, #10]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d002      	beq.n	8014798 <SetLimitValue+0x1e>
 8014792:	2b01      	cmp	r3, #1
 8014794:	d009      	beq.n	80147aa <SetLimitValue+0x30>
 8014796:	e011      	b.n	80147bc <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	0b9b      	lsrs	r3, r3, #14
 801479c:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 801479e:	8abb      	ldrh	r3, [r7, #20]
 80147a0:	4619      	mov	r1, r3
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f001 f838 	bl	8015818 <VL53L1_set_lite_sigma_threshold>
		break;
 80147a8:	e00a      	b.n	80147c0 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	0a5b      	lsrs	r3, r3, #9
 80147ae:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 80147b0:	8abb      	ldrh	r3, [r7, #20]
 80147b2:	4619      	mov	r1, r3
 80147b4:	68f8      	ldr	r0, [r7, #12]
 80147b6:	f001 f85b 	bl	8015870 <VL53L1_set_lite_min_count_rate>
		break;
 80147ba:	e001      	b.n	80147c0 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80147bc:	23fc      	movs	r3, #252	@ 0xfc
 80147be:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80147c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80147c4:	4618      	mov	r0, r3
 80147c6:	3718      	adds	r7, #24
 80147c8:	46bd      	mov	sp, r7
 80147ca:	bd80      	pop	{r7, pc}

080147cc <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80147cc:	b580      	push	{r7, lr}
 80147ce:	b084      	sub	sp, #16
 80147d0:	af00      	add	r7, sp, #0
 80147d2:	6078      	str	r0, [r7, #4]
 80147d4:	460b      	mov	r3, r1
 80147d6:	807b      	strh	r3, [r7, #2]
 80147d8:	4613      	mov	r3, r2
 80147da:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80147dc:	2300      	movs	r3, #0
 80147de:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 80147e0:	2300      	movs	r3, #0
 80147e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80147e4:	887b      	ldrh	r3, [r7, #2]
 80147e6:	2b01      	cmp	r3, #1
 80147e8:	d902      	bls.n	80147f0 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80147ea:	23fc      	movs	r3, #252	@ 0xfc
 80147ec:	73fb      	strb	r3, [r7, #15]
 80147ee:	e014      	b.n	801481a <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 80147f0:	787b      	ldrb	r3, [r7, #1]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d102      	bne.n	80147fc <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 80147f6:	2300      	movs	r3, #0
 80147f8:	60bb      	str	r3, [r7, #8]
 80147fa:	e006      	b.n	801480a <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80147fc:	887b      	ldrh	r3, [r7, #2]
 80147fe:	687a      	ldr	r2, [r7, #4]
 8014800:	33e0      	adds	r3, #224	@ 0xe0
 8014802:	009b      	lsls	r3, r3, #2
 8014804:	4413      	add	r3, r2
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 801480a:	887b      	ldrh	r3, [r7, #2]
 801480c:	68ba      	ldr	r2, [r7, #8]
 801480e:	4619      	mov	r1, r3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f7ff ffb2 	bl	801477a <SetLimitValue>
 8014816:	4603      	mov	r3, r0
 8014818:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 801481a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10c      	bne.n	801483c <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014822:	787b      	ldrb	r3, [r7, #1]
 8014824:	2b00      	cmp	r3, #0
 8014826:	bf14      	ite	ne
 8014828:	2301      	movne	r3, #1
 801482a:	2300      	moveq	r3, #0
 801482c:	b2da      	uxtb	r2, r3
 801482e:	887b      	ldrh	r3, [r7, #2]
 8014830:	4611      	mov	r1, r2
 8014832:	687a      	ldr	r2, [r7, #4]
 8014834:	4413      	add	r3, r2
 8014836:	460a      	mov	r2, r1
 8014838:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 801483c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014840:	4618      	mov	r0, r3
 8014842:	3710      	adds	r7, #16
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8014848:	b480      	push	{r7}
 801484a:	b087      	sub	sp, #28
 801484c:	af00      	add	r7, sp, #0
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	460b      	mov	r3, r1
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014856:	2300      	movs	r3, #0
 8014858:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 801485a:	897b      	ldrh	r3, [r7, #10]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d905      	bls.n	801486c <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8014860:	23fc      	movs	r3, #252	@ 0xfc
 8014862:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	701a      	strb	r2, [r3, #0]
 801486a:	e008      	b.n	801487e <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 801486c:	897b      	ldrh	r3, [r7, #10]
 801486e:	68fa      	ldr	r2, [r7, #12]
 8014870:	4413      	add	r3, r2
 8014872:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 8014876:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	7dba      	ldrb	r2, [r7, #22]
 801487c:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 801487e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014882:	4618      	mov	r0, r3
 8014884:	371c      	adds	r7, #28
 8014886:	46bd      	mov	sp, r7
 8014888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488c:	4770      	bx	lr

0801488e <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 801488e:	b580      	push	{r7, lr}
 8014890:	b086      	sub	sp, #24
 8014892:	af00      	add	r7, sp, #0
 8014894:	60f8      	str	r0, [r7, #12]
 8014896:	460b      	mov	r3, r1
 8014898:	607a      	str	r2, [r7, #4]
 801489a:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801489c:	2300      	movs	r3, #0
 801489e:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80148a0:	897b      	ldrh	r3, [r7, #10]
 80148a2:	2b01      	cmp	r3, #1
 80148a4:	d902      	bls.n	80148ac <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80148a6:	23fc      	movs	r3, #252	@ 0xfc
 80148a8:	75fb      	strb	r3, [r7, #23]
 80148aa:	e023      	b.n	80148f4 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80148ac:	897b      	ldrh	r3, [r7, #10]
 80148ae:	68fa      	ldr	r2, [r7, #12]
 80148b0:	4413      	add	r3, r2
 80148b2:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 80148b6:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 80148b8:	7dbb      	ldrb	r3, [r7, #22]
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	d107      	bne.n	80148ce <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80148be:	897b      	ldrh	r3, [r7, #10]
 80148c0:	68fa      	ldr	r2, [r7, #12]
 80148c2:	33e0      	adds	r3, #224	@ 0xe0
 80148c4:	009b      	lsls	r3, r3, #2
 80148c6:	4413      	add	r3, r2
 80148c8:	687a      	ldr	r2, [r7, #4]
 80148ca:	609a      	str	r2, [r3, #8]
 80148cc:	e012      	b.n	80148f4 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 80148ce:	897b      	ldrh	r3, [r7, #10]
 80148d0:	687a      	ldr	r2, [r7, #4]
 80148d2:	4619      	mov	r1, r3
 80148d4:	68f8      	ldr	r0, [r7, #12]
 80148d6:	f7ff ff50 	bl	801477a <SetLimitValue>
 80148da:	4603      	mov	r3, r0
 80148dc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 80148de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d106      	bne.n	80148f4 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80148e6:	897b      	ldrh	r3, [r7, #10]
 80148e8:	68fa      	ldr	r2, [r7, #12]
 80148ea:	33e0      	adds	r3, #224	@ 0xe0
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	4413      	add	r3, r2
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80148f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80148f8:	4618      	mov	r0, r3
 80148fa:	3718      	adds	r7, #24
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b088      	sub	sp, #32
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	460b      	mov	r3, r1
 801490a:	607a      	str	r2, [r7, #4]
 801490c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801490e:	2300      	movs	r3, #0
 8014910:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8014912:	897b      	ldrh	r3, [r7, #10]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d002      	beq.n	801491e <VL53L1_GetLimitCheckValue+0x1e>
 8014918:	2b01      	cmp	r3, #1
 801491a:	d00c      	beq.n	8014936 <VL53L1_GetLimitCheckValue+0x36>
 801491c:	e017      	b.n	801494e <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 801491e:	f107 0314 	add.w	r3, r7, #20
 8014922:	4619      	mov	r1, r3
 8014924:	68f8      	ldr	r0, [r7, #12]
 8014926:	f000 ff61 	bl	80157ec <VL53L1_get_lite_sigma_threshold>
 801492a:	4603      	mov	r3, r0
 801492c:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 801492e:	8abb      	ldrh	r3, [r7, #20]
 8014930:	039b      	lsls	r3, r3, #14
 8014932:	61bb      	str	r3, [r7, #24]
		break;
 8014934:	e00d      	b.n	8014952 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8014936:	f107 0316 	add.w	r3, r7, #22
 801493a:	4619      	mov	r1, r3
 801493c:	68f8      	ldr	r0, [r7, #12]
 801493e:	f000 ff81 	bl	8015844 <VL53L1_get_lite_min_count_rate>
 8014942:	4603      	mov	r3, r0
 8014944:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8014946:	8afb      	ldrh	r3, [r7, #22]
 8014948:	025b      	lsls	r3, r3, #9
 801494a:	61bb      	str	r3, [r7, #24]
		break;
 801494c:	e001      	b.n	8014952 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801494e:	23fc      	movs	r3, #252	@ 0xfc
 8014950:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8014952:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d123      	bne.n	80149a2 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 801495a:	69bb      	ldr	r3, [r7, #24]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d110      	bne.n	8014982 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8014960:	897b      	ldrh	r3, [r7, #10]
 8014962:	68fa      	ldr	r2, [r7, #12]
 8014964:	33e0      	adds	r3, #224	@ 0xe0
 8014966:	009b      	lsls	r3, r3, #2
 8014968:	4413      	add	r3, r2
 801496a:	689b      	ldr	r3, [r3, #8]
 801496c:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	69ba      	ldr	r2, [r7, #24]
 8014972:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014974:	897b      	ldrh	r3, [r7, #10]
 8014976:	68fa      	ldr	r2, [r7, #12]
 8014978:	4413      	add	r3, r2
 801497a:	2200      	movs	r2, #0
 801497c:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8014980:	e00f      	b.n	80149a2 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	69ba      	ldr	r2, [r7, #24]
 8014986:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014988:	897b      	ldrh	r3, [r7, #10]
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	33e0      	adds	r3, #224	@ 0xe0
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	4413      	add	r3, r2
 8014992:	69ba      	ldr	r2, [r7, #24]
 8014994:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014996:	897b      	ldrh	r3, [r7, #10]
 8014998:	68fa      	ldr	r2, [r7, #12]
 801499a:	4413      	add	r3, r2
 801499c:	2201      	movs	r2, #1
 801499e:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 80149a2:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3720      	adds	r7, #32
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}

080149ae <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 80149ae:	b580      	push	{r7, lr}
 80149b0:	b086      	sub	sp, #24
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	60f8      	str	r0, [r7, #12]
 80149b6:	460b      	mov	r3, r1
 80149b8:	607a      	str	r2, [r7, #4]
 80149ba:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80149bc:	2300      	movs	r3, #0
 80149be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 80149c0:	7afb      	ldrb	r3, [r7, #11]
 80149c2:	687a      	ldr	r2, [r7, #4]
 80149c4:	4619      	mov	r1, r3
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f000 fc3f 	bl	801524a <VL53L1_get_sequence_config_bit>
 80149cc:	4603      	mov	r3, r0
 80149ce:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 80149d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	3718      	adds	r7, #24
 80149d8:	46bd      	mov	sp, r7
 80149da:	bd80      	pop	{r7, pc}

080149dc <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	b084      	sub	sp, #16
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80149e4:	2300      	movs	r3, #0
 80149e6:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = PALDevDataGet(Dev, PalState);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 80149ee:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 80149f0:	7bbb      	ldrb	r3, [r7, #14]
 80149f2:	2b63      	cmp	r3, #99	@ 0x63
 80149f4:	dc12      	bgt.n	8014a1c <VL53L1_StartMeasurement+0x40>
 80149f6:	2b62      	cmp	r3, #98	@ 0x62
 80149f8:	da0d      	bge.n	8014a16 <VL53L1_StartMeasurement+0x3a>
 80149fa:	2b05      	cmp	r3, #5
 80149fc:	dc0e      	bgt.n	8014a1c <VL53L1_StartMeasurement+0x40>
 80149fe:	2b04      	cmp	r3, #4
 8014a00:	da09      	bge.n	8014a16 <VL53L1_StartMeasurement+0x3a>
 8014a02:	2b02      	cmp	r3, #2
 8014a04:	dc02      	bgt.n	8014a0c <VL53L1_StartMeasurement+0x30>
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	da05      	bge.n	8014a16 <VL53L1_StartMeasurement+0x3a>
 8014a0a:	e007      	b.n	8014a1c <VL53L1_StartMeasurement+0x40>
 8014a0c:	2b03      	cmp	r3, #3
 8014a0e:	d105      	bne.n	8014a1c <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8014a10:	2300      	movs	r3, #0
 8014a12:	73fb      	strb	r3, [r7, #15]
		break;
 8014a14:	e004      	b.n	8014a20 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8014a16:	23f2      	movs	r3, #242	@ 0xf2
 8014a18:	73fb      	strb	r3, [r7, #15]
		break;
 8014a1a:	e001      	b.n	8014a20 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8014a1c:	23fd      	movs	r3, #253	@ 0xfd
 8014a1e:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = PALDevDataGet(Dev, LLData.measurement_mode);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	789b      	ldrb	r3, [r3, #2]
 8014a24:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 8014a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d107      	bne.n	8014a3e <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 8014a2e:	7b7b      	ldrb	r3, [r7, #13]
 8014a30:	2206      	movs	r2, #6
 8014a32:	4619      	mov	r1, r3
 8014a34:	6878      	ldr	r0, [r7, #4]
 8014a36:	f000 ff51 	bl	80158dc <VL53L1_init_and_start_range>
 8014a3a:	4603      	mov	r3, r0
 8014a3c:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8014a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d103      	bne.n	8014a4e <VL53L1_StartMeasurement+0x72>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	2204      	movs	r2, #4
 8014a4a:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8014a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a52:	4618      	mov	r0, r3
 8014a54:	3710      	adds	r7, #16
 8014a56:	46bd      	mov	sp, r7
 8014a58:	bd80      	pop	{r7, pc}

08014a5a <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8014a5a:	b580      	push	{r7, lr}
 8014a5c:	b084      	sub	sp, #16
 8014a5e:	af00      	add	r7, sp, #0
 8014a60:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014a62:	2300      	movs	r3, #0
 8014a64:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f001 f99a 	bl	8015da0 <VL53L1_stop_range>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	73fb      	strb	r3, [r7, #15]

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 8014a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d103      	bne.n	8014a80 <VL53L1_StopMeasurement+0x26>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	2203      	movs	r2, #3
 8014a7c:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	LOG_FUNCTION_END(Status);
	return Status;
 8014a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a84:	4618      	mov	r0, r3
 8014a86:	3710      	adds	r7, #16
 8014a88:	46bd      	mov	sp, r7
 8014a8a:	bd80      	pop	{r7, pc}

08014a8c <VL53L1_GetMeasurementDataReady>:
}


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8014a8c:	b580      	push	{r7, lr}
 8014a8e:	b084      	sub	sp, #16
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014a96:	2300      	movs	r3, #0
 8014a98:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8014a9a:	6839      	ldr	r1, [r7, #0]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f004 f8d7 	bl	8018c50 <VL53L1_is_new_data_ready>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8014aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3710      	adds	r7, #16
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}
	...

08014ab4 <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8014ab4:	b480      	push	{r7}
 8014ab6:	b08d      	sub	sp, #52	@ 0x34
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	4603      	mov	r3, r0
 8014abc:	603a      	str	r2, [r7, #0]
 8014abe:	71fb      	strb	r3, [r7, #7]
 8014ac0:	460b      	mov	r3, r1
 8014ac2:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8014ac4:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8014ac8:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8014aca:	231e      	movs	r3, #30
 8014acc:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8014ace:	4b33      	ldr	r3, [pc, #204]	@ (8014b9c <ComputeRQL+0xe8>)
 8014ad0:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8014ad2:	4b33      	ldr	r3, [pc, #204]	@ (8014ba0 <ComputeRQL+0xec>)
 8014ad4:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8014ad6:	f641 139a 	movw	r3, #6554	@ 0x199a
 8014ada:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8014adc:	79fb      	ldrb	r3, [r7, #7]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d103      	bne.n	8014aea <ComputeRQL+0x36>
		returnvalue = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014ae8:	e04f      	b.n	8014b8a <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8014aea:	79bb      	ldrb	r3, [r7, #6]
 8014aec:	2b07      	cmp	r3, #7
 8014aee:	d103      	bne.n	8014af8 <ComputeRQL+0x44>
		returnvalue = 50;
 8014af0:	2332      	movs	r3, #50	@ 0x32
 8014af2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014af6:	e048      	b.n	8014b8a <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014afe:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8014b02:	429a      	cmp	r2, r3
 8014b04:	dd03      	ble.n	8014b0e <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8014b06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014b08:	041b      	lsls	r3, r3, #16
 8014b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014b0c:	e007      	b.n	8014b1e <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014b14:	461a      	mov	r2, r3
 8014b16:	697b      	ldr	r3, [r7, #20]
 8014b18:	fb02 f303 	mul.w	r3, r2, r3
 8014b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8014b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	d020      	beq.n	8014b66 <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8014b24:	683b      	ldr	r3, [r7, #0]
 8014b26:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014b28:	461a      	mov	r2, r3
 8014b2a:	69bb      	ldr	r3, [r7, #24]
 8014b2c:	fb02 f303 	mul.w	r3, r2, r3
 8014b30:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8014b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b34:	085b      	lsrs	r3, r3, #1
 8014b36:	693a      	ldr	r2, [r7, #16]
 8014b38:	4413      	add	r3, r2
 8014b3a:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8014b3c:	693a      	ldr	r2, [r7, #16]
 8014b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8014b44:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	041b      	lsls	r3, r3, #16
 8014b4a:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8014b4c:	693a      	ldr	r2, [r7, #16]
 8014b4e:	69fb      	ldr	r3, [r7, #28]
 8014b50:	429a      	cmp	r2, r3
 8014b52:	d804      	bhi.n	8014b5e <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8014b54:	69fa      	ldr	r2, [r7, #28]
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	1ad3      	subs	r3, r2, r3
 8014b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b5c:	e006      	b.n	8014b6c <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8014b5e:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8014b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014b64:	e002      	b.n	8014b6c <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8014b66:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8014b6a:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8014b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014b6e:	0c1b      	lsrs	r3, r3, #16
 8014b70:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8014b72:	7bfb      	ldrb	r3, [r7, #15]
 8014b74:	2b32      	cmp	r3, #50	@ 0x32
 8014b76:	d905      	bls.n	8014b84 <ComputeRQL+0xd0>
 8014b78:	7bfb      	ldrb	r3, [r7, #15]
 8014b7a:	2b64      	cmp	r3, #100	@ 0x64
 8014b7c:	bf28      	it	cs
 8014b7e:	2364      	movcs	r3, #100	@ 0x64
 8014b80:	b2db      	uxtb	r3, r3
 8014b82:	e000      	b.n	8014b86 <ComputeRQL+0xd2>
 8014b84:	2332      	movs	r3, #50	@ 0x32
 8014b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8014b8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3734      	adds	r7, #52	@ 0x34
 8014b92:	46bd      	mov	sp, r7
 8014b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b98:	4770      	bx	lr
 8014b9a:	bf00      	nop
 8014b9c:	0075b333 	.word	0x0075b333
 8014ba0:	0030cccd 	.word	0x0030cccd

08014ba4 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8014ba4:	b480      	push	{r7}
 8014ba6:	b085      	sub	sp, #20
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	4603      	mov	r3, r0
 8014bac:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8014bae:	79fb      	ldrb	r3, [r7, #7]
 8014bb0:	3b04      	subs	r3, #4
 8014bb2:	2b0f      	cmp	r3, #15
 8014bb4:	d83d      	bhi.n	8014c32 <ConvertStatusLite+0x8e>
 8014bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8014bbc <ConvertStatusLite+0x18>)
 8014bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bbc:	08014c0f 	.word	0x08014c0f
 8014bc0:	08014c09 	.word	0x08014c09
 8014bc4:	08014c15 	.word	0x08014c15
 8014bc8:	08014c1b 	.word	0x08014c1b
 8014bcc:	08014c27 	.word	0x08014c27
 8014bd0:	08014c2d 	.word	0x08014c2d
 8014bd4:	08014c33 	.word	0x08014c33
 8014bd8:	08014c33 	.word	0x08014c33
 8014bdc:	08014c21 	.word	0x08014c21
 8014be0:	08014c33 	.word	0x08014c33
 8014be4:	08014c33 	.word	0x08014c33
 8014be8:	08014c33 	.word	0x08014c33
 8014bec:	08014c33 	.word	0x08014c33
 8014bf0:	08014c33 	.word	0x08014c33
 8014bf4:	08014bfd 	.word	0x08014bfd
 8014bf8:	08014c03 	.word	0x08014c03
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8014bfc:	230a      	movs	r3, #10
 8014bfe:	73fb      	strb	r3, [r7, #15]
		break;
 8014c00:	e019      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8014c02:	2306      	movs	r3, #6
 8014c04:	73fb      	strb	r3, [r7, #15]
		break;
 8014c06:	e016      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8014c08:	2304      	movs	r3, #4
 8014c0a:	73fb      	strb	r3, [r7, #15]
		break;
 8014c0c:	e013      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8014c0e:	2302      	movs	r3, #2
 8014c10:	73fb      	strb	r3, [r7, #15]
		break;
 8014c12:	e010      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8014c14:	2301      	movs	r3, #1
 8014c16:	73fb      	strb	r3, [r7, #15]
		break;
 8014c18:	e00d      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8014c1a:	2307      	movs	r3, #7
 8014c1c:	73fb      	strb	r3, [r7, #15]
		break;
 8014c1e:	e00a      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8014c20:	2309      	movs	r3, #9
 8014c22:	73fb      	strb	r3, [r7, #15]
		break;
 8014c24:	e007      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8014c26:	2303      	movs	r3, #3
 8014c28:	73fb      	strb	r3, [r7, #15]
		break;
 8014c2a:	e004      	b.n	8014c36 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8014c2c:	2300      	movs	r3, #0
 8014c2e:	73fb      	strb	r3, [r7, #15]
		break;
 8014c30:	e001      	b.n	8014c36 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8014c32:	23ff      	movs	r3, #255	@ 0xff
 8014c34:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8014c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	3714      	adds	r7, #20
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr

08014c44 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b08c      	sub	sp, #48	@ 0x30
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	60f8      	str	r0, [r7, #12]
 8014c4c:	607b      	str	r3, [r7, #4]
 8014c4e:	460b      	mov	r3, r1
 8014c50:	72fb      	strb	r3, [r7, #11]
 8014c52:	4613      	mov	r3, r2
 8014c54:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014c56:	2300      	movs	r3, #0
 8014c58:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	685a      	ldr	r2, [r3, #4]
 8014c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c62:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014c6a:	f003 031f 	and.w	r3, r3, #31
 8014c6e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8014c72:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8014c76:	7afb      	ldrb	r3, [r7, #11]
 8014c78:	687a      	ldr	r2, [r7, #4]
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7ff ff1a 	bl	8014ab4 <ComputeRQL>
 8014c80:	4603      	mov	r3, r0
 8014c82:	461a      	mov	r2, r3
 8014c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c86:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014c8c:	025b      	lsls	r3, r3, #9
 8014c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8014c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014c94:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8014c9a:	025b      	lsls	r3, r3, #9
 8014c9c:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8014c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ca2:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8014ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014caa:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014cb0:	025b      	lsls	r3, r3, #9
 8014cb2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8014cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cb6:	6a3a      	ldr	r2, [r7, #32]
 8014cb8:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8014cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc2:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8014cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8014cca:	7abb      	ldrb	r3, [r7, #10]
 8014ccc:	2b11      	cmp	r3, #17
 8014cce:	d009      	beq.n	8014ce4 <SetSimpleData+0xa0>
 8014cd0:	2b11      	cmp	r3, #17
 8014cd2:	dc0f      	bgt.n	8014cf4 <SetSimpleData+0xb0>
 8014cd4:	2b03      	cmp	r3, #3
 8014cd6:	dc02      	bgt.n	8014cde <SetSimpleData+0x9a>
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	dc03      	bgt.n	8014ce4 <SetSimpleData+0xa0>
 8014cdc:	e00a      	b.n	8014cf4 <SetSimpleData+0xb0>
 8014cde:	2b0d      	cmp	r3, #13
 8014ce0:	d004      	beq.n	8014cec <SetSimpleData+0xa8>
 8014ce2:	e007      	b.n	8014cf4 <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8014ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ce6:	2205      	movs	r2, #5
 8014ce8:	76da      	strb	r2, [r3, #27]
		break;
 8014cea:	e006      	b.n	8014cfa <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8014cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cee:	220d      	movs	r2, #13
 8014cf0:	76da      	strb	r2, [r3, #27]
		break;
 8014cf2:	e002      	b.n	8014cfa <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8014cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8014cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cfc:	7edb      	ldrb	r3, [r3, #27]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d108      	bne.n	8014d14 <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8014d02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014d06:	4618      	mov	r0, r3
 8014d08:	f7ff ff4c 	bl	8014ba4 <ConvertStatusLite>
 8014d0c:	4603      	mov	r3, r0
 8014d0e:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8014d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d12:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014d18:	025b      	lsls	r3, r3, #9
 8014d1a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	6a3a      	ldr	r2, [r7, #32]
 8014d20:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014d28:	025b      	lsls	r3, r3, #9
 8014d2a:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014d2c:	68fb      	ldr	r3, [r7, #12]
 8014d2e:	6a3a      	ldr	r2, [r7, #32]
 8014d30:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8014d34:	f107 0314 	add.w	r3, r7, #20
 8014d38:	461a      	mov	r2, r3
 8014d3a:	2100      	movs	r1, #0
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f7ff fddf 	bl	8014900 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8014d42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014d46:	2b06      	cmp	r3, #6
 8014d48:	bf0c      	ite	eq
 8014d4a:	2301      	moveq	r3, #1
 8014d4c:	2300      	movne	r3, #0
 8014d4e:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8014d50:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8014d52:	f107 0319 	add.w	r3, r7, #25
 8014d56:	461a      	mov	r2, r3
 8014d58:	2100      	movs	r1, #0
 8014d5a:	68f8      	ldr	r0, [r7, #12]
 8014d5c:	f7ff fd74 	bl	8014848 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8014d60:	7e7b      	ldrb	r3, [r7, #25]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d104      	bne.n	8014d70 <SetSimpleData+0x12c>
 8014d66:	7ffb      	ldrb	r3, [r7, #31]
 8014d68:	2b01      	cmp	r3, #1
 8014d6a:	d101      	bne.n	8014d70 <SetSimpleData+0x12c>
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	e000      	b.n	8014d72 <SetSimpleData+0x12e>
 8014d70:	2300      	movs	r3, #0
 8014d72:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	7fba      	ldrb	r2, [r7, #30]
 8014d78:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8014d7c:	f107 0314 	add.w	r3, r7, #20
 8014d80:	461a      	mov	r2, r3
 8014d82:	2101      	movs	r1, #1
 8014d84:	68f8      	ldr	r0, [r7, #12]
 8014d86:	f7ff fdbb 	bl	8014900 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8014d8a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014d8e:	2b04      	cmp	r3, #4
 8014d90:	bf0c      	ite	eq
 8014d92:	2301      	moveq	r3, #1
 8014d94:	2300      	movne	r3, #0
 8014d96:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8014d98:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8014d9a:	f107 0319 	add.w	r3, r7, #25
 8014d9e:	461a      	mov	r2, r3
 8014da0:	2101      	movs	r1, #1
 8014da2:	68f8      	ldr	r0, [r7, #12]
 8014da4:	f7ff fd50 	bl	8014848 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8014da8:	7e7b      	ldrb	r3, [r7, #25]
 8014daa:	2b01      	cmp	r3, #1
 8014dac:	d104      	bne.n	8014db8 <SetSimpleData+0x174>
 8014dae:	7f7b      	ldrb	r3, [r7, #29]
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	d101      	bne.n	8014db8 <SetSimpleData+0x174>
 8014db4:	2301      	movs	r3, #1
 8014db6:	e000      	b.n	8014dba <SetSimpleData+0x176>
 8014db8:	2300      	movs	r3, #0
 8014dba:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	7fba      	ldrb	r2, [r7, #30]
 8014dc0:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8014dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc6:	8b1b      	ldrh	r3, [r3, #24]
 8014dc8:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8014dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dcc:	7edb      	ldrb	r3, [r3, #27]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d110      	bne.n	8014df4 <SetSimpleData+0x1b0>
 8014dd2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	da0c      	bge.n	8014df4 <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8014dda:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8014dde:	4b08      	ldr	r3, [pc, #32]	@ (8014e00 <SetSimpleData+0x1bc>)
 8014de0:	685b      	ldr	r3, [r3, #4]
 8014de2:	429a      	cmp	r2, r3
 8014de4:	da03      	bge.n	8014dee <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8014de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014de8:	220e      	movs	r2, #14
 8014dea:	76da      	strb	r2, [r3, #27]
 8014dec:	e002      	b.n	8014df4 <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8014dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014df0:	2200      	movs	r2, #0
 8014df2:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8014df4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3730      	adds	r7, #48	@ 0x30
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	20000168 	.word	0x20000168

08014e04 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b0a8      	sub	sp, #160	@ 0xa0
 8014e08:	af02      	add	r7, sp, #8
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014e0e:	2300      	movs	r3, #0
 8014e10:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8014e14:	f107 0308 	add.w	r3, r7, #8
 8014e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8014e1c:	221c      	movs	r2, #28
 8014e1e:	21ff      	movs	r1, #255	@ 0xff
 8014e20:	6838      	ldr	r0, [r7, #0]
 8014e22:	f004 fa33 	bl	801928c <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8014e26:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8014e2a:	2102      	movs	r1, #2
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f001 f8ad 	bl	8015f8c <VL53L1_get_device_results>
 8014e32:	4603      	mov	r3, r0
 8014e34:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8014e38:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d117      	bne.n	8014e70 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8014e40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e44:	789a      	ldrb	r2, [r3, #2]
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8014e4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e4e:	3304      	adds	r3, #4
 8014e50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8014e54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014e58:	78da      	ldrb	r2, [r3, #3]
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	9300      	str	r3, [sp, #0]
 8014e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014e62:	2101      	movs	r1, #1
 8014e64:	6878      	ldr	r0, [r7, #4]
 8014e66:	f7ff feed 	bl	8014c44 <SetSimpleData>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8014e70:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8014e74:	4618      	mov	r0, r3
 8014e76:	3798      	adds	r7, #152	@ 0x98
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	bd80      	pop	{r7, pc}

08014e7c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8014e7c:	b5b0      	push	{r4, r5, r7, lr}
 8014e7e:	b088      	sub	sp, #32
 8014e80:	af04      	add	r7, sp, #16
 8014e82:	6078      	str	r0, [r7, #4]
 8014e84:	460b      	mov	r3, r1
 8014e86:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014e88:	2300      	movs	r3, #0
 8014e8a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8014e90:	2162      	movs	r1, #98	@ 0x62
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f001 fee9 	bl	8016c6a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	2201      	movs	r2, #1
 8014ea2:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	2201      	movs	r2, #1
 8014eae:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8014eb0:	68bb      	ldr	r3, [r7, #8]
 8014eb2:	2201      	movs	r2, #1
 8014eb4:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8014eb6:	68bb      	ldr	r3, [r7, #8]
 8014eb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014ebc:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8014ebe:	68bb      	ldr	r3, [r7, #8]
 8014ec0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8014ec4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8014ecc:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	2264      	movs	r2, #100	@ 0x64
 8014ed2:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8014eda:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	2200      	movs	r2, #0
 8014ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	f240 72db 	movw	r2, #2011	@ 0x7db
 8014eea:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8014eee:	6878      	ldr	r0, [r7, #4]
 8014ef0:	f001 fea0 	bl	8016c34 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8014ef4:	78fb      	ldrb	r3, [r7, #3]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d008      	beq.n	8014f0c <VL53L1_data_init+0x90>
 8014efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d104      	bne.n	8014f0c <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f000 f857 	bl	8014fb6 <VL53L1_read_p2p_data>
 8014f08:	4603      	mov	r3, r0
 8014f0a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8014f0c:	68bb      	ldr	r3, [r7, #8]
 8014f0e:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8014f12:	4618      	mov	r0, r3
 8014f14:	f001 f9d2 	bl	80162bc <VL53L1_init_refspadchar_config_struct>
 8014f18:	4603      	mov	r3, r0
 8014f1a:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014f22:	4618      	mov	r0, r3
 8014f24:	f001 f9ee 	bl	8016304 <VL53L1_init_ssc_config_struct>
 8014f28:	4603      	mov	r3, r0
 8014f2a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8014f38:	4619      	mov	r1, r3
 8014f3a:	4610      	mov	r0, r2
 8014f3c:	f001 fa03 	bl	8016346 <VL53L1_init_xtalk_config_struct>
 8014f40:	4603      	mov	r3, r0
 8014f42:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8014f44:	68bb      	ldr	r3, [r7, #8]
 8014f46:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	f001 fa5d 	bl	801640a <VL53L1_init_offset_cal_config_struct>
 8014f50:	4603      	mov	r3, r0
 8014f52:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8014f54:	68bb      	ldr	r3, [r7, #8]
 8014f56:	33a4      	adds	r3, #164	@ 0xa4
 8014f58:	4618      	mov	r0, r3
 8014f5a:	f001 fa7d 	bl	8016458 <VL53L1_init_tuning_parm_storage_struct>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8014f62:	2120      	movs	r1, #32
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f000 fc99 	bl	801589c <VL53L1_set_vhv_loopbound>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8014f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d116      	bne.n	8014fa4 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	7858      	ldrb	r0, [r3, #1]
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	8b1c      	ldrh	r4, [r3, #24]
 8014f7e:	68bb      	ldr	r3, [r7, #8]
 8014f80:	689d      	ldr	r5, [r3, #8]
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	68db      	ldr	r3, [r3, #12]
 8014f86:	68ba      	ldr	r2, [r7, #8]
 8014f88:	6912      	ldr	r2, [r2, #16]
 8014f8a:	68b9      	ldr	r1, [r7, #8]
 8014f8c:	6949      	ldr	r1, [r1, #20]
 8014f8e:	9102      	str	r1, [sp, #8]
 8014f90:	9201      	str	r2, [sp, #4]
 8014f92:	9300      	str	r3, [sp, #0]
 8014f94:	462b      	mov	r3, r5
 8014f96:	4622      	mov	r2, r4
 8014f98:	4601      	mov	r1, r0
 8014f9a:	6878      	ldr	r0, [r7, #4]
 8014f9c:	f000 fab0 	bl	8015500 <VL53L1_set_preset_mode>
 8014fa0:	4603      	mov	r3, r0
 8014fa2:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f002 fbaf 	bl	8017708 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8014faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014fae:	4618      	mov	r0, r3
 8014fb0:	3710      	adds	r7, #16
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bdb0      	pop	{r4, r5, r7, pc}

08014fb6 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b084      	sub	sp, #16
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014fbe:	2300      	movs	r3, #0
 8014fc0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8014fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d108      	bne.n	8014fe0 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8014fce:	68bb      	ldr	r3, [r7, #8]
 8014fd0:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f002 fdeb 	bl	8017bb2 <VL53L1_get_static_nvm_managed>
 8014fdc:	4603      	mov	r3, r0
 8014fde:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8014fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d107      	bne.n	8014ff8 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	3342      	adds	r3, #66	@ 0x42
 8014fec:	4619      	mov	r1, r3
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f002 ff1d 	bl	8017e2e <VL53L1_get_customer_nvm_managed>
 8014ff4:	4603      	mov	r3, r0
 8014ff6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8014ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d115      	bne.n	801502c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 8015006:	4619      	mov	r1, r3
 8015008:	6878      	ldr	r0, [r7, #4]
 801500a:	f003 fdf6 	bl	8018bfa <VL53L1_get_nvm_copy_data>
 801500e:	4603      	mov	r3, r0
 8015010:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8015012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d108      	bne.n	801502c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 801501a:	68bb      	ldr	r3, [r7, #8]
 801501c:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	33f0      	adds	r3, #240	@ 0xf0
 8015024:	4619      	mov	r1, r3
 8015026:	4610      	mov	r0, r2
 8015028:	f001 ff81 	bl	8016f2e <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 801502c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015030:	2b00      	cmp	r3, #0
 8015032:	d109      	bne.n	8015048 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8015034:	68bb      	ldr	r3, [r7, #8]
 8015036:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 801503a:	461a      	mov	r2, r3
 801503c:	21de      	movs	r1, #222	@ 0xde
 801503e:	6878      	ldr	r0, [r7, #4]
 8015040:	f7f6 fd66 	bl	800bb10 <VL53L1_RdWord>
 8015044:	4603      	mov	r3, r0
 8015046:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 801504e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015052:	d204      	bcs.n	801505e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8015054:	68bb      	ldr	r3, [r7, #8]
 8015056:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 801505a:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 801505e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d107      	bne.n	8015076 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8015066:	68bb      	ldr	r3, [r7, #8]
 8015068:	339e      	adds	r3, #158	@ 0x9e
 801506a:	4619      	mov	r1, r3
 801506c:	6878      	ldr	r0, [r7, #4]
 801506e:	f000 f968 	bl	8015342 <VL53L1_get_mode_mitigation_roi>
 8015072:	4603      	mov	r3, r0
 8015074:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 801507c:	2b00      	cmp	r3, #0
 801507e:	d114      	bne.n	80150aa <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8015086:	2b00      	cmp	r3, #0
 8015088:	d10f      	bne.n	80150aa <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8015090:	011b      	lsls	r3, r3, #4
 8015092:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 80150a0:	011b      	lsls	r3, r3, #4
 80150a2:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 80150aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150ae:	4618      	mov	r0, r3
 80150b0:	3710      	adds	r7, #16
 80150b2:	46bd      	mov	sp, r7
 80150b4:	bd80      	pop	{r7, pc}

080150b6 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 80150b6:	b480      	push	{r7}
 80150b8:	b085      	sub	sp, #20
 80150ba:	af00      	add	r7, sp, #0
 80150bc:	6078      	str	r0, [r7, #4]
 80150be:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80150c0:	2300      	movs	r3, #0
 80150c2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d101      	bne.n	80150d6 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80150d2:	23f1      	movs	r3, #241	@ 0xf1
 80150d4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 80150d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d10c      	bne.n	80150f8 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80150de:	68bb      	ldr	r3, [r7, #8]
 80150e0:	683a      	ldr	r2, [r7, #0]
 80150e2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 80150e4:	68bb      	ldr	r3, [r7, #8]
 80150e6:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 80150ea:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 80150f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80150fc:	4618      	mov	r0, r3
 80150fe:	3714      	adds	r7, #20
 8015100:	46bd      	mov	sp, r7
 8015102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015106:	4770      	bx	lr

08015108 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8015108:	b580      	push	{r7, lr}
 801510a:	b088      	sub	sp, #32
 801510c:	af02      	add	r7, sp, #8
 801510e:	60f8      	str	r0, [r7, #12]
 8015110:	60b9      	str	r1, [r7, #8]
 8015112:	607a      	str	r2, [r7, #4]
 8015114:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015116:	2300      	movs	r3, #0
 8015118:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8015128:	23f1      	movs	r3, #241	@ 0xf1
 801512a:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 801512c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d11b      	bne.n	801516c <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8015134:	693b      	ldr	r3, [r7, #16]
 8015136:	68ba      	ldr	r2, [r7, #8]
 8015138:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 801513a:	693b      	ldr	r3, [r7, #16]
 801513c:	687a      	ldr	r2, [r7, #4]
 801513e:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	683a      	ldr	r2, [r7, #0]
 8015144:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8015152:	693a      	ldr	r2, [r7, #16]
 8015154:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8015158:	9201      	str	r2, [sp, #4]
 801515a:	9300      	str	r3, [sp, #0]
 801515c:	460b      	mov	r3, r1
 801515e:	683a      	ldr	r2, [r7, #0]
 8015160:	6879      	ldr	r1, [r7, #4]
 8015162:	68b8      	ldr	r0, [r7, #8]
 8015164:	f002 fa02 	bl	801756c <VL53L1_calc_timeout_register_values>
 8015168:	4603      	mov	r3, r0
 801516a:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 801516c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015170:	4618      	mov	r0, r3
 8015172:	3718      	adds	r7, #24
 8015174:	46bd      	mov	sp, r7
 8015176:	bd80      	pop	{r7, pc}

08015178 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b088      	sub	sp, #32
 801517c:	af00      	add	r7, sp, #0
 801517e:	60f8      	str	r0, [r7, #12]
 8015180:	60b9      	str	r1, [r7, #8]
 8015182:	607a      	str	r2, [r7, #4]
 8015184:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015186:	2300      	movs	r3, #0
 8015188:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 801518e:	2300      	movs	r3, #0
 8015190:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8015192:	2300      	movs	r3, #0
 8015194:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8015196:	69bb      	ldr	r3, [r7, #24]
 8015198:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 801519c:	2b00      	cmp	r3, #0
 801519e:	d101      	bne.n	80151a4 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80151a0:	23f1      	movs	r3, #241	@ 0xf1
 80151a2:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 80151a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d148      	bne.n	801523e <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 80151ac:	69bb      	ldr	r3, [r7, #24]
 80151ae:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 80151b2:	69bb      	ldr	r3, [r7, #24]
 80151b4:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 80151b8:	4619      	mov	r1, r3
 80151ba:	4610      	mov	r0, r2
 80151bc:	f002 f87d 	bl	80172ba <VL53L1_calc_macro_period_us>
 80151c0:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 80151c2:	69bb      	ldr	r3, [r7, #24]
 80151c4:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 80151c8:	6979      	ldr	r1, [r7, #20]
 80151ca:	4618      	mov	r0, r3
 80151cc:	f002 f935 	bl	801743a <VL53L1_calc_timeout_us>
 80151d0:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 80151d6:	69bb      	ldr	r3, [r7, #24]
 80151d8:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 80151dc:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 80151de:	8a7b      	ldrh	r3, [r7, #18]
 80151e0:	021b      	lsls	r3, r3, #8
 80151e2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 80151e4:	69ba      	ldr	r2, [r7, #24]
 80151e6:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 80151ea:	4413      	add	r3, r2
 80151ec:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80151ee:	8a7b      	ldrh	r3, [r7, #18]
 80151f0:	6979      	ldr	r1, [r7, #20]
 80151f2:	4618      	mov	r0, r3
 80151f4:	f002 f961 	bl	80174ba <VL53L1_calc_decoded_timeout_us>
 80151f8:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 80151fe:	69bb      	ldr	r3, [r7, #24]
 8015200:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8015204:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8015206:	8a7b      	ldrh	r3, [r7, #18]
 8015208:	021b      	lsls	r3, r3, #8
 801520a:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 801520c:	69ba      	ldr	r2, [r7, #24]
 801520e:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8015212:	4413      	add	r3, r2
 8015214:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8015216:	8a7b      	ldrh	r3, [r7, #18]
 8015218:	6979      	ldr	r1, [r7, #20]
 801521a:	4618      	mov	r0, r3
 801521c:	f002 f94d 	bl	80174ba <VL53L1_calc_decoded_timeout_us>
 8015220:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8015226:	68bb      	ldr	r3, [r7, #8]
 8015228:	681a      	ldr	r2, [r3, #0]
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	681a      	ldr	r2, [r3, #0]
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8015236:	683b      	ldr	r3, [r7, #0]
 8015238:	681a      	ldr	r2, [r3, #0]
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 801523e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015242:	4618      	mov	r0, r3
 8015244:	3720      	adds	r7, #32
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 801524a:	b480      	push	{r7}
 801524c:	b087      	sub	sp, #28
 801524e:	af00      	add	r7, sp, #0
 8015250:	60f8      	str	r0, [r7, #12]
 8015252:	460b      	mov	r3, r1
 8015254:	607a      	str	r2, [r7, #4]
 8015256:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015258:	2300      	movs	r3, #0
 801525a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8015260:	2301      	movs	r3, #1
 8015262:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8015264:	7afb      	ldrb	r3, [r7, #11]
 8015266:	2b07      	cmp	r3, #7
 8015268:	d81c      	bhi.n	80152a4 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 801526a:	7afb      	ldrb	r3, [r7, #11]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d004      	beq.n	801527a <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8015270:	7afb      	ldrb	r3, [r7, #11]
 8015272:	2201      	movs	r2, #1
 8015274:	fa02 f303 	lsl.w	r3, r2, r3
 8015278:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8015280:	7dbb      	ldrb	r3, [r7, #22]
 8015282:	4013      	ands	r3, r2
 8015284:	b2da      	uxtb	r2, r3
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 801528a:	7afb      	ldrb	r3, [r7, #11]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d00b      	beq.n	80152a8 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	461a      	mov	r2, r3
 8015296:	7afb      	ldrb	r3, [r7, #11]
 8015298:	fa42 f303 	asr.w	r3, r2, r3
 801529c:	b2da      	uxtb	r2, r3
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	701a      	strb	r2, [r3, #0]
 80152a2:	e001      	b.n	80152a8 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 80152a4:	23fc      	movs	r3, #252	@ 0xfc
 80152a6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 80152a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	371c      	adds	r7, #28
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr

080152b8 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80152b8:	b580      	push	{r7, lr}
 80152ba:	b084      	sub	sp, #16
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
 80152c0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80152c2:	2300      	movs	r3, #0
 80152c4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 80152ca:	683b      	ldr	r3, [r7, #0]
 80152cc:	7858      	ldrb	r0, [r3, #1]
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	7819      	ldrb	r1, [r3, #0]
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 80152d8:	461a      	mov	r2, r3
 80152da:	f002 f9c0 	bl	801765e <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 80152de:	683b      	ldr	r3, [r7, #0]
 80152e0:	7898      	ldrb	r0, [r3, #2]
 80152e2:	683b      	ldr	r3, [r7, #0]
 80152e4:	78d9      	ldrb	r1, [r3, #3]
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 80152ec:	461a      	mov	r2, r3
 80152ee:	f002 f9f5 	bl	80176dc <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 80152f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	3710      	adds	r7, #16
 80152fa:	46bd      	mov	sp, r7
 80152fc:	bd80      	pop	{r7, pc}

080152fe <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	6078      	str	r0, [r7, #4]
 8015306:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015308:	2300      	movs	r3, #0
 801530a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8015310:	68bb      	ldr	r3, [r7, #8]
 8015312:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8015316:	683b      	ldr	r3, [r7, #0]
 8015318:	3301      	adds	r3, #1
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	4619      	mov	r1, r3
 801531e:	f002 fb64 	bl	80179ea <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8015328:	683b      	ldr	r3, [r7, #0]
 801532a:	1c99      	adds	r1, r3, #2
 801532c:	683b      	ldr	r3, [r7, #0]
 801532e:	3303      	adds	r3, #3
 8015330:	461a      	mov	r2, r3
 8015332:	f002 f9bb 	bl	80176ac <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8015336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801533a:	4618      	mov	r0, r3
 801533c:	3710      	adds	r7, #16
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}

08015342 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8015342:	b580      	push	{r7, lr}
 8015344:	b086      	sub	sp, #24
 8015346:	af00      	add	r7, sp, #0
 8015348:	6078      	str	r0, [r7, #4]
 801534a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801534c:	2300      	movs	r3, #0
 801534e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8015354:	2300      	movs	r3, #0
 8015356:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8015358:	2300      	movs	r3, #0
 801535a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 801535c:	2300      	movs	r3, #0
 801535e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8015366:	f107 020e 	add.w	r2, r7, #14
 801536a:	f107 010d 	add.w	r1, r7, #13
 801536e:	4618      	mov	r0, r3
 8015370:	f002 fb3b 	bl	80179ea <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8015374:	7bba      	ldrb	r2, [r7, #14]
 8015376:	683b      	ldr	r3, [r7, #0]
 8015378:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 801537a:	7b7a      	ldrb	r2, [r7, #13]
 801537c:	683b      	ldr	r3, [r7, #0]
 801537e:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8015380:	693b      	ldr	r3, [r7, #16]
 8015382:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8015386:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8015388:	7bfb      	ldrb	r3, [r7, #15]
 801538a:	091b      	lsrs	r3, r3, #4
 801538c:	b2da      	uxtb	r2, r3
 801538e:	683b      	ldr	r3, [r7, #0]
 8015390:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8015392:	7bfb      	ldrb	r3, [r7, #15]
 8015394:	f003 030f 	and.w	r3, r3, #15
 8015398:	b2da      	uxtb	r2, r3
 801539a:	683b      	ldr	r3, [r7, #0]
 801539c:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 801539e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3718      	adds	r7, #24
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
	...

080153ac <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 80153ac:	b480      	push	{r7}
 80153ae:	b087      	sub	sp, #28
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	60f8      	str	r0, [r7, #12]
 80153b4:	607a      	str	r2, [r7, #4]
 80153b6:	603b      	str	r3, [r7, #0]
 80153b8:	460b      	mov	r3, r1
 80153ba:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80153bc:	2300      	movs	r3, #0
 80153be:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 80153c4:	7afb      	ldrb	r3, [r7, #11]
 80153c6:	3b01      	subs	r3, #1
 80153c8:	2b25      	cmp	r3, #37	@ 0x25
 80153ca:	f200 808e 	bhi.w	80154ea <VL53L1_get_preset_mode_timing_cfg+0x13e>
 80153ce:	a201      	add	r2, pc, #4	@ (adr r2, 80153d4 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 80153d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d4:	0801546d 	.word	0x0801546d
 80153d8:	0801546d 	.word	0x0801546d
 80153dc:	0801546d 	.word	0x0801546d
 80153e0:	0801546d 	.word	0x0801546d
 80153e4:	0801546d 	.word	0x0801546d
 80153e8:	08015497 	.word	0x08015497
 80153ec:	08015497 	.word	0x08015497
 80153f0:	08015497 	.word	0x08015497
 80153f4:	080154eb 	.word	0x080154eb
 80153f8:	080154eb 	.word	0x080154eb
 80153fc:	080154eb 	.word	0x080154eb
 8015400:	080154eb 	.word	0x080154eb
 8015404:	080154eb 	.word	0x080154eb
 8015408:	080154eb 	.word	0x080154eb
 801540c:	080154eb 	.word	0x080154eb
 8015410:	080154eb 	.word	0x080154eb
 8015414:	0801546d 	.word	0x0801546d
 8015418:	08015497 	.word	0x08015497
 801541c:	080154eb 	.word	0x080154eb
 8015420:	080154eb 	.word	0x080154eb
 8015424:	080154eb 	.word	0x080154eb
 8015428:	080154eb 	.word	0x080154eb
 801542c:	080154eb 	.word	0x080154eb
 8015430:	080154eb 	.word	0x080154eb
 8015434:	080154eb 	.word	0x080154eb
 8015438:	080154eb 	.word	0x080154eb
 801543c:	080154eb 	.word	0x080154eb
 8015440:	080154eb 	.word	0x080154eb
 8015444:	080154eb 	.word	0x080154eb
 8015448:	080154eb 	.word	0x080154eb
 801544c:	080154eb 	.word	0x080154eb
 8015450:	080154eb 	.word	0x080154eb
 8015454:	080154eb 	.word	0x080154eb
 8015458:	080154eb 	.word	0x080154eb
 801545c:	080154eb 	.word	0x080154eb
 8015460:	080154c1 	.word	0x080154c1
 8015464:	080154c1 	.word	0x080154c1
 8015468:	080154c1 	.word	0x080154c1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 801546c:	693b      	ldr	r3, [r7, #16]
 801546e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 801547c:	683b      	ldr	r3, [r7, #0]
 801547e:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8015480:	693b      	ldr	r3, [r7, #16]
 8015482:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8015486:	6a3b      	ldr	r3, [r7, #32]
 8015488:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 801548a:	693b      	ldr	r3, [r7, #16]
 801548c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8015490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015492:	601a      	str	r2, [r3, #0]
	break;
 8015494:	e02c      	b.n	80154f0 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8015496:	693b      	ldr	r3, [r7, #16]
 8015498:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 80154a6:	683b      	ldr	r3, [r7, #0]
 80154a8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 80154aa:	693b      	ldr	r3, [r7, #16]
 80154ac:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 80154b0:	6a3b      	ldr	r3, [r7, #32]
 80154b2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 80154b4:	693b      	ldr	r3, [r7, #16]
 80154b6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 80154ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154bc:	601a      	str	r2, [r3, #0]
	break;
 80154be:	e017      	b.n	80154f0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 80154da:	6a3b      	ldr	r3, [r7, #32]
 80154dc:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 80154de:	693b      	ldr	r3, [r7, #16]
 80154e0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 80154e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154e6:	601a      	str	r2, [r3, #0]
	break;
 80154e8:	e002      	b.n	80154f0 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80154ea:	23fc      	movs	r3, #252	@ 0xfc
 80154ec:	75fb      	strb	r3, [r7, #23]
		break;
 80154ee:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80154f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	371c      	adds	r7, #28
 80154f8:	46bd      	mov	sp, r7
 80154fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fe:	4770      	bx	lr

08015500 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8015500:	b580      	push	{r7, lr}
 8015502:	b092      	sub	sp, #72	@ 0x48
 8015504:	af04      	add	r7, sp, #16
 8015506:	60f8      	str	r0, [r7, #12]
 8015508:	607b      	str	r3, [r7, #4]
 801550a:	460b      	mov	r3, r1
 801550c:	72fb      	strb	r3, [r7, #11]
 801550e:	4613      	mov	r3, r2
 8015510:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015512:	2300      	movs	r3, #0
 8015514:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 801551c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801551e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015522:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8015524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015526:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 801552a:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 801552c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801552e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8015532:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8015534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015536:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 801553a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 801553c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801553e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8015542:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8015544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015546:	33a4      	adds	r3, #164	@ 0xa4
 8015548:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 801554a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801554c:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8015550:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8015552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015554:	7afa      	ldrb	r2, [r7, #11]
 8015556:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8015558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801555a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801555c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 801555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015560:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015562:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8015564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015566:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015568:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 801556a:	2103      	movs	r1, #3
 801556c:	68f8      	ldr	r0, [r7, #12]
 801556e:	f001 fb7c 	bl	8016c6a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8015572:	7afb      	ldrb	r3, [r7, #11]
 8015574:	3b01      	subs	r3, #1
 8015576:	2b25      	cmp	r3, #37	@ 0x25
 8015578:	f200 810c 	bhi.w	8015794 <VL53L1_set_preset_mode+0x294>
 801557c:	a201      	add	r2, pc, #4	@ (adr r2, 8015584 <VL53L1_set_preset_mode+0x84>)
 801557e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015582:	bf00      	nop
 8015584:	0801561d 	.word	0x0801561d
 8015588:	08015639 	.word	0x08015639
 801558c:	08015655 	.word	0x08015655
 8015590:	08015671 	.word	0x08015671
 8015594:	0801568d 	.word	0x0801568d
 8015598:	080156a9 	.word	0x080156a9
 801559c:	080156c5 	.word	0x080156c5
 80155a0:	080156e1 	.word	0x080156e1
 80155a4:	08015795 	.word	0x08015795
 80155a8:	08015795 	.word	0x08015795
 80155ac:	08015795 	.word	0x08015795
 80155b0:	08015795 	.word	0x08015795
 80155b4:	08015795 	.word	0x08015795
 80155b8:	08015795 	.word	0x08015795
 80155bc:	08015795 	.word	0x08015795
 80155c0:	08015795 	.word	0x08015795
 80155c4:	080156fd 	.word	0x080156fd
 80155c8:	08015719 	.word	0x08015719
 80155cc:	08015795 	.word	0x08015795
 80155d0:	08015795 	.word	0x08015795
 80155d4:	08015795 	.word	0x08015795
 80155d8:	08015795 	.word	0x08015795
 80155dc:	08015795 	.word	0x08015795
 80155e0:	08015795 	.word	0x08015795
 80155e4:	08015795 	.word	0x08015795
 80155e8:	08015795 	.word	0x08015795
 80155ec:	08015795 	.word	0x08015795
 80155f0:	08015795 	.word	0x08015795
 80155f4:	08015795 	.word	0x08015795
 80155f8:	08015795 	.word	0x08015795
 80155fc:	08015795 	.word	0x08015795
 8015600:	08015795 	.word	0x08015795
 8015604:	08015795 	.word	0x08015795
 8015608:	08015795 	.word	0x08015795
 801560c:	08015795 	.word	0x08015795
 8015610:	08015735 	.word	0x08015735
 8015614:	08015755 	.word	0x08015755
 8015618:	08015775 	.word	0x08015775

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 801561c:	69bb      	ldr	r3, [r7, #24]
 801561e:	9301      	str	r3, [sp, #4]
 8015620:	69fb      	ldr	r3, [r7, #28]
 8015622:	9300      	str	r3, [sp, #0]
 8015624:	6a3b      	ldr	r3, [r7, #32]
 8015626:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801562a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801562c:	f000 ffa0 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 8015630:	4603      	mov	r3, r0
 8015632:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8015636:	e0b1      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8015638:	69bb      	ldr	r3, [r7, #24]
 801563a:	9301      	str	r3, [sp, #4]
 801563c:	69fb      	ldr	r3, [r7, #28]
 801563e:	9300      	str	r3, [sp, #0]
 8015640:	6a3b      	ldr	r3, [r7, #32]
 8015642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015648:	f001 f8b0 	bl	80167ac <VL53L1_preset_mode_standard_ranging_short_range>
 801564c:	4603      	mov	r3, r0
 801564e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8015652:	e0a3      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	9301      	str	r3, [sp, #4]
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	9300      	str	r3, [sp, #0]
 801565c:	6a3b      	ldr	r3, [r7, #32]
 801565e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015662:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015664:	f001 f8e3 	bl	801682e <VL53L1_preset_mode_standard_ranging_long_range>
 8015668:	4603      	mov	r3, r0
 801566a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801566e:	e095      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8015670:	69bb      	ldr	r3, [r7, #24]
 8015672:	9301      	str	r3, [sp, #4]
 8015674:	69fb      	ldr	r3, [r7, #28]
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	6a3b      	ldr	r3, [r7, #32]
 801567a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801567c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801567e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015680:	f001 f916 	bl	80168b0 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8015684:	4603      	mov	r3, r0
 8015686:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801568a:	e087      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 801568c:	69bb      	ldr	r3, [r7, #24]
 801568e:	9301      	str	r3, [sp, #4]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	9300      	str	r3, [sp, #0]
 8015694:	6a3b      	ldr	r3, [r7, #32]
 8015696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015698:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801569a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801569c:	f001 f92d 	bl	80168fa <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80156a0:	4603      	mov	r3, r0
 80156a2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80156a6:	e079      	b.n	801579c <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80156a8:	69bb      	ldr	r3, [r7, #24]
 80156aa:	9301      	str	r3, [sp, #4]
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	6a3b      	ldr	r3, [r7, #32]
 80156b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80156b8:	f001 f944 	bl	8016944 <VL53L1_preset_mode_timed_ranging>
 80156bc:	4603      	mov	r3, r0
 80156be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80156c2:	e06b      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80156c4:	69bb      	ldr	r3, [r7, #24]
 80156c6:	9301      	str	r3, [sp, #4]
 80156c8:	69fb      	ldr	r3, [r7, #28]
 80156ca:	9300      	str	r3, [sp, #0]
 80156cc:	6a3b      	ldr	r3, [r7, #32]
 80156ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80156d4:	f001 f970 	bl	80169b8 <VL53L1_preset_mode_timed_ranging_short_range>
 80156d8:	4603      	mov	r3, r0
 80156da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80156de:	e05d      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 80156e0:	69bb      	ldr	r3, [r7, #24]
 80156e2:	9301      	str	r3, [sp, #4]
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	9300      	str	r3, [sp, #0]
 80156e8:	6a3b      	ldr	r3, [r7, #32]
 80156ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80156ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80156ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80156f0:	f001 f99c 	bl	8016a2c <VL53L1_preset_mode_timed_ranging_long_range>
 80156f4:	4603      	mov	r3, r0
 80156f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80156fa:	e04f      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	9301      	str	r3, [sp, #4]
 8015700:	69fb      	ldr	r3, [r7, #28]
 8015702:	9300      	str	r3, [sp, #0]
 8015704:	6a3b      	ldr	r3, [r7, #32]
 8015706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015708:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801570a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801570c:	f001 fa70 	bl	8016bf0 <VL53L1_preset_mode_olt>
 8015710:	4603      	mov	r3, r0
 8015712:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8015716:	e041      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8015718:	69bb      	ldr	r3, [r7, #24]
 801571a:	9301      	str	r3, [sp, #4]
 801571c:	69fb      	ldr	r3, [r7, #28]
 801571e:	9300      	str	r3, [sp, #0]
 8015720:	6a3b      	ldr	r3, [r7, #32]
 8015722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015726:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015728:	f001 fa2c 	bl	8016b84 <VL53L1_preset_mode_singleshot_ranging>
 801572c:	4603      	mov	r3, r0
 801572e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8015732:	e033      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8015734:	697b      	ldr	r3, [r7, #20]
 8015736:	9302      	str	r3, [sp, #8]
 8015738:	69bb      	ldr	r3, [r7, #24]
 801573a:	9301      	str	r3, [sp, #4]
 801573c:	69fb      	ldr	r3, [r7, #28]
 801573e:	9300      	str	r3, [sp, #0]
 8015740:	6a3b      	ldr	r3, [r7, #32]
 8015742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015744:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015746:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015748:	f001 f9d0 	bl	8016aec <VL53L1_preset_mode_low_power_auto_short_ranging>
 801574c:	4603      	mov	r3, r0
 801574e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8015752:	e023      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	9302      	str	r3, [sp, #8]
 8015758:	69bb      	ldr	r3, [r7, #24]
 801575a:	9301      	str	r3, [sp, #4]
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	9300      	str	r3, [sp, #0]
 8015760:	6a3b      	ldr	r3, [r7, #32]
 8015762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015764:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015768:	f001 f99a 	bl	8016aa0 <VL53L1_preset_mode_low_power_auto_ranging>
 801576c:	4603      	mov	r3, r0
 801576e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8015772:	e013      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8015774:	697b      	ldr	r3, [r7, #20]
 8015776:	9302      	str	r3, [sp, #8]
 8015778:	69bb      	ldr	r3, [r7, #24]
 801577a:	9301      	str	r3, [sp, #4]
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	9300      	str	r3, [sp, #0]
 8015780:	6a3b      	ldr	r3, [r7, #32]
 8015782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015784:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015786:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015788:	f001 f9d6 	bl	8016b38 <VL53L1_preset_mode_low_power_auto_long_ranging>
 801578c:	4603      	mov	r3, r0
 801578e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8015792:	e003      	b.n	801579c <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8015794:	23fc      	movs	r3, #252	@ 0xfc
 8015796:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 801579a:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 801579c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d105      	bne.n	80157b0 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 80157a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80157a6:	893a      	ldrh	r2, [r7, #8]
 80157a8:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80157aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80157ac:	893a      	ldrh	r2, [r7, #8]
 80157ae:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80157b0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d108      	bne.n	80157ca <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 80157b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80157ba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80157bc:	6879      	ldr	r1, [r7, #4]
 80157be:	68f8      	ldr	r0, [r7, #12]
 80157c0:	f7ff fca2 	bl	8015108 <VL53L1_set_timeouts_us>
 80157c4:	4603      	mov	r3, r0
 80157c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80157ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d106      	bne.n	80157e0 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 80157d2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80157d4:	68f8      	ldr	r0, [r7, #12]
 80157d6:	f7ff fc6e 	bl	80150b6 <VL53L1_set_inter_measurement_period_ms>
 80157da:	4603      	mov	r3, r0
 80157dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 80157e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3738      	adds	r7, #56	@ 0x38
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 80157ec:	b480      	push	{r7}
 80157ee:	b085      	sub	sp, #20
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80157f6:	2300      	movs	r3, #0
 80157f8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8015808:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 801580c:	4618      	mov	r0, r3
 801580e:	3714      	adds	r7, #20
 8015810:	46bd      	mov	sp, r7
 8015812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015816:	4770      	bx	lr

08015818 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8015818:	b480      	push	{r7}
 801581a:	b085      	sub	sp, #20
 801581c:	af00      	add	r7, sp, #0
 801581e:	6078      	str	r0, [r7, #4]
 8015820:	460b      	mov	r3, r1
 8015822:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015824:	2300      	movs	r3, #0
 8015826:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	887a      	ldrh	r2, [r7, #2]
 8015830:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8015834:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8015838:	4618      	mov	r0, r3
 801583a:	3714      	adds	r7, #20
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr

08015844 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8015844:	b480      	push	{r7}
 8015846:	b085      	sub	sp, #20
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801584e:	2300      	movs	r3, #0
 8015850:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 801585c:	683b      	ldr	r3, [r7, #0]
 801585e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8015860:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8015864:	4618      	mov	r0, r3
 8015866:	3714      	adds	r7, #20
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr

08015870 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8015870:	b480      	push	{r7}
 8015872:	b085      	sub	sp, #20
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	460b      	mov	r3, r1
 801587a:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801587c:	2300      	movs	r3, #0
 801587e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	887a      	ldrh	r2, [r7, #2]
 8015888:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 801588c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8015890:	4618      	mov	r0, r3
 8015892:	3714      	adds	r7, #20
 8015894:	46bd      	mov	sp, r7
 8015896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801589a:	4770      	bx	lr

0801589c <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 801589c:	b480      	push	{r7}
 801589e:	b085      	sub	sp, #20
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
 80158a4:	460b      	mov	r3, r1
 80158a6:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80158a8:	2300      	movs	r3, #0
 80158aa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80158b6:	f003 0303 	and.w	r3, r3, #3
 80158ba:	b2da      	uxtb	r2, r3
 80158bc:	78fb      	ldrb	r3, [r7, #3]
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	4413      	add	r3, r2
 80158c4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 80158cc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80158d0:	4618      	mov	r0, r3
 80158d2:	3714      	adds	r7, #20
 80158d4:	46bd      	mov	sp, r7
 80158d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158da:	4770      	bx	lr

080158dc <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 80158dc:	b580      	push	{r7, lr}
 80158de:	b0d0      	sub	sp, #320	@ 0x140
 80158e0:	af00      	add	r7, sp, #0
 80158e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80158ea:	6018      	str	r0, [r3, #0]
 80158ec:	4608      	mov	r0, r1
 80158ee:	4611      	mov	r1, r2
 80158f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80158f4:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80158f8:	4602      	mov	r2, r0
 80158fa:	701a      	strb	r2, [r3, #0]
 80158fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015900:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015904:	460a      	mov	r2, r1
 8015906:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015908:	2300      	movs	r3, #0
 801590a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801590e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015912:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015916:	681b      	ldr	r3, [r3, #0]
 8015918:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 801591c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015920:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8015924:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8015928:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801592c:	3342      	adds	r3, #66	@ 0x42
 801592e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8015932:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015936:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801593a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 801593e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015942:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8015946:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 801594a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801594e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8015952:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8015956:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801595a:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 801595e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8015962:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015966:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 801596a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 801596e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015972:	332c      	adds	r3, #44	@ 0x2c
 8015974:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8015978:	f107 030c 	add.w	r3, r7, #12
 801597c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8015980:	2300      	movs	r3, #0
 8015982:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 8015986:	2300      	movs	r3, #0
 8015988:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 801598c:	2300      	movs	r3, #0
 801598e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8015998:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801599c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80159a0:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 80159a4:	7812      	ldrb	r2, [r2, #0]
 80159a6:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80159a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159ac:	791b      	ldrb	r3, [r3, #4]
 80159ae:	b25b      	sxtb	r3, r3
 80159b0:	f003 030f 	and.w	r3, r3, #15
 80159b4:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80159b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80159ba:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80159be:	f993 3000 	ldrsb.w	r3, [r3]
 80159c2:	4313      	orrs	r3, r2
 80159c4:	b25b      	sxtb	r3, r3
 80159c6:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80159c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159cc:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80159ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159d2:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80159d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159da:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80159de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159e2:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80159e6:	2bff      	cmp	r3, #255	@ 0xff
 80159e8:	d104      	bne.n	80159f4 <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80159ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159ee:	2200      	movs	r2, #0
 80159f0:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80159f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80159f8:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80159fc:	2b01      	cmp	r3, #1
 80159fe:	d139      	bne.n	8015a74 <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8015a00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a04:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d133      	bne.n	8015a74 <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8015a0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a10:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8015a14:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a18:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8015a1c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a20:	2220      	movs	r2, #32
 8015a22:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8015a26:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a2a:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 8015a2e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d10c      	bne.n	8015a50 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8015a36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a3a:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8015a3e:	b29b      	uxth	r3, r3
 8015a40:	009b      	lsls	r3, r3, #2
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8015a46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a4a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8015a4e:	e004      	b.n	8015a5a <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8015a50:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a54:	2200      	movs	r2, #0
 8015a56:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8015a5a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a5e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	2b04      	cmp	r3, #4
 8015a66:	d805      	bhi.n	8015a74 <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8015a68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015a6c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015a70:	2205      	movs	r2, #5
 8015a72:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8015a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a78:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	d113      	bne.n	8015aa8 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8015a80:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a84:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8015a88:	2b01      	cmp	r3, #1
 8015a8a:	d10d      	bne.n	8015aa8 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8015a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a90:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8015a94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015a98:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8015a9c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015aa0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015aa4:	2206      	movs	r2, #6
 8015aa6:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8015aa8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015aac:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	3b01      	subs	r3, #1
 8015ab4:	2b05      	cmp	r3, #5
 8015ab6:	d827      	bhi.n	8015b08 <VL53L1_init_and_start_range+0x22c>
 8015ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8015ac0 <VL53L1_init_and_start_range+0x1e4>)
 8015aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015abe:	bf00      	nop
 8015ac0:	08015b01 	.word	0x08015b01
 8015ac4:	08015af9 	.word	0x08015af9
 8015ac8:	08015af1 	.word	0x08015af1
 8015acc:	08015ae9 	.word	0x08015ae9
 8015ad0:	08015ae1 	.word	0x08015ae1
 8015ad4:	08015ad9 	.word	0x08015ad9
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8015ad8:	2301      	movs	r3, #1
 8015ada:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015ade:	e017      	b.n	8015b10 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8015ae0:	230d      	movs	r3, #13
 8015ae2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015ae6:	e013      	b.n	8015b10 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8015ae8:	2324      	movs	r3, #36	@ 0x24
 8015aea:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015aee:	e00f      	b.n	8015b10 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8015af0:	2344      	movs	r3, #68	@ 0x44
 8015af2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015af6:	e00b      	b.n	8015b10 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8015af8:	235a      	movs	r3, #90	@ 0x5a
 8015afa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015afe:	e007      	b.n	8015b10 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8015b00:	2371      	movs	r3, #113	@ 0x71
 8015b02:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015b06:	e003      	b.n	8015b10 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8015b08:	2383      	movs	r3, #131	@ 0x83
 8015b0a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015b0e:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8015b10:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015b14:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8015b18:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8015b1c:	f107 030c 	add.w	r3, r7, #12
 8015b20:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8015b24:	2300      	movs	r3, #0
 8015b26:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8015b2a:	e00b      	b.n	8015b44 <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8015b2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8015b30:	1c5a      	adds	r2, r3, #1
 8015b32:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8015b36:	2200      	movs	r2, #0
 8015b38:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8015b3a:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8015b3e:	3301      	adds	r3, #1
 8015b40:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8015b44:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8015b48:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d3ed      	bcc.n	8015b2c <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8015b50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015b54:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015b58:	781b      	ldrb	r3, [r3, #0]
 8015b5a:	2b05      	cmp	r3, #5
 8015b5c:	d917      	bls.n	8015b8e <VL53L1_init_and_start_range+0x2b2>
 8015b5e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d113      	bne.n	8015b8e <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8015b66:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015b6a:	f1c3 0301 	rsb	r3, r3, #1
 8015b6e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015b72:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8015b76:	f107 020c 	add.w	r2, r7, #12
 8015b7a:	4413      	add	r3, r2
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	210b      	movs	r1, #11
 8015b80:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8015b84:	f001 ff60 	bl	8017a48 <VL53L1_i2c_encode_static_nvm_managed>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8015b8e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015b92:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015b96:	781b      	ldrb	r3, [r3, #0]
 8015b98:	2b04      	cmp	r3, #4
 8015b9a:	d917      	bls.n	8015bcc <VL53L1_init_and_start_range+0x2f0>
 8015b9c:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	d113      	bne.n	8015bcc <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8015ba4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015ba8:	f1c3 030d 	rsb	r3, r3, #13
 8015bac:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015bb0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8015bb4:	f107 020c 	add.w	r2, r7, #12
 8015bb8:	4413      	add	r3, r2
 8015bba:	461a      	mov	r2, r3
 8015bbc:	2117      	movs	r1, #23
 8015bbe:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8015bc2:	f002 f81d 	bl	8017c00 <VL53L1_i2c_encode_customer_nvm_managed>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8015bcc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015bd0:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	2b03      	cmp	r3, #3
 8015bd8:	d917      	bls.n	8015c0a <VL53L1_init_and_start_range+0x32e>
 8015bda:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d113      	bne.n	8015c0a <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8015be2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015be6:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8015bea:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015bee:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 8015bf2:	f107 020c 	add.w	r2, r7, #12
 8015bf6:	4413      	add	r3, r2
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	2120      	movs	r1, #32
 8015bfc:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8015c00:	f002 f93c 	bl	8017e7c <VL53L1_i2c_encode_static_config>
 8015c04:	4603      	mov	r3, r0
 8015c06:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8015c0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015c0e:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015c12:	781b      	ldrb	r3, [r3, #0]
 8015c14:	2b02      	cmp	r3, #2
 8015c16:	d917      	bls.n	8015c48 <VL53L1_init_and_start_range+0x36c>
 8015c18:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015c1c:	2b00      	cmp	r3, #0
 8015c1e:	d113      	bne.n	8015c48 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8015c20:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015c24:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8015c28:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015c2c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 8015c30:	f107 020c 	add.w	r2, r7, #12
 8015c34:	4413      	add	r3, r2
 8015c36:	461a      	mov	r2, r3
 8015c38:	2116      	movs	r1, #22
 8015c3a:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8015c3e:	f002 fa00 	bl	8018042 <VL53L1_i2c_encode_general_config>
 8015c42:	4603      	mov	r3, r0
 8015c44:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8015c48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015c4c:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	2b01      	cmp	r3, #1
 8015c54:	d917      	bls.n	8015c86 <VL53L1_init_and_start_range+0x3aa>
 8015c56:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d113      	bne.n	8015c86 <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8015c5e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015c62:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8015c66:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015c6a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8015c6e:	f107 020c 	add.w	r2, r7, #12
 8015c72:	4413      	add	r3, r2
 8015c74:	461a      	mov	r2, r3
 8015c76:	2117      	movs	r1, #23
 8015c78:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8015c7c:	f002 fa65 	bl	801814a <VL53L1_i2c_encode_timing_config>
 8015c80:	4603      	mov	r3, r0
 8015c82:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8015c86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015c8a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015c8e:	781b      	ldrb	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d036      	beq.n	8015d02 <VL53L1_init_and_start_range+0x426>
 8015c94:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d132      	bne.n	8015d02 <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8015c9c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015ca0:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8015ca4:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8015ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015cac:	791b      	ldrb	r3, [r3, #4]
 8015cae:	f003 0320 	and.w	r3, r3, #32
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d017      	beq.n	8015ce6 <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8015cb6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015cba:	789b      	ldrb	r3, [r3, #2]
 8015cbc:	f043 0301 	orr.w	r3, r3, #1
 8015cc0:	b2da      	uxtb	r2, r3
 8015cc2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015cc6:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8015cc8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015ccc:	789b      	ldrb	r3, [r3, #2]
 8015cce:	f043 0301 	orr.w	r3, r3, #1
 8015cd2:	b2da      	uxtb	r2, r3
 8015cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015cd8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8015cda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015cde:	789a      	ldrb	r2, [r3, #2]
 8015ce0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015ce4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015ce6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8015cea:	f107 020c 	add.w	r2, r7, #12
 8015cee:	4413      	add	r3, r2
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	2112      	movs	r1, #18
 8015cf4:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8015cf8:	f002 faa9 	bl	801824e <VL53L1_i2c_encode_dynamic_config>
 8015cfc:	4603      	mov	r3, r0
 8015cfe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8015d02:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015d06:	2b00      	cmp	r3, #0
 8015d08:	d113      	bne.n	8015d32 <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8015d0a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015d0e:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8015d12:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015d16:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 8015d1a:	f107 020c 	add.w	r2, r7, #12
 8015d1e:	4413      	add	r3, r2
 8015d20:	461a      	mov	r2, r3
 8015d22:	2105      	movs	r1, #5
 8015d24:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8015d28:	f002 fb16 	bl	8018358 <VL53L1_i2c_encode_system_control>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8015d32:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d10f      	bne.n	8015d5a <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8015d3a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8015d3e:	f107 020c 	add.w	r2, r7, #12
 8015d42:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8015d46:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8015d4a:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8015d4e:	6800      	ldr	r0, [r0, #0]
 8015d50:	f7f5 fe43 	bl	800b9da <VL53L1_WriteMulti>
 8015d54:	4603      	mov	r3, r0
 8015d56:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8015d5a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d109      	bne.n	8015d76 <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8015d62:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015d66:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015d6a:	6818      	ldr	r0, [r3, #0]
 8015d6c:	f000 ffa6 	bl	8016cbc <VL53L1_update_ll_driver_rd_state>
 8015d70:	4603      	mov	r3, r0
 8015d72:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8015d76:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d109      	bne.n	8015d92 <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8015d7e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015d82:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015d86:	6818      	ldr	r0, [r3, #0]
 8015d88:	f001 f86b 	bl	8016e62 <VL53L1_update_ll_driver_cfg_state>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8015d92:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8015d96:	4618      	mov	r0, r3
 8015d98:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015da8:	2300      	movs	r3, #0
 8015daa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8015db0:	68bb      	ldr	r3, [r7, #8]
 8015db2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8015db6:	b25b      	sxtb	r3, r3
 8015db8:	f003 030f 	and.w	r3, r3, #15
 8015dbc:	b25b      	sxtb	r3, r3
 8015dbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8015dc2:	b25b      	sxtb	r3, r3
 8015dc4:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8015dc6:	68bb      	ldr	r3, [r7, #8]
 8015dc8:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8015dcc:	68bb      	ldr	r3, [r7, #8]
 8015dce:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f002 fafa 	bl	80183ce <VL53L1_set_system_control>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8015de4:	f003 030f 	and.w	r3, r3, #15
 8015de8:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8015dea:	68bb      	ldr	r3, [r7, #8]
 8015dec:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8015df0:	2103      	movs	r1, #3
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f000 ff39 	bl	8016c6a <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015dfe:	2b01      	cmp	r3, #1
 8015e00:	d102      	bne.n	8015e08 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8015e02:	6878      	ldr	r0, [r7, #4]
 8015e04:	f001 fcb4 	bl	8017770 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8015e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	3710      	adds	r7, #16
 8015e10:	46bd      	mov	sp, r7
 8015e12:	bd80      	pop	{r7, pc}

08015e14 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8015e14:	b580      	push	{r7, lr}
 8015e16:	b0c8      	sub	sp, #288	@ 0x120
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e1e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015e22:	6018      	str	r0, [r3, #0]
 8015e24:	460a      	mov	r2, r1
 8015e26:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e2a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8015e2e:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015e30:	2300      	movs	r3, #0
 8015e32:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015e36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8015e44:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015e48:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8015e4c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8015e50:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015e54:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8015e58:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8015e5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015e60:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8015e64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8015e68:	2388      	movs	r3, #136	@ 0x88
 8015e6a:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8015e6e:	2300      	movs	r3, #0
 8015e70:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8015e74:	2300      	movs	r3, #0
 8015e76:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8015e7a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015e7e:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8015e82:	781b      	ldrb	r3, [r3, #0]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	d008      	beq.n	8015e9a <VL53L1_get_measurement_results+0x86>
 8015e88:	2b02      	cmp	r3, #2
 8015e8a:	d10d      	bne.n	8015ea8 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8015e8c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8015e90:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8015e94:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8015e98:	e00a      	b.n	8015eb0 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8015e9a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8015e9e:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8015ea2:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8015ea6:	e003      	b.n	8015eb0 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 8015ea8:	232c      	movs	r3, #44	@ 0x2c
 8015eaa:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8015eae:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8015eb0:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d10f      	bne.n	8015ed8 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8015eb8:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8015ebc:	f107 0208 	add.w	r2, r7, #8
 8015ec0:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8015ec4:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8015ec8:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8015ecc:	6800      	ldr	r0, [r0, #0]
 8015ece:	f7f5 fdaa 	bl	800ba26 <VL53L1_ReadMulti>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8015ed8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015edc:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8015ee0:	781b      	ldrb	r3, [r3, #0]
 8015ee2:	2b01      	cmp	r3, #1
 8015ee4:	d917      	bls.n	8015f16 <VL53L1_get_measurement_results+0x102>
 8015ee6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d113      	bne.n	8015f16 <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8015eee:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8015ef2:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8015ef6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8015efa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8015efe:	f107 0208 	add.w	r2, r7, #8
 8015f02:	4413      	add	r3, r2
 8015f04:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8015f08:	4619      	mov	r1, r3
 8015f0a:	2038      	movs	r0, #56	@ 0x38
 8015f0c:	f002 fbdd 	bl	80186ca <VL53L1_i2c_decode_debug_results>
 8015f10:	4603      	mov	r3, r0
 8015f12:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8015f16:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015f1a:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8015f1e:	781b      	ldrb	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d017      	beq.n	8015f54 <VL53L1_get_measurement_results+0x140>
 8015f24:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d113      	bne.n	8015f54 <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8015f2c:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8015f30:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8015f34:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8015f38:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 8015f3c:	f107 0208 	add.w	r2, r7, #8
 8015f40:	4413      	add	r3, r2
 8015f42:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8015f46:	4619      	mov	r1, r3
 8015f48:	2021      	movs	r0, #33	@ 0x21
 8015f4a:	f002 fb5d 	bl	8018608 <VL53L1_i2c_decode_core_results>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8015f54:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d110      	bne.n	8015f7e <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8015f62:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8015f66:	f107 0208 	add.w	r2, r7, #8
 8015f6a:	4413      	add	r3, r2
 8015f6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8015f70:	4619      	mov	r1, r3
 8015f72:	202c      	movs	r0, #44	@ 0x2c
 8015f74:	f002 fa52 	bl	801841c <VL53L1_i2c_decode_system_results>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8015f7e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	bd80      	pop	{r7, pc}

08015f8c <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b088      	sub	sp, #32
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	60f8      	str	r0, [r7, #12]
 8015f94:	460b      	mov	r3, r1
 8015f96:	607a      	str	r2, [r7, #4]
 8015f98:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8015fa2:	68fb      	ldr	r3, [r7, #12]
 8015fa4:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8015fa8:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8015faa:	697b      	ldr	r3, [r7, #20]
 8015fac:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8015fae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d106      	bne.n	8015fc4 <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8015fb6:	7afb      	ldrb	r3, [r7, #11]
 8015fb8:	4619      	mov	r1, r3
 8015fba:	68f8      	ldr	r0, [r7, #12]
 8015fbc:	f7ff ff2a 	bl	8015e14 <VL53L1_get_measurement_results>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8015fc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d10c      	bne.n	8015fe6 <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8015fcc:	69bb      	ldr	r3, [r7, #24]
 8015fce:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	69bb      	ldr	r3, [r7, #24]
 8015fd6:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8015fda:	69bb      	ldr	r3, [r7, #24]
 8015fdc:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	f000 f851 	bl	8016088 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8015fe6:	69bb      	ldr	r3, [r7, #24]
 8015fe8:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015fec:	2b01      	cmp	r3, #1
 8015fee:	d12d      	bne.n	801604c <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8015ff0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d10e      	bne.n	8016016 <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8015ff8:	69bb      	ldr	r3, [r7, #24]
 8015ffa:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d109      	bne.n	8016016 <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8016002:	68f8      	ldr	r0, [r7, #12]
 8016004:	f001 fc0e 	bl	8017824 <VL53L1_low_power_auto_setup_manual_calibration>
 8016008:	4603      	mov	r3, r0
 801600a:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 801600c:	69bb      	ldr	r3, [r7, #24]
 801600e:	2201      	movs	r2, #1
 8016010:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8016014:	e00c      	b.n	8016030 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8016016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d108      	bne.n	8016030 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 801601e:	69bb      	ldr	r3, [r7, #24]
 8016020:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8016024:	2b01      	cmp	r3, #1
 8016026:	d103      	bne.n	8016030 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8016028:	69bb      	ldr	r3, [r7, #24]
 801602a:	2202      	movs	r2, #2
 801602c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8016030:	69bb      	ldr	r3, [r7, #24]
 8016032:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8016036:	2bff      	cmp	r3, #255	@ 0xff
 8016038:	d008      	beq.n	801604c <VL53L1_get_device_results+0xc0>
 801603a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d104      	bne.n	801604c <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 8016042:	68f8      	ldr	r0, [r7, #12]
 8016044:	f001 fc33 	bl	80178ae <VL53L1_low_power_auto_update_DSS>
 8016048:	4603      	mov	r3, r0
 801604a:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 801604c:	69bb      	ldr	r3, [r7, #24]
 801604e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8016052:	693b      	ldr	r3, [r7, #16]
 8016054:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8016056:	69bb      	ldr	r3, [r7, #24]
 8016058:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801605c:	693b      	ldr	r3, [r7, #16]
 801605e:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8016060:	2284      	movs	r2, #132	@ 0x84
 8016062:	6939      	ldr	r1, [r7, #16]
 8016064:	6878      	ldr	r0, [r7, #4]
 8016066:	f003 f957 	bl	8019318 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 801606a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d104      	bne.n	801607c <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8016072:	68f8      	ldr	r0, [r7, #12]
 8016074:	f000 feaa 	bl	8016dcc <VL53L1_check_ll_driver_rd_state>
 8016078:	4603      	mov	r3, r0
 801607a:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 801607c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016080:	4618      	mov	r0, r3
 8016082:	3720      	adds	r7, #32
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8016088:	b480      	push	{r7}
 801608a:	b089      	sub	sp, #36	@ 0x24
 801608c:	af00      	add	r7, sp, #0
 801608e:	60f8      	str	r0, [r7, #12]
 8016090:	60b9      	str	r1, [r7, #8]
 8016092:	607a      	str	r2, [r7, #4]
 8016094:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8016096:	2300      	movs	r3, #0
 8016098:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 801609a:	2300      	movs	r3, #0
 801609c:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 801609e:	2300      	movs	r3, #0
 80160a0:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	78da      	ldrb	r2, [r3, #3]
 80160a6:	683b      	ldr	r3, [r7, #0]
 80160a8:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 80160aa:	683b      	ldr	r3, [r7, #0]
 80160ac:	3304      	adds	r3, #4
 80160ae:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 80160b0:	2300      	movs	r3, #0
 80160b2:	77fb      	strb	r3, [r7, #31]
 80160b4:	e0d0      	b.n	8016258 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 80160b6:	69bb      	ldr	r3, [r7, #24]
 80160b8:	7ffa      	ldrb	r2, [r7, #31]
 80160ba:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 80160bc:	69bb      	ldr	r3, [r7, #24]
 80160be:	2200      	movs	r2, #0
 80160c0:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	78db      	ldrb	r3, [r3, #3]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d10a      	bne.n	80160e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	785b      	ldrb	r3, [r3, #1]
 80160ce:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 80160d2:	2b09      	cmp	r3, #9
 80160d4:	d104      	bne.n	80160e0 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 80160d6:	69bb      	ldr	r3, [r7, #24]
 80160d8:	2213      	movs	r2, #19
 80160da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80160de:	e007      	b.n	80160f0 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 80160e0:	68bb      	ldr	r3, [r7, #8]
 80160e2:	785b      	ldrb	r3, [r3, #1]
 80160e4:	f003 031f 	and.w	r3, r3, #31
 80160e8:	b2da      	uxtb	r2, r3
			pdata->range_status =
 80160ea:	69bb      	ldr	r3, [r7, #24]
 80160ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 80160f0:	7ffb      	ldrb	r3, [r7, #31]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d002      	beq.n	80160fc <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 80160f6:	2b01      	cmp	r3, #1
 80160f8:	d05d      	beq.n	80161b6 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 80160fa:	e0a7      	b.n	801624c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 80160fc:	68bb      	ldr	r3, [r7, #8]
 80160fe:	789b      	ldrb	r3, [r3, #2]
 8016100:	2b07      	cmp	r3, #7
 8016102:	d104      	bne.n	801610e <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8016104:	68bb      	ldr	r3, [r7, #8]
 8016106:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8016108:	69bb      	ldr	r3, [r7, #24]
 801610a:	821a      	strh	r2, [r3, #16]
 801610c:	e00c      	b.n	8016128 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	789b      	ldrb	r3, [r3, #2]
 8016112:	2b08      	cmp	r3, #8
 8016114:	d104      	bne.n	8016120 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 801611a:	69bb      	ldr	r3, [r7, #24]
 801611c:	821a      	strh	r2, [r3, #16]
 801611e:	e003      	b.n	8016128 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 801612c:	69bb      	ldr	r3, [r7, #24]
 801612e:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8016130:	68bb      	ldr	r3, [r7, #8]
 8016132:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8016134:	69bb      	ldr	r3, [r7, #24]
 8016136:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8016138:	68bb      	ldr	r3, [r7, #8]
 801613a:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 801613c:	69bb      	ldr	r3, [r7, #24]
 801613e:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	895b      	ldrh	r3, [r3, #10]
 8016144:	015b      	lsls	r3, r3, #5
 8016146:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801614e:	d302      	bcc.n	8016156 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8016150:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016154:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8016156:	697b      	ldr	r3, [r7, #20]
 8016158:	b29a      	uxth	r2, r3
 801615a:	69bb      	ldr	r3, [r7, #24]
 801615c:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8016162:	69bb      	ldr	r3, [r7, #24]
 8016164:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 801616a:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	fb02 f303 	mul.w	r3, r2, r3
 8016174:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8016176:	693b      	ldr	r3, [r7, #16]
 8016178:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801617c:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 801617e:	693b      	ldr	r3, [r7, #16]
 8016180:	2b00      	cmp	r3, #0
 8016182:	da01      	bge.n	8016188 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8016184:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8016188:	12db      	asrs	r3, r3, #11
 801618a:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 801618c:	693b      	ldr	r3, [r7, #16]
 801618e:	b21a      	sxth	r2, r3
 8016190:	69bb      	ldr	r3, [r7, #24]
 8016192:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 80161a0:	69bb      	ldr	r3, [r7, #24]
 80161a2:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 80161a8:	69bb      	ldr	r3, [r7, #24]
 80161aa:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 80161b0:	69bb      	ldr	r3, [r7, #24]
 80161b2:	621a      	str	r2, [r3, #32]

			break;
 80161b4:	e04a      	b.n	801624c <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 80161b6:	68bb      	ldr	r3, [r7, #8]
 80161b8:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 80161ba:	69bb      	ldr	r3, [r7, #24]
 80161bc:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 80161be:	68bb      	ldr	r3, [r7, #8]
 80161c0:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 80161c2:	69bb      	ldr	r3, [r7, #24]
 80161c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 80161c6:	69bb      	ldr	r3, [r7, #24]
 80161c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80161cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 80161ce:	68bb      	ldr	r3, [r7, #8]
 80161d0:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 80161d2:	69bb      	ldr	r3, [r7, #24]
 80161d4:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	8bdb      	ldrh	r3, [r3, #30]
 80161da:	015b      	lsls	r3, r3, #5
 80161dc:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80161e4:	d302      	bcc.n	80161ec <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 80161e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161ea:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	b29a      	uxth	r2, r3
 80161f0:	69bb      	ldr	r3, [r7, #24]
 80161f2:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 80161f8:	69bb      	ldr	r3, [r7, #24]
 80161fa:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 80161fc:	68bb      	ldr	r3, [r7, #8]
 80161fe:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8016200:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8016202:	693b      	ldr	r3, [r7, #16]
 8016204:	68fa      	ldr	r2, [r7, #12]
 8016206:	fb02 f303 	mul.w	r3, r2, r3
 801620a:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 801620c:	693b      	ldr	r3, [r7, #16]
 801620e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8016212:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8016214:	693b      	ldr	r3, [r7, #16]
 8016216:	2b00      	cmp	r3, #0
 8016218:	da01      	bge.n	801621e <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 801621a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 801621e:	12db      	asrs	r3, r3, #11
 8016220:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	b21a      	sxth	r2, r3
 8016226:	69bb      	ldr	r3, [r7, #24]
 8016228:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 801622e:	69bb      	ldr	r3, [r7, #24]
 8016230:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8016236:	69bb      	ldr	r3, [r7, #24]
 8016238:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 801623e:	69bb      	ldr	r3, [r7, #24]
 8016240:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8016246:	69bb      	ldr	r3, [r7, #24]
 8016248:	621a      	str	r2, [r3, #32]

			break;
 801624a:	bf00      	nop
		}

		pdata++;
 801624c:	69bb      	ldr	r3, [r7, #24]
 801624e:	3340      	adds	r3, #64	@ 0x40
 8016250:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8016252:	7ffb      	ldrb	r3, [r7, #31]
 8016254:	3301      	adds	r3, #1
 8016256:	77fb      	strb	r3, [r7, #31]
 8016258:	7ffb      	ldrb	r3, [r7, #31]
 801625a:	2b01      	cmp	r3, #1
 801625c:	f67f af2b 	bls.w	80160b6 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	2200      	movs	r2, #0
 8016264:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	785b      	ldrb	r3, [r3, #1]
 801626a:	f003 031f 	and.w	r3, r3, #31
 801626e:	2b11      	cmp	r3, #17
 8016270:	bf8c      	ite	hi
 8016272:	2201      	movhi	r2, #1
 8016274:	2200      	movls	r2, #0
 8016276:	b2d2      	uxtb	r2, r2
 8016278:	2a00      	cmp	r2, #0
 801627a:	d117      	bne.n	80162ac <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 801627c:	4a0e      	ldr	r2, [pc, #56]	@ (80162b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 801627e:	fa22 f303 	lsr.w	r3, r2, r3
 8016282:	f003 0301 	and.w	r3, r3, #1
 8016286:	2b00      	cmp	r3, #0
 8016288:	bf14      	ite	ne
 801628a:	2301      	movne	r3, #1
 801628c:	2300      	moveq	r3, #0
 801628e:	b2db      	uxtb	r3, r3
 8016290:	2b00      	cmp	r3, #0
 8016292:	d00b      	beq.n	80162ac <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8016294:	68bb      	ldr	r3, [r7, #8]
 8016296:	785b      	ldrb	r3, [r3, #1]
 8016298:	f003 031f 	and.w	r3, r3, #31
 801629c:	b2da      	uxtb	r2, r3
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	2200      	movs	r2, #0
 80162a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 80162aa:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 80162ac:	bf00      	nop
 80162ae:	3724      	adds	r7, #36	@ 0x24
 80162b0:	46bd      	mov	sp, r7
 80162b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162b6:	4770      	bx	lr
 80162b8:	0002200e 	.word	0x0002200e

080162bc <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80162bc:	b480      	push	{r7}
 80162be:	b085      	sub	sp, #20
 80162c0:	af00      	add	r7, sp, #0
 80162c2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80162c4:	2300      	movs	r3, #0
 80162c6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	2208      	movs	r2, #8
 80162cc:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	220b      	movs	r2, #11
 80162d2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80162da:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80162e2:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 80162ea:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 80162f2:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80162f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	3714      	adds	r7, #20
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8016304:	b480      	push	{r7}
 8016306:	b085      	sub	sp, #20
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801630c:	2300      	movs	r3, #0
 801630e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	2200      	movs	r2, #0
 8016314:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	2212      	movs	r2, #18
 801631a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	220f      	movs	r2, #15
 8016320:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	2202      	movs	r2, #2
 8016326:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 801632e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	220c      	movs	r2, #12
 8016334:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8016336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801633a:	4618      	mov	r0, r3
 801633c:	3714      	adds	r7, #20
 801633e:	46bd      	mov	sp, r7
 8016340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016344:	4770      	bx	lr

08016346 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8016346:	b580      	push	{r7, lr}
 8016348:	b084      	sub	sp, #16
 801634a:	af00      	add	r7, sp, #0
 801634c:	6078      	str	r0, [r7, #4]
 801634e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016350:	2300      	movs	r3, #0
 8016352:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	895b      	ldrh	r3, [r3, #10]
 8016358:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	895b      	ldrh	r3, [r3, #10]
 8016376:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8016378:	683b      	ldr	r3, [r7, #0]
 801637a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8016382:	683b      	ldr	r3, [r7, #0]
 8016384:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8016390:	683b      	ldr	r3, [r7, #0]
 8016392:	2200      	movs	r2, #0
 8016394:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8016396:	683b      	ldr	r3, [r7, #0]
 8016398:	2240      	movs	r2, #64	@ 0x40
 801639a:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d10d      	bne.n	80163c0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d108      	bne.n	80163c0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80163ae:	683b      	ldr	r3, [r7, #0]
 80163b0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d103      	bne.n	80163c0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	2200      	movs	r2, #0
 80163bc:	741a      	strb	r2, [r3, #16]
 80163be:	e002      	b.n	80163c6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	2201      	movs	r2, #1
 80163c4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80163c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d114      	bne.n	80163f8 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80163ce:	683b      	ldr	r3, [r7, #0]
 80163d0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80163d2:	2b01      	cmp	r3, #1
 80163d4:	d110      	bne.n	80163f8 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	6818      	ldr	r0, [r3, #0]
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80163e6:	683b      	ldr	r3, [r7, #0]
 80163e8:	7d1b      	ldrb	r3, [r3, #20]
 80163ea:	f000 ff95 	bl	8017318 <VL53L1_calc_range_ignore_threshold>
 80163ee:	4603      	mov	r3, r0
 80163f0:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	82da      	strh	r2, [r3, #22]
 80163f6:	e002      	b.n	80163fe <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	2200      	movs	r2, #0
 80163fc:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 80163fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016402:	4618      	mov	r0, r3
 8016404:	3710      	adds	r7, #16
 8016406:	46bd      	mov	sp, r7
 8016408:	bd80      	pop	{r7, pc}

0801640a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 801640a:	b480      	push	{r7}
 801640c:	b085      	sub	sp, #20
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016412:	2300      	movs	r3, #0
 8016414:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 801641c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016424:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 801642c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8016434:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2208      	movs	r2, #8
 801643a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	2228      	movs	r2, #40	@ 0x28
 8016440:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	2209      	movs	r2, #9
 8016446:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8016448:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801644c:	4618      	mov	r0, r3
 801644e:	3714      	adds	r7, #20
 8016450:	46bd      	mov	sp, r7
 8016452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016456:	4770      	bx	lr

08016458 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8016458:	b480      	push	{r7}
 801645a:	b085      	sub	sp, #20
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016460:	2300      	movs	r3, #0
 8016462:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f248 0203 	movw	r2, #32771	@ 0x8003
 801646a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f248 0201 	movw	r2, #32769	@ 0x8001
 8016472:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f248 0241 	movw	r2, #32833	@ 0x8041
 801647a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	220e      	movs	r2, #14
 8016480:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	220a      	movs	r2, #10
 8016486:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2206      	movs	r2, #6
 801648c:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	220e      	movs	r2, #14
 8016492:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	220a      	movs	r2, #10
 8016498:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	2206      	movs	r2, #6
 801649e:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	2202      	movs	r2, #2
 80164a4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	2221      	movs	r2, #33	@ 0x21
 80164aa:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2200      	movs	r2, #0
 80164b0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	2200      	movs	r2, #0
 80164b6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	223c      	movs	r2, #60	@ 0x3c
 80164bc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	223c      	movs	r2, #60	@ 0x3c
 80164c2:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80164ca:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	2280      	movs	r2, #128	@ 0x80
 80164d0:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	2280      	movs	r2, #128	@ 0x80
 80164d6:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	22c0      	movs	r2, #192	@ 0xc0
 80164dc:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	2208      	movs	r2, #8
 80164e2:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	2210      	movs	r2, #16
 80164e8:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	2201      	movs	r2, #1
 80164ee:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 80164f2:	687b      	ldr	r3, [r7, #4]
 80164f4:	2202      	movs	r2, #2
 80164f6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2201      	movs	r2, #1
 80164fe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	2202      	movs	r2, #2
 8016506:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	2200      	movs	r2, #0
 801650e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8016518:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8016520:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	f248 0230 	movw	r2, #32816	@ 0x8030
 8016528:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016530:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8016538:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8016540:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8016548:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8016550:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	2201      	movs	r2, #1
 8016556:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801655e:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8016560:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016564:	4618      	mov	r0, r3
 8016566:	3714      	adds	r7, #20
 8016568:	46bd      	mov	sp, r7
 801656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656e:	4770      	bx	lr

08016570 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016570:	b480      	push	{r7}
 8016572:	b087      	sub	sp, #28
 8016574:	af00      	add	r7, sp, #0
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	60b9      	str	r1, [r7, #8]
 801657a:	607a      	str	r2, [r7, #4]
 801657c:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801657e:	2300      	movs	r3, #0
 8016580:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8016588:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 801658a:	68fb      	ldr	r3, [r7, #12]
 801658c:	2200      	movs	r2, #0
 801658e:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	2200      	movs	r2, #0
 8016594:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	2200      	movs	r2, #0
 801659a:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	2200      	movs	r2, #0
 80165a0:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2200      	movs	r2, #0
 80165a6:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80165a8:	68fb      	ldr	r3, [r7, #12]
 80165aa:	2200      	movs	r2, #0
 80165ac:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	2200      	movs	r2, #0
 80165b2:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	2200      	movs	r2, #0
 80165b8:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	2200      	movs	r2, #0
 80165be:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 80165c0:	68fb      	ldr	r3, [r7, #12]
 80165c2:	2200      	movs	r2, #0
 80165c4:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	2211      	movs	r2, #17
 80165ca:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	2202      	movs	r2, #2
 80165d0:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	2200      	movs	r2, #0
 80165d6:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	2202      	movs	r2, #2
 80165dc:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 80165de:	68fb      	ldr	r3, [r7, #12]
 80165e0:	2208      	movs	r2, #8
 80165e2:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	2200      	movs	r2, #0
 80165e8:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 80165ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165ec:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 80165f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165f4:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80165fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165fc:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	2201      	movs	r2, #1
 8016608:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	2200      	movs	r2, #0
 801660e:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	2200      	movs	r2, #0
 8016614:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	2200      	movs	r2, #0
 801661a:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	22ff      	movs	r2, #255	@ 0xff
 8016620:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8016622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016624:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 801662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801662c:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	2200      	movs	r2, #0
 8016636:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	2200      	movs	r2, #0
 801663c:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 801663e:	68fb      	ldr	r3, [r7, #12]
 8016640:	2200      	movs	r2, #0
 8016642:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8016644:	68bb      	ldr	r3, [r7, #8]
 8016646:	2200      	movs	r2, #0
 8016648:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 801664a:	68bb      	ldr	r3, [r7, #8]
 801664c:	2200      	movs	r2, #0
 801664e:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	2220      	movs	r2, #32
 8016654:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	220b      	movs	r2, #11
 801665a:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 801665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801665e:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	2202      	movs	r2, #2
 8016668:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	220d      	movs	r2, #13
 801666e:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8016670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016672:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8016674:	68bb      	ldr	r3, [r7, #8]
 8016676:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8016678:	68bb      	ldr	r3, [r7, #8]
 801667a:	2200      	movs	r2, #0
 801667c:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 801667e:	68bb      	ldr	r3, [r7, #8]
 8016680:	2201      	movs	r2, #1
 8016682:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8016684:	68bb      	ldr	r3, [r7, #8]
 8016686:	2200      	movs	r2, #0
 8016688:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 801668a:	68bb      	ldr	r3, [r7, #8]
 801668c:	2200      	movs	r2, #0
 801668e:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8016690:	68bb      	ldr	r3, [r7, #8]
 8016692:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8016696:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8016698:	68bb      	ldr	r3, [r7, #8]
 801669a:	2200      	movs	r2, #0
 801669c:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	2238      	movs	r2, #56	@ 0x38
 80166a2:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	22ff      	movs	r2, #255	@ 0xff
 80166a8:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	2201      	movs	r2, #1
 80166ae:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	2200      	movs	r2, #0
 80166b4:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	221a      	movs	r2, #26
 80166ba:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2200      	movs	r2, #0
 80166c0:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	2220      	movs	r2, #32
 80166c6:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	2201      	movs	r2, #1
 80166cc:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	22cc      	movs	r2, #204	@ 0xcc
 80166d2:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	220b      	movs	r2, #11
 80166d8:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	2201      	movs	r2, #1
 80166de:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	22f5      	movs	r2, #245	@ 0xf5
 80166e4:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	2209      	movs	r2, #9
 80166ea:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 80166ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166ee:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 80166f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166f6:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2208      	movs	r2, #8
 8016700:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	2278      	movs	r2, #120	@ 0x78
 8016706:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	2200      	movs	r2, #0
 801670c:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	2200      	movs	r2, #0
 8016712:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	2201      	movs	r2, #1
 8016718:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	2200      	movs	r2, #0
 801671e:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	2200      	movs	r2, #0
 8016724:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	2200      	movs	r2, #0
 801672a:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 801672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801672e:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	220b      	movs	r2, #11
 801673a:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	2209      	movs	r2, #9
 8016740:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8016742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016744:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 801674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801674c:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 801674e:	683b      	ldr	r3, [r7, #0]
 8016750:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	2201      	movs	r2, #1
 8016756:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8016758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675a:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8016762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016764:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 801676c:	683b      	ldr	r3, [r7, #0]
 801676e:	22c7      	movs	r2, #199	@ 0xc7
 8016770:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	22ff      	movs	r2, #255	@ 0xff
 8016776:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	22db      	movs	r2, #219	@ 0xdb
 801677c:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 801677e:	683b      	ldr	r3, [r7, #0]
 8016780:	2202      	movs	r2, #2
 8016782:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8016784:	6a3b      	ldr	r3, [r7, #32]
 8016786:	2200      	movs	r2, #0
 8016788:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 801678a:	6a3b      	ldr	r3, [r7, #32]
 801678c:	2201      	movs	r2, #1
 801678e:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8016790:	6a3b      	ldr	r3, [r7, #32]
 8016792:	2201      	movs	r2, #1
 8016794:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8016796:	6a3b      	ldr	r3, [r7, #32]
 8016798:	2221      	movs	r2, #33	@ 0x21
 801679a:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 801679c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167a0:	4618      	mov	r0, r3
 80167a2:	371c      	adds	r7, #28
 80167a4:	46bd      	mov	sp, r7
 80167a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167aa:	4770      	bx	lr

080167ac <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b088      	sub	sp, #32
 80167b0:	af02      	add	r7, sp, #8
 80167b2:	60f8      	str	r0, [r7, #12]
 80167b4:	60b9      	str	r1, [r7, #8]
 80167b6:	607a      	str	r2, [r7, #4]
 80167b8:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80167ba:	2300      	movs	r3, #0
 80167bc:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80167be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167c0:	9301      	str	r3, [sp, #4]
 80167c2:	6a3b      	ldr	r3, [r7, #32]
 80167c4:	9300      	str	r3, [sp, #0]
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	687a      	ldr	r2, [r7, #4]
 80167ca:	68b9      	ldr	r1, [r7, #8]
 80167cc:	68f8      	ldr	r0, [r7, #12]
 80167ce:	f7ff fecf 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 80167d2:	4603      	mov	r3, r0
 80167d4:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80167d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d121      	bne.n	8016822 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2207      	movs	r2, #7
 80167e2:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	2205      	movs	r2, #5
 80167e8:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 80167ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167ec:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 80167f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167f4:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	2208      	movs	r2, #8
 80167fe:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2238      	movs	r2, #56	@ 0x38
 8016804:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8016806:	683b      	ldr	r3, [r7, #0]
 8016808:	2207      	movs	r2, #7
 801680a:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 801680c:	683b      	ldr	r3, [r7, #0]
 801680e:	2205      	movs	r2, #5
 8016810:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8016812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016814:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 801681a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801681c:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 801681e:	683b      	ldr	r3, [r7, #0]
 8016820:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8016822:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016826:	4618      	mov	r0, r3
 8016828:	3718      	adds	r7, #24
 801682a:	46bd      	mov	sp, r7
 801682c:	bd80      	pop	{r7, pc}

0801682e <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801682e:	b580      	push	{r7, lr}
 8016830:	b088      	sub	sp, #32
 8016832:	af02      	add	r7, sp, #8
 8016834:	60f8      	str	r0, [r7, #12]
 8016836:	60b9      	str	r1, [r7, #8]
 8016838:	607a      	str	r2, [r7, #4]
 801683a:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801683c:	2300      	movs	r3, #0
 801683e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8016840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016842:	9301      	str	r3, [sp, #4]
 8016844:	6a3b      	ldr	r3, [r7, #32]
 8016846:	9300      	str	r3, [sp, #0]
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	687a      	ldr	r2, [r7, #4]
 801684c:	68b9      	ldr	r1, [r7, #8]
 801684e:	68f8      	ldr	r0, [r7, #12]
 8016850:	f7ff fe8e 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 8016854:	4603      	mov	r3, r0
 8016856:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016858:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d121      	bne.n	80168a4 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	220f      	movs	r2, #15
 8016864:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	220d      	movs	r2, #13
 801686a:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 801686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801686e:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8016874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016876:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	2208      	movs	r2, #8
 8016880:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	22b8      	movs	r2, #184	@ 0xb8
 8016886:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8016888:	683b      	ldr	r3, [r7, #0]
 801688a:	220f      	movs	r2, #15
 801688c:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 801688e:	683b      	ldr	r3, [r7, #0]
 8016890:	220d      	movs	r2, #13
 8016892:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 8016894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016896:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 801689c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801689e:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80168a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168a8:	4618      	mov	r0, r3
 80168aa:	3718      	adds	r7, #24
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b088      	sub	sp, #32
 80168b4:	af02      	add	r7, sp, #8
 80168b6:	60f8      	str	r0, [r7, #12]
 80168b8:	60b9      	str	r1, [r7, #8]
 80168ba:	607a      	str	r2, [r7, #4]
 80168bc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80168be:	2300      	movs	r3, #0
 80168c0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80168c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168c4:	9301      	str	r3, [sp, #4]
 80168c6:	6a3b      	ldr	r3, [r7, #32]
 80168c8:	9300      	str	r3, [sp, #0]
 80168ca:	683b      	ldr	r3, [r7, #0]
 80168cc:	687a      	ldr	r2, [r7, #4]
 80168ce:	68b9      	ldr	r1, [r7, #8]
 80168d0:	68f8      	ldr	r0, [r7, #12]
 80168d2:	f7ff fe4d 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 80168d6:	4603      	mov	r3, r0
 80168d8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80168da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d105      	bne.n	80168ee <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80168e2:	68bb      	ldr	r3, [r7, #8]
 80168e4:	2202      	movs	r2, #2
 80168e6:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80168e8:	683b      	ldr	r3, [r7, #0]
 80168ea:	223b      	movs	r2, #59	@ 0x3b
 80168ec:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80168ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80168f2:	4618      	mov	r0, r3
 80168f4:	3718      	adds	r7, #24
 80168f6:	46bd      	mov	sp, r7
 80168f8:	bd80      	pop	{r7, pc}

080168fa <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80168fa:	b580      	push	{r7, lr}
 80168fc:	b088      	sub	sp, #32
 80168fe:	af02      	add	r7, sp, #8
 8016900:	60f8      	str	r0, [r7, #12]
 8016902:	60b9      	str	r1, [r7, #8]
 8016904:	607a      	str	r2, [r7, #4]
 8016906:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016908:	2300      	movs	r3, #0
 801690a:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801690e:	9301      	str	r3, [sp, #4]
 8016910:	6a3b      	ldr	r3, [r7, #32]
 8016912:	9300      	str	r3, [sp, #0]
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	687a      	ldr	r2, [r7, #4]
 8016918:	68b9      	ldr	r1, [r7, #8]
 801691a:	68f8      	ldr	r0, [r7, #12]
 801691c:	f7ff fe28 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 8016920:	4603      	mov	r3, r0
 8016922:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016924:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d105      	bne.n	8016938 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	2202      	movs	r2, #2
 8016930:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	225b      	movs	r2, #91	@ 0x5b
 8016936:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8016938:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801693c:	4618      	mov	r0, r3
 801693e:	3718      	adds	r7, #24
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}

08016944 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016944:	b580      	push	{r7, lr}
 8016946:	b088      	sub	sp, #32
 8016948:	af02      	add	r7, sp, #8
 801694a:	60f8      	str	r0, [r7, #12]
 801694c:	60b9      	str	r1, [r7, #8]
 801694e:	607a      	str	r2, [r7, #4]
 8016950:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016952:	2300      	movs	r3, #0
 8016954:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8016956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016958:	9301      	str	r3, [sp, #4]
 801695a:	6a3b      	ldr	r3, [r7, #32]
 801695c:	9300      	str	r3, [sp, #0]
 801695e:	683b      	ldr	r3, [r7, #0]
 8016960:	687a      	ldr	r2, [r7, #4]
 8016962:	68b9      	ldr	r1, [r7, #8]
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f7ff fe03 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 801696a:	4603      	mov	r3, r0
 801696c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801696e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d11a      	bne.n	80169ac <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	2200      	movs	r2, #0
 801697a:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2200      	movs	r2, #0
 8016980:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	22b1      	movs	r2, #177	@ 0xb1
 8016986:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	2200      	movs	r2, #0
 801698c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	22d4      	movs	r2, #212	@ 0xd4
 8016992:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801699a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801699e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80169a6:	6a3b      	ldr	r3, [r7, #32]
 80169a8:	2240      	movs	r2, #64	@ 0x40
 80169aa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80169ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80169b0:	4618      	mov	r0, r3
 80169b2:	3718      	adds	r7, #24
 80169b4:	46bd      	mov	sp, r7
 80169b6:	bd80      	pop	{r7, pc}

080169b8 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80169b8:	b580      	push	{r7, lr}
 80169ba:	b088      	sub	sp, #32
 80169bc:	af02      	add	r7, sp, #8
 80169be:	60f8      	str	r0, [r7, #12]
 80169c0:	60b9      	str	r1, [r7, #8]
 80169c2:	607a      	str	r2, [r7, #4]
 80169c4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80169c6:	2300      	movs	r3, #0
 80169c8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80169ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169cc:	9301      	str	r3, [sp, #4]
 80169ce:	6a3b      	ldr	r3, [r7, #32]
 80169d0:	9300      	str	r3, [sp, #0]
 80169d2:	683b      	ldr	r3, [r7, #0]
 80169d4:	687a      	ldr	r2, [r7, #4]
 80169d6:	68b9      	ldr	r1, [r7, #8]
 80169d8:	68f8      	ldr	r0, [r7, #12]
 80169da:	f7ff fee7 	bl	80167ac <VL53L1_preset_mode_standard_ranging_short_range>
 80169de:	4603      	mov	r3, r0
 80169e0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80169e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d11a      	bne.n	8016a20 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80169ea:	683b      	ldr	r3, [r7, #0]
 80169ec:	2200      	movs	r2, #0
 80169ee:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	2201      	movs	r2, #1
 80169f4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	2284      	movs	r2, #132	@ 0x84
 80169fa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2201      	movs	r2, #1
 8016a00:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	22b1      	movs	r2, #177	@ 0xb1
 8016a06:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8016a0e:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8016a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a12:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8016a1a:	6a3b      	ldr	r3, [r7, #32]
 8016a1c:	2240      	movs	r2, #64	@ 0x40
 8016a1e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8016a20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3718      	adds	r7, #24
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b088      	sub	sp, #32
 8016a30:	af02      	add	r7, sp, #8
 8016a32:	60f8      	str	r0, [r7, #12]
 8016a34:	60b9      	str	r1, [r7, #8]
 8016a36:	607a      	str	r2, [r7, #4]
 8016a38:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8016a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a40:	9301      	str	r3, [sp, #4]
 8016a42:	6a3b      	ldr	r3, [r7, #32]
 8016a44:	9300      	str	r3, [sp, #0]
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	687a      	ldr	r2, [r7, #4]
 8016a4a:	68b9      	ldr	r1, [r7, #8]
 8016a4c:	68f8      	ldr	r0, [r7, #12]
 8016a4e:	f7ff feee 	bl	801682e <VL53L1_preset_mode_standard_ranging_long_range>
 8016a52:	4603      	mov	r3, r0
 8016a54:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016a56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d11a      	bne.n	8016a94 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8016a5e:	683b      	ldr	r3, [r7, #0]
 8016a60:	2200      	movs	r2, #0
 8016a62:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2200      	movs	r2, #0
 8016a68:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	2297      	movs	r2, #151	@ 0x97
 8016a6e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	2200      	movs	r2, #0
 8016a74:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	22b1      	movs	r2, #177	@ 0xb1
 8016a7a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8016a82:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8016a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a86:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8016a8a:	683b      	ldr	r3, [r7, #0]
 8016a8c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8016a8e:	6a3b      	ldr	r3, [r7, #32]
 8016a90:	2240      	movs	r2, #64	@ 0x40
 8016a92:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8016a94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016a98:	4618      	mov	r0, r3
 8016a9a:	3718      	adds	r7, #24
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}

08016aa0 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8016aa0:	b580      	push	{r7, lr}
 8016aa2:	b088      	sub	sp, #32
 8016aa4:	af02      	add	r7, sp, #8
 8016aa6:	60f8      	str	r0, [r7, #12]
 8016aa8:	60b9      	str	r1, [r7, #8]
 8016aaa:	607a      	str	r2, [r7, #4]
 8016aac:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016aae:	2300      	movs	r3, #0
 8016ab0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8016ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab4:	9301      	str	r3, [sp, #4]
 8016ab6:	6a3b      	ldr	r3, [r7, #32]
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	683b      	ldr	r3, [r7, #0]
 8016abc:	687a      	ldr	r2, [r7, #4]
 8016abe:	68b9      	ldr	r1, [r7, #8]
 8016ac0:	68f8      	ldr	r0, [r7, #12]
 8016ac2:	f7ff ff3f 	bl	8016944 <VL53L1_preset_mode_timed_ranging>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8016aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d106      	bne.n	8016ae0 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8016ad2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ad4:	6839      	ldr	r1, [r7, #0]
 8016ad6:	68b8      	ldr	r0, [r7, #8]
 8016ad8:	f000 fe84 	bl	80177e4 <VL53L1_config_low_power_auto_mode>
 8016adc:	4603      	mov	r3, r0
 8016ade:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3718      	adds	r7, #24
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b088      	sub	sp, #32
 8016af0:	af02      	add	r7, sp, #8
 8016af2:	60f8      	str	r0, [r7, #12]
 8016af4:	60b9      	str	r1, [r7, #8]
 8016af6:	607a      	str	r2, [r7, #4]
 8016af8:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016afa:	2300      	movs	r3, #0
 8016afc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8016afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b00:	9301      	str	r3, [sp, #4]
 8016b02:	6a3b      	ldr	r3, [r7, #32]
 8016b04:	9300      	str	r3, [sp, #0]
 8016b06:	683b      	ldr	r3, [r7, #0]
 8016b08:	687a      	ldr	r2, [r7, #4]
 8016b0a:	68b9      	ldr	r1, [r7, #8]
 8016b0c:	68f8      	ldr	r0, [r7, #12]
 8016b0e:	f7ff ff53 	bl	80169b8 <VL53L1_preset_mode_timed_ranging_short_range>
 8016b12:	4603      	mov	r3, r0
 8016b14:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8016b16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d106      	bne.n	8016b2c <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8016b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b20:	6839      	ldr	r1, [r7, #0]
 8016b22:	68b8      	ldr	r0, [r7, #8]
 8016b24:	f000 fe5e 	bl	80177e4 <VL53L1_config_low_power_auto_mode>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b30:	4618      	mov	r0, r3
 8016b32:	3718      	adds	r7, #24
 8016b34:	46bd      	mov	sp, r7
 8016b36:	bd80      	pop	{r7, pc}

08016b38 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b088      	sub	sp, #32
 8016b3c:	af02      	add	r7, sp, #8
 8016b3e:	60f8      	str	r0, [r7, #12]
 8016b40:	60b9      	str	r1, [r7, #8]
 8016b42:	607a      	str	r2, [r7, #4]
 8016b44:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016b46:	2300      	movs	r3, #0
 8016b48:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8016b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b4c:	9301      	str	r3, [sp, #4]
 8016b4e:	6a3b      	ldr	r3, [r7, #32]
 8016b50:	9300      	str	r3, [sp, #0]
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	68b9      	ldr	r1, [r7, #8]
 8016b58:	68f8      	ldr	r0, [r7, #12]
 8016b5a:	f7ff ff67 	bl	8016a2c <VL53L1_preset_mode_timed_ranging_long_range>
 8016b5e:	4603      	mov	r3, r0
 8016b60:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8016b62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d106      	bne.n	8016b78 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8016b6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b6c:	6839      	ldr	r1, [r7, #0]
 8016b6e:	68b8      	ldr	r0, [r7, #8]
 8016b70:	f000 fe38 	bl	80177e4 <VL53L1_config_low_power_auto_mode>
 8016b74:	4603      	mov	r3, r0
 8016b76:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016b78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	3718      	adds	r7, #24
 8016b80:	46bd      	mov	sp, r7
 8016b82:	bd80      	pop	{r7, pc}

08016b84 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b088      	sub	sp, #32
 8016b88:	af02      	add	r7, sp, #8
 8016b8a:	60f8      	str	r0, [r7, #12]
 8016b8c:	60b9      	str	r1, [r7, #8]
 8016b8e:	607a      	str	r2, [r7, #4]
 8016b90:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016b92:	2300      	movs	r3, #0
 8016b94:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8016b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b98:	9301      	str	r3, [sp, #4]
 8016b9a:	6a3b      	ldr	r3, [r7, #32]
 8016b9c:	9300      	str	r3, [sp, #0]
 8016b9e:	683b      	ldr	r3, [r7, #0]
 8016ba0:	687a      	ldr	r2, [r7, #4]
 8016ba2:	68b9      	ldr	r1, [r7, #8]
 8016ba4:	68f8      	ldr	r0, [r7, #12]
 8016ba6:	f7ff fce3 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 8016baa:	4603      	mov	r3, r0
 8016bac:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d116      	bne.n	8016be4 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	22b1      	movs	r2, #177	@ 0xb1
 8016bc6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	2200      	movs	r2, #0
 8016bcc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	22d4      	movs	r2, #212	@ 0xd4
 8016bd2:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8016bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bd6:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8016bde:	6a3b      	ldr	r3, [r7, #32]
 8016be0:	2210      	movs	r2, #16
 8016be2:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8016be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3718      	adds	r7, #24
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b088      	sub	sp, #32
 8016bf4:	af02      	add	r7, sp, #8
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	607a      	str	r2, [r7, #4]
 8016bfc:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016bfe:	2300      	movs	r3, #0
 8016c00:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8016c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c04:	9301      	str	r3, [sp, #4]
 8016c06:	6a3b      	ldr	r3, [r7, #32]
 8016c08:	9300      	str	r3, [sp, #0]
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	687a      	ldr	r2, [r7, #4]
 8016c0e:	68b9      	ldr	r1, [r7, #8]
 8016c10:	68f8      	ldr	r0, [r7, #12]
 8016c12:	f7ff fcad 	bl	8016570 <VL53L1_preset_mode_standard_ranging>
 8016c16:	4603      	mov	r3, r0
 8016c18:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016c1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d102      	bne.n	8016c28 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8016c22:	6a3b      	ldr	r3, [r7, #32]
 8016c24:	2201      	movs	r2, #1
 8016c26:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8016c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3718      	adds	r7, #24
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8016c34:	b480      	push	{r7}
 8016c36:	b085      	sub	sp, #20
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	2201      	movs	r2, #1
 8016c44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	2202      	movs	r2, #2
 8016c4c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	2209      	movs	r2, #9
 8016c54:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	224b      	movs	r2, #75	@ 0x4b
 8016c5c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8016c5e:	bf00      	nop
 8016c60:	3714      	adds	r7, #20
 8016c62:	46bd      	mov	sp, r7
 8016c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c68:	4770      	bx	lr

08016c6a <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8016c6a:	b480      	push	{r7}
 8016c6c:	b085      	sub	sp, #20
 8016c6e:	af00      	add	r7, sp, #0
 8016c70:	6078      	str	r0, [r7, #4]
 8016c72:	460b      	mov	r3, r1
 8016c74:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	332c      	adds	r3, #44	@ 0x2c
 8016c7e:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8016c80:	68bb      	ldr	r3, [r7, #8]
 8016c82:	78fa      	ldrb	r2, [r7, #3]
 8016c84:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	2200      	movs	r2, #0
 8016c8a:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	2202      	movs	r2, #2
 8016c90:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8016c92:	68bb      	ldr	r3, [r7, #8]
 8016c94:	2200      	movs	r2, #0
 8016c96:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8016c98:	68bb      	ldr	r3, [r7, #8]
 8016c9a:	78fa      	ldrb	r2, [r7, #3]
 8016c9c:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8016c9e:	68bb      	ldr	r3, [r7, #8]
 8016ca0:	2200      	movs	r2, #0
 8016ca2:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	2202      	movs	r2, #2
 8016ca8:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8016caa:	68bb      	ldr	r3, [r7, #8]
 8016cac:	2200      	movs	r2, #0
 8016cae:	71da      	strb	r2, [r3, #7]

}
 8016cb0:	bf00      	nop
 8016cb2:	3714      	adds	r7, #20
 8016cb4:	46bd      	mov	sp, r7
 8016cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cba:	4770      	bx	lr

08016cbc <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8016cbc:	b480      	push	{r7}
 8016cbe:	b087      	sub	sp, #28
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8016cc4:	2300      	movs	r3, #0
 8016cc6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8016ccc:	693b      	ldr	r3, [r7, #16]
 8016cce:	332c      	adds	r3, #44	@ 0x2c
 8016cd0:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8016cd2:	693b      	ldr	r3, [r7, #16]
 8016cd4:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8016cd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d10c      	bne.n	8016cfa <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8016ce0:	68fb      	ldr	r3, [r7, #12]
 8016ce2:	2203      	movs	r2, #3
 8016ce4:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	2200      	movs	r2, #0
 8016cea:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016cec:	68fb      	ldr	r3, [r7, #12]
 8016cee:	2202      	movs	r2, #2
 8016cf0:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	71da      	strb	r2, [r3, #7]
 8016cf8:	e060      	b.n	8016dbc <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8016cfa:	68fb      	ldr	r3, [r7, #12]
 8016cfc:	795b      	ldrb	r3, [r3, #5]
 8016cfe:	2bff      	cmp	r3, #255	@ 0xff
 8016d00:	d103      	bne.n	8016d0a <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	2280      	movs	r2, #128	@ 0x80
 8016d06:	715a      	strb	r2, [r3, #5]
 8016d08:	e005      	b.n	8016d16 <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	795b      	ldrb	r3, [r3, #5]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	b2da      	uxtb	r2, r3
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	799b      	ldrb	r3, [r3, #6]
 8016d1a:	f083 0302 	eor.w	r3, r3, #2
 8016d1e:	b2da      	uxtb	r2, r3
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	791b      	ldrb	r3, [r3, #4]
 8016d28:	3b03      	subs	r3, #3
 8016d2a:	2b05      	cmp	r3, #5
 8016d2c:	d839      	bhi.n	8016da2 <VL53L1_update_ll_driver_rd_state+0xe6>
 8016d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8016d34 <VL53L1_update_ll_driver_rd_state+0x78>)
 8016d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d34:	08016d4d 	.word	0x08016d4d
 8016d38:	08016da3 	.word	0x08016da3
 8016d3c:	08016da3 	.word	0x08016da3
 8016d40:	08016d77 	.word	0x08016d77
 8016d44:	08016d85 	.word	0x08016d85
 8016d48:	08016d8d 	.word	0x08016d8d

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8016d4c:	693b      	ldr	r3, [r7, #16]
 8016d4e:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8016d52:	f003 0302 	and.w	r3, r3, #2
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	dd03      	ble.n	8016d62 <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	2206      	movs	r2, #6
 8016d5e:	711a      	strb	r2, [r3, #4]
 8016d60:	e002      	b.n	8016d68 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8016d62:	68fb      	ldr	r3, [r7, #12]
 8016d64:	2208      	movs	r2, #8
 8016d66:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2200      	movs	r2, #0
 8016d6c:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	2200      	movs	r2, #0
 8016d72:	71da      	strb	r2, [r3, #7]

		break;
 8016d74:	e022      	b.n	8016dbc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	2200      	movs	r2, #0
 8016d7a:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	2208      	movs	r2, #8
 8016d80:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8016d82:	e01b      	b.n	8016dbc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	2208      	movs	r2, #8
 8016d88:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8016d8a:	e017      	b.n	8016dbc <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	79db      	ldrb	r3, [r3, #7]
 8016d90:	f083 0301 	eor.w	r3, r3, #1
 8016d94:	b2da      	uxtb	r2, r3
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	2208      	movs	r2, #8
 8016d9e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8016da0:	e00c      	b.n	8016dbc <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	2203      	movs	r2, #3
 8016da6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	2200      	movs	r2, #0
 8016dac:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	2202      	movs	r2, #2
 8016db2:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	2200      	movs	r2, #0
 8016db8:	71da      	strb	r2, [r3, #7]

		break;
 8016dba:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8016dbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	371c      	adds	r7, #28
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dca:	4770      	bx	lr

08016dcc <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8016dcc:	b480      	push	{r7}
 8016dce:	b089      	sub	sp, #36	@ 0x24
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8016dd4:	2300      	movs	r3, #0
 8016dd6:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8016ddc:	69bb      	ldr	r3, [r7, #24]
 8016dde:	332c      	adds	r3, #44	@ 0x2c
 8016de0:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8016de2:	69bb      	ldr	r3, [r7, #24]
 8016de4:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8016de8:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8016dea:	2300      	movs	r3, #0
 8016dec:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8016dee:	2300      	movs	r3, #0
 8016df0:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8016df6:	693b      	ldr	r3, [r7, #16]
 8016df8:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8016dfa:	f003 031f 	and.w	r3, r3, #31
 8016dfe:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8016e00:	693b      	ldr	r3, [r7, #16]
 8016e02:	78db      	ldrb	r3, [r3, #3]
 8016e04:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8016e06:	693b      	ldr	r3, [r7, #16]
 8016e08:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8016e0a:	111b      	asrs	r3, r3, #4
 8016e0c:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8016e0e:	f003 0302 	and.w	r3, r3, #2
 8016e12:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8016e14:	69bb      	ldr	r3, [r7, #24]
 8016e16:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8016e1a:	f003 0320 	and.w	r3, r3, #32
 8016e1e:	2b00      	cmp	r3, #0
 8016e20:	d017      	beq.n	8016e52 <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8016e22:	697b      	ldr	r3, [r7, #20]
 8016e24:	791b      	ldrb	r3, [r3, #4]
 8016e26:	2b06      	cmp	r3, #6
 8016e28:	d105      	bne.n	8016e36 <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8016e2a:	7bfb      	ldrb	r3, [r7, #15]
 8016e2c:	2b12      	cmp	r3, #18
 8016e2e:	d010      	beq.n	8016e52 <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8016e30:	23ef      	movs	r3, #239	@ 0xef
 8016e32:	77fb      	strb	r3, [r7, #31]
 8016e34:	e00d      	b.n	8016e52 <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8016e36:	697b      	ldr	r3, [r7, #20]
 8016e38:	795b      	ldrb	r3, [r3, #5]
 8016e3a:	7bba      	ldrb	r2, [r7, #14]
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	d001      	beq.n	8016e44 <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8016e40:	23ee      	movs	r3, #238	@ 0xee
 8016e42:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	799b      	ldrb	r3, [r3, #6]
 8016e48:	7b7a      	ldrb	r2, [r7, #13]
 8016e4a:	429a      	cmp	r2, r3
 8016e4c:	d001      	beq.n	8016e52 <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8016e4e:	23ed      	movs	r3, #237	@ 0xed
 8016e50:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8016e52:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3724      	adds	r7, #36	@ 0x24
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e60:	4770      	bx	lr

08016e62 <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8016e62:	b480      	push	{r7}
 8016e64:	b087      	sub	sp, #28
 8016e66:	af00      	add	r7, sp, #0
 8016e68:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8016e72:	693b      	ldr	r3, [r7, #16]
 8016e74:	332c      	adds	r3, #44	@ 0x2c
 8016e76:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8016e78:	693b      	ldr	r3, [r7, #16]
 8016e7a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8016e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d10c      	bne.n	8016ea0 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	2203      	movs	r2, #3
 8016e8a:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	2202      	movs	r2, #2
 8016e96:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	2200      	movs	r2, #0
 8016e9c:	70da      	strb	r2, [r3, #3]
 8016e9e:	e03e      	b.n	8016f1e <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	785b      	ldrb	r3, [r3, #1]
 8016ea4:	2bff      	cmp	r3, #255	@ 0xff
 8016ea6:	d103      	bne.n	8016eb0 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8016ea8:	68fb      	ldr	r3, [r7, #12]
 8016eaa:	2280      	movs	r2, #128	@ 0x80
 8016eac:	705a      	strb	r2, [r3, #1]
 8016eae:	e005      	b.n	8016ebc <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8016eb0:	68fb      	ldr	r3, [r7, #12]
 8016eb2:	785b      	ldrb	r3, [r3, #1]
 8016eb4:	3301      	adds	r3, #1
 8016eb6:	b2da      	uxtb	r2, r3
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	789b      	ldrb	r3, [r3, #2]
 8016ec0:	f083 0302 	eor.w	r3, r3, #2
 8016ec4:	b2da      	uxtb	r2, r3
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	2b03      	cmp	r3, #3
 8016ed0:	d002      	beq.n	8016ed8 <VL53L1_update_ll_driver_cfg_state+0x76>
 8016ed2:	2b04      	cmp	r3, #4
 8016ed4:	d00e      	beq.n	8016ef4 <VL53L1_update_ll_driver_cfg_state+0x92>
 8016ed6:	e015      	b.n	8016f04 <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8016ed8:	68fb      	ldr	r3, [r7, #12]
 8016eda:	78db      	ldrb	r3, [r3, #3]
 8016edc:	f083 0301 	eor.w	r3, r3, #1
 8016ee0:	b2da      	uxtb	r2, r3
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	2201      	movs	r2, #1
 8016eea:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8016eec:	68fb      	ldr	r3, [r7, #12]
 8016eee:	2204      	movs	r2, #4
 8016ef0:	701a      	strb	r2, [r3, #0]
		break;
 8016ef2:	e014      	b.n	8016f1e <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8016ef4:	68fb      	ldr	r3, [r7, #12]
 8016ef6:	78db      	ldrb	r3, [r3, #3]
 8016ef8:	f083 0301 	eor.w	r3, r3, #1
 8016efc:	b2da      	uxtb	r2, r3
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	70da      	strb	r2, [r3, #3]

		break;
 8016f02:	e00c      	b.n	8016f1e <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	2203      	movs	r2, #3
 8016f08:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	2200      	movs	r2, #0
 8016f0e:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	2202      	movs	r2, #2
 8016f14:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	2200      	movs	r2, #0
 8016f1a:	70da      	strb	r2, [r3, #3]

		break;
 8016f1c:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8016f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	371c      	adds	r7, #28
 8016f26:	46bd      	mov	sp, r7
 8016f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f2c:	4770      	bx	lr

08016f2e <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8016f2e:	b480      	push	{r7}
 8016f30:	b083      	sub	sp, #12
 8016f32:	af00      	add	r7, sp, #0
 8016f34:	6078      	str	r0, [r7, #4]
 8016f36:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	7c1a      	ldrb	r2, [r3, #16]
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8016f40:	683b      	ldr	r3, [r7, #0]
 8016f42:	3301      	adds	r3, #1
 8016f44:	687a      	ldr	r2, [r7, #4]
 8016f46:	7c52      	ldrb	r2, [r2, #17]
 8016f48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	3302      	adds	r3, #2
 8016f4e:	687a      	ldr	r2, [r7, #4]
 8016f50:	7c92      	ldrb	r2, [r2, #18]
 8016f52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8016f54:	683b      	ldr	r3, [r7, #0]
 8016f56:	3303      	adds	r3, #3
 8016f58:	687a      	ldr	r2, [r7, #4]
 8016f5a:	7cd2      	ldrb	r2, [r2, #19]
 8016f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8016f5e:	683b      	ldr	r3, [r7, #0]
 8016f60:	3304      	adds	r3, #4
 8016f62:	687a      	ldr	r2, [r7, #4]
 8016f64:	7d12      	ldrb	r2, [r2, #20]
 8016f66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	3305      	adds	r3, #5
 8016f6c:	687a      	ldr	r2, [r7, #4]
 8016f6e:	7d52      	ldrb	r2, [r2, #21]
 8016f70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	3306      	adds	r3, #6
 8016f76:	687a      	ldr	r2, [r7, #4]
 8016f78:	7d92      	ldrb	r2, [r2, #22]
 8016f7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8016f7c:	683b      	ldr	r3, [r7, #0]
 8016f7e:	3307      	adds	r3, #7
 8016f80:	687a      	ldr	r2, [r7, #4]
 8016f82:	7dd2      	ldrb	r2, [r2, #23]
 8016f84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	3308      	adds	r3, #8
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	7e12      	ldrb	r2, [r2, #24]
 8016f8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8016f90:	683b      	ldr	r3, [r7, #0]
 8016f92:	3309      	adds	r3, #9
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	7e52      	ldrb	r2, [r2, #25]
 8016f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8016f9a:	683b      	ldr	r3, [r7, #0]
 8016f9c:	330a      	adds	r3, #10
 8016f9e:	687a      	ldr	r2, [r7, #4]
 8016fa0:	7e92      	ldrb	r2, [r2, #26]
 8016fa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	330b      	adds	r3, #11
 8016fa8:	687a      	ldr	r2, [r7, #4]
 8016faa:	7ed2      	ldrb	r2, [r2, #27]
 8016fac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8016fae:	683b      	ldr	r3, [r7, #0]
 8016fb0:	330c      	adds	r3, #12
 8016fb2:	687a      	ldr	r2, [r7, #4]
 8016fb4:	7f12      	ldrb	r2, [r2, #28]
 8016fb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8016fb8:	683b      	ldr	r3, [r7, #0]
 8016fba:	330d      	adds	r3, #13
 8016fbc:	687a      	ldr	r2, [r7, #4]
 8016fbe:	7f52      	ldrb	r2, [r2, #29]
 8016fc0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8016fc2:	683b      	ldr	r3, [r7, #0]
 8016fc4:	330e      	adds	r3, #14
 8016fc6:	687a      	ldr	r2, [r7, #4]
 8016fc8:	7f92      	ldrb	r2, [r2, #30]
 8016fca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	330f      	adds	r3, #15
 8016fd0:	687a      	ldr	r2, [r7, #4]
 8016fd2:	7fd2      	ldrb	r2, [r2, #31]
 8016fd4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8016fd6:	683b      	ldr	r3, [r7, #0]
 8016fd8:	3310      	adds	r3, #16
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016fe0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	3311      	adds	r3, #17
 8016fe6:	687a      	ldr	r2, [r7, #4]
 8016fe8:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8016fec:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	3312      	adds	r3, #18
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8016ff8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8016ffa:	683b      	ldr	r3, [r7, #0]
 8016ffc:	3313      	adds	r3, #19
 8016ffe:	687a      	ldr	r2, [r7, #4]
 8017000:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8017004:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8017006:	683b      	ldr	r3, [r7, #0]
 8017008:	3314      	adds	r3, #20
 801700a:	687a      	ldr	r2, [r7, #4]
 801700c:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8017010:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	3315      	adds	r3, #21
 8017016:	687a      	ldr	r2, [r7, #4]
 8017018:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 801701c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 801701e:	683b      	ldr	r3, [r7, #0]
 8017020:	3316      	adds	r3, #22
 8017022:	687a      	ldr	r2, [r7, #4]
 8017024:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8017028:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 801702a:	683b      	ldr	r3, [r7, #0]
 801702c:	3317      	adds	r3, #23
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8017034:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	3318      	adds	r3, #24
 801703a:	687a      	ldr	r2, [r7, #4]
 801703c:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8017040:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8017042:	683b      	ldr	r3, [r7, #0]
 8017044:	3319      	adds	r3, #25
 8017046:	687a      	ldr	r2, [r7, #4]
 8017048:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 801704c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 801704e:	683b      	ldr	r3, [r7, #0]
 8017050:	331a      	adds	r3, #26
 8017052:	687a      	ldr	r2, [r7, #4]
 8017054:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8017058:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 801705a:	683b      	ldr	r3, [r7, #0]
 801705c:	331b      	adds	r3, #27
 801705e:	687a      	ldr	r2, [r7, #4]
 8017060:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8017064:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8017066:	683b      	ldr	r3, [r7, #0]
 8017068:	331c      	adds	r3, #28
 801706a:	687a      	ldr	r2, [r7, #4]
 801706c:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8017070:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	331d      	adds	r3, #29
 8017076:	687a      	ldr	r2, [r7, #4]
 8017078:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 801707c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	331e      	adds	r3, #30
 8017082:	687a      	ldr	r2, [r7, #4]
 8017084:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8017088:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	331f      	adds	r3, #31
 801708e:	687a      	ldr	r2, [r7, #4]
 8017090:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8017094:	701a      	strb	r2, [r3, #0]
}
 8017096:	bf00      	nop
 8017098:	370c      	adds	r7, #12
 801709a:	46bd      	mov	sp, r7
 801709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a0:	4770      	bx	lr

080170a2 <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80170a2:	b480      	push	{r7}
 80170a4:	b085      	sub	sp, #20
 80170a6:	af00      	add	r7, sp, #0
 80170a8:	4603      	mov	r3, r0
 80170aa:	603a      	str	r2, [r7, #0]
 80170ac:	80fb      	strh	r3, [r7, #6]
 80170ae:	460b      	mov	r3, r1
 80170b0:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80170b2:	2300      	movs	r3, #0
 80170b4:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 80170b6:	2300      	movs	r3, #0
 80170b8:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80170ba:	88fb      	ldrh	r3, [r7, #6]
 80170bc:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80170be:	2300      	movs	r3, #0
 80170c0:	81fb      	strh	r3, [r7, #14]
 80170c2:	e00e      	b.n	80170e2 <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80170c4:	88ba      	ldrh	r2, [r7, #4]
 80170c6:	89fb      	ldrh	r3, [r7, #14]
 80170c8:	1ad3      	subs	r3, r2, r3
 80170ca:	3b01      	subs	r3, #1
 80170cc:	683a      	ldr	r2, [r7, #0]
 80170ce:	4413      	add	r3, r2
 80170d0:	89ba      	ldrh	r2, [r7, #12]
 80170d2:	b2d2      	uxtb	r2, r2
 80170d4:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80170d6:	89bb      	ldrh	r3, [r7, #12]
 80170d8:	0a1b      	lsrs	r3, r3, #8
 80170da:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80170dc:	89fb      	ldrh	r3, [r7, #14]
 80170de:	3301      	adds	r3, #1
 80170e0:	81fb      	strh	r3, [r7, #14]
 80170e2:	89fa      	ldrh	r2, [r7, #14]
 80170e4:	88bb      	ldrh	r3, [r7, #4]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d3ec      	bcc.n	80170c4 <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 80170ea:	bf00      	nop
 80170ec:	bf00      	nop
 80170ee:	3714      	adds	r7, #20
 80170f0:	46bd      	mov	sp, r7
 80170f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170f6:	4770      	bx	lr

080170f8 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80170f8:	b480      	push	{r7}
 80170fa:	b085      	sub	sp, #20
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	4603      	mov	r3, r0
 8017100:	6039      	str	r1, [r7, #0]
 8017102:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8017104:	2300      	movs	r3, #0
 8017106:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8017108:	e00a      	b.n	8017120 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 801710a:	89fb      	ldrh	r3, [r7, #14]
 801710c:	021b      	lsls	r3, r3, #8
 801710e:	b21a      	sxth	r2, r3
 8017110:	683b      	ldr	r3, [r7, #0]
 8017112:	1c59      	adds	r1, r3, #1
 8017114:	6039      	str	r1, [r7, #0]
 8017116:	781b      	ldrb	r3, [r3, #0]
 8017118:	b21b      	sxth	r3, r3
 801711a:	4313      	orrs	r3, r2
 801711c:	b21b      	sxth	r3, r3
 801711e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8017120:	88fb      	ldrh	r3, [r7, #6]
 8017122:	1e5a      	subs	r2, r3, #1
 8017124:	80fa      	strh	r2, [r7, #6]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d1ef      	bne.n	801710a <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 801712a:	89fb      	ldrh	r3, [r7, #14]
}
 801712c:	4618      	mov	r0, r3
 801712e:	3714      	adds	r7, #20
 8017130:	46bd      	mov	sp, r7
 8017132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017136:	4770      	bx	lr

08017138 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8017138:	b480      	push	{r7}
 801713a:	b085      	sub	sp, #20
 801713c:	af00      	add	r7, sp, #0
 801713e:	4603      	mov	r3, r0
 8017140:	603a      	str	r2, [r7, #0]
 8017142:	80fb      	strh	r3, [r7, #6]
 8017144:	460b      	mov	r3, r1
 8017146:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8017148:	2300      	movs	r3, #0
 801714a:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 801714c:	2300      	movs	r3, #0
 801714e:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8017150:	88fb      	ldrh	r3, [r7, #6]
 8017152:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8017154:	2300      	movs	r3, #0
 8017156:	81fb      	strh	r3, [r7, #14]
 8017158:	e00f      	b.n	801717a <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 801715a:	88ba      	ldrh	r2, [r7, #4]
 801715c:	89fb      	ldrh	r3, [r7, #14]
 801715e:	1ad3      	subs	r3, r2, r3
 8017160:	3b01      	subs	r3, #1
 8017162:	683a      	ldr	r2, [r7, #0]
 8017164:	4413      	add	r3, r2
 8017166:	89ba      	ldrh	r2, [r7, #12]
 8017168:	b2d2      	uxtb	r2, r2
 801716a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 801716c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8017170:	121b      	asrs	r3, r3, #8
 8017172:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8017174:	89fb      	ldrh	r3, [r7, #14]
 8017176:	3301      	adds	r3, #1
 8017178:	81fb      	strh	r3, [r7, #14]
 801717a:	89fa      	ldrh	r2, [r7, #14]
 801717c:	88bb      	ldrh	r3, [r7, #4]
 801717e:	429a      	cmp	r2, r3
 8017180:	d3eb      	bcc.n	801715a <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8017182:	bf00      	nop
 8017184:	bf00      	nop
 8017186:	3714      	adds	r7, #20
 8017188:	46bd      	mov	sp, r7
 801718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718e:	4770      	bx	lr

08017190 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8017190:	b480      	push	{r7}
 8017192:	b085      	sub	sp, #20
 8017194:	af00      	add	r7, sp, #0
 8017196:	4603      	mov	r3, r0
 8017198:	6039      	str	r1, [r7, #0]
 801719a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 801719c:	2300      	movs	r3, #0
 801719e:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80171a0:	683b      	ldr	r3, [r7, #0]
 80171a2:	781b      	ldrb	r3, [r3, #0]
 80171a4:	b25b      	sxtb	r3, r3
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	da0e      	bge.n	80171c8 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80171aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80171ae:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80171b0:	e00a      	b.n	80171c8 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80171b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80171b6:	021b      	lsls	r3, r3, #8
 80171b8:	b21a      	sxth	r2, r3
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	1c59      	adds	r1, r3, #1
 80171be:	6039      	str	r1, [r7, #0]
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	b21b      	sxth	r3, r3
 80171c4:	4313      	orrs	r3, r2
 80171c6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80171c8:	88fb      	ldrh	r3, [r7, #6]
 80171ca:	1e5a      	subs	r2, r3, #1
 80171cc:	80fa      	strh	r2, [r7, #6]
 80171ce:	2b00      	cmp	r3, #0
 80171d0:	d1ef      	bne.n	80171b2 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80171d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3714      	adds	r7, #20
 80171da:	46bd      	mov	sp, r7
 80171dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e0:	4770      	bx	lr

080171e2 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80171e2:	b480      	push	{r7}
 80171e4:	b087      	sub	sp, #28
 80171e6:	af00      	add	r7, sp, #0
 80171e8:	60f8      	str	r0, [r7, #12]
 80171ea:	460b      	mov	r3, r1
 80171ec:	607a      	str	r2, [r7, #4]
 80171ee:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80171f0:	2300      	movs	r3, #0
 80171f2:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 80171f4:	2300      	movs	r3, #0
 80171f6:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 80171fc:	2300      	movs	r3, #0
 80171fe:	82fb      	strh	r3, [r7, #22]
 8017200:	e00e      	b.n	8017220 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8017202:	897a      	ldrh	r2, [r7, #10]
 8017204:	8afb      	ldrh	r3, [r7, #22]
 8017206:	1ad3      	subs	r3, r2, r3
 8017208:	3b01      	subs	r3, #1
 801720a:	687a      	ldr	r2, [r7, #4]
 801720c:	4413      	add	r3, r2
 801720e:	693a      	ldr	r2, [r7, #16]
 8017210:	b2d2      	uxtb	r2, r2
 8017212:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	0a1b      	lsrs	r3, r3, #8
 8017218:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 801721a:	8afb      	ldrh	r3, [r7, #22]
 801721c:	3301      	adds	r3, #1
 801721e:	82fb      	strh	r3, [r7, #22]
 8017220:	8afa      	ldrh	r2, [r7, #22]
 8017222:	897b      	ldrh	r3, [r7, #10]
 8017224:	429a      	cmp	r2, r3
 8017226:	d3ec      	bcc.n	8017202 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8017228:	bf00      	nop
 801722a:	bf00      	nop
 801722c:	371c      	adds	r7, #28
 801722e:	46bd      	mov	sp, r7
 8017230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017234:	4770      	bx	lr

08017236 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8017236:	b480      	push	{r7}
 8017238:	b085      	sub	sp, #20
 801723a:	af00      	add	r7, sp, #0
 801723c:	4603      	mov	r3, r0
 801723e:	6039      	str	r1, [r7, #0]
 8017240:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8017242:	2300      	movs	r3, #0
 8017244:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8017246:	e007      	b.n	8017258 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	021a      	lsls	r2, r3, #8
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	1c59      	adds	r1, r3, #1
 8017250:	6039      	str	r1, [r7, #0]
 8017252:	781b      	ldrb	r3, [r3, #0]
 8017254:	4313      	orrs	r3, r2
 8017256:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8017258:	88fb      	ldrh	r3, [r7, #6]
 801725a:	1e5a      	subs	r2, r3, #1
 801725c:	80fa      	strh	r2, [r7, #6]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d1f2      	bne.n	8017248 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8017262:	68fb      	ldr	r3, [r7, #12]
}
 8017264:	4618      	mov	r0, r3
 8017266:	3714      	adds	r7, #20
 8017268:	46bd      	mov	sp, r7
 801726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726e:	4770      	bx	lr

08017270 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8017270:	b480      	push	{r7}
 8017272:	b085      	sub	sp, #20
 8017274:	af00      	add	r7, sp, #0
 8017276:	4603      	mov	r3, r0
 8017278:	6039      	str	r1, [r7, #0]
 801727a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 801727c:	2300      	movs	r3, #0
 801727e:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	b25b      	sxtb	r3, r3
 8017286:	2b00      	cmp	r3, #0
 8017288:	da0b      	bge.n	80172a2 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 801728a:	f04f 33ff 	mov.w	r3, #4294967295
 801728e:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8017290:	e007      	b.n	80172a2 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	021a      	lsls	r2, r3, #8
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	1c59      	adds	r1, r3, #1
 801729a:	6039      	str	r1, [r7, #0]
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	4313      	orrs	r3, r2
 80172a0:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80172a2:	88fb      	ldrh	r3, [r7, #6]
 80172a4:	1e5a      	subs	r2, r3, #1
 80172a6:	80fa      	strh	r2, [r7, #6]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d1f2      	bne.n	8017292 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80172ac:	68fb      	ldr	r3, [r7, #12]
}
 80172ae:	4618      	mov	r0, r3
 80172b0:	3714      	adds	r7, #20
 80172b2:	46bd      	mov	sp, r7
 80172b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b8:	4770      	bx	lr

080172ba <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 80172ba:	b580      	push	{r7, lr}
 80172bc:	b086      	sub	sp, #24
 80172be:	af00      	add	r7, sp, #0
 80172c0:	4603      	mov	r3, r0
 80172c2:	460a      	mov	r2, r1
 80172c4:	80fb      	strh	r3, [r7, #6]
 80172c6:	4613      	mov	r3, r2
 80172c8:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 80172ca:	2300      	movs	r3, #0
 80172cc:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 80172ce:	2300      	movs	r3, #0
 80172d0:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80172d2:	2300      	movs	r3, #0
 80172d4:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80172d6:	88fb      	ldrh	r3, [r7, #6]
 80172d8:	4618      	mov	r0, r3
 80172da:	f000 fb5f 	bl	801799c <VL53L1_calc_pll_period_us>
 80172de:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 80172e0:	797b      	ldrb	r3, [r7, #5]
 80172e2:	4618      	mov	r0, r3
 80172e4:	f000 fb6e 	bl	80179c4 <VL53L1_decode_vcsel_period>
 80172e8:	4603      	mov	r3, r0
 80172ea:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 80172ec:	697a      	ldr	r2, [r7, #20]
 80172ee:	4613      	mov	r3, r2
 80172f0:	00db      	lsls	r3, r3, #3
 80172f2:	4413      	add	r3, r2
 80172f4:	021b      	lsls	r3, r3, #8
 80172f6:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	099b      	lsrs	r3, r3, #6
 80172fc:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 80172fe:	7cfa      	ldrb	r2, [r7, #19]
 8017300:	68fb      	ldr	r3, [r7, #12]
 8017302:	fb02 f303 	mul.w	r3, r2, r3
 8017306:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	099b      	lsrs	r3, r3, #6
 801730c:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 801730e:	68fb      	ldr	r3, [r7, #12]
}
 8017310:	4618      	mov	r0, r3
 8017312:	3718      	adds	r7, #24
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}

08017318 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8017318:	b480      	push	{r7}
 801731a:	b089      	sub	sp, #36	@ 0x24
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	4608      	mov	r0, r1
 8017322:	4611      	mov	r1, r2
 8017324:	461a      	mov	r2, r3
 8017326:	4603      	mov	r3, r0
 8017328:	817b      	strh	r3, [r7, #10]
 801732a:	460b      	mov	r3, r1
 801732c:	813b      	strh	r3, [r7, #8]
 801732e:	4613      	mov	r3, r2
 8017330:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8017332:	2300      	movs	r3, #0
 8017334:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8017336:	2300      	movs	r3, #0
 8017338:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 801733a:	2300      	movs	r3, #0
 801733c:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 801733e:	2300      	movs	r3, #0
 8017340:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8017342:	2300      	movs	r3, #0
 8017344:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	011b      	lsls	r3, r3, #4
 801734a:	4a23      	ldr	r2, [pc, #140]	@ (80173d8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 801734c:	fb82 1203 	smull	r1, r2, r2, r3
 8017350:	1192      	asrs	r2, r2, #6
 8017352:	17db      	asrs	r3, r3, #31
 8017354:	1ad3      	subs	r3, r2, r3
 8017356:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8017358:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 801735c:	2b00      	cmp	r3, #0
 801735e:	da03      	bge.n	8017368 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8017360:	897b      	ldrh	r3, [r7, #10]
 8017362:	425b      	negs	r3, r3
 8017364:	b29b      	uxth	r3, r3
 8017366:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8017368:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801736c:	2b00      	cmp	r3, #0
 801736e:	da03      	bge.n	8017378 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8017370:	893b      	ldrh	r3, [r7, #8]
 8017372:	425b      	negs	r3, r3
 8017374:	b29b      	uxth	r3, r3
 8017376:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8017378:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 801737c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8017380:	4413      	add	r3, r2
 8017382:	015b      	lsls	r3, r3, #5
 8017384:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8017386:	697b      	ldr	r3, [r7, #20]
 8017388:	4a13      	ldr	r2, [pc, #76]	@ (80173d8 <VL53L1_calc_range_ignore_threshold+0xc0>)
 801738a:	fb82 1203 	smull	r1, r2, r2, r3
 801738e:	1192      	asrs	r2, r2, #6
 8017390:	17db      	asrs	r3, r3, #31
 8017392:	1ad3      	subs	r3, r2, r3
 8017394:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8017396:	697a      	ldr	r2, [r7, #20]
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	4413      	add	r3, r2
 801739c:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 801739e:	79fa      	ldrb	r2, [r7, #7]
 80173a0:	697b      	ldr	r3, [r7, #20]
 80173a2:	fb02 f303 	mul.w	r3, r2, r3
 80173a6:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80173a8:	697b      	ldr	r3, [r7, #20]
 80173aa:	3310      	adds	r3, #16
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	da00      	bge.n	80173b2 <VL53L1_calc_range_ignore_threshold+0x9a>
 80173b0:	331f      	adds	r3, #31
 80173b2:	115b      	asrs	r3, r3, #5
 80173b4:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80173b6:	697b      	ldr	r3, [r7, #20]
 80173b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80173bc:	db03      	blt.n	80173c6 <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80173be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80173c2:	83fb      	strh	r3, [r7, #30]
 80173c4:	e001      	b.n	80173ca <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80173c6:	697b      	ldr	r3, [r7, #20]
 80173c8:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80173ca:	8bfb      	ldrh	r3, [r7, #30]
}
 80173cc:	4618      	mov	r0, r3
 80173ce:	3724      	adds	r7, #36	@ 0x24
 80173d0:	46bd      	mov	sp, r7
 80173d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173d6:	4770      	bx	lr
 80173d8:	10624dd3 	.word	0x10624dd3

080173dc <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80173dc:	b480      	push	{r7}
 80173de:	b085      	sub	sp, #20
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
 80173e4:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 80173e6:	2300      	movs	r3, #0
 80173e8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	031a      	lsls	r2, r3, #12
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	085b      	lsrs	r3, r3, #1
 80173f2:	441a      	add	r2, r3
	timeout_mclks   =
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80173fa:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80173fc:	68fb      	ldr	r3, [r7, #12]
}
 80173fe:	4618      	mov	r0, r3
 8017400:	3714      	adds	r7, #20
 8017402:	46bd      	mov	sp, r7
 8017404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017408:	4770      	bx	lr

0801740a <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 801740a:	b580      	push	{r7, lr}
 801740c:	b084      	sub	sp, #16
 801740e:	af00      	add	r7, sp, #0
 8017410:	6078      	str	r0, [r7, #4]
 8017412:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8017414:	2300      	movs	r3, #0
 8017416:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8017418:	2300      	movs	r3, #0
 801741a:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 801741c:	6839      	ldr	r1, [r7, #0]
 801741e:	6878      	ldr	r0, [r7, #4]
 8017420:	f7ff ffdc 	bl	80173dc <VL53L1_calc_timeout_mclks>
 8017424:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f000 f860 	bl	80174ec <VL53L1_encode_timeout>
 801742c:	4603      	mov	r3, r0
 801742e:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8017430:	897b      	ldrh	r3, [r7, #10]
}
 8017432:	4618      	mov	r0, r3
 8017434:	3710      	adds	r7, #16
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}

0801743a <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 801743a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801743e:	b087      	sub	sp, #28
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8017446:	2100      	movs	r1, #0
 8017448:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 801744a:	f04f 0000 	mov.w	r0, #0
 801744e:	f04f 0100 	mov.w	r1, #0
 8017452:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8017456:	6879      	ldr	r1, [r7, #4]
 8017458:	2000      	movs	r0, #0
 801745a:	4688      	mov	r8, r1
 801745c:	4681      	mov	r9, r0
 801745e:	6839      	ldr	r1, [r7, #0]
 8017460:	2000      	movs	r0, #0
 8017462:	460c      	mov	r4, r1
 8017464:	4605      	mov	r5, r0
 8017466:	fb04 f009 	mul.w	r0, r4, r9
 801746a:	fb08 f105 	mul.w	r1, r8, r5
 801746e:	4401      	add	r1, r0
 8017470:	fba8 2304 	umull	r2, r3, r8, r4
 8017474:	4419      	add	r1, r3
 8017476:	460b      	mov	r3, r1
 8017478:	e9c7 2302 	strd	r2, r3, [r7, #8]
 801747c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8017480:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017484:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8017488:	f143 0b00 	adc.w	fp, r3, #0
 801748c:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8017490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8017494:	f04f 0200 	mov.w	r2, #0
 8017498:	f04f 0300 	mov.w	r3, #0
 801749c:	0b02      	lsrs	r2, r0, #12
 801749e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80174a2:	0b0b      	lsrs	r3, r1, #12
 80174a4:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80174ac:	697b      	ldr	r3, [r7, #20]
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	371c      	adds	r7, #28
 80174b2:	46bd      	mov	sp, r7
 80174b4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80174b8:	4770      	bx	lr

080174ba <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80174ba:	b580      	push	{r7, lr}
 80174bc:	b084      	sub	sp, #16
 80174be:	af00      	add	r7, sp, #0
 80174c0:	4603      	mov	r3, r0
 80174c2:	6039      	str	r1, [r7, #0]
 80174c4:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 80174c6:	2300      	movs	r3, #0
 80174c8:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80174ca:	2300      	movs	r3, #0
 80174cc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 80174ce:	88fb      	ldrh	r3, [r7, #6]
 80174d0:	4618      	mov	r0, r3
 80174d2:	f000 f835 	bl	8017540 <VL53L1_decode_timeout>
 80174d6:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 80174d8:	6839      	ldr	r1, [r7, #0]
 80174da:	68f8      	ldr	r0, [r7, #12]
 80174dc:	f7ff ffad 	bl	801743a <VL53L1_calc_timeout_us>
 80174e0:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 80174e2:	68bb      	ldr	r3, [r7, #8]
}
 80174e4:	4618      	mov	r0, r3
 80174e6:	3710      	adds	r7, #16
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}

080174ec <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 80174ec:	b480      	push	{r7}
 80174ee:	b087      	sub	sp, #28
 80174f0:	af00      	add	r7, sp, #0
 80174f2:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 80174f4:	2300      	movs	r3, #0
 80174f6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80174f8:	2300      	movs	r3, #0
 80174fa:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80174fc:	2300      	movs	r3, #0
 80174fe:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	2b00      	cmp	r3, #0
 8017504:	d015      	beq.n	8017532 <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	3b01      	subs	r3, #1
 801750a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 801750c:	e005      	b.n	801751a <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	085b      	lsrs	r3, r3, #1
 8017512:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8017514:	89fb      	ldrh	r3, [r7, #14]
 8017516:	3301      	adds	r3, #1
 8017518:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 801751a:	693b      	ldr	r3, [r7, #16]
 801751c:	2bff      	cmp	r3, #255	@ 0xff
 801751e:	d8f6      	bhi.n	801750e <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8017520:	89fb      	ldrh	r3, [r7, #14]
 8017522:	021b      	lsls	r3, r3, #8
 8017524:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	b29b      	uxth	r3, r3
 801752a:	b2db      	uxtb	r3, r3
 801752c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 801752e:	4413      	add	r3, r2
 8017530:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8017532:	8afb      	ldrh	r3, [r7, #22]
}
 8017534:	4618      	mov	r0, r3
 8017536:	371c      	adds	r7, #28
 8017538:	46bd      	mov	sp, r7
 801753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801753e:	4770      	bx	lr

08017540 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8017540:	b480      	push	{r7}
 8017542:	b085      	sub	sp, #20
 8017544:	af00      	add	r7, sp, #0
 8017546:	4603      	mov	r3, r0
 8017548:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 801754a:	2300      	movs	r3, #0
 801754c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 801754e:	88fb      	ldrh	r3, [r7, #6]
 8017550:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8017552:	88fa      	ldrh	r2, [r7, #6]
 8017554:	0a12      	lsrs	r2, r2, #8
 8017556:	b292      	uxth	r2, r2
 8017558:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 801755a:	3301      	adds	r3, #1
 801755c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 801755e:	68fb      	ldr	r3, [r7, #12]
}
 8017560:	4618      	mov	r0, r3
 8017562:	3714      	adds	r7, #20
 8017564:	46bd      	mov	sp, r7
 8017566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756a:	4770      	bx	lr

0801756c <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b088      	sub	sp, #32
 8017570:	af00      	add	r7, sp, #0
 8017572:	60f8      	str	r0, [r7, #12]
 8017574:	60b9      	str	r1, [r7, #8]
 8017576:	607a      	str	r2, [r7, #4]
 8017578:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801757a:	2300      	movs	r3, #0
 801757c:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 801757e:	2300      	movs	r3, #0
 8017580:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8017582:	2300      	movs	r3, #0
 8017584:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8017586:	2300      	movs	r3, #0
 8017588:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 801758a:	887b      	ldrh	r3, [r7, #2]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d102      	bne.n	8017596 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8017590:	23f1      	movs	r3, #241	@ 0xf1
 8017592:	77fb      	strb	r3, [r7, #31]
 8017594:	e05d      	b.n	8017652 <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8017596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017598:	799a      	ldrb	r2, [r3, #6]
 801759a:	887b      	ldrh	r3, [r7, #2]
 801759c:	4611      	mov	r1, r2
 801759e:	4618      	mov	r0, r3
 80175a0:	f7ff fe8b 	bl	80172ba <VL53L1_calc_macro_period_us>
 80175a4:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 80175a6:	6979      	ldr	r1, [r7, #20]
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f7ff ff17 	bl	80173dc <VL53L1_calc_timeout_mclks>
 80175ae:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 80175b0:	69bb      	ldr	r3, [r7, #24]
 80175b2:	2bff      	cmp	r3, #255	@ 0xff
 80175b4:	d901      	bls.n	80175ba <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80175b6:	23ff      	movs	r3, #255	@ 0xff
 80175b8:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80175ba:	69bb      	ldr	r3, [r7, #24]
 80175bc:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80175be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80175c0:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80175c2:	6979      	ldr	r1, [r7, #20]
 80175c4:	68b8      	ldr	r0, [r7, #8]
 80175c6:	f7ff ff20 	bl	801740a <VL53L1_calc_encoded_timeout>
 80175ca:	4603      	mov	r3, r0
 80175cc:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80175ce:	8a7b      	ldrh	r3, [r7, #18]
 80175d0:	0a1b      	lsrs	r3, r3, #8
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 80175d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d8:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80175da:	8a7b      	ldrh	r3, [r7, #18]
 80175dc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 80175de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175e0:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 80175e2:	6979      	ldr	r1, [r7, #20]
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7ff ff10 	bl	801740a <VL53L1_calc_encoded_timeout>
 80175ea:	4603      	mov	r3, r0
 80175ec:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80175ee:	8a7b      	ldrh	r3, [r7, #18]
 80175f0:	0a1b      	lsrs	r3, r3, #8
 80175f2:	b29b      	uxth	r3, r3
 80175f4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 80175f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175f8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80175fa:	8a7b      	ldrh	r3, [r7, #18]
 80175fc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 80175fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017600:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8017602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017604:	7a5a      	ldrb	r2, [r3, #9]
 8017606:	887b      	ldrh	r3, [r7, #2]
 8017608:	4611      	mov	r1, r2
 801760a:	4618      	mov	r0, r3
 801760c:	f7ff fe55 	bl	80172ba <VL53L1_calc_macro_period_us>
 8017610:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8017612:	6979      	ldr	r1, [r7, #20]
 8017614:	68b8      	ldr	r0, [r7, #8]
 8017616:	f7ff fef8 	bl	801740a <VL53L1_calc_encoded_timeout>
 801761a:	4603      	mov	r3, r0
 801761c:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 801761e:	8a7b      	ldrh	r3, [r7, #18]
 8017620:	0a1b      	lsrs	r3, r3, #8
 8017622:	b29b      	uxth	r3, r3
 8017624:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8017626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017628:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 801762a:	8a7b      	ldrh	r3, [r7, #18]
 801762c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 801762e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017630:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8017632:	6979      	ldr	r1, [r7, #20]
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f7ff fee8 	bl	801740a <VL53L1_calc_encoded_timeout>
 801763a:	4603      	mov	r3, r0
 801763c:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 801763e:	8a7b      	ldrh	r3, [r7, #18]
 8017640:	0a1b      	lsrs	r3, r3, #8
 8017642:	b29b      	uxth	r3, r3
 8017644:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8017646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017648:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 801764a:	8a7b      	ldrh	r3, [r7, #18]
 801764c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 801764e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017650:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8017652:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8017656:	4618      	mov	r0, r3
 8017658:	3720      	adds	r7, #32
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}

0801765e <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 801765e:	b480      	push	{r7}
 8017660:	b083      	sub	sp, #12
 8017662:	af00      	add	r7, sp, #0
 8017664:	4603      	mov	r3, r0
 8017666:	603a      	str	r2, [r7, #0]
 8017668:	71fb      	strb	r3, [r7, #7]
 801766a:	460b      	mov	r3, r1
 801766c:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 801766e:	79fb      	ldrb	r3, [r7, #7]
 8017670:	2b07      	cmp	r3, #7
 8017672:	d90a      	bls.n	801768a <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8017674:	79bb      	ldrb	r3, [r7, #6]
 8017676:	00db      	lsls	r3, r3, #3
 8017678:	b2da      	uxtb	r2, r3
 801767a:	79fb      	ldrb	r3, [r7, #7]
 801767c:	1ad3      	subs	r3, r2, r3
 801767e:	b2db      	uxtb	r3, r3
 8017680:	3b71      	subs	r3, #113	@ 0x71
 8017682:	b2da      	uxtb	r2, r3
 8017684:	683b      	ldr	r3, [r7, #0]
 8017686:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8017688:	e00a      	b.n	80176a0 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 801768a:	79bb      	ldrb	r3, [r7, #6]
 801768c:	f1c3 030f 	rsb	r3, r3, #15
 8017690:	b2db      	uxtb	r3, r3
 8017692:	00db      	lsls	r3, r3, #3
 8017694:	b2da      	uxtb	r2, r3
 8017696:	79fb      	ldrb	r3, [r7, #7]
 8017698:	4413      	add	r3, r2
 801769a:	b2da      	uxtb	r2, r3
 801769c:	683b      	ldr	r3, [r7, #0]
 801769e:	701a      	strb	r2, [r3, #0]
}
 80176a0:	bf00      	nop
 80176a2:	370c      	adds	r7, #12
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 80176ac:	b480      	push	{r7}
 80176ae:	b085      	sub	sp, #20
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	4603      	mov	r3, r0
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	607a      	str	r2, [r7, #4]
 80176b8:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80176ba:	7bfb      	ldrb	r3, [r7, #15]
 80176bc:	091b      	lsrs	r3, r3, #4
 80176be:	b2da      	uxtb	r2, r3
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80176c4:	7bfb      	ldrb	r3, [r7, #15]
 80176c6:	f003 030f 	and.w	r3, r3, #15
 80176ca:	b2da      	uxtb	r2, r3
 80176cc:	68bb      	ldr	r3, [r7, #8]
 80176ce:	701a      	strb	r2, [r3, #0]

}
 80176d0:	bf00      	nop
 80176d2:	3714      	adds	r7, #20
 80176d4:	46bd      	mov	sp, r7
 80176d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176da:	4770      	bx	lr

080176dc <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80176dc:	b480      	push	{r7}
 80176de:	b083      	sub	sp, #12
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	4603      	mov	r3, r0
 80176e4:	603a      	str	r2, [r7, #0]
 80176e6:	71fb      	strb	r3, [r7, #7]
 80176e8:	460b      	mov	r3, r1
 80176ea:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 80176ec:	79bb      	ldrb	r3, [r7, #6]
 80176ee:	011b      	lsls	r3, r3, #4
 80176f0:	b2da      	uxtb	r2, r3
 80176f2:	79fb      	ldrb	r3, [r7, #7]
 80176f4:	4413      	add	r3, r2
 80176f6:	b2da      	uxtb	r2, r3
 80176f8:	683b      	ldr	r3, [r7, #0]
 80176fa:	701a      	strb	r2, [r3, #0]

}
 80176fc:	bf00      	nop
 80176fe:	370c      	adds	r7, #12
 8017700:	46bd      	mov	sp, r7
 8017702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017706:	4770      	bx	lr

08017708 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8017708:	b480      	push	{r7}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017710:	2300      	movs	r3, #0
 8017712:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8017718:	68bb      	ldr	r3, [r7, #8]
 801771a:	2203      	movs	r2, #3
 801771c:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8017720:	68bb      	ldr	r3, [r7, #8]
 8017722:	2200      	movs	r2, #0
 8017724:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8017728:	68bb      	ldr	r3, [r7, #8]
 801772a:	2200      	movs	r2, #0
 801772c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8017730:	68bb      	ldr	r3, [r7, #8]
 8017732:	2200      	movs	r2, #0
 8017734:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	2200      	movs	r2, #0
 801773c:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8017740:	68bb      	ldr	r3, [r7, #8]
 8017742:	2200      	movs	r2, #0
 8017744:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8017748:	68bb      	ldr	r3, [r7, #8]
 801774a:	2200      	movs	r2, #0
 801774c:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8017750:	68bb      	ldr	r3, [r7, #8]
 8017752:	2200      	movs	r2, #0
 8017754:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	2200      	movs	r2, #0
 801775c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8017760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017764:	4618      	mov	r0, r3
 8017766:	3714      	adds	r7, #20
 8017768:	46bd      	mov	sp, r7
 801776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801776e:	4770      	bx	lr

08017770 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8017770:	b480      	push	{r7}
 8017772:	b085      	sub	sp, #20
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017778:	2300      	movs	r3, #0
 801777a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	22ff      	movs	r2, #255	@ 0xff
 8017784:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8017788:	68bb      	ldr	r3, [r7, #8]
 801778a:	2200      	movs	r2, #0
 801778c:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8017790:	68bb      	ldr	r3, [r7, #8]
 8017792:	2200      	movs	r2, #0
 8017794:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8017798:	68bb      	ldr	r3, [r7, #8]
 801779a:	2200      	movs	r2, #0
 801779c:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d005      	beq.n	80177b6 <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 80177aa:	68bb      	ldr	r3, [r7, #8]
 80177ac:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
		pdev->stat_nvm.vhv_config__init =
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 80177b6:	68bb      	ldr	r3, [r7, #8]
 80177b8:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d005      	beq.n	80177cc <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	f893 22e9 	ldrb.w	r2, [r3, #745]	@ 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80177c6:	68bb      	ldr	r3, [r7, #8]
 80177c8:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 80177cc:	68bb      	ldr	r3, [r7, #8]
 80177ce:	2200      	movs	r2, #0
 80177d0:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d

	LOG_FUNCTION_END(status);

	return status;
 80177d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80177d8:	4618      	mov	r0, r3
 80177da:	3714      	adds	r7, #20
 80177dc:	46bd      	mov	sp, r7
 80177de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e2:	4770      	bx	lr

080177e4 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 80177e4:	b480      	push	{r7}
 80177e6:	b087      	sub	sp, #28
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	60f8      	str	r0, [r7, #12]
 80177ec:	60b9      	str	r1, [r7, #8]
 80177ee:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80177f0:	2300      	movs	r3, #0
 80177f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2201      	movs	r2, #1
 80177f8:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	2200      	movs	r2, #0
 80177fe:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8017800:	68bb      	ldr	r3, [r7, #8]
 8017802:	228b      	movs	r2, #139	@ 0x8b
 8017804:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 801780c:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	2202      	movs	r2, #2
 8017812:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8017814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017818:	4618      	mov	r0, r3
 801781a:	371c      	adds	r7, #28
 801781c:	46bd      	mov	sp, r7
 801781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017822:	4770      	bx	lr

08017824 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8017824:	b480      	push	{r7}
 8017826:	b085      	sub	sp, #20
 8017828:	af00      	add	r7, sp, #0
 801782a:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017830:	2300      	movs	r3, #0
 8017832:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 8017852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017856:	b2da      	uxtb	r2, r3
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8017864:	f003 0303 	and.w	r3, r3, #3
 8017868:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8017870:	009b      	lsls	r3, r3, #2
 8017872:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8017874:	4413      	add	r3, r2
 8017876:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	2201      	movs	r2, #1
 8017882:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 801789e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3714      	adds	r7, #20
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr

080178ae <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 80178ae:	b480      	push	{r7}
 80178b0:	b087      	sub	sp, #28
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80178ba:	2300      	movs	r3, #0
 80178bc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	f8b3 31de 	ldrh.w	r3, [r3, #478]	@ 0x1de
 80178c4:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	@ 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 80178cc:	4413      	add	r3, r2
 80178ce:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80178d6:	d302      	bcc.n	80178de <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 80178d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80178dc:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 80178de:	693b      	ldr	r3, [r7, #16]
 80178e0:	041b      	lsls	r3, r3, #16
 80178e2:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d102      	bne.n	80178f4 <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80178ee:	23f1      	movs	r3, #241	@ 0xf1
 80178f0:	75fb      	strb	r3, [r7, #23]
 80178f2:	e035      	b.n	8017960 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 80178fa:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 80178fc:	693b      	ldr	r3, [r7, #16]
 80178fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8017902:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	693a      	ldr	r2, [r7, #16]
 8017908:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8017912:	041b      	lsls	r3, r3, #16
 8017914:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 8017916:	68fb      	ldr	r3, [r7, #12]
 8017918:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 801791c:	2b00      	cmp	r3, #0
 801791e:	d102      	bne.n	8017926 <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8017920:	23f1      	movs	r3, #241	@ 0xf1
 8017922:	75fb      	strb	r3, [r7, #23]
 8017924:	e01c      	b.n	8017960 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
			utemp32a = utemp32a /
 801792c:	693a      	ldr	r2, [r7, #16]
 801792e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017932:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 8017934:	693b      	ldr	r3, [r7, #16]
 8017936:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801793a:	d302      	bcc.n	8017942 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 801793c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017940:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 8017942:	693b      	ldr	r3, [r7, #16]
 8017944:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	2202      	movs	r2, #2
 801795c:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8017960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017964:	f113 0f0f 	cmn.w	r3, #15
 8017968:	d110      	bne.n	801798c <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8017970:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8017980:	68fb      	ldr	r3, [r7, #12]
 8017982:	2202      	movs	r2, #2
 8017984:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8017988:	2300      	movs	r3, #0
 801798a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 801798c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017990:	4618      	mov	r0, r3
 8017992:	371c      	adds	r7, #28
 8017994:	46bd      	mov	sp, r7
 8017996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799a:	4770      	bx	lr

0801799c <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 801799c:	b480      	push	{r7}
 801799e:	b085      	sub	sp, #20
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	4603      	mov	r3, r0
 80179a4:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 80179a6:	2300      	movs	r3, #0
 80179a8:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 80179aa:	88fb      	ldrh	r3, [r7, #6]
 80179ac:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80179b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80179b4:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 80179b6:	68fb      	ldr	r3, [r7, #12]
}
 80179b8:	4618      	mov	r0, r3
 80179ba:	3714      	adds	r7, #20
 80179bc:	46bd      	mov	sp, r7
 80179be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c2:	4770      	bx	lr

080179c4 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80179c4:	b480      	push	{r7}
 80179c6:	b085      	sub	sp, #20
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	4603      	mov	r3, r0
 80179cc:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80179ce:	2300      	movs	r3, #0
 80179d0:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 80179d2:	79fb      	ldrb	r3, [r7, #7]
 80179d4:	3301      	adds	r3, #1
 80179d6:	b2db      	uxtb	r3, r3
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 80179dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3714      	adds	r7, #20
 80179e2:	46bd      	mov	sp, r7
 80179e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179e8:	4770      	bx	lr

080179ea <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 80179ea:	b480      	push	{r7}
 80179ec:	b085      	sub	sp, #20
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	4603      	mov	r3, r0
 80179f2:	60b9      	str	r1, [r7, #8]
 80179f4:	607a      	str	r2, [r7, #4]
 80179f6:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80179f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	da10      	bge.n	8017a22 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8017a00:	7bfb      	ldrb	r3, [r7, #15]
 8017a02:	43db      	mvns	r3, r3
 8017a04:	b2db      	uxtb	r3, r3
 8017a06:	f003 0307 	and.w	r3, r3, #7
 8017a0a:	b2db      	uxtb	r3, r3
 8017a0c:	3308      	adds	r3, #8
 8017a0e:	b2da      	uxtb	r2, r3
 8017a10:	68bb      	ldr	r3, [r7, #8]
 8017a12:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8017a14:	7bfb      	ldrb	r3, [r7, #15]
 8017a16:	3b80      	subs	r3, #128	@ 0x80
 8017a18:	10db      	asrs	r3, r3, #3
 8017a1a:	b2da      	uxtb	r2, r3
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8017a20:	e00c      	b.n	8017a3c <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8017a22:	7bfb      	ldrb	r3, [r7, #15]
 8017a24:	f003 0307 	and.w	r3, r3, #7
 8017a28:	b2da      	uxtb	r2, r3
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8017a2e:	7bfb      	ldrb	r3, [r7, #15]
 8017a30:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8017a34:	10db      	asrs	r3, r3, #3
 8017a36:	b2da      	uxtb	r2, r3
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	701a      	strb	r2, [r3, #0]
}
 8017a3c:	bf00      	nop
 8017a3e:	3714      	adds	r7, #20
 8017a40:	46bd      	mov	sp, r7
 8017a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a46:	4770      	bx	lr

08017a48 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8017a48:	b580      	push	{r7, lr}
 8017a4a:	b086      	sub	sp, #24
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	460b      	mov	r3, r1
 8017a52:	607a      	str	r2, [r7, #4]
 8017a54:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017a56:	2300      	movs	r3, #0
 8017a58:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8017a5a:	897b      	ldrh	r3, [r7, #10]
 8017a5c:	2b0a      	cmp	r3, #10
 8017a5e:	d802      	bhi.n	8017a66 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017a60:	f06f 0309 	mvn.w	r3, #9
 8017a64:	e047      	b.n	8017af6 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	781b      	ldrb	r3, [r3, #0]
 8017a6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017a6e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8017a74:	68fb      	ldr	r3, [r7, #12]
 8017a76:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8017a7c:	f002 020f 	and.w	r2, r2, #15
 8017a80:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8017a82:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8017a8c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017a90:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8017a92:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8017a9c:	f002 0203 	and.w	r2, r2, #3
 8017aa0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8017aa2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8017aac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017ab0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8017ab2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	88d8      	ldrh	r0, [r3, #6]
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	3305      	adds	r3, #5
 8017abc:	461a      	mov	r2, r3
 8017abe:	2102      	movs	r1, #2
 8017ac0:	f7ff faef 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8017ac4:	687b      	ldr	r3, [r7, #4]
 8017ac6:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8017ac8:	68fa      	ldr	r2, [r7, #12]
 8017aca:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8017acc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8017ad2:	68fa      	ldr	r2, [r7, #12]
 8017ad4:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8017ad6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8017ae0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017ae4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8017ae6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8017aec:	68fa      	ldr	r2, [r7, #12]
 8017aee:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8017af0:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8017af2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017af6:	4618      	mov	r0, r3
 8017af8:	3718      	adds	r7, #24
 8017afa:	46bd      	mov	sp, r7
 8017afc:	bd80      	pop	{r7, pc}

08017afe <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8017afe:	b580      	push	{r7, lr}
 8017b00:	b086      	sub	sp, #24
 8017b02:	af00      	add	r7, sp, #0
 8017b04:	4603      	mov	r3, r0
 8017b06:	60b9      	str	r1, [r7, #8]
 8017b08:	607a      	str	r2, [r7, #4]
 8017b0a:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8017b10:	89fb      	ldrh	r3, [r7, #14]
 8017b12:	2b0a      	cmp	r3, #10
 8017b14:	d802      	bhi.n	8017b1c <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017b16:	f06f 0309 	mvn.w	r3, #9
 8017b1a:	e046      	b.n	8017baa <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8017b1c:	68bb      	ldr	r3, [r7, #8]
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017b24:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8017b2a:	68bb      	ldr	r3, [r7, #8]
 8017b2c:	3301      	adds	r3, #1
 8017b2e:	781b      	ldrb	r3, [r3, #0]
 8017b30:	f003 030f 	and.w	r3, r3, #15
 8017b34:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8017b3a:	68bb      	ldr	r3, [r7, #8]
 8017b3c:	3302      	adds	r3, #2
 8017b3e:	781b      	ldrb	r3, [r3, #0]
 8017b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017b44:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	3303      	adds	r3, #3
 8017b4e:	781b      	ldrb	r3, [r3, #0]
 8017b50:	f003 0303 	and.w	r3, r3, #3
 8017b54:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	3304      	adds	r3, #4
 8017b5e:	781b      	ldrb	r3, [r3, #0]
 8017b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017b64:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8017b6a:	68bb      	ldr	r3, [r7, #8]
 8017b6c:	3305      	adds	r3, #5
 8017b6e:	4619      	mov	r1, r3
 8017b70:	2002      	movs	r0, #2
 8017b72:	f7ff fac1 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8017b76:	4603      	mov	r3, r0
 8017b78:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8017b7e:	68bb      	ldr	r3, [r7, #8]
 8017b80:	79da      	ldrb	r2, [r3, #7]
 8017b82:	687b      	ldr	r3, [r7, #4]
 8017b84:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	7a1a      	ldrb	r2, [r3, #8]
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8017b8e:	68bb      	ldr	r3, [r7, #8]
 8017b90:	3309      	adds	r3, #9
 8017b92:	781b      	ldrb	r3, [r3, #0]
 8017b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017b98:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8017b9e:	68bb      	ldr	r3, [r7, #8]
 8017ba0:	7a9a      	ldrb	r2, [r3, #10]
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8017ba6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017baa:	4618      	mov	r0, r3
 8017bac:	3718      	adds	r7, #24
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}

08017bb2 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b086      	sub	sp, #24
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	6078      	str	r0, [r7, #4]
 8017bba:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8017bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d108      	bne.n	8017bda <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8017bc8:	f107 020c 	add.w	r2, r7, #12
 8017bcc:	230b      	movs	r3, #11
 8017bce:	2101      	movs	r1, #1
 8017bd0:	6878      	ldr	r0, [r7, #4]
 8017bd2:	f7f3 ff28 	bl	800ba26 <VL53L1_ReadMulti>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8017bda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d108      	bne.n	8017bf4 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8017be2:	f107 030c 	add.w	r3, r7, #12
 8017be6:	683a      	ldr	r2, [r7, #0]
 8017be8:	4619      	mov	r1, r3
 8017bea:	200b      	movs	r0, #11
 8017bec:	f7ff ff87 	bl	8017afe <VL53L1_i2c_decode_static_nvm_managed>
 8017bf0:	4603      	mov	r3, r0
 8017bf2:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8017bf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3718      	adds	r7, #24
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd80      	pop	{r7, pc}

08017c00 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b086      	sub	sp, #24
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	60f8      	str	r0, [r7, #12]
 8017c08:	460b      	mov	r3, r1
 8017c0a:	607a      	str	r2, [r7, #4]
 8017c0c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8017c12:	897b      	ldrh	r3, [r7, #10]
 8017c14:	2b16      	cmp	r3, #22
 8017c16:	d802      	bhi.n	8017c1e <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017c18:	f06f 0309 	mvn.w	r3, #9
 8017c1c:	e076      	b.n	8017d0c <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8017c1e:	68fb      	ldr	r3, [r7, #12]
 8017c20:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8017c2a:	68fa      	ldr	r2, [r7, #12]
 8017c2c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8017c2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8017c34:	68fa      	ldr	r2, [r7, #12]
 8017c36:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8017c38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8017c3e:	68fa      	ldr	r2, [r7, #12]
 8017c40:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8017c42:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8017c48:	68fa      	ldr	r2, [r7, #12]
 8017c4a:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8017c4c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8017c56:	f002 020f 	and.w	r2, r2, #15
 8017c5a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8017c5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8017c62:	68fa      	ldr	r2, [r7, #12]
 8017c64:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8017c66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8017c68:	68fb      	ldr	r3, [r7, #12]
 8017c6a:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8017c6c:	687b      	ldr	r3, [r7, #4]
 8017c6e:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8017c70:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017c74:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8017c76:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8017c80:	f002 0203 	and.w	r2, r2, #3
 8017c84:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8017c86:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	8958      	ldrh	r0, [r3, #10]
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	3309      	adds	r3, #9
 8017c90:	461a      	mov	r2, r3
 8017c92:	2102      	movs	r1, #2
 8017c94:	f7ff fa05 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	330b      	adds	r3, #11
 8017ca2:	461a      	mov	r2, r3
 8017ca4:	2102      	movs	r1, #2
 8017ca6:	f7ff fa47 	bl	8017138 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	330d      	adds	r3, #13
 8017cb4:	461a      	mov	r2, r3
 8017cb6:	2102      	movs	r1, #2
 8017cb8:	f7ff fa3e 	bl	8017138 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	8a18      	ldrh	r0, [r3, #16]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	330f      	adds	r3, #15
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	2102      	movs	r1, #2
 8017cc8:	f7ff f9eb 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8017cd2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017cd6:	b218      	sxth	r0, r3
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	3311      	adds	r3, #17
 8017cdc:	461a      	mov	r2, r3
 8017cde:	2102      	movs	r1, #2
 8017ce0:	f7ff fa2a 	bl	8017138 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	3313      	adds	r3, #19
 8017cee:	461a      	mov	r2, r3
 8017cf0:	2102      	movs	r1, #2
 8017cf2:	f7ff fa21 	bl	8017138 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	3315      	adds	r3, #21
 8017d00:	461a      	mov	r2, r3
 8017d02:	2102      	movs	r1, #2
 8017d04:	f7ff fa18 	bl	8017138 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8017d08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3718      	adds	r7, #24
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b086      	sub	sp, #24
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	607a      	str	r2, [r7, #4]
 8017d20:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017d22:	2300      	movs	r3, #0
 8017d24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8017d26:	89fb      	ldrh	r3, [r7, #14]
 8017d28:	2b16      	cmp	r3, #22
 8017d2a:	d802      	bhi.n	8017d32 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017d2c:	f06f 0309 	mvn.w	r3, #9
 8017d30:	e079      	b.n	8017e26 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8017d32:	68bb      	ldr	r3, [r7, #8]
 8017d34:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	785a      	ldrb	r2, [r3, #1]
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8017d42:	68bb      	ldr	r3, [r7, #8]
 8017d44:	789a      	ldrb	r2, [r3, #2]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8017d4a:	68bb      	ldr	r3, [r7, #8]
 8017d4c:	78da      	ldrb	r2, [r3, #3]
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	791a      	ldrb	r2, [r3, #4]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	3305      	adds	r3, #5
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	f003 030f 	and.w	r3, r3, #15
 8017d64:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8017d6a:	68bb      	ldr	r3, [r7, #8]
 8017d6c:	799a      	ldrb	r2, [r3, #6]
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8017d72:	68bb      	ldr	r3, [r7, #8]
 8017d74:	3307      	adds	r3, #7
 8017d76:	781b      	ldrb	r3, [r3, #0]
 8017d78:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017d7c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8017d82:	68bb      	ldr	r3, [r7, #8]
 8017d84:	3308      	adds	r3, #8
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	f003 0303 	and.w	r3, r3, #3
 8017d8c:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	3309      	adds	r3, #9
 8017d96:	4619      	mov	r1, r3
 8017d98:	2002      	movs	r0, #2
 8017d9a:	f7ff f9ad 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8017d9e:	4603      	mov	r3, r0
 8017da0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8017da6:	68bb      	ldr	r3, [r7, #8]
 8017da8:	330b      	adds	r3, #11
 8017daa:	4619      	mov	r1, r3
 8017dac:	2002      	movs	r0, #2
 8017dae:	f7ff f9ef 	bl	8017190 <VL53L1_i2c_decode_int16_t>
 8017db2:	4603      	mov	r3, r0
 8017db4:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	330d      	adds	r3, #13
 8017dbe:	4619      	mov	r1, r3
 8017dc0:	2002      	movs	r0, #2
 8017dc2:	f7ff f9e5 	bl	8017190 <VL53L1_i2c_decode_int16_t>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8017dce:	68bb      	ldr	r3, [r7, #8]
 8017dd0:	330f      	adds	r3, #15
 8017dd2:	4619      	mov	r1, r3
 8017dd4:	2002      	movs	r0, #2
 8017dd6:	f7ff f98f 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8017dda:	4603      	mov	r3, r0
 8017ddc:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	3311      	adds	r3, #17
 8017de6:	4619      	mov	r1, r3
 8017de8:	2002      	movs	r0, #2
 8017dea:	f7ff f9d1 	bl	8017190 <VL53L1_i2c_decode_int16_t>
 8017dee:	4603      	mov	r3, r0
 8017df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017df4:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8017dfa:	68bb      	ldr	r3, [r7, #8]
 8017dfc:	3313      	adds	r3, #19
 8017dfe:	4619      	mov	r1, r3
 8017e00:	2002      	movs	r0, #2
 8017e02:	f7ff f9c5 	bl	8017190 <VL53L1_i2c_decode_int16_t>
 8017e06:	4603      	mov	r3, r0
 8017e08:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	3315      	adds	r3, #21
 8017e12:	4619      	mov	r1, r3
 8017e14:	2002      	movs	r0, #2
 8017e16:	f7ff f9bb 	bl	8017190 <VL53L1_i2c_decode_int16_t>
 8017e1a:	4603      	mov	r3, r0
 8017e1c:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8017e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3718      	adds	r7, #24
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	bd80      	pop	{r7, pc}

08017e2e <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8017e2e:	b580      	push	{r7, lr}
 8017e30:	b088      	sub	sp, #32
 8017e32:	af00      	add	r7, sp, #0
 8017e34:	6078      	str	r0, [r7, #4]
 8017e36:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017e38:	2300      	movs	r3, #0
 8017e3a:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8017e3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d108      	bne.n	8017e56 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8017e44:	f107 0208 	add.w	r2, r7, #8
 8017e48:	2317      	movs	r3, #23
 8017e4a:	210d      	movs	r1, #13
 8017e4c:	6878      	ldr	r0, [r7, #4]
 8017e4e:	f7f3 fdea 	bl	800ba26 <VL53L1_ReadMulti>
 8017e52:	4603      	mov	r3, r0
 8017e54:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8017e56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d108      	bne.n	8017e70 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8017e5e:	f107 0308 	add.w	r3, r7, #8
 8017e62:	683a      	ldr	r2, [r7, #0]
 8017e64:	4619      	mov	r1, r3
 8017e66:	2017      	movs	r0, #23
 8017e68:	f7ff ff54 	bl	8017d14 <VL53L1_i2c_decode_customer_nvm_managed>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8017e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017e74:	4618      	mov	r0, r3
 8017e76:	3720      	adds	r7, #32
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	bd80      	pop	{r7, pc}

08017e7c <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b086      	sub	sp, #24
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	460b      	mov	r3, r1
 8017e86:	607a      	str	r2, [r7, #4]
 8017e88:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8017e8e:	897b      	ldrh	r3, [r7, #10]
 8017e90:	2b1f      	cmp	r3, #31
 8017e92:	d802      	bhi.n	8017e9a <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017e94:	f06f 0309 	mvn.w	r3, #9
 8017e98:	e0cf      	b.n	801803a <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	881b      	ldrh	r3, [r3, #0]
 8017e9e:	687a      	ldr	r2, [r7, #4]
 8017ea0:	2102      	movs	r1, #2
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	f7ff f8fd 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8017eb0:	f002 0201 	and.w	r2, r2, #1
 8017eb4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8017eb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8017ec0:	f002 020f 	and.w	r2, r2, #15
 8017ec4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8017ec6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8017ed0:	f002 020f 	and.w	r2, r2, #15
 8017ed4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8017ed6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8017ee0:	f002 021f 	and.w	r2, r2, #31
 8017ee4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8017ee6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8017ef0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017ef4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8017ef6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8017f00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017f04:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8017f06:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8017f10:	f002 0201 	and.w	r2, r2, #1
 8017f14:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8017f16:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8017f1c:	68fa      	ldr	r2, [r7, #12]
 8017f1e:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8017f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8017f22:	68fb      	ldr	r3, [r7, #12]
 8017f24:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8017f2a:	f002 0201 	and.w	r2, r2, #1
 8017f2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8017f30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8017f3a:	f002 0203 	and.w	r2, r2, #3
 8017f3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8017f40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8017f4a:	f002 021f 	and.w	r2, r2, #31
 8017f4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8017f50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8017f56:	687b      	ldr	r3, [r7, #4]
 8017f58:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8017f5a:	f002 0203 	and.w	r2, r2, #3
 8017f5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8017f60:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8017f6a:	f002 0203 	and.w	r2, r2, #3
 8017f6e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8017f70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8017f72:	68fb      	ldr	r3, [r7, #12]
 8017f74:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8017f7a:	f002 0207 	and.w	r2, r2, #7
 8017f7e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8017f80:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8017f86:	687b      	ldr	r3, [r7, #4]
 8017f88:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8017f8a:	f002 021f 	and.w	r2, r2, #31
 8017f8e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8017f90:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8017f9a:	f002 0201 	and.w	r2, r2, #1
 8017f9e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8017fa0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8017fa6:	68fa      	ldr	r2, [r7, #12]
 8017fa8:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8017faa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8017fb0:	68fa      	ldr	r2, [r7, #12]
 8017fb2:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8017fb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8017fba:	68fa      	ldr	r2, [r7, #12]
 8017fbc:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8017fbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8017fc4:	68fa      	ldr	r2, [r7, #12]
 8017fc6:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8017fc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8017fce:	68fa      	ldr	r2, [r7, #12]
 8017fd0:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8017fd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8017fd8:	68fa      	ldr	r2, [r7, #12]
 8017fda:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8017fdc:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	8b18      	ldrh	r0, [r3, #24]
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	3318      	adds	r3, #24
 8017fe6:	461a      	mov	r2, r3
 8017fe8:	2102      	movs	r1, #2
 8017fea:	f7ff f85a 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8017ff2:	68fa      	ldr	r2, [r7, #12]
 8017ff4:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8017ff6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8017ffc:	68fa      	ldr	r2, [r7, #12]
 8017ffe:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8018000:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 801800a:	f002 020f 	and.w	r2, r2, #15
 801800e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8018010:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8018016:	68fa      	ldr	r2, [r7, #12]
 8018018:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 801801a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 801801c:	68fb      	ldr	r3, [r7, #12]
 801801e:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8018024:	f002 020f 	and.w	r2, r2, #15
 8018028:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 801802a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 801802c:	687b      	ldr	r3, [r7, #4]
 801802e:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8018030:	68fa      	ldr	r2, [r7, #12]
 8018032:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8018034:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8018036:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801803a:	4618      	mov	r0, r3
 801803c:	3718      	adds	r7, #24
 801803e:	46bd      	mov	sp, r7
 8018040:	bd80      	pop	{r7, pc}

08018042 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8018042:	b580      	push	{r7, lr}
 8018044:	b086      	sub	sp, #24
 8018046:	af00      	add	r7, sp, #0
 8018048:	60f8      	str	r0, [r7, #12]
 801804a:	460b      	mov	r3, r1
 801804c:	607a      	str	r2, [r7, #4]
 801804e:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018050:	2300      	movs	r3, #0
 8018052:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8018054:	897b      	ldrh	r3, [r7, #10]
 8018056:	2b15      	cmp	r3, #21
 8018058:	d802      	bhi.n	8018060 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801805a:	f06f 0309 	mvn.w	r3, #9
 801805e:	e070      	b.n	8018142 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8018068:	687b      	ldr	r3, [r7, #4]
 801806a:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 801806c:	68fa      	ldr	r2, [r7, #12]
 801806e:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8018070:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8018076:	68fa      	ldr	r2, [r7, #12]
 8018078:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 801807a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 801807c:	68fb      	ldr	r3, [r7, #12]
 801807e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8018080:	687b      	ldr	r3, [r7, #4]
 8018082:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8018084:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018088:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801808a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8018090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018094:	b298      	uxth	r0, r3
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	3304      	adds	r3, #4
 801809a:	461a      	mov	r2, r3
 801809c:	2102      	movs	r1, #2
 801809e:	f7ff f800 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 80180a2:	68fb      	ldr	r3, [r7, #12]
 80180a4:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 80180aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80180ae:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80180b0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 80180b6:	68fa      	ldr	r2, [r7, #12]
 80180b8:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 80180ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 80180c0:	68fa      	ldr	r2, [r7, #12]
 80180c2:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80180c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 80180c6:	68fb      	ldr	r3, [r7, #12]
 80180c8:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 80180ce:	f002 0201 	and.w	r2, r2, #1
 80180d2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80180d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 80180de:	f002 0207 	and.w	r2, r2, #7
 80180e2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80180e4:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	8998      	ldrh	r0, [r3, #12]
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	330c      	adds	r3, #12
 80180ee:	461a      	mov	r2, r3
 80180f0:	2102      	movs	r1, #2
 80180f2:	f7fe ffd6 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80180f6:	68fb      	ldr	r3, [r7, #12]
 80180f8:	89d8      	ldrh	r0, [r3, #14]
 80180fa:	687b      	ldr	r3, [r7, #4]
 80180fc:	330e      	adds	r3, #14
 80180fe:	461a      	mov	r2, r3
 8018100:	2102      	movs	r1, #2
 8018102:	f7fe ffce 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	8a18      	ldrh	r0, [r3, #16]
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	3310      	adds	r3, #16
 801810e:	461a      	mov	r2, r3
 8018110:	2102      	movs	r1, #2
 8018112:	f7fe ffc6 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 801811a:	68fa      	ldr	r2, [r7, #12]
 801811c:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 801811e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8018124:	68fa      	ldr	r2, [r7, #12]
 8018126:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8018128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 801812e:	68fa      	ldr	r2, [r7, #12]
 8018130:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8018132:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8018138:	68fa      	ldr	r2, [r7, #12]
 801813a:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 801813c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801813e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018142:	4618      	mov	r0, r3
 8018144:	3718      	adds	r7, #24
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}

0801814a <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801814a:	b580      	push	{r7, lr}
 801814c:	b086      	sub	sp, #24
 801814e:	af00      	add	r7, sp, #0
 8018150:	60f8      	str	r0, [r7, #12]
 8018152:	460b      	mov	r3, r1
 8018154:	607a      	str	r2, [r7, #4]
 8018156:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018158:	2300      	movs	r3, #0
 801815a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 801815c:	897b      	ldrh	r3, [r7, #10]
 801815e:	2b16      	cmp	r3, #22
 8018160:	d802      	bhi.n	8018168 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8018162:	f06f 0309 	mvn.w	r3, #9
 8018166:	e06e      	b.n	8018246 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	781b      	ldrb	r3, [r3, #0]
 801816c:	f003 030f 	and.w	r3, r3, #15
 8018170:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 801817a:	68fa      	ldr	r2, [r7, #12]
 801817c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 801817e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8018180:	68fb      	ldr	r3, [r7, #12]
 8018182:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8018188:	f002 020f 	and.w	r2, r2, #15
 801818c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801818e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8018194:	68fa      	ldr	r2, [r7, #12]
 8018196:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8018198:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801819a:	68fb      	ldr	r3, [r7, #12]
 801819c:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 80181a2:	f002 020f 	and.w	r2, r2, #15
 80181a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 80181a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 80181ae:	68fa      	ldr	r2, [r7, #12]
 80181b0:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 80181b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 80181bc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80181c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80181c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 80181cc:	f002 020f 	and.w	r2, r2, #15
 80181d0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 80181d2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 80181d8:	68fa      	ldr	r2, [r7, #12]
 80181da:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 80181dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 80181e6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80181ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80181ec:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80181ee:	68fb      	ldr	r3, [r7, #12]
 80181f0:	8958      	ldrh	r0, [r3, #10]
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	330a      	adds	r3, #10
 80181f6:	461a      	mov	r2, r3
 80181f8:	2102      	movs	r1, #2
 80181fa:	f7fe ff52 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	8998      	ldrh	r0, [r3, #12]
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	330c      	adds	r3, #12
 8018206:	461a      	mov	r2, r3
 8018208:	2102      	movs	r1, #2
 801820a:	f7fe ff4a 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8018212:	68fa      	ldr	r2, [r7, #12]
 8018214:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8018216:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 801821c:	68fa      	ldr	r2, [r7, #12]
 801821e:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8018220:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8018222:	68fb      	ldr	r3, [r7, #12]
 8018224:	6918      	ldr	r0, [r3, #16]
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	3312      	adds	r3, #18
 801822a:	461a      	mov	r2, r3
 801822c:	2104      	movs	r1, #4
 801822e:	f7fe ffd8 	bl	80171e2 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 801823a:	f002 0201 	and.w	r2, r2, #1
 801823e:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8018240:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8018242:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018246:	4618      	mov	r0, r3
 8018248:	3718      	adds	r7, #24
 801824a:	46bd      	mov	sp, r7
 801824c:	bd80      	pop	{r7, pc}

0801824e <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801824e:	b580      	push	{r7, lr}
 8018250:	b086      	sub	sp, #24
 8018252:	af00      	add	r7, sp, #0
 8018254:	60f8      	str	r0, [r7, #12]
 8018256:	460b      	mov	r3, r1
 8018258:	607a      	str	r2, [r7, #4]
 801825a:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801825c:	2300      	movs	r3, #0
 801825e:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8018260:	897b      	ldrh	r3, [r7, #10]
 8018262:	2b11      	cmp	r3, #17
 8018264:	d802      	bhi.n	801826c <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8018266:	f06f 0309 	mvn.w	r3, #9
 801826a:	e071      	b.n	8018350 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	f003 0303 	and.w	r3, r3, #3
 8018274:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8018276:	687b      	ldr	r3, [r7, #4]
 8018278:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	8858      	ldrh	r0, [r3, #2]
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	3301      	adds	r3, #1
 8018282:	461a      	mov	r2, r3
 8018284:	2102      	movs	r1, #2
 8018286:	f7fe ff0c 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	8898      	ldrh	r0, [r3, #4]
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	3303      	adds	r3, #3
 8018292:	461a      	mov	r2, r3
 8018294:	2102      	movs	r1, #2
 8018296:	f7fe ff04 	bl	80170a2 <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 80182a2:	f002 0201 	and.w	r2, r2, #1
 80182a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80182a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 80182aa:	68fb      	ldr	r3, [r7, #12]
 80182ac:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 80182b2:	f002 0207 	and.w	r2, r2, #7
 80182b6:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 80182b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 80182be:	68fa      	ldr	r2, [r7, #12]
 80182c0:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 80182c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 80182c8:	68fa      	ldr	r2, [r7, #12]
 80182ca:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 80182cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80182ce:	68fb      	ldr	r3, [r7, #12]
 80182d0:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 80182d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80182da:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 80182dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 80182e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80182ea:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80182ec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80182f6:	f002 0203 	and.w	r2, r2, #3
 80182fa:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80182fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8018306:	f002 0203 	and.w	r2, r2, #3
 801830a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801830c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8018316:	f002 020f 	and.w	r2, r2, #15
 801831a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801831c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8018322:	68fa      	ldr	r2, [r7, #12]
 8018324:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8018326:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 801832c:	68fa      	ldr	r2, [r7, #12]
 801832e:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8018330:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8018336:	68fa      	ldr	r2, [r7, #12]
 8018338:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 801833a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8018344:	f002 0203 	and.w	r2, r2, #3
 8018348:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801834a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801834c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018350:	4618      	mov	r0, r3
 8018352:	3718      	adds	r7, #24
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}

08018358 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8018358:	b480      	push	{r7}
 801835a:	b087      	sub	sp, #28
 801835c:	af00      	add	r7, sp, #0
 801835e:	60f8      	str	r0, [r7, #12]
 8018360:	460b      	mov	r3, r1
 8018362:	607a      	str	r2, [r7, #4]
 8018364:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018366:	2300      	movs	r3, #0
 8018368:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 801836a:	897b      	ldrh	r3, [r7, #10]
 801836c:	2b04      	cmp	r3, #4
 801836e:	d802      	bhi.n	8018376 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8018370:	f06f 0309 	mvn.w	r3, #9
 8018374:	e025      	b.n	80183c2 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	781b      	ldrb	r3, [r3, #0]
 801837a:	f003 0301 	and.w	r3, r3, #1
 801837e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801838c:	f002 0201 	and.w	r2, r2, #1
 8018390:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8018392:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8018394:	68fb      	ldr	r3, [r7, #12]
 8018396:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801839c:	f002 0201 	and.w	r2, r2, #1
 80183a0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80183a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80183a8:	687b      	ldr	r3, [r7, #4]
 80183aa:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 80183ac:	f002 0203 	and.w	r2, r2, #3
 80183b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80183b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	3304      	adds	r3, #4
		pdata->system__mode_start;
 80183b8:	68fa      	ldr	r2, [r7, #12]
 80183ba:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80183bc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80183be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	371c      	adds	r7, #28
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr

080183ce <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 80183ce:	b580      	push	{r7, lr}
 80183d0:	b084      	sub	sp, #16
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6078      	str	r0, [r7, #4]
 80183d6:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80183d8:	2300      	movs	r3, #0
 80183da:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80183dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	d108      	bne.n	80183f6 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 80183e4:	f107 0308 	add.w	r3, r7, #8
 80183e8:	461a      	mov	r2, r3
 80183ea:	2105      	movs	r1, #5
 80183ec:	6838      	ldr	r0, [r7, #0]
 80183ee:	f7ff ffb3 	bl	8018358 <VL53L1_i2c_encode_system_control>
 80183f2:	4603      	mov	r3, r0
 80183f4:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80183f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80183fa:	2b00      	cmp	r3, #0
 80183fc:	d108      	bne.n	8018410 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80183fe:	f107 0208 	add.w	r2, r7, #8
 8018402:	2305      	movs	r3, #5
 8018404:	2183      	movs	r1, #131	@ 0x83
 8018406:	6878      	ldr	r0, [r7, #4]
 8018408:	f7f3 fae7 	bl	800b9da <VL53L1_WriteMulti>
 801840c:	4603      	mov	r3, r0
 801840e:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8018410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018414:	4618      	mov	r0, r3
 8018416:	3710      	adds	r7, #16
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}

0801841c <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b086      	sub	sp, #24
 8018420:	af00      	add	r7, sp, #0
 8018422:	4603      	mov	r3, r0
 8018424:	60b9      	str	r1, [r7, #8]
 8018426:	607a      	str	r2, [r7, #4]
 8018428:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801842a:	2300      	movs	r3, #0
 801842c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 801842e:	89fb      	ldrh	r3, [r7, #14]
 8018430:	2b2b      	cmp	r3, #43	@ 0x2b
 8018432:	d802      	bhi.n	801843a <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8018434:	f06f 0309 	mvn.w	r3, #9
 8018438:	e0e2      	b.n	8018600 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 801843a:	68bb      	ldr	r3, [r7, #8]
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018442:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	785a      	ldrb	r2, [r3, #1]
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8018450:	68bb      	ldr	r3, [r7, #8]
 8018452:	3302      	adds	r3, #2
 8018454:	781b      	ldrb	r3, [r3, #0]
 8018456:	f003 030f 	and.w	r3, r3, #15
 801845a:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	78da      	ldrb	r2, [r3, #3]
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8018468:	68bb      	ldr	r3, [r7, #8]
 801846a:	3304      	adds	r3, #4
 801846c:	4619      	mov	r1, r3
 801846e:	2002      	movs	r0, #2
 8018470:	f7fe fe42 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018474:	4603      	mov	r3, r0
 8018476:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 801847c:	68bb      	ldr	r3, [r7, #8]
 801847e:	3306      	adds	r3, #6
 8018480:	4619      	mov	r1, r3
 8018482:	2002      	movs	r0, #2
 8018484:	f7fe fe38 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018488:	4603      	mov	r3, r0
 801848a:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	3308      	adds	r3, #8
 8018494:	4619      	mov	r1, r3
 8018496:	2002      	movs	r0, #2
 8018498:	f7fe fe2e 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 801849c:	4603      	mov	r3, r0
 801849e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	330a      	adds	r3, #10
 80184a8:	4619      	mov	r1, r3
 80184aa:	2002      	movs	r0, #2
 80184ac:	f7fe fe24 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80184b0:	4603      	mov	r3, r0
 80184b2:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	330c      	adds	r3, #12
 80184bc:	4619      	mov	r1, r3
 80184be:	2002      	movs	r0, #2
 80184c0:	f7fe fe1a 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80184c4:	4603      	mov	r3, r0
 80184c6:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 80184cc:	68bb      	ldr	r3, [r7, #8]
 80184ce:	330e      	adds	r3, #14
 80184d0:	4619      	mov	r1, r3
 80184d2:	2002      	movs	r0, #2
 80184d4:	f7fe fe10 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80184d8:	4603      	mov	r3, r0
 80184da:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 80184e0:	68bb      	ldr	r3, [r7, #8]
 80184e2:	3310      	adds	r3, #16
 80184e4:	4619      	mov	r1, r3
 80184e6:	2002      	movs	r0, #2
 80184e8:	f7fe fe06 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80184ec:	4603      	mov	r3, r0
 80184ee:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	3312      	adds	r3, #18
 80184f8:	4619      	mov	r1, r3
 80184fa:	2002      	movs	r0, #2
 80184fc:	f7fe fdfc 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018500:	4603      	mov	r3, r0
 8018502:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	3314      	adds	r3, #20
 801850c:	4619      	mov	r1, r3
 801850e:	2002      	movs	r0, #2
 8018510:	f7fe fdf2 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018514:	4603      	mov	r3, r0
 8018516:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801851c:	68bb      	ldr	r3, [r7, #8]
 801851e:	3316      	adds	r3, #22
 8018520:	4619      	mov	r1, r3
 8018522:	2002      	movs	r0, #2
 8018524:	f7fe fde8 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018528:	4603      	mov	r3, r0
 801852a:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8018530:	68bb      	ldr	r3, [r7, #8]
 8018532:	3318      	adds	r3, #24
 8018534:	4619      	mov	r1, r3
 8018536:	2002      	movs	r0, #2
 8018538:	f7fe fdde 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 801853c:	4603      	mov	r3, r0
 801853e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8018544:	68bb      	ldr	r3, [r7, #8]
 8018546:	331a      	adds	r3, #26
 8018548:	4619      	mov	r1, r3
 801854a:	2002      	movs	r0, #2
 801854c:	f7fe fdd4 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018550:	4603      	mov	r3, r0
 8018552:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8018558:	68bb      	ldr	r3, [r7, #8]
 801855a:	331c      	adds	r3, #28
 801855c:	4619      	mov	r1, r3
 801855e:	2002      	movs	r0, #2
 8018560:	f7fe fdca 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018564:	4603      	mov	r3, r0
 8018566:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801856c:	68bb      	ldr	r3, [r7, #8]
 801856e:	331e      	adds	r3, #30
 8018570:	4619      	mov	r1, r3
 8018572:	2002      	movs	r0, #2
 8018574:	f7fe fdc0 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018578:	4603      	mov	r3, r0
 801857a:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8018580:	68bb      	ldr	r3, [r7, #8]
 8018582:	3320      	adds	r3, #32
 8018584:	4619      	mov	r1, r3
 8018586:	2002      	movs	r0, #2
 8018588:	f7fe fdb6 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 801858c:	4603      	mov	r3, r0
 801858e:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8018594:	68bb      	ldr	r3, [r7, #8]
 8018596:	3322      	adds	r3, #34	@ 0x22
 8018598:	4619      	mov	r1, r3
 801859a:	2002      	movs	r0, #2
 801859c:	f7fe fdac 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80185a0:	4603      	mov	r3, r0
 80185a2:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	3324      	adds	r3, #36	@ 0x24
 80185ac:	4619      	mov	r1, r3
 80185ae:	2002      	movs	r0, #2
 80185b0:	f7fe fda2 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80185b4:	4603      	mov	r3, r0
 80185b6:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 80185b8:	687b      	ldr	r3, [r7, #4]
 80185ba:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 80185bc:	68bb      	ldr	r3, [r7, #8]
 80185be:	3326      	adds	r3, #38	@ 0x26
 80185c0:	4619      	mov	r1, r3
 80185c2:	2002      	movs	r0, #2
 80185c4:	f7fe fd98 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80185c8:	4603      	mov	r3, r0
 80185ca:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 80185d0:	68bb      	ldr	r3, [r7, #8]
 80185d2:	3328      	adds	r3, #40	@ 0x28
 80185d4:	4619      	mov	r1, r3
 80185d6:	2002      	movs	r0, #2
 80185d8:	f7fe fd8e 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80185dc:	4603      	mov	r3, r0
 80185de:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 80185e4:	68bb      	ldr	r3, [r7, #8]
 80185e6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 80185f0:	68bb      	ldr	r3, [r7, #8]
 80185f2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80185fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018600:	4618      	mov	r0, r3
 8018602:	3718      	adds	r7, #24
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}

08018608 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b086      	sub	sp, #24
 801860c:	af00      	add	r7, sp, #0
 801860e:	4603      	mov	r3, r0
 8018610:	60b9      	str	r1, [r7, #8]
 8018612:	607a      	str	r2, [r7, #4]
 8018614:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018616:	2300      	movs	r3, #0
 8018618:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 801861a:	89fb      	ldrh	r3, [r7, #14]
 801861c:	2b20      	cmp	r3, #32
 801861e:	d802      	bhi.n	8018626 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8018620:	f06f 0309 	mvn.w	r3, #9
 8018624:	e04d      	b.n	80186c2 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8018626:	68b9      	ldr	r1, [r7, #8]
 8018628:	2004      	movs	r0, #4
 801862a:	f7fe fe04 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 801862e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8018634:	68bb      	ldr	r3, [r7, #8]
 8018636:	3304      	adds	r3, #4
 8018638:	4619      	mov	r1, r3
 801863a:	2004      	movs	r0, #4
 801863c:	f7fe fdfb 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 8018640:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	3308      	adds	r3, #8
 801864a:	4619      	mov	r1, r3
 801864c:	2004      	movs	r0, #4
 801864e:	f7fe fe0f 	bl	8017270 <VL53L1_i2c_decode_int32_t>
 8018652:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	330c      	adds	r3, #12
 801865c:	4619      	mov	r1, r3
 801865e:	2004      	movs	r0, #4
 8018660:	f7fe fde9 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 8018664:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 801866a:	68bb      	ldr	r3, [r7, #8]
 801866c:	3310      	adds	r3, #16
 801866e:	4619      	mov	r1, r3
 8018670:	2004      	movs	r0, #4
 8018672:	f7fe fde0 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 8018676:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801867c:	68bb      	ldr	r3, [r7, #8]
 801867e:	3314      	adds	r3, #20
 8018680:	4619      	mov	r1, r3
 8018682:	2004      	movs	r0, #4
 8018684:	f7fe fdd7 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 8018688:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 801868e:	68bb      	ldr	r3, [r7, #8]
 8018690:	3318      	adds	r3, #24
 8018692:	4619      	mov	r1, r3
 8018694:	2004      	movs	r0, #4
 8018696:	f7fe fdeb 	bl	8017270 <VL53L1_i2c_decode_int32_t>
 801869a:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	331c      	adds	r3, #28
 80186a4:	4619      	mov	r1, r3
 80186a6:	2004      	movs	r0, #4
 80186a8:	f7fe fdc5 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 80186ac:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 80186be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80186c2:	4618      	mov	r0, r3
 80186c4:	3718      	adds	r7, #24
 80186c6:	46bd      	mov	sp, r7
 80186c8:	bd80      	pop	{r7, pc}

080186ca <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 80186ca:	b580      	push	{r7, lr}
 80186cc:	b086      	sub	sp, #24
 80186ce:	af00      	add	r7, sp, #0
 80186d0:	4603      	mov	r3, r0
 80186d2:	60b9      	str	r1, [r7, #8]
 80186d4:	607a      	str	r2, [r7, #4]
 80186d6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80186d8:	2300      	movs	r3, #0
 80186da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 80186dc:	89fb      	ldrh	r3, [r7, #14]
 80186de:	2b37      	cmp	r3, #55	@ 0x37
 80186e0:	d802      	bhi.n	80186e8 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80186e2:	f06f 0309 	mvn.w	r3, #9
 80186e6:	e15e      	b.n	80189a6 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 80186e8:	68b9      	ldr	r1, [r7, #8]
 80186ea:	2002      	movs	r0, #2
 80186ec:	f7fe fd04 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80186f0:	4603      	mov	r3, r0
 80186f2:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80186f8:	68bb      	ldr	r3, [r7, #8]
 80186fa:	3302      	adds	r3, #2
 80186fc:	781b      	ldrb	r3, [r3, #0]
 80186fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018702:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	3303      	adds	r3, #3
 801870c:	781b      	ldrb	r3, [r3, #0]
 801870e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018712:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8018718:	68bb      	ldr	r3, [r7, #8]
 801871a:	3304      	adds	r3, #4
 801871c:	781b      	ldrb	r3, [r3, #0]
 801871e:	f003 0303 	and.w	r3, r3, #3
 8018722:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8018728:	68bb      	ldr	r3, [r7, #8]
 801872a:	3305      	adds	r3, #5
 801872c:	781b      	ldrb	r3, [r3, #0]
 801872e:	f003 0301 	and.w	r3, r3, #1
 8018732:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8018738:	68bb      	ldr	r3, [r7, #8]
 801873a:	3306      	adds	r3, #6
 801873c:	781b      	ldrb	r3, [r3, #0]
 801873e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018742:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	3307      	adds	r3, #7
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018752:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8018758:	68bb      	ldr	r3, [r7, #8]
 801875a:	3308      	adds	r3, #8
 801875c:	4619      	mov	r1, r3
 801875e:	2002      	movs	r0, #2
 8018760:	f7fe fcca 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018764:	4603      	mov	r3, r0
 8018766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801876a:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8018770:	68bb      	ldr	r3, [r7, #8]
 8018772:	330a      	adds	r3, #10
 8018774:	781b      	ldrb	r3, [r3, #0]
 8018776:	f003 0303 	and.w	r3, r3, #3
 801877a:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8018780:	68bb      	ldr	r3, [r7, #8]
 8018782:	330b      	adds	r3, #11
 8018784:	781b      	ldrb	r3, [r3, #0]
 8018786:	f003 0303 	and.w	r3, r3, #3
 801878a:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8018790:	68bb      	ldr	r3, [r7, #8]
 8018792:	330c      	adds	r3, #12
 8018794:	781b      	ldrb	r3, [r3, #0]
 8018796:	f003 030f 	and.w	r3, r3, #15
 801879a:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 80187a0:	68bb      	ldr	r3, [r7, #8]
 80187a2:	330d      	adds	r3, #13
 80187a4:	781b      	ldrb	r3, [r3, #0]
 80187a6:	f003 0307 	and.w	r3, r3, #7
 80187aa:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 80187b0:	68bb      	ldr	r3, [r7, #8]
 80187b2:	330e      	adds	r3, #14
 80187b4:	781b      	ldrb	r3, [r3, #0]
 80187b6:	f003 0301 	and.w	r3, r3, #1
 80187ba:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 80187c0:	68bb      	ldr	r3, [r7, #8]
 80187c2:	330f      	adds	r3, #15
 80187c4:	781b      	ldrb	r3, [r3, #0]
 80187c6:	f003 0303 	and.w	r3, r3, #3
 80187ca:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 80187d0:	68bb      	ldr	r3, [r7, #8]
 80187d2:	7c1a      	ldrb	r2, [r3, #16]
 80187d4:	687b      	ldr	r3, [r7, #4]
 80187d6:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 80187d8:	68bb      	ldr	r3, [r7, #8]
 80187da:	7c5a      	ldrb	r2, [r3, #17]
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	3312      	adds	r3, #18
 80187e4:	4619      	mov	r1, r3
 80187e6:	2002      	movs	r0, #2
 80187e8:	f7fe fc86 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80187ec:	4603      	mov	r3, r0
 80187ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80187f2:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80187f8:	68bb      	ldr	r3, [r7, #8]
 80187fa:	3316      	adds	r3, #22
 80187fc:	4619      	mov	r1, r3
 80187fe:	2002      	movs	r0, #2
 8018800:	f7fe fc7a 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018804:	4603      	mov	r3, r0
 8018806:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801880c:	68bb      	ldr	r3, [r7, #8]
 801880e:	3318      	adds	r3, #24
 8018810:	4619      	mov	r1, r3
 8018812:	2002      	movs	r0, #2
 8018814:	f7fe fc70 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 8018818:	4603      	mov	r3, r0
 801881a:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8018820:	68bb      	ldr	r3, [r7, #8]
 8018822:	331a      	adds	r3, #26
 8018824:	781b      	ldrb	r3, [r3, #0]
 8018826:	f003 0301 	and.w	r3, r3, #1
 801882a:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	331b      	adds	r3, #27
 8018834:	781b      	ldrb	r3, [r3, #0]
 8018836:	f003 0307 	and.w	r3, r3, #7
 801883a:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	7f1a      	ldrb	r2, [r3, #28]
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8018848:	68bb      	ldr	r3, [r7, #8]
 801884a:	7f5a      	ldrb	r2, [r3, #29]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	331e      	adds	r3, #30
 8018854:	781b      	ldrb	r3, [r3, #0]
 8018856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801885a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8018860:	68bb      	ldr	r3, [r7, #8]
 8018862:	331f      	adds	r3, #31
 8018864:	781b      	ldrb	r3, [r3, #0]
 8018866:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801886a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	3320      	adds	r3, #32
 8018874:	781b      	ldrb	r3, [r3, #0]
 8018876:	f003 0303 	and.w	r3, r3, #3
 801887a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8018880:	68bb      	ldr	r3, [r7, #8]
 8018882:	3321      	adds	r3, #33	@ 0x21
 8018884:	781b      	ldrb	r3, [r3, #0]
 8018886:	f003 030f 	and.w	r3, r3, #15
 801888a:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8018890:	68bb      	ldr	r3, [r7, #8]
 8018892:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801889c:	68bb      	ldr	r3, [r7, #8]
 801889e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 80188b4:	68bb      	ldr	r3, [r7, #8]
 80188b6:	3325      	adds	r3, #37	@ 0x25
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	f003 0301 	and.w	r3, r3, #1
 80188be:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	3326      	adds	r3, #38	@ 0x26
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	f003 0303 	and.w	r3, r3, #3
 80188d0:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 80188d2:	687b      	ldr	r3, [r7, #4]
 80188d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 80188d8:	68bb      	ldr	r3, [r7, #8]
 80188da:	3327      	adds	r3, #39	@ 0x27
 80188dc:	781b      	ldrb	r3, [r3, #0]
 80188de:	f003 031f 	and.w	r3, r3, #31
 80188e2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	3328      	adds	r3, #40	@ 0x28
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	f003 031f 	and.w	r3, r3, #31
 80188f4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80188fc:	68bb      	ldr	r3, [r7, #8]
 80188fe:	3329      	adds	r3, #41	@ 0x29
 8018900:	781b      	ldrb	r3, [r3, #0]
 8018902:	f003 031f 	and.w	r3, r3, #31
 8018906:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	332a      	adds	r3, #42	@ 0x2a
 8018912:	781b      	ldrb	r3, [r3, #0]
 8018914:	f003 0301 	and.w	r3, r3, #1
 8018918:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8018920:	68bb      	ldr	r3, [r7, #8]
 8018922:	332b      	adds	r3, #43	@ 0x2b
 8018924:	781b      	ldrb	r3, [r3, #0]
 8018926:	f003 0301 	and.w	r3, r3, #1
 801892a:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	332c      	adds	r3, #44	@ 0x2c
 8018936:	781b      	ldrb	r3, [r3, #0]
 8018938:	f003 0303 	and.w	r3, r3, #3
 801893c:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 8018944:	68bb      	ldr	r3, [r7, #8]
 8018946:	332d      	adds	r3, #45	@ 0x2d
 8018948:	781b      	ldrb	r3, [r3, #0]
 801894a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801894e:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	332e      	adds	r3, #46	@ 0x2e
 801895a:	4619      	mov	r1, r3
 801895c:	2004      	movs	r0, #4
 801895e:	f7fe fc6a 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 8018962:	4603      	mov	r3, r0
 8018964:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	3332      	adds	r3, #50	@ 0x32
 8018970:	4619      	mov	r1, r3
 8018972:	2004      	movs	r0, #4
 8018974:	f7fe fc5f 	bl	8017236 <VL53L1_i2c_decode_uint32_t>
 8018978:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801897e:	68bb      	ldr	r3, [r7, #8]
 8018980:	3336      	adds	r3, #54	@ 0x36
 8018982:	781b      	ldrb	r3, [r3, #0]
 8018984:	f003 0301 	and.w	r3, r3, #1
 8018988:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8018990:	68bb      	ldr	r3, [r7, #8]
 8018992:	3337      	adds	r3, #55	@ 0x37
 8018994:	781b      	ldrb	r3, [r3, #0]
 8018996:	f003 0301 	and.w	r3, r3, #1
 801899a:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 80189a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189a6:	4618      	mov	r0, r3
 80189a8:	3718      	adds	r7, #24
 80189aa:	46bd      	mov	sp, r7
 80189ac:	bd80      	pop	{r7, pc}

080189ae <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 80189ae:	b580      	push	{r7, lr}
 80189b0:	b086      	sub	sp, #24
 80189b2:	af00      	add	r7, sp, #0
 80189b4:	4603      	mov	r3, r0
 80189b6:	60b9      	str	r1, [r7, #8]
 80189b8:	607a      	str	r2, [r7, #4]
 80189ba:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80189bc:	2300      	movs	r3, #0
 80189be:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 80189c0:	89fb      	ldrh	r3, [r7, #14]
 80189c2:	2b30      	cmp	r3, #48	@ 0x30
 80189c4:	d802      	bhi.n	80189cc <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80189c6:	f06f 0309 	mvn.w	r3, #9
 80189ca:	e112      	b.n	8018bf2 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	785a      	ldrb	r2, [r3, #1]
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 80189dc:	68bb      	ldr	r3, [r7, #8]
 80189de:	789a      	ldrb	r2, [r3, #2]
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 80189e4:	68bb      	ldr	r3, [r7, #8]
 80189e6:	3303      	adds	r3, #3
 80189e8:	4619      	mov	r1, r3
 80189ea:	2002      	movs	r0, #2
 80189ec:	f7fe fb84 	bl	80170f8 <VL53L1_i2c_decode_uint16_t>
 80189f0:	4603      	mov	r3, r0
 80189f2:	461a      	mov	r2, r3
	pdata->identification__module_id =
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 80189f8:	68bb      	ldr	r3, [r7, #8]
 80189fa:	3305      	adds	r3, #5
 80189fc:	781b      	ldrb	r3, [r3, #0]
 80189fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a02:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8018a08:	68bb      	ldr	r3, [r7, #8]
 8018a0a:	3306      	adds	r3, #6
 8018a0c:	781b      	ldrb	r3, [r3, #0]
 8018a0e:	f003 0307 	and.w	r3, r3, #7
 8018a12:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8018a18:	68bb      	ldr	r3, [r7, #8]
 8018a1a:	3307      	adds	r3, #7
 8018a1c:	781b      	ldrb	r3, [r3, #0]
 8018a1e:	f003 0307 	and.w	r3, r3, #7
 8018a22:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	3308      	adds	r3, #8
 8018a2c:	781b      	ldrb	r3, [r3, #0]
 8018a2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a32:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	3309      	adds	r3, #9
 8018a3c:	781b      	ldrb	r3, [r3, #0]
 8018a3e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a42:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	330a      	adds	r3, #10
 8018a4c:	781b      	ldrb	r3, [r3, #0]
 8018a4e:	f003 0301 	and.w	r3, r3, #1
 8018a52:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8018a58:	68bb      	ldr	r3, [r7, #8]
 8018a5a:	330b      	adds	r3, #11
 8018a5c:	781b      	ldrb	r3, [r3, #0]
 8018a5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a62:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8018a68:	68bb      	ldr	r3, [r7, #8]
 8018a6a:	330c      	adds	r3, #12
 8018a6c:	781b      	ldrb	r3, [r3, #0]
 8018a6e:	f003 0301 	and.w	r3, r3, #1
 8018a72:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8018a78:	68bb      	ldr	r3, [r7, #8]
 8018a7a:	330d      	adds	r3, #13
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a82:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8018a88:	68bb      	ldr	r3, [r7, #8]
 8018a8a:	330e      	adds	r3, #14
 8018a8c:	781b      	ldrb	r3, [r3, #0]
 8018a8e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018a92:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8018a98:	68bb      	ldr	r3, [r7, #8]
 8018a9a:	7bda      	ldrb	r2, [r3, #15]
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8018aa0:	68bb      	ldr	r3, [r7, #8]
 8018aa2:	7c1a      	ldrb	r2, [r3, #16]
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8018aa8:	68bb      	ldr	r3, [r7, #8]
 8018aaa:	7c5a      	ldrb	r2, [r3, #17]
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8018ab0:	68bb      	ldr	r3, [r7, #8]
 8018ab2:	7c9a      	ldrb	r2, [r3, #18]
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8018ab8:	68bb      	ldr	r3, [r7, #8]
 8018aba:	7cda      	ldrb	r2, [r3, #19]
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8018ac0:	68bb      	ldr	r3, [r7, #8]
 8018ac2:	7d1a      	ldrb	r2, [r3, #20]
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8018ac8:	68bb      	ldr	r3, [r7, #8]
 8018aca:	7d5a      	ldrb	r2, [r3, #21]
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	7d9a      	ldrb	r2, [r3, #22]
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8018ad8:	68bb      	ldr	r3, [r7, #8]
 8018ada:	7dda      	ldrb	r2, [r3, #23]
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8018ae0:	68bb      	ldr	r3, [r7, #8]
 8018ae2:	7e1a      	ldrb	r2, [r3, #24]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8018ae8:	68bb      	ldr	r3, [r7, #8]
 8018aea:	7e5a      	ldrb	r2, [r3, #25]
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8018af0:	68bb      	ldr	r3, [r7, #8]
 8018af2:	7e9a      	ldrb	r2, [r3, #26]
 8018af4:	687b      	ldr	r3, [r7, #4]
 8018af6:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	7eda      	ldrb	r2, [r3, #27]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8018b00:	68bb      	ldr	r3, [r7, #8]
 8018b02:	7f1a      	ldrb	r2, [r3, #28]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8018b08:	68bb      	ldr	r3, [r7, #8]
 8018b0a:	7f5a      	ldrb	r2, [r3, #29]
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8018b10:	68bb      	ldr	r3, [r7, #8]
 8018b12:	7f9a      	ldrb	r2, [r3, #30]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	7fda      	ldrb	r2, [r3, #31]
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8018b22:	68bb      	ldr	r3, [r7, #8]
 8018b24:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8018b2e:	68bb      	ldr	r3, [r7, #8]
 8018b30:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8018b3a:	68bb      	ldr	r3, [r7, #8]
 8018b3c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8018b46:	68bb      	ldr	r3, [r7, #8]
 8018b48:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8018b52:	68bb      	ldr	r3, [r7, #8]
 8018b54:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8018b5e:	68bb      	ldr	r3, [r7, #8]
 8018b60:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8018b6a:	68bb      	ldr	r3, [r7, #8]
 8018b6c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8018b76:	68bb      	ldr	r3, [r7, #8]
 8018b78:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8018b82:	68bb      	ldr	r3, [r7, #8]
 8018b84:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8018b8e:	68bb      	ldr	r3, [r7, #8]
 8018b90:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8018ba6:	68bb      	ldr	r3, [r7, #8]
 8018ba8:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8018bb2:	68bb      	ldr	r3, [r7, #8]
 8018bb4:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8018bbe:	68bb      	ldr	r3, [r7, #8]
 8018bc0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8018bca:	68bb      	ldr	r3, [r7, #8]
 8018bcc:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8018be2:	68bb      	ldr	r3, [r7, #8]
 8018be4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8018bee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	3718      	adds	r7, #24
 8018bf6:	46bd      	mov	sp, r7
 8018bf8:	bd80      	pop	{r7, pc}

08018bfa <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8018bfa:	b580      	push	{r7, lr}
 8018bfc:	b090      	sub	sp, #64	@ 0x40
 8018bfe:	af00      	add	r7, sp, #0
 8018c00:	6078      	str	r0, [r7, #4]
 8018c02:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018c04:	2300      	movs	r3, #0
 8018c06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8018c0a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d10a      	bne.n	8018c28 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8018c12:	f107 020c 	add.w	r2, r7, #12
 8018c16:	2331      	movs	r3, #49	@ 0x31
 8018c18:	f240 110f 	movw	r1, #271	@ 0x10f
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f7f2 ff02 	bl	800ba26 <VL53L1_ReadMulti>
 8018c22:	4603      	mov	r3, r0
 8018c24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8018c28:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d109      	bne.n	8018c44 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8018c30:	f107 030c 	add.w	r3, r7, #12
 8018c34:	683a      	ldr	r2, [r7, #0]
 8018c36:	4619      	mov	r1, r3
 8018c38:	2031      	movs	r0, #49	@ 0x31
 8018c3a:	f7ff feb8 	bl	80189ae <VL53L1_i2c_decode_nvm_copy_data>
 8018c3e:	4603      	mov	r3, r0
 8018c40:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8018c44:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3740      	adds	r7, #64	@ 0x40
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	bd80      	pop	{r7, pc}

08018c50 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8018c50:	b580      	push	{r7, lr}
 8018c52:	b086      	sub	sp, #24
 8018c54:	af00      	add	r7, sp, #0
 8018c56:	6078      	str	r0, [r7, #4]
 8018c58:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8018c62:	2300      	movs	r3, #0
 8018c64:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8018c66:	2300      	movs	r3, #0
 8018c68:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8018c6e:	693b      	ldr	r3, [r7, #16]
 8018c70:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 8018c74:	f003 0310 	and.w	r3, r3, #16
 8018c78:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8018c7a:	7bfb      	ldrb	r3, [r7, #15]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d102      	bne.n	8018c86 <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8018c80:	2301      	movs	r3, #1
 8018c82:	75fb      	strb	r3, [r7, #23]
 8018c84:	e001      	b.n	8018c8a <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 8018c86:	2300      	movs	r3, #0
 8018c88:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 8018c8a:	f107 030e 	add.w	r3, r7, #14
 8018c8e:	461a      	mov	r2, r3
 8018c90:	2131      	movs	r1, #49	@ 0x31
 8018c92:	6878      	ldr	r0, [r7, #4]
 8018c94:	f7f2 ff12 	bl	800babc <VL53L1_RdByte>
 8018c98:	4603      	mov	r3, r0
 8018c9a:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8018c9c:	7bbb      	ldrb	r3, [r7, #14]
 8018c9e:	f003 0201 	and.w	r2, r3, #1
 8018ca2:	7dfb      	ldrb	r3, [r7, #23]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d103      	bne.n	8018cb0 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 8018ca8:	683b      	ldr	r3, [r7, #0]
 8018caa:	2201      	movs	r2, #1
 8018cac:	701a      	strb	r2, [r3, #0]
 8018cae:	e002      	b.n	8018cb6 <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	2200      	movs	r2, #0
 8018cb4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8018cb6:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8018cba:	4618      	mov	r0, r3
 8018cbc:	3718      	adds	r7, #24
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}
	...

08018cc4 <arm_mat_trans_f32>:
 8018cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018cc8:	8802      	ldrh	r2, [r0, #0]
 8018cca:	884b      	ldrh	r3, [r1, #2]
 8018ccc:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8018cd0:	684f      	ldr	r7, [r1, #4]
 8018cd2:	8840      	ldrh	r0, [r0, #2]
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	b083      	sub	sp, #12
 8018cd8:	d14c      	bne.n	8018d74 <arm_mat_trans_f32+0xb0>
 8018cda:	f8b1 e000 	ldrh.w	lr, [r1]
 8018cde:	4586      	cmp	lr, r0
 8018ce0:	d148      	bne.n	8018d74 <arm_mat_trans_f32+0xb0>
 8018ce2:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8018ce6:	009c      	lsls	r4, r3, #2
 8018ce8:	f00e 0e03 	and.w	lr, lr, #3
 8018cec:	fb08 f904 	mul.w	r9, r8, r4
 8018cf0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8018cf4:	011d      	lsls	r5, r3, #4
 8018cf6:	00db      	lsls	r3, r3, #3
 8018cf8:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8018cfc:	eb07 0a04 	add.w	sl, r7, r4
 8018d00:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8018d04:	9201      	str	r2, [sp, #4]
 8018d06:	9300      	str	r3, [sp, #0]
 8018d08:	463b      	mov	r3, r7
 8018d0a:	f1b8 0f00 	cmp.w	r8, #0
 8018d0e:	d01d      	beq.n	8018d4c <arm_mat_trans_f32+0x88>
 8018d10:	9900      	ldr	r1, [sp, #0]
 8018d12:	f10c 0210 	add.w	r2, ip, #16
 8018d16:	4439      	add	r1, r7
 8018d18:	4640      	mov	r0, r8
 8018d1a:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8018d1e:	601e      	str	r6, [r3, #0]
 8018d20:	ed52 7a03 	vldr	s15, [r2, #-12]
 8018d24:	191e      	adds	r6, r3, r4
 8018d26:	edc6 7a00 	vstr	s15, [r6]
 8018d2a:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8018d2e:	600e      	str	r6, [r1, #0]
 8018d30:	ed52 7a01 	vldr	s15, [r2, #-4]
 8018d34:	190e      	adds	r6, r1, r4
 8018d36:	3801      	subs	r0, #1
 8018d38:	442b      	add	r3, r5
 8018d3a:	f102 0210 	add.w	r2, r2, #16
 8018d3e:	edc6 7a00 	vstr	s15, [r6]
 8018d42:	4429      	add	r1, r5
 8018d44:	d1e9      	bne.n	8018d1a <arm_mat_trans_f32+0x56>
 8018d46:	44dc      	add	ip, fp
 8018d48:	eb09 0307 	add.w	r3, r9, r7
 8018d4c:	f1be 0f00 	cmp.w	lr, #0
 8018d50:	d009      	beq.n	8018d66 <arm_mat_trans_f32+0xa2>
 8018d52:	4672      	mov	r2, lr
 8018d54:	4661      	mov	r1, ip
 8018d56:	f851 0b04 	ldr.w	r0, [r1], #4
 8018d5a:	6018      	str	r0, [r3, #0]
 8018d5c:	3a01      	subs	r2, #1
 8018d5e:	4423      	add	r3, r4
 8018d60:	d1f9      	bne.n	8018d56 <arm_mat_trans_f32+0x92>
 8018d62:	9b01      	ldr	r3, [sp, #4]
 8018d64:	449c      	add	ip, r3
 8018d66:	3704      	adds	r7, #4
 8018d68:	4557      	cmp	r7, sl
 8018d6a:	d1cd      	bne.n	8018d08 <arm_mat_trans_f32+0x44>
 8018d6c:	2000      	movs	r0, #0
 8018d6e:	b003      	add	sp, #12
 8018d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d74:	f06f 0002 	mvn.w	r0, #2
 8018d78:	e7f9      	b.n	8018d6e <arm_mat_trans_f32+0xaa>
 8018d7a:	bf00      	nop

08018d7c <arm_mat_scale_f32>:
 8018d7c:	b470      	push	{r4, r5, r6}
 8018d7e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8018d82:	6802      	ldr	r2, [r0, #0]
 8018d84:	6846      	ldr	r6, [r0, #4]
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d147      	bne.n	8018e1a <arm_mat_scale_f32+0x9e>
 8018d8a:	8803      	ldrh	r3, [r0, #0]
 8018d8c:	8840      	ldrh	r0, [r0, #2]
 8018d8e:	fb00 f003 	mul.w	r0, r0, r3
 8018d92:	0884      	lsrs	r4, r0, #2
 8018d94:	d025      	beq.n	8018de2 <arm_mat_scale_f32+0x66>
 8018d96:	f106 0210 	add.w	r2, r6, #16
 8018d9a:	f105 0310 	add.w	r3, r5, #16
 8018d9e:	4621      	mov	r1, r4
 8018da0:	ed52 7a04 	vldr	s15, [r2, #-16]
 8018da4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018da8:	3901      	subs	r1, #1
 8018daa:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018dae:	ed52 7a03 	vldr	s15, [r2, #-12]
 8018db2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018db6:	f102 0210 	add.w	r2, r2, #16
 8018dba:	ed43 7a03 	vstr	s15, [r3, #-12]
 8018dbe:	ed52 7a06 	vldr	s15, [r2, #-24]	@ 0xffffffe8
 8018dc2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018dc6:	f103 0310 	add.w	r3, r3, #16
 8018dca:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8018dce:	ed52 7a05 	vldr	s15, [r2, #-20]	@ 0xffffffec
 8018dd2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018dd6:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8018dda:	d1e1      	bne.n	8018da0 <arm_mat_scale_f32+0x24>
 8018ddc:	0124      	lsls	r4, r4, #4
 8018dde:	4426      	add	r6, r4
 8018de0:	4425      	add	r5, r4
 8018de2:	f010 0003 	ands.w	r0, r0, #3
 8018de6:	d015      	beq.n	8018e14 <arm_mat_scale_f32+0x98>
 8018de8:	edd6 7a00 	vldr	s15, [r6]
 8018dec:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018df0:	3801      	subs	r0, #1
 8018df2:	edc5 7a00 	vstr	s15, [r5]
 8018df6:	d00d      	beq.n	8018e14 <arm_mat_scale_f32+0x98>
 8018df8:	edd6 7a01 	vldr	s15, [r6, #4]
 8018dfc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018e00:	2801      	cmp	r0, #1
 8018e02:	edc5 7a01 	vstr	s15, [r5, #4]
 8018e06:	d005      	beq.n	8018e14 <arm_mat_scale_f32+0x98>
 8018e08:	edd6 7a02 	vldr	s15, [r6, #8]
 8018e0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018e10:	ed85 0a02 	vstr	s0, [r5, #8]
 8018e14:	2000      	movs	r0, #0
 8018e16:	bc70      	pop	{r4, r5, r6}
 8018e18:	4770      	bx	lr
 8018e1a:	f06f 0002 	mvn.w	r0, #2
 8018e1e:	e7fa      	b.n	8018e16 <arm_mat_scale_f32+0x9a>

08018e20 <arm_mat_mult_f32>:
 8018e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e24:	8845      	ldrh	r5, [r0, #2]
 8018e26:	880b      	ldrh	r3, [r1, #0]
 8018e28:	8806      	ldrh	r6, [r0, #0]
 8018e2a:	6847      	ldr	r7, [r0, #4]
 8018e2c:	6854      	ldr	r4, [r2, #4]
 8018e2e:	6848      	ldr	r0, [r1, #4]
 8018e30:	b08b      	sub	sp, #44	@ 0x2c
 8018e32:	42ab      	cmp	r3, r5
 8018e34:	9109      	str	r1, [sp, #36]	@ 0x24
 8018e36:	9604      	str	r6, [sp, #16]
 8018e38:	8849      	ldrh	r1, [r1, #2]
 8018e3a:	f040 808a 	bne.w	8018f52 <arm_mat_mult_f32+0x132>
 8018e3e:	8815      	ldrh	r5, [r2, #0]
 8018e40:	42b5      	cmp	r5, r6
 8018e42:	f040 8086 	bne.w	8018f52 <arm_mat_mult_f32+0x132>
 8018e46:	8852      	ldrh	r2, [r2, #2]
 8018e48:	428a      	cmp	r2, r1
 8018e4a:	f040 8082 	bne.w	8018f52 <arm_mat_mult_f32+0x132>
 8018e4e:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8018e52:	1d01      	adds	r1, r0, #4
 8018e54:	0116      	lsls	r6, r2, #4
 8018e56:	9108      	str	r1, [sp, #32]
 8018e58:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8018e5c:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8018e60:	9101      	str	r1, [sp, #4]
 8018e62:	fb06 f108 	mul.w	r1, r6, r8
 8018e66:	0095      	lsls	r5, r2, #2
 8018e68:	9103      	str	r1, [sp, #12]
 8018e6a:	00d2      	lsls	r2, r2, #3
 8018e6c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8018e70:	f003 0903 	and.w	r9, r3, #3
 8018e74:	009b      	lsls	r3, r3, #2
 8018e76:	f107 0b10 	add.w	fp, r7, #16
 8018e7a:	eb04 0a05 	add.w	sl, r4, r5
 8018e7e:	9107      	str	r1, [sp, #28]
 8018e80:	9202      	str	r2, [sp, #8]
 8018e82:	9306      	str	r3, [sp, #24]
 8018e84:	f1ab 0310 	sub.w	r3, fp, #16
 8018e88:	9305      	str	r3, [sp, #20]
 8018e8a:	9b07      	ldr	r3, [sp, #28]
 8018e8c:	f8dd e020 	ldr.w	lr, [sp, #32]
 8018e90:	eb03 0c0a 	add.w	ip, r3, sl
 8018e94:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8018f5c <arm_mat_mult_f32+0x13c>
 8018e98:	f1b8 0f00 	cmp.w	r8, #0
 8018e9c:	d053      	beq.n	8018f46 <arm_mat_mult_f32+0x126>
 8018e9e:	9b02      	ldr	r3, [sp, #8]
 8018ea0:	4644      	mov	r4, r8
 8018ea2:	18c1      	adds	r1, r0, r3
 8018ea4:	4602      	mov	r2, r0
 8018ea6:	465b      	mov	r3, fp
 8018ea8:	ed92 6a00 	vldr	s12, [r2]
 8018eac:	ed13 7a04 	vldr	s14, [r3, #-16]
 8018eb0:	ed53 4a03 	vldr	s9, [r3, #-12]
 8018eb4:	ed53 6a02 	vldr	s13, [r3, #-8]
 8018eb8:	ed91 5a00 	vldr	s10, [r1]
 8018ebc:	ed53 5a01 	vldr	s11, [r3, #-4]
 8018ec0:	1957      	adds	r7, r2, r5
 8018ec2:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018ec6:	ed97 6a00 	vldr	s12, [r7]
 8018eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018ece:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018ed2:	194f      	adds	r7, r1, r5
 8018ed4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018ed8:	ee26 7a85 	vmul.f32	s14, s13, s10
 8018edc:	edd7 7a00 	vldr	s15, [r7]
 8018ee0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018ee4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018ee8:	3c01      	subs	r4, #1
 8018eea:	4432      	add	r2, r6
 8018eec:	4431      	add	r1, r6
 8018eee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018ef2:	f103 0310 	add.w	r3, r3, #16
 8018ef6:	d1d7      	bne.n	8018ea8 <arm_mat_mult_f32+0x88>
 8018ef8:	9b03      	ldr	r3, [sp, #12]
 8018efa:	9a01      	ldr	r2, [sp, #4]
 8018efc:	4418      	add	r0, r3
 8018efe:	f1b9 0f00 	cmp.w	r9, #0
 8018f02:	d00b      	beq.n	8018f1c <arm_mat_mult_f32+0xfc>
 8018f04:	464b      	mov	r3, r9
 8018f06:	edd0 6a00 	vldr	s13, [r0]
 8018f0a:	ecb2 7a01 	vldmia	r2!, {s14}
 8018f0e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8018f12:	3b01      	subs	r3, #1
 8018f14:	4428      	add	r0, r5
 8018f16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018f1a:	d1f4      	bne.n	8018f06 <arm_mat_mult_f32+0xe6>
 8018f1c:	ecec 7a01 	vstmia	ip!, {s15}
 8018f20:	45d4      	cmp	ip, sl
 8018f22:	4670      	mov	r0, lr
 8018f24:	f10e 0e04 	add.w	lr, lr, #4
 8018f28:	d1b4      	bne.n	8018e94 <arm_mat_mult_f32+0x74>
 8018f2a:	9a01      	ldr	r2, [sp, #4]
 8018f2c:	9b06      	ldr	r3, [sp, #24]
 8018f2e:	4611      	mov	r1, r2
 8018f30:	4419      	add	r1, r3
 8018f32:	449b      	add	fp, r3
 8018f34:	9b04      	ldr	r3, [sp, #16]
 8018f36:	9101      	str	r1, [sp, #4]
 8018f38:	3b01      	subs	r3, #1
 8018f3a:	44aa      	add	sl, r5
 8018f3c:	9304      	str	r3, [sp, #16]
 8018f3e:	d004      	beq.n	8018f4a <arm_mat_mult_f32+0x12a>
 8018f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018f42:	6858      	ldr	r0, [r3, #4]
 8018f44:	e79e      	b.n	8018e84 <arm_mat_mult_f32+0x64>
 8018f46:	9a05      	ldr	r2, [sp, #20]
 8018f48:	e7d9      	b.n	8018efe <arm_mat_mult_f32+0xde>
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	b00b      	add	sp, #44	@ 0x2c
 8018f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f52:	f06f 0002 	mvn.w	r0, #2
 8018f56:	b00b      	add	sp, #44	@ 0x2c
 8018f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f5c:	00000000 	.word	0x00000000

08018f60 <arm_mat_inverse_f32>:
 8018f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f64:	8843      	ldrh	r3, [r0, #2]
 8018f66:	8804      	ldrh	r4, [r0, #0]
 8018f68:	684e      	ldr	r6, [r1, #4]
 8018f6a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018f6e:	b087      	sub	sp, #28
 8018f70:	429c      	cmp	r4, r3
 8018f72:	9301      	str	r3, [sp, #4]
 8018f74:	9603      	str	r6, [sp, #12]
 8018f76:	f040 80ea 	bne.w	801914e <arm_mat_inverse_f32+0x1ee>
 8018f7a:	880a      	ldrh	r2, [r1, #0]
 8018f7c:	884b      	ldrh	r3, [r1, #2]
 8018f7e:	4293      	cmp	r3, r2
 8018f80:	f040 80e5 	bne.w	801914e <arm_mat_inverse_f32+0x1ee>
 8018f84:	429c      	cmp	r4, r3
 8018f86:	f040 80e2 	bne.w	801914e <arm_mat_inverse_f32+0x1ee>
 8018f8a:	9005      	str	r0, [sp, #20]
 8018f8c:	b30c      	cbz	r4, 8018fd2 <arm_mat_inverse_f32+0x72>
 8018f8e:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8018f92:	1e67      	subs	r7, r4, #1
 8018f94:	f846 bb04 	str.w	fp, [r6], #4
 8018f98:	d01b      	beq.n	8018fd2 <arm_mat_inverse_f32+0x72>
 8018f9a:	f04f 0801 	mov.w	r8, #1
 8018f9e:	00ba      	lsls	r2, r7, #2
 8018fa0:	eb06 0a02 	add.w	sl, r6, r2
 8018fa4:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8018fa8:	4630      	mov	r0, r6
 8018faa:	2100      	movs	r1, #0
 8018fac:	f000 f96e 	bl	801928c <memset>
 8018fb0:	eb0a 0605 	add.w	r6, sl, r5
 8018fb4:	462a      	mov	r2, r5
 8018fb6:	2100      	movs	r1, #0
 8018fb8:	4650      	mov	r0, sl
 8018fba:	f1b8 0f00 	cmp.w	r8, #0
 8018fbe:	f000 80cb 	beq.w	8019158 <arm_mat_inverse_f32+0x1f8>
 8018fc2:	f000 f963 	bl	801928c <memset>
 8018fc6:	3f01      	subs	r7, #1
 8018fc8:	f108 0801 	add.w	r8, r8, #1
 8018fcc:	f846 bb04 	str.w	fp, [r6], #4
 8018fd0:	d1e5      	bne.n	8018f9e <arm_mat_inverse_f32+0x3e>
 8018fd2:	9b01      	ldr	r3, [sp, #4]
 8018fd4:	2b00      	cmp	r3, #0
 8018fd6:	f000 80b5 	beq.w	8019144 <arm_mat_inverse_f32+0x1e4>
 8018fda:	009d      	lsls	r5, r3, #2
 8018fdc:	eb09 0205 	add.w	r2, r9, r5
 8018fe0:	46cc      	mov	ip, r9
 8018fe2:	9202      	str	r2, [sp, #8]
 8018fe4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018fe8:	1d2a      	adds	r2, r5, #4
 8018fea:	9204      	str	r2, [sp, #16]
 8018fec:	462f      	mov	r7, r5
 8018fee:	469e      	mov	lr, r3
 8018ff0:	2600      	movs	r6, #0
 8018ff2:	9b02      	ldr	r3, [sp, #8]
 8018ff4:	eddc 6a00 	vldr	s13, [ip]
 8018ff8:	42b4      	cmp	r4, r6
 8018ffa:	eba3 0b07 	sub.w	fp, r3, r7
 8018ffe:	f000 80a1 	beq.w	8019144 <arm_mat_inverse_f32+0x1e4>
 8019002:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8019168 <arm_mat_inverse_f32+0x208>
 8019006:	4632      	mov	r2, r6
 8019008:	4663      	mov	r3, ip
 801900a:	e00b      	b.n	8019024 <arm_mat_inverse_f32+0xc4>
 801900c:	eef4 7a47 	vcmp.f32	s15, s14
 8019010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019014:	f102 0201 	add.w	r2, r2, #1
 8019018:	bfc8      	it	gt
 801901a:	eeb0 7a67 	vmovgt.f32	s14, s15
 801901e:	42a2      	cmp	r2, r4
 8019020:	442b      	add	r3, r5
 8019022:	d014      	beq.n	801904e <arm_mat_inverse_f32+0xee>
 8019024:	edd3 7a00 	vldr	s15, [r3]
 8019028:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801902c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019030:	eeb1 6a67 	vneg.f32	s12, s15
 8019034:	dcea      	bgt.n	801900c <arm_mat_inverse_f32+0xac>
 8019036:	eeb4 6a47 	vcmp.f32	s12, s14
 801903a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801903e:	f102 0201 	add.w	r2, r2, #1
 8019042:	bfc8      	it	gt
 8019044:	eeb0 7a46 	vmovgt.f32	s14, s12
 8019048:	42a2      	cmp	r2, r4
 801904a:	442b      	add	r3, r5
 801904c:	d1ea      	bne.n	8019024 <arm_mat_inverse_f32+0xc4>
 801904e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019056:	d075      	beq.n	8019144 <arm_mat_inverse_f32+0x1e4>
 8019058:	eef5 6a40 	vcmp.f32	s13, #0.0
 801905c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019060:	d070      	beq.n	8019144 <arm_mat_inverse_f32+0x1e4>
 8019062:	4672      	mov	r2, lr
 8019064:	4663      	mov	r3, ip
 8019066:	ed93 7a00 	vldr	s14, [r3]
 801906a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801906e:	3a01      	subs	r2, #1
 8019070:	ece3 7a01 	vstmia	r3!, {s15}
 8019074:	d1f7      	bne.n	8019066 <arm_mat_inverse_f32+0x106>
 8019076:	9901      	ldr	r1, [sp, #4]
 8019078:	464b      	mov	r3, r9
 801907a:	ed93 7a00 	vldr	s14, [r3]
 801907e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8019082:	3901      	subs	r1, #1
 8019084:	ece3 7a01 	vstmia	r3!, {s15}
 8019088:	d1f7      	bne.n	801907a <arm_mat_inverse_f32+0x11a>
 801908a:	9803      	ldr	r0, [sp, #12]
 801908c:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8019090:	42b1      	cmp	r1, r6
 8019092:	d039      	beq.n	8019108 <arm_mat_inverse_f32+0x1a8>
 8019094:	eddb 6a00 	vldr	s13, [fp]
 8019098:	465a      	mov	r2, fp
 801909a:	4673      	mov	r3, lr
 801909c:	46e2      	mov	sl, ip
 801909e:	ecba 7a01 	vldmia	sl!, {s14}
 80190a2:	edd2 7a00 	vldr	s15, [r2]
 80190a6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80190aa:	3b01      	subs	r3, #1
 80190ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80190b0:	ece2 7a01 	vstmia	r2!, {s15}
 80190b4:	d1f3      	bne.n	801909e <arm_mat_inverse_f32+0x13e>
 80190b6:	9b01      	ldr	r3, [sp, #4]
 80190b8:	44bb      	add	fp, r7
 80190ba:	4602      	mov	r2, r0
 80190bc:	46ca      	mov	sl, r9
 80190be:	ecba 7a01 	vldmia	sl!, {s14}
 80190c2:	edd2 7a00 	vldr	s15, [r2]
 80190c6:	ee26 7a87 	vmul.f32	s14, s13, s14
 80190ca:	3b01      	subs	r3, #1
 80190cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80190d0:	ece2 7a01 	vstmia	r2!, {s15}
 80190d4:	d1f3      	bne.n	80190be <arm_mat_inverse_f32+0x15e>
 80190d6:	4428      	add	r0, r5
 80190d8:	3101      	adds	r1, #1
 80190da:	428c      	cmp	r4, r1
 80190dc:	44c3      	add	fp, r8
 80190de:	d1d7      	bne.n	8019090 <arm_mat_inverse_f32+0x130>
 80190e0:	9b04      	ldr	r3, [sp, #16]
 80190e2:	f1be 0e01 	subs.w	lr, lr, #1
 80190e6:	f106 0601 	add.w	r6, r6, #1
 80190ea:	449c      	add	ip, r3
 80190ec:	f1a7 0704 	sub.w	r7, r7, #4
 80190f0:	44a9      	add	r9, r5
 80190f2:	f47f af7e 	bne.w	8018ff2 <arm_mat_inverse_f32+0x92>
 80190f6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80190fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190fe:	d006      	beq.n	801910e <arm_mat_inverse_f32+0x1ae>
 8019100:	2000      	movs	r0, #0
 8019102:	b007      	add	sp, #28
 8019104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019108:	44bb      	add	fp, r7
 801910a:	4428      	add	r0, r5
 801910c:	e7e4      	b.n	80190d8 <arm_mat_inverse_f32+0x178>
 801910e:	9b05      	ldr	r3, [sp, #20]
 8019110:	9a01      	ldr	r2, [sp, #4]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	edd3 7a00 	vldr	s15, [r3]
 8019118:	eef5 7a40 	vcmp.f32	s15, #0.0
 801911c:	fb02 f204 	mul.w	r2, r2, r4
 8019120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019124:	4614      	mov	r4, r2
 8019126:	bf08      	it	eq
 8019128:	3304      	addeq	r3, #4
 801912a:	d007      	beq.n	801913c <arm_mat_inverse_f32+0x1dc>
 801912c:	e7e8      	b.n	8019100 <arm_mat_inverse_f32+0x1a0>
 801912e:	ecf3 7a01 	vldmia	r3!, {s15}
 8019132:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801913a:	d1e1      	bne.n	8019100 <arm_mat_inverse_f32+0x1a0>
 801913c:	f10e 0e01 	add.w	lr, lr, #1
 8019140:	4574      	cmp	r4, lr
 8019142:	d1f4      	bne.n	801912e <arm_mat_inverse_f32+0x1ce>
 8019144:	f06f 0004 	mvn.w	r0, #4
 8019148:	b007      	add	sp, #28
 801914a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801914e:	f06f 0002 	mvn.w	r0, #2
 8019152:	b007      	add	sp, #28
 8019154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019158:	4656      	mov	r6, sl
 801915a:	3f01      	subs	r7, #1
 801915c:	f846 bb04 	str.w	fp, [r6], #4
 8019160:	f47f af1b 	bne.w	8018f9a <arm_mat_inverse_f32+0x3a>
 8019164:	e735      	b.n	8018fd2 <arm_mat_inverse_f32+0x72>
 8019166:	bf00      	nop
 8019168:	00000000 	.word	0x00000000

0801916c <arm_sin_f32>:
 801916c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80191ec <arm_sin_f32+0x80>
 8019170:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019174:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801917c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019180:	d504      	bpl.n	801918c <arm_sin_f32+0x20>
 8019182:	ee17 3a90 	vmov	r3, s15
 8019186:	3b01      	subs	r3, #1
 8019188:	ee07 3a90 	vmov	s15, r3
 801918c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019190:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80191f0 <arm_sin_f32+0x84>
 8019194:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019198:	ee20 0a07 	vmul.f32	s0, s0, s14
 801919c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80191a0:	ee17 3a90 	vmov	r3, s15
 80191a4:	b29b      	uxth	r3, r3
 80191a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80191aa:	d21a      	bcs.n	80191e2 <arm_sin_f32+0x76>
 80191ac:	ee07 3a90 	vmov	s15, r3
 80191b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80191b4:	1c59      	adds	r1, r3, #1
 80191b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80191ba:	4a0e      	ldr	r2, [pc, #56]	@ (80191f4 <arm_sin_f32+0x88>)
 80191bc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80191c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80191c4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80191c8:	ed93 7a00 	vldr	s14, [r3]
 80191cc:	edd2 6a00 	vldr	s13, [r2]
 80191d0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80191d4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80191d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80191dc:	ee37 0a80 	vadd.f32	s0, s15, s0
 80191e0:	4770      	bx	lr
 80191e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80191e6:	2101      	movs	r1, #1
 80191e8:	2300      	movs	r3, #0
 80191ea:	e7e6      	b.n	80191ba <arm_sin_f32+0x4e>
 80191ec:	3e22f983 	.word	0x3e22f983
 80191f0:	44000000 	.word	0x44000000
 80191f4:	0801c25c 	.word	0x0801c25c

080191f8 <arm_cos_f32>:
 80191f8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8019280 <arm_cos_f32+0x88>
 80191fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019200:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019204:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019208:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801920c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019210:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019214:	d504      	bpl.n	8019220 <arm_cos_f32+0x28>
 8019216:	ee17 3a90 	vmov	r3, s15
 801921a:	3b01      	subs	r3, #1
 801921c:	ee07 3a90 	vmov	s15, r3
 8019220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019224:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8019284 <arm_cos_f32+0x8c>
 8019228:	ee30 0a67 	vsub.f32	s0, s0, s15
 801922c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019230:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8019234:	ee17 3a90 	vmov	r3, s15
 8019238:	b29b      	uxth	r3, r3
 801923a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801923e:	d21a      	bcs.n	8019276 <arm_cos_f32+0x7e>
 8019240:	ee07 3a90 	vmov	s15, r3
 8019244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019248:	1c59      	adds	r1, r3, #1
 801924a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801924e:	4a0e      	ldr	r2, [pc, #56]	@ (8019288 <arm_cos_f32+0x90>)
 8019250:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019254:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019258:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801925c:	ed93 7a00 	vldr	s14, [r3]
 8019260:	edd2 6a00 	vldr	s13, [r2]
 8019264:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019268:	ee20 0a26 	vmul.f32	s0, s0, s13
 801926c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019270:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019274:	4770      	bx	lr
 8019276:	ee30 0a47 	vsub.f32	s0, s0, s14
 801927a:	2101      	movs	r1, #1
 801927c:	2300      	movs	r3, #0
 801927e:	e7e6      	b.n	801924e <arm_cos_f32+0x56>
 8019280:	3e22f983 	.word	0x3e22f983
 8019284:	44000000 	.word	0x44000000
 8019288:	0801c25c 	.word	0x0801c25c

0801928c <memset>:
 801928c:	4402      	add	r2, r0
 801928e:	4603      	mov	r3, r0
 8019290:	4293      	cmp	r3, r2
 8019292:	d100      	bne.n	8019296 <memset+0xa>
 8019294:	4770      	bx	lr
 8019296:	f803 1b01 	strb.w	r1, [r3], #1
 801929a:	e7f9      	b.n	8019290 <memset+0x4>

0801929c <strncpy>:
 801929c:	b510      	push	{r4, lr}
 801929e:	3901      	subs	r1, #1
 80192a0:	4603      	mov	r3, r0
 80192a2:	b132      	cbz	r2, 80192b2 <strncpy+0x16>
 80192a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80192a8:	f803 4b01 	strb.w	r4, [r3], #1
 80192ac:	3a01      	subs	r2, #1
 80192ae:	2c00      	cmp	r4, #0
 80192b0:	d1f7      	bne.n	80192a2 <strncpy+0x6>
 80192b2:	441a      	add	r2, r3
 80192b4:	2100      	movs	r1, #0
 80192b6:	4293      	cmp	r3, r2
 80192b8:	d100      	bne.n	80192bc <strncpy+0x20>
 80192ba:	bd10      	pop	{r4, pc}
 80192bc:	f803 1b01 	strb.w	r1, [r3], #1
 80192c0:	e7f9      	b.n	80192b6 <strncpy+0x1a>
	...

080192c4 <__errno>:
 80192c4:	4b01      	ldr	r3, [pc, #4]	@ (80192cc <__errno+0x8>)
 80192c6:	6818      	ldr	r0, [r3, #0]
 80192c8:	4770      	bx	lr
 80192ca:	bf00      	nop
 80192cc:	20000180 	.word	0x20000180

080192d0 <__libc_init_array>:
 80192d0:	b570      	push	{r4, r5, r6, lr}
 80192d2:	4d0d      	ldr	r5, [pc, #52]	@ (8019308 <__libc_init_array+0x38>)
 80192d4:	4c0d      	ldr	r4, [pc, #52]	@ (801930c <__libc_init_array+0x3c>)
 80192d6:	1b64      	subs	r4, r4, r5
 80192d8:	10a4      	asrs	r4, r4, #2
 80192da:	2600      	movs	r6, #0
 80192dc:	42a6      	cmp	r6, r4
 80192de:	d109      	bne.n	80192f4 <__libc_init_array+0x24>
 80192e0:	4d0b      	ldr	r5, [pc, #44]	@ (8019310 <__libc_init_array+0x40>)
 80192e2:	4c0c      	ldr	r4, [pc, #48]	@ (8019314 <__libc_init_array+0x44>)
 80192e4:	f002 f840 	bl	801b368 <_init>
 80192e8:	1b64      	subs	r4, r4, r5
 80192ea:	10a4      	asrs	r4, r4, #2
 80192ec:	2600      	movs	r6, #0
 80192ee:	42a6      	cmp	r6, r4
 80192f0:	d105      	bne.n	80192fe <__libc_init_array+0x2e>
 80192f2:	bd70      	pop	{r4, r5, r6, pc}
 80192f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80192f8:	4798      	blx	r3
 80192fa:	3601      	adds	r6, #1
 80192fc:	e7ee      	b.n	80192dc <__libc_init_array+0xc>
 80192fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8019302:	4798      	blx	r3
 8019304:	3601      	adds	r6, #1
 8019306:	e7f2      	b.n	80192ee <__libc_init_array+0x1e>
 8019308:	0801ceac 	.word	0x0801ceac
 801930c:	0801ceac 	.word	0x0801ceac
 8019310:	0801ceac 	.word	0x0801ceac
 8019314:	0801ceb0 	.word	0x0801ceb0

08019318 <memcpy>:
 8019318:	440a      	add	r2, r1
 801931a:	4291      	cmp	r1, r2
 801931c:	f100 33ff 	add.w	r3, r0, #4294967295
 8019320:	d100      	bne.n	8019324 <memcpy+0xc>
 8019322:	4770      	bx	lr
 8019324:	b510      	push	{r4, lr}
 8019326:	f811 4b01 	ldrb.w	r4, [r1], #1
 801932a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801932e:	4291      	cmp	r1, r2
 8019330:	d1f9      	bne.n	8019326 <memcpy+0xe>
 8019332:	bd10      	pop	{r4, pc}

08019334 <acosf>:
 8019334:	b508      	push	{r3, lr}
 8019336:	ed2d 8b02 	vpush	{d8}
 801933a:	eeb0 8a40 	vmov.f32	s16, s0
 801933e:	f000 fbbf 	bl	8019ac0 <__ieee754_acosf>
 8019342:	eeb4 8a48 	vcmp.f32	s16, s16
 8019346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801934a:	eef0 8a40 	vmov.f32	s17, s0
 801934e:	d615      	bvs.n	801937c <acosf+0x48>
 8019350:	eeb0 0a48 	vmov.f32	s0, s16
 8019354:	f000 f966 	bl	8019624 <fabsf>
 8019358:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801935c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8019360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019364:	dd0a      	ble.n	801937c <acosf+0x48>
 8019366:	f7ff ffad 	bl	80192c4 <__errno>
 801936a:	ecbd 8b02 	vpop	{d8}
 801936e:	2321      	movs	r3, #33	@ 0x21
 8019370:	6003      	str	r3, [r0, #0]
 8019372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8019376:	4804      	ldr	r0, [pc, #16]	@ (8019388 <acosf+0x54>)
 8019378:	f000 b9d8 	b.w	801972c <nanf>
 801937c:	eeb0 0a68 	vmov.f32	s0, s17
 8019380:	ecbd 8b02 	vpop	{d8}
 8019384:	bd08      	pop	{r3, pc}
 8019386:	bf00      	nop
 8019388:	0801ca60 	.word	0x0801ca60

0801938c <asinf>:
 801938c:	b508      	push	{r3, lr}
 801938e:	ed2d 8b02 	vpush	{d8}
 8019392:	eeb0 8a40 	vmov.f32	s16, s0
 8019396:	f000 fc8b 	bl	8019cb0 <__ieee754_asinf>
 801939a:	eeb4 8a48 	vcmp.f32	s16, s16
 801939e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193a2:	eef0 8a40 	vmov.f32	s17, s0
 80193a6:	d615      	bvs.n	80193d4 <asinf+0x48>
 80193a8:	eeb0 0a48 	vmov.f32	s0, s16
 80193ac:	f000 f93a 	bl	8019624 <fabsf>
 80193b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80193b4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80193b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193bc:	dd0a      	ble.n	80193d4 <asinf+0x48>
 80193be:	f7ff ff81 	bl	80192c4 <__errno>
 80193c2:	ecbd 8b02 	vpop	{d8}
 80193c6:	2321      	movs	r3, #33	@ 0x21
 80193c8:	6003      	str	r3, [r0, #0]
 80193ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80193ce:	4804      	ldr	r0, [pc, #16]	@ (80193e0 <asinf+0x54>)
 80193d0:	f000 b9ac 	b.w	801972c <nanf>
 80193d4:	eeb0 0a68 	vmov.f32	s0, s17
 80193d8:	ecbd 8b02 	vpop	{d8}
 80193dc:	bd08      	pop	{r3, pc}
 80193de:	bf00      	nop
 80193e0:	0801ca60 	.word	0x0801ca60

080193e4 <atan2f>:
 80193e4:	f000 bd4a 	b.w	8019e7c <__ieee754_atan2f>

080193e8 <expf>:
 80193e8:	b508      	push	{r3, lr}
 80193ea:	ed2d 8b02 	vpush	{d8}
 80193ee:	eef0 8a40 	vmov.f32	s17, s0
 80193f2:	f000 fde3 	bl	8019fbc <__ieee754_expf>
 80193f6:	eeb0 8a40 	vmov.f32	s16, s0
 80193fa:	eeb0 0a68 	vmov.f32	s0, s17
 80193fe:	f000 f98b 	bl	8019718 <finitef>
 8019402:	b160      	cbz	r0, 801941e <expf+0x36>
 8019404:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8019444 <expf+0x5c>
 8019408:	eef4 8ae7 	vcmpe.f32	s17, s15
 801940c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019410:	dd0a      	ble.n	8019428 <expf+0x40>
 8019412:	f7ff ff57 	bl	80192c4 <__errno>
 8019416:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8019448 <expf+0x60>
 801941a:	2322      	movs	r3, #34	@ 0x22
 801941c:	6003      	str	r3, [r0, #0]
 801941e:	eeb0 0a48 	vmov.f32	s0, s16
 8019422:	ecbd 8b02 	vpop	{d8}
 8019426:	bd08      	pop	{r3, pc}
 8019428:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801944c <expf+0x64>
 801942c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8019430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019434:	d5f3      	bpl.n	801941e <expf+0x36>
 8019436:	f7ff ff45 	bl	80192c4 <__errno>
 801943a:	2322      	movs	r3, #34	@ 0x22
 801943c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8019450 <expf+0x68>
 8019440:	6003      	str	r3, [r0, #0]
 8019442:	e7ec      	b.n	801941e <expf+0x36>
 8019444:	42b17217 	.word	0x42b17217
 8019448:	7f800000 	.word	0x7f800000
 801944c:	c2cff1b5 	.word	0xc2cff1b5
 8019450:	00000000 	.word	0x00000000

08019454 <logf>:
 8019454:	b508      	push	{r3, lr}
 8019456:	ed2d 8b02 	vpush	{d8}
 801945a:	eeb0 8a40 	vmov.f32	s16, s0
 801945e:	f000 fe7b 	bl	801a158 <__ieee754_logf>
 8019462:	eeb4 8a48 	vcmp.f32	s16, s16
 8019466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801946a:	d60f      	bvs.n	801948c <logf+0x38>
 801946c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	dc0a      	bgt.n	801948c <logf+0x38>
 8019476:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801947a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801947e:	d108      	bne.n	8019492 <logf+0x3e>
 8019480:	f7ff ff20 	bl	80192c4 <__errno>
 8019484:	2322      	movs	r3, #34	@ 0x22
 8019486:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80194a8 <logf+0x54>
 801948a:	6003      	str	r3, [r0, #0]
 801948c:	ecbd 8b02 	vpop	{d8}
 8019490:	bd08      	pop	{r3, pc}
 8019492:	f7ff ff17 	bl	80192c4 <__errno>
 8019496:	ecbd 8b02 	vpop	{d8}
 801949a:	2321      	movs	r3, #33	@ 0x21
 801949c:	6003      	str	r3, [r0, #0]
 801949e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80194a2:	4802      	ldr	r0, [pc, #8]	@ (80194ac <logf+0x58>)
 80194a4:	f000 b942 	b.w	801972c <nanf>
 80194a8:	ff800000 	.word	0xff800000
 80194ac:	0801ca60 	.word	0x0801ca60

080194b0 <powf>:
 80194b0:	b508      	push	{r3, lr}
 80194b2:	ed2d 8b04 	vpush	{d8-d9}
 80194b6:	eeb0 8a60 	vmov.f32	s16, s1
 80194ba:	eeb0 9a40 	vmov.f32	s18, s0
 80194be:	f000 ff3d 	bl	801a33c <__ieee754_powf>
 80194c2:	eeb4 8a48 	vcmp.f32	s16, s16
 80194c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ca:	eef0 8a40 	vmov.f32	s17, s0
 80194ce:	d63e      	bvs.n	801954e <powf+0x9e>
 80194d0:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80194d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194d8:	d112      	bne.n	8019500 <powf+0x50>
 80194da:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80194de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194e2:	d039      	beq.n	8019558 <powf+0xa8>
 80194e4:	eeb0 0a48 	vmov.f32	s0, s16
 80194e8:	f000 f916 	bl	8019718 <finitef>
 80194ec:	b378      	cbz	r0, 801954e <powf+0x9e>
 80194ee:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80194f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194f6:	d52a      	bpl.n	801954e <powf+0x9e>
 80194f8:	f7ff fee4 	bl	80192c4 <__errno>
 80194fc:	2322      	movs	r3, #34	@ 0x22
 80194fe:	e014      	b.n	801952a <powf+0x7a>
 8019500:	f000 f90a 	bl	8019718 <finitef>
 8019504:	b998      	cbnz	r0, 801952e <powf+0x7e>
 8019506:	eeb0 0a49 	vmov.f32	s0, s18
 801950a:	f000 f905 	bl	8019718 <finitef>
 801950e:	b170      	cbz	r0, 801952e <powf+0x7e>
 8019510:	eeb0 0a48 	vmov.f32	s0, s16
 8019514:	f000 f900 	bl	8019718 <finitef>
 8019518:	b148      	cbz	r0, 801952e <powf+0x7e>
 801951a:	eef4 8a68 	vcmp.f32	s17, s17
 801951e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019522:	d7e9      	bvc.n	80194f8 <powf+0x48>
 8019524:	f7ff fece 	bl	80192c4 <__errno>
 8019528:	2321      	movs	r3, #33	@ 0x21
 801952a:	6003      	str	r3, [r0, #0]
 801952c:	e00f      	b.n	801954e <powf+0x9e>
 801952e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8019532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019536:	d10a      	bne.n	801954e <powf+0x9e>
 8019538:	eeb0 0a49 	vmov.f32	s0, s18
 801953c:	f000 f8ec 	bl	8019718 <finitef>
 8019540:	b128      	cbz	r0, 801954e <powf+0x9e>
 8019542:	eeb0 0a48 	vmov.f32	s0, s16
 8019546:	f000 f8e7 	bl	8019718 <finitef>
 801954a:	2800      	cmp	r0, #0
 801954c:	d1d4      	bne.n	80194f8 <powf+0x48>
 801954e:	eeb0 0a68 	vmov.f32	s0, s17
 8019552:	ecbd 8b04 	vpop	{d8-d9}
 8019556:	bd08      	pop	{r3, pc}
 8019558:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801955c:	e7f7      	b.n	801954e <powf+0x9e>
	...

08019560 <sqrtf>:
 8019560:	b508      	push	{r3, lr}
 8019562:	ed2d 8b02 	vpush	{d8}
 8019566:	eeb0 8a40 	vmov.f32	s16, s0
 801956a:	f000 f925 	bl	80197b8 <__ieee754_sqrtf>
 801956e:	eeb4 8a48 	vcmp.f32	s16, s16
 8019572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019576:	d60c      	bvs.n	8019592 <sqrtf+0x32>
 8019578:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8019598 <sqrtf+0x38>
 801957c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8019580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019584:	d505      	bpl.n	8019592 <sqrtf+0x32>
 8019586:	f7ff fe9d 	bl	80192c4 <__errno>
 801958a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801958e:	2321      	movs	r3, #33	@ 0x21
 8019590:	6003      	str	r3, [r0, #0]
 8019592:	ecbd 8b02 	vpop	{d8}
 8019596:	bd08      	pop	{r3, pc}
 8019598:	00000000 	.word	0x00000000

0801959c <cosf>:
 801959c:	ee10 3a10 	vmov	r3, s0
 80195a0:	b507      	push	{r0, r1, r2, lr}
 80195a2:	4a1e      	ldr	r2, [pc, #120]	@ (801961c <cosf+0x80>)
 80195a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80195a8:	4293      	cmp	r3, r2
 80195aa:	d806      	bhi.n	80195ba <cosf+0x1e>
 80195ac:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8019620 <cosf+0x84>
 80195b0:	b003      	add	sp, #12
 80195b2:	f85d eb04 	ldr.w	lr, [sp], #4
 80195b6:	f000 b903 	b.w	80197c0 <__kernel_cosf>
 80195ba:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80195be:	d304      	bcc.n	80195ca <cosf+0x2e>
 80195c0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80195c4:	b003      	add	sp, #12
 80195c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80195ca:	4668      	mov	r0, sp
 80195cc:	f001 f986 	bl	801a8dc <__ieee754_rem_pio2f>
 80195d0:	f000 0003 	and.w	r0, r0, #3
 80195d4:	2801      	cmp	r0, #1
 80195d6:	d009      	beq.n	80195ec <cosf+0x50>
 80195d8:	2802      	cmp	r0, #2
 80195da:	d010      	beq.n	80195fe <cosf+0x62>
 80195dc:	b9b0      	cbnz	r0, 801960c <cosf+0x70>
 80195de:	eddd 0a01 	vldr	s1, [sp, #4]
 80195e2:	ed9d 0a00 	vldr	s0, [sp]
 80195e6:	f000 f8eb 	bl	80197c0 <__kernel_cosf>
 80195ea:	e7eb      	b.n	80195c4 <cosf+0x28>
 80195ec:	eddd 0a01 	vldr	s1, [sp, #4]
 80195f0:	ed9d 0a00 	vldr	s0, [sp]
 80195f4:	f000 f93c 	bl	8019870 <__kernel_sinf>
 80195f8:	eeb1 0a40 	vneg.f32	s0, s0
 80195fc:	e7e2      	b.n	80195c4 <cosf+0x28>
 80195fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8019602:	ed9d 0a00 	vldr	s0, [sp]
 8019606:	f000 f8db 	bl	80197c0 <__kernel_cosf>
 801960a:	e7f5      	b.n	80195f8 <cosf+0x5c>
 801960c:	eddd 0a01 	vldr	s1, [sp, #4]
 8019610:	ed9d 0a00 	vldr	s0, [sp]
 8019614:	2001      	movs	r0, #1
 8019616:	f000 f92b 	bl	8019870 <__kernel_sinf>
 801961a:	e7d3      	b.n	80195c4 <cosf+0x28>
 801961c:	3f490fd8 	.word	0x3f490fd8
 8019620:	00000000 	.word	0x00000000

08019624 <fabsf>:
 8019624:	ee10 3a10 	vmov	r3, s0
 8019628:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801962c:	ee00 3a10 	vmov	s0, r3
 8019630:	4770      	bx	lr
	...

08019634 <sinf>:
 8019634:	ee10 3a10 	vmov	r3, s0
 8019638:	b507      	push	{r0, r1, r2, lr}
 801963a:	4a1f      	ldr	r2, [pc, #124]	@ (80196b8 <sinf+0x84>)
 801963c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019640:	4293      	cmp	r3, r2
 8019642:	d807      	bhi.n	8019654 <sinf+0x20>
 8019644:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80196bc <sinf+0x88>
 8019648:	2000      	movs	r0, #0
 801964a:	b003      	add	sp, #12
 801964c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019650:	f000 b90e 	b.w	8019870 <__kernel_sinf>
 8019654:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019658:	d304      	bcc.n	8019664 <sinf+0x30>
 801965a:	ee30 0a40 	vsub.f32	s0, s0, s0
 801965e:	b003      	add	sp, #12
 8019660:	f85d fb04 	ldr.w	pc, [sp], #4
 8019664:	4668      	mov	r0, sp
 8019666:	f001 f939 	bl	801a8dc <__ieee754_rem_pio2f>
 801966a:	f000 0003 	and.w	r0, r0, #3
 801966e:	2801      	cmp	r0, #1
 8019670:	d00a      	beq.n	8019688 <sinf+0x54>
 8019672:	2802      	cmp	r0, #2
 8019674:	d00f      	beq.n	8019696 <sinf+0x62>
 8019676:	b9c0      	cbnz	r0, 80196aa <sinf+0x76>
 8019678:	eddd 0a01 	vldr	s1, [sp, #4]
 801967c:	ed9d 0a00 	vldr	s0, [sp]
 8019680:	2001      	movs	r0, #1
 8019682:	f000 f8f5 	bl	8019870 <__kernel_sinf>
 8019686:	e7ea      	b.n	801965e <sinf+0x2a>
 8019688:	eddd 0a01 	vldr	s1, [sp, #4]
 801968c:	ed9d 0a00 	vldr	s0, [sp]
 8019690:	f000 f896 	bl	80197c0 <__kernel_cosf>
 8019694:	e7e3      	b.n	801965e <sinf+0x2a>
 8019696:	eddd 0a01 	vldr	s1, [sp, #4]
 801969a:	ed9d 0a00 	vldr	s0, [sp]
 801969e:	2001      	movs	r0, #1
 80196a0:	f000 f8e6 	bl	8019870 <__kernel_sinf>
 80196a4:	eeb1 0a40 	vneg.f32	s0, s0
 80196a8:	e7d9      	b.n	801965e <sinf+0x2a>
 80196aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80196ae:	ed9d 0a00 	vldr	s0, [sp]
 80196b2:	f000 f885 	bl	80197c0 <__kernel_cosf>
 80196b6:	e7f5      	b.n	80196a4 <sinf+0x70>
 80196b8:	3f490fd8 	.word	0x3f490fd8
 80196bc:	00000000 	.word	0x00000000

080196c0 <tanf>:
 80196c0:	ee10 3a10 	vmov	r3, s0
 80196c4:	b507      	push	{r0, r1, r2, lr}
 80196c6:	4a12      	ldr	r2, [pc, #72]	@ (8019710 <tanf+0x50>)
 80196c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80196cc:	4293      	cmp	r3, r2
 80196ce:	d807      	bhi.n	80196e0 <tanf+0x20>
 80196d0:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8019714 <tanf+0x54>
 80196d4:	2001      	movs	r0, #1
 80196d6:	b003      	add	sp, #12
 80196d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80196dc:	f000 b910 	b.w	8019900 <__kernel_tanf>
 80196e0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80196e4:	d304      	bcc.n	80196f0 <tanf+0x30>
 80196e6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80196ea:	b003      	add	sp, #12
 80196ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80196f0:	4668      	mov	r0, sp
 80196f2:	f001 f8f3 	bl	801a8dc <__ieee754_rem_pio2f>
 80196f6:	0040      	lsls	r0, r0, #1
 80196f8:	f000 0002 	and.w	r0, r0, #2
 80196fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8019700:	ed9d 0a00 	vldr	s0, [sp]
 8019704:	f1c0 0001 	rsb	r0, r0, #1
 8019708:	f000 f8fa 	bl	8019900 <__kernel_tanf>
 801970c:	e7ed      	b.n	80196ea <tanf+0x2a>
 801970e:	bf00      	nop
 8019710:	3f490fda 	.word	0x3f490fda
 8019714:	00000000 	.word	0x00000000

08019718 <finitef>:
 8019718:	ee10 3a10 	vmov	r3, s0
 801971c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8019720:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8019724:	bfac      	ite	ge
 8019726:	2000      	movge	r0, #0
 8019728:	2001      	movlt	r0, #1
 801972a:	4770      	bx	lr

0801972c <nanf>:
 801972c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019734 <nanf+0x8>
 8019730:	4770      	bx	lr
 8019732:	bf00      	nop
 8019734:	7fc00000 	.word	0x7fc00000

08019738 <lrintf>:
 8019738:	ee10 3a10 	vmov	r3, s0
 801973c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019740:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8019744:	281e      	cmp	r0, #30
 8019746:	b082      	sub	sp, #8
 8019748:	dc2f      	bgt.n	80197aa <lrintf+0x72>
 801974a:	1c41      	adds	r1, r0, #1
 801974c:	da02      	bge.n	8019754 <lrintf+0x1c>
 801974e:	2000      	movs	r0, #0
 8019750:	b002      	add	sp, #8
 8019752:	4770      	bx	lr
 8019754:	2816      	cmp	r0, #22
 8019756:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801975a:	dd0a      	ble.n	8019772 <lrintf+0x3a>
 801975c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8019760:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8019764:	3a96      	subs	r2, #150	@ 0x96
 8019766:	fa03 f002 	lsl.w	r0, r3, r2
 801976a:	2900      	cmp	r1, #0
 801976c:	d0f0      	beq.n	8019750 <lrintf+0x18>
 801976e:	4240      	negs	r0, r0
 8019770:	e7ee      	b.n	8019750 <lrintf+0x18>
 8019772:	4b10      	ldr	r3, [pc, #64]	@ (80197b4 <lrintf+0x7c>)
 8019774:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8019778:	ed93 7a00 	vldr	s14, [r3]
 801977c:	ee37 0a00 	vadd.f32	s0, s14, s0
 8019780:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019784:	eddd 7a01 	vldr	s15, [sp, #4]
 8019788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801978c:	ee17 3a90 	vmov	r3, s15
 8019790:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8019794:	d0db      	beq.n	801974e <lrintf+0x16>
 8019796:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801979a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801979e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80197a2:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80197a6:	40d8      	lsrs	r0, r3
 80197a8:	e7df      	b.n	801976a <lrintf+0x32>
 80197aa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80197ae:	ee17 0a90 	vmov	r0, s15
 80197b2:	e7cd      	b.n	8019750 <lrintf+0x18>
 80197b4:	0801ca64 	.word	0x0801ca64

080197b8 <__ieee754_sqrtf>:
 80197b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80197bc:	4770      	bx	lr
	...

080197c0 <__kernel_cosf>:
 80197c0:	ee10 3a10 	vmov	r3, s0
 80197c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80197c8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80197cc:	eef0 6a40 	vmov.f32	s13, s0
 80197d0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80197d4:	d204      	bcs.n	80197e0 <__kernel_cosf+0x20>
 80197d6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80197da:	ee17 2a90 	vmov	r2, s15
 80197de:	b342      	cbz	r2, 8019832 <__kernel_cosf+0x72>
 80197e0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80197e4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8019850 <__kernel_cosf+0x90>
 80197e8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8019854 <__kernel_cosf+0x94>
 80197ec:	4a1a      	ldr	r2, [pc, #104]	@ (8019858 <__kernel_cosf+0x98>)
 80197ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 80197f2:	4293      	cmp	r3, r2
 80197f4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801985c <__kernel_cosf+0x9c>
 80197f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80197fc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8019860 <__kernel_cosf+0xa0>
 8019800:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019804:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8019864 <__kernel_cosf+0xa4>
 8019808:	eee6 7a07 	vfma.f32	s15, s12, s14
 801980c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8019868 <__kernel_cosf+0xa8>
 8019810:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019814:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8019818:	ee26 6a07 	vmul.f32	s12, s12, s14
 801981c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019820:	eee7 0a06 	vfma.f32	s1, s14, s12
 8019824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019828:	d804      	bhi.n	8019834 <__kernel_cosf+0x74>
 801982a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801982e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019832:	4770      	bx	lr
 8019834:	4a0d      	ldr	r2, [pc, #52]	@ (801986c <__kernel_cosf+0xac>)
 8019836:	4293      	cmp	r3, r2
 8019838:	bf9a      	itte	ls
 801983a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801983e:	ee07 3a10 	vmovls	s14, r3
 8019842:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8019846:	ee30 0a47 	vsub.f32	s0, s0, s14
 801984a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801984e:	e7ec      	b.n	801982a <__kernel_cosf+0x6a>
 8019850:	ad47d74e 	.word	0xad47d74e
 8019854:	310f74f6 	.word	0x310f74f6
 8019858:	3e999999 	.word	0x3e999999
 801985c:	b493f27c 	.word	0xb493f27c
 8019860:	37d00d01 	.word	0x37d00d01
 8019864:	bab60b61 	.word	0xbab60b61
 8019868:	3d2aaaab 	.word	0x3d2aaaab
 801986c:	3f480000 	.word	0x3f480000

08019870 <__kernel_sinf>:
 8019870:	ee10 3a10 	vmov	r3, s0
 8019874:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019878:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801987c:	d204      	bcs.n	8019888 <__kernel_sinf+0x18>
 801987e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8019882:	ee17 3a90 	vmov	r3, s15
 8019886:	b35b      	cbz	r3, 80198e0 <__kernel_sinf+0x70>
 8019888:	ee20 7a00 	vmul.f32	s14, s0, s0
 801988c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80198e4 <__kernel_sinf+0x74>
 8019890:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80198e8 <__kernel_sinf+0x78>
 8019894:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019898:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80198ec <__kernel_sinf+0x7c>
 801989c:	eee6 7a07 	vfma.f32	s15, s12, s14
 80198a0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80198f0 <__kernel_sinf+0x80>
 80198a4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80198a8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80198f4 <__kernel_sinf+0x84>
 80198ac:	ee60 6a07 	vmul.f32	s13, s0, s14
 80198b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80198b4:	b930      	cbnz	r0, 80198c4 <__kernel_sinf+0x54>
 80198b6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80198f8 <__kernel_sinf+0x88>
 80198ba:	eea7 6a27 	vfma.f32	s12, s14, s15
 80198be:	eea6 0a26 	vfma.f32	s0, s12, s13
 80198c2:	4770      	bx	lr
 80198c4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80198c8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80198cc:	eee0 7a86 	vfma.f32	s15, s1, s12
 80198d0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80198d4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80198fc <__kernel_sinf+0x8c>
 80198d8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80198dc:	ee30 0a60 	vsub.f32	s0, s0, s1
 80198e0:	4770      	bx	lr
 80198e2:	bf00      	nop
 80198e4:	2f2ec9d3 	.word	0x2f2ec9d3
 80198e8:	b2d72f34 	.word	0xb2d72f34
 80198ec:	3638ef1b 	.word	0x3638ef1b
 80198f0:	b9500d01 	.word	0xb9500d01
 80198f4:	3c088889 	.word	0x3c088889
 80198f8:	be2aaaab 	.word	0xbe2aaaab
 80198fc:	3e2aaaab 	.word	0x3e2aaaab

08019900 <__kernel_tanf>:
 8019900:	b508      	push	{r3, lr}
 8019902:	ee10 3a10 	vmov	r3, s0
 8019906:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801990a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801990e:	eef0 7a40 	vmov.f32	s15, s0
 8019912:	d217      	bcs.n	8019944 <__kernel_tanf+0x44>
 8019914:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8019918:	ee17 1a10 	vmov	r1, s14
 801991c:	bb41      	cbnz	r1, 8019970 <__kernel_tanf+0x70>
 801991e:	1c43      	adds	r3, r0, #1
 8019920:	4313      	orrs	r3, r2
 8019922:	d108      	bne.n	8019936 <__kernel_tanf+0x36>
 8019924:	f7ff fe7e 	bl	8019624 <fabsf>
 8019928:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801992c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019930:	eeb0 0a67 	vmov.f32	s0, s15
 8019934:	bd08      	pop	{r3, pc}
 8019936:	2801      	cmp	r0, #1
 8019938:	d0fa      	beq.n	8019930 <__kernel_tanf+0x30>
 801993a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801993e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8019942:	e7f5      	b.n	8019930 <__kernel_tanf+0x30>
 8019944:	494c      	ldr	r1, [pc, #304]	@ (8019a78 <__kernel_tanf+0x178>)
 8019946:	428a      	cmp	r2, r1
 8019948:	d312      	bcc.n	8019970 <__kernel_tanf+0x70>
 801994a:	2b00      	cmp	r3, #0
 801994c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8019a7c <__kernel_tanf+0x17c>
 8019950:	bfb8      	it	lt
 8019952:	eef1 7a40 	vneglt.f32	s15, s0
 8019956:	ee37 7a67 	vsub.f32	s14, s14, s15
 801995a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8019a80 <__kernel_tanf+0x180>
 801995e:	bfb8      	it	lt
 8019960:	eef1 0a60 	vneglt.f32	s1, s1
 8019964:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019968:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8019a84 <__kernel_tanf+0x184>
 801996c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019970:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019974:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8019a88 <__kernel_tanf+0x188>
 8019978:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8019a8c <__kernel_tanf+0x18c>
 801997c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8019a90 <__kernel_tanf+0x190>
 8019980:	493d      	ldr	r1, [pc, #244]	@ (8019a78 <__kernel_tanf+0x178>)
 8019982:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019986:	428a      	cmp	r2, r1
 8019988:	eea7 6a25 	vfma.f32	s12, s14, s11
 801998c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8019a94 <__kernel_tanf+0x194>
 8019990:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019994:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8019a98 <__kernel_tanf+0x198>
 8019998:	eea5 6a87 	vfma.f32	s12, s11, s14
 801999c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019a9c <__kernel_tanf+0x19c>
 80199a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80199a4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8019aa0 <__kernel_tanf+0x1a0>
 80199a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 80199ac:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8019aa4 <__kernel_tanf+0x1a4>
 80199b0:	eee7 5a05 	vfma.f32	s11, s14, s10
 80199b4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8019aa8 <__kernel_tanf+0x1a8>
 80199b8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80199bc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8019aac <__kernel_tanf+0x1ac>
 80199c0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80199c4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8019ab0 <__kernel_tanf+0x1b0>
 80199c8:	eea5 5a87 	vfma.f32	s10, s11, s14
 80199cc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8019ab4 <__kernel_tanf+0x1b4>
 80199d0:	eee5 5a07 	vfma.f32	s11, s10, s14
 80199d4:	eeb0 7a46 	vmov.f32	s14, s12
 80199d8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80199dc:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80199e0:	eeb0 6a60 	vmov.f32	s12, s1
 80199e4:	eea7 6a05 	vfma.f32	s12, s14, s10
 80199e8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8019ab8 <__kernel_tanf+0x1b8>
 80199ec:	eee6 0a26 	vfma.f32	s1, s12, s13
 80199f0:	eee5 0a07 	vfma.f32	s1, s10, s14
 80199f4:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80199f8:	d31d      	bcc.n	8019a36 <__kernel_tanf+0x136>
 80199fa:	ee07 0a10 	vmov	s14, r0
 80199fe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019a02:	ee26 5a06 	vmul.f32	s10, s12, s12
 8019a06:	ee36 6a07 	vadd.f32	s12, s12, s14
 8019a0a:	179b      	asrs	r3, r3, #30
 8019a0c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 8019a10:	f003 0302 	and.w	r3, r3, #2
 8019a14:	f1c3 0301 	rsb	r3, r3, #1
 8019a18:	ee06 3a90 	vmov	s13, r3
 8019a1c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8019a20:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a24:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019a28:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8019a2c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8019a30:	ee66 7a87 	vmul.f32	s15, s13, s14
 8019a34:	e77c      	b.n	8019930 <__kernel_tanf+0x30>
 8019a36:	2801      	cmp	r0, #1
 8019a38:	d01b      	beq.n	8019a72 <__kernel_tanf+0x172>
 8019a3a:	4b20      	ldr	r3, [pc, #128]	@ (8019abc <__kernel_tanf+0x1bc>)
 8019a3c:	ee16 2a10 	vmov	r2, s12
 8019a40:	401a      	ands	r2, r3
 8019a42:	ee05 2a90 	vmov	s11, r2
 8019a46:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019a4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019a4e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019a52:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8019a56:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8019a5a:	ee16 2a90 	vmov	r2, s13
 8019a5e:	4013      	ands	r3, r2
 8019a60:	ee07 3a90 	vmov	s15, r3
 8019a64:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019a68:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019a6c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019a70:	e75e      	b.n	8019930 <__kernel_tanf+0x30>
 8019a72:	eef0 7a46 	vmov.f32	s15, s12
 8019a76:	e75b      	b.n	8019930 <__kernel_tanf+0x30>
 8019a78:	3f2ca140 	.word	0x3f2ca140
 8019a7c:	3f490fda 	.word	0x3f490fda
 8019a80:	33222168 	.word	0x33222168
 8019a84:	00000000 	.word	0x00000000
 8019a88:	b79bae5f 	.word	0xb79bae5f
 8019a8c:	38a3f445 	.word	0x38a3f445
 8019a90:	37d95384 	.word	0x37d95384
 8019a94:	3a1a26c8 	.word	0x3a1a26c8
 8019a98:	3b6b6916 	.word	0x3b6b6916
 8019a9c:	3cb327a4 	.word	0x3cb327a4
 8019aa0:	3e088889 	.word	0x3e088889
 8019aa4:	3895c07a 	.word	0x3895c07a
 8019aa8:	398137b9 	.word	0x398137b9
 8019aac:	3abede48 	.word	0x3abede48
 8019ab0:	3c11371f 	.word	0x3c11371f
 8019ab4:	3d5d0dd1 	.word	0x3d5d0dd1
 8019ab8:	3eaaaaab 	.word	0x3eaaaaab
 8019abc:	fffff000 	.word	0xfffff000

08019ac0 <__ieee754_acosf>:
 8019ac0:	b508      	push	{r3, lr}
 8019ac2:	ee10 3a10 	vmov	r3, s0
 8019ac6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019aca:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019ace:	ed2d 8b0c 	vpush	{d8-d13}
 8019ad2:	d10a      	bne.n	8019aea <__ieee754_acosf+0x2a>
 8019ad4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8019c6c <__ieee754_acosf+0x1ac>
 8019ad8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8019c70 <__ieee754_acosf+0x1b0>
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bfc8      	it	gt
 8019ae0:	eeb0 0a67 	vmovgt.f32	s0, s15
 8019ae4:	ecbd 8b0c 	vpop	{d8-d13}
 8019ae8:	bd08      	pop	{r3, pc}
 8019aea:	d904      	bls.n	8019af6 <__ieee754_acosf+0x36>
 8019aec:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019af0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019af4:	e7f6      	b.n	8019ae4 <__ieee754_acosf+0x24>
 8019af6:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8019afa:	d23c      	bcs.n	8019b76 <__ieee754_acosf+0xb6>
 8019afc:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8019b00:	f240 80b1 	bls.w	8019c66 <__ieee754_acosf+0x1a6>
 8019b04:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019b08:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8019c74 <__ieee754_acosf+0x1b4>
 8019b0c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8019c78 <__ieee754_acosf+0x1b8>
 8019b10:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8019c7c <__ieee754_acosf+0x1bc>
 8019b14:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019b18:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8019c80 <__ieee754_acosf+0x1c0>
 8019b1c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019b20:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8019c84 <__ieee754_acosf+0x1c4>
 8019b24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019b28:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8019c88 <__ieee754_acosf+0x1c8>
 8019b2c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019b30:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8019c8c <__ieee754_acosf+0x1cc>
 8019b34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019b38:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8019c90 <__ieee754_acosf+0x1d0>
 8019b3c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8019b40:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8019c94 <__ieee754_acosf+0x1d4>
 8019b44:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b48:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8019c98 <__ieee754_acosf+0x1d8>
 8019b4c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019b50:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019b54:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019b5c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8019c9c <__ieee754_acosf+0x1dc>
 8019b60:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8019b64:	eee0 7a46 	vfms.f32	s15, s0, s12
 8019b68:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019b6c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8019ca0 <__ieee754_acosf+0x1e0>
 8019b70:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b74:	e7b6      	b.n	8019ae4 <__ieee754_acosf+0x24>
 8019b76:	2b00      	cmp	r3, #0
 8019b78:	eddf da3e 	vldr	s27, [pc, #248]	@ 8019c74 <__ieee754_acosf+0x1b4>
 8019b7c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8019c78 <__ieee754_acosf+0x1b8>
 8019b80:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8019c80 <__ieee754_acosf+0x1c0>
 8019b84:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8019c84 <__ieee754_acosf+0x1c4>
 8019b88:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8019c88 <__ieee754_acosf+0x1c8>
 8019b8c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8019c8c <__ieee754_acosf+0x1cc>
 8019b90:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8019c90 <__ieee754_acosf+0x1d0>
 8019b94:	eddf aa39 	vldr	s21, [pc, #228]	@ 8019c7c <__ieee754_acosf+0x1bc>
 8019b98:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8019c94 <__ieee754_acosf+0x1d4>
 8019b9c:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8019c98 <__ieee754_acosf+0x1d8>
 8019ba0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8019ba4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019ba8:	da28      	bge.n	8019bfc <__ieee754_acosf+0x13c>
 8019baa:	ee30 8a09 	vadd.f32	s16, s0, s18
 8019bae:	ee28 0a27 	vmul.f32	s0, s16, s15
 8019bb2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8019bb6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8019bba:	eeac ca80 	vfma.f32	s24, s25, s0
 8019bbe:	eeaa aa80 	vfma.f32	s20, s21, s0
 8019bc2:	eeec ba00 	vfma.f32	s23, s24, s0
 8019bc6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8019bca:	eeab ba80 	vfma.f32	s22, s23, s0
 8019bce:	eea9 9a80 	vfma.f32	s18, s19, s0
 8019bd2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8019bd6:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019bda:	f7ff fded 	bl	80197b8 <__ieee754_sqrtf>
 8019bde:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8019be2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8019ca4 <__ieee754_acosf+0x1e4>
 8019be6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019bea:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8019bee:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019bf2:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8019ca8 <__ieee754_acosf+0x1e8>
 8019bf6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019bfa:	e773      	b.n	8019ae4 <__ieee754_acosf+0x24>
 8019bfc:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019c00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019c04:	eeb0 0a48 	vmov.f32	s0, s16
 8019c08:	f7ff fdd6 	bl	80197b8 <__ieee754_sqrtf>
 8019c0c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8019c10:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8019c14:	eeac ca88 	vfma.f32	s24, s25, s16
 8019c18:	eeaa aa88 	vfma.f32	s20, s21, s16
 8019c1c:	eeec ba08 	vfma.f32	s23, s24, s16
 8019c20:	ee10 3a10 	vmov	r3, s0
 8019c24:	eeab ba88 	vfma.f32	s22, s23, s16
 8019c28:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019c2c:	f023 030f 	bic.w	r3, r3, #15
 8019c30:	eeea 9a08 	vfma.f32	s19, s20, s16
 8019c34:	ee07 3a90 	vmov	s15, r3
 8019c38:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8019c3c:	eeb0 6a48 	vmov.f32	s12, s16
 8019c40:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8019c44:	eea9 9a88 	vfma.f32	s18, s19, s16
 8019c48:	ee70 6a27 	vadd.f32	s13, s0, s15
 8019c4c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8019c50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8019c54:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8019c58:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019c5c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019c60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019c64:	e73e      	b.n	8019ae4 <__ieee754_acosf+0x24>
 8019c66:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8019cac <__ieee754_acosf+0x1ec>
 8019c6a:	e73b      	b.n	8019ae4 <__ieee754_acosf+0x24>
 8019c6c:	40490fdb 	.word	0x40490fdb
 8019c70:	00000000 	.word	0x00000000
 8019c74:	3811ef08 	.word	0x3811ef08
 8019c78:	3a4f7f04 	.word	0x3a4f7f04
 8019c7c:	bf303361 	.word	0xbf303361
 8019c80:	bd241146 	.word	0xbd241146
 8019c84:	3e4e0aa8 	.word	0x3e4e0aa8
 8019c88:	bea6b090 	.word	0xbea6b090
 8019c8c:	3e2aaaab 	.word	0x3e2aaaab
 8019c90:	3d9dc62e 	.word	0x3d9dc62e
 8019c94:	4001572d 	.word	0x4001572d
 8019c98:	c019d139 	.word	0xc019d139
 8019c9c:	33a22168 	.word	0x33a22168
 8019ca0:	3fc90fda 	.word	0x3fc90fda
 8019ca4:	b3a22168 	.word	0xb3a22168
 8019ca8:	40490fda 	.word	0x40490fda
 8019cac:	3fc90fdb 	.word	0x3fc90fdb

08019cb0 <__ieee754_asinf>:
 8019cb0:	b538      	push	{r3, r4, r5, lr}
 8019cb2:	ee10 5a10 	vmov	r5, s0
 8019cb6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019cba:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8019cbe:	ed2d 8b04 	vpush	{d8-d9}
 8019cc2:	d10c      	bne.n	8019cde <__ieee754_asinf+0x2e>
 8019cc4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8019e3c <__ieee754_asinf+0x18c>
 8019cc8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8019e40 <__ieee754_asinf+0x190>
 8019ccc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019cd0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019cd4:	eeb0 0a67 	vmov.f32	s0, s15
 8019cd8:	ecbd 8b04 	vpop	{d8-d9}
 8019cdc:	bd38      	pop	{r3, r4, r5, pc}
 8019cde:	d904      	bls.n	8019cea <__ieee754_asinf+0x3a>
 8019ce0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019ce4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019ce8:	e7f6      	b.n	8019cd8 <__ieee754_asinf+0x28>
 8019cea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019cee:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8019cf2:	d20b      	bcs.n	8019d0c <__ieee754_asinf+0x5c>
 8019cf4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8019cf8:	d252      	bcs.n	8019da0 <__ieee754_asinf+0xf0>
 8019cfa:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8019e44 <__ieee754_asinf+0x194>
 8019cfe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8019d02:	eef4 7ae8 	vcmpe.f32	s15, s17
 8019d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d0a:	dce5      	bgt.n	8019cd8 <__ieee754_asinf+0x28>
 8019d0c:	f7ff fc8a 	bl	8019624 <fabsf>
 8019d10:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8019d14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019d18:	ee28 8a27 	vmul.f32	s16, s16, s15
 8019d1c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8019e48 <__ieee754_asinf+0x198>
 8019d20:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8019e4c <__ieee754_asinf+0x19c>
 8019d24:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8019e50 <__ieee754_asinf+0x1a0>
 8019d28:	eea8 7a27 	vfma.f32	s14, s16, s15
 8019d2c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8019e54 <__ieee754_asinf+0x1a4>
 8019d30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019d34:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8019e58 <__ieee754_asinf+0x1a8>
 8019d38:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019d3c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8019e5c <__ieee754_asinf+0x1ac>
 8019d40:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019d44:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8019e60 <__ieee754_asinf+0x1b0>
 8019d48:	eea7 9a88 	vfma.f32	s18, s15, s16
 8019d4c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8019e64 <__ieee754_asinf+0x1b4>
 8019d50:	eee8 7a07 	vfma.f32	s15, s16, s14
 8019d54:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8019e68 <__ieee754_asinf+0x1b8>
 8019d58:	eea7 7a88 	vfma.f32	s14, s15, s16
 8019d5c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8019e6c <__ieee754_asinf+0x1bc>
 8019d60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8019d64:	eeb0 0a48 	vmov.f32	s0, s16
 8019d68:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019d6c:	f7ff fd24 	bl	80197b8 <__ieee754_sqrtf>
 8019d70:	4b3f      	ldr	r3, [pc, #252]	@ (8019e70 <__ieee754_asinf+0x1c0>)
 8019d72:	ee29 9a08 	vmul.f32	s18, s18, s16
 8019d76:	429c      	cmp	r4, r3
 8019d78:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019d7c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8019d80:	d93d      	bls.n	8019dfe <__ieee754_asinf+0x14e>
 8019d82:	eea0 0a06 	vfma.f32	s0, s0, s12
 8019d86:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8019e74 <__ieee754_asinf+0x1c4>
 8019d8a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019d8e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8019e40 <__ieee754_asinf+0x190>
 8019d92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019d96:	2d00      	cmp	r5, #0
 8019d98:	bfd8      	it	le
 8019d9a:	eeb1 0a40 	vnegle.f32	s0, s0
 8019d9e:	e79b      	b.n	8019cd8 <__ieee754_asinf+0x28>
 8019da0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8019da4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8019e4c <__ieee754_asinf+0x19c>
 8019da8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8019e48 <__ieee754_asinf+0x198>
 8019dac:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8019e60 <__ieee754_asinf+0x1b0>
 8019db0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8019db4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8019e54 <__ieee754_asinf+0x1a4>
 8019db8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019dbc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8019e58 <__ieee754_asinf+0x1a8>
 8019dc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019dc4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8019e5c <__ieee754_asinf+0x1ac>
 8019dc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019dcc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8019e50 <__ieee754_asinf+0x1a0>
 8019dd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019dd4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8019e64 <__ieee754_asinf+0x1b4>
 8019dd8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019ddc:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8019e68 <__ieee754_asinf+0x1b8>
 8019de0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8019de4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8019e6c <__ieee754_asinf+0x1bc>
 8019de8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019df0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8019df4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019df8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019dfc:	e76c      	b.n	8019cd8 <__ieee754_asinf+0x28>
 8019dfe:	ee10 3a10 	vmov	r3, s0
 8019e02:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019e06:	f023 030f 	bic.w	r3, r3, #15
 8019e0a:	ee07 3a10 	vmov	s14, r3
 8019e0e:	eea7 8a47 	vfms.f32	s16, s14, s14
 8019e12:	ee70 5a00 	vadd.f32	s11, s0, s0
 8019e16:	ee30 0a07 	vadd.f32	s0, s0, s14
 8019e1a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019e3c <__ieee754_asinf+0x18c>
 8019e1e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8019e22:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8019e78 <__ieee754_asinf+0x1c8>
 8019e26:	eee5 7a66 	vfms.f32	s15, s10, s13
 8019e2a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8019e2e:	eeb0 6a40 	vmov.f32	s12, s0
 8019e32:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019e36:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019e3a:	e7aa      	b.n	8019d92 <__ieee754_asinf+0xe2>
 8019e3c:	b33bbd2e 	.word	0xb33bbd2e
 8019e40:	3fc90fdb 	.word	0x3fc90fdb
 8019e44:	7149f2ca 	.word	0x7149f2ca
 8019e48:	3a4f7f04 	.word	0x3a4f7f04
 8019e4c:	3811ef08 	.word	0x3811ef08
 8019e50:	3e2aaaab 	.word	0x3e2aaaab
 8019e54:	bd241146 	.word	0xbd241146
 8019e58:	3e4e0aa8 	.word	0x3e4e0aa8
 8019e5c:	bea6b090 	.word	0xbea6b090
 8019e60:	3d9dc62e 	.word	0x3d9dc62e
 8019e64:	bf303361 	.word	0xbf303361
 8019e68:	4001572d 	.word	0x4001572d
 8019e6c:	c019d139 	.word	0xc019d139
 8019e70:	3f799999 	.word	0x3f799999
 8019e74:	333bbd2e 	.word	0x333bbd2e
 8019e78:	3f490fdb 	.word	0x3f490fdb

08019e7c <__ieee754_atan2f>:
 8019e7c:	ee10 2a90 	vmov	r2, s1
 8019e80:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8019e84:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019e88:	b510      	push	{r4, lr}
 8019e8a:	eef0 7a40 	vmov.f32	s15, s0
 8019e8e:	d806      	bhi.n	8019e9e <__ieee754_atan2f+0x22>
 8019e90:	ee10 0a10 	vmov	r0, s0
 8019e94:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8019e98:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019e9c:	d904      	bls.n	8019ea8 <__ieee754_atan2f+0x2c>
 8019e9e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8019ea2:	eeb0 0a67 	vmov.f32	s0, s15
 8019ea6:	bd10      	pop	{r4, pc}
 8019ea8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019eac:	d103      	bne.n	8019eb6 <__ieee754_atan2f+0x3a>
 8019eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019eb2:	f000 be43 	b.w	801ab3c <atanf>
 8019eb6:	1794      	asrs	r4, r2, #30
 8019eb8:	f004 0402 	and.w	r4, r4, #2
 8019ebc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019ec0:	b943      	cbnz	r3, 8019ed4 <__ieee754_atan2f+0x58>
 8019ec2:	2c02      	cmp	r4, #2
 8019ec4:	d05e      	beq.n	8019f84 <__ieee754_atan2f+0x108>
 8019ec6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019f98 <__ieee754_atan2f+0x11c>
 8019eca:	2c03      	cmp	r4, #3
 8019ecc:	bf08      	it	eq
 8019ece:	eef0 7a47 	vmoveq.f32	s15, s14
 8019ed2:	e7e6      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019ed4:	b941      	cbnz	r1, 8019ee8 <__ieee754_atan2f+0x6c>
 8019ed6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8019f9c <__ieee754_atan2f+0x120>
 8019eda:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8019fa0 <__ieee754_atan2f+0x124>
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	bfb8      	it	lt
 8019ee2:	eef0 7a47 	vmovlt.f32	s15, s14
 8019ee6:	e7dc      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019ee8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019eec:	d110      	bne.n	8019f10 <__ieee754_atan2f+0x94>
 8019eee:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019ef2:	f104 34ff 	add.w	r4, r4, #4294967295
 8019ef6:	d107      	bne.n	8019f08 <__ieee754_atan2f+0x8c>
 8019ef8:	2c02      	cmp	r4, #2
 8019efa:	d846      	bhi.n	8019f8a <__ieee754_atan2f+0x10e>
 8019efc:	4b29      	ldr	r3, [pc, #164]	@ (8019fa4 <__ieee754_atan2f+0x128>)
 8019efe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019f02:	edd3 7a00 	vldr	s15, [r3]
 8019f06:	e7cc      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f08:	2c02      	cmp	r4, #2
 8019f0a:	d841      	bhi.n	8019f90 <__ieee754_atan2f+0x114>
 8019f0c:	4b26      	ldr	r3, [pc, #152]	@ (8019fa8 <__ieee754_atan2f+0x12c>)
 8019f0e:	e7f6      	b.n	8019efe <__ieee754_atan2f+0x82>
 8019f10:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019f14:	d0df      	beq.n	8019ed6 <__ieee754_atan2f+0x5a>
 8019f16:	1a5b      	subs	r3, r3, r1
 8019f18:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8019f1c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8019f20:	da1a      	bge.n	8019f58 <__ieee754_atan2f+0xdc>
 8019f22:	2a00      	cmp	r2, #0
 8019f24:	da01      	bge.n	8019f2a <__ieee754_atan2f+0xae>
 8019f26:	313c      	adds	r1, #60	@ 0x3c
 8019f28:	db19      	blt.n	8019f5e <__ieee754_atan2f+0xe2>
 8019f2a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8019f2e:	f7ff fb79 	bl	8019624 <fabsf>
 8019f32:	f000 fe03 	bl	801ab3c <atanf>
 8019f36:	eef0 7a40 	vmov.f32	s15, s0
 8019f3a:	2c01      	cmp	r4, #1
 8019f3c:	d012      	beq.n	8019f64 <__ieee754_atan2f+0xe8>
 8019f3e:	2c02      	cmp	r4, #2
 8019f40:	d017      	beq.n	8019f72 <__ieee754_atan2f+0xf6>
 8019f42:	2c00      	cmp	r4, #0
 8019f44:	d0ad      	beq.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f46:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8019fac <__ieee754_atan2f+0x130>
 8019f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f4e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8019fb0 <__ieee754_atan2f+0x134>
 8019f52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f56:	e7a4      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f58:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8019f9c <__ieee754_atan2f+0x120>
 8019f5c:	e7ed      	b.n	8019f3a <__ieee754_atan2f+0xbe>
 8019f5e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8019fb4 <__ieee754_atan2f+0x138>
 8019f62:	e7ea      	b.n	8019f3a <__ieee754_atan2f+0xbe>
 8019f64:	ee17 3a90 	vmov	r3, s15
 8019f68:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019f6c:	ee07 3a90 	vmov	s15, r3
 8019f70:	e797      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f72:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8019fac <__ieee754_atan2f+0x130>
 8019f76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f7a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8019fb0 <__ieee754_atan2f+0x134>
 8019f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f82:	e78e      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f84:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8019fb0 <__ieee754_atan2f+0x134>
 8019f88:	e78b      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f8a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8019fb8 <__ieee754_atan2f+0x13c>
 8019f8e:	e788      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f90:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019fb4 <__ieee754_atan2f+0x138>
 8019f94:	e785      	b.n	8019ea2 <__ieee754_atan2f+0x26>
 8019f96:	bf00      	nop
 8019f98:	c0490fdb 	.word	0xc0490fdb
 8019f9c:	3fc90fdb 	.word	0x3fc90fdb
 8019fa0:	bfc90fdb 	.word	0xbfc90fdb
 8019fa4:	0801ca78 	.word	0x0801ca78
 8019fa8:	0801ca6c 	.word	0x0801ca6c
 8019fac:	33bbbd2e 	.word	0x33bbbd2e
 8019fb0:	40490fdb 	.word	0x40490fdb
 8019fb4:	00000000 	.word	0x00000000
 8019fb8:	3f490fdb 	.word	0x3f490fdb

08019fbc <__ieee754_expf>:
 8019fbc:	ee10 2a10 	vmov	r2, s0
 8019fc0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8019fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019fc8:	d902      	bls.n	8019fd0 <__ieee754_expf+0x14>
 8019fca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019fce:	4770      	bx	lr
 8019fd0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8019fd4:	d106      	bne.n	8019fe4 <__ieee754_expf+0x28>
 8019fd6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801a110 <__ieee754_expf+0x154>
 8019fda:	2900      	cmp	r1, #0
 8019fdc:	bf18      	it	ne
 8019fde:	eeb0 0a67 	vmovne.f32	s0, s15
 8019fe2:	4770      	bx	lr
 8019fe4:	484b      	ldr	r0, [pc, #300]	@ (801a114 <__ieee754_expf+0x158>)
 8019fe6:	4282      	cmp	r2, r0
 8019fe8:	dd02      	ble.n	8019ff0 <__ieee754_expf+0x34>
 8019fea:	2000      	movs	r0, #0
 8019fec:	f000 bf00 	b.w	801adf0 <__math_oflowf>
 8019ff0:	2a00      	cmp	r2, #0
 8019ff2:	da05      	bge.n	801a000 <__ieee754_expf+0x44>
 8019ff4:	4a48      	ldr	r2, [pc, #288]	@ (801a118 <__ieee754_expf+0x15c>)
 8019ff6:	4293      	cmp	r3, r2
 8019ff8:	d902      	bls.n	801a000 <__ieee754_expf+0x44>
 8019ffa:	2000      	movs	r0, #0
 8019ffc:	f000 bef2 	b.w	801ade4 <__math_uflowf>
 801a000:	4a46      	ldr	r2, [pc, #280]	@ (801a11c <__ieee754_expf+0x160>)
 801a002:	4293      	cmp	r3, r2
 801a004:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801a008:	d952      	bls.n	801a0b0 <__ieee754_expf+0xf4>
 801a00a:	4a45      	ldr	r2, [pc, #276]	@ (801a120 <__ieee754_expf+0x164>)
 801a00c:	4293      	cmp	r3, r2
 801a00e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801a012:	d834      	bhi.n	801a07e <__ieee754_expf+0xc2>
 801a014:	4b43      	ldr	r3, [pc, #268]	@ (801a124 <__ieee754_expf+0x168>)
 801a016:	4413      	add	r3, r2
 801a018:	ed93 7a00 	vldr	s14, [r3]
 801a01c:	4b42      	ldr	r3, [pc, #264]	@ (801a128 <__ieee754_expf+0x16c>)
 801a01e:	4413      	add	r3, r2
 801a020:	ee30 7a47 	vsub.f32	s14, s0, s14
 801a024:	f1c1 0201 	rsb	r2, r1, #1
 801a028:	edd3 7a00 	vldr	s15, [r3]
 801a02c:	1a52      	subs	r2, r2, r1
 801a02e:	ee37 0a67 	vsub.f32	s0, s14, s15
 801a032:	ee20 6a00 	vmul.f32	s12, s0, s0
 801a036:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801a12c <__ieee754_expf+0x170>
 801a03a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801a130 <__ieee754_expf+0x174>
 801a03e:	eee6 6a05 	vfma.f32	s13, s12, s10
 801a042:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801a134 <__ieee754_expf+0x178>
 801a046:	eea6 5a86 	vfma.f32	s10, s13, s12
 801a04a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801a138 <__ieee754_expf+0x17c>
 801a04e:	eee5 6a06 	vfma.f32	s13, s10, s12
 801a052:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801a13c <__ieee754_expf+0x180>
 801a056:	eea6 5a86 	vfma.f32	s10, s13, s12
 801a05a:	eef0 6a40 	vmov.f32	s13, s0
 801a05e:	eee5 6a46 	vfms.f32	s13, s10, s12
 801a062:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801a066:	ee20 5a26 	vmul.f32	s10, s0, s13
 801a06a:	bb92      	cbnz	r2, 801a0d2 <__ieee754_expf+0x116>
 801a06c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801a070:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801a074:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a078:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801a07c:	4770      	bx	lr
 801a07e:	4b30      	ldr	r3, [pc, #192]	@ (801a140 <__ieee754_expf+0x184>)
 801a080:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801a144 <__ieee754_expf+0x188>
 801a084:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801a148 <__ieee754_expf+0x18c>
 801a088:	4413      	add	r3, r2
 801a08a:	edd3 7a00 	vldr	s15, [r3]
 801a08e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a092:	eeb0 7a40 	vmov.f32	s14, s0
 801a096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a09a:	ee17 2a90 	vmov	r2, s15
 801a09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a0a2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a0a6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801a14c <__ieee754_expf+0x190>
 801a0aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a0ae:	e7be      	b.n	801a02e <__ieee754_expf+0x72>
 801a0b0:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801a0b4:	d20b      	bcs.n	801a0ce <__ieee754_expf+0x112>
 801a0b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801a150 <__ieee754_expf+0x194>
 801a0ba:	ee70 6a26 	vadd.f32	s13, s0, s13
 801a0be:	eef4 6ae5 	vcmpe.f32	s13, s11
 801a0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a0c6:	dd02      	ble.n	801a0ce <__ieee754_expf+0x112>
 801a0c8:	ee30 0a25 	vadd.f32	s0, s0, s11
 801a0cc:	4770      	bx	lr
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	e7af      	b.n	801a032 <__ieee754_expf+0x76>
 801a0d2:	ee36 6a66 	vsub.f32	s12, s12, s13
 801a0d6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801a0da:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801a0de:	bfb8      	it	lt
 801a0e0:	3264      	addlt	r2, #100	@ 0x64
 801a0e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a0e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0ea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801a0ee:	ee17 3a90 	vmov	r3, s15
 801a0f2:	bfab      	itete	ge
 801a0f4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801a0f8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801a0fc:	ee00 3a10 	vmovge	s0, r3
 801a100:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801a154 <__ieee754_expf+0x198>
 801a104:	bfbc      	itt	lt
 801a106:	ee00 3a10 	vmovlt	s0, r3
 801a10a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801a10e:	4770      	bx	lr
 801a110:	00000000 	.word	0x00000000
 801a114:	42b17217 	.word	0x42b17217
 801a118:	42cff1b5 	.word	0x42cff1b5
 801a11c:	3eb17218 	.word	0x3eb17218
 801a120:	3f851591 	.word	0x3f851591
 801a124:	0801ca8c 	.word	0x0801ca8c
 801a128:	0801ca84 	.word	0x0801ca84
 801a12c:	3331bb4c 	.word	0x3331bb4c
 801a130:	b5ddea0e 	.word	0xb5ddea0e
 801a134:	388ab355 	.word	0x388ab355
 801a138:	bb360b61 	.word	0xbb360b61
 801a13c:	3e2aaaab 	.word	0x3e2aaaab
 801a140:	0801ca94 	.word	0x0801ca94
 801a144:	3fb8aa3b 	.word	0x3fb8aa3b
 801a148:	3f317180 	.word	0x3f317180
 801a14c:	3717f7d1 	.word	0x3717f7d1
 801a150:	7149f2ca 	.word	0x7149f2ca
 801a154:	0d800000 	.word	0x0d800000

0801a158 <__ieee754_logf>:
 801a158:	ee10 3a10 	vmov	r3, s0
 801a15c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801a160:	d106      	bne.n	801a170 <__ieee754_logf+0x18>
 801a162:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801a2fc <__ieee754_logf+0x1a4>
 801a166:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801a300 <__ieee754_logf+0x1a8>
 801a16a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801a16e:	4770      	bx	lr
 801a170:	2b00      	cmp	r3, #0
 801a172:	461a      	mov	r2, r3
 801a174:	da02      	bge.n	801a17c <__ieee754_logf+0x24>
 801a176:	ee30 7a40 	vsub.f32	s14, s0, s0
 801a17a:	e7f4      	b.n	801a166 <__ieee754_logf+0xe>
 801a17c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801a180:	db02      	blt.n	801a188 <__ieee754_logf+0x30>
 801a182:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a186:	4770      	bx	lr
 801a188:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a18c:	bfb8      	it	lt
 801a18e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 801a304 <__ieee754_logf+0x1ac>
 801a192:	485d      	ldr	r0, [pc, #372]	@ (801a308 <__ieee754_logf+0x1b0>)
 801a194:	bfbe      	ittt	lt
 801a196:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801a19a:	f06f 0118 	mvnlt.w	r1, #24
 801a19e:	ee17 2a90 	vmovlt	r2, s15
 801a1a2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801a1a6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a1aa:	4410      	add	r0, r2
 801a1ac:	bfa8      	it	ge
 801a1ae:	2100      	movge	r1, #0
 801a1b0:	3b7f      	subs	r3, #127	@ 0x7f
 801a1b2:	440b      	add	r3, r1
 801a1b4:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801a1b8:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801a1bc:	4311      	orrs	r1, r2
 801a1be:	ee00 1a10 	vmov	s0, r1
 801a1c2:	4952      	ldr	r1, [pc, #328]	@ (801a30c <__ieee754_logf+0x1b4>)
 801a1c4:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801a1c8:	f102 000f 	add.w	r0, r2, #15
 801a1cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a1d0:	4001      	ands	r1, r0
 801a1d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a1d6:	bb89      	cbnz	r1, 801a23c <__ieee754_logf+0xe4>
 801a1d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a1e0:	d10f      	bne.n	801a202 <__ieee754_logf+0xaa>
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	f000 8087 	beq.w	801a2f6 <__ieee754_logf+0x19e>
 801a1e8:	ee07 3a90 	vmov	s15, r3
 801a1ec:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801a310 <__ieee754_logf+0x1b8>
 801a1f0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801a314 <__ieee754_logf+0x1bc>
 801a1f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a1f8:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a1fc:	eea7 0a87 	vfma.f32	s0, s15, s14
 801a200:	4770      	bx	lr
 801a202:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801a318 <__ieee754_logf+0x1c0>
 801a206:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a20a:	eee0 7a66 	vfms.f32	s15, s0, s13
 801a20e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a212:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a216:	b913      	cbnz	r3, 801a21e <__ieee754_logf+0xc6>
 801a218:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a21c:	4770      	bx	lr
 801a21e:	ee07 3a90 	vmov	s15, r3
 801a222:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801a310 <__ieee754_logf+0x1b8>
 801a226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a22a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801a22e:	ee37 0a40 	vsub.f32	s0, s14, s0
 801a232:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801a314 <__ieee754_logf+0x1bc>
 801a236:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801a23a:	4770      	bx	lr
 801a23c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801a240:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a244:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801a31c <__ieee754_logf+0x1c4>
 801a248:	eddf 4a35 	vldr	s9, [pc, #212]	@ 801a320 <__ieee754_logf+0x1c8>
 801a24c:	4935      	ldr	r1, [pc, #212]	@ (801a324 <__ieee754_logf+0x1cc>)
 801a24e:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801a252:	4411      	add	r1, r2
 801a254:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801a258:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801a25c:	430a      	orrs	r2, r1
 801a25e:	2a00      	cmp	r2, #0
 801a260:	ee07 3a90 	vmov	s15, r3
 801a264:	ee26 5a06 	vmul.f32	s10, s12, s12
 801a268:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a26c:	ee25 7a05 	vmul.f32	s14, s10, s10
 801a270:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801a328 <__ieee754_logf+0x1d0>
 801a274:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a278:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801a32c <__ieee754_logf+0x1d4>
 801a27c:	eee7 5a87 	vfma.f32	s11, s15, s14
 801a280:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801a330 <__ieee754_logf+0x1d8>
 801a284:	eee7 7a24 	vfma.f32	s15, s14, s9
 801a288:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801a334 <__ieee754_logf+0x1dc>
 801a28c:	eee7 4a87 	vfma.f32	s9, s15, s14
 801a290:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801a338 <__ieee754_logf+0x1e0>
 801a294:	eee4 7a87 	vfma.f32	s15, s9, s14
 801a298:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a29c:	eee5 7a87 	vfma.f32	s15, s11, s14
 801a2a0:	dd1a      	ble.n	801a2d8 <__ieee754_logf+0x180>
 801a2a2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801a2a6:	ee20 7a07 	vmul.f32	s14, s0, s14
 801a2aa:	ee27 7a00 	vmul.f32	s14, s14, s0
 801a2ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a2b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a2b6:	b913      	cbnz	r3, 801a2be <__ieee754_logf+0x166>
 801a2b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a2bc:	e7ac      	b.n	801a218 <__ieee754_logf+0xc0>
 801a2be:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801a310 <__ieee754_logf+0x1b8>
 801a2c2:	eee6 7a86 	vfma.f32	s15, s13, s12
 801a2c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a2ca:	ee37 0a40 	vsub.f32	s0, s14, s0
 801a2ce:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801a314 <__ieee754_logf+0x1bc>
 801a2d2:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801a2d6:	4770      	bx	lr
 801a2d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a2dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a2e0:	b913      	cbnz	r3, 801a2e8 <__ieee754_logf+0x190>
 801a2e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a2e6:	4770      	bx	lr
 801a2e8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801a310 <__ieee754_logf+0x1b8>
 801a2ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801a2f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801a2f4:	e7eb      	b.n	801a2ce <__ieee754_logf+0x176>
 801a2f6:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801a300 <__ieee754_logf+0x1a8>
 801a2fa:	4770      	bx	lr
 801a2fc:	cc000000 	.word	0xcc000000
 801a300:	00000000 	.word	0x00000000
 801a304:	4c000000 	.word	0x4c000000
 801a308:	004afb20 	.word	0x004afb20
 801a30c:	007ffff0 	.word	0x007ffff0
 801a310:	3717f7d1 	.word	0x3717f7d1
 801a314:	3f317180 	.word	0x3f317180
 801a318:	3eaaaaab 	.word	0x3eaaaaab
 801a31c:	3e1cd04f 	.word	0x3e1cd04f
 801a320:	3e178897 	.word	0x3e178897
 801a324:	ffcf5c30 	.word	0xffcf5c30
 801a328:	3e638e29 	.word	0x3e638e29
 801a32c:	3ecccccd 	.word	0x3ecccccd
 801a330:	3e3a3325 	.word	0x3e3a3325
 801a334:	3e924925 	.word	0x3e924925
 801a338:	3f2aaaab 	.word	0x3f2aaaab

0801a33c <__ieee754_powf>:
 801a33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a340:	ee10 4a90 	vmov	r4, s1
 801a344:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801a348:	ed2d 8b02 	vpush	{d8}
 801a34c:	ee10 6a10 	vmov	r6, s0
 801a350:	eeb0 8a40 	vmov.f32	s16, s0
 801a354:	eef0 8a60 	vmov.f32	s17, s1
 801a358:	d10c      	bne.n	801a374 <__ieee754_powf+0x38>
 801a35a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801a35e:	0076      	lsls	r6, r6, #1
 801a360:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801a364:	f240 829c 	bls.w	801a8a0 <__ieee754_powf+0x564>
 801a368:	ee38 0a28 	vadd.f32	s0, s16, s17
 801a36c:	ecbd 8b02 	vpop	{d8}
 801a370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a374:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801a378:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801a37c:	d802      	bhi.n	801a384 <__ieee754_powf+0x48>
 801a37e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801a382:	d908      	bls.n	801a396 <__ieee754_powf+0x5a>
 801a384:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801a388:	d1ee      	bne.n	801a368 <__ieee754_powf+0x2c>
 801a38a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801a38e:	0064      	lsls	r4, r4, #1
 801a390:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801a394:	e7e6      	b.n	801a364 <__ieee754_powf+0x28>
 801a396:	2e00      	cmp	r6, #0
 801a398:	da1e      	bge.n	801a3d8 <__ieee754_powf+0x9c>
 801a39a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801a39e:	d22b      	bcs.n	801a3f8 <__ieee754_powf+0xbc>
 801a3a0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801a3a4:	d332      	bcc.n	801a40c <__ieee754_powf+0xd0>
 801a3a6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801a3aa:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801a3ae:	fa49 f503 	asr.w	r5, r9, r3
 801a3b2:	fa05 f303 	lsl.w	r3, r5, r3
 801a3b6:	454b      	cmp	r3, r9
 801a3b8:	d126      	bne.n	801a408 <__ieee754_powf+0xcc>
 801a3ba:	f005 0501 	and.w	r5, r5, #1
 801a3be:	f1c5 0502 	rsb	r5, r5, #2
 801a3c2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801a3c6:	d122      	bne.n	801a40e <__ieee754_powf+0xd2>
 801a3c8:	2c00      	cmp	r4, #0
 801a3ca:	f280 826f 	bge.w	801a8ac <__ieee754_powf+0x570>
 801a3ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a3d2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801a3d6:	e7c9      	b.n	801a36c <__ieee754_powf+0x30>
 801a3d8:	2500      	movs	r5, #0
 801a3da:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801a3de:	d1f0      	bne.n	801a3c2 <__ieee754_powf+0x86>
 801a3e0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801a3e4:	f000 825c 	beq.w	801a8a0 <__ieee754_powf+0x564>
 801a3e8:	d908      	bls.n	801a3fc <__ieee754_powf+0xc0>
 801a3ea:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801a74c <__ieee754_powf+0x410>
 801a3ee:	2c00      	cmp	r4, #0
 801a3f0:	bfa8      	it	ge
 801a3f2:	eeb0 0a68 	vmovge.f32	s0, s17
 801a3f6:	e7b9      	b.n	801a36c <__ieee754_powf+0x30>
 801a3f8:	2502      	movs	r5, #2
 801a3fa:	e7ee      	b.n	801a3da <__ieee754_powf+0x9e>
 801a3fc:	2c00      	cmp	r4, #0
 801a3fe:	f280 8252 	bge.w	801a8a6 <__ieee754_powf+0x56a>
 801a402:	eeb1 0a68 	vneg.f32	s0, s17
 801a406:	e7b1      	b.n	801a36c <__ieee754_powf+0x30>
 801a408:	2500      	movs	r5, #0
 801a40a:	e7da      	b.n	801a3c2 <__ieee754_powf+0x86>
 801a40c:	2500      	movs	r5, #0
 801a40e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801a412:	d102      	bne.n	801a41a <__ieee754_powf+0xde>
 801a414:	ee28 0a08 	vmul.f32	s0, s16, s16
 801a418:	e7a8      	b.n	801a36c <__ieee754_powf+0x30>
 801a41a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801a41e:	d109      	bne.n	801a434 <__ieee754_powf+0xf8>
 801a420:	2e00      	cmp	r6, #0
 801a422:	db07      	blt.n	801a434 <__ieee754_powf+0xf8>
 801a424:	eeb0 0a48 	vmov.f32	s0, s16
 801a428:	ecbd 8b02 	vpop	{d8}
 801a42c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a430:	f7ff b9c2 	b.w	80197b8 <__ieee754_sqrtf>
 801a434:	eeb0 0a48 	vmov.f32	s0, s16
 801a438:	f7ff f8f4 	bl	8019624 <fabsf>
 801a43c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801a440:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801a444:	4647      	mov	r7, r8
 801a446:	d002      	beq.n	801a44e <__ieee754_powf+0x112>
 801a448:	f1b8 0f00 	cmp.w	r8, #0
 801a44c:	d117      	bne.n	801a47e <__ieee754_powf+0x142>
 801a44e:	2c00      	cmp	r4, #0
 801a450:	bfbc      	itt	lt
 801a452:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801a456:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801a45a:	2e00      	cmp	r6, #0
 801a45c:	da86      	bge.n	801a36c <__ieee754_powf+0x30>
 801a45e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801a462:	ea58 0805 	orrs.w	r8, r8, r5
 801a466:	d104      	bne.n	801a472 <__ieee754_powf+0x136>
 801a468:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a46c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801a470:	e77c      	b.n	801a36c <__ieee754_powf+0x30>
 801a472:	2d01      	cmp	r5, #1
 801a474:	f47f af7a 	bne.w	801a36c <__ieee754_powf+0x30>
 801a478:	eeb1 0a40 	vneg.f32	s0, s0
 801a47c:	e776      	b.n	801a36c <__ieee754_powf+0x30>
 801a47e:	0ff0      	lsrs	r0, r6, #31
 801a480:	3801      	subs	r0, #1
 801a482:	ea55 0300 	orrs.w	r3, r5, r0
 801a486:	d104      	bne.n	801a492 <__ieee754_powf+0x156>
 801a488:	ee38 8a48 	vsub.f32	s16, s16, s16
 801a48c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801a490:	e76c      	b.n	801a36c <__ieee754_powf+0x30>
 801a492:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801a496:	d973      	bls.n	801a580 <__ieee754_powf+0x244>
 801a498:	4bad      	ldr	r3, [pc, #692]	@ (801a750 <__ieee754_powf+0x414>)
 801a49a:	4598      	cmp	r8, r3
 801a49c:	d808      	bhi.n	801a4b0 <__ieee754_powf+0x174>
 801a49e:	2c00      	cmp	r4, #0
 801a4a0:	da0b      	bge.n	801a4ba <__ieee754_powf+0x17e>
 801a4a2:	2000      	movs	r0, #0
 801a4a4:	ecbd 8b02 	vpop	{d8}
 801a4a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4ac:	f000 bca0 	b.w	801adf0 <__math_oflowf>
 801a4b0:	4ba8      	ldr	r3, [pc, #672]	@ (801a754 <__ieee754_powf+0x418>)
 801a4b2:	4598      	cmp	r8, r3
 801a4b4:	d908      	bls.n	801a4c8 <__ieee754_powf+0x18c>
 801a4b6:	2c00      	cmp	r4, #0
 801a4b8:	dcf3      	bgt.n	801a4a2 <__ieee754_powf+0x166>
 801a4ba:	2000      	movs	r0, #0
 801a4bc:	ecbd 8b02 	vpop	{d8}
 801a4c0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a4c4:	f000 bc8e 	b.w	801ade4 <__math_uflowf>
 801a4c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a4cc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a4d0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801a758 <__ieee754_powf+0x41c>
 801a4d4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801a4d8:	eee0 6a67 	vfms.f32	s13, s0, s15
 801a4dc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a4e0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801a4e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801a4e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a4ec:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801a75c <__ieee754_powf+0x420>
 801a4f0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801a4f4:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801a760 <__ieee754_powf+0x424>
 801a4f8:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a4fc:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801a764 <__ieee754_powf+0x428>
 801a500:	eef0 6a67 	vmov.f32	s13, s15
 801a504:	eee0 6a07 	vfma.f32	s13, s0, s14
 801a508:	ee16 3a90 	vmov	r3, s13
 801a50c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801a510:	f023 030f 	bic.w	r3, r3, #15
 801a514:	ee06 3a90 	vmov	s13, r3
 801a518:	eee0 6a47 	vfms.f32	s13, s0, s14
 801a51c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a520:	3d01      	subs	r5, #1
 801a522:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801a526:	4305      	orrs	r5, r0
 801a528:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a52c:	f024 040f 	bic.w	r4, r4, #15
 801a530:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801a534:	bf18      	it	ne
 801a536:	eeb0 8a47 	vmovne.f32	s16, s14
 801a53a:	ee07 4a10 	vmov	s14, r4
 801a53e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801a542:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801a546:	ee07 3a90 	vmov	s15, r3
 801a54a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801a54e:	ee07 4a10 	vmov	s14, r4
 801a552:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a556:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801a55a:	ee17 1a10 	vmov	r1, s14
 801a55e:	2900      	cmp	r1, #0
 801a560:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801a564:	f340 80dd 	ble.w	801a722 <__ieee754_powf+0x3e6>
 801a568:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801a56c:	f240 80ca 	bls.w	801a704 <__ieee754_powf+0x3c8>
 801a570:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a578:	bf4c      	ite	mi
 801a57a:	2001      	movmi	r0, #1
 801a57c:	2000      	movpl	r0, #0
 801a57e:	e791      	b.n	801a4a4 <__ieee754_powf+0x168>
 801a580:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801a584:	bf01      	itttt	eq
 801a586:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801a768 <__ieee754_powf+0x42c>
 801a58a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801a58e:	f06f 0317 	mvneq.w	r3, #23
 801a592:	ee17 7a90 	vmoveq	r7, s15
 801a596:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801a59a:	bf18      	it	ne
 801a59c:	2300      	movne	r3, #0
 801a59e:	3a7f      	subs	r2, #127	@ 0x7f
 801a5a0:	441a      	add	r2, r3
 801a5a2:	4b72      	ldr	r3, [pc, #456]	@ (801a76c <__ieee754_powf+0x430>)
 801a5a4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801a5a8:	429f      	cmp	r7, r3
 801a5aa:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801a5ae:	dd06      	ble.n	801a5be <__ieee754_powf+0x282>
 801a5b0:	4b6f      	ldr	r3, [pc, #444]	@ (801a770 <__ieee754_powf+0x434>)
 801a5b2:	429f      	cmp	r7, r3
 801a5b4:	f340 80a4 	ble.w	801a700 <__ieee754_powf+0x3c4>
 801a5b8:	3201      	adds	r2, #1
 801a5ba:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801a5be:	2600      	movs	r6, #0
 801a5c0:	4b6c      	ldr	r3, [pc, #432]	@ (801a774 <__ieee754_powf+0x438>)
 801a5c2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801a5c6:	ee07 1a10 	vmov	s14, r1
 801a5ca:	edd3 5a00 	vldr	s11, [r3]
 801a5ce:	4b6a      	ldr	r3, [pc, #424]	@ (801a778 <__ieee754_powf+0x43c>)
 801a5d0:	ee75 7a87 	vadd.f32	s15, s11, s14
 801a5d4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a5d8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801a5dc:	1049      	asrs	r1, r1, #1
 801a5de:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801a5e2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801a5e6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801a5ea:	ee37 6a65 	vsub.f32	s12, s14, s11
 801a5ee:	ee07 1a90 	vmov	s15, r1
 801a5f2:	ee26 5a24 	vmul.f32	s10, s12, s9
 801a5f6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801a5fa:	ee15 7a10 	vmov	r7, s10
 801a5fe:	401f      	ands	r7, r3
 801a600:	ee06 7a90 	vmov	s13, r7
 801a604:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801a608:	ee37 7a65 	vsub.f32	s14, s14, s11
 801a60c:	ee65 7a05 	vmul.f32	s15, s10, s10
 801a610:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801a614:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801a77c <__ieee754_powf+0x440>
 801a618:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801a780 <__ieee754_powf+0x444>
 801a61c:	eee7 5a87 	vfma.f32	s11, s15, s14
 801a620:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801a784 <__ieee754_powf+0x448>
 801a624:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a628:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801a758 <__ieee754_powf+0x41c>
 801a62c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801a630:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801a788 <__ieee754_powf+0x44c>
 801a634:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a638:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801a78c <__ieee754_powf+0x450>
 801a63c:	ee26 6a24 	vmul.f32	s12, s12, s9
 801a640:	eee7 5a27 	vfma.f32	s11, s14, s15
 801a644:	ee35 7a26 	vadd.f32	s14, s10, s13
 801a648:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801a64c:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a650:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801a654:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801a658:	eef0 5a67 	vmov.f32	s11, s15
 801a65c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801a660:	ee75 5a87 	vadd.f32	s11, s11, s14
 801a664:	ee15 1a90 	vmov	r1, s11
 801a668:	4019      	ands	r1, r3
 801a66a:	ee05 1a90 	vmov	s11, r1
 801a66e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801a672:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801a676:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a67a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801a67e:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a682:	eeb0 6a67 	vmov.f32	s12, s15
 801a686:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801a68a:	ee16 1a10 	vmov	r1, s12
 801a68e:	4019      	ands	r1, r3
 801a690:	ee06 1a10 	vmov	s12, r1
 801a694:	eeb0 7a46 	vmov.f32	s14, s12
 801a698:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801a69c:	493c      	ldr	r1, [pc, #240]	@ (801a790 <__ieee754_powf+0x454>)
 801a69e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801a6a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6a6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801a794 <__ieee754_powf+0x458>
 801a6aa:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801a798 <__ieee754_powf+0x45c>
 801a6ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 801a6b2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801a79c <__ieee754_powf+0x460>
 801a6b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 801a6ba:	ed91 7a00 	vldr	s14, [r1]
 801a6be:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a6c2:	ee07 2a10 	vmov	s14, r2
 801a6c6:	eef0 6a67 	vmov.f32	s13, s15
 801a6ca:	4a35      	ldr	r2, [pc, #212]	@ (801a7a0 <__ieee754_powf+0x464>)
 801a6cc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a6d0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801a6d4:	ed92 5a00 	vldr	s10, [r2]
 801a6d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a6dc:	ee76 6a85 	vadd.f32	s13, s13, s10
 801a6e0:	ee76 6a87 	vadd.f32	s13, s13, s14
 801a6e4:	ee16 2a90 	vmov	r2, s13
 801a6e8:	4013      	ands	r3, r2
 801a6ea:	ee06 3a90 	vmov	s13, r3
 801a6ee:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801a6f2:	ee37 7a45 	vsub.f32	s14, s14, s10
 801a6f6:	eea6 7a65 	vfms.f32	s14, s12, s11
 801a6fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a6fe:	e70f      	b.n	801a520 <__ieee754_powf+0x1e4>
 801a700:	2601      	movs	r6, #1
 801a702:	e75d      	b.n	801a5c0 <__ieee754_powf+0x284>
 801a704:	d152      	bne.n	801a7ac <__ieee754_powf+0x470>
 801a706:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801a7a4 <__ieee754_powf+0x468>
 801a70a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a70e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801a712:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a71a:	f73f af29 	bgt.w	801a570 <__ieee754_powf+0x234>
 801a71e:	2386      	movs	r3, #134	@ 0x86
 801a720:	e048      	b.n	801a7b4 <__ieee754_powf+0x478>
 801a722:	4a21      	ldr	r2, [pc, #132]	@ (801a7a8 <__ieee754_powf+0x46c>)
 801a724:	4293      	cmp	r3, r2
 801a726:	d907      	bls.n	801a738 <__ieee754_powf+0x3fc>
 801a728:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a72c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a730:	bf4c      	ite	mi
 801a732:	2001      	movmi	r0, #1
 801a734:	2000      	movpl	r0, #0
 801a736:	e6c1      	b.n	801a4bc <__ieee754_powf+0x180>
 801a738:	d138      	bne.n	801a7ac <__ieee754_powf+0x470>
 801a73a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a73e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801a742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a746:	dbea      	blt.n	801a71e <__ieee754_powf+0x3e2>
 801a748:	e7ee      	b.n	801a728 <__ieee754_powf+0x3ec>
 801a74a:	bf00      	nop
 801a74c:	00000000 	.word	0x00000000
 801a750:	3f7ffff3 	.word	0x3f7ffff3
 801a754:	3f800007 	.word	0x3f800007
 801a758:	3eaaaaab 	.word	0x3eaaaaab
 801a75c:	3fb8aa3b 	.word	0x3fb8aa3b
 801a760:	36eca570 	.word	0x36eca570
 801a764:	3fb8aa00 	.word	0x3fb8aa00
 801a768:	4b800000 	.word	0x4b800000
 801a76c:	001cc471 	.word	0x001cc471
 801a770:	005db3d6 	.word	0x005db3d6
 801a774:	0801caac 	.word	0x0801caac
 801a778:	fffff000 	.word	0xfffff000
 801a77c:	3e6c3255 	.word	0x3e6c3255
 801a780:	3e53f142 	.word	0x3e53f142
 801a784:	3e8ba305 	.word	0x3e8ba305
 801a788:	3edb6db7 	.word	0x3edb6db7
 801a78c:	3f19999a 	.word	0x3f19999a
 801a790:	0801ca9c 	.word	0x0801ca9c
 801a794:	3f76384f 	.word	0x3f76384f
 801a798:	3f763800 	.word	0x3f763800
 801a79c:	369dc3a0 	.word	0x369dc3a0
 801a7a0:	0801caa4 	.word	0x0801caa4
 801a7a4:	3338aa3c 	.word	0x3338aa3c
 801a7a8:	43160000 	.word	0x43160000
 801a7ac:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801a7b0:	d971      	bls.n	801a896 <__ieee754_powf+0x55a>
 801a7b2:	15db      	asrs	r3, r3, #23
 801a7b4:	3b7e      	subs	r3, #126	@ 0x7e
 801a7b6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801a7ba:	4118      	asrs	r0, r3
 801a7bc:	4408      	add	r0, r1
 801a7be:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801a7c2:	4a3c      	ldr	r2, [pc, #240]	@ (801a8b4 <__ieee754_powf+0x578>)
 801a7c4:	3b7f      	subs	r3, #127	@ 0x7f
 801a7c6:	411a      	asrs	r2, r3
 801a7c8:	4002      	ands	r2, r0
 801a7ca:	ee07 2a10 	vmov	s14, r2
 801a7ce:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801a7d2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801a7d6:	f1c3 0317 	rsb	r3, r3, #23
 801a7da:	4118      	asrs	r0, r3
 801a7dc:	2900      	cmp	r1, #0
 801a7de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a7e2:	bfb8      	it	lt
 801a7e4:	4240      	neglt	r0, r0
 801a7e6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801a7ea:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801a8b8 <__ieee754_powf+0x57c>
 801a7ee:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801a8bc <__ieee754_powf+0x580>
 801a7f2:	ee17 3a10 	vmov	r3, s14
 801a7f6:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801a7fa:	f023 030f 	bic.w	r3, r3, #15
 801a7fe:	ee07 3a10 	vmov	s14, r3
 801a802:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a806:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a80a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801a80e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801a8c0 <__ieee754_powf+0x584>
 801a812:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a816:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801a81a:	eef0 6a67 	vmov.f32	s13, s15
 801a81e:	eee7 6a06 	vfma.f32	s13, s14, s12
 801a822:	eef0 5a66 	vmov.f32	s11, s13
 801a826:	eee7 5a46 	vfms.f32	s11, s14, s12
 801a82a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801a82e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801a832:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801a8c4 <__ieee754_powf+0x588>
 801a836:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801a8c8 <__ieee754_powf+0x58c>
 801a83a:	eea7 6a25 	vfma.f32	s12, s14, s11
 801a83e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801a8cc <__ieee754_powf+0x590>
 801a842:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a846:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801a8d0 <__ieee754_powf+0x594>
 801a84a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801a84e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801a8d4 <__ieee754_powf+0x598>
 801a852:	eee6 5a07 	vfma.f32	s11, s12, s14
 801a856:	eeb0 6a66 	vmov.f32	s12, s13
 801a85a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801a85e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801a862:	ee66 5a86 	vmul.f32	s11, s13, s12
 801a866:	ee36 6a47 	vsub.f32	s12, s12, s14
 801a86a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801a86e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801a872:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a876:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a87a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a87e:	ee10 3a10 	vmov	r3, s0
 801a882:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801a886:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a88a:	da06      	bge.n	801a89a <__ieee754_powf+0x55e>
 801a88c:	f000 fa2a 	bl	801ace4 <scalbnf>
 801a890:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a894:	e56a      	b.n	801a36c <__ieee754_powf+0x30>
 801a896:	2000      	movs	r0, #0
 801a898:	e7a5      	b.n	801a7e6 <__ieee754_powf+0x4aa>
 801a89a:	ee00 3a10 	vmov	s0, r3
 801a89e:	e7f7      	b.n	801a890 <__ieee754_powf+0x554>
 801a8a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a8a4:	e562      	b.n	801a36c <__ieee754_powf+0x30>
 801a8a6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801a8d8 <__ieee754_powf+0x59c>
 801a8aa:	e55f      	b.n	801a36c <__ieee754_powf+0x30>
 801a8ac:	eeb0 0a48 	vmov.f32	s0, s16
 801a8b0:	e55c      	b.n	801a36c <__ieee754_powf+0x30>
 801a8b2:	bf00      	nop
 801a8b4:	ff800000 	.word	0xff800000
 801a8b8:	3f317218 	.word	0x3f317218
 801a8bc:	3f317200 	.word	0x3f317200
 801a8c0:	35bfbe8c 	.word	0x35bfbe8c
 801a8c4:	b5ddea0e 	.word	0xb5ddea0e
 801a8c8:	3331bb4c 	.word	0x3331bb4c
 801a8cc:	388ab355 	.word	0x388ab355
 801a8d0:	bb360b61 	.word	0xbb360b61
 801a8d4:	3e2aaaab 	.word	0x3e2aaaab
 801a8d8:	00000000 	.word	0x00000000

0801a8dc <__ieee754_rem_pio2f>:
 801a8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8de:	ee10 6a10 	vmov	r6, s0
 801a8e2:	4b88      	ldr	r3, [pc, #544]	@ (801ab04 <__ieee754_rem_pio2f+0x228>)
 801a8e4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801a8e8:	429d      	cmp	r5, r3
 801a8ea:	b087      	sub	sp, #28
 801a8ec:	4604      	mov	r4, r0
 801a8ee:	d805      	bhi.n	801a8fc <__ieee754_rem_pio2f+0x20>
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	ed80 0a00 	vstr	s0, [r0]
 801a8f6:	6043      	str	r3, [r0, #4]
 801a8f8:	2000      	movs	r0, #0
 801a8fa:	e022      	b.n	801a942 <__ieee754_rem_pio2f+0x66>
 801a8fc:	4b82      	ldr	r3, [pc, #520]	@ (801ab08 <__ieee754_rem_pio2f+0x22c>)
 801a8fe:	429d      	cmp	r5, r3
 801a900:	d83a      	bhi.n	801a978 <__ieee754_rem_pio2f+0x9c>
 801a902:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a906:	2e00      	cmp	r6, #0
 801a908:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801ab0c <__ieee754_rem_pio2f+0x230>
 801a90c:	4a80      	ldr	r2, [pc, #512]	@ (801ab10 <__ieee754_rem_pio2f+0x234>)
 801a90e:	f023 030f 	bic.w	r3, r3, #15
 801a912:	dd18      	ble.n	801a946 <__ieee754_rem_pio2f+0x6a>
 801a914:	4293      	cmp	r3, r2
 801a916:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a91a:	bf09      	itett	eq
 801a91c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801ab14 <__ieee754_rem_pio2f+0x238>
 801a920:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801ab18 <__ieee754_rem_pio2f+0x23c>
 801a924:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801ab1c <__ieee754_rem_pio2f+0x240>
 801a928:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a92c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801a930:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a934:	ed80 7a00 	vstr	s14, [r0]
 801a938:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a93c:	edc0 7a01 	vstr	s15, [r0, #4]
 801a940:	2001      	movs	r0, #1
 801a942:	b007      	add	sp, #28
 801a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a946:	4293      	cmp	r3, r2
 801a948:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a94c:	bf09      	itett	eq
 801a94e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801ab14 <__ieee754_rem_pio2f+0x238>
 801a952:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801ab18 <__ieee754_rem_pio2f+0x23c>
 801a956:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801ab1c <__ieee754_rem_pio2f+0x240>
 801a95a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a95e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a962:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a966:	ed80 7a00 	vstr	s14, [r0]
 801a96a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a96e:	edc0 7a01 	vstr	s15, [r0, #4]
 801a972:	f04f 30ff 	mov.w	r0, #4294967295
 801a976:	e7e4      	b.n	801a942 <__ieee754_rem_pio2f+0x66>
 801a978:	4b69      	ldr	r3, [pc, #420]	@ (801ab20 <__ieee754_rem_pio2f+0x244>)
 801a97a:	429d      	cmp	r5, r3
 801a97c:	d873      	bhi.n	801aa66 <__ieee754_rem_pio2f+0x18a>
 801a97e:	f7fe fe51 	bl	8019624 <fabsf>
 801a982:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801ab24 <__ieee754_rem_pio2f+0x248>
 801a986:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a98a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a98e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a992:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a996:	ee17 0a90 	vmov	r0, s15
 801a99a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801ab0c <__ieee754_rem_pio2f+0x230>
 801a99e:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a9a2:	281f      	cmp	r0, #31
 801a9a4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801ab18 <__ieee754_rem_pio2f+0x23c>
 801a9a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a9ac:	eeb1 6a47 	vneg.f32	s12, s14
 801a9b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a9b4:	ee16 1a90 	vmov	r1, s13
 801a9b8:	dc09      	bgt.n	801a9ce <__ieee754_rem_pio2f+0xf2>
 801a9ba:	4a5b      	ldr	r2, [pc, #364]	@ (801ab28 <__ieee754_rem_pio2f+0x24c>)
 801a9bc:	1e47      	subs	r7, r0, #1
 801a9be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a9c2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801a9c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d107      	bne.n	801a9de <__ieee754_rem_pio2f+0x102>
 801a9ce:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801a9d2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801a9d6:	2a08      	cmp	r2, #8
 801a9d8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a9dc:	dc14      	bgt.n	801aa08 <__ieee754_rem_pio2f+0x12c>
 801a9de:	6021      	str	r1, [r4, #0]
 801a9e0:	ed94 7a00 	vldr	s14, [r4]
 801a9e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a9e8:	2e00      	cmp	r6, #0
 801a9ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a9ee:	ed84 0a01 	vstr	s0, [r4, #4]
 801a9f2:	daa6      	bge.n	801a942 <__ieee754_rem_pio2f+0x66>
 801a9f4:	eeb1 7a47 	vneg.f32	s14, s14
 801a9f8:	eeb1 0a40 	vneg.f32	s0, s0
 801a9fc:	ed84 7a00 	vstr	s14, [r4]
 801aa00:	ed84 0a01 	vstr	s0, [r4, #4]
 801aa04:	4240      	negs	r0, r0
 801aa06:	e79c      	b.n	801a942 <__ieee754_rem_pio2f+0x66>
 801aa08:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801ab14 <__ieee754_rem_pio2f+0x238>
 801aa0c:	eef0 6a40 	vmov.f32	s13, s0
 801aa10:	eee6 6a25 	vfma.f32	s13, s12, s11
 801aa14:	ee70 7a66 	vsub.f32	s15, s0, s13
 801aa18:	eee6 7a25 	vfma.f32	s15, s12, s11
 801aa1c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801ab1c <__ieee754_rem_pio2f+0x240>
 801aa20:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801aa24:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801aa28:	ee15 2a90 	vmov	r2, s11
 801aa2c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801aa30:	1a5b      	subs	r3, r3, r1
 801aa32:	2b19      	cmp	r3, #25
 801aa34:	dc04      	bgt.n	801aa40 <__ieee754_rem_pio2f+0x164>
 801aa36:	edc4 5a00 	vstr	s11, [r4]
 801aa3a:	eeb0 0a66 	vmov.f32	s0, s13
 801aa3e:	e7cf      	b.n	801a9e0 <__ieee754_rem_pio2f+0x104>
 801aa40:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801ab2c <__ieee754_rem_pio2f+0x250>
 801aa44:	eeb0 0a66 	vmov.f32	s0, s13
 801aa48:	eea6 0a25 	vfma.f32	s0, s12, s11
 801aa4c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801aa50:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801ab30 <__ieee754_rem_pio2f+0x254>
 801aa54:	eee6 7a25 	vfma.f32	s15, s12, s11
 801aa58:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801aa5c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801aa60:	ed84 7a00 	vstr	s14, [r4]
 801aa64:	e7bc      	b.n	801a9e0 <__ieee754_rem_pio2f+0x104>
 801aa66:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801aa6a:	d306      	bcc.n	801aa7a <__ieee754_rem_pio2f+0x19e>
 801aa6c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801aa70:	edc0 7a01 	vstr	s15, [r0, #4]
 801aa74:	edc0 7a00 	vstr	s15, [r0]
 801aa78:	e73e      	b.n	801a8f8 <__ieee754_rem_pio2f+0x1c>
 801aa7a:	15ea      	asrs	r2, r5, #23
 801aa7c:	3a86      	subs	r2, #134	@ 0x86
 801aa7e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801aa82:	ee07 3a90 	vmov	s15, r3
 801aa86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801aa8a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801ab34 <__ieee754_rem_pio2f+0x258>
 801aa8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aa92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa96:	ed8d 7a03 	vstr	s14, [sp, #12]
 801aa9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aa9e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801aaa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801aaa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aaaa:	ed8d 7a04 	vstr	s14, [sp, #16]
 801aaae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801aab2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801aab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aaba:	edcd 7a05 	vstr	s15, [sp, #20]
 801aabe:	d11e      	bne.n	801aafe <__ieee754_rem_pio2f+0x222>
 801aac0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801aac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aac8:	bf0c      	ite	eq
 801aaca:	2301      	moveq	r3, #1
 801aacc:	2302      	movne	r3, #2
 801aace:	491a      	ldr	r1, [pc, #104]	@ (801ab38 <__ieee754_rem_pio2f+0x25c>)
 801aad0:	9101      	str	r1, [sp, #4]
 801aad2:	2102      	movs	r1, #2
 801aad4:	9100      	str	r1, [sp, #0]
 801aad6:	a803      	add	r0, sp, #12
 801aad8:	4621      	mov	r1, r4
 801aada:	f000 f98f 	bl	801adfc <__kernel_rem_pio2f>
 801aade:	2e00      	cmp	r6, #0
 801aae0:	f6bf af2f 	bge.w	801a942 <__ieee754_rem_pio2f+0x66>
 801aae4:	edd4 7a00 	vldr	s15, [r4]
 801aae8:	eef1 7a67 	vneg.f32	s15, s15
 801aaec:	edc4 7a00 	vstr	s15, [r4]
 801aaf0:	edd4 7a01 	vldr	s15, [r4, #4]
 801aaf4:	eef1 7a67 	vneg.f32	s15, s15
 801aaf8:	edc4 7a01 	vstr	s15, [r4, #4]
 801aafc:	e782      	b.n	801aa04 <__ieee754_rem_pio2f+0x128>
 801aafe:	2303      	movs	r3, #3
 801ab00:	e7e5      	b.n	801aace <__ieee754_rem_pio2f+0x1f2>
 801ab02:	bf00      	nop
 801ab04:	3f490fd8 	.word	0x3f490fd8
 801ab08:	4016cbe3 	.word	0x4016cbe3
 801ab0c:	3fc90f80 	.word	0x3fc90f80
 801ab10:	3fc90fd0 	.word	0x3fc90fd0
 801ab14:	37354400 	.word	0x37354400
 801ab18:	37354443 	.word	0x37354443
 801ab1c:	2e85a308 	.word	0x2e85a308
 801ab20:	43490f80 	.word	0x43490f80
 801ab24:	3f22f984 	.word	0x3f22f984
 801ab28:	0801cab4 	.word	0x0801cab4
 801ab2c:	2e85a300 	.word	0x2e85a300
 801ab30:	248d3132 	.word	0x248d3132
 801ab34:	43800000 	.word	0x43800000
 801ab38:	0801cb34 	.word	0x0801cb34

0801ab3c <atanf>:
 801ab3c:	b538      	push	{r3, r4, r5, lr}
 801ab3e:	ee10 5a10 	vmov	r5, s0
 801ab42:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801ab46:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801ab4a:	eef0 7a40 	vmov.f32	s15, s0
 801ab4e:	d310      	bcc.n	801ab72 <atanf+0x36>
 801ab50:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801ab54:	d904      	bls.n	801ab60 <atanf+0x24>
 801ab56:	ee70 7a00 	vadd.f32	s15, s0, s0
 801ab5a:	eeb0 0a67 	vmov.f32	s0, s15
 801ab5e:	bd38      	pop	{r3, r4, r5, pc}
 801ab60:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801ac98 <atanf+0x15c>
 801ab64:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801ac9c <atanf+0x160>
 801ab68:	2d00      	cmp	r5, #0
 801ab6a:	bfc8      	it	gt
 801ab6c:	eef0 7a47 	vmovgt.f32	s15, s14
 801ab70:	e7f3      	b.n	801ab5a <atanf+0x1e>
 801ab72:	4b4b      	ldr	r3, [pc, #300]	@ (801aca0 <atanf+0x164>)
 801ab74:	429c      	cmp	r4, r3
 801ab76:	d810      	bhi.n	801ab9a <atanf+0x5e>
 801ab78:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801ab7c:	d20a      	bcs.n	801ab94 <atanf+0x58>
 801ab7e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801aca4 <atanf+0x168>
 801ab82:	ee30 7a07 	vadd.f32	s14, s0, s14
 801ab86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ab8a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801ab8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab92:	dce2      	bgt.n	801ab5a <atanf+0x1e>
 801ab94:	f04f 33ff 	mov.w	r3, #4294967295
 801ab98:	e013      	b.n	801abc2 <atanf+0x86>
 801ab9a:	f7fe fd43 	bl	8019624 <fabsf>
 801ab9e:	4b42      	ldr	r3, [pc, #264]	@ (801aca8 <atanf+0x16c>)
 801aba0:	429c      	cmp	r4, r3
 801aba2:	d84f      	bhi.n	801ac44 <atanf+0x108>
 801aba4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801aba8:	429c      	cmp	r4, r3
 801abaa:	d841      	bhi.n	801ac30 <atanf+0xf4>
 801abac:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801abb0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801abb4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801abb8:	2300      	movs	r3, #0
 801abba:	ee30 0a27 	vadd.f32	s0, s0, s15
 801abbe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801abc2:	1c5a      	adds	r2, r3, #1
 801abc4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801abc8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801acac <atanf+0x170>
 801abcc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801acb0 <atanf+0x174>
 801abd0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801acb4 <atanf+0x178>
 801abd4:	ee66 6a06 	vmul.f32	s13, s12, s12
 801abd8:	eee6 5a87 	vfma.f32	s11, s13, s14
 801abdc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801acb8 <atanf+0x17c>
 801abe0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801abe4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801acbc <atanf+0x180>
 801abe8:	eee7 5a26 	vfma.f32	s11, s14, s13
 801abec:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801acc0 <atanf+0x184>
 801abf0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801abf4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801acc4 <atanf+0x188>
 801abf8:	eee7 5a26 	vfma.f32	s11, s14, s13
 801abfc:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801acc8 <atanf+0x18c>
 801ac00:	eea6 5a87 	vfma.f32	s10, s13, s14
 801ac04:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801accc <atanf+0x190>
 801ac08:	eea5 7a26 	vfma.f32	s14, s10, s13
 801ac0c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801acd0 <atanf+0x194>
 801ac10:	eea7 5a26 	vfma.f32	s10, s14, s13
 801ac14:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801acd4 <atanf+0x198>
 801ac18:	eea5 7a26 	vfma.f32	s14, s10, s13
 801ac1c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801ac20:	eea5 7a86 	vfma.f32	s14, s11, s12
 801ac24:	ee27 7a87 	vmul.f32	s14, s15, s14
 801ac28:	d121      	bne.n	801ac6e <atanf+0x132>
 801ac2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac2e:	e794      	b.n	801ab5a <atanf+0x1e>
 801ac30:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801ac34:	ee30 7a67 	vsub.f32	s14, s0, s15
 801ac38:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ac3c:	2301      	movs	r3, #1
 801ac3e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac42:	e7be      	b.n	801abc2 <atanf+0x86>
 801ac44:	4b24      	ldr	r3, [pc, #144]	@ (801acd8 <atanf+0x19c>)
 801ac46:	429c      	cmp	r4, r3
 801ac48:	d80b      	bhi.n	801ac62 <atanf+0x126>
 801ac4a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801ac4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ac52:	eea0 7a27 	vfma.f32	s14, s0, s15
 801ac56:	2302      	movs	r3, #2
 801ac58:	ee70 6a67 	vsub.f32	s13, s0, s15
 801ac5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ac60:	e7af      	b.n	801abc2 <atanf+0x86>
 801ac62:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801ac66:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ac6a:	2303      	movs	r3, #3
 801ac6c:	e7a9      	b.n	801abc2 <atanf+0x86>
 801ac6e:	4a1b      	ldr	r2, [pc, #108]	@ (801acdc <atanf+0x1a0>)
 801ac70:	491b      	ldr	r1, [pc, #108]	@ (801ace0 <atanf+0x1a4>)
 801ac72:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801ac76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801ac7a:	edd3 6a00 	vldr	s13, [r3]
 801ac7e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ac82:	2d00      	cmp	r5, #0
 801ac84:	ee37 7a67 	vsub.f32	s14, s14, s15
 801ac88:	edd2 7a00 	vldr	s15, [r2]
 801ac8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ac90:	bfb8      	it	lt
 801ac92:	eef1 7a67 	vneglt.f32	s15, s15
 801ac96:	e760      	b.n	801ab5a <atanf+0x1e>
 801ac98:	bfc90fdb 	.word	0xbfc90fdb
 801ac9c:	3fc90fdb 	.word	0x3fc90fdb
 801aca0:	3edfffff 	.word	0x3edfffff
 801aca4:	7149f2ca 	.word	0x7149f2ca
 801aca8:	3f97ffff 	.word	0x3f97ffff
 801acac:	3c8569d7 	.word	0x3c8569d7
 801acb0:	3d4bda59 	.word	0x3d4bda59
 801acb4:	bd6ef16b 	.word	0xbd6ef16b
 801acb8:	3d886b35 	.word	0x3d886b35
 801acbc:	3dba2e6e 	.word	0x3dba2e6e
 801acc0:	3e124925 	.word	0x3e124925
 801acc4:	3eaaaaab 	.word	0x3eaaaaab
 801acc8:	bd15a221 	.word	0xbd15a221
 801accc:	bd9d8795 	.word	0xbd9d8795
 801acd0:	bde38e38 	.word	0xbde38e38
 801acd4:	be4ccccd 	.word	0xbe4ccccd
 801acd8:	401bffff 	.word	0x401bffff
 801acdc:	0801ce5c 	.word	0x0801ce5c
 801ace0:	0801ce4c 	.word	0x0801ce4c

0801ace4 <scalbnf>:
 801ace4:	ee10 3a10 	vmov	r3, s0
 801ace8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801acec:	d02b      	beq.n	801ad46 <scalbnf+0x62>
 801acee:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801acf2:	d302      	bcc.n	801acfa <scalbnf+0x16>
 801acf4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801acf8:	4770      	bx	lr
 801acfa:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801acfe:	d123      	bne.n	801ad48 <scalbnf+0x64>
 801ad00:	4b24      	ldr	r3, [pc, #144]	@ (801ad94 <scalbnf+0xb0>)
 801ad02:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801ad98 <scalbnf+0xb4>
 801ad06:	4298      	cmp	r0, r3
 801ad08:	ee20 0a27 	vmul.f32	s0, s0, s15
 801ad0c:	db17      	blt.n	801ad3e <scalbnf+0x5a>
 801ad0e:	ee10 3a10 	vmov	r3, s0
 801ad12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ad16:	3a19      	subs	r2, #25
 801ad18:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801ad1c:	4288      	cmp	r0, r1
 801ad1e:	dd15      	ble.n	801ad4c <scalbnf+0x68>
 801ad20:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801ad9c <scalbnf+0xb8>
 801ad24:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801ada0 <scalbnf+0xbc>
 801ad28:	ee10 3a10 	vmov	r3, s0
 801ad2c:	eeb0 7a67 	vmov.f32	s14, s15
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	bfb8      	it	lt
 801ad34:	eef0 7a66 	vmovlt.f32	s15, s13
 801ad38:	ee27 0a87 	vmul.f32	s0, s15, s14
 801ad3c:	4770      	bx	lr
 801ad3e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801ada4 <scalbnf+0xc0>
 801ad42:	ee27 0a80 	vmul.f32	s0, s15, s0
 801ad46:	4770      	bx	lr
 801ad48:	0dd2      	lsrs	r2, r2, #23
 801ad4a:	e7e5      	b.n	801ad18 <scalbnf+0x34>
 801ad4c:	4410      	add	r0, r2
 801ad4e:	28fe      	cmp	r0, #254	@ 0xfe
 801ad50:	dce6      	bgt.n	801ad20 <scalbnf+0x3c>
 801ad52:	2800      	cmp	r0, #0
 801ad54:	dd06      	ble.n	801ad64 <scalbnf+0x80>
 801ad56:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ad5a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ad5e:	ee00 3a10 	vmov	s0, r3
 801ad62:	4770      	bx	lr
 801ad64:	f110 0f16 	cmn.w	r0, #22
 801ad68:	da09      	bge.n	801ad7e <scalbnf+0x9a>
 801ad6a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801ada4 <scalbnf+0xc0>
 801ad6e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801ada8 <scalbnf+0xc4>
 801ad72:	ee10 3a10 	vmov	r3, s0
 801ad76:	eeb0 7a67 	vmov.f32	s14, s15
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	e7d9      	b.n	801ad32 <scalbnf+0x4e>
 801ad7e:	3019      	adds	r0, #25
 801ad80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801ad84:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801ad88:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801adac <scalbnf+0xc8>
 801ad8c:	ee07 3a90 	vmov	s15, r3
 801ad90:	e7d7      	b.n	801ad42 <scalbnf+0x5e>
 801ad92:	bf00      	nop
 801ad94:	ffff3cb0 	.word	0xffff3cb0
 801ad98:	4c000000 	.word	0x4c000000
 801ad9c:	7149f2ca 	.word	0x7149f2ca
 801ada0:	f149f2ca 	.word	0xf149f2ca
 801ada4:	0da24260 	.word	0x0da24260
 801ada8:	8da24260 	.word	0x8da24260
 801adac:	33000000 	.word	0x33000000

0801adb0 <with_errnof>:
 801adb0:	b510      	push	{r4, lr}
 801adb2:	ed2d 8b02 	vpush	{d8}
 801adb6:	eeb0 8a40 	vmov.f32	s16, s0
 801adba:	4604      	mov	r4, r0
 801adbc:	f7fe fa82 	bl	80192c4 <__errno>
 801adc0:	eeb0 0a48 	vmov.f32	s0, s16
 801adc4:	ecbd 8b02 	vpop	{d8}
 801adc8:	6004      	str	r4, [r0, #0]
 801adca:	bd10      	pop	{r4, pc}

0801adcc <xflowf>:
 801adcc:	b130      	cbz	r0, 801addc <xflowf+0x10>
 801adce:	eef1 7a40 	vneg.f32	s15, s0
 801add2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801add6:	2022      	movs	r0, #34	@ 0x22
 801add8:	f7ff bfea 	b.w	801adb0 <with_errnof>
 801addc:	eef0 7a40 	vmov.f32	s15, s0
 801ade0:	e7f7      	b.n	801add2 <xflowf+0x6>
	...

0801ade4 <__math_uflowf>:
 801ade4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801adec <__math_uflowf+0x8>
 801ade8:	f7ff bff0 	b.w	801adcc <xflowf>
 801adec:	10000000 	.word	0x10000000

0801adf0 <__math_oflowf>:
 801adf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801adf8 <__math_oflowf+0x8>
 801adf4:	f7ff bfea 	b.w	801adcc <xflowf>
 801adf8:	70000000 	.word	0x70000000

0801adfc <__kernel_rem_pio2f>:
 801adfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae00:	ed2d 8b04 	vpush	{d8-d9}
 801ae04:	b0d9      	sub	sp, #356	@ 0x164
 801ae06:	4690      	mov	r8, r2
 801ae08:	9001      	str	r0, [sp, #4]
 801ae0a:	4ab9      	ldr	r2, [pc, #740]	@ (801b0f0 <__kernel_rem_pio2f+0x2f4>)
 801ae0c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801ae0e:	f118 0f04 	cmn.w	r8, #4
 801ae12:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801ae16:	460f      	mov	r7, r1
 801ae18:	f103 3bff 	add.w	fp, r3, #4294967295
 801ae1c:	db27      	blt.n	801ae6e <__kernel_rem_pio2f+0x72>
 801ae1e:	f1b8 0203 	subs.w	r2, r8, #3
 801ae22:	bf48      	it	mi
 801ae24:	f108 0204 	addmi.w	r2, r8, #4
 801ae28:	10d2      	asrs	r2, r2, #3
 801ae2a:	1c55      	adds	r5, r2, #1
 801ae2c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801ae2e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801ae32:	00e8      	lsls	r0, r5, #3
 801ae34:	eba2 060b 	sub.w	r6, r2, fp
 801ae38:	9002      	str	r0, [sp, #8]
 801ae3a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801ae3e:	eb0a 0c0b 	add.w	ip, sl, fp
 801ae42:	ac1c      	add	r4, sp, #112	@ 0x70
 801ae44:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801ae48:	2000      	movs	r0, #0
 801ae4a:	4560      	cmp	r0, ip
 801ae4c:	dd11      	ble.n	801ae72 <__kernel_rem_pio2f+0x76>
 801ae4e:	a91c      	add	r1, sp, #112	@ 0x70
 801ae50:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801ae54:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801ae58:	f04f 0c00 	mov.w	ip, #0
 801ae5c:	45d4      	cmp	ip, sl
 801ae5e:	dc27      	bgt.n	801aeb0 <__kernel_rem_pio2f+0xb4>
 801ae60:	f8dd e004 	ldr.w	lr, [sp, #4]
 801ae64:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801ae68:	4606      	mov	r6, r0
 801ae6a:	2400      	movs	r4, #0
 801ae6c:	e016      	b.n	801ae9c <__kernel_rem_pio2f+0xa0>
 801ae6e:	2200      	movs	r2, #0
 801ae70:	e7db      	b.n	801ae2a <__kernel_rem_pio2f+0x2e>
 801ae72:	42c6      	cmn	r6, r0
 801ae74:	bf5d      	ittte	pl
 801ae76:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801ae7a:	ee07 1a90 	vmovpl	s15, r1
 801ae7e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ae82:	eef0 7a47 	vmovmi.f32	s15, s14
 801ae86:	ece4 7a01 	vstmia	r4!, {s15}
 801ae8a:	3001      	adds	r0, #1
 801ae8c:	e7dd      	b.n	801ae4a <__kernel_rem_pio2f+0x4e>
 801ae8e:	ecfe 6a01 	vldmia	lr!, {s13}
 801ae92:	ed96 7a00 	vldr	s14, [r6]
 801ae96:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ae9a:	3401      	adds	r4, #1
 801ae9c:	455c      	cmp	r4, fp
 801ae9e:	f1a6 0604 	sub.w	r6, r6, #4
 801aea2:	ddf4      	ble.n	801ae8e <__kernel_rem_pio2f+0x92>
 801aea4:	ece9 7a01 	vstmia	r9!, {s15}
 801aea8:	f10c 0c01 	add.w	ip, ip, #1
 801aeac:	3004      	adds	r0, #4
 801aeae:	e7d5      	b.n	801ae5c <__kernel_rem_pio2f+0x60>
 801aeb0:	a908      	add	r1, sp, #32
 801aeb2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801aeb6:	9104      	str	r1, [sp, #16]
 801aeb8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801aeba:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801b0fc <__kernel_rem_pio2f+0x300>
 801aebe:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801b0f8 <__kernel_rem_pio2f+0x2fc>
 801aec2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801aec6:	9203      	str	r2, [sp, #12]
 801aec8:	4654      	mov	r4, sl
 801aeca:	00a2      	lsls	r2, r4, #2
 801aecc:	9205      	str	r2, [sp, #20]
 801aece:	aa58      	add	r2, sp, #352	@ 0x160
 801aed0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801aed4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801aed8:	a944      	add	r1, sp, #272	@ 0x110
 801aeda:	aa08      	add	r2, sp, #32
 801aedc:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801aee0:	4694      	mov	ip, r2
 801aee2:	4626      	mov	r6, r4
 801aee4:	2e00      	cmp	r6, #0
 801aee6:	f1a0 0004 	sub.w	r0, r0, #4
 801aeea:	dc4c      	bgt.n	801af86 <__kernel_rem_pio2f+0x18a>
 801aeec:	4628      	mov	r0, r5
 801aeee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801aef2:	f7ff fef7 	bl	801ace4 <scalbnf>
 801aef6:	eeb0 8a40 	vmov.f32	s16, s0
 801aefa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801aefe:	ee28 0a00 	vmul.f32	s0, s16, s0
 801af02:	f000 f9ed 	bl	801b2e0 <floorf>
 801af06:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801af0a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801af0e:	2d00      	cmp	r5, #0
 801af10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801af14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801af18:	ee17 9a90 	vmov	r9, s15
 801af1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af20:	ee38 8a67 	vsub.f32	s16, s16, s15
 801af24:	dd41      	ble.n	801afaa <__kernel_rem_pio2f+0x1ae>
 801af26:	f104 3cff 	add.w	ip, r4, #4294967295
 801af2a:	a908      	add	r1, sp, #32
 801af2c:	f1c5 0e08 	rsb	lr, r5, #8
 801af30:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801af34:	fa46 f00e 	asr.w	r0, r6, lr
 801af38:	4481      	add	r9, r0
 801af3a:	fa00 f00e 	lsl.w	r0, r0, lr
 801af3e:	1a36      	subs	r6, r6, r0
 801af40:	f1c5 0007 	rsb	r0, r5, #7
 801af44:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801af48:	4106      	asrs	r6, r0
 801af4a:	2e00      	cmp	r6, #0
 801af4c:	dd3c      	ble.n	801afc8 <__kernel_rem_pio2f+0x1cc>
 801af4e:	f04f 0e00 	mov.w	lr, #0
 801af52:	f109 0901 	add.w	r9, r9, #1
 801af56:	4670      	mov	r0, lr
 801af58:	4574      	cmp	r4, lr
 801af5a:	dc68      	bgt.n	801b02e <__kernel_rem_pio2f+0x232>
 801af5c:	2d00      	cmp	r5, #0
 801af5e:	dd03      	ble.n	801af68 <__kernel_rem_pio2f+0x16c>
 801af60:	2d01      	cmp	r5, #1
 801af62:	d074      	beq.n	801b04e <__kernel_rem_pio2f+0x252>
 801af64:	2d02      	cmp	r5, #2
 801af66:	d07d      	beq.n	801b064 <__kernel_rem_pio2f+0x268>
 801af68:	2e02      	cmp	r6, #2
 801af6a:	d12d      	bne.n	801afc8 <__kernel_rem_pio2f+0x1cc>
 801af6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801af70:	ee30 8a48 	vsub.f32	s16, s0, s16
 801af74:	b340      	cbz	r0, 801afc8 <__kernel_rem_pio2f+0x1cc>
 801af76:	4628      	mov	r0, r5
 801af78:	9306      	str	r3, [sp, #24]
 801af7a:	f7ff feb3 	bl	801ace4 <scalbnf>
 801af7e:	9b06      	ldr	r3, [sp, #24]
 801af80:	ee38 8a40 	vsub.f32	s16, s16, s0
 801af84:	e020      	b.n	801afc8 <__kernel_rem_pio2f+0x1cc>
 801af86:	ee60 7a28 	vmul.f32	s15, s0, s17
 801af8a:	3e01      	subs	r6, #1
 801af8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801af90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af94:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801af98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801af9c:	ecac 0a01 	vstmia	ip!, {s0}
 801afa0:	ed90 0a00 	vldr	s0, [r0]
 801afa4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801afa8:	e79c      	b.n	801aee4 <__kernel_rem_pio2f+0xe8>
 801afaa:	d105      	bne.n	801afb8 <__kernel_rem_pio2f+0x1bc>
 801afac:	1e60      	subs	r0, r4, #1
 801afae:	a908      	add	r1, sp, #32
 801afb0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801afb4:	11f6      	asrs	r6, r6, #7
 801afb6:	e7c8      	b.n	801af4a <__kernel_rem_pio2f+0x14e>
 801afb8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801afbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801afc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afc4:	da31      	bge.n	801b02a <__kernel_rem_pio2f+0x22e>
 801afc6:	2600      	movs	r6, #0
 801afc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801afcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afd0:	f040 8098 	bne.w	801b104 <__kernel_rem_pio2f+0x308>
 801afd4:	1e60      	subs	r0, r4, #1
 801afd6:	2200      	movs	r2, #0
 801afd8:	4550      	cmp	r0, sl
 801afda:	da4b      	bge.n	801b074 <__kernel_rem_pio2f+0x278>
 801afdc:	2a00      	cmp	r2, #0
 801afde:	d065      	beq.n	801b0ac <__kernel_rem_pio2f+0x2b0>
 801afe0:	3c01      	subs	r4, #1
 801afe2:	ab08      	add	r3, sp, #32
 801afe4:	3d08      	subs	r5, #8
 801afe6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801afea:	2b00      	cmp	r3, #0
 801afec:	d0f8      	beq.n	801afe0 <__kernel_rem_pio2f+0x1e4>
 801afee:	4628      	mov	r0, r5
 801aff0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801aff4:	f7ff fe76 	bl	801ace4 <scalbnf>
 801aff8:	1c63      	adds	r3, r4, #1
 801affa:	aa44      	add	r2, sp, #272	@ 0x110
 801affc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801b0fc <__kernel_rem_pio2f+0x300>
 801b000:	0099      	lsls	r1, r3, #2
 801b002:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801b006:	4623      	mov	r3, r4
 801b008:	2b00      	cmp	r3, #0
 801b00a:	f280 80a9 	bge.w	801b160 <__kernel_rem_pio2f+0x364>
 801b00e:	4623      	mov	r3, r4
 801b010:	2b00      	cmp	r3, #0
 801b012:	f2c0 80c7 	blt.w	801b1a4 <__kernel_rem_pio2f+0x3a8>
 801b016:	aa44      	add	r2, sp, #272	@ 0x110
 801b018:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801b01c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801b0f4 <__kernel_rem_pio2f+0x2f8>
 801b020:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801b024:	2000      	movs	r0, #0
 801b026:	1ae2      	subs	r2, r4, r3
 801b028:	e0b1      	b.n	801b18e <__kernel_rem_pio2f+0x392>
 801b02a:	2602      	movs	r6, #2
 801b02c:	e78f      	b.n	801af4e <__kernel_rem_pio2f+0x152>
 801b02e:	f852 1b04 	ldr.w	r1, [r2], #4
 801b032:	b948      	cbnz	r0, 801b048 <__kernel_rem_pio2f+0x24c>
 801b034:	b121      	cbz	r1, 801b040 <__kernel_rem_pio2f+0x244>
 801b036:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801b03a:	f842 1c04 	str.w	r1, [r2, #-4]
 801b03e:	2101      	movs	r1, #1
 801b040:	f10e 0e01 	add.w	lr, lr, #1
 801b044:	4608      	mov	r0, r1
 801b046:	e787      	b.n	801af58 <__kernel_rem_pio2f+0x15c>
 801b048:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801b04c:	e7f5      	b.n	801b03a <__kernel_rem_pio2f+0x23e>
 801b04e:	f104 3cff 	add.w	ip, r4, #4294967295
 801b052:	aa08      	add	r2, sp, #32
 801b054:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b058:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801b05c:	a908      	add	r1, sp, #32
 801b05e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801b062:	e781      	b.n	801af68 <__kernel_rem_pio2f+0x16c>
 801b064:	f104 3cff 	add.w	ip, r4, #4294967295
 801b068:	aa08      	add	r2, sp, #32
 801b06a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801b06e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801b072:	e7f3      	b.n	801b05c <__kernel_rem_pio2f+0x260>
 801b074:	a908      	add	r1, sp, #32
 801b076:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801b07a:	3801      	subs	r0, #1
 801b07c:	430a      	orrs	r2, r1
 801b07e:	e7ab      	b.n	801afd8 <__kernel_rem_pio2f+0x1dc>
 801b080:	3201      	adds	r2, #1
 801b082:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801b086:	2e00      	cmp	r6, #0
 801b088:	d0fa      	beq.n	801b080 <__kernel_rem_pio2f+0x284>
 801b08a:	9905      	ldr	r1, [sp, #20]
 801b08c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801b090:	eb0d 0001 	add.w	r0, sp, r1
 801b094:	18e6      	adds	r6, r4, r3
 801b096:	a91c      	add	r1, sp, #112	@ 0x70
 801b098:	f104 0c01 	add.w	ip, r4, #1
 801b09c:	384c      	subs	r0, #76	@ 0x4c
 801b09e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801b0a2:	4422      	add	r2, r4
 801b0a4:	4562      	cmp	r2, ip
 801b0a6:	da04      	bge.n	801b0b2 <__kernel_rem_pio2f+0x2b6>
 801b0a8:	4614      	mov	r4, r2
 801b0aa:	e70e      	b.n	801aeca <__kernel_rem_pio2f+0xce>
 801b0ac:	9804      	ldr	r0, [sp, #16]
 801b0ae:	2201      	movs	r2, #1
 801b0b0:	e7e7      	b.n	801b082 <__kernel_rem_pio2f+0x286>
 801b0b2:	9903      	ldr	r1, [sp, #12]
 801b0b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801b0b8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801b0bc:	9105      	str	r1, [sp, #20]
 801b0be:	ee07 1a90 	vmov	s15, r1
 801b0c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b0c6:	2400      	movs	r4, #0
 801b0c8:	ece6 7a01 	vstmia	r6!, {s15}
 801b0cc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801b0d0:	46b1      	mov	r9, r6
 801b0d2:	455c      	cmp	r4, fp
 801b0d4:	dd04      	ble.n	801b0e0 <__kernel_rem_pio2f+0x2e4>
 801b0d6:	ece0 7a01 	vstmia	r0!, {s15}
 801b0da:	f10c 0c01 	add.w	ip, ip, #1
 801b0de:	e7e1      	b.n	801b0a4 <__kernel_rem_pio2f+0x2a8>
 801b0e0:	ecfe 6a01 	vldmia	lr!, {s13}
 801b0e4:	ed39 7a01 	vldmdb	r9!, {s14}
 801b0e8:	3401      	adds	r4, #1
 801b0ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b0ee:	e7f0      	b.n	801b0d2 <__kernel_rem_pio2f+0x2d6>
 801b0f0:	0801ce98 	.word	0x0801ce98
 801b0f4:	0801ce6c 	.word	0x0801ce6c
 801b0f8:	43800000 	.word	0x43800000
 801b0fc:	3b800000 	.word	0x3b800000
 801b100:	00000000 	.word	0x00000000
 801b104:	9b02      	ldr	r3, [sp, #8]
 801b106:	eeb0 0a48 	vmov.f32	s0, s16
 801b10a:	eba3 0008 	sub.w	r0, r3, r8
 801b10e:	f7ff fde9 	bl	801ace4 <scalbnf>
 801b112:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801b0f8 <__kernel_rem_pio2f+0x2fc>
 801b116:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b11e:	db19      	blt.n	801b154 <__kernel_rem_pio2f+0x358>
 801b120:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801b0fc <__kernel_rem_pio2f+0x300>
 801b124:	ee60 7a27 	vmul.f32	s15, s0, s15
 801b128:	aa08      	add	r2, sp, #32
 801b12a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b12e:	3508      	adds	r5, #8
 801b130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b134:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801b138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801b13c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b140:	ee10 3a10 	vmov	r3, s0
 801b144:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b148:	ee17 3a90 	vmov	r3, s15
 801b14c:	3401      	adds	r4, #1
 801b14e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801b152:	e74c      	b.n	801afee <__kernel_rem_pio2f+0x1f2>
 801b154:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801b158:	aa08      	add	r2, sp, #32
 801b15a:	ee10 3a10 	vmov	r3, s0
 801b15e:	e7f6      	b.n	801b14e <__kernel_rem_pio2f+0x352>
 801b160:	a808      	add	r0, sp, #32
 801b162:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801b166:	9001      	str	r0, [sp, #4]
 801b168:	ee07 0a90 	vmov	s15, r0
 801b16c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801b170:	3b01      	subs	r3, #1
 801b172:	ee67 7a80 	vmul.f32	s15, s15, s0
 801b176:	ee20 0a07 	vmul.f32	s0, s0, s14
 801b17a:	ed62 7a01 	vstmdb	r2!, {s15}
 801b17e:	e743      	b.n	801b008 <__kernel_rem_pio2f+0x20c>
 801b180:	ecfc 6a01 	vldmia	ip!, {s13}
 801b184:	ecb5 7a01 	vldmia	r5!, {s14}
 801b188:	eee6 7a87 	vfma.f32	s15, s13, s14
 801b18c:	3001      	adds	r0, #1
 801b18e:	4550      	cmp	r0, sl
 801b190:	dc01      	bgt.n	801b196 <__kernel_rem_pio2f+0x39a>
 801b192:	4282      	cmp	r2, r0
 801b194:	daf4      	bge.n	801b180 <__kernel_rem_pio2f+0x384>
 801b196:	a858      	add	r0, sp, #352	@ 0x160
 801b198:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801b19c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801b1a0:	3b01      	subs	r3, #1
 801b1a2:	e735      	b.n	801b010 <__kernel_rem_pio2f+0x214>
 801b1a4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b1a6:	2b02      	cmp	r3, #2
 801b1a8:	dc09      	bgt.n	801b1be <__kernel_rem_pio2f+0x3c2>
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	dc2b      	bgt.n	801b206 <__kernel_rem_pio2f+0x40a>
 801b1ae:	d044      	beq.n	801b23a <__kernel_rem_pio2f+0x43e>
 801b1b0:	f009 0007 	and.w	r0, r9, #7
 801b1b4:	b059      	add	sp, #356	@ 0x164
 801b1b6:	ecbd 8b04 	vpop	{d8-d9}
 801b1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1be:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801b1c0:	2b03      	cmp	r3, #3
 801b1c2:	d1f5      	bne.n	801b1b0 <__kernel_rem_pio2f+0x3b4>
 801b1c4:	aa30      	add	r2, sp, #192	@ 0xc0
 801b1c6:	1f0b      	subs	r3, r1, #4
 801b1c8:	4413      	add	r3, r2
 801b1ca:	461a      	mov	r2, r3
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	f1a2 0204 	sub.w	r2, r2, #4
 801b1d4:	dc52      	bgt.n	801b27c <__kernel_rem_pio2f+0x480>
 801b1d6:	4622      	mov	r2, r4
 801b1d8:	2a01      	cmp	r2, #1
 801b1da:	f1a3 0304 	sub.w	r3, r3, #4
 801b1de:	dc5d      	bgt.n	801b29c <__kernel_rem_pio2f+0x4a0>
 801b1e0:	ab30      	add	r3, sp, #192	@ 0xc0
 801b1e2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801b1e6:	440b      	add	r3, r1
 801b1e8:	2c01      	cmp	r4, #1
 801b1ea:	dc67      	bgt.n	801b2bc <__kernel_rem_pio2f+0x4c0>
 801b1ec:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801b1f0:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801b1f4:	2e00      	cmp	r6, #0
 801b1f6:	d167      	bne.n	801b2c8 <__kernel_rem_pio2f+0x4cc>
 801b1f8:	edc7 6a00 	vstr	s13, [r7]
 801b1fc:	ed87 7a01 	vstr	s14, [r7, #4]
 801b200:	edc7 7a02 	vstr	s15, [r7, #8]
 801b204:	e7d4      	b.n	801b1b0 <__kernel_rem_pio2f+0x3b4>
 801b206:	ab30      	add	r3, sp, #192	@ 0xc0
 801b208:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801b20c:	440b      	add	r3, r1
 801b20e:	4622      	mov	r2, r4
 801b210:	2a00      	cmp	r2, #0
 801b212:	da24      	bge.n	801b25e <__kernel_rem_pio2f+0x462>
 801b214:	b34e      	cbz	r6, 801b26a <__kernel_rem_pio2f+0x46e>
 801b216:	eef1 7a47 	vneg.f32	s15, s14
 801b21a:	edc7 7a00 	vstr	s15, [r7]
 801b21e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801b222:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b226:	aa31      	add	r2, sp, #196	@ 0xc4
 801b228:	2301      	movs	r3, #1
 801b22a:	429c      	cmp	r4, r3
 801b22c:	da20      	bge.n	801b270 <__kernel_rem_pio2f+0x474>
 801b22e:	b10e      	cbz	r6, 801b234 <__kernel_rem_pio2f+0x438>
 801b230:	eef1 7a67 	vneg.f32	s15, s15
 801b234:	edc7 7a01 	vstr	s15, [r7, #4]
 801b238:	e7ba      	b.n	801b1b0 <__kernel_rem_pio2f+0x3b4>
 801b23a:	ab30      	add	r3, sp, #192	@ 0xc0
 801b23c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801b100 <__kernel_rem_pio2f+0x304>
 801b240:	440b      	add	r3, r1
 801b242:	2c00      	cmp	r4, #0
 801b244:	da05      	bge.n	801b252 <__kernel_rem_pio2f+0x456>
 801b246:	b10e      	cbz	r6, 801b24c <__kernel_rem_pio2f+0x450>
 801b248:	eef1 7a67 	vneg.f32	s15, s15
 801b24c:	edc7 7a00 	vstr	s15, [r7]
 801b250:	e7ae      	b.n	801b1b0 <__kernel_rem_pio2f+0x3b4>
 801b252:	ed33 7a01 	vldmdb	r3!, {s14}
 801b256:	3c01      	subs	r4, #1
 801b258:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b25c:	e7f1      	b.n	801b242 <__kernel_rem_pio2f+0x446>
 801b25e:	ed73 7a01 	vldmdb	r3!, {s15}
 801b262:	3a01      	subs	r2, #1
 801b264:	ee37 7a27 	vadd.f32	s14, s14, s15
 801b268:	e7d2      	b.n	801b210 <__kernel_rem_pio2f+0x414>
 801b26a:	eef0 7a47 	vmov.f32	s15, s14
 801b26e:	e7d4      	b.n	801b21a <__kernel_rem_pio2f+0x41e>
 801b270:	ecb2 7a01 	vldmia	r2!, {s14}
 801b274:	3301      	adds	r3, #1
 801b276:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b27a:	e7d6      	b.n	801b22a <__kernel_rem_pio2f+0x42e>
 801b27c:	edd2 7a00 	vldr	s15, [r2]
 801b280:	edd2 6a01 	vldr	s13, [r2, #4]
 801b284:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b288:	3801      	subs	r0, #1
 801b28a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b28e:	ed82 7a00 	vstr	s14, [r2]
 801b292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b296:	edc2 7a01 	vstr	s15, [r2, #4]
 801b29a:	e798      	b.n	801b1ce <__kernel_rem_pio2f+0x3d2>
 801b29c:	edd3 7a00 	vldr	s15, [r3]
 801b2a0:	edd3 6a01 	vldr	s13, [r3, #4]
 801b2a4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801b2a8:	3a01      	subs	r2, #1
 801b2aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b2ae:	ed83 7a00 	vstr	s14, [r3]
 801b2b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801b2b6:	edc3 7a01 	vstr	s15, [r3, #4]
 801b2ba:	e78d      	b.n	801b1d8 <__kernel_rem_pio2f+0x3dc>
 801b2bc:	ed33 7a01 	vldmdb	r3!, {s14}
 801b2c0:	3c01      	subs	r4, #1
 801b2c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801b2c6:	e78f      	b.n	801b1e8 <__kernel_rem_pio2f+0x3ec>
 801b2c8:	eef1 6a66 	vneg.f32	s13, s13
 801b2cc:	eeb1 7a47 	vneg.f32	s14, s14
 801b2d0:	edc7 6a00 	vstr	s13, [r7]
 801b2d4:	ed87 7a01 	vstr	s14, [r7, #4]
 801b2d8:	eef1 7a67 	vneg.f32	s15, s15
 801b2dc:	e790      	b.n	801b200 <__kernel_rem_pio2f+0x404>
 801b2de:	bf00      	nop

0801b2e0 <floorf>:
 801b2e0:	ee10 3a10 	vmov	r3, s0
 801b2e4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b2e8:	3a7f      	subs	r2, #127	@ 0x7f
 801b2ea:	2a16      	cmp	r2, #22
 801b2ec:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801b2f0:	dc2b      	bgt.n	801b34a <floorf+0x6a>
 801b2f2:	2a00      	cmp	r2, #0
 801b2f4:	da12      	bge.n	801b31c <floorf+0x3c>
 801b2f6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801b35c <floorf+0x7c>
 801b2fa:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b2fe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b306:	dd06      	ble.n	801b316 <floorf+0x36>
 801b308:	2b00      	cmp	r3, #0
 801b30a:	da24      	bge.n	801b356 <floorf+0x76>
 801b30c:	2900      	cmp	r1, #0
 801b30e:	4b14      	ldr	r3, [pc, #80]	@ (801b360 <floorf+0x80>)
 801b310:	bf08      	it	eq
 801b312:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801b316:	ee00 3a10 	vmov	s0, r3
 801b31a:	4770      	bx	lr
 801b31c:	4911      	ldr	r1, [pc, #68]	@ (801b364 <floorf+0x84>)
 801b31e:	4111      	asrs	r1, r2
 801b320:	420b      	tst	r3, r1
 801b322:	d0fa      	beq.n	801b31a <floorf+0x3a>
 801b324:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801b35c <floorf+0x7c>
 801b328:	ee30 0a27 	vadd.f32	s0, s0, s15
 801b32c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801b330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b334:	ddef      	ble.n	801b316 <floorf+0x36>
 801b336:	2b00      	cmp	r3, #0
 801b338:	bfbe      	ittt	lt
 801b33a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801b33e:	fa40 f202 	asrlt.w	r2, r0, r2
 801b342:	189b      	addlt	r3, r3, r2
 801b344:	ea23 0301 	bic.w	r3, r3, r1
 801b348:	e7e5      	b.n	801b316 <floorf+0x36>
 801b34a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801b34e:	d3e4      	bcc.n	801b31a <floorf+0x3a>
 801b350:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b354:	4770      	bx	lr
 801b356:	2300      	movs	r3, #0
 801b358:	e7dd      	b.n	801b316 <floorf+0x36>
 801b35a:	bf00      	nop
 801b35c:	7149f2ca 	.word	0x7149f2ca
 801b360:	bf800000 	.word	0xbf800000
 801b364:	007fffff 	.word	0x007fffff

0801b368 <_init>:
 801b368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b36a:	bf00      	nop
 801b36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b36e:	bc08      	pop	{r3}
 801b370:	469e      	mov	lr, r3
 801b372:	4770      	bx	lr

0801b374 <_fini>:
 801b374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b376:	bf00      	nop
 801b378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b37a:	bc08      	pop	{r3}
 801b37c:	469e      	mov	lr, r3
 801b37e:	4770      	bx	lr
