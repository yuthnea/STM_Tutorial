
FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001db00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba0  0801dc90  0801dc90  0001ec90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f830  0801f830  000266cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801f830  0801f830  00020830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f838  0801f838  000266cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f838  0801f838  00020838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801f83c  0801f83c  0002083c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0801f840  00021000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .nzds         00000028  200001e8  0801fa28  000211e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       000046cc  10000000  0801fa50  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a524  20000210  20000210  00027210  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000a734  2000a734  00027210  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000266cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004e701  00000000  00000000  000266fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bf37  00000000  00000000  00074dfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e78  00000000  00000000  00080d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002285  00000000  00000000  00083bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002e509  00000000  00000000  00085e35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004aa93  00000000  00000000  000b433e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f7413  00000000  00000000  000fedd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  001f61e4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c2c8  00000000  00000000  001f629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  00202564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000015c0  00000000  00000000  002025b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000060  00000000  00000000  00203b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801dc78 	.word	0x0801dc78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0801dc78 	.word	0x0801dc78

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_frsub>:
 8000b5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b60:	e002      	b.n	8000b68 <__addsf3>
 8000b62:	bf00      	nop

08000b64 <__aeabi_fsub>:
 8000b64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b68 <__addsf3>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	bf1f      	itttt	ne
 8000b6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b70:	ea92 0f03 	teqne	r2, r3
 8000b74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7c:	d06a      	beq.n	8000c54 <__addsf3+0xec>
 8000b7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b86:	bfc1      	itttt	gt
 8000b88:	18d2      	addgt	r2, r2, r3
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	4048      	eorgt	r0, r1
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	bfb8      	it	lt
 8000b92:	425b      	neglt	r3, r3
 8000b94:	2b19      	cmp	r3, #25
 8000b96:	bf88      	it	hi
 8000b98:	4770      	bxhi	lr
 8000b9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4249      	negne	r1, r1
 8000bba:	ea92 0f03 	teq	r2, r3
 8000bbe:	d03f      	beq.n	8000c40 <__addsf3+0xd8>
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc8:	eb10 000c 	adds.w	r0, r0, ip
 8000bcc:	f1c3 0320 	rsb	r3, r3, #32
 8000bd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__addsf3+0x78>
 8000bda:	4249      	negs	r1, r1
 8000bdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be4:	d313      	bcc.n	8000c0e <__addsf3+0xa6>
 8000be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bea:	d306      	bcc.n	8000bfa <__addsf3+0x92>
 8000bec:	0840      	lsrs	r0, r0, #1
 8000bee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf2:	f102 0201 	add.w	r2, r2, #1
 8000bf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf8:	d251      	bcs.n	8000c9e <__addsf3+0x136>
 8000bfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	ea40 0003 	orr.w	r0, r0, r3
 8000c0c:	4770      	bx	lr
 8000c0e:	0049      	lsls	r1, r1, #1
 8000c10:	eb40 0000 	adc.w	r0, r0, r0
 8000c14:	3a01      	subs	r2, #1
 8000c16:	bf28      	it	cs
 8000c18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c1c:	d2ed      	bcs.n	8000bfa <__addsf3+0x92>
 8000c1e:	fab0 fc80 	clz	ip, r0
 8000c22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c26:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2e:	bfaa      	itet	ge
 8000c30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c34:	4252      	neglt	r2, r2
 8000c36:	4318      	orrge	r0, r3
 8000c38:	bfbc      	itt	lt
 8000c3a:	40d0      	lsrlt	r0, r2
 8000c3c:	4318      	orrlt	r0, r3
 8000c3e:	4770      	bx	lr
 8000c40:	f092 0f00 	teq	r2, #0
 8000c44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c48:	bf06      	itte	eq
 8000c4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	3201      	addeq	r2, #1
 8000c50:	3b01      	subne	r3, #1
 8000c52:	e7b5      	b.n	8000bc0 <__addsf3+0x58>
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d021      	beq.n	8000ca8 <__addsf3+0x140>
 8000c64:	ea92 0f03 	teq	r2, r3
 8000c68:	d004      	beq.n	8000c74 <__addsf3+0x10c>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	bf08      	it	eq
 8000c70:	4608      	moveq	r0, r1
 8000c72:	4770      	bx	lr
 8000c74:	ea90 0f01 	teq	r0, r1
 8000c78:	bf1c      	itt	ne
 8000c7a:	2000      	movne	r0, #0
 8000c7c:	4770      	bxne	lr
 8000c7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c82:	d104      	bne.n	8000c8e <__addsf3+0x126>
 8000c84:	0040      	lsls	r0, r0, #1
 8000c86:	bf28      	it	cs
 8000c88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	4770      	bx	lr
 8000c8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c92:	bf3c      	itt	cc
 8000c94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c98:	4770      	bxcc	lr
 8000c9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ca2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	4770      	bx	lr
 8000ca8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cac:	bf16      	itet	ne
 8000cae:	4608      	movne	r0, r1
 8000cb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb4:	4601      	movne	r1, r0
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	bf06      	itte	eq
 8000cba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cbe:	ea90 0f01 	teqeq	r0, r1
 8000cc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_ui2f>:
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e004      	b.n	8000cd8 <__aeabi_i2f+0x8>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_i2f>:
 8000cd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	bf48      	it	mi
 8000cd6:	4240      	negmi	r0, r0
 8000cd8:	ea5f 0c00 	movs.w	ip, r0
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	f04f 0000 	mov.w	r0, #0
 8000cea:	e01c      	b.n	8000d26 <__aeabi_l2f+0x2a>

08000cec <__aeabi_ul2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e00a      	b.n	8000d10 <__aeabi_l2f+0x14>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_l2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_l2f+0x14>
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	ea5f 0c01 	movs.w	ip, r1
 8000d14:	bf02      	ittt	eq
 8000d16:	4684      	moveq	ip, r0
 8000d18:	4601      	moveq	r1, r0
 8000d1a:	2000      	moveq	r0, #0
 8000d1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d20:	bf08      	it	eq
 8000d22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	fabc f28c 	clz	r2, ip
 8000d2e:	3a08      	subs	r2, #8
 8000d30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d34:	db10      	blt.n	8000d58 <__aeabi_l2f+0x5c>
 8000d36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d48:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f102 0220 	add.w	r2, r2, #32
 8000d5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d68:	fa21 f202 	lsr.w	r2, r1, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_ldivmod>:
 8000d78:	b97b      	cbnz	r3, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7a:	b972      	cbnz	r2, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bfbe      	ittt	lt
 8000d80:	2000      	movlt	r0, #0
 8000d82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d86:	e006      	blt.n	8000d96 <__aeabi_ldivmod+0x1e>
 8000d88:	bf08      	it	eq
 8000d8a:	2800      	cmpeq	r0, #0
 8000d8c:	bf1c      	itt	ne
 8000d8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d92:	f04f 30ff 	movne.w	r0, #4294967295
 8000d96:	f000 b9b5 	b.w	8001104 <__aeabi_idiv0>
 8000d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da2:	2900      	cmp	r1, #0
 8000da4:	db09      	blt.n	8000dba <__aeabi_ldivmod+0x42>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db1a      	blt.n	8000de0 <__aeabi_ldivmod+0x68>
 8000daa:	f000 f84d 	bl	8000e48 <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4770      	bx	lr
 8000dba:	4240      	negs	r0, r0
 8000dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db1b      	blt.n	8000dfc <__aeabi_ldivmod+0x84>
 8000dc4:	f000 f840 	bl	8000e48 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	4252      	negs	r2, r2
 8000dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dde:	4770      	bx	lr
 8000de0:	4252      	negs	r2, r2
 8000de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de6:	f000 f82f 	bl	8000e48 <__udivmoddi4>
 8000dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df2:	b004      	add	sp, #16
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	4770      	bx	lr
 8000dfc:	4252      	negs	r2, r2
 8000dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e02:	f000 f821 	bl	8000e48 <__udivmoddi4>
 8000e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e0e:	b004      	add	sp, #16
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_uldivmod>:
 8000e18:	b953      	cbnz	r3, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1a:	b94a      	cbnz	r2, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	bf08      	it	eq
 8000e20:	2800      	cmpeq	r0, #0
 8000e22:	bf1c      	itt	ne
 8000e24:	f04f 31ff 	movne.w	r1, #4294967295
 8000e28:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2c:	f000 b96a 	b.w	8001104 <__aeabi_idiv0>
 8000e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e38:	f000 f806 	bl	8000e48 <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4770      	bx	lr

08000e48 <__udivmoddi4>:
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	9d08      	ldr	r5, [sp, #32]
 8000e4e:	460c      	mov	r4, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d14e      	bne.n	8000ef2 <__udivmoddi4+0xaa>
 8000e54:	4694      	mov	ip, r2
 8000e56:	458c      	cmp	ip, r1
 8000e58:	4686      	mov	lr, r0
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	d962      	bls.n	8000f26 <__udivmoddi4+0xde>
 8000e60:	b14a      	cbz	r2, 8000e76 <__udivmoddi4+0x2e>
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	4091      	lsls	r1, r2
 8000e68:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	4319      	orrs	r1, r3
 8000e72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f f68c 	uxth.w	r6, ip
 8000e7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e86:	fb07 1114 	mls	r1, r7, r4, r1
 8000e8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8e:	fb04 f106 	mul.w	r1, r4, r6
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x64>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e9e:	f080 8112 	bcs.w	80010c6 <__udivmoddi4+0x27e>
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	f240 810f 	bls.w	80010c6 <__udivmoddi4+0x27e>
 8000ea8:	3c02      	subs	r4, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1a59      	subs	r1, r3, r1
 8000eae:	fa1f f38e 	uxth.w	r3, lr
 8000eb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f606 	mul.w	r6, r0, r6
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d90a      	bls.n	8000edc <__udivmoddi4+0x94>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ece:	f080 80fc 	bcs.w	80010ca <__udivmoddi4+0x282>
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	f240 80f9 	bls.w	80010ca <__udivmoddi4+0x282>
 8000ed8:	4463      	add	r3, ip
 8000eda:	3802      	subs	r0, #2
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	b11d      	cbz	r5, 8000eee <__udivmoddi4+0xa6>
 8000ee6:	40d3      	lsrs	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	e9c5 3200 	strd	r3, r2, [r5]
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d905      	bls.n	8000f02 <__udivmoddi4+0xba>
 8000ef6:	b10d      	cbz	r5, 8000efc <__udivmoddi4+0xb4>
 8000ef8:	e9c5 0100 	strd	r0, r1, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4608      	mov	r0, r1
 8000f00:	e7f5      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f02:	fab3 f183 	clz	r1, r3
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d146      	bne.n	8000f98 <__udivmoddi4+0x150>
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0xcc>
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	f0c0 80f0 	bcc.w	80010f4 <__udivmoddi4+0x2ac>
 8000f14:	1a86      	subs	r6, r0, r2
 8000f16:	eb64 0303 	sbc.w	r3, r4, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d0e6      	beq.n	8000eee <__udivmoddi4+0xa6>
 8000f20:	e9c5 6300 	strd	r6, r3, [r5]
 8000f24:	e7e3      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8090 	bne.w	800104c <__udivmoddi4+0x204>
 8000f2c:	eba1 040c 	sub.w	r4, r1, ip
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f42:	fb08 4416 	mls	r4, r8, r6, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb07 f006 	mul.w	r0, r7, r6
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x11c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x11a>
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	f200 80cd 	bhi.w	80010fc <__udivmoddi4+0x2b4>
 8000f62:	4626      	mov	r6, r4
 8000f64:	1a1c      	subs	r4, r3, r0
 8000f66:	fa1f f38e 	uxth.w	r3, lr
 8000f6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f76:	fb00 f707 	mul.w	r7, r0, r7
 8000f7a:	429f      	cmp	r7, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x148>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x146>
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	f200 80b0 	bhi.w	80010ee <__udivmoddi4+0x2a6>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	1bdb      	subs	r3, r3, r7
 8000f92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f96:	e7a5      	b.n	8000ee4 <__udivmoddi4+0x9c>
 8000f98:	f1c1 0620 	rsb	r6, r1, #32
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000fa2:	431f      	orrs	r7, r3
 8000fa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fac:	ea43 030c 	orr.w	r3, r3, ip
 8000fb0:	40f4      	lsrs	r4, r6
 8000fb2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb6:	0c38      	lsrs	r0, r7, #16
 8000fb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fc0:	fa1f fc87 	uxth.w	ip, r7
 8000fc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000fd0:	45a1      	cmp	r9, r4
 8000fd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd6:	d90a      	bls.n	8000fee <__udivmoddi4+0x1a6>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fde:	f080 8084 	bcs.w	80010ea <__udivmoddi4+0x2a2>
 8000fe2:	45a1      	cmp	r9, r4
 8000fe4:	f240 8081 	bls.w	80010ea <__udivmoddi4+0x2a2>
 8000fe8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	eba4 0409 	sub.w	r4, r4, r9
 8000ff2:	fa1f f983 	uxth.w	r9, r3
 8000ff6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ffa:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001002:	fb03 fc0c 	mul.w	ip, r3, ip
 8001006:	45a4      	cmp	ip, r4
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x1d2>
 800100a:	193c      	adds	r4, r7, r4
 800100c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001010:	d267      	bcs.n	80010e2 <__udivmoddi4+0x29a>
 8001012:	45a4      	cmp	ip, r4
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0x29a>
 8001016:	3b02      	subs	r3, #2
 8001018:	443c      	add	r4, r7
 800101a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101e:	fba0 9302 	umull	r9, r3, r0, r2
 8001022:	eba4 040c 	sub.w	r4, r4, ip
 8001026:	429c      	cmp	r4, r3
 8001028:	46ce      	mov	lr, r9
 800102a:	469c      	mov	ip, r3
 800102c:	d351      	bcc.n	80010d2 <__udivmoddi4+0x28a>
 800102e:	d04e      	beq.n	80010ce <__udivmoddi4+0x286>
 8001030:	b155      	cbz	r5, 8001048 <__udivmoddi4+0x200>
 8001032:	ebb8 030e 	subs.w	r3, r8, lr
 8001036:	eb64 040c 	sbc.w	r4, r4, ip
 800103a:	fa04 f606 	lsl.w	r6, r4, r6
 800103e:	40cb      	lsrs	r3, r1
 8001040:	431e      	orrs	r6, r3
 8001042:	40cc      	lsrs	r4, r1
 8001044:	e9c5 6400 	strd	r6, r4, [r5]
 8001048:	2100      	movs	r1, #0
 800104a:	e750      	b.n	8000eee <__udivmoddi4+0xa6>
 800104c:	f1c2 0320 	rsb	r3, r2, #32
 8001050:	fa20 f103 	lsr.w	r1, r0, r3
 8001054:	fa0c fc02 	lsl.w	ip, ip, r2
 8001058:	fa24 f303 	lsr.w	r3, r4, r3
 800105c:	4094      	lsls	r4, r2
 800105e:	430c      	orrs	r4, r1
 8001060:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001064:	fa00 fe02 	lsl.w	lr, r0, r2
 8001068:	fa1f f78c 	uxth.w	r7, ip
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3110 	mls	r1, r8, r0, r3
 8001074:	0c23      	lsrs	r3, r4, #16
 8001076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107a:	fb00 f107 	mul.w	r1, r0, r7
 800107e:	4299      	cmp	r1, r3
 8001080:	d908      	bls.n	8001094 <__udivmoddi4+0x24c>
 8001082:	eb1c 0303 	adds.w	r3, ip, r3
 8001086:	f100 36ff 	add.w	r6, r0, #4294967295
 800108a:	d22c      	bcs.n	80010e6 <__udivmoddi4+0x29e>
 800108c:	4299      	cmp	r1, r3
 800108e:	d92a      	bls.n	80010e6 <__udivmoddi4+0x29e>
 8001090:	3802      	subs	r0, #2
 8001092:	4463      	add	r3, ip
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb3 f1f8 	udiv	r1, r3, r8
 800109c:	fb08 3311 	mls	r3, r8, r1, r3
 80010a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a4:	fb01 f307 	mul.w	r3, r1, r7
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x276>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010b4:	d213      	bcs.n	80010de <__udivmoddi4+0x296>
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	d911      	bls.n	80010de <__udivmoddi4+0x296>
 80010ba:	3902      	subs	r1, #2
 80010bc:	4464      	add	r4, ip
 80010be:	1ae4      	subs	r4, r4, r3
 80010c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c4:	e739      	b.n	8000f3a <__udivmoddi4+0xf2>
 80010c6:	4604      	mov	r4, r0
 80010c8:	e6f0      	b.n	8000eac <__udivmoddi4+0x64>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e706      	b.n	8000edc <__udivmoddi4+0x94>
 80010ce:	45c8      	cmp	r8, r9
 80010d0:	d2ae      	bcs.n	8001030 <__udivmoddi4+0x1e8>
 80010d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010da:	3801      	subs	r0, #1
 80010dc:	e7a8      	b.n	8001030 <__udivmoddi4+0x1e8>
 80010de:	4631      	mov	r1, r6
 80010e0:	e7ed      	b.n	80010be <__udivmoddi4+0x276>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e799      	b.n	800101a <__udivmoddi4+0x1d2>
 80010e6:	4630      	mov	r0, r6
 80010e8:	e7d4      	b.n	8001094 <__udivmoddi4+0x24c>
 80010ea:	46d6      	mov	lr, sl
 80010ec:	e77f      	b.n	8000fee <__udivmoddi4+0x1a6>
 80010ee:	4463      	add	r3, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e74d      	b.n	8000f90 <__udivmoddi4+0x148>
 80010f4:	4606      	mov	r6, r0
 80010f6:	4623      	mov	r3, r4
 80010f8:	4608      	mov	r0, r1
 80010fa:	e70f      	b.n	8000f1c <__udivmoddi4+0xd4>
 80010fc:	3e02      	subs	r6, #2
 80010fe:	4463      	add	r3, ip
 8001100:	e730      	b.n	8000f64 <__udivmoddi4+0x11c>
 8001102:	bf00      	nop

08001104 <__aeabi_idiv0>:
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f8c8 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	2000022c 	.word	0x2000022c

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ff99 	bl	8001250 <NVIC_EncodePriority>
 800131e:	4602      	mov	r2, r0
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff68 	bl	80011fc <__NVIC_SetPriority>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff3c 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <SysTick_Config>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ff0a 	bl	800118c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fef1 	bl	800118c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa91 	bl	8001994 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa48 	bl	8001928 <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	223f      	movs	r2, #63	@ 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_DMA_Start_IT+0x26>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e040      	b.n	800156c <HAL_DMA_Start_IT+0xa8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12f      	bne.n	800155e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9da 	bl	80018cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	223f      	movs	r2, #63	@ 0x3f
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0216 	orr.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0208 	orr.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e005      	b.n	800156a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00c      	b.n	80015ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001800 <HAL_DMA_IRQHandler+0x248>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001804 <HAL_DMA_IRQHandler+0x24c>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0a9b      	lsrs	r3, r3, #10
 80015d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2208      	movs	r2, #8
 80015e4:	409a      	lsls	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0204 	bic.w	r2, r2, #4
 800160a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	2208      	movs	r2, #8
 8001612:	409a      	lsls	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	2201      	movs	r2, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	2201      	movs	r2, #1
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	2204      	movs	r2, #4
 8001660:	409a      	lsls	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	2204      	movs	r2, #4
 800167e:	409a      	lsls	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2210      	movs	r2, #16
 8001696:	409a      	lsls	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d043      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03c      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	2210      	movs	r2, #16
 80016b4:	409a      	lsls	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
 80016e6:	e01f      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01b      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e016      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0208 	bic.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2220      	movs	r2, #32
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 808f 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8087 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174e:	2220      	movs	r2, #32
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d136      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_IRQHandler+0x1da>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	223f      	movs	r2, #63	@ 0x3f
 80017a8:	409a      	lsls	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d07e      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
        }
        return;
 80017ce:	e079      	b.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01d      	beq.n	800181a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e02c      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e01e      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0210 	bic.w	r2, r2, #16
 8001836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d032      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d022      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2205      	movs	r2, #5
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3301      	adds	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	d307      	bcc.n	80018a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f2      	bne.n	8001884 <HAL_DMA_IRQHandler+0x2cc>
 800189e:	e000      	b.n	80018a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018c4:	bf00      	nop
    }
  }
}
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b40      	cmp	r3, #64	@ 0x40
 80018f8:	d108      	bne.n	800190c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800190a:	e007      	b.n	800191c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3b10      	subs	r3, #16
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <DMA_CalcBaseAndBitshift+0x64>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001942:	4a13      	ldr	r2, [pc, #76]	@ (8001990 <DMA_CalcBaseAndBitshift+0x68>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d909      	bls.n	800196a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	@ 0x58
 8001968:	e007      	b.n	800197a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	aaaaaaab 	.word	0xaaaaaaab
 8001990:	0801eb3c 	.word	0x0801eb3c

08001994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11f      	bne.n	80019ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d856      	bhi.n	8001a62 <DMA_CheckFifoParam+0xce>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <DMA_CheckFifoParam+0x28>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019df 	.word	0x080019df
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	08001a63 	.word	0x08001a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d046      	beq.n	8001a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019dc:	e043      	b.n	8001a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019e6:	d140      	bne.n	8001a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e03d      	b.n	8001a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019f6:	d121      	bne.n	8001a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d837      	bhi.n	8001a6e <DMA_CheckFifoParam+0xda>
 80019fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <DMA_CheckFifoParam+0x70>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a1b 	.word	0x08001a1b
 8001a0c:	08001a15 	.word	0x08001a15
 8001a10:	08001a2d 	.word	0x08001a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e030      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d025      	beq.n	8001a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2a:	e022      	b.n	8001a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a34:	d11f      	bne.n	8001a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a3a:	e01c      	b.n	8001a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d903      	bls.n	8001a4a <DMA_CheckFifoParam+0xb6>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d003      	beq.n	8001a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a48:	e018      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4e:	e015      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a60:	e00b      	b.n	8001a7a <DMA_CheckFifoParam+0xe6>
      break;
 8001a62:	bf00      	nop
 8001a64:	e00a      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e008      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e006      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	@ (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e08:	887a      	ldrh	r2, [r7, #2]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	400b      	ands	r3, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e12b      	b.n	8002096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f00a f99e 	bl	800c194 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	@ 0x24
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e90:	f001 fc64 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8001e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a81      	ldr	r2, [pc, #516]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d807      	bhi.n	8001eb0 <HAL_I2C_Init+0x84>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a80      	ldr	r2, [pc, #512]	@ (80020a4 <HAL_I2C_Init+0x278>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bf94      	ite	ls
 8001ea8:	2301      	movls	r3, #1
 8001eaa:	2300      	movhi	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e006      	b.n	8001ebe <HAL_I2C_Init+0x92>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80020a8 <HAL_I2C_Init+0x27c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e7      	b.n	8002096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a78      	ldr	r2, [pc, #480]	@ (80020ac <HAL_I2C_Init+0x280>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d802      	bhi.n	8001f00 <HAL_I2C_Init+0xd4>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	e009      	b.n	8001f14 <HAL_I2C_Init+0xe8>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_I2C_Init+0x284>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	3301      	adds	r3, #1
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	495c      	ldr	r1, [pc, #368]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d819      	bhi.n	8001f68 <HAL_I2C_Init+0x13c>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e59      	subs	r1, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f48:	400b      	ands	r3, r1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_I2C_Init+0x138>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e59      	subs	r1, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	e051      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e04f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_I2C_Init+0x168>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e012      	b.n	8001fba <HAL_I2C_Init+0x18e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Init+0x196>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e022      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_I2C_Init+0x1bc>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e58      	subs	r0, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe6:	e00f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	6809      	ldr	r1, [r1, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002036:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6911      	ldr	r1, [r2, #16]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68d2      	ldr	r2, [r2, #12]
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	000186a0 	.word	0x000186a0
 80020a4:	001e847f 	.word	0x001e847f
 80020a8:	003d08ff 	.word	0x003d08ff
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ce:	f7ff f85d 	bl	800118c <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	f040 80d9 	bne.w	8002294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2319      	movs	r3, #25
 80020e8:	2201      	movs	r2, #1
 80020ea:	496d      	ldr	r1, [pc, #436]	@ (80022a0 <HAL_I2C_Mem_Write+0x1ec>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fc8f 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0cc      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_I2C_Mem_Write+0x56>
 8002106:	2302      	movs	r3, #2
 8002108:	e0c5      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d007      	beq.n	8002130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2221      	movs	r2, #33	@ 0x21
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a4d      	ldr	r2, [pc, #308]	@ (80022a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002172:	88f8      	ldrh	r0, [r7, #6]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fac6 	bl	8002714 <I2C_RequestMemoryWrite>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d052      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fd54 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11b      	bne.n	8002234 <HAL_I2C_Mem_Write+0x180>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1aa      	bne.n	8002192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fd47 	bl	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e016      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00100002 	.word	0x00100002
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c2:	f7fe ff63 	bl	800118c <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	f040 8218 	bne.w	8002706 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2319      	movs	r3, #25
 80022dc:	2201      	movs	r2, #1
 80022de:	497c      	ldr	r1, [pc, #496]	@ (80024d0 <HAL_I2C_Mem_Read+0x228>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb95 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e20b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Mem_Read+0x56>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e204      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	@ 0x22
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a5c      	ldr	r2, [pc, #368]	@ (80024d4 <HAL_I2C_Mem_Read+0x22c>)
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c
//    hal_flage = 1;//JH
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002366:	88f8      	ldrh	r0, [r7, #6]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4603      	mov	r3, r0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa62 	bl	8002840 <I2C_RequestMemoryRead>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_I2C_Mem_Read+0xe4>
    {
    	hal_flage = 1;//JH
 8002382:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <HAL_I2C_Mem_Read+0x230>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e1bd      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
//      hal_flage = 1;// Not follow rule can't debug
    }
//    hal_flage = 1;//NJH

    if (hi2c->XferSize == 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <HAL_I2C_Mem_Read+0x114>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e191      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11b      	bne.n	80023fc <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e171      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 2U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11b      	bne.n	800243c <HAL_I2C_Mem_Read+0x194>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002412:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	e151      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    }
//    hal_flage = 1;//NJH
    while (hi2c->XferSize > 0U)
 8002452:	e145      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	2b03      	cmp	r3, #3
 800245a:	f200 80f2 	bhi.w	8002642 <HAL_I2C_Mem_Read+0x39a>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	2b01      	cmp	r3, #1
 8002464:	d123      	bne.n	80024ae <HAL_I2C_Mem_Read+0x206>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002468:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fc7a 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Mem_Read+0x1d2>
          {
            return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e146      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024ac:	e118      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d14f      	bne.n	8002556 <HAL_I2C_Mem_Read+0x2ae>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	2200      	movs	r2, #0
 80024be:	4907      	ldr	r1, [pc, #28]	@ (80024dc <HAL_I2C_Mem_Read+0x234>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 faa5 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x238>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e11b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000
 80024d8:	20000230 	.word	0x20000230
 80024dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002554:	e0c4      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	496c      	ldr	r1, [pc, #432]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa55 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x2c8>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cb      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	4955      	ldr	r1, [pc, #340]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa27 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x324>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e09d      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002640:	e04e      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002644:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb8c 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Mem_Read+0x3ae>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e058      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d124      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        {
          if (hi2c->XferSize == 3U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	2b03      	cmp	r3, #3
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Read+0x406>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f aeb5 	bne.w	8002454 <HAL_I2C_Mem_Read+0x1ac>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
//    hal_flage = 1;//NJH
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
//    hal_flage = 1;//NJH
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
//	  hal_flage = 1;//NJH
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010004 	.word	0x00010004

08002714 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2200      	movs	r2, #0
 8002746:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f960 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d103      	bne.n	800276e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e05f      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002780:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	492d      	ldr	r1, [pc, #180]	@ (800283c <I2C_RequestMemoryWrite+0x128>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9bb 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e04c      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa46 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02b      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e021      	b.n	8002830 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa20 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e005      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	00010002 	.word	0x00010002

08002840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8c2 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a0:	d103      	bne.n	80028aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0aa      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	4952      	ldr	r1, [pc, #328]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f91d 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e097      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9a8 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e076      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	e021      	b.n	800296c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f982 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e050      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f967 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e035      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f82b 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ce:	d103      	bne.n	80029d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e013      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f886 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e048      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d044      	beq.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fbaf 	bl	800118c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d139      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	e00c      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e023      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0xca>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	e00c      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d093      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b12:	e071      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b22:	d123      	bne.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e067      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d041      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fe fb0a 	bl	800118c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d136      	bne.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10c      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e00b      	b.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e021      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e00b      	b.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f af6d 	bne.w	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8e3 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d028      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fa8f 	bl	800118c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d1c3      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f89b 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d028      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fe fa47 	bl	800118c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d016      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1c3      	bne.n	8002ce2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d70:	e049      	b.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d119      	bne.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e030      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fe f9ea 	bl	800118c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d016      	beq.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d1ae      	bne.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e34:	d11b      	bne.n	8002e6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe f92a 	bl	800118c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f926 	bl	800118c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f916 	bl	800118c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f912 	bl	800118c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f8cb 	bl	800118c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f8c7 	bl	800118c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f8aa 	bl	800118c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe f8a6 	bl	800118c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f88a 	bl	800118c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f886 	bl	800118c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f873 	bl	800118c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe f86f 	bl	800118c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe f82f 	bl	800118c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe f82b 	bl	800118c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fd fff0 	bl	800118c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fd ffec 	bl	800118c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fd ffda 	bl	800118c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fd ffd6 	bl	800118c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd ffaa 	bl	800118c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd ffa6 	bl	800118c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fd ff7f 	bl	800118c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd ff7b 	bl	800118c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff68 	bl	800118c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ff64 	bl	800118c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fd fe96 	bl	800118c <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd fe92 	bl	800118c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fe0a 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	0801eb24 	.word	0x0801eb24
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b094      	sub	sp, #80	@ 0x50
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80e1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e0db      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 800356e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003570:	e0db      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x208>)
 8003574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003576:	e0d8      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4621      	mov	r1, r4
 80035c4:	1a51      	subs	r1, r2, r1
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035dc:	4659      	mov	r1, fp
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e6:	4651      	mov	r1, sl
 80035e8:	018a      	lsls	r2, r1, #6
 80035ea:	4651      	mov	r1, sl
 80035ec:	ebb2 0801 	subs.w	r8, r2, r1
 80035f0:	4659      	mov	r1, fp
 80035f2:	eb63 0901 	sbc.w	r9, r3, r1
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360a:	4690      	mov	r8, r2
 800360c:	4699      	mov	r9, r3
 800360e:	4623      	mov	r3, r4
 8003610:	eb18 0303 	adds.w	r3, r8, r3
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	462b      	mov	r3, r5
 8003618:	eb49 0303 	adc.w	r3, r9, r3
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362a:	4629      	mov	r1, r5
 800362c:	024b      	lsls	r3, r1, #9
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003634:	4621      	mov	r1, r4
 8003636:	024a      	lsls	r2, r1, #9
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003648:	f7fd fbe6 	bl	8000e18 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	e058      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	4618      	mov	r0, r3
 8003660:	4611      	mov	r1, r2
 8003662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
 800366c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	0159      	lsls	r1, r3, #5
 800367e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003682:	0150      	lsls	r0, r2, #5
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4641      	mov	r1, r8
 800368a:	ebb2 0a01 	subs.w	sl, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb63 0b01 	sbc.w	fp, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036a8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ac:	eb63 050b 	sbc.w	r5, r3, fp
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	00eb      	lsls	r3, r5, #3
 80036ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036be:	00e2      	lsls	r2, r4, #3
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	18e3      	adds	r3, r4, r3
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	464b      	mov	r3, r9
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	61fa      	str	r2, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	f7fd fb8c 	bl	8000e18 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800372c:	4618      	mov	r0, r3
 800372e:	3750      	adds	r7, #80	@ 0x50
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a9b      	lsrs	r3, r3, #10
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	0801eb34 	.word	0x0801eb34

08003784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003788:	f7ff ffdc 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0b5b      	lsrs	r3, r3, #13
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	0801eb34 	.word	0x0801eb34

080037ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e07b      	b.n	80038b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d108      	bne.n	80037d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037ce:	d009      	beq.n	80037e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	61da      	str	r2, [r3, #28]
 80037d6:	e005      	b.n	80037e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f009 f85a 	bl	800c8b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	431a      	orrs	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	431a      	orrs	r2, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003868:	ea42 0103 	orr.w	r1, r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0104 	and.w	r1, r3, #4
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388a:	f003 0210 	and.w	r2, r3, #16
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b088      	sub	sp, #32
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	4613      	mov	r3, r2
 80038cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038ce:	f7fd fc5d 	bl	800118c <HAL_GetTick>
 80038d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038d4:	88fb      	ldrh	r3, [r7, #6]
 80038d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038e4:	2302      	movs	r3, #2
 80038e6:	e12a      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <HAL_SPI_Transmit+0x36>
 80038ee:	88fb      	ldrh	r3, [r7, #6]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e122      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d101      	bne.n	8003906 <HAL_SPI_Transmit+0x48>
 8003902:	2302      	movs	r3, #2
 8003904:	e11b      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2203      	movs	r2, #3
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	88fa      	ldrh	r2, [r7, #6]
 8003926:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2200      	movs	r2, #0
 8003944:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003954:	d10f      	bne.n	8003976 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003964:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003974:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003980:	2b40      	cmp	r3, #64	@ 0x40
 8003982:	d007      	beq.n	8003994 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003992:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800399c:	d152      	bne.n	8003a44 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d002      	beq.n	80039ac <HAL_SPI_Transmit+0xee>
 80039a6:	8b7b      	ldrh	r3, [r7, #26]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d145      	bne.n	8003a38 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b0:	881a      	ldrh	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039bc:	1c9a      	adds	r2, r3, #2
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039d0:	e032      	b.n	8003a38 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d112      	bne.n	8003a06 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a04:	e018      	b.n	8003a38 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a06:	f7fd fbc1 	bl	800118c <HAL_GetTick>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	1ad3      	subs	r3, r2, r3
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d803      	bhi.n	8003a1e <HAL_SPI_Transmit+0x160>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1c:	d102      	bne.n	8003a24 <HAL_SPI_Transmit+0x166>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d109      	bne.n	8003a38 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e082      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1c7      	bne.n	80039d2 <HAL_SPI_Transmit+0x114>
 8003a42:	e053      	b.n	8003aec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_SPI_Transmit+0x194>
 8003a4c:	8b7b      	ldrh	r3, [r7, #26]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d147      	bne.n	8003ae2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	7812      	ldrb	r2, [r2, #0]
 8003a5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a64:	1c5a      	adds	r2, r3, #1
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a78:	e033      	b.n	8003ae2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d113      	bne.n	8003ab0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	330c      	adds	r3, #12
 8003a92:	7812      	ldrb	r2, [r2, #0]
 8003a94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003aae:	e018      	b.n	8003ae2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab0:	f7fd fb6c 	bl	800118c <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d803      	bhi.n	8003ac8 <HAL_SPI_Transmit+0x20a>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d102      	bne.n	8003ace <HAL_SPI_Transmit+0x210>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d109      	bne.n	8003ae2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e02d      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1c6      	bne.n	8003a7a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	6839      	ldr	r1, [r7, #0]
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fceb 	bl	80044cc <SPI_EndRxTxTransaction>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2220      	movs	r2, #32
 8003b00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10a      	bne.n	8003b20 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	617b      	str	r3, [r7, #20]
 8003b1e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e000      	b.n	8003b3e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
  }
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b088      	sub	sp, #32
 8003b4a:	af02      	add	r7, sp, #8
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d001      	beq.n	8003b66 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003b62:	2302      	movs	r3, #2
 8003b64:	e104      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b6e:	d112      	bne.n	8003b96 <HAL_SPI_Receive+0x50>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10e      	bne.n	8003b96 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2204      	movs	r2, #4
 8003b7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003b80:	88fa      	ldrh	r2, [r7, #6]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8f3 	bl	8003d78 <HAL_SPI_TransmitReceive>
 8003b92:	4603      	mov	r3, r0
 8003b94:	e0ec      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b96:	f7fd faf9 	bl	800118c <HAL_GetTick>
 8003b9a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <HAL_SPI_Receive+0x62>
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0e1      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d101      	bne.n	8003bba <HAL_SPI_Receive+0x74>
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	e0da      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2204      	movs	r2, #4
 8003bc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	88fa      	ldrh	r2, [r7, #6]
 8003bda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	88fa      	ldrh	r2, [r7, #6]
 8003be0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c08:	d10f      	bne.n	8003c2a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003c28:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b40      	cmp	r3, #64	@ 0x40
 8003c36:	d007      	beq.n	8003c48 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c46:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d170      	bne.n	8003d32 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003c50:	e035      	b.n	8003cbe <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0301 	and.w	r3, r3, #1
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d115      	bne.n	8003c8c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f103 020c 	add.w	r2, r3, #12
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c8a:	e018      	b.n	8003cbe <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8c:	f7fd fa7e 	bl	800118c <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_Receive+0x15e>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_Receive+0x164>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e058      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1c4      	bne.n	8003c52 <HAL_SPI_Receive+0x10c>
 8003cc8:	e038      	b.n	8003d3c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d113      	bne.n	8003d00 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cea:	1c9a      	adds	r2, r3, #2
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003cfe:	e018      	b.n	8003d32 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d00:	f7fd fa44 	bl	800118c <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d803      	bhi.n	8003d18 <HAL_SPI_Receive+0x1d2>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d102      	bne.n	8003d1e <HAL_SPI_Receive+0x1d8>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d109      	bne.n	8003d32 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e01e      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1c6      	bne.n	8003cca <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	6839      	ldr	r1, [r7, #0]
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f000 fb5d 	bl	8004400 <SPI_EndRxTransaction>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d002      	beq.n	8003d52 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e000      	b.n	8003d70 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
  }
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3718      	adds	r7, #24
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	@ 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
 8003d84:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003d86:	2301      	movs	r3, #1
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d8a:	f7fd f9ff 	bl	800118c <HAL_GetTick>
 8003d8e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003d96:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003d9e:	887b      	ldrh	r3, [r7, #2]
 8003da0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003da2:	7ffb      	ldrb	r3, [r7, #31]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d00c      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x4a>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dae:	d106      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <HAL_SPI_TransmitReceive+0x46>
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b04      	cmp	r3, #4
 8003dbc:	d001      	beq.n	8003dc2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e17f      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x5c>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SPI_TransmitReceive+0x5c>
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e174      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_SPI_TransmitReceive+0x6e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e16d      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d003      	beq.n	8003e02 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2205      	movs	r2, #5
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	887a      	ldrh	r2, [r7, #2]
 8003e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	887a      	ldrh	r2, [r7, #2]
 8003e18:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	68ba      	ldr	r2, [r7, #8]
 8003e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	887a      	ldrh	r2, [r7, #2]
 8003e2a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d007      	beq.n	8003e56 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5e:	d17e      	bne.n	8003f5e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_SPI_TransmitReceive+0xf6>
 8003e68:	8afb      	ldrh	r3, [r7, #22]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d16c      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e92:	e059      	b.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d11b      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x162>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d016      	beq.n	8003eda <HAL_SPI_TransmitReceive+0x162>
 8003eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d113      	bne.n	8003eda <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb6:	881a      	ldrh	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d119      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x1a4>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d014      	beq.n	8003f1c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68da      	ldr	r2, [r3, #12]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efc:	b292      	uxth	r2, r2
 8003efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f04:	1c9a      	adds	r2, r3, #2
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003f1c:	f7fd f936 	bl	800118c <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d80d      	bhi.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
 8003f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f32:	d009      	beq.n	8003f48 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e0bc      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1a0      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x11c>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d19b      	bne.n	8003e94 <HAL_SPI_TransmitReceive+0x11c>
 8003f5c:	e082      	b.n	8004064 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_TransmitReceive+0x1f4>
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d171      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	330c      	adds	r3, #12
 8003f76:	7812      	ldrb	r2, [r2, #0]
 8003f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f92:	e05d      	b.n	8004050 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d11c      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x264>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d017      	beq.n	8003fdc <HAL_SPI_TransmitReceive+0x264>
 8003fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d114      	bne.n	8003fdc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	330c      	adds	r3, #12
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d119      	bne.n	800401e <HAL_SPI_TransmitReceive+0x2a6>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d014      	beq.n	800401e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004010:	b29b      	uxth	r3, r3
 8004012:	3b01      	subs	r3, #1
 8004014:	b29a      	uxth	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800401a:	2301      	movs	r3, #1
 800401c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800401e:	f7fd f8b5 	bl	800118c <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800402a:	429a      	cmp	r2, r3
 800402c:	d803      	bhi.n	8004036 <HAL_SPI_TransmitReceive+0x2be>
 800402e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d102      	bne.n	800403c <HAL_SPI_TransmitReceive+0x2c4>
 8004036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004038:	2b00      	cmp	r3, #0
 800403a:	d109      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e038      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004054:	b29b      	uxth	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d19c      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x21c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800405e:	b29b      	uxth	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d197      	bne.n	8003f94 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004064:	6a3a      	ldr	r2, [r7, #32]
 8004066:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fa2f 	bl	80044cc <SPI_EndRxTxTransaction>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e01d      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800408e:	2300      	movs	r3, #0
 8004090:	613b      	str	r3, [r7, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	613b      	str	r3, [r7, #16]
 80040a2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d001      	beq.n	80040c0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80040c0:	2300      	movs	r3, #0
  }
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	@ 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
	...

080040cc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10e      	bne.n	800410c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d009      	beq.n	800410c <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d004      	beq.n	800410c <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
    return;
 800410a:	e0ce      	b.n	80042aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <HAL_SPI_IRQHandler+0x5e>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	4798      	blx	r3
    return;
 8004128:	e0bf      	b.n	80042aa <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <HAL_SPI_IRQHandler+0x7e>
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d105      	bne.n	800414a <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 80b0 	beq.w	80042aa <HAL_SPI_IRQHandler+0x1de>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80aa 	beq.w	80042aa <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d023      	beq.n	80041a8 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b03      	cmp	r3, #3
 800416a:	d011      	beq.n	8004190 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0204 	orr.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	617b      	str	r3, [r7, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	e00b      	b.n	80041a8 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004190:	2300      	movs	r3, #0
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	613b      	str	r3, [r7, #16]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
        return;
 80041a6:	e080      	b.n	80042aa <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d014      	beq.n	80041dc <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b6:	f043 0201 	orr.w	r2, r3, #1
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00c      	beq.n	8004200 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ea:	f043 0208 	orr.w	r2, r3, #8
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004204:	2b00      	cmp	r3, #0
 8004206:	d04f      	beq.n	80042a8 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004216:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d104      	bne.n	8004234 <HAL_SPI_IRQHandler+0x168>
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	d034      	beq.n	800429e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0203 	bic.w	r2, r2, #3
 8004242:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004248:	2b00      	cmp	r3, #0
 800424a:	d011      	beq.n	8004270 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004250:	4a17      	ldr	r2, [pc, #92]	@ (80042b0 <HAL_SPI_IRQHandler+0x1e4>)
 8004252:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd f98b 	bl	8001574 <HAL_DMA_Abort_IT>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d005      	beq.n	8004270 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004268:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004274:	2b00      	cmp	r3, #0
 8004276:	d016      	beq.n	80042a6 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427c:	4a0c      	ldr	r2, [pc, #48]	@ (80042b0 <HAL_SPI_IRQHandler+0x1e4>)
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd f975 	bl	8001574 <HAL_DMA_Abort_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00a      	beq.n	80042a6 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004294:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 800429c:	e003      	b.n	80042a6 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f808 	bl	80042b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80042a4:	e000      	b.n	80042a8 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80042a6:	bf00      	nop
    return;
 80042a8:	bf00      	nop
  }
}
 80042aa:	3720      	adds	r7, #32
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	080042c9 	.word	0x080042c9

080042b4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b083      	sub	sp, #12
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff ffe6 	bl	80042b4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004300:	f7fc ff44 	bl	800118c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	4413      	add	r3, r2
 800430e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004310:	f7fc ff3c 	bl	800118c <HAL_GetTick>
 8004314:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004316:	4b39      	ldr	r3, [pc, #228]	@ (80043fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	015b      	lsls	r3, r3, #5
 800431c:	0d1b      	lsrs	r3, r3, #20
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	fb02 f303 	mul.w	r3, r2, r3
 8004324:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004326:	e054      	b.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432e:	d050      	beq.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004330:	f7fc ff2c 	bl	800118c <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	69fa      	ldr	r2, [r7, #28]
 800433c:	429a      	cmp	r2, r3
 800433e:	d902      	bls.n	8004346 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d13d      	bne.n	80043c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004354:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435e:	d111      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004368:	d004      	beq.n	8004374 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004372:	d107      	bne.n	8004384 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004382:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004388:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800438c:	d10f      	bne.n	80043ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e017      	b.n	80043f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	4013      	ands	r3, r2
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	429a      	cmp	r2, r3
 80043e0:	bf0c      	ite	eq
 80043e2:	2301      	moveq	r3, #1
 80043e4:	2300      	movne	r3, #0
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	461a      	mov	r2, r3
 80043ea:	79fb      	ldrb	r3, [r7, #7]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d19b      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20000000 	.word	0x20000000

08004400 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af02      	add	r7, sp, #8
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004414:	d111      	bne.n	800443a <SPI_EndRxTransaction+0x3a>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800441e:	d004      	beq.n	800442a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004428:	d107      	bne.n	800443a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004438:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004442:	d12a      	bne.n	800449a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800444c:	d012      	beq.n	8004474 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2200      	movs	r2, #0
 8004456:	2180      	movs	r1, #128	@ 0x80
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f7ff ff49 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02d      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e026      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2200      	movs	r2, #0
 800447c:	2101      	movs	r1, #1
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	f7ff ff36 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d01a      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e013      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2101      	movs	r1, #1
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff ff23 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d007      	beq.n	80044c0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	f043 0220 	orr.w	r2, r3, #32
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e000      	b.n	80044c2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
	...

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b088      	sub	sp, #32
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2201      	movs	r2, #1
 80044e0:	2102      	movs	r1, #2
 80044e2:	68f8      	ldr	r0, [r7, #12]
 80044e4:	f7ff ff04 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044f2:	f043 0220 	orr.w	r2, r3, #32
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e032      	b.n	8004564 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044fe:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <SPI_EndRxTxTransaction+0xa0>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1b      	ldr	r2, [pc, #108]	@ (8004570 <SPI_EndRxTxTransaction+0xa4>)
 8004504:	fba2 2303 	umull	r2, r3, r2, r3
 8004508:	0d5b      	lsrs	r3, r3, #21
 800450a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800451c:	d112      	bne.n	8004544 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	9300      	str	r3, [sp, #0]
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2200      	movs	r2, #0
 8004526:	2180      	movs	r1, #128	@ 0x80
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fee1 	bl	80042f0 <SPI_WaitFlagStateUntilTimeout>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d016      	beq.n	8004562 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004538:	f043 0220 	orr.w	r2, r3, #32
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e00f      	b.n	8004564 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d00a      	beq.n	8004560 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	3b01      	subs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455a:	2b80      	cmp	r3, #128	@ 0x80
 800455c:	d0f2      	beq.n	8004544 <SPI_EndRxTxTransaction+0x78>
 800455e:	e000      	b.n	8004562 <SPI_EndRxTxTransaction+0x96>
        break;
 8004560:	bf00      	nop
  }

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}
 800456c:	20000000 	.word	0x20000000
 8004570:	165e9f81 	.word	0x165e9f81

08004574 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e041      	b.n	800460a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f008 fd16 	bl	800cfcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f000 fc58 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
	...

08004614 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004614:	b480      	push	{r7}
 8004616:	b085      	sub	sp, #20
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b01      	cmp	r3, #1
 8004626:	d001      	beq.n	800462c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e04e      	b.n	80046ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2202      	movs	r2, #2
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	68da      	ldr	r2, [r3, #12]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a23      	ldr	r2, [pc, #140]	@ (80046d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004656:	d01d      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1f      	ldr	r2, [pc, #124]	@ (80046dc <HAL_TIM_Base_Start_IT+0xc8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1e      	ldr	r2, [pc, #120]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1b      	ldr	r2, [pc, #108]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <HAL_TIM_Base_Start_IT+0xd8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_Base_Start_IT+0x80>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d111      	bne.n	80046b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b06      	cmp	r3, #6
 80046a4:	d010      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f042 0201 	orr.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b6:	e007      	b.n	80046c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f042 0201 	orr.w	r2, r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40010000 	.word	0x40010000
 80046dc:	40000400 	.word	0x40000400
 80046e0:	40000800 	.word	0x40000800
 80046e4:	40000c00 	.word	0x40000c00
 80046e8:	40010400 	.word	0x40010400
 80046ec:	40014000 	.word	0x40014000
 80046f0:	40001800 	.word	0x40001800

080046f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b082      	sub	sp, #8
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e041      	b.n	800478a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f008 fa72 	bl	800cc04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4619      	mov	r1, r3
 8004732:	4610      	mov	r0, r2
 8004734:	f000 fb98 	bl	8004e68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
	...

08004794 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d109      	bne.n	80047b8 <HAL_TIM_PWM_Start+0x24>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	bf14      	ite	ne
 80047b0:	2301      	movne	r3, #1
 80047b2:	2300      	moveq	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e022      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d109      	bne.n	80047d2 <HAL_TIM_PWM_Start+0x3e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	bf14      	ite	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	2300      	moveq	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	e015      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d109      	bne.n	80047ec <HAL_TIM_PWM_Start+0x58>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	bf14      	ite	ne
 80047e4:	2301      	movne	r3, #1
 80047e6:	2300      	moveq	r3, #0
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	e008      	b.n	80047fe <HAL_TIM_PWM_Start+0x6a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	bf14      	ite	ne
 80047f8:	2301      	movne	r3, #1
 80047fa:	2300      	moveq	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07c      	b.n	8004900 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d104      	bne.n	8004816 <HAL_TIM_PWM_Start+0x82>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2202      	movs	r2, #2
 8004810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004814:	e013      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b04      	cmp	r3, #4
 800481a:	d104      	bne.n	8004826 <HAL_TIM_PWM_Start+0x92>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2202      	movs	r2, #2
 8004820:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004824:	e00b      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	2b08      	cmp	r3, #8
 800482a:	d104      	bne.n	8004836 <HAL_TIM_PWM_Start+0xa2>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2202      	movs	r2, #2
 8004830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004834:	e003      	b.n	800483e <HAL_TIM_PWM_Start+0xaa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	2201      	movs	r2, #1
 8004844:	6839      	ldr	r1, [r7, #0]
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fe04 	bl	8005454 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a2d      	ldr	r2, [pc, #180]	@ (8004908 <HAL_TIM_PWM_Start+0x174>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d004      	beq.n	8004860 <HAL_TIM_PWM_Start+0xcc>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a2c      	ldr	r2, [pc, #176]	@ (800490c <HAL_TIM_PWM_Start+0x178>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d101      	bne.n	8004864 <HAL_TIM_PWM_Start+0xd0>
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_TIM_PWM_Start+0xd2>
 8004864:	2300      	movs	r3, #0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004878:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a22      	ldr	r2, [pc, #136]	@ (8004908 <HAL_TIM_PWM_Start+0x174>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d022      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800488c:	d01d      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <HAL_TIM_PWM_Start+0x17c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d018      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1d      	ldr	r2, [pc, #116]	@ (8004914 <HAL_TIM_PWM_Start+0x180>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <HAL_TIM_PWM_Start+0x184>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00e      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a16      	ldr	r2, [pc, #88]	@ (800490c <HAL_TIM_PWM_Start+0x178>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d009      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a18      	ldr	r2, [pc, #96]	@ (800491c <HAL_TIM_PWM_Start+0x188>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d004      	beq.n	80048ca <HAL_TIM_PWM_Start+0x136>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a16      	ldr	r2, [pc, #88]	@ (8004920 <HAL_TIM_PWM_Start+0x18c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d111      	bne.n	80048ee <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2b06      	cmp	r3, #6
 80048da:	d010      	beq.n	80048fe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048ec:	e007      	b.n	80048fe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40010000 	.word	0x40010000
 800490c:	40010400 	.word	0x40010400
 8004910:	40000400 	.word	0x40000400
 8004914:	40000800 	.word	0x40000800
 8004918:	40000c00 	.word	0x40000c00
 800491c:	40014000 	.word	0x40014000
 8004920:	40001800 	.word	0x40001800

08004924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d020      	beq.n	8004988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01b      	beq.n	8004988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f06f 0202 	mvn.w	r2, #2
 8004958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 fa5b 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004974:	e005      	b.n	8004982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 fa4d 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fa5e 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d020      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01b      	beq.n	80049d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0204 	mvn.w	r2, #4
 80049a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2202      	movs	r2, #2
 80049aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa35 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa27 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fa38 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d020      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0308 	and.w	r3, r3, #8
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d01b      	beq.n	8004a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0208 	mvn.w	r2, #8
 80049f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2204      	movs	r2, #4
 80049f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	f003 0303 	and.w	r3, r3, #3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa0f 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004a0c:	e005      	b.n	8004a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa01 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fa12 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d020      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d01b      	beq.n	8004a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0210 	mvn.w	r2, #16
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2208      	movs	r2, #8
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f9e9 	bl	8004e2a <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9db 	bl	8004e16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 f9ec 	bl	8004e3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00c      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f003 0301 	and.w	r3, r3, #1
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d007      	beq.n	8004a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0201 	mvn.w	r2, #1
 8004a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f004 fb60 	bl	8009150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00c      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fd7c 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00c      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d007      	beq.n	8004ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f9bd 	bl	8004e52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00c      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f003 0320 	and.w	r3, r3, #32
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0220 	mvn.w	r2, #32
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fd4e 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b10:	2300      	movs	r3, #0
 8004b12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e0ae      	b.n	8004c80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	f200 809f 	bhi.w	8004c70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004b32:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004c71 	.word	0x08004c71
 8004b40:	08004c71 	.word	0x08004c71
 8004b44:	08004c71 	.word	0x08004c71
 8004b48:	08004bad 	.word	0x08004bad
 8004b4c:	08004c71 	.word	0x08004c71
 8004b50:	08004c71 	.word	0x08004c71
 8004b54:	08004c71 	.word	0x08004c71
 8004b58:	08004bef 	.word	0x08004bef
 8004b5c:	08004c71 	.word	0x08004c71
 8004b60:	08004c71 	.word	0x08004c71
 8004b64:	08004c71 	.word	0x08004c71
 8004b68:	08004c2f 	.word	0x08004c2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fa24 	bl	8004fc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 0208 	orr.w	r2, r2, #8
 8004b86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699a      	ldr	r2, [r3, #24]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0204 	bic.w	r2, r2, #4
 8004b96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	6999      	ldr	r1, [r3, #24]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	619a      	str	r2, [r3, #24]
      break;
 8004baa:	e064      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa74 	bl	80050a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6999      	ldr	r1, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	021a      	lsls	r2, r3, #8
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]
      break;
 8004bec:	e043      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fac9 	bl	800518c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0208 	orr.w	r2, r2, #8
 8004c08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69da      	ldr	r2, [r3, #28]
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0204 	bic.w	r2, r2, #4
 8004c18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	61da      	str	r2, [r3, #28]
      break;
 8004c2c:	e023      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fb1d 	bl	8005274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	021a      	lsls	r2, r3, #8
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	61da      	str	r2, [r3, #28]
      break;
 8004c6e:	e002      	b.n	8004c76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
      break;
 8004c74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_TIM_ConfigClockSource+0x1c>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e0b4      	b.n	8004e0e <HAL_TIM_ConfigClockSource+0x186>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cdc:	d03e      	beq.n	8004d5c <HAL_TIM_ConfigClockSource+0xd4>
 8004cde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ce2:	f200 8087 	bhi.w	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cea:	f000 8086 	beq.w	8004dfa <HAL_TIM_ConfigClockSource+0x172>
 8004cee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf2:	d87f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf4:	2b70      	cmp	r3, #112	@ 0x70
 8004cf6:	d01a      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0xa6>
 8004cf8:	2b70      	cmp	r3, #112	@ 0x70
 8004cfa:	d87b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004cfc:	2b60      	cmp	r3, #96	@ 0x60
 8004cfe:	d050      	beq.n	8004da2 <HAL_TIM_ConfigClockSource+0x11a>
 8004d00:	2b60      	cmp	r3, #96	@ 0x60
 8004d02:	d877      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d04:	2b50      	cmp	r3, #80	@ 0x50
 8004d06:	d03c      	beq.n	8004d82 <HAL_TIM_ConfigClockSource+0xfa>
 8004d08:	2b50      	cmp	r3, #80	@ 0x50
 8004d0a:	d873      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d058      	beq.n	8004dc2 <HAL_TIM_ConfigClockSource+0x13a>
 8004d10:	2b40      	cmp	r3, #64	@ 0x40
 8004d12:	d86f      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d14:	2b30      	cmp	r3, #48	@ 0x30
 8004d16:	d064      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d18:	2b30      	cmp	r3, #48	@ 0x30
 8004d1a:	d86b      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	d060      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d867      	bhi.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d05c      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d28:	2b10      	cmp	r3, #16
 8004d2a:	d05a      	beq.n	8004de2 <HAL_TIM_ConfigClockSource+0x15a>
 8004d2c:	e062      	b.n	8004df4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d3e:	f000 fb69 	bl	8005414 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004d50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	609a      	str	r2, [r3, #8]
      break;
 8004d5a:	e04f      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	f000 fb52 	bl	8005414 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d7e:	609a      	str	r2, [r3, #8]
      break;
 8004d80:	e03c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	461a      	mov	r2, r3
 8004d90:	f000 fac6 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2150      	movs	r1, #80	@ 0x50
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fb1f 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004da0:	e02c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dae:	461a      	mov	r2, r3
 8004db0:	f000 fae5 	bl	800537e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2160      	movs	r1, #96	@ 0x60
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fb0f 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004dc0:	e01c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dce:	461a      	mov	r2, r3
 8004dd0:	f000 faa6 	bl	8005320 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	@ 0x40
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 faff 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004de0:	e00c      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4619      	mov	r1, r3
 8004dec:	4610      	mov	r0, r2
 8004dee:	f000 faf6 	bl	80053de <TIM_ITRx_SetConfig>
      break;
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
      break;
 8004df8:	e000      	b.n	8004dfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3710      	adds	r7, #16
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e3e:	b480      	push	{r7}
 8004e40:	b083      	sub	sp, #12
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e46:	bf00      	nop
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a46      	ldr	r2, [pc, #280]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d013      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d00f      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a43      	ldr	r2, [pc, #268]	@ (8004f98 <TIM_Base_SetConfig+0x130>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a42      	ldr	r2, [pc, #264]	@ (8004f9c <TIM_Base_SetConfig+0x134>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a41      	ldr	r2, [pc, #260]	@ (8004fa0 <TIM_Base_SetConfig+0x138>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0x40>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a40      	ldr	r2, [pc, #256]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a35      	ldr	r2, [pc, #212]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d02b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec8:	d027      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a32      	ldr	r2, [pc, #200]	@ (8004f98 <TIM_Base_SetConfig+0x130>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d023      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a31      	ldr	r2, [pc, #196]	@ (8004f9c <TIM_Base_SetConfig+0x134>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d01f      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a30      	ldr	r2, [pc, #192]	@ (8004fa0 <TIM_Base_SetConfig+0x138>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a2f      	ldr	r2, [pc, #188]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d017      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a2e      	ldr	r2, [pc, #184]	@ (8004fa8 <TIM_Base_SetConfig+0x140>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8004fac <TIM_Base_SetConfig+0x144>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d00f      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a2c      	ldr	r2, [pc, #176]	@ (8004fb0 <TIM_Base_SetConfig+0x148>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00b      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a2b      	ldr	r2, [pc, #172]	@ (8004fb4 <TIM_Base_SetConfig+0x14c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <TIM_Base_SetConfig+0x150>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <TIM_Base_SetConfig+0xb2>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a29      	ldr	r2, [pc, #164]	@ (8004fbc <TIM_Base_SetConfig+0x154>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d108      	bne.n	8004f2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a10      	ldr	r2, [pc, #64]	@ (8004f94 <TIM_Base_SetConfig+0x12c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d003      	beq.n	8004f60 <TIM_Base_SetConfig+0xf8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <TIM_Base_SetConfig+0x13c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d103      	bne.n	8004f68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	691a      	ldr	r2, [r3, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d105      	bne.n	8004f86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	691b      	ldr	r3, [r3, #16]
 8004f7e:	f023 0201 	bic.w	r2, r3, #1
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	611a      	str	r2, [r3, #16]
  }
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40010000 	.word	0x40010000
 8004f98:	40000400 	.word	0x40000400
 8004f9c:	40000800 	.word	0x40000800
 8004fa0:	40000c00 	.word	0x40000c00
 8004fa4:	40010400 	.word	0x40010400
 8004fa8:	40014000 	.word	0x40014000
 8004fac:	40014400 	.word	0x40014400
 8004fb0:	40014800 	.word	0x40014800
 8004fb4:	40001800 	.word	0x40001800
 8004fb8:	40001c00 	.word	0x40001c00
 8004fbc:	40002000 	.word	0x40002000

08004fc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a1b      	ldr	r3, [r3, #32]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	f023 0201 	bic.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0303 	bic.w	r3, r3, #3
 8004ff6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f023 0302 	bic.w	r3, r3, #2
 8005008:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	697a      	ldr	r2, [r7, #20]
 8005010:	4313      	orrs	r3, r2
 8005012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a20      	ldr	r2, [pc, #128]	@ (8005098 <TIM_OC1_SetConfig+0xd8>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d003      	beq.n	8005024 <TIM_OC1_SetConfig+0x64>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1f      	ldr	r2, [pc, #124]	@ (800509c <TIM_OC1_SetConfig+0xdc>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d10c      	bne.n	800503e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0308 	bic.w	r3, r3, #8
 800502a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a15      	ldr	r2, [pc, #84]	@ (8005098 <TIM_OC1_SetConfig+0xd8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_OC1_SetConfig+0x8e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a14      	ldr	r2, [pc, #80]	@ (800509c <TIM_OC1_SetConfig+0xdc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d111      	bne.n	8005072 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800505c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	621a      	str	r2, [r3, #32]
}
 800508c:	bf00      	nop
 800508e:	371c      	adds	r7, #28
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	40010000 	.word	0x40010000
 800509c:	40010400 	.word	0x40010400

080050a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b087      	sub	sp, #28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a1b      	ldr	r3, [r3, #32]
 80050b4:	f023 0210 	bic.w	r2, r3, #16
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	021b      	lsls	r3, r3, #8
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0320 	bic.w	r3, r3, #32
 80050ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a22      	ldr	r2, [pc, #136]	@ (8005184 <TIM_OC2_SetConfig+0xe4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d003      	beq.n	8005108 <TIM_OC2_SetConfig+0x68>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a21      	ldr	r2, [pc, #132]	@ (8005188 <TIM_OC2_SetConfig+0xe8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d10d      	bne.n	8005124 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800510e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005122:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a17      	ldr	r2, [pc, #92]	@ (8005184 <TIM_OC2_SetConfig+0xe4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d003      	beq.n	8005134 <TIM_OC2_SetConfig+0x94>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a16      	ldr	r2, [pc, #88]	@ (8005188 <TIM_OC2_SetConfig+0xe8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d113      	bne.n	800515c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800513a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005142:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	009b      	lsls	r3, r3, #2
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	621a      	str	r2, [r3, #32]
}
 8005176:	bf00      	nop
 8005178:	371c      	adds	r7, #28
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40010400 	.word	0x40010400

0800518c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0303 	bic.w	r3, r3, #3
 80051c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80051d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	4313      	orrs	r3, r2
 80051e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a21      	ldr	r2, [pc, #132]	@ (800526c <TIM_OC3_SetConfig+0xe0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_OC3_SetConfig+0x66>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a20      	ldr	r2, [pc, #128]	@ (8005270 <TIM_OC3_SetConfig+0xe4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d10d      	bne.n	800520e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	021b      	lsls	r3, r3, #8
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	4313      	orrs	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800520c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a16      	ldr	r2, [pc, #88]	@ (800526c <TIM_OC3_SetConfig+0xe0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_OC3_SetConfig+0x92>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <TIM_OC3_SetConfig+0xe4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d113      	bne.n	8005246 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	011b      	lsls	r3, r3, #4
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	621a      	str	r2, [r3, #32]
}
 8005260:	bf00      	nop
 8005262:	371c      	adds	r7, #28
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	40010000 	.word	0x40010000
 8005270:	40010400 	.word	0x40010400

08005274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69db      	ldr	r3, [r3, #28]
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	031b      	lsls	r3, r3, #12
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a12      	ldr	r2, [pc, #72]	@ (8005318 <TIM_OC4_SetConfig+0xa4>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d003      	beq.n	80052dc <TIM_OC4_SetConfig+0x68>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a11      	ldr	r2, [pc, #68]	@ (800531c <TIM_OC4_SetConfig+0xa8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d109      	bne.n	80052f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685a      	ldr	r2, [r3, #4]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	40010000 	.word	0x40010000
 800531c:	40010400 	.word	0x40010400

08005320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	f023 0201 	bic.w	r2, r3, #1
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800534a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f023 030a 	bic.w	r3, r3, #10
 800535c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	4313      	orrs	r3, r2
 8005364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800537e:	b480      	push	{r7}
 8005380:	b087      	sub	sp, #28
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0210 	bic.w	r2, r3, #16
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80053a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f043 0307 	orr.w	r3, r3, #7
 8005400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	609a      	str	r2, [r3, #8]
}
 8005408:	bf00      	nop
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800542e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	021a      	lsls	r2, r3, #8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	431a      	orrs	r2, r3
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4313      	orrs	r3, r2
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	bf00      	nop
 800544a:	371c      	adds	r7, #28
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	f003 031f 	and.w	r3, r3, #31
 8005466:	2201      	movs	r2, #1
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1a      	ldr	r2, [r3, #32]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	43db      	mvns	r3, r3
 8005476:	401a      	ands	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1a      	ldr	r2, [r3, #32]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 031f 	and.w	r3, r3, #31
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	fa01 f303 	lsl.w	r3, r1, r3
 800548c:	431a      	orrs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	621a      	str	r2, [r3, #32]
}
 8005492:	bf00      	nop
 8005494:	371c      	adds	r7, #28
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
	...

080054a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054b4:	2302      	movs	r3, #2
 80054b6:	e05a      	b.n	800556e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	@ (800557c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d022      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005504:	d01d      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1d      	ldr	r2, [pc, #116]	@ (8005580 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d018      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1b      	ldr	r2, [pc, #108]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d013      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1a      	ldr	r2, [pc, #104]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d00e      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d009      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a17      	ldr	r2, [pc, #92]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d004      	beq.n	8005542 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a15      	ldr	r2, [pc, #84]	@ (8005594 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d10c      	bne.n	800555c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005548:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	4313      	orrs	r3, r2
 8005552:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40010000 	.word	0x40010000
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00
 800558c:	40010400 	.word	0x40010400
 8005590:	40014000 	.word	0x40014000
 8005594:	40001800 	.word	0x40001800

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e042      	b.n	8005658 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f007 fd42 	bl	800d070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2224      	movs	r2, #36	@ 0x24
 80055f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005602:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f000 fa95 	bl	8005b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005618:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005628:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005638:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2220      	movs	r2, #32
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2220      	movs	r2, #32
 800564c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	d112      	bne.n	80056a0 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_UART_Receive_DMA+0x26>
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e00b      	b.n	80056a2 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2200      	movs	r2, #0
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	461a      	mov	r2, r3
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f926 	bl	80058e8 <UART_Start_Receive_DMA>
 800569c:	4603      	mov	r3, r0
 800569e:	e000      	b.n	80056a2 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056a0:	2302      	movs	r3, #2
  }
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056be:	b480      	push	{r7}
 80056c0:	b083      	sub	sp, #12
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056c6:	bf00      	nop
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056de:	bf00      	nop
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b09c      	sub	sp, #112	@ 0x70
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d172      	bne.n	80057ec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005708:	2200      	movs	r2, #0
 800570a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800570c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800571c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005722:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800572c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800572e:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005732:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800573a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e5      	bne.n	800570c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	f023 0301 	bic.w	r3, r3, #1
 8005756:	667b      	str	r3, [r7, #100]	@ 0x64
 8005758:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3314      	adds	r3, #20
 800575e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005760:	647a      	str	r2, [r7, #68]	@ 0x44
 8005762:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005764:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005766:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005768:	e841 2300 	strex	r3, r2, [r1]
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800576e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005770:	2b00      	cmp	r3, #0
 8005772:	d1e5      	bne.n	8005740 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005774:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3314      	adds	r3, #20
 800577a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577e:	e853 3f00 	ldrex	r3, [r3]
 8005782:	623b      	str	r3, [r7, #32]
   return(result);
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800578a:	663b      	str	r3, [r7, #96]	@ 0x60
 800578c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3314      	adds	r3, #20
 8005792:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005794:	633a      	str	r2, [r7, #48]	@ 0x30
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005798:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579c:	e841 2300 	strex	r3, r2, [r1]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d1e5      	bne.n	8005774 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d119      	bne.n	80057ec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	330c      	adds	r3, #12
 80057be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	e853 3f00 	ldrex	r3, [r3]
 80057c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80057d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80057d8:	61fa      	str	r2, [r7, #28]
 80057da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e5      	bne.n	80057b8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057ee:	2200      	movs	r2, #0
 80057f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d106      	bne.n	8005808 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80057fe:	4619      	mov	r1, r3
 8005800:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005802:	f7ff ff66 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005806:	e002      	b.n	800580e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005808:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800580a:	f003 fcc1 	bl	8009190 <HAL_UART_RxCpltCallback>
}
 800580e:	bf00      	nop
 8005810:	3770      	adds	r7, #112	@ 0x70
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005816:	b580      	push	{r7, lr}
 8005818:	b084      	sub	sp, #16
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2201      	movs	r2, #1
 8005828:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582e:	2b01      	cmp	r3, #1
 8005830:	d108      	bne.n	8005844 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005836:	085b      	lsrs	r3, r3, #1
 8005838:	b29b      	uxth	r3, r3
 800583a:	4619      	mov	r1, r3
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f7ff ff48 	bl	80056d2 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005842:	e002      	b.n	800584a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f7ff ff30 	bl	80056aa <HAL_UART_RxHalfCpltCallback>
}
 800584a:	bf00      	nop
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b084      	sub	sp, #16
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005862:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	695b      	ldr	r3, [r3, #20]
 800586a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800586e:	2b80      	cmp	r3, #128	@ 0x80
 8005870:	bf0c      	ite	eq
 8005872:	2301      	moveq	r3, #1
 8005874:	2300      	movne	r3, #0
 8005876:	b2db      	uxtb	r3, r3
 8005878:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b21      	cmp	r3, #33	@ 0x21
 8005884:	d108      	bne.n	8005898 <UART_DMAError+0x46>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2200      	movs	r2, #0
 8005890:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005892:	68b8      	ldr	r0, [r7, #8]
 8005894:	f000 f8c2 	bl	8005a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a2:	2b40      	cmp	r3, #64	@ 0x40
 80058a4:	bf0c      	ite	eq
 80058a6:	2301      	moveq	r3, #1
 80058a8:	2300      	movne	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b22      	cmp	r3, #34	@ 0x22
 80058b8:	d108      	bne.n	80058cc <UART_DMAError+0x7a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	2200      	movs	r2, #0
 80058c4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f000 f8d0 	bl	8005a6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d0:	f043 0210 	orr.w	r2, r3, #16
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d8:	68b8      	ldr	r0, [r7, #8]
 80058da:	f7ff fef0 	bl	80056be <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b098      	sub	sp, #96	@ 0x60
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	4613      	mov	r3, r2
 80058f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	88fa      	ldrh	r2, [r7, #6]
 8005900:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2222      	movs	r2, #34	@ 0x22
 800590c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	4a3e      	ldr	r2, [pc, #248]	@ (8005a10 <UART_Start_Receive_DMA+0x128>)
 8005916:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800591c:	4a3d      	ldr	r2, [pc, #244]	@ (8005a14 <UART_Start_Receive_DMA+0x12c>)
 800591e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005924:	4a3c      	ldr	r2, [pc, #240]	@ (8005a18 <UART_Start_Receive_DMA+0x130>)
 8005926:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	2200      	movs	r2, #0
 800592e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005930:	f107 0308 	add.w	r3, r7, #8
 8005934:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3304      	adds	r3, #4
 8005940:	4619      	mov	r1, r3
 8005942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	f7fb fdbc 	bl	80014c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	613b      	str	r3, [r7, #16]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d019      	beq.n	800599e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005974:	e853 3f00 	ldrex	r3, [r3]
 8005978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800597a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005980:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	330c      	adds	r3, #12
 8005988:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800598a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800598c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005992:	e841 2300 	strex	r3, r2, [r1]
 8005996:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800599a:	2b00      	cmp	r3, #0
 800599c:	d1e5      	bne.n	800596a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a8:	e853 3f00 	ldrex	r3, [r3]
 80059ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	3314      	adds	r3, #20
 80059bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059be:	63ba      	str	r2, [r7, #56]	@ 0x38
 80059c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059c6:	e841 2300 	strex	r3, r2, [r1]
 80059ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1e5      	bne.n	800599e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	617b      	str	r3, [r7, #20]
   return(result);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	3314      	adds	r3, #20
 80059f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80059f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6a39      	ldr	r1, [r7, #32]
 80059f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e5      	bne.n	80059d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3760      	adds	r7, #96	@ 0x60
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	080056eb 	.word	0x080056eb
 8005a14:	08005817 	.word	0x08005817
 8005a18:	08005853 	.word	0x08005853

08005a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b089      	sub	sp, #36	@ 0x24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a3a:	61fb      	str	r3, [r7, #28]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	330c      	adds	r3, #12
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	61ba      	str	r2, [r7, #24]
 8005a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6979      	ldr	r1, [r7, #20]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	613b      	str	r3, [r7, #16]
   return(result);
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e5      	bne.n	8005a24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a60:	bf00      	nop
 8005a62:	3724      	adds	r7, #36	@ 0x24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b095      	sub	sp, #84	@ 0x54
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a94:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	e853 3f00 	ldrex	r3, [r3]
 8005ab6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f023 0301 	bic.w	r3, r3, #1
 8005abe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ac8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ace:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ad0:	e841 2300 	strex	r3, r2, [r1]
 8005ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1e5      	bne.n	8005aa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d119      	bne.n	8005b18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f023 0310 	bic.w	r3, r3, #16
 8005afa:	647b      	str	r3, [r7, #68]	@ 0x44
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	330c      	adds	r3, #12
 8005b02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b04:	61ba      	str	r2, [r7, #24]
 8005b06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6979      	ldr	r1, [r7, #20]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	613b      	str	r3, [r7, #16]
   return(result);
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e5      	bne.n	8005ae4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2220      	movs	r2, #32
 8005b1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b26:	bf00      	nop
 8005b28:	3754      	adds	r7, #84	@ 0x54
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
	...

08005b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b38:	b0c0      	sub	sp, #256	@ 0x100
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b50:	68d9      	ldr	r1, [r3, #12]
 8005b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	ea40 0301 	orr.w	r3, r0, r1
 8005b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b62:	689a      	ldr	r2, [r3, #8]
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	431a      	orrs	r2, r3
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b8c:	f021 010c 	bic.w	r1, r1, #12
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b9a:	430b      	orrs	r3, r1
 8005b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	6999      	ldr	r1, [r3, #24]
 8005bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	ea40 0301 	orr.w	r3, r0, r1
 8005bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8005e00 <UART_SetConfig+0x2cc>)
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d005      	beq.n	8005bd4 <UART_SetConfig+0xa0>
 8005bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	4b8d      	ldr	r3, [pc, #564]	@ (8005e04 <UART_SetConfig+0x2d0>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d104      	bne.n	8005bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd4:	f7fd fdd6 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 8005bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bdc:	e003      	b.n	8005be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bde:	f7fd fdbd 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8005be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf0:	f040 810c 	bne.w	8005e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c06:	4622      	mov	r2, r4
 8005c08:	462b      	mov	r3, r5
 8005c0a:	1891      	adds	r1, r2, r2
 8005c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c0e:	415b      	adcs	r3, r3
 8005c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c16:	4621      	mov	r1, r4
 8005c18:	eb12 0801 	adds.w	r8, r2, r1
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	eb43 0901 	adc.w	r9, r3, r1
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c36:	4690      	mov	r8, r2
 8005c38:	4699      	mov	r9, r3
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	eb18 0303 	adds.w	r3, r8, r3
 8005c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c44:	462b      	mov	r3, r5
 8005c46:	eb49 0303 	adc.w	r3, r9, r3
 8005c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c62:	460b      	mov	r3, r1
 8005c64:	18db      	adds	r3, r3, r3
 8005c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c68:	4613      	mov	r3, r2
 8005c6a:	eb42 0303 	adc.w	r3, r2, r3
 8005c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c78:	f7fb f8ce 	bl	8000e18 <__aeabi_uldivmod>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4b61      	ldr	r3, [pc, #388]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005c82:	fba3 2302 	umull	r2, r3, r3, r2
 8005c86:	095b      	lsrs	r3, r3, #5
 8005c88:	011c      	lsls	r4, r3, #4
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cac:	4641      	mov	r1, r8
 8005cae:	eb12 0a01 	adds.w	sl, r2, r1
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ccc:	4692      	mov	sl, r2
 8005cce:	469b      	mov	fp, r3
 8005cd0:	4643      	mov	r3, r8
 8005cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8005cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cda:	464b      	mov	r3, r9
 8005cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8005ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	18db      	adds	r3, r3, r3
 8005cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005cfe:	4613      	mov	r3, r2
 8005d00:	eb42 0303 	adc.w	r3, r2, r3
 8005d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d0e:	f7fb f883 	bl	8000e18 <__aeabi_uldivmod>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4611      	mov	r1, r2
 8005d18:	4b3b      	ldr	r3, [pc, #236]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	2264      	movs	r2, #100	@ 0x64
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	1acb      	subs	r3, r1, r3
 8005d28:	00db      	lsls	r3, r3, #3
 8005d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d2e:	4b36      	ldr	r3, [pc, #216]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005d30:	fba3 2302 	umull	r2, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d3c:	441c      	add	r4, r3
 8005d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d50:	4642      	mov	r2, r8
 8005d52:	464b      	mov	r3, r9
 8005d54:	1891      	adds	r1, r2, r2
 8005d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d58:	415b      	adcs	r3, r3
 8005d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d60:	4641      	mov	r1, r8
 8005d62:	1851      	adds	r1, r2, r1
 8005d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d66:	4649      	mov	r1, r9
 8005d68:	414b      	adcs	r3, r1
 8005d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d6c:	f04f 0200 	mov.w	r2, #0
 8005d70:	f04f 0300 	mov.w	r3, #0
 8005d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d78:	4659      	mov	r1, fp
 8005d7a:	00cb      	lsls	r3, r1, #3
 8005d7c:	4651      	mov	r1, sl
 8005d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d82:	4651      	mov	r1, sl
 8005d84:	00ca      	lsls	r2, r1, #3
 8005d86:	4610      	mov	r0, r2
 8005d88:	4619      	mov	r1, r3
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	189b      	adds	r3, r3, r2
 8005d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d94:	464b      	mov	r3, r9
 8005d96:	460a      	mov	r2, r1
 8005d98:	eb42 0303 	adc.w	r3, r2, r3
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005db4:	460b      	mov	r3, r1
 8005db6:	18db      	adds	r3, r3, r3
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dba:	4613      	mov	r3, r2
 8005dbc:	eb42 0303 	adc.w	r3, r2, r3
 8005dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dca:	f7fb f825 	bl	8000e18 <__aeabi_uldivmod>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	460b      	mov	r3, r1
 8005dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd8:	095b      	lsrs	r3, r3, #5
 8005dda:	2164      	movs	r1, #100	@ 0x64
 8005ddc:	fb01 f303 	mul.w	r3, r1, r3
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	00db      	lsls	r3, r3, #3
 8005de4:	3332      	adds	r3, #50	@ 0x32
 8005de6:	4a08      	ldr	r2, [pc, #32]	@ (8005e08 <UART_SetConfig+0x2d4>)
 8005de8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 0207 	and.w	r2, r3, #7
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4422      	add	r2, r4
 8005dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dfc:	e106      	b.n	800600c <UART_SetConfig+0x4d8>
 8005dfe:	bf00      	nop
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40011400 	.word	0x40011400
 8005e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e10:	2200      	movs	r2, #0
 8005e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e1e:	4642      	mov	r2, r8
 8005e20:	464b      	mov	r3, r9
 8005e22:	1891      	adds	r1, r2, r2
 8005e24:	6239      	str	r1, [r7, #32]
 8005e26:	415b      	adcs	r3, r3
 8005e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e2e:	4641      	mov	r1, r8
 8005e30:	1854      	adds	r4, r2, r1
 8005e32:	4649      	mov	r1, r9
 8005e34:	eb43 0501 	adc.w	r5, r3, r1
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	00eb      	lsls	r3, r5, #3
 8005e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e46:	00e2      	lsls	r2, r4, #3
 8005e48:	4614      	mov	r4, r2
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	4643      	mov	r3, r8
 8005e4e:	18e3      	adds	r3, r4, r3
 8005e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e54:	464b      	mov	r3, r9
 8005e56:	eb45 0303 	adc.w	r3, r5, r3
 8005e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	f04f 0300 	mov.w	r3, #0
 8005e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	008b      	lsls	r3, r1, #2
 8005e7e:	4621      	mov	r1, r4
 8005e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e84:	4621      	mov	r1, r4
 8005e86:	008a      	lsls	r2, r1, #2
 8005e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e8c:	f7fa ffc4 	bl	8000e18 <__aeabi_uldivmod>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4b60      	ldr	r3, [pc, #384]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005e96:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	011c      	lsls	r4, r3, #4
 8005e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	61b9      	str	r1, [r7, #24]
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	61fb      	str	r3, [r7, #28]
 8005ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	1851      	adds	r1, r2, r1
 8005ec4:	6139      	str	r1, [r7, #16]
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	414b      	adcs	r3, r1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ed8:	4659      	mov	r1, fp
 8005eda:	00cb      	lsls	r3, r1, #3
 8005edc:	4651      	mov	r1, sl
 8005ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	00ca      	lsls	r2, r1, #3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4642      	mov	r2, r8
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ef4:	464b      	mov	r3, r9
 8005ef6:	460a      	mov	r2, r1
 8005ef8:	eb42 0303 	adc.w	r3, r2, r3
 8005efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f18:	4649      	mov	r1, r9
 8005f1a:	008b      	lsls	r3, r1, #2
 8005f1c:	4641      	mov	r1, r8
 8005f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f22:	4641      	mov	r1, r8
 8005f24:	008a      	lsls	r2, r1, #2
 8005f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f2a:	f7fa ff75 	bl	8000e18 <__aeabi_uldivmod>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4611      	mov	r1, r2
 8005f34:	4b38      	ldr	r3, [pc, #224]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005f36:	fba3 2301 	umull	r2, r3, r3, r1
 8005f3a:	095b      	lsrs	r3, r3, #5
 8005f3c:	2264      	movs	r2, #100	@ 0x64
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	1acb      	subs	r3, r1, r3
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	3332      	adds	r3, #50	@ 0x32
 8005f48:	4a33      	ldr	r2, [pc, #204]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f4e:	095b      	lsrs	r3, r3, #5
 8005f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f54:	441c      	add	r4, r3
 8005f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	1891      	adds	r1, r2, r2
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	415b      	adcs	r3, r3
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f74:	4641      	mov	r1, r8
 8005f76:	1851      	adds	r1, r2, r1
 8005f78:	6039      	str	r1, [r7, #0]
 8005f7a:	4649      	mov	r1, r9
 8005f7c:	414b      	adcs	r3, r1
 8005f7e:	607b      	str	r3, [r7, #4]
 8005f80:	f04f 0200 	mov.w	r2, #0
 8005f84:	f04f 0300 	mov.w	r3, #0
 8005f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f8c:	4659      	mov	r1, fp
 8005f8e:	00cb      	lsls	r3, r1, #3
 8005f90:	4651      	mov	r1, sl
 8005f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f96:	4651      	mov	r1, sl
 8005f98:	00ca      	lsls	r2, r1, #3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	460a      	mov	r2, r1
 8005faa:	eb42 0303 	adc.w	r3, r2, r3
 8005fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	f04f 0300 	mov.w	r3, #0
 8005fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fc8:	4649      	mov	r1, r9
 8005fca:	008b      	lsls	r3, r1, #2
 8005fcc:	4641      	mov	r1, r8
 8005fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd2:	4641      	mov	r1, r8
 8005fd4:	008a      	lsls	r2, r1, #2
 8005fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fda:	f7fa ff1d 	bl	8000e18 <__aeabi_uldivmod>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe8:	095b      	lsrs	r3, r3, #5
 8005fea:	2164      	movs	r1, #100	@ 0x64
 8005fec:	fb01 f303 	mul.w	r3, r1, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	011b      	lsls	r3, r3, #4
 8005ff4:	3332      	adds	r3, #50	@ 0x32
 8005ff6:	4a08      	ldr	r2, [pc, #32]	@ (8006018 <UART_SetConfig+0x4e4>)
 8005ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	f003 020f 	and.w	r2, r3, #15
 8006002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4422      	add	r2, r4
 800600a:	609a      	str	r2, [r3, #8]
}
 800600c:	bf00      	nop
 800600e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006012:	46bd      	mov	sp, r7
 8006014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006018:	51eb851f 	.word	0x51eb851f

0800601c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800601c:	b480      	push	{r7}
 800601e:	b083      	sub	sp, #12
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0208 	add.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f04f 32ff 	mov.w	r2, #4294967295
 8006034:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f103 0208 	add.w	r2, r3, #8
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f103 0208 	add.w	r2, r3, #8
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
 800607e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	601a      	str	r2, [r3, #0]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80060be:	b480      	push	{r7}
 80060c0:	b085      	sub	sp, #20
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
 80060c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d103      	bne.n	80060de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e00c      	b.n	80060f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3308      	adds	r3, #8
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e002      	b.n	80060ec <vListInsert+0x2e>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d2f6      	bcs.n	80060e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	683a      	ldr	r2, [r7, #0]
 8006112:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6892      	ldr	r2, [r2, #8]
 8006146:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	6852      	ldr	r2, [r2, #4]
 8006150:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d103      	bne.n	8006164 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	1e5a      	subs	r2, r3, #1
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr

08006184 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <xQueueGenericReset+0x20>
 8006198:	f240 120d 	movw	r2, #269	@ 0x10d
 800619c:	492a      	ldr	r1, [pc, #168]	@ (8006248 <xQueueGenericReset+0xc4>)
 800619e:	482b      	ldr	r0, [pc, #172]	@ (800624c <xQueueGenericReset+0xc8>)
 80061a0:	f00f fc96 	bl	8015ad0 <assertFail>

    taskENTER_CRITICAL();
 80061a4:	f002 fc62 	bl	8008a6c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b0:	68f9      	ldr	r1, [r7, #12]
 80061b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061b4:	fb01 f303 	mul.w	r3, r1, r3
 80061b8:	441a      	add	r2, r3
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061d4:	3b01      	subs	r3, #1
 80061d6:	68f9      	ldr	r1, [r7, #12]
 80061d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061da:	fb01 f303 	mul.w	r3, r1, r3
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	22ff      	movs	r2, #255	@ 0xff
 80061e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	22ff      	movs	r2, #255	@ 0xff
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d114      	bne.n	8006224 <xQueueGenericReset+0xa0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d01a      	beq.n	8006238 <xQueueGenericReset+0xb4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3310      	adds	r3, #16
 8006206:	4618      	mov	r0, r3
 8006208:	f001 fc1c 	bl	8007a44 <xTaskRemoveFromEventList>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d012      	beq.n	8006238 <xQueueGenericReset+0xb4>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8006212:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <xQueueGenericReset+0xcc>)
 8006214:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	e009      	b.n	8006238 <xQueueGenericReset+0xb4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	3310      	adds	r3, #16
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff fef7 	bl	800601c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3324      	adds	r3, #36	@ 0x24
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fef2 	bl	800601c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006238:	f002 fc46 	bl	8008ac8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800623c:	2301      	movs	r3, #1
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	0801dc90 	.word	0x0801dc90
 800624c:	0801dca4 	.word	0x0801dca4
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d105      	bne.n	8006274 <xQueueGenericCreateStatic+0x20>
 8006268:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 800626c:	4929      	ldr	r1, [pc, #164]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 800626e:	482a      	ldr	r0, [pc, #168]	@ (8006318 <xQueueGenericCreateStatic+0xc4>)
 8006270:	f00f fc2e 	bl	8015ad0 <assertFail>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d105      	bne.n	8006286 <xQueueGenericCreateStatic+0x32>
 800627a:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800627e:	4925      	ldr	r1, [pc, #148]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 8006280:	4826      	ldr	r0, [pc, #152]	@ (800631c <xQueueGenericCreateStatic+0xc8>)
 8006282:	f00f fc25 	bl	8015ad0 <assertFail>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <xQueueGenericCreateStatic+0x3e>
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <xQueueGenericCreateStatic+0x42>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueGenericCreateStatic+0x44>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d105      	bne.n	80062a8 <xQueueGenericCreateStatic+0x54>
 800629c:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80062a0:	491c      	ldr	r1, [pc, #112]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 80062a2:	481f      	ldr	r0, [pc, #124]	@ (8006320 <xQueueGenericCreateStatic+0xcc>)
 80062a4:	f00f fc14 	bl	8015ad0 <assertFail>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d102      	bne.n	80062b4 <xQueueGenericCreateStatic+0x60>
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <xQueueGenericCreateStatic+0x64>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <xQueueGenericCreateStatic+0x66>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <xQueueGenericCreateStatic+0x76>
 80062be:	f240 1251 	movw	r2, #337	@ 0x151
 80062c2:	4914      	ldr	r1, [pc, #80]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 80062c4:	4817      	ldr	r0, [pc, #92]	@ (8006324 <xQueueGenericCreateStatic+0xd0>)
 80062c6:	f00f fc03 	bl	8015ad0 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80062ca:	2350      	movs	r3, #80	@ 0x50
 80062cc:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Queue_t ) );
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	2b50      	cmp	r3, #80	@ 0x50
 80062d2:	d005      	beq.n	80062e0 <xQueueGenericCreateStatic+0x8c>
 80062d4:	f240 1259 	movw	r2, #345	@ 0x159
 80062d8:	490e      	ldr	r1, [pc, #56]	@ (8006314 <xQueueGenericCreateStatic+0xc0>)
 80062da:	4813      	ldr	r0, [pc, #76]	@ (8006328 <xQueueGenericCreateStatic+0xd4>)
 80062dc:	f00f fbf8 	bl	8015ad0 <assertFail>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062e0:	693b      	ldr	r3, [r7, #16]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	617b      	str	r3, [r7, #20]

        if( pxNewQueue != NULL )
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <xQueueGenericCreateStatic+0xb4>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062f4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	68b9      	ldr	r1, [r7, #8]
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f862 	bl	80063cc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006308:	697b      	ldr	r3, [r7, #20]
    }
 800630a:	4618      	mov	r0, r3
 800630c:	3718      	adds	r7, #24
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	0801dc90 	.word	0x0801dc90
 8006318:	0801dcac 	.word	0x0801dcac
 800631c:	0801dcd0 	.word	0x0801dcd0
 8006320:	0801dce8 	.word	0x0801dce8
 8006324:	0801dd20 	.word	0x0801dd20
 8006328:	0801dd58 	.word	0x0801dd58

0800632c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	@ 0x28
 8006330:	af02      	add	r7, sp, #8
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d105      	bne.n	800634c <xQueueGenericCreate+0x20>
 8006340:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8006344:	491e      	ldr	r1, [pc, #120]	@ (80063c0 <xQueueGenericCreate+0x94>)
 8006346:	481f      	ldr	r0, [pc, #124]	@ (80063c4 <xQueueGenericCreate+0x98>)
 8006348:	f00f fbc2 	bl	8015ad0 <assertFail>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	fb02 f303 	mul.w	r3, r2, r3
 8006354:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d006      	beq.n	800636a <xQueueGenericCreate+0x3e>
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	fbb2 f3f3 	udiv	r3, r2, r3
 8006364:	68fa      	ldr	r2, [r7, #12]
 8006366:	429a      	cmp	r2, r3
 8006368:	d101      	bne.n	800636e <xQueueGenericCreate+0x42>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericCreate+0x44>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <xQueueGenericCreate+0x54>
 8006374:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 8006378:	4911      	ldr	r1, [pc, #68]	@ (80063c0 <xQueueGenericCreate+0x94>)
 800637a:	4813      	ldr	r0, [pc, #76]	@ (80063c8 <xQueueGenericCreate+0x9c>)
 800637c:	f00f fba8 	bl	8015ad0 <assertFail>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	3350      	adds	r3, #80	@ 0x50
 8006384:	4618      	mov	r0, r3
 8006386:	f002 fc83 	bl	8008c90 <pvPortMalloc>
 800638a:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <xQueueGenericCreate+0x8a>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	3350      	adds	r3, #80	@ 0x50
 800639a:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063a4:	79fa      	ldrb	r2, [r7, #7]
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	68b9      	ldr	r1, [r7, #8]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f80b 	bl	80063cc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80063b6:	69bb      	ldr	r3, [r7, #24]
    }
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	0801dc90 	.word	0x0801dc90
 80063c4:	0801dcac 	.word	0x0801dcac
 80063c8:	0801dd74 	.word	0x0801dd74

080063cc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	69ba      	ldr	r2, [r7, #24]
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	e002      	b.n	80063ee <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80063ee:	69bb      	ldr	r3, [r7, #24]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063fa:	2101      	movs	r1, #1
 80063fc:	69b8      	ldr	r0, [r7, #24]
 80063fe:	f7ff fec1 	bl	8006184 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	78fa      	ldrb	r2, [r7, #3]
 8006406:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800640a:	bf00      	nop
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00e      	beq.n	800643e <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006432:	2300      	movs	r3, #0
 8006434:	2200      	movs	r2, #0
 8006436:	2100      	movs	r1, #0
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f81f 	bl	800647c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af02      	add	r7, sp, #8
 800644c:	4603      	mov	r3, r0
 800644e:	6039      	str	r1, [r7, #0]
 8006450:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	6978      	ldr	r0, [r7, #20]
 8006466:	f7ff fef5 	bl	8006254 <xQueueGenericCreateStatic>
 800646a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff ffd0 	bl	8006412 <prvInitialiseMutex>

        return xNewQueue;
 8006472:	68fb      	ldr	r3, [r7, #12]
    }
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b08a      	sub	sp, #40	@ 0x28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d105      	bne.n	80064a4 <xQueueGenericSend+0x28>
 8006498:	f240 3209 	movw	r2, #777	@ 0x309
 800649c:	4977      	ldr	r1, [pc, #476]	@ (800667c <xQueueGenericSend+0x200>)
 800649e:	4878      	ldr	r0, [pc, #480]	@ (8006680 <xQueueGenericSend+0x204>)
 80064a0:	f00f fb16 	bl	8015ad0 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d103      	bne.n	80064b2 <xQueueGenericSend+0x36>
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <xQueueGenericSend+0x3a>
 80064b2:	2301      	movs	r3, #1
 80064b4:	e000      	b.n	80064b8 <xQueueGenericSend+0x3c>
 80064b6:	2300      	movs	r3, #0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d105      	bne.n	80064c8 <xQueueGenericSend+0x4c>
 80064bc:	f240 320a 	movw	r2, #778	@ 0x30a
 80064c0:	496e      	ldr	r1, [pc, #440]	@ (800667c <xQueueGenericSend+0x200>)
 80064c2:	4870      	ldr	r0, [pc, #448]	@ (8006684 <xQueueGenericSend+0x208>)
 80064c4:	f00f fb04 	bl	8015ad0 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d103      	bne.n	80064d6 <xQueueGenericSend+0x5a>
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d101      	bne.n	80064da <xQueueGenericSend+0x5e>
 80064d6:	2301      	movs	r3, #1
 80064d8:	e000      	b.n	80064dc <xQueueGenericSend+0x60>
 80064da:	2300      	movs	r3, #0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <xQueueGenericSend+0x70>
 80064e0:	f240 320b 	movw	r2, #779	@ 0x30b
 80064e4:	4965      	ldr	r1, [pc, #404]	@ (800667c <xQueueGenericSend+0x200>)
 80064e6:	4868      	ldr	r0, [pc, #416]	@ (8006688 <xQueueGenericSend+0x20c>)
 80064e8:	f00f faf2 	bl	8015ad0 <assertFail>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064ec:	f001 fc52 	bl	8007d94 <xTaskGetSchedulerState>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d102      	bne.n	80064fc <xQueueGenericSend+0x80>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <xQueueGenericSend+0x84>
 80064fc:	2301      	movs	r3, #1
 80064fe:	e000      	b.n	8006502 <xQueueGenericSend+0x86>
 8006500:	2300      	movs	r3, #0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d105      	bne.n	8006512 <xQueueGenericSend+0x96>
 8006506:	f240 320e 	movw	r2, #782	@ 0x30e
 800650a:	495c      	ldr	r1, [pc, #368]	@ (800667c <xQueueGenericSend+0x200>)
 800650c:	485f      	ldr	r0, [pc, #380]	@ (800668c <xQueueGenericSend+0x210>)
 800650e:	f00f fadf 	bl	8015ad0 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006512:	f002 faab 	bl	8008a6c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651a:	6a3b      	ldr	r3, [r7, #32]
 800651c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <xQueueGenericSend+0xac>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d12f      	bne.n	8006588 <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 8006528:	6a3b      	ldr	r3, [r7, #32]
 800652a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800652c:	4a58      	ldr	r2, [pc, #352]	@ (8006690 <xQueueGenericSend+0x214>)
 800652e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006532:	6013      	str	r3, [r2, #0]
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	6a38      	ldr	r0, [r7, #32]
 800653a:	f000 fbdf 	bl	8006cfc <prvCopyDataToQueue>
 800653e:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	d010      	beq.n	800656a <xQueueGenericSend+0xee>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	3324      	adds	r3, #36	@ 0x24
 800654c:	4618      	mov	r0, r3
 800654e:	f001 fa79 	bl	8007a44 <xTaskRemoveFromEventList>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d013      	beq.n	8006580 <xQueueGenericSend+0x104>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006558:	4b4e      	ldr	r3, [pc, #312]	@ (8006694 <xQueueGenericSend+0x218>)
 800655a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	e00a      	b.n	8006580 <xQueueGenericSend+0x104>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d007      	beq.n	8006580 <xQueueGenericSend+0x104>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006570:	4b48      	ldr	r3, [pc, #288]	@ (8006694 <xQueueGenericSend+0x218>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006580:	f002 faa2 	bl	8008ac8 <vPortExitCritical>
                return pdPASS;
 8006584:	2301      	movs	r3, #1
 8006586:	e075      	b.n	8006674 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d109      	bne.n	80065a2 <xQueueGenericSend+0x126>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800658e:	f002 fa9b 	bl	8008ac8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006596:	4a3e      	ldr	r2, [pc, #248]	@ (8006690 <xQueueGenericSend+0x214>)
 8006598:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800659c:	6013      	str	r3, [r2, #0]
                    return errQUEUE_FULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	e068      	b.n	8006674 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d106      	bne.n	80065b6 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80065a8:	f107 0314 	add.w	r3, r7, #20
 80065ac:	4618      	mov	r0, r3
 80065ae:	f001 faab 	bl	8007b08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80065b2:	2301      	movs	r3, #1
 80065b4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80065b6:	f002 fa87 	bl	8008ac8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80065ba:	f000 ffd1 	bl	8007560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80065be:	f002 fa55 	bl	8008a6c <vPortEnterCritical>
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065c8:	b25b      	sxtb	r3, r3
 80065ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ce:	d103      	bne.n	80065d8 <xQueueGenericSend+0x15c>
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065de:	b25b      	sxtb	r3, r3
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e4:	d103      	bne.n	80065ee <xQueueGenericSend+0x172>
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ee:	f002 fa6b 	bl	8008ac8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065f2:	1d3a      	adds	r2, r7, #4
 80065f4:	f107 0314 	add.w	r3, r7, #20
 80065f8:	4611      	mov	r1, r2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f001 fa9a 	bl	8007b34 <xTaskCheckForTimeOut>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d12a      	bne.n	800665c <xQueueGenericSend+0x1e0>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006606:	6a38      	ldr	r0, [r7, #32]
 8006608:	f000 fc70 	bl	8006eec <prvIsQueueFull>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01e      	beq.n	8006650 <xQueueGenericSend+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006616:	4a1e      	ldr	r2, [pc, #120]	@ (8006690 <xQueueGenericSend+0x214>)
 8006618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800661c:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800661e:	6a3b      	ldr	r3, [r7, #32]
 8006620:	3310      	adds	r3, #16
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4611      	mov	r1, r2
 8006626:	4618      	mov	r0, r3
 8006628:	f001 f9be 	bl	80079a8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800662c:	6a38      	ldr	r0, [r7, #32]
 800662e:	f000 fbf5 	bl	8006e1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006632:	f000 ffa3 	bl	800757c <xTaskResumeAll>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	f47f af6a 	bne.w	8006512 <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 800663e:	4b15      	ldr	r3, [pc, #84]	@ (8006694 <xQueueGenericSend+0x218>)
 8006640:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006644:	601a      	str	r2, [r3, #0]
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	e760      	b.n	8006512 <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006650:	6a38      	ldr	r0, [r7, #32]
 8006652:	f000 fbe3 	bl	8006e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006656:	f000 ff91 	bl	800757c <xTaskResumeAll>
 800665a:	e75a      	b.n	8006512 <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800665c:	6a38      	ldr	r0, [r7, #32]
 800665e:	f000 fbdd 	bl	8006e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006662:	f000 ff8b 	bl	800757c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800666a:	4a09      	ldr	r2, [pc, #36]	@ (8006690 <xQueueGenericSend+0x214>)
 800666c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006670:	6013      	str	r3, [r2, #0]
            return errQUEUE_FULL;
 8006672:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006674:	4618      	mov	r0, r3
 8006676:	3728      	adds	r7, #40	@ 0x28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	0801dc90 	.word	0x0801dc90
 8006680:	0801dca4 	.word	0x0801dca4
 8006684:	0801ddc4 	.word	0x0801ddc4
 8006688:	0801de14 	.word	0x0801de14
 800668c:	0801de5c 	.word	0x0801de5c
 8006690:	e000000c 	.word	0xe000000c
 8006694:	e000ed04 	.word	0xe000ed04

08006698 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	@ 0x30
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 80066aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d105      	bne.n	80066bc <xQueueGenericSendFromISR+0x24>
 80066b0:	f240 32dd 	movw	r2, #989	@ 0x3dd
 80066b4:	4943      	ldr	r1, [pc, #268]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 80066b6:	4844      	ldr	r0, [pc, #272]	@ (80067c8 <xQueueGenericSendFromISR+0x130>)
 80066b8:	f00f fa0a 	bl	8015ad0 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d103      	bne.n	80066ca <xQueueGenericSendFromISR+0x32>
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <xQueueGenericSendFromISR+0x36>
 80066ca:	2301      	movs	r3, #1
 80066cc:	e000      	b.n	80066d0 <xQueueGenericSendFromISR+0x38>
 80066ce:	2300      	movs	r3, #0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <xQueueGenericSendFromISR+0x48>
 80066d4:	f240 32de 	movw	r2, #990	@ 0x3de
 80066d8:	493a      	ldr	r1, [pc, #232]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 80066da:	483c      	ldr	r0, [pc, #240]	@ (80067cc <xQueueGenericSendFromISR+0x134>)
 80066dc:	f00f f9f8 	bl	8015ad0 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d103      	bne.n	80066ee <xQueueGenericSendFromISR+0x56>
 80066e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d101      	bne.n	80066f2 <xQueueGenericSendFromISR+0x5a>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e000      	b.n	80066f4 <xQueueGenericSendFromISR+0x5c>
 80066f2:	2300      	movs	r3, #0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d105      	bne.n	8006704 <xQueueGenericSendFromISR+0x6c>
 80066f8:	f240 32df 	movw	r2, #991	@ 0x3df
 80066fc:	4931      	ldr	r1, [pc, #196]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 80066fe:	4834      	ldr	r0, [pc, #208]	@ (80067d0 <xQueueGenericSendFromISR+0x138>)
 8006700:	f00f f9e6 	bl	8015ad0 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006704:	f002 fa8a 	bl	8008c1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006708:	f3ef 8211 	mrs	r2, BASEPRI
 800670c:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8006710:	f383 8811 	msr	BASEPRI, r3
 8006714:	f3bf 8f6f 	isb	sy
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	61ba      	str	r2, [r7, #24]
 800671e:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006720:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006722:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800672a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <xQueueGenericSendFromISR+0x9e>
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	2b02      	cmp	r3, #2
 8006734:	d139      	bne.n	80067aa <xQueueGenericSendFromISR+0x112>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800673c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800674c:	f000 fad6 	bl	8006cfc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006750:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006758:	d112      	bne.n	8006780 <xQueueGenericSendFromISR+0xe8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675e:	2b00      	cmp	r3, #0
 8006760:	d020      	beq.n	80067a4 <xQueueGenericSendFromISR+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006764:	3324      	adds	r3, #36	@ 0x24
 8006766:	4618      	mov	r0, r3
 8006768:	f001 f96c 	bl	8007a44 <xTaskRemoveFromEventList>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <xQueueGenericSendFromISR+0x10c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d015      	beq.n	80067a4 <xQueueGenericSendFromISR+0x10c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]
 800677e:	e011      	b.n	80067a4 <xQueueGenericSendFromISR+0x10c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006780:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006784:	2b7f      	cmp	r3, #127	@ 0x7f
 8006786:	d105      	bne.n	8006794 <xQueueGenericSendFromISR+0xfc>
 8006788:	f44f 628d 	mov.w	r2, #1128	@ 0x468
 800678c:	490d      	ldr	r1, [pc, #52]	@ (80067c4 <xQueueGenericSendFromISR+0x12c>)
 800678e:	4811      	ldr	r0, [pc, #68]	@ (80067d4 <xQueueGenericSendFromISR+0x13c>)
 8006790:	f00f f99e 	bl	8015ad0 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006794:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006798:	3301      	adds	r3, #1
 800679a:	b2db      	uxtb	r3, r3
 800679c:	b25a      	sxtb	r2, r3
 800679e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80067a4:	2301      	movs	r3, #1
 80067a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 80067a8:	e001      	b.n	80067ae <xQueueGenericSendFromISR+0x116>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80067b8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80067ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3730      	adds	r7, #48	@ 0x30
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	0801dc90 	.word	0x0801dc90
 80067c8:	0801dca4 	.word	0x0801dca4
 80067cc:	0801ddc4 	.word	0x0801ddc4
 80067d0:	0801de14 	.word	0x0801de14
 80067d4:	0801deb4 	.word	0x0801deb4

080067d8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	@ 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <xQueueGiveFromISR+0x20>
 80067ec:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 80067f0:	493c      	ldr	r1, [pc, #240]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 80067f2:	483d      	ldr	r0, [pc, #244]	@ (80068e8 <xQueueGiveFromISR+0x110>)
 80067f4:	f00f f96c 	bl	8015ad0 <assertFail>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <xQueueGiveFromISR+0x34>
 8006800:	f240 428c 	movw	r2, #1164	@ 0x48c
 8006804:	4937      	ldr	r1, [pc, #220]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 8006806:	4839      	ldr	r0, [pc, #228]	@ (80068ec <xQueueGiveFromISR+0x114>)
 8006808:	f00f f962 	bl	8015ad0 <assertFail>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d103      	bne.n	800681c <xQueueGiveFromISR+0x44>
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <xQueueGiveFromISR+0x48>
 800681c:	2301      	movs	r3, #1
 800681e:	e000      	b.n	8006822 <xQueueGiveFromISR+0x4a>
 8006820:	2300      	movs	r3, #0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <xQueueGiveFromISR+0x5a>
 8006826:	f240 4291 	movw	r2, #1169	@ 0x491
 800682a:	492e      	ldr	r1, [pc, #184]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 800682c:	4830      	ldr	r0, [pc, #192]	@ (80068f0 <xQueueGiveFromISR+0x118>)
 800682e:	f00f f94f 	bl	8015ad0 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006832:	f002 f9f3 	bl	8008c1c <vPortValidateInterruptPriority>
        __asm volatile
 8006836:	f3ef 8211 	mrs	r2, BASEPRI
 800683a:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	613a      	str	r2, [r7, #16]
 800684c:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 800684e:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006850:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006856:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	429a      	cmp	r2, r3
 8006860:	d233      	bcs.n	80068ca <xQueueGiveFromISR+0xf2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006862:	6a3b      	ldr	r3, [r7, #32]
 8006864:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006868:	75fb      	strb	r3, [r7, #23]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800686a:	69bb      	ldr	r3, [r7, #24]
 800686c:	1c5a      	adds	r2, r3, #1
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800687a:	d112      	bne.n	80068a2 <xQueueGiveFromISR+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01f      	beq.n	80068c4 <xQueueGiveFromISR+0xec>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	3324      	adds	r3, #36	@ 0x24
 8006888:	4618      	mov	r0, r3
 800688a:	f001 f8db 	bl	8007a44 <xTaskRemoveFromEventList>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d017      	beq.n	80068c4 <xQueueGiveFromISR+0xec>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d014      	beq.n	80068c4 <xQueueGiveFromISR+0xec>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e010      	b.n	80068c4 <xQueueGiveFromISR+0xec>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80068a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80068a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068a8:	d105      	bne.n	80068b6 <xQueueGiveFromISR+0xde>
 80068aa:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 80068ae:	490d      	ldr	r1, [pc, #52]	@ (80068e4 <xQueueGiveFromISR+0x10c>)
 80068b0:	4810      	ldr	r0, [pc, #64]	@ (80068f4 <xQueueGiveFromISR+0x11c>)
 80068b2:	f00f f90d 	bl	8015ad0 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80068b6:	7dfb      	ldrb	r3, [r7, #23]
 80068b8:	3301      	adds	r3, #1
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	b25a      	sxtb	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80068c4:	2301      	movs	r3, #1
 80068c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80068c8:	e001      	b.n	80068ce <xQueueGiveFromISR+0xf6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	f383 8811 	msr	BASEPRI, r3
    }
 80068d8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3728      	adds	r7, #40	@ 0x28
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	0801dc90 	.word	0x0801dc90
 80068e8:	0801dca4 	.word	0x0801dca4
 80068ec:	0801ded0 	.word	0x0801ded0
 80068f0:	0801deec 	.word	0x0801deec
 80068f4:	0801deb4 	.word	0x0801deb4

080068f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b08a      	sub	sp, #40	@ 0x28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006904:	2300      	movs	r3, #0
 8006906:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800690c:	6a3b      	ldr	r3, [r7, #32]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d105      	bne.n	800691e <xQueueReceive+0x26>
 8006912:	f240 522c 	movw	r2, #1324	@ 0x52c
 8006916:	4962      	ldr	r1, [pc, #392]	@ (8006aa0 <xQueueReceive+0x1a8>)
 8006918:	4862      	ldr	r0, [pc, #392]	@ (8006aa4 <xQueueReceive+0x1ac>)
 800691a:	f00f f8d9 	bl	8015ad0 <assertFail>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d103      	bne.n	800692c <xQueueReceive+0x34>
 8006924:	6a3b      	ldr	r3, [r7, #32]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	2b00      	cmp	r3, #0
 800692a:	d101      	bne.n	8006930 <xQueueReceive+0x38>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <xQueueReceive+0x3a>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <xQueueReceive+0x4a>
 8006936:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800693a:	4959      	ldr	r1, [pc, #356]	@ (8006aa0 <xQueueReceive+0x1a8>)
 800693c:	485a      	ldr	r0, [pc, #360]	@ (8006aa8 <xQueueReceive+0x1b0>)
 800693e:	f00f f8c7 	bl	8015ad0 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006942:	f001 fa27 	bl	8007d94 <xTaskGetSchedulerState>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <xQueueReceive+0x5a>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <xQueueReceive+0x5e>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueReceive+0x60>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d105      	bne.n	8006968 <xQueueReceive+0x70>
 800695c:	f240 5235 	movw	r2, #1333	@ 0x535
 8006960:	494f      	ldr	r1, [pc, #316]	@ (8006aa0 <xQueueReceive+0x1a8>)
 8006962:	4852      	ldr	r0, [pc, #328]	@ (8006aac <xQueueReceive+0x1b4>)
 8006964:	f00f f8b4 	bl	8015ad0 <assertFail>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006968:	f002 f880 	bl	8008a6c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006970:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01f      	beq.n	80069b8 <xQueueReceive+0xc0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	6a38      	ldr	r0, [r7, #32]
 800697c:	f000 fa28 	bl	8006dd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	1e5a      	subs	r2, r3, #1
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00f      	beq.n	80069b0 <xQueueReceive+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	3310      	adds	r3, #16
 8006994:	4618      	mov	r0, r3
 8006996:	f001 f855 	bl	8007a44 <xTaskRemoveFromEventList>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <xQueueReceive+0xb8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80069a0:	4b43      	ldr	r3, [pc, #268]	@ (8006ab0 <xQueueReceive+0x1b8>)
 80069a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a6:	601a      	str	r2, [r3, #0]
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80069b0:	f002 f88a 	bl	8008ac8 <vPortExitCritical>
                return pdPASS;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e06f      	b.n	8006a98 <xQueueReceive+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d103      	bne.n	80069c6 <xQueueReceive+0xce>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80069be:	f002 f883 	bl	8008ac8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e068      	b.n	8006a98 <xQueueReceive+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80069c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d106      	bne.n	80069da <xQueueReceive+0xe2>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80069cc:	f107 0314 	add.w	r3, r7, #20
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 f899 	bl	8007b08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80069d6:	2301      	movs	r3, #1
 80069d8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80069da:	f002 f875 	bl	8008ac8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80069de:	f000 fdbf 	bl	8007560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80069e2:	f002 f843 	bl	8008a6c <vPortEnterCritical>
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f2:	d103      	bne.n	80069fc <xQueueReceive+0x104>
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a02:	b25b      	sxtb	r3, r3
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d103      	bne.n	8006a12 <xQueueReceive+0x11a>
 8006a0a:	6a3b      	ldr	r3, [r7, #32]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a12:	f002 f859 	bl	8008ac8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a16:	1d3a      	adds	r2, r7, #4
 8006a18:	f107 0314 	add.w	r3, r7, #20
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f001 f888 	bl	8007b34 <xTaskCheckForTimeOut>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d129      	bne.n	8006a7e <xQueueReceive+0x186>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a2a:	6a38      	ldr	r0, [r7, #32]
 8006a2c:	f000 fa48 	bl	8006ec0 <prvIsQueueEmpty>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01d      	beq.n	8006a72 <xQueueReceive+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab4 <xQueueReceive+0x1bc>)
 8006a3c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006a40:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3324      	adds	r3, #36	@ 0x24
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	4611      	mov	r1, r2
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 ffac 	bl	80079a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006a50:	6a38      	ldr	r0, [r7, #32]
 8006a52:	f000 f9e3 	bl	8006e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006a56:	f000 fd91 	bl	800757c <xTaskResumeAll>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d183      	bne.n	8006968 <xQueueReceive+0x70>
                {
                    portYIELD_WITHIN_API();
 8006a60:	4b13      	ldr	r3, [pc, #76]	@ (8006ab0 <xQueueReceive+0x1b8>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	e77a      	b.n	8006968 <xQueueReceive+0x70>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006a72:	6a38      	ldr	r0, [r7, #32]
 8006a74:	f000 f9d2 	bl	8006e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006a78:	f000 fd80 	bl	800757c <xTaskResumeAll>
 8006a7c:	e774      	b.n	8006968 <xQueueReceive+0x70>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8006a7e:	6a38      	ldr	r0, [r7, #32]
 8006a80:	f000 f9cc 	bl	8006e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006a84:	f000 fd7a 	bl	800757c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a88:	6a38      	ldr	r0, [r7, #32]
 8006a8a:	f000 fa19 	bl	8006ec0 <prvIsQueueEmpty>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f43f af69 	beq.w	8006968 <xQueueReceive+0x70>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006a96:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3728      	adds	r7, #40	@ 0x28
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	0801dc90 	.word	0x0801dc90
 8006aa4:	0801df54 	.word	0x0801df54
 8006aa8:	0801df60 	.word	0x0801df60
 8006aac:	0801de5c 	.word	0x0801de5c
 8006ab0:	e000ed04 	.word	0xe000ed04
 8006ab4:	e000000c 	.word	0xe000000c

08006ab8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b08a      	sub	sp, #40	@ 0x28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8006aca:	2300      	movs	r3, #0
 8006acc:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d105      	bne.n	8006ae0 <xQueueSemaphoreTake+0x28>
 8006ad4:	f240 52be 	movw	r2, #1470	@ 0x5be
 8006ad8:	4975      	ldr	r1, [pc, #468]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006ada:	4876      	ldr	r0, [pc, #472]	@ (8006cb4 <xQueueSemaphoreTake+0x1fc>)
 8006adc:	f00e fff8 	bl	8015ad0 <assertFail>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d005      	beq.n	8006af4 <xQueueSemaphoreTake+0x3c>
 8006ae8:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 8006aec:	4970      	ldr	r1, [pc, #448]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006aee:	4872      	ldr	r0, [pc, #456]	@ (8006cb8 <xQueueSemaphoreTake+0x200>)
 8006af0:	f00e ffee 	bl	8015ad0 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006af4:	f001 f94e 	bl	8007d94 <xTaskGetSchedulerState>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d102      	bne.n	8006b04 <xQueueSemaphoreTake+0x4c>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <xQueueSemaphoreTake+0x50>
 8006b04:	2301      	movs	r3, #1
 8006b06:	e000      	b.n	8006b0a <xQueueSemaphoreTake+0x52>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d105      	bne.n	8006b1a <xQueueSemaphoreTake+0x62>
 8006b0e:	f240 52c7 	movw	r2, #1479	@ 0x5c7
 8006b12:	4967      	ldr	r1, [pc, #412]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006b14:	4869      	ldr	r0, [pc, #420]	@ (8006cbc <xQueueSemaphoreTake+0x204>)
 8006b16:	f00e ffdb 	bl	8015ad0 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006b1a:	f001 ffa7 	bl	8008a6c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d024      	beq.n	8006b74 <xQueueSemaphoreTake+0xbc>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	1e5a      	subs	r2, r3, #1
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <xQueueSemaphoreTake+0x8c>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006b3a:	f001 fabf 	bl	80080bc <pvTaskIncrementMutexHeldCount>
 8006b3e:	4602      	mov	r2, r0
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00f      	beq.n	8006b6c <xQueueSemaphoreTake+0xb4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	3310      	adds	r3, #16
 8006b50:	4618      	mov	r0, r3
 8006b52:	f000 ff77 	bl	8007a44 <xTaskRemoveFromEventList>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <xQueueSemaphoreTake+0xb4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006b5c:	4b58      	ldr	r3, [pc, #352]	@ (8006cc0 <xQueueSemaphoreTake+0x208>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006b6c:	f001 ffac 	bl	8008ac8 <vPortExitCritical>
                return pdPASS;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e098      	b.n	8006ca6 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d10c      	bne.n	8006b94 <xQueueSemaphoreTake+0xdc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <xQueueSemaphoreTake+0xd4>
 8006b80:	f240 620d 	movw	r2, #1549	@ 0x60d
 8006b84:	494a      	ldr	r1, [pc, #296]	@ (8006cb0 <xQueueSemaphoreTake+0x1f8>)
 8006b86:	484f      	ldr	r0, [pc, #316]	@ (8006cc4 <xQueueSemaphoreTake+0x20c>)
 8006b88:	f00e ffa2 	bl	8015ad0 <assertFail>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006b8c:	f001 ff9c 	bl	8008ac8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e088      	b.n	8006ca6 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <xQueueSemaphoreTake+0xf0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9a:	f107 030c 	add.w	r3, r7, #12
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 ffb2 	bl	8007b08 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006ba8:	f001 ff8e 	bl	8008ac8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006bac:	f000 fcd8 	bl	8007560 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006bb0:	f001 ff5c 	bl	8008a6c <vPortEnterCritical>
 8006bb4:	69fb      	ldr	r3, [r7, #28]
 8006bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc0:	d103      	bne.n	8006bca <xQueueSemaphoreTake+0x112>
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd6:	d103      	bne.n	8006be0 <xQueueSemaphoreTake+0x128>
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006be0:	f001 ff72 	bl	8008ac8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be4:	463a      	mov	r2, r7
 8006be6:	f107 030c 	add.w	r3, r7, #12
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ffa1 	bl	8007b34 <xTaskCheckForTimeOut>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d138      	bne.n	8006c6a <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf8:	69f8      	ldr	r0, [r7, #28]
 8006bfa:	f000 f961 	bl	8006ec0 <prvIsQueueEmpty>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d02c      	beq.n	8006c5e <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c08:	4a2f      	ldr	r2, [pc, #188]	@ (8006cc8 <xQueueSemaphoreTake+0x210>)
 8006c0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006c0e:	6013      	str	r3, [r2, #0]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <xQueueSemaphoreTake+0x174>
                        {
                            taskENTER_CRITICAL();
 8006c18:	f001 ff28 	bl	8008a6c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f001 f8d5 	bl	8007dd0 <xTaskPriorityInherit>
 8006c26:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 8006c28:	f001 ff4e 	bl	8008ac8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	3324      	adds	r3, #36	@ 0x24
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	4611      	mov	r1, r2
 8006c34:	4618      	mov	r0, r3
 8006c36:	f000 feb7 	bl	80079a8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006c3a:	69f8      	ldr	r0, [r7, #28]
 8006c3c:	f000 f8ee 	bl	8006e1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006c40:	f000 fc9c 	bl	800757c <xTaskResumeAll>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	f47f af67 	bne.w	8006b1a <xQueueSemaphoreTake+0x62>
                {
                    portYIELD_WITHIN_API();
 8006c4c:	4b1c      	ldr	r3, [pc, #112]	@ (8006cc0 <xQueueSemaphoreTake+0x208>)
 8006c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c52:	601a      	str	r2, [r3, #0]
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	e75d      	b.n	8006b1a <xQueueSemaphoreTake+0x62>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006c5e:	69f8      	ldr	r0, [r7, #28]
 8006c60:	f000 f8dc 	bl	8006e1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006c64:	f000 fc8a 	bl	800757c <xTaskResumeAll>
 8006c68:	e757      	b.n	8006b1a <xQueueSemaphoreTake+0x62>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006c6a:	69f8      	ldr	r0, [r7, #28]
 8006c6c:	f000 f8d6 	bl	8006e1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006c70:	f000 fc84 	bl	800757c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c74:	69f8      	ldr	r0, [r7, #28]
 8006c76:	f000 f923 	bl	8006ec0 <prvIsQueueEmpty>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f43f af4c 	beq.w	8006b1a <xQueueSemaphoreTake+0x62>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00d      	beq.n	8006ca4 <xQueueSemaphoreTake+0x1ec>
                        {
                            taskENTER_CRITICAL();
 8006c88:	f001 fef0 	bl	8008a6c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006c8c:	69f8      	ldr	r0, [r7, #28]
 8006c8e:	f000 f81d 	bl	8006ccc <prvGetDisinheritPriorityAfterTimeout>
 8006c92:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	6979      	ldr	r1, [r7, #20]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f001 f984 	bl	8007fa8 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006ca0:	f001 ff12 	bl	8008ac8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006ca4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3728      	adds	r7, #40	@ 0x28
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	0801dc90 	.word	0x0801dc90
 8006cb4:	0801df54 	.word	0x0801df54
 8006cb8:	0801ded0 	.word	0x0801ded0
 8006cbc:	0801de5c 	.word	0x0801de5c
 8006cc0:	e000ed04 	.word	0xe000ed04
 8006cc4:	0801dfb4 	.word	0x0801dfb4
 8006cc8:	e000000c 	.word	0xe000000c

08006ccc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d006      	beq.n	8006cea <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1c3 0306 	rsb	r3, r3, #6
 8006ce6:	60fb      	str	r3, [r7, #12]
 8006ce8:	e001      	b.n	8006cee <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006cea:	2300      	movs	r3, #0
 8006cec:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006cee:	68fb      	ldr	r3, [r7, #12]
    }
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3714      	adds	r7, #20
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b086      	sub	sp, #24
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	60f8      	str	r0, [r7, #12]
 8006d04:	60b9      	str	r1, [r7, #8]
 8006d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d10:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d14d      	bne.n	8006dbe <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	4618      	mov	r0, r3
 8006d28:	f001 f8c8 	bl	8007ebc <xTaskPriorityDisinherit>
 8006d2c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	609a      	str	r2, [r3, #8]
 8006d34:	e043      	b.n	8006dbe <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d119      	bne.n	8006d70 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6858      	ldr	r0, [r3, #4]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d44:	461a      	mov	r2, r3
 8006d46:	68b9      	ldr	r1, [r7, #8]
 8006d48:	f014 f9ba 	bl	801b0c0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	441a      	add	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d32b      	bcc.n	8006dbe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e026      	b.n	8006dbe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	68d8      	ldr	r0, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d78:	461a      	mov	r2, r3
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	f014 f9a0 	bl	801b0c0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	425b      	negs	r3, r3
 8006d8a:	441a      	add	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d207      	bcs.n	8006dac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689a      	ldr	r2, [r3, #8]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da4:	425b      	negs	r3, r3
 8006da6:	441a      	add	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d105      	bne.n	8006dbe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006dc6:	697b      	ldr	r3, [r7, #20]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b082      	sub	sp, #8
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d018      	beq.n	8006e14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	68da      	ldr	r2, [r3, #12]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	441a      	add	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d303      	bcc.n	8006e04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68d9      	ldr	r1, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6838      	ldr	r0, [r7, #0]
 8006e10:	f014 f956 	bl	801b0c0 <memcpy>
    }
}
 8006e14:	bf00      	nop
 8006e16:	3708      	adds	r7, #8
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006e24:	f001 fe22 	bl	8008a6c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e30:	e011      	b.n	8006e56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d012      	beq.n	8006e60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3324      	adds	r3, #36	@ 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f000 fe00 	bl	8007a44 <xTaskRemoveFromEventList>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006e4a:	f000 fed5 	bl	8007bf8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dce9      	bgt.n	8006e32 <prvUnlockQueue+0x16>
 8006e5e:	e000      	b.n	8006e62 <prvUnlockQueue+0x46>
                        break;
 8006e60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	22ff      	movs	r2, #255	@ 0xff
 8006e66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006e6a:	f001 fe2d 	bl	8008ac8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006e6e:	f001 fdfd 	bl	8008a6c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e7a:	e011      	b.n	8006ea0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d012      	beq.n	8006eaa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	3310      	adds	r3, #16
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fddb 	bl	8007a44 <xTaskRemoveFromEventList>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006e94:	f000 feb0 	bl	8007bf8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ea0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dce9      	bgt.n	8006e7c <prvUnlockQueue+0x60>
 8006ea8:	e000      	b.n	8006eac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006eaa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	22ff      	movs	r2, #255	@ 0xff
 8006eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006eb4:	f001 fe08 	bl	8008ac8 <vPortExitCritical>
}
 8006eb8:	bf00      	nop
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006ec8:	f001 fdd0 	bl	8008a6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d102      	bne.n	8006eda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	e001      	b.n	8006ede <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006ede:	f001 fdf3 	bl	8008ac8 <vPortExitCritical>

    return xReturn;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006ef4:	f001 fdba 	bl	8008a6c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d102      	bne.n	8006f0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006f04:	2301      	movs	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
 8006f08:	e001      	b.n	8006f0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006f0e:	f001 fddb 	bl	8008ac8 <vPortExitCritical>

    return xReturn;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	e014      	b.n	8006f56 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f2c:	4a0f      	ldr	r2, [pc, #60]	@ (8006f6c <vQueueAddToRegistry+0x50>)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10b      	bne.n	8006f50 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f38:	490c      	ldr	r1, [pc, #48]	@ (8006f6c <vQueueAddToRegistry+0x50>)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006f42:	4a0a      	ldr	r2, [pc, #40]	@ (8006f6c <vQueueAddToRegistry+0x50>)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4413      	add	r3, r2
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006f4e:	e006      	b.n	8006f5e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2b09      	cmp	r3, #9
 8006f5a:	d9e7      	bls.n	8006f2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	20000234 	.word	0x20000234

08006f70 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006f80:	f001 fd74 	bl	8008a6c <vPortEnterCritical>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f8a:	b25b      	sxtb	r3, r3
 8006f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f90:	d103      	bne.n	8006f9a <vQueueWaitForMessageRestricted+0x2a>
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fa0:	b25b      	sxtb	r3, r3
 8006fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa6:	d103      	bne.n	8006fb0 <vQueueWaitForMessageRestricted+0x40>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fb0:	f001 fd8a 	bl	8008ac8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d106      	bne.n	8006fca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	3324      	adds	r3, #36	@ 0x24
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 fd13 	bl	80079f0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006fca:	6978      	ldr	r0, [r7, #20]
 8006fcc:	f7ff ff26 	bl	8006e1c <prvUnlockQueue>
    }
 8006fd0:	bf00      	nop
 8006fd2:	3718      	adds	r7, #24
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08c      	sub	sp, #48	@ 0x30
 8006fdc:	af04      	add	r7, sp, #16
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d105      	bne.n	8006ff8 <xTaskCreateStatic+0x20>
 8006fec:	f240 2243 	movw	r2, #579	@ 0x243
 8006ff0:	4920      	ldr	r1, [pc, #128]	@ (8007074 <xTaskCreateStatic+0x9c>)
 8006ff2:	4821      	ldr	r0, [pc, #132]	@ (8007078 <xTaskCreateStatic+0xa0>)
 8006ff4:	f00e fd6c 	bl	8015ad0 <assertFail>
        configASSERT( pxTaskBuffer != NULL );
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d105      	bne.n	800700a <xTaskCreateStatic+0x32>
 8006ffe:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8007002:	491c      	ldr	r1, [pc, #112]	@ (8007074 <xTaskCreateStatic+0x9c>)
 8007004:	481d      	ldr	r0, [pc, #116]	@ (800707c <xTaskCreateStatic+0xa4>)
 8007006:	f00e fd63 	bl	8015ad0 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800700a:	2364      	movs	r3, #100	@ 0x64
 800700c:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	2b64      	cmp	r3, #100	@ 0x64
 8007012:	d005      	beq.n	8007020 <xTaskCreateStatic+0x48>
 8007014:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8007018:	4916      	ldr	r1, [pc, #88]	@ (8007074 <xTaskCreateStatic+0x9c>)
 800701a:	4819      	ldr	r0, [pc, #100]	@ (8007080 <xTaskCreateStatic+0xa8>)
 800701c:	f00e fd58 	bl	8015ad0 <assertFail>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007020:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01e      	beq.n	8007066 <xTaskCreateStatic+0x8e>
 8007028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800702a:	2b00      	cmp	r3, #0
 800702c:	d01b      	beq.n	8007066 <xTaskCreateStatic+0x8e>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800702e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007030:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007036:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007040:	2300      	movs	r3, #0
 8007042:	9303      	str	r3, [sp, #12]
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	9302      	str	r3, [sp, #8]
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007050:	9300      	str	r3, [sp, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f859 	bl	8007110 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800705e:	69f8      	ldr	r0, [r7, #28]
 8007060:	f000 f8f4 	bl	800724c <prvAddNewTaskToReadyList>
 8007064:	e001      	b.n	800706a <xTaskCreateStatic+0x92>
        }
        else
        {
            xReturn = NULL;
 8007066:	2300      	movs	r3, #0
 8007068:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800706a:	69bb      	ldr	r3, [r7, #24]
    }
 800706c:	4618      	mov	r0, r3
 800706e:	3720      	adds	r7, #32
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	0801e060 	.word	0x0801e060
 8007078:	0801e074 	.word	0x0801e074
 800707c:	0801e08c 	.word	0x0801e08c
 8007080:	0801e0a4 	.word	0x0801e0a4

08007084 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	@ 0x30
 8007088:	af04      	add	r7, sp, #16
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	4613      	mov	r3, r2
 8007092:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4618      	mov	r0, r3
 800709a:	f001 fdf9 	bl	8008c90 <pvPortMalloc>
 800709e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00e      	beq.n	80070c4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070a6:	2064      	movs	r0, #100	@ 0x64
 80070a8:	f001 fdf2 	bl	8008c90 <pvPortMalloc>
 80070ac:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070ba:	e005      	b.n	80070c8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80070bc:	6978      	ldr	r0, [r7, #20]
 80070be:	f001 feaf 	bl	8008e20 <vPortFree>
 80070c2:	e001      	b.n	80070c8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80070c4:	2300      	movs	r3, #0
 80070c6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80070c8:	69fb      	ldr	r3, [r7, #28]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d017      	beq.n	80070fe <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	2300      	movs	r3, #0
 80070da:	9303      	str	r3, [sp, #12]
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	9302      	str	r3, [sp, #8]
 80070e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e2:	9301      	str	r3, [sp, #4]
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	68b9      	ldr	r1, [r7, #8]
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f80f 	bl	8007110 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80070f2:	69f8      	ldr	r0, [r7, #28]
 80070f4:	f000 f8aa 	bl	800724c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80070f8:	2301      	movs	r3, #1
 80070fa:	61bb      	str	r3, [r7, #24]
 80070fc:	e002      	b.n	8007104 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007104:	69bb      	ldr	r3, [r7, #24]
    }
 8007106:	4618      	mov	r0, r3
 8007108:	3720      	adds	r7, #32
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	607a      	str	r2, [r7, #4]
 800711c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800711e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007120:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	461a      	mov	r2, r3
 8007128:	21a5      	movs	r1, #165	@ 0xa5
 800712a:	f013 ff83 	bl	801b034 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800712e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007138:	3b01      	subs	r3, #1
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <prvInitialiseNewTask+0x4e>
 8007152:	f240 3259 	movw	r2, #857	@ 0x359
 8007156:	493b      	ldr	r1, [pc, #236]	@ (8007244 <prvInitialiseNewTask+0x134>)
 8007158:	483b      	ldr	r0, [pc, #236]	@ (8007248 <prvInitialiseNewTask+0x138>)
 800715a:	f00e fcb9 	bl	8015ad0 <assertFail>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 800715e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	641a      	str	r2, [r3, #64]	@ 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d01f      	beq.n	80071aa <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]
 800716e:	e012      	b.n	8007196 <prvInitialiseNewTask+0x86>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	4413      	add	r3, r2
 8007176:	7819      	ldrb	r1, [r3, #0]
 8007178:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	4413      	add	r3, r2
 800717e:	3334      	adds	r3, #52	@ 0x34
 8007180:	460a      	mov	r2, r1
 8007182:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	4413      	add	r3, r2
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <prvInitialiseNewTask+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	3301      	adds	r3, #1
 8007194:	617b      	str	r3, [r7, #20]
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b09      	cmp	r3, #9
 800719a:	d9e9      	bls.n	8007170 <prvInitialiseNewTask+0x60>
 800719c:	e000      	b.n	80071a0 <prvInitialiseNewTask+0x90>
            {
                break;
 800719e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80071a8:	e003      	b.n	80071b2 <prvInitialiseNewTask+0xa2>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2b05      	cmp	r3, #5
 80071b6:	d901      	bls.n	80071bc <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071b8:	2305      	movs	r3, #5
 80071ba:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80071bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071be:	6a3a      	ldr	r2, [r7, #32]
 80071c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	6a3a      	ldr	r2, [r7, #32]
 80071c6:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80071c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ca:	2200      	movs	r2, #0
 80071cc:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d0:	3304      	adds	r3, #4
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe ff42 	bl	800605c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071da:	3318      	adds	r3, #24
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fe ff3d 	bl	800605c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	f1c3 0206 	rsb	r2, r3, #6
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071f6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 80071f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071fa:	2200      	movs	r2, #0
 80071fc:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 80071fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007200:	2200      	movs	r2, #0
 8007202:	659a      	str	r2, [r3, #88]	@ 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	335c      	adds	r3, #92	@ 0x5c
 8007208:	2204      	movs	r2, #4
 800720a:	2100      	movs	r1, #0
 800720c:	4618      	mov	r0, r3
 800720e:	f013 ff11 	bl	801b034 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8007212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007214:	3360      	adds	r3, #96	@ 0x60
 8007216:	2201      	movs	r2, #1
 8007218:	2100      	movs	r1, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f013 ff0a 	bl	801b034 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	6938      	ldr	r0, [r7, #16]
 8007226:	f001 fb0d 	bl	8008844 <pxPortInitialiseStack>
 800722a:	4602      	mov	r2, r0
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	2b00      	cmp	r3, #0
 8007234:	d002      	beq.n	800723c <prvInitialiseNewTask+0x12c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800723a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800723c:	bf00      	nop
 800723e:	3718      	adds	r7, #24
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	0801e060 	.word	0x0801e060
 8007248:	0801e0c0 	.word	0x0801e0c0

0800724c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007254:	f001 fc0a 	bl	8008a6c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007258:	4b2c      	ldr	r3, [pc, #176]	@ (800730c <prvAddNewTaskToReadyList+0xc0>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	3301      	adds	r3, #1
 800725e:	4a2b      	ldr	r2, [pc, #172]	@ (800730c <prvAddNewTaskToReadyList+0xc0>)
 8007260:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007262:	4b2b      	ldr	r3, [pc, #172]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800726a:	4a29      	ldr	r2, [pc, #164]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007270:	4b26      	ldr	r3, [pc, #152]	@ (800730c <prvAddNewTaskToReadyList+0xc0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d110      	bne.n	800729a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007278:	f000 fcd4 	bl	8007c24 <prvInitialiseTaskLists>
 800727c:	e00d      	b.n	800729a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800727e:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <prvAddNewTaskToReadyList+0xc8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d109      	bne.n	800729a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007286:	4b22      	ldr	r3, [pc, #136]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007290:	429a      	cmp	r2, r3
 8007292:	d802      	bhi.n	800729a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007294:	4a1e      	ldr	r2, [pc, #120]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800729a:	4b1f      	ldr	r3, [pc, #124]	@ (8007318 <prvAddNewTaskToReadyList+0xcc>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	3301      	adds	r3, #1
 80072a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007318 <prvAddNewTaskToReadyList+0xcc>)
 80072a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007318 <prvAddNewTaskToReadyList+0xcc>)
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b0:	2201      	movs	r2, #1
 80072b2:	409a      	lsls	r2, r3
 80072b4:	4b19      	ldr	r3, [pc, #100]	@ (800731c <prvAddNewTaskToReadyList+0xd0>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	4a18      	ldr	r2, [pc, #96]	@ (800731c <prvAddNewTaskToReadyList+0xd0>)
 80072bc:	6013      	str	r3, [r2, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4a15      	ldr	r2, [pc, #84]	@ (8007320 <prvAddNewTaskToReadyList+0xd4>)
 80072cc:	441a      	add	r2, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	3304      	adds	r3, #4
 80072d2:	4619      	mov	r1, r3
 80072d4:	4610      	mov	r0, r2
 80072d6:	f7fe fece 	bl	8006076 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80072da:	f001 fbf5 	bl	8008ac8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80072de:	4b0d      	ldr	r3, [pc, #52]	@ (8007314 <prvAddNewTaskToReadyList+0xc8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00e      	beq.n	8007304 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007310 <prvAddNewTaskToReadyList+0xc4>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d207      	bcs.n	8007304 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80072f4:	4b0b      	ldr	r3, [pc, #44]	@ (8007324 <prvAddNewTaskToReadyList+0xd8>)
 80072f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007304:	bf00      	nop
 8007306:	3708      	adds	r7, #8
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	20000370 	.word	0x20000370
 8007310:	20000284 	.word	0x20000284
 8007314:	2000037c 	.word	0x2000037c
 8007318:	2000038c 	.word	0x2000038c
 800731c:	20000378 	.word	0x20000378
 8007320:	20000288 	.word	0x20000288
 8007324:	e000ed04 	.word	0xe000ed04

08007328 <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007332:	2300      	movs	r3, #0
 8007334:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d105      	bne.n	8007348 <vTaskDelayUntil+0x20>
 800733c:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8007340:	492d      	ldr	r1, [pc, #180]	@ (80073f8 <vTaskDelayUntil+0xd0>)
 8007342:	482e      	ldr	r0, [pc, #184]	@ (80073fc <vTaskDelayUntil+0xd4>)
 8007344:	f00e fbc4 	bl	8015ad0 <assertFail>
        configASSERT( ( xTimeIncrement > 0U ) );
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d105      	bne.n	800735a <vTaskDelayUntil+0x32>
 800734e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8007352:	4929      	ldr	r1, [pc, #164]	@ (80073f8 <vTaskDelayUntil+0xd0>)
 8007354:	482a      	ldr	r0, [pc, #168]	@ (8007400 <vTaskDelayUntil+0xd8>)
 8007356:	f00e fbbb 	bl	8015ad0 <assertFail>
        configASSERT( uxSchedulerSuspended == 0 );
 800735a:	4b2a      	ldr	r3, [pc, #168]	@ (8007404 <vTaskDelayUntil+0xdc>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <vTaskDelayUntil+0x46>
 8007362:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 8007366:	4924      	ldr	r1, [pc, #144]	@ (80073f8 <vTaskDelayUntil+0xd0>)
 8007368:	4827      	ldr	r0, [pc, #156]	@ (8007408 <vTaskDelayUntil+0xe0>)
 800736a:	f00e fbb1 	bl	8015ad0 <assertFail>

        vTaskSuspendAll();
 800736e:	f000 f8f7 	bl	8007560 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8007372:	4b26      	ldr	r3, [pc, #152]	@ (800740c <vTaskDelayUntil+0xe4>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	4413      	add	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	429a      	cmp	r2, r3
 800738a:	d20b      	bcs.n	80073a4 <vTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d211      	bcs.n	80073ba <vTaskDelayUntil+0x92>
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	429a      	cmp	r2, r3
 800739c:	d90d      	bls.n	80073ba <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	617b      	str	r3, [r7, #20]
 80073a2:	e00a      	b.n	80073ba <vTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d303      	bcc.n	80073b6 <vTaskDelayUntil+0x8e>
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	429a      	cmp	r2, r3
 80073b4:	d901      	bls.n	80073ba <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 80073b6:	2301      	movs	r3, #1
 80073b8:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <vTaskDelayUntil+0xac>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	2100      	movs	r1, #0
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fe88 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80073d4:	f000 f8d2 	bl	800757c <xTaskResumeAll>
 80073d8:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d107      	bne.n	80073f0 <vTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 80073e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007410 <vTaskDelayUntil+0xe8>)
 80073e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073e6:	601a      	str	r2, [r3, #0]
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80073f0:	bf00      	nop
 80073f2:	3718      	adds	r7, #24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	0801e060 	.word	0x0801e060
 80073fc:	0801e148 	.word	0x0801e148
 8007400:	0801e15c 	.word	0x0801e15c
 8007404:	20000398 	.word	0x20000398
 8007408:	0801e12c 	.word	0x0801e12c
 800740c:	20000374 	.word	0x20000374
 8007410:	e000ed04 	.word	0xe000ed04

08007414 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8007426:	4b11      	ldr	r3, [pc, #68]	@ (800746c <vTaskDelay+0x58>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d005      	beq.n	800743a <vTaskDelay+0x26>
 800742e:	f44f 62a7 	mov.w	r2, #1336	@ 0x538
 8007432:	490f      	ldr	r1, [pc, #60]	@ (8007470 <vTaskDelay+0x5c>)
 8007434:	480f      	ldr	r0, [pc, #60]	@ (8007474 <vTaskDelay+0x60>)
 8007436:	f00e fb4b 	bl	8015ad0 <assertFail>
            vTaskSuspendAll();
 800743a:	f000 f891 	bl	8007560 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 fe4f 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007446:	f000 f899 	bl	800757c <xTaskResumeAll>
 800744a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <vTaskDelay+0x4e>
        {
            portYIELD_WITHIN_API();
 8007452:	4b09      	ldr	r3, [pc, #36]	@ (8007478 <vTaskDelay+0x64>)
 8007454:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007458:	601a      	str	r2, [r3, #0]
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007462:	bf00      	nop
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	20000398 	.word	0x20000398
 8007470:	0801e060 	.word	0x0801e060
 8007474:	0801e12c 	.word	0x0801e12c
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b08a      	sub	sp, #40	@ 0x28
 8007480:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8007482:	2300      	movs	r3, #0
 8007484:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8007486:	2300      	movs	r3, #0
 8007488:	60bb      	str	r3, [r7, #8]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800748a:	1d3a      	adds	r2, r7, #4
 800748c:	f107 0108 	add.w	r1, r7, #8
 8007490:	f107 030c 	add.w	r3, r7, #12
 8007494:	4618      	mov	r0, r3
 8007496:	f009 f855 	bl	8010544 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	9202      	str	r2, [sp, #8]
 80074a2:	9301      	str	r3, [sp, #4]
 80074a4:	2300      	movs	r3, #0
 80074a6:	9300      	str	r3, [sp, #0]
 80074a8:	2300      	movs	r3, #0
 80074aa:	460a      	mov	r2, r1
 80074ac:	4922      	ldr	r1, [pc, #136]	@ (8007538 <vTaskStartScheduler+0xbc>)
 80074ae:	4823      	ldr	r0, [pc, #140]	@ (800753c <vTaskStartScheduler+0xc0>)
 80074b0:	f7ff fd92 	bl	8006fd8 <xTaskCreateStatic>
 80074b4:	4603      	mov	r3, r0
 80074b6:	4a22      	ldr	r2, [pc, #136]	@ (8007540 <vTaskStartScheduler+0xc4>)
 80074b8:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80074ba:	4b21      	ldr	r3, [pc, #132]	@ (8007540 <vTaskStartScheduler+0xc4>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d002      	beq.n	80074c8 <vTaskStartScheduler+0x4c>
            {
                xReturn = pdPASS;
 80074c2:	2301      	movs	r3, #1
 80074c4:	617b      	str	r3, [r7, #20]
 80074c6:	e001      	b.n	80074cc <vTaskStartScheduler+0x50>
            }
            else
            {
                xReturn = pdFAIL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d102      	bne.n	80074d8 <vTaskStartScheduler+0x5c>
            {
                xReturn = xTimerCreateTimerTask();
 80074d2:	f000 fe6d 	bl	80081b0 <xTimerCreateTimerTask>
 80074d6:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d11e      	bne.n	800751c <vTaskStartScheduler+0xa0>
        __asm volatile
 80074de:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80074e2:	f383 8811 	msr	BASEPRI, r3
 80074e6:	f3bf 8f6f 	isb	sy
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	613b      	str	r3, [r7, #16]
    }
 80074f0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80074f2:	4b14      	ldr	r3, [pc, #80]	@ (8007544 <vTaskStartScheduler+0xc8>)
 80074f4:	f04f 32ff 	mov.w	r2, #4294967295
 80074f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80074fa:	4b13      	ldr	r3, [pc, #76]	@ (8007548 <vTaskStartScheduler+0xcc>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007500:	4b12      	ldr	r3, [pc, #72]	@ (800754c <vTaskStartScheduler+0xd0>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8007506:	f007 fe7d 	bl	800f204 <usecTimerInit>

        traceTASK_SWITCHED_IN();
 800750a:	4b11      	ldr	r3, [pc, #68]	@ (8007550 <vTaskStartScheduler+0xd4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3334      	adds	r3, #52	@ 0x34
 8007510:	4a10      	ldr	r2, [pc, #64]	@ (8007554 <vTaskStartScheduler+0xd8>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	6013      	str	r3, [r2, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007516:	f001 fa1d 	bl	8008954 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 800751a:	e009      	b.n	8007530 <vTaskStartScheduler+0xb4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d105      	bne.n	8007530 <vTaskStartScheduler+0xb4>
 8007524:	f640 022a 	movw	r2, #2090	@ 0x82a
 8007528:	490b      	ldr	r1, [pc, #44]	@ (8007558 <vTaskStartScheduler+0xdc>)
 800752a:	480c      	ldr	r0, [pc, #48]	@ (800755c <vTaskStartScheduler+0xe0>)
 800752c:	f00e fad0 	bl	8015ad0 <assertFail>
}
 8007530:	bf00      	nop
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	0801e1c0 	.word	0x0801e1c0
 800753c:	08007c11 	.word	0x08007c11
 8007540:	20000394 	.word	0x20000394
 8007544:	20000390 	.word	0x20000390
 8007548:	2000037c 	.word	0x2000037c
 800754c:	20000374 	.word	0x20000374
 8007550:	20000284 	.word	0x20000284
 8007554:	e0000004 	.word	0xe0000004
 8007558:	0801e060 	.word	0x0801e060
 800755c:	0801e1c8 	.word	0x0801e1c8

08007560 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007560:	b480      	push	{r7}
 8007562:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007564:	4b04      	ldr	r3, [pc, #16]	@ (8007578 <vTaskSuspendAll+0x18>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3301      	adds	r3, #1
 800756a:	4a03      	ldr	r2, [pc, #12]	@ (8007578 <vTaskSuspendAll+0x18>)
 800756c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	20000398 	.word	0x20000398

0800757c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007586:	2300      	movs	r3, #0
 8007588:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800758a:	4b3f      	ldr	r3, [pc, #252]	@ (8007688 <xTaskResumeAll+0x10c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d105      	bne.n	800759e <xTaskResumeAll+0x22>
 8007592:	f640 0299 	movw	r2, #2201	@ 0x899
 8007596:	493d      	ldr	r1, [pc, #244]	@ (800768c <xTaskResumeAll+0x110>)
 8007598:	483d      	ldr	r0, [pc, #244]	@ (8007690 <xTaskResumeAll+0x114>)
 800759a:	f00e fa99 	bl	8015ad0 <assertFail>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800759e:	f001 fa65 	bl	8008a6c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80075a2:	4b39      	ldr	r3, [pc, #228]	@ (8007688 <xTaskResumeAll+0x10c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	3b01      	subs	r3, #1
 80075a8:	4a37      	ldr	r2, [pc, #220]	@ (8007688 <xTaskResumeAll+0x10c>)
 80075aa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ac:	4b36      	ldr	r3, [pc, #216]	@ (8007688 <xTaskResumeAll+0x10c>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d161      	bne.n	8007678 <xTaskResumeAll+0xfc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075b4:	4b37      	ldr	r3, [pc, #220]	@ (8007694 <xTaskResumeAll+0x118>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d05d      	beq.n	8007678 <xTaskResumeAll+0xfc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075bc:	e02e      	b.n	800761c <xTaskResumeAll+0xa0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075be:	4b36      	ldr	r3, [pc, #216]	@ (8007698 <xTaskResumeAll+0x11c>)
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	3318      	adds	r3, #24
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fdb0 	bl	8006130 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	3304      	adds	r3, #4
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fdab 	bl	8006130 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075de:	2201      	movs	r2, #1
 80075e0:	409a      	lsls	r2, r3
 80075e2:	4b2e      	ldr	r3, [pc, #184]	@ (800769c <xTaskResumeAll+0x120>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	4a2c      	ldr	r2, [pc, #176]	@ (800769c <xTaskResumeAll+0x120>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a29      	ldr	r2, [pc, #164]	@ (80076a0 <xTaskResumeAll+0x124>)
 80075fa:	441a      	add	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7fe fd37 	bl	8006076 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800760c:	4b25      	ldr	r3, [pc, #148]	@ (80076a4 <xTaskResumeAll+0x128>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007612:	429a      	cmp	r2, r3
 8007614:	d302      	bcc.n	800761c <xTaskResumeAll+0xa0>
                    {
                        xYieldPending = pdTRUE;
 8007616:	4b24      	ldr	r3, [pc, #144]	@ (80076a8 <xTaskResumeAll+0x12c>)
 8007618:	2201      	movs	r2, #1
 800761a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800761c:	4b1e      	ldr	r3, [pc, #120]	@ (8007698 <xTaskResumeAll+0x11c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1cc      	bne.n	80075be <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <xTaskResumeAll+0xb2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800762a:	f000 fb97 	bl	8007d5c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800762e:	4b1f      	ldr	r3, [pc, #124]	@ (80076ac <xTaskResumeAll+0x130>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d010      	beq.n	800765c <xTaskResumeAll+0xe0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800763a:	f000 f84b 	bl	80076d4 <xTaskIncrementTick>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <xTaskResumeAll+0xce>
                            {
                                xYieldPending = pdTRUE;
 8007644:	4b18      	ldr	r3, [pc, #96]	@ (80076a8 <xTaskResumeAll+0x12c>)
 8007646:	2201      	movs	r2, #1
 8007648:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f1      	bne.n	800763a <xTaskResumeAll+0xbe>

                        xPendedTicks = 0;
 8007656:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <xTaskResumeAll+0x130>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800765c:	4b12      	ldr	r3, [pc, #72]	@ (80076a8 <xTaskResumeAll+0x12c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <xTaskResumeAll+0xfc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007664:	2301      	movs	r3, #1
 8007666:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007668:	4b11      	ldr	r3, [pc, #68]	@ (80076b0 <xTaskResumeAll+0x134>)
 800766a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800766e:	601a      	str	r2, [r3, #0]
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007678:	f001 fa26 	bl	8008ac8 <vPortExitCritical>

    return xAlreadyYielded;
 800767c:	68bb      	ldr	r3, [r7, #8]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000398 	.word	0x20000398
 800768c:	0801e060 	.word	0x0801e060
 8007690:	0801e1fc 	.word	0x0801e1fc
 8007694:	20000370 	.word	0x20000370
 8007698:	20000330 	.word	0x20000330
 800769c:	20000378 	.word	0x20000378
 80076a0:	20000288 	.word	0x20000288
 80076a4:	20000284 	.word	0x20000284
 80076a8:	20000384 	.word	0x20000384
 80076ac:	20000380 	.word	0x20000380
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80076ba:	4b05      	ldr	r3, [pc, #20]	@ (80076d0 <xTaskGetTickCount+0x1c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80076c0:	687b      	ldr	r3, [r7, #4]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	370c      	adds	r7, #12
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000374 	.word	0x20000374

080076d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b086      	sub	sp, #24
 80076d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80076de:	4a4e      	ldr	r2, [pc, #312]	@ (8007818 <xTaskIncrementTick+0x144>)
 80076e0:	4b4e      	ldr	r3, [pc, #312]	@ (800781c <xTaskIncrementTick+0x148>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6013      	str	r3, [r2, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076e6:	4b4e      	ldr	r3, [pc, #312]	@ (8007820 <xTaskIncrementTick+0x14c>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f040 8089 	bne.w	8007802 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076f0:	4b4a      	ldr	r3, [pc, #296]	@ (800781c <xTaskIncrementTick+0x148>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3301      	adds	r3, #1
 80076f6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80076f8:	4a48      	ldr	r2, [pc, #288]	@ (800781c <xTaskIncrementTick+0x148>)
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d11b      	bne.n	800773c <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8007704:	4b47      	ldr	r3, [pc, #284]	@ (8007824 <xTaskIncrementTick+0x150>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d005      	beq.n	800771a <xTaskIncrementTick+0x46>
 800770e:	f640 22ac 	movw	r2, #2732	@ 0xaac
 8007712:	4945      	ldr	r1, [pc, #276]	@ (8007828 <xTaskIncrementTick+0x154>)
 8007714:	4845      	ldr	r0, [pc, #276]	@ (800782c <xTaskIncrementTick+0x158>)
 8007716:	f00e f9db 	bl	8015ad0 <assertFail>
 800771a:	4b42      	ldr	r3, [pc, #264]	@ (8007824 <xTaskIncrementTick+0x150>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	4b43      	ldr	r3, [pc, #268]	@ (8007830 <xTaskIncrementTick+0x15c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a3f      	ldr	r2, [pc, #252]	@ (8007824 <xTaskIncrementTick+0x150>)
 8007726:	6013      	str	r3, [r2, #0]
 8007728:	4a41      	ldr	r2, [pc, #260]	@ (8007830 <xTaskIncrementTick+0x15c>)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	4b41      	ldr	r3, [pc, #260]	@ (8007834 <xTaskIncrementTick+0x160>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3301      	adds	r3, #1
 8007734:	4a3f      	ldr	r2, [pc, #252]	@ (8007834 <xTaskIncrementTick+0x160>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	f000 fb10 	bl	8007d5c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800773c:	4b3e      	ldr	r3, [pc, #248]	@ (8007838 <xTaskIncrementTick+0x164>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	429a      	cmp	r2, r3
 8007744:	d348      	bcc.n	80077d8 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007746:	4b37      	ldr	r3, [pc, #220]	@ (8007824 <xTaskIncrementTick+0x150>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d104      	bne.n	800775a <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007750:	4b39      	ldr	r3, [pc, #228]	@ (8007838 <xTaskIncrementTick+0x164>)
 8007752:	f04f 32ff 	mov.w	r2, #4294967295
 8007756:	601a      	str	r2, [r3, #0]
                    break;
 8007758:	e03e      	b.n	80077d8 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800775a:	4b32      	ldr	r3, [pc, #200]	@ (8007824 <xTaskIncrementTick+0x150>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	429a      	cmp	r2, r3
 8007770:	d203      	bcs.n	800777a <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007772:	4a31      	ldr	r2, [pc, #196]	@ (8007838 <xTaskIncrementTick+0x164>)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007778:	e02e      	b.n	80077d8 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	3304      	adds	r3, #4
 800777e:	4618      	mov	r0, r3
 8007780:	f7fe fcd6 	bl	8006130 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	3318      	adds	r3, #24
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fccd 	bl	8006130 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800779a:	2201      	movs	r2, #1
 800779c:	409a      	lsls	r2, r3
 800779e:	4b27      	ldr	r3, [pc, #156]	@ (800783c <xTaskIncrementTick+0x168>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	4a25      	ldr	r2, [pc, #148]	@ (800783c <xTaskIncrementTick+0x168>)
 80077a6:	6013      	str	r3, [r2, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ac:	4613      	mov	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	4413      	add	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4a22      	ldr	r2, [pc, #136]	@ (8007840 <xTaskIncrementTick+0x16c>)
 80077b6:	441a      	add	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	3304      	adds	r3, #4
 80077bc:	4619      	mov	r1, r3
 80077be:	4610      	mov	r0, r2
 80077c0:	f7fe fc59 	bl	8006076 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077c8:	4b1e      	ldr	r3, [pc, #120]	@ (8007844 <xTaskIncrementTick+0x170>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d3b9      	bcc.n	8007746 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80077d2:	2301      	movs	r3, #1
 80077d4:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d6:	e7b6      	b.n	8007746 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077d8:	4b1a      	ldr	r3, [pc, #104]	@ (8007844 <xTaskIncrementTick+0x170>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077de:	4918      	ldr	r1, [pc, #96]	@ (8007840 <xTaskIncrementTick+0x16c>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d901      	bls.n	80077f4 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80077f4:	4b14      	ldr	r3, [pc, #80]	@ (8007848 <xTaskIncrementTick+0x174>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d007      	beq.n	800780c <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e004      	b.n	800780c <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007802:	4b12      	ldr	r3, [pc, #72]	@ (800784c <xTaskIncrementTick+0x178>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3301      	adds	r3, #1
 8007808:	4a10      	ldr	r2, [pc, #64]	@ (800784c <xTaskIncrementTick+0x178>)
 800780a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800780c:	697b      	ldr	r3, [r7, #20]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3718      	adds	r7, #24
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	e0000008 	.word	0xe0000008
 800781c:	20000374 	.word	0x20000374
 8007820:	20000398 	.word	0x20000398
 8007824:	20000328 	.word	0x20000328
 8007828:	0801e060 	.word	0x0801e060
 800782c:	0801e230 	.word	0x0801e230
 8007830:	2000032c 	.word	0x2000032c
 8007834:	20000388 	.word	0x20000388
 8007838:	20000390 	.word	0x20000390
 800783c:	20000378 	.word	0x20000378
 8007840:	20000288 	.word	0x20000288
 8007844:	20000284 	.word	0x20000284
 8007848:	20000384 	.word	0x20000384
 800784c:	20000380 	.word	0x20000380

08007850 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d103      	bne.n	8007868 <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 8007860:	4b08      	ldr	r3, [pc, #32]	@ (8007884 <vTaskSetApplicationTaskTag+0x34>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	60fb      	str	r3, [r7, #12]
 8007866:	e001      	b.n	800786c <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 800786c:	f001 f8fe 	bl	8008a6c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        taskEXIT_CRITICAL();
 8007876:	f001 f927 	bl	8008ac8 <vPortExitCritical>
    }
 800787a:	bf00      	nop
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20000284 	.word	0x20000284

08007888 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800788e:	4b3c      	ldr	r3, [pc, #240]	@ (8007980 <vTaskSwitchContext+0xf8>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007896:	4b3b      	ldr	r3, [pc, #236]	@ (8007984 <vTaskSwitchContext+0xfc>)
 8007898:	2201      	movs	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800789c:	e06b      	b.n	8007976 <vTaskSwitchContext+0xee>
        xYieldPending = pdFALSE;
 800789e:	4b39      	ldr	r3, [pc, #228]	@ (8007984 <vTaskSwitchContext+0xfc>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80078a4:	f007 fce6 	bl	800f274 <usecTimestamp>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4b36      	ldr	r3, [pc, #216]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078ae:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 80078b0:	4b35      	ldr	r3, [pc, #212]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	4b35      	ldr	r3, [pc, #212]	@ (800798c <vTaskSwitchContext+0x104>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d909      	bls.n	80078d0 <vTaskSwitchContext+0x48>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80078bc:	4b32      	ldr	r3, [pc, #200]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	4b32      	ldr	r3, [pc, #200]	@ (800798c <vTaskSwitchContext+0x104>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	1ad1      	subs	r1, r2, r3
 80078c6:	4b32      	ldr	r3, [pc, #200]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80078cc:	440a      	add	r2, r1
 80078ce:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 80078d0:	4b2d      	ldr	r3, [pc, #180]	@ (8007988 <vTaskSwitchContext+0x100>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a2d      	ldr	r2, [pc, #180]	@ (800798c <vTaskSwitchContext+0x104>)
 80078d6:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80078d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	4b2c      	ldr	r3, [pc, #176]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d808      	bhi.n	80078fa <vTaskSwitchContext+0x72>
 80078e8:	4b29      	ldr	r3, [pc, #164]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	4b28      	ldr	r3, [pc, #160]	@ (8007990 <vTaskSwitchContext+0x108>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3334      	adds	r3, #52	@ 0x34
 80078f2:	4619      	mov	r1, r3
 80078f4:	4610      	mov	r0, r2
 80078f6:	f008 ff6b 	bl	80107d0 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fa:	4b26      	ldr	r3, [pc, #152]	@ (8007994 <vTaskSwitchContext+0x10c>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	fab3 f383 	clz	r3, r3
 8007906:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	f1c3 031f 	rsb	r3, r3, #31
 800790e:	60fb      	str	r3, [r7, #12]
 8007910:	4921      	ldr	r1, [pc, #132]	@ (8007998 <vTaskSwitchContext+0x110>)
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	4613      	mov	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4413      	add	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	440b      	add	r3, r1
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d105      	bne.n	8007930 <vTaskSwitchContext+0xa8>
 8007924:	f640 32e7 	movw	r2, #3047	@ 0xbe7
 8007928:	491c      	ldr	r1, [pc, #112]	@ (800799c <vTaskSwitchContext+0x114>)
 800792a:	481d      	ldr	r0, [pc, #116]	@ (80079a0 <vTaskSwitchContext+0x118>)
 800792c:	f00e f8d0 	bl	8015ad0 <assertFail>
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4613      	mov	r3, r2
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	4a17      	ldr	r2, [pc, #92]	@ (8007998 <vTaskSwitchContext+0x110>)
 800793c:	4413      	add	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	685a      	ldr	r2, [r3, #4]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	605a      	str	r2, [r3, #4]
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	3308      	adds	r3, #8
 8007952:	429a      	cmp	r2, r3
 8007954:	d104      	bne.n	8007960 <vTaskSwitchContext+0xd8>
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	605a      	str	r2, [r3, #4]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	4a0a      	ldr	r2, [pc, #40]	@ (8007990 <vTaskSwitchContext+0x108>)
 8007968:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800796a:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <vTaskSwitchContext+0x108>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	3334      	adds	r3, #52	@ 0x34
 8007970:	4a0c      	ldr	r2, [pc, #48]	@ (80079a4 <vTaskSwitchContext+0x11c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6013      	str	r3, [r2, #0]
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000398 	.word	0x20000398
 8007984:	20000384 	.word	0x20000384
 8007988:	200003a0 	.word	0x200003a0
 800798c:	2000039c 	.word	0x2000039c
 8007990:	20000284 	.word	0x20000284
 8007994:	20000378 	.word	0x20000378
 8007998:	20000288 	.word	0x20000288
 800799c:	0801e060 	.word	0x0801e060
 80079a0:	0801e25c 	.word	0x0801e25c
 80079a4:	e0000004 	.word	0xe0000004

080079a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <vTaskPlaceOnEventList+0x1c>
 80079b8:	f640 4201 	movw	r2, #3073	@ 0xc01
 80079bc:	4909      	ldr	r1, [pc, #36]	@ (80079e4 <vTaskPlaceOnEventList+0x3c>)
 80079be:	480a      	ldr	r0, [pc, #40]	@ (80079e8 <vTaskPlaceOnEventList+0x40>)
 80079c0:	f00e f886 	bl	8015ad0 <assertFail>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079c4:	4b09      	ldr	r3, [pc, #36]	@ (80079ec <vTaskPlaceOnEventList+0x44>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	3318      	adds	r3, #24
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f7fe fb76 	bl	80060be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079d2:	2101      	movs	r1, #1
 80079d4:	6838      	ldr	r0, [r7, #0]
 80079d6:	f000 fb85 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	0801e060 	.word	0x0801e060
 80079e8:	0801e2a4 	.word	0x0801e2a4
 80079ec:	20000284 	.word	0x20000284

080079f0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d105      	bne.n	8007a0e <vTaskPlaceOnEventListRestricted+0x1e>
 8007a02:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8007a06:	490c      	ldr	r1, [pc, #48]	@ (8007a38 <vTaskPlaceOnEventListRestricted+0x48>)
 8007a08:	480c      	ldr	r0, [pc, #48]	@ (8007a3c <vTaskPlaceOnEventListRestricted+0x4c>)
 8007a0a:	f00e f861 	bl	8015ad0 <assertFail>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a40 <vTaskPlaceOnEventListRestricted+0x50>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3318      	adds	r3, #24
 8007a14:	4619      	mov	r1, r3
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f7fe fb2d 	bl	8006076 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <vTaskPlaceOnEventListRestricted+0x38>
        {
            xTicksToWait = portMAX_DELAY;
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295
 8007a26:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	68b8      	ldr	r0, [r7, #8]
 8007a2c:	f000 fb5a 	bl	80080e4 <prvAddCurrentTaskToDelayedList>
    }
 8007a30:	bf00      	nop
 8007a32:	3710      	adds	r7, #16
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}
 8007a38:	0801e060 	.word	0x0801e060
 8007a3c:	0801e2a4 	.word	0x0801e2a4
 8007a40:	20000284 	.word	0x20000284

08007a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d105      	bne.n	8007a66 <xTaskRemoveFromEventList+0x22>
 8007a5a:	f44f 6246 	mov.w	r2, #3168	@ 0xc60
 8007a5e:	4922      	ldr	r1, [pc, #136]	@ (8007ae8 <xTaskRemoveFromEventList+0xa4>)
 8007a60:	4822      	ldr	r0, [pc, #136]	@ (8007aec <xTaskRemoveFromEventList+0xa8>)
 8007a62:	f00e f835 	bl	8015ad0 <assertFail>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3318      	adds	r3, #24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fe fb60 	bl	8006130 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a70:	4b1f      	ldr	r3, [pc, #124]	@ (8007af0 <xTaskRemoveFromEventList+0xac>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d11c      	bne.n	8007ab2 <xTaskRemoveFromEventList+0x6e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fb57 	bl	8006130 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a86:	2201      	movs	r2, #1
 8007a88:	409a      	lsls	r2, r3
 8007a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007af4 <xTaskRemoveFromEventList+0xb0>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	4a18      	ldr	r2, [pc, #96]	@ (8007af4 <xTaskRemoveFromEventList+0xb0>)
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a98:	4613      	mov	r3, r2
 8007a9a:	009b      	lsls	r3, r3, #2
 8007a9c:	4413      	add	r3, r2
 8007a9e:	009b      	lsls	r3, r3, #2
 8007aa0:	4a15      	ldr	r2, [pc, #84]	@ (8007af8 <xTaskRemoveFromEventList+0xb4>)
 8007aa2:	441a      	add	r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	3304      	adds	r3, #4
 8007aa8:	4619      	mov	r1, r3
 8007aaa:	4610      	mov	r0, r2
 8007aac:	f7fe fae3 	bl	8006076 <vListInsertEnd>
 8007ab0:	e005      	b.n	8007abe <xTaskRemoveFromEventList+0x7a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	3318      	adds	r3, #24
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4810      	ldr	r0, [pc, #64]	@ (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007aba:	f7fe fadc 	bl	8006076 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <xTaskRemoveFromEventList+0xbc>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d905      	bls.n	8007ad8 <xTaskRemoveFromEventList+0x94>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8007b04 <xTaskRemoveFromEventList+0xc0>)
 8007ad2:	2201      	movs	r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	e001      	b.n	8007adc <xTaskRemoveFromEventList+0x98>
    }
    else
    {
        xReturn = pdFALSE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8007adc:	68fb      	ldr	r3, [r7, #12]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3710      	adds	r7, #16
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}
 8007ae6:	bf00      	nop
 8007ae8:	0801e060 	.word	0x0801e060
 8007aec:	0801e2cc 	.word	0x0801e2cc
 8007af0:	20000398 	.word	0x20000398
 8007af4:	20000378 	.word	0x20000378
 8007af8:	20000288 	.word	0x20000288
 8007afc:	20000330 	.word	0x20000330
 8007b00:	20000284 	.word	0x20000284
 8007b04:	20000384 	.word	0x20000384

08007b08 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b10:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <vTaskInternalSetTimeOutState+0x24>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007b18:	4b05      	ldr	r3, [pc, #20]	@ (8007b30 <vTaskInternalSetTimeOutState+0x28>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	20000388 	.word	0x20000388
 8007b30:	20000374 	.word	0x20000374

08007b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b086      	sub	sp, #24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <xTaskCheckForTimeOut+0x1c>
 8007b44:	f640 42db 	movw	r2, #3291	@ 0xcdb
 8007b48:	4926      	ldr	r1, [pc, #152]	@ (8007be4 <xTaskCheckForTimeOut+0xb0>)
 8007b4a:	4827      	ldr	r0, [pc, #156]	@ (8007be8 <xTaskCheckForTimeOut+0xb4>)
 8007b4c:	f00d ffc0 	bl	8015ad0 <assertFail>
    configASSERT( pxTicksToWait );
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d105      	bne.n	8007b62 <xTaskCheckForTimeOut+0x2e>
 8007b56:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8007b5a:	4922      	ldr	r1, [pc, #136]	@ (8007be4 <xTaskCheckForTimeOut+0xb0>)
 8007b5c:	4823      	ldr	r0, [pc, #140]	@ (8007bec <xTaskCheckForTimeOut+0xb8>)
 8007b5e:	f00d ffb7 	bl	8015ad0 <assertFail>

    taskENTER_CRITICAL();
 8007b62:	f000 ff83 	bl	8008a6c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007b66:	4b22      	ldr	r3, [pc, #136]	@ (8007bf0 <xTaskCheckForTimeOut+0xbc>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	1ad3      	subs	r3, r2, r3
 8007b74:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7e:	d102      	bne.n	8007b86 <xTaskCheckForTimeOut+0x52>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e026      	b.n	8007bd4 <xTaskCheckForTimeOut+0xa0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681a      	ldr	r2, [r3, #0]
 8007b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8007bf4 <xTaskCheckForTimeOut+0xc0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d00a      	beq.n	8007ba8 <xTaskCheckForTimeOut+0x74>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d305      	bcc.n	8007ba8 <xTaskCheckForTimeOut+0x74>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
 8007ba6:	e015      	b.n	8007bd4 <xTaskCheckForTimeOut+0xa0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d20b      	bcs.n	8007bca <xTaskCheckForTimeOut+0x96>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff ffa2 	bl	8007b08 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e004      	b.n	8007bd4 <xTaskCheckForTimeOut+0xa0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8007bd4:	f000 ff78 	bl	8008ac8 <vPortExitCritical>

    return xReturn;
 8007bd8:	697b      	ldr	r3, [r7, #20]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	0801e060 	.word	0x0801e060
 8007be8:	0801e2fc 	.word	0x0801e2fc
 8007bec:	0801e308 	.word	0x0801e308
 8007bf0:	20000374 	.word	0x20000374
 8007bf4:	20000388 	.word	0x20000388

08007bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007bfc:	4b03      	ldr	r3, [pc, #12]	@ (8007c0c <vTaskMissedYield+0x14>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	20000384 	.word	0x20000384

08007c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007c18:	f000 f844 	bl	8007ca4 <prvCheckTasksWaitingTermination>
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8007c1c:	f008 fdc2 	bl	80107a4 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8007c20:	bf00      	nop
 8007c22:	e7f9      	b.n	8007c18 <prvIdleTask+0x8>

08007c24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
 8007c2e:	e00c      	b.n	8007c4a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	4413      	add	r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	4a12      	ldr	r2, [pc, #72]	@ (8007c84 <prvInitialiseTaskLists+0x60>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fe f9ec 	bl	800601c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	3301      	adds	r3, #1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2b05      	cmp	r3, #5
 8007c4e:	d9ef      	bls.n	8007c30 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007c50:	480d      	ldr	r0, [pc, #52]	@ (8007c88 <prvInitialiseTaskLists+0x64>)
 8007c52:	f7fe f9e3 	bl	800601c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007c56:	480d      	ldr	r0, [pc, #52]	@ (8007c8c <prvInitialiseTaskLists+0x68>)
 8007c58:	f7fe f9e0 	bl	800601c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007c5c:	480c      	ldr	r0, [pc, #48]	@ (8007c90 <prvInitialiseTaskLists+0x6c>)
 8007c5e:	f7fe f9dd 	bl	800601c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007c62:	480c      	ldr	r0, [pc, #48]	@ (8007c94 <prvInitialiseTaskLists+0x70>)
 8007c64:	f7fe f9da 	bl	800601c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007c68:	480b      	ldr	r0, [pc, #44]	@ (8007c98 <prvInitialiseTaskLists+0x74>)
 8007c6a:	f7fe f9d7 	bl	800601c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <prvInitialiseTaskLists+0x78>)
 8007c70:	4a05      	ldr	r2, [pc, #20]	@ (8007c88 <prvInitialiseTaskLists+0x64>)
 8007c72:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c74:	4b0a      	ldr	r3, [pc, #40]	@ (8007ca0 <prvInitialiseTaskLists+0x7c>)
 8007c76:	4a05      	ldr	r2, [pc, #20]	@ (8007c8c <prvInitialiseTaskLists+0x68>)
 8007c78:	601a      	str	r2, [r3, #0]
}
 8007c7a:	bf00      	nop
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000288 	.word	0x20000288
 8007c88:	20000300 	.word	0x20000300
 8007c8c:	20000314 	.word	0x20000314
 8007c90:	20000330 	.word	0x20000330
 8007c94:	20000344 	.word	0x20000344
 8007c98:	2000035c 	.word	0x2000035c
 8007c9c:	20000328 	.word	0x20000328
 8007ca0:	2000032c 	.word	0x2000032c

08007ca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007caa:	e019      	b.n	8007ce0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007cac:	f000 fede 	bl	8008a6c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb0:	4b10      	ldr	r3, [pc, #64]	@ (8007cf4 <prvCheckTasksWaitingTermination+0x50>)
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fe fa37 	bl	8006130 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x54>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	4a0b      	ldr	r2, [pc, #44]	@ (8007cf8 <prvCheckTasksWaitingTermination+0x54>)
 8007cca:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <prvCheckTasksWaitingTermination+0x58>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8007cfc <prvCheckTasksWaitingTermination+0x58>)
 8007cd4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007cd6:	f000 fef7 	bl	8008ac8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f810 	bl	8007d00 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ce0:	4b06      	ldr	r3, [pc, #24]	@ (8007cfc <prvCheckTasksWaitingTermination+0x58>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e1      	bne.n	8007cac <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007ce8:	bf00      	nop
 8007cea:	bf00      	nop
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000344 	.word	0x20000344
 8007cf8:	20000370 	.word	0x20000370
 8007cfc:	20000358 	.word	0x20000358

08007d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d108      	bne.n	8007d24 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d16:	4618      	mov	r0, r3
 8007d18:	f001 f882 	bl	8008e20 <vPortFree>
                    vPortFree( pxTCB );
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f001 f87f 	bl	8008e20 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007d22:	e013      	b.n	8007d4c <prvDeleteTCB+0x4c>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d103      	bne.n	8007d36 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 f876 	bl	8008e20 <vPortFree>
    }
 8007d34:	e00a      	b.n	8007d4c <prvDeleteTCB+0x4c>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d005      	beq.n	8007d4c <prvDeleteTCB+0x4c>
 8007d40:	f640 727a 	movw	r2, #3962	@ 0xf7a
 8007d44:	4903      	ldr	r1, [pc, #12]	@ (8007d54 <prvDeleteTCB+0x54>)
 8007d46:	4804      	ldr	r0, [pc, #16]	@ (8007d58 <prvDeleteTCB+0x58>)
 8007d48:	f00d fec2 	bl	8015ad0 <assertFail>
    }
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	0801e060 	.word	0x0801e060
 8007d58:	0801e318 	.word	0x0801e318

08007d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d60:	4b0a      	ldr	r3, [pc, #40]	@ (8007d8c <prvResetNextTaskUnblockTime+0x30>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007d6a:	4b09      	ldr	r3, [pc, #36]	@ (8007d90 <prvResetNextTaskUnblockTime+0x34>)
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007d72:	e005      	b.n	8007d80 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <prvResetNextTaskUnblockTime+0x30>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a04      	ldr	r2, [pc, #16]	@ (8007d90 <prvResetNextTaskUnblockTime+0x34>)
 8007d7e:	6013      	str	r3, [r2, #0]
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	20000328 	.word	0x20000328
 8007d90:	20000390 	.word	0x20000390

08007d94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc8 <xTaskGetSchedulerState+0x34>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d102      	bne.n	8007da8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007da2:	2301      	movs	r3, #1
 8007da4:	607b      	str	r3, [r7, #4]
 8007da6:	e008      	b.n	8007dba <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da8:	4b08      	ldr	r3, [pc, #32]	@ (8007dcc <xTaskGetSchedulerState+0x38>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d102      	bne.n	8007db6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007db0:	2302      	movs	r3, #2
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	e001      	b.n	8007dba <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007db6:	2300      	movs	r3, #0
 8007db8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007dba:	687b      	ldr	r3, [r7, #4]
    }
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	2000037c 	.word	0x2000037c
 8007dcc:	20000398 	.word	0x20000398

08007dd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d05e      	beq.n	8007ea4 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dea:	4b31      	ldr	r3, [pc, #196]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d24e      	bcs.n	8007e92 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db06      	blt.n	8007e0a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e02:	f1c3 0206 	rsb	r2, r3, #6
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	6959      	ldr	r1, [r3, #20]
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e12:	4613      	mov	r3, r2
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	009b      	lsls	r3, r3, #2
 8007e1a:	4a26      	ldr	r2, [pc, #152]	@ (8007eb4 <xTaskPriorityInherit+0xe4>)
 8007e1c:	4413      	add	r3, r2
 8007e1e:	4299      	cmp	r1, r3
 8007e20:	d12f      	bne.n	8007e82 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	3304      	adds	r3, #4
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe f982 	bl	8006130 <uxListRemove>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e36:	2201      	movs	r2, #1
 8007e38:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3c:	43da      	mvns	r2, r3
 8007e3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4013      	ands	r3, r2
 8007e44:	4a1c      	ldr	r2, [pc, #112]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e46:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e48:	4b19      	ldr	r3, [pc, #100]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e56:	2201      	movs	r2, #1
 8007e58:	409a      	lsls	r2, r3
 8007e5a:	4b17      	ldr	r3, [pc, #92]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	4a15      	ldr	r2, [pc, #84]	@ (8007eb8 <xTaskPriorityInherit+0xe8>)
 8007e62:	6013      	str	r3, [r2, #0]
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4a10      	ldr	r2, [pc, #64]	@ (8007eb4 <xTaskPriorityInherit+0xe4>)
 8007e72:	441a      	add	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	3304      	adds	r3, #4
 8007e78:	4619      	mov	r1, r3
 8007e7a:	4610      	mov	r0, r2
 8007e7c:	f7fe f8fb 	bl	8006076 <vListInsertEnd>
 8007e80:	e004      	b.n	8007e8c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e82:	4b0b      	ldr	r3, [pc, #44]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	60fb      	str	r3, [r7, #12]
 8007e90:	e008      	b.n	8007ea4 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e96:	4b06      	ldr	r3, [pc, #24]	@ (8007eb0 <xTaskPriorityInherit+0xe0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d201      	bcs.n	8007ea4 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
    }
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3710      	adds	r7, #16
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000284 	.word	0x20000284
 8007eb4:	20000288 	.word	0x20000288
 8007eb8:	20000378 	.word	0x20000378

08007ebc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d059      	beq.n	8007f86 <xTaskPriorityDisinherit+0xca>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8007f90 <xTaskPriorityDisinherit+0xd4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d005      	beq.n	8007ee8 <xTaskPriorityDisinherit+0x2c>
 8007edc:	f241 022d 	movw	r2, #4141	@ 0x102d
 8007ee0:	492c      	ldr	r1, [pc, #176]	@ (8007f94 <xTaskPriorityDisinherit+0xd8>)
 8007ee2:	482d      	ldr	r0, [pc, #180]	@ (8007f98 <xTaskPriorityDisinherit+0xdc>)
 8007ee4:	f00d fdf4 	bl	8015ad0 <assertFail>
            configASSERT( pxTCB->uxMutexesHeld );
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d105      	bne.n	8007efc <xTaskPriorityDisinherit+0x40>
 8007ef0:	f241 022e 	movw	r2, #4142	@ 0x102e
 8007ef4:	4927      	ldr	r1, [pc, #156]	@ (8007f94 <xTaskPriorityDisinherit+0xd8>)
 8007ef6:	4829      	ldr	r0, [pc, #164]	@ (8007f9c <xTaskPriorityDisinherit+0xe0>)
 8007ef8:	f00d fdea 	bl	8015ad0 <assertFail>
            ( pxTCB->uxMutexesHeld )--;
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f00:	1e5a      	subs	r2, r3, #1
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d039      	beq.n	8007f86 <xTaskPriorityDisinherit+0xca>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d135      	bne.n	8007f86 <xTaskPriorityDisinherit+0xca>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	3304      	adds	r3, #4
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f7fe f906 	bl	8006130 <uxListRemove>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10a      	bne.n	8007f40 <xTaskPriorityDisinherit+0x84>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2e:	2201      	movs	r2, #1
 8007f30:	fa02 f303 	lsl.w	r3, r2, r3
 8007f34:	43da      	mvns	r2, r3
 8007f36:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	4a18      	ldr	r2, [pc, #96]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f3e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f4c:	f1c3 0206 	rsb	r2, r3, #6
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f58:	2201      	movs	r2, #1
 8007f5a:	409a      	lsls	r2, r3
 8007f5c:	4b10      	ldr	r3, [pc, #64]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	4a0f      	ldr	r2, [pc, #60]	@ (8007fa0 <xTaskPriorityDisinherit+0xe4>)
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	4a0c      	ldr	r2, [pc, #48]	@ (8007fa4 <xTaskPriorityDisinherit+0xe8>)
 8007f74:	441a      	add	r2, r3
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	3304      	adds	r3, #4
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	f7fe f87a 	bl	8006076 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007f82:	2301      	movs	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007f86:	68fb      	ldr	r3, [r7, #12]
    }
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20000284 	.word	0x20000284
 8007f94:	0801e060 	.word	0x0801e060
 8007f98:	0801e360 	.word	0x0801e360
 8007f9c:	0801e378 	.word	0x0801e378
 8007fa0:	20000378 	.word	0x20000378
 8007fa4:	20000288 	.word	0x20000288

08007fa8 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d06d      	beq.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d105      	bne.n	8007fd4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8007fc8:	f241 027d 	movw	r2, #4221	@ 0x107d
 8007fcc:	4935      	ldr	r1, [pc, #212]	@ (80080a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fce:	4836      	ldr	r0, [pc, #216]	@ (80080a8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007fd0:	f00d fd7e 	bl	8015ad0 <assertFail>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d902      	bls.n	8007fe4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	617b      	str	r3, [r7, #20]
 8007fe2:	e002      	b.n	8007fea <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fe8:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d053      	beq.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ff8:	68fa      	ldr	r2, [r7, #12]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d14e      	bne.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007ffe:	4b2b      	ldr	r3, [pc, #172]	@ (80080ac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	429a      	cmp	r2, r3
 8008006:	d105      	bne.n	8008014 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8008008:	f241 0298 	movw	r2, #4248	@ 0x1098
 800800c:	4925      	ldr	r1, [pc, #148]	@ (80080a4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800800e:	4828      	ldr	r0, [pc, #160]	@ (80080b0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8008010:	f00d fd5e 	bl	8015ad0 <assertFail>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008018:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	699b      	ldr	r3, [r3, #24]
 8008024:	2b00      	cmp	r3, #0
 8008026:	db04      	blt.n	8008032 <vTaskPriorityDisinheritAfterTimeout+0x8a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f1c3 0206 	rsb	r2, r3, #6
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6959      	ldr	r1, [r3, #20]
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	4613      	mov	r3, r2
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	4413      	add	r3, r2
 800803e:	009b      	lsls	r3, r3, #2
 8008040:	4a1c      	ldr	r2, [pc, #112]	@ (80080b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8008042:	4413      	add	r3, r2
 8008044:	4299      	cmp	r1, r3
 8008046:	d129      	bne.n	800809c <vTaskPriorityDisinheritAfterTimeout+0xf4>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	3304      	adds	r3, #4
 800804c:	4618      	mov	r0, r3
 800804e:	f7fe f86f 	bl	8006130 <uxListRemove>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10a      	bne.n	800806e <vTaskPriorityDisinheritAfterTimeout+0xc6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	2201      	movs	r2, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	43da      	mvns	r2, r3
 8008064:	4b14      	ldr	r3, [pc, #80]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4013      	ands	r3, r2
 800806a:	4a13      	ldr	r2, [pc, #76]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800806c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008072:	2201      	movs	r2, #1
 8008074:	409a      	lsls	r2, r3
 8008076:	4b10      	ldr	r3, [pc, #64]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4313      	orrs	r3, r2
 800807c:	4a0e      	ldr	r2, [pc, #56]	@ (80080b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800807e:	6013      	str	r3, [r2, #0]
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008084:	4613      	mov	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4413      	add	r3, r2
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	4a09      	ldr	r2, [pc, #36]	@ (80080b4 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800808e:	441a      	add	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	3304      	adds	r3, #4
 8008094:	4619      	mov	r1, r3
 8008096:	4610      	mov	r0, r2
 8008098:	f7fd ffed 	bl	8006076 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800809c:	bf00      	nop
 800809e:	3718      	adds	r7, #24
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	0801e060 	.word	0x0801e060
 80080a8:	0801e378 	.word	0x0801e378
 80080ac:	20000284 	.word	0x20000284
 80080b0:	0801e390 	.word	0x0801e390
 80080b4:	20000288 	.word	0x20000288
 80080b8:	20000378 	.word	0x20000378

080080bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80080c0:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d004      	beq.n	80080d2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80080c8:	4b05      	ldr	r3, [pc, #20]	@ (80080e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080ce:	3201      	adds	r2, #1
 80080d0:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80080d2:	4b03      	ldr	r3, [pc, #12]	@ (80080e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80080d4:	681b      	ldr	r3, [r3, #0]
    }
 80080d6:	4618      	mov	r0, r3
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	20000284 	.word	0x20000284

080080e4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80080ee:	4b29      	ldr	r3, [pc, #164]	@ (8008194 <prvAddCurrentTaskToDelayedList+0xb0>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080f4:	4b28      	ldr	r3, [pc, #160]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3304      	adds	r3, #4
 80080fa:	4618      	mov	r0, r3
 80080fc:	f7fe f818 	bl	8006130 <uxListRemove>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008106:	4b24      	ldr	r3, [pc, #144]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800810c:	2201      	movs	r2, #1
 800810e:	fa02 f303 	lsl.w	r3, r2, r3
 8008112:	43da      	mvns	r2, r3
 8008114:	4b21      	ldr	r3, [pc, #132]	@ (800819c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4013      	ands	r3, r2
 800811a:	4a20      	ldr	r2, [pc, #128]	@ (800819c <prvAddCurrentTaskToDelayedList+0xb8>)
 800811c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008124:	d10a      	bne.n	800813c <prvAddCurrentTaskToDelayedList+0x58>
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d007      	beq.n	800813c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800812c:	4b1a      	ldr	r3, [pc, #104]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3304      	adds	r3, #4
 8008132:	4619      	mov	r1, r3
 8008134:	481a      	ldr	r0, [pc, #104]	@ (80081a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008136:	f7fd ff9e 	bl	8006076 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800813a:	e026      	b.n	800818a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4413      	add	r3, r2
 8008142:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008144:	4b14      	ldr	r3, [pc, #80]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800814c:	68ba      	ldr	r2, [r7, #8]
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	429a      	cmp	r2, r3
 8008152:	d209      	bcs.n	8008168 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008154:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	3304      	adds	r3, #4
 800815e:	4619      	mov	r1, r3
 8008160:	4610      	mov	r0, r2
 8008162:	f7fd ffac 	bl	80060be <vListInsert>
}
 8008166:	e010      	b.n	800818a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008168:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	4b0a      	ldr	r3, [pc, #40]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xb4>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	3304      	adds	r3, #4
 8008172:	4619      	mov	r1, r3
 8008174:	4610      	mov	r0, r2
 8008176:	f7fd ffa2 	bl	80060be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800817a:	4b0c      	ldr	r3, [pc, #48]	@ (80081ac <prvAddCurrentTaskToDelayedList+0xc8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	429a      	cmp	r2, r3
 8008182:	d202      	bcs.n	800818a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008184:	4a09      	ldr	r2, [pc, #36]	@ (80081ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6013      	str	r3, [r2, #0]
}
 800818a:	bf00      	nop
 800818c:	3710      	adds	r7, #16
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	20000374 	.word	0x20000374
 8008198:	20000284 	.word	0x20000284
 800819c:	20000378 	.word	0x20000378
 80081a0:	2000035c 	.word	0x2000035c
 80081a4:	2000032c 	.word	0x2000032c
 80081a8:	20000328 	.word	0x20000328
 80081ac:	20000390 	.word	0x20000390

080081b0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80081b6:	2300      	movs	r3, #0
 80081b8:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80081ba:	f000 fb03 	bl	80087c4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80081be:	4b19      	ldr	r3, [pc, #100]	@ (8008224 <xTimerCreateTimerTask+0x74>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d020      	beq.n	8008208 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081ce:	463a      	mov	r2, r7
 80081d0:	1d39      	adds	r1, r7, #4
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f008 f9ce 	bl	8010578 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80081dc:	6839      	ldr	r1, [r7, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	9202      	str	r2, [sp, #8]
 80081e4:	9301      	str	r3, [sp, #4]
 80081e6:	2301      	movs	r3, #1
 80081e8:	9300      	str	r3, [sp, #0]
 80081ea:	2300      	movs	r3, #0
 80081ec:	460a      	mov	r2, r1
 80081ee:	490e      	ldr	r1, [pc, #56]	@ (8008228 <xTimerCreateTimerTask+0x78>)
 80081f0:	480e      	ldr	r0, [pc, #56]	@ (800822c <xTimerCreateTimerTask+0x7c>)
 80081f2:	f7fe fef1 	bl	8006fd8 <xTaskCreateStatic>
 80081f6:	4603      	mov	r3, r0
 80081f8:	4a0d      	ldr	r2, [pc, #52]	@ (8008230 <xTimerCreateTimerTask+0x80>)
 80081fa:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80081fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008230 <xTimerCreateTimerTask+0x80>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8008204:	2301      	movs	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d105      	bne.n	800821a <xTimerCreateTimerTask+0x6a>
 800820e:	f240 120d 	movw	r2, #269	@ 0x10d
 8008212:	4908      	ldr	r1, [pc, #32]	@ (8008234 <xTimerCreateTimerTask+0x84>)
 8008214:	4808      	ldr	r0, [pc, #32]	@ (8008238 <xTimerCreateTimerTask+0x88>)
 8008216:	f00d fc5b 	bl	8015ad0 <assertFail>
        return xReturn;
 800821a:	68fb      	ldr	r3, [r7, #12]
    }
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	200003d4 	.word	0x200003d4
 8008228:	0801e4c0 	.word	0x0801e4c0
 800822c:	0800836d 	.word	0x0800836d
 8008230:	200003d8 	.word	0x200003d8
 8008234:	0801e4c8 	.word	0x0801e4c8
 8008238:	0801e4e0 	.word	0x0801e4e0

0800823c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800823c:	b580      	push	{r7, lr}
 800823e:	b08a      	sub	sp, #40	@ 0x28
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
 8008248:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800824a:	2300      	movs	r3, #0
 800824c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <xTimerGenericCommand+0x24>
 8008254:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8008258:	491b      	ldr	r1, [pc, #108]	@ (80082c8 <xTimerGenericCommand+0x8c>)
 800825a:	481c      	ldr	r0, [pc, #112]	@ (80082cc <xTimerGenericCommand+0x90>)
 800825c:	f00d fc38 	bl	8015ad0 <assertFail>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8008260:	4b1b      	ldr	r3, [pc, #108]	@ (80082d0 <xTimerGenericCommand+0x94>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d02a      	beq.n	80082be <xTimerGenericCommand+0x82>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008268:	68bb      	ldr	r3, [r7, #8]
 800826a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	2b05      	cmp	r3, #5
 8008278:	dc18      	bgt.n	80082ac <xTimerGenericCommand+0x70>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800827a:	f7ff fd8b 	bl	8007d94 <xTaskGetSchedulerState>
 800827e:	4603      	mov	r3, r0
 8008280:	2b02      	cmp	r3, #2
 8008282:	d109      	bne.n	8008298 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008284:	4b12      	ldr	r3, [pc, #72]	@ (80082d0 <xTimerGenericCommand+0x94>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	f107 0114 	add.w	r1, r7, #20
 800828c:	2300      	movs	r3, #0
 800828e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008290:	f7fe f8f4 	bl	800647c <xQueueGenericSend>
 8008294:	6278      	str	r0, [r7, #36]	@ 0x24
 8008296:	e012      	b.n	80082be <xTimerGenericCommand+0x82>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008298:	4b0d      	ldr	r3, [pc, #52]	@ (80082d0 <xTimerGenericCommand+0x94>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	f107 0114 	add.w	r1, r7, #20
 80082a0:	2300      	movs	r3, #0
 80082a2:	2200      	movs	r2, #0
 80082a4:	f7fe f8ea 	bl	800647c <xQueueGenericSend>
 80082a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80082aa:	e008      	b.n	80082be <xTimerGenericCommand+0x82>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082ac:	4b08      	ldr	r3, [pc, #32]	@ (80082d0 <xTimerGenericCommand+0x94>)
 80082ae:	6818      	ldr	r0, [r3, #0]
 80082b0:	f107 0114 	add.w	r1, r7, #20
 80082b4:	2300      	movs	r3, #0
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	f7fe f9ee 	bl	8006698 <xQueueGenericSendFromISR>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80082be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80082c0:	4618      	mov	r0, r3
 80082c2:	3728      	adds	r7, #40	@ 0x28
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}
 80082c8:	0801e4c8 	.word	0x0801e4c8
 80082cc:	0801e530 	.word	0x0801e530
 80082d0:	200003d4 	.word	0x200003d4

080082d4 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af02      	add	r7, sp, #8
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082de:	4b20      	ldr	r3, [pc, #128]	@ (8008360 <prvProcessExpiredTimer+0x8c>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd ff1f 	bl	8006130 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d01e      	beq.n	800833e <prvProcessExpiredTimer+0x6a>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	699a      	ldr	r2, [r3, #24]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	18d1      	adds	r1, r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 f8d3 	bl	80084b8 <prvInsertTimerInActiveList>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01b      	beq.n	8008350 <prvProcessExpiredTimer+0x7c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008318:	2300      	movs	r3, #0
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	2300      	movs	r3, #0
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff ff8a 	bl	800823c <xTimerGenericCommand>
 8008328:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10f      	bne.n	8008350 <prvProcessExpiredTimer+0x7c>
 8008330:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8008334:	490b      	ldr	r1, [pc, #44]	@ (8008364 <prvProcessExpiredTimer+0x90>)
 8008336:	480c      	ldr	r0, [pc, #48]	@ (8008368 <prvProcessExpiredTimer+0x94>)
 8008338:	f00d fbca 	bl	8015ad0 <assertFail>
 800833c:	e008      	b.n	8008350 <prvProcessExpiredTimer+0x7c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	4798      	blx	r3
    }
 8008358:	bf00      	nop
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	200003cc 	.word	0x200003cc
 8008364:	0801e4c8 	.word	0x0801e4c8
 8008368:	0801e558 	.word	0x0801e558

0800836c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008374:	f107 0308 	add.w	r3, r7, #8
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f859 	bl	8008430 <prvGetNextExpireTime>
 800837e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f805 	bl	8008394 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800838a:	f000 f8d7 	bl	800853c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800838e:	bf00      	nop
 8008390:	e7f0      	b.n	8008374 <prvTimerTask+0x8>
	...

08008394 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800839e:	f7ff f8df 	bl	8007560 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	4618      	mov	r0, r3
 80083a8:	f000 f866 	bl	8008478 <prvSampleTimeNow>
 80083ac:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d130      	bne.n	8008416 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <prvProcessTimerOrBlockTask+0x3c>
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d806      	bhi.n	80083d0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80083c2:	f7ff f8db 	bl	800757c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7ff ff83 	bl	80082d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80083ce:	e024      	b.n	800841a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d008      	beq.n	80083e8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083d6:	4b13      	ldr	r3, [pc, #76]	@ (8008424 <prvProcessTimerOrBlockTask+0x90>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d101      	bne.n	80083e4 <prvProcessTimerOrBlockTask+0x50>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <prvProcessTimerOrBlockTask+0x52>
 80083e4:	2300      	movs	r3, #0
 80083e6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008428 <prvProcessTimerOrBlockTask+0x94>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	683a      	ldr	r2, [r7, #0]
 80083f4:	4619      	mov	r1, r3
 80083f6:	f7fe fdbb 	bl	8006f70 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80083fa:	f7ff f8bf 	bl	800757c <xTaskResumeAll>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	d10a      	bne.n	800841a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <prvProcessTimerOrBlockTask+0x98>)
 8008406:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800840a:	601a      	str	r2, [r3, #0]
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	f3bf 8f6f 	isb	sy
    }
 8008414:	e001      	b.n	800841a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008416:	f7ff f8b1 	bl	800757c <xTaskResumeAll>
    }
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
 8008422:	bf00      	nop
 8008424:	200003d0 	.word	0x200003d0
 8008428:	200003d4 	.word	0x200003d4
 800842c:	e000ed04 	.word	0xe000ed04

08008430 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8008430:	b480      	push	{r7}
 8008432:	b085      	sub	sp, #20
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008438:	4b0e      	ldr	r3, [pc, #56]	@ (8008474 <prvGetNextExpireTime+0x44>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <prvGetNextExpireTime+0x16>
 8008442:	2201      	movs	r2, #1
 8008444:	e000      	b.n	8008448 <prvGetNextExpireTime+0x18>
 8008446:	2200      	movs	r2, #0
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008454:	4b07      	ldr	r3, [pc, #28]	@ (8008474 <prvGetNextExpireTime+0x44>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68db      	ldr	r3, [r3, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	60fb      	str	r3, [r7, #12]
 800845e:	e001      	b.n	8008464 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8008460:	2300      	movs	r3, #0
 8008462:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008464:	68fb      	ldr	r3, [r7, #12]
    }
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	200003cc 	.word	0x200003cc

08008478 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8008480:	f7ff f918 	bl	80076b4 <xTaskGetTickCount>
 8008484:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008486:	4b0b      	ldr	r3, [pc, #44]	@ (80084b4 <prvSampleTimeNow+0x3c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	429a      	cmp	r2, r3
 800848e:	d205      	bcs.n	800849c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8008490:	f000 f934 	bl	80086fc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e002      	b.n	80084a2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80084a2:	4a04      	ldr	r2, [pc, #16]	@ (80084b4 <prvSampleTimeNow+0x3c>)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80084a8:	68fb      	ldr	r3, [r7, #12]
    }
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	200003dc 	.word	0x200003dc

080084b8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d812      	bhi.n	8008504 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	1ad2      	subs	r2, r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	699b      	ldr	r3, [r3, #24]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d302      	bcc.n	80084f2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e01b      	b.n	800852a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084f2:	4b10      	ldr	r3, [pc, #64]	@ (8008534 <prvInsertTimerInActiveList+0x7c>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3304      	adds	r3, #4
 80084fa:	4619      	mov	r1, r3
 80084fc:	4610      	mov	r0, r2
 80084fe:	f7fd fdde 	bl	80060be <vListInsert>
 8008502:	e012      	b.n	800852a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d206      	bcs.n	800851a <prvInsertTimerInActiveList+0x62>
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d302      	bcc.n	800851a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	e007      	b.n	800852a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800851a:	4b07      	ldr	r3, [pc, #28]	@ (8008538 <prvInsertTimerInActiveList+0x80>)
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3304      	adds	r3, #4
 8008522:	4619      	mov	r1, r3
 8008524:	4610      	mov	r0, r2
 8008526:	f7fd fdca 	bl	80060be <vListInsert>
            }
        }

        return xProcessTimerNow;
 800852a:	697b      	ldr	r3, [r7, #20]
    }
 800852c:	4618      	mov	r0, r3
 800852e:	3718      	adds	r7, #24
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	200003d0 	.word	0x200003d0
 8008538:	200003cc 	.word	0x200003cc

0800853c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800853c:	b580      	push	{r7, lr}
 800853e:	b08c      	sub	sp, #48	@ 0x30
 8008540:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008542:	e0bf      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	da14      	bge.n	8008574 <prvProcessReceivedCommands+0x38>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800854a:	f107 0308 	add.w	r3, r7, #8
 800854e:	3304      	adds	r3, #4
 8008550:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8008552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008554:	2b00      	cmp	r3, #0
 8008556:	d105      	bne.n	8008564 <prvProcessReceivedCommands+0x28>
 8008558:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800855c:	4962      	ldr	r1, [pc, #392]	@ (80086e8 <prvProcessReceivedCommands+0x1ac>)
 800855e:	4863      	ldr	r0, [pc, #396]	@ (80086ec <prvProcessReceivedCommands+0x1b0>)
 8008560:	f00d fab6 	bl	8015ad0 <assertFail>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856a:	6850      	ldr	r0, [r2, #4]
 800856c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800856e:	6892      	ldr	r2, [r2, #8]
 8008570:	4611      	mov	r1, r2
 8008572:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f2c0 80a4 	blt.w	80086c4 <prvProcessReceivedCommands+0x188>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <prvProcessReceivedCommands+0x56>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008588:	6a3b      	ldr	r3, [r7, #32]
 800858a:	3304      	adds	r3, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd fdcf 	bl	8006130 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008592:	1d3b      	adds	r3, r7, #4
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff ff6f 	bl	8008478 <prvSampleTimeNow>
 800859a:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	2b09      	cmp	r3, #9
 80085a0:	f200 808d 	bhi.w	80086be <prvProcessReceivedCommands+0x182>
 80085a4:	a201      	add	r2, pc, #4	@ (adr r2, 80085ac <prvProcessReceivedCommands+0x70>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085d5 	.word	0x080085d5
 80085b8:	08008641 	.word	0x08008641
 80085bc:	08008655 	.word	0x08008655
 80085c0:	08008695 	.word	0x08008695
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085d5 	.word	0x080085d5
 80085cc:	08008641 	.word	0x08008641
 80085d0:	08008655 	.word	0x08008655
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085d4:	6a3b      	ldr	r3, [r7, #32]
 80085d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	6a3b      	ldr	r3, [r7, #32]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	18d1      	adds	r1, r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	6a38      	ldr	r0, [r7, #32]
 80085f4:	f7ff ff60 	bl	80084b8 <prvInsertTimerInActiveList>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d061      	beq.n	80086c2 <prvProcessReceivedCommands+0x186>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085fe:	6a3b      	ldr	r3, [r7, #32]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	6a38      	ldr	r0, [r7, #32]
 8008604:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008606:	6a3b      	ldr	r3, [r7, #32]
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d056      	beq.n	80086c2 <prvProcessReceivedCommands+0x186>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	6a3b      	ldr	r3, [r7, #32]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	441a      	add	r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2300      	movs	r3, #0
 8008622:	2100      	movs	r1, #0
 8008624:	6a38      	ldr	r0, [r7, #32]
 8008626:	f7ff fe09 	bl	800823c <xTimerGenericCommand>
 800862a:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d147      	bne.n	80086c2 <prvProcessReceivedCommands+0x186>
 8008632:	f240 3236 	movw	r2, #822	@ 0x336
 8008636:	492c      	ldr	r1, [pc, #176]	@ (80086e8 <prvProcessReceivedCommands+0x1ac>)
 8008638:	482d      	ldr	r0, [pc, #180]	@ (80086f0 <prvProcessReceivedCommands+0x1b4>)
 800863a:	f00d fa49 	bl	8015ad0 <assertFail>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800863e:	e040      	b.n	80086c2 <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008646:	f023 0301 	bic.w	r3, r3, #1
 800864a:	b2da      	uxtb	r2, r3
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008652:	e037      	b.n	80086c4 <prvProcessReceivedCommands+0x188>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008654:	6a3b      	ldr	r3, [r7, #32]
 8008656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800865a:	f043 0301 	orr.w	r3, r3, #1
 800865e:	b2da      	uxtb	r2, r3
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	6a3b      	ldr	r3, [r7, #32]
 800866a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <prvProcessReceivedCommands+0x144>
 8008674:	f240 324f 	movw	r2, #847	@ 0x34f
 8008678:	491b      	ldr	r1, [pc, #108]	@ (80086e8 <prvProcessReceivedCommands+0x1ac>)
 800867a:	481e      	ldr	r0, [pc, #120]	@ (80086f4 <prvProcessReceivedCommands+0x1b8>)
 800867c:	f00d fa28 	bl	8015ad0 <assertFail>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008680:	6a3b      	ldr	r3, [r7, #32]
 8008682:	699a      	ldr	r2, [r3, #24]
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	18d1      	adds	r1, r2, r3
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	6a38      	ldr	r0, [r7, #32]
 800868e:	f7ff ff13 	bl	80084b8 <prvInsertTimerInActiveList>
                        break;
 8008692:	e017      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008694:	6a3b      	ldr	r3, [r7, #32]
 8008696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869a:	f003 0302 	and.w	r3, r3, #2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d103      	bne.n	80086aa <prvProcessReceivedCommands+0x16e>
                                {
                                    vPortFree( pxTimer );
 80086a2:	6a38      	ldr	r0, [r7, #32]
 80086a4:	f000 fbbc 	bl	8008e20 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80086a8:	e00c      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086b0:	f023 0301 	bic.w	r3, r3, #1
 80086b4:	b2da      	uxtb	r2, r3
 80086b6:	6a3b      	ldr	r3, [r7, #32]
 80086b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80086bc:	e002      	b.n	80086c4 <prvProcessReceivedCommands+0x188>

                    default:
                        /* Don't expect to get here. */
                        break;
 80086be:	bf00      	nop
 80086c0:	e000      	b.n	80086c4 <prvProcessReceivedCommands+0x188>
                        break;
 80086c2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086c4:	4b0c      	ldr	r3, [pc, #48]	@ (80086f8 <prvProcessReceivedCommands+0x1bc>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f107 0108 	add.w	r1, r7, #8
 80086cc:	2200      	movs	r2, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fe f912 	bl	80068f8 <xQueueReceive>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	f47f af34 	bne.w	8008544 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80086dc:	bf00      	nop
 80086de:	bf00      	nop
 80086e0:	3728      	adds	r7, #40	@ 0x28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
 80086e6:	bf00      	nop
 80086e8:	0801e4c8 	.word	0x0801e4c8
 80086ec:	0801e560 	.word	0x0801e560
 80086f0:	0801e558 	.word	0x0801e558
 80086f4:	0801e56c 	.word	0x0801e56c
 80086f8:	200003d4 	.word	0x200003d4

080086fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008702:	e043      	b.n	800878c <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008704:	4b2b      	ldr	r3, [pc, #172]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	4b29      	ldr	r3, [pc, #164]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3304      	adds	r3, #4
 800871c:	4618      	mov	r0, r3
 800871e:	f7fd fd07 	bl	8006130 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d029      	beq.n	800878c <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	699b      	ldr	r3, [r3, #24]
 800873c:	693a      	ldr	r2, [r7, #16]
 800873e:	4413      	add	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008742:	68ba      	ldr	r2, [r7, #8]
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	429a      	cmp	r2, r3
 8008748:	d90e      	bls.n	8008768 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008756:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3304      	adds	r3, #4
 800875e:	4619      	mov	r1, r3
 8008760:	4610      	mov	r0, r2
 8008762:	f7fd fcac 	bl	80060be <vListInsert>
 8008766:	e011      	b.n	800878c <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008768:	2300      	movs	r3, #0
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2300      	movs	r3, #0
 800876e:	693a      	ldr	r2, [r7, #16]
 8008770:	2100      	movs	r1, #0
 8008772:	68f8      	ldr	r0, [r7, #12]
 8008774:	f7ff fd62 	bl	800823c <xTimerGenericCommand>
 8008778:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d105      	bne.n	800878c <prvSwitchTimerLists+0x90>
 8008780:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8008784:	490c      	ldr	r1, [pc, #48]	@ (80087b8 <prvSwitchTimerLists+0xbc>)
 8008786:	480d      	ldr	r0, [pc, #52]	@ (80087bc <prvSwitchTimerLists+0xc0>)
 8008788:	f00d f9a2 	bl	8015ad0 <assertFail>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800878c:	4b09      	ldr	r3, [pc, #36]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1b6      	bne.n	8008704 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008796:	4b07      	ldr	r3, [pc, #28]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800879c:	4b08      	ldr	r3, [pc, #32]	@ (80087c0 <prvSwitchTimerLists+0xc4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a04      	ldr	r2, [pc, #16]	@ (80087b4 <prvSwitchTimerLists+0xb8>)
 80087a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80087a4:	4a06      	ldr	r2, [pc, #24]	@ (80087c0 <prvSwitchTimerLists+0xc4>)
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6013      	str	r3, [r2, #0]
    }
 80087aa:	bf00      	nop
 80087ac:	3718      	adds	r7, #24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200003cc 	.word	0x200003cc
 80087b8:	0801e4c8 	.word	0x0801e4c8
 80087bc:	0801e558 	.word	0x0801e558
 80087c0:	200003d0 	.word	0x200003d0

080087c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80087ca:	f000 f94f 	bl	8008a6c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80087ce:	4b15      	ldr	r3, [pc, #84]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d120      	bne.n	8008818 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80087d6:	4814      	ldr	r0, [pc, #80]	@ (8008828 <prvCheckForValidListAndQueue+0x64>)
 80087d8:	f7fd fc20 	bl	800601c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80087dc:	4813      	ldr	r0, [pc, #76]	@ (800882c <prvCheckForValidListAndQueue+0x68>)
 80087de:	f7fd fc1d 	bl	800601c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80087e2:	4b13      	ldr	r3, [pc, #76]	@ (8008830 <prvCheckForValidListAndQueue+0x6c>)
 80087e4:	4a10      	ldr	r2, [pc, #64]	@ (8008828 <prvCheckForValidListAndQueue+0x64>)
 80087e6:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80087e8:	4b12      	ldr	r3, [pc, #72]	@ (8008834 <prvCheckForValidListAndQueue+0x70>)
 80087ea:	4a10      	ldr	r2, [pc, #64]	@ (800882c <prvCheckForValidListAndQueue+0x68>)
 80087ec:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087ee:	2300      	movs	r3, #0
 80087f0:	9300      	str	r3, [sp, #0]
 80087f2:	4b11      	ldr	r3, [pc, #68]	@ (8008838 <prvCheckForValidListAndQueue+0x74>)
 80087f4:	4a11      	ldr	r2, [pc, #68]	@ (800883c <prvCheckForValidListAndQueue+0x78>)
 80087f6:	2110      	movs	r1, #16
 80087f8:	2014      	movs	r0, #20
 80087fa:	f7fd fd2b 	bl	8006254 <xQueueGenericCreateStatic>
 80087fe:	4603      	mov	r3, r0
 8008800:	4a08      	ldr	r2, [pc, #32]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 8008802:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008804:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d005      	beq.n	8008818 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800880c:	4b05      	ldr	r3, [pc, #20]	@ (8008824 <prvCheckForValidListAndQueue+0x60>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	490b      	ldr	r1, [pc, #44]	@ (8008840 <prvCheckForValidListAndQueue+0x7c>)
 8008812:	4618      	mov	r0, r3
 8008814:	f7fe fb82 	bl	8006f1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008818:	f000 f956 	bl	8008ac8 <vPortExitCritical>
    }
 800881c:	bf00      	nop
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200003d4 	.word	0x200003d4
 8008828:	200003a4 	.word	0x200003a4
 800882c:	200003b8 	.word	0x200003b8
 8008830:	200003cc 	.word	0x200003cc
 8008834:	200003d0 	.word	0x200003d0
 8008838:	20000520 	.word	0x20000520
 800883c:	200003e0 	.word	0x200003e0
 8008840:	0801e594 	.word	0x0801e594

08008844 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	3b04      	subs	r3, #4
 8008854:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800885c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	3b04      	subs	r3, #4
 8008862:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	f023 0201 	bic.w	r2, r3, #1
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3b04      	subs	r3, #4
 8008872:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008874:	4a0c      	ldr	r2, [pc, #48]	@ (80088a8 <pxPortInitialiseStack+0x64>)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3b14      	subs	r3, #20
 800887e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3b04      	subs	r3, #4
 800888a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f06f 0202 	mvn.w	r2, #2
 8008892:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	3b20      	subs	r3, #32
 8008898:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800889a:	68fb      	ldr	r3, [r7, #12]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3714      	adds	r7, #20
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr
 80088a8:	080088ad 	.word	0x080088ad

080088ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80088b2:	2300      	movs	r3, #0
 80088b4:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80088b6:	4b0e      	ldr	r3, [pc, #56]	@ (80088f0 <prvTaskExitError+0x44>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088be:	d004      	beq.n	80088ca <prvTaskExitError+0x1e>
 80088c0:	22e5      	movs	r2, #229	@ 0xe5
 80088c2:	490c      	ldr	r1, [pc, #48]	@ (80088f4 <prvTaskExitError+0x48>)
 80088c4:	480c      	ldr	r0, [pc, #48]	@ (80088f8 <prvTaskExitError+0x4c>)
 80088c6:	f00d f903 	bl	8015ad0 <assertFail>
        __asm volatile
 80088ca:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	607b      	str	r3, [r7, #4]
    }
 80088dc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80088de:	bf00      	nop
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0fc      	beq.n	80088e0 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80088e6:	bf00      	nop
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}
 80088f0:	2000000c 	.word	0x2000000c
 80088f4:	0801e5a8 	.word	0x0801e5a8
 80088f8:	0801e5d4 	.word	0x0801e5d4
 80088fc:	00000000 	.word	0x00000000

08008900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008900:	4b07      	ldr	r3, [pc, #28]	@ (8008920 <pxCurrentTCBConst2>)
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f380 8809 	msr	PSP, r0
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	4770      	bx	lr
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst2>:
 8008920:	20000284 	.word	0x20000284
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008928:	4808      	ldr	r0, [pc, #32]	@ (800894c <prvPortStartFirstTask+0x24>)
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f380 8808 	msr	MSP, r0
 8008932:	f04f 0000 	mov.w	r0, #0
 8008936:	f380 8814 	msr	CONTROL, r0
 800893a:	b662      	cpsie	i
 800893c:	b661      	cpsie	f
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	df00      	svc	0
 8008948:	bf00      	nop
 800894a:	0000      	.short	0x0000
 800894c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop

08008954 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800895a:	4b38      	ldr	r3, [pc, #224]	@ (8008a3c <xPortStartScheduler+0xe8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a38      	ldr	r2, [pc, #224]	@ (8008a40 <xPortStartScheduler+0xec>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d105      	bne.n	8008970 <xPortStartScheduler+0x1c>
 8008964:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008968:	4936      	ldr	r1, [pc, #216]	@ (8008a44 <xPortStartScheduler+0xf0>)
 800896a:	4837      	ldr	r0, [pc, #220]	@ (8008a48 <xPortStartScheduler+0xf4>)
 800896c:	f00d f8b0 	bl	8015ad0 <assertFail>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008970:	4b32      	ldr	r3, [pc, #200]	@ (8008a3c <xPortStartScheduler+0xe8>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a35      	ldr	r2, [pc, #212]	@ (8008a4c <xPortStartScheduler+0xf8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d105      	bne.n	8008986 <xPortStartScheduler+0x32>
 800897a:	f240 122d 	movw	r2, #301	@ 0x12d
 800897e:	4931      	ldr	r1, [pc, #196]	@ (8008a44 <xPortStartScheduler+0xf0>)
 8008980:	4833      	ldr	r0, [pc, #204]	@ (8008a50 <xPortStartScheduler+0xfc>)
 8008982:	f00d f8a5 	bl	8015ad0 <assertFail>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008986:	4b33      	ldr	r3, [pc, #204]	@ (8008a54 <xPortStartScheduler+0x100>)
 8008988:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	781b      	ldrb	r3, [r3, #0]
 800898e:	b2db      	uxtb	r3, r3
 8008990:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	22ff      	movs	r2, #255	@ 0xff
 8008996:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b2db      	uxtb	r3, r3
 800899e:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b2b      	ldr	r3, [pc, #172]	@ (8008a58 <xPortStartScheduler+0x104>)
 80089ac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089ae:	4b2b      	ldr	r3, [pc, #172]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089b4:	e009      	b.n	80089ca <xPortStartScheduler+0x76>
            {
                ulMaxPRIGROUPValue--;
 80089b6:	4b29      	ldr	r3, [pc, #164]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	3b01      	subs	r3, #1
 80089bc:	4a27      	ldr	r2, [pc, #156]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089be:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80089d2:	2b80      	cmp	r3, #128	@ 0x80
 80089d4:	d0ef      	beq.n	80089b6 <xPortStartScheduler+0x62>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089d6:	4b21      	ldr	r3, [pc, #132]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	021b      	lsls	r3, r3, #8
 80089dc:	4a1f      	ldr	r2, [pc, #124]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089de:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089e0:	4b1e      	ldr	r3, [pc, #120]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80089e8:	4a1c      	ldr	r2, [pc, #112]	@ (8008a5c <xPortStartScheduler+0x108>)
 80089ea:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	b2da      	uxtb	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80089f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008a60 <xPortStartScheduler+0x10c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a19      	ldr	r2, [pc, #100]	@ (8008a60 <xPortStartScheduler+0x10c>)
 80089fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089fe:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008a00:	4b17      	ldr	r3, [pc, #92]	@ (8008a60 <xPortStartScheduler+0x10c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <xPortStartScheduler+0x10c>)
 8008a06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008a0c:	f000 f8de 	bl	8008bcc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008a10:	4b14      	ldr	r3, [pc, #80]	@ (8008a64 <xPortStartScheduler+0x110>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008a16:	f000 f8f5 	bl	8008c04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a1a:	4b13      	ldr	r3, [pc, #76]	@ (8008a68 <xPortStartScheduler+0x114>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a12      	ldr	r2, [pc, #72]	@ (8008a68 <xPortStartScheduler+0x114>)
 8008a20:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008a24:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008a26:	f7ff ff7f 	bl	8008928 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008a2a:	f7fe ff2d 	bl	8007888 <vTaskSwitchContext>
    prvTaskExitError();
 8008a2e:	f7ff ff3d 	bl	80088ac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3710      	adds	r7, #16
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	e000ed00 	.word	0xe000ed00
 8008a40:	410fc271 	.word	0x410fc271
 8008a44:	0801e5a8 	.word	0x0801e5a8
 8008a48:	0801e5f0 	.word	0x0801e5f0
 8008a4c:	410fc270 	.word	0x410fc270
 8008a50:	0801e614 	.word	0x0801e614
 8008a54:	e000e400 	.word	0xe000e400
 8008a58:	20000570 	.word	0x20000570
 8008a5c:	20000574 	.word	0x20000574
 8008a60:	e000ed20 	.word	0xe000ed20
 8008a64:	2000000c 	.word	0x2000000c
 8008a68:	e000ef34 	.word	0xe000ef34

08008a6c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
        __asm volatile
 8008a72:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	607b      	str	r3, [r7, #4]
    }
 8008a84:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008a86:	4b0c      	ldr	r3, [pc, #48]	@ (8008ab8 <vPortEnterCritical+0x4c>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8008ab8 <vPortEnterCritical+0x4c>)
 8008a8e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008a90:	4b09      	ldr	r3, [pc, #36]	@ (8008ab8 <vPortEnterCritical+0x4c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	d10a      	bne.n	8008aae <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a98:	4b08      	ldr	r3, [pc, #32]	@ (8008abc <vPortEnterCritical+0x50>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	b2db      	uxtb	r3, r3
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <vPortEnterCritical+0x42>
 8008aa2:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8008aa6:	4906      	ldr	r1, [pc, #24]	@ (8008ac0 <vPortEnterCritical+0x54>)
 8008aa8:	4806      	ldr	r0, [pc, #24]	@ (8008ac4 <vPortEnterCritical+0x58>)
 8008aaa:	f00d f811 	bl	8015ad0 <assertFail>
    }
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	2000000c 	.word	0x2000000c
 8008abc:	e000ed04 	.word	0xe000ed04
 8008ac0:	0801e5a8 	.word	0x0801e5a8
 8008ac4:	0801e654 	.word	0x0801e654

08008ac8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <vPortExitCritical+0x40>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d105      	bne.n	8008ae2 <vPortExitCritical+0x1a>
 8008ad6:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8008ada:	490c      	ldr	r1, [pc, #48]	@ (8008b0c <vPortExitCritical+0x44>)
 8008adc:	480c      	ldr	r0, [pc, #48]	@ (8008b10 <vPortExitCritical+0x48>)
 8008ade:	f00c fff7 	bl	8015ad0 <assertFail>
    uxCriticalNesting--;
 8008ae2:	4b09      	ldr	r3, [pc, #36]	@ (8008b08 <vPortExitCritical+0x40>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	4a07      	ldr	r2, [pc, #28]	@ (8008b08 <vPortExitCritical+0x40>)
 8008aea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8008aec:	4b06      	ldr	r3, [pc, #24]	@ (8008b08 <vPortExitCritical+0x40>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d105      	bne.n	8008b00 <vPortExitCritical+0x38>
 8008af4:	2300      	movs	r3, #0
 8008af6:	607b      	str	r3, [r7, #4]
        __asm volatile
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f383 8811 	msr	BASEPRI, r3
    }
 8008afe:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008b00:	bf00      	nop
 8008b02:	3708      	adds	r7, #8
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	2000000c 	.word	0x2000000c
 8008b0c:	0801e5a8 	.word	0x0801e5a8
 8008b10:	0801e68c 	.word	0x0801e68c
	...

08008b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008b20:	f3ef 8009 	mrs	r0, PSP
 8008b24:	f3bf 8f6f 	isb	sy
 8008b28:	4b15      	ldr	r3, [pc, #84]	@ (8008b80 <pxCurrentTCBConst>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	f01e 0f10 	tst.w	lr, #16
 8008b30:	bf08      	it	eq
 8008b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3a:	6010      	str	r0, [r2, #0]
 8008b3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b40:	f04f 005f 	mov.w	r0, #95	@ 0x5f
 8008b44:	f380 8811 	msr	BASEPRI, r0
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
 8008b50:	f7fe fe9a 	bl	8007888 <vTaskSwitchContext>
 8008b54:	f04f 0000 	mov.w	r0, #0
 8008b58:	f380 8811 	msr	BASEPRI, r0
 8008b5c:	bc09      	pop	{r0, r3}
 8008b5e:	6819      	ldr	r1, [r3, #0]
 8008b60:	6808      	ldr	r0, [r1, #0]
 8008b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b66:	f01e 0f10 	tst.w	lr, #16
 8008b6a:	bf08      	it	eq
 8008b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b70:	f380 8809 	msr	PSP, r0
 8008b74:	f3bf 8f6f 	isb	sy
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	f3af 8000 	nop.w

08008b80 <pxCurrentTCBConst>:
 8008b80:	20000284 	.word	0x20000284
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop

08008b88 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
        __asm volatile
 8008b8e:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008b92:	f383 8811 	msr	BASEPRI, r3
 8008b96:	f3bf 8f6f 	isb	sy
 8008b9a:	f3bf 8f4f 	dsb	sy
 8008b9e:	607b      	str	r3, [r7, #4]
    }
 8008ba0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008ba2:	f7fe fd97 	bl	80076d4 <xTaskIncrementTick>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <tickFreeRTOS+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <tickFreeRTOS+0x40>)
 8008bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bb2:	601a      	str	r2, [r3, #0]
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f383 8811 	msr	BASEPRI, r3
    }
 8008bbe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008bd0:	4b08      	ldr	r3, [pc, #32]	@ (8008bf4 <vPortSetupTimerInterrupt+0x28>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008bd6:	4b08      	ldr	r3, [pc, #32]	@ (8008bf8 <vPortSetupTimerInterrupt+0x2c>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bdc:	4b07      	ldr	r3, [pc, #28]	@ (8008bfc <vPortSetupTimerInterrupt+0x30>)
 8008bde:	4a08      	ldr	r2, [pc, #32]	@ (8008c00 <vPortSetupTimerInterrupt+0x34>)
 8008be0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008be2:	4b04      	ldr	r3, [pc, #16]	@ (8008bf4 <vPortSetupTimerInterrupt+0x28>)
 8008be4:	2207      	movs	r2, #7
 8008be6:	601a      	str	r2, [r3, #0]
}
 8008be8:	bf00      	nop
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	e000e010 	.word	0xe000e010
 8008bf8:	e000e018 	.word	0xe000e018
 8008bfc:	e000e014 	.word	0xe000e014
 8008c00:	0002903f 	.word	0x0002903f

08008c04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008c04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008c14 <vPortEnableVFP+0x10>
 8008c08:	6801      	ldr	r1, [r0, #0]
 8008c0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008c0e:	6001      	str	r1, [r0, #0]
 8008c10:	4770      	bx	lr
 8008c12:	0000      	.short	0x0000
 8008c14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop

08008c1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008c22:	f3ef 8305 	mrs	r3, IPSR
 8008c26:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2b0f      	cmp	r3, #15
 8008c2c:	d90f      	bls.n	8008c4e <vPortValidateInterruptPriority+0x32>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c2e:	4a11      	ldr	r2, [pc, #68]	@ (8008c74 <vPortValidateInterruptPriority+0x58>)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c38:	4b0f      	ldr	r3, [pc, #60]	@ (8008c78 <vPortValidateInterruptPriority+0x5c>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d205      	bcs.n	8008c4e <vPortValidateInterruptPriority+0x32>
 8008c42:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8008c46:	490d      	ldr	r1, [pc, #52]	@ (8008c7c <vPortValidateInterruptPriority+0x60>)
 8008c48:	480d      	ldr	r0, [pc, #52]	@ (8008c80 <vPortValidateInterruptPriority+0x64>)
 8008c4a:	f00c ff41 	bl	8015ad0 <assertFail>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <vPortValidateInterruptPriority+0x68>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008c56:	4b0c      	ldr	r3, [pc, #48]	@ (8008c88 <vPortValidateInterruptPriority+0x6c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d905      	bls.n	8008c6a <vPortValidateInterruptPriority+0x4e>
 8008c5e:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8008c62:	4906      	ldr	r1, [pc, #24]	@ (8008c7c <vPortValidateInterruptPriority+0x60>)
 8008c64:	4809      	ldr	r0, [pc, #36]	@ (8008c8c <vPortValidateInterruptPriority+0x70>)
 8008c66:	f00c ff33 	bl	8015ad0 <assertFail>
    }
 8008c6a:	bf00      	nop
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	e000e3f0 	.word	0xe000e3f0
 8008c78:	20000570 	.word	0x20000570
 8008c7c:	0801e5a8 	.word	0x0801e5a8
 8008c80:	0801e6a0 	.word	0x0801e6a0
 8008c84:	e000ed0c 	.word	0xe000ed0c
 8008c88:	20000574 	.word	0x20000574
 8008c8c:	0801e6cc 	.word	0x0801e6cc

08008c90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8008c9c:	f7fe fc60 	bl	8007560 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008ca0:	4b55      	ldr	r3, [pc, #340]	@ (8008df8 <pvPortMalloc+0x168>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008ca8:	f000 f918 	bl	8008edc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cac:	4b53      	ldr	r3, [pc, #332]	@ (8008dfc <pvPortMalloc+0x16c>)
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f040 8087 	bne.w	8008dc8 <pvPortMalloc+0x138>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <pvPortMalloc+0x60>
            {
                xWantedSize += xHeapStructSize;
 8008cc0:	2208      	movs	r2, #8
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d00e      	beq.n	8008cf0 <pvPortMalloc+0x60>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f023 0307 	bic.w	r3, r3, #7
 8008cd8:	3308      	adds	r3, #8
 8008cda:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <pvPortMalloc+0x60>
 8008ce6:	2297      	movs	r2, #151	@ 0x97
 8008ce8:	4945      	ldr	r1, [pc, #276]	@ (8008e00 <pvPortMalloc+0x170>)
 8008cea:	4846      	ldr	r0, [pc, #280]	@ (8008e04 <pvPortMalloc+0x174>)
 8008cec:	f00c fef0 	bl	8015ad0 <assertFail>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d068      	beq.n	8008dc8 <pvPortMalloc+0x138>
 8008cf6:	4b44      	ldr	r3, [pc, #272]	@ (8008e08 <pvPortMalloc+0x178>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d863      	bhi.n	8008dc8 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008d00:	4b42      	ldr	r3, [pc, #264]	@ (8008e0c <pvPortMalloc+0x17c>)
 8008d02:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8008d04:	4b41      	ldr	r3, [pc, #260]	@ (8008e0c <pvPortMalloc+0x17c>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0a:	e004      	b.n	8008d16 <pvPortMalloc+0x86>
                {
                    pxPreviousBlock = pxBlock;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d903      	bls.n	8008d28 <pvPortMalloc+0x98>
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d1f1      	bne.n	8008d0c <pvPortMalloc+0x7c>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8008d28:	4b33      	ldr	r3, [pc, #204]	@ (8008df8 <pvPortMalloc+0x168>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	697a      	ldr	r2, [r7, #20]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d04a      	beq.n	8008dc8 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2208      	movs	r2, #8
 8008d38:	4413      	add	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	685a      	ldr	r2, [r3, #4]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	2308      	movs	r3, #8
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d919      	bls.n	8008d88 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	4413      	add	r3, r2
 8008d5a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	f003 0307 	and.w	r3, r3, #7
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d004      	beq.n	8008d70 <pvPortMalloc+0xe0>
 8008d66:	22c5      	movs	r2, #197	@ 0xc5
 8008d68:	4925      	ldr	r1, [pc, #148]	@ (8008e00 <pvPortMalloc+0x170>)
 8008d6a:	4829      	ldr	r0, [pc, #164]	@ (8008e10 <pvPortMalloc+0x180>)
 8008d6c:	f00c feb0 	bl	8015ad0 <assertFail>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d82:	68b8      	ldr	r0, [r7, #8]
 8008d84:	f000 f90c 	bl	8008fa0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d88:	4b1f      	ldr	r3, [pc, #124]	@ (8008e08 <pvPortMalloc+0x178>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1d      	ldr	r2, [pc, #116]	@ (8008e08 <pvPortMalloc+0x178>)
 8008d94:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d96:	4b1c      	ldr	r3, [pc, #112]	@ (8008e08 <pvPortMalloc+0x178>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8008e14 <pvPortMalloc+0x184>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d203      	bcs.n	8008daa <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da2:	4b19      	ldr	r3, [pc, #100]	@ (8008e08 <pvPortMalloc+0x178>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a1b      	ldr	r2, [pc, #108]	@ (8008e14 <pvPortMalloc+0x184>)
 8008da8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	4b13      	ldr	r3, [pc, #76]	@ (8008dfc <pvPortMalloc+0x16c>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008dbe:	4b16      	ldr	r3, [pc, #88]	@ (8008e18 <pvPortMalloc+0x188>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a14      	ldr	r2, [pc, #80]	@ (8008e18 <pvPortMalloc+0x188>)
 8008dc6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008dc8:	f7fe fbd8 	bl	800757c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <pvPortMalloc+0x146>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008dd2:	f007 fd08 	bl	80107e6 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f003 0307 	and.w	r3, r3, #7
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d005      	beq.n	8008dec <pvPortMalloc+0x15c>
 8008de0:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8008de4:	4906      	ldr	r1, [pc, #24]	@ (8008e00 <pvPortMalloc+0x170>)
 8008de6:	480d      	ldr	r0, [pc, #52]	@ (8008e1c <pvPortMalloc+0x18c>)
 8008de8:	f00c fe72 	bl	8015ad0 <assertFail>
    return pvReturn;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	20007ab0 	.word	0x20007ab0
 8008dfc:	20007ac4 	.word	0x20007ac4
 8008e00:	0801e710 	.word	0x0801e710
 8008e04:	0801e738 	.word	0x0801e738
 8008e08:	20007ab4 	.word	0x20007ab4
 8008e0c:	20007aa8 	.word	0x20007aa8
 8008e10:	0801e768 	.word	0x0801e768
 8008e14:	20007ab8 	.word	0x20007ab8
 8008e18:	20007abc 	.word	0x20007abc
 8008e1c:	0801e7ac 	.word	0x0801e7ac

08008e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d043      	beq.n	8008eba <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008e32:	2308      	movs	r3, #8
 8008e34:	425b      	negs	r3, r3
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4413      	add	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec4 <vPortFree+0xa4>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4013      	ands	r3, r2
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <vPortFree+0x3a>
 8008e4e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8008e52:	491d      	ldr	r1, [pc, #116]	@ (8008ec8 <vPortFree+0xa8>)
 8008e54:	481d      	ldr	r0, [pc, #116]	@ (8008ecc <vPortFree+0xac>)
 8008e56:	f00c fe3b 	bl	8015ad0 <assertFail>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d005      	beq.n	8008e6e <vPortFree+0x4e>
 8008e62:	f240 121b 	movw	r2, #283	@ 0x11b
 8008e66:	4918      	ldr	r1, [pc, #96]	@ (8008ec8 <vPortFree+0xa8>)
 8008e68:	4819      	ldr	r0, [pc, #100]	@ (8008ed0 <vPortFree+0xb0>)
 8008e6a:	f00c fe31 	bl	8015ad0 <assertFail>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	4b14      	ldr	r3, [pc, #80]	@ (8008ec4 <vPortFree+0xa4>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4013      	ands	r3, r2
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d01e      	beq.n	8008eba <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d11a      	bne.n	8008eba <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	4b0e      	ldr	r3, [pc, #56]	@ (8008ec4 <vPortFree+0xa4>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	43db      	mvns	r3, r3
 8008e8e:	401a      	ands	r2, r3
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008e94:	f7fe fb64 	bl	8007560 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ed4 <vPortFree+0xb4>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8008ed4 <vPortFree+0xb4>)
 8008ea4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ea6:	68b8      	ldr	r0, [r7, #8]
 8008ea8:	f000 f87a 	bl	8008fa0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008eac:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed8 <vPortFree+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	4a09      	ldr	r2, [pc, #36]	@ (8008ed8 <vPortFree+0xb8>)
 8008eb4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008eb6:	f7fe fb61 	bl	800757c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008eba:	bf00      	nop
 8008ebc:	3710      	adds	r7, #16
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}
 8008ec2:	bf00      	nop
 8008ec4:	20007ac4 	.word	0x20007ac4
 8008ec8:	0801e710 	.word	0x0801e710
 8008ecc:	0801e7f4 	.word	0x0801e7f4
 8008ed0:	0801e828 	.word	0x0801e828
 8008ed4:	20007ab4 	.word	0x20007ab4
 8008ed8:	20007ac0 	.word	0x20007ac0

08008edc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008ee2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008ee6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008ee8:	4b27      	ldr	r3, [pc, #156]	@ (8008f88 <prvHeapInit+0xac>)
 8008eea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00c      	beq.n	8008f10 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	3307      	adds	r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0307 	bic.w	r3, r3, #7
 8008f02:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	1ad3      	subs	r3, r2, r3
 8008f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8008f88 <prvHeapInit+0xac>)
 8008f0c:	4413      	add	r3, r2
 8008f0e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f14:	4a1d      	ldr	r2, [pc, #116]	@ (8008f8c <prvHeapInit+0xb0>)
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8008f8c <prvHeapInit+0xb0>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	4413      	add	r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008f28:	2208      	movs	r2, #8
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	1a9b      	subs	r3, r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f023 0307 	bic.w	r3, r3, #7
 8008f36:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f3c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008f3e:	4b14      	ldr	r3, [pc, #80]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008f46:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f90 <prvHeapInit+0xb4>)
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a0a      	ldr	r2, [pc, #40]	@ (8008f94 <prvHeapInit+0xb8>)
 8008f6a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	4a09      	ldr	r2, [pc, #36]	@ (8008f98 <prvHeapInit+0xbc>)
 8008f72:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f74:	4b09      	ldr	r3, [pc, #36]	@ (8008f9c <prvHeapInit+0xc0>)
 8008f76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008f7a:	601a      	str	r2, [r3, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20000578 	.word	0x20000578
 8008f8c:	20007aa8 	.word	0x20007aa8
 8008f90:	20007ab0 	.word	0x20007ab0
 8008f94:	20007ab8 	.word	0x20007ab8
 8008f98:	20007ab4 	.word	0x20007ab4
 8008f9c:	20007ac4 	.word	0x20007ac4

08008fa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008fa0:	b480      	push	{r7}
 8008fa2:	b085      	sub	sp, #20
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa8:	4b28      	ldr	r3, [pc, #160]	@ (800904c <prvInsertBlockIntoFreeList+0xac>)
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	e002      	b.n	8008fb4 <prvInsertBlockIntoFreeList+0x14>
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d8f7      	bhi.n	8008fae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	4413      	add	r3, r2
 8008fca:	687a      	ldr	r2, [r7, #4]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d108      	bne.n	8008fe2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	441a      	add	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	441a      	add	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d118      	bne.n	8009028 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	4b15      	ldr	r3, [pc, #84]	@ (8009050 <prvInsertBlockIntoFreeList+0xb0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d00d      	beq.n	800901e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	441a      	add	r2, r3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
 800901c:	e008      	b.n	8009030 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800901e:	4b0c      	ldr	r3, [pc, #48]	@ (8009050 <prvInsertBlockIntoFreeList+0xb0>)
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	601a      	str	r2, [r3, #0]
 8009026:	e003      	b.n	8009030 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681a      	ldr	r2, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	429a      	cmp	r2, r3
 8009036:	d002      	beq.n	800903e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800903e:	bf00      	nop
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr
 800904a:	bf00      	nop
 800904c:	20007aa8 	.word	0x20007aa8
 8009050:	20007ab0 	.word	0x20007ab0

08009054 <main>:

void SystemClock_Config(void);


int main( void )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0

//	HAL_Init();
	SystemClock_Config();
 800905a:	f000 f80f 	bl	800907c <SystemClock_Config>

	int err = platformInit();
 800905e:	f00c fc30 	bl	80158c2 <platformInit>
 8009062:	6078      	str	r0, [r7, #4]
	if (err != 0) {
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <main+0x1a>
		// The firmware is running on the wrong hardware. Halt
		while (1);
 800906a:	bf00      	nop
 800906c:	e7fd      	b.n	800906a <main+0x16>
	}

	systemLaunch();
 800906e:	f007 fa9d 	bl	80105ac <systemLaunch>
//	counter +=1;
//	cournter_timint = 1;
//	HAL_TIM_Base_Start_IT(&htim4);
//	cournter_timint = 2;
	//JH
	vTaskStartScheduler();
 8009072:	f7fe fa03 	bl	800747c <vTaskStartScheduler>
//	cournter_timint = 2;
	//NJH
//	counter +=1;

    for(;;)
 8009076:	bf00      	nop
 8009078:	e7fd      	b.n	8009076 <main+0x22>
	...

0800907c <SystemClock_Config>:
//			counter +=1;
//		}
    }
}
void SystemClock_Config(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b094      	sub	sp, #80	@ 0x50
 8009080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009082:	f107 0320 	add.w	r3, r7, #32
 8009086:	2230      	movs	r2, #48	@ 0x30
 8009088:	2100      	movs	r1, #0
 800908a:	4618      	mov	r0, r3
 800908c:	f011 ffd2 	bl	801b034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	609a      	str	r2, [r3, #8]
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80090a0:	2300      	movs	r3, #0
 80090a2:	60bb      	str	r3, [r7, #8]
 80090a4:	4b28      	ldr	r3, [pc, #160]	@ (8009148 <SystemClock_Config+0xcc>)
 80090a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a8:	4a27      	ldr	r2, [pc, #156]	@ (8009148 <SystemClock_Config+0xcc>)
 80090aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80090b0:	4b25      	ldr	r3, [pc, #148]	@ (8009148 <SystemClock_Config+0xcc>)
 80090b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090bc:	2300      	movs	r3, #0
 80090be:	607b      	str	r3, [r7, #4]
 80090c0:	4b22      	ldr	r3, [pc, #136]	@ (800914c <SystemClock_Config+0xd0>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a21      	ldr	r2, [pc, #132]	@ (800914c <SystemClock_Config+0xd0>)
 80090c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090ca:	6013      	str	r3, [r2, #0]
 80090cc:	4b1f      	ldr	r3, [pc, #124]	@ (800914c <SystemClock_Config+0xd0>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80090d8:	2301      	movs	r3, #1
 80090da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80090dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80090e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090e2:	2302      	movs	r3, #2
 80090e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80090ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80090ec:	2304      	movs	r3, #4
 80090ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80090f0:	23a8      	movs	r3, #168	@ 0xa8
 80090f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80090f4:	2302      	movs	r3, #2
 80090f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80090f8:	2304      	movs	r3, #4
 80090fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090fc:	f107 0320 	add.w	r3, r7, #32
 8009100:	4618      	mov	r0, r3
 8009102:	f7f9 febb 	bl	8002e7c <HAL_RCC_OscConfig>
 8009106:	4603      	mov	r3, r0
 8009108:	2b00      	cmp	r3, #0
 800910a:	d001      	beq.n	8009110 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800910c:	f000 f850 	bl	80091b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009110:	230f      	movs	r3, #15
 8009112:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009114:	2302      	movs	r3, #2
 8009116:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009118:	2300      	movs	r3, #0
 800911a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800911c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009120:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009126:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009128:	f107 030c 	add.w	r3, r7, #12
 800912c:	2105      	movs	r1, #5
 800912e:	4618      	mov	r0, r3
 8009130:	f7fa f91c 	bl	800336c <HAL_RCC_ClockConfig>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800913a:	f000 f839 	bl	80091b0 <Error_Handler>
  }
}
 800913e:	bf00      	nop
 8009140:	3750      	adds	r7, #80	@ 0x50
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	40023800 	.word	0x40023800
 800914c:	40007000 	.word	0x40007000

08009150 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a09      	ldr	r2, [pc, #36]	@ (8009184 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d10b      	bne.n	800917a <HAL_TIM_PeriodElapsedCallback+0x2a>
//		cournter += 1;
//		  hal_dshot_write(my_motor_values);
		  cournter_timint += 1;
 8009162:	4b09      	ldr	r3, [pc, #36]	@ (8009188 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	3301      	adds	r3, #1
 8009168:	4a07      	ldr	r2, [pc, #28]	@ (8009188 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800916a:	6013      	str	r3, [r2, #0]
		  hal_ibus_read(ibus_data);
 800916c:	4807      	ldr	r0, [pc, #28]	@ (800918c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800916e:	f002 fb7f 	bl	800b870 <hal_ibus_read>
		  ibus_soft_failsafe(ibus_data, 10);
 8009172:	210a      	movs	r1, #10
 8009174:	4805      	ldr	r0, [pc, #20]	@ (800918c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009176:	f002 fc0f 	bl	800b998 <ibus_soft_failsafe>
//		  HAL_Delay(1);
	}
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	40000800 	.word	0x40000800
 8009188:	20007ac8 	.word	0x20007ac8
 800918c:	20007acc 	.word	0x20007acc

08009190 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART){
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a04      	ldr	r2, [pc, #16]	@ (80091ac <HAL_UART_RxCpltCallback+0x1c>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d101      	bne.n	80091a4 <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 80091a0:	f002 fc36 	bl	800ba10 <ibus_reset_failsafe>
	}
}
 80091a4:	bf00      	nop
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	2000812c 	.word	0x2000812c

080091b0 <Error_Handler>:



void Error_Handler(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80091b4:	b672      	cpsid	i
}
 80091b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80091b8:	bf00      	nop
 80091ba:	e7fd      	b.n	80091b8 <Error_Handler+0x8>

080091bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80091bc:	480d      	ldr	r0, [pc, #52]	@ (80091f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80091be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80091c0:	f7f7 ffa2 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091c4:	480c      	ldr	r0, [pc, #48]	@ (80091f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80091c6:	490d      	ldr	r1, [pc, #52]	@ (80091fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80091c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009200 <LoopForever+0xe>)
  movs r3, #0
 80091ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091cc:	e002      	b.n	80091d4 <LoopCopyDataInit>

080091ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091d2:	3304      	adds	r3, #4

080091d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091d8:	d3f9      	bcc.n	80091ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091da:	4a0a      	ldr	r2, [pc, #40]	@ (8009204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80091dc:	4c0a      	ldr	r4, [pc, #40]	@ (8009208 <LoopForever+0x16>)
  movs r3, #0
 80091de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091e0:	e001      	b.n	80091e6 <LoopFillZerobss>

080091e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091e4:	3204      	adds	r2, #4

080091e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091e8:	d3fb      	bcc.n	80091e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80091ea:	f011 ff45 	bl	801b078 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091ee:	f7ff ff31 	bl	8009054 <main>

080091f2 <LoopForever>:

LoopForever:
  b LoopForever
 80091f2:	e7fe      	b.n	80091f2 <LoopForever>
  ldr   r0, =_estack
 80091f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80091f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091fc:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8009200:	0801f840 	.word	0x0801f840
  ldr r2, =_sbss
 8009204:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8009208:	2000a734 	.word	0x2000a734

0800920c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800920c:	e7fe      	b.n	800920c <ADC_IRQHandler>
	...

08009210 <SPI3_IRQHandler>:
//	}
//
//
//}
void SPI3_IRQHandler(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	af00      	add	r7, sp, #0

  HAL_SPI_IRQHandler(&hspi3);
 8009214:	4802      	ldr	r0, [pc, #8]	@ (8009220 <SPI3_IRQHandler+0x10>)
 8009216:	f7fa ff59 	bl	80040cc <HAL_SPI_IRQHandler>

}
 800921a:	bf00      	nop
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20007dac 	.word	0x20007dac

08009224 <zRanger2GetMeasurementAndRestart>:
bool checkRangeID;

NO_DMA_CCM_SAFE_ZERO_INIT static VL53L1_Dev_t dev;

static uint16_t zRanger2GetMeasurementAndRestart(VL53L1_Dev_t *dev)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b08c      	sub	sp, #48	@ 0x30
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
    VL53L1_Error status = VL53L1_ERROR_NONE;
 800922c:	2300      	movs	r3, #0
 800922e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    VL53L1_RangingMeasurementData_t rangingData;
    uint8_t dataReady = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
    uint16_t range;

    while (dataReady == 0)
 8009236:	e00b      	b.n	8009250 <zRanger2GetMeasurementAndRestart+0x2c>
    {
        status = VL53L1_GetMeasurementDataReady(dev, &dataReady);
 8009238:	f107 030f 	add.w	r3, r7, #15
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f00d faf8 	bl	8016834 <VL53L1_GetMeasurementDataReady>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        vTaskDelay(M2T(1));
 800924a:	2001      	movs	r0, #1
 800924c:	f7fe f8e2 	bl	8007414 <vTaskDelay>
    while (dataReady == 0)
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d0f0      	beq.n	8009238 <zRanger2GetMeasurementAndRestart+0x14>
    }

    status = VL53L1_GetRangingMeasurementData(dev, &rangingData);
 8009256:	f107 0310 	add.w	r3, r7, #16
 800925a:	4619      	mov	r1, r3
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f00d fca5 	bl	8016bac <VL53L1_GetRangingMeasurementData>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    range = rangingData.RangeMilliMeter;
 8009268:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800926c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    VL53L1_StopMeasurement(dev);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f00d fac7 	bl	8016802 <VL53L1_StopMeasurement>
    status = VL53L1_StartMeasurement(dev);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f00d fa85 	bl	8016784 <VL53L1_StartMeasurement>
 800927a:	4603      	mov	r3, r0
 800927c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    status = status;

    return range;
 8009280:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8009282:	4618      	mov	r0, r3
 8009284:	3730      	adds	r7, #48	@ 0x30
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
	...

0800928c <zRanger2Init>:

void zRanger2Init()
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b082      	sub	sp, #8
 8009290:	af02      	add	r7, sp, #8
  if (isInit)
 8009292:	4b1a      	ldr	r3, [pc, #104]	@ (80092fc <zRanger2Init+0x70>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d12d      	bne.n	80092f6 <zRanger2Init+0x6a>
    return;

  checkRangeID = vl53l1xInit(&dev, &hi2c2);
 800929a:	4919      	ldr	r1, [pc, #100]	@ (8009300 <zRanger2Init+0x74>)
 800929c:	4819      	ldr	r0, [pc, #100]	@ (8009304 <zRanger2Init+0x78>)
 800929e:	f004 f88b 	bl	800d3b8 <vl53l1xInit>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b18      	ldr	r3, [pc, #96]	@ (8009308 <zRanger2Init+0x7c>)
 80092a8:	701a      	strb	r2, [r3, #0]


  xTaskCreate(zRanger2Task, ZRANGER2_TASK_NAME, ZRANGER2_TASK_STACKSIZE, NULL, ZRANGER2_TASK_PRI, NULL);
 80092aa:	2300      	movs	r3, #0
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	2302      	movs	r3, #2
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	2300      	movs	r3, #0
 80092b4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80092b8:	4914      	ldr	r1, [pc, #80]	@ (800930c <zRanger2Init+0x80>)
 80092ba:	4815      	ldr	r0, [pc, #84]	@ (8009310 <zRanger2Init+0x84>)
 80092bc:	f7fd fee2 	bl	8007084 <xTaskCreate>

  // pre-compute constant in the measurement noise model for kalman
  expCoeff = logf(expStdB / expStdA) / (expPointB - expPointA);
 80092c0:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8009314 <zRanger2Init+0x88>
 80092c4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009318 <zRanger2Init+0x8c>
 80092c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092cc:	eeb0 0a67 	vmov.f32	s0, s15
 80092d0:	f011 fffe 	bl	801b2d0 <logf>
 80092d4:	eef0 6a40 	vmov.f32	s13, s0
 80092d8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80092dc:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 80092e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80092e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80092e8:	4b0c      	ldr	r3, [pc, #48]	@ (800931c <zRanger2Init+0x90>)
 80092ea:	edc3 7a00 	vstr	s15, [r3]

  isInit = true;
 80092ee:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <zRanger2Init+0x70>)
 80092f0:	2201      	movs	r2, #1
 80092f2:	701a      	strb	r2, [r3, #0]
 80092f4:	e000      	b.n	80092f8 <zRanger2Init+0x6c>
    return;
 80092f6:	bf00      	nop
}
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20007ade 	.word	0x20007ade
 8009300:	20007cfc 	.word	0x20007cfc
 8009304:	10000000 	.word	0x10000000
 8009308:	20007ae4 	.word	0x20007ae4
 800930c:	0801e848 	.word	0x0801e848
 8009310:	08009321 	.word	0x08009321
 8009314:	3e4ccccd 	.word	0x3e4ccccd
 8009318:	3b23d70a 	.word	0x3b23d70a
 800931c:	20007ad8 	.word	0x20007ad8

08009320 <zRanger2Task>:

  return true;
}

void zRanger2Task(void* arg)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b086      	sub	sp, #24
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  TickType_t lastWakeTime;

  systemWaitStart();
 8009328:	f007 fa1a 	bl	8010760 <systemWaitStart>

  // Restart sensor
  VL53L1_StopMeasurement(&dev);
 800932c:	4835      	ldr	r0, [pc, #212]	@ (8009404 <zRanger2Task+0xe4>)
 800932e:	f00d fa68 	bl	8016802 <VL53L1_StopMeasurement>
  VL53L1_SetDistanceMode(&dev, VL53L1_DISTANCEMODE_MEDIUM);
 8009332:	2102      	movs	r1, #2
 8009334:	4833      	ldr	r0, [pc, #204]	@ (8009404 <zRanger2Task+0xe4>)
 8009336:	f00c ff84 	bl	8016242 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds(&dev, 25000);
 800933a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800933e:	4831      	ldr	r0, [pc, #196]	@ (8009404 <zRanger2Task+0xe4>)
 8009340:	f00d f806 	bl	8016350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>

  VL53L1_StartMeasurement(&dev);
 8009344:	482f      	ldr	r0, [pc, #188]	@ (8009404 <zRanger2Task+0xe4>)
 8009346:	f00d fa1d 	bl	8016784 <VL53L1_StartMeasurement>

  lastWakeTime = xTaskGetTickCount();
 800934a:	f7fe f9b3 	bl	80076b4 <xTaskGetTickCount>
 800934e:	4603      	mov	r3, r0
 8009350:	60fb      	str	r3, [r7, #12]

  while (1) {
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	2119      	movs	r1, #25
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd ffe5 	bl	8007328 <vTaskDelayUntil>
    rangeCounter++;
 800935e:	4b2a      	ldr	r3, [pc, #168]	@ (8009408 <zRanger2Task+0xe8>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	3301      	adds	r3, #1
 8009364:	4a28      	ldr	r2, [pc, #160]	@ (8009408 <zRanger2Task+0xe8>)
 8009366:	6013      	str	r3, [r2, #0]
    range_last = zRanger2GetMeasurementAndRestart(&dev);
 8009368:	4826      	ldr	r0, [pc, #152]	@ (8009404 <zRanger2Task+0xe4>)
 800936a:	f7ff ff5b 	bl	8009224 <zRanger2GetMeasurementAndRestart>
 800936e:	4603      	mov	r3, r0
 8009370:	461a      	mov	r2, r3
 8009372:	4b26      	ldr	r3, [pc, #152]	@ (800940c <zRanger2Task+0xec>)
 8009374:	801a      	strh	r2, [r3, #0]
    rangeSet(rangeDown, range_last / 1000.0f);
 8009376:	4b25      	ldr	r3, [pc, #148]	@ (800940c <zRanger2Task+0xec>)
 8009378:	881b      	ldrh	r3, [r3, #0]
 800937a:	ee07 3a90 	vmov	s15, r3
 800937e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009382:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8009410 <zRanger2Task+0xf0>
 8009386:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800938a:	eeb0 0a47 	vmov.f32	s0, s14
 800938e:	2005      	movs	r0, #5
 8009390:	f006 f914 	bl	800f5bc <rangeSet>

    // check if range is feasible and push into the estimator
    // the sensor should not be able to measure >5 [m], and outliers typically
    // occur as >8 [m] measurements
    if (range_last < RANGE_OUTLIER_LIMIT) {
 8009394:	4b1d      	ldr	r3, [pc, #116]	@ (800940c <zRanger2Task+0xec>)
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	f241 3287 	movw	r2, #4999	@ 0x1387
 800939c:	4293      	cmp	r3, r2
 800939e:	d8d8      	bhi.n	8009352 <zRanger2Task+0x32>
      float distance = (float)range_last * 0.001f; // Scale from [mm] to [m]
 80093a0:	4b1a      	ldr	r3, [pc, #104]	@ (800940c <zRanger2Task+0xec>)
 80093a2:	881b      	ldrh	r3, [r3, #0]
 80093a4:	ee07 3a90 	vmov	s15, r3
 80093a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ac:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009414 <zRanger2Task+0xf4>
 80093b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093b4:	edc7 7a05 	vstr	s15, [r7, #20]
      float stdDev = expStdA * (1.0f  + expf( expCoeff * (distance - expPointA)));
 80093b8:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80093bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80093c0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80093c4:	4b14      	ldr	r3, [pc, #80]	@ (8009418 <zRanger2Task+0xf8>)
 80093c6:	edd3 7a00 	vldr	s15, [r3]
 80093ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ce:	eeb0 0a67 	vmov.f32	s0, s15
 80093d2:	f011 ff47 	bl	801b264 <expf>
 80093d6:	eef0 7a40 	vmov.f32	s15, s0
 80093da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80093de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800941c <zRanger2Task+0xfc>
 80093e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80093ea:	edc7 7a04 	vstr	s15, [r7, #16]
      rangeEnqueueDownRangeInEstimator(distance, stdDev, xTaskGetTickCount());
 80093ee:	f7fe f961 	bl	80076b4 <xTaskGetTickCount>
 80093f2:	4603      	mov	r3, r0
 80093f4:	4618      	mov	r0, r3
 80093f6:	edd7 0a04 	vldr	s1, [r7, #16]
 80093fa:	ed97 0a05 	vldr	s0, [r7, #20]
 80093fe:	f006 f901 	bl	800f604 <rangeEnqueueDownRangeInEstimator>
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8009402:	e7a6      	b.n	8009352 <zRanger2Task+0x32>
 8009404:	10000000 	.word	0x10000000
 8009408:	20007ae0 	.word	0x20007ae0
 800940c:	20007adc 	.word	0x20007adc
 8009410:	447a0000 	.word	0x447a0000
 8009414:	3a83126f 	.word	0x3a83126f
 8009418:	20007ad8 	.word	0x20007ad8
 800941c:	3b23d70a 	.word	0x3b23d70a

08009420 <atan2_approx>:
float cos_approx(float x)
{
    return sin_approx(x + (0.5f * M_PI));
}
float atan2_approx(float y, float x)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	@ 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	ed87 0a01 	vstr	s0, [r7, #4]
 800942a:	edc7 0a00 	vstr	s1, [r7]
    #define atanPolyCoef5  0.05030176425872175f
    #define atanPolyCoef6  0.1471039133652469f
    #define atanPolyCoef7  0.6444640676891548f

    float res, absX, absY;
    absX = fabsf(x);
 800942e:	edd7 7a00 	vldr	s15, [r7]
 8009432:	eef0 7ae7 	vabs.f32	s15, s15
 8009436:	edc7 7a08 	vstr	s15, [r7, #32]
    absY = fabsf(y);
 800943a:	edd7 7a01 	vldr	s15, [r7, #4]
 800943e:	eef0 7ae7 	vabs.f32	s15, s15
 8009442:	edc7 7a07 	vstr	s15, [r7, #28]
    res  = MAX(absX, absY);
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	61bb      	str	r3, [r7, #24]
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	617b      	str	r3, [r7, #20]
 800944e:	ed97 7a06 	vldr	s14, [r7, #24]
 8009452:	edd7 7a05 	vldr	s15, [r7, #20]
 8009456:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945e:	dd01      	ble.n	8009464 <atan2_approx+0x44>
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	e000      	b.n	8009466 <atan2_approx+0x46>
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	627b      	str	r3, [r7, #36]	@ 0x24
    if (res) res = MIN(absX, absY) / res;
 8009468:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800946c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009474:	d018      	beq.n	80094a8 <atan2_approx+0x88>
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	613b      	str	r3, [r7, #16]
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	ed97 7a04 	vldr	s14, [r7, #16]
 8009482:	edd7 7a03 	vldr	s15, [r7, #12]
 8009486:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	d502      	bpl.n	8009496 <atan2_approx+0x76>
 8009490:	edd7 7a04 	vldr	s15, [r7, #16]
 8009494:	e001      	b.n	800949a <atan2_approx+0x7a>
 8009496:	edd7 7a03 	vldr	s15, [r7, #12]
 800949a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800949e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80094a2:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 80094a6:	e002      	b.n	80094ae <atan2_approx+0x8e>
    else res = 0.0f;
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	627b      	str	r3, [r7, #36]	@ 0x24
    res = -((((atanPolyCoef5 * res - atanPolyCoef4) * res - atanPolyCoef3) * res - atanPolyCoef2) * res - atanPolyCoef1) / ((atanPolyCoef7 * res + atanPolyCoef6) * res + 1.0f);
 80094ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80094b2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80095c8 <atan2_approx+0x1a8>
 80094b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80094ba:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80095cc <atan2_approx+0x1ac>
 80094be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80094c2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80094c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ca:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80095d0 <atan2_approx+0x1b0>
 80094ce:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80094d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80094d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094da:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80095d4 <atan2_approx+0x1b4>
 80094de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80094e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80094e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094ea:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80095d8 <atan2_approx+0x1b8>
 80094ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094f2:	eef1 6a67 	vneg.f32	s13, s15
 80094f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80094fa:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80095dc <atan2_approx+0x1bc>
 80094fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009502:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80095e0 <atan2_approx+0x1c0>
 8009506:	ee37 7a87 	vadd.f32	s14, s15, s14
 800950a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800950e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009516:	ee37 7a87 	vadd.f32	s14, s15, s14
 800951a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800951e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (absY > absX) res = (M_PI / 2.0f) - res;
 8009522:	ed97 7a07 	vldr	s14, [r7, #28]
 8009526:	edd7 7a08 	vldr	s15, [r7, #32]
 800952a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800952e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009532:	dd11      	ble.n	8009558 <atan2_approx+0x138>
 8009534:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009536:	f7f6 ffb9 	bl	80004ac <__aeabi_f2d>
 800953a:	4602      	mov	r2, r0
 800953c:	460b      	mov	r3, r1
 800953e:	a11e      	add	r1, pc, #120	@ (adr r1, 80095b8 <atan2_approx+0x198>)
 8009540:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009544:	f7f6 fe52 	bl	80001ec <__aeabi_dsub>
 8009548:	4602      	mov	r2, r0
 800954a:	460b      	mov	r3, r1
 800954c:	4610      	mov	r0, r2
 800954e:	4619      	mov	r1, r3
 8009550:	f7f7 fab4 	bl	8000abc <__aeabi_d2f>
 8009554:	4603      	mov	r3, r0
 8009556:	627b      	str	r3, [r7, #36]	@ 0x24
    if (x < 0) res = M_PI - res;
 8009558:	edd7 7a00 	vldr	s15, [r7]
 800955c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009564:	d511      	bpl.n	800958a <atan2_approx+0x16a>
 8009566:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009568:	f7f6 ffa0 	bl	80004ac <__aeabi_f2d>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	a113      	add	r1, pc, #76	@ (adr r1, 80095c0 <atan2_approx+0x1a0>)
 8009572:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009576:	f7f6 fe39 	bl	80001ec <__aeabi_dsub>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4610      	mov	r0, r2
 8009580:	4619      	mov	r1, r3
 8009582:	f7f7 fa9b 	bl	8000abc <__aeabi_d2f>
 8009586:	4603      	mov	r3, r0
 8009588:	627b      	str	r3, [r7, #36]	@ 0x24
    if (y < 0) res = -res;
 800958a:	edd7 7a01 	vldr	s15, [r7, #4]
 800958e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009596:	d505      	bpl.n	80095a4 <atan2_approx+0x184>
 8009598:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800959c:	eef1 7a67 	vneg.f32	s15, s15
 80095a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	ee07 3a90 	vmov	s15, r3
}
 80095aa:	eeb0 0a67 	vmov.f32	s0, s15
 80095ae:	3728      	adds	r7, #40	@ 0x28
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	f3af 8000 	nop.w
 80095b8:	54442d18 	.word	0x54442d18
 80095bc:	3ff921fb 	.word	0x3ff921fb
 80095c0:	54442d18 	.word	0x54442d18
 80095c4:	400921fb 	.word	0x400921fb
 80095c8:	3d4e0939 	.word	0x3d4e0939
 80095cc:	3e9eb5e3 	.word	0x3e9eb5e3
 80095d0:	3e16fa88 	.word	0x3e16fa88
 80095d4:	3f7ffe45 	.word	0x3f7ffe45
 80095d8:	34a8dfa7 	.word	0x34a8dfa7
 80095dc:	3f24fb99 	.word	0x3f24fb99
 80095e0:	3e16a269 	.word	0x3e16a269
 80095e4:	00000000 	.word	0x00000000

080095e8 <acos_approx>:
float acos_approx(float x)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b084      	sub	sp, #16
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	ed87 0a01 	vstr	s0, [r7, #4]
    float xa = fabsf(x);
 80095f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80095f6:	eef0 7ae7 	vabs.f32	s15, s15
 80095fa:	edc7 7a03 	vstr	s15, [r7, #12]
    float result = sqrtf(1.0f - xa) * (1.5707288f + xa * (-0.2121144f + xa * (0.0742610f + (-0.0187293f * xa))));
 80095fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009602:	edd7 7a03 	vldr	s15, [r7, #12]
 8009606:	ee77 7a67 	vsub.f32	s15, s14, s15
 800960a:	eeb0 0a67 	vmov.f32	s0, s15
 800960e:	f011 fee5 	bl	801b3dc <sqrtf>
 8009612:	eef0 6a40 	vmov.f32	s13, s0
 8009616:	edd7 7a03 	vldr	s15, [r7, #12]
 800961a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80096a0 <acos_approx+0xb8>
 800961e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009622:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80096a4 <acos_approx+0xbc>
 8009626:	ee37 7a87 	vadd.f32	s14, s15, s14
 800962a:	edd7 7a03 	vldr	s15, [r7, #12]
 800962e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009632:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80096a8 <acos_approx+0xc0>
 8009636:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800963a:	edd7 7a03 	vldr	s15, [r7, #12]
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80096ac <acos_approx+0xc4>
 8009646:	ee77 7a87 	vadd.f32	s15, s15, s14
 800964a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800964e:	edc7 7a02 	vstr	s15, [r7, #8]
    if (x < 0.0f)
 8009652:	edd7 7a01 	vldr	s15, [r7, #4]
 8009656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800965a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800965e:	d511      	bpl.n	8009684 <acos_approx+0x9c>
        return M_PI - result;
 8009660:	68b8      	ldr	r0, [r7, #8]
 8009662:	f7f6 ff23 	bl	80004ac <__aeabi_f2d>
 8009666:	4602      	mov	r2, r0
 8009668:	460b      	mov	r3, r1
 800966a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009698 <acos_approx+0xb0>)
 800966c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009670:	f7f6 fdbc 	bl	80001ec <__aeabi_dsub>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4610      	mov	r0, r2
 800967a:	4619      	mov	r1, r3
 800967c:	f7f7 fa1e 	bl	8000abc <__aeabi_d2f>
 8009680:	4603      	mov	r3, r0
 8009682:	e000      	b.n	8009686 <acos_approx+0x9e>
    else
        return result;
 8009684:	68bb      	ldr	r3, [r7, #8]
}
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eeb0 0a67 	vmov.f32	s0, s15
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	f3af 8000 	nop.w
 8009698:	54442d18 	.word	0x54442d18
 800969c:	400921fb 	.word	0x400921fb
 80096a0:	bc996e30 	.word	0xbc996e30
 80096a4:	3d981627 	.word	0x3d981627
 80096a8:	3e593484 	.word	0x3e593484
 80096ac:	3fc90da4 	.word	0x3fc90da4

080096b0 <MadgwickAHRSupdate>:
void MadgwickAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) {
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b0ae      	sub	sp, #184	@ 0xb8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80096ba:	edc7 0a08 	vstr	s1, [r7, #32]
 80096be:	ed87 1a07 	vstr	s2, [r7, #28]
 80096c2:	edc7 1a06 	vstr	s3, [r7, #24]
 80096c6:	ed87 2a05 	vstr	s4, [r7, #20]
 80096ca:	edc7 2a04 	vstr	s5, [r7, #16]
 80096ce:	ed87 3a03 	vstr	s6, [r7, #12]
 80096d2:	edc7 3a02 	vstr	s7, [r7, #8]
 80096d6:	ed87 4a01 	vstr	s8, [r7, #4]
	float qDot1, qDot2, qDot3, qDot4;
	float hx, hy;
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80096da:	edd7 7a03 	vldr	s15, [r7, #12]
 80096de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80096e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e6:	d11d      	bne.n	8009724 <MadgwickAHRSupdate+0x74>
 80096e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80096ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80096f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f4:	d116      	bne.n	8009724 <MadgwickAHRSupdate+0x74>
 80096f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80096fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80096fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009702:	d10f      	bne.n	8009724 <MadgwickAHRSupdate+0x74>
		MadgwickAHRSupdateIMU(gx, gy, gz, ax, ay, az);
 8009704:	edd7 2a04 	vldr	s5, [r7, #16]
 8009708:	ed97 2a05 	vldr	s4, [r7, #20]
 800970c:	edd7 1a06 	vldr	s3, [r7, #24]
 8009710:	ed97 1a07 	vldr	s2, [r7, #28]
 8009714:	edd7 0a08 	vldr	s1, [r7, #32]
 8009718:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 800971c:	f001 f862 	bl	800a7e4 <MadgwickAHRSupdateIMU>
		return;
 8009720:	f001 b84d 	b.w	800a7be <MadgwickAHRSupdate+0x110e>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8009724:	4be3      	ldr	r3, [pc, #908]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 8009726:	edd3 7a00 	vldr	s15, [r3]
 800972a:	eeb1 7a67 	vneg.f32	s14, s15
 800972e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009732:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009736:	4be0      	ldr	r3, [pc, #896]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009738:	edd3 6a00 	vldr	s13, [r3]
 800973c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009740:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009744:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009748:	4bdc      	ldr	r3, [pc, #880]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 800974a:	edd3 6a00 	vldr	s13, [r3]
 800974e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800975a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800975e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009762:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8009766:	4bd6      	ldr	r3, [pc, #856]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 8009768:	ed93 7a00 	vldr	s14, [r3]
 800976c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009770:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009774:	4bd0      	ldr	r3, [pc, #832]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009776:	edd3 6a00 	vldr	s13, [r3]
 800977a:	edd7 7a07 	vldr	s15, [r7, #28]
 800977e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009786:	4bcd      	ldr	r3, [pc, #820]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009788:	edd3 6a00 	vldr	s13, [r3]
 800978c:	edd7 7a08 	vldr	s15, [r7, #32]
 8009790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009798:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800979c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097a0:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80097a4:	4bc6      	ldr	r3, [pc, #792]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 80097a6:	ed93 7a00 	vldr	s14, [r3]
 80097aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80097ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097b2:	4bc0      	ldr	r3, [pc, #768]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 80097b4:	edd3 6a00 	vldr	s13, [r3]
 80097b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80097bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80097c4:	4bbd      	ldr	r3, [pc, #756]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 80097c6:	edd3 6a00 	vldr	s13, [r3]
 80097ca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80097ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80097d6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80097da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097de:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80097e2:	4bb7      	ldr	r3, [pc, #732]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 80097e4:	ed93 7a00 	vldr	s14, [r3]
 80097e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80097ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80097f0:	4bb0      	ldr	r3, [pc, #704]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 80097f2:	edd3 6a00 	vldr	s13, [r3]
 80097f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80097fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80097fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009802:	4bad      	ldr	r3, [pc, #692]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009804:	edd3 6a00 	vldr	s13, [r3]
 8009808:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800980c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009814:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009818:	ee67 7a87 	vmul.f32	s15, s15, s14
 800981c:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8009820:	edd7 7a06 	vldr	s15, [r7, #24]
 8009824:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009828:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800982c:	d10e      	bne.n	800984c <MadgwickAHRSupdate+0x19c>
 800982e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009832:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983a:	d107      	bne.n	800984c <MadgwickAHRSupdate+0x19c>
 800983c:	edd7 7a04 	vldr	s15, [r7, #16]
 8009840:	eef5 7a40 	vcmp.f32	s15, #0.0
 8009844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009848:	f000 85ac 	beq.w	800a3a4 <MadgwickAHRSupdate+0xcf4>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800984c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009850:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009854:	edd7 7a05 	vldr	s15, [r7, #20]
 8009858:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800985c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009860:	edd7 7a04 	vldr	s15, [r7, #16]
 8009864:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009868:	ee77 7a27 	vadd.f32	s15, s14, s15
 800986c:	eeb0 0a67 	vmov.f32	s0, s15
 8009870:	f001 fadc 	bl	800ae2c <invSqrt>
 8009874:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		ax *= recipNorm;
 8009878:	ed97 7a06 	vldr	s14, [r7, #24]
 800987c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8009880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009884:	edc7 7a06 	vstr	s15, [r7, #24]
		ay *= recipNorm;
 8009888:	ed97 7a05 	vldr	s14, [r7, #20]
 800988c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8009890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009894:	edc7 7a05 	vstr	s15, [r7, #20]
		az *= recipNorm;   
 8009898:	ed97 7a04 	vldr	s14, [r7, #16]
 800989c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80098a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098a4:	edc7 7a04 	vstr	s15, [r7, #16]

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80098a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80098ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80098b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80098b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80098bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80098c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80098c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80098c8:	eeb0 0a67 	vmov.f32	s0, s15
 80098cc:	f001 faae 	bl	800ae2c <invSqrt>
 80098d0:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		mx *= recipNorm;
 80098d4:	ed97 7a03 	vldr	s14, [r7, #12]
 80098d8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80098dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e0:	edc7 7a03 	vstr	s15, [r7, #12]
		my *= recipNorm;
 80098e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80098e8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80098ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f0:	edc7 7a02 	vstr	s15, [r7, #8]
		mz *= recipNorm;
 80098f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80098f8:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80098fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009900:	edc7 7a01 	vstr	s15, [r7, #4]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8009904:	4b6e      	ldr	r3, [pc, #440]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 8009906:	edd3 7a00 	vldr	s15, [r3]
 800990a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800990e:	ed97 7a03 	vldr	s14, [r7, #12]
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
		_2q0my = 2.0f * q0 * my;
 800991a:	4b69      	ldr	r3, [pc, #420]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 800991c:	edd3 7a00 	vldr	s15, [r3]
 8009920:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009924:	ed97 7a02 	vldr	s14, [r7, #8]
 8009928:	ee67 7a27 	vmul.f32	s15, s14, s15
 800992c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
		_2q0mz = 2.0f * q0 * mz;
 8009930:	4b63      	ldr	r3, [pc, #396]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 8009932:	edd3 7a00 	vldr	s15, [r3]
 8009936:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800993a:	ed97 7a01 	vldr	s14, [r7, #4]
 800993e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009942:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
		_2q1mx = 2.0f * q1 * mx;
 8009946:	4b5b      	ldr	r3, [pc, #364]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 8009948:	edd3 7a00 	vldr	s15, [r3]
 800994c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009950:	ed97 7a03 	vldr	s14, [r7, #12]
 8009954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009958:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
		_2q0 = 2.0f * q0;
 800995c:	4b58      	ldr	r3, [pc, #352]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 800995e:	edd3 7a00 	vldr	s15, [r3]
 8009962:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009966:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
		_2q1 = 2.0f * q1;
 800996a:	4b52      	ldr	r3, [pc, #328]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 800996c:	edd3 7a00 	vldr	s15, [r3]
 8009970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009974:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
		_2q2 = 2.0f * q2;
 8009978:	4b4f      	ldr	r3, [pc, #316]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 800997a:	edd3 7a00 	vldr	s15, [r3]
 800997e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009982:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
		_2q3 = 2.0f * q3;
 8009986:	4b4d      	ldr	r3, [pc, #308]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009988:	edd3 7a00 	vldr	s15, [r3]
 800998c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009990:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
		_2q0q2 = 2.0f * q0 * q2;
 8009994:	4b4a      	ldr	r3, [pc, #296]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 8009996:	edd3 7a00 	vldr	s15, [r3]
 800999a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800999e:	4b46      	ldr	r3, [pc, #280]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 80099a0:	edd3 7a00 	vldr	s15, [r3]
 80099a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a8:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
		_2q2q3 = 2.0f * q2 * q3;
 80099ac:	4b42      	ldr	r3, [pc, #264]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 80099ae:	edd3 7a00 	vldr	s15, [r3]
 80099b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80099b6:	4b41      	ldr	r3, [pc, #260]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 80099b8:	edd3 7a00 	vldr	s15, [r3]
 80099bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099c0:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
		q0q0 = q0 * q0;
 80099c4:	4b3e      	ldr	r3, [pc, #248]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 80099c6:	ed93 7a00 	vldr	s14, [r3]
 80099ca:	4b3d      	ldr	r3, [pc, #244]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 80099cc:	edd3 7a00 	vldr	s15, [r3]
 80099d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
		q0q1 = q0 * q1;
 80099d8:	4b39      	ldr	r3, [pc, #228]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 80099da:	ed93 7a00 	vldr	s14, [r3]
 80099de:	4b35      	ldr	r3, [pc, #212]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 80099e0:	edd3 7a00 	vldr	s15, [r3]
 80099e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e8:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
		q0q2 = q0 * q2;
 80099ec:	4b34      	ldr	r3, [pc, #208]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 80099ee:	ed93 7a00 	vldr	s14, [r3]
 80099f2:	4b31      	ldr	r3, [pc, #196]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 80099f4:	edd3 7a00 	vldr	s15, [r3]
 80099f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099fc:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
		q0q3 = q0 * q3;
 8009a00:	4b2f      	ldr	r3, [pc, #188]	@ (8009ac0 <MadgwickAHRSupdate+0x410>)
 8009a02:	ed93 7a00 	vldr	s14, [r3]
 8009a06:	4b2d      	ldr	r3, [pc, #180]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009a08:	edd3 7a00 	vldr	s15, [r3]
 8009a0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a10:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		q1q1 = q1 * q1;
 8009a14:	4b27      	ldr	r3, [pc, #156]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 8009a16:	ed93 7a00 	vldr	s14, [r3]
 8009a1a:	4b26      	ldr	r3, [pc, #152]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 8009a1c:	edd3 7a00 	vldr	s15, [r3]
 8009a20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a24:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		q1q2 = q1 * q2;
 8009a28:	4b22      	ldr	r3, [pc, #136]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 8009a2a:	ed93 7a00 	vldr	s14, [r3]
 8009a2e:	4b22      	ldr	r3, [pc, #136]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009a30:	edd3 7a00 	vldr	s15, [r3]
 8009a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a38:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		q1q3 = q1 * q3;
 8009a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab4 <MadgwickAHRSupdate+0x404>)
 8009a3e:	ed93 7a00 	vldr	s14, [r3]
 8009a42:	4b1e      	ldr	r3, [pc, #120]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009a44:	edd3 7a00 	vldr	s15, [r3]
 8009a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4c:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		q2q2 = q2 * q2;
 8009a50:	4b19      	ldr	r3, [pc, #100]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009a52:	ed93 7a00 	vldr	s14, [r3]
 8009a56:	4b18      	ldr	r3, [pc, #96]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009a58:	edd3 7a00 	vldr	s15, [r3]
 8009a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a60:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		q2q3 = q2 * q3;
 8009a64:	4b14      	ldr	r3, [pc, #80]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009a66:	ed93 7a00 	vldr	s14, [r3]
 8009a6a:	4b14      	ldr	r3, [pc, #80]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009a6c:	edd3 7a00 	vldr	s15, [r3]
 8009a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a74:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		q3q3 = q3 * q3;
 8009a78:	4b10      	ldr	r3, [pc, #64]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009a7a:	ed93 7a00 	vldr	s14, [r3]
 8009a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009a80:	edd3 7a00 	vldr	s15, [r3]
 8009a84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a88:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8009a8c:	ed97 7a03 	vldr	s14, [r7, #12]
 8009a90:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8009a94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a98:	4b08      	ldr	r3, [pc, #32]	@ (8009abc <MadgwickAHRSupdate+0x40c>)
 8009a9a:	edd3 6a00 	vldr	s13, [r3]
 8009a9e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8009aa2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009aa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009aaa:	4b03      	ldr	r3, [pc, #12]	@ (8009ab8 <MadgwickAHRSupdate+0x408>)
 8009aac:	edd3 6a00 	vldr	s13, [r3]
 8009ab0:	e008      	b.n	8009ac4 <MadgwickAHRSupdate+0x414>
 8009ab2:	bf00      	nop
 8009ab4:	20007ae8 	.word	0x20007ae8
 8009ab8:	20007aec 	.word	0x20007aec
 8009abc:	20007af0 	.word	0x20007af0
 8009ac0:	20000014 	.word	0x20000014
 8009ac4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8009ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009acc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ad0:	edd7 6a03 	vldr	s13, [r7, #12]
 8009ad4:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009ae0:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8009ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8009ae8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009aec:	4bf4      	ldr	r3, [pc, #976]	@ (8009ec0 <MadgwickAHRSupdate+0x810>)
 8009aee:	edd3 7a00 	vldr	s15, [r3]
 8009af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009af6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009afa:	edd7 6a23 	vldr	s13, [r7, #140]	@ 0x8c
 8009afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009b06:	4bef      	ldr	r3, [pc, #956]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009b08:	edd3 7a00 	vldr	s15, [r3]
 8009b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b14:	edd7 6a03 	vldr	s13, [r7, #12]
 8009b18:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b24:	edd7 6a03 	vldr	s13, [r7, #12]
 8009b28:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009b2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b34:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8009b38:	4be2      	ldr	r3, [pc, #904]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009b3a:	ed93 7a00 	vldr	s14, [r3]
 8009b3e:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8009b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009b46:	edd7 6a02 	vldr	s13, [r7, #8]
 8009b4a:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8009b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b56:	4bdc      	ldr	r3, [pc, #880]	@ (8009ec8 <MadgwickAHRSupdate+0x818>)
 8009b58:	edd3 6a00 	vldr	s13, [r3]
 8009b5c:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8009b60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b64:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b68:	4bd5      	ldr	r3, [pc, #852]	@ (8009ec0 <MadgwickAHRSupdate+0x810>)
 8009b6a:	edd3 6a00 	vldr	s13, [r3]
 8009b6e:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8009b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b7a:	edd7 6a02 	vldr	s13, [r7, #8]
 8009b7e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009b8a:	edd7 6a02 	vldr	s13, [r7, #8]
 8009b8e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009b9a:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8009b9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009ba2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009ba6:	4bc7      	ldr	r3, [pc, #796]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009ba8:	edd3 7a00 	vldr	s15, [r3]
 8009bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009bb4:	edd7 6a02 	vldr	s13, [r7, #8]
 8009bb8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009bbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009bc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009bc4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_2bx = sqrt(hx * hx + hy * hy);
 8009bc8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8009bcc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009bd0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8009bd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009bdc:	ee17 0a90 	vmov	r0, s15
 8009be0:	f7f6 fc64 	bl	80004ac <__aeabi_f2d>
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	ec43 2b10 	vmov	d0, r2, r3
 8009bec:	f011 faac 	bl	801b148 <sqrt>
 8009bf0:	ec53 2b10 	vmov	r2, r3, d0
 8009bf4:	4610      	mov	r0, r2
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f7f6 ff60 	bl	8000abc <__aeabi_d2f>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8009c00:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8009c04:	eeb1 7a67 	vneg.f32	s14, s15
 8009c08:	4bad      	ldr	r3, [pc, #692]	@ (8009ec0 <MadgwickAHRSupdate+0x810>)
 8009c0a:	edd3 7a00 	vldr	s15, [r3]
 8009c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c12:	4bad      	ldr	r3, [pc, #692]	@ (8009ec8 <MadgwickAHRSupdate+0x818>)
 8009c14:	edd3 6a00 	vldr	s13, [r3]
 8009c18:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8009c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c24:	edd7 6a01 	vldr	s13, [r7, #4]
 8009c28:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8009c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c34:	4ba3      	ldr	r3, [pc, #652]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009c36:	edd3 6a00 	vldr	s13, [r3]
 8009c3a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8009c3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c46:	edd7 6a01 	vldr	s13, [r7, #4]
 8009c4a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c56:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8009c5a:	edd7 7a02 	vldr	s15, [r7, #8]
 8009c5e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009c62:	4b98      	ldr	r3, [pc, #608]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009c64:	edd3 7a00 	vldr	s15, [r3]
 8009c68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c70:	edd7 6a01 	vldr	s13, [r7, #4]
 8009c74:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009c80:	edd7 6a01 	vldr	s13, [r7, #4]
 8009c84:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c90:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4bx = 2.0f * _2bx;
 8009c94:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009c98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009c9c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_4bz = 2.0f * _2bz;
 8009ca0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009ca4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ca8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8009cac:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8009cb0:	eeb1 7a67 	vneg.f32	s14, s15
 8009cb4:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009cb8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009cbc:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8009cc0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009cc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8009cc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009ccc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009cd0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8009cd4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009cd8:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8009cdc:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ce4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009ce8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8009cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009cf4:	4b72      	ldr	r3, [pc, #456]	@ (8009ec0 <MadgwickAHRSupdate+0x810>)
 8009cf6:	edd3 6a00 	vldr	s13, [r3]
 8009cfa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009cfe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009d02:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009d06:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009d0a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009d0e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009d12:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009d16:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009d1a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009d1e:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8009d22:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8009d26:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009d2a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009d2e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009d32:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009d36:	edd7 7a03 	vldr	s15, [r7, #12]
 8009d3a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009d3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009d42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009d46:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009d4a:	eef1 6a67 	vneg.f32	s13, s15
 8009d4e:	4b5d      	ldr	r3, [pc, #372]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009d50:	edd3 7a00 	vldr	s15, [r3]
 8009d54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009d58:	4b5b      	ldr	r3, [pc, #364]	@ (8009ec8 <MadgwickAHRSupdate+0x818>)
 8009d5a:	ed93 6a00 	vldr	s12, [r3]
 8009d5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009d62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009d66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009d6a:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 8009d6e:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8009d72:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009d76:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009d7a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009d7e:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8009d82:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8009d86:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009d8a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009d8e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009d92:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009d96:	edd7 7a02 	vldr	s15, [r7, #8]
 8009d9a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009d9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009da2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009da6:	4b46      	ldr	r3, [pc, #280]	@ (8009ec0 <MadgwickAHRSupdate+0x810>)
 8009da8:	edd3 6a00 	vldr	s13, [r3]
 8009dac:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009db0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009db4:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8009db8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009dbc:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009dc0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009dc4:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009dc8:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009dcc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009dd0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009dd4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009dd8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009ddc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009de0:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009de4:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8009dec:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009df8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8009dfc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009e00:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8009e04:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8009e08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8009e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e14:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8009e18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e1c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8009e20:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009e24:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8009e28:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009e2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8009e30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009e34:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8009e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009e40:	4b21      	ldr	r3, [pc, #132]	@ (8009ec8 <MadgwickAHRSupdate+0x818>)
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8009e4a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009e4e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009e52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e56:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8009e5a:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009e5e:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009e62:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009e66:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8009e6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009e7a:	4b12      	ldr	r3, [pc, #72]	@ (8009ec4 <MadgwickAHRSupdate+0x814>)
 8009e7c:	edd3 6a00 	vldr	s13, [r3]
 8009e80:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009e84:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009e88:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8009e8c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009e90:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009e94:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8009e98:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009e9c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009ea0:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009ea4:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 8009ea8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8009eac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009eb0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009eb4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009eb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009ebc:	e006      	b.n	8009ecc <MadgwickAHRSupdate+0x81c>
 8009ebe:	bf00      	nop
 8009ec0:	20007aec 	.word	0x20007aec
 8009ec4:	20007af0 	.word	0x20007af0
 8009ec8:	20007ae8 	.word	0x20007ae8
 8009ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ed0:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009ed4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ed8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009edc:	4bf5      	ldr	r3, [pc, #980]	@ (800a2b4 <MadgwickAHRSupdate+0xc04>)
 8009ede:	edd3 6a00 	vldr	s13, [r3]
 8009ee2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009ee6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009eea:	4bf3      	ldr	r3, [pc, #972]	@ (800a2b8 <MadgwickAHRSupdate+0xc08>)
 8009eec:	ed93 6a00 	vldr	s12, [r3]
 8009ef0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009ef4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009ef8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009efc:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 8009f00:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8009f04:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009f08:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009f0c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009f10:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 8009f14:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8009f18:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8009f1c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009f20:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009f24:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009f38:	4be0      	ldr	r3, [pc, #896]	@ (800a2bc <MadgwickAHRSupdate+0xc0c>)
 8009f3a:	edd3 6a00 	vldr	s13, [r3]
 8009f3e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009f42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8009f46:	4bde      	ldr	r3, [pc, #888]	@ (800a2c0 <MadgwickAHRSupdate+0xc10>)
 8009f48:	ed93 6a00 	vldr	s12, [r3]
 8009f4c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8009f50:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009f54:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009f58:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 8009f5c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009f60:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009f64:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8009f68:	ee26 6a27 	vmul.f32	s12, s12, s15
 8009f6c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 8009f70:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009f74:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009f78:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8009f7c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8009f80:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8009f84:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8009f88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8009f8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f90:	ee76 7a67 	vsub.f32	s15, s12, s15
 8009f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f9c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8009fa0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8009fa4:	eeb1 7a67 	vneg.f32	s14, s15
 8009fa8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8009fac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009fb0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8009fb4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009fb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fbc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fc4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8009fc8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8009fcc:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8009fd0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009fd4:	edd7 7a05 	vldr	s15, [r7, #20]
 8009fd8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009fdc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8009fe0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009fe4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fe8:	4bb2      	ldr	r3, [pc, #712]	@ (800a2b4 <MadgwickAHRSupdate+0xc04>)
 8009fea:	edd3 7a00 	vldr	s15, [r3]
 8009fee:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8009ff2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8009ff6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8009ffa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009ffe:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a002:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a006:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a00a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a00e:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a012:	edd7 7a04 	vldr	s15, [r7, #16]
 800a016:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a01a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a01e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a022:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800a026:	eef1 6a67 	vneg.f32	s13, s15
 800a02a:	4ba2      	ldr	r3, [pc, #648]	@ (800a2b4 <MadgwickAHRSupdate+0xc04>)
 800a02c:	edd3 7a00 	vldr	s15, [r3]
 800a030:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a034:	4ba0      	ldr	r3, [pc, #640]	@ (800a2b8 <MadgwickAHRSupdate+0xc08>)
 800a036:	ed93 6a00 	vldr	s12, [r3]
 800a03a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a03e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a042:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a046:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a04a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a04e:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a052:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800a056:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a05a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a05e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a062:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 800a066:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800a06a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a06e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a072:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a076:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a07a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a07e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a082:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a086:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a08a:	4b8d      	ldr	r3, [pc, #564]	@ (800a2c0 <MadgwickAHRSupdate+0xc10>)
 800a08c:	edd3 6a00 	vldr	s13, [r3]
 800a090:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a098:	4b88      	ldr	r3, [pc, #544]	@ (800a2bc <MadgwickAHRSupdate+0xc0c>)
 800a09a:	ed93 6a00 	vldr	s12, [r3]
 800a09e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a0a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a0a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a0aa:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 800a0ae:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800a0b2:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a0b6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a0ba:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a0be:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 800a0c2:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800a0c6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a0ca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a0ce:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a0d2:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a0d6:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0da:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a0de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a0e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a0e6:	4b74      	ldr	r3, [pc, #464]	@ (800a2b8 <MadgwickAHRSupdate+0xc08>)
 800a0e8:	edd3 6a00 	vldr	s13, [r3]
 800a0ec:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a0f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a0f4:	4b6f      	ldr	r3, [pc, #444]	@ (800a2b4 <MadgwickAHRSupdate+0xc04>)
 800a0f6:	ed93 6a00 	vldr	s12, [r3]
 800a0fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800a0fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a102:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a106:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800a10a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800a10e:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a112:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a116:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a11a:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800a11e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800a122:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a126:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a12a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a12e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a132:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a136:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a13a:	edd7 7a01 	vldr	s15, [r7, #4]
 800a13e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a142:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a14a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 800a14e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800a152:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800a156:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800a15a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a15e:	edd7 7a06 	vldr	s15, [r7, #24]
 800a162:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a166:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800a16a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a16e:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800a172:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800a176:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800a17a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a17e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a182:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a186:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800a18a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a18e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a192:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800a196:	eef1 6a67 	vneg.f32	s13, s15
 800a19a:	4b48      	ldr	r3, [pc, #288]	@ (800a2bc <MadgwickAHRSupdate+0xc0c>)
 800a19c:	edd3 7a00 	vldr	s15, [r3]
 800a1a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a1a4:	4b46      	ldr	r3, [pc, #280]	@ (800a2c0 <MadgwickAHRSupdate+0xc10>)
 800a1a6:	ed93 6a00 	vldr	s12, [r3]
 800a1aa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a1ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a1b2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a1b6:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800a1ba:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a1be:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a1c2:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800a1c6:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a1ca:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a1ce:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a1d2:	edd7 5a18 	vldr	s11, [r7, #96]	@ 0x60
 800a1d6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800a1da:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a1de:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a1e2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a1e6:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a1ea:	edd7 7a03 	vldr	s15, [r7, #12]
 800a1ee:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a1f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a1fa:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a1fe:	eef1 6a67 	vneg.f32	s13, s15
 800a202:	4b2d      	ldr	r3, [pc, #180]	@ (800a2b8 <MadgwickAHRSupdate+0xc08>)
 800a204:	edd3 7a00 	vldr	s15, [r3]
 800a208:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a20c:	4b29      	ldr	r3, [pc, #164]	@ (800a2b4 <MadgwickAHRSupdate+0xc04>)
 800a20e:	ed93 6a00 	vldr	s12, [r3]
 800a212:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a216:	ee66 7a27 	vmul.f32	s15, s12, s15
 800a21a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a21e:	ed97 6a19 	vldr	s12, [r7, #100]	@ 0x64
 800a222:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800a226:	ee36 6a67 	vsub.f32	s12, s12, s15
 800a22a:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a22e:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a232:	edd7 5a1d 	vldr	s11, [r7, #116]	@ 0x74
 800a236:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800a23a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800a23e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a242:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a246:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a24a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a24e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a256:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a25a:	4b19      	ldr	r3, [pc, #100]	@ (800a2c0 <MadgwickAHRSupdate+0xc10>)
 800a25c:	edd3 6a00 	vldr	s13, [r3]
 800a260:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a264:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800a268:	ed97 6a1c 	vldr	s12, [r7, #112]	@ 0x70
 800a26c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800a270:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a274:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800a278:	ee26 6a27 	vmul.f32	s12, s12, s15
 800a27c:	eef6 5a00 	vmov.f32	s11, #96	@ 0x3f000000  0.5
 800a280:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800a284:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a288:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a28c:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800a290:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800a294:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800a298:	ee36 6a27 	vadd.f32	s12, s12, s15
 800a29c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a2a0:	ee76 7a67 	vsub.f32	s15, s12, s15
 800a2a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2ac:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 800a2b0:	e008      	b.n	800a2c4 <MadgwickAHRSupdate+0xc14>
 800a2b2:	bf00      	nop
 800a2b4:	20007aec 	.word	0x20007aec
 800a2b8:	20000014 	.word	0x20000014
 800a2bc:	20007af0 	.word	0x20007af0
 800a2c0:	20007ae8 	.word	0x20007ae8
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800a2c4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a2c8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a2cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a2d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2d8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a2dc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2e4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a2e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2f0:	eeb0 0a67 	vmov.f32	s0, s15
 800a2f4:	f000 fd9a 	bl	800ae2c <invSqrt>
 800a2f8:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
		s0 *= recipNorm;
 800a2fc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800a300:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		s1 *= recipNorm;
 800a30c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800a310:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a318:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		s2 *= recipNorm;
 800a31c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800a320:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a324:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a328:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		s3 *= recipNorm;
 800a32c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800a330:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a338:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		// Apply feedback step
		qDot1 -= beta * s0;
 800a33c:	4bd3      	ldr	r3, [pc, #844]	@ (800a68c <MadgwickAHRSupdate+0xfdc>)
 800a33e:	ed93 7a00 	vldr	s14, [r3]
 800a342:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800a346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34a:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 800a34e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a352:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
		qDot2 -= beta * s1;
 800a356:	4bcd      	ldr	r3, [pc, #820]	@ (800a68c <MadgwickAHRSupdate+0xfdc>)
 800a358:	ed93 7a00 	vldr	s14, [r3]
 800a35c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800a360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a364:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800a368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a36c:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
		qDot3 -= beta * s2;
 800a370:	4bc6      	ldr	r3, [pc, #792]	@ (800a68c <MadgwickAHRSupdate+0xfdc>)
 800a372:	ed93 7a00 	vldr	s14, [r3]
 800a376:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800a37a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37e:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800a382:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a386:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
		qDot4 -= beta * s3;
 800a38a:	4bc0      	ldr	r3, [pc, #768]	@ (800a68c <MadgwickAHRSupdate+0xfdc>)
 800a38c:	ed93 7a00 	vldr	s14, [r3]
 800a390:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800a394:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a398:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 800a39c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3a0:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800a3a4:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800a3a8:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800a690 <MadgwickAHRSupdate+0xfe0>
 800a3ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a3b0:	4bb8      	ldr	r3, [pc, #736]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a3b2:	edd3 7a00 	vldr	s15, [r3]
 800a3b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3ba:	4bb6      	ldr	r3, [pc, #728]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a3bc:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800a3c0:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800a3c4:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 800a690 <MadgwickAHRSupdate+0xfe0>
 800a3c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a3cc:	4bb2      	ldr	r3, [pc, #712]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a3ce:	edd3 7a00 	vldr	s15, [r3]
 800a3d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3d6:	4bb0      	ldr	r3, [pc, #704]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a3d8:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800a3dc:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800a3e0:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 800a690 <MadgwickAHRSupdate+0xfe0>
 800a3e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a3e8:	4bac      	ldr	r3, [pc, #688]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a3ea:	edd3 7a00 	vldr	s15, [r3]
 800a3ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3f2:	4baa      	ldr	r3, [pc, #680]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a3f4:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 800a3f8:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800a3fc:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 800a690 <MadgwickAHRSupdate+0xfe0>
 800a400:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a404:	4ba6      	ldr	r3, [pc, #664]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a406:	edd3 7a00 	vldr	s15, [r3]
 800a40a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a40e:	4ba4      	ldr	r3, [pc, #656]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a410:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800a414:	4b9f      	ldr	r3, [pc, #636]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a416:	ed93 7a00 	vldr	s14, [r3]
 800a41a:	4b9e      	ldr	r3, [pc, #632]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a41c:	edd3 7a00 	vldr	s15, [r3]
 800a420:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a424:	4b9c      	ldr	r3, [pc, #624]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a426:	edd3 6a00 	vldr	s13, [r3]
 800a42a:	4b9b      	ldr	r3, [pc, #620]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a42c:	edd3 7a00 	vldr	s15, [r3]
 800a430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a434:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a438:	4b98      	ldr	r3, [pc, #608]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a43a:	edd3 6a00 	vldr	s13, [r3]
 800a43e:	4b97      	ldr	r3, [pc, #604]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a440:	edd3 7a00 	vldr	s15, [r3]
 800a444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a44c:	4b94      	ldr	r3, [pc, #592]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a44e:	edd3 6a00 	vldr	s13, [r3]
 800a452:	4b93      	ldr	r3, [pc, #588]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a454:	edd3 7a00 	vldr	s15, [r3]
 800a458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a45c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a460:	eeb0 0a67 	vmov.f32	s0, s15
 800a464:	f000 fce2 	bl	800ae2c <invSqrt>
 800a468:	ed87 0a29 	vstr	s0, [r7, #164]	@ 0xa4
	q0 *= recipNorm;
 800a46c:	4b89      	ldr	r3, [pc, #548]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a46e:	ed93 7a00 	vldr	s14, [r3]
 800a472:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a47a:	4b86      	ldr	r3, [pc, #536]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a47c:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800a480:	4b85      	ldr	r3, [pc, #532]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a482:	ed93 7a00 	vldr	s14, [r3]
 800a486:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a48a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a48e:	4b82      	ldr	r3, [pc, #520]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a490:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800a494:	4b81      	ldr	r3, [pc, #516]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a496:	ed93 7a00 	vldr	s14, [r3]
 800a49a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4a2:	4b7e      	ldr	r3, [pc, #504]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a4a4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800a4a8:	4b7d      	ldr	r3, [pc, #500]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a4aa:	ed93 7a00 	vldr	s14, [r3]
 800a4ae:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800a4b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4b6:	4b7a      	ldr	r3, [pc, #488]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a4b8:	edc3 7a00 	vstr	s15, [r3]


	qp.ww = q0 * q0;
 800a4bc:	4b75      	ldr	r3, [pc, #468]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a4be:	ed93 7a00 	vldr	s14, [r3]
 800a4c2:	4b74      	ldr	r3, [pc, #464]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a4c4:	edd3 7a00 	vldr	s15, [r3]
 800a4c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4cc:	4b75      	ldr	r3, [pc, #468]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a4ce:	edc3 7a00 	vstr	s15, [r3]
	qp.wx = q0 * q1;
 800a4d2:	4b70      	ldr	r3, [pc, #448]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a4d4:	ed93 7a00 	vldr	s14, [r3]
 800a4d8:	4b6f      	ldr	r3, [pc, #444]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a4da:	edd3 7a00 	vldr	s15, [r3]
 800a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e2:	4b70      	ldr	r3, [pc, #448]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a4e4:	edc3 7a01 	vstr	s15, [r3, #4]
	qp.wy = q0 * q2;
 800a4e8:	4b6a      	ldr	r3, [pc, #424]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a4ea:	ed93 7a00 	vldr	s14, [r3]
 800a4ee:	4b6b      	ldr	r3, [pc, #428]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a4f0:	edd3 7a00 	vldr	s15, [r3]
 800a4f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f8:	4b6a      	ldr	r3, [pc, #424]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a4fa:	edc3 7a02 	vstr	s15, [r3, #8]
	qp.wz = q0 * q3;
 800a4fe:	4b65      	ldr	r3, [pc, #404]	@ (800a694 <MadgwickAHRSupdate+0xfe4>)
 800a500:	ed93 7a00 	vldr	s14, [r3]
 800a504:	4b66      	ldr	r3, [pc, #408]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a506:	edd3 7a00 	vldr	s15, [r3]
 800a50a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a50e:	4b65      	ldr	r3, [pc, #404]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a510:	edc3 7a03 	vstr	s15, [r3, #12]

	qp.xx = q1 * q1;
 800a514:	4b60      	ldr	r3, [pc, #384]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a516:	ed93 7a00 	vldr	s14, [r3]
 800a51a:	4b5f      	ldr	r3, [pc, #380]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a51c:	edd3 7a00 	vldr	s15, [r3]
 800a520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a524:	4b5f      	ldr	r3, [pc, #380]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a526:	edc3 7a04 	vstr	s15, [r3, #16]
	qp.xy = q1 * q2;
 800a52a:	4b5b      	ldr	r3, [pc, #364]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a52c:	ed93 7a00 	vldr	s14, [r3]
 800a530:	4b5a      	ldr	r3, [pc, #360]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a532:	edd3 7a00 	vldr	s15, [r3]
 800a536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a53a:	4b5a      	ldr	r3, [pc, #360]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a53c:	edc3 7a05 	vstr	s15, [r3, #20]
	qp.xz = q1 * q3;
 800a540:	4b55      	ldr	r3, [pc, #340]	@ (800a698 <MadgwickAHRSupdate+0xfe8>)
 800a542:	ed93 7a00 	vldr	s14, [r3]
 800a546:	4b56      	ldr	r3, [pc, #344]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a548:	edd3 7a00 	vldr	s15, [r3]
 800a54c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a550:	4b54      	ldr	r3, [pc, #336]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a552:	edc3 7a06 	vstr	s15, [r3, #24]

	qp.yy = q2 * q2;
 800a556:	4b51      	ldr	r3, [pc, #324]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a558:	ed93 7a00 	vldr	s14, [r3]
 800a55c:	4b4f      	ldr	r3, [pc, #316]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a55e:	edd3 7a00 	vldr	s15, [r3]
 800a562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a566:	4b4f      	ldr	r3, [pc, #316]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a568:	edc3 7a07 	vstr	s15, [r3, #28]
	qp.yz = q2 * q3;
 800a56c:	4b4b      	ldr	r3, [pc, #300]	@ (800a69c <MadgwickAHRSupdate+0xfec>)
 800a56e:	ed93 7a00 	vldr	s14, [r3]
 800a572:	4b4b      	ldr	r3, [pc, #300]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a574:	edd3 7a00 	vldr	s15, [r3]
 800a578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57c:	4b49      	ldr	r3, [pc, #292]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a57e:	edc3 7a08 	vstr	s15, [r3, #32]
	qp.zz = q3 * q3;
 800a582:	4b47      	ldr	r3, [pc, #284]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a584:	ed93 7a00 	vldr	s14, [r3]
 800a588:	4b45      	ldr	r3, [pc, #276]	@ (800a6a0 <MadgwickAHRSupdate+0xff0>)
 800a58a:	edd3 7a00 	vldr	s15, [r3]
 800a58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a592:	4b44      	ldr	r3, [pc, #272]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a594:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24


	// Compute Rotation Matrices
	rMat[0][0] = 1.0f - (2.0f * qp.yy) - (2.0f * qp.zz);
 800a598:	4b42      	ldr	r3, [pc, #264]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a59a:	edd3 7a07 	vldr	s15, [r3, #28]
 800a59e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a5a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a5a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a5aa:	4b3e      	ldr	r3, [pc, #248]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5ac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800a5b0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a5b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a5ba:	edc3 7a00 	vstr	s15, [r3]
	rMat[0][1] = 2.0f * (qp.xy + (-qp.wz));
 800a5be:	4b39      	ldr	r3, [pc, #228]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5c0:	ed93 7a05 	vldr	s14, [r3, #20]
 800a5c4:	4b37      	ldr	r3, [pc, #220]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5c6:	edd3 7a03 	vldr	s15, [r3, #12]
 800a5ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a5d2:	4b35      	ldr	r3, [pc, #212]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a5d4:	edc3 7a01 	vstr	s15, [r3, #4]
	rMat[0][2] = 2.0f * (qp.xz - (-qp.wy));
 800a5d8:	4b32      	ldr	r3, [pc, #200]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5da:	ed93 7a06 	vldr	s14, [r3, #24]
 800a5de:	4b31      	ldr	r3, [pc, #196]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5e0:	edd3 7a02 	vldr	s15, [r3, #8]
 800a5e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a5ec:	4b2e      	ldr	r3, [pc, #184]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a5ee:	edc3 7a02 	vstr	s15, [r3, #8]

	rMat[1][0] = 2.0f * (qp.xy - (-qp.wz));
 800a5f2:	4b2c      	ldr	r3, [pc, #176]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5f4:	ed93 7a05 	vldr	s14, [r3, #20]
 800a5f8:	4b2a      	ldr	r3, [pc, #168]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a5fa:	edd3 7a03 	vldr	s15, [r3, #12]
 800a5fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a602:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a606:	4b28      	ldr	r3, [pc, #160]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a608:	edc3 7a03 	vstr	s15, [r3, #12]
	rMat[1][1] = 1.0f - (2.0f * qp.xx) - (2.0f * qp.zz);
 800a60c:	4b25      	ldr	r3, [pc, #148]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a60e:	edd3 7a04 	vldr	s15, [r3, #16]
 800a612:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a616:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a61a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a61e:	4b21      	ldr	r3, [pc, #132]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a620:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800a624:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a62c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a62e:	edc3 7a04 	vstr	s15, [r3, #16]
	rMat[1][2] = 2.0f * (qp.yz + (-qp.wx));
 800a632:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a634:	ed93 7a08 	vldr	s14, [r3, #32]
 800a638:	4b1a      	ldr	r3, [pc, #104]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a63a:	edd3 7a01 	vldr	s15, [r3, #4]
 800a63e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a642:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a646:	4b18      	ldr	r3, [pc, #96]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a648:	edc3 7a05 	vstr	s15, [r3, #20]

	rMat[2][0] = 2.0f * (qp.xz + (-qp.wy));
 800a64c:	4b15      	ldr	r3, [pc, #84]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a64e:	ed93 7a06 	vldr	s14, [r3, #24]
 800a652:	4b14      	ldr	r3, [pc, #80]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a654:	edd3 7a02 	vldr	s15, [r3, #8]
 800a658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a65c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a660:	4b11      	ldr	r3, [pc, #68]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a662:	edc3 7a06 	vstr	s15, [r3, #24]
	rMat[2][1] = 2.0f * (qp.yz - (-qp.wx));
 800a666:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a668:	ed93 7a08 	vldr	s14, [r3, #32]
 800a66c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a66e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a672:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a67a:	4b0b      	ldr	r3, [pc, #44]	@ (800a6a8 <MadgwickAHRSupdate+0xff8>)
 800a67c:	edc3 7a07 	vstr	s15, [r3, #28]
	rMat[2][2] = 1.0f - (2.0f * qp.xx) - (2.0f * qp.yy);
 800a680:	4b08      	ldr	r3, [pc, #32]	@ (800a6a4 <MadgwickAHRSupdate+0xff4>)
 800a682:	edd3 7a04 	vldr	s15, [r3, #16]
 800a686:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a68a:	e00f      	b.n	800a6ac <MadgwickAHRSupdate+0xffc>
 800a68c:	20000010 	.word	0x20000010
 800a690:	3a83126f 	.word	0x3a83126f
 800a694:	20000014 	.word	0x20000014
 800a698:	20007ae8 	.word	0x20007ae8
 800a69c:	20007aec 	.word	0x20007aec
 800a6a0:	20007af0 	.word	0x20007af0
 800a6a4:	20007b18 	.word	0x20007b18
 800a6a8:	20007af4 	.word	0x20007af4
 800a6ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a6b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a6b4:	4b48      	ldr	r3, [pc, #288]	@ (800a7d8 <MadgwickAHRSupdate+0x1128>)
 800a6b6:	edd3 7a07 	vldr	s15, [r3, #28]
 800a6ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6c2:	4b46      	ldr	r3, [pc, #280]	@ (800a7dc <MadgwickAHRSupdate+0x112c>)
 800a6c4:	edc3 7a08 	vstr	s15, [r3, #32]

	attitude.roll = lrintf(atan2_approx(rMat[2][1], rMat[2][2]) * (180.0f/M_PI));
 800a6c8:	4b44      	ldr	r3, [pc, #272]	@ (800a7dc <MadgwickAHRSupdate+0x112c>)
 800a6ca:	edd3 7a07 	vldr	s15, [r3, #28]
 800a6ce:	4b43      	ldr	r3, [pc, #268]	@ (800a7dc <MadgwickAHRSupdate+0x112c>)
 800a6d0:	ed93 7a08 	vldr	s14, [r3, #32]
 800a6d4:	eef0 0a47 	vmov.f32	s1, s14
 800a6d8:	eeb0 0a67 	vmov.f32	s0, s15
 800a6dc:	f7fe fea0 	bl	8009420 <atan2_approx>
 800a6e0:	ee10 3a10 	vmov	r3, s0
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f7f5 fee1 	bl	80004ac <__aeabi_f2d>
 800a6ea:	a337      	add	r3, pc, #220	@ (adr r3, 800a7c8 <MadgwickAHRSupdate+0x1118>)
 800a6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f0:	f7f5 ff34 	bl	800055c <__aeabi_dmul>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	4610      	mov	r0, r2
 800a6fa:	4619      	mov	r1, r3
 800a6fc:	f7f6 f9de 	bl	8000abc <__aeabi_d2f>
 800a700:	4603      	mov	r3, r0
 800a702:	ee00 3a10 	vmov	s0, r3
 800a706:	f010 ff5f 	bl	801b5c8 <lrintf>
 800a70a:	4603      	mov	r3, r0
 800a70c:	b21a      	sxth	r2, r3
 800a70e:	4b34      	ldr	r3, [pc, #208]	@ (800a7e0 <MadgwickAHRSupdate+0x1130>)
 800a710:	801a      	strh	r2, [r3, #0]
	attitude.pitch = lrintf(((0.5f * M_PI) - acos_approx(-rMat[2][0])) * (180.0f / M_PI));
 800a712:	4b32      	ldr	r3, [pc, #200]	@ (800a7dc <MadgwickAHRSupdate+0x112c>)
 800a714:	edd3 7a06 	vldr	s15, [r3, #24]
 800a718:	eef1 7a67 	vneg.f32	s15, s15
 800a71c:	eeb0 0a67 	vmov.f32	s0, s15
 800a720:	f7fe ff62 	bl	80095e8 <acos_approx>
 800a724:	ee10 3a10 	vmov	r3, s0
 800a728:	4618      	mov	r0, r3
 800a72a:	f7f5 febf 	bl	80004ac <__aeabi_f2d>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	a127      	add	r1, pc, #156	@ (adr r1, 800a7d0 <MadgwickAHRSupdate+0x1120>)
 800a734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a738:	f7f5 fd58 	bl	80001ec <__aeabi_dsub>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4610      	mov	r0, r2
 800a742:	4619      	mov	r1, r3
 800a744:	a320      	add	r3, pc, #128	@ (adr r3, 800a7c8 <MadgwickAHRSupdate+0x1118>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 ff07 	bl	800055c <__aeabi_dmul>
 800a74e:	4602      	mov	r2, r0
 800a750:	460b      	mov	r3, r1
 800a752:	4610      	mov	r0, r2
 800a754:	4619      	mov	r1, r3
 800a756:	f7f6 f9b1 	bl	8000abc <__aeabi_d2f>
 800a75a:	4603      	mov	r3, r0
 800a75c:	ee00 3a10 	vmov	s0, r3
 800a760:	f010 ff32 	bl	801b5c8 <lrintf>
 800a764:	4603      	mov	r3, r0
 800a766:	b21a      	sxth	r2, r3
 800a768:	4b1d      	ldr	r3, [pc, #116]	@ (800a7e0 <MadgwickAHRSupdate+0x1130>)
 800a76a:	805a      	strh	r2, [r3, #2]
	attitude.yaw = lrintf((-atan2_approx(rMat[1][0], rMat[0][0]) * (180.0f/M_PI)));
 800a76c:	4b1b      	ldr	r3, [pc, #108]	@ (800a7dc <MadgwickAHRSupdate+0x112c>)
 800a76e:	edd3 7a03 	vldr	s15, [r3, #12]
 800a772:	4b1a      	ldr	r3, [pc, #104]	@ (800a7dc <MadgwickAHRSupdate+0x112c>)
 800a774:	ed93 7a00 	vldr	s14, [r3]
 800a778:	eef0 0a47 	vmov.f32	s1, s14
 800a77c:	eeb0 0a67 	vmov.f32	s0, s15
 800a780:	f7fe fe4e 	bl	8009420 <atan2_approx>
 800a784:	eef0 7a40 	vmov.f32	s15, s0
 800a788:	eef1 7a67 	vneg.f32	s15, s15
 800a78c:	ee17 3a90 	vmov	r3, s15
 800a790:	4618      	mov	r0, r3
 800a792:	f7f5 fe8b 	bl	80004ac <__aeabi_f2d>
 800a796:	a30c      	add	r3, pc, #48	@ (adr r3, 800a7c8 <MadgwickAHRSupdate+0x1118>)
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f7f5 fede 	bl	800055c <__aeabi_dmul>
 800a7a0:	4602      	mov	r2, r0
 800a7a2:	460b      	mov	r3, r1
 800a7a4:	4610      	mov	r0, r2
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	f7f6 f988 	bl	8000abc <__aeabi_d2f>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	ee00 3a10 	vmov	s0, r3
 800a7b2:	f010 ff09 	bl	801b5c8 <lrintf>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	b21a      	sxth	r2, r3
 800a7ba:	4b09      	ldr	r3, [pc, #36]	@ (800a7e0 <MadgwickAHRSupdate+0x1130>)
 800a7bc:	809a      	strh	r2, [r3, #4]


}
 800a7be:	37b8      	adds	r7, #184	@ 0xb8
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	f3af 8000 	nop.w
 800a7c8:	1a63c1f8 	.word	0x1a63c1f8
 800a7cc:	404ca5dc 	.word	0x404ca5dc
 800a7d0:	54442d18 	.word	0x54442d18
 800a7d4:	3ff921fb 	.word	0x3ff921fb
 800a7d8:	20007b18 	.word	0x20007b18
 800a7dc:	20007af4 	.word	0x20007af4
 800a7e0:	20007b40 	.word	0x20007b40

0800a7e4 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) {
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b09c      	sub	sp, #112	@ 0x70
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	ed87 0a05 	vstr	s0, [r7, #20]
 800a7ee:	edc7 0a04 	vstr	s1, [r7, #16]
 800a7f2:	ed87 1a03 	vstr	s2, [r7, #12]
 800a7f6:	edc7 1a02 	vstr	s3, [r7, #8]
 800a7fa:	ed87 2a01 	vstr	s4, [r7, #4]
 800a7fe:	edc7 2a00 	vstr	s5, [r7]
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 800a802:	4bec      	ldr	r3, [pc, #944]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800a804:	edd3 7a00 	vldr	s15, [r3]
 800a808:	eeb1 7a67 	vneg.f32	s14, s15
 800a80c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a810:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a814:	4be8      	ldr	r3, [pc, #928]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800a816:	edd3 6a00 	vldr	s13, [r3]
 800a81a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a81e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a822:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a826:	4be5      	ldr	r3, [pc, #916]	@ (800abbc <MadgwickAHRSupdateIMU+0x3d8>)
 800a828:	edd3 6a00 	vldr	s13, [r3]
 800a82c:	edd7 7a03 	vldr	s15, [r7, #12]
 800a830:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a834:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a838:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a83c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a840:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800a844:	4bde      	ldr	r3, [pc, #888]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800a846:	ed93 7a00 	vldr	s14, [r3]
 800a84a:	edd7 7a05 	vldr	s15, [r7, #20]
 800a84e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a852:	4bd9      	ldr	r3, [pc, #868]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800a854:	edd3 6a00 	vldr	s13, [r3]
 800a858:	edd7 7a03 	vldr	s15, [r7, #12]
 800a85c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a860:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a864:	4bd5      	ldr	r3, [pc, #852]	@ (800abbc <MadgwickAHRSupdateIMU+0x3d8>)
 800a866:	edd3 6a00 	vldr	s13, [r3]
 800a86a:	edd7 7a04 	vldr	s15, [r7, #16]
 800a86e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a872:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a876:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a87a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a87e:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800a882:	4bcf      	ldr	r3, [pc, #828]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800a884:	ed93 7a00 	vldr	s14, [r3]
 800a888:	edd7 7a04 	vldr	s15, [r7, #16]
 800a88c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a890:	4bc8      	ldr	r3, [pc, #800]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800a892:	edd3 6a00 	vldr	s13, [r3]
 800a896:	edd7 7a03 	vldr	s15, [r7, #12]
 800a89a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a89e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a8a2:	4bc6      	ldr	r3, [pc, #792]	@ (800abbc <MadgwickAHRSupdateIMU+0x3d8>)
 800a8a4:	edd3 6a00 	vldr	s13, [r3]
 800a8a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8bc:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800a8c0:	4bbf      	ldr	r3, [pc, #764]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800a8c2:	ed93 7a00 	vldr	s14, [r3]
 800a8c6:	edd7 7a03 	vldr	s15, [r7, #12]
 800a8ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a8ce:	4bb9      	ldr	r3, [pc, #740]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800a8d0:	edd3 6a00 	vldr	s13, [r3]
 800a8d4:	edd7 7a04 	vldr	s15, [r7, #16]
 800a8d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8e0:	4bb5      	ldr	r3, [pc, #724]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800a8e2:	edd3 6a00 	vldr	s13, [r3]
 800a8e6:	edd7 7a05 	vldr	s15, [r7, #20]
 800a8ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a8ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8f2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800a8f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a8fa:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800a8fe:	edd7 7a02 	vldr	s15, [r7, #8]
 800a902:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a90a:	d10e      	bne.n	800a92a <MadgwickAHRSupdateIMU+0x146>
 800a90c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a910:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a918:	d107      	bne.n	800a92a <MadgwickAHRSupdateIMU+0x146>
 800a91a:	edd7 7a00 	vldr	s15, [r7]
 800a91e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	f000 81e5 	beq.w	800acf4 <MadgwickAHRSupdateIMU+0x510>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800a92a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a92e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800a932:	edd7 7a01 	vldr	s15, [r7, #4]
 800a936:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a93a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a93e:	edd7 7a00 	vldr	s15, [r7]
 800a942:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a946:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a94a:	eeb0 0a67 	vmov.f32	s0, s15
 800a94e:	f000 fa6d 	bl	800ae2c <invSqrt>
 800a952:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		ax *= recipNorm;
 800a956:	ed97 7a02 	vldr	s14, [r7, #8]
 800a95a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a95e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a962:	edc7 7a02 	vstr	s15, [r7, #8]
		ay *= recipNorm;
 800a966:	ed97 7a01 	vldr	s14, [r7, #4]
 800a96a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a96e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a972:	edc7 7a01 	vstr	s15, [r7, #4]
		az *= recipNorm;   
 800a976:	ed97 7a00 	vldr	s14, [r7]
 800a97a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800a97e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a982:	edc7 7a00 	vstr	s15, [r7]

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800a986:	4b8e      	ldr	r3, [pc, #568]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800a988:	edd3 7a00 	vldr	s15, [r3]
 800a98c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a990:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
		_2q1 = 2.0f * q1;
 800a994:	4b87      	ldr	r3, [pc, #540]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800a996:	edd3 7a00 	vldr	s15, [r3]
 800a99a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a99e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
		_2q2 = 2.0f * q2;
 800a9a2:	4b85      	ldr	r3, [pc, #532]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800a9a4:	edd3 7a00 	vldr	s15, [r3]
 800a9a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a9ac:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
		_2q3 = 2.0f * q3;
 800a9b0:	4b82      	ldr	r3, [pc, #520]	@ (800abbc <MadgwickAHRSupdateIMU+0x3d8>)
 800a9b2:	edd3 7a00 	vldr	s15, [r3]
 800a9b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a9ba:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		_4q0 = 4.0f * q0;
 800a9be:	4b80      	ldr	r3, [pc, #512]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800a9c0:	edd3 7a00 	vldr	s15, [r3]
 800a9c4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800a9c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9cc:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		_4q1 = 4.0f * q1;
 800a9d0:	4b78      	ldr	r3, [pc, #480]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800a9d2:	edd3 7a00 	vldr	s15, [r3]
 800a9d6:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800a9da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9de:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
		_4q2 = 4.0f * q2;
 800a9e2:	4b75      	ldr	r3, [pc, #468]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800a9e4:	edd3 7a00 	vldr	s15, [r3]
 800a9e8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800a9ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a9f0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
		_8q1 = 8.0f * q1;
 800a9f4:	4b6f      	ldr	r3, [pc, #444]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800a9f6:	edd3 7a00 	vldr	s15, [r3]
 800a9fa:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800a9fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa02:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		_8q2 = 8.0f * q2;
 800aa06:	4b6c      	ldr	r3, [pc, #432]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800aa08:	edd3 7a00 	vldr	s15, [r3]
 800aa0c:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800aa10:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa14:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		q0q0 = q0 * q0;
 800aa18:	4b69      	ldr	r3, [pc, #420]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800aa1a:	ed93 7a00 	vldr	s14, [r3]
 800aa1e:	4b68      	ldr	r3, [pc, #416]	@ (800abc0 <MadgwickAHRSupdateIMU+0x3dc>)
 800aa20:	edd3 7a00 	vldr	s15, [r3]
 800aa24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa28:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		q1q1 = q1 * q1;
 800aa2c:	4b61      	ldr	r3, [pc, #388]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800aa2e:	ed93 7a00 	vldr	s14, [r3]
 800aa32:	4b60      	ldr	r3, [pc, #384]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		q2q2 = q2 * q2;
 800aa40:	4b5d      	ldr	r3, [pc, #372]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800aa42:	ed93 7a00 	vldr	s14, [r3]
 800aa46:	4b5c      	ldr	r3, [pc, #368]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800aa48:	edd3 7a00 	vldr	s15, [r3]
 800aa4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa50:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		q3q3 = q3 * q3;
 800aa54:	4b59      	ldr	r3, [pc, #356]	@ (800abbc <MadgwickAHRSupdateIMU+0x3d8>)
 800aa56:	ed93 7a00 	vldr	s14, [r3]
 800aa5a:	4b58      	ldr	r3, [pc, #352]	@ (800abbc <MadgwickAHRSupdateIMU+0x3d8>)
 800aa5c:	edd3 7a00 	vldr	s15, [r3]
 800aa60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa64:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800aa68:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800aa6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800aa70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa74:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800aa78:	edd7 7a02 	vldr	s15, [r7, #8]
 800aa7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa84:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800aa88:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800aa8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aa90:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa94:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800aa98:	edd7 7a01 	vldr	s15, [r7, #4]
 800aa9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aaa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aaa4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800aaa8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800aaac:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800aab0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aab4:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800aab8:	edd7 7a02 	vldr	s15, [r7, #8]
 800aabc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aac0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aac4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800aac8:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800aacc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800aad0:	4b38      	ldr	r3, [pc, #224]	@ (800abb4 <MadgwickAHRSupdateIMU+0x3d0>)
 800aad2:	edd3 7a00 	vldr	s15, [r3]
 800aad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aada:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aade:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800aae2:	edd7 7a01 	vldr	s15, [r7, #4]
 800aae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aaea:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aaee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800aaf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aaf6:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800aafa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800aafe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab02:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab06:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800ab0a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ab0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab12:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab16:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800ab1a:	edd7 7a00 	vldr	s15, [r7]
 800ab1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab26:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800ab2a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ab2e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800ab32:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab36:	4b20      	ldr	r3, [pc, #128]	@ (800abb8 <MadgwickAHRSupdateIMU+0x3d4>)
 800ab38:	edd3 7a00 	vldr	s15, [r3]
 800ab3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab40:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800ab44:	edd7 7a02 	vldr	s15, [r7, #8]
 800ab48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab50:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800ab54:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ab58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab60:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800ab64:	edd7 7a01 	vldr	s15, [r7, #4]
 800ab68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab70:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ab74:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ab78:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800ab7c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ab80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab88:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800ab8c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ab90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab94:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab98:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800ab9c:	edd7 7a00 	vldr	s15, [r7]
 800aba0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aba4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aba8:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800abac:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800abb0:	e008      	b.n	800abc4 <MadgwickAHRSupdateIMU+0x3e0>
 800abb2:	bf00      	nop
 800abb4:	20007ae8 	.word	0x20007ae8
 800abb8:	20007aec 	.word	0x20007aec
 800abbc:	20007af0 	.word	0x20007af0
 800abc0:	20000014 	.word	0x20000014
 800abc4:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800abc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800abcc:	4b91      	ldr	r3, [pc, #580]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800abce:	edd3 7a00 	vldr	s15, [r3]
 800abd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abd6:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 800abda:	edd7 7a02 	vldr	s15, [r7, #8]
 800abde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abe2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800abe6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800abea:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800abee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800abf2:	4b88      	ldr	r3, [pc, #544]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800abf4:	edd3 7a00 	vldr	s15, [r3]
 800abf8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac00:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800ac04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac10:	edc7 7a06 	vstr	s15, [r7, #24]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 800ac14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ac18:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ac1c:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac20:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac28:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac30:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ac34:	edd7 7a06 	vldr	s15, [r7, #24]
 800ac38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac40:	eeb0 0a67 	vmov.f32	s0, s15
 800ac44:	f000 f8f2 	bl	800ae2c <invSqrt>
 800ac48:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
		s0 *= recipNorm;
 800ac4c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800ac50:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800ac54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac58:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		s1 *= recipNorm;
 800ac5c:	ed97 7a08 	vldr	s14, [r7, #32]
 800ac60:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800ac64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac68:	edc7 7a08 	vstr	s15, [r7, #32]
		s2 *= recipNorm;
 800ac6c:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac70:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800ac74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac78:	edc7 7a07 	vstr	s15, [r7, #28]
		s3 *= recipNorm;
 800ac7c:	ed97 7a06 	vldr	s14, [r7, #24]
 800ac80:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800ac84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac88:	edc7 7a06 	vstr	s15, [r7, #24]

		// Apply feedback step
		qDot1 -= beta * s0;
 800ac8c:	4b62      	ldr	r3, [pc, #392]	@ (800ae18 <MadgwickAHRSupdateIMU+0x634>)
 800ac8e:	ed93 7a00 	vldr	s14, [r3]
 800ac92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ac96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9a:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800ac9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aca2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
		qDot2 -= beta * s1;
 800aca6:	4b5c      	ldr	r3, [pc, #368]	@ (800ae18 <MadgwickAHRSupdateIMU+0x634>)
 800aca8:	ed93 7a00 	vldr	s14, [r3]
 800acac:	edd7 7a08 	vldr	s15, [r7, #32]
 800acb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb4:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 800acb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acbc:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
		qDot3 -= beta * s2;
 800acc0:	4b55      	ldr	r3, [pc, #340]	@ (800ae18 <MadgwickAHRSupdateIMU+0x634>)
 800acc2:	ed93 7a00 	vldr	s14, [r3]
 800acc6:	edd7 7a07 	vldr	s15, [r7, #28]
 800acca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acce:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 800acd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acd6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		qDot4 -= beta * s3;
 800acda:	4b4f      	ldr	r3, [pc, #316]	@ (800ae18 <MadgwickAHRSupdateIMU+0x634>)
 800acdc:	ed93 7a00 	vldr	s14, [r3]
 800ace0:	edd7 7a06 	vldr	s15, [r7, #24]
 800ace4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800acec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acf0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 800acf4:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800acf8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ae1c <MadgwickAHRSupdateIMU+0x638>
 800acfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad00:	4b47      	ldr	r3, [pc, #284]	@ (800ae20 <MadgwickAHRSupdateIMU+0x63c>)
 800ad02:	edd3 7a00 	vldr	s15, [r3]
 800ad06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad0a:	4b45      	ldr	r3, [pc, #276]	@ (800ae20 <MadgwickAHRSupdateIMU+0x63c>)
 800ad0c:	edc3 7a00 	vstr	s15, [r3]
	q1 += qDot2 * (1.0f / sampleFreq);
 800ad10:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ad14:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800ae1c <MadgwickAHRSupdateIMU+0x638>
 800ad18:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad1c:	4b41      	ldr	r3, [pc, #260]	@ (800ae24 <MadgwickAHRSupdateIMU+0x640>)
 800ad1e:	edd3 7a00 	vldr	s15, [r3]
 800ad22:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad26:	4b3f      	ldr	r3, [pc, #252]	@ (800ae24 <MadgwickAHRSupdateIMU+0x640>)
 800ad28:	edc3 7a00 	vstr	s15, [r3]
	q2 += qDot3 * (1.0f / sampleFreq);
 800ad2c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800ad30:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ae1c <MadgwickAHRSupdateIMU+0x638>
 800ad34:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad38:	4b3b      	ldr	r3, [pc, #236]	@ (800ae28 <MadgwickAHRSupdateIMU+0x644>)
 800ad3a:	edd3 7a00 	vldr	s15, [r3]
 800ad3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad42:	4b39      	ldr	r3, [pc, #228]	@ (800ae28 <MadgwickAHRSupdateIMU+0x644>)
 800ad44:	edc3 7a00 	vstr	s15, [r3]
	q3 += qDot4 * (1.0f / sampleFreq);
 800ad48:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800ad4c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800ae1c <MadgwickAHRSupdateIMU+0x638>
 800ad50:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ad54:	4b2f      	ldr	r3, [pc, #188]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800ad56:	edd3 7a00 	vldr	s15, [r3]
 800ad5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad5e:	4b2d      	ldr	r3, [pc, #180]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800ad60:	edc3 7a00 	vstr	s15, [r3]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 800ad64:	4b2e      	ldr	r3, [pc, #184]	@ (800ae20 <MadgwickAHRSupdateIMU+0x63c>)
 800ad66:	ed93 7a00 	vldr	s14, [r3]
 800ad6a:	4b2d      	ldr	r3, [pc, #180]	@ (800ae20 <MadgwickAHRSupdateIMU+0x63c>)
 800ad6c:	edd3 7a00 	vldr	s15, [r3]
 800ad70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad74:	4b2b      	ldr	r3, [pc, #172]	@ (800ae24 <MadgwickAHRSupdateIMU+0x640>)
 800ad76:	edd3 6a00 	vldr	s13, [r3]
 800ad7a:	4b2a      	ldr	r3, [pc, #168]	@ (800ae24 <MadgwickAHRSupdateIMU+0x640>)
 800ad7c:	edd3 7a00 	vldr	s15, [r3]
 800ad80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad84:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad88:	4b27      	ldr	r3, [pc, #156]	@ (800ae28 <MadgwickAHRSupdateIMU+0x644>)
 800ad8a:	edd3 6a00 	vldr	s13, [r3]
 800ad8e:	4b26      	ldr	r3, [pc, #152]	@ (800ae28 <MadgwickAHRSupdateIMU+0x644>)
 800ad90:	edd3 7a00 	vldr	s15, [r3]
 800ad94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ad98:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ad9c:	4b1d      	ldr	r3, [pc, #116]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800ad9e:	edd3 6a00 	vldr	s13, [r3]
 800ada2:	4b1c      	ldr	r3, [pc, #112]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800ada4:	edd3 7a00 	vldr	s15, [r3]
 800ada8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adb0:	eeb0 0a67 	vmov.f32	s0, s15
 800adb4:	f000 f83a 	bl	800ae2c <invSqrt>
 800adb8:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c
	q0 *= recipNorm;
 800adbc:	4b18      	ldr	r3, [pc, #96]	@ (800ae20 <MadgwickAHRSupdateIMU+0x63c>)
 800adbe:	ed93 7a00 	vldr	s14, [r3]
 800adc2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800adc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adca:	4b15      	ldr	r3, [pc, #84]	@ (800ae20 <MadgwickAHRSupdateIMU+0x63c>)
 800adcc:	edc3 7a00 	vstr	s15, [r3]
	q1 *= recipNorm;
 800add0:	4b14      	ldr	r3, [pc, #80]	@ (800ae24 <MadgwickAHRSupdateIMU+0x640>)
 800add2:	ed93 7a00 	vldr	s14, [r3]
 800add6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800adda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adde:	4b11      	ldr	r3, [pc, #68]	@ (800ae24 <MadgwickAHRSupdateIMU+0x640>)
 800ade0:	edc3 7a00 	vstr	s15, [r3]
	q2 *= recipNorm;
 800ade4:	4b10      	ldr	r3, [pc, #64]	@ (800ae28 <MadgwickAHRSupdateIMU+0x644>)
 800ade6:	ed93 7a00 	vldr	s14, [r3]
 800adea:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ae28 <MadgwickAHRSupdateIMU+0x644>)
 800adf4:	edc3 7a00 	vstr	s15, [r3]
	q3 *= recipNorm;
 800adf8:	4b06      	ldr	r3, [pc, #24]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800adfa:	ed93 7a00 	vldr	s14, [r3]
 800adfe:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800ae02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae06:	4b03      	ldr	r3, [pc, #12]	@ (800ae14 <MadgwickAHRSupdateIMU+0x630>)
 800ae08:	edc3 7a00 	vstr	s15, [r3]


}
 800ae0c:	bf00      	nop
 800ae0e:	3770      	adds	r7, #112	@ 0x70
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}
 800ae14:	20007af0 	.word	0x20007af0
 800ae18:	20000010 	.word	0x20000010
 800ae1c:	3a83126f 	.word	0x3a83126f
 800ae20:	20000014 	.word	0x20000014
 800ae24:	20007ae8 	.word	0x20007ae8
 800ae28:	20007aec 	.word	0x20007aec

0800ae2c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	ed87 0a01 	vstr	s0, [r7, #4]
	float halfx = 0.5f * x;
 800ae36:	edd7 7a01 	vldr	s15, [r7, #4]
 800ae3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ae3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae42:	edc7 7a05 	vstr	s15, [r7, #20]
	float y = x;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 800ae4a:	f107 0310 	add.w	r3, r7, #16
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	105a      	asrs	r2, r3, #1
 800ae56:	4b12      	ldr	r3, [pc, #72]	@ (800aea0 <invSqrt+0x74>)
 800ae58:	1a9b      	subs	r3, r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 800ae5c:	f107 030c 	add.w	r3, r7, #12
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 800ae64:	ed97 7a04 	vldr	s14, [r7, #16]
 800ae68:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae70:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae78:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800ae7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae80:	edd7 7a04 	vldr	s15, [r7, #16]
 800ae84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae88:	edc7 7a04 	vstr	s15, [r7, #16]
	return y;
 800ae8c:	693b      	ldr	r3, [r7, #16]
 800ae8e:	ee07 3a90 	vmov	s15, r3
}
 800ae92:	eeb0 0a67 	vmov.f32	s0, s15
 800ae96:	371c      	adds	r7, #28
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9e:	4770      	bx	lr
 800aea0:	5f3759df 	.word	0x5f3759df

0800aea4 <bmp280_StartUp>:

static int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9;
static uint16_t t1, p1;
static int32_t t_fine;

static void bmp280_StartUp(){
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aeae:	4807      	ldr	r0, [pc, #28]	@ (800aecc <bmp280_StartUp+0x28>)
 800aeb0:	f7f6 ff88 	bl	8001dc4 <HAL_GPIO_WritePin>
	vTaskDelay(5);
 800aeb4:	2005      	movs	r0, #5
 800aeb6:	f7fc faad 	bl	8007414 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800aeba:	2201      	movs	r2, #1
 800aebc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aec0:	4802      	ldr	r0, [pc, #8]	@ (800aecc <bmp280_StartUp+0x28>)
 800aec2:	f7f6 ff7f 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 800aec6:	bf00      	nop
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	40020400 	.word	0x40020400

0800aed0 <bmp280_WriteReg>:
static void bmp280_WriteReg(uint8_t reg, uint8_t val){
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	460a      	mov	r2, r1
 800aeda:	71fb      	strb	r3, [r7, #7]
 800aedc:	4613      	mov	r3, r2
 800aede:	71bb      	strb	r3, [r7, #6]

	uint8_t buf[2];
	buf[0] = reg;
 800aee0:	79fb      	ldrb	r3, [r7, #7]
 800aee2:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(1<<7);
 800aee4:	7b3b      	ldrb	r3, [r7, #12]
 800aee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeea:	b2db      	uxtb	r3, r3
 800aeec:	733b      	strb	r3, [r7, #12]
	buf[1] = val;
 800aeee:	79bb      	ldrb	r3, [r7, #6]
 800aef0:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800aef2:	2200      	movs	r2, #0
 800aef4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800aef8:	4809      	ldr	r0, [pc, #36]	@ (800af20 <bmp280_WriteReg+0x50>)
 800aefa:	f7f6 ff63 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, buf, 2, 100);
 800aefe:	f107 010c 	add.w	r1, r7, #12
 800af02:	2364      	movs	r3, #100	@ 0x64
 800af04:	2202      	movs	r2, #2
 800af06:	4807      	ldr	r0, [pc, #28]	@ (800af24 <bmp280_WriteReg+0x54>)
 800af08:	f7f8 fcd9 	bl	80038be <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800af0c:	2201      	movs	r2, #1
 800af0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800af12:	4803      	ldr	r0, [pc, #12]	@ (800af20 <bmp280_WriteReg+0x50>)
 800af14:	f7f6 ff56 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 800af18:	bf00      	nop
 800af1a:	3710      	adds	r7, #16
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}
 800af20:	40020400 	.word	0x40020400
 800af24:	20007d54 	.word	0x20007d54

0800af28 <bmp280_ReadReg>:
void bmp280_ReadReg(uint8_t reg, uint8_t *buffer, uint8_t len){
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	4603      	mov	r3, r0
 800af30:	6039      	str	r1, [r7, #0]
 800af32:	71fb      	strb	r3, [r7, #7]
 800af34:	4613      	mov	r3, r2
 800af36:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800af42:	2200      	movs	r2, #0
 800af44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800af48:	480d      	ldr	r0, [pc, #52]	@ (800af80 <bmp280_ReadReg+0x58>)
 800af4a:	f7f6 ff3b 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 100);
 800af4e:	f107 010f 	add.w	r1, r7, #15
 800af52:	2364      	movs	r3, #100	@ 0x64
 800af54:	2201      	movs	r2, #1
 800af56:	480b      	ldr	r0, [pc, #44]	@ (800af84 <bmp280_ReadReg+0x5c>)
 800af58:	f7f8 fcb1 	bl	80038be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buffer, len, 100);
 800af5c:	79bb      	ldrb	r3, [r7, #6]
 800af5e:	b29a      	uxth	r2, r3
 800af60:	2364      	movs	r3, #100	@ 0x64
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	4807      	ldr	r0, [pc, #28]	@ (800af84 <bmp280_ReadReg+0x5c>)
 800af66:	f7f8 fdee 	bl	8003b46 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800af6a:	2201      	movs	r2, #1
 800af6c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800af70:	4803      	ldr	r0, [pc, #12]	@ (800af80 <bmp280_ReadReg+0x58>)
 800af72:	f7f6 ff27 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 800af76:	bf00      	nop
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	40020400 	.word	0x40020400
 800af84:	20007d54 	.word	0x20007d54

0800af88 <bmp280_ReadCalibrateValue>:
static void bmp280_ReadCalibrateValue(){
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0

	uint8_t buf[24];
	bmp280_ReadReg(DIG_T1, buf, 24);
 800af8e:	463b      	mov	r3, r7
 800af90:	2218      	movs	r2, #24
 800af92:	4619      	mov	r1, r3
 800af94:	2088      	movs	r0, #136	@ 0x88
 800af96:	f7ff ffc7 	bl	800af28 <bmp280_ReadReg>

	t1 = buf[1] << 8 | buf[0];
 800af9a:	787b      	ldrb	r3, [r7, #1]
 800af9c:	021b      	lsls	r3, r3, #8
 800af9e:	b21a      	sxth	r2, r3
 800afa0:	783b      	ldrb	r3, [r7, #0]
 800afa2:	b21b      	sxth	r3, r3
 800afa4:	4313      	orrs	r3, r2
 800afa6:	b21b      	sxth	r3, r3
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	4b35      	ldr	r3, [pc, #212]	@ (800b080 <bmp280_ReadCalibrateValue+0xf8>)
 800afac:	801a      	strh	r2, [r3, #0]
	t2 = buf[3] << 8 | buf[2];
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	021b      	lsls	r3, r3, #8
 800afb2:	b21a      	sxth	r2, r3
 800afb4:	78bb      	ldrb	r3, [r7, #2]
 800afb6:	b21b      	sxth	r3, r3
 800afb8:	4313      	orrs	r3, r2
 800afba:	b21a      	sxth	r2, r3
 800afbc:	4b31      	ldr	r3, [pc, #196]	@ (800b084 <bmp280_ReadCalibrateValue+0xfc>)
 800afbe:	801a      	strh	r2, [r3, #0]
	t3 = buf[5] << 8 | buf[4];
 800afc0:	797b      	ldrb	r3, [r7, #5]
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	b21a      	sxth	r2, r3
 800afc6:	793b      	ldrb	r3, [r7, #4]
 800afc8:	b21b      	sxth	r3, r3
 800afca:	4313      	orrs	r3, r2
 800afcc:	b21a      	sxth	r2, r3
 800afce:	4b2e      	ldr	r3, [pc, #184]	@ (800b088 <bmp280_ReadCalibrateValue+0x100>)
 800afd0:	801a      	strh	r2, [r3, #0]

	p1 = buf[7] << 8 | buf[6];
 800afd2:	79fb      	ldrb	r3, [r7, #7]
 800afd4:	021b      	lsls	r3, r3, #8
 800afd6:	b21a      	sxth	r2, r3
 800afd8:	79bb      	ldrb	r3, [r7, #6]
 800afda:	b21b      	sxth	r3, r3
 800afdc:	4313      	orrs	r3, r2
 800afde:	b21b      	sxth	r3, r3
 800afe0:	b29a      	uxth	r2, r3
 800afe2:	4b2a      	ldr	r3, [pc, #168]	@ (800b08c <bmp280_ReadCalibrateValue+0x104>)
 800afe4:	801a      	strh	r2, [r3, #0]
	p2 = buf[9] << 8 | buf[8];
 800afe6:	7a7b      	ldrb	r3, [r7, #9]
 800afe8:	021b      	lsls	r3, r3, #8
 800afea:	b21a      	sxth	r2, r3
 800afec:	7a3b      	ldrb	r3, [r7, #8]
 800afee:	b21b      	sxth	r3, r3
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b21a      	sxth	r2, r3
 800aff4:	4b26      	ldr	r3, [pc, #152]	@ (800b090 <bmp280_ReadCalibrateValue+0x108>)
 800aff6:	801a      	strh	r2, [r3, #0]
	p3 = buf[11]<< 8 | buf[10];
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	021b      	lsls	r3, r3, #8
 800affc:	b21a      	sxth	r2, r3
 800affe:	7abb      	ldrb	r3, [r7, #10]
 800b000:	b21b      	sxth	r3, r3
 800b002:	4313      	orrs	r3, r2
 800b004:	b21a      	sxth	r2, r3
 800b006:	4b23      	ldr	r3, [pc, #140]	@ (800b094 <bmp280_ReadCalibrateValue+0x10c>)
 800b008:	801a      	strh	r2, [r3, #0]
	p4 = buf[13]<< 8 | buf[12];
 800b00a:	7b7b      	ldrb	r3, [r7, #13]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	b21a      	sxth	r2, r3
 800b010:	7b3b      	ldrb	r3, [r7, #12]
 800b012:	b21b      	sxth	r3, r3
 800b014:	4313      	orrs	r3, r2
 800b016:	b21a      	sxth	r2, r3
 800b018:	4b1f      	ldr	r3, [pc, #124]	@ (800b098 <bmp280_ReadCalibrateValue+0x110>)
 800b01a:	801a      	strh	r2, [r3, #0]
	p5 = buf[15]<< 8 | buf[14];
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	021b      	lsls	r3, r3, #8
 800b020:	b21a      	sxth	r2, r3
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	b21b      	sxth	r3, r3
 800b026:	4313      	orrs	r3, r2
 800b028:	b21a      	sxth	r2, r3
 800b02a:	4b1c      	ldr	r3, [pc, #112]	@ (800b09c <bmp280_ReadCalibrateValue+0x114>)
 800b02c:	801a      	strh	r2, [r3, #0]
	p6 = buf[17]<< 8 | buf[16];
 800b02e:	7c7b      	ldrb	r3, [r7, #17]
 800b030:	021b      	lsls	r3, r3, #8
 800b032:	b21a      	sxth	r2, r3
 800b034:	7c3b      	ldrb	r3, [r7, #16]
 800b036:	b21b      	sxth	r3, r3
 800b038:	4313      	orrs	r3, r2
 800b03a:	b21a      	sxth	r2, r3
 800b03c:	4b18      	ldr	r3, [pc, #96]	@ (800b0a0 <bmp280_ReadCalibrateValue+0x118>)
 800b03e:	801a      	strh	r2, [r3, #0]
	p7 = buf[19]<< 8 | buf[18];
 800b040:	7cfb      	ldrb	r3, [r7, #19]
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	b21a      	sxth	r2, r3
 800b046:	7cbb      	ldrb	r3, [r7, #18]
 800b048:	b21b      	sxth	r3, r3
 800b04a:	4313      	orrs	r3, r2
 800b04c:	b21a      	sxth	r2, r3
 800b04e:	4b15      	ldr	r3, [pc, #84]	@ (800b0a4 <bmp280_ReadCalibrateValue+0x11c>)
 800b050:	801a      	strh	r2, [r3, #0]
	p8 = buf[21]<< 8 | buf[20];
 800b052:	7d7b      	ldrb	r3, [r7, #21]
 800b054:	021b      	lsls	r3, r3, #8
 800b056:	b21a      	sxth	r2, r3
 800b058:	7d3b      	ldrb	r3, [r7, #20]
 800b05a:	b21b      	sxth	r3, r3
 800b05c:	4313      	orrs	r3, r2
 800b05e:	b21a      	sxth	r2, r3
 800b060:	4b11      	ldr	r3, [pc, #68]	@ (800b0a8 <bmp280_ReadCalibrateValue+0x120>)
 800b062:	801a      	strh	r2, [r3, #0]
	p9 = buf[23]<< 8 | buf[22];
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	021b      	lsls	r3, r3, #8
 800b068:	b21a      	sxth	r2, r3
 800b06a:	7dbb      	ldrb	r3, [r7, #22]
 800b06c:	b21b      	sxth	r3, r3
 800b06e:	4313      	orrs	r3, r2
 800b070:	b21a      	sxth	r2, r3
 800b072:	4b0e      	ldr	r3, [pc, #56]	@ (800b0ac <bmp280_ReadCalibrateValue+0x124>)
 800b074:	801a      	strh	r2, [r3, #0]

}
 800b076:	bf00      	nop
 800b078:	3718      	adds	r7, #24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop
 800b080:	20007b5c 	.word	0x20007b5c
 800b084:	20007b48 	.word	0x20007b48
 800b088:	20007b4a 	.word	0x20007b4a
 800b08c:	20007b5e 	.word	0x20007b5e
 800b090:	20007b4c 	.word	0x20007b4c
 800b094:	20007b4e 	.word	0x20007b4e
 800b098:	20007b50 	.word	0x20007b50
 800b09c:	20007b52 	.word	0x20007b52
 800b0a0:	20007b54 	.word	0x20007b54
 800b0a4:	20007b56 	.word	0x20007b56
 800b0a8:	20007b58 	.word	0x20007b58
 800b0ac:	20007b5a 	.word	0x20007b5a

0800b0b0 <bmp280GetTemperature>:
static void bmp280GetTemperature(float* temperature)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b086      	sub	sp, #24
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf[3];
	int32_t temp_adc;
	int32_t var1, var2;

	bmp280_ReadReg(BMP280_TEMP_REG_DATA, temp_buf, 3);
 800b0b8:	f107 0308 	add.w	r3, r7, #8
 800b0bc:	2203      	movs	r2, #3
 800b0be:	4619      	mov	r1, r3
 800b0c0:	20fa      	movs	r0, #250	@ 0xfa
 800b0c2:	f7ff ff31 	bl	800af28 <bmp280_ReadReg>
	temp_adc = (temp_buf[0] << 16) | (temp_buf[1] << 8) | temp_buf[2];
 800b0c6:	7a3b      	ldrb	r3, [r7, #8]
 800b0c8:	041a      	lsls	r2, r3, #16
 800b0ca:	7a7b      	ldrb	r3, [r7, #9]
 800b0cc:	021b      	lsls	r3, r3, #8
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	7aba      	ldrb	r2, [r7, #10]
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	617b      	str	r3, [r7, #20]
	temp_adc >>= 4;
 800b0d6:	697b      	ldr	r3, [r7, #20]
 800b0d8:	111b      	asrs	r3, r3, #4
 800b0da:	617b      	str	r3, [r7, #20]

	var1  = ((((temp_adc>>3) - ((int32_t)t1 <<1))) * ((int32_t)t2)) >> 11;
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	10da      	asrs	r2, r3, #3
 800b0e0:	4b1c      	ldr	r3, [pc, #112]	@ (800b154 <bmp280GetTemperature+0xa4>)
 800b0e2:	881b      	ldrh	r3, [r3, #0]
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	1ad3      	subs	r3, r2, r3
 800b0e8:	4a1b      	ldr	r2, [pc, #108]	@ (800b158 <bmp280GetTemperature+0xa8>)
 800b0ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b0ee:	fb02 f303 	mul.w	r3, r2, r3
 800b0f2:	12db      	asrs	r3, r3, #11
 800b0f4:	613b      	str	r3, [r7, #16]
	var2  = (((((temp_adc >> 4) - ((int32_t) t1)) * ((temp_adc >> 4) - ((int32_t) t1))) >> 12) * ((int32_t) t3)) >> 14;
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	111b      	asrs	r3, r3, #4
 800b0fa:	4a16      	ldr	r2, [pc, #88]	@ (800b154 <bmp280GetTemperature+0xa4>)
 800b0fc:	8812      	ldrh	r2, [r2, #0]
 800b0fe:	1a9b      	subs	r3, r3, r2
 800b100:	697a      	ldr	r2, [r7, #20]
 800b102:	1112      	asrs	r2, r2, #4
 800b104:	4913      	ldr	r1, [pc, #76]	@ (800b154 <bmp280GetTemperature+0xa4>)
 800b106:	8809      	ldrh	r1, [r1, #0]
 800b108:	1a52      	subs	r2, r2, r1
 800b10a:	fb02 f303 	mul.w	r3, r2, r3
 800b10e:	131b      	asrs	r3, r3, #12
 800b110:	4a12      	ldr	r2, [pc, #72]	@ (800b15c <bmp280GetTemperature+0xac>)
 800b112:	f9b2 2000 	ldrsh.w	r2, [r2]
 800b116:	fb02 f303 	mul.w	r3, r2, r3
 800b11a:	139b      	asrs	r3, r3, #14
 800b11c:	60fb      	str	r3, [r7, #12]

	t_fine = (var1 + var2);
 800b11e:	693a      	ldr	r2, [r7, #16]
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4413      	add	r3, r2
 800b124:	4a0e      	ldr	r2, [pc, #56]	@ (800b160 <bmp280GetTemperature+0xb0>)
 800b126:	6013      	str	r3, [r2, #0]

	*temperature = (((t_fine * 5) + 128 ) >> 8) /100.0f;
 800b128:	4b0d      	ldr	r3, [pc, #52]	@ (800b160 <bmp280GetTemperature+0xb0>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	4613      	mov	r3, r2
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	4413      	add	r3, r2
 800b132:	3380      	adds	r3, #128	@ 0x80
 800b134:	121b      	asrs	r3, r3, #8
 800b136:	ee07 3a90 	vmov	s15, r3
 800b13a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b13e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800b164 <bmp280GetTemperature+0xb4>
 800b142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	edc3 7a00 	vstr	s15, [r3]
}
 800b14c:	bf00      	nop
 800b14e:	3718      	adds	r7, #24
 800b150:	46bd      	mov	sp, r7
 800b152:	bd80      	pop	{r7, pc}
 800b154:	20007b5c 	.word	0x20007b5c
 800b158:	20007b48 	.word	0x20007b48
 800b15c:	20007b4a 	.word	0x20007b4a
 800b160:	20007b60 	.word	0x20007b60
 800b164:	42c80000 	.word	0x42c80000

0800b168 <bmp280GetPressure>:
static void bmp280GetPressure(float *pressure)
{
 800b168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b16c:	b0ce      	sub	sp, #312	@ 0x138
 800b16e:	af00      	add	r7, sp, #0
 800b170:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	uint8_t pres_buf[3];
	int32_t pres_adc;
	int64_t var1, var2, p;
	float temp;

	bmp280GetTemperature(&temp);
 800b174:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff ff99 	bl	800b0b0 <bmp280GetTemperature>
	bmp280_ReadReg(BMP280_PRESSURE_REG_DAT, pres_buf, 3);
 800b17e:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800b182:	2203      	movs	r2, #3
 800b184:	4619      	mov	r1, r3
 800b186:	20f7      	movs	r0, #247	@ 0xf7
 800b188:	f7ff fece 	bl	800af28 <bmp280_ReadReg>

	pres_adc = (pres_buf[0] << 16) | (pres_buf[1] << 8) | pres_buf[2];
 800b18c:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 800b190:	041a      	lsls	r2, r3, #16
 800b192:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 800b196:	021b      	lsls	r3, r3, #8
 800b198:	431a      	orrs	r2, r3
 800b19a:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	pres_adc >>= 4;
 800b1a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b1a8:	111b      	asrs	r3, r3, #4
 800b1aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	var1 = ((int64_t)t_fine) - 128000;
 800b1ae:	4baa      	ldr	r3, [pc, #680]	@ (800b458 <bmp280GetPressure+0x2f0>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	17da      	asrs	r2, r3, #31
 800b1b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b1b8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800b1bc:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 800b1c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	f143 33ff 	adc.w	r3, r3, #4294967295
 800b1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b1d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800b1d4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t)p6;
 800b1d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800b1dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b1e0:	fb03 f102 	mul.w	r1, r3, r2
 800b1e4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800b1e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b1ec:	fb02 f303 	mul.w	r3, r2, r3
 800b1f0:	18ca      	adds	r2, r1, r3
 800b1f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b1f6:	fba3 4503 	umull	r4, r5, r3, r3
 800b1fa:	1953      	adds	r3, r2, r5
 800b1fc:	461d      	mov	r5, r3
 800b1fe:	4b97      	ldr	r3, [pc, #604]	@ (800b45c <bmp280GetPressure+0x2f4>)
 800b200:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b204:	b21b      	sxth	r3, r3
 800b206:	17da      	asrs	r2, r3, #31
 800b208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b20c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800b210:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 800b214:	4603      	mov	r3, r0
 800b216:	fb03 f205 	mul.w	r2, r3, r5
 800b21a:	460b      	mov	r3, r1
 800b21c:	fb04 f303 	mul.w	r3, r4, r3
 800b220:	4413      	add	r3, r2
 800b222:	4602      	mov	r2, r0
 800b224:	fba4 8902 	umull	r8, r9, r4, r2
 800b228:	444b      	add	r3, r9
 800b22a:	4699      	mov	r9, r3
 800b22c:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 800b230:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 800b234:	4b8a      	ldr	r3, [pc, #552]	@ (800b460 <bmp280GetPressure+0x2f8>)
 800b236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b23a:	b21b      	sxth	r3, r3
 800b23c:	17da      	asrs	r2, r3, #31
 800b23e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b242:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800b246:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b24a:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800b24e:	462a      	mov	r2, r5
 800b250:	fb02 f203 	mul.w	r2, r2, r3
 800b254:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b258:	4621      	mov	r1, r4
 800b25a:	fb01 f303 	mul.w	r3, r1, r3
 800b25e:	441a      	add	r2, r3
 800b260:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b264:	4621      	mov	r1, r4
 800b266:	fba3 ab01 	umull	sl, fp, r3, r1
 800b26a:	eb02 030b 	add.w	r3, r2, fp
 800b26e:	469b      	mov	fp, r3
 800b270:	f04f 0000 	mov.w	r0, #0
 800b274:	f04f 0100 	mov.w	r1, #0
 800b278:	ea4f 414b 	mov.w	r1, fp, lsl #17
 800b27c:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 800b280:	ea4f 404a 	mov.w	r0, sl, lsl #17
 800b284:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800b288:	1814      	adds	r4, r2, r0
 800b28a:	643c      	str	r4, [r7, #64]	@ 0x40
 800b28c:	414b      	adcs	r3, r1
 800b28e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b290:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800b294:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t)p4)<<35);
 800b298:	4b72      	ldr	r3, [pc, #456]	@ (800b464 <bmp280GetPressure+0x2fc>)
 800b29a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b29e:	b21b      	sxth	r3, r3
 800b2a0:	17da      	asrs	r2, r3, #31
 800b2a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b2a6:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800b2aa:	f04f 0000 	mov.w	r0, #0
 800b2ae:	f04f 0100 	mov.w	r1, #0
 800b2b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b2b6:	00d9      	lsls	r1, r3, #3
 800b2b8:	2000      	movs	r0, #0
 800b2ba:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800b2be:	1814      	adds	r4, r2, r0
 800b2c0:	63bc      	str	r4, [r7, #56]	@ 0x38
 800b2c2:	414b      	adcs	r3, r1
 800b2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800b2ca:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t)p3)>>8) + ((var1 * (int64_t)p2)<<12);
 800b2ce:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800b2d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2d6:	fb03 f102 	mul.w	r1, r3, r2
 800b2da:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800b2de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2e2:	fb02 f303 	mul.w	r3, r2, r3
 800b2e6:	18ca      	adds	r2, r1, r3
 800b2e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b2ec:	fba3 1303 	umull	r1, r3, r3, r3
 800b2f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2fe:	18d3      	adds	r3, r2, r3
 800b300:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b304:	4b58      	ldr	r3, [pc, #352]	@ (800b468 <bmp280GetPressure+0x300>)
 800b306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b30a:	b21b      	sxth	r3, r3
 800b30c:	17da      	asrs	r2, r3, #31
 800b30e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b312:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800b316:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800b31a:	462b      	mov	r3, r5
 800b31c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800b320:	4642      	mov	r2, r8
 800b322:	fb02 f203 	mul.w	r2, r2, r3
 800b326:	464b      	mov	r3, r9
 800b328:	4621      	mov	r1, r4
 800b32a:	fb01 f303 	mul.w	r3, r1, r3
 800b32e:	4413      	add	r3, r2
 800b330:	4622      	mov	r2, r4
 800b332:	4641      	mov	r1, r8
 800b334:	fba2 1201 	umull	r1, r2, r2, r1
 800b338:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 800b33c:	460a      	mov	r2, r1
 800b33e:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 800b342:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 800b346:	4413      	add	r3, r2
 800b348:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b34c:	f04f 0000 	mov.w	r0, #0
 800b350:	f04f 0100 	mov.w	r1, #0
 800b354:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800b358:	4623      	mov	r3, r4
 800b35a:	0a18      	lsrs	r0, r3, #8
 800b35c:	462b      	mov	r3, r5
 800b35e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b362:	462b      	mov	r3, r5
 800b364:	1219      	asrs	r1, r3, #8
 800b366:	4b41      	ldr	r3, [pc, #260]	@ (800b46c <bmp280GetPressure+0x304>)
 800b368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b36c:	b21b      	sxth	r3, r3
 800b36e:	17da      	asrs	r2, r3, #31
 800b370:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b374:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800b378:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b37c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800b380:	464a      	mov	r2, r9
 800b382:	fb02 f203 	mul.w	r2, r2, r3
 800b386:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800b38a:	4644      	mov	r4, r8
 800b38c:	fb04 f303 	mul.w	r3, r4, r3
 800b390:	441a      	add	r2, r3
 800b392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800b396:	4644      	mov	r4, r8
 800b398:	fba3 4304 	umull	r4, r3, r3, r4
 800b39c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b3a0:	4623      	mov	r3, r4
 800b3a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800b3a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b3aa:	18d3      	adds	r3, r2, r3
 800b3ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b3b0:	f04f 0200 	mov.w	r2, #0
 800b3b4:	f04f 0300 	mov.w	r3, #0
 800b3b8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 800b3bc:	464c      	mov	r4, r9
 800b3be:	0323      	lsls	r3, r4, #12
 800b3c0:	4644      	mov	r4, r8
 800b3c2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800b3c6:	4644      	mov	r4, r8
 800b3c8:	0322      	lsls	r2, r4, #12
 800b3ca:	1884      	adds	r4, r0, r2
 800b3cc:	633c      	str	r4, [r7, #48]	@ 0x30
 800b3ce:	eb41 0303 	adc.w	r3, r1, r3
 800b3d2:	637b      	str	r3, [r7, #52]	@ 0x34
 800b3d4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800b3d8:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 800b3dc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b3e0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800b3e4:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 800b3e8:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 800b3ec:	4b20      	ldr	r3, [pc, #128]	@ (800b470 <bmp280GetPressure+0x308>)
 800b3ee:	881b      	ldrh	r3, [r3, #0]
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b3f8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800b3fc:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800b400:	462b      	mov	r3, r5
 800b402:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 800b406:	4642      	mov	r2, r8
 800b408:	fb02 f203 	mul.w	r2, r2, r3
 800b40c:	464b      	mov	r3, r9
 800b40e:	4621      	mov	r1, r4
 800b410:	fb01 f303 	mul.w	r3, r1, r3
 800b414:	4413      	add	r3, r2
 800b416:	4622      	mov	r2, r4
 800b418:	4641      	mov	r1, r8
 800b41a:	fba2 1201 	umull	r1, r2, r2, r1
 800b41e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800b422:	460a      	mov	r2, r1
 800b424:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 800b428:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800b42c:	4413      	add	r3, r2
 800b42e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800b432:	f04f 0200 	mov.w	r2, #0
 800b436:	f04f 0300 	mov.w	r3, #0
 800b43a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800b43e:	4629      	mov	r1, r5
 800b440:	104a      	asrs	r2, r1, #1
 800b442:	4629      	mov	r1, r5
 800b444:	17cb      	asrs	r3, r1, #31
 800b446:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if ( var1 == 0 ) return;
 800b44a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b44e:	4313      	orrs	r3, r2
 800b450:	f000 8165 	beq.w	800b71e <bmp280GetPressure+0x5b6>
 800b454:	e00e      	b.n	800b474 <bmp280GetPressure+0x30c>
 800b456:	bf00      	nop
 800b458:	20007b60 	.word	0x20007b60
 800b45c:	20007b54 	.word	0x20007b54
 800b460:	20007b52 	.word	0x20007b52
 800b464:	20007b50 	.word	0x20007b50
 800b468:	20007b4e 	.word	0x20007b4e
 800b46c:	20007b4c 	.word	0x20007b4c
 800b470:	20007b5e 	.word	0x20007b5e

	p = 1048576 - pres_adc;
 800b474:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800b478:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800b47c:	17da      	asrs	r2, r3, #31
 800b47e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b480:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b482:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800b486:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p<<31) - var2)*3125) / var1;
 800b48a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b48e:	105b      	asrs	r3, r3, #1
 800b490:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b494:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b498:	07db      	lsls	r3, r3, #31
 800b49a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800b49e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800b4a2:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 800b4a6:	4621      	mov	r1, r4
 800b4a8:	1a89      	subs	r1, r1, r2
 800b4aa:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	eb61 0303 	sbc.w	r3, r1, r3
 800b4b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800b4b8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800b4bc:	4622      	mov	r2, r4
 800b4be:	462b      	mov	r3, r5
 800b4c0:	1891      	adds	r1, r2, r2
 800b4c2:	6239      	str	r1, [r7, #32]
 800b4c4:	415b      	adcs	r3, r3
 800b4c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	1851      	adds	r1, r2, r1
 800b4d0:	61b9      	str	r1, [r7, #24]
 800b4d2:	4629      	mov	r1, r5
 800b4d4:	414b      	adcs	r3, r1
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	f04f 0200 	mov.w	r2, #0
 800b4dc:	f04f 0300 	mov.w	r3, #0
 800b4e0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	018b      	lsls	r3, r1, #6
 800b4e8:	4641      	mov	r1, r8
 800b4ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b4ee:	4641      	mov	r1, r8
 800b4f0:	018a      	lsls	r2, r1, #6
 800b4f2:	4641      	mov	r1, r8
 800b4f4:	1889      	adds	r1, r1, r2
 800b4f6:	6139      	str	r1, [r7, #16]
 800b4f8:	4649      	mov	r1, r9
 800b4fa:	eb43 0101 	adc.w	r1, r3, r1
 800b4fe:	6179      	str	r1, [r7, #20]
 800b500:	f04f 0200 	mov.w	r2, #0
 800b504:	f04f 0300 	mov.w	r3, #0
 800b508:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800b50c:	4649      	mov	r1, r9
 800b50e:	008b      	lsls	r3, r1, #2
 800b510:	4641      	mov	r1, r8
 800b512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b516:	4641      	mov	r1, r8
 800b518:	008a      	lsls	r2, r1, #2
 800b51a:	4610      	mov	r0, r2
 800b51c:	4619      	mov	r1, r3
 800b51e:	4603      	mov	r3, r0
 800b520:	4622      	mov	r2, r4
 800b522:	189b      	adds	r3, r3, r2
 800b524:	60bb      	str	r3, [r7, #8]
 800b526:	460b      	mov	r3, r1
 800b528:	462a      	mov	r2, r5
 800b52a:	eb42 0303 	adc.w	r3, r2, r3
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	f04f 0200 	mov.w	r2, #0
 800b534:	f04f 0300 	mov.w	r3, #0
 800b538:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800b53c:	4649      	mov	r1, r9
 800b53e:	008b      	lsls	r3, r1, #2
 800b540:	4641      	mov	r1, r8
 800b542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b546:	4641      	mov	r1, r8
 800b548:	008a      	lsls	r2, r1, #2
 800b54a:	4610      	mov	r0, r2
 800b54c:	4619      	mov	r1, r3
 800b54e:	4603      	mov	r3, r0
 800b550:	4622      	mov	r2, r4
 800b552:	189b      	adds	r3, r3, r2
 800b554:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b556:	462b      	mov	r3, r5
 800b558:	460a      	mov	r2, r1
 800b55a:	eb42 0303 	adc.w	r3, r2, r3
 800b55e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b560:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b564:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800b568:	f7f5 fc06 	bl	8000d78 <__aeabi_ldivmod>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 800b574:	4b6d      	ldr	r3, [pc, #436]	@ (800b72c <bmp280GetPressure+0x5c4>)
 800b576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b57a:	b21b      	sxth	r3, r3
 800b57c:	17da      	asrs	r2, r3, #31
 800b57e:	673b      	str	r3, [r7, #112]	@ 0x70
 800b580:	677a      	str	r2, [r7, #116]	@ 0x74
 800b582:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b586:	f04f 0000 	mov.w	r0, #0
 800b58a:	f04f 0100 	mov.w	r1, #0
 800b58e:	0b50      	lsrs	r0, r2, #13
 800b590:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b594:	1359      	asrs	r1, r3, #13
 800b596:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800b59a:	462b      	mov	r3, r5
 800b59c:	fb00 f203 	mul.w	r2, r0, r3
 800b5a0:	4623      	mov	r3, r4
 800b5a2:	fb03 f301 	mul.w	r3, r3, r1
 800b5a6:	4413      	add	r3, r2
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	fba2 1200 	umull	r1, r2, r2, r0
 800b5ae:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800b5b2:	460a      	mov	r2, r1
 800b5b4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800b5b8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b5bc:	4413      	add	r3, r2
 800b5be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b5c2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800b5c6:	f04f 0000 	mov.w	r0, #0
 800b5ca:	f04f 0100 	mov.w	r1, #0
 800b5ce:	0b50      	lsrs	r0, r2, #13
 800b5d0:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800b5d4:	1359      	asrs	r1, r3, #13
 800b5d6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800b5da:	462b      	mov	r3, r5
 800b5dc:	fb00 f203 	mul.w	r2, r0, r3
 800b5e0:	4623      	mov	r3, r4
 800b5e2:	fb03 f301 	mul.w	r3, r3, r1
 800b5e6:	4413      	add	r3, r2
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	fba2 1200 	umull	r1, r2, r2, r0
 800b5ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800b5f2:	460a      	mov	r2, r1
 800b5f4:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800b5f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b602:	f04f 0200 	mov.w	r2, #0
 800b606:	f04f 0300 	mov.w	r3, #0
 800b60a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800b60e:	4621      	mov	r1, r4
 800b610:	0e4a      	lsrs	r2, r1, #25
 800b612:	4629      	mov	r1, r5
 800b614:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800b618:	4629      	mov	r1, r5
 800b61a:	164b      	asrs	r3, r1, #25
 800b61c:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = (((int64_t)p8) * p) >> 19;
 800b620:	4b43      	ldr	r3, [pc, #268]	@ (800b730 <bmp280GetPressure+0x5c8>)
 800b622:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b626:	b21b      	sxth	r3, r3
 800b628:	17da      	asrs	r2, r3, #31
 800b62a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b62c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b62e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800b632:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800b636:	462a      	mov	r2, r5
 800b638:	fb02 f203 	mul.w	r2, r2, r3
 800b63c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800b640:	4621      	mov	r1, r4
 800b642:	fb01 f303 	mul.w	r3, r1, r3
 800b646:	4413      	add	r3, r2
 800b648:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800b64c:	4621      	mov	r1, r4
 800b64e:	fba2 1201 	umull	r1, r2, r2, r1
 800b652:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800b656:	460a      	mov	r2, r1
 800b658:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800b65c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800b660:	4413      	add	r3, r2
 800b662:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b666:	f04f 0200 	mov.w	r2, #0
 800b66a:	f04f 0300 	mov.w	r3, #0
 800b66e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800b672:	4621      	mov	r1, r4
 800b674:	0cca      	lsrs	r2, r1, #19
 800b676:	4629      	mov	r1, r5
 800b678:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800b67c:	4629      	mov	r1, r5
 800b67e:	14cb      	asrs	r3, r1, #19
 800b680:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 800b684:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b688:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800b68c:	1884      	adds	r4, r0, r2
 800b68e:	663c      	str	r4, [r7, #96]	@ 0x60
 800b690:	eb41 0303 	adc.w	r3, r1, r3
 800b694:	667b      	str	r3, [r7, #100]	@ 0x64
 800b696:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800b69a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800b69e:	4621      	mov	r1, r4
 800b6a0:	1889      	adds	r1, r1, r2
 800b6a2:	65b9      	str	r1, [r7, #88]	@ 0x58
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	eb43 0101 	adc.w	r1, r3, r1
 800b6aa:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800b6ac:	f04f 0000 	mov.w	r0, #0
 800b6b0:	f04f 0100 	mov.w	r1, #0
 800b6b4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800b6b8:	4623      	mov	r3, r4
 800b6ba:	0a18      	lsrs	r0, r3, #8
 800b6bc:	462b      	mov	r3, r5
 800b6be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800b6c2:	462b      	mov	r3, r5
 800b6c4:	1219      	asrs	r1, r3, #8
 800b6c6:	4b1b      	ldr	r3, [pc, #108]	@ (800b734 <bmp280GetPressure+0x5cc>)
 800b6c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b6cc:	b21b      	sxth	r3, r3
 800b6ce:	17da      	asrs	r2, r3, #31
 800b6d0:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6d2:	657a      	str	r2, [r7, #84]	@ 0x54
 800b6d4:	f04f 0200 	mov.w	r2, #0
 800b6d8:	f04f 0300 	mov.w	r3, #0
 800b6dc:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800b6e0:	464c      	mov	r4, r9
 800b6e2:	0123      	lsls	r3, r4, #4
 800b6e4:	4644      	mov	r4, r8
 800b6e6:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800b6ea:	4644      	mov	r4, r8
 800b6ec:	0122      	lsls	r2, r4, #4
 800b6ee:	1884      	adds	r4, r0, r2
 800b6f0:	603c      	str	r4, [r7, #0]
 800b6f2:	eb41 0303 	adc.w	r3, r1, r3
 800b6f6:	607b      	str	r3, [r7, #4]
 800b6f8:	e9d7 3400 	ldrd	r3, r4, [r7]
 800b6fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	*pressure = (float) p / 256.0f;
 800b700:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 800b704:	f7f5 fafa 	bl	8000cfc <__aeabi_l2f>
 800b708:	ee06 0a90 	vmov	s13, r0
 800b70c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b738 <bmp280GetPressure+0x5d0>
 800b710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b714:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b718:	edc3 7a00 	vstr	s15, [r3]
 800b71c:	e000      	b.n	800b720 <bmp280GetPressure+0x5b8>
	if ( var1 == 0 ) return;
 800b71e:	bf00      	nop

}
 800b720:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800b724:	46bd      	mov	sp, r7
 800b726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b72a:	bf00      	nop
 800b72c:	20007b5a 	.word	0x20007b5a
 800b730:	20007b58 	.word	0x20007b58
 800b734:	20007b56 	.word	0x20007b56
 800b738:	43800000 	.word	0x43800000

0800b73c <bmp280Init>:
void bmp280Init()
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	af00      	add	r7, sp, #0

	bmp280_StartUp();
 800b740:	f7ff fbb0 	bl	800aea4 <bmp280_StartUp>
	vTaskDelay(5);
 800b744:	2005      	movs	r0, #5
 800b746:	f7fb fe65 	bl	8007414 <vTaskDelay>
	bmp280_ReadCalibrateValue();
 800b74a:	f7ff fc1d 	bl	800af88 <bmp280_ReadCalibrateValue>
	vTaskDelay(5);
 800b74e:	2005      	movs	r0, #5
 800b750:	f7fb fe60 	bl	8007414 <vTaskDelay>
	bmp280_WriteReg(BMP280_REG_CTRL, ( (TEMP_18BIT_RES<<5) | (PRES_18BIT_RES<<2) | BMP280_NORMAL_MODE));
 800b754:	216f      	movs	r1, #111	@ 0x6f
 800b756:	20f4      	movs	r0, #244	@ 0xf4
 800b758:	f7ff fbba 	bl	800aed0 <bmp280_WriteReg>
	isInit = true;
 800b75c:	4b02      	ldr	r3, [pc, #8]	@ (800b768 <bmp280Init+0x2c>)
 800b75e:	2201      	movs	r2, #1
 800b760:	701a      	strb	r2, [r3, #0]
}
 800b762:	bf00      	nop
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	20007b46 	.word	0x20007b46

0800b76c <bmp280TestConnection>:
{

	return true;
}
bool bmp280TestConnection()
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b082      	sub	sp, #8
 800b770:	af00      	add	r7, sp, #0
	uint8_t checkID;

	if (!isInit) return false;
 800b772:	4b0d      	ldr	r3, [pc, #52]	@ (800b7a8 <bmp280TestConnection+0x3c>)
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	f083 0301 	eor.w	r3, r3, #1
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d001      	beq.n	800b784 <bmp280TestConnection+0x18>
 800b780:	2300      	movs	r3, #0
 800b782:	e00d      	b.n	800b7a0 <bmp280TestConnection+0x34>

	bmp280_StartUp();
 800b784:	f7ff fb8e 	bl	800aea4 <bmp280_StartUp>
	bmp280_ReadReg(BMP280_REG_ID, &checkID, 1);
 800b788:	1dfb      	adds	r3, r7, #7
 800b78a:	2201      	movs	r2, #1
 800b78c:	4619      	mov	r1, r3
 800b78e:	20d0      	movs	r0, #208	@ 0xd0
 800b790:	f7ff fbca 	bl	800af28 <bmp280_ReadReg>

	if ( checkID != 0x58 ) return false;
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	2b58      	cmp	r3, #88	@ 0x58
 800b798:	d001      	beq.n	800b79e <bmp280TestConnection+0x32>
 800b79a:	2300      	movs	r3, #0
 800b79c:	e000      	b.n	800b7a0 <bmp280TestConnection+0x34>

	return true;
 800b79e:	2301      	movs	r3, #1
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3708      	adds	r7, #8
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20007b46 	.word	0x20007b46

0800b7ac <bmp280GetData>:
void bmp280GetData(float* pressure, float* temperature, float* asl)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
	bmp280GetTemperature(temperature);
 800b7b8:	68b8      	ldr	r0, [r7, #8]
 800b7ba:	f7ff fc79 	bl	800b0b0 <bmp280GetTemperature>
	bmp280GetPressure(pressure);
 800b7be:	68f8      	ldr	r0, [r7, #12]
 800b7c0:	f7ff fcd2 	bl	800b168 <bmp280GetPressure>
	*asl = bmp280PressureToAltitude(pressure);
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f000 f809 	bl	800b7dc <bmp280PressureToAltitude>
 800b7ca:	eef0 7a40 	vmov.f32	s15, s0
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	edc3 7a00 	vstr	s15, [r3]

}
 800b7d4:	bf00      	nop
 800b7d6:	3710      	adds	r7, #16
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <bmp280PressureToAltitude>:
#define CONST_PF2 44330.0f
#define FIX_TEMP 25         // Fixed Temperature. ASL is a function of pressure and temperature, but as the temperature changes so much (blow a little towards the flie and watch it drop 5 degrees) it corrupts the ASL estimates.
                            // TLDR: Adjusting for temp changes does more harm than good.

float bmp280PressureToAltitude(float* pressure)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
    if (*pressure > 0)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	edd3 7a00 	vldr	s15, [r3]
 800b7ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f2:	dd1b      	ble.n	800b82c <bmp280PressureToAltitude+0x50>
    {
        //return (1.f - pow(*pressure / CONST_SEA_PRESSURE, CONST_PF)) * CONST_PF2;
        //return ((pow((1015.7 / *pressure), CONST_PF) - 1.0) * (25. + 273.15)) / 0.0065;
        return ((powf((1015.7f / *pressure), CONST_PF) - 1.0f) * (FIX_TEMP + 273.15f)) / 0.0065f;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	edd3 7a00 	vldr	s15, [r3]
 800b7fa:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800b840 <bmp280PressureToAltitude+0x64>
 800b7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b802:	eddf 0a10 	vldr	s1, [pc, #64]	@ 800b844 <bmp280PressureToAltitude+0x68>
 800b806:	eeb0 0a47 	vmov.f32	s0, s14
 800b80a:	f00f fd8f 	bl	801b32c <powf>
 800b80e:	eef0 7a40 	vmov.f32	s15, s0
 800b812:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b816:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b81a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800b848 <bmp280PressureToAltitude+0x6c>
 800b81e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b822:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800b84c <bmp280PressureToAltitude+0x70>
 800b826:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b82a:	e001      	b.n	800b830 <bmp280PressureToAltitude+0x54>
    }
    else
    {
        return 0;
 800b82c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800b850 <bmp280PressureToAltitude+0x74>
    }
}
 800b830:	eef0 7a47 	vmov.f32	s15, s14
 800b834:	eeb0 0a67 	vmov.f32	s0, s15
 800b838:	3708      	adds	r7, #8
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	447deccd 	.word	0x447deccd
 800b844:	3e42d454 	.word	0x3e42d454
 800b848:	43951333 	.word	0x43951333
 800b84c:	3bd4fdf4 	.word	0x3bd4fdf4
 800b850:	00000000 	.word	0x00000000

0800b854 <hal_ibus_init>:
static uint8_t fail_safe_flag = 0;

/*
 * Main Function
 */
void hal_ibus_init(){
 800b854:	b580      	push	{r7, lr}
 800b856:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 800b858:	2220      	movs	r2, #32
 800b85a:	4903      	ldr	r1, [pc, #12]	@ (800b868 <hal_ibus_init+0x14>)
 800b85c:	4803      	ldr	r0, [pc, #12]	@ (800b86c <hal_ibus_init+0x18>)
 800b85e:	f7f9 feff 	bl	8005660 <HAL_UART_Receive_DMA>
}
 800b862:	bf00      	nop
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	20007b64 	.word	0x20007b64
 800b86c:	2000812c 	.word	0x2000812c

0800b870 <hal_ibus_read>:
void hal_ibus_read(uint16_t* ibus_data){
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()){
 800b878:	f000 f818 	bl	800b8ac <ibus_is_valid>
 800b87c:	4603      	mov	r3, r0
 800b87e:	f083 0301 	eor.w	r3, r3, #1
 800b882:	b2db      	uxtb	r3, r3
 800b884:	2b00      	cmp	r3, #0
 800b886:	d10b      	bne.n	800b8a0 <hal_ibus_read+0x30>
		return false;
	}
	if(!ibus_checksum()){
 800b888:	f000 f828 	bl	800b8dc <ibus_checksum>
 800b88c:	4603      	mov	r3, r0
 800b88e:	f083 0301 	eor.w	r3, r3, #1
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b00      	cmp	r3, #0
 800b896:	d105      	bne.n	800b8a4 <hal_ibus_read+0x34>
		return false;
	}
	ibus_update(ibus_data);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f84f 	bl	800b93c <ibus_update>
	return true;
 800b89e:	e002      	b.n	800b8a6 <hal_ibus_read+0x36>
		return false;
 800b8a0:	bf00      	nop
 800b8a2:	e000      	b.n	800b8a6 <hal_ibus_read+0x36>
		return false;
 800b8a4:	bf00      	nop
}
 800b8a6:	3708      	adds	r7, #8
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <ibus_is_valid>:
/*
 * Helper Functions
 */
bool ibus_is_valid(){
 800b8ac:	b480      	push	{r7}
 800b8ae:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 800b8b0:	4b09      	ldr	r3, [pc, #36]	@ (800b8d8 <ibus_is_valid+0x2c>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	2b20      	cmp	r3, #32
 800b8b6:	d105      	bne.n	800b8c4 <ibus_is_valid+0x18>
 800b8b8:	4b07      	ldr	r3, [pc, #28]	@ (800b8d8 <ibus_is_valid+0x2c>)
 800b8ba:	785b      	ldrb	r3, [r3, #1]
 800b8bc:	2b40      	cmp	r3, #64	@ 0x40
 800b8be:	d101      	bne.n	800b8c4 <ibus_is_valid+0x18>
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e000      	b.n	800b8c6 <ibus_is_valid+0x1a>
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	b2db      	uxtb	r3, r3
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr
 800b8d6:	bf00      	nop
 800b8d8:	20007b64 	.word	0x20007b64

0800b8dc <ibus_checksum>:
bool ibus_checksum(){
 800b8dc:	b480      	push	{r7}
 800b8de:	b085      	sub	sp, #20
 800b8e0:	af00      	add	r7, sp, #0
	uint16_t checksum_cal = 0xffff;
 800b8e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b8e6:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i=0; i < 30; i++ ){
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	60bb      	str	r3, [r7, #8]
 800b8ec:	e00a      	b.n	800b904 <ibus_checksum+0x28>
		checksum_cal -= uart_rx_buffer[i];
 800b8ee:	4a12      	ldr	r2, [pc, #72]	@ (800b938 <ibus_checksum+0x5c>)
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	781b      	ldrb	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	89fb      	ldrh	r3, [r7, #14]
 800b8fa:	1a9b      	subs	r3, r3, r2
 800b8fc:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i < 30; i++ ){
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	3301      	adds	r3, #1
 800b902:	60bb      	str	r3, [r7, #8]
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	2b1d      	cmp	r3, #29
 800b908:	ddf1      	ble.n	800b8ee <ibus_checksum+0x12>
	}
	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 800b90a:	4b0b      	ldr	r3, [pc, #44]	@ (800b938 <ibus_checksum+0x5c>)
 800b90c:	7fdb      	ldrb	r3, [r3, #31]
 800b90e:	021b      	lsls	r3, r3, #8
 800b910:	b21a      	sxth	r2, r3
 800b912:	4b09      	ldr	r3, [pc, #36]	@ (800b938 <ibus_checksum+0x5c>)
 800b914:	7f9b      	ldrb	r3, [r3, #30]
 800b916:	b21b      	sxth	r3, r3
 800b918:	4313      	orrs	r3, r2
 800b91a:	b21b      	sxth	r3, r3
 800b91c:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 800b91e:	88fa      	ldrh	r2, [r7, #6]
 800b920:	89fb      	ldrh	r3, [r7, #14]
 800b922:	429a      	cmp	r2, r3
 800b924:	bf0c      	ite	eq
 800b926:	2301      	moveq	r3, #1
 800b928:	2300      	movne	r3, #0
 800b92a:	b2db      	uxtb	r3, r3
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	20007b64 	.word	0x20007b64

0800b93c <ibus_update>:

void ibus_update(uint16_t* ibus_data){
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index ++, bf_index +=2){
 800b944:	2300      	movs	r3, #0
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	2302      	movs	r3, #2
 800b94a:	60bb      	str	r3, [r7, #8]
 800b94c:	e018      	b.n	800b980 <ibus_update+0x44>
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8| uart_rx_buffer[bf_index];
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	3301      	adds	r3, #1
 800b952:	4a10      	ldr	r2, [pc, #64]	@ (800b994 <ibus_update+0x58>)
 800b954:	5cd3      	ldrb	r3, [r2, r3]
 800b956:	021b      	lsls	r3, r3, #8
 800b958:	b21a      	sxth	r2, r3
 800b95a:	490e      	ldr	r1, [pc, #56]	@ (800b994 <ibus_update+0x58>)
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	440b      	add	r3, r1
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	b21b      	sxth	r3, r3
 800b964:	4313      	orrs	r3, r2
 800b966:	b219      	sxth	r1, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	4413      	add	r3, r2
 800b970:	b28a      	uxth	r2, r1
 800b972:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index ++, bf_index +=2){
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3301      	adds	r3, #1
 800b978:	60fb      	str	r3, [r7, #12]
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	3302      	adds	r3, #2
 800b97e:	60bb      	str	r3, [r7, #8]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2b05      	cmp	r3, #5
 800b984:	dde3      	ble.n	800b94e <ibus_update+0x12>
	}
}
 800b986:	bf00      	nop
 800b988:	bf00      	nop
 800b98a:	3714      	adds	r7, #20
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20007b64 	.word	0x20007b64

0800b998 <ibus_soft_failsafe>:

// @note FS-A8S don't have fail soft feature, So we make software fail-soft
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max){
 800b998:	b480      	push	{r7}
 800b99a:	b085      	sub	sp, #20
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag ++;
 800b9a4:	4b18      	ldr	r3, [pc, #96]	@ (800ba08 <ibus_soft_failsafe+0x70>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	b2da      	uxtb	r2, r3
 800b9ac:	4b16      	ldr	r3, [pc, #88]	@ (800ba08 <ibus_soft_failsafe+0x70>)
 800b9ae:	701a      	strb	r2, [r3, #0]
	if(fail_safe_max > fail_safe_flag){
 800b9b0:	4b15      	ldr	r3, [pc, #84]	@ (800ba08 <ibus_soft_failsafe+0x70>)
 800b9b2:	781b      	ldrb	r3, [r3, #0]
 800b9b4:	78fa      	ldrb	r2, [r7, #3]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d820      	bhi.n	800b9fc <ibus_soft_failsafe+0x64>
		return;
	}
	// clear ibus data
	for(int i = 0; i< IBUS_USER_CHANNELS; i++){
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	60fb      	str	r3, [r7, #12]
 800b9be:	e008      	b.n	800b9d2 <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	005b      	lsls	r3, r3, #1
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i< IBUS_USER_CHANNELS; i++){
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	60fb      	str	r3, [r7, #12]
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	2b05      	cmp	r3, #5
 800b9d6:	ddf3      	ble.n	800b9c0 <ibus_soft_failsafe+0x28>
	}
	// clear ibus buffer
	for(int j=0; j < IBUS_LENGTH; j++){
 800b9d8:	2300      	movs	r3, #0
 800b9da:	60bb      	str	r3, [r7, #8]
 800b9dc:	e007      	b.n	800b9ee <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 800b9de:	4a0b      	ldr	r2, [pc, #44]	@ (800ba0c <ibus_soft_failsafe+0x74>)
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	701a      	strb	r2, [r3, #0]
	for(int j=0; j < IBUS_LENGTH; j++){
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	60bb      	str	r3, [r7, #8]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b1f      	cmp	r3, #31
 800b9f2:	ddf4      	ble.n	800b9de <ibus_soft_failsafe+0x46>
	}
	fail_safe_flag = 0;
 800b9f4:	4b04      	ldr	r3, [pc, #16]	@ (800ba08 <ibus_soft_failsafe+0x70>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
	return;
 800b9fa:	e000      	b.n	800b9fe <ibus_soft_failsafe+0x66>
		return;
 800b9fc:	bf00      	nop
}
 800b9fe:	3714      	adds	r7, #20
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	20007b84 	.word	0x20007b84
 800ba0c:	20007b64 	.word	0x20007b64

0800ba10 <ibus_reset_failsafe>:

//@note this function is located in HAL_UART_RxCpltCallback.
void ibus_reset_failsafe(){
 800ba10:	b480      	push	{r7}
 800ba12:	af00      	add	r7, sp, #0
	fail_safe_flag = 0; // flag reset
 800ba14:	4b03      	ldr	r3, [pc, #12]	@ (800ba24 <ibus_reset_failsafe+0x14>)
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]
}
 800ba1a:	bf00      	nop
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	20007b84 	.word	0x20007b84

0800ba28 <MPU_CS>:
#include "dragonll_imu6500.h"

#include "system.h"
#include "sleepus.h"

static void MPU_CS(uint8_t state) {
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	71fb      	strb	r3, [r7, #7]
	if (!state)
 800ba32:	79fb      	ldrb	r3, [r7, #7]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d105      	bne.n	800ba44 <MPU_CS+0x1c>
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, 0);
 800ba38:	2200      	movs	r2, #0
 800ba3a:	2110      	movs	r1, #16
 800ba3c:	4806      	ldr	r0, [pc, #24]	@ (800ba58 <MPU_CS+0x30>)
 800ba3e:	f7f6 f9c1 	bl	8001dc4 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, 1);
}
 800ba42:	e004      	b.n	800ba4e <MPU_CS+0x26>
		HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, 1);
 800ba44:	2201      	movs	r2, #1
 800ba46:	2110      	movs	r1, #16
 800ba48:	4803      	ldr	r0, [pc, #12]	@ (800ba58 <MPU_CS+0x30>)
 800ba4a:	f7f6 f9bb 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	40020000 	.word	0x40020000

0800ba5c <MPU_Wirte_Register>:
static void MPU_Wirte_Register(uint8_t reg, uint8_t value) {
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	460a      	mov	r2, r1
 800ba66:	71fb      	strb	r3, [r7, #7]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = reg;
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(0x80);
 800ba70:	7b3b      	ldrb	r3, [r7, #12]
 800ba72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 800ba7a:	79bb      	ldrb	r3, [r7, #6]
 800ba7c:	737b      	strb	r3, [r7, #13]
	MPU_CS(0);
 800ba7e:	2000      	movs	r0, #0
 800ba80:	f7ff ffd2 	bl	800ba28 <MPU_CS>
	HAL_SPI_Transmit(&hspi1, buf, 2, 100);
 800ba84:	f107 010c 	add.w	r1, r7, #12
 800ba88:	2364      	movs	r3, #100	@ 0x64
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	4804      	ldr	r0, [pc, #16]	@ (800baa0 <MPU_Wirte_Register+0x44>)
 800ba8e:	f7f7 ff16 	bl	80038be <HAL_SPI_Transmit>
	MPU_CS(1);
 800ba92:	2001      	movs	r0, #1
 800ba94:	f7ff ffc8 	bl	800ba28 <MPU_CS>
}
 800ba98:	bf00      	nop
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	20007ec4 	.word	0x20007ec4

0800baa4 <MPU_Read_Register>:
static void MPU_Read_Register(uint8_t reg, uint8_t *buffer, uint8_t len) {
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b084      	sub	sp, #16
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	4603      	mov	r3, r0
 800baac:	6039      	str	r1, [r7, #0]
 800baae:	71fb      	strb	r3, [r7, #7]
 800bab0:	4613      	mov	r3, r2
 800bab2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 800bab4:	79fb      	ldrb	r3, [r7, #7]
 800bab6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800baba:	b2db      	uxtb	r3, r3
 800babc:	73fb      	strb	r3, [r7, #15]
	MPU_CS(0);
 800babe:	2000      	movs	r0, #0
 800bac0:	f7ff ffb2 	bl	800ba28 <MPU_CS>
	HAL_SPI_Transmit(&hspi1, &buf, 1, 100);
 800bac4:	f107 010f 	add.w	r1, r7, #15
 800bac8:	2364      	movs	r3, #100	@ 0x64
 800baca:	2201      	movs	r2, #1
 800bacc:	4808      	ldr	r0, [pc, #32]	@ (800baf0 <MPU_Read_Register+0x4c>)
 800bace:	f7f7 fef6 	bl	80038be <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buffer, len, 100);
 800bad2:	79bb      	ldrb	r3, [r7, #6]
 800bad4:	b29a      	uxth	r2, r3
 800bad6:	2364      	movs	r3, #100	@ 0x64
 800bad8:	6839      	ldr	r1, [r7, #0]
 800bada:	4805      	ldr	r0, [pc, #20]	@ (800baf0 <MPU_Read_Register+0x4c>)
 800badc:	f7f8 f833 	bl	8003b46 <HAL_SPI_Receive>
	MPU_CS(1);
 800bae0:	2001      	movs	r0, #1
 800bae2:	f7ff ffa1 	bl	800ba28 <MPU_CS>
}
 800bae6:	bf00      	nop
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20007ec4 	.word	0x20007ec4

0800baf4 <MPU6500_Init>:
uint8_t MPU6500_Init(MPU6500_IMU *imu) {
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]

	imu->acc[0] = 0.0f;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	801a      	strh	r2, [r3, #0]
	imu->acc[1] = 0.0f;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	805a      	strh	r2, [r3, #2]
	imu->acc[2] = 0.0f;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	809a      	strh	r2, [r3, #4]
	imu->gyr[0] = 0.0f;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	80da      	strh	r2, [r3, #6]
	imu->gyr[1] = 0.0f;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	811a      	strh	r2, [r3, #8]
	imu->gyr[2] = 0.0f;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	815a      	strh	r2, [r3, #10]

//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800bb20:	f242 7010 	movw	r0, #10000	@ 0x2710
 800bb24:	f00a f9a9 	bl	8015e7a <sleepus>
	//use internal 100Mhz
	uint8_t imuID;
	MPU_Read_Register(WHO_AM_I_ADDR, &imuID, 1);
 800bb28:	f107 0309 	add.w	r3, r7, #9
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	4619      	mov	r1, r3
 800bb30:	2075      	movs	r0, #117	@ 0x75
 800bb32:	f7ff ffb7 	bl	800baa4 <MPU_Read_Register>
	if (imuID != 0x70)
 800bb36:	7a7b      	ldrb	r3, [r7, #9]
 800bb38:	2b70      	cmp	r3, #112	@ 0x70
 800bb3a:	d001      	beq.n	800bb40 <MPU6500_Init+0x4c>
		return 0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e03e      	b.n	800bbbe <MPU6500_Init+0xca>

//	HAL_Delay(50);
//	vTaskDelay(50);
	// 1 % 0.05 = 20
	sleepus(50000);
 800bb40:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800bb44:	f00a f999 	bl	8015e7a <sleepus>
	// use 20Mhz internal
	uint8_t imuMode = 0x00;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	73fb      	strb	r3, [r7, #15]
	MPU_Wirte_Register(PWR_MGMT_1, imuMode);
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	4619      	mov	r1, r3
 800bb50:	206b      	movs	r0, #107	@ 0x6b
 800bb52:	f7ff ff83 	bl	800ba5c <MPU_Wirte_Register>

	//Configure sample rate to 1KHz
	uint8_t sampleRateConfig = 0x00;
 800bb56:	2300      	movs	r3, #0
 800bb58:	73bb      	strb	r3, [r7, #14]
	MPU_Wirte_Register(SMPLRT_DIV_REG, sampleRateConfig);
 800bb5a:	7bbb      	ldrb	r3, [r7, #14]
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	2019      	movs	r0, #25
 800bb60:	f7ff ff7c 	bl	800ba5c <MPU_Wirte_Register>
	/* GYRO Configure */

	// Configure digital low-pass filter bandwidth to 184Hz with 1KHz
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800bb64:	f242 7010 	movw	r0, #10000	@ 0x2710
 800bb68:	f00a f987 	bl	8015e7a <sleepus>
	uint8_t gyroDLPFConfig = 0x01;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	737b      	strb	r3, [r7, #13]
	MPU_Wirte_Register(CONFIG_REG, gyroDLPFConfig);
 800bb70:	7b7b      	ldrb	r3, [r7, #13]
 800bb72:	4619      	mov	r1, r3
 800bb74:	201a      	movs	r0, #26
 800bb76:	f7ff ff71 	bl	800ba5c <MPU_Wirte_Register>

	// Configure GYRO range to +-500dps
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800bb7a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800bb7e:	f00a f97c 	bl	8015e7a <sleepus>
	uint8_t gyroRange = 0x0B;
 800bb82:	230b      	movs	r3, #11
 800bb84:	733b      	strb	r3, [r7, #12]
	MPU_Wirte_Register(GYRO_CONFIG_REG, gyroRange);
 800bb86:	7b3b      	ldrb	r3, [r7, #12]
 800bb88:	4619      	mov	r1, r3
 800bb8a:	201b      	movs	r0, #27
 800bb8c:	f7ff ff66 	bl	800ba5c <MPU_Wirte_Register>
	/* Accel configure */

	// Configure digital low-pass filter bandwidth to 184Hz with 1KHz
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800bb90:	f242 7010 	movw	r0, #10000	@ 0x2710
 800bb94:	f00a f971 	bl	8015e7a <sleepus>
	uint8_t accelDLPFConfig = 0x01;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	72fb      	strb	r3, [r7, #11]
	MPU_Wirte_Register(ACCEL_CONFIG_2_REG, accelDLPFConfig);
 800bb9c:	7afb      	ldrb	r3, [r7, #11]
 800bb9e:	4619      	mov	r1, r3
 800bba0:	201d      	movs	r0, #29
 800bba2:	f7ff ff5b 	bl	800ba5c <MPU_Wirte_Register>

	// Configure ACCEL range to +-8g
//	HAL_Delay(10);
//	vTaskDelay(10);
	sleepus(10000);
 800bba6:	f242 7010 	movw	r0, #10000	@ 0x2710
 800bbaa:	f00a f966 	bl	8015e7a <sleepus>
	uint8_t accelRange = 0x10;
 800bbae:	2310      	movs	r3, #16
 800bbb0:	72bb      	strb	r3, [r7, #10]
	MPU_Wirte_Register(ACCEL_CONFIG_REG, accelRange);
 800bbb2:	7abb      	ldrb	r3, [r7, #10]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	201c      	movs	r0, #28
 800bbb8:	f7ff ff50 	bl	800ba5c <MPU_Wirte_Register>

	return 1;
 800bbbc:	2301      	movs	r3, #1
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <MPU6500_ReadAcc>:

void MPU6500_ReadAcc(MPU6500_IMU *imu) {
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b086      	sub	sp, #24
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
	uint8_t rxBuf[6];

	MPU_Read_Register(ACCEL_DATA_REG, rxBuf, 6);
 800bbce:	f107 030c 	add.w	r3, r7, #12
 800bbd2:	2206      	movs	r2, #6
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	203b      	movs	r0, #59	@ 0x3b
 800bbd8:	f7ff ff64 	bl	800baa4 <MPU_Read_Register>

	int16_t accelX = rxBuf[0] << 8 | rxBuf[1];
 800bbdc:	7b3b      	ldrb	r3, [r7, #12]
 800bbde:	021b      	lsls	r3, r3, #8
 800bbe0:	b21a      	sxth	r2, r3
 800bbe2:	7b7b      	ldrb	r3, [r7, #13]
 800bbe4:	b21b      	sxth	r3, r3
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	82fb      	strh	r3, [r7, #22]
	int16_t accelY = rxBuf[2] << 8 | rxBuf[3];
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
 800bbec:	021b      	lsls	r3, r3, #8
 800bbee:	b21a      	sxth	r2, r3
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	b21b      	sxth	r3, r3
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	82bb      	strh	r3, [r7, #20]
	int16_t accelZ = rxBuf[4] << 8 | rxBuf[5];
 800bbf8:	7c3b      	ldrb	r3, [r7, #16]
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	b21a      	sxth	r2, r3
 800bbfe:	7c7b      	ldrb	r3, [r7, #17]
 800bc00:	b21b      	sxth	r3, r3
 800bc02:	4313      	orrs	r3, r2
 800bc04:	827b      	strh	r3, [r7, #18]

	// +-8g
	imu->acc[0] = accelX;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	8afa      	ldrh	r2, [r7, #22]
 800bc0a:	801a      	strh	r2, [r3, #0]
	imu->acc[1] = accelY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	8aba      	ldrh	r2, [r7, #20]
 800bc10:	805a      	strh	r2, [r3, #2]
	imu->acc[2] = accelZ;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	8a7a      	ldrh	r2, [r7, #18]
 800bc16:	809a      	strh	r2, [r3, #4]



}
 800bc18:	bf00      	nop
 800bc1a:	3718      	adds	r7, #24
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <MPU6500_ReadGyr>:
void MPU6500_ReadGyr(MPU6500_IMU *imu) {
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b086      	sub	sp, #24
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]

	uint8_t rxBuf[6];

	MPU_Read_Register(GYRO_DATA_REG, rxBuf, 6);
 800bc28:	f107 030c 	add.w	r3, r7, #12
 800bc2c:	2206      	movs	r2, #6
 800bc2e:	4619      	mov	r1, r3
 800bc30:	2043      	movs	r0, #67	@ 0x43
 800bc32:	f7ff ff37 	bl	800baa4 <MPU_Read_Register>

	int16_t gyroX = rxBuf[0] << 8 | rxBuf[1];
 800bc36:	7b3b      	ldrb	r3, [r7, #12]
 800bc38:	021b      	lsls	r3, r3, #8
 800bc3a:	b21a      	sxth	r2, r3
 800bc3c:	7b7b      	ldrb	r3, [r7, #13]
 800bc3e:	b21b      	sxth	r3, r3
 800bc40:	4313      	orrs	r3, r2
 800bc42:	82fb      	strh	r3, [r7, #22]
	int16_t gyroY = rxBuf[2] << 8 | rxBuf[3];
 800bc44:	7bbb      	ldrb	r3, [r7, #14]
 800bc46:	021b      	lsls	r3, r3, #8
 800bc48:	b21a      	sxth	r2, r3
 800bc4a:	7bfb      	ldrb	r3, [r7, #15]
 800bc4c:	b21b      	sxth	r3, r3
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	82bb      	strh	r3, [r7, #20]
	int16_t gyroZ = rxBuf[4] << 8 | rxBuf[5];
 800bc52:	7c3b      	ldrb	r3, [r7, #16]
 800bc54:	021b      	lsls	r3, r3, #8
 800bc56:	b21a      	sxth	r2, r3
 800bc58:	7c7b      	ldrb	r3, [r7, #17]
 800bc5a:	b21b      	sxth	r3, r3
 800bc5c:	4313      	orrs	r3, r2
 800bc5e:	827b      	strh	r3, [r7, #18]

	imu->gyr[0] = gyroX;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	8afa      	ldrh	r2, [r7, #22]
 800bc64:	80da      	strh	r2, [r3, #6]
	imu->gyr[1] = gyroY;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	8aba      	ldrh	r2, [r7, #20]
 800bc6a:	811a      	strh	r2, [r3, #8]
	imu->gyr[2] = gyroZ;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	8a7a      	ldrh	r2, [r7, #18]
 800bc70:	815a      	strh	r2, [r3, #10]

}
 800bc72:	bf00      	nop
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <hal_dshot_init>:
static void dshot_enable_dma_request();

/*
 * Functions
 */
void hal_dshot_init(dshot_type dshot_type){
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	4603      	mov	r3, r0
 800bc82:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800bc84:	79fb      	ldrb	r3, [r7, #7]
 800bc86:	4618      	mov	r0, r3
 800bc88:	f000 f834 	bl	800bcf4 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800bc8c:	f000 f8d2 	bl	800be34 <dshot_put_tc_callback_function>
	// tc tranfer complet = disable dma( if chang to circular mode maybe modify this )
	dshot_start_pwm();
 800bc90:	f000 f8ec 	bl	800be6c <dshot_start_pwm>
}
 800bc94:	bf00      	nop
 800bc96:	3708      	adds	r7, #8
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <hal_dshot_write>:

void hal_dshot_write(uint16_t* motor_value){
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 f95d 	bl	800bf64 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800bcaa:	f000 f987 	bl	800bfbc <dshot_dma_start>
	dshot_enable_dma_request();
 800bcae:	f000 f9bb 	bl	800c028 <dshot_enable_dma_request>
//	step_after = 1;
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <dshot_choose_type>:
/*
 * Static Functions
 */

static uint32_t dshot_choose_type(dshot_type dshot_type)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b083      	sub	sp, #12
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 800bcc6:	79fb      	ldrb	r3, [r7, #7]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d003      	beq.n	800bcd4 <dshot_choose_type+0x18>
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d103      	bne.n	800bcd8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return dshot600_hz;
 800bcd0:	4b05      	ldr	r3, [pc, #20]	@ (800bce8 <dshot_choose_type+0x2c>)
 800bcd2:	e002      	b.n	800bcda <dshot_choose_type+0x1e>

		case(DSHOT300):
				return dshot300_hz;
 800bcd4:	4b05      	ldr	r3, [pc, #20]	@ (800bcec <dshot_choose_type+0x30>)
 800bcd6:	e000      	b.n	800bcda <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return dshot150_hz;
 800bcd8:	4b05      	ldr	r3, [pc, #20]	@ (800bcf0 <dshot_choose_type+0x34>)
	}
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	00b71b00 	.word	0x00b71b00
 800bcec:	005b8d80 	.word	0x005b8d80
 800bcf0:	002dc6c0 	.word	0x002dc6c0

0800bcf4 <dshot_set_timer>:


static void dshot_set_timer(dshot_type dshot_type)
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	ed2d 8b02 	vpush	{d8}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	4603      	mov	r3, r0
 800bd00:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 800bd02:	4b27      	ldr	r3, [pc, #156]	@ (800bda0 <dshot_set_timer+0xac>)
 800bd04:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	ee07 3a90 	vmov	s15, r3
 800bd0c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800bd10:	79fb      	ldrb	r3, [r7, #7]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff ffd2 	bl	800bcbc <dshot_choose_type>
 800bd18:	ee07 0a90 	vmov	s15, r0
 800bd1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bd20:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800bd24:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800bda4 <dshot_set_timer+0xb0>
 800bd28:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd2c:	eeb0 0a67 	vmov.f32	s0, s15
 800bd30:	f00f fc4a 	bl	801b5c8 <lrintf>
 800bd34:	4603      	mov	r3, r0
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	817b      	strh	r3, [r7, #10]
	//if we choose dshot600 = 12 Mhz => time clock / 12Mhzh -1 = 6
	// dshot prescalar = 6 and atore load = 20
	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 800bd3c:	4b1a      	ldr	r3, [pc, #104]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	897a      	ldrh	r2, [r7, #10]
 800bd42:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 800bd44:	4b18      	ldr	r3, [pc, #96]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	2214      	movs	r2, #20
 800bd4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bd4c:	4b16      	ldr	r3, [pc, #88]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd4e:	2214      	movs	r2, #20
 800bd50:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800bd52:	4b15      	ldr	r3, [pc, #84]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	897a      	ldrh	r2, [r7, #10]
 800bd58:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 800bd5a:	4b13      	ldr	r3, [pc, #76]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2214      	movs	r2, #20
 800bd60:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bd62:	4b11      	ldr	r3, [pc, #68]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd64:	2214      	movs	r2, #20
 800bd66:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 800bd68:	4b0f      	ldr	r3, [pc, #60]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	897a      	ldrh	r2, [r7, #10]
 800bd6e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 800bd70:	4b0d      	ldr	r3, [pc, #52]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2214      	movs	r2, #20
 800bd76:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bd78:	4b0b      	ldr	r3, [pc, #44]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd7a:	2214      	movs	r2, #20
 800bd7c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800bd7e:	4b0a      	ldr	r3, [pc, #40]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	897a      	ldrh	r2, [r7, #10]
 800bd84:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800bd86:	4b08      	ldr	r3, [pc, #32]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2214      	movs	r2, #20
 800bd8c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800bd8e:	4b06      	ldr	r3, [pc, #24]	@ (800bda8 <dshot_set_timer+0xb4>)
 800bd90:	2214      	movs	r2, #20
 800bd92:	60da      	str	r2, [r3, #12]
}
 800bd94:	bf00      	nop
 800bd96:	3710      	adds	r7, #16
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	ecbd 8b02 	vpop	{d8}
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	0501bd00 	.word	0x0501bd00
 800bda4:	3c23d70a 	.word	0x3c23d70a
 800bda8:	20007f1c 	.word	0x20007f1c

0800bdac <dshot_dma_tc_callback>:


static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdb8:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d108      	bne.n	800bdd6 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68da      	ldr	r2, [r3, #12]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800bdd2:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 800bdd4:	e028      	b.n	800be28 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d108      	bne.n	800bdf2 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68da      	ldr	r2, [r3, #12]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdee:	60da      	str	r2, [r3, #12]
}
 800bdf0:	e01a      	b.n	800be28 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	429a      	cmp	r2, r3
 800bdfa:	d108      	bne.n	800be0e <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	68da      	ldr	r2, [r3, #12]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800be0a:	60da      	str	r2, [r3, #12]
}
 800be0c:	e00c      	b.n	800be28 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	429a      	cmp	r2, r3
 800be16:	d107      	bne.n	800be28 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800be26:	60da      	str	r2, [r3, #12]
}
 800be28:	bf00      	nop
 800be2a:	3714      	adds	r7, #20
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 800be34:	b480      	push	{r7}
 800be36:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 800be38:	4b0a      	ldr	r3, [pc, #40]	@ (800be64 <dshot_put_tc_callback_function+0x30>)
 800be3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be3c:	4a0a      	ldr	r2, [pc, #40]	@ (800be68 <dshot_put_tc_callback_function+0x34>)
 800be3e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800be40:	4b08      	ldr	r3, [pc, #32]	@ (800be64 <dshot_put_tc_callback_function+0x30>)
 800be42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be44:	4a08      	ldr	r2, [pc, #32]	@ (800be68 <dshot_put_tc_callback_function+0x34>)
 800be46:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800be48:	4b06      	ldr	r3, [pc, #24]	@ (800be64 <dshot_put_tc_callback_function+0x30>)
 800be4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4c:	4a06      	ldr	r2, [pc, #24]	@ (800be68 <dshot_put_tc_callback_function+0x34>)
 800be4e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 800be50:	4b04      	ldr	r3, [pc, #16]	@ (800be64 <dshot_put_tc_callback_function+0x30>)
 800be52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be54:	4a04      	ldr	r2, [pc, #16]	@ (800be68 <dshot_put_tc_callback_function+0x34>)
 800be56:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800be58:	bf00      	nop
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	20007f1c 	.word	0x20007f1c
 800be68:	0800bdad 	.word	0x0800bdad

0800be6c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 800be70:	2100      	movs	r1, #0
 800be72:	4808      	ldr	r0, [pc, #32]	@ (800be94 <dshot_start_pwm+0x28>)
 800be74:	f7f8 fc8e 	bl	8004794 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 800be78:	2104      	movs	r1, #4
 800be7a:	4806      	ldr	r0, [pc, #24]	@ (800be94 <dshot_start_pwm+0x28>)
 800be7c:	f7f8 fc8a 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 800be80:	2108      	movs	r1, #8
 800be82:	4804      	ldr	r0, [pc, #16]	@ (800be94 <dshot_start_pwm+0x28>)
 800be84:	f7f8 fc86 	bl	8004794 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 800be88:	210c      	movs	r1, #12
 800be8a:	4802      	ldr	r0, [pc, #8]	@ (800be94 <dshot_start_pwm+0x28>)
 800be8c:	f7f8 fc82 	bl	8004794 <HAL_TIM_PWM_Start>
}
 800be90:	bf00      	nop
 800be92:	bd80      	pop	{r7, pc}
 800be94:	20007f1c 	.word	0x20007f1c

0800be98 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800be98:	b480      	push	{r7}
 800be9a:	b087      	sub	sp, #28
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 800bea2:	2300      	movs	r3, #0
 800bea4:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800bea6:	88fb      	ldrh	r3, [r7, #6]
 800bea8:	005b      	lsls	r3, r3, #1
 800beaa:	b21a      	sxth	r2, r3
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	b21b      	sxth	r3, r3
 800beb0:	4313      	orrs	r3, r2
 800beb2:	b21b      	sxth	r3, r3
 800beb4:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 800beb6:	2300      	movs	r3, #0
 800beb8:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet; // if value = 50 => packet = 100
 800beba:	893b      	ldrh	r3, [r7, #8]
 800bebc:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 800bebe:	2300      	movs	r3, #0
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	e009      	b.n	800bed8 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 800bec4:	697a      	ldr	r2, [r7, #20]
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	4053      	eors	r3, r2
 800beca:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	091b      	lsrs	r3, r3, #4
 800bed0:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3301      	adds	r3, #1
 800bed6:	60fb      	str	r3, [r7, #12]
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2b02      	cmp	r3, #2
 800bedc:	ddf2      	ble.n	800bec4 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;// 0 1111
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	f003 030f 	and.w	r3, r3, #15
 800bee4:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800bee6:	893b      	ldrh	r3, [r7, #8]
 800bee8:	011b      	lsls	r3, r3, #4
 800beea:	b29a      	uxth	r2, r3
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	b29b      	uxth	r3, r3
 800bef0:	4313      	orrs	r3, r2
 800bef2:	813b      	strh	r3, [r7, #8]

	return packet;
 800bef4:	893b      	ldrh	r3, [r7, #8]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	371c      	adds	r7, #28
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr

0800bf02 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 800bf02:	b580      	push	{r7, lr}
 800bf04:	b084      	sub	sp, #16
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	460b      	mov	r3, r1
 800bf0c:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 800bf0e:	887b      	ldrh	r3, [r7, #2]
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7ff ffc1 	bl	800be98 <dshot_prepare_packet>
 800bf16:	4603      	mov	r3, r0
 800bf18:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	60bb      	str	r3, [r7, #8]
 800bf1e:	e011      	b.n	800bf44 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 800bf20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	da01      	bge.n	800bf2c <dshot_prepare_dmabuffer+0x2a>
 800bf28:	220e      	movs	r2, #14
 800bf2a:	e000      	b.n	800bf2e <dshot_prepare_dmabuffer+0x2c>
 800bf2c:	2207      	movs	r2, #7
 800bf2e:	68bb      	ldr	r3, [r7, #8]
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	6879      	ldr	r1, [r7, #4]
 800bf34:	440b      	add	r3, r1
 800bf36:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 800bf38:	89fb      	ldrh	r3, [r7, #14]
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	3301      	adds	r3, #1
 800bf42:	60bb      	str	r3, [r7, #8]
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	2b0f      	cmp	r3, #15
 800bf48:	ddea      	ble.n	800bf20 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	3340      	adds	r3, #64	@ 0x40
 800bf4e:	2200      	movs	r2, #0
 800bf50:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	3344      	adds	r3, #68	@ 0x44
 800bf56:	2200      	movs	r2, #0
 800bf58:	601a      	str	r2, [r3, #0]
}
 800bf5a:	bf00      	nop
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}
	...

0800bf64 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	4619      	mov	r1, r3
 800bf72:	480e      	ldr	r0, [pc, #56]	@ (800bfac <dshot_prepare_dmabuffer_all+0x48>)
 800bf74:	f7ff ffc5 	bl	800bf02 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	3302      	adds	r3, #2
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	4619      	mov	r1, r3
 800bf80:	480b      	ldr	r0, [pc, #44]	@ (800bfb0 <dshot_prepare_dmabuffer_all+0x4c>)
 800bf82:	f7ff ffbe 	bl	800bf02 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	881b      	ldrh	r3, [r3, #0]
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	4809      	ldr	r0, [pc, #36]	@ (800bfb4 <dshot_prepare_dmabuffer_all+0x50>)
 800bf90:	f7ff ffb7 	bl	800bf02 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	3306      	adds	r3, #6
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	4619      	mov	r1, r3
 800bf9c:	4806      	ldr	r0, [pc, #24]	@ (800bfb8 <dshot_prepare_dmabuffer_all+0x54>)
 800bf9e:	f7ff ffb0 	bl	800bf02 <dshot_prepare_dmabuffer>
}
 800bfa2:	bf00      	nop
 800bfa4:	3708      	adds	r7, #8
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}
 800bfaa:	bf00      	nop
 800bfac:	20007b88 	.word	0x20007b88
 800bfb0:	20007bd0 	.word	0x20007bd0
 800bfb4:	20007c18 	.word	0x20007c18
 800bfb8:	20007c60 	.word	0x20007c60

0800bfbc <dshot_dma_start>:

static void dshot_dma_start()
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 800bfc0:	4b14      	ldr	r3, [pc, #80]	@ (800c014 <dshot_dma_start+0x58>)
 800bfc2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800bfc4:	4914      	ldr	r1, [pc, #80]	@ (800c018 <dshot_dma_start+0x5c>)
 800bfc6:	4b13      	ldr	r3, [pc, #76]	@ (800c014 <dshot_dma_start+0x58>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3334      	adds	r3, #52	@ 0x34
 800bfcc:	461a      	mov	r2, r3
 800bfce:	2312      	movs	r3, #18
 800bfd0:	f7f5 fa78 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 800bfd4:	4b0f      	ldr	r3, [pc, #60]	@ (800c014 <dshot_dma_start+0x58>)
 800bfd6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800bfd8:	4910      	ldr	r1, [pc, #64]	@ (800c01c <dshot_dma_start+0x60>)
 800bfda:	4b0e      	ldr	r3, [pc, #56]	@ (800c014 <dshot_dma_start+0x58>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3338      	adds	r3, #56	@ 0x38
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	2312      	movs	r3, #18
 800bfe4:	f7f5 fa6e 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	@ (800c014 <dshot_dma_start+0x58>)
 800bfea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800bfec:	490c      	ldr	r1, [pc, #48]	@ (800c020 <dshot_dma_start+0x64>)
 800bfee:	4b09      	ldr	r3, [pc, #36]	@ (800c014 <dshot_dma_start+0x58>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	333c      	adds	r3, #60	@ 0x3c
 800bff4:	461a      	mov	r2, r3
 800bff6:	2312      	movs	r3, #18
 800bff8:	f7f5 fa64 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 800bffc:	4b05      	ldr	r3, [pc, #20]	@ (800c014 <dshot_dma_start+0x58>)
 800bffe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c000:	4908      	ldr	r1, [pc, #32]	@ (800c024 <dshot_dma_start+0x68>)
 800c002:	4b04      	ldr	r3, [pc, #16]	@ (800c014 <dshot_dma_start+0x58>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3340      	adds	r3, #64	@ 0x40
 800c008:	461a      	mov	r2, r3
 800c00a:	2312      	movs	r3, #18
 800c00c:	f7f5 fa5a 	bl	80014c4 <HAL_DMA_Start_IT>
}
 800c010:	bf00      	nop
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20007f1c 	.word	0x20007f1c
 800c018:	20007b88 	.word	0x20007b88
 800c01c:	20007bd0 	.word	0x20007bd0
 800c020:	20007c18 	.word	0x20007c18
 800c024:	20007c60 	.word	0x20007c60

0800c028 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 800c028:	b480      	push	{r7}
 800c02a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC1);
 800c02c:	4b12      	ldr	r3, [pc, #72]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	68da      	ldr	r2, [r3, #12]
 800c032:	4b11      	ldr	r3, [pc, #68]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c03a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC2);
 800c03c:	4b0e      	ldr	r3, [pc, #56]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68da      	ldr	r2, [r3, #12]
 800c042:	4b0d      	ldr	r3, [pc, #52]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c04a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC3);
 800c04c:	4b0a      	ldr	r3, [pc, #40]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	68da      	ldr	r2, [r3, #12]
 800c052:	4b09      	ldr	r3, [pc, #36]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c05a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC4);
 800c05c:	4b06      	ldr	r3, [pc, #24]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	68da      	ldr	r2, [r3, #12]
 800c062:	4b05      	ldr	r3, [pc, #20]	@ (800c078 <dshot_enable_dma_request+0x50>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c06a:	60da      	str	r2, [r3, #12]
}
 800c06c:	bf00      	nop
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr
 800c076:	bf00      	nop
 800c078:	20007f1c 	.word	0x20007f1c

0800c07c <GPIO_Init>:
 *      Author: AI FARM
 */

#include "gpio_drv.h"

void GPIO_Init(void){
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b088      	sub	sp, #32
 800c080:	af00      	add	r7, sp, #0
	  /* GPIO Ports Clock Enable */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	2200      	movs	r2, #0
 800c088:	601a      	str	r2, [r3, #0]
 800c08a:	605a      	str	r2, [r3, #4]
 800c08c:	609a      	str	r2, [r3, #8]
 800c08e:	60da      	str	r2, [r3, #12]
 800c090:	611a      	str	r2, [r3, #16]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c092:	2300      	movs	r3, #0
 800c094:	60bb      	str	r3, [r7, #8]
 800c096:	4b25      	ldr	r3, [pc, #148]	@ (800c12c <GPIO_Init+0xb0>)
 800c098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c09a:	4a24      	ldr	r2, [pc, #144]	@ (800c12c <GPIO_Init+0xb0>)
 800c09c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0a2:	4b22      	ldr	r3, [pc, #136]	@ (800c12c <GPIO_Init+0xb0>)
 800c0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0aa:	60bb      	str	r3, [r7, #8]
 800c0ac:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	607b      	str	r3, [r7, #4]
 800c0b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c12c <GPIO_Init+0xb0>)
 800c0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0b6:	4a1d      	ldr	r2, [pc, #116]	@ (800c12c <GPIO_Init+0xb0>)
 800c0b8:	f043 0304 	orr.w	r3, r3, #4
 800c0bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0be:	4b1b      	ldr	r3, [pc, #108]	@ (800c12c <GPIO_Init+0xb0>)
 800c0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c2:	f003 0304 	and.w	r3, r3, #4
 800c0c6:	607b      	str	r3, [r7, #4]
 800c0c8:	687b      	ldr	r3, [r7, #4]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	603b      	str	r3, [r7, #0]
 800c0ce:	4b17      	ldr	r3, [pc, #92]	@ (800c12c <GPIO_Init+0xb0>)
 800c0d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d2:	4a16      	ldr	r2, [pc, #88]	@ (800c12c <GPIO_Init+0xb0>)
 800c0d4:	f043 0301 	orr.w	r3, r3, #1
 800c0d8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c0da:	4b14      	ldr	r3, [pc, #80]	@ (800c12c <GPIO_Init+0xb0>)
 800c0dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	603b      	str	r3, [r7, #0]
 800c0e4:	683b      	ldr	r3, [r7, #0]

	  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	2110      	movs	r1, #16
 800c0ea:	4811      	ldr	r0, [pc, #68]	@ (800c130 <GPIO_Init+0xb4>)
 800c0ec:	f7f5 fe6a 	bl	8001dc4 <HAL_GPIO_WritePin>
	  /*Configure GPIO pin : GYRO_CS_Pin */
	  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 800c0f0:	2310      	movs	r3, #16
 800c0f2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c0f4:	2301      	movs	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 800c100:	f107 030c 	add.w	r3, r7, #12
 800c104:	4619      	mov	r1, r3
 800c106:	480a      	ldr	r0, [pc, #40]	@ (800c130 <GPIO_Init+0xb4>)
 800c108:	f7f5 fcc0 	bl	8001a8c <HAL_GPIO_Init>

	  /*Configure GPIO pin : GYRO_INT_Pin */
	  GPIO_InitStruct.Pin = GYRO_INT_Pin;
 800c10c:	2310      	movs	r3, #16
 800c10e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c110:	2300      	movs	r3, #0
 800c112:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c114:	2300      	movs	r3, #0
 800c116:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GYRO_INT_GPIO_Port, &GPIO_InitStruct);
 800c118:	f107 030c 	add.w	r3, r7, #12
 800c11c:	4619      	mov	r1, r3
 800c11e:	4805      	ldr	r0, [pc, #20]	@ (800c134 <GPIO_Init+0xb8>)
 800c120:	f7f5 fcb4 	bl	8001a8c <HAL_GPIO_Init>



}
 800c124:	bf00      	nop
 800c126:	3720      	adds	r7, #32
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	40023800 	.word	0x40023800
 800c130:	40020000 	.word	0x40020000
 800c134:	40020800 	.word	0x40020800

0800c138 <I2C2_Init>:
		Error_Handler();
	}

}
void I2C2_Init(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800c13c:	4b12      	ldr	r3, [pc, #72]	@ (800c188 <I2C2_Init+0x50>)
 800c13e:	4a13      	ldr	r2, [pc, #76]	@ (800c18c <I2C2_Init+0x54>)
 800c140:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800c142:	4b11      	ldr	r3, [pc, #68]	@ (800c188 <I2C2_Init+0x50>)
 800c144:	4a12      	ldr	r2, [pc, #72]	@ (800c190 <I2C2_Init+0x58>)
 800c146:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800c148:	4b0f      	ldr	r3, [pc, #60]	@ (800c188 <I2C2_Init+0x50>)
 800c14a:	2200      	movs	r2, #0
 800c14c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800c14e:	4b0e      	ldr	r3, [pc, #56]	@ (800c188 <I2C2_Init+0x50>)
 800c150:	2200      	movs	r2, #0
 800c152:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800c154:	4b0c      	ldr	r3, [pc, #48]	@ (800c188 <I2C2_Init+0x50>)
 800c156:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800c15a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <I2C2_Init+0x50>)
 800c15e:	2200      	movs	r2, #0
 800c160:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800c162:	4b09      	ldr	r3, [pc, #36]	@ (800c188 <I2C2_Init+0x50>)
 800c164:	2200      	movs	r2, #0
 800c166:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800c168:	4b07      	ldr	r3, [pc, #28]	@ (800c188 <I2C2_Init+0x50>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800c16e:	4b06      	ldr	r3, [pc, #24]	@ (800c188 <I2C2_Init+0x50>)
 800c170:	2200      	movs	r2, #0
 800c172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800c174:	4804      	ldr	r0, [pc, #16]	@ (800c188 <I2C2_Init+0x50>)
 800c176:	f7f5 fe59 	bl	8001e2c <HAL_I2C_Init>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d001      	beq.n	800c184 <I2C2_Init+0x4c>
  {
    Error_Handler();
 800c180:	f7fd f816 	bl	80091b0 <Error_Handler>
  }

}
 800c184:	bf00      	nop
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20007cfc 	.word	0x20007cfc
 800c18c:	40005800 	.word	0x40005800
 800c190:	00061a80 	.word	0x00061a80

0800c194 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b08c      	sub	sp, #48	@ 0x30
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c19c:	f107 031c 	add.w	r3, r7, #28
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	605a      	str	r2, [r3, #4]
 800c1a6:	609a      	str	r2, [r3, #8]
 800c1a8:	60da      	str	r2, [r3, #12]
 800c1aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a32      	ldr	r2, [pc, #200]	@ (800c27c <HAL_I2C_MspInit+0xe8>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d12b      	bne.n	800c20e <HAL_I2C_MspInit+0x7a>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	61bb      	str	r3, [r7, #24]
 800c1ba:	4b31      	ldr	r3, [pc, #196]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c1bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1be:	4a30      	ldr	r2, [pc, #192]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c1c0:	f043 0302 	orr.w	r3, r3, #2
 800c1c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800c1c6:	4b2e      	ldr	r3, [pc, #184]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c1c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ca:	f003 0302 	and.w	r3, r3, #2
 800c1ce:	61bb      	str	r3, [r7, #24]
 800c1d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c1d2:	23c0      	movs	r3, #192	@ 0xc0
 800c1d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c1d6:	2312      	movs	r3, #18
 800c1d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c1e2:	2304      	movs	r3, #4
 800c1e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c1e6:	f107 031c 	add.w	r3, r7, #28
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	4825      	ldr	r0, [pc, #148]	@ (800c284 <HAL_I2C_MspInit+0xf0>)
 800c1ee:	f7f5 fc4d 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	617b      	str	r3, [r7, #20]
 800c1f6:	4b22      	ldr	r3, [pc, #136]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c1f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1fa:	4a21      	ldr	r2, [pc, #132]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c1fc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c200:	6413      	str	r3, [r2, #64]	@ 0x40
 800c202:	4b1f      	ldr	r3, [pc, #124]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c206:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c20a:	617b      	str	r3, [r7, #20]
 800c20c:	697b      	ldr	r3, [r7, #20]

  }
  if(i2cHandle->Instance==I2C2)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a1d      	ldr	r2, [pc, #116]	@ (800c288 <HAL_I2C_MspInit+0xf4>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d12c      	bne.n	800c272 <HAL_I2C_MspInit+0xde>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c218:	2300      	movs	r3, #0
 800c21a:	613b      	str	r3, [r7, #16]
 800c21c:	4b18      	ldr	r3, [pc, #96]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c21e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c220:	4a17      	ldr	r2, [pc, #92]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c222:	f043 0302 	orr.w	r3, r3, #2
 800c226:	6313      	str	r3, [r2, #48]	@ 0x30
 800c228:	4b15      	ldr	r3, [pc, #84]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c22a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c22c:	f003 0302 	and.w	r3, r3, #2
 800c230:	613b      	str	r3, [r7, #16]
 800c232:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c234:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800c238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c23a:	2312      	movs	r3, #18
 800c23c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c23e:	2300      	movs	r3, #0
 800c240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c242:	2303      	movs	r3, #3
 800c244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c246:	2304      	movs	r3, #4
 800c248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c24a:	f107 031c 	add.w	r3, r7, #28
 800c24e:	4619      	mov	r1, r3
 800c250:	480c      	ldr	r0, [pc, #48]	@ (800c284 <HAL_I2C_MspInit+0xf0>)
 800c252:	f7f5 fc1b 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c256:	2300      	movs	r3, #0
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	4b09      	ldr	r3, [pc, #36]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c25e:	4a08      	ldr	r2, [pc, #32]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c260:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c264:	6413      	str	r3, [r2, #64]	@ 0x40
 800c266:	4b06      	ldr	r3, [pc, #24]	@ (800c280 <HAL_I2C_MspInit+0xec>)
 800c268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c26a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	68fb      	ldr	r3, [r7, #12]

  }
}
 800c272:	bf00      	nop
 800c274:	3730      	adds	r7, #48	@ 0x30
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	40005400 	.word	0x40005400
 800c280:	40023800 	.word	0x40023800
 800c284:	40020400 	.word	0x40020400
 800c288:	40005800 	.word	0x40005800

0800c28c <i2cdevReadReg16>:
#include "i2cdev.h"
#include "stdbool.h"


bool i2cdevReadReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08a      	sub	sp, #40	@ 0x28
 800c290:	af04      	add	r7, sp, #16
 800c292:	60f8      	str	r0, [r7, #12]
 800c294:	4608      	mov	r0, r1
 800c296:	4611      	mov	r1, r2
 800c298:	461a      	mov	r2, r3
 800c29a:	4603      	mov	r3, r0
 800c29c:	72fb      	strb	r3, [r7, #11]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	813b      	strh	r3, [r7, #8]
 800c2a2:	4613      	mov	r3, r2
 800c2a4:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800c2a6:	7afb      	ldrb	r3, [r7, #11]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	005b      	lsls	r3, r3, #1
 800c2ac:	b299      	uxth	r1, r3
 800c2ae:	893a      	ldrh	r2, [r7, #8]
 800c2b0:	2364      	movs	r3, #100	@ 0x64
 800c2b2:	9302      	str	r3, [sp, #8]
 800c2b4:	88fb      	ldrh	r3, [r7, #6]
 800c2b6:	9301      	str	r3, [sp, #4]
 800c2b8:	6a3b      	ldr	r3, [r7, #32]
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	2310      	movs	r3, #16
 800c2be:	4807      	ldr	r0, [pc, #28]	@ (800c2dc <i2cdevReadReg16+0x50>)
 800c2c0:	f7f5 fff2 	bl	80022a8 <HAL_I2C_Mem_Read>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800c2c8:	7dfb      	ldrb	r3, [r7, #23]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d101      	bne.n	800c2d2 <i2cdevReadReg16+0x46>
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	e000      	b.n	800c2d4 <i2cdevReadReg16+0x48>
	else return false;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3718      	adds	r7, #24
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}
 800c2dc:	20007cfc 	.word	0x20007cfc

0800c2e0 <i2cdevWriteReg16>:
bool i2cdevWriteReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b08a      	sub	sp, #40	@ 0x28
 800c2e4:	af04      	add	r7, sp, #16
 800c2e6:	60f8      	str	r0, [r7, #12]
 800c2e8:	4608      	mov	r0, r1
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	461a      	mov	r2, r3
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	72fb      	strb	r3, [r7, #11]
 800c2f2:	460b      	mov	r3, r1
 800c2f4:	813b      	strh	r3, [r7, #8]
 800c2f6:	4613      	mov	r3, r2
 800c2f8:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800c2fa:	7afb      	ldrb	r3, [r7, #11]
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	005b      	lsls	r3, r3, #1
 800c300:	b299      	uxth	r1, r3
 800c302:	893a      	ldrh	r2, [r7, #8]
 800c304:	2364      	movs	r3, #100	@ 0x64
 800c306:	9302      	str	r3, [sp, #8]
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	9301      	str	r3, [sp, #4]
 800c30c:	6a3b      	ldr	r3, [r7, #32]
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	2310      	movs	r3, #16
 800c312:	4807      	ldr	r0, [pc, #28]	@ (800c330 <i2cdevWriteReg16+0x50>)
 800c314:	f7f5 fece 	bl	80020b4 <HAL_I2C_Mem_Write>
 800c318:	4603      	mov	r3, r0
 800c31a:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800c31c:	7dfb      	ldrb	r3, [r7, #23]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <i2cdevWriteReg16+0x46>
 800c322:	2301      	movs	r3, #1
 800c324:	e000      	b.n	800c328 <i2cdevWriteReg16+0x48>
	else return false;
 800c326:	2300      	movs	r3, #0
}
 800c328:	4618      	mov	r0, r3
 800c32a:	3718      	adds	r7, #24
 800c32c:	46bd      	mov	sp, r7
 800c32e:	bd80      	pop	{r7, pc}
 800c330:	20007cfc 	.word	0x20007cfc

0800c334 <ledInit>:

static bool isInit;


void ledInit()
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af00      	add	r7, sp, #0

	if (isInit)
 800c33a:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a4 <ledInit+0x70>)
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d12c      	bne.n	800c39c <ledInit+0x68>
		return;
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800c342:	1d3b      	adds	r3, r7, #4
 800c344:	2200      	movs	r2, #0
 800c346:	601a      	str	r2, [r3, #0]
 800c348:	605a      	str	r2, [r3, #4]
 800c34a:	609a      	str	r2, [r3, #8]
 800c34c:	60da      	str	r2, [r3, #12]
 800c34e:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800c350:	2300      	movs	r3, #0
 800c352:	603b      	str	r3, [r7, #0]
 800c354:	4b14      	ldr	r3, [pc, #80]	@ (800c3a8 <ledInit+0x74>)
 800c356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c358:	4a13      	ldr	r2, [pc, #76]	@ (800c3a8 <ledInit+0x74>)
 800c35a:	f043 0304 	orr.w	r3, r3, #4
 800c35e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c360:	4b11      	ldr	r3, [pc, #68]	@ (800c3a8 <ledInit+0x74>)
 800c362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c364:	f003 0304 	and.w	r3, r3, #4
 800c368:	603b      	str	r3, [r7, #0]
 800c36a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800c36c:	2200      	movs	r2, #0
 800c36e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c372:	480e      	ldr	r0, [pc, #56]	@ (800c3ac <ledInit+0x78>)
 800c374:	f7f5 fd26 	bl	8001dc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LED_PIN;
 800c378:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c37c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c37e:	2301      	movs	r3, #1
 800c380:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c386:	2300      	movs	r3, #0
 800c388:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800c38a:	1d3b      	adds	r3, r7, #4
 800c38c:	4619      	mov	r1, r3
 800c38e:	4807      	ldr	r0, [pc, #28]	@ (800c3ac <ledInit+0x78>)
 800c390:	f7f5 fb7c 	bl	8001a8c <HAL_GPIO_Init>

	isInit = true;
 800c394:	4b03      	ldr	r3, [pc, #12]	@ (800c3a4 <ledInit+0x70>)
 800c396:	2201      	movs	r2, #1
 800c398:	701a      	strb	r2, [r3, #0]
 800c39a:	e000      	b.n	800c39e <ledInit+0x6a>
		return;
 800c39c:	bf00      	nop
}
 800c39e:	3718      	adds	r7, #24
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}
 800c3a4:	20007d50 	.word	0x20007d50
 800c3a8:	40023800 	.word	0x40023800
 800c3ac:	40020800 	.word	0x40020800

0800c3b0 <ledSet>:


void ledSet(bool value)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	71fb      	strb	r3, [r7, #7]
	if ( value == 0 ) HAL_GPIO_WritePin(LED_PORT, LED_PIN, 0);
 800c3ba:	79fb      	ldrb	r3, [r7, #7]
 800c3bc:	f083 0301 	eor.w	r3, r3, #1
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d006      	beq.n	800c3d4 <ledSet+0x24>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c3cc:	4806      	ldr	r0, [pc, #24]	@ (800c3e8 <ledSet+0x38>)
 800c3ce:	f7f5 fcf9 	bl	8001dc4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);

}
 800c3d2:	e005      	b.n	800c3e0 <ledSet+0x30>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 800c3d4:	2201      	movs	r2, #1
 800c3d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800c3da:	4803      	ldr	r0, [pc, #12]	@ (800c3e8 <ledSet+0x38>)
 800c3dc:	f7f5 fcf2 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 800c3e0:	bf00      	nop
 800c3e2:	3708      	adds	r7, #8
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	40020800 	.word	0x40020800

0800c3ec <mpu6500TestConnection>:
#include "mpu6500.h"
#include "i2c_drv.h"

uint8_t walk = 0;

bool mpu6500TestConnection() {
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b086      	sub	sp, #24
 800c3f0:	af04      	add	r7, sp, #16
	uint8_t mpuID;
//	walk = 1;//JH
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, WHO_AM_I_REG, 1, &mpuID, 1, 100);
 800c3f2:	2364      	movs	r3, #100	@ 0x64
 800c3f4:	9302      	str	r3, [sp, #8]
 800c3f6:	2301      	movs	r3, #1
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	1dfb      	adds	r3, r7, #7
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	2301      	movs	r3, #1
 800c400:	2275      	movs	r2, #117	@ 0x75
 800c402:	21d0      	movs	r1, #208	@ 0xd0
 800c404:	4806      	ldr	r0, [pc, #24]	@ (800c420 <mpu6500TestConnection+0x34>)
 800c406:	f7f5 ff4f 	bl	80022a8 <HAL_I2C_Mem_Read>
//	walk =1;//NJH
	if (mpuID != 0x75)
 800c40a:	79fb      	ldrb	r3, [r7, #7]
 800c40c:	2b75      	cmp	r3, #117	@ 0x75
 800c40e:	d001      	beq.n	800c414 <mpu6500TestConnection+0x28>
		return false;
 800c410:	2300      	movs	r3, #0
 800c412:	e000      	b.n	800c416 <mpu6500TestConnection+0x2a>
//	walk = 1;//NJH
	return true;
 800c414:	2301      	movs	r3, #1
}
 800c416:	4618      	mov	r0, r3
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	20007ca8 	.word	0x20007ca8

0800c424 <mpu6500SelfTest>:
		//                string, (double)low, (double)high, (double)value);
		return false;
	}
	return true;
}
bool mpu6500SelfTest() {
 800c424:	b480      	push	{r7}
 800c426:	af00      	add	r7, sp, #0
	return true;
 800c428:	2301      	movs	r3, #1
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <mpu6500Init>:
void mpu6500Init(void) {
 800c434:	b580      	push	{r7, lr}
 800c436:	b086      	sub	sp, #24
 800c438:	af04      	add	r7, sp, #16
	uint8_t data;
	data = 0x00;
 800c43a:	2300      	movs	r3, #0
 800c43c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1,
 800c43e:	2364      	movs	r3, #100	@ 0x64
 800c440:	9302      	str	r3, [sp, #8]
 800c442:	2301      	movs	r3, #1
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	1dfb      	adds	r3, r7, #7
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	2301      	movs	r3, #1
 800c44c:	226b      	movs	r2, #107	@ 0x6b
 800c44e:	21d0      	movs	r1, #208	@ 0xd0
 800c450:	482d      	ldr	r0, [pc, #180]	@ (800c508 <mpu6500Init+0xd4>)
 800c452:	f7f5 fe2f 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(500);
 800c456:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800c45a:	f7fa ffdb 	bl	8007414 <vTaskDelay>
	// Set ACCEL to +-16g, GYRO to +-2000dps
	data = 0x18;
 800c45e:	2318      	movs	r3, #24
 800c460:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1,
 800c462:	2364      	movs	r3, #100	@ 0x64
 800c464:	9302      	str	r3, [sp, #8]
 800c466:	2301      	movs	r3, #1
 800c468:	9301      	str	r3, [sp, #4]
 800c46a:	1dfb      	adds	r3, r7, #7
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	2301      	movs	r3, #1
 800c470:	221b      	movs	r2, #27
 800c472:	21d0      	movs	r1, #208	@ 0xd0
 800c474:	4824      	ldr	r0, [pc, #144]	@ (800c508 <mpu6500Init+0xd4>)
 800c476:	f7f5 fe1d 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 800c47a:	200a      	movs	r0, #10
 800c47c:	f7fa ffca 	bl	8007414 <vTaskDelay>
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1,
 800c480:	2364      	movs	r3, #100	@ 0x64
 800c482:	9302      	str	r3, [sp, #8]
 800c484:	2301      	movs	r3, #1
 800c486:	9301      	str	r3, [sp, #4]
 800c488:	1dfb      	adds	r3, r7, #7
 800c48a:	9300      	str	r3, [sp, #0]
 800c48c:	2301      	movs	r3, #1
 800c48e:	221c      	movs	r2, #28
 800c490:	21d0      	movs	r1, #208	@ 0xd0
 800c492:	481d      	ldr	r0, [pc, #116]	@ (800c508 <mpu6500Init+0xd4>)
 800c494:	f7f5 fe0e 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 800c498:	200a      	movs	r0, #10
 800c49a:	f7fa ffbb 	bl	8007414 <vTaskDelay>
	// Set sampling rate to 1khz
	data = 0x07;
 800c49e:	2307      	movs	r3, #7
 800c4a0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1,
 800c4a2:	2364      	movs	r3, #100	@ 0x64
 800c4a4:	9302      	str	r3, [sp, #8]
 800c4a6:	2301      	movs	r3, #1
 800c4a8:	9301      	str	r3, [sp, #4]
 800c4aa:	1dfb      	adds	r3, r7, #7
 800c4ac:	9300      	str	r3, [sp, #0]
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	2219      	movs	r2, #25
 800c4b2:	21d0      	movs	r1, #208	@ 0xd0
 800c4b4:	4814      	ldr	r0, [pc, #80]	@ (800c508 <mpu6500Init+0xd4>)
 800c4b6:	f7f5 fdfd 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);

	vTaskDelay(10);
 800c4ba:	200a      	movs	r0, #10
 800c4bc:	f7fa ffaa 	bl	8007414 <vTaskDelay>
	// Set GYRO to 41hz bandwidth
	data = 0x03;
 800c4c0:	2303      	movs	r3, #3
 800c4c2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, CONFIG_REG, 1, &data, 1, 100);
 800c4c4:	2364      	movs	r3, #100	@ 0x64
 800c4c6:	9302      	str	r3, [sp, #8]
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	9301      	str	r3, [sp, #4]
 800c4cc:	1dfb      	adds	r3, r7, #7
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	221a      	movs	r2, #26
 800c4d4:	21d0      	movs	r1, #208	@ 0xd0
 800c4d6:	480c      	ldr	r0, [pc, #48]	@ (800c508 <mpu6500Init+0xd4>)
 800c4d8:	f7f5 fdec 	bl	80020b4 <HAL_I2C_Mem_Write>

	// Enable data ready interrupt to propagate to interrupt pin
	vTaskDelay(10);
 800c4dc:	200a      	movs	r0, #10
 800c4de:	f7fa ff99 	bl	8007414 <vTaskDelay>
	data = 0x01;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, INT_ENABLE_REG, 1, &data, 1,
 800c4e6:	2364      	movs	r3, #100	@ 0x64
 800c4e8:	9302      	str	r3, [sp, #8]
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	9301      	str	r3, [sp, #4]
 800c4ee:	1dfb      	adds	r3, r7, #7
 800c4f0:	9300      	str	r3, [sp, #0]
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	2238      	movs	r2, #56	@ 0x38
 800c4f6:	21d0      	movs	r1, #208	@ 0xd0
 800c4f8:	4803      	ldr	r0, [pc, #12]	@ (800c508 <mpu6500Init+0xd4>)
 800c4fa:	f7f5 fddb 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 800c4fe:	bf00      	nop
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	20007ca8 	.word	0x20007ca8

0800c50c <mpu6500SetAccelDLPF>:

void mpu6500SetAccelDLPF(uint8_t range) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b086      	sub	sp, #24
 800c510:	af04      	add	r7, sp, #16
 800c512:	4603      	mov	r3, r0
 800c514:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_2_REG, 1, &range, 1,
 800c516:	2364      	movs	r3, #100	@ 0x64
 800c518:	9302      	str	r3, [sp, #8]
 800c51a:	2301      	movs	r3, #1
 800c51c:	9301      	str	r3, [sp, #4]
 800c51e:	1dfb      	adds	r3, r7, #7
 800c520:	9300      	str	r3, [sp, #0]
 800c522:	2301      	movs	r3, #1
 800c524:	221d      	movs	r2, #29
 800c526:	21d0      	movs	r1, #208	@ 0xd0
 800c528:	4803      	ldr	r0, [pc, #12]	@ (800c538 <mpu6500SetAccelDLPF+0x2c>)
 800c52a:	f7f5 fdc3 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 800c52e:	bf00      	nop
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop
 800c538:	20007ca8 	.word	0x20007ca8

0800c53c <mpu6500GetAccelGyroData>:
void mpu6500GetAccelGyroData(mpu6500_t *mpu6500TypeDef) {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af04      	add	r7, sp, #16
 800c542:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
			mpu6500TypeDef->buf, sizeof(mpu6500_t), 100);
 800c544:	687b      	ldr	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
 800c546:	2264      	movs	r2, #100	@ 0x64
 800c548:	9202      	str	r2, [sp, #8]
 800c54a:	220e      	movs	r2, #14
 800c54c:	9201      	str	r2, [sp, #4]
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	2301      	movs	r3, #1
 800c552:	223b      	movs	r2, #59	@ 0x3b
 800c554:	21d0      	movs	r1, #208	@ 0xd0
 800c556:	4803      	ldr	r0, [pc, #12]	@ (800c564 <mpu6500GetAccelGyroData+0x28>)
 800c558:	f7f5 fea6 	bl	80022a8 <HAL_I2C_Mem_Read>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20007ca8 	.word	0x20007ca8

0800c568 <mpu6500GetMotion6>:
void mpu6500GetMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx,
		int16_t *gy, int16_t *gz) {
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08c      	sub	sp, #48	@ 0x30
 800c56c:	af04      	add	r7, sp, #16
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
	uint8_t buf[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1, buf, 14,
 800c576:	2364      	movs	r3, #100	@ 0x64
 800c578:	9302      	str	r3, [sp, #8]
 800c57a:	230e      	movs	r3, #14
 800c57c:	9301      	str	r3, [sp, #4]
 800c57e:	f107 0310 	add.w	r3, r7, #16
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	2301      	movs	r3, #1
 800c586:	223b      	movs	r2, #59	@ 0x3b
 800c588:	21d0      	movs	r1, #208	@ 0xd0
 800c58a:	481e      	ldr	r0, [pc, #120]	@ (800c604 <mpu6500GetMotion6+0x9c>)
 800c58c:	f7f5 fe8c 	bl	80022a8 <HAL_I2C_Mem_Read>
			100);
	*ax = (((int16_t) buf[0]) << 8) | buf[1];
 800c590:	7c3b      	ldrb	r3, [r7, #16]
 800c592:	021b      	lsls	r3, r3, #8
 800c594:	b21a      	sxth	r2, r3
 800c596:	7c7b      	ldrb	r3, [r7, #17]
 800c598:	b21b      	sxth	r3, r3
 800c59a:	4313      	orrs	r3, r2
 800c59c:	b21a      	sxth	r2, r3
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	801a      	strh	r2, [r3, #0]
	*ay = (((int16_t) buf[2]) << 8) | buf[3];
 800c5a2:	7cbb      	ldrb	r3, [r7, #18]
 800c5a4:	021b      	lsls	r3, r3, #8
 800c5a6:	b21a      	sxth	r2, r3
 800c5a8:	7cfb      	ldrb	r3, [r7, #19]
 800c5aa:	b21b      	sxth	r3, r3
 800c5ac:	4313      	orrs	r3, r2
 800c5ae:	b21a      	sxth	r2, r3
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	801a      	strh	r2, [r3, #0]
	*az = (((int16_t) buf[4]) << 8) | buf[5];
 800c5b4:	7d3b      	ldrb	r3, [r7, #20]
 800c5b6:	021b      	lsls	r3, r3, #8
 800c5b8:	b21a      	sxth	r2, r3
 800c5ba:	7d7b      	ldrb	r3, [r7, #21]
 800c5bc:	b21b      	sxth	r3, r3
 800c5be:	4313      	orrs	r3, r2
 800c5c0:	b21a      	sxth	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	801a      	strh	r2, [r3, #0]
	*gx = (((int16_t) buf[8]) << 8) | buf[9];
 800c5c6:	7e3b      	ldrb	r3, [r7, #24]
 800c5c8:	021b      	lsls	r3, r3, #8
 800c5ca:	b21a      	sxth	r2, r3
 800c5cc:	7e7b      	ldrb	r3, [r7, #25]
 800c5ce:	b21b      	sxth	r3, r3
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	b21a      	sxth	r2, r3
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	801a      	strh	r2, [r3, #0]
	*gy = (((int16_t) buf[10]) << 8) | buf[11];
 800c5d8:	7ebb      	ldrb	r3, [r7, #26]
 800c5da:	021b      	lsls	r3, r3, #8
 800c5dc:	b21a      	sxth	r2, r3
 800c5de:	7efb      	ldrb	r3, [r7, #27]
 800c5e0:	b21b      	sxth	r3, r3
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	b21a      	sxth	r2, r3
 800c5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e8:	801a      	strh	r2, [r3, #0]
	*gz = (((int16_t) buf[12]) << 8) | buf[13];
 800c5ea:	7f3b      	ldrb	r3, [r7, #28]
 800c5ec:	021b      	lsls	r3, r3, #8
 800c5ee:	b21a      	sxth	r2, r3
 800c5f0:	7f7b      	ldrb	r3, [r7, #29]
 800c5f2:	b21b      	sxth	r3, r3
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	b21a      	sxth	r2, r3
 800c5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fa:	801a      	strh	r2, [r3, #0]
}
 800c5fc:	bf00      	nop
 800c5fe:	3720      	adds	r7, #32
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20007ca8 	.word	0x20007ca8

0800c608 <nvicInit>:
extern DMA_HandleTypeDef hdma_usart1_rx;

#define DONT_DISCARD __attribute__((used))

void nvicInit(void)
{
 800c608:	b480      	push	{r7}
 800c60a:	af00      	add	r7, sp, #0
//  NVIC_PriorityGroupConfig((uint32_t)0x300);
}
 800c60c:	bf00      	nop
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr

0800c616 <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 */
extern void tickFreeRTOS(void);

void DONT_DISCARD SysTick_Handler(void)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	af00      	add	r7, sp, #0
    tickFreeRTOS();
 800c61a:	f7fc fab5 	bl	8008b88 <tickFreeRTOS>
}
 800c61e:	bf00      	nop
 800c620:	bd80      	pop	{r7, pc}

0800c622 <NMI_Handler>:

/**
  * @brief  This function handles NMI exception.
  */
void DONT_DISCARD NMI_Handler(void)
{
 800c622:	b480      	push	{r7}
 800c624:	af00      	add	r7, sp, #0
}
 800c626:	bf00      	nop
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr

0800c630 <HardFault_Handler>:

/**
 * @brief  This function handles Hard Fault exception.
 */
void DONT_DISCARD HardFault_Handler(void)
{
 800c630:	b480      	push	{r7}
 800c632:	af00      	add	r7, sp, #0
  //To test this application, you can use this snippet anywhere:
  // //Let's crash the MCU!
  // asm (" MOVS r0, #1 \n"
  // " LDM r0,{r1-r2} \n"
  // " BX LR; \n");
  asm( "TST LR, #4 \n"
 800c634:	f01e 0f04 	tst.w	lr, #4
 800c638:	bf0c      	ite	eq
 800c63a:	f3ef 8008 	mrseq	r0, MSP
 800c63e:	f3ef 8009 	mrsne	r0, PSP
 800c642:	f000 b805 	b.w	800c650 <printHardFault>
  "ITE EQ \n"
  "MRSEQ R0, MSP \n"
  "MRSNE R0, PSP \n"
  "B printHardFault");
}
 800c646:	bf00      	nop
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <printHardFault>:

void DONT_DISCARD printHardFault(uint32_t* hardfaultArgs)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
//    stacked_r3,
//    stacked_r12,
//    stacked_lr,
//    stacked_pc,
//    stacked_psr);
  while (1)
 800c658:	bf00      	nop
 800c65a:	e7fd      	b.n	800c658 <printHardFault+0x8>

0800c65c <BusFault_Handler>:

/**
 * @brief  This function handles Bus Fault exception.
 */
void DONT_DISCARD BusFault_Handler(void)
{
 800c65c:	b480      	push	{r7}
 800c65e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("BusFault");
  while (1)
 800c660:	bf00      	nop
 800c662:	e7fd      	b.n	800c660 <BusFault_Handler+0x4>

0800c664 <UsageFault_Handler>:

/**
 * @brief  This function handles Usage Fault exception.
 */
void DONT_DISCARD UsageFault_Handler(void)
{
 800c664:	b480      	push	{r7}
 800c666:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("UsageFault");
  while (1)
 800c668:	bf00      	nop
 800c66a:	e7fd      	b.n	800c668 <UsageFault_Handler+0x4>

0800c66c <DebugMon_Handler>:

/**
 * @brief  This function handles Debug Monitor exception.
 */
void DONT_DISCARD DebugMon_Handler(void)
{
 800c66c:	b480      	push	{r7}
 800c66e:	af00      	add	r7, sp, #0
}
 800c670:	bf00      	nop
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
	...

0800c67c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800c680:	4802      	ldr	r0, [pc, #8]	@ (800c68c <DMA1_Stream2_IRQHandler+0x10>)
 800c682:	f7f4 ff99 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800c686:	bf00      	nop
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	20008084 	.word	0x20008084

0800c690 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800c694:	4802      	ldr	r0, [pc, #8]	@ (800c6a0 <DMA1_Stream4_IRQHandler+0x10>)
 800c696:	f7f4 ff8f 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800c69a:	bf00      	nop
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	20007f64 	.word	0x20007f64

0800c6a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800c6a8:	4802      	ldr	r0, [pc, #8]	@ (800c6b4 <DMA1_Stream5_IRQHandler+0x10>)
 800c6aa:	f7f4 ff85 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800c6ae:	bf00      	nop
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	20007fc4 	.word	0x20007fc4

0800c6b8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800c6bc:	4802      	ldr	r0, [pc, #8]	@ (800c6c8 <DMA1_Stream7_IRQHandler+0x10>)
 800c6be:	f7f4 ff7b 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800c6c2:	bf00      	nop
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	20008024 	.word	0x20008024

0800c6cc <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800c6d0:	4802      	ldr	r0, [pc, #8]	@ (800c6dc <TIM4_IRQHandler+0x10>)
 800c6d2:	f7f8 f927 	bl	8004924 <HAL_TIM_IRQHandler>
}
 800c6d6:	bf00      	nop
 800c6d8:	bd80      	pop	{r7, pc}
 800c6da:	bf00      	nop
 800c6dc:	200080e4 	.word	0x200080e4

0800c6e0 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void) {
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800c6e4:	4802      	ldr	r0, [pc, #8]	@ (800c6f0 <DMA2_Stream2_IRQHandler+0x10>)
 800c6e6:	f7f4 ff67 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800c6ea:	bf00      	nop
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20008174 	.word	0x20008174

0800c6f4 <qmc5883p_Write_Reg>:
#include "system.h"
#include "sleepus.h"

extern I2C_HandleTypeDef hi2c2;

static void qmc5883p_Write_Reg(uint8_t reg, uint8_t value){
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af04      	add	r7, sp, #16
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	460a      	mov	r2, r1
 800c6fe:	71fb      	strb	r3, [r7, #7]
 800c700:	4613      	mov	r3, r2
 800c702:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = value;
 800c704:	79bb      	ldrb	r3, [r7, #6]
 800c706:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c2, Q5883P_ADDR, reg, 1, &buf, 1, 100);
 800c708:	79fb      	ldrb	r3, [r7, #7]
 800c70a:	b29a      	uxth	r2, r3
 800c70c:	2364      	movs	r3, #100	@ 0x64
 800c70e:	9302      	str	r3, [sp, #8]
 800c710:	2301      	movs	r3, #1
 800c712:	9301      	str	r3, [sp, #4]
 800c714:	f107 030f 	add.w	r3, r7, #15
 800c718:	9300      	str	r3, [sp, #0]
 800c71a:	2301      	movs	r3, #1
 800c71c:	2158      	movs	r1, #88	@ 0x58
 800c71e:	4803      	ldr	r0, [pc, #12]	@ (800c72c <qmc5883p_Write_Reg+0x38>)
 800c720:	f7f5 fcc8 	bl	80020b4 <HAL_I2C_Mem_Write>

}
 800c724:	bf00      	nop
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	20007cfc 	.word	0x20007cfc

0800c730 <qmc5883p_Read_Reg>:
static void qmc5883p_Read_Reg(uint8_t reg, uint8_t *buffer, uint8_t len){
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af04      	add	r7, sp, #16
 800c736:	4603      	mov	r3, r0
 800c738:	6039      	str	r1, [r7, #0]
 800c73a:	71fb      	strb	r3, [r7, #7]
 800c73c:	4613      	mov	r3, r2
 800c73e:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c2, Q5883P_ADDR, reg, 1, buffer, len, 100);
 800c740:	79fb      	ldrb	r3, [r7, #7]
 800c742:	b29a      	uxth	r2, r3
 800c744:	79bb      	ldrb	r3, [r7, #6]
 800c746:	b29b      	uxth	r3, r3
 800c748:	2164      	movs	r1, #100	@ 0x64
 800c74a:	9102      	str	r1, [sp, #8]
 800c74c:	9301      	str	r3, [sp, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	2301      	movs	r3, #1
 800c754:	2158      	movs	r1, #88	@ 0x58
 800c756:	4803      	ldr	r0, [pc, #12]	@ (800c764 <qmc5883p_Read_Reg+0x34>)
 800c758:	f7f5 fda6 	bl	80022a8 <HAL_I2C_Mem_Read>

}
 800c75c:	bf00      	nop
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	20007cfc 	.word	0x20007cfc

0800c768 <qmc5883p_init>:
uint8_t qmc5883p_init(){
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0

	uint8_t set_osr = 0xCD;		// set OSR to 200Hz
 800c76e:	23cd      	movs	r3, #205	@ 0xcd
 800c770:	71fb      	strb	r3, [r7, #7]
	uint8_t set_range = 0x08;	// set full range to 8 Guass
 800c772:	2308      	movs	r3, #8
 800c774:	71bb      	strb	r3, [r7, #6]
	uint8_t qmc_ID;
	qmc5883p_Read_Reg(Q5883P_ID_ADDR, &qmc_ID, 1);
 800c776:	1d7b      	adds	r3, r7, #5
 800c778:	2201      	movs	r2, #1
 800c77a:	4619      	mov	r1, r3
 800c77c:	2000      	movs	r0, #0
 800c77e:	f7ff ffd7 	bl	800c730 <qmc5883p_Read_Reg>

	if ( qmc_ID != 0x80 ) return 0;
 800c782:	797b      	ldrb	r3, [r7, #5]
 800c784:	2b80      	cmp	r3, #128	@ 0x80
 800c786:	d001      	beq.n	800c78c <qmc5883p_init+0x24>
 800c788:	2300      	movs	r3, #0
 800c78a:	e022      	b.n	800c7d2 <qmc5883p_init+0x6a>

	qmc5883p_Write_Reg(0x29, 0x06);
 800c78c:	2106      	movs	r1, #6
 800c78e:	2029      	movs	r0, #41	@ 0x29
 800c790:	f7ff ffb0 	bl	800c6f4 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
//	vTaskDelay(5);
	sleepus(5000);
 800c794:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c798:	f009 fb6f 	bl	8015e7a <sleepus>
	qmc5883p_Write_Reg(Q5883P_CONTR_2, 0x40);
 800c79c:	2140      	movs	r1, #64	@ 0x40
 800c79e:	200b      	movs	r0, #11
 800c7a0:	f7ff ffa8 	bl	800c6f4 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(5000);
 800c7a4:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c7a8:	f009 fb67 	bl	8015e7a <sleepus>
//	vTaskDelay(5);


	qmc5883p_Write_Reg(Q5883P_CONTR_2, set_range);
 800c7ac:	79bb      	ldrb	r3, [r7, #6]
 800c7ae:	4619      	mov	r1, r3
 800c7b0:	200b      	movs	r0, #11
 800c7b2:	f7ff ff9f 	bl	800c6f4 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(5000);
 800c7b6:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c7ba:	f009 fb5e 	bl	8015e7a <sleepus>
//	vTaskDelay(5);


	qmc5883p_Write_Reg(Q5883P_CONTR_1, set_osr);
 800c7be:	79fb      	ldrb	r3, [r7, #7]
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	200a      	movs	r0, #10
 800c7c4:	f7ff ff96 	bl	800c6f4 <qmc5883p_Write_Reg>
//	HAL_Delay(5);
	sleepus(5000);
 800c7c8:	f241 3088 	movw	r0, #5000	@ 0x1388
 800c7cc:	f009 fb55 	bl	8015e7a <sleepus>
//	vTaskDelay(5);



	return 1;
 800c7d0:	2301      	movs	r3, #1

}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <qmc5883p_read>:
uint8_t qmc5883p_read(qmc_typedef *qmc){
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b084      	sub	sp, #16
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]

	uint8_t qmc_data_status;
	uint8_t buf[6];

	qmc5883p_Read_Reg(Q5883P_DATA_READY, &qmc_data_status, 1);
 800c7e2:	f107 030f 	add.w	r3, r7, #15
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	2009      	movs	r0, #9
 800c7ec:	f7ff ffa0 	bl	800c730 <qmc5883p_Read_Reg>

	if ( (qmc_data_status & 0x01) != 1 ) {
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
 800c7f2:	f003 0301 	and.w	r3, r3, #1
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <qmc5883p_read+0x24>

		return 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	e022      	b.n	800c844 <qmc5883p_read+0x6a>
	}

	qmc5883p_Read_Reg(Q5883P_DATA_REG, buf, 6);
 800c7fe:	f107 0308 	add.w	r3, r7, #8
 800c802:	2206      	movs	r2, #6
 800c804:	4619      	mov	r1, r3
 800c806:	2001      	movs	r0, #1
 800c808:	f7ff ff92 	bl	800c730 <qmc5883p_Read_Reg>

	qmc->qmc_x = buf[1] << 8 | buf[0];
 800c80c:	7a7b      	ldrb	r3, [r7, #9]
 800c80e:	021b      	lsls	r3, r3, #8
 800c810:	b21a      	sxth	r2, r3
 800c812:	7a3b      	ldrb	r3, [r7, #8]
 800c814:	b21b      	sxth	r3, r3
 800c816:	4313      	orrs	r3, r2
 800c818:	b21a      	sxth	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	801a      	strh	r2, [r3, #0]
	qmc->qmc_y = buf[3] << 8 | buf[2];
 800c81e:	7afb      	ldrb	r3, [r7, #11]
 800c820:	021b      	lsls	r3, r3, #8
 800c822:	b21a      	sxth	r2, r3
 800c824:	7abb      	ldrb	r3, [r7, #10]
 800c826:	b21b      	sxth	r3, r3
 800c828:	4313      	orrs	r3, r2
 800c82a:	b21a      	sxth	r2, r3
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	805a      	strh	r2, [r3, #2]
	qmc->qmc_z = buf[5] << 8 | buf[4];
 800c830:	7b7b      	ldrb	r3, [r7, #13]
 800c832:	021b      	lsls	r3, r3, #8
 800c834:	b21a      	sxth	r2, r3
 800c836:	7b3b      	ldrb	r3, [r7, #12]
 800c838:	b21b      	sxth	r3, r3
 800c83a:	4313      	orrs	r3, r2
 800c83c:	b21a      	sxth	r2, r3
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	809a      	strh	r2, [r3, #4]

	return 1;
 800c842:	2301      	movs	r3, #1

}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <spi1_init>:

SPI_HandleTypeDef hspi1;


void spi1_init(void)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800c850:	4b17      	ldr	r3, [pc, #92]	@ (800c8b0 <spi1_init+0x64>)
 800c852:	4a18      	ldr	r2, [pc, #96]	@ (800c8b4 <spi1_init+0x68>)
 800c854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800c856:	4b16      	ldr	r3, [pc, #88]	@ (800c8b0 <spi1_init+0x64>)
 800c858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800c85c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800c85e:	4b14      	ldr	r3, [pc, #80]	@ (800c8b0 <spi1_init+0x64>)
 800c860:	2200      	movs	r2, #0
 800c862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800c864:	4b12      	ldr	r3, [pc, #72]	@ (800c8b0 <spi1_init+0x64>)
 800c866:	2200      	movs	r2, #0
 800c868:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800c86a:	4b11      	ldr	r3, [pc, #68]	@ (800c8b0 <spi1_init+0x64>)
 800c86c:	2200      	movs	r2, #0
 800c86e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800c870:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b0 <spi1_init+0x64>)
 800c872:	2200      	movs	r2, #0
 800c874:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800c876:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b0 <spi1_init+0x64>)
 800c878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c87c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c87e:	4b0c      	ldr	r3, [pc, #48]	@ (800c8b0 <spi1_init+0x64>)
 800c880:	2200      	movs	r2, #0
 800c882:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800c884:	4b0a      	ldr	r3, [pc, #40]	@ (800c8b0 <spi1_init+0x64>)
 800c886:	2200      	movs	r2, #0
 800c888:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800c88a:	4b09      	ldr	r3, [pc, #36]	@ (800c8b0 <spi1_init+0x64>)
 800c88c:	2200      	movs	r2, #0
 800c88e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c890:	4b07      	ldr	r3, [pc, #28]	@ (800c8b0 <spi1_init+0x64>)
 800c892:	2200      	movs	r2, #0
 800c894:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800c896:	4b06      	ldr	r3, [pc, #24]	@ (800c8b0 <spi1_init+0x64>)
 800c898:	220a      	movs	r2, #10
 800c89a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800c89c:	4804      	ldr	r0, [pc, #16]	@ (800c8b0 <spi1_init+0x64>)
 800c89e:	f7f6 ff85 	bl	80037ac <HAL_SPI_Init>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d001      	beq.n	800c8ac <spi1_init+0x60>
  {
    Error_Handler();
 800c8a8:	f7fc fc82 	bl	80091b0 <Error_Handler>
  }
}
 800c8ac:	bf00      	nop
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	20007ec4 	.word	0x20007ec4
 800c8b4:	40013000 	.word	0x40013000

0800c8b8 <HAL_SPI_MspInit>:
	}


}
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b08e      	sub	sp, #56	@ 0x38
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c8c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	605a      	str	r2, [r3, #4]
 800c8ca:	609a      	str	r2, [r3, #8]
 800c8cc:	60da      	str	r2, [r3, #12]
 800c8ce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a84      	ldr	r2, [pc, #528]	@ (800cae8 <HAL_SPI_MspInit+0x230>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d12b      	bne.n	800c932 <HAL_SPI_MspInit+0x7a>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 800c8da:	2300      	movs	r3, #0
 800c8dc:	623b      	str	r3, [r7, #32]
 800c8de:	4b83      	ldr	r3, [pc, #524]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c8e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8e2:	4a82      	ldr	r2, [pc, #520]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c8e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c8e8:	6453      	str	r3, [r2, #68]	@ 0x44
 800c8ea:	4b80      	ldr	r3, [pc, #512]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c8ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c8ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c8f2:	623b      	str	r3, [r7, #32]
 800c8f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	61fb      	str	r3, [r7, #28]
 800c8fa:	4b7c      	ldr	r3, [pc, #496]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c8fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fe:	4a7b      	ldr	r2, [pc, #492]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c900:	f043 0301 	orr.w	r3, r3, #1
 800c904:	6313      	str	r3, [r2, #48]	@ 0x30
 800c906:	4b79      	ldr	r3, [pc, #484]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	61fb      	str	r3, [r7, #28]
 800c910:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800c912:	23e0      	movs	r3, #224	@ 0xe0
 800c914:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c916:	2302      	movs	r3, #2
 800c918:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c91e:	2303      	movs	r3, #3
 800c920:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800c922:	2305      	movs	r3, #5
 800c924:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c926:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c92a:	4619      	mov	r1, r3
 800c92c:	4870      	ldr	r0, [pc, #448]	@ (800caf0 <HAL_SPI_MspInit+0x238>)
 800c92e:	f7f5 f8ad 	bl	8001a8c <HAL_GPIO_Init>
  }

  if(spiHandle->Instance==SPI2)
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a6f      	ldr	r2, [pc, #444]	@ (800caf4 <HAL_SPI_MspInit+0x23c>)
 800c938:	4293      	cmp	r3, r2
 800c93a:	d13b      	bne.n	800c9b4 <HAL_SPI_MspInit+0xfc>
  {

    __HAL_RCC_SPI2_CLK_ENABLE();
 800c93c:	2300      	movs	r3, #0
 800c93e:	61bb      	str	r3, [r7, #24]
 800c940:	4b6a      	ldr	r3, [pc, #424]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c944:	4a69      	ldr	r2, [pc, #420]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c94a:	6413      	str	r3, [r2, #64]	@ 0x40
 800c94c:	4b67      	ldr	r3, [pc, #412]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c954:	61bb      	str	r3, [r7, #24]
 800c956:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c958:	2300      	movs	r3, #0
 800c95a:	617b      	str	r3, [r7, #20]
 800c95c:	4b63      	ldr	r3, [pc, #396]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c95e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c960:	4a62      	ldr	r2, [pc, #392]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c962:	f043 0302 	orr.w	r3, r3, #2
 800c966:	6313      	str	r3, [r2, #48]	@ 0x30
 800c968:	4b60      	ldr	r3, [pc, #384]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c96c:	f003 0302 	and.w	r3, r3, #2
 800c970:	617b      	str	r3, [r7, #20]
 800c972:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c974:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800c978:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c97a:	2302      	movs	r3, #2
 800c97c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c97e:	2300      	movs	r3, #0
 800c980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c982:	2303      	movs	r3, #3
 800c984:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800c986:	2305      	movs	r3, #5
 800c988:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c98a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c98e:	4619      	mov	r1, r3
 800c990:	4859      	ldr	r0, [pc, #356]	@ (800caf8 <HAL_SPI_MspInit+0x240>)
 800c992:	f7f5 f87b 	bl	8001a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800c996:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c99a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800c99c:	2301      	movs	r3, #1
 800c99e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c9a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4852      	ldr	r0, [pc, #328]	@ (800caf8 <HAL_SPI_MspInit+0x240>)
 800c9b0:	f7f5 f86c 	bl	8001a8c <HAL_GPIO_Init>

  }
  if(spiHandle->Instance==SPI3)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4a50      	ldr	r2, [pc, #320]	@ (800cafc <HAL_SPI_MspInit+0x244>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	f040 8090 	bne.w	800cae0 <HAL_SPI_MspInit+0x228>
  {
    __HAL_RCC_SPI3_CLK_ENABLE();
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	613b      	str	r3, [r7, #16]
 800c9c4:	4b49      	ldr	r3, [pc, #292]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9c8:	4a48      	ldr	r2, [pc, #288]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c9ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9ce:	6413      	str	r3, [r2, #64]	@ 0x40
 800c9d0:	4b46      	ldr	r3, [pc, #280]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c9d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c9d8:	613b      	str	r3, [r7, #16]
 800c9da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9dc:	2300      	movs	r3, #0
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	4b42      	ldr	r3, [pc, #264]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c9e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9e4:	4a41      	ldr	r2, [pc, #260]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c9e6:	f043 0302 	orr.w	r3, r3, #2
 800c9ea:	6313      	str	r3, [r2, #48]	@ 0x30
 800c9ec:	4b3f      	ldr	r3, [pc, #252]	@ (800caec <HAL_SPI_MspInit+0x234>)
 800c9ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9f0:	f003 0302 	and.w	r3, r3, #2
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800c9f8:	2338      	movs	r3, #56	@ 0x38
 800c9fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c9fc:	2302      	movs	r3, #2
 800c9fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca00:	2300      	movs	r3, #0
 800ca02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca04:	2303      	movs	r3, #3
 800ca06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800ca08:	2306      	movs	r3, #6
 800ca0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ca10:	4619      	mov	r1, r3
 800ca12:	4839      	ldr	r0, [pc, #228]	@ (800caf8 <HAL_SPI_MspInit+0x240>)
 800ca14:	f7f5 f83a 	bl	8001a8c <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800ca18:	4b39      	ldr	r3, [pc, #228]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca1a:	4a3a      	ldr	r2, [pc, #232]	@ (800cb04 <HAL_SPI_MspInit+0x24c>)
 800ca1c:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800ca1e:	4b38      	ldr	r3, [pc, #224]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca20:	2200      	movs	r2, #0
 800ca22:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca24:	4b36      	ldr	r3, [pc, #216]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca26:	2200      	movs	r2, #0
 800ca28:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca2a:	4b35      	ldr	r3, [pc, #212]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ca30:	4b33      	ldr	r3, [pc, #204]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ca36:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca38:	4b31      	ldr	r3, [pc, #196]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca3e:	4b30      	ldr	r3, [pc, #192]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800ca44:	4b2e      	ldr	r3, [pc, #184]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800ca4a:	4b2d      	ldr	r3, [pc, #180]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ca50:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ca52:	4b2b      	ldr	r3, [pc, #172]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800ca58:	4829      	ldr	r0, [pc, #164]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca5a:	f7f4 fc85 	bl	8001368 <HAL_DMA_Init>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d001      	beq.n	800ca68 <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 800ca64:	f7fc fba4 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4a25      	ldr	r2, [pc, #148]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca6c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800ca6e:	4a24      	ldr	r2, [pc, #144]	@ (800cb00 <HAL_SPI_MspInit+0x248>)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6393      	str	r3, [r2, #56]	@ 0x38

    hdma_spi3_tx.Instance = DMA1_Stream5;
 800ca74:	4b24      	ldr	r3, [pc, #144]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca76:	4a25      	ldr	r2, [pc, #148]	@ (800cb0c <HAL_SPI_MspInit+0x254>)
 800ca78:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800ca7a:	4b23      	ldr	r3, [pc, #140]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ca80:	4b21      	ldr	r3, [pc, #132]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca82:	2240      	movs	r2, #64	@ 0x40
 800ca84:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca86:	4b20      	ldr	r3, [pc, #128]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca88:	2200      	movs	r2, #0
 800ca8a:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800ca8c:	4b1e      	ldr	r3, [pc, #120]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ca92:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ca94:	4b1c      	ldr	r3, [pc, #112]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca96:	2200      	movs	r2, #0
 800ca98:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ca9a:	4b1b      	ldr	r3, [pc, #108]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 800caa0:	4b19      	ldr	r3, [pc, #100]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800caa2:	2200      	movs	r2, #0
 800caa4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800caa6:	4b18      	ldr	r3, [pc, #96]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800caa8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800caac:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800caae:	4b16      	ldr	r3, [pc, #88]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800cab0:	2200      	movs	r2, #0
 800cab2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800cab4:	4814      	ldr	r0, [pc, #80]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800cab6:	f7f4 fc57 	bl	8001368 <HAL_DMA_Init>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <HAL_SPI_MspInit+0x20c>
    {
      Error_Handler();
 800cac0:	f7fc fb76 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4a10      	ldr	r2, [pc, #64]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800cac8:	649a      	str	r2, [r3, #72]	@ 0x48
 800caca:	4a0f      	ldr	r2, [pc, #60]	@ (800cb08 <HAL_SPI_MspInit+0x250>)
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6393      	str	r3, [r2, #56]	@ 0x38

    HAL_NVIC_SetPriority(SPI3_IRQn, 7, 0);
 800cad0:	2200      	movs	r2, #0
 800cad2:	2107      	movs	r1, #7
 800cad4:	2033      	movs	r0, #51	@ 0x33
 800cad6:	f7f4 fc11 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800cada:	2033      	movs	r0, #51	@ 0x33
 800cadc:	f7f4 fc2a 	bl	8001334 <HAL_NVIC_EnableIRQ>

  }
}
 800cae0:	bf00      	nop
 800cae2:	3738      	adds	r7, #56	@ 0x38
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	40013000 	.word	0x40013000
 800caec:	40023800 	.word	0x40023800
 800caf0:	40020000 	.word	0x40020000
 800caf4:	40003800 	.word	0x40003800
 800caf8:	40020400 	.word	0x40020400
 800cafc:	40003c00 	.word	0x40003c00
 800cb00:	20007e04 	.word	0x20007e04
 800cb04:	40026010 	.word	0x40026010
 800cb08:	20007e64 	.word	0x20007e64
 800cb0c:	40026088 	.word	0x40026088

0800cb10 <TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;

TIM_HandleTypeDef htim4;

void TIM3_Init(void)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b08a      	sub	sp, #40	@ 0x28
 800cb14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cb16:	f107 0320 	add.w	r3, r7, #32
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800cb20:	1d3b      	adds	r3, r7, #4
 800cb22:	2200      	movs	r2, #0
 800cb24:	601a      	str	r2, [r3, #0]
 800cb26:	605a      	str	r2, [r3, #4]
 800cb28:	609a      	str	r2, [r3, #8]
 800cb2a:	60da      	str	r2, [r3, #12]
 800cb2c:	611a      	str	r2, [r3, #16]
 800cb2e:	615a      	str	r2, [r3, #20]
 800cb30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800cb32:	4b32      	ldr	r3, [pc, #200]	@ (800cbfc <TIM3_Init+0xec>)
 800cb34:	4a32      	ldr	r2, [pc, #200]	@ (800cc00 <TIM3_Init+0xf0>)
 800cb36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800cb38:	4b30      	ldr	r3, [pc, #192]	@ (800cbfc <TIM3_Init+0xec>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cb3e:	4b2f      	ldr	r3, [pc, #188]	@ (800cbfc <TIM3_Init+0xec>)
 800cb40:	2200      	movs	r2, #0
 800cb42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800cb44:	4b2d      	ldr	r3, [pc, #180]	@ (800cbfc <TIM3_Init+0xec>)
 800cb46:	2200      	movs	r2, #0
 800cb48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cb4a:	4b2c      	ldr	r3, [pc, #176]	@ (800cbfc <TIM3_Init+0xec>)
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cb50:	4b2a      	ldr	r3, [pc, #168]	@ (800cbfc <TIM3_Init+0xec>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800cb56:	4829      	ldr	r0, [pc, #164]	@ (800cbfc <TIM3_Init+0xec>)
 800cb58:	f7f7 fdcc 	bl	80046f4 <HAL_TIM_PWM_Init>
 800cb5c:	4603      	mov	r3, r0
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <TIM3_Init+0x56>
  {
    Error_Handler();
 800cb62:	f7fc fb25 	bl	80091b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cb66:	2300      	movs	r3, #0
 800cb68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800cb6e:	f107 0320 	add.w	r3, r7, #32
 800cb72:	4619      	mov	r1, r3
 800cb74:	4821      	ldr	r0, [pc, #132]	@ (800cbfc <TIM3_Init+0xec>)
 800cb76:	f7f8 fc93 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <TIM3_Init+0x74>
  {
    Error_Handler();
 800cb80:	f7fc fb16 	bl	80091b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800cb84:	2360      	movs	r3, #96	@ 0x60
 800cb86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800cb94:	1d3b      	adds	r3, r7, #4
 800cb96:	2200      	movs	r2, #0
 800cb98:	4619      	mov	r1, r3
 800cb9a:	4818      	ldr	r0, [pc, #96]	@ (800cbfc <TIM3_Init+0xec>)
 800cb9c:	f7f7 ffb2 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d001      	beq.n	800cbaa <TIM3_Init+0x9a>
  {
    Error_Handler();
 800cba6:	f7fc fb03 	bl	80091b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800cbaa:	1d3b      	adds	r3, r7, #4
 800cbac:	2204      	movs	r2, #4
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4812      	ldr	r0, [pc, #72]	@ (800cbfc <TIM3_Init+0xec>)
 800cbb2:	f7f7 ffa7 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <TIM3_Init+0xb0>
  {
    Error_Handler();
 800cbbc:	f7fc faf8 	bl	80091b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800cbc0:	1d3b      	adds	r3, r7, #4
 800cbc2:	2208      	movs	r2, #8
 800cbc4:	4619      	mov	r1, r3
 800cbc6:	480d      	ldr	r0, [pc, #52]	@ (800cbfc <TIM3_Init+0xec>)
 800cbc8:	f7f7 ff9c 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800cbcc:	4603      	mov	r3, r0
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d001      	beq.n	800cbd6 <TIM3_Init+0xc6>
  {
    Error_Handler();
 800cbd2:	f7fc faed 	bl	80091b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800cbd6:	1d3b      	adds	r3, r7, #4
 800cbd8:	220c      	movs	r2, #12
 800cbda:	4619      	mov	r1, r3
 800cbdc:	4807      	ldr	r0, [pc, #28]	@ (800cbfc <TIM3_Init+0xec>)
 800cbde:	f7f7 ff91 	bl	8004b04 <HAL_TIM_PWM_ConfigChannel>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d001      	beq.n	800cbec <TIM3_Init+0xdc>
  {
    Error_Handler();
 800cbe8:	f7fc fae2 	bl	80091b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800cbec:	4803      	ldr	r0, [pc, #12]	@ (800cbfc <TIM3_Init+0xec>)
 800cbee:	f000 f92d 	bl	800ce4c <HAL_TIM_MspPostInit>

}
 800cbf2:	bf00      	nop
 800cbf4:	3728      	adds	r7, #40	@ 0x28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
 800cbfa:	bf00      	nop
 800cbfc:	20007f1c 	.word	0x20007f1c
 800cc00:	40000400 	.word	0x40000400

0800cc04 <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b084      	sub	sp, #16
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	4a84      	ldr	r2, [pc, #528]	@ (800ce24 <HAL_TIM_PWM_MspInit+0x220>)
 800cc12:	4293      	cmp	r3, r2
 800cc14:	f040 8102 	bne.w	800ce1c <HAL_TIM_PWM_MspInit+0x218>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cc18:	2300      	movs	r3, #0
 800cc1a:	60fb      	str	r3, [r7, #12]
 800cc1c:	4b82      	ldr	r3, [pc, #520]	@ (800ce28 <HAL_TIM_PWM_MspInit+0x224>)
 800cc1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc20:	4a81      	ldr	r2, [pc, #516]	@ (800ce28 <HAL_TIM_PWM_MspInit+0x224>)
 800cc22:	f043 0302 	orr.w	r3, r3, #2
 800cc26:	6413      	str	r3, [r2, #64]	@ 0x40
 800cc28:	4b7f      	ldr	r3, [pc, #508]	@ (800ce28 <HAL_TIM_PWM_MspInit+0x224>)
 800cc2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc2c:	f003 0302 	and.w	r3, r3, #2
 800cc30:	60fb      	str	r3, [r7, #12]
 800cc32:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800cc34:	4b7d      	ldr	r3, [pc, #500]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc36:	4a7e      	ldr	r2, [pc, #504]	@ (800ce30 <HAL_TIM_PWM_MspInit+0x22c>)
 800cc38:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800cc3a:	4b7c      	ldr	r3, [pc, #496]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc3c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800cc40:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cc42:	4b7a      	ldr	r3, [pc, #488]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc44:	2240      	movs	r2, #64	@ 0x40
 800cc46:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800cc48:	4b78      	ldr	r3, [pc, #480]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800cc4e:	4b77      	ldr	r3, [pc, #476]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cc54:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cc56:	4b75      	ldr	r3, [pc, #468]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cc5c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cc5e:	4b73      	ldr	r3, [pc, #460]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc60:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cc64:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800cc66:	4b71      	ldr	r3, [pc, #452]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc68:	2200      	movs	r2, #0
 800cc6a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800cc6c:	4b6f      	ldr	r3, [pc, #444]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc6e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cc72:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800cc74:	4b6d      	ldr	r3, [pc, #436]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc76:	2204      	movs	r2, #4
 800cc78:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800cc7a:	4b6c      	ldr	r3, [pc, #432]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch1_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800cc80:	4b6a      	ldr	r3, [pc, #424]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch1_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800cc86:	4b69      	ldr	r3, [pc, #420]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc88:	2200      	movs	r2, #0
 800cc8a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800cc8c:	4867      	ldr	r0, [pc, #412]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cc8e:	f7f4 fb6b 	bl	8001368 <HAL_DMA_Init>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d001      	beq.n	800cc9c <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 800cc98:	f7fc fa8a 	bl	80091b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	4a63      	ldr	r2, [pc, #396]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cca0:	625a      	str	r2, [r3, #36]	@ 0x24
 800cca2:	4a62      	ldr	r2, [pc, #392]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a60      	ldr	r2, [pc, #384]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800ccac:	639a      	str	r2, [r3, #56]	@ 0x38
 800ccae:	4a5f      	ldr	r2, [pc, #380]	@ (800ce2c <HAL_TIM_PWM_MspInit+0x228>)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800ccb4:	4b5f      	ldr	r3, [pc, #380]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccb6:	4a60      	ldr	r2, [pc, #384]	@ (800ce38 <HAL_TIM_PWM_MspInit+0x234>)
 800ccb8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800ccba:	4b5e      	ldr	r3, [pc, #376]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccbc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800ccc0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ccc2:	4b5c      	ldr	r3, [pc, #368]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccc4:	2240      	movs	r2, #64	@ 0x40
 800ccc6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ccc8:	4b5a      	ldr	r3, [pc, #360]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800ccce:	4b59      	ldr	r3, [pc, #356]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ccd4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ccd6:	4b57      	ldr	r3, [pc, #348]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccd8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ccdc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ccde:	4b55      	ldr	r3, [pc, #340]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cce0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cce4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800cce6:	4b53      	ldr	r3, [pc, #332]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cce8:	2200      	movs	r2, #0
 800ccea:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800ccec:	4b51      	ldr	r3, [pc, #324]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ccf2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ccf4:	4b4f      	ldr	r3, [pc, #316]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccf6:	2204      	movs	r2, #4
 800ccf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800ccfa:	4b4e      	ldr	r3, [pc, #312]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800cd00:	4b4c      	ldr	r3, [pc, #304]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800cd06:	4b4b      	ldr	r3, [pc, #300]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800cd0c:	4849      	ldr	r0, [pc, #292]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cd0e:	f7f4 fb2b 	bl	8001368 <HAL_DMA_Init>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <HAL_TIM_PWM_MspInit+0x118>
    {
      Error_Handler();
 800cd18:	f7fc fa4a 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	4a45      	ldr	r2, [pc, #276]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cd20:	629a      	str	r2, [r3, #40]	@ 0x28
 800cd22:	4a44      	ldr	r2, [pc, #272]	@ (800ce34 <HAL_TIM_PWM_MspInit+0x230>)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800cd28:	4b44      	ldr	r3, [pc, #272]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd2a:	4a45      	ldr	r2, [pc, #276]	@ (800ce40 <HAL_TIM_PWM_MspInit+0x23c>)
 800cd2c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800cd2e:	4b43      	ldr	r3, [pc, #268]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd30:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800cd34:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cd36:	4b41      	ldr	r3, [pc, #260]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd38:	2240      	movs	r2, #64	@ 0x40
 800cd3a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd3c:	4b3f      	ldr	r3, [pc, #252]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd3e:	2200      	movs	r2, #0
 800cd40:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800cd42:	4b3e      	ldr	r3, [pc, #248]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cd48:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cd4a:	4b3c      	ldr	r3, [pc, #240]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cd50:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cd52:	4b3a      	ldr	r3, [pc, #232]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd54:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cd58:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800cd5a:	4b38      	ldr	r3, [pc, #224]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800cd60:	4b36      	ldr	r3, [pc, #216]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd62:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cd66:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800cd68:	4b34      	ldr	r3, [pc, #208]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd6a:	2204      	movs	r2, #4
 800cd6c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800cd6e:	4b33      	ldr	r3, [pc, #204]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd70:	2200      	movs	r2, #0
 800cd72:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800cd74:	4b31      	ldr	r3, [pc, #196]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800cd7a:	4b30      	ldr	r3, [pc, #192]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800cd80:	482e      	ldr	r0, [pc, #184]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd82:	f7f4 faf1 	bl	8001368 <HAL_DMA_Init>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <HAL_TIM_PWM_MspInit+0x18c>
    {
      Error_Handler();
 800cd8c:	f7fc fa10 	bl	80091b0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a2a      	ldr	r2, [pc, #168]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd94:	62da      	str	r2, [r3, #44]	@ 0x2c
 800cd96:	4a29      	ldr	r2, [pc, #164]	@ (800ce3c <HAL_TIM_PWM_MspInit+0x238>)
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800cd9c:	4b29      	ldr	r3, [pc, #164]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cd9e:	4a2a      	ldr	r2, [pc, #168]	@ (800ce48 <HAL_TIM_PWM_MspInit+0x244>)
 800cda0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800cda2:	4b28      	ldr	r3, [pc, #160]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cda4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800cda8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cdaa:	4b26      	ldr	r3, [pc, #152]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdac:	2240      	movs	r2, #64	@ 0x40
 800cdae:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800cdb0:	4b24      	ldr	r3, [pc, #144]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800cdb6:	4b23      	ldr	r3, [pc, #140]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cdbc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800cdbe:	4b21      	ldr	r3, [pc, #132]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cdc4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800cdc6:	4b1f      	ldr	r3, [pc, #124]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdc8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800cdcc:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800cdce:	4b1d      	ldr	r3, [pc, #116]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800cdd4:	4b1b      	ldr	r3, [pc, #108]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdd6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cdda:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800cddc:	4b19      	ldr	r3, [pc, #100]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdde:	2204      	movs	r2, #4
 800cde0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800cde2:	4b18      	ldr	r3, [pc, #96]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800cde8:	4b16      	ldr	r3, [pc, #88]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdea:	2200      	movs	r2, #0
 800cdec:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800cdee:	4b15      	ldr	r3, [pc, #84]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800cdf4:	4813      	ldr	r0, [pc, #76]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800cdf6:	f7f4 fab7 	bl	8001368 <HAL_DMA_Init>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d001      	beq.n	800ce04 <HAL_TIM_PWM_MspInit+0x200>
    {
      Error_Handler();
 800ce00:	f7fc f9d6 	bl	80091b0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	4a0f      	ldr	r2, [pc, #60]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800ce08:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce0a:	4a0e      	ldr	r2, [pc, #56]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	4a0c      	ldr	r2, [pc, #48]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800ce14:	621a      	str	r2, [r3, #32]
 800ce16:	4a0b      	ldr	r2, [pc, #44]	@ (800ce44 <HAL_TIM_PWM_MspInit+0x240>)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ce1c:	bf00      	nop
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}
 800ce24:	40000400 	.word	0x40000400
 800ce28:	40023800 	.word	0x40023800
 800ce2c:	20007f64 	.word	0x20007f64
 800ce30:	40026070 	.word	0x40026070
 800ce34:	20007fc4 	.word	0x20007fc4
 800ce38:	40026088 	.word	0x40026088
 800ce3c:	20008024 	.word	0x20008024
 800ce40:	400260b8 	.word	0x400260b8
 800ce44:	20008084 	.word	0x20008084
 800ce48:	40026040 	.word	0x40026040

0800ce4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b088      	sub	sp, #32
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce54:	f107 030c 	add.w	r3, r7, #12
 800ce58:	2200      	movs	r2, #0
 800ce5a:	601a      	str	r2, [r3, #0]
 800ce5c:	605a      	str	r2, [r3, #4]
 800ce5e:	609a      	str	r2, [r3, #8]
 800ce60:	60da      	str	r2, [r3, #12]
 800ce62:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4a12      	ldr	r2, [pc, #72]	@ (800ceb4 <HAL_TIM_MspPostInit+0x68>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d11e      	bne.n	800ceac <HAL_TIM_MspPostInit+0x60>
  {
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ce6e:	2300      	movs	r3, #0
 800ce70:	60bb      	str	r3, [r7, #8]
 800ce72:	4b11      	ldr	r3, [pc, #68]	@ (800ceb8 <HAL_TIM_MspPostInit+0x6c>)
 800ce74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce76:	4a10      	ldr	r2, [pc, #64]	@ (800ceb8 <HAL_TIM_MspPostInit+0x6c>)
 800ce78:	f043 0304 	orr.w	r3, r3, #4
 800ce7c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ce7e:	4b0e      	ldr	r3, [pc, #56]	@ (800ceb8 <HAL_TIM_MspPostInit+0x6c>)
 800ce80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce82:	f003 0304 	and.w	r3, r3, #4
 800ce86:	60bb      	str	r3, [r7, #8]
 800ce88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800ce8a:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800ce8e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce90:	2302      	movs	r3, #2
 800ce92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce94:	2300      	movs	r3, #0
 800ce96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cea0:	f107 030c 	add.w	r3, r7, #12
 800cea4:	4619      	mov	r1, r3
 800cea6:	4805      	ldr	r0, [pc, #20]	@ (800cebc <HAL_TIM_MspPostInit+0x70>)
 800cea8:	f7f4 fdf0 	bl	8001a8c <HAL_GPIO_Init>
  }

}
 800ceac:	bf00      	nop
 800ceae:	3720      	adds	r7, #32
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	40000400 	.word	0x40000400
 800ceb8:	40023800 	.word	0x40023800
 800cebc:	40020800 	.word	0x40020800

0800cec0 <TIM3_DMA_Init>:
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_UPDATE]);
  }
}

void TIM3_DMA_Init(void)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800cec6:	2300      	movs	r3, #0
 800cec8:	607b      	str	r3, [r7, #4]
 800ceca:	4b18      	ldr	r3, [pc, #96]	@ (800cf2c <TIM3_DMA_Init+0x6c>)
 800cecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cece:	4a17      	ldr	r2, [pc, #92]	@ (800cf2c <TIM3_DMA_Init+0x6c>)
 800ced0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ced4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ced6:	4b15      	ldr	r3, [pc, #84]	@ (800cf2c <TIM3_DMA_Init+0x6c>)
 800ced8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ceda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cede:	607b      	str	r3, [r7, #4]
 800cee0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800cee2:	2200      	movs	r2, #0
 800cee4:	2100      	movs	r1, #0
 800cee6:	200d      	movs	r0, #13
 800cee8:	f7f4 fa08 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800ceec:	200d      	movs	r0, #13
 800ceee:	f7f4 fa21 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800cef2:	2200      	movs	r2, #0
 800cef4:	2100      	movs	r1, #0
 800cef6:	200f      	movs	r0, #15
 800cef8:	f7f4 fa00 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800cefc:	200f      	movs	r0, #15
 800cefe:	f7f4 fa19 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800cf02:	2200      	movs	r2, #0
 800cf04:	2100      	movs	r1, #0
 800cf06:	2010      	movs	r0, #16
 800cf08:	f7f4 f9f8 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800cf0c:	2010      	movs	r0, #16
 800cf0e:	f7f4 fa11 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800cf12:	2200      	movs	r2, #0
 800cf14:	2100      	movs	r1, #0
 800cf16:	202f      	movs	r0, #47	@ 0x2f
 800cf18:	f7f4 f9f0 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800cf1c:	202f      	movs	r0, #47	@ 0x2f
 800cf1e:	f7f4 fa09 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	40023800 	.word	0x40023800

0800cf30 <TIM4_Init>:

void TIM4_Init(void)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800cf36:	f107 0308 	add.w	r3, r7, #8
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	605a      	str	r2, [r3, #4]
 800cf40:	609a      	str	r2, [r3, #8]
 800cf42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800cf44:	463b      	mov	r3, r7
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]
 800cf4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800cf4c:	4b1d      	ldr	r3, [pc, #116]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf4e:	4a1e      	ldr	r2, [pc, #120]	@ (800cfc8 <TIM4_Init+0x98>)
 800cf50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800cf52:	4b1c      	ldr	r3, [pc, #112]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf54:	2200      	movs	r2, #0
 800cf56:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800cf58:	4b1a      	ldr	r3, [pc, #104]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800cf5e:	4b19      	ldr	r3, [pc, #100]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cf64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800cf66:	4b17      	ldr	r3, [pc, #92]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800cf6c:	4b15      	ldr	r3, [pc, #84]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf6e:	2200      	movs	r2, #0
 800cf70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800cf72:	4814      	ldr	r0, [pc, #80]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf74:	f7f7 fafe 	bl	8004574 <HAL_TIM_Base_Init>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d001      	beq.n	800cf82 <TIM4_Init+0x52>
  {
    Error_Handler();
 800cf7e:	f7fc f917 	bl	80091b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800cf82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cf86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800cf88:	f107 0308 	add.w	r3, r7, #8
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	480d      	ldr	r0, [pc, #52]	@ (800cfc4 <TIM4_Init+0x94>)
 800cf90:	f7f7 fe7a 	bl	8004c88 <HAL_TIM_ConfigClockSource>
 800cf94:	4603      	mov	r3, r0
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d001      	beq.n	800cf9e <TIM4_Init+0x6e>
  {
    Error_Handler();
 800cf9a:	f7fc f909 	bl	80091b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800cfa6:	463b      	mov	r3, r7
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	4806      	ldr	r0, [pc, #24]	@ (800cfc4 <TIM4_Init+0x94>)
 800cfac:	f7f8 fa78 	bl	80054a0 <HAL_TIMEx_MasterConfigSynchronization>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <TIM4_Init+0x8a>
  {
    Error_Handler();
 800cfb6:	f7fc f8fb 	bl	80091b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800cfba:	bf00      	nop
 800cfbc:	3718      	adds	r7, #24
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	200080e4 	.word	0x200080e4
 800cfc8:	40000800 	.word	0x40000800

0800cfcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	4a0e      	ldr	r2, [pc, #56]	@ (800d014 <HAL_TIM_Base_MspInit+0x48>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d115      	bne.n	800d00a <HAL_TIM_Base_MspInit+0x3e>
  {
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800cfde:	2300      	movs	r3, #0
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	4b0d      	ldr	r3, [pc, #52]	@ (800d018 <HAL_TIM_Base_MspInit+0x4c>)
 800cfe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfe6:	4a0c      	ldr	r2, [pc, #48]	@ (800d018 <HAL_TIM_Base_MspInit+0x4c>)
 800cfe8:	f043 0304 	orr.w	r3, r3, #4
 800cfec:	6413      	str	r3, [r2, #64]	@ 0x40
 800cfee:	4b0a      	ldr	r3, [pc, #40]	@ (800d018 <HAL_TIM_Base_MspInit+0x4c>)
 800cff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cff2:	f003 0304 	and.w	r3, r3, #4
 800cff6:	60fb      	str	r3, [r7, #12]
 800cff8:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800cffa:	2200      	movs	r2, #0
 800cffc:	2100      	movs	r1, #0
 800cffe:	201e      	movs	r0, #30
 800d000:	f7f4 f97c 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800d004:	201e      	movs	r0, #30
 800d006:	f7f4 f995 	bl	8001334 <HAL_NVIC_EnableIRQ>
  }
}
 800d00a:	bf00      	nop
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	40000800 	.word	0x40000800
 800d018:	40023800 	.word	0x40023800

0800d01c <MX_USART1_UART_Init>:
  }

}

void MX_USART1_UART_Init(void)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800d020:	4b11      	ldr	r3, [pc, #68]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d022:	4a12      	ldr	r2, [pc, #72]	@ (800d06c <MX_USART1_UART_Init+0x50>)
 800d024:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d026:	4b10      	ldr	r3, [pc, #64]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800d02c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d02e:	4b0e      	ldr	r3, [pc, #56]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d030:	2200      	movs	r2, #0
 800d032:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d034:	4b0c      	ldr	r3, [pc, #48]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d036:	2200      	movs	r2, #0
 800d038:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d03a:	4b0b      	ldr	r3, [pc, #44]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d03c:	2200      	movs	r2, #0
 800d03e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d040:	4b09      	ldr	r3, [pc, #36]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d042:	220c      	movs	r2, #12
 800d044:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d046:	4b08      	ldr	r3, [pc, #32]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d048:	2200      	movs	r2, #0
 800d04a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d04c:	4b06      	ldr	r3, [pc, #24]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d04e:	2200      	movs	r2, #0
 800d050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d052:	4805      	ldr	r0, [pc, #20]	@ (800d068 <MX_USART1_UART_Init+0x4c>)
 800d054:	f7f8 fab4 	bl	80055c0 <HAL_UART_Init>
 800d058:	4603      	mov	r3, r0
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d001      	beq.n	800d062 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d05e:	f7fc f8a7 	bl	80091b0 <Error_Handler>
  }

}
 800d062:	bf00      	nop
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	2000812c 	.word	0x2000812c
 800d06c:	40011000 	.word	0x40011000

0800d070 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b090      	sub	sp, #64	@ 0x40
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d078:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
 800d080:	605a      	str	r2, [r3, #4]
 800d082:	609a      	str	r2, [r3, #8]
 800d084:	60da      	str	r2, [r3, #12]
 800d086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	4a79      	ldr	r2, [pc, #484]	@ (800d274 <HAL_UART_MspInit+0x204>)
 800d08e:	4293      	cmp	r3, r2
 800d090:	d12c      	bne.n	800d0ec <HAL_UART_MspInit+0x7c>
  {

    __HAL_RCC_UART4_CLK_ENABLE();
 800d092:	2300      	movs	r3, #0
 800d094:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d096:	4b78      	ldr	r3, [pc, #480]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d09a:	4a77      	ldr	r2, [pc, #476]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d09c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d0a0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d0a2:	4b75      	ldr	r3, [pc, #468]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d0a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800d0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0b2:	4b71      	ldr	r3, [pc, #452]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d0b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0b6:	4a70      	ldr	r2, [pc, #448]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d0b8:	f043 0301 	orr.w	r3, r3, #1
 800d0bc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d0be:	4b6e      	ldr	r3, [pc, #440]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d0c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0c2:	f003 0301 	and.w	r3, r3, #1
 800d0c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800d0ca:	2303      	movs	r3, #3
 800d0cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0ce:	2302      	movs	r3, #2
 800d0d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0d6:	2303      	movs	r3, #3
 800d0d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800d0da:	2308      	movs	r3, #8
 800d0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d0e2:	4619      	mov	r1, r3
 800d0e4:	4865      	ldr	r0, [pc, #404]	@ (800d27c <HAL_UART_MspInit+0x20c>)
 800d0e6:	f7f4 fcd1 	bl	8001a8c <HAL_GPIO_Init>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);

  }
}
 800d0ea:	e136      	b.n	800d35a <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a63      	ldr	r2, [pc, #396]	@ (800d280 <HAL_UART_MspInit+0x210>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d15c      	bne.n	800d1b0 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	623b      	str	r3, [r7, #32]
 800d0fa:	4b5f      	ldr	r3, [pc, #380]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d0fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0fe:	4a5e      	ldr	r2, [pc, #376]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d100:	f043 0310 	orr.w	r3, r3, #16
 800d104:	6453      	str	r3, [r2, #68]	@ 0x44
 800d106:	4b5c      	ldr	r3, [pc, #368]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d10a:	f003 0310 	and.w	r3, r3, #16
 800d10e:	623b      	str	r3, [r7, #32]
 800d110:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d112:	2300      	movs	r3, #0
 800d114:	61fb      	str	r3, [r7, #28]
 800d116:	4b58      	ldr	r3, [pc, #352]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d11a:	4a57      	ldr	r2, [pc, #348]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d11c:	f043 0301 	orr.w	r3, r3, #1
 800d120:	6313      	str	r3, [r2, #48]	@ 0x30
 800d122:	4b55      	ldr	r3, [pc, #340]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	61fb      	str	r3, [r7, #28]
 800d12c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800d12e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800d132:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d134:	2302      	movs	r3, #2
 800d136:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d138:	2300      	movs	r3, #0
 800d13a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d13c:	2303      	movs	r3, #3
 800d13e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800d140:	2307      	movs	r3, #7
 800d142:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d144:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d148:	4619      	mov	r1, r3
 800d14a:	484c      	ldr	r0, [pc, #304]	@ (800d27c <HAL_UART_MspInit+0x20c>)
 800d14c:	f7f4 fc9e 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800d150:	4b4c      	ldr	r3, [pc, #304]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d152:	4a4d      	ldr	r2, [pc, #308]	@ (800d288 <HAL_UART_MspInit+0x218>)
 800d154:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800d156:	4b4b      	ldr	r3, [pc, #300]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d158:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d15c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d15e:	4b49      	ldr	r3, [pc, #292]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d160:	2200      	movs	r2, #0
 800d162:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d164:	4b47      	ldr	r3, [pc, #284]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d166:	2200      	movs	r2, #0
 800d168:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d16a:	4b46      	ldr	r3, [pc, #280]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d16c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d170:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d172:	4b44      	ldr	r3, [pc, #272]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d174:	2200      	movs	r2, #0
 800d176:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d178:	4b42      	ldr	r3, [pc, #264]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d17a:	2200      	movs	r2, #0
 800d17c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800d17e:	4b41      	ldr	r3, [pc, #260]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d180:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d184:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d186:	4b3f      	ldr	r3, [pc, #252]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d188:	2200      	movs	r2, #0
 800d18a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d18c:	4b3d      	ldr	r3, [pc, #244]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d18e:	2200      	movs	r2, #0
 800d190:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800d192:	483c      	ldr	r0, [pc, #240]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d194:	f7f4 f8e8 	bl	8001368 <HAL_DMA_Init>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d001      	beq.n	800d1a2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 800d19e:	f7fc f807 	bl	80091b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a37      	ldr	r2, [pc, #220]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d1a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d1a8:	4a36      	ldr	r2, [pc, #216]	@ (800d284 <HAL_UART_MspInit+0x214>)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800d1ae:	e0d4      	b.n	800d35a <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART2)
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	4a35      	ldr	r2, [pc, #212]	@ (800d28c <HAL_UART_MspInit+0x21c>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d16e      	bne.n	800d298 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	61bb      	str	r3, [r7, #24]
 800d1be:	4b2e      	ldr	r3, [pc, #184]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d1c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1c2:	4a2d      	ldr	r2, [pc, #180]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d1c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1c8:	6413      	str	r3, [r2, #64]	@ 0x40
 800d1ca:	4b2b      	ldr	r3, [pc, #172]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d1cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d1ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1d2:	61bb      	str	r3, [r7, #24]
 800d1d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	617b      	str	r3, [r7, #20]
 800d1da:	4b27      	ldr	r3, [pc, #156]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d1dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1de:	4a26      	ldr	r2, [pc, #152]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d1e0:	f043 0301 	orr.w	r3, r3, #1
 800d1e4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d1e6:	4b24      	ldr	r3, [pc, #144]	@ (800d278 <HAL_UART_MspInit+0x208>)
 800d1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1ea:	f003 0301 	and.w	r3, r3, #1
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800d1f2:	230c      	movs	r3, #12
 800d1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1f6:	2302      	movs	r3, #2
 800d1f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1fe:	2303      	movs	r3, #3
 800d200:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800d202:	2307      	movs	r3, #7
 800d204:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d20a:	4619      	mov	r1, r3
 800d20c:	481b      	ldr	r0, [pc, #108]	@ (800d27c <HAL_UART_MspInit+0x20c>)
 800d20e:	f7f4 fc3d 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800d212:	4b1f      	ldr	r3, [pc, #124]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d214:	4a1f      	ldr	r2, [pc, #124]	@ (800d294 <HAL_UART_MspInit+0x224>)
 800d216:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800d218:	4b1d      	ldr	r3, [pc, #116]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d21a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d21e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d220:	4b1b      	ldr	r3, [pc, #108]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d222:	2200      	movs	r2, #0
 800d224:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d226:	4b1a      	ldr	r3, [pc, #104]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d228:	2200      	movs	r2, #0
 800d22a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d22c:	4b18      	ldr	r3, [pc, #96]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d22e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d232:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d234:	4b16      	ldr	r3, [pc, #88]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d236:	2200      	movs	r2, #0
 800d238:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d23a:	4b15      	ldr	r3, [pc, #84]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d23c:	2200      	movs	r2, #0
 800d23e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800d240:	4b13      	ldr	r3, [pc, #76]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d242:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d246:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800d248:	4b11      	ldr	r3, [pc, #68]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d24a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800d24e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d250:	4b0f      	ldr	r3, [pc, #60]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d252:	2200      	movs	r2, #0
 800d254:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800d256:	480e      	ldr	r0, [pc, #56]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d258:	f7f4 f886 	bl	8001368 <HAL_DMA_Init>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800d262:	f7fb ffa5 	bl	80091b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	4a09      	ldr	r2, [pc, #36]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d26a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d26c:	4a08      	ldr	r2, [pc, #32]	@ (800d290 <HAL_UART_MspInit+0x220>)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800d272:	e072      	b.n	800d35a <HAL_UART_MspInit+0x2ea>
 800d274:	40004c00 	.word	0x40004c00
 800d278:	40023800 	.word	0x40023800
 800d27c:	40020000 	.word	0x40020000
 800d280:	40011000 	.word	0x40011000
 800d284:	20008174 	.word	0x20008174
 800d288:	40026440 	.word	0x40026440
 800d28c:	40004400 	.word	0x40004400
 800d290:	200081d4 	.word	0x200081d4
 800d294:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a31      	ldr	r2, [pc, #196]	@ (800d364 <HAL_UART_MspInit+0x2f4>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d15b      	bne.n	800d35a <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	613b      	str	r3, [r7, #16]
 800d2a6:	4b30      	ldr	r3, [pc, #192]	@ (800d368 <HAL_UART_MspInit+0x2f8>)
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2aa:	4a2f      	ldr	r2, [pc, #188]	@ (800d368 <HAL_UART_MspInit+0x2f8>)
 800d2ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d2b0:	6413      	str	r3, [r2, #64]	@ 0x40
 800d2b2:	4b2d      	ldr	r3, [pc, #180]	@ (800d368 <HAL_UART_MspInit+0x2f8>)
 800d2b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d2b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d2ba:	613b      	str	r3, [r7, #16]
 800d2bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d2be:	2300      	movs	r3, #0
 800d2c0:	60fb      	str	r3, [r7, #12]
 800d2c2:	4b29      	ldr	r3, [pc, #164]	@ (800d368 <HAL_UART_MspInit+0x2f8>)
 800d2c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2c6:	4a28      	ldr	r2, [pc, #160]	@ (800d368 <HAL_UART_MspInit+0x2f8>)
 800d2c8:	f043 0304 	orr.w	r3, r3, #4
 800d2cc:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2ce:	4b26      	ldr	r3, [pc, #152]	@ (800d368 <HAL_UART_MspInit+0x2f8>)
 800d2d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2d2:	f003 0304 	and.w	r3, r3, #4
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800d2da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800d2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e0:	2302      	movs	r3, #2
 800d2e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d2ec:	2307      	movs	r3, #7
 800d2ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d2f0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	481d      	ldr	r0, [pc, #116]	@ (800d36c <HAL_UART_MspInit+0x2fc>)
 800d2f8:	f7f4 fbc8 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800d2fc:	4b1c      	ldr	r3, [pc, #112]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d2fe:	4a1d      	ldr	r2, [pc, #116]	@ (800d374 <HAL_UART_MspInit+0x304>)
 800d300:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800d302:	4b1b      	ldr	r3, [pc, #108]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d304:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800d308:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d30a:	4b19      	ldr	r3, [pc, #100]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d30c:	2200      	movs	r2, #0
 800d30e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d310:	4b17      	ldr	r3, [pc, #92]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d312:	2200      	movs	r2, #0
 800d314:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800d316:	4b16      	ldr	r3, [pc, #88]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d31c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d31e:	4b14      	ldr	r3, [pc, #80]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d320:	2200      	movs	r2, #0
 800d322:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d324:	4b12      	ldr	r3, [pc, #72]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d326:	2200      	movs	r2, #0
 800d328:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800d32a:	4b11      	ldr	r3, [pc, #68]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d32c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d330:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800d332:	4b0f      	ldr	r3, [pc, #60]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d334:	2200      	movs	r2, #0
 800d336:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d338:	4b0d      	ldr	r3, [pc, #52]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d33a:	2200      	movs	r2, #0
 800d33c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800d33e:	480c      	ldr	r0, [pc, #48]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d340:	f7f4 f812 	bl	8001368 <HAL_DMA_Init>
 800d344:	4603      	mov	r3, r0
 800d346:	2b00      	cmp	r3, #0
 800d348:	d001      	beq.n	800d34e <HAL_UART_MspInit+0x2de>
      Error_Handler();
 800d34a:	f7fb ff31 	bl	80091b0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4a07      	ldr	r2, [pc, #28]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d352:	63da      	str	r2, [r3, #60]	@ 0x3c
 800d354:	4a06      	ldr	r2, [pc, #24]	@ (800d370 <HAL_UART_MspInit+0x300>)
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800d35a:	bf00      	nop
 800d35c:	3740      	adds	r7, #64	@ 0x40
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	40004800 	.word	0x40004800
 800d368:	40023800 	.word	0x40023800
 800d36c:	40020800 	.word	0x40020800
 800d370:	20008234 	.word	0x20008234
 800d374:	40026028 	.word	0x40026028

0800d378 <uart_dma_init>:
    HAL_DMA_DeInit(uartHandle->hdmarx);

  }
}

void uart_dma_init(void) {
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800d37e:	2300      	movs	r3, #0
 800d380:	607b      	str	r3, [r7, #4]
 800d382:	4b0c      	ldr	r3, [pc, #48]	@ (800d3b4 <uart_dma_init+0x3c>)
 800d384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d386:	4a0b      	ldr	r2, [pc, #44]	@ (800d3b4 <uart_dma_init+0x3c>)
 800d388:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d38c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d38e:	4b09      	ldr	r3, [pc, #36]	@ (800d3b4 <uart_dma_init+0x3c>)
 800d390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d396:	607b      	str	r3, [r7, #4]
 800d398:	687b      	ldr	r3, [r7, #4]
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800d39a:	2200      	movs	r2, #0
 800d39c:	2100      	movs	r1, #0
 800d39e:	203a      	movs	r0, #58	@ 0x3a
 800d3a0:	f7f3 ffac 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800d3a4:	203a      	movs	r0, #58	@ 0x3a
 800d3a6:	f7f3 ffc5 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800d3aa:	bf00      	nop
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}
 800d3b2:	bf00      	nop
 800d3b4:	40023800 	.word	0x40023800

0800d3b8 <vl53l1xInit>:
// Set the start address 1 step after the VL53L0 dynamic addresses
static int nextI2CAddress = VL53L1X_DEFAULT_ADDRESS+1;


bool vl53l1xInit(VL53L1_Dev_t *pdev, I2C_HandleTypeDef *I2Cx)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	73fb      	strb	r3, [r7, #15]

  pdev->I2Cx = I2Cx;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	683a      	ldr	r2, [r7, #0]
 800d3ca:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c
  pdev->devAddr = VL53L1X_DEFAULT_ADDRESS;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	2229      	movs	r2, #41	@ 0x29
 800d3d2:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

  /* Move initialized sensor to a new I2C address */
  int newAddress;

  taskENTER_CRITICAL();
 800d3d6:	f7fb fb49 	bl	8008a6c <vPortEnterCritical>
  newAddress = nextI2CAddress++;
 800d3da:	4b13      	ldr	r3, [pc, #76]	@ (800d428 <vl53l1xInit+0x70>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	1c5a      	adds	r2, r3, #1
 800d3e0:	4911      	ldr	r1, [pc, #68]	@ (800d428 <vl53l1xInit+0x70>)
 800d3e2:	600a      	str	r2, [r1, #0]
 800d3e4:	60bb      	str	r3, [r7, #8]
  taskEXIT_CRITICAL();
 800d3e6:	f7fb fb6f 	bl	8008ac8 <vPortExitCritical>

  vl53l1xSetI2CAddress(pdev, newAddress);
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	4619      	mov	r1, r3
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f000 f81b 	bl	800d42c <vl53l1xSetI2CAddress>

  status = VL53L1_DataInit(pdev);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f008 fd76 	bl	8015ee8 <VL53L1_DataInit>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]

  if (status == VL53L1_ERROR_NONE)
 800d400:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d104      	bne.n	800d412 <vl53l1xInit+0x5a>
  {
    status = VL53L1_StaticInit(pdev);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f008 fddc 	bl	8015fc6 <VL53L1_StaticInit>
 800d40e:	4603      	mov	r3, r0
 800d410:	73fb      	strb	r3, [r7, #15]
  }

  return status == VL53L1_ERROR_NONE;
 800d412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d416:	2b00      	cmp	r3, #0
 800d418:	bf0c      	ite	eq
 800d41a:	2301      	moveq	r3, #1
 800d41c:	2300      	movne	r3, #0
 800d41e:	b2db      	uxtb	r3, r3
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}
 800d428:	20000018 	.word	0x20000018

0800d42c <vl53l1xSetI2CAddress>:
 * Any subsequent communication will be on the new address
 * The address passed is the 7bit I2C address from LSB (ie. without the
 * read/write bit)
 */
VL53L1_Error vl53l1xSetI2CAddress(VL53L1_Dev_t* pdev, uint8_t address)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	460b      	mov	r3, r1
 800d436:	70fb      	strb	r3, [r7, #3]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800d438:	2300      	movs	r3, #0
 800d43a:	73fb      	strb	r3, [r7, #15]

  status = VL53L1_SetDeviceAddress(pdev, address);
 800d43c:	78fb      	ldrb	r3, [r7, #3]
 800d43e:	4619      	mov	r1, r3
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f008 fd3b 	bl	8015ebc <VL53L1_SetDeviceAddress>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]
  pdev->devAddr = address;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	78fa      	ldrb	r2, [r7, #3]
 800d44e:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  return  status;
 800d452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <VL53L1_WriteMulti>:
VL53L1_Error VL53L1_WriteMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800d45e:	b590      	push	{r4, r7, lr}
 800d460:	b089      	sub	sp, #36	@ 0x24
 800d462:	af02      	add	r7, sp, #8
 800d464:	60f8      	str	r0, [r7, #12]
 800d466:	607a      	str	r2, [r7, #4]
 800d468:	603b      	str	r3, [r7, #0]
 800d46a:	460b      	mov	r3, r1
 800d46c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800d46e:	2300      	movs	r3, #0
 800d470:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	b29c      	uxth	r4, r3
 800d482:	897a      	ldrh	r2, [r7, #10]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	4623      	mov	r3, r4
 800d48a:	f7fe ff29 	bl	800c2e0 <i2cdevWriteReg16>
 800d48e:	4603      	mov	r3, r0
 800d490:	f083 0301 	eor.w	r3, r3, #1
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b00      	cmp	r3, #0
 800d498:	d001      	beq.n	800d49e <VL53L1_WriteMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d49a:	23f3      	movs	r3, #243	@ 0xf3
 800d49c:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800d49e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	371c      	adds	r7, #28
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd90      	pop	{r4, r7, pc}

0800d4aa <VL53L1_ReadMulti>:
VL53L1_Error VL53L1_ReadMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800d4aa:	b590      	push	{r4, r7, lr}
 800d4ac:	b089      	sub	sp, #36	@ 0x24
 800d4ae:	af02      	add	r7, sp, #8
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	603b      	str	r3, [r7, #0]
 800d4b6:	460b      	mov	r3, r1
 800d4b8:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	b29c      	uxth	r4, r3
 800d4ce:	897a      	ldrh	r2, [r7, #10]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	4623      	mov	r3, r4
 800d4d6:	f7fe fed9 	bl	800c28c <i2cdevReadReg16>
 800d4da:	4603      	mov	r3, r0
 800d4dc:	f083 0301 	eor.w	r3, r3, #1
 800d4e0:	b2db      	uxtb	r3, r3
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <VL53L1_ReadMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d4e6:	23f3      	movs	r3, #243	@ 0xf3
 800d4e8:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800d4ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	371c      	adds	r7, #28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd90      	pop	{r4, r7, pc}

0800d4f6 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t       data)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b086      	sub	sp, #24
 800d4fa:	af02      	add	r7, sp, #8
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	460b      	mov	r3, r1
 800d500:	807b      	strh	r3, [r7, #2]
 800d502:	4613      	mov	r3, r2
 800d504:	707b      	strb	r3, [r7, #1]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800d506:	2300      	movs	r3, #0
 800d508:	73fb      	strb	r3, [r7, #15]

	if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, 1, &data))
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800d516:	887a      	ldrh	r2, [r7, #2]
 800d518:	1c7b      	adds	r3, r7, #1
 800d51a:	9300      	str	r3, [sp, #0]
 800d51c:	2301      	movs	r3, #1
 800d51e:	f7fe fedf 	bl	800c2e0 <i2cdevWriteReg16>
 800d522:	4603      	mov	r3, r0
 800d524:	f083 0301 	eor.w	r3, r3, #1
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <VL53L1_WrByte+0x3c>
	{
	  status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d52e:	23f3      	movs	r3, #243	@ 0xf3
 800d530:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800d532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3710      	adds	r7, #16
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}
	...

0800d540 <VL53L1_RdByte>:

VL53L1_Error VL53L1_RdByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b088      	sub	sp, #32
 800d544:	af02      	add	r7, sp, #8
 800d546:	60f8      	str	r0, [r7, #12]
 800d548:	460b      	mov	r3, r1
 800d54a:	607a      	str	r2, [r7, #4]
 800d54c:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800d54e:	2300      	movs	r3, #0
 800d550:	75fb      	strb	r3, [r7, #23]
  static uint8_t r8data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 1, &r8data))
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800d55e:	897a      	ldrh	r2, [r7, #10]
 800d560:	4b0b      	ldr	r3, [pc, #44]	@ (800d590 <VL53L1_RdByte+0x50>)
 800d562:	9300      	str	r3, [sp, #0]
 800d564:	2301      	movs	r3, #1
 800d566:	f7fe fe91 	bl	800c28c <i2cdevReadReg16>
 800d56a:	4603      	mov	r3, r0
 800d56c:	f083 0301 	eor.w	r3, r3, #1
 800d570:	b2db      	uxtb	r3, r3
 800d572:	2b00      	cmp	r3, #0
 800d574:	d001      	beq.n	800d57a <VL53L1_RdByte+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d576:	23f3      	movs	r3, #243	@ 0xf3
 800d578:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r8data;
 800d57a:	4b05      	ldr	r3, [pc, #20]	@ (800d590 <VL53L1_RdByte+0x50>)
 800d57c:	781a      	ldrb	r2, [r3, #0]
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	701a      	strb	r2, [r3, #0]

  return status;
 800d582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d586:	4618      	mov	r0, r3
 800d588:	3718      	adds	r7, #24
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	20008294 	.word	0x20008294

0800d594 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint16_t     *pdata)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b088      	sub	sp, #32
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	460b      	mov	r3, r1
 800d59e:	607a      	str	r2, [r7, #4]
 800d5a0:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	75fb      	strb	r3, [r7, #23]
  static uint16_t r16data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 2, (uint8_t *)&r16data))
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800d5b2:	897a      	ldrh	r2, [r7, #10]
 800d5b4:	4b0b      	ldr	r3, [pc, #44]	@ (800d5e4 <VL53L1_RdWord+0x50>)
 800d5b6:	9300      	str	r3, [sp, #0]
 800d5b8:	2302      	movs	r3, #2
 800d5ba:	f7fe fe67 	bl	800c28c <i2cdevReadReg16>
 800d5be:	4603      	mov	r3, r0
 800d5c0:	f083 0301 	eor.w	r3, r3, #1
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d001      	beq.n	800d5ce <VL53L1_RdWord+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800d5ca:	23f3      	movs	r3, #243	@ 0xf3
 800d5cc:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r16data;
 800d5ce:	4b05      	ldr	r3, [pc, #20]	@ (800d5e4 <VL53L1_RdWord+0x50>)
 800d5d0:	881a      	ldrh	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	801a      	strh	r2, [r3, #0]
  
  return status;
 800d5d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5da:	4618      	mov	r0, r3
 800d5dc:	3718      	adds	r7, #24
 800d5de:	46bd      	mov	sp, r7
 800d5e0:	bd80      	pop	{r7, pc}
 800d5e2:	bf00      	nop
 800d5e4:	20008296 	.word	0x20008296

0800d5e8 <attitude_task_test>:
extern qmc_typedef qmc;




static void attitude_task_test(void *param){
 800d5e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]

		/*
		 * Scale for IMU
		 */

		scale_.acc_x = imu.acc[0] * 0.00239501953125f;
 800d5f2:	4bb1      	ldr	r3, [pc, #708]	@ (800d8b8 <attitude_task_test+0x2d0>)
 800d5f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800d5f8:	ee07 3a90 	vmov	s15, r3
 800d5fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d600:	ed9f 7aae 	vldr	s14, [pc, #696]	@ 800d8bc <attitude_task_test+0x2d4>
 800d604:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d608:	4bad      	ldr	r3, [pc, #692]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d60a:	edc3 7a03 	vstr	s15, [r3, #12]
		scale_.acc_y = imu.acc[1] * 0.00239501953125f;
 800d60e:	4baa      	ldr	r3, [pc, #680]	@ (800d8b8 <attitude_task_test+0x2d0>)
 800d610:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800d614:	ee07 3a90 	vmov	s15, r3
 800d618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d61c:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 800d8bc <attitude_task_test+0x2d4>
 800d620:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d624:	4ba6      	ldr	r3, [pc, #664]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d626:	edc3 7a04 	vstr	s15, [r3, #16]
		scale_.acc_z = imu.acc[2] * 0.00239501953125f;
 800d62a:	4ba3      	ldr	r3, [pc, #652]	@ (800d8b8 <attitude_task_test+0x2d0>)
 800d62c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800d630:	ee07 3a90 	vmov	s15, r3
 800d634:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d638:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 800d8bc <attitude_task_test+0x2d4>
 800d63c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d640:	4b9f      	ldr	r3, [pc, #636]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d642:	edc3 7a05 	vstr	s15, [r3, #20]

		scale_.gyro_x = imu.gyr[0] * 0.00026632423f;
 800d646:	4b9c      	ldr	r3, [pc, #624]	@ (800d8b8 <attitude_task_test+0x2d0>)
 800d648:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d654:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800d8c4 <attitude_task_test+0x2dc>
 800d658:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d65c:	4b98      	ldr	r3, [pc, #608]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d65e:	edc3 7a00 	vstr	s15, [r3]
		scale_.gyro_y = imu.gyr[1] * 0.00026632423f;
 800d662:	4b95      	ldr	r3, [pc, #596]	@ (800d8b8 <attitude_task_test+0x2d0>)
 800d664:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800d668:	ee07 3a90 	vmov	s15, r3
 800d66c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d670:	ed9f 7a94 	vldr	s14, [pc, #592]	@ 800d8c4 <attitude_task_test+0x2dc>
 800d674:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d678:	4b91      	ldr	r3, [pc, #580]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d67a:	edc3 7a01 	vstr	s15, [r3, #4]
		scale_.gyro_z = imu.gyr[2] * 0.00026632423f;
 800d67e:	4b8e      	ldr	r3, [pc, #568]	@ (800d8b8 <attitude_task_test+0x2d0>)
 800d680:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800d684:	ee07 3a90 	vmov	s15, r3
 800d688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d68c:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800d8c4 <attitude_task_test+0x2dc>
 800d690:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d694:	4b8a      	ldr	r3, [pc, #552]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d696:	edc3 7a02 	vstr	s15, [r3, #8]

		MadgwickAHRSupdate(scale_.gyro_x, scale_.gyro_y, scale_.gyro_z,
 800d69a:	4b89      	ldr	r3, [pc, #548]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d69c:	edd3 7a00 	vldr	s15, [r3]
 800d6a0:	4b87      	ldr	r3, [pc, #540]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d6a2:	ed93 7a01 	vldr	s14, [r3, #4]
 800d6a6:	4b86      	ldr	r3, [pc, #536]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d6a8:	edd3 6a02 	vldr	s13, [r3, #8]
 800d6ac:	4b84      	ldr	r3, [pc, #528]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d6ae:	ed93 6a03 	vldr	s12, [r3, #12]
 800d6b2:	4b83      	ldr	r3, [pc, #524]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d6b4:	edd3 5a04 	vldr	s11, [r3, #16]
 800d6b8:	4b81      	ldr	r3, [pc, #516]	@ (800d8c0 <attitude_task_test+0x2d8>)
 800d6ba:	ed93 5a04 	vldr	s10, [r3, #16]
						scale_.acc_x, scale_.acc_y, scale_.acc_y,
						qmc.qmc_x, qmc.qmc_y,qmc.qmc_z);
 800d6be:	4b82      	ldr	r3, [pc, #520]	@ (800d8c8 <attitude_task_test+0x2e0>)
 800d6c0:	f9b3 3000 	ldrsh.w	r3, [r3]
		MadgwickAHRSupdate(scale_.gyro_x, scale_.gyro_y, scale_.gyro_z,
 800d6c4:	ee04 3a90 	vmov	s9, r3
 800d6c8:	eef8 4ae4 	vcvt.f32.s32	s9, s9
						qmc.qmc_x, qmc.qmc_y,qmc.qmc_z);
 800d6cc:	4b7e      	ldr	r3, [pc, #504]	@ (800d8c8 <attitude_task_test+0x2e0>)
 800d6ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		MadgwickAHRSupdate(scale_.gyro_x, scale_.gyro_y, scale_.gyro_z,
 800d6d2:	ee04 3a10 	vmov	s8, r3
 800d6d6:	eef8 3ac4 	vcvt.f32.s32	s7, s8
						qmc.qmc_x, qmc.qmc_y,qmc.qmc_z);
 800d6da:	4b7b      	ldr	r3, [pc, #492]	@ (800d8c8 <attitude_task_test+0x2e0>)
 800d6dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		MadgwickAHRSupdate(scale_.gyro_x, scale_.gyro_y, scale_.gyro_z,
 800d6e0:	ee04 3a10 	vmov	s8, r3
 800d6e4:	eeb8 4ac4 	vcvt.f32.s32	s8, s8
 800d6e8:	eeb0 3a64 	vmov.f32	s6, s9
 800d6ec:	eef0 2a45 	vmov.f32	s5, s10
 800d6f0:	eeb0 2a65 	vmov.f32	s4, s11
 800d6f4:	eef0 1a46 	vmov.f32	s3, s12
 800d6f8:	eeb0 1a66 	vmov.f32	s2, s13
 800d6fc:	eef0 0a47 	vmov.f32	s1, s14
 800d700:	eeb0 0a67 	vmov.f32	s0, s15
 800d704:	f7fb ffd4 	bl	80096b0 <MadgwickAHRSupdate>
		angle__.roll = asin(2 * ((q0 * q2) - (q1 * q3)))* 57.29577951f;
 800d708:	4b70      	ldr	r3, [pc, #448]	@ (800d8cc <attitude_task_test+0x2e4>)
 800d70a:	ed93 7a00 	vldr	s14, [r3]
 800d70e:	4b70      	ldr	r3, [pc, #448]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d710:	edd3 7a00 	vldr	s15, [r3]
 800d714:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d718:	4b6e      	ldr	r3, [pc, #440]	@ (800d8d4 <attitude_task_test+0x2ec>)
 800d71a:	edd3 6a00 	vldr	s13, [r3]
 800d71e:	4b6e      	ldr	r3, [pc, #440]	@ (800d8d8 <attitude_task_test+0x2f0>)
 800d720:	edd3 7a00 	vldr	s15, [r3]
 800d724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d72c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d730:	ee17 0a90 	vmov	r0, s15
 800d734:	f7f2 feba 	bl	80004ac <__aeabi_f2d>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	ec43 2b10 	vmov	d0, r2, r3
 800d740:	f00d fccc 	bl	801b0dc <asin>
 800d744:	ec51 0b10 	vmov	r0, r1, d0
 800d748:	a359      	add	r3, pc, #356	@ (adr r3, 800d8b0 <attitude_task_test+0x2c8>)
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f7f2 ff05 	bl	800055c <__aeabi_dmul>
 800d752:	4602      	mov	r2, r0
 800d754:	460b      	mov	r3, r1
 800d756:	4610      	mov	r0, r2
 800d758:	4619      	mov	r1, r3
 800d75a:	f7f3 f9af 	bl	8000abc <__aeabi_d2f>
 800d75e:	4603      	mov	r3, r0
 800d760:	4a5e      	ldr	r2, [pc, #376]	@ (800d8dc <attitude_task_test+0x2f4>)
 800d762:	6013      	str	r3, [r2, #0]
		angle__.pitch = -atan2( 2 * ( (q0 * q1) + (q2 * q3)), 1 - (2 * ((q1 * q1) + (q2 * q2)))) * 57.29577951f; //degrees
 800d764:	4b59      	ldr	r3, [pc, #356]	@ (800d8cc <attitude_task_test+0x2e4>)
 800d766:	ed93 7a00 	vldr	s14, [r3]
 800d76a:	4b5a      	ldr	r3, [pc, #360]	@ (800d8d4 <attitude_task_test+0x2ec>)
 800d76c:	edd3 7a00 	vldr	s15, [r3]
 800d770:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d774:	4b56      	ldr	r3, [pc, #344]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d776:	edd3 6a00 	vldr	s13, [r3]
 800d77a:	4b57      	ldr	r3, [pc, #348]	@ (800d8d8 <attitude_task_test+0x2f0>)
 800d77c:	edd3 7a00 	vldr	s15, [r3]
 800d780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d784:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d788:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d78c:	ee17 0a90 	vmov	r0, s15
 800d790:	f7f2 fe8c 	bl	80004ac <__aeabi_f2d>
 800d794:	4680      	mov	r8, r0
 800d796:	4689      	mov	r9, r1
 800d798:	4b4e      	ldr	r3, [pc, #312]	@ (800d8d4 <attitude_task_test+0x2ec>)
 800d79a:	ed93 7a00 	vldr	s14, [r3]
 800d79e:	4b4d      	ldr	r3, [pc, #308]	@ (800d8d4 <attitude_task_test+0x2ec>)
 800d7a0:	edd3 7a00 	vldr	s15, [r3]
 800d7a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7a8:	4b49      	ldr	r3, [pc, #292]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d7aa:	edd3 6a00 	vldr	s13, [r3]
 800d7ae:	4b48      	ldr	r3, [pc, #288]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d7b0:	edd3 7a00 	vldr	s15, [r3]
 800d7b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d7c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d7c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7c8:	ee17 0a90 	vmov	r0, s15
 800d7cc:	f7f2 fe6e 	bl	80004ac <__aeabi_f2d>
 800d7d0:	4602      	mov	r2, r0
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	ec43 2b11 	vmov	d1, r2, r3
 800d7d8:	ec49 8b10 	vmov	d0, r8, r9
 800d7dc:	f00d fcb2 	bl	801b144 <atan2>
 800d7e0:	ec53 2b10 	vmov	r2, r3, d0
 800d7e4:	4614      	mov	r4, r2
 800d7e6:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800d7ea:	a331      	add	r3, pc, #196	@ (adr r3, 800d8b0 <attitude_task_test+0x2c8>)
 800d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f0:	4620      	mov	r0, r4
 800d7f2:	4629      	mov	r1, r5
 800d7f4:	f7f2 feb2 	bl	800055c <__aeabi_dmul>
 800d7f8:	4602      	mov	r2, r0
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	4610      	mov	r0, r2
 800d7fe:	4619      	mov	r1, r3
 800d800:	f7f3 f95c 	bl	8000abc <__aeabi_d2f>
 800d804:	4603      	mov	r3, r0
 800d806:	4a35      	ldr	r2, [pc, #212]	@ (800d8dc <attitude_task_test+0x2f4>)
 800d808:	6053      	str	r3, [r2, #4]
		angle__.yaw = atan2(2 * ((q0 * q3) + (q1 * q2)), 1 - (2 * ((q2 * q2) + (q3 * q3)))) * 57.29577951f; //degrees
 800d80a:	4b30      	ldr	r3, [pc, #192]	@ (800d8cc <attitude_task_test+0x2e4>)
 800d80c:	ed93 7a00 	vldr	s14, [r3]
 800d810:	4b31      	ldr	r3, [pc, #196]	@ (800d8d8 <attitude_task_test+0x2f0>)
 800d812:	edd3 7a00 	vldr	s15, [r3]
 800d816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d81a:	4b2e      	ldr	r3, [pc, #184]	@ (800d8d4 <attitude_task_test+0x2ec>)
 800d81c:	edd3 6a00 	vldr	s13, [r3]
 800d820:	4b2b      	ldr	r3, [pc, #172]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d822:	edd3 7a00 	vldr	s15, [r3]
 800d826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d82a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d82e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d832:	ee17 0a90 	vmov	r0, s15
 800d836:	f7f2 fe39 	bl	80004ac <__aeabi_f2d>
 800d83a:	4680      	mov	r8, r0
 800d83c:	4689      	mov	r9, r1
 800d83e:	4b24      	ldr	r3, [pc, #144]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d840:	ed93 7a00 	vldr	s14, [r3]
 800d844:	4b22      	ldr	r3, [pc, #136]	@ (800d8d0 <attitude_task_test+0x2e8>)
 800d846:	edd3 7a00 	vldr	s15, [r3]
 800d84a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d84e:	4b22      	ldr	r3, [pc, #136]	@ (800d8d8 <attitude_task_test+0x2f0>)
 800d850:	edd3 6a00 	vldr	s13, [r3]
 800d854:	4b20      	ldr	r3, [pc, #128]	@ (800d8d8 <attitude_task_test+0x2f0>)
 800d856:	edd3 7a00 	vldr	s15, [r3]
 800d85a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d85e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d86a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d86e:	ee17 0a90 	vmov	r0, s15
 800d872:	f7f2 fe1b 	bl	80004ac <__aeabi_f2d>
 800d876:	4602      	mov	r2, r0
 800d878:	460b      	mov	r3, r1
 800d87a:	ec43 2b11 	vmov	d1, r2, r3
 800d87e:	ec49 8b10 	vmov	d0, r8, r9
 800d882:	f00d fc5f 	bl	801b144 <atan2>
 800d886:	ec51 0b10 	vmov	r0, r1, d0
 800d88a:	a309      	add	r3, pc, #36	@ (adr r3, 800d8b0 <attitude_task_test+0x2c8>)
 800d88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d890:	f7f2 fe64 	bl	800055c <__aeabi_dmul>
 800d894:	4602      	mov	r2, r0
 800d896:	460b      	mov	r3, r1
 800d898:	4610      	mov	r0, r2
 800d89a:	4619      	mov	r1, r3
 800d89c:	f7f3 f90e 	bl	8000abc <__aeabi_d2f>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	4a0e      	ldr	r2, [pc, #56]	@ (800d8dc <attitude_task_test+0x2f4>)
 800d8a4:	6093      	str	r3, [r2, #8]
		vTaskDelay(1);
 800d8a6:	2001      	movs	r0, #1
 800d8a8:	f7f9 fdb4 	bl	8007414 <vTaskDelay>
		scale_.acc_x = imu.acc[0] * 0.00239501953125f;
 800d8ac:	bf00      	nop
 800d8ae:	e6a0      	b.n	800d5f2 <attitude_task_test+0xa>
 800d8b0:	20000000 	.word	0x20000000
 800d8b4:	404ca5dc 	.word	0x404ca5dc
 800d8b8:	200082bc 	.word	0x200082bc
 800d8bc:	3b1cf5c3 	.word	0x3b1cf5c3
 800d8c0:	20008298 	.word	0x20008298
 800d8c4:	398ba16f 	.word	0x398ba16f
 800d8c8:	200082e0 	.word	0x200082e0
 800d8cc:	20000014 	.word	0x20000014
 800d8d0:	20007aec 	.word	0x20007aec
 800d8d4:	20007ae8 	.word	0x20007ae8
 800d8d8:	20007af0 	.word	0x20007af0
 800d8dc:	200082b0 	.word	0x200082b0

0800d8e0 <attitude_test>:
	}
}


void attitude_test(){
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af02      	add	r7, sp, #8
	xTaskCreate(attitude_task_test, ATT_TASK_NAME_TEST, ATT_TASK_STACKSIZE, NULL, ATT_TASK_PRI_TEST, NULL);
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	9301      	str	r3, [sp, #4]
 800d8ea:	2304      	movs	r3, #4
 800d8ec:	9300      	str	r3, [sp, #0]
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d8f4:	4903      	ldr	r1, [pc, #12]	@ (800d904 <attitude_test+0x24>)
 800d8f6:	4804      	ldr	r0, [pc, #16]	@ (800d908 <attitude_test+0x28>)
 800d8f8:	f7f9 fbc4 	bl	8007084 <xTaskCreate>
}
 800d8fc:	bf00      	nop
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	0801e854 	.word	0x0801e854
 800d908:	0800d5e9 	.word	0x0800d5e9

0800d90c <imu_task_test>:

MPU6500_IMU imu;

//uint16_t imu_flage = 0;

static void imu_task_test(void *param){
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
//	imu_flage = 1;
	//JH
	if(MPU6500_Init(&imu) == 0){
 800d914:	4808      	ldr	r0, [pc, #32]	@ (800d938 <imu_task_test+0x2c>)
 800d916:	f7fe f8ed 	bl	800baf4 <MPU6500_Init>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d101      	bne.n	800d924 <imu_task_test+0x18>
//		imu_flage = 1;
		//NJH
		for(;;);
 800d920:	bf00      	nop
 800d922:	e7fd      	b.n	800d920 <imu_task_test+0x14>
	}
//	imu_flage = 1;
	//JH
	for(;;){
		MPU6500_ReadAcc(&imu);
 800d924:	4804      	ldr	r0, [pc, #16]	@ (800d938 <imu_task_test+0x2c>)
 800d926:	f7fe f94e 	bl	800bbc6 <MPU6500_ReadAcc>
		MPU6500_ReadGyr(&imu);
 800d92a:	4803      	ldr	r0, [pc, #12]	@ (800d938 <imu_task_test+0x2c>)
 800d92c:	f7fe f978 	bl	800bc20 <MPU6500_ReadGyr>
		vTaskDelay(1);
 800d930:	2001      	movs	r0, #1
 800d932:	f7f9 fd6f 	bl	8007414 <vTaskDelay>
		MPU6500_ReadAcc(&imu);
 800d936:	e7f5      	b.n	800d924 <imu_task_test+0x18>
 800d938:	200082bc 	.word	0x200082bc

0800d93c <imu_test>:
	}
}

void imu_test(){
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b082      	sub	sp, #8
 800d940:	af02      	add	r7, sp, #8
	xTaskCreate(imu_task_test, IMU_TASK_NAME_TEST, IMU_TASK_STACKSIZE, NULL, IMU_TASK_PRI_TEST, NULL);
 800d942:	2300      	movs	r3, #0
 800d944:	9301      	str	r3, [sp, #4]
 800d946:	2304      	movs	r3, #4
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	2300      	movs	r3, #0
 800d94c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d950:	4903      	ldr	r1, [pc, #12]	@ (800d960 <imu_test+0x24>)
 800d952:	4804      	ldr	r0, [pc, #16]	@ (800d964 <imu_test+0x28>)
 800d954:	f7f9 fb96 	bl	8007084 <xTaskCreate>
}
 800d958:	bf00      	nop
 800d95a:	46bd      	mov	sp, r7
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	bf00      	nop
 800d960:	0801e860 	.word	0x0801e860
 800d964:	0800d90d 	.word	0x0800d90d

0800d968 <qmc_task_test>:
#include <stdlib.h>

//uint32_t qmc_flage = 0;
qmc_typedef qmc;

static void qmc_task_test(void *param){
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
//	qmc_flage = 1;
	qmc5883p_init();
 800d970:	f7fe fefa 	bl	800c768 <qmc5883p_init>

	for(;;){
		qmc5883p_read(&qmc);
 800d974:	4803      	ldr	r0, [pc, #12]	@ (800d984 <qmc_task_test+0x1c>)
 800d976:	f7fe ff30 	bl	800c7da <qmc5883p_read>
		vTaskDelay(1);
 800d97a:	2001      	movs	r0, #1
 800d97c:	f7f9 fd4a 	bl	8007414 <vTaskDelay>
		qmc5883p_read(&qmc);
 800d980:	bf00      	nop
 800d982:	e7f7      	b.n	800d974 <qmc_task_test+0xc>
 800d984:	200082e0 	.word	0x200082e0

0800d988 <qmc_test>:
//		qmc_flage = 1;
	}
}

void qmc_test(){
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af02      	add	r7, sp, #8
	xTaskCreate(qmc_task_test, QMC_TASK_NAME_TEST, QMC_TASK_STACKSIZE, NULL, QMC_TASK_PRI_TEST, NULL);
 800d98e:	2300      	movs	r3, #0
 800d990:	9301      	str	r3, [sp, #4]
 800d992:	2304      	movs	r3, #4
 800d994:	9300      	str	r3, [sp, #0]
 800d996:	2300      	movs	r3, #0
 800d998:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d99c:	4903      	ldr	r1, [pc, #12]	@ (800d9ac <qmc_test+0x24>)
 800d99e:	4804      	ldr	r0, [pc, #16]	@ (800d9b0 <qmc_test+0x28>)
 800d9a0:	f7f9 fb70 	bl	8007084 <xTaskCreate>
}
 800d9a4:	bf00      	nop
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	0801e86c 	.word	0x0801e86c
 800d9b0:	0800d969 	.word	0x0800d969

0800d9b4 <led_task_test>:
#include <stdlib.h>

uint32_t counter_led_task = 0;


static void led_task_test(void *param){
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b082      	sub	sp, #8
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
//	systemWaitStart();
//	uint64_t lastTime  = usecTimestamp();
// Open made code belowe not work

	while(1){
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800d9bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800d9c0:	4803      	ldr	r0, [pc, #12]	@ (800d9d0 <led_task_test+0x1c>)
 800d9c2:	f7f4 fa18 	bl	8001df6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800d9c6:	2064      	movs	r0, #100	@ 0x64
 800d9c8:	f7f9 fd24 	bl	8007414 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800d9cc:	bf00      	nop
 800d9ce:	e7f5      	b.n	800d9bc <led_task_test+0x8>
 800d9d0:	40020800 	.word	0x40020800

0800d9d4 <ledblink_test>:
	}
}
void ledblink_test(){
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af02      	add	r7, sp, #8
	xTaskCreate(led_task_test, LED_TASK_NAME, LED_TASK_STACKSIZE, NULL, LED_TASK_PRI_TEST, NULL);
 800d9da:	2300      	movs	r3, #0
 800d9dc:	9301      	str	r3, [sp, #4]
 800d9de:	2303      	movs	r3, #3
 800d9e0:	9300      	str	r3, [sp, #0]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	2296      	movs	r2, #150	@ 0x96
 800d9e6:	4903      	ldr	r1, [pc, #12]	@ (800d9f4 <ledblink_test+0x20>)
 800d9e8:	4803      	ldr	r0, [pc, #12]	@ (800d9f8 <ledblink_test+0x24>)
 800d9ea:	f7f9 fb4b 	bl	8007084 <xTaskCreate>
}
 800d9ee:	bf00      	nop
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}
 800d9f4:	0801e878 	.word	0x0801e878
 800d9f8:	0800d9b5 	.word	0x0800d9b5

0800d9fc <motors_task_test>:
uint32_t motors_value = 0;
uint16_t my_motor_value[4] = {0, 0, 0, 0};
uint8_t next_state = 0;


static void motors_task_test(void *param) {
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
//	hal_dshot_init(DSHOT600);
//	vTaskDelay(100);
	//JH
	while(1){
		motors_value += 1;
 800da04:	4b06      	ldr	r3, [pc, #24]	@ (800da20 <motors_task_test+0x24>)
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3301      	adds	r3, #1
 800da0a:	4a05      	ldr	r2, [pc, #20]	@ (800da20 <motors_task_test+0x24>)
 800da0c:	6013      	str	r3, [r2, #0]
		hal_dshot_write(my_motor_value);
 800da0e:	4805      	ldr	r0, [pc, #20]	@ (800da24 <motors_task_test+0x28>)
 800da10:	f7fe f944 	bl	800bc9c <hal_dshot_write>
		//JH only a round
//		next_state = 1;
		vTaskDelay(1);
 800da14:	2001      	movs	r0, #1
 800da16:	f7f9 fcfd 	bl	8007414 <vTaskDelay>
	while(1){
 800da1a:	bf00      	nop
 800da1c:	e7f2      	b.n	800da04 <motors_task_test+0x8>
 800da1e:	bf00      	nop
 800da20:	200082f0 	.word	0x200082f0
 800da24:	200082f4 	.word	0x200082f4

0800da28 <motors_test>:
	}
}
void motors_test(){
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af02      	add	r7, sp, #8
	xTaskCreate(motors_task_test, MOTORS_TASK_NAME_TEST, MOTORS_TASK_STACKSIZE_TEST, NULL, MOTORS_TASK_PRI_TEST, NULL);
 800da2e:	2300      	movs	r3, #0
 800da30:	9301      	str	r3, [sp, #4]
 800da32:	2303      	movs	r3, #3
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	2300      	movs	r3, #0
 800da38:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800da3c:	4903      	ldr	r1, [pc, #12]	@ (800da4c <motors_test+0x24>)
 800da3e:	4804      	ldr	r0, [pc, #16]	@ (800da50 <motors_test+0x28>)
 800da40:	f7f9 fb20 	bl	8007084 <xTaskCreate>
}
 800da44:	bf00      	nop
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	0801e884 	.word	0x0801e884
 800da50:	0800d9fd 	.word	0x0800d9fd

0800da54 <rc_task_test>:
#include "dragonll_ibus.h"

uint32_t rc_cournter = 0;
//uint16_t ibus_data[IBUS_USER_CHANNELS];

static void rc_task_test(void *param) {
 800da54:	b580      	push	{r7, lr}
 800da56:	b082      	sub	sp, #8
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]

	for (;;) {
		rc_cournter += 1;
 800da5c:	4b04      	ldr	r3, [pc, #16]	@ (800da70 <rc_task_test+0x1c>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3301      	adds	r3, #1
 800da62:	4a03      	ldr	r2, [pc, #12]	@ (800da70 <rc_task_test+0x1c>)
 800da64:	6013      	str	r3, [r2, #0]
//		hal_ibus_read(ibus_data);
		vTaskDelay(1);
 800da66:	2001      	movs	r0, #1
 800da68:	f7f9 fcd4 	bl	8007414 <vTaskDelay>
		rc_cournter += 1;
 800da6c:	bf00      	nop
 800da6e:	e7f5      	b.n	800da5c <rc_task_test+0x8>
 800da70:	200082fc 	.word	0x200082fc

0800da74 <rc_test>:
	}

}

void rc_test(){
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af02      	add	r7, sp, #8
	xTaskCreate(rc_task_test, RC_TASK_NAME_TEST, RC_TASK_STACKSIZE, NULL, RC_TASK_PRI_TEST, NULL);
 800da7a:	2300      	movs	r3, #0
 800da7c:	9301      	str	r3, [sp, #4]
 800da7e:	2303      	movs	r3, #3
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	2300      	movs	r3, #0
 800da84:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800da88:	4903      	ldr	r1, [pc, #12]	@ (800da98 <rc_test+0x24>)
 800da8a:	4804      	ldr	r0, [pc, #16]	@ (800da9c <rc_test+0x28>)
 800da8c:	f7f9 fafa 	bl	8007084 <xTaskCreate>
}
 800da90:	bf00      	nop
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	0801e890 	.word	0x0801e890
 800da9c:	0800da55 	.word	0x0800da55

0800daa0 <nullFunction>:
  void (*dataAvailableCallback)(void);
} sensorsImplementation_t;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
static void nullFunction(void) {}
 800daa0:	b480      	push	{r7}
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	bf00      	nop
 800daa6:	46bd      	mov	sp, r7
 800daa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daac:	4770      	bx	lr
	...

0800dab0 <sensorsInit>:

static const sensorsImplementation_t* activeImplementation;
static bool isInit = false;
static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation);

void sensorsInit(void) {
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b082      	sub	sp, #8
 800dab4:	af00      	add	r7, sp, #0
  if (isInit) {
 800dab6:	4b0d      	ldr	r3, [pc, #52]	@ (800daec <sensorsInit+0x3c>)
 800dab8:	781b      	ldrb	r3, [r3, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d112      	bne.n	800dae4 <sensorsInit+0x34>
    return;
  }

#ifndef SENSORS_FORCE
  SensorImplementation_t sensorImplementation = platformConfigGetSensorImplementation();
 800dabe:	f007 ffa1 	bl	8015a04 <platformConfigGetSensorImplementation>
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
  SensorImplementation_t sensorImplementation = SENSORS_FORCE;
  DEBUG_PRINT("Forcing sensors to " xstr(SENSORS_FORCE) "\n");
#endif
//run = 1;//JH

  activeImplementation = findImplementation(sensorImplementation);
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 f879 	bl	800dbc0 <findImplementation>
 800dace:	4603      	mov	r3, r0
 800dad0:	4a07      	ldr	r2, [pc, #28]	@ (800daf0 <sensorsInit+0x40>)
 800dad2:	6013      	str	r3, [r2, #0]
//  run = 1;//JH

  activeImplementation->init();
 800dad4:	4b06      	ldr	r3, [pc, #24]	@ (800daf0 <sensorsInit+0x40>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	685b      	ldr	r3, [r3, #4]
 800dada:	4798      	blx	r3
//  run = 1; // NJH

  isInit = true;
 800dadc:	4b03      	ldr	r3, [pc, #12]	@ (800daec <sensorsInit+0x3c>)
 800dade:	2201      	movs	r2, #1
 800dae0:	701a      	strb	r2, [r3, #0]
 800dae2:	e000      	b.n	800dae6 <sensorsInit+0x36>
    return;
 800dae4:	bf00      	nop
}
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	20008304 	.word	0x20008304
 800daf0:	20008300 	.word	0x20008300

0800daf4 <sensorsAreCalibrated>:
bool sensorsTest(void) {
  return activeImplementation->test();
}

bool sensorsAreCalibrated(void) {
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  return activeImplementation->areCalibrated();
 800daf8:	4b03      	ldr	r3, [pc, #12]	@ (800db08 <sensorsAreCalibrated+0x14>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	68db      	ldr	r3, [r3, #12]
 800dafe:	4798      	blx	r3
 800db00:	4603      	mov	r3, r0
}
 800db02:	4618      	mov	r0, r3
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	20008300 	.word	0x20008300

0800db0c <sensorsAcquire>:

bool sensorsManufacturingTest(void){
  return activeImplementation->manufacturingTest;
}

void sensorsAcquire(sensorData_t *sensors) {
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b082      	sub	sp, #8
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  activeImplementation->acquire(sensors);
 800db14:	4b04      	ldr	r3, [pc, #16]	@ (800db28 <sensorsAcquire+0x1c>)
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	695b      	ldr	r3, [r3, #20]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	4798      	blx	r3
}
 800db1e:	bf00      	nop
 800db20:	3708      	adds	r7, #8
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}
 800db26:	bf00      	nop
 800db28:	20008300 	.word	0x20008300

0800db2c <sensorsWaitDataReady>:

void sensorsWaitDataReady(void) {
 800db2c:	b580      	push	{r7, lr}
 800db2e:	af00      	add	r7, sp, #0
  activeImplementation->waitDataReady();
 800db30:	4b02      	ldr	r3, [pc, #8]	@ (800db3c <sensorsWaitDataReady+0x10>)
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	699b      	ldr	r3, [r3, #24]
 800db36:	4798      	blx	r3
}
 800db38:	bf00      	nop
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20008300 	.word	0x20008300

0800db40 <sensorsReadGyro>:

bool sensorsReadGyro(Axis3f *gyro) {
 800db40:	b580      	push	{r7, lr}
 800db42:	b082      	sub	sp, #8
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  return activeImplementation->readGyro(gyro);
 800db48:	4b04      	ldr	r3, [pc, #16]	@ (800db5c <sensorsReadGyro+0x1c>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	4798      	blx	r3
 800db52:	4603      	mov	r3, r0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	20008300 	.word	0x20008300

0800db60 <sensorsReadAcc>:

bool sensorsReadAcc(Axis3f *acc) {
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  return activeImplementation->readAcc(acc);
 800db68:	4b04      	ldr	r3, [pc, #16]	@ (800db7c <sensorsReadAcc+0x1c>)
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	6a1b      	ldr	r3, [r3, #32]
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	4798      	blx	r3
 800db72:	4603      	mov	r3, r0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	20008300 	.word	0x20008300

0800db80 <sensorsReadMag>:

bool sensorsReadMag(Axis3f *mag) {
 800db80:	b580      	push	{r7, lr}
 800db82:	b082      	sub	sp, #8
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  return activeImplementation->readMag(mag);
 800db88:	4b04      	ldr	r3, [pc, #16]	@ (800db9c <sensorsReadMag+0x1c>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	4798      	blx	r3
 800db92:	4603      	mov	r3, r0
}
 800db94:	4618      	mov	r0, r3
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	20008300 	.word	0x20008300

0800dba0 <sensorsReadBaro>:

bool sensorsReadBaro(baro_t *baro) {
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  return activeImplementation->readBaro(baro);
 800dba8:	4b04      	ldr	r3, [pc, #16]	@ (800dbbc <sensorsReadBaro+0x1c>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	4798      	blx	r3
 800dbb2:	4603      	mov	r3, r0
}
 800dbb4:	4618      	mov	r0, r3
 800dbb6:	3708      	adds	r7, #8
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	bd80      	pop	{r7, pc}
 800dbbc:	20008300 	.word	0x20008300

0800dbc0 <findImplementation>:

void __attribute__((used)) EXTI1_Callback(void) {
  activeImplementation->dataAvailableCallback();
}

static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation) {
 800dbc0:	b480      	push	{r7}
 800dbc2:	b085      	sub	sp, #20
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	71fb      	strb	r3, [r7, #7]
  const sensorsImplementation_t* result = 0;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800dbce:	2300      	movs	r3, #0
 800dbd0:	60bb      	str	r3, [r7, #8]
 800dbd2:	e014      	b.n	800dbfe <findImplementation+0x3e>
    if (sensorImplementations[i].implements == implementation) {
 800dbd4:	4a0f      	ldr	r2, [pc, #60]	@ (800dc14 <findImplementation+0x54>)
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2134      	movs	r1, #52	@ 0x34
 800dbda:	fb01 f303 	mul.w	r3, r1, r3
 800dbde:	4413      	add	r3, r2
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	79fa      	ldrb	r2, [r7, #7]
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d107      	bne.n	800dbf8 <findImplementation+0x38>
      result = &sensorImplementations[i];
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	2234      	movs	r2, #52	@ 0x34
 800dbec:	fb02 f303 	mul.w	r3, r2, r3
 800dbf0:	4a08      	ldr	r2, [pc, #32]	@ (800dc14 <findImplementation+0x54>)
 800dbf2:	4413      	add	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]
      break;
 800dbf6:	e005      	b.n	800dc04 <findImplementation+0x44>
  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	60bb      	str	r3, [r7, #8]
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dde7      	ble.n	800dbd4 <findImplementation+0x14>
    }
  }

  return result;
 800dc04:	68fb      	ldr	r3, [r7, #12]
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3714      	adds	r7, #20
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc10:	4770      	bx	lr
 800dc12:	bf00      	nop
 800dc14:	0801eb44 	.word	0x0801eb44

0800dc18 <sensorsMpu6500Bmp280ReadGyro>:

STATIC_MEM_TASK_ALLOC(sensorsTask, SENSORS_TASK_STACKSIZE);


bool sensorsMpu6500Bmp280ReadGyro(Axis3f *gyro)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(gyroDataQueue, gyro, 0));
 800dc20:	4b08      	ldr	r3, [pc, #32]	@ (800dc44 <sensorsMpu6500Bmp280ReadGyro+0x2c>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2200      	movs	r2, #0
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	4618      	mov	r0, r3
 800dc2a:	f7f8 fe65 	bl	80068f8 <xQueueReceive>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	bf0c      	ite	eq
 800dc34:	2301      	moveq	r3, #1
 800dc36:	2300      	movne	r3, #0
 800dc38:	b2db      	uxtb	r3, r3
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}
 800dc42:	bf00      	nop
 800dc44:	2000830c 	.word	0x2000830c

0800dc48 <sensorsMpu6500Bmp280ReadAcc>:
bool sensorsMpu6500Bmp280ReadAcc(Axis3f *acc)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(accelerometerDataQueue, acc, 0));
 800dc50:	4b08      	ldr	r3, [pc, #32]	@ (800dc74 <sensorsMpu6500Bmp280ReadAcc+0x2c>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2200      	movs	r2, #0
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f7f8 fe4d 	bl	80068f8 <xQueueReceive>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b01      	cmp	r3, #1
 800dc62:	bf0c      	ite	eq
 800dc64:	2301      	moveq	r3, #1
 800dc66:	2300      	movne	r3, #0
 800dc68:	b2db      	uxtb	r3, r3
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3708      	adds	r7, #8
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop
 800dc74:	20008308 	.word	0x20008308

0800dc78 <sensorsMpu6500Bmp280ReadMag>:
bool sensorsMpu6500Bmp280ReadMag(Axis3f *mag)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(magnetometerDataQueue, mag, 0));
 800dc80:	4b08      	ldr	r3, [pc, #32]	@ (800dca4 <sensorsMpu6500Bmp280ReadMag+0x2c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	2200      	movs	r2, #0
 800dc86:	6879      	ldr	r1, [r7, #4]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7f8 fe35 	bl	80068f8 <xQueueReceive>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	bf0c      	ite	eq
 800dc94:	2301      	moveq	r3, #1
 800dc96:	2300      	movne	r3, #0
 800dc98:	b2db      	uxtb	r3, r3
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	20008310 	.word	0x20008310

0800dca8 <sensorsMpu6500Bmp280ReadBaro>:
bool sensorsMpu6500Bmp280ReadBaro(baro_t *baro)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(barometerDataQueue, baro, 0));
 800dcb0:	4b08      	ldr	r3, [pc, #32]	@ (800dcd4 <sensorsMpu6500Bmp280ReadBaro+0x2c>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	6879      	ldr	r1, [r7, #4]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7f8 fe1d 	bl	80068f8 <xQueueReceive>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b01      	cmp	r3, #1
 800dcc2:	bf0c      	ite	eq
 800dcc4:	2301      	moveq	r3, #1
 800dcc6:	2300      	movne	r3, #0
 800dcc8:	b2db      	uxtb	r3, r3
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3708      	adds	r7, #8
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
 800dcd2:	bf00      	nop
 800dcd4:	20008314 	.word	0x20008314

0800dcd8 <sensorsMpu6500Bmp280Acquire>:
void sensorsMpu6500Bmp280Acquire(sensorData_t *sensors)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
	sensorsReadGyro(&sensors->gyro);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	330c      	adds	r3, #12
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7ff ff2b 	bl	800db40 <sensorsReadGyro>
	sensorsReadAcc(&sensors->acc);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7ff ff37 	bl	800db60 <sensorsReadAcc>
	sensorsReadMag(&sensors->mag);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	3318      	adds	r3, #24
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7ff ff42 	bl	800db80 <sensorsReadMag>
	sensorsReadBaro(&sensors->baro);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	3324      	adds	r3, #36	@ 0x24
 800dd00:	4618      	mov	r0, r3
 800dd02:	f7ff ff4d 	bl	800dba0 <sensorsReadBaro>
	sensors->interruptTimestamp = sensorData.interruptTimestamp;
 800dd06:	4b05      	ldr	r3, [pc, #20]	@ (800dd1c <sensorsMpu6500Bmp280Acquire+0x44>)
 800dd08:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 800dd12:	bf00      	nop
 800dd14:	3708      	adds	r7, #8
 800dd16:	46bd      	mov	sp, r7
 800dd18:	bd80      	pop	{r7, pc}
 800dd1a:	bf00      	nop
 800dd1c:	200083c8 	.word	0x200083c8

0800dd20 <sensorsMpu6500Bmp280AreCalibrated>:
bool sensorsMpu6500Bmp280AreCalibrated(void)
{
 800dd20:	b480      	push	{r7}
 800dd22:	af00      	add	r7, sp, #0
	return gyroBiasFound;
 800dd24:	4b03      	ldr	r3, [pc, #12]	@ (800dd34 <sensorsMpu6500Bmp280AreCalibrated+0x14>)
 800dd26:	781b      	ldrb	r3, [r3, #0]
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	20008430 	.word	0x20008430

0800dd38 <sensorsTask>:

static void sensorsTask(void *param)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b08e      	sub	sp, #56	@ 0x38
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
	measurement_t measurement;
	vTaskDelay(10);
 800dd40:	200a      	movs	r0, #10
 800dd42:	f7f9 fb67 	bl	8007414 <vTaskDelay>

	systemWaitStart();
 800dd46:	f002 fd0b 	bl	8010760 <systemWaitStart>

	while (1) {


	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800dd4a:	4b45      	ldr	r3, [pc, #276]	@ (800de60 <sensorsTask+0x128>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f04f 31ff 	mov.w	r1, #4294967295
 800dd52:	4618      	mov	r0, r3
 800dd54:	f7f8 feb0 	bl	8006ab8 <xQueueSemaphoreTake>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d1f5      	bne.n	800dd4a <sensorsTask+0x12>
	    {
	    	sensorData.interruptTimestamp = imuIntTimestamp;
 800dd5e:	4b41      	ldr	r3, [pc, #260]	@ (800de64 <sensorsTask+0x12c>)
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	4940      	ldr	r1, [pc, #256]	@ (800de68 <sensorsTask+0x130>)
 800dd66:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	    	sysCounter++;
 800dd6a:	4b40      	ldr	r3, [pc, #256]	@ (800de6c <sensorsTask+0x134>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	3301      	adds	r3, #1
 800dd70:	4a3e      	ldr	r2, [pc, #248]	@ (800de6c <sensorsTask+0x134>)
 800dd72:	6013      	str	r3, [r2, #0]
	    	mpu6500GetAccelGyroData(&imu);
 800dd74:	483e      	ldr	r0, [pc, #248]	@ (800de70 <sensorsTask+0x138>)
 800dd76:	f7fe fbe1 	bl	800c53c <mpu6500GetAccelGyroData>
	    	processAccGyroMeasurements();
 800dd7a:	f000 f8a7 	bl	800decc <processAccGyroMeasurements>
	    	if (isBarometerPresent)
 800dd7e:	4b3d      	ldr	r3, [pc, #244]	@ (800de74 <sensorsTask+0x13c>)
 800dd80:	781b      	ldrb	r3, [r3, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <sensorsTask+0x52>
	    	{
	    		processBarometerMeasurements();
 800dd86:	f000 f9b1 	bl	800e0ec <processBarometerMeasurements>

	    	}

	        measurement.type = MeasurementTypeAcceleration;
 800dd8a:	230a      	movs	r3, #10
 800dd8c:	723b      	strb	r3, [r7, #8]
	        measurement.data.acceleration.acc = sensorData.acc;
 800dd8e:	4a36      	ldr	r2, [pc, #216]	@ (800de68 <sensorsTask+0x130>)
 800dd90:	f107 030c 	add.w	r3, r7, #12
 800dd94:	ca07      	ldmia	r2, {r0, r1, r2}
 800dd96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        ax = sensorData.acc.x;
 800dd9a:	4b33      	ldr	r3, [pc, #204]	@ (800de68 <sensorsTask+0x130>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	4a36      	ldr	r2, [pc, #216]	@ (800de78 <sensorsTask+0x140>)
 800dda0:	6013      	str	r3, [r2, #0]
	        ay = sensorData.acc.y;
 800dda2:	4b31      	ldr	r3, [pc, #196]	@ (800de68 <sensorsTask+0x130>)
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	4a35      	ldr	r2, [pc, #212]	@ (800de7c <sensorsTask+0x144>)
 800dda8:	6013      	str	r3, [r2, #0]
	        az = sensorData.acc.z;
 800ddaa:	4b2f      	ldr	r3, [pc, #188]	@ (800de68 <sensorsTask+0x130>)
 800ddac:	689b      	ldr	r3, [r3, #8]
 800ddae:	4a34      	ldr	r2, [pc, #208]	@ (800de80 <sensorsTask+0x148>)
 800ddb0:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800ddb2:	f107 0308 	add.w	r3, r7, #8
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f002 fe2e 	bl	8010a18 <estimatorEnqueue>
	        xQueueOverwrite(accelerometerDataQueue, &sensorData.acc);
 800ddbc:	4b31      	ldr	r3, [pc, #196]	@ (800de84 <sensorsTask+0x14c>)
 800ddbe:	6818      	ldr	r0, [r3, #0]
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	4928      	ldr	r1, [pc, #160]	@ (800de68 <sensorsTask+0x130>)
 800ddc6:	f7f8 fb59 	bl	800647c <xQueueGenericSend>

	        measurement.type = MeasurementTypeGyroscope;
 800ddca:	2309      	movs	r3, #9
 800ddcc:	723b      	strb	r3, [r7, #8]
	        measurement.data.gyroscope.gyro = sensorData.gyro;
 800ddce:	4a26      	ldr	r2, [pc, #152]	@ (800de68 <sensorsTask+0x130>)
 800ddd0:	f107 030c 	add.w	r3, r7, #12
 800ddd4:	320c      	adds	r2, #12
 800ddd6:	ca07      	ldmia	r2, {r0, r1, r2}
 800ddd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        gx = sensorData.gyro.x;
 800dddc:	4b22      	ldr	r3, [pc, #136]	@ (800de68 <sensorsTask+0x130>)
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	4a29      	ldr	r2, [pc, #164]	@ (800de88 <sensorsTask+0x150>)
 800dde2:	6013      	str	r3, [r2, #0]
	        gy = sensorData.gyro.y;
 800dde4:	4b20      	ldr	r3, [pc, #128]	@ (800de68 <sensorsTask+0x130>)
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	4a28      	ldr	r2, [pc, #160]	@ (800de8c <sensorsTask+0x154>)
 800ddea:	6013      	str	r3, [r2, #0]
	        gz = sensorData.gyro.z;
 800ddec:	4b1e      	ldr	r3, [pc, #120]	@ (800de68 <sensorsTask+0x130>)
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	4a27      	ldr	r2, [pc, #156]	@ (800de90 <sensorsTask+0x158>)
 800ddf2:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800ddf4:	f107 0308 	add.w	r3, r7, #8
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	f002 fe0d 	bl	8010a18 <estimatorEnqueue>
	        xQueueOverwrite(gyroDataQueue, &sensorData.gyro);
 800ddfe:	4b25      	ldr	r3, [pc, #148]	@ (800de94 <sensorsTask+0x15c>)
 800de00:	6818      	ldr	r0, [r3, #0]
 800de02:	2302      	movs	r3, #2
 800de04:	2200      	movs	r2, #0
 800de06:	4924      	ldr	r1, [pc, #144]	@ (800de98 <sensorsTask+0x160>)
 800de08:	f7f8 fb38 	bl	800647c <xQueueGenericSend>

			if (isBarometerPresent) {
 800de0c:	4b19      	ldr	r3, [pc, #100]	@ (800de74 <sensorsTask+0x13c>)
 800de0e:	781b      	ldrb	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d01c      	beq.n	800de4e <sensorsTask+0x116>
				measurement.type = MeasurementTypeBarometer;
 800de14:	230b      	movs	r3, #11
 800de16:	723b      	strb	r3, [r7, #8]
				measurement.data.barometer.baro = sensorData.baro;
 800de18:	4a13      	ldr	r2, [pc, #76]	@ (800de68 <sensorsTask+0x130>)
 800de1a:	f107 030c 	add.w	r3, r7, #12
 800de1e:	3224      	adds	r2, #36	@ 0x24
 800de20:	ca07      	ldmia	r2, {r0, r1, r2}
 800de22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				press = sensorData.baro.pressure;
 800de26:	4b10      	ldr	r3, [pc, #64]	@ (800de68 <sensorsTask+0x130>)
 800de28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de2a:	4a1c      	ldr	r2, [pc, #112]	@ (800de9c <sensorsTask+0x164>)
 800de2c:	6013      	str	r3, [r2, #0]
				asl = sensorData.baro.asl;
 800de2e:	4b0e      	ldr	r3, [pc, #56]	@ (800de68 <sensorsTask+0x130>)
 800de30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de32:	4a1b      	ldr	r2, [pc, #108]	@ (800dea0 <sensorsTask+0x168>)
 800de34:	6013      	str	r3, [r2, #0]
				estimatorEnqueue(&measurement);
 800de36:	f107 0308 	add.w	r3, r7, #8
 800de3a:	4618      	mov	r0, r3
 800de3c:	f002 fdec 	bl	8010a18 <estimatorEnqueue>
				xQueueOverwrite(barometerDataQueue, &sensorData.baro);
 800de40:	4b18      	ldr	r3, [pc, #96]	@ (800dea4 <sensorsTask+0x16c>)
 800de42:	6818      	ldr	r0, [r3, #0]
 800de44:	2302      	movs	r3, #2
 800de46:	2200      	movs	r2, #0
 800de48:	4917      	ldr	r1, [pc, #92]	@ (800dea8 <sensorsTask+0x170>)
 800de4a:	f7f8 fb17 	bl	800647c <xQueueGenericSend>
			}

	    	xSemaphoreGive(dataReady);
 800de4e:	4b17      	ldr	r3, [pc, #92]	@ (800deac <sensorsTask+0x174>)
 800de50:	6818      	ldr	r0, [r3, #0]
 800de52:	2300      	movs	r3, #0
 800de54:	2200      	movs	r2, #0
 800de56:	2100      	movs	r1, #0
 800de58:	f7f8 fb10 	bl	800647c <xQueueGenericSend>
	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800de5c:	e775      	b.n	800dd4a <sensorsTask+0x12>
 800de5e:	bf00      	nop
 800de60:	20008318 	.word	0x20008318
 800de64:	20008400 	.word	0x20008400
 800de68:	200083c8 	.word	0x200083c8
 800de6c:	20008524 	.word	0x20008524
 800de70:	20008514 	.word	0x20008514
 800de74:	200084e0 	.word	0x200084e0
 800de78:	2000853c 	.word	0x2000853c
 800de7c:	20008540 	.word	0x20008540
 800de80:	20008544 	.word	0x20008544
 800de84:	20008308 	.word	0x20008308
 800de88:	20008530 	.word	0x20008530
 800de8c:	20008534 	.word	0x20008534
 800de90:	20008538 	.word	0x20008538
 800de94:	2000830c 	.word	0x2000830c
 800de98:	200083d4 	.word	0x200083d4
 800de9c:	20008528 	.word	0x20008528
 800dea0:	2000852c 	.word	0x2000852c
 800dea4:	20008314 	.word	0x20008314
 800dea8:	200083ec 	.word	0x200083ec
 800deac:	2000836c 	.word	0x2000836c

0800deb0 <sensorsMpu6500Bmp280WaitDataReady>:
	    }
	}

}
void sensorsMpu6500Bmp280WaitDataReady(void)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	af00      	add	r7, sp, #0
	xSemaphoreTake(dataReady, portMAX_DELAY);
 800deb4:	4b04      	ldr	r3, [pc, #16]	@ (800dec8 <sensorsMpu6500Bmp280WaitDataReady+0x18>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f04f 31ff 	mov.w	r1, #4294967295
 800debc:	4618      	mov	r0, r3
 800debe:	f7f8 fdfb 	bl	8006ab8 <xQueueSemaphoreTake>
}
 800dec2:	bf00      	nop
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	2000836c 	.word	0x2000836c

0800decc <processAccGyroMeasurements>:
void processAccGyroMeasurements()
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
	Axis3f gyroScaledIMU;
	Axis3f accScaledIMU;
//	Axis3f accScaled;
	accelRaw.x = ((int16_t) imu.buf[0] << 8 | imu.buf[1]);
 800ded2:	4b79      	ldr	r3, [pc, #484]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	021b      	lsls	r3, r3, #8
 800ded8:	b21a      	sxth	r2, r3
 800deda:	4b77      	ldr	r3, [pc, #476]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800dedc:	785b      	ldrb	r3, [r3, #1]
 800dede:	b21b      	sxth	r3, r3
 800dee0:	4313      	orrs	r3, r2
 800dee2:	b21a      	sxth	r2, r3
 800dee4:	4b75      	ldr	r3, [pc, #468]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800dee6:	801a      	strh	r2, [r3, #0]
	accelRaw.y = ((int16_t) imu.buf[2] << 8 | imu.buf[3]);
 800dee8:	4b73      	ldr	r3, [pc, #460]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800deea:	789b      	ldrb	r3, [r3, #2]
 800deec:	021b      	lsls	r3, r3, #8
 800deee:	b21a      	sxth	r2, r3
 800def0:	4b71      	ldr	r3, [pc, #452]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800def2:	78db      	ldrb	r3, [r3, #3]
 800def4:	b21b      	sxth	r3, r3
 800def6:	4313      	orrs	r3, r2
 800def8:	b21a      	sxth	r2, r3
 800defa:	4b70      	ldr	r3, [pc, #448]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800defc:	805a      	strh	r2, [r3, #2]
	accelRaw.z = ((int16_t) imu.buf[4] << 8 | imu.buf[5]);
 800defe:	4b6e      	ldr	r3, [pc, #440]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df00:	791b      	ldrb	r3, [r3, #4]
 800df02:	021b      	lsls	r3, r3, #8
 800df04:	b21a      	sxth	r2, r3
 800df06:	4b6c      	ldr	r3, [pc, #432]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df08:	795b      	ldrb	r3, [r3, #5]
 800df0a:	b21b      	sxth	r3, r3
 800df0c:	4313      	orrs	r3, r2
 800df0e:	b21a      	sxth	r2, r3
 800df10:	4b6a      	ldr	r3, [pc, #424]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800df12:	809a      	strh	r2, [r3, #4]
	gyroRaw.x = ((int16_t) imu.buf[8] << 8 | imu.buf[9]);
 800df14:	4b68      	ldr	r3, [pc, #416]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df16:	7a1b      	ldrb	r3, [r3, #8]
 800df18:	021b      	lsls	r3, r3, #8
 800df1a:	b21a      	sxth	r2, r3
 800df1c:	4b66      	ldr	r3, [pc, #408]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df1e:	7a5b      	ldrb	r3, [r3, #9]
 800df20:	b21b      	sxth	r3, r3
 800df22:	4313      	orrs	r3, r2
 800df24:	b21a      	sxth	r2, r3
 800df26:	4b66      	ldr	r3, [pc, #408]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df28:	801a      	strh	r2, [r3, #0]
	gyroRaw.y = ((int16_t) imu.buf[10] << 8 | imu.buf[11]);
 800df2a:	4b63      	ldr	r3, [pc, #396]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df2c:	7a9b      	ldrb	r3, [r3, #10]
 800df2e:	021b      	lsls	r3, r3, #8
 800df30:	b21a      	sxth	r2, r3
 800df32:	4b61      	ldr	r3, [pc, #388]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df34:	7adb      	ldrb	r3, [r3, #11]
 800df36:	b21b      	sxth	r3, r3
 800df38:	4313      	orrs	r3, r2
 800df3a:	b21a      	sxth	r2, r3
 800df3c:	4b60      	ldr	r3, [pc, #384]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df3e:	805a      	strh	r2, [r3, #2]
	gyroRaw.z = ((int16_t) imu.buf[12] << 8 | imu.buf[13]);
 800df40:	4b5d      	ldr	r3, [pc, #372]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df42:	7b1b      	ldrb	r3, [r3, #12]
 800df44:	021b      	lsls	r3, r3, #8
 800df46:	b21a      	sxth	r2, r3
 800df48:	4b5b      	ldr	r3, [pc, #364]	@ (800e0b8 <processAccGyroMeasurements+0x1ec>)
 800df4a:	7b5b      	ldrb	r3, [r3, #13]
 800df4c:	b21b      	sxth	r3, r3
 800df4e:	4313      	orrs	r3, r2
 800df50:	b21a      	sxth	r2, r3
 800df52:	4b5b      	ldr	r3, [pc, #364]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df54:	809a      	strh	r2, [r3, #4]

	gyroBiasFound = processGyroBias(gyroRaw.x, gyroRaw.y, gyroRaw.z, &gyroBias);
 800df56:	4b5a      	ldr	r3, [pc, #360]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df58:	f9b3 0000 	ldrsh.w	r0, [r3]
 800df5c:	4b58      	ldr	r3, [pc, #352]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df5e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800df62:	4b57      	ldr	r3, [pc, #348]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df64:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800df68:	4b56      	ldr	r3, [pc, #344]	@ (800e0c4 <processAccGyroMeasurements+0x1f8>)
 800df6a:	f000 fb53 	bl	800e614 <processGyroBias>
 800df6e:	4603      	mov	r3, r0
 800df70:	461a      	mov	r2, r3
 800df72:	4b55      	ldr	r3, [pc, #340]	@ (800e0c8 <processAccGyroMeasurements+0x1fc>)
 800df74:	701a      	strb	r2, [r3, #0]

	if (gyroBiasFound) {
 800df76:	4b54      	ldr	r3, [pc, #336]	@ (800e0c8 <processAccGyroMeasurements+0x1fc>)
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00b      	beq.n	800df96 <processAccGyroMeasurements+0xca>
		processAccScale(accelRaw.x, accelRaw.y, accelRaw.z);
 800df7e:	4b4f      	ldr	r3, [pc, #316]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800df80:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df84:	4a4d      	ldr	r2, [pc, #308]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800df86:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800df8a:	4a4c      	ldr	r2, [pc, #304]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800df8c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800df90:	4618      	mov	r0, r3
 800df92:	f000 fa4d 	bl	800e430 <processAccScale>
	}

	gyroScaledIMU.x = -(gyroRaw.x - gyroBias.x) * SENSORS_DEG_PER_LSB_CFG;
 800df96:	4b4a      	ldr	r3, [pc, #296]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800df98:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df9c:	ee07 3a90 	vmov	s15, r3
 800dfa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dfa4:	4b47      	ldr	r3, [pc, #284]	@ (800e0c4 <processAccGyroMeasurements+0x1f8>)
 800dfa6:	edd3 7a00 	vldr	s15, [r3]
 800dfaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfae:	eef1 7a67 	vneg.f32	s15, s15
 800dfb2:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800e0cc <processAccGyroMeasurements+0x200>
 800dfb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfba:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroScaledIMU.y = (gyroRaw.y - gyroBias.y) * SENSORS_DEG_PER_LSB_CFG;
 800dfbe:	4b40      	ldr	r3, [pc, #256]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800dfc0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800dfc4:	ee07 3a90 	vmov	s15, r3
 800dfc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dfcc:	4b3d      	ldr	r3, [pc, #244]	@ (800e0c4 <processAccGyroMeasurements+0x1f8>)
 800dfce:	edd3 7a01 	vldr	s15, [r3, #4]
 800dfd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfd6:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800e0cc <processAccGyroMeasurements+0x200>
 800dfda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dfde:	edc7 7a04 	vstr	s15, [r7, #16]
	gyroScaledIMU.z = (gyroRaw.z - gyroBias.z) * SENSORS_DEG_PER_LSB_CFG;
 800dfe2:	4b37      	ldr	r3, [pc, #220]	@ (800e0c0 <processAccGyroMeasurements+0x1f4>)
 800dfe4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800dfe8:	ee07 3a90 	vmov	s15, r3
 800dfec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800dff0:	4b34      	ldr	r3, [pc, #208]	@ (800e0c4 <processAccGyroMeasurements+0x1f8>)
 800dff2:	edd3 7a02 	vldr	s15, [r3, #8]
 800dff6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dffa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800e0cc <processAccGyroMeasurements+0x200>
 800dffe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e002:	edc7 7a05 	vstr	s15, [r7, #20]
	sensorsAlignToAirframe(&gyroScaledIMU, &sensorData.gyro);
 800e006:	f107 030c 	add.w	r3, r7, #12
 800e00a:	4931      	ldr	r1, [pc, #196]	@ (800e0d0 <processAccGyroMeasurements+0x204>)
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 fe6f 	bl	800ecf0 <sensorsAlignToAirframe>
	applyAxis3fLpf((lpf2pData*) (&gyroLpf), &sensorData.gyro);
 800e012:	492f      	ldr	r1, [pc, #188]	@ (800e0d0 <processAccGyroMeasurements+0x204>)
 800e014:	482f      	ldr	r0, [pc, #188]	@ (800e0d4 <processAccGyroMeasurements+0x208>)
 800e016:	f001 f845 	bl	800f0a4 <applyAxis3fLpf>

	accScaledIMU.x = -(accelRaw.x - accBias.x) * SENSORS_G_PER_LSB_CFG / accScale;
 800e01a:	4b28      	ldr	r3, [pc, #160]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800e01c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e020:	ee07 3a90 	vmov	s15, r3
 800e024:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e028:	4b2b      	ldr	r3, [pc, #172]	@ (800e0d8 <processAccGyroMeasurements+0x20c>)
 800e02a:	edd3 7a00 	vldr	s15, [r3]
 800e02e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e032:	eef1 7a67 	vneg.f32	s15, s15
 800e036:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800e0dc <processAccGyroMeasurements+0x210>
 800e03a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e03e:	4b28      	ldr	r3, [pc, #160]	@ (800e0e0 <processAccGyroMeasurements+0x214>)
 800e040:	ed93 7a00 	vldr	s14, [r3]
 800e044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e048:	edc7 7a00 	vstr	s15, [r7]
	accScaledIMU.y = (accelRaw.y - accBias.y) * SENSORS_G_PER_LSB_CFG / accScale;
 800e04c:	4b1b      	ldr	r3, [pc, #108]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800e04e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e052:	ee07 3a90 	vmov	s15, r3
 800e056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e05a:	4b1f      	ldr	r3, [pc, #124]	@ (800e0d8 <processAccGyroMeasurements+0x20c>)
 800e05c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e060:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e064:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800e0dc <processAccGyroMeasurements+0x210>
 800e068:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e06c:	4b1c      	ldr	r3, [pc, #112]	@ (800e0e0 <processAccGyroMeasurements+0x214>)
 800e06e:	ed93 7a00 	vldr	s14, [r3]
 800e072:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e076:	edc7 7a01 	vstr	s15, [r7, #4]
	accScaledIMU.z = (accelRaw.z) * SENSORS_G_PER_LSB_CFG / accScale;
 800e07a:	4b10      	ldr	r3, [pc, #64]	@ (800e0bc <processAccGyroMeasurements+0x1f0>)
 800e07c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e080:	ee07 3a90 	vmov	s15, r3
 800e084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e088:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800e0dc <processAccGyroMeasurements+0x210>
 800e08c:	ee67 6a87 	vmul.f32	s13, s15, s14
 800e090:	4b13      	ldr	r3, [pc, #76]	@ (800e0e0 <processAccGyroMeasurements+0x214>)
 800e092:	ed93 7a00 	vldr	s14, [r3]
 800e096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e09a:	edc7 7a02 	vstr	s15, [r7, #8]
	sensorsAlignToAirframe(&accScaledIMU, &sensorData.acc);
 800e09e:	463b      	mov	r3, r7
 800e0a0:	4910      	ldr	r1, [pc, #64]	@ (800e0e4 <processAccGyroMeasurements+0x218>)
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f000 fe24 	bl	800ecf0 <sensorsAlignToAirframe>
//	sensorsAccAlignToGravity(&accScaled, &sensorData.acc);
	applyAxis3fLpf((lpf2pData*) (&accLpf), &sensorData.acc);
 800e0a8:	490e      	ldr	r1, [pc, #56]	@ (800e0e4 <processAccGyroMeasurements+0x218>)
 800e0aa:	480f      	ldr	r0, [pc, #60]	@ (800e0e8 <processAccGyroMeasurements+0x21c>)
 800e0ac:	f000 fffa 	bl	800f0a4 <applyAxis3fLpf>


}
 800e0b0:	bf00      	nop
 800e0b2:	3718      	adds	r7, #24
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	20008514 	.word	0x20008514
 800e0bc:	20008410 	.word	0x20008410
 800e0c0:	20008408 	.word	0x20008408
 800e0c4:	20008418 	.word	0x20008418
 800e0c8:	20008430 	.word	0x20008430
 800e0cc:	3d7a0000 	.word	0x3d7a0000
 800e0d0:	200083d4 	.word	0x200083d4
 800e0d4:	2000848c 	.word	0x2000848c
 800e0d8:	20008424 	.word	0x20008424
 800e0dc:	3a000000 	.word	0x3a000000
 800e0e0:	2000001c 	.word	0x2000001c
 800e0e4:	200083c8 	.word	0x200083c8
 800e0e8:	20008438 	.word	0x20008438

0800e0ec <processBarometerMeasurements>:
static void processBarometerMeasurements()
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
	float pressure, temperature,asl;
	bmp280GetData(&pressure, &temperature, &asl);
 800e0f2:	1d3a      	adds	r2, r7, #4
 800e0f4:	f107 0108 	add.w	r1, r7, #8
 800e0f8:	f107 030c 	add.w	r3, r7, #12
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f7fd fb55 	bl	800b7ac <bmp280GetData>

	sensorData.baro.pressure = pressure / 100.0f;
 800e102:	ed97 7a03 	vldr	s14, [r7, #12]
 800e106:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800e134 <processBarometerMeasurements+0x48>
 800e10a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e10e:	4b0a      	ldr	r3, [pc, #40]	@ (800e138 <processBarometerMeasurements+0x4c>)
 800e110:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensorData.baro.temperature = temperature;
 800e114:	68bb      	ldr	r3, [r7, #8]
 800e116:	4a08      	ldr	r2, [pc, #32]	@ (800e138 <processBarometerMeasurements+0x4c>)
 800e118:	6293      	str	r3, [r2, #40]	@ 0x28
	sensorData.baro.asl = bmp280PressureToAltitude(&sensorData.baro.pressure);
 800e11a:	4808      	ldr	r0, [pc, #32]	@ (800e13c <processBarometerMeasurements+0x50>)
 800e11c:	f7fd fb5e 	bl	800b7dc <bmp280PressureToAltitude>
 800e120:	eef0 7a40 	vmov.f32	s15, s0
 800e124:	4b04      	ldr	r3, [pc, #16]	@ (800e138 <processBarometerMeasurements+0x4c>)
 800e126:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800e12a:	bf00      	nop
 800e12c:	3710      	adds	r7, #16
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}
 800e132:	bf00      	nop
 800e134:	42c80000 	.word	0x42c80000
 800e138:	200083c8 	.word	0x200083c8
 800e13c:	200083ec 	.word	0x200083ec

0800e140 <sensorsDeviceInit>:
static void sensorsDeviceInit(void)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b082      	sub	sp, #8
 800e144:	af00      	add	r7, sp, #0
	isMagnetometerPresent = false;
 800e146:	4b2f      	ldr	r3, [pc, #188]	@ (800e204 <sensorsDeviceInit+0xc4>)
 800e148:	2200      	movs	r2, #0
 800e14a:	701a      	strb	r2, [r3, #0]
	isBarometerPresent = false;
 800e14c:	4b2e      	ldr	r3, [pc, #184]	@ (800e208 <sensorsDeviceInit+0xc8>)
 800e14e:	2200      	movs	r2, #0
 800e150:	701a      	strb	r2, [r3, #0]
	TickType_t xStartTime = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	603b      	str	r3, [r7, #0]
	vTaskDelayUntil(&xStartTime, T2M(1000));
 800e156:	463b      	mov	r3, r7
 800e158:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800e15c:	4618      	mov	r0, r3
 800e15e:	f7f9 f8e3 	bl	8007328 <vTaskDelayUntil>
//	stand = 1;// JH

	if ( mpu6500TestConnection() == false ){
 800e162:	f7fe f943 	bl	800c3ec <mpu6500TestConnection>
 800e166:	4603      	mov	r3, r0
 800e168:	f083 0301 	eor.w	r3, r3, #1
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d001      	beq.n	800e176 <sensorsDeviceInit+0x36>
//		stand = 1;//NJH
		while(1);
 800e172:	bf00      	nop
 800e174:	e7fd      	b.n	800e172 <sensorsDeviceInit+0x32>
	}
	vTaskDelay(100);
 800e176:	2064      	movs	r0, #100	@ 0x64
 800e178:	f7f9 f94c 	bl	8007414 <vTaskDelay>
//	stand = 1;// NJH
	mpu6500Init();
 800e17c:	f7fe f95a 	bl	800c434 <mpu6500Init>
//	stand = 1;// NJH

	vTaskDelay(100);
 800e180:	2064      	movs	r0, #100	@ 0x64
 800e182:	f7f9 f947 	bl	8007414 <vTaskDelay>
	for (uint8_t i = 0; i < 3; i++) {
 800e186:	2300      	movs	r3, #0
 800e188:	71fb      	strb	r3, [r7, #7]
 800e18a:	e01e      	b.n	800e1ca <sensorsDeviceInit+0x8a>
		lpf2pInit(&gyroLpf[i], 1000, GYRO_LPF_CUTOFF_FREQ);
 800e18c:	79fa      	ldrb	r2, [r7, #7]
 800e18e:	4613      	mov	r3, r2
 800e190:	00db      	lsls	r3, r3, #3
 800e192:	1a9b      	subs	r3, r3, r2
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	4a1d      	ldr	r2, [pc, #116]	@ (800e20c <sensorsDeviceInit+0xcc>)
 800e198:	4413      	add	r3, r2
 800e19a:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800e210 <sensorsDeviceInit+0xd0>
 800e19e:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800e214 <sensorsDeviceInit+0xd4>
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f007 fcce 	bl	8015b44 <lpf2pInit>
		lpf2pInit(&accLpf[i], 1000, ACCEL_LPF_CUTOFF_FREQ);
 800e1a8:	79fa      	ldrb	r2, [r7, #7]
 800e1aa:	4613      	mov	r3, r2
 800e1ac:	00db      	lsls	r3, r3, #3
 800e1ae:	1a9b      	subs	r3, r3, r2
 800e1b0:	009b      	lsls	r3, r3, #2
 800e1b2:	4a19      	ldr	r2, [pc, #100]	@ (800e218 <sensorsDeviceInit+0xd8>)
 800e1b4:	4413      	add	r3, r2
 800e1b6:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800e1ba:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800e214 <sensorsDeviceInit+0xd4>
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f007 fcc0 	bl	8015b44 <lpf2pInit>
	for (uint8_t i = 0; i < 3; i++) {
 800e1c4:	79fb      	ldrb	r3, [r7, #7]
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	71fb      	strb	r3, [r7, #7]
 800e1ca:	79fb      	ldrb	r3, [r7, #7]
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d9dd      	bls.n	800e18c <sensorsDeviceInit+0x4c>
	}

	vTaskDelay(10);
 800e1d0:	200a      	movs	r0, #10
 800e1d2:	f7f9 f91f 	bl	8007414 <vTaskDelay>
	bmp280Init();
 800e1d6:	f7fd fab1 	bl	800b73c <bmp280Init>
	if (bmp280TestConnection() == true){
 800e1da:	f7fd fac7 	bl	800b76c <bmp280TestConnection>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d003      	beq.n	800e1ec <sensorsDeviceInit+0xac>
		isBarometerPresent = true;
 800e1e4:	4b08      	ldr	r3, [pc, #32]	@ (800e208 <sensorsDeviceInit+0xc8>)
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	701a      	strb	r2, [r3, #0]
 800e1ea:	e004      	b.n	800e1f6 <sensorsDeviceInit+0xb6>
	}
	else{
		isBarometerPresent = false;
 800e1ec:	4b06      	ldr	r3, [pc, #24]	@ (800e208 <sensorsDeviceInit+0xc8>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
		while(1);
 800e1f2:	bf00      	nop
 800e1f4:	e7fd      	b.n	800e1f2 <sensorsDeviceInit+0xb2>
	}
	vTaskDelay(10);
 800e1f6:	200a      	movs	r0, #10
 800e1f8:	f7f9 f90c 	bl	8007414 <vTaskDelay>

}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	200084e1 	.word	0x200084e1
 800e208:	200084e0 	.word	0x200084e0
 800e20c:	2000848c 	.word	0x2000848c
 800e210:	42a00000 	.word	0x42a00000
 800e214:	447a0000 	.word	0x447a0000
 800e218:	20008438 	.word	0x20008438

0800e21c <sensorsTaskInit>:
static void sensorsTaskInit(void)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af04      	add	r7, sp, #16
	accelerometerDataQueue = STATIC_MEM_QUEUE_CREATE(accelerometerDataQueue);
 800e222:	2301      	movs	r3, #1
 800e224:	4618      	mov	r0, r3
 800e226:	230c      	movs	r3, #12
 800e228:	4619      	mov	r1, r3
 800e22a:	2300      	movs	r3, #0
 800e22c:	9300      	str	r3, [sp, #0]
 800e22e:	4b1f      	ldr	r3, [pc, #124]	@ (800e2ac <sensorsTaskInit+0x90>)
 800e230:	4a1f      	ldr	r2, [pc, #124]	@ (800e2b0 <sensorsTaskInit+0x94>)
 800e232:	f7f8 f80f 	bl	8006254 <xQueueGenericCreateStatic>
 800e236:	4603      	mov	r3, r0
 800e238:	4a1e      	ldr	r2, [pc, #120]	@ (800e2b4 <sensorsTaskInit+0x98>)
 800e23a:	6013      	str	r3, [r2, #0]
	gyroDataQueue = STATIC_MEM_QUEUE_CREATE(gyroDataQueue);
 800e23c:	2301      	movs	r3, #1
 800e23e:	4618      	mov	r0, r3
 800e240:	230c      	movs	r3, #12
 800e242:	4619      	mov	r1, r3
 800e244:	2300      	movs	r3, #0
 800e246:	9300      	str	r3, [sp, #0]
 800e248:	4b1b      	ldr	r3, [pc, #108]	@ (800e2b8 <sensorsTaskInit+0x9c>)
 800e24a:	4a1c      	ldr	r2, [pc, #112]	@ (800e2bc <sensorsTaskInit+0xa0>)
 800e24c:	f7f8 f802 	bl	8006254 <xQueueGenericCreateStatic>
 800e250:	4603      	mov	r3, r0
 800e252:	4a1b      	ldr	r2, [pc, #108]	@ (800e2c0 <sensorsTaskInit+0xa4>)
 800e254:	6013      	str	r3, [r2, #0]
	magnetometerDataQueue = STATIC_MEM_QUEUE_CREATE(magnetometerDataQueue);
 800e256:	2301      	movs	r3, #1
 800e258:	4618      	mov	r0, r3
 800e25a:	230c      	movs	r3, #12
 800e25c:	4619      	mov	r1, r3
 800e25e:	2300      	movs	r3, #0
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4b18      	ldr	r3, [pc, #96]	@ (800e2c4 <sensorsTaskInit+0xa8>)
 800e264:	4a18      	ldr	r2, [pc, #96]	@ (800e2c8 <sensorsTaskInit+0xac>)
 800e266:	f7f7 fff5 	bl	8006254 <xQueueGenericCreateStatic>
 800e26a:	4603      	mov	r3, r0
 800e26c:	4a17      	ldr	r2, [pc, #92]	@ (800e2cc <sensorsTaskInit+0xb0>)
 800e26e:	6013      	str	r3, [r2, #0]
	barometerDataQueue = STATIC_MEM_QUEUE_CREATE(barometerDataQueue);
 800e270:	2301      	movs	r3, #1
 800e272:	4618      	mov	r0, r3
 800e274:	230c      	movs	r3, #12
 800e276:	4619      	mov	r1, r3
 800e278:	2300      	movs	r3, #0
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	4b14      	ldr	r3, [pc, #80]	@ (800e2d0 <sensorsTaskInit+0xb4>)
 800e27e:	4a15      	ldr	r2, [pc, #84]	@ (800e2d4 <sensorsTaskInit+0xb8>)
 800e280:	f7f7 ffe8 	bl	8006254 <xQueueGenericCreateStatic>
 800e284:	4603      	mov	r3, r0
 800e286:	4a14      	ldr	r2, [pc, #80]	@ (800e2d8 <sensorsTaskInit+0xbc>)
 800e288:	6013      	str	r3, [r2, #0]

	STATIC_MEM_TASK_CREATE(sensorsTask, sensorsTask, SENSORS_TASK_NAME, NULL, SENSORS_TASK_PRI);
 800e28a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800e28e:	461a      	mov	r2, r3
 800e290:	4b12      	ldr	r3, [pc, #72]	@ (800e2dc <sensorsTaskInit+0xc0>)
 800e292:	9302      	str	r3, [sp, #8]
 800e294:	4b12      	ldr	r3, [pc, #72]	@ (800e2e0 <sensorsTaskInit+0xc4>)
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	2304      	movs	r3, #4
 800e29a:	9300      	str	r3, [sp, #0]
 800e29c:	2300      	movs	r3, #0
 800e29e:	4911      	ldr	r1, [pc, #68]	@ (800e2e4 <sensorsTaskInit+0xc8>)
 800e2a0:	4811      	ldr	r0, [pc, #68]	@ (800e2e8 <sensorsTaskInit+0xcc>)
 800e2a2:	f7f8 fe99 	bl	8006fd8 <xTaskCreateStatic>

}
 800e2a6:	bf00      	nop
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	100003b0 	.word	0x100003b0
 800e2b0:	100003a4 	.word	0x100003a4
 800e2b4:	20008308 	.word	0x20008308
 800e2b8:	1000040c 	.word	0x1000040c
 800e2bc:	10000400 	.word	0x10000400
 800e2c0:	2000830c 	.word	0x2000830c
 800e2c4:	10000468 	.word	0x10000468
 800e2c8:	1000045c 	.word	0x1000045c
 800e2cc:	20008310 	.word	0x20008310
 800e2d0:	100004c4 	.word	0x100004c4
 800e2d4:	100004b8 	.word	0x100004b8
 800e2d8:	20008314 	.word	0x20008314
 800e2dc:	10001d40 	.word	0x10001d40
 800e2e0:	20008548 	.word	0x20008548
 800e2e4:	0801e898 	.word	0x0801e898
 800e2e8:	0800dd39 	.word	0x0800dd39

0800e2ec <sensorsInterruptInit>:

static void sensorsInterruptInit(void)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b088      	sub	sp, #32
 800e2f0:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e2f2:	1d3b      	adds	r3, r7, #4
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	605a      	str	r2, [r3, #4]
 800e2fa:	609a      	str	r2, [r3, #8]
 800e2fc:	60da      	str	r2, [r3, #12]
 800e2fe:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800e300:	2300      	movs	r3, #0
 800e302:	603b      	str	r3, [r7, #0]
 800e304:	4b1c      	ldr	r3, [pc, #112]	@ (800e378 <sensorsInterruptInit+0x8c>)
 800e306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e308:	4a1b      	ldr	r2, [pc, #108]	@ (800e378 <sensorsInterruptInit+0x8c>)
 800e30a:	f043 0301 	orr.w	r3, r3, #1
 800e30e:	6313      	str	r3, [r2, #48]	@ 0x30
 800e310:	4b19      	ldr	r3, [pc, #100]	@ (800e378 <sensorsInterruptInit+0x8c>)
 800e312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	603b      	str	r3, [r7, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]

	sensorsDataReady = xSemaphoreCreateBinaryStatic(&sensorsDataReadyBuffer);
 800e31c:	2303      	movs	r3, #3
 800e31e:	9300      	str	r3, [sp, #0]
 800e320:	4b16      	ldr	r3, [pc, #88]	@ (800e37c <sensorsInterruptInit+0x90>)
 800e322:	2200      	movs	r2, #0
 800e324:	2100      	movs	r1, #0
 800e326:	2001      	movs	r0, #1
 800e328:	f7f7 ff94 	bl	8006254 <xQueueGenericCreateStatic>
 800e32c:	4603      	mov	r3, r0
 800e32e:	4a14      	ldr	r2, [pc, #80]	@ (800e380 <sensorsInterruptInit+0x94>)
 800e330:	6013      	str	r3, [r2, #0]
	dataReady = xSemaphoreCreateBinaryStatic(&dataReadyBuffer);
 800e332:	2303      	movs	r3, #3
 800e334:	9300      	str	r3, [sp, #0]
 800e336:	4b13      	ldr	r3, [pc, #76]	@ (800e384 <sensorsInterruptInit+0x98>)
 800e338:	2200      	movs	r2, #0
 800e33a:	2100      	movs	r1, #0
 800e33c:	2001      	movs	r0, #1
 800e33e:	f7f7 ff89 	bl	8006254 <xQueueGenericCreateStatic>
 800e342:	4603      	mov	r3, r0
 800e344:	4a10      	ldr	r2, [pc, #64]	@ (800e388 <sensorsInterruptInit+0x9c>)
 800e346:	6013      	str	r3, [r2, #0]


	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e348:	2302      	movs	r3, #2
 800e34a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800e34c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800e350:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e352:	2301      	movs	r3, #1
 800e354:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e356:	1d3b      	adds	r3, r7, #4
 800e358:	4619      	mov	r1, r3
 800e35a:	480c      	ldr	r0, [pc, #48]	@ (800e38c <sensorsInterruptInit+0xa0>)
 800e35c:	f7f3 fb96 	bl	8001a8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800e360:	2200      	movs	r2, #0
 800e362:	2107      	movs	r1, #7
 800e364:	2007      	movs	r0, #7
 800e366:	f7f2 ffc9 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800e36a:	2007      	movs	r0, #7
 800e36c:	f7f2 ffe2 	bl	8001334 <HAL_NVIC_EnableIRQ>
}
 800e370:	bf00      	nop
 800e372:	3718      	adds	r7, #24
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}
 800e378:	40023800 	.word	0x40023800
 800e37c:	2000831c 	.word	0x2000831c
 800e380:	20008318 	.word	0x20008318
 800e384:	20008370 	.word	0x20008370
 800e388:	2000836c 	.word	0x2000836c
 800e38c:	40020000 	.word	0x40020000

0800e390 <sensorsMpu6500Bmp280Init>:

void sensorsMpu6500Bmp280Init(void)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	af00      	add	r7, sp, #0
	if (isInit) {
 800e394:	4b09      	ldr	r3, [pc, #36]	@ (800e3bc <sensorsMpu6500Bmp280Init+0x2c>)
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d10c      	bne.n	800e3b6 <sensorsMpu6500Bmp280Init+0x26>
		return;
	}
	sensorsBiasObjInit(&gyroBiasRunning);
 800e39c:	4808      	ldr	r0, [pc, #32]	@ (800e3c0 <sensorsMpu6500Bmp280Init+0x30>)
 800e39e:	f000 f96d 	bl	800e67c <sensorsBiasObjInit>
//	stand = 1;//JH

	sensorsDeviceInit();
 800e3a2:	f7ff fecd 	bl	800e140 <sensorsDeviceInit>
//	stand = 1;//NJH

	sensorsInterruptInit();
 800e3a6:	f7ff ffa1 	bl	800e2ec <sensorsInterruptInit>
	sensorsTaskInit();
 800e3aa:	f7ff ff37 	bl	800e21c <sensorsTaskInit>

	isInit = true;
 800e3ae:	4b03      	ldr	r3, [pc, #12]	@ (800e3bc <sensorsMpu6500Bmp280Init+0x2c>)
 800e3b0:	2201      	movs	r2, #1
 800e3b2:	701a      	strb	r2, [r3, #0]
 800e3b4:	e000      	b.n	800e3b8 <sensorsMpu6500Bmp280Init+0x28>
		return;
 800e3b6:	bf00      	nop
}
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	200083c0 	.word	0x200083c0
 800e3c0:	10000514 	.word	0x10000514

0800e3c4 <sensorsMpu6500Bmp280Test>:
bool sensorsMpu6500Bmp280Test(void)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
	  bool testStatus = true;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	71fb      	strb	r3, [r7, #7]

	  if (!isInit)
 800e3ce:	4b16      	ldr	r3, [pc, #88]	@ (800e428 <sensorsMpu6500Bmp280Test+0x64>)
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	f083 0301 	eor.w	r3, r3, #1
 800e3d6:	b2db      	uxtb	r3, r3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d001      	beq.n	800e3e0 <sensorsMpu6500Bmp280Test+0x1c>
	  {
	    testStatus = false;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	71fb      	strb	r3, [r7, #7]
	  }

	  // Try for 3 seconds so the quad has stabilized enough to pass the test
	  for (int i = 0; i < 300; i++)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	603b      	str	r3, [r7, #0]
 800e3e4:	e00e      	b.n	800e404 <sensorsMpu6500Bmp280Test+0x40>
	  {
	    if(mpu6500SelfTest() == true)
 800e3e6:	f7fe f81d 	bl	800c424 <mpu6500SelfTest>
 800e3ea:	4603      	mov	r3, r0
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d003      	beq.n	800e3f8 <sensorsMpu6500Bmp280Test+0x34>
	    {
	    	isMpu6500TestPassed = true;
 800e3f0:	4b0e      	ldr	r3, [pc, #56]	@ (800e42c <sensorsMpu6500Bmp280Test+0x68>)
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	701a      	strb	r2, [r3, #0]
	      break;
 800e3f6:	e009      	b.n	800e40c <sensorsMpu6500Bmp280Test+0x48>
	    }
	    else
	    {
	      vTaskDelay(M2T(10));
 800e3f8:	200a      	movs	r0, #10
 800e3fa:	f7f9 f80b 	bl	8007414 <vTaskDelay>
	  for (int i = 0; i < 300; i++)
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	3301      	adds	r3, #1
 800e402:	603b      	str	r3, [r7, #0]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800e40a:	dbec      	blt.n	800e3e6 <sensorsMpu6500Bmp280Test+0x22>
	    }
	  }
	  testStatus &= isMpu6500TestPassed;
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	4a07      	ldr	r2, [pc, #28]	@ (800e42c <sensorsMpu6500Bmp280Test+0x68>)
 800e410:	7812      	ldrb	r2, [r2, #0]
 800e412:	4013      	ands	r3, r2
 800e414:	2b00      	cmp	r3, #0
 800e416:	bf14      	ite	ne
 800e418:	2301      	movne	r3, #1
 800e41a:	2300      	moveq	r3, #0
 800e41c:	71fb      	strb	r3, [r7, #7]
	    isLPS25HTestPassed = lps25hSelfTest();
	    testStatus = isLPS25HTestPassed;
	  }
	#endif

	  return true;
 800e41e:	2301      	movs	r3, #1
//	  return testStatus;
}
 800e420:	4618      	mov	r0, r3
 800e422:	3708      	adds	r7, #8
 800e424:	46bd      	mov	sp, r7
 800e426:	bd80      	pop	{r7, pc}
 800e428:	200083c0 	.word	0x200083c0
 800e42c:	200084e2 	.word	0x200084e2

0800e430 <processAccScale>:

static bool processAccScale(int16_t ax, int16_t ay, int16_t az)
{
 800e430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e434:	ed2d 8b02 	vpush	{d8}
 800e438:	b088      	sub	sp, #32
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	4603      	mov	r3, r0
 800e43e:	83fb      	strh	r3, [r7, #30]
 800e440:	460b      	mov	r3, r1
 800e442:	83bb      	strh	r3, [r7, #28]
 800e444:	4613      	mov	r3, r2
 800e446:	837b      	strh	r3, [r7, #26]
  static bool accBiasFound = false;
  static uint32_t accScaleSumCount = 0;
  static int64_t accSum[GYRO_NBR_OF_AXES] = {0};


  if (!accBiasFound)
 800e448:	4b6a      	ldr	r3, [pc, #424]	@ (800e5f4 <processAccScale+0x1c4>)
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	f083 0301 	eor.w	r3, r3, #1
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	f000 80c5 	beq.w	800e5e2 <processAccScale+0x1b2>
  {
    accScaleSum += sqrtf(powf(ax * SENSORS_G_PER_LSB_CFG, 2) + powf(ay * SENSORS_G_PER_LSB_CFG, 2) + powf(az * SENSORS_G_PER_LSB_CFG, 2));
 800e458:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e45c:	ee07 3a90 	vmov	s15, r3
 800e460:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e464:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800e5f8 <processAccScale+0x1c8>
 800e468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e46c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e470:	eeb0 0a67 	vmov.f32	s0, s15
 800e474:	f00c ff5a 	bl	801b32c <powf>
 800e478:	eeb0 8a40 	vmov.f32	s16, s0
 800e47c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800e480:	ee07 3a90 	vmov	s15, r3
 800e484:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e488:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800e5f8 <processAccScale+0x1c8>
 800e48c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e490:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e494:	eeb0 0a67 	vmov.f32	s0, s15
 800e498:	f00c ff48 	bl	801b32c <powf>
 800e49c:	eef0 7a40 	vmov.f32	s15, s0
 800e4a0:	ee38 8a27 	vadd.f32	s16, s16, s15
 800e4a4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800e4a8:	ee07 3a90 	vmov	s15, r3
 800e4ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4b0:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800e5f8 <processAccScale+0x1c8>
 800e4b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e4b8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e4bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e4c0:	f00c ff34 	bl	801b32c <powf>
 800e4c4:	eef0 7a40 	vmov.f32	s15, s0
 800e4c8:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e4cc:	eeb0 0a67 	vmov.f32	s0, s15
 800e4d0:	f00c ff84 	bl	801b3dc <sqrtf>
 800e4d4:	eeb0 7a40 	vmov.f32	s14, s0
 800e4d8:	4b48      	ldr	r3, [pc, #288]	@ (800e5fc <processAccScale+0x1cc>)
 800e4da:	edd3 7a00 	vldr	s15, [r3]
 800e4de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4e2:	4b46      	ldr	r3, [pc, #280]	@ (800e5fc <processAccScale+0x1cc>)
 800e4e4:	edc3 7a00 	vstr	s15, [r3]
    accScaleSumCount++;
 800e4e8:	4b45      	ldr	r3, [pc, #276]	@ (800e600 <processAccScale+0x1d0>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3301      	adds	r3, #1
 800e4ee:	4a44      	ldr	r2, [pc, #272]	@ (800e600 <processAccScale+0x1d0>)
 800e4f0:	6013      	str	r3, [r2, #0]
    accSum[0] += ax;
 800e4f2:	4b44      	ldr	r3, [pc, #272]	@ (800e604 <processAccScale+0x1d4>)
 800e4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4f8:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800e4fc:	17c8      	asrs	r0, r1, #31
 800e4fe:	468a      	mov	sl, r1
 800e500:	4683      	mov	fp, r0
 800e502:	eb12 010a 	adds.w	r1, r2, sl
 800e506:	6139      	str	r1, [r7, #16]
 800e508:	eb43 030b 	adc.w	r3, r3, fp
 800e50c:	617b      	str	r3, [r7, #20]
 800e50e:	4b3d      	ldr	r3, [pc, #244]	@ (800e604 <processAccScale+0x1d4>)
 800e510:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e514:	e9c3 1200 	strd	r1, r2, [r3]
    accSum[1] += ay;
 800e518:	4b3a      	ldr	r3, [pc, #232]	@ (800e604 <processAccScale+0x1d4>)
 800e51a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e51e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800e522:	17c8      	asrs	r0, r1, #31
 800e524:	4688      	mov	r8, r1
 800e526:	4681      	mov	r9, r0
 800e528:	eb12 0108 	adds.w	r1, r2, r8
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	eb43 0309 	adc.w	r3, r3, r9
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	4b33      	ldr	r3, [pc, #204]	@ (800e604 <processAccScale+0x1d4>)
 800e536:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e53a:	e9c3 1202 	strd	r1, r2, [r3, #8]
    accSum[2] += az;
 800e53e:	4b31      	ldr	r3, [pc, #196]	@ (800e604 <processAccScale+0x1d4>)
 800e540:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e544:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800e548:	17c8      	asrs	r0, r1, #31
 800e54a:	460c      	mov	r4, r1
 800e54c:	4605      	mov	r5, r0
 800e54e:	1911      	adds	r1, r2, r4
 800e550:	6039      	str	r1, [r7, #0]
 800e552:	416b      	adcs	r3, r5
 800e554:	607b      	str	r3, [r7, #4]
 800e556:	4b2b      	ldr	r3, [pc, #172]	@ (800e604 <processAccScale+0x1d4>)
 800e558:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e55c:	e9c3 1204 	strd	r1, r2, [r3, #16]

    if (accScaleSumCount == SENSORS_ACC_SCALE_SAMPLES)
 800e560:	4b27      	ldr	r3, [pc, #156]	@ (800e600 <processAccScale+0x1d0>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	2bc8      	cmp	r3, #200	@ 0xc8
 800e566:	d13c      	bne.n	800e5e2 <processAccScale+0x1b2>
    {
      accScale = accScaleSum / SENSORS_ACC_SCALE_SAMPLES;
 800e568:	4b24      	ldr	r3, [pc, #144]	@ (800e5fc <processAccScale+0x1cc>)
 800e56a:	ed93 7a00 	vldr	s14, [r3]
 800e56e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800e608 <processAccScale+0x1d8>
 800e572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e576:	4b25      	ldr	r3, [pc, #148]	@ (800e60c <processAccScale+0x1dc>)
 800e578:	edc3 7a00 	vstr	s15, [r3]
      accBias.x = (float) accSum[0] / SENSORS_ACC_SCALE_SAMPLES;
 800e57c:	4b21      	ldr	r3, [pc, #132]	@ (800e604 <processAccScale+0x1d4>)
 800e57e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e582:	4610      	mov	r0, r2
 800e584:	4619      	mov	r1, r3
 800e586:	f7f2 fbb9 	bl	8000cfc <__aeabi_l2f>
 800e58a:	ee06 0a90 	vmov	s13, r0
 800e58e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800e608 <processAccScale+0x1d8>
 800e592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e596:	4b1e      	ldr	r3, [pc, #120]	@ (800e610 <processAccScale+0x1e0>)
 800e598:	edc3 7a00 	vstr	s15, [r3]
      accBias.y = (float) accSum[1] / SENSORS_ACC_SCALE_SAMPLES;
 800e59c:	4b19      	ldr	r3, [pc, #100]	@ (800e604 <processAccScale+0x1d4>)
 800e59e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e5a2:	4610      	mov	r0, r2
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	f7f2 fba9 	bl	8000cfc <__aeabi_l2f>
 800e5aa:	ee06 0a90 	vmov	s13, r0
 800e5ae:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800e608 <processAccScale+0x1d8>
 800e5b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5b6:	4b16      	ldr	r3, [pc, #88]	@ (800e610 <processAccScale+0x1e0>)
 800e5b8:	edc3 7a01 	vstr	s15, [r3, #4]
      accBias.z = (float) accSum[2] / SENSORS_ACC_SCALE_SAMPLES;
 800e5bc:	4b11      	ldr	r3, [pc, #68]	@ (800e604 <processAccScale+0x1d4>)
 800e5be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	f7f2 fb99 	bl	8000cfc <__aeabi_l2f>
 800e5ca:	ee06 0a90 	vmov	s13, r0
 800e5ce:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800e608 <processAccScale+0x1d8>
 800e5d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e5d6:	4b0e      	ldr	r3, [pc, #56]	@ (800e610 <processAccScale+0x1e0>)
 800e5d8:	edc3 7a02 	vstr	s15, [r3, #8]
      accBiasFound = true;
 800e5dc:	4b05      	ldr	r3, [pc, #20]	@ (800e5f4 <processAccScale+0x1c4>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	701a      	strb	r2, [r3, #0]
    }
  }

  return accBiasFound;
 800e5e2:	4b04      	ldr	r3, [pc, #16]	@ (800e5f4 <processAccScale+0x1c4>)
 800e5e4:	781b      	ldrb	r3, [r3, #0]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3720      	adds	r7, #32
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	ecbd 8b02 	vpop	{d8}
 800e5f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e5f4:	200089f8 	.word	0x200089f8
 800e5f8:	3a000000 	.word	0x3a000000
 800e5fc:	20008434 	.word	0x20008434
 800e600:	200089fc 	.word	0x200089fc
 800e604:	20008a00 	.word	0x20008a00
 800e608:	43480000 	.word	0x43480000
 800e60c:	2000001c 	.word	0x2000001c
 800e610:	20008424 	.word	0x20008424

0800e614 <processGyroBias>:
static bool processGyroBias(int16_t gx, int16_t gy, int16_t gz,  Axis3f *gyroBiasOut)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	607b      	str	r3, [r7, #4]
 800e61c:	4603      	mov	r3, r0
 800e61e:	81fb      	strh	r3, [r7, #14]
 800e620:	460b      	mov	r3, r1
 800e622:	81bb      	strh	r3, [r7, #12]
 800e624:	4613      	mov	r3, r2
 800e626:	817b      	strh	r3, [r7, #10]
	sensorsAddBiasValue(&gyroBiasRunning, gx, gy, gz);
 800e628:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e62c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800e630:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800e634:	4810      	ldr	r0, [pc, #64]	@ (800e678 <processGyroBias+0x64>)
 800e636:	f000 f9e3 	bl	800ea00 <sensorsAddBiasValue>

	if (!gyroBiasRunning.isBiasValueFound)
 800e63a:	4b0f      	ldr	r3, [pc, #60]	@ (800e678 <processGyroBias+0x64>)
 800e63c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800e640:	f083 0301 	eor.w	r3, r3, #1
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b00      	cmp	r3, #0
 800e648:	d002      	beq.n	800e650 <processGyroBias+0x3c>
	{
		sensorsFindBiasValue(&gyroBiasRunning);
 800e64a:	480b      	ldr	r0, [pc, #44]	@ (800e678 <processGyroBias+0x64>)
 800e64c:	f000 fa0e 	bl	800ea6c <sensorsFindBiasValue>
	}

	gyroBiasOut->x = gyroBiasRunning.bias.x;
 800e650:	4b09      	ldr	r3, [pc, #36]	@ (800e678 <processGyroBias+0x64>)
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	601a      	str	r2, [r3, #0]
	gyroBiasOut->y = gyroBiasRunning.bias.y;
 800e658:	4b07      	ldr	r3, [pc, #28]	@ (800e678 <processGyroBias+0x64>)
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	605a      	str	r2, [r3, #4]
	gyroBiasOut->z = gyroBiasRunning.bias.z;
 800e660:	4b05      	ldr	r3, [pc, #20]	@ (800e678 <processGyroBias+0x64>)
 800e662:	689a      	ldr	r2, [r3, #8]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	609a      	str	r2, [r3, #8]

	return gyroBiasRunning.isBiasValueFound;
 800e668:	4b03      	ldr	r3, [pc, #12]	@ (800e678 <processGyroBias+0x64>)
 800e66a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3710      	adds	r7, #16
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	10000514 	.word	0x10000514

0800e67c <sensorsBiasObjInit>:
static void sensorsBiasObjInit(BiasObj* bias)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	6078      	str	r0, [r7, #4]
  bias->isBufferFilled = false;
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  bias->bufHead = bias->buffer;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800e696:	bf00      	nop
 800e698:	370c      	adds	r7, #12
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
	...

0800e6a4 <sensorsCalculateVarianceAndMean>:

static void sensorsCalculateVarianceAndMean(BiasObj* bias, Axis3f* varOut, Axis3f* meanOut)
{
 800e6a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e6a8:	b0ac      	sub	sp, #176	@ 0xb0
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	6778      	str	r0, [r7, #116]	@ 0x74
 800e6ae:	6739      	str	r1, [r7, #112]	@ 0x70
 800e6b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
  uint32_t i;
  int64_t sum[GYRO_NBR_OF_AXES] = {0};
 800e6b2:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	6013      	str	r3, [r2, #0]
 800e6ba:	6053      	str	r3, [r2, #4]
 800e6bc:	6093      	str	r3, [r2, #8]
 800e6be:	60d3      	str	r3, [r2, #12]
 800e6c0:	6113      	str	r3, [r2, #16]
 800e6c2:	6153      	str	r3, [r2, #20]
  int64_t sumSq[GYRO_NBR_OF_AXES] = {0};
 800e6c4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	6013      	str	r3, [r2, #0]
 800e6cc:	6053      	str	r3, [r2, #4]
 800e6ce:	6093      	str	r3, [r2, #8]
 800e6d0:	60d3      	str	r3, [r2, #12]
 800e6d2:	6113      	str	r3, [r2, #16]
 800e6d4:	6153      	str	r3, [r2, #20]

  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e6dc:	e0d8      	b.n	800e890 <sensorsCalculateVarianceAndMean+0x1ec>
  {
		sum[0] += bias->buffer[i].x;
 800e6de:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800e6e2:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e6e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	4413      	add	r3, r2
 800e6ee:	005b      	lsls	r3, r3, #1
 800e6f0:	4423      	add	r3, r4
 800e6f2:	332c      	adds	r3, #44	@ 0x2c
 800e6f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6f8:	b21b      	sxth	r3, r3
 800e6fa:	17da      	asrs	r2, r3, #31
 800e6fc:	663b      	str	r3, [r7, #96]	@ 0x60
 800e6fe:	667a      	str	r2, [r7, #100]	@ 0x64
 800e700:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800e704:	4623      	mov	r3, r4
 800e706:	18c3      	adds	r3, r0, r3
 800e708:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e70a:	462b      	mov	r3, r5
 800e70c:	eb41 0303 	adc.w	r3, r1, r3
 800e710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e712:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800e716:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
		sum[1] += bias->buffer[i].y;
 800e71a:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800e71e:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e720:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e724:	4613      	mov	r3, r2
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	4413      	add	r3, r2
 800e72a:	005b      	lsls	r3, r3, #1
 800e72c:	4423      	add	r3, r4
 800e72e:	332e      	adds	r3, #46	@ 0x2e
 800e730:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e734:	b21b      	sxth	r3, r3
 800e736:	17da      	asrs	r2, r3, #31
 800e738:	653b      	str	r3, [r7, #80]	@ 0x50
 800e73a:	657a      	str	r2, [r7, #84]	@ 0x54
 800e73c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800e740:	4623      	mov	r3, r4
 800e742:	18c3      	adds	r3, r0, r3
 800e744:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e746:	462b      	mov	r3, r5
 800e748:	eb41 0303 	adc.w	r3, r1, r3
 800e74c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e74e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800e752:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
		sum[2] += bias->buffer[i].z;
 800e756:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800e75a:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e75c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e760:	4613      	mov	r3, r2
 800e762:	005b      	lsls	r3, r3, #1
 800e764:	4413      	add	r3, r2
 800e766:	005b      	lsls	r3, r3, #1
 800e768:	4423      	add	r3, r4
 800e76a:	3330      	adds	r3, #48	@ 0x30
 800e76c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e770:	b21b      	sxth	r3, r3
 800e772:	17da      	asrs	r2, r3, #31
 800e774:	643b      	str	r3, [r7, #64]	@ 0x40
 800e776:	647a      	str	r2, [r7, #68]	@ 0x44
 800e778:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800e77c:	4623      	mov	r3, r4
 800e77e:	18c3      	adds	r3, r0, r3
 800e780:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e782:	462b      	mov	r3, r5
 800e784:	eb41 0303 	adc.w	r3, r1, r3
 800e788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e78a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800e78e:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
		sumSq[0] += bias->buffer[i].x * bias->buffer[i].x;
 800e792:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800e796:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e798:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e79c:	4613      	mov	r3, r2
 800e79e:	005b      	lsls	r3, r3, #1
 800e7a0:	4413      	add	r3, r2
 800e7a2:	005b      	lsls	r3, r3, #1
 800e7a4:	4423      	add	r3, r4
 800e7a6:	332c      	adds	r3, #44	@ 0x2c
 800e7a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7ac:	461d      	mov	r5, r3
 800e7ae:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e7b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e7b4:	4613      	mov	r3, r2
 800e7b6:	005b      	lsls	r3, r3, #1
 800e7b8:	4413      	add	r3, r2
 800e7ba:	005b      	lsls	r3, r3, #1
 800e7bc:	4423      	add	r3, r4
 800e7be:	332c      	adds	r3, #44	@ 0x2c
 800e7c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7c4:	fb05 f303 	mul.w	r3, r5, r3
 800e7c8:	17da      	asrs	r2, r3, #31
 800e7ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800e7cc:	637a      	str	r2, [r7, #52]	@ 0x34
 800e7ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800e7d2:	4623      	mov	r3, r4
 800e7d4:	18c3      	adds	r3, r0, r3
 800e7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e7d8:	462b      	mov	r3, r5
 800e7da:	eb41 0303 	adc.w	r3, r1, r3
 800e7de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e7e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800e7e4:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
		sumSq[1] += bias->buffer[i].y * bias->buffer[i].y;
 800e7e8:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800e7ec:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e7ee:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	005b      	lsls	r3, r3, #1
 800e7f6:	4413      	add	r3, r2
 800e7f8:	005b      	lsls	r3, r3, #1
 800e7fa:	4423      	add	r3, r4
 800e7fc:	332e      	adds	r3, #46	@ 0x2e
 800e7fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e802:	461d      	mov	r5, r3
 800e804:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e806:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e80a:	4613      	mov	r3, r2
 800e80c:	005b      	lsls	r3, r3, #1
 800e80e:	4413      	add	r3, r2
 800e810:	005b      	lsls	r3, r3, #1
 800e812:	4423      	add	r3, r4
 800e814:	332e      	adds	r3, #46	@ 0x2e
 800e816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e81a:	fb05 f303 	mul.w	r3, r5, r3
 800e81e:	17da      	asrs	r2, r3, #31
 800e820:	623b      	str	r3, [r7, #32]
 800e822:	627a      	str	r2, [r7, #36]	@ 0x24
 800e824:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800e828:	4623      	mov	r3, r4
 800e82a:	18c3      	adds	r3, r0, r3
 800e82c:	61bb      	str	r3, [r7, #24]
 800e82e:	462b      	mov	r3, r5
 800e830:	eb41 0303 	adc.w	r3, r1, r3
 800e834:	61fb      	str	r3, [r7, #28]
 800e836:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800e83a:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
		sumSq[2] += bias->buffer[i].z * bias->buffer[i].z;
 800e83e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800e842:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e844:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e848:	4613      	mov	r3, r2
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	4413      	add	r3, r2
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	4423      	add	r3, r4
 800e852:	3330      	adds	r3, #48	@ 0x30
 800e854:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e858:	461d      	mov	r5, r3
 800e85a:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800e85c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800e860:	4613      	mov	r3, r2
 800e862:	005b      	lsls	r3, r3, #1
 800e864:	4413      	add	r3, r2
 800e866:	005b      	lsls	r3, r3, #1
 800e868:	4423      	add	r3, r4
 800e86a:	3330      	adds	r3, #48	@ 0x30
 800e86c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e870:	fb05 f303 	mul.w	r3, r5, r3
 800e874:	17da      	asrs	r2, r3, #31
 800e876:	4698      	mov	r8, r3
 800e878:	4691      	mov	r9, r2
 800e87a:	eb10 0a08 	adds.w	sl, r0, r8
 800e87e:	eb41 0b09 	adc.w	fp, r1, r9
 800e882:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88
  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800e886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e88a:	3301      	adds	r3, #1
 800e88c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e890:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e894:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e898:	f4ff af21 	bcc.w	800e6de <sensorsCalculateVarianceAndMean+0x3a>

  }



  meanOut->x = (float) sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800e89c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800e8a0:	4610      	mov	r0, r2
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	f7f2 fa2a 	bl	8000cfc <__aeabi_l2f>
 800e8a8:	ee06 0a90 	vmov	s13, r0
 800e8ac:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800e9fc <sensorsCalculateVarianceAndMean+0x358>
 800e8b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8b6:	edc3 7a00 	vstr	s15, [r3]
  meanOut->y = (float) sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800e8ba:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800e8be:	4610      	mov	r0, r2
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	f7f2 fa1b 	bl	8000cfc <__aeabi_l2f>
 800e8c6:	ee06 0a90 	vmov	s13, r0
 800e8ca:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800e9fc <sensorsCalculateVarianceAndMean+0x358>
 800e8ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8d4:	edc3 7a01 	vstr	s15, [r3, #4]
  meanOut->z = (float) sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800e8d8:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800e8dc:	4610      	mov	r0, r2
 800e8de:	4619      	mov	r1, r3
 800e8e0:	f7f2 fa0c 	bl	8000cfc <__aeabi_l2f>
 800e8e4:	ee06 0a90 	vmov	s13, r0
 800e8e8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800e9fc <sensorsCalculateVarianceAndMean+0x358>
 800e8ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e8f2:	edc3 7a02 	vstr	s15, [r3, #8]

  varOut->x = sumSq[0] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->x * meanOut->x;
 800e8f6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	da08      	bge.n	800e910 <sensorsCalculateVarianceAndMean+0x26c>
 800e8fe:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800e902:	1851      	adds	r1, r2, r1
 800e904:	6139      	str	r1, [r7, #16]
 800e906:	f143 0300 	adc.w	r3, r3, #0
 800e90a:	617b      	str	r3, [r7, #20]
 800e90c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e910:	f04f 0000 	mov.w	r0, #0
 800e914:	f04f 0100 	mov.w	r1, #0
 800e918:	0a90      	lsrs	r0, r2, #10
 800e91a:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800e91e:	1299      	asrs	r1, r3, #10
 800e920:	4602      	mov	r2, r0
 800e922:	460b      	mov	r3, r1
 800e924:	4610      	mov	r0, r2
 800e926:	4619      	mov	r1, r3
 800e928:	f7f2 f9e8 	bl	8000cfc <__aeabi_l2f>
 800e92c:	ee06 0a90 	vmov	s13, r0
 800e930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e932:	ed93 7a00 	vldr	s14, [r3]
 800e936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e938:	edd3 7a00 	vldr	s15, [r3]
 800e93c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e940:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e946:	edc3 7a00 	vstr	s15, [r3]
  varOut->y = sumSq[1] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->y * meanOut->y;
 800e94a:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800e94e:	2b00      	cmp	r3, #0
 800e950:	da08      	bge.n	800e964 <sensorsCalculateVarianceAndMean+0x2c0>
 800e952:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800e956:	1851      	adds	r1, r2, r1
 800e958:	60b9      	str	r1, [r7, #8]
 800e95a:	f143 0300 	adc.w	r3, r3, #0
 800e95e:	60fb      	str	r3, [r7, #12]
 800e960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e964:	f04f 0000 	mov.w	r0, #0
 800e968:	f04f 0100 	mov.w	r1, #0
 800e96c:	0a90      	lsrs	r0, r2, #10
 800e96e:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800e972:	1299      	asrs	r1, r3, #10
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4610      	mov	r0, r2
 800e97a:	4619      	mov	r1, r3
 800e97c:	f7f2 f9be 	bl	8000cfc <__aeabi_l2f>
 800e980:	ee06 0a90 	vmov	s13, r0
 800e984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e986:	ed93 7a01 	vldr	s14, [r3, #4]
 800e98a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e98c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e990:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e994:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e998:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e99a:	edc3 7a01 	vstr	s15, [r3, #4]
  varOut->z = sumSq[2] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->z * meanOut->z;
 800e99e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	da08      	bge.n	800e9b8 <sensorsCalculateVarianceAndMean+0x314>
 800e9a6:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800e9aa:	1851      	adds	r1, r2, r1
 800e9ac:	6039      	str	r1, [r7, #0]
 800e9ae:	f143 0300 	adc.w	r3, r3, #0
 800e9b2:	607b      	str	r3, [r7, #4]
 800e9b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9b8:	f04f 0000 	mov.w	r0, #0
 800e9bc:	f04f 0100 	mov.w	r1, #0
 800e9c0:	0a90      	lsrs	r0, r2, #10
 800e9c2:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800e9c6:	1299      	asrs	r1, r3, #10
 800e9c8:	4602      	mov	r2, r0
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	4610      	mov	r0, r2
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	f7f2 f994 	bl	8000cfc <__aeabi_l2f>
 800e9d4:	ee06 0a90 	vmov	s13, r0
 800e9d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9da:	ed93 7a02 	vldr	s14, [r3, #8]
 800e9de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e9e0:	edd3 7a02 	vldr	s15, [r3, #8]
 800e9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800e9ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e9ee:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800e9f2:	bf00      	nop
 800e9f4:	37b0      	adds	r7, #176	@ 0xb0
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e9fc:	44800000 	.word	0x44800000

0800ea00 <sensorsAddBiasValue>:
  meanOut->x = sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->y = sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->z = sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
}
static void sensorsAddBiasValue(BiasObj* bias, int16_t x, int16_t y, int16_t z)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b085      	sub	sp, #20
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	4608      	mov	r0, r1
 800ea0a:	4611      	mov	r1, r2
 800ea0c:	461a      	mov	r2, r3
 800ea0e:	4603      	mov	r3, r0
 800ea10:	817b      	strh	r3, [r7, #10]
 800ea12:	460b      	mov	r3, r1
 800ea14:	813b      	strh	r3, [r7, #8]
 800ea16:	4613      	mov	r3, r2
 800ea18:	80fb      	strh	r3, [r7, #6]
  bias->bufHead->x = x;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea1e:	897a      	ldrh	r2, [r7, #10]
 800ea20:	801a      	strh	r2, [r3, #0]
  bias->bufHead->y = y;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea26:	893a      	ldrh	r2, [r7, #8]
 800ea28:	805a      	strh	r2, [r3, #2]
  bias->bufHead->z = z;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea2e:	88fa      	ldrh	r2, [r7, #6]
 800ea30:	809a      	strh	r2, [r3, #4]
  bias->bufHead++;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea36:	1d9a      	adds	r2, r3, #6
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (bias->bufHead >= &bias->buffer[SENSORS_NBR_OF_BIAS_SAMPLES])
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	f503 53c1 	add.w	r3, r3, #6176	@ 0x1820
 800ea46:	330c      	adds	r3, #12
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d308      	bcc.n	800ea5e <sensorsAddBiasValue+0x5e>
  {
    bias->bufHead = bias->buffer;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	629a      	str	r2, [r3, #40]	@ 0x28
    bias->isBufferFilled = true;
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2201      	movs	r2, #1
 800ea5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
}
 800ea5e:	bf00      	nop
 800ea60:	3714      	adds	r7, #20
 800ea62:	46bd      	mov	sp, r7
 800ea64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea68:	4770      	bx	lr
	...

0800ea6c <sensorsFindBiasValue>:
static bool sensorsFindBiasValue(BiasObj* bias)
{
 800ea6c:	b590      	push	{r4, r7, lr}
 800ea6e:	b085      	sub	sp, #20
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  static int32_t varianceSampleTime;
  bool foundBias = false;
 800ea74:	2300      	movs	r3, #0
 800ea76:	73fb      	strb	r3, [r7, #15]

  if (bias->isBufferFilled)
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d047      	beq.n	800eb12 <sensorsFindBiasValue+0xa6>
  {
    sensorsCalculateVarianceAndMean(bias, &bias->variance, &bias->mean);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	f103 010c 	add.w	r1, r3, #12
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3318      	adds	r3, #24
 800ea8c:	461a      	mov	r2, r3
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f7ff fe08 	bl	800e6a4 <sensorsCalculateVarianceAndMean>

    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	edd3 7a03 	vldr	s15, [r3, #12]
 800ea9a:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800eb1c <sensorsFindBiasValue+0xb0>
 800ea9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa6:	d534      	bpl.n	800eb12 <sensorsFindBiasValue+0xa6>
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	edd3 7a04 	vldr	s15, [r3, #16]
    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800eaae:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800eb1c <sensorsFindBiasValue+0xb0>
 800eab2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaba:	d52a      	bpl.n	800eb12 <sensorsFindBiasValue+0xa6>
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	edd3 7a05 	vldr	s15, [r3, #20]
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800eac2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800eb1c <sensorsFindBiasValue+0xb0>
 800eac6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800eaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eace:	d520      	bpl.n	800eb12 <sensorsFindBiasValue+0xa6>
        (varianceSampleTime + GYRO_MIN_BIAS_TIMEOUT_MS < xTaskGetTickCount()))
 800ead0:	4b13      	ldr	r3, [pc, #76]	@ (800eb20 <sensorsFindBiasValue+0xb4>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 800ead8:	f7f8 fdec 	bl	80076b4 <xTaskGetTickCount>
 800eadc:	4603      	mov	r3, r0
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800eade:	429c      	cmp	r4, r3
 800eae0:	d217      	bcs.n	800eb12 <sensorsFindBiasValue+0xa6>
    {
      varianceSampleTime = xTaskGetTickCount();
 800eae2:	f7f8 fde7 	bl	80076b4 <xTaskGetTickCount>
 800eae6:	4603      	mov	r3, r0
 800eae8:	461a      	mov	r2, r3
 800eaea:	4b0d      	ldr	r3, [pc, #52]	@ (800eb20 <sensorsFindBiasValue+0xb4>)
 800eaec:	601a      	str	r2, [r3, #0]
      bias->bias.x = bias->mean.x;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	699a      	ldr	r2, [r3, #24]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	601a      	str	r2, [r3, #0]
      bias->bias.y = bias->mean.y;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	69da      	ldr	r2, [r3, #28]
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	605a      	str	r2, [r3, #4]
      bias->bias.z = bias->mean.z;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6a1a      	ldr	r2, [r3, #32]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	609a      	str	r2, [r3, #8]
      foundBias = true;
 800eb06:	2301      	movs	r3, #1
 800eb08:	73fb      	strb	r3, [r7, #15]
      bias->isBiasValueFound = true;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
  }

  return foundBias;
 800eb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3714      	adds	r7, #20
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd90      	pop	{r4, r7, pc}
 800eb1c:	42480000 	.word	0x42480000
 800eb20:	20008a18 	.word	0x20008a18

0800eb24 <sensorsMpu6500Bmp280ManufacturingTest>:

bool sensorsMpu6500Bmp280ManufacturingTest(void)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	ed2d 8b02 	vpush	{d8}
 800eb2a:	b08f      	sub	sp, #60	@ 0x3c
 800eb2c:	af02      	add	r7, sp, #8
	bool testStatus = false;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	Axis3i16 g;
	Axis3i16 a;
	Axis3f acc;  // Accelerometer axis data in mG
	float pitch, roll;
	uint32_t startTick = xTaskGetTickCount();
 800eb34:	f7f8 fdbe 	bl	80076b4 <xTaskGetTickCount>
 800eb38:	62b8      	str	r0, [r7, #40]	@ 0x28

	testStatus = mpu6500SelfTest();
 800eb3a:	f7fd fc73 	bl	800c424 <mpu6500SelfTest>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (testStatus)
 800eb44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 80bc 	beq.w	800ecc6 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
	{
		sensorsBiasObjInit(&gyroBiasRunning);
 800eb4e:	4862      	ldr	r0, [pc, #392]	@ (800ecd8 <sensorsMpu6500Bmp280ManufacturingTest+0x1b4>)
 800eb50:	f7ff fd94 	bl	800e67c <sensorsBiasObjInit>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800eb54:	e024      	b.n	800eba0 <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
		{
			mpu6500GetMotion6(&a.y, &a.x, &a.z, &g.y, &g.x, &g.z);
 800eb56:	f107 0318 	add.w	r3, r7, #24
 800eb5a:	1c9c      	adds	r4, r3, #2
 800eb5c:	f107 0310 	add.w	r3, r7, #16
 800eb60:	1d1a      	adds	r2, r3, #4
 800eb62:	f107 0110 	add.w	r1, r7, #16
 800eb66:	f107 0310 	add.w	r3, r7, #16
 800eb6a:	1c98      	adds	r0, r3, #2
 800eb6c:	f107 0318 	add.w	r3, r7, #24
 800eb70:	3304      	adds	r3, #4
 800eb72:	9301      	str	r3, [sp, #4]
 800eb74:	f107 0318 	add.w	r3, r7, #24
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	4623      	mov	r3, r4
 800eb7c:	f7fd fcf4 	bl	800c568 <mpu6500GetMotion6>
			if (processGyroBias(g.x, g.y, g.z, &gyroBias))
 800eb80:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800eb84:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800eb88:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800eb8c:	4b53      	ldr	r3, [pc, #332]	@ (800ecdc <sensorsMpu6500Bmp280ManufacturingTest+0x1b8>)
 800eb8e:	f7ff fd41 	bl	800e614 <processGyroBias>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d003      	beq.n	800eba0 <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
			{
				gyroBiasFound = true;
 800eb98:	4b51      	ldr	r3, [pc, #324]	@ (800ece0 <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	701a      	strb	r2, [r3, #0]
				break;
 800eb9e:	e007      	b.n	800ebb0 <sensorsMpu6500Bmp280ManufacturingTest+0x8c>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800eba0:	f7f8 fd88 	bl	80076b4 <xTaskGetTickCount>
 800eba4:	4602      	mov	r2, r0
 800eba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eba8:	1ad3      	subs	r3, r2, r3
 800ebaa:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800ebae:	d3d2      	bcc.n	800eb56 <sensorsMpu6500Bmp280ManufacturingTest+0x32>
			}
		}

		if (gyroBiasFound) {
 800ebb0:	4b4b      	ldr	r3, [pc, #300]	@ (800ece0 <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800ebb2:	781b      	ldrb	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f000 8083 	beq.w	800ecc0 <sensorsMpu6500Bmp280ManufacturingTest+0x19c>
			acc.x = -(a.x) * SENSORS_G_PER_LSB_CFG;
 800ebba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ebbe:	425b      	negs	r3, r3
 800ebc0:	ee07 3a90 	vmov	s15, r3
 800ebc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebc8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800ece4 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800ebcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebd0:	edc7 7a01 	vstr	s15, [r7, #4]
			acc.y = (a.y) * SENSORS_G_PER_LSB_CFG;
 800ebd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ebd8:	ee07 3a90 	vmov	s15, r3
 800ebdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebe0:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800ece4 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800ebe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebe8:	edc7 7a02 	vstr	s15, [r7, #8]
			acc.z = (a.z) * SENSORS_G_PER_LSB_CFG;
 800ebec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ebf0:	ee07 3a90 	vmov	s15, r3
 800ebf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebf8:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800ece4 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800ebfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec00:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate pitch and roll based on accelerometer. Board must be level
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800ec04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ec08:	eeb1 8a67 	vneg.f32	s16, s15
 800ec0c:	ed97 7a02 	vldr	s14, [r7, #8]
 800ec10:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec18:	edd7 6a03 	vldr	s13, [r7, #12]
 800ec1c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ec20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec28:	eeb0 0a67 	vmov.f32	s0, s15
 800ec2c:	f00c fbd6 	bl	801b3dc <sqrtf>
 800ec30:	eeb0 7a40 	vmov.f32	s14, s0
 800ec34:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800ec38:	eeb0 0a67 	vmov.f32	s0, s15
 800ec3c:	f00c fc7e 	bl	801b53c <tanf>
 800ec40:	eef0 7a40 	vmov.f32	s15, s0
					* 180/(float) M_PI;
 800ec44:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800ece8 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800ec48:	ee27 7a87 	vmul.f32	s14, s15, s14
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800ec4c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800ecec <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800ec50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ec54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			roll = tanf(acc.y / acc.z) * 180 / (float) M_PI;
 800ec58:	ed97 7a02 	vldr	s14, [r7, #8]
 800ec5c:	edd7 7a03 	vldr	s15, [r7, #12]
 800ec60:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ec64:	eeb0 0a66 	vmov.f32	s0, s13
 800ec68:	f00c fc68 	bl	801b53c <tanf>
 800ec6c:	eef0 7a40 	vmov.f32	s15, s0
 800ec70:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800ece8 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800ec74:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec78:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800ecec <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800ec7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ec80:	edc7 7a08 	vstr	s15, [r7, #32]

			if ((fabsf(roll) < SENSORS_MAN_TEST_LEVEL_MAX) && (fabsf(pitch) < SENSORS_MAN_TEST_LEVEL_MAX))
 800ec84:	edd7 7a08 	vldr	s15, [r7, #32]
 800ec88:	eef0 7ae7 	vabs.f32	s15, s15
 800ec8c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800ec90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ec94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec98:	d50e      	bpl.n	800ecb8 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
 800ec9a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ec9e:	eef0 7ae7 	vabs.f32	s15, s15
 800eca2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800eca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ecaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecae:	d503      	bpl.n	800ecb8 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
			{
				testStatus = true;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ecb6:	e006      	b.n	800ecc6 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
			else
			{
				testStatus = false;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800ecbe:	e002      	b.n	800ecc6 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
		} else {

			testStatus = false;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}

	return testStatus;
 800ecc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 800ecca:	4618      	mov	r0, r3
 800eccc:	3734      	adds	r7, #52	@ 0x34
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	ecbd 8b02 	vpop	{d8}
 800ecd4:	bd90      	pop	{r4, r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	10000514 	.word	0x10000514
 800ecdc:	20008418 	.word	0x20008418
 800ece0:	20008430 	.word	0x20008430
 800ece4:	3a000000 	.word	0x3a000000
 800ece8:	43340000 	.word	0x43340000
 800ecec:	40490fdb 	.word	0x40490fdb

0800ecf0 <sensorsAlignToAirframe>:
	}

}

static void sensorsAlignToAirframe(Axis3f* in, Axis3f* out)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b082      	sub	sp, #8
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	6078      	str	r0, [r7, #4]
 800ecf8:	6039      	str	r1, [r7, #0]
  // IMU alignment
  static float sphi, cphi, stheta, ctheta, spsi, cpsi;

  sphi   = sinf(imuPhi * (float) M_PI / 180);
 800ecfa:	4bba      	ldr	r3, [pc, #744]	@ (800efe4 <sensorsAlignToAirframe+0x2f4>)
 800ecfc:	edd3 7a00 	vldr	s15, [r3]
 800ed00:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800efe8 <sensorsAlignToAirframe+0x2f8>
 800ed04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed08:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 800efec <sensorsAlignToAirframe+0x2fc>
 800ed0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ed10:	eeb0 0a47 	vmov.f32	s0, s14
 800ed14:	f00c fbcc 	bl	801b4b0 <sinf>
 800ed18:	eef0 7a40 	vmov.f32	s15, s0
 800ed1c:	4bb4      	ldr	r3, [pc, #720]	@ (800eff0 <sensorsAlignToAirframe+0x300>)
 800ed1e:	edc3 7a00 	vstr	s15, [r3]
  cphi   = cosf(imuPhi * (float) M_PI / 180);
 800ed22:	4bb0      	ldr	r3, [pc, #704]	@ (800efe4 <sensorsAlignToAirframe+0x2f4>)
 800ed24:	edd3 7a00 	vldr	s15, [r3]
 800ed28:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800efe8 <sensorsAlignToAirframe+0x2f8>
 800ed2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed30:	eddf 6aae 	vldr	s13, [pc, #696]	@ 800efec <sensorsAlignToAirframe+0x2fc>
 800ed34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ed38:	eeb0 0a47 	vmov.f32	s0, s14
 800ed3c:	f00c fb6c 	bl	801b418 <cosf>
 800ed40:	eef0 7a40 	vmov.f32	s15, s0
 800ed44:	4bab      	ldr	r3, [pc, #684]	@ (800eff4 <sensorsAlignToAirframe+0x304>)
 800ed46:	edc3 7a00 	vstr	s15, [r3]
  stheta = sinf(imuTheta * (float) M_PI / 180);
 800ed4a:	4bab      	ldr	r3, [pc, #684]	@ (800eff8 <sensorsAlignToAirframe+0x308>)
 800ed4c:	edd3 7a00 	vldr	s15, [r3]
 800ed50:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800efe8 <sensorsAlignToAirframe+0x2f8>
 800ed54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed58:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800efec <sensorsAlignToAirframe+0x2fc>
 800ed5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ed60:	eeb0 0a47 	vmov.f32	s0, s14
 800ed64:	f00c fba4 	bl	801b4b0 <sinf>
 800ed68:	eef0 7a40 	vmov.f32	s15, s0
 800ed6c:	4ba3      	ldr	r3, [pc, #652]	@ (800effc <sensorsAlignToAirframe+0x30c>)
 800ed6e:	edc3 7a00 	vstr	s15, [r3]
  ctheta = cosf(imuTheta * (float) M_PI / 180);
 800ed72:	4ba1      	ldr	r3, [pc, #644]	@ (800eff8 <sensorsAlignToAirframe+0x308>)
 800ed74:	edd3 7a00 	vldr	s15, [r3]
 800ed78:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800efe8 <sensorsAlignToAirframe+0x2f8>
 800ed7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed80:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800efec <sensorsAlignToAirframe+0x2fc>
 800ed84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ed88:	eeb0 0a47 	vmov.f32	s0, s14
 800ed8c:	f00c fb44 	bl	801b418 <cosf>
 800ed90:	eef0 7a40 	vmov.f32	s15, s0
 800ed94:	4b9a      	ldr	r3, [pc, #616]	@ (800f000 <sensorsAlignToAirframe+0x310>)
 800ed96:	edc3 7a00 	vstr	s15, [r3]
  spsi   = sinf(imuPsi * (float) M_PI / 180);
 800ed9a:	4b9a      	ldr	r3, [pc, #616]	@ (800f004 <sensorsAlignToAirframe+0x314>)
 800ed9c:	edd3 7a00 	vldr	s15, [r3]
 800eda0:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800efe8 <sensorsAlignToAirframe+0x2f8>
 800eda4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eda8:	eddf 6a90 	vldr	s13, [pc, #576]	@ 800efec <sensorsAlignToAirframe+0x2fc>
 800edac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800edb0:	eeb0 0a47 	vmov.f32	s0, s14
 800edb4:	f00c fb7c 	bl	801b4b0 <sinf>
 800edb8:	eef0 7a40 	vmov.f32	s15, s0
 800edbc:	4b92      	ldr	r3, [pc, #584]	@ (800f008 <sensorsAlignToAirframe+0x318>)
 800edbe:	edc3 7a00 	vstr	s15, [r3]
  cpsi   = cosf(imuPsi * (float) M_PI / 180);
 800edc2:	4b90      	ldr	r3, [pc, #576]	@ (800f004 <sensorsAlignToAirframe+0x314>)
 800edc4:	edd3 7a00 	vldr	s15, [r3]
 800edc8:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800efe8 <sensorsAlignToAirframe+0x2f8>
 800edcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800edd0:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800efec <sensorsAlignToAirframe+0x2fc>
 800edd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800edd8:	eeb0 0a47 	vmov.f32	s0, s14
 800eddc:	f00c fb1c 	bl	801b418 <cosf>
 800ede0:	eef0 7a40 	vmov.f32	s15, s0
 800ede4:	4b89      	ldr	r3, [pc, #548]	@ (800f00c <sensorsAlignToAirframe+0x31c>)
 800ede6:	edc3 7a00 	vstr	s15, [r3]

  // tait-bryan passive rotation in order: yaw, psi (1) -> pitch, theta (2) ->  roll, phi (3) [https://en.wikipedia.org/wiki/Euler_angles#cite_note-3]
  // mathematically R = R_x(phi)^T . R_y(theta)^T . R_z(psi)^T  [http://eecs.qmul.ac.uk/~gslabaugh/publications/euler.pdf]
  // transpose because it's a passive rotation not active [https://en.wikipedia.org/wiki/Active_and_passive_transformation]
  R[0][0] = ctheta * cpsi;
 800edea:	4b85      	ldr	r3, [pc, #532]	@ (800f000 <sensorsAlignToAirframe+0x310>)
 800edec:	ed93 7a00 	vldr	s14, [r3]
 800edf0:	4b86      	ldr	r3, [pc, #536]	@ (800f00c <sensorsAlignToAirframe+0x31c>)
 800edf2:	edd3 7a00 	vldr	s15, [r3]
 800edf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800edfa:	4b85      	ldr	r3, [pc, #532]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800edfc:	edc3 7a00 	vstr	s15, [r3]
  R[0][1] = ctheta * spsi;
 800ee00:	4b7f      	ldr	r3, [pc, #508]	@ (800f000 <sensorsAlignToAirframe+0x310>)
 800ee02:	ed93 7a00 	vldr	s14, [r3]
 800ee06:	4b80      	ldr	r3, [pc, #512]	@ (800f008 <sensorsAlignToAirframe+0x318>)
 800ee08:	edd3 7a00 	vldr	s15, [r3]
 800ee0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee10:	4b7f      	ldr	r3, [pc, #508]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ee12:	edc3 7a01 	vstr	s15, [r3, #4]
  R[0][2] = -stheta;
 800ee16:	4b79      	ldr	r3, [pc, #484]	@ (800effc <sensorsAlignToAirframe+0x30c>)
 800ee18:	edd3 7a00 	vldr	s15, [r3]
 800ee1c:	eef1 7a67 	vneg.f32	s15, s15
 800ee20:	4b7b      	ldr	r3, [pc, #492]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ee22:	edc3 7a02 	vstr	s15, [r3, #8]
  R[1][0] = sphi * stheta * cpsi - cphi * spsi;
 800ee26:	4b72      	ldr	r3, [pc, #456]	@ (800eff0 <sensorsAlignToAirframe+0x300>)
 800ee28:	ed93 7a00 	vldr	s14, [r3]
 800ee2c:	4b73      	ldr	r3, [pc, #460]	@ (800effc <sensorsAlignToAirframe+0x30c>)
 800ee2e:	edd3 7a00 	vldr	s15, [r3]
 800ee32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee36:	4b75      	ldr	r3, [pc, #468]	@ (800f00c <sensorsAlignToAirframe+0x31c>)
 800ee38:	edd3 7a00 	vldr	s15, [r3]
 800ee3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee40:	4b6c      	ldr	r3, [pc, #432]	@ (800eff4 <sensorsAlignToAirframe+0x304>)
 800ee42:	edd3 6a00 	vldr	s13, [r3]
 800ee46:	4b70      	ldr	r3, [pc, #448]	@ (800f008 <sensorsAlignToAirframe+0x318>)
 800ee48:	edd3 7a00 	vldr	s15, [r3]
 800ee4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee54:	4b6e      	ldr	r3, [pc, #440]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ee56:	edc3 7a03 	vstr	s15, [r3, #12]
  R[1][1] = sphi * stheta * spsi + cphi * cpsi;
 800ee5a:	4b65      	ldr	r3, [pc, #404]	@ (800eff0 <sensorsAlignToAirframe+0x300>)
 800ee5c:	ed93 7a00 	vldr	s14, [r3]
 800ee60:	4b66      	ldr	r3, [pc, #408]	@ (800effc <sensorsAlignToAirframe+0x30c>)
 800ee62:	edd3 7a00 	vldr	s15, [r3]
 800ee66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee6a:	4b67      	ldr	r3, [pc, #412]	@ (800f008 <sensorsAlignToAirframe+0x318>)
 800ee6c:	edd3 7a00 	vldr	s15, [r3]
 800ee70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee74:	4b5f      	ldr	r3, [pc, #380]	@ (800eff4 <sensorsAlignToAirframe+0x304>)
 800ee76:	edd3 6a00 	vldr	s13, [r3]
 800ee7a:	4b64      	ldr	r3, [pc, #400]	@ (800f00c <sensorsAlignToAirframe+0x31c>)
 800ee7c:	edd3 7a00 	vldr	s15, [r3]
 800ee80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ee88:	4b61      	ldr	r3, [pc, #388]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ee8a:	edc3 7a04 	vstr	s15, [r3, #16]
  R[1][2] = sphi * ctheta;
 800ee8e:	4b58      	ldr	r3, [pc, #352]	@ (800eff0 <sensorsAlignToAirframe+0x300>)
 800ee90:	ed93 7a00 	vldr	s14, [r3]
 800ee94:	4b5a      	ldr	r3, [pc, #360]	@ (800f000 <sensorsAlignToAirframe+0x310>)
 800ee96:	edd3 7a00 	vldr	s15, [r3]
 800ee9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee9e:	4b5c      	ldr	r3, [pc, #368]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800eea0:	edc3 7a05 	vstr	s15, [r3, #20]
  R[2][0] = cphi * stheta * cpsi + sphi * spsi;
 800eea4:	4b53      	ldr	r3, [pc, #332]	@ (800eff4 <sensorsAlignToAirframe+0x304>)
 800eea6:	ed93 7a00 	vldr	s14, [r3]
 800eeaa:	4b54      	ldr	r3, [pc, #336]	@ (800effc <sensorsAlignToAirframe+0x30c>)
 800eeac:	edd3 7a00 	vldr	s15, [r3]
 800eeb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eeb4:	4b55      	ldr	r3, [pc, #340]	@ (800f00c <sensorsAlignToAirframe+0x31c>)
 800eeb6:	edd3 7a00 	vldr	s15, [r3]
 800eeba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eebe:	4b4c      	ldr	r3, [pc, #304]	@ (800eff0 <sensorsAlignToAirframe+0x300>)
 800eec0:	edd3 6a00 	vldr	s13, [r3]
 800eec4:	4b50      	ldr	r3, [pc, #320]	@ (800f008 <sensorsAlignToAirframe+0x318>)
 800eec6:	edd3 7a00 	vldr	s15, [r3]
 800eeca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eed2:	4b4f      	ldr	r3, [pc, #316]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800eed4:	edc3 7a06 	vstr	s15, [r3, #24]
  R[2][1] = cphi * stheta * spsi - sphi * cpsi;
 800eed8:	4b46      	ldr	r3, [pc, #280]	@ (800eff4 <sensorsAlignToAirframe+0x304>)
 800eeda:	ed93 7a00 	vldr	s14, [r3]
 800eede:	4b47      	ldr	r3, [pc, #284]	@ (800effc <sensorsAlignToAirframe+0x30c>)
 800eee0:	edd3 7a00 	vldr	s15, [r3]
 800eee4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eee8:	4b47      	ldr	r3, [pc, #284]	@ (800f008 <sensorsAlignToAirframe+0x318>)
 800eeea:	edd3 7a00 	vldr	s15, [r3]
 800eeee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eef2:	4b3f      	ldr	r3, [pc, #252]	@ (800eff0 <sensorsAlignToAirframe+0x300>)
 800eef4:	edd3 6a00 	vldr	s13, [r3]
 800eef8:	4b44      	ldr	r3, [pc, #272]	@ (800f00c <sensorsAlignToAirframe+0x31c>)
 800eefa:	edd3 7a00 	vldr	s15, [r3]
 800eefe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef06:	4b42      	ldr	r3, [pc, #264]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef08:	edc3 7a07 	vstr	s15, [r3, #28]
  R[2][2] = cphi * ctheta;
 800ef0c:	4b39      	ldr	r3, [pc, #228]	@ (800eff4 <sensorsAlignToAirframe+0x304>)
 800ef0e:	ed93 7a00 	vldr	s14, [r3]
 800ef12:	4b3b      	ldr	r3, [pc, #236]	@ (800f000 <sensorsAlignToAirframe+0x310>)
 800ef14:	edd3 7a00 	vldr	s15, [r3]
 800ef18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef1c:	4b3c      	ldr	r3, [pc, #240]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef1e:	edc3 7a08 	vstr	s15, [r3, #32]

  out->x = in->x*R[0][0] + in->y*R[0][1] + in->z*R[0][2];
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	ed93 7a00 	vldr	s14, [r3]
 800ef28:	4b39      	ldr	r3, [pc, #228]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef2a:	edd3 7a00 	vldr	s15, [r3]
 800ef2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	edd3 6a01 	vldr	s13, [r3, #4]
 800ef38:	4b35      	ldr	r3, [pc, #212]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef3a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ef3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	edd3 6a02 	vldr	s13, [r3, #8]
 800ef4c:	4b30      	ldr	r3, [pc, #192]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef4e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ef52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef56:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	edc3 7a00 	vstr	s15, [r3]
  out->y = in->x*R[1][0] + in->y*R[1][1] + in->z*R[1][2];
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	ed93 7a00 	vldr	s14, [r3]
 800ef66:	4b2a      	ldr	r3, [pc, #168]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef68:	edd3 7a03 	vldr	s15, [r3, #12]
 800ef6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	edd3 6a01 	vldr	s13, [r3, #4]
 800ef76:	4b26      	ldr	r3, [pc, #152]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef78:	edd3 7a04 	vldr	s15, [r3, #16]
 800ef7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef80:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	edd3 6a02 	vldr	s13, [r3, #8]
 800ef8a:	4b21      	ldr	r3, [pc, #132]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800ef8c:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = in->x*R[2][0] + in->y*R[2][1] + in->z*R[2][2];
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	ed93 7a00 	vldr	s14, [r3]
 800efa4:	4b1a      	ldr	r3, [pc, #104]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800efa6:	edd3 7a06 	vldr	s15, [r3, #24]
 800efaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	edd3 6a01 	vldr	s13, [r3, #4]
 800efb4:	4b16      	ldr	r3, [pc, #88]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800efb6:	edd3 7a07 	vldr	s15, [r3, #28]
 800efba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	edd3 6a02 	vldr	s13, [r3, #8]
 800efc8:	4b11      	ldr	r3, [pc, #68]	@ (800f010 <sensorsAlignToAirframe+0x320>)
 800efca:	edd3 7a08 	vldr	s15, [r3, #32]
 800efce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800efd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800efdc:	bf00      	nop
 800efde:	3708      	adds	r7, #8
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}
 800efe4:	200084e4 	.word	0x200084e4
 800efe8:	40490fdb 	.word	0x40490fdb
 800efec:	43340000 	.word	0x43340000
 800eff0:	20008a1c 	.word	0x20008a1c
 800eff4:	20008a20 	.word	0x20008a20
 800eff8:	200084e8 	.word	0x200084e8
 800effc:	20008a24 	.word	0x20008a24
 800f000:	20008a28 	.word	0x20008a28
 800f004:	200084ec 	.word	0x200084ec
 800f008:	20008a2c 	.word	0x20008a2c
 800f00c:	20008a30 	.word	0x20008a30
 800f010:	200084f0 	.word	0x200084f0

0800f014 <sensorsMpu6500Bmp280SetAccMode>:
//  out->x = ry.x;
//  out->y = ry.y;
//  out->z = ry.z;
//}
void sensorsMpu6500Bmp280SetAccMode(accModes accMode)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	4603      	mov	r3, r0
 800f01c:	71fb      	strb	r3, [r7, #7]
  switch (accMode)
 800f01e:	79fb      	ldrb	r3, [r7, #7]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d11a      	bne.n	800f05a <sensorsMpu6500Bmp280SetAccMode+0x46>
  {
    case ACC_MODE_PROPTEST:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_460);
 800f024:	2000      	movs	r0, #0
 800f026:	f7fd fa71 	bl	800c50c <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800f02a:	2300      	movs	r3, #0
 800f02c:	73fb      	strb	r3, [r7, #15]
 800f02e:	e010      	b.n	800f052 <sensorsMpu6500Bmp280SetAccMode+0x3e>
      {
        lpf2pInit(&accLpf[i],  1000, 500);
 800f030:	7bfa      	ldrb	r2, [r7, #15]
 800f032:	4613      	mov	r3, r2
 800f034:	00db      	lsls	r3, r3, #3
 800f036:	1a9b      	subs	r3, r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4a17      	ldr	r2, [pc, #92]	@ (800f098 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800f03c:	4413      	add	r3, r2
 800f03e:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800f09c <sensorsMpu6500Bmp280SetAccMode+0x88>
 800f042:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800f0a0 <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800f046:	4618      	mov	r0, r3
 800f048:	f006 fd7c 	bl	8015b44 <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800f04c:	7bfb      	ldrb	r3, [r7, #15]
 800f04e:	3301      	adds	r3, #1
 800f050:	73fb      	strb	r3, [r7, #15]
 800f052:	7bfb      	ldrb	r3, [r7, #15]
 800f054:	2b02      	cmp	r3, #2
 800f056:	d9eb      	bls.n	800f030 <sensorsMpu6500Bmp280SetAccMode+0x1c>
      }
      break;
 800f058:	e01a      	b.n	800f090 <sensorsMpu6500Bmp280SetAccMode+0x7c>
    case ACC_MODE_FLIGHT:
    default:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_44);
 800f05a:	2003      	movs	r0, #3
 800f05c:	f7fd fa56 	bl	800c50c <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800f060:	2300      	movs	r3, #0
 800f062:	73bb      	strb	r3, [r7, #14]
 800f064:	e010      	b.n	800f088 <sensorsMpu6500Bmp280SetAccMode+0x74>
      {
        lpf2pInit(&accLpf[i],  1000, ACCEL_LPF_CUTOFF_FREQ);
 800f066:	7bba      	ldrb	r2, [r7, #14]
 800f068:	4613      	mov	r3, r2
 800f06a:	00db      	lsls	r3, r3, #3
 800f06c:	1a9b      	subs	r3, r3, r2
 800f06e:	009b      	lsls	r3, r3, #2
 800f070:	4a09      	ldr	r2, [pc, #36]	@ (800f098 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800f072:	4413      	add	r3, r2
 800f074:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800f078:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800f0a0 <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800f07c:	4618      	mov	r0, r3
 800f07e:	f006 fd61 	bl	8015b44 <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800f082:	7bbb      	ldrb	r3, [r7, #14]
 800f084:	3301      	adds	r3, #1
 800f086:	73bb      	strb	r3, [r7, #14]
 800f088:	7bbb      	ldrb	r3, [r7, #14]
 800f08a:	2b02      	cmp	r3, #2
 800f08c:	d9eb      	bls.n	800f066 <sensorsMpu6500Bmp280SetAccMode+0x52>
      }
      break;
 800f08e:	bf00      	nop
  }
}
 800f090:	bf00      	nop
 800f092:	3710      	adds	r7, #16
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}
 800f098:	20008438 	.word	0x20008438
 800f09c:	43fa0000 	.word	0x43fa0000
 800f0a0:	447a0000 	.word	0x447a0000

0800f0a4 <applyAxis3fLpf>:
static void applyAxis3fLpf(lpf2pData *data, Axis3f* in)
{
 800f0a4:	b590      	push	{r4, r7, lr}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 3; i++) {
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	73fb      	strb	r3, [r7, #15]
 800f0b2:	e01d      	b.n	800f0f0 <applyAxis3fLpf+0x4c>
    in->axis[i] = lpf2pApply(&data[i], in->axis[i]);
 800f0b4:	7bfa      	ldrb	r2, [r7, #15]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	00db      	lsls	r3, r3, #3
 800f0ba:	1a9b      	subs	r3, r3, r2
 800f0bc:	009b      	lsls	r3, r3, #2
 800f0be:	461a      	mov	r2, r3
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	1899      	adds	r1, r3, r2
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	009b      	lsls	r3, r3, #2
 800f0ca:	4413      	add	r3, r2
 800f0cc:	edd3 7a00 	vldr	s15, [r3]
 800f0d0:	7bfc      	ldrb	r4, [r7, #15]
 800f0d2:	eeb0 0a67 	vmov.f32	s0, s15
 800f0d6:	4608      	mov	r0, r1
 800f0d8:	f006 fdd0 	bl	8015c7c <lpf2pApply>
 800f0dc:	eef0 7a40 	vmov.f32	s15, s0
 800f0e0:	683a      	ldr	r2, [r7, #0]
 800f0e2:	00a3      	lsls	r3, r4, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 3; i++) {
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	73fb      	strb	r3, [r7, #15]
 800f0f0:	7bfb      	ldrb	r3, [r7, #15]
 800f0f2:	2b02      	cmp	r3, #2
 800f0f4:	d9de      	bls.n	800f0b4 <applyAxis3fLpf+0x10>
  }
}
 800f0f6:	bf00      	nop
 800f0f8:	bf00      	nop
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	bd90      	pop	{r4, r7, pc}

0800f100 <EXTI1_IRQHandler>:
	return testStatus;

}

void __attribute__((used)) EXTI1_IRQHandler(void)
{
 800f100:	b580      	push	{r7, lr}
 800f102:	b082      	sub	sp, #8
 800f104:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800f106:	2300      	movs	r3, #0
 800f108:	607b      	str	r3, [r7, #4]
	imuIntTimestamp = usecTimestamp();
 800f10a:	f000 f8b3 	bl	800f274 <usecTimestamp>
 800f10e:	4602      	mov	r2, r0
 800f110:	460b      	mov	r3, r1
 800f112:	4913      	ldr	r1, [pc, #76]	@ (800f160 <EXTI1_IRQHandler+0x60>)
 800f114:	e9c1 2300 	strd	r2, r3, [r1]
    // Check if EXTI line 1 triggered the interrupt
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 800f118:	4b12      	ldr	r3, [pc, #72]	@ (800f164 <EXTI1_IRQHandler+0x64>)
 800f11a:	695b      	ldr	r3, [r3, #20]
 800f11c:	f003 0302 	and.w	r3, r3, #2
 800f120:	2b00      	cmp	r3, #0
 800f122:	d009      	beq.n	800f138 <EXTI1_IRQHandler+0x38>
    {
        // Clear the interrupt flag
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 800f124:	4b0f      	ldr	r3, [pc, #60]	@ (800f164 <EXTI1_IRQHandler+0x64>)
 800f126:	2202      	movs	r2, #2
 800f128:	615a      	str	r2, [r3, #20]
    	xSemaphoreGiveFromISR(sensorsDataReady, &xHigherPriorityTaskWoken);
 800f12a:	4b0f      	ldr	r3, [pc, #60]	@ (800f168 <EXTI1_IRQHandler+0x68>)
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	1d3a      	adds	r2, r7, #4
 800f130:	4611      	mov	r1, r2
 800f132:	4618      	mov	r0, r3
 800f134:	f7f7 fb50 	bl	80067d8 <xQueueGiveFromISR>
    }

	intCounter++;
 800f138:	4b0c      	ldr	r3, [pc, #48]	@ (800f16c <EXTI1_IRQHandler+0x6c>)
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	3301      	adds	r3, #1
 800f13e:	4a0b      	ldr	r2, [pc, #44]	@ (800f16c <EXTI1_IRQHandler+0x6c>)
 800f140:	6013      	str	r3, [r2, #0]
	if (xHigherPriorityTaskWoken) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d007      	beq.n	800f158 <EXTI1_IRQHandler+0x58>
		portYIELD();
 800f148:	4b09      	ldr	r3, [pc, #36]	@ (800f170 <EXTI1_IRQHandler+0x70>)
 800f14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f14e:	601a      	str	r2, [r3, #0]
 800f150:	f3bf 8f4f 	dsb	sy
 800f154:	f3bf 8f6f 	isb	sy
	}

}
 800f158:	bf00      	nop
 800f15a:	3708      	adds	r7, #8
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	20008a38 	.word	0x20008a38
 800f164:	40013c00 	.word	0x40013c00
 800f168:	20008a34 	.word	0x20008a34
 800f16c:	20008a40 	.word	0x20008a40
 800f170:	e000ed04 	.word	0xe000ed04

0800f174 <__NVIC_EnableIRQ>:
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	4603      	mov	r3, r0
 800f17c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f17e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f182:	2b00      	cmp	r3, #0
 800f184:	db0b      	blt.n	800f19e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f186:	79fb      	ldrb	r3, [r7, #7]
 800f188:	f003 021f 	and.w	r2, r3, #31
 800f18c:	4907      	ldr	r1, [pc, #28]	@ (800f1ac <__NVIC_EnableIRQ+0x38>)
 800f18e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f192:	095b      	lsrs	r3, r3, #5
 800f194:	2001      	movs	r0, #1
 800f196:	fa00 f202 	lsl.w	r2, r0, r2
 800f19a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f19e:	bf00      	nop
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr
 800f1aa:	bf00      	nop
 800f1ac:	e000e100 	.word	0xe000e100

0800f1b0 <__NVIC_SetPriority>:
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	4603      	mov	r3, r0
 800f1b8:	6039      	str	r1, [r7, #0]
 800f1ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	db0a      	blt.n	800f1da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	b2da      	uxtb	r2, r3
 800f1c8:	490c      	ldr	r1, [pc, #48]	@ (800f1fc <__NVIC_SetPriority+0x4c>)
 800f1ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f1ce:	0112      	lsls	r2, r2, #4
 800f1d0:	b2d2      	uxtb	r2, r2
 800f1d2:	440b      	add	r3, r1
 800f1d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f1d8:	e00a      	b.n	800f1f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	b2da      	uxtb	r2, r3
 800f1de:	4908      	ldr	r1, [pc, #32]	@ (800f200 <__NVIC_SetPriority+0x50>)
 800f1e0:	79fb      	ldrb	r3, [r7, #7]
 800f1e2:	f003 030f 	and.w	r3, r3, #15
 800f1e6:	3b04      	subs	r3, #4
 800f1e8:	0112      	lsls	r2, r2, #4
 800f1ea:	b2d2      	uxtb	r2, r2
 800f1ec:	440b      	add	r3, r1
 800f1ee:	761a      	strb	r2, [r3, #24]
}
 800f1f0:	bf00      	nop
 800f1f2:	370c      	adds	r7, #12
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fa:	4770      	bx	lr
 800f1fc:	e000e100 	.word	0xe000e100
 800f200:	e000ed00 	.word	0xe000ed00

0800f204 <usecTimerInit>:
static bool isInit = false;

static uint32_t usecTimerHighCount;

void usecTimerInit(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	af00      	add	r7, sp, #0
  if (isInit) {
 800f208:	4b16      	ldr	r3, [pc, #88]	@ (800f264 <usecTimerInit+0x60>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d126      	bne.n	800f25e <usecTimerInit+0x5a>
    return;
  }

  usecTimerHighCount = 0;
 800f210:	4b15      	ldr	r3, [pc, #84]	@ (800f268 <usecTimerInit+0x64>)
 800f212:	2200      	movs	r2, #0
 800f214:	601a      	str	r2, [r3, #0]

  // 1. Enable the clock for TIM7
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800f216:	4b15      	ldr	r3, [pc, #84]	@ (800f26c <usecTimerInit+0x68>)
 800f218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f21a:	4a14      	ldr	r2, [pc, #80]	@ (800f26c <usecTimerInit+0x68>)
 800f21c:	f043 0320 	orr.w	r3, r3, #32
 800f220:	6413      	str	r3, [r2, #64]	@ 0x40

  // 2. Set the prescaler value
  // Assuming the APB1 clock is 42 MHz (84 MHz/2) and you want a 1 kHz timer clock (1 ms per tick)
  TIM7->PSC = 41;  // Prescaler = 42000 - 1
 800f222:	4b13      	ldr	r3, [pc, #76]	@ (800f270 <usecTimerInit+0x6c>)
 800f224:	2229      	movs	r2, #41	@ 0x29
 800f226:	629a      	str	r2, [r3, #40]	@ 0x28

  // 3. Set the auto-reload value
  TIM7->ARR = 999;  // 1000 ticks -> 1 second (1 ms per tick)
 800f228:	4b11      	ldr	r3, [pc, #68]	@ (800f270 <usecTimerInit+0x6c>)
 800f22a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800f22e:	62da      	str	r2, [r3, #44]	@ 0x2c

  // 4. Enable the update interrupt (UIE)
  TIM7->DIER |= TIM_DIER_UIE;
 800f230:	4b0f      	ldr	r3, [pc, #60]	@ (800f270 <usecTimerInit+0x6c>)
 800f232:	68db      	ldr	r3, [r3, #12]
 800f234:	4a0e      	ldr	r2, [pc, #56]	@ (800f270 <usecTimerInit+0x6c>)
 800f236:	f043 0301 	orr.w	r3, r3, #1
 800f23a:	60d3      	str	r3, [r2, #12]

  // 5. Enable the counter
  TIM7->CR1 |= TIM_CR1_CEN;
 800f23c:	4b0c      	ldr	r3, [pc, #48]	@ (800f270 <usecTimerInit+0x6c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	4a0b      	ldr	r2, [pc, #44]	@ (800f270 <usecTimerInit+0x6c>)
 800f242:	f043 0301 	orr.w	r3, r3, #1
 800f246:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(TIM7_IRQn, 3);
 800f248:	2103      	movs	r1, #3
 800f24a:	2037      	movs	r0, #55	@ 0x37
 800f24c:	f7ff ffb0 	bl	800f1b0 <__NVIC_SetPriority>
  // 6. Enable TIM7 interrupt in NVIC
  NVIC_EnableIRQ(TIM7_IRQn);
 800f250:	2037      	movs	r0, #55	@ 0x37
 800f252:	f7ff ff8f 	bl	800f174 <__NVIC_EnableIRQ>
  isInit = true;
 800f256:	4b03      	ldr	r3, [pc, #12]	@ (800f264 <usecTimerInit+0x60>)
 800f258:	2201      	movs	r2, #1
 800f25a:	701a      	strb	r2, [r3, #0]
 800f25c:	e000      	b.n	800f260 <usecTimerInit+0x5c>
    return;
 800f25e:	bf00      	nop
}
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	20008a44 	.word	0x20008a44
 800f268:	20008a48 	.word	0x20008a48
 800f26c:	40023800 	.word	0x40023800
 800f270:	40001400 	.word	0x40001400

0800f274 <usecTimestamp>:

  TIM7->CNT = 0;
}

uint64_t usecTimestamp(void)
{
 800f274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f278:	b08c      	sub	sp, #48	@ 0x30
 800f27a:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800f27c:	4b2b      	ldr	r3, [pc, #172]	@ (800f32c <usecTimestamp+0xb8>)
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d104      	bne.n	800f28e <usecTimestamp+0x1a>
 800f284:	224e      	movs	r2, #78	@ 0x4e
 800f286:	492a      	ldr	r1, [pc, #168]	@ (800f330 <usecTimestamp+0xbc>)
 800f288:	482a      	ldr	r0, [pc, #168]	@ (800f334 <usecTimestamp+0xc0>)
 800f28a:	f006 fc21 	bl	8015ad0 <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 800f28e:	4b2a      	ldr	r3, [pc, #168]	@ (800f338 <usecTimestamp+0xc4>)
 800f290:	f3bf 8f5b 	dmb	ish
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	f3bf 8f5b 	dmb	ish
 800f29a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t low = TIM7->CNT;
 800f29c:	4b27      	ldr	r3, [pc, #156]	@ (800f33c <usecTimestamp+0xc8>)
 800f29e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f2a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 800f2a2:	4b25      	ldr	r3, [pc, #148]	@ (800f338 <usecTimestamp+0xc4>)
 800f2a4:	f3bf 8f5b 	dmb	ish
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f3bf 8f5b 	dmb	ish
 800f2ae:	627b      	str	r3, [r7, #36]	@ 0x24

  // There was no increment in between
  if (high == high0)
 800f2b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f2b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d118      	bne.n	800f2ea <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 800f2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	61bb      	str	r3, [r7, #24]
 800f2be:	61fa      	str	r2, [r7, #28]
 800f2c0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800f2d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	613b      	str	r3, [r7, #16]
 800f2d6:	617a      	str	r2, [r7, #20]
 800f2d8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	eb1a 0403 	adds.w	r4, sl, r3
 800f2e2:	4613      	mov	r3, r2
 800f2e4:	eb4b 0503 	adc.w	r5, fp, r3
 800f2e8:	e018      	b.n	800f31c <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 800f2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	60bb      	str	r3, [r7, #8]
 800f2f0:	60fa      	str	r2, [r7, #12]
 800f2f2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800f2f6:	460b      	mov	r3, r1
 800f2f8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800f302:	4b0e      	ldr	r3, [pc, #56]	@ (800f33c <usecTimestamp+0xc8>)
 800f304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f306:	2200      	movs	r2, #0
 800f308:	603b      	str	r3, [r7, #0]
 800f30a:	607a      	str	r2, [r7, #4]
 800f30c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800f310:	460b      	mov	r3, r1
 800f312:	eb18 0403 	adds.w	r4, r8, r3
 800f316:	4613      	mov	r3, r2
 800f318:	eb49 0503 	adc.w	r5, r9, r3
}
 800f31c:	4622      	mov	r2, r4
 800f31e:	462b      	mov	r3, r5
 800f320:	4610      	mov	r0, r2
 800f322:	4619      	mov	r1, r3
 800f324:	3730      	adds	r7, #48	@ 0x30
 800f326:	46bd      	mov	sp, r7
 800f328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f32c:	20008a44 	.word	0x20008a44
 800f330:	0801e8a0 	.word	0x0801e8a0
 800f334:	0801e8b8 	.word	0x0801e8b8
 800f338:	20008a48 	.word	0x20008a48
 800f33c:	40001400 	.word	0x40001400

0800f340 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800f340:	b480      	push	{r7}
 800f342:	af00      	add	r7, sp, #0

    if (TIM7->SR & TIM_SR_UIF) {
 800f344:	4b0e      	ldr	r3, [pc, #56]	@ (800f380 <TIM7_IRQHandler+0x40>)
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	f003 0301 	and.w	r3, r3, #1
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d005      	beq.n	800f35c <TIM7_IRQHandler+0x1c>
        // Clear the update interrupt flag
        TIM7->SR &= ~TIM_SR_UIF;
 800f350:	4b0b      	ldr	r3, [pc, #44]	@ (800f380 <TIM7_IRQHandler+0x40>)
 800f352:	691b      	ldr	r3, [r3, #16]
 800f354:	4a0a      	ldr	r2, [pc, #40]	@ (800f380 <TIM7_IRQHandler+0x40>)
 800f356:	f023 0301 	bic.w	r3, r3, #1
 800f35a:	6113      	str	r3, [r2, #16]
    }

  __sync_fetch_and_add(&usecTimerHighCount, 1);
 800f35c:	4b09      	ldr	r3, [pc, #36]	@ (800f384 <TIM7_IRQHandler+0x44>)
 800f35e:	f3bf 8f5b 	dmb	ish
 800f362:	e853 1f00 	ldrex	r1, [r3]
 800f366:	f101 0101 	add.w	r1, r1, #1
 800f36a:	e843 1200 	strex	r2, r1, [r3]
 800f36e:	2a00      	cmp	r2, #0
 800f370:	d1f7      	bne.n	800f362 <TIM7_IRQHandler+0x22>
 800f372:	f3bf 8f5b 	dmb	ish
}
 800f376:	bf00      	nop
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	40001400 	.word	0x40001400
 800f384:	20008a48 	.word	0x20008a48

0800f388 <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 800f394:	2220      	movs	r2, #32
 800f396:	2100      	movs	r1, #0
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f00b fe4b 	bl	801b034 <memset>
  this->conversionFactor = conversionFactor;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	683a      	ldr	r2, [r7, #0]
 800f3a2:	611a      	str	r2, [r3, #16]
}
 800f3a4:	bf00      	nop
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	ed93 7a00 	vldr	s14, [r3]
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	edd3 7a00 	vldr	s15, [r3]
 800f3c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	ed93 7a01 	vldr	s14, [r3, #4]
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	ed93 7a02 	vldr	s14, [r3, #8]
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	edd3 7a02 	vldr	s15, [r3, #8]
 800f3ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	68db      	ldr	r3, [r3, #12]
 800f3fc:	1c5a      	adds	r2, r3, #1
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60da      	str	r2, [r3, #12]
}
 800f402:	bf00      	nop
 800f404:	370c      	adds	r7, #12
 800f406:	46bd      	mov	sp, r7
 800f408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40c:	4770      	bx	lr

0800f40e <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 800f40e:	b480      	push	{r7}
 800f410:	b087      	sub	sp, #28
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68db      	ldr	r3, [r3, #12]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d041      	beq.n	800f4a2 <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	ed93 7a00 	vldr	s14, [r3]
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	edd3 7a04 	vldr	s15, [r3, #16]
 800f42a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	68db      	ldr	r3, [r3, #12]
 800f432:	ee07 3a90 	vmov	s15, r3
 800f436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f43a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	ed93 7a01 	vldr	s14, [r3, #4]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	edd3 7a04 	vldr	s15, [r3, #16]
 800f450:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	68db      	ldr	r3, [r3, #12]
 800f458:	ee07 3a90 	vmov	s15, r3
 800f45c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	ed93 7a02 	vldr	s14, [r3, #8]
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	edd3 7a04 	vldr	s15, [r3, #16]
 800f476:	ee67 6a27 	vmul.f32	s13, s14, s15
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	68db      	ldr	r3, [r3, #12]
 800f47e:	ee07 3a90 	vmov	s15, r3
 800f482:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800f486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	461a      	mov	r2, r3
 800f49a:	2300      	movs	r3, #0
 800f49c:	6013      	str	r3, [r2, #0]
 800f49e:	6053      	str	r3, [r2, #4]
 800f4a0:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	3314      	adds	r3, #20
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	371c      	adds	r7, #28
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b0:	4770      	bx	lr
	...

0800f4b4 <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 800f4b4:	b480      	push	{r7}
 800f4b6:	b085      	sub	sp, #20
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800f4bc:	2300      	movs	r3, #0
 800f4be:	60fb      	str	r3, [r7, #12]
 800f4c0:	e058      	b.n	800f574 <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 800f4c2:	4b31      	ldr	r3, [pc, #196]	@ (800f588 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800f4c4:	edd3 7a00 	vldr	s15, [r3]
 800f4c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d0:	dd21      	ble.n	800f516 <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	4413      	add	r3, r2
 800f4da:	ed93 7a00 	vldr	s14, [r3]
 800f4de:	4b2a      	ldr	r3, [pc, #168]	@ (800f588 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800f4e0:	edd3 7a00 	vldr	s15, [r3]
 800f4e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ec:	dd01      	ble.n	800f4f2 <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e044      	b.n	800f57c <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 800f4f2:	687a      	ldr	r2, [r7, #4]
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	4413      	add	r3, r2
 800f4fa:	ed93 7a00 	vldr	s14, [r3]
 800f4fe:	4b22      	ldr	r3, [pc, #136]	@ (800f588 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800f500:	edd3 7a00 	vldr	s15, [r3]
 800f504:	eef1 7a67 	vneg.f32	s15, s15
 800f508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f510:	d501      	bpl.n	800f516 <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 800f512:	2300      	movs	r3, #0
 800f514:	e032      	b.n	800f57c <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800f516:	4b1d      	ldr	r3, [pc, #116]	@ (800f58c <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800f518:	edd3 7a00 	vldr	s15, [r3]
 800f51c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f524:	dd23      	ble.n	800f56e <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	3303      	adds	r3, #3
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	ed93 7a00 	vldr	s14, [r3]
 800f534:	4b15      	ldr	r3, [pc, #84]	@ (800f58c <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800f536:	edd3 7a00 	vldr	s15, [r3]
 800f53a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f542:	dd01      	ble.n	800f548 <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 800f544:	2300      	movs	r3, #0
 800f546:	e019      	b.n	800f57c <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	3303      	adds	r3, #3
 800f54c:	687a      	ldr	r2, [r7, #4]
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	ed93 7a00 	vldr	s14, [r3]
 800f556:	4b0d      	ldr	r3, [pc, #52]	@ (800f58c <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800f558:	edd3 7a00 	vldr	s15, [r3]
 800f55c:	eef1 7a67 	vneg.f32	s15, s15
 800f560:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f568:	d501      	bpl.n	800f56e <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 800f56a:	2300      	movs	r3, #0
 800f56c:	e006      	b.n	800f57c <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3301      	adds	r3, #1
 800f572:	60fb      	str	r3, [r7, #12]
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2b02      	cmp	r3, #2
 800f578:	dda3      	ble.n	800f4c2 <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 800f57a:	2301      	movs	r3, #1
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3714      	adds	r7, #20
 800f580:	46bd      	mov	sp, r7
 800f582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f586:	4770      	bx	lr
 800f588:	20000020 	.word	0x20000020
 800f58c:	20000024 	.word	0x20000024

0800f590 <estimatorEnqueueTOF>:
  m.data.distance = *distance;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueueTOF(const tofMeasurement_t *tof)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b08e      	sub	sp, #56	@ 0x38
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypeTOF;
 800f598:	2304      	movs	r3, #4
 800f59a:	723b      	strb	r3, [r7, #8]
  m.data.tof = *tof;
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	f107 030c 	add.w	r3, r7, #12
 800f5a2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  estimatorEnqueue(&m);
 800f5a8:	f107 0308 	add.w	r3, r7, #8
 800f5ac:	4618      	mov	r0, r3
 800f5ae:	f001 fa33 	bl	8010a18 <estimatorEnqueue>
}
 800f5b2:	bf00      	nop
 800f5b4:	3738      	adds	r7, #56	@ 0x38
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
	...

0800f5bc <rangeSet>:
#include "estimator.h"

static uint16_t ranges[RANGE_T_END] = {0,};

void rangeSet(rangeDirection_t direction, float range_m)
{
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	ed87 0a00 	vstr	s0, [r7]
 800f5c8:	71fb      	strb	r3, [r7, #7]
  if (direction > (RANGE_T_END-1)) return;
 800f5ca:	79fb      	ldrb	r3, [r7, #7]
 800f5cc:	2b05      	cmp	r3, #5
 800f5ce:	d80f      	bhi.n	800f5f0 <rangeSet+0x34>

  ranges[direction] = range_m * 1000;
 800f5d0:	edd7 7a00 	vldr	s15, [r7]
 800f5d4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800f5fc <rangeSet+0x40>
 800f5d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f5e2:	ee17 2a90 	vmov	r2, s15
 800f5e6:	b291      	uxth	r1, r2
 800f5e8:	4a05      	ldr	r2, [pc, #20]	@ (800f600 <rangeSet+0x44>)
 800f5ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800f5ee:	e000      	b.n	800f5f2 <rangeSet+0x36>
  if (direction > (RANGE_T_END-1)) return;
 800f5f0:	bf00      	nop
}
 800f5f2:	370c      	adds	r7, #12
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr
 800f5fc:	447a0000 	.word	0x447a0000
 800f600:	20008a4c 	.word	0x20008a4c

0800f604 <rangeEnqueueDownRangeInEstimator>:
    if (direction > (RANGE_T_END-1)) return 0;

  return ranges[direction];
}

void rangeEnqueueDownRangeInEstimator(float distance, float stdDev, uint32_t timeStamp) {
 800f604:	b580      	push	{r7, lr}
 800f606:	b088      	sub	sp, #32
 800f608:	af00      	add	r7, sp, #0
 800f60a:	ed87 0a03 	vstr	s0, [r7, #12]
 800f60e:	edc7 0a02 	vstr	s1, [r7, #8]
 800f612:	6078      	str	r0, [r7, #4]
  tofMeasurement_t tofData;
  tofData.timestamp = timeStamp;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	617b      	str	r3, [r7, #20]
  tofData.distance = distance;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	61bb      	str	r3, [r7, #24]
  tofData.stdDev = stdDev;
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	61fb      	str	r3, [r7, #28]
  estimatorEnqueueTOF(&tofData);
 800f620:	f107 0314 	add.w	r3, r7, #20
 800f624:	4618      	mov	r0, r3
 800f626:	f7ff ffb3 	bl	800f590 <estimatorEnqueueTOF>
}
 800f62a:	bf00      	nop
 800f62c:	3720      	adds	r7, #32
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}
	...

0800f634 <sensfusion6Init>:

// TODO: Make math util file
static float invSqrt(float x);

void sensfusion6Init()
{
 800f634:	b480      	push	{r7}
 800f636:	af00      	add	r7, sp, #0
  if(isInit)
 800f638:	4b06      	ldr	r3, [pc, #24]	@ (800f654 <sensfusion6Init+0x20>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d103      	bne.n	800f648 <sensfusion6Init+0x14>
    return;

  isInit = true;
 800f640:	4b04      	ldr	r3, [pc, #16]	@ (800f654 <sensfusion6Init+0x20>)
 800f642:	2201      	movs	r2, #1
 800f644:	701a      	strb	r2, [r3, #0]
 800f646:	e000      	b.n	800f64a <sensfusion6Init+0x16>
    return;
 800f648:	bf00      	nop
}
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	20008a7c 	.word	0x20008a7c

0800f658 <sensfusion6Test>:

bool sensfusion6Test(void)
{
 800f658:	b480      	push	{r7}
 800f65a:	af00      	add	r7, sp, #0
  return isInit;
 800f65c:	4b03      	ldr	r3, [pc, #12]	@ (800f66c <sensfusion6Test+0x14>)
 800f65e:	781b      	ldrb	r3, [r3, #0]
}
 800f660:	4618      	mov	r0, r3
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	20008a7c 	.word	0x20008a7c

0800f670 <sensfusion6UpdateQ>:

void sensfusion6UpdateQ(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af00      	add	r7, sp, #0
 800f676:	ed87 0a07 	vstr	s0, [r7, #28]
 800f67a:	edc7 0a06 	vstr	s1, [r7, #24]
 800f67e:	ed87 1a05 	vstr	s2, [r7, #20]
 800f682:	edc7 1a04 	vstr	s3, [r7, #16]
 800f686:	ed87 2a03 	vstr	s4, [r7, #12]
 800f68a:	edc7 2a02 	vstr	s5, [r7, #8]
 800f68e:	ed87 3a01 	vstr	s6, [r7, #4]
  sensfusion6UpdateQImpl(gx, gy, gz, ax, ay, az, dt);
 800f692:	ed97 3a01 	vldr	s6, [r7, #4]
 800f696:	edd7 2a02 	vldr	s5, [r7, #8]
 800f69a:	ed97 2a03 	vldr	s4, [r7, #12]
 800f69e:	edd7 1a04 	vldr	s3, [r7, #16]
 800f6a2:	ed97 1a05 	vldr	s2, [r7, #20]
 800f6a6:	edd7 0a06 	vldr	s1, [r7, #24]
 800f6aa:	ed97 0a07 	vldr	s0, [r7, #28]
 800f6ae:	f000 f82b 	bl	800f708 <sensfusion6UpdateQImpl>
  estimatedGravityDirection(&gravX, &gravY, &gravZ);
 800f6b2:	4a10      	ldr	r2, [pc, #64]	@ (800f6f4 <sensfusion6UpdateQ+0x84>)
 800f6b4:	4910      	ldr	r1, [pc, #64]	@ (800f6f8 <sensfusion6UpdateQ+0x88>)
 800f6b6:	4811      	ldr	r0, [pc, #68]	@ (800f6fc <sensfusion6UpdateQ+0x8c>)
 800f6b8:	f000 fc1c 	bl	800fef4 <estimatedGravityDirection>

  if (!isCalibrated) {
 800f6bc:	4b10      	ldr	r3, [pc, #64]	@ (800f700 <sensfusion6UpdateQ+0x90>)
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	f083 0301 	eor.w	r3, r3, #1
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00f      	beq.n	800f6ea <sensfusion6UpdateQ+0x7a>
    baseZacc = sensfusion6GetAccZ(ax, ay, az);
 800f6ca:	ed97 1a02 	vldr	s2, [r7, #8]
 800f6ce:	edd7 0a03 	vldr	s1, [r7, #12]
 800f6d2:	ed97 0a04 	vldr	s0, [r7, #16]
 800f6d6:	f000 fbdd 	bl	800fe94 <sensfusion6GetAccZ>
 800f6da:	eef0 7a40 	vmov.f32	s15, s0
 800f6de:	4b09      	ldr	r3, [pc, #36]	@ (800f704 <sensfusion6UpdateQ+0x94>)
 800f6e0:	edc3 7a00 	vstr	s15, [r3]
    isCalibrated = true;
 800f6e4:	4b06      	ldr	r3, [pc, #24]	@ (800f700 <sensfusion6UpdateQ+0x90>)
 800f6e6:	2201      	movs	r2, #1
 800f6e8:	701a      	strb	r2, [r3, #0]
  }
}
 800f6ea:	bf00      	nop
 800f6ec:	3720      	adds	r7, #32
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}
 800f6f2:	bf00      	nop
 800f6f4:	20008a78 	.word	0x20008a78
 800f6f8:	20008a74 	.word	0x20008a74
 800f6fc:	20008a70 	.word	0x20008a70
 800f700:	20008a7d 	.word	0x20008a7d
 800f704:	20000034 	.word	0x20000034

0800f708 <sensfusion6UpdateQImpl>:
//
// Date     Author      Notes
// 29/09/2011 SOH Madgwick    Initial release
// 02/10/2011 SOH Madgwick  Optimised for reduced CPU load
static void sensfusion6UpdateQImpl(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b092      	sub	sp, #72	@ 0x48
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	ed87 0a07 	vstr	s0, [r7, #28]
 800f712:	edc7 0a06 	vstr	s1, [r7, #24]
 800f716:	ed87 1a05 	vstr	s2, [r7, #20]
 800f71a:	edc7 1a04 	vstr	s3, [r7, #16]
 800f71e:	ed87 2a03 	vstr	s4, [r7, #12]
 800f722:	edc7 2a02 	vstr	s5, [r7, #8]
 800f726:	ed87 3a01 	vstr	s6, [r7, #4]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = gx * M_PI_F / 180;
 800f72a:	edd7 7a07 	vldr	s15, [r7, #28]
 800f72e:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800f994 <sensfusion6UpdateQImpl+0x28c>
 800f732:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f736:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800f998 <sensfusion6UpdateQImpl+0x290>
 800f73a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f73e:	edc7 7a07 	vstr	s15, [r7, #28]
  gy = gy * M_PI_F / 180;
 800f742:	edd7 7a06 	vldr	s15, [r7, #24]
 800f746:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800f994 <sensfusion6UpdateQImpl+0x28c>
 800f74a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f74e:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800f998 <sensfusion6UpdateQImpl+0x290>
 800f752:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f756:	edc7 7a06 	vstr	s15, [r7, #24]
  gz = gz * M_PI_F / 180;
 800f75a:	edd7 7a05 	vldr	s15, [r7, #20]
 800f75e:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800f994 <sensfusion6UpdateQImpl+0x28c>
 800f762:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f766:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800f998 <sensfusion6UpdateQImpl+0x290>
 800f76a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800f76e:	edc7 7a05 	vstr	s15, [r7, #20]

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800f772:	edd7 7a04 	vldr	s15, [r7, #16]
 800f776:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77e:	d10e      	bne.n	800f79e <sensfusion6UpdateQImpl+0x96>
 800f780:	edd7 7a03 	vldr	s15, [r7, #12]
 800f784:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f78c:	d107      	bne.n	800f79e <sensfusion6UpdateQImpl+0x96>
 800f78e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f792:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f79a:	f000 8142 	beq.w	800fa22 <sensfusion6UpdateQImpl+0x31a>
  {
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800f79e:	edd7 7a04 	vldr	s15, [r7, #16]
 800f7a2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f7a6:	edd7 7a03 	vldr	s15, [r7, #12]
 800f7aa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f7ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f7b2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f7b6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f7ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7be:	eeb0 0a67 	vmov.f32	s0, s15
 800f7c2:	f000 fb2b 	bl	800fe1c <invSqrt>
 800f7c6:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    ax *= recipNorm;
 800f7ca:	ed97 7a04 	vldr	s14, [r7, #16]
 800f7ce:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7d6:	edc7 7a04 	vstr	s15, [r7, #16]
    ay *= recipNorm;
 800f7da:	ed97 7a03 	vldr	s14, [r7, #12]
 800f7de:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f7e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7e6:	edc7 7a03 	vstr	s15, [r7, #12]
    az *= recipNorm;
 800f7ea:	ed97 7a02 	vldr	s14, [r7, #8]
 800f7ee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800f7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f7f6:	edc7 7a02 	vstr	s15, [r7, #8]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = qx * qz - qw * qy;
 800f7fa:	4b68      	ldr	r3, [pc, #416]	@ (800f99c <sensfusion6UpdateQImpl+0x294>)
 800f7fc:	ed93 7a00 	vldr	s14, [r3]
 800f800:	4b67      	ldr	r3, [pc, #412]	@ (800f9a0 <sensfusion6UpdateQImpl+0x298>)
 800f802:	edd3 7a00 	vldr	s15, [r3]
 800f806:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f80a:	4b66      	ldr	r3, [pc, #408]	@ (800f9a4 <sensfusion6UpdateQImpl+0x29c>)
 800f80c:	edd3 6a00 	vldr	s13, [r3]
 800f810:	4b65      	ldr	r3, [pc, #404]	@ (800f9a8 <sensfusion6UpdateQImpl+0x2a0>)
 800f812:	edd3 7a00 	vldr	s15, [r3]
 800f816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f81a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f81e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    halfvy = qw * qx + qy * qz;
 800f822:	4b60      	ldr	r3, [pc, #384]	@ (800f9a4 <sensfusion6UpdateQImpl+0x29c>)
 800f824:	ed93 7a00 	vldr	s14, [r3]
 800f828:	4b5c      	ldr	r3, [pc, #368]	@ (800f99c <sensfusion6UpdateQImpl+0x294>)
 800f82a:	edd3 7a00 	vldr	s15, [r3]
 800f82e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f832:	4b5d      	ldr	r3, [pc, #372]	@ (800f9a8 <sensfusion6UpdateQImpl+0x2a0>)
 800f834:	edd3 6a00 	vldr	s13, [r3]
 800f838:	4b59      	ldr	r3, [pc, #356]	@ (800f9a0 <sensfusion6UpdateQImpl+0x298>)
 800f83a:	edd3 7a00 	vldr	s15, [r3]
 800f83e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f842:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f846:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    halfvz = qw * qw - 0.5f + qz * qz;
 800f84a:	4b56      	ldr	r3, [pc, #344]	@ (800f9a4 <sensfusion6UpdateQImpl+0x29c>)
 800f84c:	ed93 7a00 	vldr	s14, [r3]
 800f850:	4b54      	ldr	r3, [pc, #336]	@ (800f9a4 <sensfusion6UpdateQImpl+0x29c>)
 800f852:	edd3 7a00 	vldr	s15, [r3]
 800f856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f85a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f85e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f862:	4b4f      	ldr	r3, [pc, #316]	@ (800f9a0 <sensfusion6UpdateQImpl+0x298>)
 800f864:	edd3 6a00 	vldr	s13, [r3]
 800f868:	4b4d      	ldr	r3, [pc, #308]	@ (800f9a0 <sensfusion6UpdateQImpl+0x298>)
 800f86a:	edd3 7a00 	vldr	s15, [r3]
 800f86e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f872:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f876:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800f87a:	ed97 7a03 	vldr	s14, [r7, #12]
 800f87e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800f882:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f886:	edd7 6a02 	vldr	s13, [r7, #8]
 800f88a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800f88e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f892:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f896:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    halfey = (az * halfvx - ax * halfvz);
 800f89a:	ed97 7a02 	vldr	s14, [r7, #8]
 800f89e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800f8a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8a6:	edd7 6a04 	vldr	s13, [r7, #16]
 800f8aa:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800f8ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8b6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    halfez = (ax * halfvy - ay * halfvx);
 800f8ba:	ed97 7a04 	vldr	s14, [r7, #16]
 800f8be:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800f8c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8c6:	edd7 6a03 	vldr	s13, [r7, #12]
 800f8ca:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800f8ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f8d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8d6:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f)
 800f8da:	4b34      	ldr	r3, [pc, #208]	@ (800f9ac <sensfusion6UpdateQImpl+0x2a4>)
 800f8dc:	edd3 7a00 	vldr	s15, [r3]
 800f8e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f8e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8e8:	dd68      	ble.n	800f9bc <sensfusion6UpdateQImpl+0x2b4>
    {
      integralFBx += twoKi * halfex * dt;  // integral error scaled by Ki
 800f8ea:	4b30      	ldr	r3, [pc, #192]	@ (800f9ac <sensfusion6UpdateQImpl+0x2a4>)
 800f8ec:	ed93 7a00 	vldr	s14, [r3]
 800f8f0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f8f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8f8:	edd7 7a01 	vldr	s15, [r7, #4]
 800f8fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f900:	4b2b      	ldr	r3, [pc, #172]	@ (800f9b0 <sensfusion6UpdateQImpl+0x2a8>)
 800f902:	edd3 7a00 	vldr	s15, [r3]
 800f906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f90a:	4b29      	ldr	r3, [pc, #164]	@ (800f9b0 <sensfusion6UpdateQImpl+0x2a8>)
 800f90c:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * dt;
 800f910:	4b26      	ldr	r3, [pc, #152]	@ (800f9ac <sensfusion6UpdateQImpl+0x2a4>)
 800f912:	ed93 7a00 	vldr	s14, [r3]
 800f916:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800f91a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f91e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f922:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f926:	4b23      	ldr	r3, [pc, #140]	@ (800f9b4 <sensfusion6UpdateQImpl+0x2ac>)
 800f928:	edd3 7a00 	vldr	s15, [r3]
 800f92c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f930:	4b20      	ldr	r3, [pc, #128]	@ (800f9b4 <sensfusion6UpdateQImpl+0x2ac>)
 800f932:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * dt;
 800f936:	4b1d      	ldr	r3, [pc, #116]	@ (800f9ac <sensfusion6UpdateQImpl+0x2a4>)
 800f938:	ed93 7a00 	vldr	s14, [r3]
 800f93c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800f940:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f944:	edd7 7a01 	vldr	s15, [r7, #4]
 800f948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f94c:	4b1a      	ldr	r3, [pc, #104]	@ (800f9b8 <sensfusion6UpdateQImpl+0x2b0>)
 800f94e:	edd3 7a00 	vldr	s15, [r3]
 800f952:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f956:	4b18      	ldr	r3, [pc, #96]	@ (800f9b8 <sensfusion6UpdateQImpl+0x2b0>)
 800f958:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx;  // apply integral feedback
 800f95c:	4b14      	ldr	r3, [pc, #80]	@ (800f9b0 <sensfusion6UpdateQImpl+0x2a8>)
 800f95e:	edd3 7a00 	vldr	s15, [r3]
 800f962:	ed97 7a07 	vldr	s14, [r7, #28]
 800f966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f96a:	edc7 7a07 	vstr	s15, [r7, #28]
      gy += integralFBy;
 800f96e:	4b11      	ldr	r3, [pc, #68]	@ (800f9b4 <sensfusion6UpdateQImpl+0x2ac>)
 800f970:	edd3 7a00 	vldr	s15, [r3]
 800f974:	ed97 7a06 	vldr	s14, [r7, #24]
 800f978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f97c:	edc7 7a06 	vstr	s15, [r7, #24]
      gz += integralFBz;
 800f980:	4b0d      	ldr	r3, [pc, #52]	@ (800f9b8 <sensfusion6UpdateQImpl+0x2b0>)
 800f982:	edd3 7a00 	vldr	s15, [r3]
 800f986:	ed97 7a05 	vldr	s14, [r7, #20]
 800f98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f98e:	edc7 7a05 	vstr	s15, [r7, #20]
 800f992:	e01f      	b.n	800f9d4 <sensfusion6UpdateQImpl+0x2cc>
 800f994:	40490fdb 	.word	0x40490fdb
 800f998:	43340000 	.word	0x43340000
 800f99c:	20008a64 	.word	0x20008a64
 800f9a0:	20008a6c 	.word	0x20008a6c
 800f9a4:	20000030 	.word	0x20000030
 800f9a8:	20008a68 	.word	0x20008a68
 800f9ac:	2000002c 	.word	0x2000002c
 800f9b0:	20008a58 	.word	0x20008a58
 800f9b4:	20008a5c 	.word	0x20008a5c
 800f9b8:	20008a60 	.word	0x20008a60
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800f9bc:	4b9a      	ldr	r3, [pc, #616]	@ (800fc28 <sensfusion6UpdateQImpl+0x520>)
 800f9be:	f04f 0200 	mov.w	r2, #0
 800f9c2:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800f9c4:	4b99      	ldr	r3, [pc, #612]	@ (800fc2c <sensfusion6UpdateQImpl+0x524>)
 800f9c6:	f04f 0200 	mov.w	r2, #0
 800f9ca:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800f9cc:	4b98      	ldr	r3, [pc, #608]	@ (800fc30 <sensfusion6UpdateQImpl+0x528>)
 800f9ce:	f04f 0200 	mov.w	r2, #0
 800f9d2:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800f9d4:	4b97      	ldr	r3, [pc, #604]	@ (800fc34 <sensfusion6UpdateQImpl+0x52c>)
 800f9d6:	ed93 7a00 	vldr	s14, [r3]
 800f9da:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f9de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9e2:	ed97 7a07 	vldr	s14, [r7, #28]
 800f9e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f9ea:	edc7 7a07 	vstr	s15, [r7, #28]
    gy += twoKp * halfey;
 800f9ee:	4b91      	ldr	r3, [pc, #580]	@ (800fc34 <sensfusion6UpdateQImpl+0x52c>)
 800f9f0:	ed93 7a00 	vldr	s14, [r3]
 800f9f4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800f9f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9fc:	ed97 7a06 	vldr	s14, [r7, #24]
 800fa00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa04:	edc7 7a06 	vstr	s15, [r7, #24]
    gz += twoKp * halfez;
 800fa08:	4b8a      	ldr	r3, [pc, #552]	@ (800fc34 <sensfusion6UpdateQImpl+0x52c>)
 800fa0a:	ed93 7a00 	vldr	s14, [r3]
 800fa0e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800fa12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa16:	ed97 7a05 	vldr	s14, [r7, #20]
 800fa1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa1e:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * dt);   // pre-multiply common factors
 800fa22:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa26:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fa2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa2e:	ed97 7a07 	vldr	s14, [r7, #28]
 800fa32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa36:	edc7 7a07 	vstr	s15, [r7, #28]
  gy *= (0.5f * dt);
 800fa3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa3e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fa42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa46:	ed97 7a06 	vldr	s14, [r7, #24]
 800fa4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa4e:	edc7 7a06 	vstr	s15, [r7, #24]
  gz *= (0.5f * dt);
 800fa52:	edd7 7a01 	vldr	s15, [r7, #4]
 800fa56:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fa5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa5e:	ed97 7a05 	vldr	s14, [r7, #20]
 800fa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa66:	edc7 7a05 	vstr	s15, [r7, #20]
  qa = qw;
 800fa6a:	4b73      	ldr	r3, [pc, #460]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  qb = qx;
 800fa70:	4b72      	ldr	r3, [pc, #456]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	627b      	str	r3, [r7, #36]	@ 0x24
  qc = qy;
 800fa76:	4b72      	ldr	r3, [pc, #456]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	623b      	str	r3, [r7, #32]
  qw += (-qb * gx - qc * gy - qz * gz);
 800fa7c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800fa80:	eeb1 7a67 	vneg.f32	s14, s15
 800fa84:	edd7 7a07 	vldr	s15, [r7, #28]
 800fa88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa8c:	edd7 6a08 	vldr	s13, [r7, #32]
 800fa90:	edd7 7a06 	vldr	s15, [r7, #24]
 800fa94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fa98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fa9c:	4b69      	ldr	r3, [pc, #420]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fa9e:	edd3 6a00 	vldr	s13, [r3]
 800faa2:	edd7 7a05 	vldr	s15, [r7, #20]
 800faa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800faaa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faae:	4b62      	ldr	r3, [pc, #392]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800fab0:	edd3 7a00 	vldr	s15, [r3]
 800fab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fab8:	4b5f      	ldr	r3, [pc, #380]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800faba:	edc3 7a00 	vstr	s15, [r3]
  qx += (qa * gx + qc * gz - qz * gy);
 800fabe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800fac2:	edd7 7a07 	vldr	s15, [r7, #28]
 800fac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800faca:	edd7 6a08 	vldr	s13, [r7, #32]
 800face:	edd7 7a05 	vldr	s15, [r7, #20]
 800fad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fada:	4b5a      	ldr	r3, [pc, #360]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fadc:	edd3 6a00 	vldr	s13, [r3]
 800fae0:	edd7 7a06 	vldr	s15, [r7, #24]
 800fae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fae8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800faec:	4b53      	ldr	r3, [pc, #332]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800faee:	edd3 7a00 	vldr	s15, [r3]
 800faf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800faf6:	4b51      	ldr	r3, [pc, #324]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800faf8:	edc3 7a00 	vstr	s15, [r3]
  qy += (qa * gy - qb * gz + qz * gx);
 800fafc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800fb00:	edd7 7a06 	vldr	s15, [r7, #24]
 800fb04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb08:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800fb0c:	edd7 7a05 	vldr	s15, [r7, #20]
 800fb10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb14:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb18:	4b4a      	ldr	r3, [pc, #296]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fb1a:	edd3 6a00 	vldr	s13, [r3]
 800fb1e:	edd7 7a07 	vldr	s15, [r7, #28]
 800fb22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb26:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb2a:	4b45      	ldr	r3, [pc, #276]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fb2c:	edd3 7a00 	vldr	s15, [r3]
 800fb30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb34:	4b42      	ldr	r3, [pc, #264]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fb36:	edc3 7a00 	vstr	s15, [r3]
  qz += (qa * gz + qb * gy - qc * gx);
 800fb3a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800fb3e:	edd7 7a05 	vldr	s15, [r7, #20]
 800fb42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb46:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800fb4a:	edd7 7a06 	vldr	s15, [r7, #24]
 800fb4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb52:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb56:	edd7 6a08 	vldr	s13, [r7, #32]
 800fb5a:	edd7 7a07 	vldr	s15, [r7, #28]
 800fb5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb62:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb66:	4b37      	ldr	r3, [pc, #220]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fb68:	edd3 7a00 	vldr	s15, [r3]
 800fb6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb70:	4b34      	ldr	r3, [pc, #208]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fb72:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 800fb76:	4b30      	ldr	r3, [pc, #192]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800fb78:	ed93 7a00 	vldr	s14, [r3]
 800fb7c:	4b2e      	ldr	r3, [pc, #184]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800fb7e:	edd3 7a00 	vldr	s15, [r3]
 800fb82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb86:	4b2d      	ldr	r3, [pc, #180]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800fb88:	edd3 6a00 	vldr	s13, [r3]
 800fb8c:	4b2b      	ldr	r3, [pc, #172]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800fb8e:	edd3 7a00 	vldr	s15, [r3]
 800fb92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb96:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fb9a:	4b29      	ldr	r3, [pc, #164]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fb9c:	edd3 6a00 	vldr	s13, [r3]
 800fba0:	4b27      	ldr	r3, [pc, #156]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fba2:	edd3 7a00 	vldr	s15, [r3]
 800fba6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbaa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbae:	4b25      	ldr	r3, [pc, #148]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fbb0:	edd3 6a00 	vldr	s13, [r3]
 800fbb4:	4b23      	ldr	r3, [pc, #140]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fbb6:	edd3 7a00 	vldr	s15, [r3]
 800fbba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbc2:	eeb0 0a67 	vmov.f32	s0, s15
 800fbc6:	f000 f929 	bl	800fe1c <invSqrt>
 800fbca:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
  qw *= recipNorm;
 800fbce:	4b1a      	ldr	r3, [pc, #104]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800fbd0:	ed93 7a00 	vldr	s14, [r3]
 800fbd4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbdc:	4b16      	ldr	r3, [pc, #88]	@ (800fc38 <sensfusion6UpdateQImpl+0x530>)
 800fbde:	edc3 7a00 	vstr	s15, [r3]
  qx *= recipNorm;
 800fbe2:	4b16      	ldr	r3, [pc, #88]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800fbe4:	ed93 7a00 	vldr	s14, [r3]
 800fbe8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fbec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf0:	4b12      	ldr	r3, [pc, #72]	@ (800fc3c <sensfusion6UpdateQImpl+0x534>)
 800fbf2:	edc3 7a00 	vstr	s15, [r3]
  qy *= recipNorm;
 800fbf6:	4b12      	ldr	r3, [pc, #72]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fbf8:	ed93 7a00 	vldr	s14, [r3]
 800fbfc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fc00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc04:	4b0e      	ldr	r3, [pc, #56]	@ (800fc40 <sensfusion6UpdateQImpl+0x538>)
 800fc06:	edc3 7a00 	vstr	s15, [r3]
  qz *= recipNorm;
 800fc0a:	4b0e      	ldr	r3, [pc, #56]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fc0c:	ed93 7a00 	vldr	s14, [r3]
 800fc10:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800fc14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc18:	4b0a      	ldr	r3, [pc, #40]	@ (800fc44 <sensfusion6UpdateQImpl+0x53c>)
 800fc1a:	edc3 7a00 	vstr	s15, [r3]
}
 800fc1e:	bf00      	nop
 800fc20:	3748      	adds	r7, #72	@ 0x48
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
 800fc26:	bf00      	nop
 800fc28:	20008a58 	.word	0x20008a58
 800fc2c:	20008a5c 	.word	0x20008a5c
 800fc30:	20008a60 	.word	0x20008a60
 800fc34:	20000028 	.word	0x20000028
 800fc38:	20000030 	.word	0x20000030
 800fc3c:	20008a64 	.word	0x20008a64
 800fc40:	20008a68 	.word	0x20008a68
 800fc44:	20008a6c 	.word	0x20008a6c

0800fc48 <sensfusion6GetQuaternion>:
#endif

void sensfusion6GetQuaternion(float* q_x, float* q_y, float* q_z, float* q_w)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b085      	sub	sp, #20
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
 800fc54:	603b      	str	r3, [r7, #0]
  *q_x = qx;
 800fc56:	4b0b      	ldr	r3, [pc, #44]	@ (800fc84 <sensfusion6GetQuaternion+0x3c>)
 800fc58:	681a      	ldr	r2, [r3, #0]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	601a      	str	r2, [r3, #0]
  *q_y = qy;
 800fc5e:	4b0a      	ldr	r3, [pc, #40]	@ (800fc88 <sensfusion6GetQuaternion+0x40>)
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	601a      	str	r2, [r3, #0]
  *q_z = qz;
 800fc66:	4b09      	ldr	r3, [pc, #36]	@ (800fc8c <sensfusion6GetQuaternion+0x44>)
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	601a      	str	r2, [r3, #0]
  *q_w = qw;
 800fc6e:	4b08      	ldr	r3, [pc, #32]	@ (800fc90 <sensfusion6GetQuaternion+0x48>)
 800fc70:	681a      	ldr	r2, [r3, #0]
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	601a      	str	r2, [r3, #0]
}
 800fc76:	bf00      	nop
 800fc78:	3714      	adds	r7, #20
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop
 800fc84:	20008a64 	.word	0x20008a64
 800fc88:	20008a68 	.word	0x20008a68
 800fc8c:	20008a6c 	.word	0x20008a6c
 800fc90:	20000030 	.word	0x20000030

0800fc94 <sensfusion6GetEulerRPY>:

void sensfusion6GetEulerRPY(float* roll, float* pitch, float* yaw)
{
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b088      	sub	sp, #32
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	60f8      	str	r0, [r7, #12]
 800fc9c:	60b9      	str	r1, [r7, #8]
 800fc9e:	607a      	str	r2, [r7, #4]
  float gx = gravX;
 800fca0:	4b44      	ldr	r3, [pc, #272]	@ (800fdb4 <sensfusion6GetEulerRPY+0x120>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	61fb      	str	r3, [r7, #28]
  float gy = gravY;
 800fca6:	4b44      	ldr	r3, [pc, #272]	@ (800fdb8 <sensfusion6GetEulerRPY+0x124>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	61bb      	str	r3, [r7, #24]
  float gz = gravZ;
 800fcac:	4b43      	ldr	r3, [pc, #268]	@ (800fdbc <sensfusion6GetEulerRPY+0x128>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	617b      	str	r3, [r7, #20]

  if (gx>1) gx=1;
 800fcb2:	edd7 7a07 	vldr	s15, [r7, #28]
 800fcb6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fcba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc2:	dd02      	ble.n	800fcca <sensfusion6GetEulerRPY+0x36>
 800fcc4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fcc8:	61fb      	str	r3, [r7, #28]
  if (gx<-1) gx=-1;
 800fcca:	edd7 7a07 	vldr	s15, [r7, #28]
 800fcce:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800fcd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcda:	d501      	bpl.n	800fce0 <sensfusion6GetEulerRPY+0x4c>
 800fcdc:	4b38      	ldr	r3, [pc, #224]	@ (800fdc0 <sensfusion6GetEulerRPY+0x12c>)
 800fcde:	61fb      	str	r3, [r7, #28]

  *yaw = -atan2f(2*(qw*qz + qx*qy), (+1.0f - 2.0f * (qy*qy + qz*qz))) * 180 / M_PI_F;
 800fce0:	4b38      	ldr	r3, [pc, #224]	@ (800fdc4 <sensfusion6GetEulerRPY+0x130>)
 800fce2:	ed93 7a00 	vldr	s14, [r3]
 800fce6:	4b38      	ldr	r3, [pc, #224]	@ (800fdc8 <sensfusion6GetEulerRPY+0x134>)
 800fce8:	edd3 7a00 	vldr	s15, [r3]
 800fcec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fcf0:	4b36      	ldr	r3, [pc, #216]	@ (800fdcc <sensfusion6GetEulerRPY+0x138>)
 800fcf2:	edd3 6a00 	vldr	s13, [r3]
 800fcf6:	4b36      	ldr	r3, [pc, #216]	@ (800fdd0 <sensfusion6GetEulerRPY+0x13c>)
 800fcf8:	edd3 7a00 	vldr	s15, [r3]
 800fcfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd04:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800fd08:	4b31      	ldr	r3, [pc, #196]	@ (800fdd0 <sensfusion6GetEulerRPY+0x13c>)
 800fd0a:	ed93 7a00 	vldr	s14, [r3]
 800fd0e:	4b30      	ldr	r3, [pc, #192]	@ (800fdd0 <sensfusion6GetEulerRPY+0x13c>)
 800fd10:	edd3 7a00 	vldr	s15, [r3]
 800fd14:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fd18:	4b2b      	ldr	r3, [pc, #172]	@ (800fdc8 <sensfusion6GetEulerRPY+0x134>)
 800fd1a:	edd3 6a00 	vldr	s13, [r3]
 800fd1e:	4b2a      	ldr	r3, [pc, #168]	@ (800fdc8 <sensfusion6GetEulerRPY+0x134>)
 800fd20:	edd3 7a00 	vldr	s15, [r3]
 800fd24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fd30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fd34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd38:	eef0 0a67 	vmov.f32	s1, s15
 800fd3c:	eeb0 0a46 	vmov.f32	s0, s12
 800fd40:	f00b fa8e 	bl	801b260 <atan2f>
 800fd44:	eef0 7a40 	vmov.f32	s15, s0
 800fd48:	eef1 7a67 	vneg.f32	s15, s15
 800fd4c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800fdd4 <sensfusion6GetEulerRPY+0x140>
 800fd50:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd54:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800fdd8 <sensfusion6GetEulerRPY+0x144>
 800fd58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	edc3 7a00 	vstr	s15, [r3]
  *pitch = asinf(gx) * 180 / M_PI_F; //Pitch seems to be inverted
 800fd62:	ed97 0a07 	vldr	s0, [r7, #28]
 800fd66:	f00b fa4f 	bl	801b208 <asinf>
 800fd6a:	eef0 7a40 	vmov.f32	s15, s0
 800fd6e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800fdd4 <sensfusion6GetEulerRPY+0x140>
 800fd72:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd76:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800fdd8 <sensfusion6GetEulerRPY+0x144>
 800fd7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	edc3 7a00 	vstr	s15, [r3]
  *roll = atan2f(gy, gz) * 180 / M_PI_F;
 800fd84:	edd7 0a05 	vldr	s1, [r7, #20]
 800fd88:	ed97 0a06 	vldr	s0, [r7, #24]
 800fd8c:	f00b fa68 	bl	801b260 <atan2f>
 800fd90:	eef0 7a40 	vmov.f32	s15, s0
 800fd94:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800fdd4 <sensfusion6GetEulerRPY+0x140>
 800fd98:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd9c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fdd8 <sensfusion6GetEulerRPY+0x144>
 800fda0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	edc3 7a00 	vstr	s15, [r3]
}
 800fdaa:	bf00      	nop
 800fdac:	3720      	adds	r7, #32
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}
 800fdb2:	bf00      	nop
 800fdb4:	20008a70 	.word	0x20008a70
 800fdb8:	20008a74 	.word	0x20008a74
 800fdbc:	20008a78 	.word	0x20008a78
 800fdc0:	bf800000 	.word	0xbf800000
 800fdc4:	20000030 	.word	0x20000030
 800fdc8:	20008a6c 	.word	0x20008a6c
 800fdcc:	20008a64 	.word	0x20008a64
 800fdd0:	20008a68 	.word	0x20008a68
 800fdd4:	43340000 	.word	0x43340000
 800fdd8:	40490fdb 	.word	0x40490fdb

0800fddc <sensfusion6GetAccZWithoutGravity>:

float sensfusion6GetAccZWithoutGravity(const float ax, const float ay, const float az)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	ed87 0a03 	vstr	s0, [r7, #12]
 800fde6:	edc7 0a02 	vstr	s1, [r7, #8]
 800fdea:	ed87 1a01 	vstr	s2, [r7, #4]
  return sensfusion6GetAccZ(ax, ay, az) - baseZacc;
 800fdee:	ed97 1a01 	vldr	s2, [r7, #4]
 800fdf2:	edd7 0a02 	vldr	s1, [r7, #8]
 800fdf6:	ed97 0a03 	vldr	s0, [r7, #12]
 800fdfa:	f000 f84b 	bl	800fe94 <sensfusion6GetAccZ>
 800fdfe:	eeb0 7a40 	vmov.f32	s14, s0
 800fe02:	4b05      	ldr	r3, [pc, #20]	@ (800fe18 <sensfusion6GetAccZWithoutGravity+0x3c>)
 800fe04:	edd3 7a00 	vldr	s15, [r3]
 800fe08:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800fe0c:	eeb0 0a67 	vmov.f32	s0, s15
 800fe10:	3710      	adds	r7, #16
 800fe12:	46bd      	mov	sp, r7
 800fe14:	bd80      	pop	{r7, pc}
 800fe16:	bf00      	nop
 800fe18:	20000034 	.word	0x20000034

0800fe1c <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b087      	sub	sp, #28
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800fe26:	edd7 7a01 	vldr	s15, [r7, #4]
 800fe2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fe2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe32:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 800fe3a:	f107 0310 	add.w	r3, r7, #16
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i>>1);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	105a      	asrs	r2, r3, #1
 800fe46:	4b12      	ldr	r3, [pc, #72]	@ (800fe90 <invSqrt+0x74>)
 800fe48:	1a9b      	subs	r3, r3, r2
 800fe4a:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 800fe4c:	f107 030c 	add.w	r3, r7, #12
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800fe54:	ed97 7a04 	vldr	s14, [r7, #16]
 800fe58:	edd7 7a05 	vldr	s15, [r7, #20]
 800fe5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe60:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe68:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800fe6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe70:	edd7 7a04 	vldr	s15, [r7, #16]
 800fe74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe78:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	ee07 3a90 	vmov	s15, r3
}
 800fe82:	eeb0 0a67 	vmov.f32	s0, s15
 800fe86:	371c      	adds	r7, #28
 800fe88:	46bd      	mov	sp, r7
 800fe8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8e:	4770      	bx	lr
 800fe90:	5f3759df 	.word	0x5f3759df

0800fe94 <sensfusion6GetAccZ>:

static float sensfusion6GetAccZ(const float ax, const float ay, const float az)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	ed87 0a03 	vstr	s0, [r7, #12]
 800fe9e:	edc7 0a02 	vstr	s1, [r7, #8]
 800fea2:	ed87 1a01 	vstr	s2, [r7, #4]
  // return vertical acceleration
  // (A dot G) / |G|,  (|G| = 1) -> (A dot G)
  return (ax * gravX + ay * gravY + az * gravZ);
 800fea6:	4b10      	ldr	r3, [pc, #64]	@ (800fee8 <sensfusion6GetAccZ+0x54>)
 800fea8:	ed93 7a00 	vldr	s14, [r3]
 800feac:	edd7 7a03 	vldr	s15, [r7, #12]
 800feb0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800feb4:	4b0d      	ldr	r3, [pc, #52]	@ (800feec <sensfusion6GetAccZ+0x58>)
 800feb6:	edd3 6a00 	vldr	s13, [r3]
 800feba:	edd7 7a02 	vldr	s15, [r7, #8]
 800febe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fec2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fec6:	4b0a      	ldr	r3, [pc, #40]	@ (800fef0 <sensfusion6GetAccZ+0x5c>)
 800fec8:	edd3 6a00 	vldr	s13, [r3]
 800fecc:	edd7 7a01 	vldr	s15, [r7, #4]
 800fed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fed4:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800fed8:	eeb0 0a67 	vmov.f32	s0, s15
 800fedc:	3714      	adds	r7, #20
 800fede:	46bd      	mov	sp, r7
 800fee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee4:	4770      	bx	lr
 800fee6:	bf00      	nop
 800fee8:	20008a70 	.word	0x20008a70
 800feec:	20008a74 	.word	0x20008a74
 800fef0:	20008a78 	.word	0x20008a78

0800fef4 <estimatedGravityDirection>:

static void estimatedGravityDirection(float* gx, float* gy, float* gz)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b085      	sub	sp, #20
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
  *gx = 2 * (qx * qz - qw * qy);
 800ff00:	4b2e      	ldr	r3, [pc, #184]	@ (800ffbc <estimatedGravityDirection+0xc8>)
 800ff02:	ed93 7a00 	vldr	s14, [r3]
 800ff06:	4b2e      	ldr	r3, [pc, #184]	@ (800ffc0 <estimatedGravityDirection+0xcc>)
 800ff08:	edd3 7a00 	vldr	s15, [r3]
 800ff0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff10:	4b2c      	ldr	r3, [pc, #176]	@ (800ffc4 <estimatedGravityDirection+0xd0>)
 800ff12:	edd3 6a00 	vldr	s13, [r3]
 800ff16:	4b2c      	ldr	r3, [pc, #176]	@ (800ffc8 <estimatedGravityDirection+0xd4>)
 800ff18:	edd3 7a00 	vldr	s15, [r3]
 800ff1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff24:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	edc3 7a00 	vstr	s15, [r3]
  *gy = 2 * (qw * qx + qy * qz);
 800ff2e:	4b25      	ldr	r3, [pc, #148]	@ (800ffc4 <estimatedGravityDirection+0xd0>)
 800ff30:	ed93 7a00 	vldr	s14, [r3]
 800ff34:	4b21      	ldr	r3, [pc, #132]	@ (800ffbc <estimatedGravityDirection+0xc8>)
 800ff36:	edd3 7a00 	vldr	s15, [r3]
 800ff3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff3e:	4b22      	ldr	r3, [pc, #136]	@ (800ffc8 <estimatedGravityDirection+0xd4>)
 800ff40:	edd3 6a00 	vldr	s13, [r3]
 800ff44:	4b1e      	ldr	r3, [pc, #120]	@ (800ffc0 <estimatedGravityDirection+0xcc>)
 800ff46:	edd3 7a00 	vldr	s15, [r3]
 800ff4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	edc3 7a00 	vstr	s15, [r3]
  *gz = qw * qw - qx * qx - qy * qy + qz * qz;
 800ff5c:	4b19      	ldr	r3, [pc, #100]	@ (800ffc4 <estimatedGravityDirection+0xd0>)
 800ff5e:	ed93 7a00 	vldr	s14, [r3]
 800ff62:	4b18      	ldr	r3, [pc, #96]	@ (800ffc4 <estimatedGravityDirection+0xd0>)
 800ff64:	edd3 7a00 	vldr	s15, [r3]
 800ff68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ff6c:	4b13      	ldr	r3, [pc, #76]	@ (800ffbc <estimatedGravityDirection+0xc8>)
 800ff6e:	edd3 6a00 	vldr	s13, [r3]
 800ff72:	4b12      	ldr	r3, [pc, #72]	@ (800ffbc <estimatedGravityDirection+0xc8>)
 800ff74:	edd3 7a00 	vldr	s15, [r3]
 800ff78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff80:	4b11      	ldr	r3, [pc, #68]	@ (800ffc8 <estimatedGravityDirection+0xd4>)
 800ff82:	edd3 6a00 	vldr	s13, [r3]
 800ff86:	4b10      	ldr	r3, [pc, #64]	@ (800ffc8 <estimatedGravityDirection+0xd4>)
 800ff88:	edd3 7a00 	vldr	s15, [r3]
 800ff8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ff90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff94:	4b0a      	ldr	r3, [pc, #40]	@ (800ffc0 <estimatedGravityDirection+0xcc>)
 800ff96:	edd3 6a00 	vldr	s13, [r3]
 800ff9a:	4b09      	ldr	r3, [pc, #36]	@ (800ffc0 <estimatedGravityDirection+0xcc>)
 800ff9c:	edd3 7a00 	vldr	s15, [r3]
 800ffa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ffa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	edc3 7a00 	vstr	s15, [r3]
}
 800ffae:	bf00      	nop
 800ffb0:	3714      	adds	r7, #20
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb8:	4770      	bx	lr
 800ffba:	bf00      	nop
 800ffbc:	20008a64 	.word	0x20008a64
 800ffc0:	20008a6c 	.word	0x20008a6c
 800ffc4:	20000030 	.word	0x20000030
 800ffc8:	20008a68 	.word	0x20008a68

0800ffcc <quatcompress>:
#include <stdint.h>
#include <math.h>

// assumes input quaternion is normalized. will fail if not.
static inline uint32_t quatcompress(float const q[4])
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b08b      	sub	sp, #44	@ 0x2c
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
	// we send the values of the quaternion's smallest 3 elements.
	unsigned i_largest = 0;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800ffd8:	2301      	movs	r3, #1
 800ffda:	623b      	str	r3, [r7, #32]
 800ffdc:	e019      	b.n	8010012 <quatcompress+0x46>
		if (fabsf(q[i]) > fabsf(q[i_largest])) {
 800ffde:	6a3b      	ldr	r3, [r7, #32]
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	4413      	add	r3, r2
 800ffe6:	edd3 7a00 	vldr	s15, [r3]
 800ffea:	eeb0 7ae7 	vabs.f32	s14, s15
 800ffee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	4413      	add	r3, r2
 800fff6:	edd3 7a00 	vldr	s15, [r3]
 800fffa:	eef0 7ae7 	vabs.f32	s15, s15
 800fffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010006:	dd01      	ble.n	801000c <quatcompress+0x40>
			i_largest = i;
 8010008:	6a3b      	ldr	r3, [r7, #32]
 801000a:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 801000c:	6a3b      	ldr	r3, [r7, #32]
 801000e:	3301      	adds	r3, #1
 8010010:	623b      	str	r3, [r7, #32]
 8010012:	6a3b      	ldr	r3, [r7, #32]
 8010014:	2b03      	cmp	r3, #3
 8010016:	d9e2      	bls.n	800ffde <quatcompress+0x12>
	}

	// since -q represents the same rotation as q,
	// transform the quaternion so the largest element is positive.
	// this avoids having to send its sign bit.
	unsigned negate = q[i_largest] < 0;
 8010018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801001a:	009b      	lsls	r3, r3, #2
 801001c:	687a      	ldr	r2, [r7, #4]
 801001e:	4413      	add	r3, r2
 8010020:	edd3 7a00 	vldr	s15, [r3]
 8010024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002c:	bf4c      	ite	mi
 801002e:	2301      	movmi	r3, #1
 8010030:	2300      	movpl	r3, #0
 8010032:	b2db      	uxtb	r3, r3
 8010034:	617b      	str	r3, [r7, #20]

	// 1/sqrt(2) is the largest possible value 
	// of the second-largest element in a unit quaternion.

	// do compression using sign bit and 9-bit precision per element.
	uint32_t comp = i_largest;
 8010036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010038:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 801003a:	2300      	movs	r3, #0
 801003c:	61bb      	str	r3, [r7, #24]
 801003e:	e039      	b.n	80100b4 <quatcompress+0xe8>
		if (i != i_largest) {
 8010040:	69ba      	ldr	r2, [r7, #24]
 8010042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010044:	429a      	cmp	r2, r3
 8010046:	d032      	beq.n	80100ae <quatcompress+0xe2>
			unsigned negbit = (q[i] < 0) ^ negate;
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	4413      	add	r3, r2
 8010050:	edd3 7a00 	vldr	s15, [r3]
 8010054:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005c:	bf4c      	ite	mi
 801005e:	2301      	movmi	r3, #1
 8010060:	2300      	movpl	r3, #0
 8010062:	b2db      	uxtb	r3, r3
 8010064:	461a      	mov	r2, r3
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	4053      	eors	r3, r2
 801006a:	613b      	str	r3, [r7, #16]
			unsigned mag = ((1 << 9) - 1) * (fabsf(q[i]) / (float)M_SQRT1_2) + 0.5f;
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	687a      	ldr	r2, [r7, #4]
 8010072:	4413      	add	r3, r2
 8010074:	edd3 7a00 	vldr	s15, [r3]
 8010078:	eeb0 7ae7 	vabs.f32	s14, s15
 801007c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80100c8 <quatcompress+0xfc>
 8010080:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010084:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80100cc <quatcompress+0x100>
 8010088:	ee67 7a87 	vmul.f32	s15, s15, s14
 801008c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010090:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010098:	ee17 3a90 	vmov	r3, s15
 801009c:	60fb      	str	r3, [r7, #12]
			comp = (comp << 10) | (negbit << 9) | mag;
 801009e:	69fb      	ldr	r3, [r7, #28]
 80100a0:	029a      	lsls	r2, r3, #10
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	025b      	lsls	r3, r3, #9
 80100a6:	4313      	orrs	r3, r2
 80100a8:	68fa      	ldr	r2, [r7, #12]
 80100aa:	4313      	orrs	r3, r2
 80100ac:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	3301      	adds	r3, #1
 80100b2:	61bb      	str	r3, [r7, #24]
 80100b4:	69bb      	ldr	r3, [r7, #24]
 80100b6:	2b03      	cmp	r3, #3
 80100b8:	d9c2      	bls.n	8010040 <quatcompress+0x74>
		}
	}

	return comp;
 80100ba:	69fb      	ldr	r3, [r7, #28]
}
 80100bc:	4618      	mov	r0, r3
 80100be:	372c      	adds	r7, #44	@ 0x2c
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	3f3504f3 	.word	0x3f3504f3
 80100cc:	43ff8000 	.word	0x43ff8000

080100d0 <calcSensorToOutputLatency>:
STATIC_MEM_TASK_ALLOC(stabilizerTask, STABILIZER_TASK_STACKSIZE);

static void stabilizerTask(void* param);

static void calcSensorToOutputLatency(const sensorData_t *sensorData)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b084      	sub	sp, #16
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  uint64_t outTimestamp = usecTimestamp();
 80100d8:	f7ff f8cc 	bl	800f274 <usecTimestamp>
 80100dc:	e9c7 0102 	strd	r0, r1, [r7, #8]
  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;
 80100e0:	68b9      	ldr	r1, [r7, #8]
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80100e8:	4613      	mov	r3, r2
 80100ea:	1acb      	subs	r3, r1, r3
 80100ec:	4a02      	ldr	r2, [pc, #8]	@ (80100f8 <calcSensorToOutputLatency+0x28>)
 80100ee:	6013      	str	r3, [r2, #0]
}
 80100f0:	bf00      	nop
 80100f2:	3710      	adds	r7, #16
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	20008a80 	.word	0x20008a80

080100fc <compressState>:

static void compressState()
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b086      	sub	sp, #24
 8010100:	af00      	add	r7, sp, #0
  stateCompressed.x = state.position.x * 1000.0f;
 8010102:	4b6a      	ldr	r3, [pc, #424]	@ (80102ac <compressState+0x1b0>)
 8010104:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010108:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80102b0 <compressState+0x1b4>
 801010c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010110:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010114:	ee17 3a90 	vmov	r3, s15
 8010118:	b21a      	sxth	r2, r3
 801011a:	4b66      	ldr	r3, [pc, #408]	@ (80102b4 <compressState+0x1b8>)
 801011c:	801a      	strh	r2, [r3, #0]
  stateCompressed.y = state.position.y * 1000.0f;
 801011e:	4b63      	ldr	r3, [pc, #396]	@ (80102ac <compressState+0x1b0>)
 8010120:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010124:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 80102b0 <compressState+0x1b4>
 8010128:	ee67 7a87 	vmul.f32	s15, s15, s14
 801012c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010130:	ee17 3a90 	vmov	r3, s15
 8010134:	b21a      	sxth	r2, r3
 8010136:	4b5f      	ldr	r3, [pc, #380]	@ (80102b4 <compressState+0x1b8>)
 8010138:	805a      	strh	r2, [r3, #2]
  stateCompressed.z = state.position.z * 1000.0f;
 801013a:	4b5c      	ldr	r3, [pc, #368]	@ (80102ac <compressState+0x1b0>)
 801013c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010140:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80102b0 <compressState+0x1b4>
 8010144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801014c:	ee17 3a90 	vmov	r3, s15
 8010150:	b21a      	sxth	r2, r3
 8010152:	4b58      	ldr	r3, [pc, #352]	@ (80102b4 <compressState+0x1b8>)
 8010154:	809a      	strh	r2, [r3, #4]

  stateCompressed.vx = state.velocity.x * 1000.0f;
 8010156:	4b55      	ldr	r3, [pc, #340]	@ (80102ac <compressState+0x1b0>)
 8010158:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 801015c:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80102b0 <compressState+0x1b4>
 8010160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010164:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010168:	ee17 3a90 	vmov	r3, s15
 801016c:	b21a      	sxth	r2, r3
 801016e:	4b51      	ldr	r3, [pc, #324]	@ (80102b4 <compressState+0x1b8>)
 8010170:	80da      	strh	r2, [r3, #6]
  stateCompressed.vy = state.velocity.y * 1000.0f;
 8010172:	4b4e      	ldr	r3, [pc, #312]	@ (80102ac <compressState+0x1b0>)
 8010174:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8010178:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80102b0 <compressState+0x1b4>
 801017c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010184:	ee17 3a90 	vmov	r3, s15
 8010188:	b21a      	sxth	r2, r3
 801018a:	4b4a      	ldr	r3, [pc, #296]	@ (80102b4 <compressState+0x1b8>)
 801018c:	811a      	strh	r2, [r3, #8]
  stateCompressed.vz = state.velocity.z * 1000.0f;
 801018e:	4b47      	ldr	r3, [pc, #284]	@ (80102ac <compressState+0x1b0>)
 8010190:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8010194:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80102b0 <compressState+0x1b4>
 8010198:	ee67 7a87 	vmul.f32	s15, s15, s14
 801019c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101a0:	ee17 3a90 	vmov	r3, s15
 80101a4:	b21a      	sxth	r2, r3
 80101a6:	4b43      	ldr	r3, [pc, #268]	@ (80102b4 <compressState+0x1b8>)
 80101a8:	815a      	strh	r2, [r3, #10]

  stateCompressed.ax = state.acc.x * 9.81f * 1000.0f;
 80101aa:	4b40      	ldr	r3, [pc, #256]	@ (80102ac <compressState+0x1b0>)
 80101ac:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80101b0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80102b8 <compressState+0x1bc>
 80101b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101b8:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80102b0 <compressState+0x1b4>
 80101bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101c4:	ee17 3a90 	vmov	r3, s15
 80101c8:	b21a      	sxth	r2, r3
 80101ca:	4b3a      	ldr	r3, [pc, #232]	@ (80102b4 <compressState+0x1b8>)
 80101cc:	819a      	strh	r2, [r3, #12]
  stateCompressed.ay = state.acc.y * 9.81f * 1000.0f;
 80101ce:	4b37      	ldr	r3, [pc, #220]	@ (80102ac <compressState+0x1b0>)
 80101d0:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80101d4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80102b8 <compressState+0x1bc>
 80101d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101dc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80102b0 <compressState+0x1b4>
 80101e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101e8:	ee17 3a90 	vmov	r3, s15
 80101ec:	b21a      	sxth	r2, r3
 80101ee:	4b31      	ldr	r3, [pc, #196]	@ (80102b4 <compressState+0x1b8>)
 80101f0:	81da      	strh	r2, [r3, #14]
  stateCompressed.az = (state.acc.z + 1) * 9.81f * 1000.0f;
 80101f2:	4b2e      	ldr	r3, [pc, #184]	@ (80102ac <compressState+0x1b0>)
 80101f4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80101f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010200:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80102b8 <compressState+0x1bc>
 8010204:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010208:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80102b0 <compressState+0x1b4>
 801020c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010210:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010214:	ee17 3a90 	vmov	r3, s15
 8010218:	b21a      	sxth	r2, r3
 801021a:	4b26      	ldr	r3, [pc, #152]	@ (80102b4 <compressState+0x1b8>)
 801021c:	821a      	strh	r2, [r3, #16]

  float const q[4] = {
    state.attitudeQuaternion.x,
 801021e:	4b23      	ldr	r3, [pc, #140]	@ (80102ac <compressState+0x1b0>)
 8010220:	691b      	ldr	r3, [r3, #16]
  float const q[4] = {
 8010222:	607b      	str	r3, [r7, #4]
    state.attitudeQuaternion.y,
 8010224:	4b21      	ldr	r3, [pc, #132]	@ (80102ac <compressState+0x1b0>)
 8010226:	695b      	ldr	r3, [r3, #20]
  float const q[4] = {
 8010228:	60bb      	str	r3, [r7, #8]
    state.attitudeQuaternion.z,
 801022a:	4b20      	ldr	r3, [pc, #128]	@ (80102ac <compressState+0x1b0>)
 801022c:	699b      	ldr	r3, [r3, #24]
  float const q[4] = {
 801022e:	60fb      	str	r3, [r7, #12]
    state.attitudeQuaternion.w};
 8010230:	4b1e      	ldr	r3, [pc, #120]	@ (80102ac <compressState+0x1b0>)
 8010232:	69db      	ldr	r3, [r3, #28]
  float const q[4] = {
 8010234:	613b      	str	r3, [r7, #16]
  stateCompressed.quat = quatcompress(q);
 8010236:	1d3b      	adds	r3, r7, #4
 8010238:	4618      	mov	r0, r3
 801023a:	f7ff fec7 	bl	800ffcc <quatcompress>
 801023e:	4603      	mov	r3, r0
 8010240:	461a      	mov	r2, r3
 8010242:	4b1c      	ldr	r3, [pc, #112]	@ (80102b4 <compressState+0x1b8>)
 8010244:	615a      	str	r2, [r3, #20]

  float const deg2millirad = ((float)M_PI * 1000.0f) / 180.0f;
 8010246:	4b1d      	ldr	r3, [pc, #116]	@ (80102bc <compressState+0x1c0>)
 8010248:	617b      	str	r3, [r7, #20]
  stateCompressed.rateRoll = sensorData.gyro.x * deg2millirad;
 801024a:	4b1d      	ldr	r3, [pc, #116]	@ (80102c0 <compressState+0x1c4>)
 801024c:	ed93 7a03 	vldr	s14, [r3, #12]
 8010250:	edd7 7a05 	vldr	s15, [r7, #20]
 8010254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801025c:	ee17 3a90 	vmov	r3, s15
 8010260:	b21a      	sxth	r2, r3
 8010262:	4b14      	ldr	r3, [pc, #80]	@ (80102b4 <compressState+0x1b8>)
 8010264:	831a      	strh	r2, [r3, #24]
  stateCompressed.ratePitch = -sensorData.gyro.y * deg2millirad;
 8010266:	4b16      	ldr	r3, [pc, #88]	@ (80102c0 <compressState+0x1c4>)
 8010268:	edd3 7a04 	vldr	s15, [r3, #16]
 801026c:	eeb1 7a67 	vneg.f32	s14, s15
 8010270:	edd7 7a05 	vldr	s15, [r7, #20]
 8010274:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801027c:	ee17 3a90 	vmov	r3, s15
 8010280:	b21a      	sxth	r2, r3
 8010282:	4b0c      	ldr	r3, [pc, #48]	@ (80102b4 <compressState+0x1b8>)
 8010284:	835a      	strh	r2, [r3, #26]
  stateCompressed.rateYaw = sensorData.gyro.z * deg2millirad;
 8010286:	4b0e      	ldr	r3, [pc, #56]	@ (80102c0 <compressState+0x1c4>)
 8010288:	ed93 7a05 	vldr	s14, [r3, #20]
 801028c:	edd7 7a05 	vldr	s15, [r7, #20]
 8010290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010298:	ee17 3a90 	vmov	r3, s15
 801029c:	b21a      	sxth	r2, r3
 801029e:	4b05      	ldr	r3, [pc, #20]	@ (80102b4 <compressState+0x1b8>)
 80102a0:	839a      	strh	r2, [r3, #28]
}
 80102a2:	bf00      	nop
 80102a4:	3718      	adds	r7, #24
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}
 80102aa:	bf00      	nop
 80102ac:	20008b30 	.word	0x20008b30
 80102b0:	447a0000 	.word	0x447a0000
 80102b4:	20008ba0 	.word	0x20008ba0
 80102b8:	411cf5c3 	.word	0x411cf5c3
 80102bc:	418ba058 	.word	0x418ba058
 80102c0:	20008af8 	.word	0x20008af8

080102c4 <compressSetpoint>:

static void compressSetpoint()
{
 80102c4:	b480      	push	{r7}
 80102c6:	af00      	add	r7, sp, #0
  setpointCompressed.x = setpoint.position.x * 1000.0f;
 80102c8:	4b41      	ldr	r3, [pc, #260]	@ (80103d0 <compressSetpoint+0x10c>)
 80102ca:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80102ce:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 80103d4 <compressSetpoint+0x110>
 80102d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102da:	ee17 3a90 	vmov	r3, s15
 80102de:	b21a      	sxth	r2, r3
 80102e0:	4b3d      	ldr	r3, [pc, #244]	@ (80103d8 <compressSetpoint+0x114>)
 80102e2:	801a      	strh	r2, [r3, #0]
  setpointCompressed.y = setpoint.position.y * 1000.0f;
 80102e4:	4b3a      	ldr	r3, [pc, #232]	@ (80103d0 <compressSetpoint+0x10c>)
 80102e6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80102ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80103d4 <compressSetpoint+0x110>
 80102ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80102f6:	ee17 3a90 	vmov	r3, s15
 80102fa:	b21a      	sxth	r2, r3
 80102fc:	4b36      	ldr	r3, [pc, #216]	@ (80103d8 <compressSetpoint+0x114>)
 80102fe:	805a      	strh	r2, [r3, #2]
  setpointCompressed.z = setpoint.position.z * 1000.0f;
 8010300:	4b33      	ldr	r3, [pc, #204]	@ (80103d0 <compressSetpoint+0x10c>)
 8010302:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8010306:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80103d4 <compressSetpoint+0x110>
 801030a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801030e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010312:	ee17 3a90 	vmov	r3, s15
 8010316:	b21a      	sxth	r2, r3
 8010318:	4b2f      	ldr	r3, [pc, #188]	@ (80103d8 <compressSetpoint+0x114>)
 801031a:	809a      	strh	r2, [r3, #4]

  setpointCompressed.vx = setpoint.velocity.x * 1000.0f;
 801031c:	4b2c      	ldr	r3, [pc, #176]	@ (80103d0 <compressSetpoint+0x10c>)
 801031e:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010322:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80103d4 <compressSetpoint+0x110>
 8010326:	ee67 7a87 	vmul.f32	s15, s15, s14
 801032a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801032e:	ee17 3a90 	vmov	r3, s15
 8010332:	b21a      	sxth	r2, r3
 8010334:	4b28      	ldr	r3, [pc, #160]	@ (80103d8 <compressSetpoint+0x114>)
 8010336:	80da      	strh	r2, [r3, #6]
  setpointCompressed.vy = setpoint.velocity.y * 1000.0f;
 8010338:	4b25      	ldr	r3, [pc, #148]	@ (80103d0 <compressSetpoint+0x10c>)
 801033a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801033e:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80103d4 <compressSetpoint+0x110>
 8010342:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010346:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801034a:	ee17 3a90 	vmov	r3, s15
 801034e:	b21a      	sxth	r2, r3
 8010350:	4b21      	ldr	r3, [pc, #132]	@ (80103d8 <compressSetpoint+0x114>)
 8010352:	811a      	strh	r2, [r3, #8]
  setpointCompressed.vz = setpoint.velocity.z * 1000.0f;
 8010354:	4b1e      	ldr	r3, [pc, #120]	@ (80103d0 <compressSetpoint+0x10c>)
 8010356:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 801035a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80103d4 <compressSetpoint+0x110>
 801035e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010362:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010366:	ee17 3a90 	vmov	r3, s15
 801036a:	b21a      	sxth	r2, r3
 801036c:	4b1a      	ldr	r3, [pc, #104]	@ (80103d8 <compressSetpoint+0x114>)
 801036e:	815a      	strh	r2, [r3, #10]

  setpointCompressed.ax = setpoint.acceleration.x * 1000.0f;
 8010370:	4b17      	ldr	r3, [pc, #92]	@ (80103d0 <compressSetpoint+0x10c>)
 8010372:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 8010376:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80103d4 <compressSetpoint+0x110>
 801037a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801037e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010382:	ee17 3a90 	vmov	r3, s15
 8010386:	b21a      	sxth	r2, r3
 8010388:	4b13      	ldr	r3, [pc, #76]	@ (80103d8 <compressSetpoint+0x114>)
 801038a:	819a      	strh	r2, [r3, #12]
  setpointCompressed.ay = setpoint.acceleration.y * 1000.0f;
 801038c:	4b10      	ldr	r3, [pc, #64]	@ (80103d0 <compressSetpoint+0x10c>)
 801038e:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 8010392:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80103d4 <compressSetpoint+0x110>
 8010396:	ee67 7a87 	vmul.f32	s15, s15, s14
 801039a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801039e:	ee17 3a90 	vmov	r3, s15
 80103a2:	b21a      	sxth	r2, r3
 80103a4:	4b0c      	ldr	r3, [pc, #48]	@ (80103d8 <compressSetpoint+0x114>)
 80103a6:	81da      	strh	r2, [r3, #14]
  setpointCompressed.az = setpoint.acceleration.z * 1000.0f;
 80103a8:	4b09      	ldr	r3, [pc, #36]	@ (80103d0 <compressSetpoint+0x10c>)
 80103aa:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 80103ae:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80103d4 <compressSetpoint+0x110>
 80103b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103ba:	ee17 3a90 	vmov	r3, s15
 80103be:	b21a      	sxth	r2, r3
 80103c0:	4b05      	ldr	r3, [pc, #20]	@ (80103d8 <compressSetpoint+0x114>)
 80103c2:	821a      	strh	r2, [r3, #16]
}
 80103c4:	bf00      	nop
 80103c6:	46bd      	mov	sp, r7
 80103c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103cc:	4770      	bx	lr
 80103ce:	bf00      	nop
 80103d0:	20008a84 	.word	0x20008a84
 80103d4:	447a0000 	.word	0x447a0000
 80103d8:	20008bc0 	.word	0x20008bc0

080103dc <stabilizerInit>:

void stabilizerInit(StateEstimatorType estimator)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af04      	add	r7, sp, #16
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
  if(isInit)
 80103e6:	4b13      	ldr	r3, [pc, #76]	@ (8010434 <stabilizerInit+0x58>)
 80103e8:	781b      	ldrb	r3, [r3, #0]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d11d      	bne.n	801042a <stabilizerInit+0x4e>
    return;
//  skip = 1;//JH

  sensorsInit();
 80103ee:	f7fd fb5f 	bl	800dab0 <sensorsInit>
//  skip = 1;// NJH

  stateEstimatorInit(estimator);
 80103f2:	79fb      	ldrb	r3, [r7, #7]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f000 fa47 	bl	8010888 <stateEstimatorInit>

//  controllerInit(ControllerTypeAutoSelect);
//  powerDistributionInit();
//  motorsInit(platformConfigGetMotorMapping());
//  collisionAvoidanceInit();
  estimatorType = stateEstimatorGetType();
 80103fa:	f000 fa91 	bl	8010920 <stateEstimatorGetType>
 80103fe:	4603      	mov	r3, r0
 8010400:	461a      	mov	r2, r3
 8010402:	4b0d      	ldr	r3, [pc, #52]	@ (8010438 <stabilizerInit+0x5c>)
 8010404:	701a      	strb	r2, [r3, #0]
//  skip = 1;
//  controllerType = controllerGetType();

  STATIC_MEM_TASK_CREATE(stabilizerTask, stabilizerTask, STABILIZER_TASK_NAME, NULL, STABILIZER_TASK_PRI);
 8010406:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 801040a:	461a      	mov	r2, r3
 801040c:	4b0b      	ldr	r3, [pc, #44]	@ (801043c <stabilizerInit+0x60>)
 801040e:	9302      	str	r3, [sp, #8]
 8010410:	4b0b      	ldr	r3, [pc, #44]	@ (8010440 <stabilizerInit+0x64>)
 8010412:	9301      	str	r3, [sp, #4]
 8010414:	2305      	movs	r3, #5
 8010416:	9300      	str	r3, [sp, #0]
 8010418:	2300      	movs	r3, #0
 801041a:	490a      	ldr	r1, [pc, #40]	@ (8010444 <stabilizerInit+0x68>)
 801041c:	480a      	ldr	r0, [pc, #40]	@ (8010448 <stabilizerInit+0x6c>)
 801041e:	f7f6 fddb 	bl	8006fd8 <xTaskCreateStatic>

  isInit = true;
 8010422:	4b04      	ldr	r3, [pc, #16]	@ (8010434 <stabilizerInit+0x58>)
 8010424:	2201      	movs	r2, #1
 8010426:	701a      	strb	r2, [r3, #0]
 8010428:	e000      	b.n	801042c <stabilizerInit+0x50>
    return;
 801042a:	bf00      	nop
}
 801042c:	3708      	adds	r7, #8
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
 8010432:	bf00      	nop
 8010434:	20008a7e 	.word	0x20008a7e
 8010438:	20008b80 	.word	0x20008b80
 801043c:	10001da4 	.word	0x10001da4
 8010440:	20008bd4 	.word	0x20008bd4
 8010444:	0801e8c0 	.word	0x0801e8c0
 8010448:	080104ad 	.word	0x080104ad

0801044c <stabilizerTest>:

bool stabilizerTest(void)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
  bool pass = true;
 8010452:	2301      	movs	r3, #1
 8010454:	71fb      	strb	r3, [r7, #7]

//  pass &= sensorsTest();
  pass &= stateEstimatorTest();
 8010456:	f000 faad 	bl	80109b4 <stateEstimatorTest>
 801045a:	4603      	mov	r3, r0
 801045c:	461a      	mov	r2, r3
 801045e:	79fb      	ldrb	r3, [r7, #7]
 8010460:	4013      	ands	r3, r2
 8010462:	2b00      	cmp	r3, #0
 8010464:	bf14      	ite	ne
 8010466:	2301      	movne	r3, #1
 8010468:	2300      	moveq	r3, #0
 801046a:	71fb      	strb	r3, [r7, #7]
//  pass &= controllerTest();
//  pass &= powerDistributionTest();
//  pass &= motorsTest();
//  pass &= collisionAvoidanceTest();

  return pass;
 801046c:	79fb      	ldrb	r3, [r7, #7]
}
 801046e:	4618      	mov	r0, r3
 8010470:	3708      	adds	r7, #8
 8010472:	46bd      	mov	sp, r7
 8010474:	bd80      	pop	{r7, pc}
	...

08010478 <updateStateEstimatorAndControllerTypes>:
//  motorsSetRatio(MOTOR_M2, motorPwm->motors.m2);
//  motorsSetRatio(MOTOR_M3, motorPwm->motors.m3);
//  motorsSetRatio(MOTOR_M4, motorPwm->motors.m4);
//}

static void updateStateEstimatorAndControllerTypes() {
 8010478:	b580      	push	{r7, lr}
 801047a:	af00      	add	r7, sp, #0
  if (stateEstimatorGetType() != estimatorType) {
 801047c:	f000 fa50 	bl	8010920 <stateEstimatorGetType>
 8010480:	4603      	mov	r3, r0
 8010482:	461a      	mov	r2, r3
 8010484:	4b08      	ldr	r3, [pc, #32]	@ (80104a8 <updateStateEstimatorAndControllerTypes+0x30>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	429a      	cmp	r2, r3
 801048a:	d00a      	beq.n	80104a2 <updateStateEstimatorAndControllerTypes+0x2a>
    stateEstimatorSwitchTo(estimatorType);
 801048c:	4b06      	ldr	r3, [pc, #24]	@ (80104a8 <updateStateEstimatorAndControllerTypes+0x30>)
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	4618      	mov	r0, r3
 8010492:	f000 fa19 	bl	80108c8 <stateEstimatorSwitchTo>
    estimatorType = stateEstimatorGetType();
 8010496:	f000 fa43 	bl	8010920 <stateEstimatorGetType>
 801049a:	4603      	mov	r3, r0
 801049c:	461a      	mov	r2, r3
 801049e:	4b02      	ldr	r3, [pc, #8]	@ (80104a8 <updateStateEstimatorAndControllerTypes+0x30>)
 80104a0:	701a      	strb	r2, [r3, #0]

//  if (controllerGetType() != controllerType) {
//    controllerInit(controllerType);
//    controllerType = controllerGetType();
//  }
}
 80104a2:	bf00      	nop
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20008b80 	.word	0x20008b80

080104ac <stabilizerTask>:
/* The stabilizer loop runs at 1kHz. It is the
 * responsibility of the different functions to run slower by skipping call
 * (ie. returning without modifying the output structure).
 */
static void stabilizerTask(void* param)
{
 80104ac:	b580      	push	{r7, lr}
 80104ae:	b086      	sub	sp, #24
 80104b0:	af02      	add	r7, sp, #8
 80104b2:	6078      	str	r0, [r7, #4]
  stabilizerStep_t stabilizerStep;
  uint32_t lastWakeTime;
  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);
 80104b4:	2103      	movs	r1, #3
 80104b6:	2000      	movs	r0, #0
 80104b8:	f7f7 f9ca 	bl	8007850 <vTaskSetApplicationTaskTag>

  //Wait for the system to be fully started to start stabilization loop
  systemWaitStart();
 80104bc:	f000 f950 	bl	8010760 <systemWaitStart>

//  DEBUG_PRINT("Wait for sensor calibration...\n");

  // Wait for sensors to be calibrated
  lastWakeTime = xTaskGetTickCount();
 80104c0:	f7f7 f8f8 	bl	80076b4 <xTaskGetTickCount>
 80104c4:	4603      	mov	r3, r0
 80104c6:	60bb      	str	r3, [r7, #8]
  while(!sensorsAreCalibrated()) {
 80104c8:	e005      	b.n	80104d6 <stabilizerTask+0x2a>
    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));
 80104ca:	f107 0308 	add.w	r3, r7, #8
 80104ce:	2101      	movs	r1, #1
 80104d0:	4618      	mov	r0, r3
 80104d2:	f7f6 ff29 	bl	8007328 <vTaskDelayUntil>
  while(!sensorsAreCalibrated()) {
 80104d6:	f7fd fb0d 	bl	800daf4 <sensorsAreCalibrated>
 80104da:	4603      	mov	r3, r0
 80104dc:	f083 0301 	eor.w	r3, r3, #1
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1f1      	bne.n	80104ca <stabilizerTask+0x1e>
  }
  // Initialize stabilizerStep to something else than 0
  stabilizerStep = 1;
 80104e6:	2301      	movs	r3, #1
 80104e8:	60fb      	str	r3, [r7, #12]


//  DEBUG_PRINT("Starting stabilizer loop\n");
  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997, 1003, 1);
 80104ea:	f7f7 f8e3 	bl	80076b4 <xTaskGetTickCount>
 80104ee:	4601      	mov	r1, r0
 80104f0:	2301      	movs	r3, #1
 80104f2:	9301      	str	r3, [sp, #4]
 80104f4:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 80104f8:	9300      	str	r3, [sp, #0]
 80104fa:	f240 33e5 	movw	r3, #997	@ 0x3e5
 80104fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010502:	480d      	ldr	r0, [pc, #52]	@ (8010538 <stabilizerTask+0x8c>)
 8010504:	f005 fc55 	bl	8015db2 <rateSupervisorInit>

  while(1) {
    // The sensor should unlock at 1kHz
    sensorsWaitDataReady();
 8010508:	f7fd fb10 	bl	800db2c <sensorsWaitDataReady>

    // update sensorData struct (for logging variables)
    sensorsAcquire(&sensorData);
 801050c:	480b      	ldr	r0, [pc, #44]	@ (801053c <stabilizerTask+0x90>)
 801050e:	f7fd fafd 	bl	800db0c <sensorsAcquire>

//    if (healthShallWeRunTest()) {
//      healthRunTests(&sensorData);
//    }
//    else {
      updateStateEstimatorAndControllerTypes();
 8010512:	f7ff ffb1 	bl	8010478 <updateStateEstimatorAndControllerTypes>

      stateEstimator(&state, stabilizerStep);
 8010516:	68f9      	ldr	r1, [r7, #12]
 8010518:	4809      	ldr	r0, [pc, #36]	@ (8010540 <stabilizerTask+0x94>)
 801051a:	f000 fa61 	bl	80109e0 <stateEstimator>
//      } else {
//        motorsStop();
//      }

      // Compute compressed log formats
      compressState();
 801051e:	f7ff fded 	bl	80100fc <compressState>
      compressSetpoint();
 8010522:	f7ff fecf 	bl	80102c4 <compressSetpoint>
          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer
          && RATE_DO_EXECUTE(usddeckFrequency(), stabilizerStep)) {
        usddeckTriggerLogging();
      }
#endif
      calcSensorToOutputLatency(&sensorData);
 8010526:	4805      	ldr	r0, [pc, #20]	@ (801053c <stabilizerTask+0x90>)
 8010528:	f7ff fdd2 	bl	80100d0 <calcSensorToOutputLatency>
      stabilizerStep++;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	3301      	adds	r3, #1
 8010530:	60fb      	str	r3, [r7, #12]
    sensorsWaitDataReady();
 8010532:	bf00      	nop
 8010534:	e7e8      	b.n	8010508 <stabilizerTask+0x5c>
 8010536:	bf00      	nop
 8010538:	20008b84 	.word	0x20008b84
 801053c:	20008af8 	.word	0x20008af8
 8010540:	20008b30 	.word	0x20008b30

08010544 <vApplicationGetIdleTaskMemory>:
 * used by the Idle task.
 */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 8010544:	b480      	push	{r7}
 8010546:	b085      	sub	sp, #20
 8010548:	af00      	add	r7, sp, #0
 801054a:	60f8      	str	r0, [r7, #12]
 801054c:	60b9      	str	r1, [r7, #8]
 801054e:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xIdleTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4a07      	ldr	r2, [pc, #28]	@ (8010570 <vApplicationGetIdleTaskMemory+0x2c>)
 8010554:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	4a06      	ldr	r2, [pc, #24]	@ (8010574 <vApplicationGetIdleTaskMemory+0x30>)
 801055a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2296      	movs	r2, #150	@ 0x96
 8010560:	601a      	str	r2, [r3, #0]
}
 8010562:	bf00      	nop
 8010564:	3714      	adds	r7, #20
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr
 801056e:	bf00      	nop
 8010570:	10001e08 	.word	0x10001e08
 8010574:	10001e6c 	.word	0x10001e6c

08010578 <vApplicationGetTimerTaskMemory>:
 * to provide the memory that is used by the Timer service task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 8010578:	b480      	push	{r7}
 801057a:	b085      	sub	sp, #20
 801057c:	af00      	add	r7, sp, #0
 801057e:	60f8      	str	r0, [r7, #12]
 8010580:	60b9      	str	r1, [r7, #8]
 8010582:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xTimerTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	4a07      	ldr	r2, [pc, #28]	@ (80105a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8010588:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	4a06      	ldr	r2, [pc, #24]	@ (80105a8 <vApplicationGetTimerTaskMemory+0x30>)
 801058e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8010596:	601a      	str	r2, [r3, #0]
}
 8010598:	bf00      	nop
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr
 80105a4:	100020c4 	.word	0x100020c4
 80105a8:	10002128 	.word	0x10002128

080105ac <systemLaunch>:

static void systemTask(void *arg);


void systemLaunch(void)
{
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 80105b2:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80105b6:	461a      	mov	r2, r3
 80105b8:	4b06      	ldr	r3, [pc, #24]	@ (80105d4 <systemLaunch+0x28>)
 80105ba:	9302      	str	r3, [sp, #8]
 80105bc:	4b06      	ldr	r3, [pc, #24]	@ (80105d8 <systemLaunch+0x2c>)
 80105be:	9301      	str	r3, [sp, #4]
 80105c0:	2302      	movs	r3, #2
 80105c2:	9300      	str	r3, [sp, #0]
 80105c4:	2300      	movs	r3, #0
 80105c6:	4905      	ldr	r1, [pc, #20]	@ (80105dc <systemLaunch+0x30>)
 80105c8:	4805      	ldr	r0, [pc, #20]	@ (80105e0 <systemLaunch+0x34>)
 80105ca:	f7f6 fd05 	bl	8006fd8 <xTaskCreateStatic>
}
 80105ce:	bf00      	nop
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	10002a88 	.word	0x10002a88
 80105d8:	200092e0 	.word	0x200092e0
 80105dc:	0801e8cc 	.word	0x0801e8cc
 80105e0:	08010659 	.word	0x08010659

080105e4 <systemInit>:
void systemInit(void)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	af00      	add	r7, sp, #0

	if (isInit) return;
 80105e8:	4b0c      	ldr	r3, [pc, #48]	@ (801061c <systemInit+0x38>)
 80105ea:	781b      	ldrb	r3, [r3, #0]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d113      	bne.n	8010618 <systemInit+0x34>

	canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 80105f0:	490b      	ldr	r1, [pc, #44]	@ (8010620 <systemInit+0x3c>)
 80105f2:	2001      	movs	r0, #1
 80105f4:	f7f5 ff27 	bl	8006446 <xQueueCreateMutexStatic>
 80105f8:	4603      	mov	r3, r0
 80105fa:	4a0a      	ldr	r2, [pc, #40]	@ (8010624 <systemInit+0x40>)
 80105fc:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 80105fe:	4b09      	ldr	r3, [pc, #36]	@ (8010624 <systemInit+0x40>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f04f 31ff 	mov.w	r1, #4294967295
 8010606:	4618      	mov	r0, r3
 8010608:	f7f6 fa56 	bl	8006ab8 <xQueueSemaphoreTake>

	workerInit();
 801060c:	f000 f8f0 	bl	80107f0 <workerInit>

	isInit = true;
 8010610:	4b02      	ldr	r3, [pc, #8]	@ (801061c <systemInit+0x38>)
 8010612:	2201      	movs	r2, #1
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	e000      	b.n	801061a <systemInit+0x36>
	if (isInit) return;
 8010618:	bf00      	nop
}
 801061a:	bd80      	pop	{r7, pc}
 801061c:	200092dc 	.word	0x200092dc
 8010620:	20009794 	.word	0x20009794
 8010624:	20009790 	.word	0x20009790

08010628 <systemTest>:
bool systemTest(void)
{
 8010628:	b580      	push	{r7, lr}
 801062a:	b082      	sub	sp, #8
 801062c:	af00      	add	r7, sp, #0
	bool pass=isInit;
 801062e:	4b09      	ldr	r3, [pc, #36]	@ (8010654 <systemTest+0x2c>)
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	71fb      	strb	r3, [r7, #7]
	pass &= workerTest();
 8010634:	f000 f8fa 	bl	801082c <workerTest>
 8010638:	4603      	mov	r3, r0
 801063a:	461a      	mov	r2, r3
 801063c:	79fb      	ldrb	r3, [r7, #7]
 801063e:	4013      	ands	r3, r2
 8010640:	2b00      	cmp	r3, #0
 8010642:	bf14      	ite	ne
 8010644:	2301      	movne	r3, #1
 8010646:	2300      	moveq	r3, #0
 8010648:	71fb      	strb	r3, [r7, #7]

	return pass;
 801064a:	79fb      	ldrb	r3, [r7, #7]
}
 801064c:	4618      	mov	r0, r3
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	200092dc 	.word	0x200092dc

08010658 <systemTask>:
void systemTask(void *arg) {
 8010658:	b580      	push	{r7, lr}
 801065a:	b084      	sub	sp, #16
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
	bool pass = true;
 8010660:	2301      	movs	r3, #1
 8010662:	73fb      	strb	r3, [r7, #15]
//	counter += 1; // JUMP HERE
	ledInit();
 8010664:	f7fb fe66 	bl	800c334 <ledInit>
//		vTaskDelay(1);
//	}
//	HAL_Init();
	//JH

	usecTimerInit();
 8010668:	f7fe fdcc 	bl	800f204 <usecTimerInit>
	GPIO_Init();
 801066c:	f7fb fd06 	bl	800c07c <GPIO_Init>
	TIM3_DMA_Init();
 8010670:	f7fc fc26 	bl	800cec0 <TIM3_DMA_Init>
	uart_dma_init();
 8010674:	f7fc fe80 	bl	800d378 <uart_dma_init>
	TIM4_Init();
 8010678:	f7fc fc5a 	bl	800cf30 <TIM4_Init>
	TIM3_Init();
 801067c:	f7fc fa48 	bl	800cb10 <TIM3_Init>
	spi1_init();
 8010680:	f7fc f8e4 	bl	800c84c <spi1_init>
	I2C2_Init();
 8010684:	f7fb fd58 	bl	800c138 <I2C2_Init>
	MX_USART1_UART_Init();
 8010688:	f7fc fcc8 	bl	800d01c <MX_USART1_UART_Init>

	hal_dshot_init(DSHOT600);
 801068c:	2002      	movs	r0, #2
 801068e:	f7fb faf4 	bl	800bc7a <hal_dshot_init>
	vTaskDelay(10);
 8010692:	200a      	movs	r0, #10
 8010694:	f7f6 febe 	bl	8007414 <vTaskDelay>
	hal_ibus_init();
 8010698:	f7fb f8dc 	bl	800b854 <hal_ibus_init>
//	flage_rc = 1;
	// JH
	vTaskDelay(10);
 801069c:	200a      	movs	r0, #10
 801069e:	f7f6 feb9 	bl	8007414 <vTaskDelay>
//	if(MPU6500_Init(&imu) == 0){
//		imu_flage = 1;
//		//JH
//		for(;;);
//	}
	HAL_TIM_Base_Start_IT(&htim4);
 80106a2:	4827      	ldr	r0, [pc, #156]	@ (8010740 <systemTask+0xe8>)
 80106a4:	f7f3 ffb6 	bl	8004614 <HAL_TIM_Base_Start_IT>
//	MX_UART4_Init();
//	MX_USART1_UART_Init();
//	MX_USART2_UART_Init();
//	MX_USART3_UART_Init();

	systemInit();
 80106a8:	f7ff ff9c 	bl	80105e4 <systemInit>
//	counter +=1 ; // JUMP HERE

	StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 80106ac:	2300      	movs	r3, #0
 80106ae:	73bb      	strb	r3, [r7, #14]
	//Macro-Work when we defind its
#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 1;
	estimatorKalmanTaskInit();
 80106b0:	f000 faf2 	bl	8010c98 <estimatorKalmanTaskInit>
//	counter = 2;
	//JH
#endif
	zRanger2Init();
 80106b4:	f7f8 fdea 	bl	800928c <zRanger2Init>
	//Test LED
	ledblink_test();
 80106b8:	f7fd f98c 	bl	800d9d4 <ledblink_test>
	motors_test();
 80106bc:	f7fd f9b4 	bl	800da28 <motors_test>
	rc_test();
 80106c0:	f7fd f9d8 	bl	800da74 <rc_test>
	imu_test();
 80106c4:	f7fd f93a 	bl	800d93c <imu_test>
	qmc_test();
 80106c8:	f7fd f95e 	bl	800d988 <qmc_test>
	attitude_test();
 80106cc:	f7fd f908 	bl	800d8e0 <attitude_test>
//	counter +=1; // Not JUMP HERE
//	flowTofInit();
//	tofInit();

//	estimator = deckGetRequiredEstimator();
	stabilizerInit(estimator);
 80106d0:	7bbb      	ldrb	r3, [r7, #14]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7ff fe82 	bl	80103dc <stabilizerInit>
//	counter +=1 ;// NJH
	if (systemTest() == false) {
 80106d8:	f7ff ffa6 	bl	8010628 <systemTest>
 80106dc:	4603      	mov	r3, r0
 80106de:	f083 0301 	eor.w	r3, r3, #1
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d001      	beq.n	80106ec <systemTask+0x94>
		pass = false;
 80106e8:	2300      	movs	r3, #0
 80106ea:	73fb      	strb	r3, [r7, #15]
	}

	if ( stabilizerTest() == false )
 80106ec:	f7ff feae 	bl	801044c <stabilizerTest>
 80106f0:	4603      	mov	r3, r0
 80106f2:	f083 0301 	eor.w	r3, r3, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d001      	beq.n	8010700 <systemTask+0xa8>
	{
		pass = false;
 80106fc:	2300      	movs	r3, #0
 80106fe:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 3;
	//NJH
if (estimatorKalmanTaskTest() == false) {
 8010700:	f000 fb12 	bl	8010d28 <estimatorKalmanTaskTest>
 8010704:	4603      	mov	r3, r0
 8010706:	f083 0301 	eor.w	r3, r3, #1
 801070a:	b2db      	uxtb	r3, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <systemTask+0xbc>
//	counter = 1;
	//NJH
  pass = false;
 8010710:	2300      	movs	r3, #0
 8010712:	73fb      	strb	r3, [r7, #15]
}
#endif

	vTaskDelay(100);
 8010714:	2064      	movs	r0, #100	@ 0x64
 8010716:	f7f6 fe7d 	bl	8007414 <vTaskDelay>
	ledSet(1);
 801071a:	2001      	movs	r0, #1
 801071c:	f7fb fe48 	bl	800c3b0 <ledSet>
	if (pass) {
 8010720:	7bfb      	ldrb	r3, [r7, #15]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d001      	beq.n	801072a <systemTask+0xd2>
		systemStart();
 8010726:	f000 f80d 	bl	8010744 <systemStart>
	}
	vTaskDelay(100);
 801072a:	2064      	movs	r0, #100	@ 0x64
 801072c:	f7f6 fe72 	bl	8007414 <vTaskDelay>
	workerLoop();
 8010730:	f000 f88c 	bl	801084c <workerLoop>
	while(1)
	{

		vTaskDelay(1000);
 8010734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8010738:	f7f6 fe6c 	bl	8007414 <vTaskDelay>
 801073c:	e7fa      	b.n	8010734 <systemTask+0xdc>
 801073e:	bf00      	nop
 8010740:	200080e4 	.word	0x200080e4

08010744 <systemStart>:
	}
}
void systemStart()
{
 8010744:	b580      	push	{r7, lr}
 8010746:	af00      	add	r7, sp, #0
	xSemaphoreGive(canStartMutex);
 8010748:	4b04      	ldr	r3, [pc, #16]	@ (801075c <systemStart+0x18>)
 801074a:	6818      	ldr	r0, [r3, #0]
 801074c:	2300      	movs	r3, #0
 801074e:	2200      	movs	r2, #0
 8010750:	2100      	movs	r1, #0
 8010752:	f7f5 fe93 	bl	800647c <xQueueGenericSend>
}
 8010756:	bf00      	nop
 8010758:	bd80      	pop	{r7, pc}
 801075a:	bf00      	nop
 801075c:	20009790 	.word	0x20009790

08010760 <systemWaitStart>:
void systemWaitStart(void)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	af00      	add	r7, sp, #0
//	flage = 2;
	while (!isInit) vTaskDelay(2);
 8010764:	e002      	b.n	801076c <systemWaitStart+0xc>
 8010766:	2002      	movs	r0, #2
 8010768:	f7f6 fe54 	bl	8007414 <vTaskDelay>
 801076c:	4b0b      	ldr	r3, [pc, #44]	@ (801079c <systemWaitStart+0x3c>)
 801076e:	781b      	ldrb	r3, [r3, #0]
 8010770:	f083 0301 	eor.w	r3, r3, #1
 8010774:	b2db      	uxtb	r3, r3
 8010776:	2b00      	cmp	r3, #0
 8010778:	d1f5      	bne.n	8010766 <systemWaitStart+0x6>
//	flage = 2; // nan JUMP HERE
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 801077a:	4b09      	ldr	r3, [pc, #36]	@ (80107a0 <systemWaitStart+0x40>)
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f04f 31ff 	mov.w	r1, #4294967295
 8010782:	4618      	mov	r0, r3
 8010784:	f7f6 f998 	bl	8006ab8 <xQueueSemaphoreTake>
	xSemaphoreGive(canStartMutex);
 8010788:	4b05      	ldr	r3, [pc, #20]	@ (80107a0 <systemWaitStart+0x40>)
 801078a:	6818      	ldr	r0, [r3, #0]
 801078c:	2300      	movs	r3, #0
 801078e:	2200      	movs	r2, #0
 8010790:	2100      	movs	r1, #0
 8010792:	f7f5 fe73 	bl	800647c <xQueueGenericSend>
}
 8010796:	bf00      	nop
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	200092dc 	.word	0x200092dc
 80107a0:	20009790 	.word	0x20009790

080107a4 <vApplicationIdleHook>:


void vApplicationIdleHook(void) {
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0

	static uint32_t tickOfLatestWatchdogReset = M2T(0);

	portTickType tickCount = xTaskGetTickCount();
 80107aa:	f7f6 ff83 	bl	80076b4 <xTaskGetTickCount>
 80107ae:	6078      	str	r0, [r7, #4]

	if (tickCount - tickOfLatestWatchdogReset > M2T(80)) {
 80107b0:	4b06      	ldr	r3, [pc, #24]	@ (80107cc <vApplicationIdleHook+0x28>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	1ad3      	subs	r3, r2, r3
 80107b8:	2b50      	cmp	r3, #80	@ 0x50
 80107ba:	d902      	bls.n	80107c2 <vApplicationIdleHook+0x1e>
		tickOfLatestWatchdogReset = tickCount;
 80107bc:	4a03      	ldr	r2, [pc, #12]	@ (80107cc <vApplicationIdleHook+0x28>)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	6013      	str	r3, [r2, #0]
//		watchdogReset();
	}

}
 80107c2:	bf00      	nop
 80107c4:	3708      	adds	r7, #8
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}
 80107ca:	bf00      	nop
 80107cc:	200097e4 	.word	0x200097e4

080107d0 <vApplicationStackOverflowHook>:

#if ( configCHECK_FOR_STACK_OVERFLOW > 0 )

    void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                        char * pcTaskName )
    {
 80107d0:	b480      	push	{r7}
 80107d2:	b083      	sub	sp, #12
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
 80107d8:	6039      	str	r1, [r7, #0]
        /* Check pcTaskName for the name of the offending task,
         * or pxCurrentTCB if pcTaskName has itself been corrupted. */
        ( void ) xTask;
        ( void ) pcTaskName;
    }
 80107da:	bf00      	nop
 80107dc:	370c      	adds	r7, #12
 80107de:	46bd      	mov	sp, r7
 80107e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e4:	4770      	bx	lr

080107e6 <vApplicationMallocFailedHook>:

#endif /* #if ( configCHECK_FOR_STACK_OVERFLOW > 0 ) */

void vApplicationMallocFailedHook( void ){
 80107e6:	b480      	push	{r7}
 80107e8:	af00      	add	r7, sp, #0
	while(1);
 80107ea:	bf00      	nop
 80107ec:	e7fd      	b.n	80107ea <vApplicationMallocFailedHook+0x4>
	...

080107f0 <workerInit>:
static xQueueHandle workerQueue;

STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af02      	add	r7, sp, #8
  if (workerQueue)
 80107f6:	4b0a      	ldr	r3, [pc, #40]	@ (8010820 <workerInit+0x30>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d10d      	bne.n	801081a <workerInit+0x2a>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 80107fe:	2305      	movs	r3, #5
 8010800:	4618      	mov	r0, r3
 8010802:	2308      	movs	r3, #8
 8010804:	4619      	mov	r1, r3
 8010806:	2300      	movs	r3, #0
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	4b06      	ldr	r3, [pc, #24]	@ (8010824 <workerInit+0x34>)
 801080c:	4a06      	ldr	r2, [pc, #24]	@ (8010828 <workerInit+0x38>)
 801080e:	f7f5 fd21 	bl	8006254 <xQueueGenericCreateStatic>
 8010812:	4603      	mov	r3, r0
 8010814:	4a02      	ldr	r2, [pc, #8]	@ (8010820 <workerInit+0x30>)
 8010816:	6013      	str	r3, [r2, #0]
 8010818:	e000      	b.n	801081c <workerInit+0x2c>
    return;
 801081a:	bf00      	nop

}
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	200097e8 	.word	0x200097e8
 8010824:	10002b14 	.word	0x10002b14
 8010828:	10002aec 	.word	0x10002aec

0801082c <workerTest>:

bool workerTest()
{
 801082c:	b480      	push	{r7}
 801082e:	af00      	add	r7, sp, #0
  return (workerQueue != NULL);
 8010830:	4b05      	ldr	r3, [pc, #20]	@ (8010848 <workerTest+0x1c>)
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	2b00      	cmp	r3, #0
 8010836:	bf14      	ite	ne
 8010838:	2301      	movne	r3, #1
 801083a:	2300      	moveq	r3, #0
 801083c:	b2db      	uxtb	r3, r3
}
 801083e:	4618      	mov	r0, r3
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr
 8010848:	200097e8 	.word	0x200097e8

0801084c <workerLoop>:

void workerLoop()
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b082      	sub	sp, #8
 8010850:	af00      	add	r7, sp, #0
  struct worker_work work;

  if (!workerQueue)
 8010852:	4b0c      	ldr	r3, [pc, #48]	@ (8010884 <workerLoop+0x38>)
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d00f      	beq.n	801087a <workerLoop+0x2e>
    return;

  while (1)
  {
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 801085a:	4b0a      	ldr	r3, [pc, #40]	@ (8010884 <workerLoop+0x38>)
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	4639      	mov	r1, r7
 8010860:	f04f 32ff 	mov.w	r2, #4294967295
 8010864:	4618      	mov	r0, r3
 8010866:	f7f6 f847 	bl	80068f8 <xQueueReceive>

    if (work.function)
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d0f4      	beq.n	801085a <workerLoop+0xe>
      work.function(work.arg);
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	687a      	ldr	r2, [r7, #4]
 8010874:	4610      	mov	r0, r2
 8010876:	4798      	blx	r3
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 8010878:	e7ef      	b.n	801085a <workerLoop+0xe>
    return;
 801087a:	bf00      	nop
  }
}
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
 8010882:	bf00      	nop
 8010884:	200097e8 	.word	0x200097e8

08010888 <stateEstimatorInit>:
        .name = "OutOfTree",
    },
#endif
};

void stateEstimatorInit(StateEstimatorType estimator) {
 8010888:	b580      	push	{r7, lr}
 801088a:	b084      	sub	sp, #16
 801088c:	af02      	add	r7, sp, #8
 801088e:	4603      	mov	r3, r0
 8010890:	71fb      	strb	r3, [r7, #7]
  measurementsQueue = STATIC_MEM_QUEUE_CREATE(measurementsQueue);
 8010892:	2314      	movs	r3, #20
 8010894:	4618      	mov	r0, r3
 8010896:	2330      	movs	r3, #48	@ 0x30
 8010898:	4619      	mov	r1, r3
 801089a:	2300      	movs	r3, #0
 801089c:	9300      	str	r3, [sp, #0]
 801089e:	4b07      	ldr	r3, [pc, #28]	@ (80108bc <stateEstimatorInit+0x34>)
 80108a0:	4a07      	ldr	r2, [pc, #28]	@ (80108c0 <stateEstimatorInit+0x38>)
 80108a2:	f7f5 fcd7 	bl	8006254 <xQueueGenericCreateStatic>
 80108a6:	4603      	mov	r3, r0
 80108a8:	4a06      	ldr	r2, [pc, #24]	@ (80108c4 <stateEstimatorInit+0x3c>)
 80108aa:	6013      	str	r3, [r2, #0]
  stateEstimatorSwitchTo(estimator);
 80108ac:	79fb      	ldrb	r3, [r7, #7]
 80108ae:	4618      	mov	r0, r3
 80108b0:	f000 f80a 	bl	80108c8 <stateEstimatorSwitchTo>
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	10002f24 	.word	0x10002f24
 80108c0:	10002b64 	.word	0x10002b64
 80108c4:	200097f0 	.word	0x200097f0

080108c8 <stateEstimatorSwitchTo>:

void stateEstimatorSwitchTo(StateEstimatorType estimator) {
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b084      	sub	sp, #16
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	4603      	mov	r3, r0
 80108d0:	71fb      	strb	r3, [r7, #7]
  if (estimator < 0 || estimator >= StateEstimatorType_COUNT) {
 80108d2:	79fb      	ldrb	r3, [r7, #7]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d81c      	bhi.n	8010912 <stateEstimatorSwitchTo+0x4a>
    return;
  }

  StateEstimatorType newEstimator = estimator;
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	73fb      	strb	r3, [r7, #15]

  if (StateEstimatorTypeAutoSelect == newEstimator) {
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d101      	bne.n	80108e6 <stateEstimatorSwitchTo+0x1e>
    newEstimator = DEFAULT_ESTIMATOR;
 80108e2:	2301      	movs	r3, #1
 80108e4:	73fb      	strb	r3, [r7, #15]
    #define ESTIMATOR StateEstimatorTypeComplementary
  #else
    #define ESTIMATOR StateEstimatorTypeAutoSelect
  #endif

  StateEstimatorType forcedEstimator = ESTIMATOR;
 80108e6:	2300      	movs	r3, #0
 80108e8:	73bb      	strb	r3, [r7, #14]
  if (forcedEstimator != StateEstimatorTypeAutoSelect) {
 80108ea:	7bbb      	ldrb	r3, [r7, #14]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d001      	beq.n	80108f4 <stateEstimatorSwitchTo+0x2c>
//    DEBUG_PRINT("Estimator type forced\n");
    newEstimator = forcedEstimator;
 80108f0:	7bbb      	ldrb	r3, [r7, #14]
 80108f2:	73fb      	strb	r3, [r7, #15]
  }

  initEstimator(newEstimator);
 80108f4:	7bfb      	ldrb	r3, [r7, #15]
 80108f6:	4618      	mov	r0, r3
 80108f8:	f000 f81e 	bl	8010938 <initEstimator>
  StateEstimatorType previousEstimator = currentEstimator;
 80108fc:	4b07      	ldr	r3, [pc, #28]	@ (801091c <stateEstimatorSwitchTo+0x54>)
 80108fe:	781b      	ldrb	r3, [r3, #0]
 8010900:	737b      	strb	r3, [r7, #13]
  currentEstimator = newEstimator;
 8010902:	4a06      	ldr	r2, [pc, #24]	@ (801091c <stateEstimatorSwitchTo+0x54>)
 8010904:	7bfb      	ldrb	r3, [r7, #15]
 8010906:	7013      	strb	r3, [r2, #0]
  deinitEstimator(previousEstimator);
 8010908:	7b7b      	ldrb	r3, [r7, #13]
 801090a:	4618      	mov	r0, r3
 801090c:	f000 f832 	bl	8010974 <deinitEstimator>
 8010910:	e000      	b.n	8010914 <stateEstimatorSwitchTo+0x4c>
    return;
 8010912:	bf00      	nop

//  DEBUG_PRINT("Using %s (%d) estimator\n", stateEstimatorGetName(), currentEstimator);
}
 8010914:	3710      	adds	r7, #16
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}
 801091a:	bf00      	nop
 801091c:	200097ec 	.word	0x200097ec

08010920 <stateEstimatorGetType>:

StateEstimatorType stateEstimatorGetType(void) {
 8010920:	b480      	push	{r7}
 8010922:	af00      	add	r7, sp, #0
  return currentEstimator;
 8010924:	4b03      	ldr	r3, [pc, #12]	@ (8010934 <stateEstimatorGetType+0x14>)
 8010926:	781b      	ldrb	r3, [r3, #0]
}
 8010928:	4618      	mov	r0, r3
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr
 8010932:	bf00      	nop
 8010934:	200097ec 	.word	0x200097ec

08010938 <initEstimator>:

static void initEstimator(const StateEstimatorType estimator) {
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	4603      	mov	r3, r0
 8010940:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].init) {
 8010942:	79fa      	ldrb	r2, [r7, #7]
 8010944:	490a      	ldr	r1, [pc, #40]	@ (8010970 <initEstimator+0x38>)
 8010946:	4613      	mov	r3, r2
 8010948:	009b      	lsls	r3, r3, #2
 801094a:	4413      	add	r3, r2
 801094c:	009b      	lsls	r3, r3, #2
 801094e:	440b      	add	r3, r1
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d008      	beq.n	8010968 <initEstimator+0x30>
    estimatorFunctions[estimator].init();
 8010956:	79fa      	ldrb	r2, [r7, #7]
 8010958:	4905      	ldr	r1, [pc, #20]	@ (8010970 <initEstimator+0x38>)
 801095a:	4613      	mov	r3, r2
 801095c:	009b      	lsls	r3, r3, #2
 801095e:	4413      	add	r3, r2
 8010960:	009b      	lsls	r3, r3, #2
 8010962:	440b      	add	r3, r1
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4798      	blx	r3
  }
}
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	20000038 	.word	0x20000038

08010974 <deinitEstimator>:

static void deinitEstimator(const StateEstimatorType estimator) {
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	4603      	mov	r3, r0
 801097c:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].deinit) {
 801097e:	79fa      	ldrb	r2, [r7, #7]
 8010980:	490b      	ldr	r1, [pc, #44]	@ (80109b0 <deinitEstimator+0x3c>)
 8010982:	4613      	mov	r3, r2
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	009b      	lsls	r3, r3, #2
 801098a:	440b      	add	r3, r1
 801098c:	3304      	adds	r3, #4
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d009      	beq.n	80109a8 <deinitEstimator+0x34>
    estimatorFunctions[estimator].deinit();
 8010994:	79fa      	ldrb	r2, [r7, #7]
 8010996:	4906      	ldr	r1, [pc, #24]	@ (80109b0 <deinitEstimator+0x3c>)
 8010998:	4613      	mov	r3, r2
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	4413      	add	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	440b      	add	r3, r1
 80109a2:	3304      	adds	r3, #4
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	4798      	blx	r3
  }
}
 80109a8:	bf00      	nop
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	20000038 	.word	0x20000038

080109b4 <stateEstimatorTest>:

bool stateEstimatorTest(void) {
 80109b4:	b580      	push	{r7, lr}
 80109b6:	af00      	add	r7, sp, #0
  return estimatorFunctions[currentEstimator].test();
 80109b8:	4b07      	ldr	r3, [pc, #28]	@ (80109d8 <stateEstimatorTest+0x24>)
 80109ba:	781b      	ldrb	r3, [r3, #0]
 80109bc:	4619      	mov	r1, r3
 80109be:	4a07      	ldr	r2, [pc, #28]	@ (80109dc <stateEstimatorTest+0x28>)
 80109c0:	460b      	mov	r3, r1
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	440b      	add	r3, r1
 80109c6:	009b      	lsls	r3, r3, #2
 80109c8:	4413      	add	r3, r2
 80109ca:	3308      	adds	r3, #8
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	4798      	blx	r3
 80109d0:	4603      	mov	r3, r0
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	bd80      	pop	{r7, pc}
 80109d6:	bf00      	nop
 80109d8:	200097ec 	.word	0x200097ec
 80109dc:	20000038 	.word	0x20000038

080109e0 <stateEstimator>:

void stateEstimator(state_t *state, const stabilizerStep_t tick) {
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  estimatorFunctions[currentEstimator].update(state, tick);
 80109ea:	4b09      	ldr	r3, [pc, #36]	@ (8010a10 <stateEstimator+0x30>)
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	4619      	mov	r1, r3
 80109f0:	4a08      	ldr	r2, [pc, #32]	@ (8010a14 <stateEstimator+0x34>)
 80109f2:	460b      	mov	r3, r1
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	440b      	add	r3, r1
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	4413      	add	r3, r2
 80109fc:	330c      	adds	r3, #12
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	6839      	ldr	r1, [r7, #0]
 8010a02:	6878      	ldr	r0, [r7, #4]
 8010a04:	4798      	blx	r3
}
 8010a06:	bf00      	nop
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	200097ec 	.word	0x200097ec
 8010a14:	20000038 	.word	0x20000038

08010a18 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b086      	sub	sp, #24
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 8010a20:	4b19      	ldr	r3, [pc, #100]	@ (8010a88 <estimatorEnqueue+0x70>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d02b      	beq.n	8010a80 <estimatorEnqueue+0x68>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 8010a28:	4b18      	ldr	r3, [pc, #96]	@ (8010a8c <estimatorEnqueue+0x74>)
 8010a2a:	685b      	ldr	r3, [r3, #4]
 8010a2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	bf14      	ite	ne
 8010a34:	2301      	movne	r3, #1
 8010a36:	2300      	moveq	r3, #0
 8010a38:	75fb      	strb	r3, [r7, #23]
  if (isInInterrupt) {
 8010a3a:	7dfb      	ldrb	r3, [r7, #23]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d016      	beq.n	8010a6e <estimatorEnqueue+0x56>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8010a40:	2300      	movs	r3, #0
 8010a42:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 8010a44:	4b10      	ldr	r3, [pc, #64]	@ (8010a88 <estimatorEnqueue+0x70>)
 8010a46:	6818      	ldr	r0, [r3, #0]
 8010a48:	f107 020c 	add.w	r2, r7, #12
 8010a4c:	2300      	movs	r3, #0
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	f7f5 fe22 	bl	8006698 <xQueueGenericSendFromISR>
 8010a54:	6138      	str	r0, [r7, #16]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b01      	cmp	r3, #1
 8010a5a:	d112      	bne.n	8010a82 <estimatorEnqueue+0x6a>
      portYIELD();
 8010a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8010a90 <estimatorEnqueue+0x78>)
 8010a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a62:	601a      	str	r2, [r3, #0]
 8010a64:	f3bf 8f4f 	dsb	sy
 8010a68:	f3bf 8f6f 	isb	sy
 8010a6c:	e009      	b.n	8010a82 <estimatorEnqueue+0x6a>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 8010a6e:	4b06      	ldr	r3, [pc, #24]	@ (8010a88 <estimatorEnqueue+0x70>)
 8010a70:	6818      	ldr	r0, [r3, #0]
 8010a72:	2300      	movs	r3, #0
 8010a74:	2200      	movs	r2, #0
 8010a76:	6879      	ldr	r1, [r7, #4]
 8010a78:	f7f5 fd00 	bl	800647c <xQueueGenericSend>
 8010a7c:	6138      	str	r0, [r7, #16]
 8010a7e:	e000      	b.n	8010a82 <estimatorEnqueue+0x6a>
    return;
 8010a80:	bf00      	nop
//    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
  } else {
//    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
  }

}
 8010a82:	3718      	adds	r7, #24
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	200097f0 	.word	0x200097f0
 8010a8c:	e000ed00 	.word	0xe000ed00
 8010a90:	e000ed04 	.word	0xe000ed04

08010a94 <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 8010a9c:	4b08      	ldr	r3, [pc, #32]	@ (8010ac0 <estimatorDequeue+0x2c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	6879      	ldr	r1, [r7, #4]
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7f5 ff27 	bl	80068f8 <xQueueReceive>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	bf0c      	ite	eq
 8010ab0:	2301      	moveq	r3, #1
 8010ab2:	2300      	movne	r3, #0
 8010ab4:	b2db      	uxtb	r3, r3
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3708      	adds	r7, #8
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	200097f0 	.word	0x200097f0

08010ac4 <estimatorComplementaryInit>:
#define POS_UPDATE_RATE RATE_100_HZ
#define POS_UPDATE_DT 1.0/POS_UPDATE_RATE


void estimatorComplementaryInit(void)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	af00      	add	r7, sp, #0
  sensfusion6Init();
 8010ac8:	f7fe fdb4 	bl	800f634 <sensfusion6Init>
}
 8010acc:	bf00      	nop
 8010ace:	bd80      	pop	{r7, pc}

08010ad0 <estimatorComplementaryTest>:

bool estimatorComplementaryTest(void)
{
 8010ad0:	b580      	push	{r7, lr}
 8010ad2:	b082      	sub	sp, #8
 8010ad4:	af00      	add	r7, sp, #0
  bool pass = true;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	71fb      	strb	r3, [r7, #7]

  pass &= sensfusion6Test();
 8010ada:	f7fe fdbd 	bl	800f658 <sensfusion6Test>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	461a      	mov	r2, r3
 8010ae2:	79fb      	ldrb	r3, [r7, #7]
 8010ae4:	4013      	ands	r3, r2
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	bf14      	ite	ne
 8010aea:	2301      	movne	r3, #1
 8010aec:	2300      	moveq	r3, #0
 8010aee:	71fb      	strb	r3, [r7, #7]

  return pass;
 8010af0:	79fb      	ldrb	r3, [r7, #7]
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
	...

08010afc <estimatorComplementary>:

void estimatorComplementary(state_t *state, const stabilizerStep_t stabilizerStep)
{
 8010afc:	b590      	push	{r4, r7, lr}
 8010afe:	b08f      	sub	sp, #60	@ 0x3c
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 8010b06:	e03c      	b.n	8010b82 <estimatorComplementary+0x86>
    switch (m.type)
 8010b08:	7a3b      	ldrb	r3, [r7, #8]
 8010b0a:	3b04      	subs	r3, #4
 8010b0c:	2b07      	cmp	r3, #7
 8010b0e:	d837      	bhi.n	8010b80 <estimatorComplementary+0x84>
 8010b10:	a201      	add	r2, pc, #4	@ (adr r2, 8010b18 <estimatorComplementary+0x1c>)
 8010b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b16:	bf00      	nop
 8010b18:	08010b6f 	.word	0x08010b6f
 8010b1c:	08010b81 	.word	0x08010b81
 8010b20:	08010b81 	.word	0x08010b81
 8010b24:	08010b81 	.word	0x08010b81
 8010b28:	08010b81 	.word	0x08010b81
 8010b2c:	08010b39 	.word	0x08010b39
 8010b30:	08010b4b 	.word	0x08010b4b
 8010b34:	08010b5d 	.word	0x08010b5d
    {
    case MeasurementTypeGyroscope:
      gyro = m.data.gyroscope.gyro;
 8010b38:	4b50      	ldr	r3, [pc, #320]	@ (8010c7c <estimatorComplementary+0x180>)
 8010b3a:	461c      	mov	r4, r3
 8010b3c:	f107 030c 	add.w	r3, r7, #12
 8010b40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 8010b48:	e01b      	b.n	8010b82 <estimatorComplementary+0x86>
    case MeasurementTypeAcceleration:
      acc = m.data.acceleration.acc;
 8010b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8010c80 <estimatorComplementary+0x184>)
 8010b4c:	461c      	mov	r4, r3
 8010b4e:	f107 030c 	add.w	r3, r7, #12
 8010b52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 8010b5a:	e012      	b.n	8010b82 <estimatorComplementary+0x86>
    case MeasurementTypeBarometer:
      baro = m.data.barometer.baro;
 8010b5c:	4b49      	ldr	r3, [pc, #292]	@ (8010c84 <estimatorComplementary+0x188>)
 8010b5e:	461c      	mov	r4, r3
 8010b60:	f107 030c 	add.w	r3, r7, #12
 8010b64:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 8010b6c:	e009      	b.n	8010b82 <estimatorComplementary+0x86>
    case MeasurementTypeTOF:
      tof = m.data.tof;
 8010b6e:	4b46      	ldr	r3, [pc, #280]	@ (8010c88 <estimatorComplementary+0x18c>)
 8010b70:	461c      	mov	r4, r3
 8010b72:	f107 030c 	add.w	r3, r7, #12
 8010b76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 8010b7e:	e000      	b.n	8010b82 <estimatorComplementary+0x86>
    default:
      break;
 8010b80:	bf00      	nop
  while (estimatorDequeue(&m)) {
 8010b82:	f107 0308 	add.w	r3, r7, #8
 8010b86:	4618      	mov	r0, r3
 8010b88:	f7ff ff84 	bl	8010a94 <estimatorDequeue>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d1ba      	bne.n	8010b08 <estimatorComplementary+0xc>
    }
  }

  // Update filter
  if (RATE_DO_EXECUTE(ATTITUDE_UPDATE_RATE, stabilizerStep)) {
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	f003 0303 	and.w	r3, r3, #3
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d157      	bne.n	8010c4c <estimatorComplementary+0x150>
    sensfusion6UpdateQ(gyro.x, gyro.y, gyro.z,
 8010b9c:	4b37      	ldr	r3, [pc, #220]	@ (8010c7c <estimatorComplementary+0x180>)
 8010b9e:	edd3 7a00 	vldr	s15, [r3]
 8010ba2:	4b36      	ldr	r3, [pc, #216]	@ (8010c7c <estimatorComplementary+0x180>)
 8010ba4:	ed93 7a01 	vldr	s14, [r3, #4]
 8010ba8:	4b34      	ldr	r3, [pc, #208]	@ (8010c7c <estimatorComplementary+0x180>)
 8010baa:	edd3 6a02 	vldr	s13, [r3, #8]
 8010bae:	4b34      	ldr	r3, [pc, #208]	@ (8010c80 <estimatorComplementary+0x184>)
 8010bb0:	ed93 6a00 	vldr	s12, [r3]
 8010bb4:	4b32      	ldr	r3, [pc, #200]	@ (8010c80 <estimatorComplementary+0x184>)
 8010bb6:	edd3 5a01 	vldr	s11, [r3, #4]
 8010bba:	4b31      	ldr	r3, [pc, #196]	@ (8010c80 <estimatorComplementary+0x184>)
 8010bbc:	ed93 5a02 	vldr	s10, [r3, #8]
 8010bc0:	ed9f 3a32 	vldr	s6, [pc, #200]	@ 8010c8c <estimatorComplementary+0x190>
 8010bc4:	eef0 2a45 	vmov.f32	s5, s10
 8010bc8:	eeb0 2a65 	vmov.f32	s4, s11
 8010bcc:	eef0 1a46 	vmov.f32	s3, s12
 8010bd0:	eeb0 1a66 	vmov.f32	s2, s13
 8010bd4:	eef0 0a47 	vmov.f32	s1, s14
 8010bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8010bdc:	f7fe fd48 	bl	800f670 <sensfusion6UpdateQ>
                        acc.x, acc.y, acc.z,
                        ATTITUDE_UPDATE_DT);

    // Save attitude, adjusted for the legacy CF2 body coordinate system
    sensfusion6GetEulerRPY(&state->attitude.roll, &state->attitude.pitch, &state->attitude.yaw);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	1d18      	adds	r0, r3, #4
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f103 0108 	add.w	r1, r3, #8
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	330c      	adds	r3, #12
 8010bee:	461a      	mov	r2, r3
 8010bf0:	f7ff f850 	bl	800fc94 <sensfusion6GetEulerRPY>

    // Save quaternion, hopefully one day this could be used in a better controller.
    // Note that this is not adjusted for the legacy coordinate system
    sensfusion6GetQuaternion(
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	f103 0010 	add.w	r0, r3, #16
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f103 0114 	add.w	r1, r3, #20
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f103 0218 	add.w	r2, r3, #24
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	331c      	adds	r3, #28
 8010c0a:	f7ff f81d 	bl	800fc48 <sensfusion6GetQuaternion>
      &state->attitudeQuaternion.x,
      &state->attitudeQuaternion.y,
      &state->attitudeQuaternion.z,
      &state->attitudeQuaternion.w);

    state->acc.z = sensfusion6GetAccZWithoutGravity(acc.x,
 8010c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8010c80 <estimatorComplementary+0x184>)
 8010c10:	edd3 7a00 	vldr	s15, [r3]
 8010c14:	4b1a      	ldr	r3, [pc, #104]	@ (8010c80 <estimatorComplementary+0x184>)
 8010c16:	ed93 7a01 	vldr	s14, [r3, #4]
 8010c1a:	4b19      	ldr	r3, [pc, #100]	@ (8010c80 <estimatorComplementary+0x184>)
 8010c1c:	edd3 6a02 	vldr	s13, [r3, #8]
 8010c20:	eeb0 1a66 	vmov.f32	s2, s13
 8010c24:	eef0 0a47 	vmov.f32	s1, s14
 8010c28:	eeb0 0a67 	vmov.f32	s0, s15
 8010c2c:	f7ff f8d6 	bl	800fddc <sensfusion6GetAccZWithoutGravity>
 8010c30:	eef0 7a40 	vmov.f32	s15, s0
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                                                    acc.y,
                                                    acc.z);

    positionUpdateVelocity(state->acc.z, ATTITUDE_UPDATE_DT);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8010c40:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8010c8c <estimatorComplementary+0x190>
 8010c44:	eeb0 0a67 	vmov.f32	s0, s15
 8010c48:	f000 fa06 	bl	8011058 <positionUpdateVelocity>
  }

  if (RATE_DO_EXECUTE(POS_UPDATE_RATE, stabilizerStep)) {
 8010c4c:	6839      	ldr	r1, [r7, #0]
 8010c4e:	4b10      	ldr	r3, [pc, #64]	@ (8010c90 <estimatorComplementary+0x194>)
 8010c50:	fba3 2301 	umull	r2, r3, r3, r1
 8010c54:	08da      	lsrs	r2, r3, #3
 8010c56:	4613      	mov	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	005b      	lsls	r3, r3, #1
 8010c5e:	1aca      	subs	r2, r1, r3
 8010c60:	2a00      	cmp	r2, #0
 8010c62:	d107      	bne.n	8010c74 <estimatorComplementary+0x178>
    positionEstimate(state, &baro, &tof, POS_UPDATE_DT, stabilizerStep);
 8010c64:	683b      	ldr	r3, [r7, #0]
 8010c66:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8010c94 <estimatorComplementary+0x198>
 8010c6a:	4a07      	ldr	r2, [pc, #28]	@ (8010c88 <estimatorComplementary+0x18c>)
 8010c6c:	4905      	ldr	r1, [pc, #20]	@ (8010c84 <estimatorComplementary+0x188>)
 8010c6e:	6878      	ldr	r0, [r7, #4]
 8010c70:	f000 f9d8 	bl	8011024 <positionEstimate>
  }
}
 8010c74:	bf00      	nop
 8010c76:	373c      	adds	r7, #60	@ 0x3c
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd90      	pop	{r4, r7, pc}
 8010c7c:	200097f4 	.word	0x200097f4
 8010c80:	20009800 	.word	0x20009800
 8010c84:	2000980c 	.word	0x2000980c
 8010c88:	20009818 	.word	0x20009818
 8010c8c:	3b83126f 	.word	0x3b83126f
 8010c90:	cccccccd 	.word	0xcccccccd
 8010c94:	3c23d70a 	.word	0x3c23d70a

08010c98 <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 8010c9e:	4817      	ldr	r0, [pc, #92]	@ (8010cfc <estimatorKalmanTaskInit+0x64>)
 8010ca0:	f000 fb98 	bl	80113d4 <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 8010ca4:	2203      	movs	r2, #3
 8010ca6:	2100      	movs	r1, #0
 8010ca8:	2001      	movs	r0, #1
 8010caa:	f7f5 fb3f 	bl	800632c <xQueueGenericCreate>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	4a13      	ldr	r2, [pc, #76]	@ (8010d00 <estimatorKalmanTaskInit+0x68>)
 8010cb2:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 8010cb4:	4b12      	ldr	r3, [pc, #72]	@ (8010d00 <estimatorKalmanTaskInit+0x68>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d104      	bne.n	8010cc6 <estimatorKalmanTaskInit+0x2e>
 8010cbc:	22b8      	movs	r2, #184	@ 0xb8
 8010cbe:	4911      	ldr	r1, [pc, #68]	@ (8010d04 <estimatorKalmanTaskInit+0x6c>)
 8010cc0:	4811      	ldr	r0, [pc, #68]	@ (8010d08 <estimatorKalmanTaskInit+0x70>)
 8010cc2:	f004 ff05 	bl	8015ad0 <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 8010cc6:	4911      	ldr	r1, [pc, #68]	@ (8010d0c <estimatorKalmanTaskInit+0x74>)
 8010cc8:	2001      	movs	r0, #1
 8010cca:	f7f5 fbbc 	bl	8006446 <xQueueCreateMutexStatic>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8010d10 <estimatorKalmanTaskInit+0x78>)
 8010cd2:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 8010cd4:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8010cd8:	461a      	mov	r2, r3
 8010cda:	4b0e      	ldr	r3, [pc, #56]	@ (8010d14 <estimatorKalmanTaskInit+0x7c>)
 8010cdc:	9302      	str	r3, [sp, #8]
 8010cde:	4b0e      	ldr	r3, [pc, #56]	@ (8010d18 <estimatorKalmanTaskInit+0x80>)
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	2302      	movs	r3, #2
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	490c      	ldr	r1, [pc, #48]	@ (8010d1c <estimatorKalmanTaskInit+0x84>)
 8010cea:	480d      	ldr	r0, [pc, #52]	@ (8010d20 <estimatorKalmanTaskInit+0x88>)
 8010cec:	f7f6 f974 	bl	8006fd8 <xTaskCreateStatic>

  isInit = true;
 8010cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8010d24 <estimatorKalmanTaskInit+0x8c>)
 8010cf2:	2201      	movs	r2, #1
 8010cf4:	701a      	strb	r2, [r3, #0]
}
 8010cf6:	bf00      	nop
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}
 8010cfc:	200098dc 	.word	0x200098dc
 8010d00:	20009824 	.word	0x20009824
 8010d04:	0801e8ec 	.word	0x0801e8ec
 8010d08:	0801e918 	.word	0x0801e918
 8010d0c:	2000982c 	.word	0x2000982c
 8010d10:	20009828 	.word	0x20009828
 8010d14:	10003a98 	.word	0x10003a98
 8010d18:	10003138 	.word	0x10003138
 8010d1c:	0801e92c 	.word	0x0801e92c
 8010d20:	08010d41 	.word	0x08010d41
 8010d24:	2000987e 	.word	0x2000987e

08010d28 <estimatorKalmanTaskTest>:

bool estimatorKalmanTaskTest() {
 8010d28:	b480      	push	{r7}
 8010d2a:	af00      	add	r7, sp, #0
  return isInit;
 8010d2c:	4b03      	ldr	r3, [pc, #12]	@ (8010d3c <estimatorKalmanTaskTest+0x14>)
 8010d2e:	781b      	ldrb	r3, [r3, #0]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
 8010d3a:	bf00      	nop
 8010d3c:	2000987e 	.word	0x2000987e

08010d40 <kalmanTask>:

static void kalmanTask(void* parameters) {
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b088      	sub	sp, #32
 8010d44:	af02      	add	r7, sp, #8
 8010d46:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 8010d48:	f7ff fd0a 	bl	8010760 <systemWaitStart>
  flage_hit = 1;
 8010d4c:	4b38      	ldr	r3, [pc, #224]	@ (8010e30 <kalmanTask+0xf0>)
 8010d4e:	2201      	movs	r2, #1
 8010d50:	701a      	strb	r2, [r3, #0]

  uint32_t nowMs = T2M(xTaskGetTickCount());
 8010d52:	f7f6 fcaf 	bl	80076b4 <xTaskGetTickCount>
 8010d56:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	617b      	str	r3, [r7, #20]

//  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 8010d5c:	4b35      	ldr	r3, [pc, #212]	@ (8010e34 <kalmanTask+0xf4>)
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	f04f 31ff 	mov.w	r1, #4294967295
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7f5 fea7 	bl	8006ab8 <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 8010d6a:	f7f6 fca3 	bl	80076b4 <xTaskGetTickCount>
 8010d6e:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 8010d70:	4b31      	ldr	r3, [pc, #196]	@ (8010e38 <kalmanTask+0xf8>)
 8010d72:	781b      	ldrb	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d004      	beq.n	8010d82 <kalmanTask+0x42>
      estimatorKalmanInit();
 8010d78:	f000 f92e 	bl	8010fd8 <estimatorKalmanInit>
      resetEstimation = false;
 8010d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8010e38 <kalmanTask+0xf8>)
 8010d7e:	2200      	movs	r2, #0
 8010d80:	701a      	strb	r2, [r3, #0]
    }
    flage_hit = 2;
 8010d82:	4b2b      	ldr	r3, [pc, #172]	@ (8010e30 <kalmanTask+0xf0>)
 8010d84:	2202      	movs	r2, #2
 8010d86:	701a      	strb	r2, [r3, #0]

//    bool quadIsFlying = supervisorIsFlying();
    bool quadIsFlying = true;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 8010d8c:	693a      	ldr	r2, [r7, #16]
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d315      	bcc.n	8010dc0 <kalmanTask+0x80>
      axis3fSubSamplerFinalize(&accSubSampler);
 8010d94:	4829      	ldr	r0, [pc, #164]	@ (8010e3c <kalmanTask+0xfc>)
 8010d96:	f7fe fb3a 	bl	800f40e <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 8010d9a:	4829      	ldr	r0, [pc, #164]	@ (8010e40 <kalmanTask+0x100>)
 8010d9c:	f7fe fb37 	bl	800f40e <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	693b      	ldr	r3, [r7, #16]
 8010da6:	4a27      	ldr	r2, [pc, #156]	@ (8010e44 <kalmanTask+0x104>)
 8010da8:	4927      	ldr	r1, [pc, #156]	@ (8010e48 <kalmanTask+0x108>)
 8010daa:	4828      	ldr	r0, [pc, #160]	@ (8010e4c <kalmanTask+0x10c>)
 8010dac:	f002 f824 	bl	8012df8 <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 8010db0:	2214      	movs	r2, #20
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	4413      	add	r3, r2
 8010db6:	617b      	str	r3, [r7, #20]

//      STATS_CNT_RATE_EVENT(&predictionCounter);

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 8010db8:	6939      	ldr	r1, [r7, #16]
 8010dba:	4825      	ldr	r0, [pc, #148]	@ (8010e50 <kalmanTask+0x110>)
 8010dbc:	f005 f81d 	bl	8015dfa <rateSupervisorValidate>
//        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 8010dc0:	693a      	ldr	r2, [r7, #16]
 8010dc2:	4924      	ldr	r1, [pc, #144]	@ (8010e54 <kalmanTask+0x114>)
 8010dc4:	4821      	ldr	r0, [pc, #132]	@ (8010e4c <kalmanTask+0x10c>)
 8010dc6:	f002 fa49 	bl	801325c <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 8010dca:	7bfb      	ldrb	r3, [r7, #15]
 8010dcc:	4619      	mov	r1, r3
 8010dce:	6938      	ldr	r0, [r7, #16]
 8010dd0:	f000 f84a 	bl	8010e68 <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 8010dd4:	481d      	ldr	r0, [pc, #116]	@ (8010e4c <kalmanTask+0x10c>)
 8010dd6:	f002 fa6f 	bl	80132b8 <kalmanCoreFinalize>
    {
//      STATS_CNT_RATE_EVENT(&finalizeCounter);
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 8010dda:	481c      	ldr	r0, [pc, #112]	@ (8010e4c <kalmanTask+0x10c>)
 8010ddc:	f7fe fb6a 	bl	800f4b4 <kalmanSupervisorIsStateWithinBounds>
 8010de0:	4603      	mov	r3, r0
 8010de2:	f083 0301 	eor.w	r3, r3, #1
 8010de6:	b2db      	uxtb	r3, r3
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d00c      	beq.n	8010e06 <kalmanTask+0xc6>
      resetEstimation = true;
 8010dec:	4b12      	ldr	r3, [pc, #72]	@ (8010e38 <kalmanTask+0xf8>)
 8010dee:	2201      	movs	r2, #1
 8010df0:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 8010df2:	4b19      	ldr	r3, [pc, #100]	@ (8010e58 <kalmanTask+0x118>)
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	693a      	ldr	r2, [r7, #16]
 8010df8:	429a      	cmp	r2, r3
 8010dfa:	d904      	bls.n	8010e06 <kalmanTask+0xc6>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 8010dfc:	693b      	ldr	r3, [r7, #16]
 8010dfe:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8010e02:	4a15      	ldr	r2, [pc, #84]	@ (8010e58 <kalmanTask+0x118>)
 8010e04:	6013      	str	r3, [r2, #0]

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 8010e06:	4b15      	ldr	r3, [pc, #84]	@ (8010e5c <kalmanTask+0x11c>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f7f5 fe52 	bl	8006ab8 <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 8010e14:	4a12      	ldr	r2, [pc, #72]	@ (8010e60 <kalmanTask+0x120>)
 8010e16:	4913      	ldr	r1, [pc, #76]	@ (8010e64 <kalmanTask+0x124>)
 8010e18:	480c      	ldr	r0, [pc, #48]	@ (8010e4c <kalmanTask+0x10c>)
 8010e1a:	f002 ff03 	bl	8013c24 <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 8010e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8010e5c <kalmanTask+0x11c>)
 8010e20:	6818      	ldr	r0, [r3, #0]
 8010e22:	2300      	movs	r3, #0
 8010e24:	2200      	movs	r2, #0
 8010e26:	2100      	movs	r1, #0
 8010e28:	f7f5 fb28 	bl	800647c <xQueueGenericSend>
  while (true) {
 8010e2c:	e796      	b.n	8010d5c <kalmanTask+0x1c>
 8010e2e:	bf00      	nop
 8010e30:	2000987d 	.word	0x2000987d
 8010e34:	20009824 	.word	0x20009824
 8010e38:	200098d8 	.word	0x200098d8
 8010e3c:	20009880 	.word	0x20009880
 8010e40:	200098a0 	.word	0x200098a0
 8010e44:	200098b4 	.word	0x200098b4
 8010e48:	20009894 	.word	0x20009894
 8010e4c:	10002f74 	.word	0x10002f74
 8010e50:	20009970 	.word	0x20009970
 8010e54:	200098dc 	.word	0x200098dc
 8010e58:	2000998c 	.word	0x2000998c
 8010e5c:	20009828 	.word	0x20009828
 8010e60:	200098c0 	.word	0x200098c0
 8010e64:	20009920 	.word	0x20009920

08010e68 <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 8010e68:	b590      	push	{r4, r7, lr}
 8010e6a:	b08f      	sub	sp, #60	@ 0x3c
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
 8010e70:	460b      	mov	r3, r1
 8010e72:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 8010e74:	e094      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
    switch (m.type) {
 8010e76:	7a3b      	ldrb	r3, [r7, #8]
 8010e78:	2b0b      	cmp	r3, #11
 8010e7a:	f200 808e 	bhi.w	8010f9a <updateQueuedMeasurements+0x132>
 8010e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8010e84 <updateQueuedMeasurements+0x1c>)
 8010e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e84:	08010f9b 	.word	0x08010f9b
 8010e88:	08010eb5 	.word	0x08010eb5
 8010e8c:	08010ec5 	.word	0x08010ec5
 8010e90:	08010ed5 	.word	0x08010ed5
 8010e94:	08010efd 	.word	0x08010efd
 8010e98:	08010f0d 	.word	0x08010f0d
 8010e9c:	08010f1d 	.word	0x08010f1d
 8010ea0:	08010f2f 	.word	0x08010f2f
 8010ea4:	08010f9b 	.word	0x08010f9b
 8010ea8:	08010f3f 	.word	0x08010f3f
 8010eac:	08010f5f 	.word	0x08010f5f
 8010eb0:	08010f7f 	.word	0x08010f7f
          // standard KF update
//          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
        }
        break;
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 8010eb4:	f107 0308 	add.w	r3, r7, #8
 8010eb8:	3304      	adds	r3, #4
 8010eba:	4619      	mov	r1, r3
 8010ebc:	483f      	ldr	r0, [pc, #252]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010ebe:	f004 fc05 	bl	80156cc <kalmanCoreUpdateWithPosition>
        break;
 8010ec2:	e06d      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 8010ec4:	f107 0308 	add.w	r3, r7, #8
 8010ec8:	3304      	adds	r3, #4
 8010eca:	4619      	mov	r1, r3
 8010ecc:	483b      	ldr	r0, [pc, #236]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010ece:	f004 fa85 	bl	80153dc <kalmanCoreUpdateWithPose>
        break;
 8010ed2:	e065      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeDistance:
        if(robustTwr){
 8010ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8010fc0 <updateQueuedMeasurements+0x158>)
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d007      	beq.n	8010eec <updateQueuedMeasurements+0x84>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 8010edc:	f107 0308 	add.w	r3, r7, #8
 8010ee0:	3304      	adds	r3, #4
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	4835      	ldr	r0, [pc, #212]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010ee6:	f003 fb59 	bl	801459c <kalmanCoreRobustUpdateWithDistance>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
        }
        break;
 8010eea:	e059      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 8010eec:	f107 0308 	add.w	r3, r7, #8
 8010ef0:	3304      	adds	r3, #4
 8010ef2:	4619      	mov	r1, r3
 8010ef4:	4831      	ldr	r0, [pc, #196]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010ef6:	f003 f8c3 	bl	8014080 <kalmanCoreUpdateWithDistance>
        break;
 8010efa:	e051      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 8010efc:	f107 0308 	add.w	r3, r7, #8
 8010f00:	3304      	adds	r3, #4
 8010f02:	4619      	mov	r1, r3
 8010f04:	482d      	ldr	r0, [pc, #180]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010f06:	f004 fc27 	bl	8015758 <kalmanCoreUpdateWithTof>
        break;
 8010f0a:	e049      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 8010f0c:	f107 0308 	add.w	r3, r7, #8
 8010f10:	3304      	adds	r3, #4
 8010f12:	4619      	mov	r1, r3
 8010f14:	4829      	ldr	r0, [pc, #164]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010f16:	f003 f847 	bl	8013fa8 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 8010f1a:	e041      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 8010f1c:	f107 0308 	add.w	r3, r7, #8
 8010f20:	3304      	adds	r3, #4
 8010f22:	4a28      	ldr	r2, [pc, #160]	@ (8010fc4 <updateQueuedMeasurements+0x15c>)
 8010f24:	4619      	mov	r1, r3
 8010f26:	4825      	ldr	r0, [pc, #148]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010f28:	f003 feec 	bl	8014d04 <kalmanCoreUpdateWithFlow>
        break;
 8010f2c:	e038      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 8010f2e:	f107 0308 	add.w	r3, r7, #8
 8010f32:	3304      	adds	r3, #4
 8010f34:	4619      	mov	r1, r3
 8010f36:	4821      	ldr	r0, [pc, #132]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010f38:	f004 fc94 	bl	8015864 <kalmanCoreUpdateWithYawError>
        break;
 8010f3c:	e030      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeSweepAngle:
//        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
        break;
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 8010f3e:	f107 0308 	add.w	r3, r7, #8
 8010f42:	3304      	adds	r3, #4
 8010f44:	4619      	mov	r1, r3
 8010f46:	4820      	ldr	r0, [pc, #128]	@ (8010fc8 <updateQueuedMeasurements+0x160>)
 8010f48:	f7fe fa30 	bl	800f3ac <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 8010f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8010fc4 <updateQueuedMeasurements+0x15c>)
 8010f4e:	461c      	mov	r4, r3
 8010f50:	f107 030c 	add.w	r3, r7, #12
 8010f54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 8010f5c:	e020      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 8010f5e:	f107 0308 	add.w	r3, r7, #8
 8010f62:	3304      	adds	r3, #4
 8010f64:	4619      	mov	r1, r3
 8010f66:	4819      	ldr	r0, [pc, #100]	@ (8010fcc <updateQueuedMeasurements+0x164>)
 8010f68:	f7fe fa20 	bl	800f3ac <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 8010f6c:	4b18      	ldr	r3, [pc, #96]	@ (8010fd0 <updateQueuedMeasurements+0x168>)
 8010f6e:	461c      	mov	r4, r3
 8010f70:	f107 030c 	add.w	r3, r7, #12
 8010f74:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010f78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 8010f7c:	e010      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 8010f7e:	2301      	movs	r3, #1
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d00c      	beq.n	8010f9e <updateQueuedMeasurements+0x136>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 8010f84:	edd7 7a05 	vldr	s15, [r7, #20]
 8010f88:	78fb      	ldrb	r3, [r7, #3]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8010f90:	4910      	ldr	r1, [pc, #64]	@ (8010fd4 <updateQueuedMeasurements+0x16c>)
 8010f92:	480a      	ldr	r0, [pc, #40]	@ (8010fbc <updateQueuedMeasurements+0x154>)
 8010f94:	f000 ffb8 	bl	8011f08 <kalmanCoreUpdateWithBaro>
        }
        break;
 8010f98:	e001      	b.n	8010f9e <updateQueuedMeasurements+0x136>
      default:
        break;
 8010f9a:	bf00      	nop
 8010f9c:	e000      	b.n	8010fa0 <updateQueuedMeasurements+0x138>
        break;
 8010f9e:	bf00      	nop
  while (estimatorDequeue(&m)) {
 8010fa0:	f107 0308 	add.w	r3, r7, #8
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7ff fd75 	bl	8010a94 <estimatorDequeue>
 8010faa:	4603      	mov	r3, r0
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	f47f af62 	bne.w	8010e76 <updateQueuedMeasurements+0xe>
    }
  }
}
 8010fb2:	bf00      	nop
 8010fb4:	bf00      	nop
 8010fb6:	373c      	adds	r7, #60	@ 0x3c
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd90      	pop	{r4, r7, pc}
 8010fbc:	10002f74 	.word	0x10002f74
 8010fc0:	2000987c 	.word	0x2000987c
 8010fc4:	200098cc 	.word	0x200098cc
 8010fc8:	200098a0 	.word	0x200098a0
 8010fcc:	20009880 	.word	0x20009880
 8010fd0:	200098c0 	.word	0x200098c0
 8010fd4:	200098dc 	.word	0x200098dc

08010fd8 <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 8010fde:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 801100c <estimatorKalmanInit+0x34>
 8010fe2:	480b      	ldr	r0, [pc, #44]	@ (8011010 <estimatorKalmanInit+0x38>)
 8010fe4:	f7fe f9d0 	bl	800f388 <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 8010fe8:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8011014 <estimatorKalmanInit+0x3c>
 8010fec:	480a      	ldr	r0, [pc, #40]	@ (8011018 <estimatorKalmanInit+0x40>)
 8010fee:	f7fe f9cb 	bl	800f388 <axis3fSubSamplerInit>


  uint32_t nowMs = T2M(xTaskGetTickCount());
 8010ff2:	f7f6 fb5f 	bl	80076b4 <xTaskGetTickCount>
 8010ff6:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 8010ff8:	687a      	ldr	r2, [r7, #4]
 8010ffa:	4908      	ldr	r1, [pc, #32]	@ (801101c <estimatorKalmanInit+0x44>)
 8010ffc:	4808      	ldr	r0, [pc, #32]	@ (8011020 <estimatorKalmanInit+0x48>)
 8010ffe:	f000 fa37 	bl	8011470 <kalmanCoreInit>
}
 8011002:	bf00      	nop
 8011004:	3708      	adds	r7, #8
 8011006:	46bd      	mov	sp, r7
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	411cf5c3 	.word	0x411cf5c3
 8011010:	20009880 	.word	0x20009880
 8011014:	3c8efa35 	.word	0x3c8efa35
 8011018:	200098a0 	.word	0x200098a0
 801101c:	200098dc 	.word	0x200098dc
 8011020:	10002f74 	.word	0x10002f74

08011024 <positionEstimate>:
};

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state);
static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state);

void positionEstimate(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep) {
 8011024:	b580      	push	{r7, lr}
 8011026:	b088      	sub	sp, #32
 8011028:	af02      	add	r7, sp, #8
 801102a:	6178      	str	r0, [r7, #20]
 801102c:	6139      	str	r1, [r7, #16]
 801102e:	60fa      	str	r2, [r7, #12]
 8011030:	ed87 0a02 	vstr	s0, [r7, #8]
 8011034:	607b      	str	r3, [r7, #4]
  positionEstimateInternal(estimate, baro, tofMeasurement, dt, stabilizerStep, &state);
 8011036:	4b07      	ldr	r3, [pc, #28]	@ (8011054 <positionEstimate+0x30>)
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	ed97 0a02 	vldr	s0, [r7, #8]
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	6939      	ldr	r1, [r7, #16]
 8011044:	6978      	ldr	r0, [r7, #20]
 8011046:	f000 f81b 	bl	8011080 <positionEstimateInternal>
}
 801104a:	bf00      	nop
 801104c:	3718      	adds	r7, #24
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	20000060 	.word	0x20000060

08011058 <positionUpdateVelocity>:

void positionUpdateVelocity(float accWZ, float dt) {
 8011058:	b580      	push	{r7, lr}
 801105a:	b082      	sub	sp, #8
 801105c:	af00      	add	r7, sp, #0
 801105e:	ed87 0a01 	vstr	s0, [r7, #4]
 8011062:	edc7 0a00 	vstr	s1, [r7]
  positionUpdateVelocityInternal(accWZ, dt, &state);
 8011066:	4805      	ldr	r0, [pc, #20]	@ (801107c <positionUpdateVelocity+0x24>)
 8011068:	edd7 0a00 	vldr	s1, [r7]
 801106c:	ed97 0a01 	vldr	s0, [r7, #4]
 8011070:	f000 f8b2 	bl	80111d8 <positionUpdateVelocityInternal>
}
 8011074:	bf00      	nop
 8011076:	3708      	adds	r7, #8
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	20000060 	.word	0x20000060

08011080 <positionEstimateInternal>:

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state) {
 8011080:	b580      	push	{r7, lr}
 8011082:	b08a      	sub	sp, #40	@ 0x28
 8011084:	af00      	add	r7, sp, #0
 8011086:	6178      	str	r0, [r7, #20]
 8011088:	6139      	str	r1, [r7, #16]
 801108a:	60fa      	str	r2, [r7, #12]
 801108c:	ed87 0a02 	vstr	s0, [r7, #8]
 8011090:	607b      	str	r3, [r7, #4]
  float filteredZ;
  static float prev_estimatedZ = 0;
  static bool surfaceFollowingMode = false;

  const uint32_t MAX_SAMPLE_AGE = M2T(50);
 8011092:	2332      	movs	r3, #50	@ 0x32
 8011094:	623b      	str	r3, [r7, #32]

  uint32_t now = xTaskGetTickCount();
 8011096:	f7f6 fb0d 	bl	80076b4 <xTaskGetTickCount>
 801109a:	61f8      	str	r0, [r7, #28]
//  bool isSampleUseful = ((now - tofMeasurement->timestamp) <= MAX_SAMPLE_AGE);
  bool isSampleUseful  =  false;
 801109c:	2300      	movs	r3, #0
 801109e:	76fb      	strb	r3, [r7, #27]
  if (isSampleUseful) {
 80110a0:	7efb      	ldrb	r3, [r7, #27]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d002      	beq.n	80110ac <positionEstimateInternal+0x2c>
    surfaceFollowingMode = true;
 80110a6:	4b4a      	ldr	r3, [pc, #296]	@ (80111d0 <positionEstimateInternal+0x150>)
 80110a8:	2201      	movs	r2, #1
 80110aa:	701a      	strb	r2, [r3, #0]
  }

  if (surfaceFollowingMode) {
 80110ac:	4b48      	ldr	r3, [pc, #288]	@ (80111d0 <positionEstimateInternal+0x150>)
 80110ae:	781b      	ldrb	r3, [r3, #0]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d02e      	beq.n	8011112 <positionEstimateInternal+0x92>
    if (isSampleUseful) {
 80110b4:	7efb      	ldrb	r3, [r7, #27]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d062      	beq.n	8011180 <positionEstimateInternal+0x100>
      // IIR filter zrange
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 80110ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80110c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110c2:	edd3 7a00 	vldr	s15, [r3]
 80110c6:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaZrange) * tofMeasurement->distance;
 80110ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80110d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80110d4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	edd3 7a01 	vldr	s15, [r3, #4]
 80110de:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 80110e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80110e6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      // Use zrange as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 80110ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80110f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80110f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80110f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80110fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80110fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011102:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011106:	ee77 7a27 	vadd.f32	s15, s14, s15
 801110a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801110c:	edc3 7a00 	vstr	s15, [r3]
 8011110:	e036      	b.n	8011180 <positionEstimateInternal+0x100>
    }
  } else {
    // FIXME: A bit of an hack to init IIR filter
    if (state->estimatedZ == 0.0f) {
 8011112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011114:	edd3 7a00 	vldr	s15, [r3]
 8011118:	eef5 7a40 	vcmp.f32	s15, #0.0
 801111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011120:	d103      	bne.n	801112a <positionEstimateInternal+0xaa>
      filteredZ = baro->asl;
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	689b      	ldr	r3, [r3, #8]
 8011126:	627b      	str	r3, [r7, #36]	@ 0x24
 8011128:	e017      	b.n	801115a <positionEstimateInternal+0xda>
    } else {
      // IIR filter asl
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 801112a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801112c:	ed93 7a03 	vldr	s14, [r3, #12]
 8011130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011132:	edd3 7a00 	vldr	s15, [r3]
 8011136:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaAsl) * baro->asl;
 801113a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801113c:	edd3 7a03 	vldr	s15, [r3, #12]
 8011140:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011144:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	edd3 7a02 	vldr	s15, [r3, #8]
 801114e:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 8011152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011156:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    #if CONFIG_CONTROLLER_PID_IMPROVED_BARO_Z_HOLD
      state->estimatedZ = filteredZ;
    #else
      // Use asl as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 801115a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801115c:	ed93 7a04 	vldr	s14, [r3, #16]
 8011160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011162:	edd3 7a01 	vldr	s15, [r3, #4]
 8011166:	ee27 7a27 	vmul.f32	s14, s14, s15
 801116a:	edd7 7a02 	vldr	s15, [r7, #8]
 801116e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011172:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011176:	ee77 7a27 	vadd.f32	s15, s14, s15
 801117a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801117c:	edc3 7a00 	vstr	s15, [r3]
    #endif
  }

  estimate->position.x = 0.0f;
 8011180:	697b      	ldr	r3, [r7, #20]
 8011182:	f04f 0200 	mov.w	r2, #0
 8011186:	625a      	str	r2, [r3, #36]	@ 0x24
  estimate->position.y = 0.0f;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	f04f 0200 	mov.w	r2, #0
 801118e:	629a      	str	r2, [r3, #40]	@ 0x28
  estimate->position.z = state->estimatedZ;
 8011190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011192:	681a      	ldr	r2, [r3, #0]
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	62da      	str	r2, [r3, #44]	@ 0x2c
  estimate->velocity.z = (state->estimatedZ - prev_estimatedZ) / dt;
 8011198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801119a:	ed93 7a00 	vldr	s14, [r3]
 801119e:	4b0d      	ldr	r3, [pc, #52]	@ (80111d4 <positionEstimateInternal+0x154>)
 80111a0:	edd3 7a00 	vldr	s15, [r3]
 80111a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80111a8:	ed97 7a02 	vldr	s14, [r7, #8]
 80111ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  state->estimatedVZ = estimate->velocity.z;
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80111ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111bc:	61da      	str	r2, [r3, #28]
  prev_estimatedZ = state->estimatedZ;
 80111be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	4a04      	ldr	r2, [pc, #16]	@ (80111d4 <positionEstimateInternal+0x154>)
 80111c4:	6013      	str	r3, [r2, #0]
}
 80111c6:	bf00      	nop
 80111c8:	3728      	adds	r7, #40	@ 0x28
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd80      	pop	{r7, pc}
 80111ce:	bf00      	nop
 80111d0:	20009990 	.word	0x20009990
 80111d4:	20009994 	.word	0x20009994

080111d8 <positionUpdateVelocityInternal>:

static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state) {
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	ed87 0a03 	vstr	s0, [r7, #12]
 80111e2:	edc7 0a02 	vstr	s1, [r7, #8]
 80111e6:	6078      	str	r0, [r7, #4]
  state->velocityZ += deadband(accWZ, state->vAccDeadband) * dt * G;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80111ee:	eef0 0a67 	vmov.f32	s1, s15
 80111f2:	ed97 0a03 	vldr	s0, [r7, #12]
 80111f6:	f004 fd9d 	bl	8015d34 <deadband>
 80111fa:	eeb0 7a40 	vmov.f32	s14, s0
 80111fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8011202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011206:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801123c <positionUpdateVelocityInternal+0x64>
 801120a:	ee27 7a87 	vmul.f32	s14, s15, s14
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	edd3 7a01 	vldr	s15, [r3, #4]
 8011214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	edc3 7a01 	vstr	s15, [r3, #4]
  state->velocityZ *= state->velZAlpha;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	ed93 7a01 	vldr	s14, [r3, #4]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	edd3 7a06 	vldr	s15, [r3, #24]
 801122a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8011234:	bf00      	nop
 8011236:	3710      	adds	r7, #16
 8011238:	46bd      	mov	sp, r7
 801123a:	bd80      	pop	{r7, pc}
 801123c:	411cf5c3 	.word	0x411cf5c3

08011240 <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 8011240:	b580      	push	{r7, lr}
 8011242:	b084      	sub	sp, #16
 8011244:	af00      	add	r7, sp, #0
 8011246:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	685b      	ldr	r3, [r3, #4]
 801124c:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	f003 0303 	and.w	r3, r3, #3
 8011254:	2b00      	cmp	r3, #0
 8011256:	d004      	beq.n	8011262 <assert_aligned_4_bytes+0x22>
 8011258:	2239      	movs	r2, #57	@ 0x39
 801125a:	4904      	ldr	r1, [pc, #16]	@ (801126c <assert_aligned_4_bytes+0x2c>)
 801125c:	4804      	ldr	r0, [pc, #16]	@ (8011270 <assert_aligned_4_bytes+0x30>)
 801125e:	f004 fc37 	bl	8015ad0 <assertFail>
}
 8011262:	bf00      	nop
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	0801e934 	.word	0x0801e934
 8011270:	0801e974 	.word	0x0801e974

08011274 <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8011274:	b580      	push	{r7, lr}
 8011276:	b084      	sub	sp, #16
 8011278:	af00      	add	r7, sp, #0
 801127a:	6078      	str	r0, [r7, #4]
 801127c:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 801127e:	6878      	ldr	r0, [r7, #4]
 8011280:	f7ff ffde 	bl	8011240 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8011284:	6838      	ldr	r0, [r7, #0]
 8011286:	f7ff ffdb 	bl	8011240 <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 801128a:	6839      	ldr	r1, [r7, #0]
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f009 fbed 	bl	801aa6c <arm_mat_trans_f32>
 8011292:	4603      	mov	r3, r0
 8011294:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d004      	beq.n	80112a8 <mat_trans+0x34>
 801129e:	2241      	movs	r2, #65	@ 0x41
 80112a0:	4903      	ldr	r1, [pc, #12]	@ (80112b0 <mat_trans+0x3c>)
 80112a2:	4804      	ldr	r0, [pc, #16]	@ (80112b4 <mat_trans+0x40>)
 80112a4:	f004 fc14 	bl	8015ad0 <assertFail>
}
 80112a8:	bf00      	nop
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	0801e934 	.word	0x0801e934
 80112b4:	0801e98c 	.word	0x0801e98c

080112b8 <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 80112c4:	68f8      	ldr	r0, [r7, #12]
 80112c6:	f7ff ffbb 	bl	8011240 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 80112ca:	68b8      	ldr	r0, [r7, #8]
 80112cc:	f7ff ffb8 	bl	8011240 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7ff ffb5 	bl	8011240 <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	68b9      	ldr	r1, [r7, #8]
 80112da:	68f8      	ldr	r0, [r7, #12]
 80112dc:	f009 fc74 	bl	801abc8 <arm_mat_mult_f32>
 80112e0:	4603      	mov	r3, r0
 80112e2:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 80112e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d004      	beq.n	80112f6 <mat_mult+0x3e>
 80112ec:	2252      	movs	r2, #82	@ 0x52
 80112ee:	4904      	ldr	r1, [pc, #16]	@ (8011300 <mat_mult+0x48>)
 80112f0:	4804      	ldr	r0, [pc, #16]	@ (8011304 <mat_mult+0x4c>)
 80112f2:	f004 fbed 	bl	8015ad0 <assertFail>
}
 80112f6:	bf00      	nop
 80112f8:	3718      	adds	r7, #24
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	0801e934 	.word	0x0801e934
 8011304:	0801e98c 	.word	0x0801e98c

08011308 <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 8011308:	b580      	push	{r7, lr}
 801130a:	b086      	sub	sp, #24
 801130c:	af00      	add	r7, sp, #0
 801130e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8011312:	f04f 0300 	mov.w	r3, #0
 8011316:	60bb      	str	r3, [r7, #8]
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	613b      	str	r3, [r7, #16]
 801131c:	f107 0308 	add.w	r3, r7, #8
 8011320:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 8011322:	edd7 7a04 	vldr	s15, [r7, #16]
 8011326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801132e:	db0a      	blt.n	8011346 <arm_sqrt+0x3e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 8011330:	ed97 0a04 	vldr	s0, [r7, #16]
 8011334:	f00a f852 	bl	801b3dc <sqrtf>
 8011338:	eef0 7a40 	vmov.f32	s15, s0
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 8011342:	2300      	movs	r3, #0
 8011344:	e005      	b.n	8011352 <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	f04f 0200 	mov.w	r2, #0
 801134c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 801134e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 8011352:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d004      	beq.n	8011366 <arm_sqrt+0x5e>
 801135c:	2258      	movs	r2, #88	@ 0x58
 801135e:	4906      	ldr	r1, [pc, #24]	@ (8011378 <arm_sqrt+0x70>)
 8011360:	4806      	ldr	r0, [pc, #24]	@ (801137c <arm_sqrt+0x74>)
 8011362:	f004 fbb5 	bl	8015ad0 <assertFail>
  return pOut;
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	ee07 3a90 	vmov	s15, r3
}
 801136c:	eeb0 0a67 	vmov.f32	s0, s15
 8011370:	3718      	adds	r7, #24
 8011372:	46bd      	mov	sp, r7
 8011374:	bd80      	pop	{r7, pc}
 8011376:	bf00      	nop
 8011378:	0801e934 	.word	0x0801e934
 801137c:	0801e98c 	.word	0x0801e98c

08011380 <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 8011380:	b580      	push	{r7, lr}
 8011382:	b086      	sub	sp, #24
 8011384:	af00      	add	r7, sp, #0
 8011386:	60f8      	str	r0, [r7, #12]
 8011388:	ed87 0a02 	vstr	s0, [r7, #8]
 801138c:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 801138e:	6879      	ldr	r1, [r7, #4]
 8011390:	ed97 0a02 	vldr	s0, [r7, #8]
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f009 fbc5 	bl	801ab24 <arm_mat_scale_f32>
 801139a:	4603      	mov	r3, r0
 801139c:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 801139e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d004      	beq.n	80113b0 <mat_scale+0x30>
 80113a6:	2272      	movs	r2, #114	@ 0x72
 80113a8:	4903      	ldr	r1, [pc, #12]	@ (80113b8 <mat_scale+0x38>)
 80113aa:	4804      	ldr	r0, [pc, #16]	@ (80113bc <mat_scale+0x3c>)
 80113ac:	f004 fb90 	bl	8015ad0 <assertFail>
}
 80113b0:	bf00      	nop
 80113b2:	3718      	adds	r7, #24
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bd80      	pop	{r7, pc}
 80113b8:	0801e934 	.word	0x0801e934
 80113bc:	0801e98c 	.word	0x0801e98c

080113c0 <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  return;
 80113c8:	bf00      	nop
}
 80113ca:	370c      	adds	r7, #12
 80113cc:	46bd      	mov	sp, r7
 80113ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d2:	4770      	bx	lr

080113d4 <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 80113d4:	b480      	push	{r7}
 80113d6:	b083      	sub	sp, #12
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a21      	ldr	r2, [pc, #132]	@ (8011464 <kalmanCoreDefaultParams+0x90>)
 80113e0:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80113e8:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	4a1e      	ldr	r2, [pc, #120]	@ (8011468 <kalmanCoreDefaultParams+0x94>)
 80113ee:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	4a1d      	ldr	r2, [pc, #116]	@ (8011468 <kalmanCoreDefaultParams+0x94>)
 80113f4:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	4a1b      	ldr	r2, [pc, #108]	@ (8011468 <kalmanCoreDefaultParams+0x94>)
 80113fa:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8011402:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801140a:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	f04f 0200 	mov.w	r2, #0
 8011412:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f04f 0200 	mov.w	r2, #0
 801141a:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f04f 0200 	mov.w	r2, #0
 8011422:	625a      	str	r2, [r3, #36]	@ 0x24
  params->measNoiseBaro = 2.0f;           // meters
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801142a:	629a      	str	r2, [r3, #40]	@ 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a0f      	ldr	r2, [pc, #60]	@ (801146c <kalmanCoreDefaultParams+0x98>)
 8011430:	62da      	str	r2, [r3, #44]	@ 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	4a0d      	ldr	r2, [pc, #52]	@ (801146c <kalmanCoreDefaultParams+0x98>)
 8011436:	631a      	str	r2, [r3, #48]	@ 0x30

  params->initialX = 0.0;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f04f 0200 	mov.w	r2, #0
 801143e:	635a      	str	r2, [r3, #52]	@ 0x34
  params->initialY = 0.0;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f04f 0200 	mov.w	r2, #0
 8011446:	639a      	str	r2, [r3, #56]	@ 0x38
  params->initialZ = 0.0;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f04f 0200 	mov.w	r2, #0
 801144e:	63da      	str	r2, [r3, #60]	@ 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	f04f 0200 	mov.w	r2, #0
 8011456:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8011458:	bf00      	nop
 801145a:	370c      	adds	r7, #12
 801145c:	46bd      	mov	sp, r7
 801145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011462:	4770      	bx	lr
 8011464:	42c80000 	.word	0x42c80000
 8011468:	3c23d70a 	.word	0x3c23d70a
 801146c:	3dcccccd 	.word	0x3dcccccd

08011470 <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 8011470:	b580      	push	{r7, lr}
 8011472:	b08a      	sub	sp, #40	@ 0x28
 8011474:	af00      	add	r7, sp, #0
 8011476:	60f8      	str	r0, [r7, #12]
 8011478:	60b9      	str	r1, [r7, #8]
 801147a:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 801147c:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8011480:	2100      	movs	r1, #0
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f009 fdd6 	bl	801b034 <memset>

  this->S[KC_STATE_X] = params->initialX;
 8011488:	68bb      	ldr	r3, [r7, #8]
 801148a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 8011498:	68bb      	ldr	r3, [r7, #8]
 801149a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80114a6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80114aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80114ae:	eeb0 0a47 	vmov.f32	s0, s14
 80114b2:	f009 fd75 	bl	801afa0 <arm_cos_f32>
 80114b6:	eef0 7a40 	vmov.f32	s15, s0
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
  this->initialQuaternion[1] = 0.0;
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	f04f 0200 	mov.w	r2, #0
 80114c6:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  this->initialQuaternion[2] = 0.0;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f04f 0200 	mov.w	r2, #0
 80114d0:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80114da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80114de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80114e2:	eeb0 0a47 	vmov.f32	s0, s14
 80114e6:	f009 fd15 	bl	801af14 <arm_sin_f32>
 80114ea:	eef0 7a40 	vmov.f32	s15, s0
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 80114f4:	2300      	movs	r3, #0
 80114f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80114f8:	e00f      	b.n	801151a <kalmanCoreInit+0xaa>
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114fe:	336a      	adds	r3, #106	@ 0x6a
 8011500:	009b      	lsls	r3, r3, #2
 8011502:	4413      	add	r3, r2
 8011504:	681a      	ldr	r2, [r3, #0]
 8011506:	68f9      	ldr	r1, [r7, #12]
 8011508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150a:	3308      	adds	r3, #8
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	440b      	add	r3, r1
 8011510:	3304      	adds	r3, #4
 8011512:	601a      	str	r2, [r3, #0]
 8011514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011516:	3301      	adds	r3, #1
 8011518:	627b      	str	r3, [r7, #36]	@ 0x24
 801151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151c:	2b03      	cmp	r3, #3
 801151e:	ddec      	ble.n	80114fa <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 8011520:	2300      	movs	r3, #0
 8011522:	623b      	str	r3, [r7, #32]
 8011524:	e020      	b.n	8011568 <kalmanCoreInit+0xf8>
 8011526:	2300      	movs	r3, #0
 8011528:	61fb      	str	r3, [r7, #28]
 801152a:	e017      	b.n	801155c <kalmanCoreInit+0xec>
 801152c:	6a3a      	ldr	r2, [r7, #32]
 801152e:	69fb      	ldr	r3, [r7, #28]
 8011530:	429a      	cmp	r2, r3
 8011532:	d102      	bne.n	801153a <kalmanCoreInit+0xca>
 8011534:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8011538:	e001      	b.n	801153e <kalmanCoreInit+0xce>
 801153a:	f04f 0100 	mov.w	r1, #0
 801153e:	68f8      	ldr	r0, [r7, #12]
 8011540:	6a3a      	ldr	r2, [r7, #32]
 8011542:	4613      	mov	r3, r2
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	4413      	add	r3, r2
 8011548:	69fa      	ldr	r2, [r7, #28]
 801154a:	4413      	add	r3, r2
 801154c:	330c      	adds	r3, #12
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4403      	add	r3, r0
 8011552:	3304      	adds	r3, #4
 8011554:	6019      	str	r1, [r3, #0]
 8011556:	69fb      	ldr	r3, [r7, #28]
 8011558:	3301      	adds	r3, #1
 801155a:	61fb      	str	r3, [r7, #28]
 801155c:	69fb      	ldr	r3, [r7, #28]
 801155e:	2b02      	cmp	r3, #2
 8011560:	dde4      	ble.n	801152c <kalmanCoreInit+0xbc>
 8011562:	6a3b      	ldr	r3, [r7, #32]
 8011564:	3301      	adds	r3, #1
 8011566:	623b      	str	r3, [r7, #32]
 8011568:	6a3b      	ldr	r3, [r7, #32]
 801156a:	2b02      	cmp	r3, #2
 801156c:	dddb      	ble.n	8011526 <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 801156e:	2300      	movs	r3, #0
 8011570:	61bb      	str	r3, [r7, #24]
 8011572:	e018      	b.n	80115a6 <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 8011574:	2300      	movs	r3, #0
 8011576:	617b      	str	r3, [r7, #20]
 8011578:	e00f      	b.n	801159a <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 801157a:	68f9      	ldr	r1, [r7, #12]
 801157c:	69ba      	ldr	r2, [r7, #24]
 801157e:	4613      	mov	r3, r2
 8011580:	00db      	lsls	r3, r3, #3
 8011582:	4413      	add	r3, r2
 8011584:	697a      	ldr	r2, [r7, #20]
 8011586:	4413      	add	r3, r2
 8011588:	3316      	adds	r3, #22
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	440b      	add	r3, r1
 801158e:	f04f 0200 	mov.w	r2, #0
 8011592:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	3301      	adds	r3, #1
 8011598:	617b      	str	r3, [r7, #20]
 801159a:	697b      	ldr	r3, [r7, #20]
 801159c:	2b08      	cmp	r3, #8
 801159e:	ddec      	ble.n	801157a <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 80115a0:	69bb      	ldr	r3, [r7, #24]
 80115a2:	3301      	adds	r3, #1
 80115a4:	61bb      	str	r3, [r7, #24]
 80115a6:	69bb      	ldr	r3, [r7, #24]
 80115a8:	2b08      	cmp	r3, #8
 80115aa:	dde3      	ble.n	8011574 <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	edd3 7a00 	vldr	s15, [r3]
 80115b2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80115b6:	eeb0 0a67 	vmov.f32	s0, s15
 80115ba:	f009 feb7 	bl	801b32c <powf>
 80115be:	eef0 7a40 	vmov.f32	s15, s0
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 80115c8:	68bb      	ldr	r3, [r7, #8]
 80115ca:	edd3 7a00 	vldr	s15, [r3]
 80115ce:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80115d2:	eeb0 0a67 	vmov.f32	s0, s15
 80115d6:	f009 fea9 	bl	801b32c <powf>
 80115da:	eef0 7a40 	vmov.f32	s15, s0
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 80115e4:	68bb      	ldr	r3, [r7, #8]
 80115e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80115ea:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80115ee:	eeb0 0a67 	vmov.f32	s0, s15
 80115f2:	f009 fe9b 	bl	801b32c <powf>
 80115f6:	eef0 7a40 	vmov.f32	s15, s0
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	edd3 7a02 	vldr	s15, [r3, #8]
 8011606:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801160a:	eeb0 0a67 	vmov.f32	s0, s15
 801160e:	f009 fe8d 	bl	801b32c <powf>
 8011612:	eef0 7a40 	vmov.f32	s15, s0
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	edd3 7a02 	vldr	s15, [r3, #8]
 8011622:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011626:	eeb0 0a67 	vmov.f32	s0, s15
 801162a:	f009 fe7f 	bl	801b32c <powf>
 801162e:	eef0 7a40 	vmov.f32	s15, s0
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	edd3 7a02 	vldr	s15, [r3, #8]
 801163e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011642:	eeb0 0a67 	vmov.f32	s0, s15
 8011646:	f009 fe71 	bl	801b32c <powf>
 801164a:	eef0 7a40 	vmov.f32	s15, s0
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 8011654:	68bb      	ldr	r3, [r7, #8]
 8011656:	edd3 7a03 	vldr	s15, [r3, #12]
 801165a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801165e:	eeb0 0a67 	vmov.f32	s0, s15
 8011662:	f009 fe63 	bl	801b32c <powf>
 8011666:	eef0 7a40 	vmov.f32	s15, s0
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 8011670:	68bb      	ldr	r3, [r7, #8]
 8011672:	edd3 7a03 	vldr	s15, [r3, #12]
 8011676:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801167a:	eeb0 0a67 	vmov.f32	s0, s15
 801167e:	f009 fe55 	bl	801b32c <powf>
 8011682:	eef0 7a40 	vmov.f32	s15, s0
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	edd3 7a04 	vldr	s15, [r3, #16]
 8011692:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011696:	eeb0 0a67 	vmov.f32	s0, s15
 801169a:	f009 fe47 	bl	801b32c <powf>
 801169e:	eef0 7a40 	vmov.f32	s15, s0
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  this->Pm.numRows = KC_STATE_DIM;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2209      	movs	r2, #9
 80116ac:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	2209      	movs	r2, #9
 80116b4:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
  this->Pm.pData = (float*)this->P;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

  this->baroReferenceHeight = 0.0;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f04f 0200 	mov.w	r2, #0
 80116ca:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  this->isUpdated = false;
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2200      	movs	r2, #0
 80116d2:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  this->lastPredictionMs = nowMs;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	687a      	ldr	r2, [r7, #4]
 80116e2:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 80116e6:	bf00      	nop
 80116e8:	3728      	adds	r7, #40	@ 0x28
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}
	...

080116f0 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b090      	sub	sp, #64	@ 0x40
 80116f4:	af00      	add	r7, sp, #0
 80116f6:	60f8      	str	r0, [r7, #12]
 80116f8:	60b9      	str	r1, [r7, #8]
 80116fa:	ed87 0a01 	vstr	s0, [r7, #4]
 80116fe:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	881b      	ldrh	r3, [r3, #0]
 8011706:	2b01      	cmp	r3, #1
 8011708:	d004      	beq.n	8011714 <kalmanCoreScalarUpdate+0x24>
 801170a:	22e8      	movs	r2, #232	@ 0xe8
 801170c:	49ac      	ldr	r1, [pc, #688]	@ (80119c0 <kalmanCoreScalarUpdate+0x2d0>)
 801170e:	48ad      	ldr	r0, [pc, #692]	@ (80119c4 <kalmanCoreScalarUpdate+0x2d4>)
 8011710:	f004 f9de 	bl	8015ad0 <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	885b      	ldrh	r3, [r3, #2]
 8011718:	2b09      	cmp	r3, #9
 801171a:	d004      	beq.n	8011726 <kalmanCoreScalarUpdate+0x36>
 801171c:	22e9      	movs	r2, #233	@ 0xe9
 801171e:	49a8      	ldr	r1, [pc, #672]	@ (80119c0 <kalmanCoreScalarUpdate+0x2d0>)
 8011720:	48a9      	ldr	r0, [pc, #676]	@ (80119c8 <kalmanCoreScalarUpdate+0x2d8>)
 8011722:	f004 f9d5 	bl	8015ad0 <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 8011726:	49a9      	ldr	r1, [pc, #676]	@ (80119cc <kalmanCoreScalarUpdate+0x2dc>)
 8011728:	68b8      	ldr	r0, [r7, #8]
 801172a:	f7ff fda3 	bl	8011274 <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8011734:	4aa6      	ldr	r2, [pc, #664]	@ (80119d0 <kalmanCoreScalarUpdate+0x2e0>)
 8011736:	49a5      	ldr	r1, [pc, #660]	@ (80119cc <kalmanCoreScalarUpdate+0x2dc>)
 8011738:	4618      	mov	r0, r3
 801173a:	f7ff fdbd 	bl	80112b8 <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 801173e:	edd7 7a00 	vldr	s15, [r7]
 8011742:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011746:	edc7 7a08 	vstr	s15, [r7, #32]
  double HPHR = R; // HPH' + R
 801174a:	6a38      	ldr	r0, [r7, #32]
 801174c:	f7ee feae 	bl	80004ac <__aeabi_f2d>
 8011750:	4602      	mov	r2, r0
 8011752:	460b      	mov	r3, r1
 8011754:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 8011758:	2300      	movs	r3, #0
 801175a:	637b      	str	r3, [r7, #52]	@ 0x34
 801175c:	e01f      	b.n	801179e <kalmanCoreScalarUpdate+0xae>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	685a      	ldr	r2, [r3, #4]
 8011762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4413      	add	r3, r2
 8011768:	ed93 7a00 	vldr	s14, [r3]
 801176c:	4a99      	ldr	r2, [pc, #612]	@ (80119d4 <kalmanCoreScalarUpdate+0x2e4>)
 801176e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011770:	009b      	lsls	r3, r3, #2
 8011772:	4413      	add	r3, r2
 8011774:	edd3 7a00 	vldr	s15, [r3]
 8011778:	ee67 7a27 	vmul.f32	s15, s14, s15
 801177c:	ee17 0a90 	vmov	r0, s15
 8011780:	f7ee fe94 	bl	80004ac <__aeabi_f2d>
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 801178c:	f7ee fd30 	bl	80001f0 <__adddf3>
 8011790:	4602      	mov	r2, r0
 8011792:	460b      	mov	r3, r1
 8011794:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 8011798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801179a:	3301      	adds	r3, #1
 801179c:	637b      	str	r3, [r7, #52]	@ 0x34
 801179e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80117a0:	2b08      	cmp	r3, #8
 80117a2:	dddc      	ble.n	801175e <kalmanCoreScalarUpdate+0x6e>

  }
  ASSERT(!isnan(HPHR));
 80117a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80117a8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80117ac:	f7ef f970 	bl	8000a90 <__aeabi_dcmpun>
 80117b0:	4603      	mov	r3, r0
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d004      	beq.n	80117c0 <kalmanCoreScalarUpdate+0xd0>
 80117b6:	22f6      	movs	r2, #246	@ 0xf6
 80117b8:	4981      	ldr	r1, [pc, #516]	@ (80119c0 <kalmanCoreScalarUpdate+0x2d0>)
 80117ba:	4887      	ldr	r0, [pc, #540]	@ (80119d8 <kalmanCoreScalarUpdate+0x2e8>)
 80117bc:	f004 f988 	bl	8015ad0 <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 80117c0:	2300      	movs	r3, #0
 80117c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80117c4:	e032      	b.n	801182c <kalmanCoreScalarUpdate+0x13c>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 80117c6:	4a83      	ldr	r2, [pc, #524]	@ (80119d4 <kalmanCoreScalarUpdate+0x2e4>)
 80117c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ca:	009b      	lsls	r3, r3, #2
 80117cc:	4413      	add	r3, r2
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	4618      	mov	r0, r3
 80117d2:	f7ee fe6b 	bl	80004ac <__aeabi_f2d>
 80117d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80117da:	f7ee ffe9 	bl	80007b0 <__aeabi_ddiv>
 80117de:	4602      	mov	r2, r0
 80117e0:	460b      	mov	r3, r1
 80117e2:	4610      	mov	r0, r2
 80117e4:	4619      	mov	r1, r3
 80117e6:	f7ef f969 	bl	8000abc <__aeabi_d2f>
 80117ea:	4602      	mov	r2, r0
 80117ec:	497b      	ldr	r1, [pc, #492]	@ (80119dc <kalmanCoreScalarUpdate+0x2ec>)
 80117ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	440b      	add	r3, r1
 80117f4:	601a      	str	r2, [r3, #0]
    this->S[i] = this->S[i] + K[i] * error; // state update
 80117f6:	68fa      	ldr	r2, [r7, #12]
 80117f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117fa:	009b      	lsls	r3, r3, #2
 80117fc:	4413      	add	r3, r2
 80117fe:	ed93 7a00 	vldr	s14, [r3]
 8011802:	4a76      	ldr	r2, [pc, #472]	@ (80119dc <kalmanCoreScalarUpdate+0x2ec>)
 8011804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011806:	009b      	lsls	r3, r3, #2
 8011808:	4413      	add	r3, r2
 801180a:	edd3 6a00 	vldr	s13, [r3]
 801180e:	edd7 7a01 	vldr	s15, [r7, #4]
 8011812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011816:	ee77 7a27 	vadd.f32	s15, s14, s15
 801181a:	68fa      	ldr	r2, [r7, #12]
 801181c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	4413      	add	r3, r2
 8011822:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011828:	3301      	adds	r3, #1
 801182a:	633b      	str	r3, [r7, #48]	@ 0x30
 801182c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801182e:	2b08      	cmp	r3, #8
 8011830:	ddc9      	ble.n	80117c6 <kalmanCoreScalarUpdate+0xd6>
  }
  assertStateNotNaN(this);
 8011832:	68f8      	ldr	r0, [r7, #12]
 8011834:	f7ff fdc4 	bl	80113c0 <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 8011838:	4a69      	ldr	r2, [pc, #420]	@ (80119e0 <kalmanCoreScalarUpdate+0x2f0>)
 801183a:	68b9      	ldr	r1, [r7, #8]
 801183c:	4869      	ldr	r0, [pc, #420]	@ (80119e4 <kalmanCoreScalarUpdate+0x2f4>)
 801183e:	f7ff fd3b 	bl	80112b8 <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 8011842:	2300      	movs	r3, #0
 8011844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011846:	e01a      	b.n	801187e <kalmanCoreScalarUpdate+0x18e>
 8011848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801184a:	4613      	mov	r3, r2
 801184c:	009b      	lsls	r3, r3, #2
 801184e:	4413      	add	r3, r2
 8011850:	005b      	lsls	r3, r3, #1
 8011852:	4a65      	ldr	r2, [pc, #404]	@ (80119e8 <kalmanCoreScalarUpdate+0x2f8>)
 8011854:	009b      	lsls	r3, r3, #2
 8011856:	4413      	add	r3, r2
 8011858:	edd3 7a00 	vldr	s15, [r3]
 801185c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801185e:	4613      	mov	r3, r2
 8011860:	009b      	lsls	r3, r3, #2
 8011862:	4413      	add	r3, r2
 8011864:	005b      	lsls	r3, r3, #1
 8011866:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801186a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801186e:	4a5e      	ldr	r2, [pc, #376]	@ (80119e8 <kalmanCoreScalarUpdate+0x2f8>)
 8011870:	009b      	lsls	r3, r3, #2
 8011872:	4413      	add	r3, r2
 8011874:	edc3 7a00 	vstr	s15, [r3]
 8011878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801187a:	3301      	adds	r3, #1
 801187c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801187e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011880:	2b08      	cmp	r3, #8
 8011882:	dde1      	ble.n	8011848 <kalmanCoreScalarUpdate+0x158>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 8011884:	4959      	ldr	r1, [pc, #356]	@ (80119ec <kalmanCoreScalarUpdate+0x2fc>)
 8011886:	4856      	ldr	r0, [pc, #344]	@ (80119e0 <kalmanCoreScalarUpdate+0x2f0>)
 8011888:	f7ff fcf4 	bl	8011274 <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8011892:	4a57      	ldr	r2, [pc, #348]	@ (80119f0 <kalmanCoreScalarUpdate+0x300>)
 8011894:	4619      	mov	r1, r3
 8011896:	4852      	ldr	r0, [pc, #328]	@ (80119e0 <kalmanCoreScalarUpdate+0x2f0>)
 8011898:	f7ff fd0e 	bl	80112b8 <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80118a2:	461a      	mov	r2, r3
 80118a4:	4951      	ldr	r1, [pc, #324]	@ (80119ec <kalmanCoreScalarUpdate+0x2fc>)
 80118a6:	4852      	ldr	r0, [pc, #328]	@ (80119f0 <kalmanCoreScalarUpdate+0x300>)
 80118a8:	f7ff fd06 	bl	80112b8 <mat_mult>
  assertStateNotNaN(this);
 80118ac:	68f8      	ldr	r0, [r7, #12]
 80118ae:	f7ff fd87 	bl	80113c0 <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 80118b2:	2300      	movs	r3, #0
 80118b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80118b6:	e101      	b.n	8011abc <kalmanCoreScalarUpdate+0x3cc>
    for (int j=i; j<KC_STATE_DIM; j++) {
 80118b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80118bc:	e0f7      	b.n	8011aae <kalmanCoreScalarUpdate+0x3be>
      double v = K[i] * R * K[j];
 80118be:	4a47      	ldr	r2, [pc, #284]	@ (80119dc <kalmanCoreScalarUpdate+0x2ec>)
 80118c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118c2:	009b      	lsls	r3, r3, #2
 80118c4:	4413      	add	r3, r2
 80118c6:	ed93 7a00 	vldr	s14, [r3]
 80118ca:	edd7 7a08 	vldr	s15, [r7, #32]
 80118ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118d2:	4a42      	ldr	r2, [pc, #264]	@ (80119dc <kalmanCoreScalarUpdate+0x2ec>)
 80118d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4413      	add	r3, r2
 80118da:	edd3 7a00 	vldr	s15, [r3]
 80118de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80118e2:	ee17 0a90 	vmov	r0, s15
 80118e6:	f7ee fde1 	bl	80004ac <__aeabi_f2d>
 80118ea:	4602      	mov	r2, r0
 80118ec:	460b      	mov	r3, r1
 80118ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 80118f2:	68f9      	ldr	r1, [r7, #12]
 80118f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118f6:	4613      	mov	r3, r2
 80118f8:	00db      	lsls	r3, r3, #3
 80118fa:	4413      	add	r3, r2
 80118fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80118fe:	4413      	add	r3, r2
 8011900:	3316      	adds	r3, #22
 8011902:	009b      	lsls	r3, r3, #2
 8011904:	440b      	add	r3, r1
 8011906:	edd3 7a00 	vldr	s15, [r3]
 801190a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801190e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011912:	68f9      	ldr	r1, [r7, #12]
 8011914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011916:	4613      	mov	r3, r2
 8011918:	00db      	lsls	r3, r3, #3
 801191a:	4413      	add	r3, r2
 801191c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801191e:	4413      	add	r3, r2
 8011920:	3316      	adds	r3, #22
 8011922:	009b      	lsls	r3, r3, #2
 8011924:	440b      	add	r3, r1
 8011926:	edd3 7a00 	vldr	s15, [r3]
 801192a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 801192e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011936:	ee17 0a90 	vmov	r0, s15
 801193a:	f7ee fdb7 	bl	80004ac <__aeabi_f2d>
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011946:	f7ee fc53 	bl	80001f0 <__adddf3>
 801194a:	4602      	mov	r2, r0
 801194c:	460b      	mov	r3, r1
 801194e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8011952:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011956:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801195a:	f7ef f899 	bl	8000a90 <__aeabi_dcmpun>
 801195e:	4603      	mov	r3, r0
 8011960:	2b00      	cmp	r3, #0
 8011962:	d109      	bne.n	8011978 <kalmanCoreScalarUpdate+0x288>
 8011964:	f04f 0200 	mov.w	r2, #0
 8011968:	4b22      	ldr	r3, [pc, #136]	@ (80119f4 <kalmanCoreScalarUpdate+0x304>)
 801196a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801196e:	f7ef f885 	bl	8000a7c <__aeabi_dcmpgt>
 8011972:	4603      	mov	r3, r0
 8011974:	2b00      	cmp	r3, #0
 8011976:	d041      	beq.n	80119fc <kalmanCoreScalarUpdate+0x30c>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8011978:	68f9      	ldr	r1, [r7, #12]
 801197a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801197c:	4613      	mov	r3, r2
 801197e:	00db      	lsls	r3, r3, #3
 8011980:	4413      	add	r3, r2
 8011982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011984:	4413      	add	r3, r2
 8011986:	3316      	adds	r3, #22
 8011988:	009b      	lsls	r3, r3, #2
 801198a:	440b      	add	r3, r1
 801198c:	4a1a      	ldr	r2, [pc, #104]	@ (80119f8 <kalmanCoreScalarUpdate+0x308>)
 801198e:	601a      	str	r2, [r3, #0]
 8011990:	68f9      	ldr	r1, [r7, #12]
 8011992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011994:	4613      	mov	r3, r2
 8011996:	00db      	lsls	r3, r3, #3
 8011998:	4413      	add	r3, r2
 801199a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801199c:	4413      	add	r3, r2
 801199e:	3316      	adds	r3, #22
 80119a0:	009b      	lsls	r3, r3, #2
 80119a2:	440b      	add	r3, r1
 80119a4:	6819      	ldr	r1, [r3, #0]
 80119a6:	68f8      	ldr	r0, [r7, #12]
 80119a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119aa:	4613      	mov	r3, r2
 80119ac:	00db      	lsls	r3, r3, #3
 80119ae:	4413      	add	r3, r2
 80119b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80119b2:	4413      	add	r3, r2
 80119b4:	3316      	adds	r3, #22
 80119b6:	009b      	lsls	r3, r3, #2
 80119b8:	4403      	add	r3, r0
 80119ba:	6019      	str	r1, [r3, #0]
 80119bc:	e074      	b.n	8011aa8 <kalmanCoreScalarUpdate+0x3b8>
 80119be:	bf00      	nop
 80119c0:	0801e9a8 	.word	0x0801e9a8
 80119c4:	0801e9d4 	.word	0x0801e9d4
 80119c8:	0801e9e8 	.word	0x0801e9e8
 80119cc:	20000080 	.word	0x20000080
 80119d0:	20000088 	.word	0x20000088
 80119d4:	10003f10 	.word	0x10003f10
 80119d8:	0801ea04 	.word	0x0801ea04
 80119dc:	10003afc 	.word	0x10003afc
 80119e0:	20000098 	.word	0x20000098
 80119e4:	20000090 	.word	0x20000090
 80119e8:	10003b20 	.word	0x10003b20
 80119ec:	200000a0 	.word	0x200000a0
 80119f0:	200000a8 	.word	0x200000a8
 80119f4:	40590000 	.word	0x40590000
 80119f8:	42c80000 	.word	0x42c80000
      } else if ( i==j && p < MIN_COVARIANCE ) {
 80119fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80119fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d12c      	bne.n	8011a5e <kalmanCoreScalarUpdate+0x36e>
 8011a04:	a337      	add	r3, pc, #220	@ (adr r3, 8011ae4 <kalmanCoreScalarUpdate+0x3f4>)
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011a0e:	f7ef f817 	bl	8000a40 <__aeabi_dcmplt>
 8011a12:	4603      	mov	r3, r0
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d022      	beq.n	8011a5e <kalmanCoreScalarUpdate+0x36e>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8011a18:	68f9      	ldr	r1, [r7, #12]
 8011a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a1c:	4613      	mov	r3, r2
 8011a1e:	00db      	lsls	r3, r3, #3
 8011a20:	4413      	add	r3, r2
 8011a22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a24:	4413      	add	r3, r2
 8011a26:	3316      	adds	r3, #22
 8011a28:	009b      	lsls	r3, r3, #2
 8011a2a:	440b      	add	r3, r1
 8011a2c:	4a2c      	ldr	r2, [pc, #176]	@ (8011ae0 <kalmanCoreScalarUpdate+0x3f0>)
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	68f9      	ldr	r1, [r7, #12]
 8011a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a34:	4613      	mov	r3, r2
 8011a36:	00db      	lsls	r3, r3, #3
 8011a38:	4413      	add	r3, r2
 8011a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a3c:	4413      	add	r3, r2
 8011a3e:	3316      	adds	r3, #22
 8011a40:	009b      	lsls	r3, r3, #2
 8011a42:	440b      	add	r3, r1
 8011a44:	6819      	ldr	r1, [r3, #0]
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	00db      	lsls	r3, r3, #3
 8011a4e:	4413      	add	r3, r2
 8011a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a52:	4413      	add	r3, r2
 8011a54:	3316      	adds	r3, #22
 8011a56:	009b      	lsls	r3, r3, #2
 8011a58:	4403      	add	r3, r0
 8011a5a:	6019      	str	r1, [r3, #0]
 8011a5c:	e024      	b.n	8011aa8 <kalmanCoreScalarUpdate+0x3b8>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8011a5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011a62:	f7ef f82b 	bl	8000abc <__aeabi_d2f>
 8011a66:	68f9      	ldr	r1, [r7, #12]
 8011a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	00db      	lsls	r3, r3, #3
 8011a6e:	4413      	add	r3, r2
 8011a70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a72:	4413      	add	r3, r2
 8011a74:	3316      	adds	r3, #22
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	440b      	add	r3, r1
 8011a7a:	6018      	str	r0, [r3, #0]
 8011a7c:	68f9      	ldr	r1, [r7, #12]
 8011a7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a80:	4613      	mov	r3, r2
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	4413      	add	r3, r2
 8011a86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a88:	4413      	add	r3, r2
 8011a8a:	3316      	adds	r3, #22
 8011a8c:	009b      	lsls	r3, r3, #2
 8011a8e:	440b      	add	r3, r1
 8011a90:	6819      	ldr	r1, [r3, #0]
 8011a92:	68f8      	ldr	r0, [r7, #12]
 8011a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a96:	4613      	mov	r3, r2
 8011a98:	00db      	lsls	r3, r3, #3
 8011a9a:	4413      	add	r3, r2
 8011a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a9e:	4413      	add	r3, r2
 8011aa0:	3316      	adds	r3, #22
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	4403      	add	r3, r0
 8011aa6:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8011aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aaa:	3301      	adds	r3, #1
 8011aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8011aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab0:	2b08      	cmp	r3, #8
 8011ab2:	f77f af04 	ble.w	80118be <kalmanCoreScalarUpdate+0x1ce>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ab8:	3301      	adds	r3, #1
 8011aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011abe:	2b08      	cmp	r3, #8
 8011ac0:	f77f aefa 	ble.w	80118b8 <kalmanCoreScalarUpdate+0x1c8>
      }
    }
  }

  assertStateNotNaN(this);
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f7ff fc7b 	bl	80113c0 <assertStateNotNaN>

  this->isUpdated = true;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2201      	movs	r2, #1
 8011ace:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8011ad2:	bf00      	nop
 8011ad4:	3740      	adds	r7, #64	@ 0x40
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}
 8011ada:	bf00      	nop
 8011adc:	f3af 8000 	nop.w
 8011ae0:	358637bd 	.word	0x358637bd
 8011ae4:	a0000000 	.word	0xa0000000
 8011ae8:	3eb0c6f7 	.word	0x3eb0c6f7
 8011aec:	00000000 	.word	0x00000000

08011af0 <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 8011af0:	b590      	push	{r4, r7, lr}
 8011af2:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	f507 7430 	add.w	r4, r7, #704	@ 0x2c0
 8011afc:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 8011b00:	6020      	str	r0, [r4, #0]
 8011b02:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 8011b06:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 8011b0a:	6001      	str	r1, [r0, #0]
 8011b0c:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 8011b10:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 8011b14:	600a      	str	r2, [r1, #0]
 8011b16:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 8011b1a:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 8011b1e:	6013      	str	r3, [r2, #0]
 8011b20:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011b24:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011b28:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static double tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8011b32:	e030      	b.n	8011b96 <kalmanCoreUpdateWithPKE+0xa6>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 8011b34:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011b38:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011b3c:	681a      	ldr	r2, [r3, #0]
 8011b3e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4413      	add	r3, r2
 8011b46:	ed93 7a00 	vldr	s14, [r3]
 8011b4a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011b4e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	685a      	ldr	r2, [r3, #4]
 8011b56:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	4413      	add	r3, r2
 8011b5e:	edd3 6a00 	vldr	s13, [r3]
 8011b62:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011b66:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 8011b6a:	edd3 7a00 	vldr	s15, [r3]
 8011b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b76:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011b7a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8011b84:	009b      	lsls	r3, r3, #2
 8011b86:	4413      	add	r3, r2
 8011b88:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 8011b8c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8011b90:	3301      	adds	r3, #1
 8011b92:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8011b96:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 8011b9a:	2b08      	cmp	r3, #8
 8011b9c:	ddca      	ble.n	8011b34 <kalmanCoreUpdateWithPKE+0x44>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 8011b9e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011ba2:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 8011ba6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011baa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 8011bae:	4ad0      	ldr	r2, [pc, #832]	@ (8011ef0 <kalmanCoreUpdateWithPKE+0x400>)
 8011bb0:	6809      	ldr	r1, [r1, #0]
 8011bb2:	6818      	ldr	r0, [r3, #0]
 8011bb4:	f7ff fb80 	bl	80112b8 <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 8011bb8:	49cd      	ldr	r1, [pc, #820]	@ (8011ef0 <kalmanCoreUpdateWithPKE+0x400>)
 8011bba:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 8011bbe:	48cc      	ldr	r0, [pc, #816]	@ (8011ef0 <kalmanCoreUpdateWithPKE+0x400>)
 8011bc0:	f7ff fbde 	bl	8011380 <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 8011bc4:	2300      	movs	r3, #0
 8011bc6:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8011bca:	e021      	b.n	8011c10 <kalmanCoreUpdateWithPKE+0x120>
 8011bcc:	49c9      	ldr	r1, [pc, #804]	@ (8011ef4 <kalmanCoreUpdateWithPKE+0x404>)
 8011bce:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8011bd2:	4613      	mov	r3, r2
 8011bd4:	009b      	lsls	r3, r3, #2
 8011bd6:	4413      	add	r3, r2
 8011bd8:	011b      	lsls	r3, r3, #4
 8011bda:	440b      	add	r3, r1
 8011bdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8011be0:	f04f 0200 	mov.w	r2, #0
 8011be4:	4bc4      	ldr	r3, [pc, #784]	@ (8011ef8 <kalmanCoreUpdateWithPKE+0x408>)
 8011be6:	f7ee fb03 	bl	80001f0 <__adddf3>
 8011bea:	4602      	mov	r2, r0
 8011bec:	460b      	mov	r3, r1
 8011bee:	4610      	mov	r0, r2
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	4cc0      	ldr	r4, [pc, #768]	@ (8011ef4 <kalmanCoreUpdateWithPKE+0x404>)
 8011bf4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	4413      	add	r3, r2
 8011bfe:	011b      	lsls	r3, r3, #4
 8011c00:	4423      	add	r3, r4
 8011c02:	e9c3 0100 	strd	r0, r1, [r3]
 8011c06:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8011c10:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 8011c14:	2b08      	cmp	r3, #8
 8011c16:	ddd9      	ble.n	8011bcc <kalmanCoreUpdateWithPKE+0xdc>
    double Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 8011c18:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c1c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8011c20:	4618      	mov	r0, r3
 8011c22:	f44f 7322 	mov.w	r3, #648	@ 0x288
 8011c26:	461a      	mov	r2, r3
 8011c28:	2100      	movs	r1, #0
 8011c2a:	f009 fa03 	bl	801b034 <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 8011c2e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c32:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011c36:	2209      	movs	r2, #9
 8011c38:	801a      	strh	r2, [r3, #0]
 8011c3a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c3e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011c42:	2209      	movs	r2, #9
 8011c44:	805a      	strh	r2, [r3, #2]
 8011c46:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c4a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 8011c4e:	f107 0220 	add.w	r2, r7, #32
 8011c52:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 8011c54:	f107 0218 	add.w	r2, r7, #24
 8011c58:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c5c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 8011c60:	6819      	ldr	r1, [r3, #0]
 8011c62:	48a3      	ldr	r0, [pc, #652]	@ (8011ef0 <kalmanCoreUpdateWithPKE+0x400>)
 8011c64:	f7ff fb28 	bl	80112b8 <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 8011c68:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c6c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3358      	adds	r3, #88	@ 0x58
 8011c74:	f107 0120 	add.w	r1, r7, #32
 8011c78:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f009 fa1f 	bl	801b0c0 <memcpy>

    assertStateNotNaN(this);
 8011c82:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011c86:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011c8a:	6818      	ldr	r0, [r3, #0]
 8011c8c:	f7ff fb98 	bl	80113c0 <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 8011c90:	2300      	movs	r3, #0
 8011c92:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8011c96:	e10d      	b.n	8011eb4 <kalmanCoreUpdateWithPKE+0x3c4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 8011c98:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8011c9c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8011ca0:	e0fe      	b.n	8011ea0 <kalmanCoreUpdateWithPKE+0x3b0>
        double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8011ca2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011ca6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011caa:	6819      	ldr	r1, [r3, #0]
 8011cac:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011cb0:	4613      	mov	r3, r2
 8011cb2:	00db      	lsls	r3, r3, #3
 8011cb4:	4413      	add	r3, r2
 8011cb6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011cba:	4413      	add	r3, r2
 8011cbc:	3316      	adds	r3, #22
 8011cbe:	009b      	lsls	r3, r3, #2
 8011cc0:	440b      	add	r3, r1
 8011cc2:	edd3 7a00 	vldr	s15, [r3]
 8011cc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011cca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011cce:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011cd2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011cd6:	6819      	ldr	r1, [r3, #0]
 8011cd8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011cdc:	4613      	mov	r3, r2
 8011cde:	00db      	lsls	r3, r3, #3
 8011ce0:	4413      	add	r3, r2
 8011ce2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011ce6:	4413      	add	r3, r2
 8011ce8:	3316      	adds	r3, #22
 8011cea:	009b      	lsls	r3, r3, #2
 8011cec:	440b      	add	r3, r1
 8011cee:	edd3 7a00 	vldr	s15, [r3]
 8011cf2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8011cf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011cfe:	ee17 0a90 	vmov	r0, s15
 8011d02:	f7ee fbd3 	bl	80004ac <__aeabi_f2d>
 8011d06:	4602      	mov	r2, r0
 8011d08:	460b      	mov	r3, r1
 8011d0a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
        if (isnan(p) || p > MAX_COVARIANCE) {
 8011d0e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8011d12:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8011d16:	f7ee febb 	bl	8000a90 <__aeabi_dcmpun>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d109      	bne.n	8011d34 <kalmanCoreUpdateWithPKE+0x244>
 8011d20:	f04f 0200 	mov.w	r2, #0
 8011d24:	4b75      	ldr	r3, [pc, #468]	@ (8011efc <kalmanCoreUpdateWithPKE+0x40c>)
 8011d26:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8011d2a:	f7ee fea7 	bl	8000a7c <__aeabi_dcmpgt>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d034      	beq.n	8011d9e <kalmanCoreUpdateWithPKE+0x2ae>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8011d34:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011d38:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011d3c:	6819      	ldr	r1, [r3, #0]
 8011d3e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011d42:	4613      	mov	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	4413      	add	r3, r2
 8011d48:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011d4c:	4413      	add	r3, r2
 8011d4e:	3316      	adds	r3, #22
 8011d50:	009b      	lsls	r3, r3, #2
 8011d52:	440b      	add	r3, r1
 8011d54:	4a6a      	ldr	r2, [pc, #424]	@ (8011f00 <kalmanCoreUpdateWithPKE+0x410>)
 8011d56:	601a      	str	r2, [r3, #0]
 8011d58:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011d5c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011d60:	6819      	ldr	r1, [r3, #0]
 8011d62:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011d66:	4613      	mov	r3, r2
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	4413      	add	r3, r2
 8011d6c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011d70:	4413      	add	r3, r2
 8011d72:	3316      	adds	r3, #22
 8011d74:	009b      	lsls	r3, r3, #2
 8011d76:	440b      	add	r3, r1
 8011d78:	6819      	ldr	r1, [r3, #0]
 8011d7a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011d7e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011d82:	6818      	ldr	r0, [r3, #0]
 8011d84:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011d88:	4613      	mov	r3, r2
 8011d8a:	00db      	lsls	r3, r3, #3
 8011d8c:	4413      	add	r3, r2
 8011d8e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011d92:	4413      	add	r3, r2
 8011d94:	3316      	adds	r3, #22
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	4403      	add	r3, r0
 8011d9a:	6019      	str	r1, [r3, #0]
 8011d9c:	e07b      	b.n	8011e96 <kalmanCoreUpdateWithPKE+0x3a6>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 8011d9e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011da2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d13e      	bne.n	8011e28 <kalmanCoreUpdateWithPKE+0x338>
 8011daa:	a34f      	add	r3, pc, #316	@ (adr r3, 8011ee8 <kalmanCoreUpdateWithPKE+0x3f8>)
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8011db4:	f7ee fe44 	bl	8000a40 <__aeabi_dcmplt>
 8011db8:	4603      	mov	r3, r0
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	d034      	beq.n	8011e28 <kalmanCoreUpdateWithPKE+0x338>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8011dbe:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011dc2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011dc6:	6819      	ldr	r1, [r3, #0]
 8011dc8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011dcc:	4613      	mov	r3, r2
 8011dce:	00db      	lsls	r3, r3, #3
 8011dd0:	4413      	add	r3, r2
 8011dd2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011dd6:	4413      	add	r3, r2
 8011dd8:	3316      	adds	r3, #22
 8011dda:	009b      	lsls	r3, r3, #2
 8011ddc:	440b      	add	r3, r1
 8011dde:	4a49      	ldr	r2, [pc, #292]	@ (8011f04 <kalmanCoreUpdateWithPKE+0x414>)
 8011de0:	601a      	str	r2, [r3, #0]
 8011de2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011de6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011dea:	6819      	ldr	r1, [r3, #0]
 8011dec:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011df0:	4613      	mov	r3, r2
 8011df2:	00db      	lsls	r3, r3, #3
 8011df4:	4413      	add	r3, r2
 8011df6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011dfa:	4413      	add	r3, r2
 8011dfc:	3316      	adds	r3, #22
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	440b      	add	r3, r1
 8011e02:	6819      	ldr	r1, [r3, #0]
 8011e04:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011e08:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011e0c:	6818      	ldr	r0, [r3, #0]
 8011e0e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011e12:	4613      	mov	r3, r2
 8011e14:	00db      	lsls	r3, r3, #3
 8011e16:	4413      	add	r3, r2
 8011e18:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011e1c:	4413      	add	r3, r2
 8011e1e:	3316      	adds	r3, #22
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	4403      	add	r3, r0
 8011e24:	6019      	str	r1, [r3, #0]
 8011e26:	e036      	b.n	8011e96 <kalmanCoreUpdateWithPKE+0x3a6>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 8011e28:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 8011e2c:	f7ee fe46 	bl	8000abc <__aeabi_d2f>
 8011e30:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011e34:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011e38:	6819      	ldr	r1, [r3, #0]
 8011e3a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011e3e:	4613      	mov	r3, r2
 8011e40:	00db      	lsls	r3, r3, #3
 8011e42:	4413      	add	r3, r2
 8011e44:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011e48:	4413      	add	r3, r2
 8011e4a:	3316      	adds	r3, #22
 8011e4c:	009b      	lsls	r3, r3, #2
 8011e4e:	440b      	add	r3, r1
 8011e50:	6018      	str	r0, [r3, #0]
 8011e52:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011e56:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011e5a:	6819      	ldr	r1, [r3, #0]
 8011e5c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011e60:	4613      	mov	r3, r2
 8011e62:	00db      	lsls	r3, r3, #3
 8011e64:	4413      	add	r3, r2
 8011e66:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011e6a:	4413      	add	r3, r2
 8011e6c:	3316      	adds	r3, #22
 8011e6e:	009b      	lsls	r3, r3, #2
 8011e70:	440b      	add	r3, r1
 8011e72:	6819      	ldr	r1, [r3, #0]
 8011e74:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011e78:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011e7c:	6818      	ldr	r0, [r3, #0]
 8011e7e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 8011e82:	4613      	mov	r3, r2
 8011e84:	00db      	lsls	r3, r3, #3
 8011e86:	4413      	add	r3, r2
 8011e88:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 8011e8c:	4413      	add	r3, r2
 8011e8e:	3316      	adds	r3, #22
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4403      	add	r3, r0
 8011e94:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 8011e96:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8011e9a:	3301      	adds	r3, #1
 8011e9c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8011ea0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 8011ea4:	2b08      	cmp	r3, #8
 8011ea6:	f77f aefc 	ble.w	8011ca2 <kalmanCoreUpdateWithPKE+0x1b2>
    for (int i=0; i<KC_STATE_DIM; i++) {
 8011eaa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8011eae:	3301      	adds	r3, #1
 8011eb0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8011eb4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 8011eb8:	2b08      	cmp	r3, #8
 8011eba:	f77f aeed 	ble.w	8011c98 <kalmanCoreUpdateWithPKE+0x1a8>
            }
        }
    }
    assertStateNotNaN(this);
 8011ebe:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011ec2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011ec6:	6818      	ldr	r0, [r3, #0]
 8011ec8:	f7ff fa7a 	bl	80113c0 <assertStateNotNaN>

    this->isUpdated = true;
 8011ecc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8011ed0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 8011ed4:	681b      	ldr	r3, [r3, #0]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8011edc:	bf00      	nop
 8011ede:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd90      	pop	{r4, r7, pc}
 8011ee6:	bf00      	nop
 8011ee8:	a0000000 	.word	0xa0000000
 8011eec:	3eb0c6f7 	.word	0x3eb0c6f7
 8011ef0:	200000b0 	.word	0x200000b0
 8011ef4:	200099a8 	.word	0x200099a8
 8011ef8:	3ff00000 	.word	0x3ff00000
 8011efc:	40590000 	.word	0x40590000
 8011f00:	42c80000 	.word	0x42c80000
 8011f04:	358637bd 	.word	0x358637bd

08011f08 <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b090      	sub	sp, #64	@ 0x40
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	60f8      	str	r0, [r7, #12]
 8011f10:	60b9      	str	r1, [r7, #8]
 8011f12:	ed87 0a01 	vstr	s0, [r7, #4]
 8011f16:	4613      	mov	r3, r2
 8011f18:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 8011f1a:	f107 0318 	add.w	r3, r7, #24
 8011f1e:	2224      	movs	r2, #36	@ 0x24
 8011f20:	2100      	movs	r1, #0
 8011f22:	4618      	mov	r0, r3
 8011f24:	f009 f886 	bl	801b034 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8011f28:	2301      	movs	r3, #1
 8011f2a:	823b      	strh	r3, [r7, #16]
 8011f2c:	2309      	movs	r3, #9
 8011f2e:	827b      	strh	r3, [r7, #18]
 8011f30:	f107 0318 	add.w	r3, r7, #24
 8011f34:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 8011f36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011f3a:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 8011f3c:	78fb      	ldrb	r3, [r7, #3]
 8011f3e:	f083 0301 	eor.w	r3, r3, #1
 8011f42:	b2db      	uxtb	r3, r3
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d109      	bne.n	8011f5c <kalmanCoreUpdateWithBaro+0x54>
 8011f48:	68fb      	ldr	r3, [r7, #12]
 8011f4a:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 8011f4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011f52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f5a:	d503      	bpl.n	8011f64 <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	687a      	ldr	r2, [r7, #4]
 8011f60:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  }

  float meas = (baroAsl - this->baroReferenceHeight);
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 8011f6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8011f6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f72:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	edd3 7a02 	vldr	s15, [r3, #8]
 8011f7c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8011f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8011f8a:	f107 0310 	add.w	r3, r7, #16
 8011f8e:	eef0 0a47 	vmov.f32	s1, s14
 8011f92:	eeb0 0a67 	vmov.f32	s0, s15
 8011f96:	4619      	mov	r1, r3
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f7ff fba9 	bl	80116f0 <kalmanCoreScalarUpdate>
}
 8011f9e:	bf00      	nop
 8011fa0:	3740      	adds	r7, #64	@ 0x40
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b0a2      	sub	sp, #136	@ 0x88
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6178      	str	r0, [r7, #20]
 8011fb0:	6139      	str	r1, [r7, #16]
 8011fb2:	60fa      	str	r2, [r7, #12]
 8011fb4:	ed87 0a02 	vstr	s0, [r7, #8]
 8011fb8:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 8011fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8011fbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011fc2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 8011fc6:	4bd2      	ldr	r3, [pc, #840]	@ (8012310 <predictDt+0x368>)
 8011fc8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011fcc:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 8011fce:	4bd0      	ldr	r3, [pc, #832]	@ (8012310 <predictDt+0x368>)
 8011fd0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011fd4:	629a      	str	r2, [r3, #40]	@ 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 8011fd6:	4bce      	ldr	r3, [pc, #824]	@ (8012310 <predictDt+0x368>)
 8011fd8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011fdc:	651a      	str	r2, [r3, #80]	@ 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 8011fde:	4bcc      	ldr	r3, [pc, #816]	@ (8012310 <predictDt+0x368>)
 8011fe0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011fe4:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 8011fe6:	4bca      	ldr	r3, [pc, #808]	@ (8012310 <predictDt+0x368>)
 8011fe8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011fec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 8011ff0:	4bc7      	ldr	r3, [pc, #796]	@ (8012310 <predictDt+0x368>)
 8011ff2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011ff6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 8011ffa:	4bc5      	ldr	r3, [pc, #788]	@ (8012310 <predictDt+0x368>)
 8011ffc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012000:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 8012004:	4bc2      	ldr	r3, [pc, #776]	@ (8012310 <predictDt+0x368>)
 8012006:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801200a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 801200e:	4bc0      	ldr	r3, [pc, #768]	@ (8012310 <predictDt+0x368>)
 8012010:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012014:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 8012018:	697b      	ldr	r3, [r7, #20]
 801201a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801201e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012026:	4bba      	ldr	r3, [pc, #744]	@ (8012310 <predictDt+0x368>)
 8012028:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8012032:	edd7 7a02 	vldr	s15, [r7, #8]
 8012036:	ee67 7a27 	vmul.f32	s15, s14, s15
 801203a:	4bb5      	ldr	r3, [pc, #724]	@ (8012310 <predictDt+0x368>)
 801203c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 8012046:	edd7 7a02 	vldr	s15, [r7, #8]
 801204a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801204e:	4bb0      	ldr	r3, [pc, #704]	@ (8012310 <predictDt+0x368>)
 8012050:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 801205a:	edd7 7a02 	vldr	s15, [r7, #8]
 801205e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012062:	4bab      	ldr	r3, [pc, #684]	@ (8012310 <predictDt+0x368>)
 8012064:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 8012068:	697b      	ldr	r3, [r7, #20]
 801206a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 801206e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012076:	4ba6      	ldr	r3, [pc, #664]	@ (8012310 <predictDt+0x368>)
 8012078:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 8012082:	edd7 7a02 	vldr	s15, [r7, #8]
 8012086:	ee67 7a27 	vmul.f32	s15, s14, s15
 801208a:	4ba1      	ldr	r3, [pc, #644]	@ (8012310 <predictDt+0x368>)
 801208c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8012096:	edd7 7a02 	vldr	s15, [r7, #8]
 801209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801209e:	4b9c      	ldr	r3, [pc, #624]	@ (8012310 <predictDt+0x368>)
 80120a0:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 80120aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80120ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120b2:	4b97      	ldr	r3, [pc, #604]	@ (8012310 <predictDt+0x368>)
 80120b4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 80120be:	edd7 7a02 	vldr	s15, [r7, #8]
 80120c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120c6:	4b92      	ldr	r3, [pc, #584]	@ (8012310 <predictDt+0x368>)
 80120c8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 80120cc:	697b      	ldr	r3, [r7, #20]
 80120ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80120d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	edd3 6a05 	vldr	s13, [r3, #20]
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80120e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80120ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80120f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80120f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80120f8:	4b85      	ldr	r3, [pc, #532]	@ (8012310 <predictDt+0x368>)
 80120fa:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 80120fe:	697b      	ldr	r3, [r7, #20]
 8012100:	ed93 7a04 	vldr	s14, [r3, #16]
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 801210a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801210e:	697b      	ldr	r3, [r7, #20]
 8012110:	edd3 6a05 	vldr	s13, [r3, #20]
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 801211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801211e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012122:	edd7 7a02 	vldr	s15, [r7, #8]
 8012126:	ee67 7a27 	vmul.f32	s15, s14, s15
 801212a:	4b79      	ldr	r3, [pc, #484]	@ (8012310 <predictDt+0x368>)
 801212c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 8012130:	697b      	ldr	r3, [r7, #20]
 8012132:	ed93 7a04 	vldr	s14, [r3, #16]
 8012136:	697b      	ldr	r3, [r7, #20]
 8012138:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 801213c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	edd3 6a05 	vldr	s13, [r3, #20]
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012150:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012154:	edd7 7a02 	vldr	s15, [r7, #8]
 8012158:	ee67 7a27 	vmul.f32	s15, s14, s15
 801215c:	4b6c      	ldr	r3, [pc, #432]	@ (8012310 <predictDt+0x368>)
 801215e:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	edd3 7a03 	vldr	s15, [r3, #12]
 8012168:	eeb1 7a67 	vneg.f32	s14, s15
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8012172:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	edd3 6a05 	vldr	s13, [r3, #20]
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8012182:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012186:	ee37 7a27 	vadd.f32	s14, s14, s15
 801218a:	edd7 7a02 	vldr	s15, [r7, #8]
 801218e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012192:	4b5f      	ldr	r3, [pc, #380]	@ (8012310 <predictDt+0x368>)
 8012194:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 8012198:	697b      	ldr	r3, [r7, #20]
 801219a:	edd3 7a03 	vldr	s15, [r3, #12]
 801219e:	eeb1 7a67 	vneg.f32	s14, s15
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80121a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80121ac:	697b      	ldr	r3, [r7, #20]
 80121ae:	edd3 6a05 	vldr	s13, [r3, #20]
 80121b2:	697b      	ldr	r3, [r7, #20]
 80121b4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80121b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80121bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80121c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121c8:	4b51      	ldr	r3, [pc, #324]	@ (8012310 <predictDt+0x368>)
 80121ca:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80121d4:	eeb1 7a67 	vneg.f32	s14, s15
 80121d8:	697b      	ldr	r3, [r7, #20]
 80121da:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80121de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	edd3 6a05 	vldr	s13, [r3, #20]
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80121ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80121f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80121f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80121fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121fe:	4b44      	ldr	r3, [pc, #272]	@ (8012310 <predictDt+0x368>)
 8012200:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	ed93 7a03 	vldr	s14, [r3, #12]
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8012210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012214:	697b      	ldr	r3, [r7, #20]
 8012216:	edd3 6a04 	vldr	s13, [r3, #16]
 801221a:	697b      	ldr	r3, [r7, #20]
 801221c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8012220:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012224:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012228:	edd7 7a02 	vldr	s15, [r7, #8]
 801222c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012230:	4b37      	ldr	r3, [pc, #220]	@ (8012310 <predictDt+0x368>)
 8012232:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 8012236:	697b      	ldr	r3, [r7, #20]
 8012238:	ed93 7a03 	vldr	s14, [r3, #12]
 801223c:	697b      	ldr	r3, [r7, #20]
 801223e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8012242:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	edd3 6a04 	vldr	s13, [r3, #16]
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8012252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012256:	ee37 7a67 	vsub.f32	s14, s14, s15
 801225a:	edd7 7a02 	vldr	s15, [r7, #8]
 801225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012262:	4b2b      	ldr	r3, [pc, #172]	@ (8012310 <predictDt+0x368>)
 8012264:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 8012268:	697b      	ldr	r3, [r7, #20]
 801226a:	ed93 7a03 	vldr	s14, [r3, #12]
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8012274:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	edd3 6a04 	vldr	s13, [r3, #16]
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8012284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012288:	ee37 7a67 	vsub.f32	s14, s14, s15
 801228c:	edd7 7a02 	vldr	s15, [r7, #8]
 8012290:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012294:	4b1e      	ldr	r3, [pc, #120]	@ (8012310 <predictDt+0x368>)
 8012296:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 801229a:	4b1d      	ldr	r3, [pc, #116]	@ (8012310 <predictDt+0x368>)
 801229c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80122a0:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	edd3 7a02 	vldr	s15, [r3, #8]
 80122a8:	eeb1 7a67 	vneg.f32	s14, s15
 80122ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80122b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122b4:	4b16      	ldr	r3, [pc, #88]	@ (8012310 <predictDt+0x368>)
 80122b6:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80122c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80122c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122c8:	4b11      	ldr	r3, [pc, #68]	@ (8012310 <predictDt+0x368>)
 80122ca:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80122d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80122d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122dc:	4b0c      	ldr	r3, [pc, #48]	@ (8012310 <predictDt+0x368>)
 80122de:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 80122e2:	4b0b      	ldr	r3, [pc, #44]	@ (8012310 <predictDt+0x368>)
 80122e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80122e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	edd3 7a00 	vldr	s15, [r3]
 80122f2:	eeb1 7a67 	vneg.f32	s14, s15
 80122f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80122fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122fe:	4b04      	ldr	r3, [pc, #16]	@ (8012310 <predictDt+0x368>)
 8012300:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	edd3 7a01 	vldr	s15, [r3, #4]
 801230a:	eeb1 7a67 	vneg.f32	s14, s15
 801230e:	e001      	b.n	8012314 <predictDt+0x36c>
 8012310:	10003f34 	.word	0x10003f34
 8012314:	edd7 7a02 	vldr	s15, [r7, #8]
 8012318:	ee67 7a27 	vmul.f32	s15, s14, s15
 801231c:	4bb2      	ldr	r3, [pc, #712]	@ (80125e8 <predictDt+0x640>)
 801231e:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	ed93 7a00 	vldr	s14, [r3]
 8012328:	edd7 7a02 	vldr	s15, [r7, #8]
 801232c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012330:	4bad      	ldr	r3, [pc, #692]	@ (80125e8 <predictDt+0x640>)
 8012332:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 8012336:	4bac      	ldr	r3, [pc, #688]	@ (80125e8 <predictDt+0x640>)
 8012338:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801233c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 8012340:	4ba9      	ldr	r3, [pc, #676]	@ (80125e8 <predictDt+0x640>)
 8012342:	f04f 0200 	mov.w	r2, #0
 8012346:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012350:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 80125ec <predictDt+0x644>
 8012354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012358:	edd7 7a02 	vldr	s15, [r7, #8]
 801235c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012360:	4ba1      	ldr	r3, [pc, #644]	@ (80125e8 <predictDt+0x640>)
 8012362:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 8012366:	697b      	ldr	r3, [r7, #20]
 8012368:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801236c:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 80125fc <predictDt+0x654>
 8012370:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012374:	edd7 7a02 	vldr	s15, [r7, #8]
 8012378:	ee67 7a27 	vmul.f32	s15, s14, s15
 801237c:	4b9a      	ldr	r3, [pc, #616]	@ (80125e8 <predictDt+0x640>)
 801237e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 8012382:	697b      	ldr	r3, [r7, #20]
 8012384:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012388:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80125fc <predictDt+0x654>
 801238c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8012390:	edd7 7a02 	vldr	s15, [r7, #8]
 8012394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012398:	4b93      	ldr	r3, [pc, #588]	@ (80125e8 <predictDt+0x640>)
 801239a:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 801239e:	4b92      	ldr	r3, [pc, #584]	@ (80125e8 <predictDt+0x640>)
 80123a0:	f04f 0200 	mov.w	r2, #0
 80123a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 80123a8:	697b      	ldr	r3, [r7, #20]
 80123aa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80123ae:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80125ec <predictDt+0x644>
 80123b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80123b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80123ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123be:	4b8a      	ldr	r3, [pc, #552]	@ (80125e8 <predictDt+0x640>)
 80123c0:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80123ca:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 80125ec <predictDt+0x644>
 80123ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80123d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80123d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123da:	4b83      	ldr	r3, [pc, #524]	@ (80125e8 <predictDt+0x640>)
 80123dc:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80123e6:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80125fc <predictDt+0x654>
 80123ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80123ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80123f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123f6:	4b7c      	ldr	r3, [pc, #496]	@ (80125e8 <predictDt+0x640>)
 80123f8:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 80123fc:	4b7a      	ldr	r3, [pc, #488]	@ (80125e8 <predictDt+0x640>)
 80123fe:	f04f 0200 	mov.w	r2, #0
 8012402:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	ed93 7a00 	vldr	s14, [r3]
 801240c:	edd7 7a02 	vldr	s15, [r7, #8]
 8012410:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012414:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801241c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float d1 = gyro->y*dt/2;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	ed93 7a01 	vldr	s14, [r3, #4]
 8012426:	edd7 7a02 	vldr	s15, [r7, #8]
 801242a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801242e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012432:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012436:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float d2 = gyro->z*dt/2;
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012440:	edd7 7a02 	vldr	s15, [r7, #8]
 8012444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012448:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801244c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012450:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 8012454:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8012458:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801245c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012460:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012464:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012468:	ee37 7a67 	vsub.f32	s14, s14, s15
 801246c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012470:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012474:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8012478:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801247c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012480:	4b59      	ldr	r3, [pc, #356]	@ (80125e8 <predictDt+0x640>)
 8012482:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 8012486:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 801248a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801248e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012492:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012496:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801249a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801249e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80124a2:	4b51      	ldr	r3, [pc, #324]	@ (80125e8 <predictDt+0x640>)
 80124a4:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 80124a8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80124ac:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80124b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80124b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80124bc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80124c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124c4:	4b48      	ldr	r3, [pc, #288]	@ (80125e8 <predictDt+0x640>)
 80124c6:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 80124ca:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80124ce:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80124d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80124da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80124de:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80124e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80124e6:	4b40      	ldr	r3, [pc, #256]	@ (80125e8 <predictDt+0x640>)
 80124e8:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 80124ec:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80124f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80124f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80124f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80124fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012500:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012504:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012508:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801250c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8012510:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8012514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012518:	4b33      	ldr	r3, [pc, #204]	@ (80125e8 <predictDt+0x640>)
 801251a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 801251e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8012522:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012526:	ee67 7a27 	vmul.f32	s15, s14, s15
 801252a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801252e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012532:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8012536:	ee77 7a27 	vadd.f32	s15, s14, s15
 801253a:	4b2b      	ldr	r3, [pc, #172]	@ (80125e8 <predictDt+0x640>)
 801253c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 8012540:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8012544:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8012548:	ee67 7a27 	vmul.f32	s15, s14, s15
 801254c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012550:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012554:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8012558:	ee77 7a27 	vadd.f32	s15, s14, s15
 801255c:	4b22      	ldr	r3, [pc, #136]	@ (80125e8 <predictDt+0x640>)
 801255e:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 8012562:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 8012566:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801256a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801256e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012572:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012576:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 801257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801257e:	4b1a      	ldr	r3, [pc, #104]	@ (80125e8 <predictDt+0x640>)
 8012580:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 8012584:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8012588:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801258c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012590:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012598:	ee37 7a67 	vsub.f32	s14, s14, s15
 801259c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80125a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80125a4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80125a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80125ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80125b0:	4b0d      	ldr	r3, [pc, #52]	@ (80125e8 <predictDt+0x640>)
 80125b2:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80125bc:	4a0c      	ldr	r2, [pc, #48]	@ (80125f0 <predictDt+0x648>)
 80125be:	4619      	mov	r1, r3
 80125c0:	480c      	ldr	r0, [pc, #48]	@ (80125f4 <predictDt+0x64c>)
 80125c2:	f7fe fe79 	bl	80112b8 <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 80125c6:	490c      	ldr	r1, [pc, #48]	@ (80125f8 <predictDt+0x650>)
 80125c8:	480a      	ldr	r0, [pc, #40]	@ (80125f4 <predictDt+0x64c>)
 80125ca:	f7fe fe53 	bl	8011274 <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80125d4:	461a      	mov	r2, r3
 80125d6:	4908      	ldr	r1, [pc, #32]	@ (80125f8 <predictDt+0x650>)
 80125d8:	4805      	ldr	r0, [pc, #20]	@ (80125f0 <predictDt+0x648>)
 80125da:	f7fe fe6d 	bl	80112b8 <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 80125de:	79fb      	ldrb	r3, [r7, #7]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	f000 8125 	beq.w	8012830 <predictDt+0x888>
 80125e6:	e00b      	b.n	8012600 <predictDt+0x658>
 80125e8:	10003f34 	.word	0x10003f34
 80125ec:	c11cf5c3 	.word	0xc11cf5c3
 80125f0:	200000c0 	.word	0x200000c0
 80125f4:	200000b8 	.word	0x200000b8
 80125f8:	200000c8 	.word	0x200000c8
 80125fc:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 8012600:	693b      	ldr	r3, [r7, #16]
 8012602:	689b      	ldr	r3, [r3, #8]
 8012604:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	edd3 7a03 	vldr	s15, [r3, #12]
 801260c:	ed97 7a02 	vldr	s14, [r7, #8]
 8012610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012614:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt;
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	edd3 7a04 	vldr	s15, [r3, #16]
 801261e:	ed97 7a02 	vldr	s14, [r7, #8]
 8012622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012626:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	ed93 7a05 	vldr	s14, [r3, #20]
 8012630:	edd7 7a02 	vldr	s15, [r7, #8]
 8012634:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012638:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 801263c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012640:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012644:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8012648:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801264c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012650:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	ed93 7a00 	vldr	s14, [r3]
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8012660:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8012664:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 801266e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8012672:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012676:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801267a:	697b      	ldr	r3, [r7, #20]
 801267c:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8012680:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8012684:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012688:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012690:	697b      	ldr	r3, [r7, #20]
 8012692:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	ed93 7a01 	vldr	s14, [r3, #4]
 801269c:	697b      	ldr	r3, [r7, #20]
 801269e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80126a2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80126a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 80126b0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80126b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80126b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 80126c2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80126c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80126ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80126ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	ed93 7a02 	vldr	s14, [r3, #8]
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 80126e4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80126e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 80126f2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80126f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80126fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80126fe:	697b      	ldr	r3, [r7, #20]
 8012700:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8012704:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8012708:	ee66 7a27 	vmul.f32	s15, s12, s15
 801270c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012710:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012714:	ed1f 6a47 	vldr	s12, [pc, #-284]	@ 80125fc <predictDt+0x654>
 8012718:	ee27 6a86 	vmul.f32	s12, s15, s12
 801271c:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8012720:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012724:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012728:	ee77 7a27 	vadd.f32	s15, s14, s15
 801272c:	697b      	ldr	r3, [r7, #20]
 801272e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	68db      	ldr	r3, [r3, #12]
 8012736:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	691b      	ldr	r3, [r3, #16]
 801273c:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	695b      	ldr	r3, [r3, #20]
 8012742:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	ed93 7a03 	vldr	s14, [r3, #12]
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	edd3 6a02 	vldr	s13, [r3, #8]
 8012750:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012754:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	ed93 6a01 	vldr	s12, [r3, #4]
 801275e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8012762:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012766:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8012770:	ed1f 6a5e 	vldr	s12, [pc, #-376]	@ 80125fc <predictDt+0x654>
 8012774:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012778:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801277c:	edd7 7a02 	vldr	s15, [r7, #8]
 8012780:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012784:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012788:	697b      	ldr	r3, [r7, #20]
 801278a:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	ed93 7a04 	vldr	s14, [r3, #16]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	edd3 7a02 	vldr	s15, [r3, #8]
 801279a:	eef1 6a67 	vneg.f32	s13, s15
 801279e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80127a2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	ed93 6a00 	vldr	s12, [r3]
 80127ac:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80127b0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80127b4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80127be:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 80125fc <predictDt+0x654>
 80127c2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80127c6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80127ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80127ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80127d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80127d6:	697b      	ldr	r3, [r7, #20]
 80127d8:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	ed93 7a05 	vldr	s14, [r3, #20]
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80127e8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80127ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80127f0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80127f4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	ed93 6a00 	vldr	s12, [r3]
 80127fe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012802:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012806:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012810:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 80125fc <predictDt+0x654>
 8012814:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012818:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801281c:	edd7 7a02 	vldr	s15, [r7, #8]
 8012820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012828:	697b      	ldr	r3, [r7, #20]
 801282a:	edc3 7a05 	vstr	s15, [r3, #20]
 801282e:	e137      	b.n	8012aa0 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	ed93 7a03 	vldr	s14, [r3, #12]
 8012836:	edd7 7a02 	vldr	s15, [r7, #8]
 801283a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	edd3 6a00 	vldr	s13, [r3]
 8012844:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012848:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801284c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8012850:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8012854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012858:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	ed93 7a04 	vldr	s14, [r3, #16]
 8012862:	edd7 7a02 	vldr	s15, [r7, #8]
 8012866:	ee27 7a27 	vmul.f32	s14, s14, s15
 801286a:	693b      	ldr	r3, [r7, #16]
 801286c:	edd3 6a01 	vldr	s13, [r3, #4]
 8012870:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012874:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012878:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801287c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8012880:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012884:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	ed93 7a05 	vldr	s14, [r3, #20]
 801288e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012892:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	edd3 6a02 	vldr	s13, [r3, #8]
 801289c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80128a0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80128a4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80128a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80128ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128b0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	ed93 7a00 	vldr	s14, [r3]
 80128ba:	697b      	ldr	r3, [r7, #20]
 80128bc:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80128c0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80128c4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 80128ce:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80128d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80128d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80128e0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80128e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80128e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80128ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	ed93 7a01 	vldr	s14, [r3, #4]
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8012902:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8012906:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8012910:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8012914:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012918:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801291c:	697b      	ldr	r3, [r7, #20]
 801291e:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8012922:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8012926:	ee66 7a27 	vmul.f32	s15, s12, s15
 801292a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	ed93 7a02 	vldr	s14, [r3, #8]
 801293e:	697b      	ldr	r3, [r7, #20]
 8012940:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8012944:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8012948:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 8012952:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8012956:	ee66 7a27 	vmul.f32	s15, s12, s15
 801295a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8012964:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8012968:	ee66 7a27 	vmul.f32	s15, s12, s15
 801296c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012970:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012974:	ed9f 6ae1 	vldr	s12, [pc, #900]	@ 8012cfc <predictDt+0xd54>
 8012978:	ee27 6a86 	vmul.f32	s12, s15, s12
 801297c:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8012980:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012984:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8012988:	ee77 7a27 	vadd.f32	s15, s14, s15
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8012992:	697b      	ldr	r3, [r7, #20]
 8012994:	68db      	ldr	r3, [r3, #12]
 8012996:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	691b      	ldr	r3, [r3, #16]
 801299c:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	695b      	ldr	r3, [r3, #20]
 80129a2:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	edd3 6a00 	vldr	s13, [r3]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	ed93 6a02 	vldr	s12, [r3, #8]
 80129b6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80129ba:	ee66 7a27 	vmul.f32	s15, s12, s15
 80129be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	ed93 6a01 	vldr	s12, [r3, #4]
 80129c8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80129cc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80129d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80129da:	ed9f 6ac8 	vldr	s12, [pc, #800]	@ 8012cfc <predictDt+0xd54>
 80129de:	ee67 7a86 	vmul.f32	s15, s15, s12
 80129e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80129e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80129ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80129ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	ed93 7a04 	vldr	s14, [r3, #16]
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	edd3 6a01 	vldr	s13, [r3, #4]
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	ed93 6a02 	vldr	s12, [r3, #8]
 8012a0a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8012a0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012a12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	ed93 6a00 	vldr	s12, [r3]
 8012a1c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8012a20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012a24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012a28:	697b      	ldr	r3, [r7, #20]
 8012a2a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8012a2e:	ed9f 6ab3 	vldr	s12, [pc, #716]	@ 8012cfc <predictDt+0xd54>
 8012a32:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012a3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8012a3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	ed93 7a05 	vldr	s14, [r3, #20]
 8012a52:	693b      	ldr	r3, [r7, #16]
 8012a54:	edd3 6a02 	vldr	s13, [r3, #8]
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	ed93 6a01 	vldr	s12, [r3, #4]
 8012a5e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8012a62:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012a66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	ed93 6a00 	vldr	s12, [r3]
 8012a70:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012a74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8012a78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8012a82:	ed9f 6a9e 	vldr	s12, [pc, #632]	@ 8012cfc <predictDt+0xd54>
 8012a86:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012a8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8012a8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8012a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	edd3 7a00 	vldr	s15, [r3]
 8012aa6:	ed97 7a02 	vldr	s14, [r7, #8]
 8012aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012aae:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  float dtwy = dt*gyro->y;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	edd3 7a01 	vldr	s15, [r3, #4]
 8012ab8:	ed97 7a02 	vldr	s14, [r7, #8]
 8012abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ac0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dtwz = dt*gyro->z;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	edd3 7a02 	vldr	s15, [r3, #8]
 8012aca:	ed97 7a02 	vldr	s14, [r7, #8]
 8012ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ad2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 8012ad6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8012ada:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012ade:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8012ae2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012aea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8012aee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012af2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012af6:	eeb0 0a67 	vmov.f32	s0, s15
 8012afa:	f7fe fc05 	bl	8011308 <arm_sqrt>
 8012afe:	eef0 7a40 	vmov.f32	s15, s0
 8012b02:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8012d08 <predictDt+0xd60>
 8012b06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012b0a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 8012b0e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8012b12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012b16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012b1a:	eeb0 0a47 	vmov.f32	s0, s14
 8012b1e:	f008 fa3f 	bl	801afa0 <arm_cos_f32>
 8012b22:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
  float sa = arm_sin_f32(angle/2.0f);
 8012b26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8012b2a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8012b2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012b32:	eeb0 0a47 	vmov.f32	s0, s14
 8012b36:	f008 f9ed 	bl	801af14 <arm_sin_f32>
 8012b3a:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 8012b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012b40:	61fb      	str	r3, [r7, #28]
 8012b42:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012b46:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8012b4a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012b4e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8012b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b56:	edc7 7a08 	vstr	s15, [r7, #32]
 8012b5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012b5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8012b62:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012b66:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8012b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 8012b72:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8012b76:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8012b7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012b7e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8012b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b86:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 8012b8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8012b8e:	697b      	ldr	r3, [r7, #20]
 8012b90:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012b94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012b98:	edd7 6a08 	vldr	s13, [r7, #32]
 8012b9c:	697b      	ldr	r3, [r7, #20]
 8012b9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8012ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012baa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8012bae:	697b      	ldr	r3, [r7, #20]
 8012bb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012bb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012bbc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012bce:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 8012bd2:	ed97 7a08 	vldr	s14, [r7, #32]
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8012be4:	697b      	ldr	r3, [r7, #20]
 8012be6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8012bea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bf2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8012bf6:	697b      	ldr	r3, [r7, #20]
 8012bf8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c04:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012c0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012c16:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 8012c1a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c28:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8012c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c4c:	edd7 6a08 	vldr	s13, [r7, #32]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c5e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 8012c62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8012c6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c70:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8012c7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c82:	edd7 6a08 	vldr	s13, [r7, #32]
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8012c8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8012c98:	697b      	ldr	r3, [r7, #20]
 8012c9a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8012c9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ca2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ca6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

  if (! quadIsFlying) {
 8012caa:	79fb      	ldrb	r3, [r7, #7]
 8012cac:	f083 0301 	eor.w	r3, r3, #1
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d04e      	beq.n	8012d54 <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 8012cb6:	4b12      	ldr	r3, [pc, #72]	@ (8012d00 <predictDt+0xd58>)
 8012cb8:	633b      	str	r3, [r7, #48]	@ 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 8012cba:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8012cbe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012cc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 8012ccc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8012d04 <predictDt+0xd5c>
 8012cd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cd8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 8012cdc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8012ce0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012ce4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	edd3 7a6b 	vldr	s15, [r3, #428]	@ 0x1ac
 8012cee:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8012d04 <predictDt+0xd5c>
 8012cf2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cfa:	e007      	b.n	8012d0c <predictDt+0xd64>
 8012cfc:	411cf5c3 	.word	0x411cf5c3
 8012d00:	3f7fbe77 	.word	0x3f7fbe77
 8012d04:	3a83126f 	.word	0x3a83126f
 8012d08:	358637bd 	.word	0x358637bd
 8012d0c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 8012d10:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8012d14:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8012d18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	edd3 7a6c 	vldr	s15, [r3, #432]	@ 0x1b0
 8012d22:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8012d04 <predictDt+0xd5c>
 8012d26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d2e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 8012d32:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8012d36:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8012d3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	edd3 7a6d 	vldr	s15, [r3, #436]	@ 0x1b4
 8012d44:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 8012d04 <predictDt+0xd5c>
 8012d48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d50:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 8012d54:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012d58:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8012d5c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012d60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012d64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d68:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8012d6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012d74:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8012d78:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d80:	eeb0 0a67 	vmov.f32	s0, s15
 8012d84:	f7fe fac0 	bl	8011308 <arm_sqrt>
 8012d88:	eef0 7a40 	vmov.f32	s15, s0
 8012d8c:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8012d08 <predictDt+0xd60>
 8012d90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012d94:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 8012d98:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8012d9c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8012da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012da4:	697b      	ldr	r3, [r7, #20]
 8012da6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 8012daa:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 8012dae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8012db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 8012dbc:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8012dc0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8012dc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 8012dce:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8012dd2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8012dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  assertStateNotNaN(this);
 8012de0:	6978      	ldr	r0, [r7, #20]
 8012de2:	f7fe faed 	bl	80113c0 <assertStateNotNaN>

  this->isUpdated = true;
 8012de6:	697b      	ldr	r3, [r7, #20]
 8012de8:	2201      	movs	r2, #1
 8012dea:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 8012dee:	bf00      	nop
 8012df0:	3788      	adds	r7, #136	@ 0x88
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop

08012df8 <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b086      	sub	sp, #24
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	60f8      	str	r0, [r7, #12]
 8012e00:	60b9      	str	r1, [r7, #8]
 8012e02:	607a      	str	r2, [r7, #4]
 8012e04:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 8012e0c:	683a      	ldr	r2, [r7, #0]
 8012e0e:	1ad3      	subs	r3, r2, r3
 8012e10:	ee07 3a90 	vmov	s15, r3
 8012e14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8012e18:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8012e48 <kalmanCorePredict+0x50>
 8012e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012e20:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 8012e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012e28:	ed97 0a05 	vldr	s0, [r7, #20]
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	68b9      	ldr	r1, [r7, #8]
 8012e30:	68f8      	ldr	r0, [r7, #12]
 8012e32:	f7ff f8b9 	bl	8011fa8 <predictDt>
  this->lastPredictionMs = nowMs;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	683a      	ldr	r2, [r7, #0]
 8012e3a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
}
 8012e3e:	bf00      	nop
 8012e40:	3718      	adds	r7, #24
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bd80      	pop	{r7, pc}
 8012e46:	bf00      	nop
 8012e48:	447a0000 	.word	0x447a0000
 8012e4c:	00000000 	.word	0x00000000

08012e50 <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b088      	sub	sp, #32
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	60f8      	str	r0, [r7, #12]
 8012e58:	60b9      	str	r1, [r7, #8]
 8012e5a:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	ed93 7a05 	vldr	s14, [r3, #20]
 8012e64:	edd7 7a01 	vldr	s15, [r7, #4]
 8012e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8012e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	edd3 6a07 	vldr	s13, [r3, #28]
 8012e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8012e7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012e86:	68bb      	ldr	r3, [r7, #8]
 8012e88:	edd3 7a08 	vldr	s15, [r3, #32]
 8012e8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012e90:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012e94:	eeb0 0a67 	vmov.f32	s0, s15
 8012e98:	f008 fa48 	bl	801b32c <powf>
 8012e9c:	eeb0 7a40 	vmov.f32	s14, s0
 8012ea0:	68fb      	ldr	r3, [r7, #12]
 8012ea2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8012ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	ed93 7a05 	vldr	s14, [r3, #20]
 8012eb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8012eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ebe:	edd7 7a01 	vldr	s15, [r7, #4]
 8012ec2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	edd3 6a07 	vldr	s13, [r3, #28]
 8012ecc:	edd7 7a01 	vldr	s15, [r7, #4]
 8012ed0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012ed4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	edd3 7a08 	vldr	s15, [r3, #32]
 8012ede:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ee2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8012eea:	f008 fa1f 	bl	801b32c <powf>
 8012eee:	eeb0 7a40 	vmov.f32	s14, s0
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8012ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	ed93 7a06 	vldr	s14, [r3, #24]
 8012f08:	edd7 7a01 	vldr	s15, [r7, #4]
 8012f0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8012f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012f18:	68bb      	ldr	r3, [r7, #8]
 8012f1a:	edd3 6a07 	vldr	s13, [r3, #28]
 8012f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8012f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	edd3 7a08 	vldr	s15, [r3, #32]
 8012f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f34:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012f38:	eeb0 0a67 	vmov.f32	s0, s15
 8012f3c:	f008 f9f6 	bl	801b32c <powf>
 8012f40:	eeb0 7a40 	vmov.f32	s14, s0
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 8012f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	ed93 7a05 	vldr	s14, [r3, #20]
 8012f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8012f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	edd3 7a07 	vldr	s15, [r3, #28]
 8012f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f6c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012f70:	eeb0 0a67 	vmov.f32	s0, s15
 8012f74:	f008 f9da 	bl	801b32c <powf>
 8012f78:	eeb0 7a40 	vmov.f32	s14, s0
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 8012f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8012f8c:	68bb      	ldr	r3, [r7, #8]
 8012f8e:	ed93 7a05 	vldr	s14, [r3, #20]
 8012f92:	edd7 7a01 	vldr	s15, [r7, #4]
 8012f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	edd3 7a07 	vldr	s15, [r3, #28]
 8012fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fa4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012fa8:	eeb0 0a67 	vmov.f32	s0, s15
 8012fac:	f008 f9be 	bl	801b32c <powf>
 8012fb0:	eeb0 7a40 	vmov.f32	s14, s0
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 8012fba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 8012fc4:	68bb      	ldr	r3, [r7, #8]
 8012fc6:	ed93 7a06 	vldr	s14, [r3, #24]
 8012fca:	edd7 7a01 	vldr	s15, [r7, #4]
 8012fce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	edd3 7a07 	vldr	s15, [r3, #28]
 8012fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012fdc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8012fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8012fe4:	f008 f9a2 	bl	801b32c <powf>
 8012fe8:	eeb0 7a40 	vmov.f32	s14, s0
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8012ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8013002:	edd7 7a01 	vldr	s15, [r7, #4]
 8013006:	ee27 7a27 	vmul.f32	s14, s14, s15
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013014:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8013018:	eeb0 0a67 	vmov.f32	s0, s15
 801301c:	f008 f986 	bl	801b32c <powf>
 8013020:	eeb0 7a40 	vmov.f32	s14, s0
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 801302a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 801303a:	edd7 7a01 	vldr	s15, [r7, #4]
 801303e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013048:	ee77 7a27 	vadd.f32	s15, s14, s15
 801304c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8013050:	eeb0 0a67 	vmov.f32	s0, s15
 8013054:	f008 f96a 	bl	801b32c <powf>
 8013058:	eeb0 7a40 	vmov.f32	s14, s0
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 8013062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8013072:	edd7 7a01 	vldr	s15, [r7, #4]
 8013076:	ee27 7a27 	vmul.f32	s14, s14, s15
 801307a:	68bb      	ldr	r3, [r7, #8]
 801307c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013084:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8013088:	eeb0 0a67 	vmov.f32	s0, s15
 801308c:	f008 f94e 	bl	801b32c <powf>
 8013090:	eeb0 7a40 	vmov.f32	s14, s0
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 801309a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 80130a4:	2300      	movs	r3, #0
 80130a6:	61fb      	str	r3, [r7, #28]
 80130a8:	e0c2      	b.n	8013230 <addProcessNoiseDt+0x3e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	61bb      	str	r3, [r7, #24]
 80130ae:	e0b8      	b.n	8013222 <addProcessNoiseDt+0x3d2>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 80130b0:	68f9      	ldr	r1, [r7, #12]
 80130b2:	69fa      	ldr	r2, [r7, #28]
 80130b4:	4613      	mov	r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	4413      	add	r3, r2
 80130ba:	69ba      	ldr	r2, [r7, #24]
 80130bc:	4413      	add	r3, r2
 80130be:	3316      	adds	r3, #22
 80130c0:	009b      	lsls	r3, r3, #2
 80130c2:	440b      	add	r3, r1
 80130c4:	edd3 7a00 	vldr	s15, [r3]
 80130c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80130cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80130d0:	68f9      	ldr	r1, [r7, #12]
 80130d2:	69ba      	ldr	r2, [r7, #24]
 80130d4:	4613      	mov	r3, r2
 80130d6:	00db      	lsls	r3, r3, #3
 80130d8:	4413      	add	r3, r2
 80130da:	69fa      	ldr	r2, [r7, #28]
 80130dc:	4413      	add	r3, r2
 80130de:	3316      	adds	r3, #22
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	440b      	add	r3, r1
 80130e4:	edd3 7a00 	vldr	s15, [r3]
 80130e8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80130ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80130f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80130f4:	ee17 0a90 	vmov	r0, s15
 80130f8:	f7ed f9d8 	bl	80004ac <__aeabi_f2d>
 80130fc:	4602      	mov	r2, r0
 80130fe:	460b      	mov	r3, r1
 8013100:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8013104:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013108:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801310c:	f7ed fcc0 	bl	8000a90 <__aeabi_dcmpun>
 8013110:	4603      	mov	r3, r0
 8013112:	2b00      	cmp	r3, #0
 8013114:	d109      	bne.n	801312a <addProcessNoiseDt+0x2da>
 8013116:	f04f 0200 	mov.w	r2, #0
 801311a:	4b4d      	ldr	r3, [pc, #308]	@ (8013250 <addProcessNoiseDt+0x400>)
 801311c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013120:	f7ed fcac 	bl	8000a7c <__aeabi_dcmpgt>
 8013124:	4603      	mov	r3, r0
 8013126:	2b00      	cmp	r3, #0
 8013128:	d022      	beq.n	8013170 <addProcessNoiseDt+0x320>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 801312a:	68f9      	ldr	r1, [r7, #12]
 801312c:	69ba      	ldr	r2, [r7, #24]
 801312e:	4613      	mov	r3, r2
 8013130:	00db      	lsls	r3, r3, #3
 8013132:	4413      	add	r3, r2
 8013134:	69fa      	ldr	r2, [r7, #28]
 8013136:	4413      	add	r3, r2
 8013138:	3316      	adds	r3, #22
 801313a:	009b      	lsls	r3, r3, #2
 801313c:	440b      	add	r3, r1
 801313e:	4a45      	ldr	r2, [pc, #276]	@ (8013254 <addProcessNoiseDt+0x404>)
 8013140:	601a      	str	r2, [r3, #0]
 8013142:	68f9      	ldr	r1, [r7, #12]
 8013144:	69ba      	ldr	r2, [r7, #24]
 8013146:	4613      	mov	r3, r2
 8013148:	00db      	lsls	r3, r3, #3
 801314a:	4413      	add	r3, r2
 801314c:	69fa      	ldr	r2, [r7, #28]
 801314e:	4413      	add	r3, r2
 8013150:	3316      	adds	r3, #22
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	440b      	add	r3, r1
 8013156:	6819      	ldr	r1, [r3, #0]
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	69fa      	ldr	r2, [r7, #28]
 801315c:	4613      	mov	r3, r2
 801315e:	00db      	lsls	r3, r3, #3
 8013160:	4413      	add	r3, r2
 8013162:	69ba      	ldr	r2, [r7, #24]
 8013164:	4413      	add	r3, r2
 8013166:	3316      	adds	r3, #22
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	4403      	add	r3, r0
 801316c:	6019      	str	r1, [r3, #0]
 801316e:	e055      	b.n	801321c <addProcessNoiseDt+0x3cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 8013170:	69fa      	ldr	r2, [r7, #28]
 8013172:	69bb      	ldr	r3, [r7, #24]
 8013174:	429a      	cmp	r2, r3
 8013176:	d12c      	bne.n	80131d2 <addProcessNoiseDt+0x382>
 8013178:	a333      	add	r3, pc, #204	@ (adr r3, 8013248 <addProcessNoiseDt+0x3f8>)
 801317a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013182:	f7ed fc5d 	bl	8000a40 <__aeabi_dcmplt>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d022      	beq.n	80131d2 <addProcessNoiseDt+0x382>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 801318c:	68f9      	ldr	r1, [r7, #12]
 801318e:	69ba      	ldr	r2, [r7, #24]
 8013190:	4613      	mov	r3, r2
 8013192:	00db      	lsls	r3, r3, #3
 8013194:	4413      	add	r3, r2
 8013196:	69fa      	ldr	r2, [r7, #28]
 8013198:	4413      	add	r3, r2
 801319a:	3316      	adds	r3, #22
 801319c:	009b      	lsls	r3, r3, #2
 801319e:	440b      	add	r3, r1
 80131a0:	4a2d      	ldr	r2, [pc, #180]	@ (8013258 <addProcessNoiseDt+0x408>)
 80131a2:	601a      	str	r2, [r3, #0]
 80131a4:	68f9      	ldr	r1, [r7, #12]
 80131a6:	69ba      	ldr	r2, [r7, #24]
 80131a8:	4613      	mov	r3, r2
 80131aa:	00db      	lsls	r3, r3, #3
 80131ac:	4413      	add	r3, r2
 80131ae:	69fa      	ldr	r2, [r7, #28]
 80131b0:	4413      	add	r3, r2
 80131b2:	3316      	adds	r3, #22
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	440b      	add	r3, r1
 80131b8:	6819      	ldr	r1, [r3, #0]
 80131ba:	68f8      	ldr	r0, [r7, #12]
 80131bc:	69fa      	ldr	r2, [r7, #28]
 80131be:	4613      	mov	r3, r2
 80131c0:	00db      	lsls	r3, r3, #3
 80131c2:	4413      	add	r3, r2
 80131c4:	69ba      	ldr	r2, [r7, #24]
 80131c6:	4413      	add	r3, r2
 80131c8:	3316      	adds	r3, #22
 80131ca:	009b      	lsls	r3, r3, #2
 80131cc:	4403      	add	r3, r0
 80131ce:	6019      	str	r1, [r3, #0]
 80131d0:	e024      	b.n	801321c <addProcessNoiseDt+0x3cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 80131d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80131d6:	f7ed fc71 	bl	8000abc <__aeabi_d2f>
 80131da:	68f9      	ldr	r1, [r7, #12]
 80131dc:	69ba      	ldr	r2, [r7, #24]
 80131de:	4613      	mov	r3, r2
 80131e0:	00db      	lsls	r3, r3, #3
 80131e2:	4413      	add	r3, r2
 80131e4:	69fa      	ldr	r2, [r7, #28]
 80131e6:	4413      	add	r3, r2
 80131e8:	3316      	adds	r3, #22
 80131ea:	009b      	lsls	r3, r3, #2
 80131ec:	440b      	add	r3, r1
 80131ee:	6018      	str	r0, [r3, #0]
 80131f0:	68f9      	ldr	r1, [r7, #12]
 80131f2:	69ba      	ldr	r2, [r7, #24]
 80131f4:	4613      	mov	r3, r2
 80131f6:	00db      	lsls	r3, r3, #3
 80131f8:	4413      	add	r3, r2
 80131fa:	69fa      	ldr	r2, [r7, #28]
 80131fc:	4413      	add	r3, r2
 80131fe:	3316      	adds	r3, #22
 8013200:	009b      	lsls	r3, r3, #2
 8013202:	440b      	add	r3, r1
 8013204:	6819      	ldr	r1, [r3, #0]
 8013206:	68f8      	ldr	r0, [r7, #12]
 8013208:	69fa      	ldr	r2, [r7, #28]
 801320a:	4613      	mov	r3, r2
 801320c:	00db      	lsls	r3, r3, #3
 801320e:	4413      	add	r3, r2
 8013210:	69ba      	ldr	r2, [r7, #24]
 8013212:	4413      	add	r3, r2
 8013214:	3316      	adds	r3, #22
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	4403      	add	r3, r0
 801321a:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 801321c:	69bb      	ldr	r3, [r7, #24]
 801321e:	3301      	adds	r3, #1
 8013220:	61bb      	str	r3, [r7, #24]
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	2b08      	cmp	r3, #8
 8013226:	f77f af43 	ble.w	80130b0 <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 801322a:	69fb      	ldr	r3, [r7, #28]
 801322c:	3301      	adds	r3, #1
 801322e:	61fb      	str	r3, [r7, #28]
 8013230:	69fb      	ldr	r3, [r7, #28]
 8013232:	2b08      	cmp	r3, #8
 8013234:	f77f af39 	ble.w	80130aa <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 8013238:	68f8      	ldr	r0, [r7, #12]
 801323a:	f7fe f8c1 	bl	80113c0 <assertStateNotNaN>
}
 801323e:	bf00      	nop
 8013240:	3720      	adds	r7, #32
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	a0000000 	.word	0xa0000000
 801324c:	3eb0c6f7 	.word	0x3eb0c6f7
 8013250:	40590000 	.word	0x40590000
 8013254:	42c80000 	.word	0x42c80000
 8013258:	358637bd 	.word	0x358637bd

0801325c <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 801325c:	b580      	push	{r7, lr}
 801325e:	b086      	sub	sp, #24
 8013260:	af00      	add	r7, sp, #0
 8013262:	60f8      	str	r0, [r7, #12]
 8013264:	60b9      	str	r1, [r7, #8]
 8013266:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 801326e:	687a      	ldr	r2, [r7, #4]
 8013270:	1ad3      	subs	r3, r2, r3
 8013272:	ee07 3a90 	vmov	s15, r3
 8013276:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801327a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80132b4 <kalmanCoreAddProcessNoise+0x58>
 801327e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013282:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 8013286:	edd7 7a05 	vldr	s15, [r7, #20]
 801328a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013292:	dc00      	bgt.n	8013296 <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 8013294:	e009      	b.n	80132aa <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 8013296:	ed97 0a05 	vldr	s0, [r7, #20]
 801329a:	68b9      	ldr	r1, [r7, #8]
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f7ff fdd7 	bl	8012e50 <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	687a      	ldr	r2, [r7, #4]
 80132a6:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 80132aa:	bf00      	nop
 80132ac:	3718      	adds	r7, #24
 80132ae:	46bd      	mov	sp, r7
 80132b0:	bd80      	pop	{r7, pc}
 80132b2:	bf00      	nop
 80132b4:	447a0000 	.word	0x447a0000

080132b8 <kalmanCoreFinalize>:
float v0;
float v1;
float v2;
bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 80132b8:	b580      	push	{r7, lr}
 80132ba:	b096      	sub	sp, #88	@ 0x58
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 80132c6:	f083 0301 	eor.w	r3, r3, #1
 80132ca:	b2db      	uxtb	r3, r3
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d002      	beq.n	80132d6 <kalmanCoreFinalize+0x1e>
    return false;
 80132d0:	2300      	movs	r3, #0
 80132d2:	f000 bc98 	b.w	8013c06 <kalmanCoreFinalize+0x94e>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  v0 = this->S[KC_STATE_D0];
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	699b      	ldr	r3, [r3, #24]
 80132da:	4ade      	ldr	r2, [pc, #888]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 80132dc:	6013      	str	r3, [r2, #0]
  v1 = this->S[KC_STATE_D1];
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	69db      	ldr	r3, [r3, #28]
 80132e2:	4add      	ldr	r2, [pc, #884]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 80132e4:	6013      	str	r3, [r2, #0]
  v2 = this->S[KC_STATE_D2];
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6a1b      	ldr	r3, [r3, #32]
 80132ea:	4adc      	ldr	r2, [pc, #880]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 80132ec:	6013      	str	r3, [r2, #0]

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 80132ee:	4bd9      	ldr	r3, [pc, #868]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 80132f0:	edd3 7a00 	vldr	s15, [r3]
 80132f4:	eef0 7ae7 	vabs.f32	s15, s15
 80132f8:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 8013660 <kalmanCoreFinalize+0x3a8>
 80132fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013304:	dc18      	bgt.n	8013338 <kalmanCoreFinalize+0x80>
 8013306:	4bd4      	ldr	r3, [pc, #848]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 8013308:	edd3 7a00 	vldr	s15, [r3]
 801330c:	eef0 7ae7 	vabs.f32	s15, s15
 8013310:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8013660 <kalmanCoreFinalize+0x3a8>
 8013314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801331c:	dc0c      	bgt.n	8013338 <kalmanCoreFinalize+0x80>
 801331e:	4bcf      	ldr	r3, [pc, #828]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 8013320:	edd3 7a00 	vldr	s15, [r3]
 8013324:	eef0 7ae7 	vabs.f32	s15, s15
 8013328:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8013660 <kalmanCoreFinalize+0x3a8>
 801332c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013334:	f340 8278 	ble.w	8013828 <kalmanCoreFinalize+0x570>
 8013338:	4bc6      	ldr	r3, [pc, #792]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 801333a:	edd3 7a00 	vldr	s15, [r3]
 801333e:	eef0 7ae7 	vabs.f32	s15, s15
 8013342:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8013346:	eef4 7ac7 	vcmpe.f32	s15, s14
 801334a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334e:	f140 826b 	bpl.w	8013828 <kalmanCoreFinalize+0x570>
 8013352:	4bc1      	ldr	r3, [pc, #772]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 8013354:	edd3 7a00 	vldr	s15, [r3]
 8013358:	eef0 7ae7 	vabs.f32	s15, s15
 801335c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8013360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8013364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013368:	f140 825e 	bpl.w	8013828 <kalmanCoreFinalize+0x570>
 801336c:	4bbb      	ldr	r3, [pc, #748]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 801336e:	edd3 7a00 	vldr	s15, [r3]
 8013372:	eef0 7ae7 	vabs.f32	s15, s15
 8013376:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 801337a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013382:	f140 8251 	bpl.w	8013828 <kalmanCoreFinalize+0x570>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 8013386:	4bb3      	ldr	r3, [pc, #716]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 8013388:	ed93 7a00 	vldr	s14, [r3]
 801338c:	4bb1      	ldr	r3, [pc, #708]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 801338e:	edd3 7a00 	vldr	s15, [r3]
 8013392:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013396:	4bb0      	ldr	r3, [pc, #704]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 8013398:	edd3 6a00 	vldr	s13, [r3]
 801339c:	4bae      	ldr	r3, [pc, #696]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 801339e:	edd3 7a00 	vldr	s15, [r3]
 80133a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80133aa:	4bac      	ldr	r3, [pc, #688]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 80133ac:	edd3 6a00 	vldr	s13, [r3]
 80133b0:	4baa      	ldr	r3, [pc, #680]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 80133b2:	edd3 7a00 	vldr	s15, [r3]
 80133b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80133ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80133be:	eeb0 0a67 	vmov.f32	s0, s15
 80133c2:	f7fd ffa1 	bl	8011308 <arm_sqrt>
 80133c6:	eef0 7a40 	vmov.f32	s15, s0
 80133ca:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8013664 <kalmanCoreFinalize+0x3ac>
 80133ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80133d2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float ca = arm_cos_f32(angle / 2.0f);
 80133d6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80133da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80133de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80133e2:	eeb0 0a47 	vmov.f32	s0, s14
 80133e6:	f007 fddb 	bl	801afa0 <arm_cos_f32>
 80133ea:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float sa = arm_sin_f32(angle / 2.0f);
 80133ee:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80133f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80133f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80133fa:	eeb0 0a47 	vmov.f32	s0, s14
 80133fe:	f007 fd89 	bl	801af14 <arm_sin_f32>
 8013402:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 8013406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013408:	60bb      	str	r3, [r7, #8]
 801340a:	4b92      	ldr	r3, [pc, #584]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 801340c:	ed93 7a00 	vldr	s14, [r3]
 8013410:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013414:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013418:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 801341c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013420:	edc7 7a03 	vstr	s15, [r7, #12]
 8013424:	4b8c      	ldr	r3, [pc, #560]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 8013426:	ed93 7a00 	vldr	s14, [r3]
 801342a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 801342e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8013432:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801343a:	edc7 7a04 	vstr	s15, [r7, #16]
 801343e:	4b87      	ldr	r3, [pc, #540]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 8013440:	ed93 7a00 	vldr	s14, [r3]
 8013444:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8013448:	ee67 6a27 	vmul.f32	s13, s14, s15
 801344c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8013450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013454:	edc7 7a05 	vstr	s15, [r7, #20]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 8013458:	ed97 7a02 	vldr	s14, [r7, #8]
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013462:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013466:	edd7 6a03 	vldr	s13, [r7, #12]
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013470:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013474:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013478:	edd7 6a04 	vldr	s13, [r7, #16]
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013486:	ee37 7a67 	vsub.f32	s14, s14, s15
 801348a:	edd7 6a05 	vldr	s13, [r7, #20]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013498:	ee77 7a67 	vsub.f32	s15, s14, s15
 801349c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 80134a0:	ed97 7a03 	vldr	s14, [r7, #12]
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80134aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134ae:	edd7 6a02 	vldr	s13, [r7, #8]
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80134b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80134ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80134d2:	edd7 6a04 	vldr	s13, [r7, #16]
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80134dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80134e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80134e4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 80134e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80134f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80134f6:	edd7 6a05 	vldr	s13, [r7, #20]
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013504:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013508:	edd7 6a02 	vldr	s13, [r7, #8]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013516:	ee37 7a27 	vadd.f32	s14, s14, s15
 801351a:	edd7 6a03 	vldr	s13, [r7, #12]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013528:	ee77 7a27 	vadd.f32	s15, s14, s15
 801352c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 8013530:	ed97 7a05 	vldr	s14, [r7, #20]
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801353a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801353e:	edd7 6a04 	vldr	s13, [r7, #16]
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013548:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801354c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013550:	edd7 6a03 	vldr	s13, [r7, #12]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801355a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801355e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013562:	edd7 6a02 	vldr	s13, [r7, #8]
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801356c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013574:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 8013578:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801357c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013580:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013584:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013588:	ee37 7a27 	vadd.f32	s14, s14, s15
 801358c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8013590:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013598:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801359c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80135a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80135a4:	eeb0 0a67 	vmov.f32	s0, s15
 80135a8:	f7fd feae 	bl	8011308 <arm_sqrt>
 80135ac:	eef0 7a40 	vmov.f32	s15, s0
 80135b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8013664 <kalmanCoreFinalize+0x3ac>
 80135b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80135b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    this->q[0] = tmpq0 / norm;
 80135bc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80135c0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80135c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    this->q[1] = tmpq1 / norm;
 80135ce:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80135d2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80135d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    this->q[2] = tmpq2 / norm;
 80135e0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80135e4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80135e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    this->q[3] = tmpq3 / norm;
 80135f2:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80135f6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80135fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 8013604:	4b13      	ldr	r3, [pc, #76]	@ (8013654 <kalmanCoreFinalize+0x39c>)
 8013606:	ed93 7a00 	vldr	s14, [r3]
 801360a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801360e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013612:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 8013616:	4b10      	ldr	r3, [pc, #64]	@ (8013658 <kalmanCoreFinalize+0x3a0>)
 8013618:	ed93 7a00 	vldr	s14, [r3]
 801361c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013620:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013624:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d2 = v2/2;
 8013628:	4b0c      	ldr	r3, [pc, #48]	@ (801365c <kalmanCoreFinalize+0x3a4>)
 801362a:	ed93 7a00 	vldr	s14, [r3]
 801362e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013632:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013636:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    A[KC_STATE_X][KC_STATE_X] = 1;
 801363a:	4b0b      	ldr	r3, [pc, #44]	@ (8013668 <kalmanCoreFinalize+0x3b0>)
 801363c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013640:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 8013642:	4b09      	ldr	r3, [pc, #36]	@ (8013668 <kalmanCoreFinalize+0x3b0>)
 8013644:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013648:	629a      	str	r2, [r3, #40]	@ 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 801364a:	4b07      	ldr	r3, [pc, #28]	@ (8013668 <kalmanCoreFinalize+0x3b0>)
 801364c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013650:	e00c      	b.n	801366c <kalmanCoreFinalize+0x3b4>
 8013652:	bf00      	nop
 8013654:	20009998 	.word	0x20009998
 8013658:	2000999c 	.word	0x2000999c
 801365c:	200099a0 	.word	0x200099a0
 8013660:	38d1b717 	.word	0x38d1b717
 8013664:	358637bd 	.word	0x358637bd
 8013668:	10004300 	.word	0x10004300
 801366c:	651a      	str	r2, [r3, #80]	@ 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 801366e:	4b6a      	ldr	r3, [pc, #424]	@ (8013818 <kalmanCoreFinalize+0x560>)
 8013670:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013674:	679a      	str	r2, [r3, #120]	@ 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 8013676:	4b68      	ldr	r3, [pc, #416]	@ (8013818 <kalmanCoreFinalize+0x560>)
 8013678:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801367c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 8013680:	4b65      	ldr	r3, [pc, #404]	@ (8013818 <kalmanCoreFinalize+0x560>)
 8013682:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013686:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 801368a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801368e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8013692:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801369a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801369e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80136a6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80136aa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80136ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80136b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136b6:	4b58      	ldr	r3, [pc, #352]	@ (8013818 <kalmanCoreFinalize+0x560>)
 80136b8:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 80136bc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80136c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80136c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136c8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80136cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80136d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80136d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80136d8:	4b4f      	ldr	r3, [pc, #316]	@ (8013818 <kalmanCoreFinalize+0x560>)
 80136da:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 80136de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80136e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80136e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80136ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80136f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80136f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136fa:	4b47      	ldr	r3, [pc, #284]	@ (8013818 <kalmanCoreFinalize+0x560>)
 80136fc:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 8013700:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8013704:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8013708:	ee67 7a27 	vmul.f32	s15, s14, s15
 801370c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013710:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013714:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8013718:	ee77 7a67 	vsub.f32	s15, s14, s15
 801371c:	4b3e      	ldr	r3, [pc, #248]	@ (8013818 <kalmanCoreFinalize+0x560>)
 801371e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 8013722:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8013726:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801372a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013732:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013736:	ee37 7a67 	vsub.f32	s14, s14, s15
 801373a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801373e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013742:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8013746:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801374a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801374e:	4b32      	ldr	r3, [pc, #200]	@ (8013818 <kalmanCoreFinalize+0x560>)
 8013750:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 8013754:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8013758:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801375c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013760:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013764:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8013768:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801376c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013770:	4b29      	ldr	r3, [pc, #164]	@ (8013818 <kalmanCoreFinalize+0x560>)
 8013772:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 8013776:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 801377a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801377e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013782:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8013786:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801378a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 801378e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013792:	4b21      	ldr	r3, [pc, #132]	@ (8013818 <kalmanCoreFinalize+0x560>)
 8013794:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 8013798:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 801379c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80137a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80137a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80137a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80137ac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80137b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137b4:	4b18      	ldr	r3, [pc, #96]	@ (8013818 <kalmanCoreFinalize+0x560>)
 80137b6:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 80137ba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80137be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80137c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80137c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80137ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80137ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80137d2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80137d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80137da:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80137de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80137e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137e6:	4b0c      	ldr	r3, [pc, #48]	@ (8013818 <kalmanCoreFinalize+0x560>)
 80137e8:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 80137ec:	490b      	ldr	r1, [pc, #44]	@ (801381c <kalmanCoreFinalize+0x564>)
 80137ee:	480c      	ldr	r0, [pc, #48]	@ (8013820 <kalmanCoreFinalize+0x568>)
 80137f0:	f7fd fd40 	bl	8011274 <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80137fa:	4a0a      	ldr	r2, [pc, #40]	@ (8013824 <kalmanCoreFinalize+0x56c>)
 80137fc:	4619      	mov	r1, r3
 80137fe:	4808      	ldr	r0, [pc, #32]	@ (8013820 <kalmanCoreFinalize+0x568>)
 8013800:	f7fd fd5a 	bl	80112b8 <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801380a:	461a      	mov	r2, r3
 801380c:	4903      	ldr	r1, [pc, #12]	@ (801381c <kalmanCoreFinalize+0x564>)
 801380e:	4805      	ldr	r0, [pc, #20]	@ (8013824 <kalmanCoreFinalize+0x56c>)
 8013810:	f7fd fd52 	bl	80112b8 <mat_mult>
 8013814:	e008      	b.n	8013828 <kalmanCoreFinalize+0x570>
 8013816:	bf00      	nop
 8013818:	10004300 	.word	0x10004300
 801381c:	200000d8 	.word	0x200000d8
 8013820:	200000d0 	.word	0x200000d0
 8013824:	200000e0 	.word	0x200000e0
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013834:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013848:	ee37 7a27 	vadd.f32	s14, s14, s15
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801385c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801386c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013870:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013880:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801388a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013894:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801389e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80138b2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80138bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80138c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80138d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80138d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80138e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80138ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80138f8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013906:	ee77 7a27 	vadd.f32	s15, s14, s15
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 8013910:	687b      	ldr	r3, [r7, #4]
 8013912:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801391c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801392c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013934:	687b      	ldr	r3, [r7, #4]
 8013936:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013940:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013944:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013954:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013958:	ee77 7a67 	vsub.f32	s15, s14, s15
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013968:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801397c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801398a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801399a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80139a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80139ae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80139b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80139bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80139cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80139d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80139e0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80139ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80139ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013a04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013a28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	f04f 0200 	mov.w	r2, #0
 8013a50:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f04f 0200 	mov.w	r2, #0
 8013a58:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f04f 0200 	mov.w	r2, #0
 8013a60:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 8013a62:	2300      	movs	r3, #0
 8013a64:	657b      	str	r3, [r7, #84]	@ 0x54
 8013a66:	e0c2      	b.n	8013bee <kalmanCoreFinalize+0x936>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8013a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013a6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8013a6c:	e0b8      	b.n	8013be0 <kalmanCoreFinalize+0x928>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8013a6e:	6879      	ldr	r1, [r7, #4]
 8013a70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013a72:	4613      	mov	r3, r2
 8013a74:	00db      	lsls	r3, r3, #3
 8013a76:	4413      	add	r3, r2
 8013a78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a7a:	4413      	add	r3, r2
 8013a7c:	3316      	adds	r3, #22
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	440b      	add	r3, r1
 8013a82:	edd3 7a00 	vldr	s15, [r3]
 8013a86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8013a8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8013a8e:	6879      	ldr	r1, [r7, #4]
 8013a90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013a92:	4613      	mov	r3, r2
 8013a94:	00db      	lsls	r3, r3, #3
 8013a96:	4413      	add	r3, r2
 8013a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013a9a:	4413      	add	r3, r2
 8013a9c:	3316      	adds	r3, #22
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	440b      	add	r3, r1
 8013aa2:	edd3 7a00 	vldr	s15, [r3]
 8013aa6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8013aaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ab2:	ee17 0a90 	vmov	r0, s15
 8013ab6:	f7ec fcf9 	bl	80004ac <__aeabi_f2d>
 8013aba:	4602      	mov	r2, r0
 8013abc:	460b      	mov	r3, r1
 8013abe:	e9c7 2306 	strd	r2, r3, [r7, #24]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8013ac2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013ac6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013aca:	f7ec ffe1 	bl	8000a90 <__aeabi_dcmpun>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d109      	bne.n	8013ae8 <kalmanCoreFinalize+0x830>
 8013ad4:	f04f 0200 	mov.w	r2, #0
 8013ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8013c18 <kalmanCoreFinalize+0x960>)
 8013ada:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013ade:	f7ec ffcd 	bl	8000a7c <__aeabi_dcmpgt>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d022      	beq.n	8013b2e <kalmanCoreFinalize+0x876>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8013ae8:	6879      	ldr	r1, [r7, #4]
 8013aea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013aec:	4613      	mov	r3, r2
 8013aee:	00db      	lsls	r3, r3, #3
 8013af0:	4413      	add	r3, r2
 8013af2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013af4:	4413      	add	r3, r2
 8013af6:	3316      	adds	r3, #22
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	440b      	add	r3, r1
 8013afc:	4a47      	ldr	r2, [pc, #284]	@ (8013c1c <kalmanCoreFinalize+0x964>)
 8013afe:	601a      	str	r2, [r3, #0]
 8013b00:	6879      	ldr	r1, [r7, #4]
 8013b02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b04:	4613      	mov	r3, r2
 8013b06:	00db      	lsls	r3, r3, #3
 8013b08:	4413      	add	r3, r2
 8013b0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b0c:	4413      	add	r3, r2
 8013b0e:	3316      	adds	r3, #22
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	440b      	add	r3, r1
 8013b14:	6819      	ldr	r1, [r3, #0]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b1a:	4613      	mov	r3, r2
 8013b1c:	00db      	lsls	r3, r3, #3
 8013b1e:	4413      	add	r3, r2
 8013b20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b22:	4413      	add	r3, r2
 8013b24:	3316      	adds	r3, #22
 8013b26:	009b      	lsls	r3, r3, #2
 8013b28:	4403      	add	r3, r0
 8013b2a:	6019      	str	r1, [r3, #0]
 8013b2c:	e055      	b.n	8013bda <kalmanCoreFinalize+0x922>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 8013b2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d12c      	bne.n	8013b90 <kalmanCoreFinalize+0x8d8>
 8013b36:	a336      	add	r3, pc, #216	@ (adr r3, 8013c10 <kalmanCoreFinalize+0x958>)
 8013b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013b40:	f7ec ff7e 	bl	8000a40 <__aeabi_dcmplt>
 8013b44:	4603      	mov	r3, r0
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	d022      	beq.n	8013b90 <kalmanCoreFinalize+0x8d8>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8013b4a:	6879      	ldr	r1, [r7, #4]
 8013b4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b4e:	4613      	mov	r3, r2
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	4413      	add	r3, r2
 8013b54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b56:	4413      	add	r3, r2
 8013b58:	3316      	adds	r3, #22
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	440b      	add	r3, r1
 8013b5e:	4a30      	ldr	r2, [pc, #192]	@ (8013c20 <kalmanCoreFinalize+0x968>)
 8013b60:	601a      	str	r2, [r3, #0]
 8013b62:	6879      	ldr	r1, [r7, #4]
 8013b64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b66:	4613      	mov	r3, r2
 8013b68:	00db      	lsls	r3, r3, #3
 8013b6a:	4413      	add	r3, r2
 8013b6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b6e:	4413      	add	r3, r2
 8013b70:	3316      	adds	r3, #22
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	440b      	add	r3, r1
 8013b76:	6819      	ldr	r1, [r3, #0]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013b7c:	4613      	mov	r3, r2
 8013b7e:	00db      	lsls	r3, r3, #3
 8013b80:	4413      	add	r3, r2
 8013b82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b84:	4413      	add	r3, r2
 8013b86:	3316      	adds	r3, #22
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	4403      	add	r3, r0
 8013b8c:	6019      	str	r1, [r3, #0]
 8013b8e:	e024      	b.n	8013bda <kalmanCoreFinalize+0x922>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8013b90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013b94:	f7ec ff92 	bl	8000abc <__aeabi_d2f>
 8013b98:	6879      	ldr	r1, [r7, #4]
 8013b9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013b9c:	4613      	mov	r3, r2
 8013b9e:	00db      	lsls	r3, r3, #3
 8013ba0:	4413      	add	r3, r2
 8013ba2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013ba4:	4413      	add	r3, r2
 8013ba6:	3316      	adds	r3, #22
 8013ba8:	009b      	lsls	r3, r3, #2
 8013baa:	440b      	add	r3, r1
 8013bac:	6018      	str	r0, [r3, #0]
 8013bae:	6879      	ldr	r1, [r7, #4]
 8013bb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	00db      	lsls	r3, r3, #3
 8013bb6:	4413      	add	r3, r2
 8013bb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013bba:	4413      	add	r3, r2
 8013bbc:	3316      	adds	r3, #22
 8013bbe:	009b      	lsls	r3, r3, #2
 8013bc0:	440b      	add	r3, r1
 8013bc2:	6819      	ldr	r1, [r3, #0]
 8013bc4:	6878      	ldr	r0, [r7, #4]
 8013bc6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8013bc8:	4613      	mov	r3, r2
 8013bca:	00db      	lsls	r3, r3, #3
 8013bcc:	4413      	add	r3, r2
 8013bce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8013bd0:	4413      	add	r3, r2
 8013bd2:	3316      	adds	r3, #22
 8013bd4:	009b      	lsls	r3, r3, #2
 8013bd6:	4403      	add	r3, r0
 8013bd8:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8013bda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013bdc:	3301      	adds	r3, #1
 8013bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8013be0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013be2:	2b08      	cmp	r3, #8
 8013be4:	f77f af43 	ble.w	8013a6e <kalmanCoreFinalize+0x7b6>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8013be8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bea:	3301      	adds	r3, #1
 8013bec:	657b      	str	r3, [r7, #84]	@ 0x54
 8013bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013bf0:	2b08      	cmp	r3, #8
 8013bf2:	f77f af39 	ble.w	8013a68 <kalmanCoreFinalize+0x7b0>
      }
    }
  }

  assertStateNotNaN(this);
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f7fd fbe2 	bl	80113c0 <assertStateNotNaN>

  this->isUpdated = false;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	2200      	movs	r2, #0
 8013c00:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  return true;
 8013c04:	2301      	movs	r3, #1
}
 8013c06:	4618      	mov	r0, r3
 8013c08:	3758      	adds	r7, #88	@ 0x58
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	a0000000 	.word	0xa0000000
 8013c14:	3eb0c6f7 	.word	0x3eb0c6f7
 8013c18:	40590000 	.word	0x40590000
 8013c1c:	42c80000 	.word	0x42c80000
 8013c20:	358637bd 	.word	0x358637bd

08013c24 <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 8013c24:	b590      	push	{r4, r7, lr}
 8013c26:	b09d      	sub	sp, #116	@ 0x74
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	3320      	adds	r3, #32
 8013c40:	2200      	movs	r2, #0
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	605a      	str	r2, [r3, #4]
 8013c46:	609a      	str	r2, [r3, #8]
 8013c48:	60da      	str	r2, [r3, #12]
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	625c      	str	r4, [r3, #36]	@ 0x24
 8013c4e:	68bb      	ldr	r3, [r7, #8]
 8013c50:	6298      	str	r0, [r3, #40]	@ 0x28
 8013c52:	68bb      	ldr	r3, [r7, #8]
 8013c54:	62d9      	str	r1, [r3, #44]	@ 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8013c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	edd3 7a05 	vldr	s15, [r3, #20]
 8013c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013c8a:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	edd3 7a03 	vldr	s15, [r3, #12]
 8013c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	edd3 7a04 	vldr	s15, [r3, #16]
 8013caa:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	edd3 7a05 	vldr	s15, [r3, #20]
 8013cbe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013cc2:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	edd3 7a03 	vldr	s15, [r3, #12]
 8013cd2:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	edd3 7a04 	vldr	s15, [r3, #16]
 8013ce2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013ce6:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	edd3 7a05 	vldr	s15, [r3, #20]
 8013cf6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013cfa:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	3330      	adds	r3, #48	@ 0x30
 8013d02:	2200      	movs	r2, #0
 8013d04:	601a      	str	r2, [r3, #0]
 8013d06:	605a      	str	r2, [r3, #4]
 8013d08:	609a      	str	r2, [r3, #8]
 8013d0a:	60da      	str	r2, [r3, #12]
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
 8013d18:	68bb      	ldr	r3, [r7, #8]
 8013d1a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	edd3 7a00 	vldr	s15, [r3]
 8013d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013d52:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	edd3 7a00 	vldr	s15, [r3]
 8013d62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8013d72:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013d76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	edd3 7a02 	vldr	s15, [r3, #8]
 8013d86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8013d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	edd3 7a00 	vldr	s15, [r3]
 8013d9a:	ee26 6a27 	vmul.f32	s12, s12, s15
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	edd3 7a01 	vldr	s15, [r3, #4]
 8013daa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013dae:	ee36 6a27 	vadd.f32	s12, s12, s15
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	edd3 7a02 	vldr	s15, [r3, #8]
 8013dbe:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8013dc2:	ee76 7a27 	vadd.f32	s15, s12, s15
 8013dc6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8013dca:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 8013dce:	68bb      	ldr	r3, [r7, #8]
 8013dd0:	3340      	adds	r3, #64	@ 0x40
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	601a      	str	r2, [r3, #0]
 8013dd6:	605a      	str	r2, [r3, #4]
 8013dd8:	609a      	str	r2, [r3, #8]
 8013dda:	60da      	str	r2, [r3, #12]
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	ed83 7a12 	vstr	s14, [r3, #72]	@ 0x48
 8013de8:	68bb      	ldr	r3, [r7, #8]
 8013dea:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 8013dee:	68fb      	ldr	r3, [r7, #12]
 8013df0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013e12:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013e32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013e5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e62:	eef0 0a67 	vmov.f32	s1, s15
 8013e66:	eeb0 0a46 	vmov.f32	s0, s12
 8013e6a:	f007 f9f9 	bl	801b260 <atan2f>
 8013e6e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8013e78:	68fb      	ldr	r3, [r7, #12]
 8013e7a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013e7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013e92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013e96:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8013e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8013ea2:	f007 f9b1 	bl	801b208 <asinf>
 8013ea6:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013eb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013ece:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8013ede:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8013eee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8013f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8013f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013f1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013f1e:	eef0 0a67 	vmov.f32	s1, s15
 8013f22:	eeb0 0a46 	vmov.f32	s0, s12
 8013f26:	f007 f99b 	bl	801b260 <atan2f>
 8013f2a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 8013f2e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8013f32:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8013fa4 <kalmanCoreExternalizeState+0x380>
 8013f36:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 8013f3a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8013f3e:	eef1 7a67 	vneg.f32	s15, s15
 8013f42:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8013fa4 <kalmanCoreExternalizeState+0x380>
 8013f46:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 8013f4a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8013f4e:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8013fa4 <kalmanCoreExternalizeState+0x380>
 8013f52:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 8013f56:	68bb      	ldr	r3, [r7, #8]
 8013f58:	461a      	mov	r2, r3
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	6013      	str	r3, [r2, #0]
 8013f5e:	6053      	str	r3, [r2, #4]
 8013f60:	6093      	str	r3, [r2, #8]
 8013f62:	60d3      	str	r3, [r2, #12]
 8013f64:	68bb      	ldr	r3, [r7, #8]
 8013f66:	edc3 6a01 	vstr	s13, [r3, #4]
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	ed83 7a02 	vstr	s14, [r3, #8]
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      .y = this->q[2],
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
      .z = this->q[3]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
      .w = this->q[0],
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  state->attitudeQuaternion = (quaternion_t){
 8013f86:	68bb      	ldr	r3, [r7, #8]
 8013f88:	611c      	str	r4, [r3, #16]
 8013f8a:	68bb      	ldr	r3, [r7, #8]
 8013f8c:	6158      	str	r0, [r3, #20]
 8013f8e:	68bb      	ldr	r3, [r7, #8]
 8013f90:	6199      	str	r1, [r3, #24]
 8013f92:	68bb      	ldr	r3, [r7, #8]
 8013f94:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 8013f96:	68f8      	ldr	r0, [r7, #12]
 8013f98:	f7fd fa12 	bl	80113c0 <assertStateNotNaN>
}
 8013f9c:	bf00      	nop
 8013f9e:	3774      	adds	r7, #116	@ 0x74
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd90      	pop	{r4, r7, pc}
 8013fa4:	42652ee0 	.word	0x42652ee0

08013fa8 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08e      	sub	sp, #56	@ 0x38
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 8013fb2:	f107 0314 	add.w	r3, r7, #20
 8013fb6:	2224      	movs	r2, #36	@ 0x24
 8013fb8:	2100      	movs	r1, #0
 8013fba:	4618      	mov	r0, r3
 8013fbc:	f007 f83a 	bl	801b034 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8013fc0:	2301      	movs	r3, #1
 8013fc2:	81bb      	strh	r3, [r7, #12]
 8013fc4:	2309      	movs	r3, #9
 8013fc6:	81fb      	strh	r3, [r7, #14]
 8013fc8:	f107 0314 	add.w	r3, r7, #20
 8013fcc:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 8013fce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8013fd2:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 8013fd4:	683b      	ldr	r3, [r7, #0]
 8013fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	edd3 7a02 	vldr	s15, [r3, #8]
 8013fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	ed93 7a02 	vldr	s14, [r3, #8]
 8013fea:	f107 030c 	add.w	r3, r7, #12
 8013fee:	eef0 0a47 	vmov.f32	s1, s14
 8013ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8013ff6:	4619      	mov	r1, r3
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7fd fb79 	bl	80116f0 <kalmanCoreScalarUpdate>
}
 8013ffe:	bf00      	nop
 8014000:	3738      	adds	r7, #56	@ 0x38
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
	...

08014008 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8014008:	b580      	push	{r7, lr}
 801400a:	b086      	sub	sp, #24
 801400c:	af00      	add	r7, sp, #0
 801400e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8014012:	f04f 0300 	mov.w	r3, #0
 8014016:	60bb      	str	r3, [r7, #8]
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	613b      	str	r3, [r7, #16]
 801401c:	f107 0308 	add.w	r3, r7, #8
 8014020:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8014022:	edd7 7a04 	vldr	s15, [r7, #16]
 8014026:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801402e:	db0a      	blt.n	8014046 <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 8014030:	ed97 0a04 	vldr	s0, [r7, #16]
 8014034:	f007 f9d2 	bl	801b3dc <sqrtf>
 8014038:	eef0 7a40 	vmov.f32	s15, s0
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8014042:	2300      	movs	r3, #0
 8014044:	e005      	b.n	8014052 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f04f 0200 	mov.w	r2, #0
 801404c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 801404e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 8014052:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8014054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d004      	beq.n	8014066 <arm_sqrt+0x5e>
 801405c:	2258      	movs	r2, #88	@ 0x58
 801405e:	4906      	ldr	r1, [pc, #24]	@ (8014078 <arm_sqrt+0x70>)
 8014060:	4806      	ldr	r0, [pc, #24]	@ (801407c <arm_sqrt+0x74>)
 8014062:	f001 fd35 	bl	8015ad0 <assertFail>
  return pOut;
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	ee07 3a90 	vmov	s15, r3
}
 801406c:	eeb0 0a67 	vmov.f32	s0, s15
 8014070:	3718      	adds	r7, #24
 8014072:	46bd      	mov	sp, r7
 8014074:	bd80      	pop	{r7, pc}
 8014076:	bf00      	nop
 8014078:	0801ea14 	.word	0x0801ea14
 801407c:	0801ea54 	.word	0x0801ea54

08014080 <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 8014080:	b580      	push	{r7, lr}
 8014082:	ed2d 8b02 	vpush	{d8}
 8014086:	b092      	sub	sp, #72	@ 0x48
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
 801408c:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 801408e:	f107 0310 	add.w	r3, r7, #16
 8014092:	2224      	movs	r2, #36	@ 0x24
 8014094:	2100      	movs	r1, #0
 8014096:	4618      	mov	r0, r3
 8014098:	f006 ffcc 	bl	801b034 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801409c:	2301      	movs	r3, #1
 801409e:	813b      	strh	r3, [r7, #8]
 80140a0:	2309      	movs	r3, #9
 80140a2:	817b      	strh	r3, [r7, #10]
 80140a4:	f107 0310 	add.w	r3, r7, #16
 80140a8:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	ed93 7a00 	vldr	s14, [r3]
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	edd3 7a00 	vldr	s15, [r3]
 80140b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140ba:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	ed93 7a01 	vldr	s14, [r3, #4]
 80140c4:	683b      	ldr	r3, [r7, #0]
 80140c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80140ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140ce:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80140d8:	683b      	ldr	r3, [r7, #0]
 80140da:	edd3 7a02 	vldr	s15, [r3, #8]
 80140de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80140e2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

  float measuredDistance = d->distance;
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	691b      	ldr	r3, [r3, #16]
 80140ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 80140ec:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80140f0:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 80140f4:	f007 f91a 	bl	801b32c <powf>
 80140f8:	eeb0 8a40 	vmov.f32	s16, s0
 80140fc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8014100:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8014104:	f007 f912 	bl	801b32c <powf>
 8014108:	eef0 7a40 	vmov.f32	s15, s0
 801410c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8014110:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8014114:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8014118:	f007 f908 	bl	801b32c <powf>
 801411c:	eef0 7a40 	vmov.f32	s15, s0
 8014120:	ee78 7a27 	vadd.f32	s15, s16, s15
 8014124:	eeb0 0a67 	vmov.f32	s0, s15
 8014128:	f7ff ff6e 	bl	8014008 <arm_sqrt>
 801412c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  if (predictedDistance != 0.0f) {
 8014130:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8014134:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801413c:	d018      	beq.n	8014170 <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 801413e:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8014142:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8014146:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801414a:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 801414e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8014152:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8014156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801415a:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 801415e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8014162:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8014166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801416a:	edc7 7a06 	vstr	s15, [r7, #24]
 801416e:	e008      	b.n	8014182 <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 8014170:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8014174:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 8014176:	f04f 0300 	mov.w	r3, #0
 801417a:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 801417c:	f04f 0300 	mov.w	r3, #0
 8014180:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 8014182:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8014186:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 801418a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801418e:	683b      	ldr	r3, [r7, #0]
 8014190:	ed93 7a05 	vldr	s14, [r3, #20]
 8014194:	f107 0308 	add.w	r3, r7, #8
 8014198:	eef0 0a47 	vmov.f32	s1, s14
 801419c:	eeb0 0a67 	vmov.f32	s0, s15
 80141a0:	4619      	mov	r1, r3
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f7fd faa4 	bl	80116f0 <kalmanCoreScalarUpdate>
}
 80141a8:	bf00      	nop
 80141aa:	3748      	adds	r7, #72	@ 0x48
 80141ac:	46bd      	mov	sp, r7
 80141ae:	ecbd 8b02 	vpop	{d8}
 80141b2:	bd80      	pop	{r7, pc}

080141b4 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b084      	sub	sp, #16
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f003 0303 	and.w	r3, r3, #3
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d004      	beq.n	80141d6 <assert_aligned_4_bytes+0x22>
 80141cc:	2239      	movs	r2, #57	@ 0x39
 80141ce:	4904      	ldr	r1, [pc, #16]	@ (80141e0 <assert_aligned_4_bytes+0x2c>)
 80141d0:	4804      	ldr	r0, [pc, #16]	@ (80141e4 <assert_aligned_4_bytes+0x30>)
 80141d2:	f001 fc7d 	bl	8015ad0 <assertFail>
}
 80141d6:	bf00      	nop
 80141d8:	3710      	adds	r7, #16
 80141da:	46bd      	mov	sp, r7
 80141dc:	bd80      	pop	{r7, pc}
 80141de:	bf00      	nop
 80141e0:	0801ea70 	.word	0x0801ea70
 80141e4:	0801eab0 	.word	0x0801eab0

080141e8 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b084      	sub	sp, #16
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]
 80141f0:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f7ff ffde 	bl	80141b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 80141f8:	6838      	ldr	r0, [r7, #0]
 80141fa:	f7ff ffdb 	bl	80141b4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 80141fe:	6839      	ldr	r1, [r7, #0]
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f006 fc33 	bl	801aa6c <arm_mat_trans_f32>
 8014206:	4603      	mov	r3, r0
 8014208:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 801420a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d004      	beq.n	801421c <mat_trans+0x34>
 8014212:	2241      	movs	r2, #65	@ 0x41
 8014214:	4903      	ldr	r1, [pc, #12]	@ (8014224 <mat_trans+0x3c>)
 8014216:	4804      	ldr	r0, [pc, #16]	@ (8014228 <mat_trans+0x40>)
 8014218:	f001 fc5a 	bl	8015ad0 <assertFail>
}
 801421c:	bf00      	nop
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	0801ea70 	.word	0x0801ea70
 8014228:	0801eac8 	.word	0x0801eac8

0801422c <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
 8014234:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f7ff ffbc 	bl	80141b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 801423c:	6838      	ldr	r0, [r7, #0]
 801423e:	f7ff ffb9 	bl	80141b4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 8014242:	6839      	ldr	r1, [r7, #0]
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f006 fd5f 	bl	801ad08 <arm_mat_inverse_f32>
 801424a:	4603      	mov	r3, r0
 801424c:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 801424e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d004      	beq.n	8014260 <mat_inv+0x34>
 8014256:	2249      	movs	r2, #73	@ 0x49
 8014258:	4903      	ldr	r1, [pc, #12]	@ (8014268 <mat_inv+0x3c>)
 801425a:	4804      	ldr	r0, [pc, #16]	@ (801426c <mat_inv+0x40>)
 801425c:	f001 fc38 	bl	8015ad0 <assertFail>
}
 8014260:	bf00      	nop
 8014262:	3710      	adds	r7, #16
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	0801ea70 	.word	0x0801ea70
 801426c:	0801eac8 	.word	0x0801eac8

08014270 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 8014270:	b580      	push	{r7, lr}
 8014272:	b086      	sub	sp, #24
 8014274:	af00      	add	r7, sp, #0
 8014276:	60f8      	str	r0, [r7, #12]
 8014278:	60b9      	str	r1, [r7, #8]
 801427a:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 801427c:	68f8      	ldr	r0, [r7, #12]
 801427e:	f7ff ff99 	bl	80141b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 8014282:	68b8      	ldr	r0, [r7, #8]
 8014284:	f7ff ff96 	bl	80141b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f7ff ff93 	bl	80141b4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 801428e:	687a      	ldr	r2, [r7, #4]
 8014290:	68b9      	ldr	r1, [r7, #8]
 8014292:	68f8      	ldr	r0, [r7, #12]
 8014294:	f006 fc98 	bl	801abc8 <arm_mat_mult_f32>
 8014298:	4603      	mov	r3, r0
 801429a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 801429c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d004      	beq.n	80142ae <mat_mult+0x3e>
 80142a4:	2252      	movs	r2, #82	@ 0x52
 80142a6:	4904      	ldr	r1, [pc, #16]	@ (80142b8 <mat_mult+0x48>)
 80142a8:	4804      	ldr	r0, [pc, #16]	@ (80142bc <mat_mult+0x4c>)
 80142aa:	f001 fc11 	bl	8015ad0 <assertFail>
}
 80142ae:	bf00      	nop
 80142b0:	3718      	adds	r7, #24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	0801ea70 	.word	0x0801ea70
 80142bc:	0801eac8 	.word	0x0801eac8

080142c0 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 80142ca:	f04f 0300 	mov.w	r3, #0
 80142ce:	60bb      	str	r3, [r7, #8]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	613b      	str	r3, [r7, #16]
 80142d4:	f107 0308 	add.w	r3, r7, #8
 80142d8:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 80142da:	edd7 7a04 	vldr	s15, [r7, #16]
 80142de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80142e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142e6:	db0a      	blt.n	80142fe <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 80142e8:	ed97 0a04 	vldr	s0, [r7, #16]
 80142ec:	f007 f876 	bl	801b3dc <sqrtf>
 80142f0:	eef0 7a40 	vmov.f32	s15, s0
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 80142fa:	2300      	movs	r3, #0
 80142fc:	e005      	b.n	801430a <arm_sqrt+0x4a>
      *pOut = 0.0f;
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	f04f 0200 	mov.w	r2, #0
 8014304:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8014306:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 801430a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 801430c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d004      	beq.n	801431e <arm_sqrt+0x5e>
 8014314:	2258      	movs	r2, #88	@ 0x58
 8014316:	4906      	ldr	r1, [pc, #24]	@ (8014330 <arm_sqrt+0x70>)
 8014318:	4806      	ldr	r0, [pc, #24]	@ (8014334 <arm_sqrt+0x74>)
 801431a:	f001 fbd9 	bl	8015ad0 <assertFail>
  return pOut;
 801431e:	68bb      	ldr	r3, [r7, #8]
 8014320:	ee07 3a90 	vmov	s15, r3
}
 8014324:	eeb0 0a67 	vmov.f32	s0, s15
 8014328:	3718      	adds	r7, #24
 801432a:	46bd      	mov	sp, r7
 801432c:	bd80      	pop	{r7, pc}
 801432e:	bf00      	nop
 8014330:	0801ea70 	.word	0x0801ea70
 8014334:	0801eac8 	.word	0x0801eac8

08014338 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 8014338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801433c:	b08d      	sub	sp, #52	@ 0x34
 801433e:	af00      	add	r7, sp, #0
 8014340:	60f8      	str	r0, [r7, #12]
 8014342:	60b9      	str	r1, [r7, #8]
 8014344:	607a      	str	r2, [r7, #4]
 8014346:	68fa      	ldr	r2, [r7, #12]
 8014348:	603a      	str	r2, [r7, #0]
 801434a:	1e53      	subs	r3, r2, #1
 801434c:	61bb      	str	r3, [r7, #24]
 801434e:	2300      	movs	r3, #0
 8014350:	4690      	mov	r8, r2
 8014352:	4699      	mov	r9, r3
 8014354:	f04f 0200 	mov.w	r2, #0
 8014358:	f04f 0300 	mov.w	r3, #0
 801435c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8014360:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8014364:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8014368:	68fe      	ldr	r6, [r7, #12]
 801436a:	1e73      	subs	r3, r6, #1
 801436c:	617b      	str	r3, [r7, #20]
 801436e:	4632      	mov	r2, r6
 8014370:	2300      	movs	r3, #0
 8014372:	4614      	mov	r4, r2
 8014374:	461d      	mov	r5, r3
 8014376:	f04f 0200 	mov.w	r2, #0
 801437a:	f04f 0300 	mov.w	r3, #0
 801437e:	016b      	lsls	r3, r5, #5
 8014380:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8014384:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 8014386:	2300      	movs	r3, #0
 8014388:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801438a:	e0af      	b.n	80144ec <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 801438c:	2300      	movs	r3, #0
 801438e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014390:	e0a4      	b.n	80144dc <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 8014392:	f04f 0300 	mov.w	r3, #0
 8014396:	627b      	str	r3, [r7, #36]	@ 0x24
            if (j == i) // summation for diagnols 
 8014398:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801439a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801439c:	429a      	cmp	r2, r3
 801439e:	d146      	bne.n	801442e <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 80143a0:	2300      	movs	r3, #0
 80143a2:	623b      	str	r3, [r7, #32]
 80143a4:	e01c      	b.n	80143e0 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 80143a6:	4632      	mov	r2, r6
 80143a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143aa:	fb02 f303 	mul.w	r3, r2, r3
 80143ae:	009b      	lsls	r3, r3, #2
 80143b0:	687a      	ldr	r2, [r7, #4]
 80143b2:	441a      	add	r2, r3
 80143b4:	6a3b      	ldr	r3, [r7, #32]
 80143b6:	009b      	lsls	r3, r3, #2
 80143b8:	4413      	add	r3, r2
 80143ba:	edd3 7a00 	vldr	s15, [r3]
 80143be:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80143c2:	eeb0 0a67 	vmov.f32	s0, s15
 80143c6:	f006 ffb1 	bl	801b32c <powf>
 80143ca:	eeb0 7a40 	vmov.f32	s14, s0
 80143ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80143d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80143d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 80143da:	6a3b      	ldr	r3, [r7, #32]
 80143dc:	3301      	adds	r3, #1
 80143de:	623b      	str	r3, [r7, #32]
 80143e0:	6a3a      	ldr	r2, [r7, #32]
 80143e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143e4:	429a      	cmp	r2, r3
 80143e6:	dbde      	blt.n	80143a6 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 80143e8:	683a      	ldr	r2, [r7, #0]
 80143ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143ec:	fb02 f303 	mul.w	r3, r2, r3
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	68ba      	ldr	r2, [r7, #8]
 80143f4:	441a      	add	r2, r3
 80143f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80143f8:	009b      	lsls	r3, r3, #2
 80143fa:	4413      	add	r3, r2
 80143fc:	ed93 7a00 	vldr	s14, [r3]
 8014400:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8014404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014408:	4632      	mov	r2, r6
 801440a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801440c:	fb02 f303 	mul.w	r3, r2, r3
 8014410:	009b      	lsls	r3, r3, #2
 8014412:	687a      	ldr	r2, [r7, #4]
 8014414:	18d4      	adds	r4, r2, r3
 8014416:	eeb0 0a67 	vmov.f32	s0, s15
 801441a:	f006 ffdf 	bl	801b3dc <sqrtf>
 801441e:	eef0 7a40 	vmov.f32	s15, s0
 8014422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	4423      	add	r3, r4
 8014428:	edc3 7a00 	vstr	s15, [r3]
 801442c:	e053      	b.n	80144d6 <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 801442e:	2300      	movs	r3, #0
 8014430:	61fb      	str	r3, [r7, #28]
 8014432:	e022      	b.n	801447a <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 8014434:	4632      	mov	r2, r6
 8014436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014438:	fb02 f303 	mul.w	r3, r2, r3
 801443c:	009b      	lsls	r3, r3, #2
 801443e:	687a      	ldr	r2, [r7, #4]
 8014440:	441a      	add	r2, r3
 8014442:	69fb      	ldr	r3, [r7, #28]
 8014444:	009b      	lsls	r3, r3, #2
 8014446:	4413      	add	r3, r2
 8014448:	ed93 7a00 	vldr	s14, [r3]
 801444c:	4632      	mov	r2, r6
 801444e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014450:	fb02 f303 	mul.w	r3, r2, r3
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	441a      	add	r2, r3
 801445a:	69fb      	ldr	r3, [r7, #28]
 801445c:	009b      	lsls	r3, r3, #2
 801445e:	4413      	add	r3, r2
 8014460:	edd3 7a00 	vldr	s15, [r3]
 8014464:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014468:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801446c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014470:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	3301      	adds	r3, #1
 8014478:	61fb      	str	r3, [r7, #28]
 801447a:	69fa      	ldr	r2, [r7, #28]
 801447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801447e:	429a      	cmp	r2, r3
 8014480:	dbd8      	blt.n	8014434 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 8014482:	683a      	ldr	r2, [r7, #0]
 8014484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014486:	fb02 f303 	mul.w	r3, r2, r3
 801448a:	009b      	lsls	r3, r3, #2
 801448c:	68ba      	ldr	r2, [r7, #8]
 801448e:	441a      	add	r2, r3
 8014490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014492:	009b      	lsls	r3, r3, #2
 8014494:	4413      	add	r3, r2
 8014496:	ed93 7a00 	vldr	s14, [r3]
 801449a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801449e:	ee77 6a67 	vsub.f32	s13, s14, s15
 80144a2:	4632      	mov	r2, r6
 80144a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144a6:	fb02 f303 	mul.w	r3, r2, r3
 80144aa:	009b      	lsls	r3, r3, #2
 80144ac:	687a      	ldr	r2, [r7, #4]
 80144ae:	441a      	add	r2, r3
 80144b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144b2:	009b      	lsls	r3, r3, #2
 80144b4:	4413      	add	r3, r2
 80144b6:	ed93 7a00 	vldr	s14, [r3]
 80144ba:	4632      	mov	r2, r6
 80144bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144be:	fb02 f303 	mul.w	r3, r2, r3
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	687a      	ldr	r2, [r7, #4]
 80144c6:	441a      	add	r2, r3
 80144c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80144cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4413      	add	r3, r2
 80144d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 80144d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144d8:	3301      	adds	r3, #1
 80144da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80144dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80144de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e0:	429a      	cmp	r2, r3
 80144e2:	f77f af56 	ble.w	8014392 <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 80144e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144e8:	3301      	adds	r3, #1
 80144ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80144ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	429a      	cmp	r2, r3
 80144f2:	f6ff af4b 	blt.w	801438c <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 80144f6:	bf00      	nop
 80144f8:	bf00      	nop
 80144fa:	3734      	adds	r7, #52	@ 0x34
 80144fc:	46bd      	mov	sp, r7
 80144fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014502 <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 8014502:	b480      	push	{r7}
 8014504:	b085      	sub	sp, #20
 8014506:	af00      	add	r7, sp, #0
 8014508:	ed87 0a01 	vstr	s0, [r7, #4]
 801450c:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 801450e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8014512:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8014514:	edd7 7a01 	vldr	s15, [r7, #4]
 8014518:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801451c:	ed97 7a03 	vldr	s14, [r7, #12]
 8014520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014524:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8014528:	edd7 7a03 	vldr	s15, [r7, #12]
 801452c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014530:	edd7 7a02 	vldr	s15, [r7, #8]
 8014534:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	edc3 7a00 	vstr	s15, [r3]
}
 8014542:	bf00      	nop
 8014544:	3714      	adds	r7, #20
 8014546:	46bd      	mov	sp, r7
 8014548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801454c:	4770      	bx	lr

0801454e <GM_state>:

static void GM_state(float e, float * GM_e){
 801454e:	b480      	push	{r7}
 8014550:	b085      	sub	sp, #20
 8014552:	af00      	add	r7, sp, #0
 8014554:	ed87 0a01 	vstr	s0, [r7, #4]
 8014558:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 801455a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801455e:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8014560:	edd7 7a01 	vldr	s15, [r7, #4]
 8014564:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8014568:	ed97 7a03 	vldr	s14, [r7, #12]
 801456c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014570:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8014574:	edd7 7a03 	vldr	s15, [r7, #12]
 8014578:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801457c:	edd7 7a02 	vldr	s15, [r7, #8]
 8014580:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014588:	683b      	ldr	r3, [r7, #0]
 801458a:	edc3 7a00 	vstr	s15, [r3]
}
 801458e:	bf00      	nop
 8014590:	3714      	adds	r7, #20
 8014592:	46bd      	mov	sp, r7
 8014594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014598:	4770      	bx	lr
	...

0801459c <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	ed2d 8b02 	vpush	{d8}
 80145a2:	b0f8      	sub	sp, #480	@ 0x1e0
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80145aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80145ae:	6018      	str	r0, [r3, #0]
 80145b0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80145b4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80145b8:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 80145ba:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80145be:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80145c2:	681b      	ldr	r3, [r3, #0]
 80145c4:	ed93 7a00 	vldr	s14, [r3]
 80145c8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80145cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	edd3 7a00 	vldr	s15, [r3]
 80145d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145da:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 80145de:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80145e2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80145ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80145f0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80145fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80145fe:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 8014602:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014606:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	ed93 7a02 	vldr	s14, [r3, #8]
 8014610:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014614:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	edd3 7a02 	vldr	s15, [r3, #8]
 801461e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014622:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8
    float measuredDistance = d->distance;
 8014626:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801462a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	691b      	ldr	r3, [r3, #16]
 8014632:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8014636:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801463a:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 801463e:	f006 fe75 	bl	801b32c <powf>
 8014642:	eeb0 8a40 	vmov.f32	s16, s0
 8014646:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801464a:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 801464e:	f006 fe6d 	bl	801b32c <powf>
 8014652:	eef0 7a40 	vmov.f32	s15, s0
 8014656:	ee38 8a27 	vadd.f32	s16, s16, s15
 801465a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801465e:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 8014662:	f006 fe63 	bl	801b32c <powf>
 8014666:	eef0 7a40 	vmov.f32	s15, s0
 801466a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801466e:	eeb0 0a67 	vmov.f32	s0, s15
 8014672:	f7ff fe25 	bl	80142c0 <arm_sqrt>
 8014676:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 801467a:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 801467e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 8014682:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014686:	edc7 7a67 	vstr	s15, [r7, #412]	@ 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 801468a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 801468e:	2224      	movs	r2, #36	@ 0x24
 8014690:	2100      	movs	r1, #0
 8014692:	4618      	mov	r0, r3
 8014694:	f006 fcce 	bl	801b034 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 8014698:	2301      	movs	r3, #1
 801469a:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 801469e:	2309      	movs	r3, #9
 80146a0:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
 80146a4:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80146a8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 80146ac:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80146b0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80146ba:	f107 0310 	add.w	r3, r7, #16
 80146be:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80146c2:	4618      	mov	r0, r3
 80146c4:	f006 fcfc 	bl	801b0c0 <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 80146c8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80146cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	ed93 7a05 	vldr	s14, [r3, #20]
 80146d6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80146da:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80146e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80146e8:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 80146ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80146f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	2224      	movs	r2, #36	@ 0x24
 80146f8:	4619      	mov	r1, r3
 80146fa:	48cf      	ldr	r0, [pc, #828]	@ (8014a38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 80146fc:	f006 fce0 	bl	801b0c0 <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 8014700:	2300      	movs	r3, #0
 8014702:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8014706:	e2c3      	b.n	8014c90 <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 8014708:	f107 0310 	add.w	r3, r7, #16
 801470c:	4acb      	ldr	r2, [pc, #812]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801470e:	4619      	mov	r1, r3
 8014710:	2009      	movs	r0, #9
 8014712:	f7ff fe11 	bl	8014338 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 8014716:	49ca      	ldr	r1, [pc, #808]	@ (8014a40 <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 8014718:	48ca      	ldr	r0, [pc, #808]	@ (8014a44 <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 801471a:	f7ff fd65 	bl	80141e8 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 801471e:	ed97 0a77 	vldr	s0, [r7, #476]	@ 0x1dc
 8014722:	f006 fe5b 	bl	801b3dc <sqrtf>
 8014726:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 801472a:	4bc3      	ldr	r3, [pc, #780]	@ (8014a38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8014732:	4bc1      	ldr	r3, [pc, #772]	@ (8014a38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 8014734:	685b      	ldr	r3, [r3, #4]
 8014736:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801473a:	4bbf      	ldr	r3, [pc, #764]	@ (8014a38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 801473c:	689b      	ldr	r3, [r3, #8]
 801473e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 8014742:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014746:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801474a:	681b      	ldr	r3, [r3, #0]
 801474c:	edd3 7a00 	vldr	s15, [r3]
 8014750:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 8014754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014758:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
 801475c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014760:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	edd3 7a01 	vldr	s15, [r3, #4]
 801476a:	ed97 7a64 	vldr	s14, [r7, #400]	@ 0x190
 801476e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014772:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
 8014776:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801477a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	edd3 7a02 	vldr	s15, [r3, #8]
 8014784:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 8014788:	ee77 7a67 	vsub.f32	s15, s14, s15
 801478c:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8014790:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8014794:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 8014798:	f006 fdc8 	bl	801b32c <powf>
 801479c:	eeb0 8a40 	vmov.f32	s16, s0
 80147a0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80147a4:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 80147a8:	f006 fdc0 	bl	801b32c <powf>
 80147ac:	eef0 7a40 	vmov.f32	s15, s0
 80147b0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80147b4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80147b8:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 80147bc:	f006 fdb6 	bl	801b32c <powf>
 80147c0:	eef0 7a40 	vmov.f32	s15, s0
 80147c4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80147c8:	eeb0 0a67 	vmov.f32	s0, s15
 80147cc:	f7ff fd78 	bl	80142c0 <arm_sqrt>
 80147d0:	ed87 0a62 	vstr	s0, [r7, #392]	@ 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 80147d4:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 80147d8:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80147dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147e0:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184

        float e_y = error_iter;
 80147e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80147e8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

        if (predicted_iter != 0.0f) {
 80147ec:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 80147f0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80147f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f8:	d018      	beq.n	801482c <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 80147fa:	edd7 6a6c 	vldr	s13, [r7, #432]	@ 0x1b0
 80147fe:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8014802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014806:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 801480a:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 801480e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8014812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014816:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 801481a:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 801481e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8014822:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014826:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
 801482a:	e00b      	b.n	8014844 <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 801482c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8014830:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = 0.0f;
 8014834:	f04f 0300 	mov.w	r3, #0
 8014838:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = 0.0f;
 801483c:	f04f 0300 	mov.w	r3, #0
 8014840:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 8014844:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8014848:	eef0 7ae7 	vabs.f32	s15, s15
 801484c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8014a48 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 8014850:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014858:	d508      	bpl.n	801486c <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 801485a:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 801485e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8014a48 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 8014862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014866:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
 801486a:	e007      	b.n	801487c <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 801486c:	edd7 6a61 	vldr	s13, [r7, #388]	@ 0x184
 8014870:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 8014874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014878:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 801487c:	2300      	movs	r3, #0
 801487e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8014882:	e095      	b.n	80149b0 <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 8014884:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8014888:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801488c:	e086      	b.n	801499c <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 801488e:	496b      	ldr	r1, [pc, #428]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8014890:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8014894:	4613      	mov	r3, r2
 8014896:	00db      	lsls	r3, r3, #3
 8014898:	4413      	add	r3, r2
 801489a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801489e:	4413      	add	r3, r2
 80148a0:	009b      	lsls	r3, r3, #2
 80148a2:	440b      	add	r3, r1
 80148a4:	edd3 7a00 	vldr	s15, [r3]
 80148a8:	eef4 7a67 	vcmp.f32	s15, s15
 80148ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b0:	d613      	bvs.n	80148da <kalmanCoreRobustUpdateWithDistance+0x33e>
 80148b2:	4962      	ldr	r1, [pc, #392]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80148b4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80148b8:	4613      	mov	r3, r2
 80148ba:	00db      	lsls	r3, r3, #3
 80148bc:	4413      	add	r3, r2
 80148be:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80148c2:	4413      	add	r3, r2
 80148c4:	009b      	lsls	r3, r3, #2
 80148c6:	440b      	add	r3, r1
 80148c8:	edd3 7a00 	vldr	s15, [r3]
 80148cc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8014a4c <kalmanCoreRobustUpdateWithDistance+0x4b0>
 80148d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80148d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148d8:	dd0d      	ble.n	80148f6 <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 80148da:	4958      	ldr	r1, [pc, #352]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80148dc:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80148e0:	4613      	mov	r3, r2
 80148e2:	00db      	lsls	r3, r3, #3
 80148e4:	4413      	add	r3, r2
 80148e6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80148ea:	4413      	add	r3, r2
 80148ec:	009b      	lsls	r3, r3, #2
 80148ee:	440b      	add	r3, r1
 80148f0:	4a57      	ldr	r2, [pc, #348]	@ (8014a50 <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 80148f2:	601a      	str	r2, [r3, #0]
 80148f4:	e04d      	b.n	8014992 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 80148f6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80148fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80148fe:	429a      	cmp	r2, r3
 8014900:	d021      	beq.n	8014946 <kalmanCoreRobustUpdateWithDistance+0x3aa>
 8014902:	494e      	ldr	r1, [pc, #312]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8014904:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8014908:	4613      	mov	r3, r2
 801490a:	00db      	lsls	r3, r3, #3
 801490c:	4413      	add	r3, r2
 801490e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8014912:	4413      	add	r3, r2
 8014914:	009b      	lsls	r3, r3, #2
 8014916:	440b      	add	r3, r1
 8014918:	edd3 7a00 	vldr	s15, [r3]
 801491c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8014a54 <kalmanCoreRobustUpdateWithDistance+0x4b8>
 8014920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014928:	d50d      	bpl.n	8014946 <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 801492a:	4944      	ldr	r1, [pc, #272]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801492c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8014930:	4613      	mov	r3, r2
 8014932:	00db      	lsls	r3, r3, #3
 8014934:	4413      	add	r3, r2
 8014936:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801493a:	4413      	add	r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	440b      	add	r3, r1
 8014940:	4a45      	ldr	r2, [pc, #276]	@ (8014a58 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 8014942:	601a      	str	r2, [r3, #0]
 8014944:	e025      	b.n	8014992 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 8014946:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801494a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801494e:	429a      	cmp	r2, r3
 8014950:	d11f      	bne.n	8014992 <kalmanCoreRobustUpdateWithDistance+0x3f6>
 8014952:	493a      	ldr	r1, [pc, #232]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8014954:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8014958:	4613      	mov	r3, r2
 801495a:	00db      	lsls	r3, r3, #3
 801495c:	4413      	add	r3, r2
 801495e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8014962:	4413      	add	r3, r2
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	440b      	add	r3, r1
 8014968:	edd3 7a00 	vldr	s15, [r3]
 801496c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014974:	d50d      	bpl.n	8014992 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 8014976:	4931      	ldr	r1, [pc, #196]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8014978:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801497c:	4613      	mov	r3, r2
 801497e:	00db      	lsls	r3, r3, #3
 8014980:	4413      	add	r3, r2
 8014982:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8014986:	4413      	add	r3, r2
 8014988:	009b      	lsls	r3, r3, #2
 801498a:	440b      	add	r3, r1
 801498c:	f04f 0200 	mov.w	r2, #0
 8014990:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 8014992:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8014996:	3301      	adds	r3, #1
 8014998:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 801499c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80149a0:	2b08      	cmp	r3, #8
 80149a2:	f77f af74 	ble.w	801488e <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 80149a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80149aa:	3301      	adds	r3, #1
 80149ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80149b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80149b4:	2b08      	cmp	r3, #8
 80149b6:	f77f af65 	ble.w	8014884 <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 80149ba:	4b28      	ldr	r3, [pc, #160]	@ (8014a5c <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 80149bc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 80149c0:	2300      	movs	r3, #0
 80149c2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80149c6:	e01c      	b.n	8014a02 <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 80149c8:	491c      	ldr	r1, [pc, #112]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80149ca:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80149ce:	4613      	mov	r3, r2
 80149d0:	009b      	lsls	r3, r3, #2
 80149d2:	4413      	add	r3, r2
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	440b      	add	r3, r1
 80149d8:	ed93 7a00 	vldr	s14, [r3]
 80149dc:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 80149e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80149e4:	4915      	ldr	r1, [pc, #84]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80149e6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80149ea:	4613      	mov	r3, r2
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	4413      	add	r3, r2
 80149f0:	00db      	lsls	r3, r3, #3
 80149f2:	440b      	add	r3, r1
 80149f4:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 80149f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80149fc:	3301      	adds	r3, #1
 80149fe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8014a02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8014a06:	2b08      	cmp	r3, #8
 8014a08:	ddde      	ble.n	80149c8 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 8014a0a:	4a15      	ldr	r2, [pc, #84]	@ (8014a60 <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 8014a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8014a3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8014a0e:	4610      	mov	r0, r2
 8014a10:	4619      	mov	r1, r3
 8014a12:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8014a16:	461a      	mov	r2, r3
 8014a18:	f006 fb52 	bl	801b0c0 <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 8014a1c:	4911      	ldr	r1, [pc, #68]	@ (8014a64 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 8014a1e:	4812      	ldr	r0, [pc, #72]	@ (8014a68 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 8014a20:	f7ff fc04 	bl	801422c <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 8014a24:	4a11      	ldr	r2, [pc, #68]	@ (8014a6c <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 8014a26:	4912      	ldr	r1, [pc, #72]	@ (8014a70 <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 8014a28:	480e      	ldr	r0, [pc, #56]	@ (8014a64 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 8014a2a:	f7ff fc21 	bl	8014270 <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 8014a2e:	2300      	movs	r3, #0
 8014a30:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8014a34:	e04f      	b.n	8014ad6 <kalmanCoreRobustUpdateWithDistance+0x53a>
 8014a36:	bf00      	nop
 8014a38:	20009c30 	.word	0x20009c30
 8014a3c:	20009c54 	.word	0x20009c54
 8014a40:	200000f0 	.word	0x200000f0
 8014a44:	200000e8 	.word	0x200000e8
 8014a48:	38d1b717 	.word	0x38d1b717
 8014a4c:	42c80000 	.word	0x42c80000
 8014a50:	42c80000 	.word	0x42c80000
 8014a54:	c2c80000 	.word	0xc2c80000
 8014a58:	c2c80000 	.word	0xc2c80000
 8014a5c:	3089705f 	.word	0x3089705f
 8014a60:	20009d98 	.word	0x20009d98
 8014a64:	20000100 	.word	0x20000100
 8014a68:	200000f8 	.word	0x200000f8
 8014a6c:	20000110 	.word	0x20000110
 8014a70:	20000108 	.word	0x20000108
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 8014a74:	4a93      	ldr	r2, [pc, #588]	@ (8014cc4 <kalmanCoreRobustUpdateWithDistance+0x728>)
 8014a76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	4413      	add	r3, r2
 8014a7e:	edd3 7a00 	vldr	s15, [r3]
 8014a82:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8014a86:	4613      	mov	r3, r2
 8014a88:	009b      	lsls	r3, r3, #2
 8014a8a:	4413      	add	r3, r2
 8014a8c:	00db      	lsls	r3, r3, #3
 8014a8e:	4a8e      	ldr	r2, [pc, #568]	@ (8014cc8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8014a90:	4413      	add	r3, r2
 8014a92:	4618      	mov	r0, r3
 8014a94:	eeb0 0a67 	vmov.f32	s0, s15
 8014a98:	f7ff fd59 	bl	801454e <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 8014a9c:	498a      	ldr	r1, [pc, #552]	@ (8014cc8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8014a9e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	009b      	lsls	r3, r3, #2
 8014aa6:	4413      	add	r3, r2
 8014aa8:	00db      	lsls	r3, r3, #3
 8014aaa:	440b      	add	r3, r1
 8014aac:	ed93 7a00 	vldr	s14, [r3]
 8014ab0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014ab8:	4983      	ldr	r1, [pc, #524]	@ (8014cc8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 8014aba:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 8014abe:	4613      	mov	r3, r2
 8014ac0:	009b      	lsls	r3, r3, #2
 8014ac2:	4413      	add	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	440b      	add	r3, r1
 8014ac8:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 8014acc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8014ad0:	3301      	adds	r3, #1
 8014ad2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8014ad6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8014ada:	2b08      	cmp	r3, #8
 8014adc:	ddca      	ble.n	8014a74 <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 8014ade:	4a7b      	ldr	r2, [pc, #492]	@ (8014ccc <kalmanCoreRobustUpdateWithDistance+0x730>)
 8014ae0:	497b      	ldr	r1, [pc, #492]	@ (8014cd0 <kalmanCoreRobustUpdateWithDistance+0x734>)
 8014ae2:	487c      	ldr	r0, [pc, #496]	@ (8014cd4 <kalmanCoreRobustUpdateWithDistance+0x738>)
 8014ae4:	f7ff fbc4 	bl	8014270 <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 8014ae8:	4a7b      	ldr	r2, [pc, #492]	@ (8014cd8 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8014aea:	497c      	ldr	r1, [pc, #496]	@ (8014cdc <kalmanCoreRobustUpdateWithDistance+0x740>)
 8014aec:	4877      	ldr	r0, [pc, #476]	@ (8014ccc <kalmanCoreRobustUpdateWithDistance+0x730>)
 8014aee:	f7ff fbbf 	bl	8014270 <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 8014af2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014af6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8014afa:	f04f 0200 	mov.w	r2, #0
 8014afe:	601a      	str	r2, [r3, #0]
 8014b00:	f04f 0300 	mov.w	r3, #0
 8014b04:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 8014b08:	f107 030c 	add.w	r3, r7, #12
 8014b0c:	4618      	mov	r0, r3
 8014b0e:	ed97 0a75 	vldr	s0, [r7, #468]	@ 0x1d4
 8014b12:	f7ff fcf6 	bl	8014502 <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 8014b16:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014b1a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8014b1e:	edd3 7a00 	vldr	s15, [r3]
 8014b22:	eef0 7ae7 	vabs.f32	s15, s15
 8014b26:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8014ce0 <kalmanCoreRobustUpdateWithDistance+0x744>
 8014b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b32:	d50a      	bpl.n	8014b4a <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 8014b34:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8014b38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8014b3c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8014ce0 <kalmanCoreRobustUpdateWithDistance+0x744>
 8014b40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014b44:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
 8014b48:	e00d      	b.n	8014b66 <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 8014b4a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8014b4e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014b52:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014b56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8014b5a:	ed93 7a00 	vldr	s14, [r3]
 8014b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014b62:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 8014b66:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8014b6a:	495e      	ldr	r1, [pc, #376]	@ (8014ce4 <kalmanCoreRobustUpdateWithDistance+0x748>)
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f7ff fb3b 	bl	80141e8 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 8014b72:	4a5d      	ldr	r2, [pc, #372]	@ (8014ce8 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 8014b74:	495b      	ldr	r1, [pc, #364]	@ (8014ce4 <kalmanCoreRobustUpdateWithDistance+0x748>)
 8014b76:	4858      	ldr	r0, [pc, #352]	@ (8014cd8 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8014b78:	f7ff fb7a 	bl	8014270 <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 8014b7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8014b80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 8014b84:	2300      	movs	r3, #0
 8014b86:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8014b8a:	e01c      	b.n	8014bc6 <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 8014b8c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8014b90:	009b      	lsls	r3, r3, #2
 8014b92:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 8014b96:	443b      	add	r3, r7
 8014b98:	3b84      	subs	r3, #132	@ 0x84
 8014b9a:	ed93 7a00 	vldr	s14, [r3]
 8014b9e:	4a53      	ldr	r2, [pc, #332]	@ (8014cec <kalmanCoreRobustUpdateWithDistance+0x750>)
 8014ba0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8014ba4:	009b      	lsls	r3, r3, #2
 8014ba6:	4413      	add	r3, r2
 8014ba8:	edd3 7a00 	vldr	s15, [r3]
 8014bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014bb0:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 8014bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014bb8:	edc7 7a6f 	vstr	s15, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 8014bbc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8014bc0:	3301      	adds	r3, #1
 8014bc2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 8014bc6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8014bca:	2b08      	cmp	r3, #8
 8014bcc:	ddde      	ble.n	8014b8c <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 8014bce:	2300      	movs	r3, #0
 8014bd0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8014bd4:	e043      	b.n	8014c5e <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 8014bd6:	4a45      	ldr	r2, [pc, #276]	@ (8014cec <kalmanCoreRobustUpdateWithDistance+0x750>)
 8014bd8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014bdc:	009b      	lsls	r3, r3, #2
 8014bde:	4413      	add	r3, r2
 8014be0:	edd3 6a00 	vldr	s13, [r3]
 8014be4:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 8014be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8014bec:	4a40      	ldr	r2, [pc, #256]	@ (8014cf0 <kalmanCoreRobustUpdateWithDistance+0x754>)
 8014bee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014bf2:	009b      	lsls	r3, r3, #2
 8014bf4:	4413      	add	r3, r2
 8014bf6:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 8014bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8014cf0 <kalmanCoreRobustUpdateWithDistance+0x754>)
 8014bfc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c00:	009b      	lsls	r3, r3, #2
 8014c02:	4413      	add	r3, r2
 8014c04:	ed93 7a00 	vldr	s14, [r3]
 8014c08:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 8014c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c10:	4a38      	ldr	r2, [pc, #224]	@ (8014cf4 <kalmanCoreRobustUpdateWithDistance+0x758>)
 8014c12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	4413      	add	r3, r2
 8014c1a:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 8014c1e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014c22:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8014c26:	681a      	ldr	r2, [r3, #0]
 8014c28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	4413      	add	r3, r2
 8014c30:	ed93 7a00 	vldr	s14, [r3]
 8014c34:	4a2f      	ldr	r2, [pc, #188]	@ (8014cf4 <kalmanCoreRobustUpdateWithDistance+0x758>)
 8014c36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c3a:	009b      	lsls	r3, r3, #2
 8014c3c:	4413      	add	r3, r2
 8014c3e:	edd3 7a00 	vldr	s15, [r3]
 8014c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c46:	4a2c      	ldr	r2, [pc, #176]	@ (8014cf8 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 8014c48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c4c:	009b      	lsls	r3, r3, #2
 8014c4e:	4413      	add	r3, r2
 8014c50:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 8014c54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c58:	3301      	adds	r3, #1
 8014c5a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8014c5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8014c62:	2b08      	cmp	r3, #8
 8014c64:	ddb7      	ble.n	8014bd6 <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 8014c66:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014c6a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8014c6e:	4a23      	ldr	r2, [pc, #140]	@ (8014cfc <kalmanCoreRobustUpdateWithDistance+0x760>)
 8014c70:	4618      	mov	r0, r3
 8014c72:	4611      	mov	r1, r2
 8014c74:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8014c78:	461a      	mov	r2, r3
 8014c7a:	f006 fa21 	bl	801b0c0 <memcpy>
        R_iter = R_w;
 8014c7e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8014c82:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 8014c86:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8014c90:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8014c94:	2b01      	cmp	r3, #1
 8014c96:	f77f ad37 	ble.w	8014708 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 8014c9a:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 8014c9e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8014ca2:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 8014ca6:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 8014caa:	4b0b      	ldr	r3, [pc, #44]	@ (8014cd8 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 8014cac:	4a14      	ldr	r2, [pc, #80]	@ (8014d00 <kalmanCoreRobustUpdateWithDistance+0x764>)
 8014cae:	6800      	ldr	r0, [r0, #0]
 8014cb0:	f7fc ff1e 	bl	8011af0 <kalmanCoreUpdateWithPKE>

}  
 8014cb4:	bf00      	nop
 8014cb6:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 8014cba:	46bd      	mov	sp, r7
 8014cbc:	ecbd 8b02 	vpop	{d8}
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	20009edc 	.word	0x20009edc
 8014cc8:	20009f00 	.word	0x20009f00
 8014ccc:	20000120 	.word	0x20000120
 8014cd0:	20000118 	.word	0x20000118
 8014cd4:	200000e8 	.word	0x200000e8
 8014cd8:	20000128 	.word	0x20000128
 8014cdc:	200000f0 	.word	0x200000f0
 8014ce0:	38d1b717 	.word	0x38d1b717
 8014ce4:	20000130 	.word	0x20000130
 8014ce8:	20000138 	.word	0x20000138
 8014cec:	2000a044 	.word	0x2000a044
 8014cf0:	2000a068 	.word	0x2000a068
 8014cf4:	2000a08c 	.word	0x2000a08c
 8014cf8:	20009c30 	.word	0x20009c30
 8014cfc:	2000a0b0 	.word	0x2000a0b0
 8014d00:	20000140 	.word	0x20000140

08014d04 <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	b0a2      	sub	sp, #136	@ 0x88
 8014d08:	af00      	add	r7, sp, #0
 8014d0a:	60f8      	str	r0, [r7, #12]
 8014d0c:	60b9      	str	r1, [r7, #8]
 8014d0e:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 8014d10:	4ba2      	ldr	r3, [pc, #648]	@ (8014f9c <kalmanCoreUpdateWithFlow+0x298>)
 8014d12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 8014d16:	4ba2      	ldr	r3, [pc, #648]	@ (8014fa0 <kalmanCoreUpdateWithFlow+0x29c>)
 8014d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	edd3 7a00 	vldr	s15, [r3]
 8014d20:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8014fa4 <kalmanCoreUpdateWithFlow+0x2a0>
 8014d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d28:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8014d32:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8014fa4 <kalmanCoreUpdateWithFlow+0x2a0>
 8014d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014d3a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	68db      	ldr	r3, [r3, #12]
 8014d42:	673b      	str	r3, [r7, #112]	@ 0x70
  float dy_g = this->S[KC_STATE_PY];
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	691b      	ldr	r3, [r3, #16]
 8014d48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float z_g = 0.0;
 8014d4a:	f04f 0300 	mov.w	r3, #0
 8014d4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8014d58:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8014fa8 <kalmanCoreUpdateWithFlow+0x2a4>
 8014d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d64:	d503      	bpl.n	8014d6e <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 8014d66:	4b91      	ldr	r3, [pc, #580]	@ (8014fac <kalmanCoreUpdateWithFlow+0x2a8>)
 8014d68:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8014d6c:	e003      	b.n	8014d76 <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	689b      	ldr	r3, [r3, #8]
 8014d72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 8014d76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8014d7a:	2224      	movs	r2, #36	@ 0x24
 8014d7c:	2100      	movs	r1, #0
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f006 f958 	bl	801b034 <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 8014d84:	2301      	movs	r3, #1
 8014d86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8014d8a:	2309      	movs	r3, #9
 8014d8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8014d90:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8014d94:	647b      	str	r3, [r7, #68]	@ 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 8014d96:	68bb      	ldr	r3, [r7, #8]
 8014d98:	ed93 7a05 	vldr	s14, [r3, #20]
 8014d9c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8014da0:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014da4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8014da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8014db2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8014db6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8014dba:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014dbe:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014dc2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8014dc6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8014dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014dce:	4b78      	ldr	r3, [pc, #480]	@ (8014fb0 <kalmanCoreUpdateWithFlow+0x2ac>)
 8014dd0:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8014dda:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8014fa8 <kalmanCoreUpdateWithFlow+0x2a4>
 8014dde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014de2:	4b74      	ldr	r3, [pc, #464]	@ (8014fb4 <kalmanCoreUpdateWithFlow+0x2b0>)
 8014de4:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	ed93 7a05 	vldr	s14, [r3, #20]
 8014dee:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8014df2:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014df6:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8014dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8014e04:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8014e08:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8014e0c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014e10:	eef1 6a67 	vneg.f32	s13, s15
 8014e14:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014e18:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014e1c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e24:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8014e28:	68bb      	ldr	r3, [r7, #8]
 8014e2a:	ed93 7a05 	vldr	s14, [r3, #20]
 8014e2e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8014e32:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014e36:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8014e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8014e44:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8014e48:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014e50:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 8014e54:	4b57      	ldr	r3, [pc, #348]	@ (8014fb4 <kalmanCoreUpdateWithFlow+0x2b0>)
 8014e56:	ed93 7a00 	vldr	s14, [r3]
 8014e5a:	4b55      	ldr	r3, [pc, #340]	@ (8014fb0 <kalmanCoreUpdateWithFlow+0x2ac>)
 8014e5c:	edd3 7a00 	vldr	s15, [r3]
 8014e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	edd3 7a03 	vldr	s15, [r3, #12]
 8014e6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8014fa8 <kalmanCoreUpdateWithFlow+0x2a4>
 8014e6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014e72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014e76:	eef0 0a67 	vmov.f32	s1, s15
 8014e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8014e7e:	4619      	mov	r1, r3
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f7fc fc35 	bl	80116f0 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 8014e86:	f107 031c 	add.w	r3, r7, #28
 8014e8a:	2224      	movs	r2, #36	@ 0x24
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f006 f8d0 	bl	801b034 <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 8014e94:	2301      	movs	r3, #1
 8014e96:	82bb      	strh	r3, [r7, #20]
 8014e98:	2309      	movs	r3, #9
 8014e9a:	82fb      	strh	r3, [r7, #22]
 8014e9c:	f107 031c 	add.w	r3, r7, #28
 8014ea0:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	ed93 7a05 	vldr	s14, [r3, #20]
 8014ea8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8014eac:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014eb0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8014eb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8014ebe:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8014ec2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8014ec6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014eca:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8014ece:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8014ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8014ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014eda:	4b37      	ldr	r3, [pc, #220]	@ (8014fb8 <kalmanCoreUpdateWithFlow+0x2b4>)
 8014edc:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 8014ee0:	68bb      	ldr	r3, [r7, #8]
 8014ee2:	edd3 7a02 	vldr	s15, [r3, #8]
 8014ee6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8014fa8 <kalmanCoreUpdateWithFlow+0x2a4>
 8014eea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014eee:	4b33      	ldr	r3, [pc, #204]	@ (8014fbc <kalmanCoreUpdateWithFlow+0x2b8>)
 8014ef0:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 8014ef4:	68bb      	ldr	r3, [r7, #8]
 8014ef6:	ed93 7a05 	vldr	s14, [r3, #20]
 8014efa:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8014efe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014f02:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8014f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f0a:	68fb      	ldr	r3, [r7, #12]
 8014f0c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8014f10:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8014f14:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8014f18:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014f1c:	eef1 6a67 	vneg.f32	s13, s15
 8014f20:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8014f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8014f28:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f30:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	ed93 7a05 	vldr	s14, [r3, #20]
 8014f3a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8014f3e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8014f42:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8014f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8014f50:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8014f54:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8014f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014f5c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 8014f60:	4b16      	ldr	r3, [pc, #88]	@ (8014fbc <kalmanCoreUpdateWithFlow+0x2b8>)
 8014f62:	ed93 7a00 	vldr	s14, [r3]
 8014f66:	4b14      	ldr	r3, [pc, #80]	@ (8014fb8 <kalmanCoreUpdateWithFlow+0x2b4>)
 8014f68:	edd3 7a00 	vldr	s15, [r3]
 8014f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	edd3 7a04 	vldr	s15, [r3, #16]
 8014f76:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8014fa8 <kalmanCoreUpdateWithFlow+0x2a4>
 8014f7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f7e:	f107 0314 	add.w	r3, r7, #20
 8014f82:	eef0 0a67 	vmov.f32	s1, s15
 8014f86:	eeb0 0a47 	vmov.f32	s0, s14
 8014f8a:	4619      	mov	r1, r3
 8014f8c:	68f8      	ldr	r0, [r7, #12]
 8014f8e:	f7fc fbaf 	bl	80116f0 <kalmanCoreScalarUpdate>
}
 8014f92:	bf00      	nop
 8014f94:	3788      	adds	r7, #136	@ 0x88
 8014f96:	46bd      	mov	sp, r7
 8014f98:	bd80      	pop	{r7, pc}
 8014f9a:	bf00      	nop
 8014f9c:	420c0000 	.word	0x420c0000
 8014fa0:	3f377c46 	.word	0x3f377c46
 8014fa4:	3c8efa35 	.word	0x3c8efa35
 8014fa8:	3dcccccd 	.word	0x3dcccccd
 8014fac:	3dcccccd 	.word	0x3dcccccd
 8014fb0:	2000a5e4 	.word	0x2000a5e4
 8014fb4:	2000a5ec 	.word	0x2000a5ec
 8014fb8:	2000a5e8 	.word	0x2000a5e8
 8014fbc:	2000a5f0 	.word	0x2000a5f0

08014fc0 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 8014fc0:	b480      	push	{r7}
 8014fc2:	b08f      	sub	sp, #60	@ 0x3c
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	ed87 0a07 	vstr	s0, [r7, #28]
 8014fca:	edc7 0a06 	vstr	s1, [r7, #24]
 8014fce:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 8014fd2:	69fb      	ldr	r3, [r7, #28]
 8014fd4:	623b      	str	r3, [r7, #32]
 8014fd6:	69bb      	ldr	r3, [r7, #24]
 8014fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	62bb      	str	r3, [r7, #40]	@ 0x28
	return v;
 8014fde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8014fe2:	f107 0220 	add.w	r2, r7, #32
 8014fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8014fe8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ff2:	ee06 1a90 	vmov	s13, r1
 8014ff6:	ee07 2a10 	vmov	s14, r2
 8014ffa:	ee07 3a90 	vmov	s15, r3
}
 8014ffe:	eeb0 0a66 	vmov.f32	s0, s13
 8015002:	eef0 0a47 	vmov.f32	s1, s14
 8015006:	eeb0 1a67 	vmov.f32	s2, s15
 801500a:	373c      	adds	r7, #60	@ 0x3c
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr

08015014 <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 8015014:	b580      	push	{r7, lr}
 8015016:	b08c      	sub	sp, #48	@ 0x30
 8015018:	af00      	add	r7, sp, #0
 801501a:	ed87 0a07 	vstr	s0, [r7, #28]
 801501e:	eef0 6a60 	vmov.f32	s13, s1
 8015022:	eeb0 7a41 	vmov.f32	s14, s2
 8015026:	eef0 7a61 	vmov.f32	s15, s3
 801502a:	edc7 6a04 	vstr	s13, [r7, #16]
 801502e:	ed87 7a05 	vstr	s14, [r7, #20]
 8015032:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 8015036:	ed97 7a04 	vldr	s14, [r7, #16]
 801503a:	edd7 7a07 	vldr	s15, [r7, #28]
 801503e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8015042:	ed97 7a05 	vldr	s14, [r7, #20]
 8015046:	edd7 7a07 	vldr	s15, [r7, #28]
 801504a:	ee27 6a27 	vmul.f32	s12, s14, s15
 801504e:	ed97 7a06 	vldr	s14, [r7, #24]
 8015052:	edd7 7a07 	vldr	s15, [r7, #28]
 8015056:	ee67 7a27 	vmul.f32	s15, s14, s15
 801505a:	eeb0 1a67 	vmov.f32	s2, s15
 801505e:	eef0 0a46 	vmov.f32	s1, s12
 8015062:	eeb0 0a66 	vmov.f32	s0, s13
 8015066:	f7ff ffab 	bl	8014fc0 <mkvec>
 801506a:	eef0 6a40 	vmov.f32	s13, s0
 801506e:	eeb0 7a60 	vmov.f32	s14, s1
 8015072:	eef0 7a41 	vmov.f32	s15, s2
 8015076:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 801507a:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 801507e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8015082:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015088:	ee06 1a90 	vmov	s13, r1
 801508c:	ee07 2a10 	vmov	s14, r2
 8015090:	ee07 3a90 	vmov	s15, r3
}
 8015094:	eeb0 0a66 	vmov.f32	s0, s13
 8015098:	eef0 0a47 	vmov.f32	s1, s14
 801509c:	eeb0 1a67 	vmov.f32	s2, s15
 80150a0:	3730      	adds	r7, #48	@ 0x30
 80150a2:	46bd      	mov	sp, r7
 80150a4:	bd80      	pop	{r7, pc}

080150a6 <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 80150a6:	b490      	push	{r4, r7}
 80150a8:	b090      	sub	sp, #64	@ 0x40
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	ed87 0a07 	vstr	s0, [r7, #28]
 80150b0:	edc7 0a06 	vstr	s1, [r7, #24]
 80150b4:	ed87 1a05 	vstr	s2, [r7, #20]
 80150b8:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 80150bc:	69fb      	ldr	r3, [r7, #28]
 80150be:	623b      	str	r3, [r7, #32]
 80150c0:	69bb      	ldr	r3, [r7, #24]
 80150c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80150c4:	697b      	ldr	r3, [r7, #20]
 80150c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return q;
 80150cc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80150d0:	f107 0320 	add.w	r3, r7, #32
 80150d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80150d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80150da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80150dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80150de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80150e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150e2:	ee06 0a10 	vmov	s12, r0
 80150e6:	ee06 1a90 	vmov	s13, r1
 80150ea:	ee07 2a10 	vmov	s14, r2
 80150ee:	ee07 3a90 	vmov	s15, r3
}
 80150f2:	eeb0 0a46 	vmov.f32	s0, s12
 80150f6:	eef0 0a66 	vmov.f32	s1, s13
 80150fa:	eeb0 1a47 	vmov.f32	s2, s14
 80150fe:	eef0 1a67 	vmov.f32	s3, s15
 8015102:	3740      	adds	r7, #64	@ 0x40
 8015104:	46bd      	mov	sp, r7
 8015106:	bc90      	pop	{r4, r7}
 8015108:	4770      	bx	lr

0801510a <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 801510a:	b580      	push	{r7, lr}
 801510c:	b08c      	sub	sp, #48	@ 0x30
 801510e:	af00      	add	r7, sp, #0
 8015110:	eeb0 6a40 	vmov.f32	s12, s0
 8015114:	eef0 6a60 	vmov.f32	s13, s1
 8015118:	eeb0 7a41 	vmov.f32	s14, s2
 801511c:	eef0 7a61 	vmov.f32	s15, s3
 8015120:	ed87 6a04 	vstr	s12, [r7, #16]
 8015124:	edc7 6a05 	vstr	s13, [r7, #20]
 8015128:	ed87 7a06 	vstr	s14, [r7, #24]
 801512c:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 8015130:	edd7 7a04 	vldr	s15, [r7, #16]
 8015134:	ed97 7a05 	vldr	s14, [r7, #20]
 8015138:	edd7 6a06 	vldr	s13, [r7, #24]
 801513c:	eeb0 1a66 	vmov.f32	s2, s13
 8015140:	eef0 0a47 	vmov.f32	s1, s14
 8015144:	eeb0 0a67 	vmov.f32	s0, s15
 8015148:	f7ff ff3a 	bl	8014fc0 <mkvec>
 801514c:	eef0 6a40 	vmov.f32	s13, s0
 8015150:	eeb0 7a60 	vmov.f32	s14, s1
 8015154:	eef0 7a41 	vmov.f32	s15, s2
 8015158:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 801515c:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8015160:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8015164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801516a:	ee06 1a90 	vmov	s13, r1
 801516e:	ee07 2a10 	vmov	s14, r2
 8015172:	ee07 3a90 	vmov	s15, r3
}
 8015176:	eeb0 0a66 	vmov.f32	s0, s13
 801517a:	eef0 0a47 	vmov.f32	s1, s14
 801517e:	eeb0 1a67 	vmov.f32	s2, s15
 8015182:	3730      	adds	r7, #48	@ 0x30
 8015184:	46bd      	mov	sp, r7
 8015186:	bd80      	pop	{r7, pc}

08015188 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 8015188:	b580      	push	{r7, lr}
 801518a:	b094      	sub	sp, #80	@ 0x50
 801518c:	af00      	add	r7, sp, #0
 801518e:	eeb0 4a40 	vmov.f32	s8, s0
 8015192:	eef0 4a60 	vmov.f32	s9, s1
 8015196:	eeb0 5a41 	vmov.f32	s10, s2
 801519a:	eef0 5a61 	vmov.f32	s11, s3
 801519e:	eeb0 6a42 	vmov.f32	s12, s4
 80151a2:	eef0 6a62 	vmov.f32	s13, s5
 80151a6:	eeb0 7a43 	vmov.f32	s14, s6
 80151aa:	eef0 7a63 	vmov.f32	s15, s7
 80151ae:	ed87 4a08 	vstr	s8, [r7, #32]
 80151b2:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 80151b6:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 80151ba:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80151be:	ed87 6a04 	vstr	s12, [r7, #16]
 80151c2:	edc7 6a05 	vstr	s13, [r7, #20]
 80151c6:	ed87 7a06 	vstr	s14, [r7, #24]
 80151ca:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 80151ce:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80151d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80151d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80151da:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80151de:	edd7 7a05 	vldr	s15, [r7, #20]
 80151e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80151ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80151ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80151f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80151f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80151fa:	edd7 6a08 	vldr	s13, [r7, #32]
 80151fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8015202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015206:	ee77 7a27 	vadd.f32	s15, s14, s15
 801520a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 801520e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8015212:	eeb1 7a67 	vneg.f32	s14, s15
 8015216:	edd7 7a04 	vldr	s15, [r7, #16]
 801521a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801521e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8015222:	edd7 7a05 	vldr	s15, [r7, #20]
 8015226:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801522a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801522e:	edd7 6a08 	vldr	s13, [r7, #32]
 8015232:	edd7 7a06 	vldr	s15, [r7, #24]
 8015236:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801523a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801523e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8015242:	edd7 7a07 	vldr	s15, [r7, #28]
 8015246:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801524a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801524e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 8015252:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8015256:	edd7 7a04 	vldr	s15, [r7, #16]
 801525a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801525e:	edd7 6a08 	vldr	s13, [r7, #32]
 8015262:	edd7 7a05 	vldr	s15, [r7, #20]
 8015266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801526a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801526e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8015272:	edd7 7a06 	vldr	s15, [r7, #24]
 8015276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801527a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801527e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8015282:	edd7 7a07 	vldr	s15, [r7, #28]
 8015286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801528a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801528e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 8015292:	edd7 7a08 	vldr	s15, [r7, #32]
 8015296:	eeb1 7a67 	vneg.f32	s14, s15
 801529a:	edd7 7a04 	vldr	s15, [r7, #16]
 801529e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80152a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80152a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80152aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80152ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80152b2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80152b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80152ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80152be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80152c2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80152c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80152ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80152ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80152d2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	return mkquat(x, y, z, w);
 80152d6:	edd7 1a10 	vldr	s3, [r7, #64]	@ 0x40
 80152da:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 80152de:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 80152e2:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80152e6:	f7ff fede 	bl	80150a6 <mkquat>
 80152ea:	eeb0 6a40 	vmov.f32	s12, s0
 80152ee:	eef0 6a60 	vmov.f32	s13, s1
 80152f2:	eeb0 7a41 	vmov.f32	s14, s2
 80152f6:	eef0 7a61 	vmov.f32	s15, s3
 80152fa:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 80152fe:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8015302:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8015306:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 801530a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801530c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801530e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015312:	ee06 0a10 	vmov	s12, r0
 8015316:	ee06 1a90 	vmov	s13, r1
 801531a:	ee07 2a10 	vmov	s14, r2
 801531e:	ee07 3a90 	vmov	s15, r3
}
 8015322:	eeb0 0a46 	vmov.f32	s0, s12
 8015326:	eef0 0a66 	vmov.f32	s1, s13
 801532a:	eeb0 1a47 	vmov.f32	s2, s14
 801532e:	eef0 1a67 	vmov.f32	s3, s15
 8015332:	3750      	adds	r7, #80	@ 0x50
 8015334:	46bd      	mov	sp, r7
 8015336:	bd80      	pop	{r7, pc}

08015338 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 8015338:	b580      	push	{r7, lr}
 801533a:	b08c      	sub	sp, #48	@ 0x30
 801533c:	af00      	add	r7, sp, #0
 801533e:	eeb0 6a40 	vmov.f32	s12, s0
 8015342:	eef0 6a60 	vmov.f32	s13, s1
 8015346:	eeb0 7a41 	vmov.f32	s14, s2
 801534a:	eef0 7a61 	vmov.f32	s15, s3
 801534e:	ed87 6a04 	vstr	s12, [r7, #16]
 8015352:	edc7 6a05 	vstr	s13, [r7, #20]
 8015356:	ed87 7a06 	vstr	s14, [r7, #24]
 801535a:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 801535e:	edd7 7a04 	vldr	s15, [r7, #16]
 8015362:	eeb1 7a67 	vneg.f32	s14, s15
 8015366:	edd7 7a05 	vldr	s15, [r7, #20]
 801536a:	eef1 6a67 	vneg.f32	s13, s15
 801536e:	edd7 7a06 	vldr	s15, [r7, #24]
 8015372:	eef1 7a67 	vneg.f32	s15, s15
 8015376:	ed97 6a07 	vldr	s12, [r7, #28]
 801537a:	eef0 1a46 	vmov.f32	s3, s12
 801537e:	eeb0 1a67 	vmov.f32	s2, s15
 8015382:	eef0 0a66 	vmov.f32	s1, s13
 8015386:	eeb0 0a47 	vmov.f32	s0, s14
 801538a:	f7ff fe8c 	bl	80150a6 <mkquat>
 801538e:	eeb0 6a40 	vmov.f32	s12, s0
 8015392:	eef0 6a60 	vmov.f32	s13, s1
 8015396:	eeb0 7a41 	vmov.f32	s14, s2
 801539a:	eef0 7a61 	vmov.f32	s15, s3
 801539e:	ed87 6a08 	vstr	s12, [r7, #32]
 80153a2:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 80153a6:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 80153aa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80153ae:	6a38      	ldr	r0, [r7, #32]
 80153b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80153b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80153b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153b6:	ee06 0a10 	vmov	s12, r0
 80153ba:	ee06 1a90 	vmov	s13, r1
 80153be:	ee07 2a10 	vmov	s14, r2
 80153c2:	ee07 3a90 	vmov	s15, r3
}
 80153c6:	eeb0 0a46 	vmov.f32	s0, s12
 80153ca:	eef0 0a66 	vmov.f32	s1, s13
 80153ce:	eeb0 1a47 	vmov.f32	s2, s14
 80153d2:	eef0 1a67 	vmov.f32	s3, s15
 80153d6:	3730      	adds	r7, #48	@ 0x30
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	ed2d 8b02 	vpush	{d8}
 80153e2:	b0a6      	sub	sp, #152	@ 0x98
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 80153ea:	2300      	movs	r3, #0
 80153ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80153f0:	e038      	b.n	8015464 <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 80153f2:	f107 0308 	add.w	r3, r7, #8
 80153f6:	2224      	movs	r2, #36	@ 0x24
 80153f8:	2100      	movs	r1, #0
 80153fa:	4618      	mov	r0, r3
 80153fc:	f005 fe1a 	bl	801b034 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8015400:	2301      	movs	r3, #1
 8015402:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8015404:	2309      	movs	r3, #9
 8015406:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8015408:	f107 0308 	add.w	r3, r7, #8
 801540c:	63bb      	str	r3, [r7, #56]	@ 0x38
    h[KC_STATE_X+i] = 1;
 801540e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015412:	009b      	lsls	r3, r3, #2
 8015414:	3398      	adds	r3, #152	@ 0x98
 8015416:	443b      	add	r3, r7
 8015418:	3b90      	subs	r3, #144	@ 0x90
 801541a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801541e:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 8015420:	683a      	ldr	r2, [r7, #0]
 8015422:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015426:	009b      	lsls	r3, r3, #2
 8015428:	4413      	add	r3, r2
 801542a:	ed93 7a00 	vldr	s14, [r3]
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015434:	009b      	lsls	r3, r3, #2
 8015436:	4413      	add	r3, r2
 8015438:	edd3 7a00 	vldr	s15, [r3]
 801543c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015440:	683b      	ldr	r3, [r7, #0]
 8015442:	ed93 7a07 	vldr	s14, [r3, #28]
 8015446:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801544a:	eef0 0a47 	vmov.f32	s1, s14
 801544e:	eeb0 0a67 	vmov.f32	s0, s15
 8015452:	4619      	mov	r1, r3
 8015454:	6878      	ldr	r0, [r7, #4]
 8015456:	f7fc f94b 	bl	80116f0 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 801545a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801545e:	3301      	adds	r3, #1
 8015460:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8015464:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015468:	2b02      	cmp	r3, #2
 801546a:	ddc2      	ble.n	80153f2 <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8015478:	687b      	ldr	r3, [r7, #4]
 801547a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8015484:	eef0 1a46 	vmov.f32	s3, s12
 8015488:	eeb0 1a66 	vmov.f32	s2, s13
 801548c:	eef0 0a47 	vmov.f32	s1, s14
 8015490:	eeb0 0a67 	vmov.f32	s0, s15
 8015494:	f7ff fe07 	bl	80150a6 <mkquat>
 8015498:	eeb0 6a40 	vmov.f32	s12, s0
 801549c:	eef0 6a60 	vmov.f32	s13, s1
 80154a0:	eeb0 7a41 	vmov.f32	s14, s2
 80154a4:	eef0 7a61 	vmov.f32	s15, s3
 80154a8:	ed87 6a1a 	vstr	s12, [r7, #104]	@ 0x68
 80154ac:	edc7 6a1b 	vstr	s13, [r7, #108]	@ 0x6c
 80154b0:	ed87 7a1c 	vstr	s14, [r7, #112]	@ 0x70
 80154b4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 80154b8:	683b      	ldr	r3, [r7, #0]
 80154ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80154be:	683b      	ldr	r3, [r7, #0]
 80154c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	edd3 6a05 	vldr	s13, [r3, #20]
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	ed93 6a06 	vldr	s12, [r3, #24]
 80154d0:	eef0 1a46 	vmov.f32	s3, s12
 80154d4:	eeb0 1a66 	vmov.f32	s2, s13
 80154d8:	eef0 0a47 	vmov.f32	s1, s14
 80154dc:	eeb0 0a67 	vmov.f32	s0, s15
 80154e0:	f7ff fde1 	bl	80150a6 <mkquat>
 80154e4:	eeb0 6a40 	vmov.f32	s12, s0
 80154e8:	eef0 6a60 	vmov.f32	s13, s1
 80154ec:	eeb0 7a41 	vmov.f32	s14, s2
 80154f0:	eef0 7a61 	vmov.f32	s15, s3
 80154f4:	ed87 6a16 	vstr	s12, [r7, #88]	@ 0x58
 80154f8:	edc7 6a17 	vstr	s13, [r7, #92]	@ 0x5c
 80154fc:	ed87 7a18 	vstr	s14, [r7, #96]	@ 0x60
 8015500:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 8015504:	ed97 6a1a 	vldr	s12, [r7, #104]	@ 0x68
 8015508:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 801550c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8015510:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8015514:	eeb0 0a46 	vmov.f32	s0, s12
 8015518:	eef0 0a66 	vmov.f32	s1, s13
 801551c:	eeb0 1a47 	vmov.f32	s2, s14
 8015520:	eef0 1a67 	vmov.f32	s3, s15
 8015524:	f7ff ff08 	bl	8015338 <qinv>
 8015528:	eeb0 6a40 	vmov.f32	s12, s0
 801552c:	eef0 6a60 	vmov.f32	s13, s1
 8015530:	eeb0 7a41 	vmov.f32	s14, s2
 8015534:	eef0 7a61 	vmov.f32	s15, s3
 8015538:	ed87 6a1e 	vstr	s12, [r7, #120]	@ 0x78
 801553c:	edc7 6a1f 	vstr	s13, [r7, #124]	@ 0x7c
 8015540:	ed87 7a20 	vstr	s14, [r7, #128]	@ 0x80
 8015544:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8015548:	ed97 4a16 	vldr	s8, [r7, #88]	@ 0x58
 801554c:	edd7 4a17 	vldr	s9, [r7, #92]	@ 0x5c
 8015550:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 8015554:	edd7 5a19 	vldr	s11, [r7, #100]	@ 0x64
 8015558:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 801555c:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8015560:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8015564:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8015568:	eeb0 2a44 	vmov.f32	s4, s8
 801556c:	eef0 2a64 	vmov.f32	s5, s9
 8015570:	eeb0 3a45 	vmov.f32	s6, s10
 8015574:	eef0 3a65 	vmov.f32	s7, s11
 8015578:	eeb0 0a46 	vmov.f32	s0, s12
 801557c:	eef0 0a66 	vmov.f32	s1, s13
 8015580:	eeb0 1a47 	vmov.f32	s2, s14
 8015584:	eef0 1a67 	vmov.f32	s3, s15
 8015588:	f7ff fdfe 	bl	8015188 <qqmul>
 801558c:	eeb0 6a40 	vmov.f32	s12, s0
 8015590:	eef0 6a60 	vmov.f32	s13, s1
 8015594:	eeb0 7a41 	vmov.f32	s14, s2
 8015598:	eef0 7a61 	vmov.f32	s15, s3
 801559c:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 80155a0:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 80155a4:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 80155a8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 80155ac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80155b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80155b4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80155b8:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 80155bc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80155c0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80155c4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80155c8:	eeb0 0a46 	vmov.f32	s0, s12
 80155cc:	eef0 0a66 	vmov.f32	s1, s13
 80155d0:	eeb0 1a47 	vmov.f32	s2, s14
 80155d4:	eef0 1a67 	vmov.f32	s3, s15
 80155d8:	f7ff fd97 	bl	801510a <quatimagpart>
 80155dc:	eef0 6a40 	vmov.f32	s13, s0
 80155e0:	eeb0 7a60 	vmov.f32	s14, s1
 80155e4:	eef0 7a41 	vmov.f32	s15, s2
 80155e8:	edc7 6a22 	vstr	s13, [r7, #136]	@ 0x88
 80155ec:	ed87 7a23 	vstr	s14, [r7, #140]	@ 0x8c
 80155f0:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 80155f4:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80155f8:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80155fc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8015600:	eef0 0a66 	vmov.f32	s1, s13
 8015604:	eeb0 1a47 	vmov.f32	s2, s14
 8015608:	eef0 1a67 	vmov.f32	s3, s15
 801560c:	eeb0 0a48 	vmov.f32	s0, s16
 8015610:	f7ff fd00 	bl	8015014 <vscl>
 8015614:	eef0 6a40 	vmov.f32	s13, s0
 8015618:	eeb0 7a60 	vmov.f32	s14, s1
 801561c:	eef0 7a41 	vmov.f32	s15, s2
 8015620:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 8015624:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8015628:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 801562c:	f107 0308 	add.w	r3, r7, #8
 8015630:	2224      	movs	r2, #36	@ 0x24
 8015632:	2100      	movs	r1, #0
 8015634:	4618      	mov	r0, r3
 8015636:	f005 fcfd 	bl	801b034 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801563a:	2301      	movs	r3, #1
 801563c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801563e:	2309      	movs	r3, #9
 8015640:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8015642:	f107 0308 	add.w	r3, r7, #8
 8015646:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_D0] = 1;
 8015648:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801564c:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 801564e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	ed93 7a08 	vldr	s14, [r3, #32]
 8015658:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801565c:	eef0 0a47 	vmov.f32	s1, s14
 8015660:	eeb0 0a67 	vmov.f32	s0, s15
 8015664:	4619      	mov	r1, r3
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f7fc f842 	bl	80116f0 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 801566c:	f04f 0300 	mov.w	r3, #0
 8015670:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 8015672:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8015676:	627b      	str	r3, [r7, #36]	@ 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 8015678:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801567c:	683b      	ldr	r3, [r7, #0]
 801567e:	ed93 7a08 	vldr	s14, [r3, #32]
 8015682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8015686:	eef0 0a47 	vmov.f32	s1, s14
 801568a:	eeb0 0a67 	vmov.f32	s0, s15
 801568e:	4619      	mov	r1, r3
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f7fc f82d 	bl	80116f0 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 8015696:	f04f 0300 	mov.w	r3, #0
 801569a:	627b      	str	r3, [r7, #36]	@ 0x24

    h[KC_STATE_D2] = 1;
 801569c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80156a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 80156a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80156a6:	683b      	ldr	r3, [r7, #0]
 80156a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80156ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80156b0:	eef0 0a47 	vmov.f32	s1, s14
 80156b4:	eeb0 0a67 	vmov.f32	s0, s15
 80156b8:	4619      	mov	r1, r3
 80156ba:	6878      	ldr	r0, [r7, #4]
 80156bc:	f7fc f818 	bl	80116f0 <kalmanCoreScalarUpdate>
  }
}
 80156c0:	bf00      	nop
 80156c2:	3798      	adds	r7, #152	@ 0x98
 80156c4:	46bd      	mov	sp, r7
 80156c6:	ecbd 8b02 	vpop	{d8}
 80156ca:	bd80      	pop	{r7, pc}

080156cc <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 80156cc:	b580      	push	{r7, lr}
 80156ce:	b08e      	sub	sp, #56	@ 0x38
 80156d0:	af00      	add	r7, sp, #0
 80156d2:	6078      	str	r0, [r7, #4]
 80156d4:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 80156d6:	2300      	movs	r3, #0
 80156d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80156da:	e033      	b.n	8015744 <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 80156dc:	f107 0308 	add.w	r3, r7, #8
 80156e0:	2224      	movs	r2, #36	@ 0x24
 80156e2:	2100      	movs	r1, #0
 80156e4:	4618      	mov	r0, r3
 80156e6:	f005 fca5 	bl	801b034 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80156ea:	2301      	movs	r3, #1
 80156ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80156ee:	2309      	movs	r3, #9
 80156f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80156f2:	f107 0308 	add.w	r3, r7, #8
 80156f6:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_X+i] = 1;
 80156f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156fa:	009b      	lsls	r3, r3, #2
 80156fc:	3338      	adds	r3, #56	@ 0x38
 80156fe:	443b      	add	r3, r7
 8015700:	3b30      	subs	r3, #48	@ 0x30
 8015702:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8015706:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 8015708:	683a      	ldr	r2, [r7, #0]
 801570a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801570c:	009b      	lsls	r3, r3, #2
 801570e:	4413      	add	r3, r2
 8015710:	ed93 7a00 	vldr	s14, [r3]
 8015714:	687a      	ldr	r2, [r7, #4]
 8015716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	4413      	add	r3, r2
 801571c:	edd3 7a00 	vldr	s15, [r3]
 8015720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	ed93 7a03 	vldr	s14, [r3, #12]
 801572a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801572e:	eef0 0a47 	vmov.f32	s1, s14
 8015732:	eeb0 0a67 	vmov.f32	s0, s15
 8015736:	4619      	mov	r1, r3
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f7fb ffd9 	bl	80116f0 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 801573e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015740:	3301      	adds	r3, #1
 8015742:	637b      	str	r3, [r7, #52]	@ 0x34
 8015744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015746:	2b02      	cmp	r3, #2
 8015748:	ddc8      	ble.n	80156dc <kalmanCoreUpdateWithPosition+0x10>
  }
}
 801574a:	bf00      	nop
 801574c:	bf00      	nop
 801574e:	3738      	adds	r7, #56	@ 0x38
 8015750:	46bd      	mov	sp, r7
 8015752:	bd80      	pop	{r7, pc}
 8015754:	0000      	movs	r0, r0
	...

08015758 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	ed2d 8b02 	vpush	{d8}
 801575e:	b090      	sub	sp, #64	@ 0x40
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 8015766:	f107 0310 	add.w	r3, r7, #16
 801576a:	2224      	movs	r2, #36	@ 0x24
 801576c:	2100      	movs	r1, #0
 801576e:	4618      	mov	r0, r3
 8015770:	f005 fc60 	bl	801b034 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8015774:	2301      	movs	r3, #1
 8015776:	813b      	strh	r3, [r7, #8]
 8015778:	2309      	movs	r3, #9
 801577a:	817b      	strh	r3, [r7, #10]
 801577c:	f107 0310 	add.w	r3, r7, #16
 8015780:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8015788:	eef0 7ae7 	vabs.f32	s15, s15
 801578c:	ee17 0a90 	vmov	r0, s15
 8015790:	f7ea fe8c 	bl	80004ac <__aeabi_f2d>
 8015794:	a331      	add	r3, pc, #196	@ (adr r3, 801585c <kalmanCoreUpdateWithTof+0x104>)
 8015796:	e9d3 2300 	ldrd	r2, r3, [r3]
 801579a:	f7eb f96f 	bl	8000a7c <__aeabi_dcmpgt>
 801579e:	4603      	mov	r3, r0
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d100      	bne.n	80157a6 <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 80157a4:	e050      	b.n	8015848 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80157ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80157b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157b4:	dc00      	bgt.n	80157b8 <kalmanCoreUpdateWithTof+0x60>
}
 80157b6:	e047      	b.n	8015848 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80157be:	eeb0 0a67 	vmov.f32	s0, s15
 80157c2:	f005 fcf5 	bl	801b1b0 <acosf>
 80157c6:	eef0 7a40 	vmov.f32	s15, s0
 80157ca:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8015858 <kalmanCoreUpdateWithTof+0x100>
 80157ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80157d2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (angle < 0.0f) {
 80157d6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80157da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80157de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157e2:	d502      	bpl.n	80157ea <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 80157e4:	f04f 0300 	mov.w	r3, #0
 80157e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	ed93 8a02 	vldr	s16, [r3, #8]
 80157f0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 80157f4:	f005 fe10 	bl	801b418 <cosf>
 80157f8:	eeb0 7a40 	vmov.f32	s14, s0
 80157fc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015800:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float measuredDistance = tof->distance; // [m]
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	685b      	ldr	r3, [r3, #4]
 8015808:	637b      	str	r3, [r7, #52]	@ 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 801580a:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 801580e:	f005 fe03 	bl	801b418 <cosf>
 8015812:	eeb0 7a40 	vmov.f32	s14, s0
 8015816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801581a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801581e:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 8015822:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8015826:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801582a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	ed93 7a02 	vldr	s14, [r3, #8]
 8015834:	f107 0308 	add.w	r3, r7, #8
 8015838:	eef0 0a47 	vmov.f32	s1, s14
 801583c:	eeb0 0a67 	vmov.f32	s0, s15
 8015840:	4619      	mov	r1, r3
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f7fb ff54 	bl	80116f0 <kalmanCoreScalarUpdate>
}
 8015848:	bf00      	nop
 801584a:	3740      	adds	r7, #64	@ 0x40
 801584c:	46bd      	mov	sp, r7
 801584e:	ecbd 8b02 	vpop	{d8}
 8015852:	bd80      	pop	{r7, pc}
 8015854:	f3af 8000 	nop.w
 8015858:	3e060a92 	.word	0x3e060a92
 801585c:	9999999a 	.word	0x9999999a
 8015860:	3fb99999 	.word	0x3fb99999

08015864 <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b08e      	sub	sp, #56	@ 0x38
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
 801586c:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 801586e:	f107 0314 	add.w	r3, r7, #20
 8015872:	2224      	movs	r2, #36	@ 0x24
 8015874:	2100      	movs	r1, #0
 8015876:	4618      	mov	r0, r3
 8015878:	f005 fbdc 	bl	801b034 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801587c:	2301      	movs	r3, #1
 801587e:	81bb      	strh	r3, [r7, #12]
 8015880:	2309      	movs	r3, #9
 8015882:	81fb      	strh	r3, [r7, #14]
 8015884:	f107 0314 	add.w	r3, r7, #20
 8015888:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 801588a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801588e:	637b      	str	r3, [r7, #52]	@ 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	ed93 7a08 	vldr	s14, [r3, #32]
 8015896:	683b      	ldr	r3, [r7, #0]
 8015898:	edd3 7a01 	vldr	s15, [r3, #4]
 801589c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80158a0:	683b      	ldr	r3, [r7, #0]
 80158a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80158a6:	f107 030c 	add.w	r3, r7, #12
 80158aa:	eef0 0a47 	vmov.f32	s1, s14
 80158ae:	eeb0 0a67 	vmov.f32	s0, s15
 80158b2:	4619      	mov	r1, r3
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f7fb ff1b 	bl	80116f0 <kalmanCoreScalarUpdate>
}
 80158ba:	bf00      	nop
 80158bc:	3738      	adds	r7, #56	@ 0x38
 80158be:	46bd      	mov	sp, r7
 80158c0:	bd80      	pop	{r7, pc}

080158c2 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80158c2:	b580      	push	{r7, lr}
 80158c4:	b084      	sub	sp, #16
 80158c6:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80158c8:	2300      	movs	r3, #0
 80158ca:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80158cc:	1d3b      	adds	r3, r7, #4
 80158ce:	4618      	mov	r0, r3
 80158d0:	f000 f8a6 	bl	8015a20 <platformGetListOfConfigurations>
 80158d4:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	4619      	mov	r1, r3
 80158da:	68f8      	ldr	r0, [r7, #12]
 80158dc:	f000 f856 	bl	801598c <platformInitConfiguration>
 80158e0:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d001      	beq.n	80158ec <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 80158e8:	2301      	movs	r3, #1
 80158ea:	e002      	b.n	80158f2 <platformInit+0x30>
  }

  platformInitHardware();
 80158ec:	f000 f8a8 	bl	8015a40 <platformInitHardware>
  return 0;
 80158f0:	2300      	movs	r3, #0
}
 80158f2:	4618      	mov	r0, r3
 80158f4:	3710      	adds	r7, #16
 80158f6:	46bd      	mov	sp, r7
 80158f8:	bd80      	pop	{r7, pc}

080158fa <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 80158fa:	b580      	push	{r7, lr}
 80158fc:	b086      	sub	sp, #24
 80158fe:	af00      	add	r7, sp, #0
 8015900:	6078      	str	r0, [r7, #4]
 8015902:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	781b      	ldrb	r3, [r3, #0]
 8015908:	2b30      	cmp	r3, #48	@ 0x30
 801590a:	d104      	bne.n	8015916 <platformParseDeviceTypeString+0x1c>
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	3301      	adds	r3, #1
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	2b3b      	cmp	r3, #59	@ 0x3b
 8015914:	d001      	beq.n	801591a <platformParseDeviceTypeString+0x20>
    return 1;
 8015916:	2301      	movs	r3, #1
 8015918:	e034      	b.n	8015984 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 801591a:	2302      	movs	r3, #2
 801591c:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 801591e:	693b      	ldr	r3, [r7, #16]
 8015920:	3304      	adds	r3, #4
 8015922:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8015924:	2300      	movs	r3, #0
 8015926:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8015928:	693b      	ldr	r3, [r7, #16]
 801592a:	617b      	str	r3, [r7, #20]
 801592c:	e00e      	b.n	801594c <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	4413      	add	r3, r2
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	2b00      	cmp	r3, #0
 8015938:	d00c      	beq.n	8015954 <platformParseDeviceTypeString+0x5a>
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	687a      	ldr	r2, [r7, #4]
 801593e:	4413      	add	r3, r2
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	2b3b      	cmp	r3, #59	@ 0x3b
 8015944:	d006      	beq.n	8015954 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	3301      	adds	r3, #1
 801594a:	617b      	str	r3, [r7, #20]
 801594c:	697a      	ldr	r2, [r7, #20]
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	429a      	cmp	r2, r3
 8015952:	ddec      	ble.n	801592e <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8015954:	697a      	ldr	r2, [r7, #20]
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	429a      	cmp	r2, r3
 801595a:	dd01      	ble.n	8015960 <platformParseDeviceTypeString+0x66>
    return 1;
 801595c:	2301      	movs	r3, #1
 801595e:	e011      	b.n	8015984 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8015960:	697a      	ldr	r2, [r7, #20]
 8015962:	693b      	ldr	r3, [r7, #16]
 8015964:	1ad3      	subs	r3, r2, r3
 8015966:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	4413      	add	r3, r2
 801596e:	68ba      	ldr	r2, [r7, #8]
 8015970:	4619      	mov	r1, r3
 8015972:	6838      	ldr	r0, [r7, #0]
 8015974:	f005 fba4 	bl	801b0c0 <memcpy>
  deviceType[length] = '\0';
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	683a      	ldr	r2, [r7, #0]
 801597c:	4413      	add	r3, r2
 801597e:	2200      	movs	r2, #0
 8015980:	701a      	strb	r2, [r3, #0]
  return 0;
 8015982:	2300      	movs	r3, #0
}
 8015984:	4618      	mov	r0, r3
 8015986:	3718      	adds	r7, #24
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 801598c:	b580      	push	{r7, lr}
 801598e:	b090      	sub	sp, #64	@ 0x40
 8015990:	af00      	add	r7, sp, #0
 8015992:	6078      	str	r0, [r7, #4]
 8015994:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8015996:	f107 0314 	add.w	r3, r7, #20
 801599a:	4618      	mov	r0, r3
 801599c:	f000 f866 	bl	8015a6c <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 80159a0:	f107 020c 	add.w	r2, r7, #12
 80159a4:	f107 0314 	add.w	r3, r7, #20
 80159a8:	4611      	mov	r1, r2
 80159aa:	4618      	mov	r0, r3
 80159ac:	f7ff ffa5 	bl	80158fa <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 80159b0:	2300      	movs	r3, #0
 80159b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80159b4:	e01a      	b.n	80159ec <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 80159b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80159b8:	4613      	mov	r3, r2
 80159ba:	00db      	lsls	r3, r3, #3
 80159bc:	4413      	add	r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	4413      	add	r3, r2
 80159c2:	687a      	ldr	r2, [r7, #4]
 80159c4:	4413      	add	r3, r2
 80159c6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 80159c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ca:	f107 020c 	add.w	r2, r7, #12
 80159ce:	4611      	mov	r1, r2
 80159d0:	4618      	mov	r0, r3
 80159d2:	f7ea fbfd 	bl	80001d0 <strcmp>
 80159d6:	4603      	mov	r3, r0
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d104      	bne.n	80159e6 <platformInitConfiguration+0x5a>
      active_config = config;
 80159dc:	4a08      	ldr	r2, [pc, #32]	@ (8015a00 <platformInitConfiguration+0x74>)
 80159de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159e0:	6013      	str	r3, [r2, #0]
      return 0;
 80159e2:	2300      	movs	r3, #0
 80159e4:	e007      	b.n	80159f6 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 80159e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159e8:	3301      	adds	r3, #1
 80159ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80159ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80159ee:	683b      	ldr	r3, [r7, #0]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	dbe0      	blt.n	80159b6 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 80159f4:	2301      	movs	r3, #1
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3740      	adds	r7, #64	@ 0x40
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	2000a5f4 	.word	0x2000a5f4

08015a04 <platformConfigGetSensorImplementation>:

const char* platformConfigGetDeviceTypeName() {
  return active_config->deviceTypeName;
}

SensorImplementation_t platformConfigGetSensorImplementation() {
 8015a04:	b480      	push	{r7}
 8015a06:	af00      	add	r7, sp, #0
  return active_config->sensorImplementation;
 8015a08:	4b04      	ldr	r3, [pc, #16]	@ (8015a1c <platformConfigGetSensorImplementation+0x18>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	46bd      	mov	sp, r7
 8015a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a18:	4770      	bx	lr
 8015a1a:	bf00      	nop
 8015a1c:	2000a5f4 	.word	0x2000a5f4

08015a20 <platformGetListOfConfigurations>:
//    .motorMap = motorMapCF21Brushless,
//  },
//#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8015a20:	b480      	push	{r7}
 8015a22:	b083      	sub	sp, #12
 8015a24:	af00      	add	r7, sp, #0
 8015a26:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	601a      	str	r2, [r3, #0]
  return configs;
 8015a2e:	4b03      	ldr	r3, [pc, #12]	@ (8015a3c <platformGetListOfConfigurations+0x1c>)
}
 8015a30:	4618      	mov	r0, r3
 8015a32:	370c      	adds	r7, #12
 8015a34:	46bd      	mov	sp, r7
 8015a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a3a:	4770      	bx	lr
 8015a3c:	20000148 	.word	0x20000148

08015a40 <platformInitHardware>:

void platformInitHardware() {
 8015a40:	b580      	push	{r7, lr}
 8015a42:	af00      	add	r7, sp, #0
  //Low level init: Clock and Interrupt controller
  nvicInit();
 8015a44:	f7f6 fde0 	bl	800c608 <nvicInit>

  //EXTI interrupts
//  extiInit();
}
 8015a48:	bf00      	nop
 8015a4a:	bd80      	pop	{r7, pc}

08015a4c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;DG20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8015a4c:	b480      	push	{r7}
 8015a4e:	b083      	sub	sp, #12
 8015a50:	af00      	add	r7, sp, #0
 8015a52:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8015a5a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8015a5e:	015b      	lsls	r3, r3, #5
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	370c      	adds	r7, #12
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr

08015a6c <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8015a6c:	b580      	push	{r7, lr}
 8015a6e:	b086      	sub	sp, #24
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8015a78:	2300      	movs	r3, #0
 8015a7a:	613b      	str	r3, [r7, #16]
 8015a7c:	e00d      	b.n	8015a9a <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8015a7e:	6938      	ldr	r0, [r7, #16]
 8015a80:	f7ff ffe4 	bl	8015a4c <getAddressOfOtpMemoryBlock>
 8015a84:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	781b      	ldrb	r3, [r3, #0]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d002      	beq.n	8015a94 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8015a8e:	68fb      	ldr	r3, [r7, #12]
 8015a90:	617b      	str	r3, [r7, #20]
      break;
 8015a92:	e005      	b.n	8015aa0 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8015a94:	693b      	ldr	r3, [r7, #16]
 8015a96:	3301      	adds	r3, #1
 8015a98:	613b      	str	r3, [r7, #16]
 8015a9a:	693b      	ldr	r3, [r7, #16]
 8015a9c:	2b0f      	cmp	r3, #15
 8015a9e:	ddee      	ble.n	8015a7e <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8015aa0:	697b      	ldr	r3, [r7, #20]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d003      	beq.n	8015aae <platformGetDeviceTypeString+0x42>
 8015aa6:	697b      	ldr	r3, [r7, #20]
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	2bff      	cmp	r3, #255	@ 0xff
 8015aac:	d101      	bne.n	8015ab2 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8015aae:	4b07      	ldr	r3, [pc, #28]	@ (8015acc <platformGetDeviceTypeString+0x60>)
 8015ab0:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8015ab2:	2220      	movs	r2, #32
 8015ab4:	6979      	ldr	r1, [r7, #20]
 8015ab6:	6878      	ldr	r0, [r7, #4]
 8015ab8:	f005 fac4 	bl	801b044 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	3320      	adds	r3, #32
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	701a      	strb	r2, [r3, #0]
}
 8015ac4:	bf00      	nop
 8015ac6:	3718      	adds	r7, #24
 8015ac8:	46bd      	mov	sp, r7
 8015aca:	bd80      	pop	{r7, pc}
 8015acc:	0801eae4 	.word	0x0801eae4

08015ad0 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b086      	sub	sp, #24
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	60f8      	str	r0, [r7, #12]
 8015ad8:	60b9      	str	r1, [r7, #8]
 8015ada:	607a      	str	r2, [r7, #4]
        __asm volatile
 8015adc:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8015ae0:	f383 8811 	msr	BASEPRI, r3
 8015ae4:	f3bf 8f6f 	isb	sy
 8015ae8:	f3bf 8f4f 	dsb	sy
 8015aec:	617b      	str	r3, [r7, #20]
    }
 8015aee:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8015af0:	6879      	ldr	r1, [r7, #4]
 8015af2:	68b8      	ldr	r0, [r7, #8]
 8015af4:	f000 f804 	bl	8015b00 <storeAssertFileData>
//  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
//  {
//    // Only reset if debugger is not connected
//    NVIC_SystemReset();
//  }
}
 8015af8:	bf00      	nop
 8015afa:	3718      	adds	r7, #24
 8015afc:	46bd      	mov	sp, r7
 8015afe:	bd80      	pop	{r7, pc}

08015b00 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8015b00:	b480      	push	{r7}
 8015b02:	b083      	sub	sp, #12
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
 8015b08:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8015b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8015b38 <storeAssertFileData+0x38>)
 8015b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8015b3c <storeAssertFileData+0x3c>)
 8015b0e:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8015b10:	4b09      	ldr	r3, [pc, #36]	@ (8015b38 <storeAssertFileData+0x38>)
 8015b12:	2201      	movs	r2, #1
 8015b14:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8015b16:	4b08      	ldr	r3, [pc, #32]	@ (8015b38 <storeAssertFileData+0x38>)
 8015b18:	791a      	ldrb	r2, [r3, #4]
 8015b1a:	4b09      	ldr	r3, [pc, #36]	@ (8015b40 <storeAssertFileData+0x40>)
 8015b1c:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8015b1e:	4a06      	ldr	r2, [pc, #24]	@ (8015b38 <storeAssertFileData+0x38>)
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8015b24:	4a04      	ldr	r2, [pc, #16]	@ (8015b38 <storeAssertFileData+0x38>)
 8015b26:	683b      	ldr	r3, [r7, #0]
 8015b28:	60d3      	str	r3, [r2, #12]
}
 8015b2a:	bf00      	nop
 8015b2c:	370c      	adds	r7, #12
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b34:	4770      	bx	lr
 8015b36:	bf00      	nop
 8015b38:	200001e8 	.word	0x200001e8
 8015b3c:	2f8a001f 	.word	0x2f8a001f
 8015b40:	2000a5f8 	.word	0x2000a5f8

08015b44 <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b084      	sub	sp, #16
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	60f8      	str	r0, [r7, #12]
 8015b4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8015b50:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d00e      	beq.n	8015b78 <lpf2pInit+0x34>
 8015b5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8015b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b66:	d907      	bls.n	8015b78 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8015b68:	edd7 0a01 	vldr	s1, [r7, #4]
 8015b6c:	ed97 0a02 	vldr	s0, [r7, #8]
 8015b70:	68f8      	ldr	r0, [r7, #12]
 8015b72:	f000 f805 	bl	8015b80 <lpf2pSetCutoffFreq>
 8015b76:	e000      	b.n	8015b7a <lpf2pInit+0x36>
    return;
 8015b78:	bf00      	nop
}
 8015b7a:	3710      	adds	r7, #16
 8015b7c:	46bd      	mov	sp, r7
 8015b7e:	bd80      	pop	{r7, pc}

08015b80 <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8015b80:	b580      	push	{r7, lr}
 8015b82:	b088      	sub	sp, #32
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	60f8      	str	r0, [r7, #12]
 8015b88:	ed87 0a02 	vstr	s0, [r7, #8]
 8015b8c:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 8015b90:	edd7 6a02 	vldr	s13, [r7, #8]
 8015b94:	ed97 7a01 	vldr	s14, [r7, #4]
 8015b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015b9c:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 8015ba0:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8015c74 <lpf2pSetCutoffFreq+0xf4>
 8015ba4:	edd7 7a07 	vldr	s15, [r7, #28]
 8015ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015bac:	eeb0 0a47 	vmov.f32	s0, s14
 8015bb0:	f005 fcc4 	bl	801b53c <tanf>
 8015bb4:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8015bb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8015bbc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8015c78 <lpf2pSetCutoffFreq+0xf8>
 8015bc0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015bc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8015bcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8015bd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015bd8:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 8015bdc:	edd7 7a06 	vldr	s15, [r7, #24]
 8015be0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8015be4:	ed97 7a05 	vldr	s14, [r7, #20]
 8015be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	edd3 7a02 	vldr	s15, [r3, #8]
 8015bf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	689a      	ldr	r2, [r3, #8]
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 8015c0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8015c0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015c16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c1a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8015c1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8015c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 8015c2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8015c30:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8015c78 <lpf2pSetCutoffFreq+0xf8>
 8015c34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015c38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015c3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015c40:	edd7 7a06 	vldr	s15, [r7, #24]
 8015c44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8015c48:	ee77 6a27 	vadd.f32	s13, s14, s15
 8015c4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8015c50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015c54:	68fb      	ldr	r3, [r7, #12]
 8015c56:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	f04f 0200 	mov.w	r2, #0
 8015c60:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	f04f 0200 	mov.w	r2, #0
 8015c68:	619a      	str	r2, [r3, #24]
}
 8015c6a:	bf00      	nop
 8015c6c:	3720      	adds	r7, #32
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	40490fdb 	.word	0x40490fdb
 8015c78:	3fb504f3 	.word	0x3fb504f3

08015c7c <lpf2pApply>:

float lpf2pApply(lpf2pData* lpfData, float sample)
{
 8015c7c:	b480      	push	{r7}
 8015c7e:	b085      	sub	sp, #20
 8015c80:	af00      	add	r7, sp, #0
 8015c82:	6078      	str	r0, [r7, #4]
 8015c84:	ed87 0a00 	vstr	s0, [r7]
  float delay_element_0 = sample - lpfData->delay_element_1 * lpfData->a1 - lpfData->delay_element_2 * lpfData->a2;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	ed93 7a05 	vldr	s14, [r3, #20]
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	edd3 7a00 	vldr	s15, [r3]
 8015c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c98:	ed97 7a00 	vldr	s14, [r7]
 8015c9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	edd3 6a06 	vldr	s13, [r3, #24]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	edd3 7a01 	vldr	s15, [r3, #4]
 8015cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cb4:	edc7 7a03 	vstr	s15, [r7, #12]
  if (!isfinite(delay_element_0)) {
 8015cb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8015cbc:	eef0 7ae7 	vabs.f32	s15, s15
 8015cc0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8015d30 <lpf2pApply+0xb4>
 8015cc4:	eef4 7a47 	vcmp.f32	s15, s14
 8015cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ccc:	d901      	bls.n	8015cd2 <lpf2pApply+0x56>
    // don't allow bad values to propigate via the filter
    delay_element_0 = sample;
 8015cce:	683b      	ldr	r3, [r7, #0]
 8015cd0:	60fb      	str	r3, [r7, #12]
  }

  float output = delay_element_0 * lpfData->b0 + lpfData->delay_element_1 * lpfData->b1 + lpfData->delay_element_2 * lpfData->b2;
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8015cd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8015cdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	edd3 6a05 	vldr	s13, [r3, #20]
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	edd3 7a03 	vldr	s15, [r3, #12]
 8015cec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015cf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	edd3 6a06 	vldr	s13, [r3, #24]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	edd3 7a04 	vldr	s15, [r3, #16]
 8015d00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8015d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d08:	edc7 7a02 	vstr	s15, [r7, #8]

  lpfData->delay_element_2 = lpfData->delay_element_1;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	695a      	ldr	r2, [r3, #20]
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	619a      	str	r2, [r3, #24]
  lpfData->delay_element_1 = delay_element_0;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	68fa      	ldr	r2, [r7, #12]
 8015d18:	615a      	str	r2, [r3, #20]
  return output;
 8015d1a:	68bb      	ldr	r3, [r7, #8]
 8015d1c:	ee07 3a90 	vmov	s15, r3
}
 8015d20:	eeb0 0a67 	vmov.f32	s0, s15
 8015d24:	3714      	adds	r7, #20
 8015d26:	46bd      	mov	sp, r7
 8015d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2c:	4770      	bx	lr
 8015d2e:	bf00      	nop
 8015d30:	7f7fffff 	.word	0x7f7fffff

08015d34 <deadband>:
{
  return fminf(maxVal, fmaxf(minVal,value));
}

float deadband(float value, const float threshold)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	ed87 0a01 	vstr	s0, [r7, #4]
 8015d3e:	edc7 0a00 	vstr	s1, [r7]
  if (fabsf(value) < threshold)
 8015d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8015d46:	eef0 7ae7 	vabs.f32	s15, s15
 8015d4a:	ed97 7a00 	vldr	s14, [r7]
 8015d4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d56:	dd03      	ble.n	8015d60 <deadband+0x2c>
  {
    value = 0;
 8015d58:	f04f 0300 	mov.w	r3, #0
 8015d5c:	607b      	str	r3, [r7, #4]
 8015d5e:	e01e      	b.n	8015d9e <deadband+0x6a>
  }
  else if (value > 0)
 8015d60:	edd7 7a01 	vldr	s15, [r7, #4]
 8015d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d6c:	dd08      	ble.n	8015d80 <deadband+0x4c>
  {
    value -= threshold;
 8015d6e:	ed97 7a01 	vldr	s14, [r7, #4]
 8015d72:	edd7 7a00 	vldr	s15, [r7]
 8015d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015d7a:	edc7 7a01 	vstr	s15, [r7, #4]
 8015d7e:	e00e      	b.n	8015d9e <deadband+0x6a>
  }
  else if (value < 0)
 8015d80:	edd7 7a01 	vldr	s15, [r7, #4]
 8015d84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d8c:	d507      	bpl.n	8015d9e <deadband+0x6a>
  {
    value += threshold;
 8015d8e:	ed97 7a01 	vldr	s14, [r7, #4]
 8015d92:	edd7 7a00 	vldr	s15, [r7]
 8015d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015d9a:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	ee07 3a90 	vmov	s15, r3
}
 8015da4:	eeb0 0a67 	vmov.f32	s0, s15
 8015da8:	370c      	adds	r7, #12
 8015daa:	46bd      	mov	sp, r7
 8015dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db0:	4770      	bx	lr

08015db2 <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 8015db2:	b480      	push	{r7}
 8015db4:	b085      	sub	sp, #20
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	60f8      	str	r0, [r7, #12]
 8015dba:	60b9      	str	r1, [r7, #8]
 8015dbc:	607a      	str	r2, [r7, #4]
 8015dbe:	603b      	str	r3, [r7, #0]
    context->count = 0;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	687a      	ldr	r2, [r7, #4]
 8015dca:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	683a      	ldr	r2, [r7, #0]
 8015dd0:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	69ba      	ldr	r2, [r7, #24]
 8015dd6:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 8015dd8:	68ba      	ldr	r2, [r7, #8]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	441a      	add	r2, r3
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	2200      	movs	r2, #0
 8015de6:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	7f3a      	ldrb	r2, [r7, #28]
 8015dec:	761a      	strb	r2, [r3, #24]
}
 8015dee:	bf00      	nop
 8015df0:	3714      	adds	r7, #20
 8015df2:	46bd      	mov	sp, r7
 8015df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015df8:	4770      	bx	lr

08015dfa <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 8015dfa:	b480      	push	{r7}
 8015dfc:	b085      	sub	sp, #20
 8015dfe:	af00      	add	r7, sp, #0
 8015e00:	6078      	str	r0, [r7, #4]
 8015e02:	6039      	str	r1, [r7, #0]
    bool result = true;
 8015e04:	2301      	movs	r3, #1
 8015e06:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	1c5a      	adds	r2, r3, #1
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	68db      	ldr	r3, [r3, #12]
 8015e16:	683a      	ldr	r2, [r7, #0]
 8015e18:	429a      	cmp	r2, r3
 8015e1a:	d927      	bls.n	8015e6c <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	681b      	ldr	r3, [r3, #0]
 8015e20:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	68ba      	ldr	r2, [r7, #8]
 8015e28:	429a      	cmp	r2, r3
 8015e2a:	d304      	bcc.n	8015e36 <rateSupervisorValidate+0x3c>
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	689b      	ldr	r3, [r3, #8]
 8015e30:	68ba      	ldr	r2, [r7, #8]
 8015e32:	429a      	cmp	r2, r3
 8015e34:	d901      	bls.n	8015e3a <rateSupervisorValidate+0x40>
            result = false;
 8015e36:	2300      	movs	r3, #0
 8015e38:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	681a      	ldr	r2, [r3, #0]
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	615a      	str	r2, [r3, #20]
        context->count = 0;
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	2200      	movs	r2, #0
 8015e46:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	691a      	ldr	r2, [r3, #16]
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	441a      	add	r2, r3
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	7e1b      	ldrb	r3, [r3, #24]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d007      	beq.n	8015e6c <rateSupervisorValidate+0x72>
            result = true;
 8015e5c:	2301      	movs	r3, #1
 8015e5e:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	7e1b      	ldrb	r3, [r3, #24]
 8015e64:	3b01      	subs	r3, #1
 8015e66:	b2da      	uxtb	r2, r3
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 8015e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e6e:	4618      	mov	r0, r3
 8015e70:	3714      	adds	r7, #20
 8015e72:	46bd      	mov	sp, r7
 8015e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e78:	4770      	bx	lr

08015e7a <sleepus>:
 */
#include "sleepus.h"
#include "usec_time.h"

void sleepus(uint32_t us)
{
 8015e7a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015e7e:	b084      	sub	sp, #16
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  uint64_t start = usecTimestamp();
 8015e84:	f7f9 f9f6 	bl	800f274 <usecTimestamp>
 8015e88:	e9c7 0102 	strd	r0, r1, [r7, #8]
  while ((start+us) > usecTimestamp()) {
 8015e8c:	bf00      	nop
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	2200      	movs	r2, #0
 8015e92:	4698      	mov	r8, r3
 8015e94:	4691      	mov	r9, r2
 8015e96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015e9a:	eb18 0402 	adds.w	r4, r8, r2
 8015e9e:	eb49 0503 	adc.w	r5, r9, r3
 8015ea2:	f7f9 f9e7 	bl	800f274 <usecTimestamp>
 8015ea6:	4602      	mov	r2, r0
 8015ea8:	460b      	mov	r3, r1
 8015eaa:	42a2      	cmp	r2, r4
 8015eac:	41ab      	sbcs	r3, r5
 8015eae:	d3ee      	bcc.n	8015e8e <sleepus+0x14>
  }
}
 8015eb0:	bf00      	nop
 8015eb2:	bf00      	nop
 8015eb4:	3710      	adds	r7, #16
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08015ebc <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 8015ebc:	b580      	push	{r7, lr}
 8015ebe:	b084      	sub	sp, #16
 8015ec0:	af00      	add	r7, sp, #0
 8015ec2:	6078      	str	r0, [r7, #4]
 8015ec4:	460b      	mov	r3, r1
 8015ec6:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8015ec8:	2300      	movs	r3, #0
 8015eca:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8015ecc:	78fb      	ldrb	r3, [r7, #3]
 8015ece:	461a      	mov	r2, r3
 8015ed0:	2101      	movs	r1, #1
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f7f7 fb0f 	bl	800d4f6 <VL53L1_WrByte>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	73fb      	strb	r3, [r7, #15]
		DeviceAddress);

	LOG_FUNCTION_END(Status);
	return Status;
 8015edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	3710      	adds	r7, #16
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 8015ef4:	f107 030e 	add.w	r3, r7, #14
 8015ef8:	461a      	mov	r2, r3
 8015efa:	212e      	movs	r1, #46	@ 0x2e
 8015efc:	6878      	ldr	r0, [r7, #4]
 8015efe:	f7f7 fb1f 	bl	800d540 <VL53L1_RdByte>
 8015f02:	4603      	mov	r3, r0
 8015f04:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 8015f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d10c      	bne.n	8015f28 <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 8015f0e:	7bbb      	ldrb	r3, [r7, #14]
 8015f10:	f043 0301 	orr.w	r3, r3, #1
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 8015f18:	7bbb      	ldrb	r3, [r7, #14]
 8015f1a:	461a      	mov	r2, r3
 8015f1c:	212e      	movs	r1, #46	@ 0x2e
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7f7 fae9 	bl	800d4f6 <VL53L1_WrByte>
 8015f24:	4603      	mov	r3, r0
 8015f26:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8015f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d105      	bne.n	8015f3c <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 8015f30:	2101      	movs	r1, #1
 8015f32:	6878      	ldr	r0, [r7, #4]
 8015f34:	f000 fe76 	bl	8016c24 <VL53L1_data_init>
 8015f38:	4603      	mov	r3, r0
 8015f3a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8015f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d107      	bne.n	8015f54 <VL53L1_DataInit+0x6c>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	2201      	movs	r2, #1
 8015f48:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	2208      	movs	r2, #8
 8015f50:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8015f54:	2300      	movs	r3, #0
 8015f56:	73bb      	strb	r3, [r7, #14]
 8015f58:	e012      	b.n	8015f80 <VL53L1_DataInit+0x98>
		if (Status == VL53L1_ERROR_NONE)
 8015f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d112      	bne.n	8015f88 <VL53L1_DataInit+0xa0>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8015f62:	7bbb      	ldrb	r3, [r7, #14]
 8015f64:	2201      	movs	r2, #1
 8015f66:	4619      	mov	r1, r3
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	f000 fb03 	bl	8016574 <VL53L1_SetLimitCheckEnable>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	461a      	mov	r2, r3
 8015f72:	7bfb      	ldrb	r3, [r7, #15]
 8015f74:	4313      	orrs	r3, r2
 8015f76:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8015f78:	7bbb      	ldrb	r3, [r7, #14]
 8015f7a:	3301      	adds	r3, #1
 8015f7c:	b2db      	uxtb	r3, r3
 8015f7e:	73bb      	strb	r3, [r7, #14]
 8015f80:	7bbb      	ldrb	r3, [r7, #14]
 8015f82:	2b01      	cmp	r3, #1
 8015f84:	d9e9      	bls.n	8015f5a <VL53L1_DataInit+0x72>
 8015f86:	e000      	b.n	8015f8a <VL53L1_DataInit+0xa2>
		else
			break;
 8015f88:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8015f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d107      	bne.n	8015fa2 <VL53L1_DataInit+0xba>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8015f92:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8015f96:	2100      	movs	r1, #0
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f000 fb4c 	bl	8016636 <VL53L1_SetLimitCheckValue>
 8015f9e:	4603      	mov	r3, r0
 8015fa0:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8015fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d107      	bne.n	8015fba <VL53L1_DataInit+0xd2>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8015faa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8015fae:	2101      	movs	r1, #1
 8015fb0:	6878      	ldr	r0, [r7, #4]
 8015fb2:	f000 fb40 	bl	8016636 <VL53L1_SetLimitCheckValue>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8015fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3710      	adds	r7, #16
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8015fc6:	b580      	push	{r7, lr}
 8015fc8:	b084      	sub	sp, #16
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	2203      	movs	r2, #3
 8015fd6:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8015fda:	2320      	movs	r3, #32
 8015fdc:	73bb      	strb	r3, [r7, #14]
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	7bba      	ldrb	r2, [r7, #14]
 8015fe2:	709a      	strb	r2, [r3, #2]

	PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2203      	movs	r2, #3
 8015fe8:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	2203      	movs	r2, #3
 8015ff0:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	2203      	movs	r2, #3
 8015ff8:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8015ffc:	2108      	movs	r1, #8
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 f8d7 	bl	80161b2 <VL53L1_SetPresetMode>
 8016004:	4603      	mov	r3, r0
 8016006:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8016008:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801600c:	4618      	mov	r0, r3
 801600e:	3710      	adds	r7, #16
 8016010:	46bd      	mov	sp, r7
 8016012:	bd80      	pop	{r7, pc}

08016014 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8016014:	b480      	push	{r7}
 8016016:	b087      	sub	sp, #28
 8016018:	af00      	add	r7, sp, #0
 801601a:	4603      	mov	r3, r0
 801601c:	603a      	str	r2, [r7, #0]
 801601e:	71fb      	strb	r3, [r7, #7]
 8016020:	460b      	mov	r3, r1
 8016022:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016024:	2300      	movs	r3, #0
 8016026:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8016028:	4a2b      	ldr	r2, [pc, #172]	@ (80160d8 <ComputeDevicePresetMode+0xc4>)
 801602a:	f107 0310 	add.w	r3, r7, #16
 801602e:	6812      	ldr	r2, [r2, #0]
 8016030:	4611      	mov	r1, r2
 8016032:	8019      	strh	r1, [r3, #0]
 8016034:	3302      	adds	r3, #2
 8016036:	0c12      	lsrs	r2, r2, #16
 8016038:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 801603a:	4a28      	ldr	r2, [pc, #160]	@ (80160dc <ComputeDevicePresetMode+0xc8>)
 801603c:	f107 030c 	add.w	r3, r7, #12
 8016040:	6812      	ldr	r2, [r2, #0]
 8016042:	4611      	mov	r1, r2
 8016044:	8019      	strh	r1, [r3, #0]
 8016046:	3302      	adds	r3, #2
 8016048:	0c12      	lsrs	r2, r2, #16
 801604a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 801604c:	4a24      	ldr	r2, [pc, #144]	@ (80160e0 <ComputeDevicePresetMode+0xcc>)
 801604e:	f107 0308 	add.w	r3, r7, #8
 8016052:	6812      	ldr	r2, [r2, #0]
 8016054:	4611      	mov	r1, r2
 8016056:	8019      	strh	r1, [r3, #0]
 8016058:	3302      	adds	r3, #2
 801605a:	0c12      	lsrs	r2, r2, #16
 801605c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	2201      	movs	r2, #1
 8016062:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8016064:	79bb      	ldrb	r3, [r7, #6]
 8016066:	2b01      	cmp	r3, #1
 8016068:	d002      	beq.n	8016070 <ComputeDevicePresetMode+0x5c>
 801606a:	2b02      	cmp	r3, #2
 801606c:	d003      	beq.n	8016076 <ComputeDevicePresetMode+0x62>
 801606e:	e005      	b.n	801607c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8016070:	2300      	movs	r3, #0
 8016072:	75bb      	strb	r3, [r7, #22]
		break;
 8016074:	e004      	b.n	8016080 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8016076:	2301      	movs	r3, #1
 8016078:	75bb      	strb	r3, [r7, #22]
		break;
 801607a:	e001      	b.n	8016080 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 801607c:	2302      	movs	r3, #2
 801607e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8016080:	79fb      	ldrb	r3, [r7, #7]
 8016082:	2b08      	cmp	r3, #8
 8016084:	d015      	beq.n	80160b2 <ComputeDevicePresetMode+0x9e>
 8016086:	2b08      	cmp	r3, #8
 8016088:	dc1b      	bgt.n	80160c2 <ComputeDevicePresetMode+0xae>
 801608a:	2b03      	cmp	r3, #3
 801608c:	d009      	beq.n	80160a2 <ComputeDevicePresetMode+0x8e>
 801608e:	2b04      	cmp	r3, #4
 8016090:	d117      	bne.n	80160c2 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8016092:	7dbb      	ldrb	r3, [r7, #22]
 8016094:	3318      	adds	r3, #24
 8016096:	443b      	add	r3, r7
 8016098:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	701a      	strb	r2, [r3, #0]
		break;
 80160a0:	e011      	b.n	80160c6 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80160a2:	7dbb      	ldrb	r3, [r7, #22]
 80160a4:	3318      	adds	r3, #24
 80160a6:	443b      	add	r3, r7
 80160a8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	701a      	strb	r2, [r3, #0]
		break;
 80160b0:	e009      	b.n	80160c6 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80160b2:	7dbb      	ldrb	r3, [r7, #22]
 80160b4:	3318      	adds	r3, #24
 80160b6:	443b      	add	r3, r7
 80160b8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80160bc:	683b      	ldr	r3, [r7, #0]
 80160be:	701a      	strb	r2, [r3, #0]
		break;
 80160c0:	e001      	b.n	80160c6 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80160c2:	23f8      	movs	r3, #248	@ 0xf8
 80160c4:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 80160c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80160ca:	4618      	mov	r0, r3
 80160cc:	371c      	adds	r7, #28
 80160ce:	46bd      	mov	sp, r7
 80160d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d4:	4770      	bx	lr
 80160d6:	bf00      	nop
 80160d8:	0801eb18 	.word	0x0801eb18
 80160dc:	0801eb1c 	.word	0x0801eb1c
 80160e0:	0801eb20 	.word	0x0801eb20

080160e4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80160e4:	b5b0      	push	{r4, r5, r7, lr}
 80160e6:	b08e      	sub	sp, #56	@ 0x38
 80160e8:	af04      	add	r7, sp, #16
 80160ea:	60f8      	str	r0, [r7, #12]
 80160ec:	607b      	str	r3, [r7, #4]
 80160ee:	460b      	mov	r3, r1
 80160f0:	72fb      	strb	r3, [r7, #11]
 80160f2:	4613      	mov	r3, r2
 80160f4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80160f6:	2300      	movs	r3, #0
 80160f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80160fc:	7afb      	ldrb	r3, [r7, #11]
 80160fe:	2b03      	cmp	r3, #3
 8016100:	d002      	beq.n	8016108 <SetPresetMode+0x24>
 8016102:	7afb      	ldrb	r3, [r7, #11]
 8016104:	2b08      	cmp	r3, #8
 8016106:	d103      	bne.n	8016110 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8016108:	2340      	movs	r3, #64	@ 0x40
 801610a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801610e:	e002      	b.n	8016116 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8016110:	2320      	movs	r3, #32
 8016112:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8016116:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 801611a:	7ab9      	ldrb	r1, [r7, #10]
 801611c:	7afb      	ldrb	r3, [r7, #11]
 801611e:	4618      	mov	r0, r3
 8016120:	f7ff ff78 	bl	8016014 <ComputeDevicePresetMode>
 8016124:	4603      	mov	r3, r0
 8016126:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 801612a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801612e:	2b00      	cmp	r3, #0
 8016130:	d112      	bne.n	8016158 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8016132:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8016136:	f107 001c 	add.w	r0, r7, #28
 801613a:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 801613e:	f107 0314 	add.w	r3, r7, #20
 8016142:	9301      	str	r3, [sp, #4]
 8016144:	f107 0318 	add.w	r3, r7, #24
 8016148:	9300      	str	r3, [sp, #0]
 801614a:	4603      	mov	r3, r0
 801614c:	68f8      	ldr	r0, [r7, #12]
 801614e:	f001 f801 	bl	8017154 <VL53L1_get_preset_mode_timing_cfg>
 8016152:	4603      	mov	r3, r0
 8016154:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8016158:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801615c:	2b00      	cmp	r3, #0
 801615e:	d112      	bne.n	8016186 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8016160:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8016164:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8016166:	69fd      	ldr	r5, [r7, #28]
 8016168:	69bb      	ldr	r3, [r7, #24]
 801616a:	697a      	ldr	r2, [r7, #20]
 801616c:	6879      	ldr	r1, [r7, #4]
 801616e:	9102      	str	r1, [sp, #8]
 8016170:	9201      	str	r2, [sp, #4]
 8016172:	9300      	str	r3, [sp, #0]
 8016174:	462b      	mov	r3, r5
 8016176:	4622      	mov	r2, r4
 8016178:	4601      	mov	r1, r0
 801617a:	68f8      	ldr	r0, [r7, #12]
 801617c:	f001 f894 	bl	80172a8 <VL53L1_set_preset_mode>
 8016180:	4603      	mov	r3, r0
 8016182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8016186:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801618a:	2b00      	cmp	r3, #0
 801618c:	d103      	bne.n	8016196 <SetPresetMode+0xb2>
		PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8016194:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8016196:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801619a:	2b00      	cmp	r3, #0
 801619c:	d103      	bne.n	80161a6 <SetPresetMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	7afa      	ldrb	r2, [r7, #11]
 80161a2:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 80161a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3728      	adds	r7, #40	@ 0x28
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bdb0      	pop	{r4, r5, r7, pc}

080161b2 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b084      	sub	sp, #16
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
 80161ba:	460b      	mov	r3, r1
 80161bc:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80161be:	2300      	movs	r3, #0
 80161c0:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80161c2:	2303      	movs	r3, #3
 80161c4:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 80161c6:	7bba      	ldrb	r2, [r7, #14]
 80161c8:	78f9      	ldrb	r1, [r7, #3]
 80161ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f7ff ff88 	bl	80160e4 <SetPresetMode>
 80161d4:	4603      	mov	r3, r0
 80161d6:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 80161d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d11f      	bne.n	8016220 <VL53L1_SetPresetMode+0x6e>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	7bba      	ldrb	r2, [r7, #14]
 80161e4:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				DistanceMode);

		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	7bba      	ldrb	r2, [r7, #14]
 80161ec:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80161f0:	78fb      	ldrb	r3, [r7, #3]
 80161f2:	2b04      	cmp	r3, #4
 80161f4:	d005      	beq.n	8016202 <VL53L1_SetPresetMode+0x50>
 80161f6:	78fb      	ldrb	r3, [r7, #3]
 80161f8:	2b03      	cmp	r3, #3
 80161fa:	d002      	beq.n	8016202 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80161fc:	78fb      	ldrb	r3, [r7, #3]
 80161fe:	2b08      	cmp	r3, #8
 8016200:	d107      	bne.n	8016212 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8016202:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 f8a2 	bl	8016350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 801620c:	4603      	mov	r3, r0
 801620e:	73fb      	strb	r3, [r7, #15]
 8016210:	e006      	b.n	8016220 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8016212:	f248 2135 	movw	r1, #33333	@ 0x8235
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f000 f89a 	bl	8016350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 801621c:	4603      	mov	r3, r0
 801621e:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8016220:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d106      	bne.n	8016236 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8016228:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f000 f965 	bl	80164fc <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8016232:	4603      	mov	r3, r0
 8016234:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8016236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801623a:	4618      	mov	r0, r3
 801623c:	3710      	adds	r7, #16
 801623e:	46bd      	mov	sp, r7
 8016240:	bd80      	pop	{r7, pc}

08016242 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8016242:	b580      	push	{r7, lr}
 8016244:	b088      	sub	sp, #32
 8016246:	af00      	add	r7, sp, #0
 8016248:	6078      	str	r0, [r7, #4]
 801624a:	460b      	mov	r3, r1
 801624c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801624e:	2300      	movs	r3, #0
 8016250:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8016258:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 801625a:	78fb      	ldrb	r3, [r7, #3]
 801625c:	2b01      	cmp	r3, #1
 801625e:	d008      	beq.n	8016272 <VL53L1_SetDistanceMode+0x30>
 8016260:	78fb      	ldrb	r3, [r7, #3]
 8016262:	2b02      	cmp	r3, #2
 8016264:	d005      	beq.n	8016272 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8016266:	78fb      	ldrb	r3, [r7, #3]
 8016268:	2b03      	cmp	r3, #3
 801626a:	d002      	beq.n	8016272 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 801626c:	f06f 0303 	mvn.w	r3, #3
 8016270:	e069      	b.n	8016346 <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8016272:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016276:	2b00      	cmp	r3, #0
 8016278:	d10a      	bne.n	8016290 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 801627a:	78fb      	ldrb	r3, [r7, #3]
 801627c:	2b01      	cmp	r3, #1
 801627e:	d002      	beq.n	8016286 <VL53L1_SetDistanceMode+0x44>
 8016280:	78fb      	ldrb	r3, [r7, #3]
 8016282:	2b02      	cmp	r3, #2
 8016284:	d102      	bne.n	801628c <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 8016286:	78fb      	ldrb	r3, [r7, #3]
 8016288:	77bb      	strb	r3, [r7, #30]
 801628a:	e001      	b.n	8016290 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 801628c:	2303      	movs	r3, #3
 801628e:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 8016290:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d107      	bne.n	80162a8 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8016298:	f107 0308 	add.w	r3, r7, #8
 801629c:	4619      	mov	r1, r3
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f000 ff01 	bl	80170a6 <VL53L1_get_user_zone>
 80162a4:	4603      	mov	r3, r0
 80162a6:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  PALDevDataGet(Dev,
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	695b      	ldr	r3, [r3, #20]
 80162ac:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80162ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d10a      	bne.n	80162cc <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80162b6:	f107 0314 	add.w	r3, r7, #20
 80162ba:	f107 0210 	add.w	r2, r7, #16
 80162be:	f107 010c 	add.w	r1, r7, #12
 80162c2:	6878      	ldr	r0, [r7, #4]
 80162c4:	f000 fe2c 	bl	8016f20 <VL53L1_get_timeouts_us>
 80162c8:	4603      	mov	r3, r0
 80162ca:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 80162cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d107      	bne.n	80162e4 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 80162d4:	7fba      	ldrb	r2, [r7, #30]
 80162d6:	7f79      	ldrb	r1, [r7, #29]
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f7ff ff02 	bl	80160e4 <SetPresetMode>
 80162e0:	4603      	mov	r3, r0
 80162e2:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80162e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d10b      	bne.n	8016304 <VL53L1_SetDistanceMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	7fba      	ldrb	r2, [r7, #30]
 80162f0:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80162f4:	687b      	ldr	r3, [r7, #4]
 80162f6:	7fba      	ldrb	r2, [r7, #30]
 80162f8:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	78fa      	ldrb	r2, [r7, #3]
 8016300:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8016304:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016308:	2b00      	cmp	r3, #0
 801630a:	d10e      	bne.n	801632a <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 801630c:	68f9      	ldr	r1, [r7, #12]
 801630e:	693a      	ldr	r2, [r7, #16]
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	f000 fdcc 	bl	8016eb0 <VL53L1_set_timeouts_us>
 8016318:	4603      	mov	r3, r0
 801631a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 801631c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016320:	2b00      	cmp	r3, #0
 8016322:	d102      	bne.n	801632a <VL53L1_SetDistanceMode+0xe8>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 8016324:	697a      	ldr	r2, [r7, #20]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 801632a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801632e:	2b00      	cmp	r3, #0
 8016330:	d107      	bne.n	8016342 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8016332:	f107 0308 	add.w	r3, r7, #8
 8016336:	4619      	mov	r1, r3
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f000 fe91 	bl	8017060 <VL53L1_set_user_zone>
 801633e:	4603      	mov	r3, r0
 8016340:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8016342:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016346:	4618      	mov	r0, r3
 8016348:	3720      	adds	r7, #32
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}
	...

08016350 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8016350:	b580      	push	{r7, lr}
 8016352:	b08e      	sub	sp, #56	@ 0x38
 8016354:	af00      	add	r7, sp, #0
 8016356:	6078      	str	r0, [r7, #4]
 8016358:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801635a:	2300      	movs	r3, #0
 801635c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8016360:	4b64      	ldr	r3, [pc, #400]	@ (80164f4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8016362:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_LLDriverData_t   *pLLData;

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	4a64      	ldr	r2, [pc, #400]	@ (80164f8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 8016368:	4293      	cmp	r3, r2
 801636a:	d902      	bls.n	8016372 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801636c:	23fc      	movs	r3, #252	@ 0xfc
 801636e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (Status == VL53L1_ERROR_NONE) {
 8016372:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8016376:	2b00      	cmp	r3, #0
 8016378:	d109      	bne.n	801638e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 801637a:	f107 0317 	add.w	r3, r7, #23
 801637e:	461a      	mov	r2, r3
 8016380:	2105      	movs	r1, #5
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 f9e7 	bl	8016756 <VL53L1_GetSequenceStepEnable>
 8016388:	4603      	mov	r3, r0
 801638a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 801638e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8016392:	2b00      	cmp	r3, #0
 8016394:	d109      	bne.n	80163aa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8016396:	f107 0316 	add.w	r3, r7, #22
 801639a:	461a      	mov	r2, r3
 801639c:	2106      	movs	r1, #6
 801639e:	6878      	ldr	r0, [r7, #4]
 80163a0:	f000 f9d9 	bl	8016756 <VL53L1_GetSequenceStepEnable>
 80163a4:	4603      	mov	r3, r0
 80163a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 80163aa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d10b      	bne.n	80163ca <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 80163b2:	f107 0310 	add.w	r3, r7, #16
 80163b6:	f107 020c 	add.w	r2, r7, #12
 80163ba:	f107 0108 	add.w	r1, r7, #8
 80163be:	6878      	ldr	r0, [r7, #4]
 80163c0:	f000 fdae 	bl	8016f20 <VL53L1_get_timeouts_us>
 80163c4:	4603      	mov	r3, r0
 80163c6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 80163ca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	f040 8081 	bne.w	80164d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 80163da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		TimingGuard = 0;
 80163de:	2300      	movs	r3, #0
 80163e0:	633b      	str	r3, [r7, #48]	@ 0x30
		divisor = 1;
 80163e2:	2301      	movs	r3, #1
 80163e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		switch (PresetMode) {
 80163e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80163ea:	2b08      	cmp	r3, #8
 80163ec:	d026      	beq.n	801643c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80163ee:	2b08      	cmp	r3, #8
 80163f0:	dc41      	bgt.n	8016476 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 80163f2:	2b03      	cmp	r3, #3
 80163f4:	d00f      	beq.n	8016416 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 80163f6:	2b04      	cmp	r3, #4
 80163f8:	d13d      	bne.n	8016476 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80163fa:	7dfb      	ldrb	r3, [r7, #23]
 80163fc:	2b01      	cmp	r3, #1
 80163fe:	d002      	beq.n	8016406 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
 8016400:	7dbb      	ldrb	r3, [r7, #22]
 8016402:	2b01      	cmp	r3, #1
 8016404:	d103      	bne.n	801640e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
				TimingGuard = 5000;
 8016406:	f241 3388 	movw	r3, #5000	@ 0x1388
 801640a:	633b      	str	r3, [r7, #48]	@ 0x30
			else
				TimingGuard = 1000;
		break;
 801640c:	e036      	b.n	801647c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 801640e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016412:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8016414:	e032      	b.n	801647c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8016416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	627b      	str	r3, [r7, #36]	@ 0x24
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 801641c:	7dfb      	ldrb	r3, [r7, #23]
 801641e:	2b01      	cmp	r3, #1
 8016420:	d002      	beq.n	8016428 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
 8016422:	7dbb      	ldrb	r3, [r7, #22]
 8016424:	2b01      	cmp	r3, #1
 8016426:	d103      	bne.n	8016430 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe0>
				TimingGuard = 26600;
 8016428:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 801642c:	633b      	str	r3, [r7, #48]	@ 0x30
 801642e:	e002      	b.n	8016436 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe6>
			else
				TimingGuard = 21600;
 8016430:	f245 4360 	movw	r3, #21600	@ 0x5460
 8016434:	633b      	str	r3, [r7, #48]	@ 0x30
			divisor = 2;
 8016436:	2302      	movs	r3, #2
 8016438:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 801643a:	e01f      	b.n	801647c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 801643c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801643e:	005b      	lsls	r3, r3, #1
 8016440:	627b      	str	r3, [r7, #36]	@ 0x24
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8016442:	23f5      	movs	r3, #245	@ 0xf5
 8016444:	62bb      	str	r3, [r7, #40]	@ 0x28
			pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	61fb      	str	r3, [r7, #28]
			vhv_loops = pLLData->low_power_auto_data.vhv_loop_bound;
 801644a:	69fb      	ldr	r3, [r7, #28]
 801644c:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8016450:	61bb      	str	r3, [r7, #24]
			if (vhv_loops > 0) {
 8016452:	69bb      	ldr	r3, [r7, #24]
 8016454:	2b00      	cmp	r3, #0
 8016456:	dd07      	ble.n	8016468 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 8016458:	69bb      	ldr	r3, [r7, #24]
 801645a:	22f5      	movs	r2, #245	@ 0xf5
 801645c:	fb02 f303 	mul.w	r3, r2, r3
 8016460:	461a      	mov	r2, r3
 8016462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016464:	4413      	add	r3, r2
 8016466:	62bb      	str	r3, [r7, #40]	@ 0x28
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8016468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801646a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 801646e:	633b      	str	r3, [r7, #48]	@ 0x30
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8016470:	2302      	movs	r3, #2
 8016472:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8016474:	e002      	b.n	801647c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8016476:	23f8      	movs	r3, #248	@ 0xf8
 8016478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 801647c:	683a      	ldr	r2, [r7, #0]
 801647e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016480:	429a      	cmp	r2, r3
 8016482:	d803      	bhi.n	801648c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8016484:	23fc      	movs	r3, #252	@ 0xfc
 8016486:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801648a:	e003      	b.n	8016494 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 801648c:	683a      	ldr	r2, [r7, #0]
 801648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016490:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8016492:	613b      	str	r3, [r7, #16]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8016494:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8016498:	2b00      	cmp	r3, #0
 801649a:	d11c      	bne.n	80164d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 801649c:	693b      	ldr	r3, [r7, #16]
 801649e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80164a0:	429a      	cmp	r2, r3
 80164a2:	d203      	bcs.n	80164ac <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 80164a4:	23fc      	movs	r3, #252	@ 0xfc
 80164a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80164aa:	e00d      	b.n	80164c8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 80164ac:	693a      	ldr	r2, [r7, #16]
 80164ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80164b4:	613b      	str	r3, [r7, #16]
				Status = VL53L1_set_timeouts_us(
 80164b6:	68b9      	ldr	r1, [r7, #8]
 80164b8:	68fa      	ldr	r2, [r7, #12]
 80164ba:	693b      	ldr	r3, [r7, #16]
 80164bc:	6878      	ldr	r0, [r7, #4]
 80164be:	f000 fcf7 	bl	8016eb0 <VL53L1_set_timeouts_us>
 80164c2:	4603      	mov	r3, r0
 80164c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 80164c8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	d102      	bne.n	80164d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				PALDevDataSet(Dev,
 80164d0:	693a      	ldr	r2, [r7, #16]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 80164d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d103      	bne.n	80164e6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		PALDevDataSet(Dev,
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	683a      	ldr	r2, [r7, #0]
 80164e2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80164e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80164ea:	4618      	mov	r0, r3
 80164ec:	3738      	adds	r7, #56	@ 0x38
 80164ee:	46bd      	mov	sp, r7
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	bf00      	nop
 80164f4:	00086470 	.word	0x00086470
 80164f8:	00989680 	.word	0x00989680

080164fc <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80164fc:	b580      	push	{r7, lr}
 80164fe:	b084      	sub	sp, #16
 8016500:	af00      	add	r7, sp, #0
 8016502:	6078      	str	r0, [r7, #4]
 8016504:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016506:	2300      	movs	r3, #0
 8016508:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 801650a:	6839      	ldr	r1, [r7, #0]
 801650c:	6878      	ldr	r0, [r7, #4]
 801650e:	f000 fca6 	bl	8016e5e <VL53L1_set_inter_measurement_period_ms>
 8016512:	4603      	mov	r3, r0
 8016514:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8016516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801651a:	4618      	mov	r0, r3
 801651c:	3710      	adds	r7, #16
 801651e:	46bd      	mov	sp, r7
 8016520:	bd80      	pop	{r7, pc}

08016522 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8016522:	b580      	push	{r7, lr}
 8016524:	b086      	sub	sp, #24
 8016526:	af00      	add	r7, sp, #0
 8016528:	60f8      	str	r0, [r7, #12]
 801652a:	460b      	mov	r3, r1
 801652c:	607a      	str	r2, [r7, #4]
 801652e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016530:	2300      	movs	r3, #0
 8016532:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8016534:	897b      	ldrh	r3, [r7, #10]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d002      	beq.n	8016540 <SetLimitValue+0x1e>
 801653a:	2b01      	cmp	r3, #1
 801653c:	d009      	beq.n	8016552 <SetLimitValue+0x30>
 801653e:	e011      	b.n	8016564 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8016540:	687b      	ldr	r3, [r7, #4]
 8016542:	0b9b      	lsrs	r3, r3, #14
 8016544:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8016546:	8abb      	ldrh	r3, [r7, #20]
 8016548:	4619      	mov	r1, r3
 801654a:	68f8      	ldr	r0, [r7, #12]
 801654c:	f001 f838 	bl	80175c0 <VL53L1_set_lite_sigma_threshold>
		break;
 8016550:	e00a      	b.n	8016568 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8016552:	687b      	ldr	r3, [r7, #4]
 8016554:	0a5b      	lsrs	r3, r3, #9
 8016556:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8016558:	8abb      	ldrh	r3, [r7, #20]
 801655a:	4619      	mov	r1, r3
 801655c:	68f8      	ldr	r0, [r7, #12]
 801655e:	f001 f85b 	bl	8017618 <VL53L1_set_lite_min_count_rate>
		break;
 8016562:	e001      	b.n	8016568 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8016564:	23fc      	movs	r3, #252	@ 0xfc
 8016566:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8016568:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801656c:	4618      	mov	r0, r3
 801656e:	3718      	adds	r7, #24
 8016570:	46bd      	mov	sp, r7
 8016572:	bd80      	pop	{r7, pc}

08016574 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8016574:	b580      	push	{r7, lr}
 8016576:	b084      	sub	sp, #16
 8016578:	af00      	add	r7, sp, #0
 801657a:	6078      	str	r0, [r7, #4]
 801657c:	460b      	mov	r3, r1
 801657e:	807b      	strh	r3, [r7, #2]
 8016580:	4613      	mov	r3, r2
 8016582:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016584:	2300      	movs	r3, #0
 8016586:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8016588:	2300      	movs	r3, #0
 801658a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 801658c:	887b      	ldrh	r3, [r7, #2]
 801658e:	2b01      	cmp	r3, #1
 8016590:	d902      	bls.n	8016598 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8016592:	23fc      	movs	r3, #252	@ 0xfc
 8016594:	73fb      	strb	r3, [r7, #15]
 8016596:	e014      	b.n	80165c2 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8016598:	787b      	ldrb	r3, [r7, #1]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d102      	bne.n	80165a4 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 801659e:	2300      	movs	r3, #0
 80165a0:	60bb      	str	r3, [r7, #8]
 80165a2:	e006      	b.n	80165b2 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80165a4:	887b      	ldrh	r3, [r7, #2]
 80165a6:	687a      	ldr	r2, [r7, #4]
 80165a8:	33e0      	adds	r3, #224	@ 0xe0
 80165aa:	009b      	lsls	r3, r3, #2
 80165ac:	4413      	add	r3, r2
 80165ae:	689b      	ldr	r3, [r3, #8]
 80165b0:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 80165b2:	887b      	ldrh	r3, [r7, #2]
 80165b4:	68ba      	ldr	r2, [r7, #8]
 80165b6:	4619      	mov	r1, r3
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f7ff ffb2 	bl	8016522 <SetLimitValue>
 80165be:	4603      	mov	r3, r0
 80165c0:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 80165c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d10c      	bne.n	80165e4 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80165ca:	787b      	ldrb	r3, [r7, #1]
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	bf14      	ite	ne
 80165d0:	2301      	movne	r3, #1
 80165d2:	2300      	moveq	r3, #0
 80165d4:	b2da      	uxtb	r2, r3
 80165d6:	887b      	ldrh	r3, [r7, #2]
 80165d8:	4611      	mov	r1, r2
 80165da:	687a      	ldr	r2, [r7, #4]
 80165dc:	4413      	add	r3, r2
 80165de:	460a      	mov	r2, r1
 80165e0:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80165e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80165e8:	4618      	mov	r0, r3
 80165ea:	3710      	adds	r7, #16
 80165ec:	46bd      	mov	sp, r7
 80165ee:	bd80      	pop	{r7, pc}

080165f0 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80165f0:	b480      	push	{r7}
 80165f2:	b087      	sub	sp, #28
 80165f4:	af00      	add	r7, sp, #0
 80165f6:	60f8      	str	r0, [r7, #12]
 80165f8:	460b      	mov	r3, r1
 80165fa:	607a      	str	r2, [r7, #4]
 80165fc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80165fe:	2300      	movs	r3, #0
 8016600:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8016602:	897b      	ldrh	r3, [r7, #10]
 8016604:	2b01      	cmp	r3, #1
 8016606:	d905      	bls.n	8016614 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8016608:	23fc      	movs	r3, #252	@ 0xfc
 801660a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	2200      	movs	r2, #0
 8016610:	701a      	strb	r2, [r3, #0]
 8016612:	e008      	b.n	8016626 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8016614:	897b      	ldrh	r3, [r7, #10]
 8016616:	68fa      	ldr	r2, [r7, #12]
 8016618:	4413      	add	r3, r2
 801661a:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 801661e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	7dba      	ldrb	r2, [r7, #22]
 8016624:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8016626:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801662a:	4618      	mov	r0, r3
 801662c:	371c      	adds	r7, #28
 801662e:	46bd      	mov	sp, r7
 8016630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016634:	4770      	bx	lr

08016636 <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8016636:	b580      	push	{r7, lr}
 8016638:	b086      	sub	sp, #24
 801663a:	af00      	add	r7, sp, #0
 801663c:	60f8      	str	r0, [r7, #12]
 801663e:	460b      	mov	r3, r1
 8016640:	607a      	str	r2, [r7, #4]
 8016642:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016644:	2300      	movs	r3, #0
 8016646:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8016648:	897b      	ldrh	r3, [r7, #10]
 801664a:	2b01      	cmp	r3, #1
 801664c:	d902      	bls.n	8016654 <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801664e:	23fc      	movs	r3, #252	@ 0xfc
 8016650:	75fb      	strb	r3, [r7, #23]
 8016652:	e023      	b.n	801669c <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8016654:	897b      	ldrh	r3, [r7, #10]
 8016656:	68fa      	ldr	r2, [r7, #12]
 8016658:	4413      	add	r3, r2
 801665a:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 801665e:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8016660:	7dbb      	ldrb	r3, [r7, #22]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d107      	bne.n	8016676 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8016666:	897b      	ldrh	r3, [r7, #10]
 8016668:	68fa      	ldr	r2, [r7, #12]
 801666a:	33e0      	adds	r3, #224	@ 0xe0
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	4413      	add	r3, r2
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	609a      	str	r2, [r3, #8]
 8016674:	e012      	b.n	801669c <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 8016676:	897b      	ldrh	r3, [r7, #10]
 8016678:	687a      	ldr	r2, [r7, #4]
 801667a:	4619      	mov	r1, r3
 801667c:	68f8      	ldr	r0, [r7, #12]
 801667e:	f7ff ff50 	bl	8016522 <SetLimitValue>
 8016682:	4603      	mov	r3, r0
 8016684:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8016686:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801668a:	2b00      	cmp	r3, #0
 801668c:	d106      	bne.n	801669c <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801668e:	897b      	ldrh	r3, [r7, #10]
 8016690:	68fa      	ldr	r2, [r7, #12]
 8016692:	33e0      	adds	r3, #224	@ 0xe0
 8016694:	009b      	lsls	r3, r3, #2
 8016696:	4413      	add	r3, r2
 8016698:	687a      	ldr	r2, [r7, #4]
 801669a:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801669c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3718      	adds	r7, #24
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bd80      	pop	{r7, pc}

080166a8 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b088      	sub	sp, #32
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	60f8      	str	r0, [r7, #12]
 80166b0:	460b      	mov	r3, r1
 80166b2:	607a      	str	r2, [r7, #4]
 80166b4:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80166b6:	2300      	movs	r3, #0
 80166b8:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80166ba:	897b      	ldrh	r3, [r7, #10]
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d002      	beq.n	80166c6 <VL53L1_GetLimitCheckValue+0x1e>
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d00c      	beq.n	80166de <VL53L1_GetLimitCheckValue+0x36>
 80166c4:	e017      	b.n	80166f6 <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80166c6:	f107 0314 	add.w	r3, r7, #20
 80166ca:	4619      	mov	r1, r3
 80166cc:	68f8      	ldr	r0, [r7, #12]
 80166ce:	f000 ff61 	bl	8017594 <VL53L1_get_lite_sigma_threshold>
 80166d2:	4603      	mov	r3, r0
 80166d4:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80166d6:	8abb      	ldrh	r3, [r7, #20]
 80166d8:	039b      	lsls	r3, r3, #14
 80166da:	61bb      	str	r3, [r7, #24]
		break;
 80166dc:	e00d      	b.n	80166fa <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80166de:	f107 0316 	add.w	r3, r7, #22
 80166e2:	4619      	mov	r1, r3
 80166e4:	68f8      	ldr	r0, [r7, #12]
 80166e6:	f000 ff81 	bl	80175ec <VL53L1_get_lite_min_count_rate>
 80166ea:	4603      	mov	r3, r0
 80166ec:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80166ee:	8afb      	ldrh	r3, [r7, #22]
 80166f0:	025b      	lsls	r3, r3, #9
 80166f2:	61bb      	str	r3, [r7, #24]
		break;
 80166f4:	e001      	b.n	80166fa <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80166f6:	23fc      	movs	r3, #252	@ 0xfc
 80166f8:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80166fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d123      	bne.n	801674a <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 8016702:	69bb      	ldr	r3, [r7, #24]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d110      	bne.n	801672a <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8016708:	897b      	ldrh	r3, [r7, #10]
 801670a:	68fa      	ldr	r2, [r7, #12]
 801670c:	33e0      	adds	r3, #224	@ 0xe0
 801670e:	009b      	lsls	r3, r3, #2
 8016710:	4413      	add	r3, r2
 8016712:	689b      	ldr	r3, [r3, #8]
 8016714:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	69ba      	ldr	r2, [r7, #24]
 801671a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801671c:	897b      	ldrh	r3, [r7, #10]
 801671e:	68fa      	ldr	r2, [r7, #12]
 8016720:	4413      	add	r3, r2
 8016722:	2200      	movs	r2, #0
 8016724:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8016728:	e00f      	b.n	801674a <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	69ba      	ldr	r2, [r7, #24]
 801672e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8016730:	897b      	ldrh	r3, [r7, #10]
 8016732:	68fa      	ldr	r2, [r7, #12]
 8016734:	33e0      	adds	r3, #224	@ 0xe0
 8016736:	009b      	lsls	r3, r3, #2
 8016738:	4413      	add	r3, r2
 801673a:	69ba      	ldr	r2, [r7, #24]
 801673c:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801673e:	897b      	ldrh	r3, [r7, #10]
 8016740:	68fa      	ldr	r2, [r7, #12]
 8016742:	4413      	add	r3, r2
 8016744:	2201      	movs	r2, #1
 8016746:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 801674a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 801674e:	4618      	mov	r0, r3
 8016750:	3720      	adds	r7, #32
 8016752:	46bd      	mov	sp, r7
 8016754:	bd80      	pop	{r7, pc}

08016756 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8016756:	b580      	push	{r7, lr}
 8016758:	b086      	sub	sp, #24
 801675a:	af00      	add	r7, sp, #0
 801675c:	60f8      	str	r0, [r7, #12]
 801675e:	460b      	mov	r3, r1
 8016760:	607a      	str	r2, [r7, #4]
 8016762:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016764:	2300      	movs	r3, #0
 8016766:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8016768:	7afb      	ldrb	r3, [r7, #11]
 801676a:	687a      	ldr	r2, [r7, #4]
 801676c:	4619      	mov	r1, r3
 801676e:	68f8      	ldr	r0, [r7, #12]
 8016770:	f000 fc3f 	bl	8016ff2 <VL53L1_get_sequence_config_bit>
 8016774:	4603      	mov	r3, r0
 8016776:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8016778:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801677c:	4618      	mov	r0, r3
 801677e:	3718      	adds	r7, #24
 8016780:	46bd      	mov	sp, r7
 8016782:	bd80      	pop	{r7, pc}

08016784 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b084      	sub	sp, #16
 8016788:	af00      	add	r7, sp, #0
 801678a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801678c:	2300      	movs	r3, #0
 801678e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = PALDevDataGet(Dev, PalState);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 8016796:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 8016798:	7bbb      	ldrb	r3, [r7, #14]
 801679a:	2b63      	cmp	r3, #99	@ 0x63
 801679c:	dc12      	bgt.n	80167c4 <VL53L1_StartMeasurement+0x40>
 801679e:	2b62      	cmp	r3, #98	@ 0x62
 80167a0:	da0d      	bge.n	80167be <VL53L1_StartMeasurement+0x3a>
 80167a2:	2b05      	cmp	r3, #5
 80167a4:	dc0e      	bgt.n	80167c4 <VL53L1_StartMeasurement+0x40>
 80167a6:	2b04      	cmp	r3, #4
 80167a8:	da09      	bge.n	80167be <VL53L1_StartMeasurement+0x3a>
 80167aa:	2b02      	cmp	r3, #2
 80167ac:	dc02      	bgt.n	80167b4 <VL53L1_StartMeasurement+0x30>
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	da05      	bge.n	80167be <VL53L1_StartMeasurement+0x3a>
 80167b2:	e007      	b.n	80167c4 <VL53L1_StartMeasurement+0x40>
 80167b4:	2b03      	cmp	r3, #3
 80167b6:	d105      	bne.n	80167c4 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80167b8:	2300      	movs	r3, #0
 80167ba:	73fb      	strb	r3, [r7, #15]
		break;
 80167bc:	e004      	b.n	80167c8 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80167be:	23f2      	movs	r3, #242	@ 0xf2
 80167c0:	73fb      	strb	r3, [r7, #15]
		break;
 80167c2:	e001      	b.n	80167c8 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80167c4:	23fd      	movs	r3, #253	@ 0xfd
 80167c6:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = PALDevDataGet(Dev, LLData.measurement_mode);
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	789b      	ldrb	r3, [r3, #2]
 80167cc:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 80167ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d107      	bne.n	80167e6 <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 80167d6:	7b7b      	ldrb	r3, [r7, #13]
 80167d8:	2206      	movs	r2, #6
 80167da:	4619      	mov	r1, r3
 80167dc:	6878      	ldr	r0, [r7, #4]
 80167de:	f000 ff51 	bl	8017684 <VL53L1_init_and_start_range>
 80167e2:	4603      	mov	r3, r0
 80167e4:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80167e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d103      	bne.n	80167f6 <VL53L1_StartMeasurement+0x72>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	2204      	movs	r2, #4
 80167f2:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80167f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3710      	adds	r7, #16
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}

08016802 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8016802:	b580      	push	{r7, lr}
 8016804:	b084      	sub	sp, #16
 8016806:	af00      	add	r7, sp, #0
 8016808:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801680a:	2300      	movs	r3, #0
 801680c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f001 f99a 	bl	8017b48 <VL53L1_stop_range>
 8016814:	4603      	mov	r3, r0
 8016816:	73fb      	strb	r3, [r7, #15]

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 8016818:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d103      	bne.n	8016828 <VL53L1_StopMeasurement+0x26>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2203      	movs	r2, #3
 8016824:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	LOG_FUNCTION_END(Status);
	return Status;
 8016828:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801682c:	4618      	mov	r0, r3
 801682e:	3710      	adds	r7, #16
 8016830:	46bd      	mov	sp, r7
 8016832:	bd80      	pop	{r7, pc}

08016834 <VL53L1_GetMeasurementDataReady>:
}


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
 801683c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801683e:	2300      	movs	r3, #0
 8016840:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8016842:	6839      	ldr	r1, [r7, #0]
 8016844:	6878      	ldr	r0, [r7, #4]
 8016846:	f004 f8d7 	bl	801a9f8 <VL53L1_is_new_data_ready>
 801684a:	4603      	mov	r3, r0
 801684c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 801684e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016852:	4618      	mov	r0, r3
 8016854:	3710      	adds	r7, #16
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
	...

0801685c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 801685c:	b480      	push	{r7}
 801685e:	b08d      	sub	sp, #52	@ 0x34
 8016860:	af00      	add	r7, sp, #0
 8016862:	4603      	mov	r3, r0
 8016864:	603a      	str	r2, [r7, #0]
 8016866:	71fb      	strb	r3, [r7, #7]
 8016868:	460b      	mov	r3, r1
 801686a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 801686c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8016870:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8016872:	231e      	movs	r3, #30
 8016874:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8016876:	4b33      	ldr	r3, [pc, #204]	@ (8016944 <ComputeRQL+0xe8>)
 8016878:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 801687a:	4b33      	ldr	r3, [pc, #204]	@ (8016948 <ComputeRQL+0xec>)
 801687c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 801687e:	f641 139a 	movw	r3, #6554	@ 0x199a
 8016882:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8016884:	79fb      	ldrb	r3, [r7, #7]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d103      	bne.n	8016892 <ComputeRQL+0x36>
		returnvalue = 0;
 801688a:	2300      	movs	r3, #0
 801688c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016890:	e04f      	b.n	8016932 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8016892:	79bb      	ldrb	r3, [r7, #6]
 8016894:	2b07      	cmp	r3, #7
 8016896:	d103      	bne.n	80168a0 <ComputeRQL+0x44>
		returnvalue = 50;
 8016898:	2332      	movs	r3, #50	@ 0x32
 801689a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801689e:	e048      	b.n	8016932 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168a6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 80168aa:	429a      	cmp	r2, r3
 80168ac:	dd03      	ble.n	80168b6 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80168ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80168b0:	041b      	lsls	r3, r3, #16
 80168b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80168b4:	e007      	b.n	80168c6 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80168b6:	683b      	ldr	r3, [r7, #0]
 80168b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80168bc:	461a      	mov	r2, r3
 80168be:	697b      	ldr	r3, [r7, #20]
 80168c0:	fb02 f303 	mul.w	r3, r2, r3
 80168c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80168c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d020      	beq.n	801690e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80168d0:	461a      	mov	r2, r3
 80168d2:	69bb      	ldr	r3, [r7, #24]
 80168d4:	fb02 f303 	mul.w	r3, r2, r3
 80168d8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80168da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168dc:	085b      	lsrs	r3, r3, #1
 80168de:	693a      	ldr	r2, [r7, #16]
 80168e0:	4413      	add	r3, r2
 80168e2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80168e4:	693a      	ldr	r2, [r7, #16]
 80168e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80168ec:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80168ee:	693b      	ldr	r3, [r7, #16]
 80168f0:	041b      	lsls	r3, r3, #16
 80168f2:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80168f4:	693a      	ldr	r2, [r7, #16]
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d804      	bhi.n	8016906 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 80168fc:	69fa      	ldr	r2, [r7, #28]
 80168fe:	693b      	ldr	r3, [r7, #16]
 8016900:	1ad3      	subs	r3, r2, r3
 8016902:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016904:	e006      	b.n	8016914 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8016906:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 801690a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801690c:	e002      	b.n	8016914 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 801690e:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8016912:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8016914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016916:	0c1b      	lsrs	r3, r3, #16
 8016918:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 801691a:	7bfb      	ldrb	r3, [r7, #15]
 801691c:	2b32      	cmp	r3, #50	@ 0x32
 801691e:	d905      	bls.n	801692c <ComputeRQL+0xd0>
 8016920:	7bfb      	ldrb	r3, [r7, #15]
 8016922:	2b64      	cmp	r3, #100	@ 0x64
 8016924:	bf28      	it	cs
 8016926:	2364      	movcs	r3, #100	@ 0x64
 8016928:	b2db      	uxtb	r3, r3
 801692a:	e000      	b.n	801692e <ComputeRQL+0xd2>
 801692c:	2332      	movs	r3, #50	@ 0x32
 801692e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8016932:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8016936:	4618      	mov	r0, r3
 8016938:	3734      	adds	r7, #52	@ 0x34
 801693a:	46bd      	mov	sp, r7
 801693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016940:	4770      	bx	lr
 8016942:	bf00      	nop
 8016944:	0075b333 	.word	0x0075b333
 8016948:	0030cccd 	.word	0x0030cccd

0801694c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 801694c:	b480      	push	{r7}
 801694e:	b085      	sub	sp, #20
 8016950:	af00      	add	r7, sp, #0
 8016952:	4603      	mov	r3, r0
 8016954:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8016956:	79fb      	ldrb	r3, [r7, #7]
 8016958:	3b04      	subs	r3, #4
 801695a:	2b0f      	cmp	r3, #15
 801695c:	d83d      	bhi.n	80169da <ConvertStatusLite+0x8e>
 801695e:	a201      	add	r2, pc, #4	@ (adr r2, 8016964 <ConvertStatusLite+0x18>)
 8016960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016964:	080169b7 	.word	0x080169b7
 8016968:	080169b1 	.word	0x080169b1
 801696c:	080169bd 	.word	0x080169bd
 8016970:	080169c3 	.word	0x080169c3
 8016974:	080169cf 	.word	0x080169cf
 8016978:	080169d5 	.word	0x080169d5
 801697c:	080169db 	.word	0x080169db
 8016980:	080169db 	.word	0x080169db
 8016984:	080169c9 	.word	0x080169c9
 8016988:	080169db 	.word	0x080169db
 801698c:	080169db 	.word	0x080169db
 8016990:	080169db 	.word	0x080169db
 8016994:	080169db 	.word	0x080169db
 8016998:	080169db 	.word	0x080169db
 801699c:	080169a5 	.word	0x080169a5
 80169a0:	080169ab 	.word	0x080169ab
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80169a4:	230a      	movs	r3, #10
 80169a6:	73fb      	strb	r3, [r7, #15]
		break;
 80169a8:	e019      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80169aa:	2306      	movs	r3, #6
 80169ac:	73fb      	strb	r3, [r7, #15]
		break;
 80169ae:	e016      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80169b0:	2304      	movs	r3, #4
 80169b2:	73fb      	strb	r3, [r7, #15]
		break;
 80169b4:	e013      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80169b6:	2302      	movs	r3, #2
 80169b8:	73fb      	strb	r3, [r7, #15]
		break;
 80169ba:	e010      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80169bc:	2301      	movs	r3, #1
 80169be:	73fb      	strb	r3, [r7, #15]
		break;
 80169c0:	e00d      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80169c2:	2307      	movs	r3, #7
 80169c4:	73fb      	strb	r3, [r7, #15]
		break;
 80169c6:	e00a      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80169c8:	2309      	movs	r3, #9
 80169ca:	73fb      	strb	r3, [r7, #15]
		break;
 80169cc:	e007      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80169ce:	2303      	movs	r3, #3
 80169d0:	73fb      	strb	r3, [r7, #15]
		break;
 80169d2:	e004      	b.n	80169de <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80169d4:	2300      	movs	r3, #0
 80169d6:	73fb      	strb	r3, [r7, #15]
		break;
 80169d8:	e001      	b.n	80169de <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80169da:	23ff      	movs	r3, #255	@ 0xff
 80169dc:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80169de:	7bfb      	ldrb	r3, [r7, #15]
}
 80169e0:	4618      	mov	r0, r3
 80169e2:	3714      	adds	r7, #20
 80169e4:	46bd      	mov	sp, r7
 80169e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169ea:	4770      	bx	lr

080169ec <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b08c      	sub	sp, #48	@ 0x30
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	60f8      	str	r0, [r7, #12]
 80169f4:	607b      	str	r3, [r7, #4]
 80169f6:	460b      	mov	r3, r1
 80169f8:	72fb      	strb	r3, [r7, #11]
 80169fa:	4613      	mov	r3, r2
 80169fc:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80169fe:	2300      	movs	r3, #0
 8016a00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	685a      	ldr	r2, [r3, #4]
 8016a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a0a:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8016a12:	f003 031f 	and.w	r3, r3, #31
 8016a16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8016a1a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8016a1e:	7afb      	ldrb	r3, [r7, #11]
 8016a20:	687a      	ldr	r2, [r7, #4]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7ff ff1a 	bl	801685c <ComputeRQL>
 8016a28:	4603      	mov	r3, r0
 8016a2a:	461a      	mov	r2, r3
 8016a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a2e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016a34:	025b      	lsls	r3, r3, #9
 8016a36:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8016a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a3c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8016a42:	025b      	lsls	r3, r3, #9
 8016a44:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8016a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a4a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8016a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a52:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8016a58:	025b      	lsls	r3, r3, #9
 8016a5a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8016a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a5e:	6a3a      	ldr	r2, [r7, #32]
 8016a60:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8016a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a6a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8016a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a6e:	2200      	movs	r2, #0
 8016a70:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8016a72:	7abb      	ldrb	r3, [r7, #10]
 8016a74:	2b11      	cmp	r3, #17
 8016a76:	d009      	beq.n	8016a8c <SetSimpleData+0xa0>
 8016a78:	2b11      	cmp	r3, #17
 8016a7a:	dc0f      	bgt.n	8016a9c <SetSimpleData+0xb0>
 8016a7c:	2b03      	cmp	r3, #3
 8016a7e:	dc02      	bgt.n	8016a86 <SetSimpleData+0x9a>
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	dc03      	bgt.n	8016a8c <SetSimpleData+0xa0>
 8016a84:	e00a      	b.n	8016a9c <SetSimpleData+0xb0>
 8016a86:	2b0d      	cmp	r3, #13
 8016a88:	d004      	beq.n	8016a94 <SetSimpleData+0xa8>
 8016a8a:	e007      	b.n	8016a9c <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8016a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a8e:	2205      	movs	r2, #5
 8016a90:	76da      	strb	r2, [r3, #27]
		break;
 8016a92:	e006      	b.n	8016aa2 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8016a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a96:	220d      	movs	r2, #13
 8016a98:	76da      	strb	r2, [r3, #27]
		break;
 8016a9a:	e002      	b.n	8016aa2 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8016a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8016aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016aa4:	7edb      	ldrb	r3, [r3, #27]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d108      	bne.n	8016abc <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8016aaa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8016aae:	4618      	mov	r0, r3
 8016ab0:	f7ff ff4c 	bl	801694c <ConvertStatusLite>
 8016ab4:	4603      	mov	r3, r0
 8016ab6:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8016ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016aba:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8016ac0:	025b      	lsls	r3, r3, #9
 8016ac2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	6a3a      	ldr	r2, [r7, #32]
 8016ac8:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8016ad0:	025b      	lsls	r3, r3, #9
 8016ad2:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	6a3a      	ldr	r2, [r7, #32]
 8016ad8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8016adc:	f107 0314 	add.w	r3, r7, #20
 8016ae0:	461a      	mov	r2, r3
 8016ae2:	2100      	movs	r1, #0
 8016ae4:	68f8      	ldr	r0, [r7, #12]
 8016ae6:	f7ff fddf 	bl	80166a8 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8016aea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8016aee:	2b06      	cmp	r3, #6
 8016af0:	bf0c      	ite	eq
 8016af2:	2301      	moveq	r3, #1
 8016af4:	2300      	movne	r3, #0
 8016af6:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8016af8:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8016afa:	f107 0319 	add.w	r3, r7, #25
 8016afe:	461a      	mov	r2, r3
 8016b00:	2100      	movs	r1, #0
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	f7ff fd74 	bl	80165f0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8016b08:	7e7b      	ldrb	r3, [r7, #25]
 8016b0a:	2b01      	cmp	r3, #1
 8016b0c:	d104      	bne.n	8016b18 <SetSimpleData+0x12c>
 8016b0e:	7ffb      	ldrb	r3, [r7, #31]
 8016b10:	2b01      	cmp	r3, #1
 8016b12:	d101      	bne.n	8016b18 <SetSimpleData+0x12c>
 8016b14:	2301      	movs	r3, #1
 8016b16:	e000      	b.n	8016b1a <SetSimpleData+0x12e>
 8016b18:	2300      	movs	r3, #0
 8016b1a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	7fba      	ldrb	r2, [r7, #30]
 8016b20:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8016b24:	f107 0314 	add.w	r3, r7, #20
 8016b28:	461a      	mov	r2, r3
 8016b2a:	2101      	movs	r1, #1
 8016b2c:	68f8      	ldr	r0, [r7, #12]
 8016b2e:	f7ff fdbb 	bl	80166a8 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8016b32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8016b36:	2b04      	cmp	r3, #4
 8016b38:	bf0c      	ite	eq
 8016b3a:	2301      	moveq	r3, #1
 8016b3c:	2300      	movne	r3, #0
 8016b3e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8016b40:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8016b42:	f107 0319 	add.w	r3, r7, #25
 8016b46:	461a      	mov	r2, r3
 8016b48:	2101      	movs	r1, #1
 8016b4a:	68f8      	ldr	r0, [r7, #12]
 8016b4c:	f7ff fd50 	bl	80165f0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8016b50:	7e7b      	ldrb	r3, [r7, #25]
 8016b52:	2b01      	cmp	r3, #1
 8016b54:	d104      	bne.n	8016b60 <SetSimpleData+0x174>
 8016b56:	7f7b      	ldrb	r3, [r7, #29]
 8016b58:	2b01      	cmp	r3, #1
 8016b5a:	d101      	bne.n	8016b60 <SetSimpleData+0x174>
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	e000      	b.n	8016b62 <SetSimpleData+0x176>
 8016b60:	2300      	movs	r3, #0
 8016b62:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	7fba      	ldrb	r2, [r7, #30]
 8016b68:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8016b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b6e:	8b1b      	ldrh	r3, [r3, #24]
 8016b70:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8016b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b74:	7edb      	ldrb	r3, [r3, #27]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d110      	bne.n	8016b9c <SetSimpleData+0x1b0>
 8016b7a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	da0c      	bge.n	8016b9c <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8016b82:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8016b86:	4b08      	ldr	r3, [pc, #32]	@ (8016ba8 <SetSimpleData+0x1bc>)
 8016b88:	685b      	ldr	r3, [r3, #4]
 8016b8a:	429a      	cmp	r2, r3
 8016b8c:	da03      	bge.n	8016b96 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8016b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b90:	220e      	movs	r2, #14
 8016b92:	76da      	strb	r2, [r3, #27]
 8016b94:	e002      	b.n	8016b9c <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8016b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016b98:	2200      	movs	r2, #0
 8016b9a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8016b9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3730      	adds	r7, #48	@ 0x30
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}
 8016ba8:	20000170 	.word	0x20000170

08016bac <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b0a8      	sub	sp, #160	@ 0xa0
 8016bb0:	af02      	add	r7, sp, #8
 8016bb2:	6078      	str	r0, [r7, #4]
 8016bb4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8016bb6:	2300      	movs	r3, #0
 8016bb8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8016bbc:	f107 0308 	add.w	r3, r7, #8
 8016bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8016bc4:	221c      	movs	r2, #28
 8016bc6:	21ff      	movs	r1, #255	@ 0xff
 8016bc8:	6838      	ldr	r0, [r7, #0]
 8016bca:	f004 fa33 	bl	801b034 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8016bce:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8016bd2:	2102      	movs	r1, #2
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f001 f8ad 	bl	8017d34 <VL53L1_get_device_results>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8016be0:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d117      	bne.n	8016c18 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8016be8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016bec:	789a      	ldrb	r2, [r3, #2]
 8016bee:	683b      	ldr	r3, [r7, #0]
 8016bf0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8016bf2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016bf6:	3304      	adds	r3, #4
 8016bf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8016bfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8016c00:	78da      	ldrb	r2, [r3, #3]
 8016c02:	683b      	ldr	r3, [r7, #0]
 8016c04:	9300      	str	r3, [sp, #0]
 8016c06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8016c0a:	2101      	movs	r1, #1
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	f7ff feed 	bl	80169ec <SetSimpleData>
 8016c12:	4603      	mov	r3, r0
 8016c14:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8016c18:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	3798      	adds	r7, #152	@ 0x98
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bd80      	pop	{r7, pc}

08016c24 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8016c24:	b5b0      	push	{r4, r5, r7, lr}
 8016c26:	b088      	sub	sp, #32
 8016c28:	af04      	add	r7, sp, #16
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	460b      	mov	r3, r1
 8016c2e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8016c30:	2300      	movs	r3, #0
 8016c32:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8016c38:	2162      	movs	r1, #98	@ 0x62
 8016c3a:	6878      	ldr	r0, [r7, #4]
 8016c3c:	f001 fee9 	bl	8018a12 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	2200      	movs	r2, #0
 8016c44:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8016c46:	68bb      	ldr	r3, [r7, #8]
 8016c48:	2201      	movs	r2, #1
 8016c4a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	2200      	movs	r2, #0
 8016c50:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8016c52:	68bb      	ldr	r3, [r7, #8]
 8016c54:	2201      	movs	r2, #1
 8016c56:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8016c58:	68bb      	ldr	r3, [r7, #8]
 8016c5a:	2201      	movs	r2, #1
 8016c5c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8016c5e:	68bb      	ldr	r3, [r7, #8]
 8016c60:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016c64:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8016c6c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8016c74:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8016c76:	68bb      	ldr	r3, [r7, #8]
 8016c78:	2264      	movs	r2, #100	@ 0x64
 8016c7a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8016c82:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	2200      	movs	r2, #0
 8016c88:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8016c8c:	68bb      	ldr	r3, [r7, #8]
 8016c8e:	f240 72db 	movw	r2, #2011	@ 0x7db
 8016c92:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8016c96:	6878      	ldr	r0, [r7, #4]
 8016c98:	f001 fea0 	bl	80189dc <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8016c9c:	78fb      	ldrb	r3, [r7, #3]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d008      	beq.n	8016cb4 <VL53L1_data_init+0x90>
 8016ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d104      	bne.n	8016cb4 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8016caa:	6878      	ldr	r0, [r7, #4]
 8016cac:	f000 f857 	bl	8016d5e <VL53L1_read_p2p_data>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8016cb4:	68bb      	ldr	r3, [r7, #8]
 8016cb6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f001 f9d2 	bl	8018064 <VL53L1_init_refspadchar_config_struct>
 8016cc0:	4603      	mov	r3, r0
 8016cc2:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8016cc4:	68bb      	ldr	r3, [r7, #8]
 8016cc6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f001 f9ee 	bl	80180ac <VL53L1_init_ssc_config_struct>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8016cd4:	68bb      	ldr	r3, [r7, #8]
 8016cd6:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8016cda:	68bb      	ldr	r3, [r7, #8]
 8016cdc:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8016ce0:	4619      	mov	r1, r3
 8016ce2:	4610      	mov	r0, r2
 8016ce4:	f001 fa03 	bl	80180ee <VL53L1_init_xtalk_config_struct>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f001 fa5d 	bl	80181b2 <VL53L1_init_offset_cal_config_struct>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	33a4      	adds	r3, #164	@ 0xa4
 8016d00:	4618      	mov	r0, r3
 8016d02:	f001 fa7d 	bl	8018200 <VL53L1_init_tuning_parm_storage_struct>
 8016d06:	4603      	mov	r3, r0
 8016d08:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8016d0a:	2120      	movs	r1, #32
 8016d0c:	6878      	ldr	r0, [r7, #4]
 8016d0e:	f000 fc99 	bl	8017644 <VL53L1_set_vhv_loopbound>
 8016d12:	4603      	mov	r3, r0
 8016d14:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8016d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d116      	bne.n	8016d4c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8016d1e:	68bb      	ldr	r3, [r7, #8]
 8016d20:	7858      	ldrb	r0, [r3, #1]
 8016d22:	68bb      	ldr	r3, [r7, #8]
 8016d24:	8b1c      	ldrh	r4, [r3, #24]
 8016d26:	68bb      	ldr	r3, [r7, #8]
 8016d28:	689d      	ldr	r5, [r3, #8]
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	68db      	ldr	r3, [r3, #12]
 8016d2e:	68ba      	ldr	r2, [r7, #8]
 8016d30:	6912      	ldr	r2, [r2, #16]
 8016d32:	68b9      	ldr	r1, [r7, #8]
 8016d34:	6949      	ldr	r1, [r1, #20]
 8016d36:	9102      	str	r1, [sp, #8]
 8016d38:	9201      	str	r2, [sp, #4]
 8016d3a:	9300      	str	r3, [sp, #0]
 8016d3c:	462b      	mov	r3, r5
 8016d3e:	4622      	mov	r2, r4
 8016d40:	4601      	mov	r1, r0
 8016d42:	6878      	ldr	r0, [r7, #4]
 8016d44:	f000 fab0 	bl	80172a8 <VL53L1_set_preset_mode>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f002 fbaf 	bl	80194b0 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8016d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3710      	adds	r7, #16
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bdb0      	pop	{r4, r5, r7, pc}

08016d5e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8016d5e:	b580      	push	{r7, lr}
 8016d60:	b084      	sub	sp, #16
 8016d62:	af00      	add	r7, sp, #0
 8016d64:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8016d66:	2300      	movs	r3, #0
 8016d68:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 8016d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d108      	bne.n	8016d88 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8016d76:	68bb      	ldr	r3, [r7, #8]
 8016d78:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8016d7c:	4619      	mov	r1, r3
 8016d7e:	6878      	ldr	r0, [r7, #4]
 8016d80:	f002 fdeb 	bl	801995a <VL53L1_get_static_nvm_managed>
 8016d84:	4603      	mov	r3, r0
 8016d86:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8016d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d107      	bne.n	8016da0 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	3342      	adds	r3, #66	@ 0x42
 8016d94:	4619      	mov	r1, r3
 8016d96:	6878      	ldr	r0, [r7, #4]
 8016d98:	f002 ff1d 	bl	8019bd6 <VL53L1_get_customer_nvm_managed>
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8016da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d115      	bne.n	8016dd4 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 8016dae:	4619      	mov	r1, r3
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f003 fdf6 	bl	801a9a2 <VL53L1_get_nvm_copy_data>
 8016db6:	4603      	mov	r3, r0
 8016db8:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 8016dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d108      	bne.n	8016dd4 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8016dc2:	68bb      	ldr	r3, [r7, #8]
 8016dc4:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8016dc8:	68bb      	ldr	r3, [r7, #8]
 8016dca:	33f0      	adds	r3, #240	@ 0xf0
 8016dcc:	4619      	mov	r1, r3
 8016dce:	4610      	mov	r0, r2
 8016dd0:	f001 ff81 	bl	8018cd6 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8016dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d109      	bne.n	8016df0 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8016ddc:	68bb      	ldr	r3, [r7, #8]
 8016dde:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 8016de2:	461a      	mov	r2, r3
 8016de4:	21de      	movs	r1, #222	@ 0xde
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f7f6 fbd4 	bl	800d594 <VL53L1_RdWord>
 8016dec:	4603      	mov	r3, r0
 8016dee:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8016df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016dfa:	d204      	bcs.n	8016e06 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8016dfc:	68bb      	ldr	r3, [r7, #8]
 8016dfe:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 8016e02:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8016e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	d107      	bne.n	8016e1e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8016e0e:	68bb      	ldr	r3, [r7, #8]
 8016e10:	339e      	adds	r3, #158	@ 0x9e
 8016e12:	4619      	mov	r1, r3
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f000 f968 	bl	80170ea <VL53L1_get_mode_mitigation_roi>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8016e1e:	68bb      	ldr	r3, [r7, #8]
 8016e20:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d114      	bne.n	8016e52 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8016e28:	68bb      	ldr	r3, [r7, #8]
 8016e2a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d10f      	bne.n	8016e52 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8016e32:	68bb      	ldr	r3, [r7, #8]
 8016e34:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8016e38:	011b      	lsls	r3, r3, #4
 8016e3a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8016e42:	68bb      	ldr	r3, [r7, #8]
 8016e44:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8016e48:	011b      	lsls	r3, r3, #4
 8016e4a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8016e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016e56:	4618      	mov	r0, r3
 8016e58:	3710      	adds	r7, #16
 8016e5a:	46bd      	mov	sp, r7
 8016e5c:	bd80      	pop	{r7, pc}

08016e5e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8016e5e:	b480      	push	{r7}
 8016e60:	b085      	sub	sp, #20
 8016e62:	af00      	add	r7, sp, #0
 8016e64:	6078      	str	r0, [r7, #4]
 8016e66:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d101      	bne.n	8016e7e <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8016e7a:	23f1      	movs	r3, #241	@ 0xf1
 8016e7c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8016e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d10c      	bne.n	8016ea0 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8016e86:	68bb      	ldr	r3, [r7, #8]
 8016e88:	683a      	ldr	r2, [r7, #0]
 8016e8a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8016e92:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8016e94:	683b      	ldr	r3, [r7, #0]
 8016e96:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8016e9a:	68bb      	ldr	r3, [r7, #8]
 8016e9c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8016ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	3714      	adds	r7, #20
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eae:	4770      	bx	lr

08016eb0 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b088      	sub	sp, #32
 8016eb4:	af02      	add	r7, sp, #8
 8016eb6:	60f8      	str	r0, [r7, #12]
 8016eb8:	60b9      	str	r1, [r7, #8]
 8016eba:	607a      	str	r2, [r7, #4]
 8016ebc:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016ebe:	2300      	movs	r3, #0
 8016ec0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8016ec2:	68fb      	ldr	r3, [r7, #12]
 8016ec4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d101      	bne.n	8016ed4 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8016ed0:	23f1      	movs	r3, #241	@ 0xf1
 8016ed2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8016ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d11b      	bne.n	8016f14 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8016edc:	693b      	ldr	r3, [r7, #16]
 8016ede:	68ba      	ldr	r2, [r7, #8]
 8016ee0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8016ee2:	693b      	ldr	r3, [r7, #16]
 8016ee4:	687a      	ldr	r2, [r7, #4]
 8016ee6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8016ee8:	693b      	ldr	r3, [r7, #16]
 8016eea:	683a      	ldr	r2, [r7, #0]
 8016eec:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8016eee:	693b      	ldr	r3, [r7, #16]
 8016ef0:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 8016ef4:	693b      	ldr	r3, [r7, #16]
 8016ef6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8016efa:	693a      	ldr	r2, [r7, #16]
 8016efc:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 8016f00:	9201      	str	r2, [sp, #4]
 8016f02:	9300      	str	r3, [sp, #0]
 8016f04:	460b      	mov	r3, r1
 8016f06:	683a      	ldr	r2, [r7, #0]
 8016f08:	6879      	ldr	r1, [r7, #4]
 8016f0a:	68b8      	ldr	r0, [r7, #8]
 8016f0c:	f002 fa02 	bl	8019314 <VL53L1_calc_timeout_register_values>
 8016f10:	4603      	mov	r3, r0
 8016f12:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8016f14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f18:	4618      	mov	r0, r3
 8016f1a:	3718      	adds	r7, #24
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	bd80      	pop	{r7, pc}

08016f20 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b088      	sub	sp, #32
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	60f8      	str	r0, [r7, #12]
 8016f28:	60b9      	str	r1, [r7, #8]
 8016f2a:	607a      	str	r2, [r7, #4]
 8016f2c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016f2e:	2300      	movs	r3, #0
 8016f30:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8016f36:	2300      	movs	r3, #0
 8016f38:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8016f3e:	69bb      	ldr	r3, [r7, #24]
 8016f40:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d101      	bne.n	8016f4c <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8016f48:	23f1      	movs	r3, #241	@ 0xf1
 8016f4a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8016f4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d148      	bne.n	8016fe6 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8016f54:	69bb      	ldr	r3, [r7, #24]
 8016f56:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8016f5a:	69bb      	ldr	r3, [r7, #24]
 8016f5c:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8016f60:	4619      	mov	r1, r3
 8016f62:	4610      	mov	r0, r2
 8016f64:	f002 f87d 	bl	8019062 <VL53L1_calc_macro_period_us>
 8016f68:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8016f6a:	69bb      	ldr	r3, [r7, #24]
 8016f6c:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8016f70:	6979      	ldr	r1, [r7, #20]
 8016f72:	4618      	mov	r0, r3
 8016f74:	f002 f935 	bl	80191e2 <VL53L1_calc_timeout_us>
 8016f78:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8016f7e:	69bb      	ldr	r3, [r7, #24]
 8016f80:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8016f84:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8016f86:	8a7b      	ldrh	r3, [r7, #18]
 8016f88:	021b      	lsls	r3, r3, #8
 8016f8a:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8016f8c:	69ba      	ldr	r2, [r7, #24]
 8016f8e:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8016f92:	4413      	add	r3, r2
 8016f94:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8016f96:	8a7b      	ldrh	r3, [r7, #18]
 8016f98:	6979      	ldr	r1, [r7, #20]
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f002 f961 	bl	8019262 <VL53L1_calc_decoded_timeout_us>
 8016fa0:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8016fa6:	69bb      	ldr	r3, [r7, #24]
 8016fa8:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 8016fac:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8016fae:	8a7b      	ldrh	r3, [r7, #18]
 8016fb0:	021b      	lsls	r3, r3, #8
 8016fb2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8016fb4:	69ba      	ldr	r2, [r7, #24]
 8016fb6:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 8016fba:	4413      	add	r3, r2
 8016fbc:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8016fbe:	8a7b      	ldrh	r3, [r7, #18]
 8016fc0:	6979      	ldr	r1, [r7, #20]
 8016fc2:	4618      	mov	r0, r3
 8016fc4:	f002 f94d 	bl	8019262 <VL53L1_calc_decoded_timeout_us>
 8016fc8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8016fce:	68bb      	ldr	r3, [r7, #8]
 8016fd0:	681a      	ldr	r2, [r3, #0]
 8016fd2:	69bb      	ldr	r3, [r7, #24]
 8016fd4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681a      	ldr	r2, [r3, #0]
 8016fda:	69bb      	ldr	r3, [r7, #24]
 8016fdc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	69bb      	ldr	r3, [r7, #24]
 8016fe4:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8016fe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016fea:	4618      	mov	r0, r3
 8016fec:	3720      	adds	r7, #32
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	bd80      	pop	{r7, pc}

08016ff2 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8016ff2:	b480      	push	{r7}
 8016ff4:	b087      	sub	sp, #28
 8016ff6:	af00      	add	r7, sp, #0
 8016ff8:	60f8      	str	r0, [r7, #12]
 8016ffa:	460b      	mov	r3, r1
 8016ffc:	607a      	str	r2, [r7, #4]
 8016ffe:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017000:	2300      	movs	r3, #0
 8017002:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8017008:	2301      	movs	r3, #1
 801700a:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 801700c:	7afb      	ldrb	r3, [r7, #11]
 801700e:	2b07      	cmp	r3, #7
 8017010:	d81c      	bhi.n	801704c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8017012:	7afb      	ldrb	r3, [r7, #11]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d004      	beq.n	8017022 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8017018:	7afb      	ldrb	r3, [r7, #11]
 801701a:	2201      	movs	r2, #1
 801701c:	fa02 f303 	lsl.w	r3, r2, r3
 8017020:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8017022:	693b      	ldr	r3, [r7, #16]
 8017024:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8017028:	7dbb      	ldrb	r3, [r7, #22]
 801702a:	4013      	ands	r3, r2
 801702c:	b2da      	uxtb	r2, r3
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8017032:	7afb      	ldrb	r3, [r7, #11]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d00b      	beq.n	8017050 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	781b      	ldrb	r3, [r3, #0]
 801703c:	461a      	mov	r2, r3
 801703e:	7afb      	ldrb	r3, [r7, #11]
 8017040:	fa42 f303 	asr.w	r3, r2, r3
 8017044:	b2da      	uxtb	r2, r3
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	701a      	strb	r2, [r3, #0]
 801704a:	e001      	b.n	8017050 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 801704c:	23fc      	movs	r3, #252	@ 0xfc
 801704e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8017050:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017054:	4618      	mov	r0, r3
 8017056:	371c      	adds	r7, #28
 8017058:	46bd      	mov	sp, r7
 801705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705e:	4770      	bx	lr

08017060 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b084      	sub	sp, #16
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
 8017068:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801706a:	2300      	movs	r3, #0
 801706c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	7858      	ldrb	r0, [r3, #1]
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	7819      	ldrb	r1, [r3, #0]
 801707a:	68bb      	ldr	r3, [r7, #8]
 801707c:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 8017080:	461a      	mov	r2, r3
 8017082:	f002 f9c0 	bl	8019406 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	7898      	ldrb	r0, [r3, #2]
 801708a:	683b      	ldr	r3, [r7, #0]
 801708c:	78d9      	ldrb	r1, [r3, #3]
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8017094:	461a      	mov	r2, r3
 8017096:	f002 f9f5 	bl	8019484 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 801709a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801709e:	4618      	mov	r0, r3
 80170a0:	3710      	adds	r7, #16
 80170a2:	46bd      	mov	sp, r7
 80170a4:	bd80      	pop	{r7, pc}

080170a6 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 80170a6:	b580      	push	{r7, lr}
 80170a8:	b084      	sub	sp, #16
 80170aa:	af00      	add	r7, sp, #0
 80170ac:	6078      	str	r0, [r7, #4]
 80170ae:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80170b0:	2300      	movs	r3, #0
 80170b2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 80170b8:	68bb      	ldr	r3, [r7, #8]
 80170ba:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	3301      	adds	r3, #1
 80170c2:	683a      	ldr	r2, [r7, #0]
 80170c4:	4619      	mov	r1, r3
 80170c6:	f002 fb64 	bl	8019792 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 80170d0:	683b      	ldr	r3, [r7, #0]
 80170d2:	1c99      	adds	r1, r3, #2
 80170d4:	683b      	ldr	r3, [r7, #0]
 80170d6:	3303      	adds	r3, #3
 80170d8:	461a      	mov	r2, r3
 80170da:	f002 f9bb 	bl	8019454 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 80170de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80170e2:	4618      	mov	r0, r3
 80170e4:	3710      	adds	r7, #16
 80170e6:	46bd      	mov	sp, r7
 80170e8:	bd80      	pop	{r7, pc}

080170ea <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 80170ea:	b580      	push	{r7, lr}
 80170ec:	b086      	sub	sp, #24
 80170ee:	af00      	add	r7, sp, #0
 80170f0:	6078      	str	r0, [r7, #4]
 80170f2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80170f4:	2300      	movs	r3, #0
 80170f6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 80170fc:	2300      	movs	r3, #0
 80170fe:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8017100:	2300      	movs	r3, #0
 8017102:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8017104:	2300      	movs	r3, #0
 8017106:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8017108:	693b      	ldr	r3, [r7, #16]
 801710a:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 801710e:	f107 020e 	add.w	r2, r7, #14
 8017112:	f107 010d 	add.w	r1, r7, #13
 8017116:	4618      	mov	r0, r3
 8017118:	f002 fb3b 	bl	8019792 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 801711c:	7bba      	ldrb	r2, [r7, #14]
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8017122:	7b7a      	ldrb	r2, [r7, #13]
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8017128:	693b      	ldr	r3, [r7, #16]
 801712a:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 801712e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8017130:	7bfb      	ldrb	r3, [r7, #15]
 8017132:	091b      	lsrs	r3, r3, #4
 8017134:	b2da      	uxtb	r2, r3
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 801713a:	7bfb      	ldrb	r3, [r7, #15]
 801713c:	f003 030f 	and.w	r3, r3, #15
 8017140:	b2da      	uxtb	r2, r3
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8017146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801714a:	4618      	mov	r0, r3
 801714c:	3718      	adds	r7, #24
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}
	...

08017154 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8017154:	b480      	push	{r7}
 8017156:	b087      	sub	sp, #28
 8017158:	af00      	add	r7, sp, #0
 801715a:	60f8      	str	r0, [r7, #12]
 801715c:	607a      	str	r2, [r7, #4]
 801715e:	603b      	str	r3, [r7, #0]
 8017160:	460b      	mov	r3, r1
 8017162:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017164:	2300      	movs	r3, #0
 8017166:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 801716c:	7afb      	ldrb	r3, [r7, #11]
 801716e:	3b01      	subs	r3, #1
 8017170:	2b25      	cmp	r3, #37	@ 0x25
 8017172:	f200 808e 	bhi.w	8017292 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8017176:	a201      	add	r2, pc, #4	@ (adr r2, 801717c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8017178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801717c:	08017215 	.word	0x08017215
 8017180:	08017215 	.word	0x08017215
 8017184:	08017215 	.word	0x08017215
 8017188:	08017215 	.word	0x08017215
 801718c:	08017215 	.word	0x08017215
 8017190:	0801723f 	.word	0x0801723f
 8017194:	0801723f 	.word	0x0801723f
 8017198:	0801723f 	.word	0x0801723f
 801719c:	08017293 	.word	0x08017293
 80171a0:	08017293 	.word	0x08017293
 80171a4:	08017293 	.word	0x08017293
 80171a8:	08017293 	.word	0x08017293
 80171ac:	08017293 	.word	0x08017293
 80171b0:	08017293 	.word	0x08017293
 80171b4:	08017293 	.word	0x08017293
 80171b8:	08017293 	.word	0x08017293
 80171bc:	08017215 	.word	0x08017215
 80171c0:	0801723f 	.word	0x0801723f
 80171c4:	08017293 	.word	0x08017293
 80171c8:	08017293 	.word	0x08017293
 80171cc:	08017293 	.word	0x08017293
 80171d0:	08017293 	.word	0x08017293
 80171d4:	08017293 	.word	0x08017293
 80171d8:	08017293 	.word	0x08017293
 80171dc:	08017293 	.word	0x08017293
 80171e0:	08017293 	.word	0x08017293
 80171e4:	08017293 	.word	0x08017293
 80171e8:	08017293 	.word	0x08017293
 80171ec:	08017293 	.word	0x08017293
 80171f0:	08017293 	.word	0x08017293
 80171f4:	08017293 	.word	0x08017293
 80171f8:	08017293 	.word	0x08017293
 80171fc:	08017293 	.word	0x08017293
 8017200:	08017293 	.word	0x08017293
 8017204:	08017293 	.word	0x08017293
 8017208:	08017269 	.word	0x08017269
 801720c:	08017269 	.word	0x08017269
 8017210:	08017269 	.word	0x08017269
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8017214:	693b      	ldr	r3, [r7, #16]
 8017216:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 801721e:	693b      	ldr	r3, [r7, #16]
 8017220:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8017224:	683b      	ldr	r3, [r7, #0]
 8017226:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8017228:	693b      	ldr	r3, [r7, #16]
 801722a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 801722e:	6a3b      	ldr	r3, [r7, #32]
 8017230:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8017232:	693b      	ldr	r3, [r7, #16]
 8017234:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8017238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801723a:	601a      	str	r2, [r3, #0]
	break;
 801723c:	e02c      	b.n	8017298 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 801723e:	693b      	ldr	r3, [r7, #16]
 8017240:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8017248:	693b      	ldr	r3, [r7, #16]
 801724a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8017252:	693b      	ldr	r3, [r7, #16]
 8017254:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8017258:	6a3b      	ldr	r3, [r7, #32]
 801725a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 801725c:	693b      	ldr	r3, [r7, #16]
 801725e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8017262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017264:	601a      	str	r2, [r3, #0]
	break;
 8017266:	e017      	b.n	8017298 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8017268:	693b      	ldr	r3, [r7, #16]
 801726a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8017272:	693b      	ldr	r3, [r7, #16]
 8017274:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8017282:	6a3b      	ldr	r3, [r7, #32]
 8017284:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8017286:	693b      	ldr	r3, [r7, #16]
 8017288:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 801728c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801728e:	601a      	str	r2, [r3, #0]
	break;
 8017290:	e002      	b.n	8017298 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8017292:	23fc      	movs	r3, #252	@ 0xfc
 8017294:	75fb      	strb	r3, [r7, #23]
		break;
 8017296:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8017298:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801729c:	4618      	mov	r0, r3
 801729e:	371c      	adds	r7, #28
 80172a0:	46bd      	mov	sp, r7
 80172a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a6:	4770      	bx	lr

080172a8 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b092      	sub	sp, #72	@ 0x48
 80172ac:	af04      	add	r7, sp, #16
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	607b      	str	r3, [r7, #4]
 80172b2:	460b      	mov	r3, r1
 80172b4:	72fb      	strb	r3, [r7, #11]
 80172b6:	4613      	mov	r3, r2
 80172b8:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80172ba:	2300      	movs	r3, #0
 80172bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 80172c0:	68fb      	ldr	r3, [r7, #12]
 80172c2:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80172c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80172ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80172cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ce:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80172d2:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80172d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172d6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80172da:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80172dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172de:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80172e2:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80172e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172e6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80172ea:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80172ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172ee:	33a4      	adds	r3, #164	@ 0xa4
 80172f0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80172f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172f4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80172f8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 80172fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fc:	7afa      	ldrb	r2, [r7, #11]
 80172fe:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8017300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017302:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017304:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8017306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017308:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801730a:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 801730c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801730e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017310:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8017312:	2103      	movs	r1, #3
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f001 fb7c 	bl	8018a12 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 801731a:	7afb      	ldrb	r3, [r7, #11]
 801731c:	3b01      	subs	r3, #1
 801731e:	2b25      	cmp	r3, #37	@ 0x25
 8017320:	f200 810c 	bhi.w	801753c <VL53L1_set_preset_mode+0x294>
 8017324:	a201      	add	r2, pc, #4	@ (adr r2, 801732c <VL53L1_set_preset_mode+0x84>)
 8017326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801732a:	bf00      	nop
 801732c:	080173c5 	.word	0x080173c5
 8017330:	080173e1 	.word	0x080173e1
 8017334:	080173fd 	.word	0x080173fd
 8017338:	08017419 	.word	0x08017419
 801733c:	08017435 	.word	0x08017435
 8017340:	08017451 	.word	0x08017451
 8017344:	0801746d 	.word	0x0801746d
 8017348:	08017489 	.word	0x08017489
 801734c:	0801753d 	.word	0x0801753d
 8017350:	0801753d 	.word	0x0801753d
 8017354:	0801753d 	.word	0x0801753d
 8017358:	0801753d 	.word	0x0801753d
 801735c:	0801753d 	.word	0x0801753d
 8017360:	0801753d 	.word	0x0801753d
 8017364:	0801753d 	.word	0x0801753d
 8017368:	0801753d 	.word	0x0801753d
 801736c:	080174a5 	.word	0x080174a5
 8017370:	080174c1 	.word	0x080174c1
 8017374:	0801753d 	.word	0x0801753d
 8017378:	0801753d 	.word	0x0801753d
 801737c:	0801753d 	.word	0x0801753d
 8017380:	0801753d 	.word	0x0801753d
 8017384:	0801753d 	.word	0x0801753d
 8017388:	0801753d 	.word	0x0801753d
 801738c:	0801753d 	.word	0x0801753d
 8017390:	0801753d 	.word	0x0801753d
 8017394:	0801753d 	.word	0x0801753d
 8017398:	0801753d 	.word	0x0801753d
 801739c:	0801753d 	.word	0x0801753d
 80173a0:	0801753d 	.word	0x0801753d
 80173a4:	0801753d 	.word	0x0801753d
 80173a8:	0801753d 	.word	0x0801753d
 80173ac:	0801753d 	.word	0x0801753d
 80173b0:	0801753d 	.word	0x0801753d
 80173b4:	0801753d 	.word	0x0801753d
 80173b8:	080174dd 	.word	0x080174dd
 80173bc:	080174fd 	.word	0x080174fd
 80173c0:	0801751d 	.word	0x0801751d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 80173c4:	69bb      	ldr	r3, [r7, #24]
 80173c6:	9301      	str	r3, [sp, #4]
 80173c8:	69fb      	ldr	r3, [r7, #28]
 80173ca:	9300      	str	r3, [sp, #0]
 80173cc:	6a3b      	ldr	r3, [r7, #32]
 80173ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80173d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80173d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173d4:	f000 ffa0 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 80173d8:	4603      	mov	r3, r0
 80173da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80173de:	e0b1      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80173e0:	69bb      	ldr	r3, [r7, #24]
 80173e2:	9301      	str	r3, [sp, #4]
 80173e4:	69fb      	ldr	r3, [r7, #28]
 80173e6:	9300      	str	r3, [sp, #0]
 80173e8:	6a3b      	ldr	r3, [r7, #32]
 80173ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80173ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80173ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80173f0:	f001 f8b0 	bl	8018554 <VL53L1_preset_mode_standard_ranging_short_range>
 80173f4:	4603      	mov	r3, r0
 80173f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80173fa:	e0a3      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80173fc:	69bb      	ldr	r3, [r7, #24]
 80173fe:	9301      	str	r3, [sp, #4]
 8017400:	69fb      	ldr	r3, [r7, #28]
 8017402:	9300      	str	r3, [sp, #0]
 8017404:	6a3b      	ldr	r3, [r7, #32]
 8017406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017408:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801740a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801740c:	f001 f8e3 	bl	80185d6 <VL53L1_preset_mode_standard_ranging_long_range>
 8017410:	4603      	mov	r3, r0
 8017412:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8017416:	e095      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8017418:	69bb      	ldr	r3, [r7, #24]
 801741a:	9301      	str	r3, [sp, #4]
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	9300      	str	r3, [sp, #0]
 8017420:	6a3b      	ldr	r3, [r7, #32]
 8017422:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017424:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017426:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017428:	f001 f916 	bl	8018658 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 801742c:	4603      	mov	r3, r0
 801742e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8017432:	e087      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8017434:	69bb      	ldr	r3, [r7, #24]
 8017436:	9301      	str	r3, [sp, #4]
 8017438:	69fb      	ldr	r3, [r7, #28]
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	6a3b      	ldr	r3, [r7, #32]
 801743e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017440:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017442:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017444:	f001 f92d 	bl	80186a2 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8017448:	4603      	mov	r3, r0
 801744a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801744e:	e079      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8017450:	69bb      	ldr	r3, [r7, #24]
 8017452:	9301      	str	r3, [sp, #4]
 8017454:	69fb      	ldr	r3, [r7, #28]
 8017456:	9300      	str	r3, [sp, #0]
 8017458:	6a3b      	ldr	r3, [r7, #32]
 801745a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801745c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801745e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017460:	f001 f944 	bl	80186ec <VL53L1_preset_mode_timed_ranging>
 8017464:	4603      	mov	r3, r0
 8017466:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801746a:	e06b      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	9301      	str	r3, [sp, #4]
 8017470:	69fb      	ldr	r3, [r7, #28]
 8017472:	9300      	str	r3, [sp, #0]
 8017474:	6a3b      	ldr	r3, [r7, #32]
 8017476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801747a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801747c:	f001 f970 	bl	8018760 <VL53L1_preset_mode_timed_ranging_short_range>
 8017480:	4603      	mov	r3, r0
 8017482:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8017486:	e05d      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8017488:	69bb      	ldr	r3, [r7, #24]
 801748a:	9301      	str	r3, [sp, #4]
 801748c:	69fb      	ldr	r3, [r7, #28]
 801748e:	9300      	str	r3, [sp, #0]
 8017490:	6a3b      	ldr	r3, [r7, #32]
 8017492:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017496:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017498:	f001 f99c 	bl	80187d4 <VL53L1_preset_mode_timed_ranging_long_range>
 801749c:	4603      	mov	r3, r0
 801749e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80174a2:	e04f      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 80174a4:	69bb      	ldr	r3, [r7, #24]
 80174a6:	9301      	str	r3, [sp, #4]
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	9300      	str	r3, [sp, #0]
 80174ac:	6a3b      	ldr	r3, [r7, #32]
 80174ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80174b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80174b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80174b4:	f001 fa70 	bl	8018998 <VL53L1_preset_mode_olt>
 80174b8:	4603      	mov	r3, r0
 80174ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80174be:	e041      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 80174c0:	69bb      	ldr	r3, [r7, #24]
 80174c2:	9301      	str	r3, [sp, #4]
 80174c4:	69fb      	ldr	r3, [r7, #28]
 80174c6:	9300      	str	r3, [sp, #0]
 80174c8:	6a3b      	ldr	r3, [r7, #32]
 80174ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80174cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80174ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80174d0:	f001 fa2c 	bl	801892c <VL53L1_preset_mode_singleshot_ranging>
 80174d4:	4603      	mov	r3, r0
 80174d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80174da:	e033      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 80174dc:	697b      	ldr	r3, [r7, #20]
 80174de:	9302      	str	r3, [sp, #8]
 80174e0:	69bb      	ldr	r3, [r7, #24]
 80174e2:	9301      	str	r3, [sp, #4]
 80174e4:	69fb      	ldr	r3, [r7, #28]
 80174e6:	9300      	str	r3, [sp, #0]
 80174e8:	6a3b      	ldr	r3, [r7, #32]
 80174ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80174ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80174ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80174f0:	f001 f9d0 	bl	8018894 <VL53L1_preset_mode_low_power_auto_short_ranging>
 80174f4:	4603      	mov	r3, r0
 80174f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80174fa:	e023      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80174fc:	697b      	ldr	r3, [r7, #20]
 80174fe:	9302      	str	r3, [sp, #8]
 8017500:	69bb      	ldr	r3, [r7, #24]
 8017502:	9301      	str	r3, [sp, #4]
 8017504:	69fb      	ldr	r3, [r7, #28]
 8017506:	9300      	str	r3, [sp, #0]
 8017508:	6a3b      	ldr	r3, [r7, #32]
 801750a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801750c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801750e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017510:	f001 f99a 	bl	8018848 <VL53L1_preset_mode_low_power_auto_ranging>
 8017514:	4603      	mov	r3, r0
 8017516:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 801751a:	e013      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 801751c:	697b      	ldr	r3, [r7, #20]
 801751e:	9302      	str	r3, [sp, #8]
 8017520:	69bb      	ldr	r3, [r7, #24]
 8017522:	9301      	str	r3, [sp, #4]
 8017524:	69fb      	ldr	r3, [r7, #28]
 8017526:	9300      	str	r3, [sp, #0]
 8017528:	6a3b      	ldr	r3, [r7, #32]
 801752a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801752c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801752e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017530:	f001 f9d6 	bl	80188e0 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8017534:	4603      	mov	r3, r0
 8017536:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 801753a:	e003      	b.n	8017544 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 801753c:	23fc      	movs	r3, #252	@ 0xfc
 801753e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8017542:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8017544:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8017548:	2b00      	cmp	r3, #0
 801754a:	d105      	bne.n	8017558 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 801754c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801754e:	893a      	ldrh	r2, [r7, #8]
 8017550:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8017552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017554:	893a      	ldrh	r2, [r7, #8]
 8017556:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8017558:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801755c:	2b00      	cmp	r3, #0
 801755e:	d108      	bne.n	8017572 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8017560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017564:	6879      	ldr	r1, [r7, #4]
 8017566:	68f8      	ldr	r0, [r7, #12]
 8017568:	f7ff fca2 	bl	8016eb0 <VL53L1_set_timeouts_us>
 801756c:	4603      	mov	r3, r0
 801756e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8017572:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8017576:	2b00      	cmp	r3, #0
 8017578:	d106      	bne.n	8017588 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 801757a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801757c:	68f8      	ldr	r0, [r7, #12]
 801757e:	f7ff fc6e 	bl	8016e5e <VL53L1_set_inter_measurement_period_ms>
 8017582:	4603      	mov	r3, r0
 8017584:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8017588:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801758c:	4618      	mov	r0, r3
 801758e:	3738      	adds	r7, #56	@ 0x38
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8017594:	b480      	push	{r7}
 8017596:	b085      	sub	sp, #20
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
 801759c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801759e:	2300      	movs	r3, #0
 80175a0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 80175ac:	683b      	ldr	r3, [r7, #0]
 80175ae:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80175b0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3714      	adds	r7, #20
 80175b8:	46bd      	mov	sp, r7
 80175ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175be:	4770      	bx	lr

080175c0 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 80175c0:	b480      	push	{r7}
 80175c2:	b085      	sub	sp, #20
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
 80175c8:	460b      	mov	r3, r1
 80175ca:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80175cc:	2300      	movs	r3, #0
 80175ce:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 80175d4:	68bb      	ldr	r3, [r7, #8]
 80175d6:	887a      	ldrh	r2, [r7, #2]
 80175d8:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 80175dc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3714      	adds	r7, #20
 80175e4:	46bd      	mov	sp, r7
 80175e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ea:	4770      	bx	lr

080175ec <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80175ec:	b480      	push	{r7}
 80175ee:	b085      	sub	sp, #20
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	6078      	str	r0, [r7, #4]
 80175f4:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80175f6:	2300      	movs	r3, #0
 80175f8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80175fe:	68bb      	ldr	r3, [r7, #8]
 8017600:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8017604:	683b      	ldr	r3, [r7, #0]
 8017606:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8017608:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 801760c:	4618      	mov	r0, r3
 801760e:	3714      	adds	r7, #20
 8017610:	46bd      	mov	sp, r7
 8017612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017616:	4770      	bx	lr

08017618 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8017618:	b480      	push	{r7}
 801761a:	b085      	sub	sp, #20
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	460b      	mov	r3, r1
 8017622:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017624:	2300      	movs	r3, #0
 8017626:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	887a      	ldrh	r2, [r7, #2]
 8017630:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8017634:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8017638:	4618      	mov	r0, r3
 801763a:	3714      	adds	r7, #20
 801763c:	46bd      	mov	sp, r7
 801763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017642:	4770      	bx	lr

08017644 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8017644:	b480      	push	{r7}
 8017646:	b085      	sub	sp, #20
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
 801764c:	460b      	mov	r3, r1
 801764e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017650:	2300      	movs	r3, #0
 8017652:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 801765e:	f003 0303 	and.w	r3, r3, #3
 8017662:	b2da      	uxtb	r2, r3
 8017664:	78fb      	ldrb	r3, [r7, #3]
 8017666:	009b      	lsls	r3, r3, #2
 8017668:	b2db      	uxtb	r3, r3
 801766a:	4413      	add	r3, r2
 801766c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 801766e:	68bb      	ldr	r3, [r7, #8]
 8017670:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8017674:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8017678:	4618      	mov	r0, r3
 801767a:	3714      	adds	r7, #20
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b0d0      	sub	sp, #320	@ 0x140
 8017688:	af00      	add	r7, sp, #0
 801768a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801768e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8017692:	6018      	str	r0, [r3, #0]
 8017694:	4608      	mov	r0, r1
 8017696:	4611      	mov	r1, r2
 8017698:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801769c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 80176a0:	4602      	mov	r2, r0
 80176a2:	701a      	strb	r2, [r3, #0]
 80176a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80176a8:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80176ac:	460a      	mov	r2, r1
 80176ae:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80176b0:	2300      	movs	r3, #0
 80176b2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80176b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80176ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80176c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80176c8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80176cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80176d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80176d4:	3342      	adds	r3, #66	@ 0x42
 80176d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80176da:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80176de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80176e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80176e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80176ea:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80176ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80176f2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80176f6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80176fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80176fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017702:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8017706:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 801770a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801770e:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8017712:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8017716:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801771a:	332c      	adds	r3, #44	@ 0x2c
 801771c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8017720:	f107 030c 	add.w	r3, r7, #12
 8017724:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8017728:	2300      	movs	r3, #0
 801772a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8017734:	2300      	movs	r3, #0
 8017736:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 801773a:	2300      	movs	r3, #0
 801773c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8017740:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017744:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8017748:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 801774c:	7812      	ldrb	r2, [r2, #0]
 801774e:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8017750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017754:	791b      	ldrb	r3, [r3, #4]
 8017756:	b25b      	sxtb	r3, r3
 8017758:	f003 030f 	and.w	r3, r3, #15
 801775c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 801775e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017762:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8017766:	f993 3000 	ldrsb.w	r3, [r3]
 801776a:	4313      	orrs	r3, r2
 801776c:	b25b      	sxtb	r3, r3
 801776e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8017770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017774:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8017776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801777a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 801777e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017782:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8017786:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801778a:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 801778e:	2bff      	cmp	r3, #255	@ 0xff
 8017790:	d104      	bne.n	801779c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8017792:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017796:	2200      	movs	r2, #0
 8017798:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 801779c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177a0:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 80177a4:	2b01      	cmp	r3, #1
 80177a6:	d139      	bne.n	801781c <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 80177a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177ac:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d133      	bne.n	801781c <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80177b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177b8:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80177bc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177c0:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80177c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177c8:	2220      	movs	r2, #32
 80177ca:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80177ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177d2:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80177d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d10c      	bne.n	80177f8 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80177de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177e2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 80177e6:	b29b      	uxth	r3, r3
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	b29b      	uxth	r3, r3
 80177ec:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 80177ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 80177f6:	e004      	b.n	8017802 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80177f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80177fc:	2200      	movs	r2, #0
 80177fe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8017802:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017806:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	2b04      	cmp	r3, #4
 801780e:	d805      	bhi.n	801781c <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8017810:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017814:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8017818:	2205      	movs	r2, #5
 801781a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 801781c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017820:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8017824:	2b01      	cmp	r3, #1
 8017826:	d113      	bne.n	8017850 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8017828:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801782c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8017830:	2b01      	cmp	r3, #1
 8017832:	d10d      	bne.n	8017850 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8017834:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017838:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 801783c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8017840:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8017844:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017848:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801784c:	2206      	movs	r2, #6
 801784e:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8017850:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017854:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8017858:	781b      	ldrb	r3, [r3, #0]
 801785a:	3b01      	subs	r3, #1
 801785c:	2b05      	cmp	r3, #5
 801785e:	d827      	bhi.n	80178b0 <VL53L1_init_and_start_range+0x22c>
 8017860:	a201      	add	r2, pc, #4	@ (adr r2, 8017868 <VL53L1_init_and_start_range+0x1e4>)
 8017862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017866:	bf00      	nop
 8017868:	080178a9 	.word	0x080178a9
 801786c:	080178a1 	.word	0x080178a1
 8017870:	08017899 	.word	0x08017899
 8017874:	08017891 	.word	0x08017891
 8017878:	08017889 	.word	0x08017889
 801787c:	08017881 	.word	0x08017881
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8017880:	2301      	movs	r3, #1
 8017882:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8017886:	e017      	b.n	80178b8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8017888:	230d      	movs	r3, #13
 801788a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 801788e:	e013      	b.n	80178b8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8017890:	2324      	movs	r3, #36	@ 0x24
 8017892:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8017896:	e00f      	b.n	80178b8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8017898:	2344      	movs	r3, #68	@ 0x44
 801789a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 801789e:	e00b      	b.n	80178b8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80178a0:	235a      	movs	r3, #90	@ 0x5a
 80178a2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80178a6:	e007      	b.n	80178b8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80178a8:	2371      	movs	r3, #113	@ 0x71
 80178aa:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80178ae:	e003      	b.n	80178b8 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80178b0:	2383      	movs	r3, #131	@ 0x83
 80178b2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80178b6:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80178b8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80178bc:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80178c0:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80178c4:	f107 030c 	add.w	r3, r7, #12
 80178c8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80178cc:	2300      	movs	r3, #0
 80178ce:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80178d2:	e00b      	b.n	80178ec <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80178d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80178d8:	1c5a      	adds	r2, r3, #1
 80178da:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 80178de:	2200      	movs	r2, #0
 80178e0:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80178e2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80178e6:	3301      	adds	r3, #1
 80178e8:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80178ec:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80178f0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80178f4:	429a      	cmp	r2, r3
 80178f6:	d3ed      	bcc.n	80178d4 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80178f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80178fc:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8017900:	781b      	ldrb	r3, [r3, #0]
 8017902:	2b05      	cmp	r3, #5
 8017904:	d917      	bls.n	8017936 <VL53L1_init_and_start_range+0x2b2>
 8017906:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 801790a:	2b00      	cmp	r3, #0
 801790c:	d113      	bne.n	8017936 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801790e:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8017912:	f1c3 0301 	rsb	r3, r3, #1
 8017916:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 801791a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 801791e:	f107 020c 	add.w	r2, r7, #12
 8017922:	4413      	add	r3, r2
 8017924:	461a      	mov	r2, r3
 8017926:	210b      	movs	r1, #11
 8017928:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 801792c:	f001 ff60 	bl	80197f0 <VL53L1_i2c_encode_static_nvm_managed>
 8017930:	4603      	mov	r3, r0
 8017932:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8017936:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801793a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	2b04      	cmp	r3, #4
 8017942:	d917      	bls.n	8017974 <VL53L1_init_and_start_range+0x2f0>
 8017944:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017948:	2b00      	cmp	r3, #0
 801794a:	d113      	bne.n	8017974 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801794c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8017950:	f1c3 030d 	rsb	r3, r3, #13
 8017954:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8017958:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 801795c:	f107 020c 	add.w	r2, r7, #12
 8017960:	4413      	add	r3, r2
 8017962:	461a      	mov	r2, r3
 8017964:	2117      	movs	r1, #23
 8017966:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801796a:	f002 f81d 	bl	80199a8 <VL53L1_i2c_encode_customer_nvm_managed>
 801796e:	4603      	mov	r3, r0
 8017970:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8017974:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017978:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801797c:	781b      	ldrb	r3, [r3, #0]
 801797e:	2b03      	cmp	r3, #3
 8017980:	d917      	bls.n	80179b2 <VL53L1_init_and_start_range+0x32e>
 8017982:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017986:	2b00      	cmp	r3, #0
 8017988:	d113      	bne.n	80179b2 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801798a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801798e:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8017992:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8017996:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 801799a:	f107 020c 	add.w	r2, r7, #12
 801799e:	4413      	add	r3, r2
 80179a0:	461a      	mov	r2, r3
 80179a2:	2120      	movs	r1, #32
 80179a4:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 80179a8:	f002 f93c 	bl	8019c24 <VL53L1_i2c_encode_static_config>
 80179ac:	4603      	mov	r3, r0
 80179ae:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80179b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80179b6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80179ba:	781b      	ldrb	r3, [r3, #0]
 80179bc:	2b02      	cmp	r3, #2
 80179be:	d917      	bls.n	80179f0 <VL53L1_init_and_start_range+0x36c>
 80179c0:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d113      	bne.n	80179f0 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80179c8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80179cc:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80179d0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80179d4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 80179d8:	f107 020c 	add.w	r2, r7, #12
 80179dc:	4413      	add	r3, r2
 80179de:	461a      	mov	r2, r3
 80179e0:	2116      	movs	r1, #22
 80179e2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80179e6:	f002 fa00 	bl	8019dea <VL53L1_i2c_encode_general_config>
 80179ea:	4603      	mov	r3, r0
 80179ec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80179f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80179f4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80179f8:	781b      	ldrb	r3, [r3, #0]
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d917      	bls.n	8017a2e <VL53L1_init_and_start_range+0x3aa>
 80179fe:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d113      	bne.n	8017a2e <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8017a06:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8017a0a:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8017a0e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8017a12:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8017a16:	f107 020c 	add.w	r2, r7, #12
 8017a1a:	4413      	add	r3, r2
 8017a1c:	461a      	mov	r2, r3
 8017a1e:	2117      	movs	r1, #23
 8017a20:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8017a24:	f002 fa65 	bl	8019ef2 <VL53L1_i2c_encode_timing_config>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8017a2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017a32:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d036      	beq.n	8017aaa <VL53L1_init_and_start_range+0x426>
 8017a3c:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d132      	bne.n	8017aaa <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8017a44:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8017a48:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8017a4c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8017a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8017a54:	791b      	ldrb	r3, [r3, #4]
 8017a56:	f003 0320 	and.w	r3, r3, #32
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d017      	beq.n	8017a8e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8017a5e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8017a62:	789b      	ldrb	r3, [r3, #2]
 8017a64:	f043 0301 	orr.w	r3, r3, #1
 8017a68:	b2da      	uxtb	r2, r3
 8017a6a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017a6e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8017a70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8017a74:	789b      	ldrb	r3, [r3, #2]
 8017a76:	f043 0301 	orr.w	r3, r3, #1
 8017a7a:	b2da      	uxtb	r2, r3
 8017a7c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017a80:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8017a82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8017a86:	789a      	ldrb	r2, [r3, #2]
 8017a88:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017a8c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8017a8e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8017a92:	f107 020c 	add.w	r2, r7, #12
 8017a96:	4413      	add	r3, r2
 8017a98:	461a      	mov	r2, r3
 8017a9a:	2112      	movs	r1, #18
 8017a9c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8017aa0:	f002 faa9 	bl	8019ff6 <VL53L1_i2c_encode_dynamic_config>
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8017aaa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d113      	bne.n	8017ada <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8017ab2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8017ab6:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8017aba:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8017abe:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 8017ac2:	f107 020c 	add.w	r2, r7, #12
 8017ac6:	4413      	add	r3, r2
 8017ac8:	461a      	mov	r2, r3
 8017aca:	2105      	movs	r1, #5
 8017acc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8017ad0:	f002 fb16 	bl	801a100 <VL53L1_i2c_encode_system_control>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8017ada:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d10f      	bne.n	8017b02 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8017ae2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8017ae6:	f107 020c 	add.w	r2, r7, #12
 8017aea:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8017aee:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8017af2:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8017af6:	6800      	ldr	r0, [r0, #0]
 8017af8:	f7f5 fcb1 	bl	800d45e <VL53L1_WriteMulti>
 8017afc:	4603      	mov	r3, r0
 8017afe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8017b02:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d109      	bne.n	8017b1e <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8017b0a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017b0e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8017b12:	6818      	ldr	r0, [r3, #0]
 8017b14:	f000 ffa6 	bl	8018a64 <VL53L1_update_ll_driver_rd_state>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8017b1e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d109      	bne.n	8017b3a <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8017b26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8017b2a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8017b2e:	6818      	ldr	r0, [r3, #0]
 8017b30:	f001 f86b 	bl	8018c0a <VL53L1_update_ll_driver_cfg_state>
 8017b34:	4603      	mov	r3, r0
 8017b36:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8017b3a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b084      	sub	sp, #16
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017b50:	2300      	movs	r3, #0
 8017b52:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8017b58:	68bb      	ldr	r3, [r7, #8]
 8017b5a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8017b5e:	b25b      	sxtb	r3, r3
 8017b60:	f003 030f 	and.w	r3, r3, #15
 8017b64:	b25b      	sxtb	r3, r3
 8017b66:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8017b6a:	b25b      	sxtb	r3, r3
 8017b6c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	6878      	ldr	r0, [r7, #4]
 8017b7e:	f002 fafa 	bl	801a176 <VL53L1_set_system_control>
 8017b82:	4603      	mov	r3, r0
 8017b84:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8017b86:	68bb      	ldr	r3, [r7, #8]
 8017b88:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8017b8c:	f003 030f 	and.w	r3, r3, #15
 8017b90:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8017b92:	68bb      	ldr	r3, [r7, #8]
 8017b94:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8017b98:	2103      	movs	r1, #3
 8017b9a:	6878      	ldr	r0, [r7, #4]
 8017b9c:	f000 ff39 	bl	8018a12 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8017ba0:	68bb      	ldr	r3, [r7, #8]
 8017ba2:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8017ba6:	2b01      	cmp	r3, #1
 8017ba8:	d102      	bne.n	8017bb0 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8017baa:	6878      	ldr	r0, [r7, #4]
 8017bac:	f001 fcb4 	bl	8019518 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8017bb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017bb4:	4618      	mov	r0, r3
 8017bb6:	3710      	adds	r7, #16
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b0c8      	sub	sp, #288	@ 0x120
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017bc6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017bca:	6018      	str	r0, [r3, #0]
 8017bcc:	460a      	mov	r2, r1
 8017bce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017bd2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8017bd6:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017bd8:	2300      	movs	r3, #0
 8017bda:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8017bde:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017be2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8017be6:	681b      	ldr	r3, [r3, #0]
 8017be8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8017bec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017bf0:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8017bf4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8017bf8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017bfc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8017c00:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8017c04:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8017c08:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8017c0c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8017c10:	2388      	movs	r3, #136	@ 0x88
 8017c12:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8017c22:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017c26:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8017c2a:	781b      	ldrb	r3, [r3, #0]
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d008      	beq.n	8017c42 <VL53L1_get_measurement_results+0x86>
 8017c30:	2b02      	cmp	r3, #2
 8017c32:	d10d      	bne.n	8017c50 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8017c34:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8017c38:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8017c3c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8017c40:	e00a      	b.n	8017c58 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8017c42:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8017c46:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8017c4a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8017c4e:	e003      	b.n	8017c58 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 8017c50:	232c      	movs	r3, #44	@ 0x2c
 8017c52:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8017c56:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8017c58:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	d10f      	bne.n	8017c80 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8017c60:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8017c64:	f107 0208 	add.w	r2, r7, #8
 8017c68:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8017c6c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8017c70:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8017c74:	6800      	ldr	r0, [r0, #0]
 8017c76:	f7f5 fc18 	bl	800d4aa <VL53L1_ReadMulti>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8017c80:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017c84:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8017c88:	781b      	ldrb	r3, [r3, #0]
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	d917      	bls.n	8017cbe <VL53L1_get_measurement_results+0x102>
 8017c8e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d113      	bne.n	8017cbe <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8017c96:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8017c9a:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8017c9e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8017ca2:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8017ca6:	f107 0208 	add.w	r2, r7, #8
 8017caa:	4413      	add	r3, r2
 8017cac:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8017cb0:	4619      	mov	r1, r3
 8017cb2:	2038      	movs	r0, #56	@ 0x38
 8017cb4:	f002 fbdd 	bl	801a472 <VL53L1_i2c_decode_debug_results>
 8017cb8:	4603      	mov	r3, r0
 8017cba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8017cbe:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8017cc2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8017cc6:	781b      	ldrb	r3, [r3, #0]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d017      	beq.n	8017cfc <VL53L1_get_measurement_results+0x140>
 8017ccc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d113      	bne.n	8017cfc <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8017cd4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8017cd8:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8017cdc:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8017ce0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 8017ce4:	f107 0208 	add.w	r2, r7, #8
 8017ce8:	4413      	add	r3, r2
 8017cea:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8017cee:	4619      	mov	r1, r3
 8017cf0:	2021      	movs	r0, #33	@ 0x21
 8017cf2:	f002 fb5d 	bl	801a3b0 <VL53L1_i2c_decode_core_results>
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8017cfc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d110      	bne.n	8017d26 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8017d04:	2300      	movs	r3, #0
 8017d06:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8017d0a:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8017d0e:	f107 0208 	add.w	r2, r7, #8
 8017d12:	4413      	add	r3, r2
 8017d14:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8017d18:	4619      	mov	r1, r3
 8017d1a:	202c      	movs	r0, #44	@ 0x2c
 8017d1c:	f002 fa52 	bl	801a1c4 <VL53L1_i2c_decode_system_results>
 8017d20:	4603      	mov	r3, r0
 8017d22:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8017d26:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8017d30:	46bd      	mov	sp, r7
 8017d32:	bd80      	pop	{r7, pc}

08017d34 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b088      	sub	sp, #32
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	460b      	mov	r3, r1
 8017d3e:	607a      	str	r2, [r7, #4]
 8017d40:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017d42:	2300      	movs	r3, #0
 8017d44:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8017d50:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8017d56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d106      	bne.n	8017d6c <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 8017d5e:	7afb      	ldrb	r3, [r7, #11]
 8017d60:	4619      	mov	r1, r3
 8017d62:	68f8      	ldr	r0, [r7, #12]
 8017d64:	f7ff ff2a 	bl	8017bbc <VL53L1_get_measurement_results>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 8017d6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10c      	bne.n	8017d8e <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8017d74:	69bb      	ldr	r3, [r7, #24]
 8017d76:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	69bb      	ldr	r3, [r7, #24]
 8017d7e:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8017d82:	69bb      	ldr	r3, [r7, #24]
 8017d84:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8017d88:	693b      	ldr	r3, [r7, #16]
 8017d8a:	f000 f851 	bl	8017e30 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 8017d8e:	69bb      	ldr	r3, [r7, #24]
 8017d90:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d12d      	bne.n	8017df4 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8017d98:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d10e      	bne.n	8017dbe <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8017da0:	69bb      	ldr	r3, [r7, #24]
 8017da2:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8017da6:	2b00      	cmp	r3, #0
 8017da8:	d109      	bne.n	8017dbe <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8017daa:	68f8      	ldr	r0, [r7, #12]
 8017dac:	f001 fc0e 	bl	80195cc <VL53L1_low_power_auto_setup_manual_calibration>
 8017db0:	4603      	mov	r3, r0
 8017db2:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8017db4:	69bb      	ldr	r3, [r7, #24]
 8017db6:	2201      	movs	r2, #1
 8017db8:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 8017dbc:	e00c      	b.n	8017dd8 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 8017dbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d108      	bne.n	8017dd8 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8017dc6:	69bb      	ldr	r3, [r7, #24]
 8017dc8:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 8017dcc:	2b01      	cmp	r3, #1
 8017dce:	d103      	bne.n	8017dd8 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8017dd0:	69bb      	ldr	r3, [r7, #24]
 8017dd2:	2202      	movs	r2, #2
 8017dd4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8017dde:	2bff      	cmp	r3, #255	@ 0xff
 8017de0:	d008      	beq.n	8017df4 <VL53L1_get_device_results+0xc0>
 8017de2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d104      	bne.n	8017df4 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 8017dea:	68f8      	ldr	r0, [r7, #12]
 8017dec:	f001 fc33 	bl	8019656 <VL53L1_low_power_auto_update_DSS>
 8017df0:	4603      	mov	r3, r0
 8017df2:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 8017df4:	69bb      	ldr	r3, [r7, #24]
 8017df6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8017dfa:	693b      	ldr	r3, [r7, #16]
 8017dfc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 8017dfe:	69bb      	ldr	r3, [r7, #24]
 8017e00:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8017e04:	693b      	ldr	r3, [r7, #16]
 8017e06:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 8017e08:	2284      	movs	r2, #132	@ 0x84
 8017e0a:	6939      	ldr	r1, [r7, #16]
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	f003 f957 	bl	801b0c0 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8017e12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d104      	bne.n	8017e24 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8017e1a:	68f8      	ldr	r0, [r7, #12]
 8017e1c:	f000 feaa 	bl	8018b74 <VL53L1_check_ll_driver_rd_state>
 8017e20:	4603      	mov	r3, r0
 8017e22:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8017e24:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	3720      	adds	r7, #32
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8017e30:	b480      	push	{r7}
 8017e32:	b089      	sub	sp, #36	@ 0x24
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	60f8      	str	r0, [r7, #12]
 8017e38:	60b9      	str	r1, [r7, #8]
 8017e3a:	607a      	str	r2, [r7, #4]
 8017e3c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8017e3e:	2300      	movs	r3, #0
 8017e40:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8017e42:	2300      	movs	r3, #0
 8017e44:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8017e46:	2300      	movs	r3, #0
 8017e48:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	78da      	ldrb	r2, [r3, #3]
 8017e4e:	683b      	ldr	r3, [r7, #0]
 8017e50:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8017e52:	683b      	ldr	r3, [r7, #0]
 8017e54:	3304      	adds	r3, #4
 8017e56:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8017e58:	2300      	movs	r3, #0
 8017e5a:	77fb      	strb	r3, [r7, #31]
 8017e5c:	e0d0      	b.n	8018000 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8017e5e:	69bb      	ldr	r3, [r7, #24]
 8017e60:	7ffa      	ldrb	r2, [r7, #31]
 8017e62:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8017e64:	69bb      	ldr	r3, [r7, #24]
 8017e66:	2200      	movs	r2, #0
 8017e68:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8017e6a:	68bb      	ldr	r3, [r7, #8]
 8017e6c:	78db      	ldrb	r3, [r3, #3]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d10a      	bne.n	8017e88 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	785b      	ldrb	r3, [r3, #1]
 8017e76:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8017e7a:	2b09      	cmp	r3, #9
 8017e7c:	d104      	bne.n	8017e88 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	2213      	movs	r2, #19
 8017e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017e86:	e007      	b.n	8017e98 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8017e88:	68bb      	ldr	r3, [r7, #8]
 8017e8a:	785b      	ldrb	r3, [r3, #1]
 8017e8c:	f003 031f 	and.w	r3, r3, #31
 8017e90:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8017e92:	69bb      	ldr	r3, [r7, #24]
 8017e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8017e98:	7ffb      	ldrb	r3, [r7, #31]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d002      	beq.n	8017ea4 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	d05d      	beq.n	8017f5e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8017ea2:	e0a7      	b.n	8017ff4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8017ea4:	68bb      	ldr	r3, [r7, #8]
 8017ea6:	789b      	ldrb	r3, [r3, #2]
 8017ea8:	2b07      	cmp	r3, #7
 8017eaa:	d104      	bne.n	8017eb6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8017eac:	68bb      	ldr	r3, [r7, #8]
 8017eae:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8017eb0:	69bb      	ldr	r3, [r7, #24]
 8017eb2:	821a      	strh	r2, [r3, #16]
 8017eb4:	e00c      	b.n	8017ed0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	789b      	ldrb	r3, [r3, #2]
 8017eba:	2b08      	cmp	r3, #8
 8017ebc:	d104      	bne.n	8017ec8 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8017ebe:	68bb      	ldr	r3, [r7, #8]
 8017ec0:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8017ec2:	69bb      	ldr	r3, [r7, #24]
 8017ec4:	821a      	strh	r2, [r3, #16]
 8017ec6:	e003      	b.n	8017ed0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8017ec8:	68bb      	ldr	r3, [r7, #8]
 8017eca:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8017ecc:	69bb      	ldr	r3, [r7, #24]
 8017ece:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8017ed4:	69bb      	ldr	r3, [r7, #24]
 8017ed6:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8017edc:	69bb      	ldr	r3, [r7, #24]
 8017ede:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8017ee4:	69bb      	ldr	r3, [r7, #24]
 8017ee6:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	895b      	ldrh	r3, [r3, #10]
 8017eec:	015b      	lsls	r3, r3, #5
 8017eee:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017ef6:	d302      	bcc.n	8017efe <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8017ef8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017efc:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	b29a      	uxth	r2, r3
 8017f02:	69bb      	ldr	r3, [r7, #24]
 8017f04:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8017f06:	68bb      	ldr	r3, [r7, #8]
 8017f08:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8017f0a:	69bb      	ldr	r3, [r7, #24]
 8017f0c:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8017f0e:	68bb      	ldr	r3, [r7, #8]
 8017f10:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8017f12:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8017f14:	693b      	ldr	r3, [r7, #16]
 8017f16:	68fa      	ldr	r2, [r7, #12]
 8017f18:	fb02 f303 	mul.w	r3, r2, r3
 8017f1c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8017f1e:	693b      	ldr	r3, [r7, #16]
 8017f20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8017f24:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	da01      	bge.n	8017f30 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8017f2c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8017f30:	12db      	asrs	r3, r3, #11
 8017f32:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	b21a      	sxth	r2, r3
 8017f38:	69bb      	ldr	r3, [r7, #24]
 8017f3a:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8017f40:	69bb      	ldr	r3, [r7, #24]
 8017f42:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8017f48:	69bb      	ldr	r3, [r7, #24]
 8017f4a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8017f50:	69bb      	ldr	r3, [r7, #24]
 8017f52:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8017f58:	69bb      	ldr	r3, [r7, #24]
 8017f5a:	621a      	str	r2, [r3, #32]

			break;
 8017f5c:	e04a      	b.n	8017ff4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8017f62:	69bb      	ldr	r3, [r7, #24]
 8017f64:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8017f6a:	69bb      	ldr	r3, [r7, #24]
 8017f6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 8017f6e:	69bb      	ldr	r3, [r7, #24]
 8017f70:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017f74:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8017f76:	68bb      	ldr	r3, [r7, #8]
 8017f78:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8017f7a:	69bb      	ldr	r3, [r7, #24]
 8017f7c:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	8bdb      	ldrh	r3, [r3, #30]
 8017f82:	015b      	lsls	r3, r3, #5
 8017f84:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017f8c:	d302      	bcc.n	8017f94 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8017f8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017f92:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8017f94:	697b      	ldr	r3, [r7, #20]
 8017f96:	b29a      	uxth	r2, r3
 8017f98:	69bb      	ldr	r3, [r7, #24]
 8017f9a:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8017f9c:	68bb      	ldr	r3, [r7, #8]
 8017f9e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8017fa0:	69bb      	ldr	r3, [r7, #24]
 8017fa2:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8017fa8:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8017faa:	693b      	ldr	r3, [r7, #16]
 8017fac:	68fa      	ldr	r2, [r7, #12]
 8017fae:	fb02 f303 	mul.w	r3, r2, r3
 8017fb2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8017fb4:	693b      	ldr	r3, [r7, #16]
 8017fb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8017fba:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8017fbc:	693b      	ldr	r3, [r7, #16]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	da01      	bge.n	8017fc6 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8017fc2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8017fc6:	12db      	asrs	r3, r3, #11
 8017fc8:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	b21a      	sxth	r2, r3
 8017fce:	69bb      	ldr	r3, [r7, #24]
 8017fd0:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8017fd6:	69bb      	ldr	r3, [r7, #24]
 8017fd8:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8017fde:	69bb      	ldr	r3, [r7, #24]
 8017fe0:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8017fe6:	69bb      	ldr	r3, [r7, #24]
 8017fe8:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8017fee:	69bb      	ldr	r3, [r7, #24]
 8017ff0:	621a      	str	r2, [r3, #32]

			break;
 8017ff2:	bf00      	nop
		}

		pdata++;
 8017ff4:	69bb      	ldr	r3, [r7, #24]
 8017ff6:	3340      	adds	r3, #64	@ 0x40
 8017ff8:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8017ffa:	7ffb      	ldrb	r3, [r7, #31]
 8017ffc:	3301      	adds	r3, #1
 8017ffe:	77fb      	strb	r3, [r7, #31]
 8018000:	7ffb      	ldrb	r3, [r7, #31]
 8018002:	2b01      	cmp	r3, #1
 8018004:	f67f af2b 	bls.w	8017e5e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8018008:	683b      	ldr	r3, [r7, #0]
 801800a:	2200      	movs	r2, #0
 801800c:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	785b      	ldrb	r3, [r3, #1]
 8018012:	f003 031f 	and.w	r3, r3, #31
 8018016:	2b11      	cmp	r3, #17
 8018018:	bf8c      	ite	hi
 801801a:	2201      	movhi	r2, #1
 801801c:	2200      	movls	r2, #0
 801801e:	b2d2      	uxtb	r2, r2
 8018020:	2a00      	cmp	r2, #0
 8018022:	d117      	bne.n	8018054 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8018024:	4a0e      	ldr	r2, [pc, #56]	@ (8018060 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8018026:	fa22 f303 	lsr.w	r3, r2, r3
 801802a:	f003 0301 	and.w	r3, r3, #1
 801802e:	2b00      	cmp	r3, #0
 8018030:	bf14      	ite	ne
 8018032:	2301      	movne	r3, #1
 8018034:	2300      	moveq	r3, #0
 8018036:	b2db      	uxtb	r3, r3
 8018038:	2b00      	cmp	r3, #0
 801803a:	d00b      	beq.n	8018054 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 801803c:	68bb      	ldr	r3, [r7, #8]
 801803e:	785b      	ldrb	r3, [r3, #1]
 8018040:	f003 031f 	and.w	r3, r3, #31
 8018044:	b2da      	uxtb	r2, r3
 8018046:	683b      	ldr	r3, [r7, #0]
 8018048:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 801804a:	683b      	ldr	r3, [r7, #0]
 801804c:	2200      	movs	r2, #0
 801804e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8018052:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8018054:	bf00      	nop
 8018056:	3724      	adds	r7, #36	@ 0x24
 8018058:	46bd      	mov	sp, r7
 801805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801805e:	4770      	bx	lr
 8018060:	0002200e 	.word	0x0002200e

08018064 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8018064:	b480      	push	{r7}
 8018066:	b085      	sub	sp, #20
 8018068:	af00      	add	r7, sp, #0
 801806a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801806c:	2300      	movs	r3, #0
 801806e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8018070:	687b      	ldr	r3, [r7, #4]
 8018072:	2208      	movs	r2, #8
 8018074:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	220b      	movs	r2, #11
 801807a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8018082:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 801808a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8018092:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 801809a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 801809c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80180a0:	4618      	mov	r0, r3
 80180a2:	3714      	adds	r7, #20
 80180a4:	46bd      	mov	sp, r7
 80180a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180aa:	4770      	bx	lr

080180ac <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b085      	sub	sp, #20
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80180b4:	2300      	movs	r3, #0
 80180b6:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	2200      	movs	r2, #0
 80180bc:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2212      	movs	r2, #18
 80180c2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	220f      	movs	r2, #15
 80180c8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2202      	movs	r2, #2
 80180ce:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 80180d6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	220c      	movs	r2, #12
 80180dc:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80180de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80180e2:	4618      	mov	r0, r3
 80180e4:	3714      	adds	r7, #20
 80180e6:	46bd      	mov	sp, r7
 80180e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ec:	4770      	bx	lr

080180ee <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80180ee:	b580      	push	{r7, lr}
 80180f0:	b084      	sub	sp, #16
 80180f2:	af00      	add	r7, sp, #0
 80180f4:	6078      	str	r0, [r7, #4]
 80180f6:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80180f8:	2300      	movs	r3, #0
 80180fa:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	895b      	ldrh	r3, [r3, #10]
 8018100:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8018102:	683b      	ldr	r3, [r7, #0]
 8018104:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	895b      	ldrh	r3, [r3, #10]
 801811e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8018120:	683b      	ldr	r3, [r7, #0]
 8018122:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8018124:	687b      	ldr	r3, [r7, #4]
 8018126:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 801812a:	683b      	ldr	r3, [r7, #0]
 801812c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8018134:	683b      	ldr	r3, [r7, #0]
 8018136:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8018138:	683b      	ldr	r3, [r7, #0]
 801813a:	2200      	movs	r2, #0
 801813c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	2240      	movs	r2, #64	@ 0x40
 8018142:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8018144:	683b      	ldr	r3, [r7, #0]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	2b00      	cmp	r3, #0
 801814a:	d10d      	bne.n	8018168 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 801814c:	683b      	ldr	r3, [r7, #0]
 801814e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d108      	bne.n	8018168 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8018156:	683b      	ldr	r3, [r7, #0]
 8018158:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d103      	bne.n	8018168 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	2200      	movs	r2, #0
 8018164:	741a      	strb	r2, [r3, #16]
 8018166:	e002      	b.n	801816e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8018168:	683b      	ldr	r3, [r7, #0]
 801816a:	2201      	movs	r2, #1
 801816c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 801816e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018172:	2b00      	cmp	r3, #0
 8018174:	d114      	bne.n	80181a0 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8018176:	683b      	ldr	r3, [r7, #0]
 8018178:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 801817a:	2b01      	cmp	r3, #1
 801817c:	d110      	bne.n	80181a0 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 801817e:	683b      	ldr	r3, [r7, #0]
 8018180:	6818      	ldr	r0, [r3, #0]
 8018182:	683b      	ldr	r3, [r7, #0]
 8018184:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	7d1b      	ldrb	r3, [r3, #20]
 8018192:	f000 ff95 	bl	80190c0 <VL53L1_calc_range_ignore_threshold>
 8018196:	4603      	mov	r3, r0
 8018198:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 801819a:	683b      	ldr	r3, [r7, #0]
 801819c:	82da      	strh	r2, [r3, #22]
 801819e:	e002      	b.n	80181a6 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 80181a0:	683b      	ldr	r3, [r7, #0]
 80181a2:	2200      	movs	r2, #0
 80181a4:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 80181a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80181aa:	4618      	mov	r0, r3
 80181ac:	3710      	adds	r7, #16
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}

080181b2 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 80181b2:	b480      	push	{r7}
 80181b4:	b085      	sub	sp, #20
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80181ba:	2300      	movs	r3, #0
 80181bc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80181c4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80181cc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80181d4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80181dc:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	2208      	movs	r2, #8
 80181e2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	2228      	movs	r2, #40	@ 0x28
 80181e8:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	2209      	movs	r2, #9
 80181ee:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80181f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80181f4:	4618      	mov	r0, r3
 80181f6:	3714      	adds	r7, #20
 80181f8:	46bd      	mov	sp, r7
 80181fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181fe:	4770      	bx	lr

08018200 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8018200:	b480      	push	{r7}
 8018202:	b085      	sub	sp, #20
 8018204:	af00      	add	r7, sp, #0
 8018206:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8018208:	2300      	movs	r3, #0
 801820a:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	f248 0203 	movw	r2, #32771	@ 0x8003
 8018212:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	f248 0201 	movw	r2, #32769	@ 0x8001
 801821a:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	f248 0241 	movw	r2, #32833	@ 0x8041
 8018222:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	220e      	movs	r2, #14
 8018228:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	220a      	movs	r2, #10
 801822e:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2206      	movs	r2, #6
 8018234:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8018236:	687b      	ldr	r3, [r7, #4]
 8018238:	220e      	movs	r2, #14
 801823a:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	220a      	movs	r2, #10
 8018240:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	2206      	movs	r2, #6
 8018246:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2202      	movs	r2, #2
 801824c:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	2221      	movs	r2, #33	@ 0x21
 8018252:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2200      	movs	r2, #0
 8018258:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2200      	movs	r2, #0
 801825e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	223c      	movs	r2, #60	@ 0x3c
 8018264:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	223c      	movs	r2, #60	@ 0x3c
 801826a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8018272:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	2280      	movs	r2, #128	@ 0x80
 8018278:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	2280      	movs	r2, #128	@ 0x80
 801827e:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	22c0      	movs	r2, #192	@ 0xc0
 8018284:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	2208      	movs	r2, #8
 801828a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	2210      	movs	r2, #16
 8018290:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2201      	movs	r2, #1
 8018296:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	2202      	movs	r2, #2
 801829e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	2201      	movs	r2, #1
 80182a6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	2202      	movs	r2, #2
 80182ae:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	2200      	movs	r2, #0
 80182b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80182c0:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80182c8:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	f248 0230 	movw	r2, #32816	@ 0x8030
 80182d0:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80182d8:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80182e0:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80182e8:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f24f 6218 	movw	r2, #63000	@ 0xf618
 80182f0:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80182f8:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2201      	movs	r2, #1
 80182fe:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8018306:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8018308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801830c:	4618      	mov	r0, r3
 801830e:	3714      	adds	r7, #20
 8018310:	46bd      	mov	sp, r7
 8018312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018316:	4770      	bx	lr

08018318 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8018318:	b480      	push	{r7}
 801831a:	b087      	sub	sp, #28
 801831c:	af00      	add	r7, sp, #0
 801831e:	60f8      	str	r0, [r7, #12]
 8018320:	60b9      	str	r1, [r7, #8]
 8018322:	607a      	str	r2, [r7, #4]
 8018324:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8018326:	2300      	movs	r3, #0
 8018328:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8018330:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	2200      	movs	r2, #0
 8018336:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	2200      	movs	r2, #0
 801833c:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	2200      	movs	r2, #0
 8018342:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	2200      	movs	r2, #0
 8018348:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	2200      	movs	r2, #0
 801834e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	2200      	movs	r2, #0
 8018354:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	2200      	movs	r2, #0
 801835a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 801835c:	68fb      	ldr	r3, [r7, #12]
 801835e:	2200      	movs	r2, #0
 8018360:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	2200      	movs	r2, #0
 8018366:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	2200      	movs	r2, #0
 801836c:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 801836e:	68fb      	ldr	r3, [r7, #12]
 8018370:	2211      	movs	r2, #17
 8018372:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2202      	movs	r2, #2
 8018378:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	2200      	movs	r2, #0
 801837e:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	2202      	movs	r2, #2
 8018384:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	2208      	movs	r2, #8
 801838a:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	2200      	movs	r2, #0
 8018390:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8018392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018394:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 801839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801839c:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 80183a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183a4:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 80183ac:	68fb      	ldr	r3, [r7, #12]
 80183ae:	2201      	movs	r2, #1
 80183b0:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	2200      	movs	r2, #0
 80183b6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	2200      	movs	r2, #0
 80183bc:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	2200      	movs	r2, #0
 80183c2:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	22ff      	movs	r2, #255	@ 0xff
 80183c8:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 80183ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183cc:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 80183d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80183d4:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	2200      	movs	r2, #0
 80183de:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	2200      	movs	r2, #0
 80183e4:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80183e6:	68fb      	ldr	r3, [r7, #12]
 80183e8:	2200      	movs	r2, #0
 80183ea:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	2200      	movs	r2, #0
 80183f0:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80183f2:	68bb      	ldr	r3, [r7, #8]
 80183f4:	2200      	movs	r2, #0
 80183f6:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80183f8:	68bb      	ldr	r3, [r7, #8]
 80183fa:	2220      	movs	r2, #32
 80183fc:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	220b      	movs	r2, #11
 8018402:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8018404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018406:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8018408:	68bb      	ldr	r3, [r7, #8]
 801840a:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 801840c:	68bb      	ldr	r3, [r7, #8]
 801840e:	2202      	movs	r2, #2
 8018410:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8018412:	68bb      	ldr	r3, [r7, #8]
 8018414:	220d      	movs	r2, #13
 8018416:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8018418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801841a:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8018420:	68bb      	ldr	r3, [r7, #8]
 8018422:	2200      	movs	r2, #0
 8018424:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8018426:	68bb      	ldr	r3, [r7, #8]
 8018428:	2201      	movs	r2, #1
 801842a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 801842c:	68bb      	ldr	r3, [r7, #8]
 801842e:	2200      	movs	r2, #0
 8018430:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	2200      	movs	r2, #0
 8018436:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 801843e:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	2200      	movs	r2, #0
 8018444:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	2238      	movs	r2, #56	@ 0x38
 801844a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	22ff      	movs	r2, #255	@ 0xff
 8018450:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8018452:	68bb      	ldr	r3, [r7, #8]
 8018454:	2201      	movs	r2, #1
 8018456:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	2200      	movs	r2, #0
 801845c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	221a      	movs	r2, #26
 8018462:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	2200      	movs	r2, #0
 8018468:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	2220      	movs	r2, #32
 801846e:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8018470:	687b      	ldr	r3, [r7, #4]
 8018472:	2201      	movs	r2, #1
 8018474:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	22cc      	movs	r2, #204	@ 0xcc
 801847a:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	220b      	movs	r2, #11
 8018480:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	2201      	movs	r2, #1
 8018486:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8018488:	687b      	ldr	r3, [r7, #4]
 801848a:	22f5      	movs	r2, #245	@ 0xf5
 801848c:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	2209      	movs	r2, #9
 8018492:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8018494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018496:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 801849c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801849e:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	2208      	movs	r2, #8
 80184a8:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	2278      	movs	r2, #120	@ 0x78
 80184ae:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	2200      	movs	r2, #0
 80184b4:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 80184b6:	687b      	ldr	r3, [r7, #4]
 80184b8:	2200      	movs	r2, #0
 80184ba:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 80184bc:	683b      	ldr	r3, [r7, #0]
 80184be:	2201      	movs	r2, #1
 80184c0:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 80184c2:	683b      	ldr	r3, [r7, #0]
 80184c4:	2200      	movs	r2, #0
 80184c6:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 80184c8:	683b      	ldr	r3, [r7, #0]
 80184ca:	2200      	movs	r2, #0
 80184cc:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 80184ce:	683b      	ldr	r3, [r7, #0]
 80184d0:	2200      	movs	r2, #0
 80184d2:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 80184d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184d6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 80184da:	683b      	ldr	r3, [r7, #0]
 80184dc:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	220b      	movs	r2, #11
 80184e2:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 80184e4:	683b      	ldr	r3, [r7, #0]
 80184e6:	2209      	movs	r2, #9
 80184e8:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80184ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184ec:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 80184f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80184f4:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80184f6:	683b      	ldr	r3, [r7, #0]
 80184f8:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 80184fa:	683b      	ldr	r3, [r7, #0]
 80184fc:	2201      	movs	r2, #1
 80184fe:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8018500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018502:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 801850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801850c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	22c7      	movs	r2, #199	@ 0xc7
 8018518:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 801851a:	683b      	ldr	r3, [r7, #0]
 801851c:	22ff      	movs	r2, #255	@ 0xff
 801851e:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	22db      	movs	r2, #219	@ 0xdb
 8018524:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8018526:	683b      	ldr	r3, [r7, #0]
 8018528:	2202      	movs	r2, #2
 801852a:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 801852c:	6a3b      	ldr	r3, [r7, #32]
 801852e:	2200      	movs	r2, #0
 8018530:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8018532:	6a3b      	ldr	r3, [r7, #32]
 8018534:	2201      	movs	r2, #1
 8018536:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8018538:	6a3b      	ldr	r3, [r7, #32]
 801853a:	2201      	movs	r2, #1
 801853c:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 801853e:	6a3b      	ldr	r3, [r7, #32]
 8018540:	2221      	movs	r2, #33	@ 0x21
 8018542:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8018544:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018548:	4618      	mov	r0, r3
 801854a:	371c      	adds	r7, #28
 801854c:	46bd      	mov	sp, r7
 801854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018552:	4770      	bx	lr

08018554 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b088      	sub	sp, #32
 8018558:	af02      	add	r7, sp, #8
 801855a:	60f8      	str	r0, [r7, #12]
 801855c:	60b9      	str	r1, [r7, #8]
 801855e:	607a      	str	r2, [r7, #4]
 8018560:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8018562:	2300      	movs	r3, #0
 8018564:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8018566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018568:	9301      	str	r3, [sp, #4]
 801856a:	6a3b      	ldr	r3, [r7, #32]
 801856c:	9300      	str	r3, [sp, #0]
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	687a      	ldr	r2, [r7, #4]
 8018572:	68b9      	ldr	r1, [r7, #8]
 8018574:	68f8      	ldr	r0, [r7, #12]
 8018576:	f7ff fecf 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 801857a:	4603      	mov	r3, r0
 801857c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801857e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018582:	2b00      	cmp	r3, #0
 8018584:	d121      	bne.n	80185ca <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	2207      	movs	r2, #7
 801858a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	2205      	movs	r2, #5
 8018590:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8018592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018594:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8018596:	687b      	ldr	r3, [r7, #4]
 8018598:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 801859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801859c:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	2208      	movs	r2, #8
 80185a6:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	2238      	movs	r2, #56	@ 0x38
 80185ac:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	2207      	movs	r2, #7
 80185b2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 80185b4:	683b      	ldr	r3, [r7, #0]
 80185b6:	2205      	movs	r2, #5
 80185b8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 80185ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185bc:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 80185c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185c4:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80185ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	3718      	adds	r7, #24
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd80      	pop	{r7, pc}

080185d6 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80185d6:	b580      	push	{r7, lr}
 80185d8:	b088      	sub	sp, #32
 80185da:	af02      	add	r7, sp, #8
 80185dc:	60f8      	str	r0, [r7, #12]
 80185de:	60b9      	str	r1, [r7, #8]
 80185e0:	607a      	str	r2, [r7, #4]
 80185e2:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80185e4:	2300      	movs	r3, #0
 80185e6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80185e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80185ea:	9301      	str	r3, [sp, #4]
 80185ec:	6a3b      	ldr	r3, [r7, #32]
 80185ee:	9300      	str	r3, [sp, #0]
 80185f0:	683b      	ldr	r3, [r7, #0]
 80185f2:	687a      	ldr	r2, [r7, #4]
 80185f4:	68b9      	ldr	r1, [r7, #8]
 80185f6:	68f8      	ldr	r0, [r7, #12]
 80185f8:	f7ff fe8e 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 80185fc:	4603      	mov	r3, r0
 80185fe:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8018600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d121      	bne.n	801864c <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	220f      	movs	r2, #15
 801860c:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 801860e:	687b      	ldr	r3, [r7, #4]
 8018610:	220d      	movs	r2, #13
 8018612:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8018614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018616:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8018618:	687b      	ldr	r3, [r7, #4]
 801861a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 801861c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801861e:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2208      	movs	r2, #8
 8018628:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 801862a:	687b      	ldr	r3, [r7, #4]
 801862c:	22b8      	movs	r2, #184	@ 0xb8
 801862e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	220f      	movs	r2, #15
 8018634:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	220d      	movs	r2, #13
 801863a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 801863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801863e:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8018640:	683b      	ldr	r3, [r7, #0]
 8018642:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8018644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018646:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8018648:	683b      	ldr	r3, [r7, #0]
 801864a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 801864c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018650:	4618      	mov	r0, r3
 8018652:	3718      	adds	r7, #24
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}

08018658 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af02      	add	r7, sp, #8
 801865e:	60f8      	str	r0, [r7, #12]
 8018660:	60b9      	str	r1, [r7, #8]
 8018662:	607a      	str	r2, [r7, #4]
 8018664:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8018666:	2300      	movs	r3, #0
 8018668:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801866a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801866c:	9301      	str	r3, [sp, #4]
 801866e:	6a3b      	ldr	r3, [r7, #32]
 8018670:	9300      	str	r3, [sp, #0]
 8018672:	683b      	ldr	r3, [r7, #0]
 8018674:	687a      	ldr	r2, [r7, #4]
 8018676:	68b9      	ldr	r1, [r7, #8]
 8018678:	68f8      	ldr	r0, [r7, #12]
 801867a:	f7ff fe4d 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 801867e:	4603      	mov	r3, r0
 8018680:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8018682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d105      	bne.n	8018696 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	2202      	movs	r2, #2
 801868e:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	223b      	movs	r2, #59	@ 0x3b
 8018694:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8018696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801869a:	4618      	mov	r0, r3
 801869c:	3718      	adds	r7, #24
 801869e:	46bd      	mov	sp, r7
 80186a0:	bd80      	pop	{r7, pc}

080186a2 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80186a2:	b580      	push	{r7, lr}
 80186a4:	b088      	sub	sp, #32
 80186a6:	af02      	add	r7, sp, #8
 80186a8:	60f8      	str	r0, [r7, #12]
 80186aa:	60b9      	str	r1, [r7, #8]
 80186ac:	607a      	str	r2, [r7, #4]
 80186ae:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80186b0:	2300      	movs	r3, #0
 80186b2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80186b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b6:	9301      	str	r3, [sp, #4]
 80186b8:	6a3b      	ldr	r3, [r7, #32]
 80186ba:	9300      	str	r3, [sp, #0]
 80186bc:	683b      	ldr	r3, [r7, #0]
 80186be:	687a      	ldr	r2, [r7, #4]
 80186c0:	68b9      	ldr	r1, [r7, #8]
 80186c2:	68f8      	ldr	r0, [r7, #12]
 80186c4:	f7ff fe28 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 80186c8:	4603      	mov	r3, r0
 80186ca:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80186cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d105      	bne.n	80186e0 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80186d4:	68bb      	ldr	r3, [r7, #8]
 80186d6:	2202      	movs	r2, #2
 80186d8:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80186da:	683b      	ldr	r3, [r7, #0]
 80186dc:	225b      	movs	r2, #91	@ 0x5b
 80186de:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80186e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80186e4:	4618      	mov	r0, r3
 80186e6:	3718      	adds	r7, #24
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}

080186ec <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b088      	sub	sp, #32
 80186f0:	af02      	add	r7, sp, #8
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	607a      	str	r2, [r7, #4]
 80186f8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80186fa:	2300      	movs	r3, #0
 80186fc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80186fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018700:	9301      	str	r3, [sp, #4]
 8018702:	6a3b      	ldr	r3, [r7, #32]
 8018704:	9300      	str	r3, [sp, #0]
 8018706:	683b      	ldr	r3, [r7, #0]
 8018708:	687a      	ldr	r2, [r7, #4]
 801870a:	68b9      	ldr	r1, [r7, #8]
 801870c:	68f8      	ldr	r0, [r7, #12]
 801870e:	f7ff fe03 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 8018712:	4603      	mov	r3, r0
 8018714:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8018716:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d11a      	bne.n	8018754 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	2200      	movs	r2, #0
 8018722:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	2200      	movs	r2, #0
 8018728:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	22b1      	movs	r2, #177	@ 0xb1
 801872e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2200      	movs	r2, #0
 8018734:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	22d4      	movs	r2, #212	@ 0xd4
 801873a:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8018742:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8018744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018746:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 801874a:	683b      	ldr	r3, [r7, #0]
 801874c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 801874e:	6a3b      	ldr	r3, [r7, #32]
 8018750:	2240      	movs	r2, #64	@ 0x40
 8018752:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8018754:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018758:	4618      	mov	r0, r3
 801875a:	3718      	adds	r7, #24
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}

08018760 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b088      	sub	sp, #32
 8018764:	af02      	add	r7, sp, #8
 8018766:	60f8      	str	r0, [r7, #12]
 8018768:	60b9      	str	r1, [r7, #8]
 801876a:	607a      	str	r2, [r7, #4]
 801876c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801876e:	2300      	movs	r3, #0
 8018770:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8018772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018774:	9301      	str	r3, [sp, #4]
 8018776:	6a3b      	ldr	r3, [r7, #32]
 8018778:	9300      	str	r3, [sp, #0]
 801877a:	683b      	ldr	r3, [r7, #0]
 801877c:	687a      	ldr	r2, [r7, #4]
 801877e:	68b9      	ldr	r1, [r7, #8]
 8018780:	68f8      	ldr	r0, [r7, #12]
 8018782:	f7ff fee7 	bl	8018554 <VL53L1_preset_mode_standard_ranging_short_range>
 8018786:	4603      	mov	r3, r0
 8018788:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801878a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801878e:	2b00      	cmp	r3, #0
 8018790:	d11a      	bne.n	80187c8 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	2200      	movs	r2, #0
 8018796:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	2201      	movs	r2, #1
 801879c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2284      	movs	r2, #132	@ 0x84
 80187a2:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	2201      	movs	r2, #1
 80187a8:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	22b1      	movs	r2, #177	@ 0xb1
 80187ae:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80187b6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80187b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187ba:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80187be:	683b      	ldr	r3, [r7, #0]
 80187c0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80187c2:	6a3b      	ldr	r3, [r7, #32]
 80187c4:	2240      	movs	r2, #64	@ 0x40
 80187c6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80187c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80187cc:	4618      	mov	r0, r3
 80187ce:	3718      	adds	r7, #24
 80187d0:	46bd      	mov	sp, r7
 80187d2:	bd80      	pop	{r7, pc}

080187d4 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80187d4:	b580      	push	{r7, lr}
 80187d6:	b088      	sub	sp, #32
 80187d8:	af02      	add	r7, sp, #8
 80187da:	60f8      	str	r0, [r7, #12]
 80187dc:	60b9      	str	r1, [r7, #8]
 80187de:	607a      	str	r2, [r7, #4]
 80187e0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80187e2:	2300      	movs	r3, #0
 80187e4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80187e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187e8:	9301      	str	r3, [sp, #4]
 80187ea:	6a3b      	ldr	r3, [r7, #32]
 80187ec:	9300      	str	r3, [sp, #0]
 80187ee:	683b      	ldr	r3, [r7, #0]
 80187f0:	687a      	ldr	r2, [r7, #4]
 80187f2:	68b9      	ldr	r1, [r7, #8]
 80187f4:	68f8      	ldr	r0, [r7, #12]
 80187f6:	f7ff feee 	bl	80185d6 <VL53L1_preset_mode_standard_ranging_long_range>
 80187fa:	4603      	mov	r3, r0
 80187fc:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80187fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d11a      	bne.n	801883c <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	2200      	movs	r2, #0
 801880a:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2200      	movs	r2, #0
 8018810:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	2297      	movs	r2, #151	@ 0x97
 8018816:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	2200      	movs	r2, #0
 801881c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	22b1      	movs	r2, #177	@ 0xb1
 8018822:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801882a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801882e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8018832:	683b      	ldr	r3, [r7, #0]
 8018834:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8018836:	6a3b      	ldr	r3, [r7, #32]
 8018838:	2240      	movs	r2, #64	@ 0x40
 801883a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 801883c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018840:	4618      	mov	r0, r3
 8018842:	3718      	adds	r7, #24
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}

08018848 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b088      	sub	sp, #32
 801884c:	af02      	add	r7, sp, #8
 801884e:	60f8      	str	r0, [r7, #12]
 8018850:	60b9      	str	r1, [r7, #8]
 8018852:	607a      	str	r2, [r7, #4]
 8018854:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8018856:	2300      	movs	r3, #0
 8018858:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 801885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801885c:	9301      	str	r3, [sp, #4]
 801885e:	6a3b      	ldr	r3, [r7, #32]
 8018860:	9300      	str	r3, [sp, #0]
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	687a      	ldr	r2, [r7, #4]
 8018866:	68b9      	ldr	r1, [r7, #8]
 8018868:	68f8      	ldr	r0, [r7, #12]
 801886a:	f7ff ff3f 	bl	80186ec <VL53L1_preset_mode_timed_ranging>
 801886e:	4603      	mov	r3, r0
 8018870:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8018872:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d106      	bne.n	8018888 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 801887a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801887c:	6839      	ldr	r1, [r7, #0]
 801887e:	68b8      	ldr	r0, [r7, #8]
 8018880:	f000 fe84 	bl	801958c <VL53L1_config_low_power_auto_mode>
 8018884:	4603      	mov	r3, r0
 8018886:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8018888:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801888c:	4618      	mov	r0, r3
 801888e:	3718      	adds	r7, #24
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b088      	sub	sp, #32
 8018898:	af02      	add	r7, sp, #8
 801889a:	60f8      	str	r0, [r7, #12]
 801889c:	60b9      	str	r1, [r7, #8]
 801889e:	607a      	str	r2, [r7, #4]
 80188a0:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80188a2:	2300      	movs	r3, #0
 80188a4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 80188a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188a8:	9301      	str	r3, [sp, #4]
 80188aa:	6a3b      	ldr	r3, [r7, #32]
 80188ac:	9300      	str	r3, [sp, #0]
 80188ae:	683b      	ldr	r3, [r7, #0]
 80188b0:	687a      	ldr	r2, [r7, #4]
 80188b2:	68b9      	ldr	r1, [r7, #8]
 80188b4:	68f8      	ldr	r0, [r7, #12]
 80188b6:	f7ff ff53 	bl	8018760 <VL53L1_preset_mode_timed_ranging_short_range>
 80188ba:	4603      	mov	r3, r0
 80188bc:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80188be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d106      	bne.n	80188d4 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80188c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80188c8:	6839      	ldr	r1, [r7, #0]
 80188ca:	68b8      	ldr	r0, [r7, #8]
 80188cc:	f000 fe5e 	bl	801958c <VL53L1_config_low_power_auto_mode>
 80188d0:	4603      	mov	r3, r0
 80188d2:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80188d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3718      	adds	r7, #24
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b088      	sub	sp, #32
 80188e4:	af02      	add	r7, sp, #8
 80188e6:	60f8      	str	r0, [r7, #12]
 80188e8:	60b9      	str	r1, [r7, #8]
 80188ea:	607a      	str	r2, [r7, #4]
 80188ec:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80188ee:	2300      	movs	r3, #0
 80188f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80188f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80188f4:	9301      	str	r3, [sp, #4]
 80188f6:	6a3b      	ldr	r3, [r7, #32]
 80188f8:	9300      	str	r3, [sp, #0]
 80188fa:	683b      	ldr	r3, [r7, #0]
 80188fc:	687a      	ldr	r2, [r7, #4]
 80188fe:	68b9      	ldr	r1, [r7, #8]
 8018900:	68f8      	ldr	r0, [r7, #12]
 8018902:	f7ff ff67 	bl	80187d4 <VL53L1_preset_mode_timed_ranging_long_range>
 8018906:	4603      	mov	r3, r0
 8018908:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 801890a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d106      	bne.n	8018920 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8018912:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018914:	6839      	ldr	r1, [r7, #0]
 8018916:	68b8      	ldr	r0, [r7, #8]
 8018918:	f000 fe38 	bl	801958c <VL53L1_config_low_power_auto_mode>
 801891c:	4603      	mov	r3, r0
 801891e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8018920:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018924:	4618      	mov	r0, r3
 8018926:	3718      	adds	r7, #24
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}

0801892c <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b088      	sub	sp, #32
 8018930:	af02      	add	r7, sp, #8
 8018932:	60f8      	str	r0, [r7, #12]
 8018934:	60b9      	str	r1, [r7, #8]
 8018936:	607a      	str	r2, [r7, #4]
 8018938:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801893a:	2300      	movs	r3, #0
 801893c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 801893e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018940:	9301      	str	r3, [sp, #4]
 8018942:	6a3b      	ldr	r3, [r7, #32]
 8018944:	9300      	str	r3, [sp, #0]
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	687a      	ldr	r2, [r7, #4]
 801894a:	68b9      	ldr	r1, [r7, #8]
 801894c:	68f8      	ldr	r0, [r7, #12]
 801894e:	f7ff fce3 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 8018952:	4603      	mov	r3, r0
 8018954:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8018956:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801895a:	2b00      	cmp	r3, #0
 801895c:	d116      	bne.n	801898c <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 801895e:	683b      	ldr	r3, [r7, #0]
 8018960:	2200      	movs	r2, #0
 8018962:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	2200      	movs	r2, #0
 8018968:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	22b1      	movs	r2, #177	@ 0xb1
 801896e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	2200      	movs	r2, #0
 8018974:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	22d4      	movs	r2, #212	@ 0xd4
 801897a:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801897c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801897e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8018982:	683b      	ldr	r3, [r7, #0]
 8018984:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8018986:	6a3b      	ldr	r3, [r7, #32]
 8018988:	2210      	movs	r2, #16
 801898a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 801898c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018990:	4618      	mov	r0, r3
 8018992:	3718      	adds	r7, #24
 8018994:	46bd      	mov	sp, r7
 8018996:	bd80      	pop	{r7, pc}

08018998 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b088      	sub	sp, #32
 801899c:	af02      	add	r7, sp, #8
 801899e:	60f8      	str	r0, [r7, #12]
 80189a0:	60b9      	str	r1, [r7, #8]
 80189a2:	607a      	str	r2, [r7, #4]
 80189a4:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80189a6:	2300      	movs	r3, #0
 80189a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80189aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80189ac:	9301      	str	r3, [sp, #4]
 80189ae:	6a3b      	ldr	r3, [r7, #32]
 80189b0:	9300      	str	r3, [sp, #0]
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	687a      	ldr	r2, [r7, #4]
 80189b6:	68b9      	ldr	r1, [r7, #8]
 80189b8:	68f8      	ldr	r0, [r7, #12]
 80189ba:	f7ff fcad 	bl	8018318 <VL53L1_preset_mode_standard_ranging>
 80189be:	4603      	mov	r3, r0
 80189c0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80189c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d102      	bne.n	80189d0 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 80189ca:	6a3b      	ldr	r3, [r7, #32]
 80189cc:	2201      	movs	r2, #1
 80189ce:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 80189d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80189d4:	4618      	mov	r0, r3
 80189d6:	3718      	adds	r7, #24
 80189d8:	46bd      	mov	sp, r7
 80189da:	bd80      	pop	{r7, pc}

080189dc <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 80189dc:	b480      	push	{r7}
 80189de:	b085      	sub	sp, #20
 80189e0:	af00      	add	r7, sp, #0
 80189e2:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	2201      	movs	r2, #1
 80189ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	2202      	movs	r2, #2
 80189f4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	2209      	movs	r2, #9
 80189fc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	224b      	movs	r2, #75	@ 0x4b
 8018a04:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8018a06:	bf00      	nop
 8018a08:	3714      	adds	r7, #20
 8018a0a:	46bd      	mov	sp, r7
 8018a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a10:	4770      	bx	lr

08018a12 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8018a12:	b480      	push	{r7}
 8018a14:	b085      	sub	sp, #20
 8018a16:	af00      	add	r7, sp, #0
 8018a18:	6078      	str	r0, [r7, #4]
 8018a1a:	460b      	mov	r3, r1
 8018a1c:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	332c      	adds	r3, #44	@ 0x2c
 8018a26:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8018a28:	68bb      	ldr	r3, [r7, #8]
 8018a2a:	78fa      	ldrb	r2, [r7, #3]
 8018a2c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8018a2e:	68bb      	ldr	r3, [r7, #8]
 8018a30:	2200      	movs	r2, #0
 8018a32:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018a34:	68bb      	ldr	r3, [r7, #8]
 8018a36:	2202      	movs	r2, #2
 8018a38:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8018a3a:	68bb      	ldr	r3, [r7, #8]
 8018a3c:	2200      	movs	r2, #0
 8018a3e:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	78fa      	ldrb	r2, [r7, #3]
 8018a44:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8018a46:	68bb      	ldr	r3, [r7, #8]
 8018a48:	2200      	movs	r2, #0
 8018a4a:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	2202      	movs	r2, #2
 8018a50:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8018a52:	68bb      	ldr	r3, [r7, #8]
 8018a54:	2200      	movs	r2, #0
 8018a56:	71da      	strb	r2, [r3, #7]

}
 8018a58:	bf00      	nop
 8018a5a:	3714      	adds	r7, #20
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a62:	4770      	bx	lr

08018a64 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8018a64:	b480      	push	{r7}
 8018a66:	b087      	sub	sp, #28
 8018a68:	af00      	add	r7, sp, #0
 8018a6a:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8018a74:	693b      	ldr	r3, [r7, #16]
 8018a76:	332c      	adds	r3, #44	@ 0x2c
 8018a78:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8018a7a:	693b      	ldr	r3, [r7, #16]
 8018a7c:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8018a80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d10c      	bne.n	8018aa2 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	2203      	movs	r2, #3
 8018a8c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	2200      	movs	r2, #0
 8018a92:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018a94:	68fb      	ldr	r3, [r7, #12]
 8018a96:	2202      	movs	r2, #2
 8018a98:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8018a9a:	68fb      	ldr	r3, [r7, #12]
 8018a9c:	2200      	movs	r2, #0
 8018a9e:	71da      	strb	r2, [r3, #7]
 8018aa0:	e060      	b.n	8018b64 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	795b      	ldrb	r3, [r3, #5]
 8018aa6:	2bff      	cmp	r3, #255	@ 0xff
 8018aa8:	d103      	bne.n	8018ab2 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	2280      	movs	r2, #128	@ 0x80
 8018aae:	715a      	strb	r2, [r3, #5]
 8018ab0:	e005      	b.n	8018abe <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	795b      	ldrb	r3, [r3, #5]
 8018ab6:	3301      	adds	r3, #1
 8018ab8:	b2da      	uxtb	r2, r3
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	799b      	ldrb	r3, [r3, #6]
 8018ac2:	f083 0302 	eor.w	r3, r3, #2
 8018ac6:	b2da      	uxtb	r2, r3
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	791b      	ldrb	r3, [r3, #4]
 8018ad0:	3b03      	subs	r3, #3
 8018ad2:	2b05      	cmp	r3, #5
 8018ad4:	d839      	bhi.n	8018b4a <VL53L1_update_ll_driver_rd_state+0xe6>
 8018ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8018adc <VL53L1_update_ll_driver_rd_state+0x78>)
 8018ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018adc:	08018af5 	.word	0x08018af5
 8018ae0:	08018b4b 	.word	0x08018b4b
 8018ae4:	08018b4b 	.word	0x08018b4b
 8018ae8:	08018b1f 	.word	0x08018b1f
 8018aec:	08018b2d 	.word	0x08018b2d
 8018af0:	08018b35 	.word	0x08018b35

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8018af4:	693b      	ldr	r3, [r7, #16]
 8018af6:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8018afa:	f003 0302 	and.w	r3, r3, #2
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	dd03      	ble.n	8018b0a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8018b02:	68fb      	ldr	r3, [r7, #12]
 8018b04:	2206      	movs	r2, #6
 8018b06:	711a      	strb	r2, [r3, #4]
 8018b08:	e002      	b.n	8018b10 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	2208      	movs	r2, #8
 8018b0e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8018b10:	68fb      	ldr	r3, [r7, #12]
 8018b12:	2200      	movs	r2, #0
 8018b14:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8018b16:	68fb      	ldr	r3, [r7, #12]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	71da      	strb	r2, [r3, #7]

		break;
 8018b1c:	e022      	b.n	8018b64 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8018b1e:	68fb      	ldr	r3, [r7, #12]
 8018b20:	2200      	movs	r2, #0
 8018b22:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8018b24:	68fb      	ldr	r3, [r7, #12]
 8018b26:	2208      	movs	r2, #8
 8018b28:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8018b2a:	e01b      	b.n	8018b64 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	2208      	movs	r2, #8
 8018b30:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8018b32:	e017      	b.n	8018b64 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	79db      	ldrb	r3, [r3, #7]
 8018b38:	f083 0301 	eor.w	r3, r3, #1
 8018b3c:	b2da      	uxtb	r2, r3
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	2208      	movs	r2, #8
 8018b46:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8018b48:	e00c      	b.n	8018b64 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	2203      	movs	r2, #3
 8018b4e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8018b50:	68fb      	ldr	r3, [r7, #12]
 8018b52:	2200      	movs	r2, #0
 8018b54:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	2202      	movs	r2, #2
 8018b5a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	2200      	movs	r2, #0
 8018b60:	71da      	strb	r2, [r3, #7]

		break;
 8018b62:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8018b64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	371c      	adds	r7, #28
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b72:	4770      	bx	lr

08018b74 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8018b74:	b480      	push	{r7}
 8018b76:	b089      	sub	sp, #36	@ 0x24
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8018b84:	69bb      	ldr	r3, [r7, #24]
 8018b86:	332c      	adds	r3, #44	@ 0x2c
 8018b88:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8018b8a:	69bb      	ldr	r3, [r7, #24]
 8018b8c:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8018b90:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8018b92:	2300      	movs	r3, #0
 8018b94:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8018b96:	2300      	movs	r3, #0
 8018b98:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8018b9e:	693b      	ldr	r3, [r7, #16]
 8018ba0:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8018ba2:	f003 031f 	and.w	r3, r3, #31
 8018ba6:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8018ba8:	693b      	ldr	r3, [r7, #16]
 8018baa:	78db      	ldrb	r3, [r3, #3]
 8018bac:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8018bae:	693b      	ldr	r3, [r7, #16]
 8018bb0:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8018bb2:	111b      	asrs	r3, r3, #4
 8018bb4:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8018bb6:	f003 0302 	and.w	r3, r3, #2
 8018bba:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8018bbc:	69bb      	ldr	r3, [r7, #24]
 8018bbe:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8018bc2:	f003 0320 	and.w	r3, r3, #32
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d017      	beq.n	8018bfa <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	791b      	ldrb	r3, [r3, #4]
 8018bce:	2b06      	cmp	r3, #6
 8018bd0:	d105      	bne.n	8018bde <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8018bd2:	7bfb      	ldrb	r3, [r7, #15]
 8018bd4:	2b12      	cmp	r3, #18
 8018bd6:	d010      	beq.n	8018bfa <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8018bd8:	23ef      	movs	r3, #239	@ 0xef
 8018bda:	77fb      	strb	r3, [r7, #31]
 8018bdc:	e00d      	b.n	8018bfa <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8018bde:	697b      	ldr	r3, [r7, #20]
 8018be0:	795b      	ldrb	r3, [r3, #5]
 8018be2:	7bba      	ldrb	r2, [r7, #14]
 8018be4:	429a      	cmp	r2, r3
 8018be6:	d001      	beq.n	8018bec <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8018be8:	23ee      	movs	r3, #238	@ 0xee
 8018bea:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8018bec:	697b      	ldr	r3, [r7, #20]
 8018bee:	799b      	ldrb	r3, [r3, #6]
 8018bf0:	7b7a      	ldrb	r2, [r7, #13]
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	d001      	beq.n	8018bfa <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8018bf6:	23ed      	movs	r3, #237	@ 0xed
 8018bf8:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8018bfa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018bfe:	4618      	mov	r0, r3
 8018c00:	3724      	adds	r7, #36	@ 0x24
 8018c02:	46bd      	mov	sp, r7
 8018c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c08:	4770      	bx	lr

08018c0a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8018c0a:	b480      	push	{r7}
 8018c0c:	b087      	sub	sp, #28
 8018c0e:	af00      	add	r7, sp, #0
 8018c10:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8018c12:	2300      	movs	r3, #0
 8018c14:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8018c1a:	693b      	ldr	r3, [r7, #16]
 8018c1c:	332c      	adds	r3, #44	@ 0x2c
 8018c1e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8018c20:	693b      	ldr	r3, [r7, #16]
 8018c22:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8018c26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d10c      	bne.n	8018c48 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	2203      	movs	r2, #3
 8018c32:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8018c34:	68fb      	ldr	r3, [r7, #12]
 8018c36:	2200      	movs	r2, #0
 8018c38:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	2202      	movs	r2, #2
 8018c3e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8018c40:	68fb      	ldr	r3, [r7, #12]
 8018c42:	2200      	movs	r2, #0
 8018c44:	70da      	strb	r2, [r3, #3]
 8018c46:	e03e      	b.n	8018cc6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	785b      	ldrb	r3, [r3, #1]
 8018c4c:	2bff      	cmp	r3, #255	@ 0xff
 8018c4e:	d103      	bne.n	8018c58 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	2280      	movs	r2, #128	@ 0x80
 8018c54:	705a      	strb	r2, [r3, #1]
 8018c56:	e005      	b.n	8018c64 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8018c58:	68fb      	ldr	r3, [r7, #12]
 8018c5a:	785b      	ldrb	r3, [r3, #1]
 8018c5c:	3301      	adds	r3, #1
 8018c5e:	b2da      	uxtb	r2, r3
 8018c60:	68fb      	ldr	r3, [r7, #12]
 8018c62:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	789b      	ldrb	r3, [r3, #2]
 8018c68:	f083 0302 	eor.w	r3, r3, #2
 8018c6c:	b2da      	uxtb	r2, r3
 8018c6e:	68fb      	ldr	r3, [r7, #12]
 8018c70:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	2b03      	cmp	r3, #3
 8018c78:	d002      	beq.n	8018c80 <VL53L1_update_ll_driver_cfg_state+0x76>
 8018c7a:	2b04      	cmp	r3, #4
 8018c7c:	d00e      	beq.n	8018c9c <VL53L1_update_ll_driver_cfg_state+0x92>
 8018c7e:	e015      	b.n	8018cac <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	78db      	ldrb	r3, [r3, #3]
 8018c84:	f083 0301 	eor.w	r3, r3, #1
 8018c88:	b2da      	uxtb	r2, r3
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	2201      	movs	r2, #1
 8018c92:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	2204      	movs	r2, #4
 8018c98:	701a      	strb	r2, [r3, #0]
		break;
 8018c9a:	e014      	b.n	8018cc6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	78db      	ldrb	r3, [r3, #3]
 8018ca0:	f083 0301 	eor.w	r3, r3, #1
 8018ca4:	b2da      	uxtb	r2, r3
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	70da      	strb	r2, [r3, #3]

		break;
 8018caa:	e00c      	b.n	8018cc6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	2203      	movs	r2, #3
 8018cb0:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8018cb2:	68fb      	ldr	r3, [r7, #12]
 8018cb4:	2200      	movs	r2, #0
 8018cb6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8018cb8:	68fb      	ldr	r3, [r7, #12]
 8018cba:	2202      	movs	r2, #2
 8018cbc:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	2200      	movs	r2, #0
 8018cc2:	70da      	strb	r2, [r3, #3]

		break;
 8018cc4:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8018cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018cca:	4618      	mov	r0, r3
 8018ccc:	371c      	adds	r7, #28
 8018cce:	46bd      	mov	sp, r7
 8018cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd4:	4770      	bx	lr

08018cd6 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8018cd6:	b480      	push	{r7}
 8018cd8:	b083      	sub	sp, #12
 8018cda:	af00      	add	r7, sp, #0
 8018cdc:	6078      	str	r0, [r7, #4]
 8018cde:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	7c1a      	ldrb	r2, [r3, #16]
 8018ce4:	683b      	ldr	r3, [r7, #0]
 8018ce6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	3301      	adds	r3, #1
 8018cec:	687a      	ldr	r2, [r7, #4]
 8018cee:	7c52      	ldrb	r2, [r2, #17]
 8018cf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	3302      	adds	r3, #2
 8018cf6:	687a      	ldr	r2, [r7, #4]
 8018cf8:	7c92      	ldrb	r2, [r2, #18]
 8018cfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	3303      	adds	r3, #3
 8018d00:	687a      	ldr	r2, [r7, #4]
 8018d02:	7cd2      	ldrb	r2, [r2, #19]
 8018d04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8018d06:	683b      	ldr	r3, [r7, #0]
 8018d08:	3304      	adds	r3, #4
 8018d0a:	687a      	ldr	r2, [r7, #4]
 8018d0c:	7d12      	ldrb	r2, [r2, #20]
 8018d0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	3305      	adds	r3, #5
 8018d14:	687a      	ldr	r2, [r7, #4]
 8018d16:	7d52      	ldrb	r2, [r2, #21]
 8018d18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	3306      	adds	r3, #6
 8018d1e:	687a      	ldr	r2, [r7, #4]
 8018d20:	7d92      	ldrb	r2, [r2, #22]
 8018d22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8018d24:	683b      	ldr	r3, [r7, #0]
 8018d26:	3307      	adds	r3, #7
 8018d28:	687a      	ldr	r2, [r7, #4]
 8018d2a:	7dd2      	ldrb	r2, [r2, #23]
 8018d2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8018d2e:	683b      	ldr	r3, [r7, #0]
 8018d30:	3308      	adds	r3, #8
 8018d32:	687a      	ldr	r2, [r7, #4]
 8018d34:	7e12      	ldrb	r2, [r2, #24]
 8018d36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	3309      	adds	r3, #9
 8018d3c:	687a      	ldr	r2, [r7, #4]
 8018d3e:	7e52      	ldrb	r2, [r2, #25]
 8018d40:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	330a      	adds	r3, #10
 8018d46:	687a      	ldr	r2, [r7, #4]
 8018d48:	7e92      	ldrb	r2, [r2, #26]
 8018d4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	330b      	adds	r3, #11
 8018d50:	687a      	ldr	r2, [r7, #4]
 8018d52:	7ed2      	ldrb	r2, [r2, #27]
 8018d54:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	330c      	adds	r3, #12
 8018d5a:	687a      	ldr	r2, [r7, #4]
 8018d5c:	7f12      	ldrb	r2, [r2, #28]
 8018d5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	330d      	adds	r3, #13
 8018d64:	687a      	ldr	r2, [r7, #4]
 8018d66:	7f52      	ldrb	r2, [r2, #29]
 8018d68:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8018d6a:	683b      	ldr	r3, [r7, #0]
 8018d6c:	330e      	adds	r3, #14
 8018d6e:	687a      	ldr	r2, [r7, #4]
 8018d70:	7f92      	ldrb	r2, [r2, #30]
 8018d72:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8018d74:	683b      	ldr	r3, [r7, #0]
 8018d76:	330f      	adds	r3, #15
 8018d78:	687a      	ldr	r2, [r7, #4]
 8018d7a:	7fd2      	ldrb	r2, [r2, #31]
 8018d7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8018d7e:	683b      	ldr	r3, [r7, #0]
 8018d80:	3310      	adds	r3, #16
 8018d82:	687a      	ldr	r2, [r7, #4]
 8018d84:	f892 2020 	ldrb.w	r2, [r2, #32]
 8018d88:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	3311      	adds	r3, #17
 8018d8e:	687a      	ldr	r2, [r7, #4]
 8018d90:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8018d94:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8018d96:	683b      	ldr	r3, [r7, #0]
 8018d98:	3312      	adds	r3, #18
 8018d9a:	687a      	ldr	r2, [r7, #4]
 8018d9c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8018da0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8018da2:	683b      	ldr	r3, [r7, #0]
 8018da4:	3313      	adds	r3, #19
 8018da6:	687a      	ldr	r2, [r7, #4]
 8018da8:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 8018dac:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	3314      	adds	r3, #20
 8018db2:	687a      	ldr	r2, [r7, #4]
 8018db4:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8018db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8018dba:	683b      	ldr	r3, [r7, #0]
 8018dbc:	3315      	adds	r3, #21
 8018dbe:	687a      	ldr	r2, [r7, #4]
 8018dc0:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8018dc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8018dc6:	683b      	ldr	r3, [r7, #0]
 8018dc8:	3316      	adds	r3, #22
 8018dca:	687a      	ldr	r2, [r7, #4]
 8018dcc:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8018dd0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	3317      	adds	r3, #23
 8018dd6:	687a      	ldr	r2, [r7, #4]
 8018dd8:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 8018ddc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8018dde:	683b      	ldr	r3, [r7, #0]
 8018de0:	3318      	adds	r3, #24
 8018de2:	687a      	ldr	r2, [r7, #4]
 8018de4:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 8018de8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8018dea:	683b      	ldr	r3, [r7, #0]
 8018dec:	3319      	adds	r3, #25
 8018dee:	687a      	ldr	r2, [r7, #4]
 8018df0:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 8018df4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8018df6:	683b      	ldr	r3, [r7, #0]
 8018df8:	331a      	adds	r3, #26
 8018dfa:	687a      	ldr	r2, [r7, #4]
 8018dfc:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8018e00:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8018e02:	683b      	ldr	r3, [r7, #0]
 8018e04:	331b      	adds	r3, #27
 8018e06:	687a      	ldr	r2, [r7, #4]
 8018e08:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 8018e0c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	331c      	adds	r3, #28
 8018e12:	687a      	ldr	r2, [r7, #4]
 8018e14:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8018e18:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	331d      	adds	r3, #29
 8018e1e:	687a      	ldr	r2, [r7, #4]
 8018e20:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8018e24:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8018e26:	683b      	ldr	r3, [r7, #0]
 8018e28:	331e      	adds	r3, #30
 8018e2a:	687a      	ldr	r2, [r7, #4]
 8018e2c:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8018e30:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	331f      	adds	r3, #31
 8018e36:	687a      	ldr	r2, [r7, #4]
 8018e38:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 8018e3c:	701a      	strb	r2, [r3, #0]
}
 8018e3e:	bf00      	nop
 8018e40:	370c      	adds	r7, #12
 8018e42:	46bd      	mov	sp, r7
 8018e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e48:	4770      	bx	lr

08018e4a <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8018e4a:	b480      	push	{r7}
 8018e4c:	b085      	sub	sp, #20
 8018e4e:	af00      	add	r7, sp, #0
 8018e50:	4603      	mov	r3, r0
 8018e52:	603a      	str	r2, [r7, #0]
 8018e54:	80fb      	strh	r3, [r7, #6]
 8018e56:	460b      	mov	r3, r1
 8018e58:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8018e5a:	2300      	movs	r3, #0
 8018e5c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8018e62:	88fb      	ldrh	r3, [r7, #6]
 8018e64:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8018e66:	2300      	movs	r3, #0
 8018e68:	81fb      	strh	r3, [r7, #14]
 8018e6a:	e00e      	b.n	8018e8a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8018e6c:	88ba      	ldrh	r2, [r7, #4]
 8018e6e:	89fb      	ldrh	r3, [r7, #14]
 8018e70:	1ad3      	subs	r3, r2, r3
 8018e72:	3b01      	subs	r3, #1
 8018e74:	683a      	ldr	r2, [r7, #0]
 8018e76:	4413      	add	r3, r2
 8018e78:	89ba      	ldrh	r2, [r7, #12]
 8018e7a:	b2d2      	uxtb	r2, r2
 8018e7c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8018e7e:	89bb      	ldrh	r3, [r7, #12]
 8018e80:	0a1b      	lsrs	r3, r3, #8
 8018e82:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8018e84:	89fb      	ldrh	r3, [r7, #14]
 8018e86:	3301      	adds	r3, #1
 8018e88:	81fb      	strh	r3, [r7, #14]
 8018e8a:	89fa      	ldrh	r2, [r7, #14]
 8018e8c:	88bb      	ldrh	r3, [r7, #4]
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	d3ec      	bcc.n	8018e6c <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8018e92:	bf00      	nop
 8018e94:	bf00      	nop
 8018e96:	3714      	adds	r7, #20
 8018e98:	46bd      	mov	sp, r7
 8018e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9e:	4770      	bx	lr

08018ea0 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8018ea0:	b480      	push	{r7}
 8018ea2:	b085      	sub	sp, #20
 8018ea4:	af00      	add	r7, sp, #0
 8018ea6:	4603      	mov	r3, r0
 8018ea8:	6039      	str	r1, [r7, #0]
 8018eaa:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 8018eac:	2300      	movs	r3, #0
 8018eae:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8018eb0:	e00a      	b.n	8018ec8 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8018eb2:	89fb      	ldrh	r3, [r7, #14]
 8018eb4:	021b      	lsls	r3, r3, #8
 8018eb6:	b21a      	sxth	r2, r3
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	1c59      	adds	r1, r3, #1
 8018ebc:	6039      	str	r1, [r7, #0]
 8018ebe:	781b      	ldrb	r3, [r3, #0]
 8018ec0:	b21b      	sxth	r3, r3
 8018ec2:	4313      	orrs	r3, r2
 8018ec4:	b21b      	sxth	r3, r3
 8018ec6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8018ec8:	88fb      	ldrh	r3, [r7, #6]
 8018eca:	1e5a      	subs	r2, r3, #1
 8018ecc:	80fa      	strh	r2, [r7, #6]
 8018ece:	2b00      	cmp	r3, #0
 8018ed0:	d1ef      	bne.n	8018eb2 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8018ed2:	89fb      	ldrh	r3, [r7, #14]
}
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	3714      	adds	r7, #20
 8018ed8:	46bd      	mov	sp, r7
 8018eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ede:	4770      	bx	lr

08018ee0 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8018ee0:	b480      	push	{r7}
 8018ee2:	b085      	sub	sp, #20
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	4603      	mov	r3, r0
 8018ee8:	603a      	str	r2, [r7, #0]
 8018eea:	80fb      	strh	r3, [r7, #6]
 8018eec:	460b      	mov	r3, r1
 8018eee:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8018ef0:	2300      	movs	r3, #0
 8018ef2:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8018ef8:	88fb      	ldrh	r3, [r7, #6]
 8018efa:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8018efc:	2300      	movs	r3, #0
 8018efe:	81fb      	strh	r3, [r7, #14]
 8018f00:	e00f      	b.n	8018f22 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8018f02:	88ba      	ldrh	r2, [r7, #4]
 8018f04:	89fb      	ldrh	r3, [r7, #14]
 8018f06:	1ad3      	subs	r3, r2, r3
 8018f08:	3b01      	subs	r3, #1
 8018f0a:	683a      	ldr	r2, [r7, #0]
 8018f0c:	4413      	add	r3, r2
 8018f0e:	89ba      	ldrh	r2, [r7, #12]
 8018f10:	b2d2      	uxtb	r2, r2
 8018f12:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8018f14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8018f18:	121b      	asrs	r3, r3, #8
 8018f1a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8018f1c:	89fb      	ldrh	r3, [r7, #14]
 8018f1e:	3301      	adds	r3, #1
 8018f20:	81fb      	strh	r3, [r7, #14]
 8018f22:	89fa      	ldrh	r2, [r7, #14]
 8018f24:	88bb      	ldrh	r3, [r7, #4]
 8018f26:	429a      	cmp	r2, r3
 8018f28:	d3eb      	bcc.n	8018f02 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 8018f2a:	bf00      	nop
 8018f2c:	bf00      	nop
 8018f2e:	3714      	adds	r7, #20
 8018f30:	46bd      	mov	sp, r7
 8018f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f36:	4770      	bx	lr

08018f38 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8018f38:	b480      	push	{r7}
 8018f3a:	b085      	sub	sp, #20
 8018f3c:	af00      	add	r7, sp, #0
 8018f3e:	4603      	mov	r3, r0
 8018f40:	6039      	str	r1, [r7, #0]
 8018f42:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8018f44:	2300      	movs	r3, #0
 8018f46:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	781b      	ldrb	r3, [r3, #0]
 8018f4c:	b25b      	sxtb	r3, r3
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	da0e      	bge.n	8018f70 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8018f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018f56:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8018f58:	e00a      	b.n	8018f70 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 8018f5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018f5e:	021b      	lsls	r3, r3, #8
 8018f60:	b21a      	sxth	r2, r3
 8018f62:	683b      	ldr	r3, [r7, #0]
 8018f64:	1c59      	adds	r1, r3, #1
 8018f66:	6039      	str	r1, [r7, #0]
 8018f68:	781b      	ldrb	r3, [r3, #0]
 8018f6a:	b21b      	sxth	r3, r3
 8018f6c:	4313      	orrs	r3, r2
 8018f6e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8018f70:	88fb      	ldrh	r3, [r7, #6]
 8018f72:	1e5a      	subs	r2, r3, #1
 8018f74:	80fa      	strh	r2, [r7, #6]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d1ef      	bne.n	8018f5a <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 8018f7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3714      	adds	r7, #20
 8018f82:	46bd      	mov	sp, r7
 8018f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f88:	4770      	bx	lr

08018f8a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8018f8a:	b480      	push	{r7}
 8018f8c:	b087      	sub	sp, #28
 8018f8e:	af00      	add	r7, sp, #0
 8018f90:	60f8      	str	r0, [r7, #12]
 8018f92:	460b      	mov	r3, r1
 8018f94:	607a      	str	r2, [r7, #4]
 8018f96:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8018fa0:	68fb      	ldr	r3, [r7, #12]
 8018fa2:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	82fb      	strh	r3, [r7, #22]
 8018fa8:	e00e      	b.n	8018fc8 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8018faa:	897a      	ldrh	r2, [r7, #10]
 8018fac:	8afb      	ldrh	r3, [r7, #22]
 8018fae:	1ad3      	subs	r3, r2, r3
 8018fb0:	3b01      	subs	r3, #1
 8018fb2:	687a      	ldr	r2, [r7, #4]
 8018fb4:	4413      	add	r3, r2
 8018fb6:	693a      	ldr	r2, [r7, #16]
 8018fb8:	b2d2      	uxtb	r2, r2
 8018fba:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8018fbc:	693b      	ldr	r3, [r7, #16]
 8018fbe:	0a1b      	lsrs	r3, r3, #8
 8018fc0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8018fc2:	8afb      	ldrh	r3, [r7, #22]
 8018fc4:	3301      	adds	r3, #1
 8018fc6:	82fb      	strh	r3, [r7, #22]
 8018fc8:	8afa      	ldrh	r2, [r7, #22]
 8018fca:	897b      	ldrh	r3, [r7, #10]
 8018fcc:	429a      	cmp	r2, r3
 8018fce:	d3ec      	bcc.n	8018faa <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8018fd0:	bf00      	nop
 8018fd2:	bf00      	nop
 8018fd4:	371c      	adds	r7, #28
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fdc:	4770      	bx	lr

08018fde <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8018fde:	b480      	push	{r7}
 8018fe0:	b085      	sub	sp, #20
 8018fe2:	af00      	add	r7, sp, #0
 8018fe4:	4603      	mov	r3, r0
 8018fe6:	6039      	str	r1, [r7, #0]
 8018fe8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8018fea:	2300      	movs	r3, #0
 8018fec:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8018fee:	e007      	b.n	8019000 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	021a      	lsls	r2, r3, #8
 8018ff4:	683b      	ldr	r3, [r7, #0]
 8018ff6:	1c59      	adds	r1, r3, #1
 8018ff8:	6039      	str	r1, [r7, #0]
 8018ffa:	781b      	ldrb	r3, [r3, #0]
 8018ffc:	4313      	orrs	r3, r2
 8018ffe:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8019000:	88fb      	ldrh	r3, [r7, #6]
 8019002:	1e5a      	subs	r2, r3, #1
 8019004:	80fa      	strh	r2, [r7, #6]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d1f2      	bne.n	8018ff0 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 801900a:	68fb      	ldr	r3, [r7, #12]
}
 801900c:	4618      	mov	r0, r3
 801900e:	3714      	adds	r7, #20
 8019010:	46bd      	mov	sp, r7
 8019012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019016:	4770      	bx	lr

08019018 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8019018:	b480      	push	{r7}
 801901a:	b085      	sub	sp, #20
 801901c:	af00      	add	r7, sp, #0
 801901e:	4603      	mov	r3, r0
 8019020:	6039      	str	r1, [r7, #0]
 8019022:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8019024:	2300      	movs	r3, #0
 8019026:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8019028:	683b      	ldr	r3, [r7, #0]
 801902a:	781b      	ldrb	r3, [r3, #0]
 801902c:	b25b      	sxtb	r3, r3
 801902e:	2b00      	cmp	r3, #0
 8019030:	da0b      	bge.n	801904a <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8019032:	f04f 33ff 	mov.w	r3, #4294967295
 8019036:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8019038:	e007      	b.n	801904a <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	021a      	lsls	r2, r3, #8
 801903e:	683b      	ldr	r3, [r7, #0]
 8019040:	1c59      	adds	r1, r3, #1
 8019042:	6039      	str	r1, [r7, #0]
 8019044:	781b      	ldrb	r3, [r3, #0]
 8019046:	4313      	orrs	r3, r2
 8019048:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 801904a:	88fb      	ldrh	r3, [r7, #6]
 801904c:	1e5a      	subs	r2, r3, #1
 801904e:	80fa      	strh	r2, [r7, #6]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d1f2      	bne.n	801903a <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8019054:	68fb      	ldr	r3, [r7, #12]
}
 8019056:	4618      	mov	r0, r3
 8019058:	3714      	adds	r7, #20
 801905a:	46bd      	mov	sp, r7
 801905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019060:	4770      	bx	lr

08019062 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8019062:	b580      	push	{r7, lr}
 8019064:	b086      	sub	sp, #24
 8019066:	af00      	add	r7, sp, #0
 8019068:	4603      	mov	r3, r0
 801906a:	460a      	mov	r2, r1
 801906c:	80fb      	strh	r3, [r7, #6]
 801906e:	4613      	mov	r3, r2
 8019070:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8019072:	2300      	movs	r3, #0
 8019074:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8019076:	2300      	movs	r3, #0
 8019078:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 801907a:	2300      	movs	r3, #0
 801907c:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 801907e:	88fb      	ldrh	r3, [r7, #6]
 8019080:	4618      	mov	r0, r3
 8019082:	f000 fb5f 	bl	8019744 <VL53L1_calc_pll_period_us>
 8019086:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8019088:	797b      	ldrb	r3, [r7, #5]
 801908a:	4618      	mov	r0, r3
 801908c:	f000 fb6e 	bl	801976c <VL53L1_decode_vcsel_period>
 8019090:	4603      	mov	r3, r0
 8019092:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8019094:	697a      	ldr	r2, [r7, #20]
 8019096:	4613      	mov	r3, r2
 8019098:	00db      	lsls	r3, r3, #3
 801909a:	4413      	add	r3, r2
 801909c:	021b      	lsls	r3, r3, #8
 801909e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	099b      	lsrs	r3, r3, #6
 80190a4:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 80190a6:	7cfa      	ldrb	r2, [r7, #19]
 80190a8:	68fb      	ldr	r3, [r7, #12]
 80190aa:	fb02 f303 	mul.w	r3, r2, r3
 80190ae:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	099b      	lsrs	r3, r3, #6
 80190b4:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 80190b6:	68fb      	ldr	r3, [r7, #12]
}
 80190b8:	4618      	mov	r0, r3
 80190ba:	3718      	adds	r7, #24
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}

080190c0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 80190c0:	b480      	push	{r7}
 80190c2:	b089      	sub	sp, #36	@ 0x24
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	60f8      	str	r0, [r7, #12]
 80190c8:	4608      	mov	r0, r1
 80190ca:	4611      	mov	r1, r2
 80190cc:	461a      	mov	r2, r3
 80190ce:	4603      	mov	r3, r0
 80190d0:	817b      	strh	r3, [r7, #10]
 80190d2:	460b      	mov	r3, r1
 80190d4:	813b      	strh	r3, [r7, #8]
 80190d6:	4613      	mov	r3, r2
 80190d8:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 80190da:	2300      	movs	r3, #0
 80190dc:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 80190de:	2300      	movs	r3, #0
 80190e0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80190e2:	2300      	movs	r3, #0
 80190e4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80190e6:	2300      	movs	r3, #0
 80190e8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80190ea:	2300      	movs	r3, #0
 80190ec:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	011b      	lsls	r3, r3, #4
 80190f2:	4a23      	ldr	r2, [pc, #140]	@ (8019180 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80190f4:	fb82 1203 	smull	r1, r2, r2, r3
 80190f8:	1192      	asrs	r2, r2, #6
 80190fa:	17db      	asrs	r3, r3, #31
 80190fc:	1ad3      	subs	r3, r2, r3
 80190fe:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8019100:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8019104:	2b00      	cmp	r3, #0
 8019106:	da03      	bge.n	8019110 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8019108:	897b      	ldrh	r3, [r7, #10]
 801910a:	425b      	negs	r3, r3
 801910c:	b29b      	uxth	r3, r3
 801910e:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8019110:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019114:	2b00      	cmp	r3, #0
 8019116:	da03      	bge.n	8019120 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8019118:	893b      	ldrh	r3, [r7, #8]
 801911a:	425b      	negs	r3, r3
 801911c:	b29b      	uxth	r3, r3
 801911e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8019120:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8019124:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8019128:	4413      	add	r3, r2
 801912a:	015b      	lsls	r3, r3, #5
 801912c:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 801912e:	697b      	ldr	r3, [r7, #20]
 8019130:	4a13      	ldr	r2, [pc, #76]	@ (8019180 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8019132:	fb82 1203 	smull	r1, r2, r2, r3
 8019136:	1192      	asrs	r2, r2, #6
 8019138:	17db      	asrs	r3, r3, #31
 801913a:	1ad3      	subs	r3, r2, r3
 801913c:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 801913e:	697a      	ldr	r2, [r7, #20]
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	4413      	add	r3, r2
 8019144:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8019146:	79fa      	ldrb	r2, [r7, #7]
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	fb02 f303 	mul.w	r3, r2, r3
 801914e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8019150:	697b      	ldr	r3, [r7, #20]
 8019152:	3310      	adds	r3, #16
 8019154:	2b00      	cmp	r3, #0
 8019156:	da00      	bge.n	801915a <VL53L1_calc_range_ignore_threshold+0x9a>
 8019158:	331f      	adds	r3, #31
 801915a:	115b      	asrs	r3, r3, #5
 801915c:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 801915e:	697b      	ldr	r3, [r7, #20]
 8019160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019164:	db03      	blt.n	801916e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8019166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801916a:	83fb      	strh	r3, [r7, #30]
 801916c:	e001      	b.n	8019172 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8019172:	8bfb      	ldrh	r3, [r7, #30]
}
 8019174:	4618      	mov	r0, r3
 8019176:	3724      	adds	r7, #36	@ 0x24
 8019178:	46bd      	mov	sp, r7
 801917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917e:	4770      	bx	lr
 8019180:	10624dd3 	.word	0x10624dd3

08019184 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8019184:	b480      	push	{r7}
 8019186:	b085      	sub	sp, #20
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
 801918c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 801918e:	2300      	movs	r3, #0
 8019190:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	031a      	lsls	r2, r3, #12
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	085b      	lsrs	r3, r3, #1
 801919a:	441a      	add	r2, r3
	timeout_mclks   =
 801919c:	683b      	ldr	r3, [r7, #0]
 801919e:	fbb2 f3f3 	udiv	r3, r2, r3
 80191a2:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 80191a4:	68fb      	ldr	r3, [r7, #12]
}
 80191a6:	4618      	mov	r0, r3
 80191a8:	3714      	adds	r7, #20
 80191aa:	46bd      	mov	sp, r7
 80191ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191b0:	4770      	bx	lr

080191b2 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 80191b2:	b580      	push	{r7, lr}
 80191b4:	b084      	sub	sp, #16
 80191b6:	af00      	add	r7, sp, #0
 80191b8:	6078      	str	r0, [r7, #4]
 80191ba:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 80191bc:	2300      	movs	r3, #0
 80191be:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 80191c0:	2300      	movs	r3, #0
 80191c2:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 80191c4:	6839      	ldr	r1, [r7, #0]
 80191c6:	6878      	ldr	r0, [r7, #4]
 80191c8:	f7ff ffdc 	bl	8019184 <VL53L1_calc_timeout_mclks>
 80191cc:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 80191ce:	68f8      	ldr	r0, [r7, #12]
 80191d0:	f000 f860 	bl	8019294 <VL53L1_encode_timeout>
 80191d4:	4603      	mov	r3, r0
 80191d6:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 80191d8:	897b      	ldrh	r3, [r7, #10]
}
 80191da:	4618      	mov	r0, r3
 80191dc:	3710      	adds	r7, #16
 80191de:	46bd      	mov	sp, r7
 80191e0:	bd80      	pop	{r7, pc}

080191e2 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80191e2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80191e6:	b087      	sub	sp, #28
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
 80191ec:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80191ee:	2100      	movs	r1, #0
 80191f0:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80191f2:	f04f 0000 	mov.w	r0, #0
 80191f6:	f04f 0100 	mov.w	r1, #0
 80191fa:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80191fe:	6879      	ldr	r1, [r7, #4]
 8019200:	2000      	movs	r0, #0
 8019202:	4688      	mov	r8, r1
 8019204:	4681      	mov	r9, r0
 8019206:	6839      	ldr	r1, [r7, #0]
 8019208:	2000      	movs	r0, #0
 801920a:	460c      	mov	r4, r1
 801920c:	4605      	mov	r5, r0
 801920e:	fb04 f009 	mul.w	r0, r4, r9
 8019212:	fb08 f105 	mul.w	r1, r8, r5
 8019216:	4401      	add	r1, r0
 8019218:	fba8 2304 	umull	r2, r3, r8, r4
 801921c:	4419      	add	r1, r3
 801921e:	460b      	mov	r3, r1
 8019220:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8019224:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8019228:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801922c:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8019230:	f143 0b00 	adc.w	fp, r3, #0
 8019234:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8019238:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801923c:	f04f 0200 	mov.w	r2, #0
 8019240:	f04f 0300 	mov.w	r3, #0
 8019244:	0b02      	lsrs	r2, r0, #12
 8019246:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 801924a:	0b0b      	lsrs	r3, r1, #12
 801924c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8019250:	68bb      	ldr	r3, [r7, #8]
 8019252:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8019254:	697b      	ldr	r3, [r7, #20]
}
 8019256:	4618      	mov	r0, r3
 8019258:	371c      	adds	r7, #28
 801925a:	46bd      	mov	sp, r7
 801925c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8019260:	4770      	bx	lr

08019262 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8019262:	b580      	push	{r7, lr}
 8019264:	b084      	sub	sp, #16
 8019266:	af00      	add	r7, sp, #0
 8019268:	4603      	mov	r3, r0
 801926a:	6039      	str	r1, [r7, #0]
 801926c:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 801926e:	2300      	movs	r3, #0
 8019270:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8019272:	2300      	movs	r3, #0
 8019274:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8019276:	88fb      	ldrh	r3, [r7, #6]
 8019278:	4618      	mov	r0, r3
 801927a:	f000 f835 	bl	80192e8 <VL53L1_decode_timeout>
 801927e:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8019280:	6839      	ldr	r1, [r7, #0]
 8019282:	68f8      	ldr	r0, [r7, #12]
 8019284:	f7ff ffad 	bl	80191e2 <VL53L1_calc_timeout_us>
 8019288:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 801928a:	68bb      	ldr	r3, [r7, #8]
}
 801928c:	4618      	mov	r0, r3
 801928e:	3710      	adds	r7, #16
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}

08019294 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8019294:	b480      	push	{r7}
 8019296:	b087      	sub	sp, #28
 8019298:	af00      	add	r7, sp, #0
 801929a:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 801929c:	2300      	movs	r3, #0
 801929e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 80192a0:	2300      	movs	r3, #0
 80192a2:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 80192a4:	2300      	movs	r3, #0
 80192a6:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d015      	beq.n	80192da <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	3b01      	subs	r3, #1
 80192b2:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 80192b4:	e005      	b.n	80192c2 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 80192b6:	693b      	ldr	r3, [r7, #16]
 80192b8:	085b      	lsrs	r3, r3, #1
 80192ba:	613b      	str	r3, [r7, #16]
			ms_byte++;
 80192bc:	89fb      	ldrh	r3, [r7, #14]
 80192be:	3301      	adds	r3, #1
 80192c0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 80192c2:	693b      	ldr	r3, [r7, #16]
 80192c4:	2bff      	cmp	r3, #255	@ 0xff
 80192c6:	d8f6      	bhi.n	80192b6 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 80192c8:	89fb      	ldrh	r3, [r7, #14]
 80192ca:	021b      	lsls	r3, r3, #8
 80192cc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 80192ce:	693b      	ldr	r3, [r7, #16]
 80192d0:	b29b      	uxth	r3, r3
 80192d2:	b2db      	uxtb	r3, r3
 80192d4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 80192d6:	4413      	add	r3, r2
 80192d8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 80192da:	8afb      	ldrh	r3, [r7, #22]
}
 80192dc:	4618      	mov	r0, r3
 80192de:	371c      	adds	r7, #28
 80192e0:	46bd      	mov	sp, r7
 80192e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192e6:	4770      	bx	lr

080192e8 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 80192e8:	b480      	push	{r7}
 80192ea:	b085      	sub	sp, #20
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	4603      	mov	r3, r0
 80192f0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80192f2:	2300      	movs	r3, #0
 80192f4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80192f6:	88fb      	ldrh	r3, [r7, #6]
 80192f8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80192fa:	88fa      	ldrh	r2, [r7, #6]
 80192fc:	0a12      	lsrs	r2, r2, #8
 80192fe:	b292      	uxth	r2, r2
 8019300:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8019302:	3301      	adds	r3, #1
 8019304:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8019306:	68fb      	ldr	r3, [r7, #12]
}
 8019308:	4618      	mov	r0, r3
 801930a:	3714      	adds	r7, #20
 801930c:	46bd      	mov	sp, r7
 801930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019312:	4770      	bx	lr

08019314 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8019314:	b580      	push	{r7, lr}
 8019316:	b088      	sub	sp, #32
 8019318:	af00      	add	r7, sp, #0
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	607a      	str	r2, [r7, #4]
 8019320:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019322:	2300      	movs	r3, #0
 8019324:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8019326:	2300      	movs	r3, #0
 8019328:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 801932a:	2300      	movs	r3, #0
 801932c:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 801932e:	2300      	movs	r3, #0
 8019330:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8019332:	887b      	ldrh	r3, [r7, #2]
 8019334:	2b00      	cmp	r3, #0
 8019336:	d102      	bne.n	801933e <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8019338:	23f1      	movs	r3, #241	@ 0xf1
 801933a:	77fb      	strb	r3, [r7, #31]
 801933c:	e05d      	b.n	80193fa <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 801933e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019340:	799a      	ldrb	r2, [r3, #6]
 8019342:	887b      	ldrh	r3, [r7, #2]
 8019344:	4611      	mov	r1, r2
 8019346:	4618      	mov	r0, r3
 8019348:	f7ff fe8b 	bl	8019062 <VL53L1_calc_macro_period_us>
 801934c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 801934e:	6979      	ldr	r1, [r7, #20]
 8019350:	68f8      	ldr	r0, [r7, #12]
 8019352:	f7ff ff17 	bl	8019184 <VL53L1_calc_timeout_mclks>
 8019356:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8019358:	69bb      	ldr	r3, [r7, #24]
 801935a:	2bff      	cmp	r3, #255	@ 0xff
 801935c:	d901      	bls.n	8019362 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 801935e:	23ff      	movs	r3, #255	@ 0xff
 8019360:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8019362:	69bb      	ldr	r3, [r7, #24]
 8019364:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8019366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019368:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 801936a:	6979      	ldr	r1, [r7, #20]
 801936c:	68b8      	ldr	r0, [r7, #8]
 801936e:	f7ff ff20 	bl	80191b2 <VL53L1_calc_encoded_timeout>
 8019372:	4603      	mov	r3, r0
 8019374:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8019376:	8a7b      	ldrh	r3, [r7, #18]
 8019378:	0a1b      	lsrs	r3, r3, #8
 801937a:	b29b      	uxth	r3, r3
 801937c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 801937e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019380:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8019382:	8a7b      	ldrh	r3, [r7, #18]
 8019384:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8019386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019388:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 801938a:	6979      	ldr	r1, [r7, #20]
 801938c:	6878      	ldr	r0, [r7, #4]
 801938e:	f7ff ff10 	bl	80191b2 <VL53L1_calc_encoded_timeout>
 8019392:	4603      	mov	r3, r0
 8019394:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8019396:	8a7b      	ldrh	r3, [r7, #18]
 8019398:	0a1b      	lsrs	r3, r3, #8
 801939a:	b29b      	uxth	r3, r3
 801939c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 801939e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193a0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80193a2:	8a7b      	ldrh	r3, [r7, #18]
 80193a4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 80193a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193a8:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80193aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193ac:	7a5a      	ldrb	r2, [r3, #9]
 80193ae:	887b      	ldrh	r3, [r7, #2]
 80193b0:	4611      	mov	r1, r2
 80193b2:	4618      	mov	r0, r3
 80193b4:	f7ff fe55 	bl	8019062 <VL53L1_calc_macro_period_us>
 80193b8:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 80193ba:	6979      	ldr	r1, [r7, #20]
 80193bc:	68b8      	ldr	r0, [r7, #8]
 80193be:	f7ff fef8 	bl	80191b2 <VL53L1_calc_encoded_timeout>
 80193c2:	4603      	mov	r3, r0
 80193c4:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80193c6:	8a7b      	ldrh	r3, [r7, #18]
 80193c8:	0a1b      	lsrs	r3, r3, #8
 80193ca:	b29b      	uxth	r3, r3
 80193cc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 80193ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193d0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80193d2:	8a7b      	ldrh	r3, [r7, #18]
 80193d4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 80193d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193d8:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 80193da:	6979      	ldr	r1, [r7, #20]
 80193dc:	6878      	ldr	r0, [r7, #4]
 80193de:	f7ff fee8 	bl	80191b2 <VL53L1_calc_encoded_timeout>
 80193e2:	4603      	mov	r3, r0
 80193e4:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80193e6:	8a7b      	ldrh	r3, [r7, #18]
 80193e8:	0a1b      	lsrs	r3, r3, #8
 80193ea:	b29b      	uxth	r3, r3
 80193ec:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80193ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193f0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80193f2:	8a7b      	ldrh	r3, [r7, #18]
 80193f4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80193f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80193f8:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80193fa:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80193fe:	4618      	mov	r0, r3
 8019400:	3720      	adds	r7, #32
 8019402:	46bd      	mov	sp, r7
 8019404:	bd80      	pop	{r7, pc}

08019406 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8019406:	b480      	push	{r7}
 8019408:	b083      	sub	sp, #12
 801940a:	af00      	add	r7, sp, #0
 801940c:	4603      	mov	r3, r0
 801940e:	603a      	str	r2, [r7, #0]
 8019410:	71fb      	strb	r3, [r7, #7]
 8019412:	460b      	mov	r3, r1
 8019414:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8019416:	79fb      	ldrb	r3, [r7, #7]
 8019418:	2b07      	cmp	r3, #7
 801941a:	d90a      	bls.n	8019432 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 801941c:	79bb      	ldrb	r3, [r7, #6]
 801941e:	00db      	lsls	r3, r3, #3
 8019420:	b2da      	uxtb	r2, r3
 8019422:	79fb      	ldrb	r3, [r7, #7]
 8019424:	1ad3      	subs	r3, r2, r3
 8019426:	b2db      	uxtb	r3, r3
 8019428:	3b71      	subs	r3, #113	@ 0x71
 801942a:	b2da      	uxtb	r2, r3
 801942c:	683b      	ldr	r3, [r7, #0]
 801942e:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8019430:	e00a      	b.n	8019448 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8019432:	79bb      	ldrb	r3, [r7, #6]
 8019434:	f1c3 030f 	rsb	r3, r3, #15
 8019438:	b2db      	uxtb	r3, r3
 801943a:	00db      	lsls	r3, r3, #3
 801943c:	b2da      	uxtb	r2, r3
 801943e:	79fb      	ldrb	r3, [r7, #7]
 8019440:	4413      	add	r3, r2
 8019442:	b2da      	uxtb	r2, r3
 8019444:	683b      	ldr	r3, [r7, #0]
 8019446:	701a      	strb	r2, [r3, #0]
}
 8019448:	bf00      	nop
 801944a:	370c      	adds	r7, #12
 801944c:	46bd      	mov	sp, r7
 801944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019452:	4770      	bx	lr

08019454 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8019454:	b480      	push	{r7}
 8019456:	b085      	sub	sp, #20
 8019458:	af00      	add	r7, sp, #0
 801945a:	4603      	mov	r3, r0
 801945c:	60b9      	str	r1, [r7, #8]
 801945e:	607a      	str	r2, [r7, #4]
 8019460:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8019462:	7bfb      	ldrb	r3, [r7, #15]
 8019464:	091b      	lsrs	r3, r3, #4
 8019466:	b2da      	uxtb	r2, r3
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 801946c:	7bfb      	ldrb	r3, [r7, #15]
 801946e:	f003 030f 	and.w	r3, r3, #15
 8019472:	b2da      	uxtb	r2, r3
 8019474:	68bb      	ldr	r3, [r7, #8]
 8019476:	701a      	strb	r2, [r3, #0]

}
 8019478:	bf00      	nop
 801947a:	3714      	adds	r7, #20
 801947c:	46bd      	mov	sp, r7
 801947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019482:	4770      	bx	lr

08019484 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8019484:	b480      	push	{r7}
 8019486:	b083      	sub	sp, #12
 8019488:	af00      	add	r7, sp, #0
 801948a:	4603      	mov	r3, r0
 801948c:	603a      	str	r2, [r7, #0]
 801948e:	71fb      	strb	r3, [r7, #7]
 8019490:	460b      	mov	r3, r1
 8019492:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8019494:	79bb      	ldrb	r3, [r7, #6]
 8019496:	011b      	lsls	r3, r3, #4
 8019498:	b2da      	uxtb	r2, r3
 801949a:	79fb      	ldrb	r3, [r7, #7]
 801949c:	4413      	add	r3, r2
 801949e:	b2da      	uxtb	r2, r3
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	701a      	strb	r2, [r3, #0]

}
 80194a4:	bf00      	nop
 80194a6:	370c      	adds	r7, #12
 80194a8:	46bd      	mov	sp, r7
 80194aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ae:	4770      	bx	lr

080194b0 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 80194b0:	b480      	push	{r7}
 80194b2:	b085      	sub	sp, #20
 80194b4:	af00      	add	r7, sp, #0
 80194b6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80194b8:	2300      	movs	r3, #0
 80194ba:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 80194c0:	68bb      	ldr	r3, [r7, #8]
 80194c2:	2203      	movs	r2, #3
 80194c4:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80194c8:	68bb      	ldr	r3, [r7, #8]
 80194ca:	2200      	movs	r2, #0
 80194cc:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80194d0:	68bb      	ldr	r3, [r7, #8]
 80194d2:	2200      	movs	r2, #0
 80194d4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80194d8:	68bb      	ldr	r3, [r7, #8]
 80194da:	2200      	movs	r2, #0
 80194dc:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80194e0:	68bb      	ldr	r3, [r7, #8]
 80194e2:	2200      	movs	r2, #0
 80194e4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80194e8:	68bb      	ldr	r3, [r7, #8]
 80194ea:	2200      	movs	r2, #0
 80194ec:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80194f0:	68bb      	ldr	r3, [r7, #8]
 80194f2:	2200      	movs	r2, #0
 80194f4:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80194f8:	68bb      	ldr	r3, [r7, #8]
 80194fa:	2200      	movs	r2, #0
 80194fc:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8019500:	68bb      	ldr	r3, [r7, #8]
 8019502:	2200      	movs	r2, #0
 8019504:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8019508:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801950c:	4618      	mov	r0, r3
 801950e:	3714      	adds	r7, #20
 8019510:	46bd      	mov	sp, r7
 8019512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019516:	4770      	bx	lr

08019518 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8019518:	b480      	push	{r7}
 801951a:	b085      	sub	sp, #20
 801951c:	af00      	add	r7, sp, #0
 801951e:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8019520:	2300      	movs	r3, #0
 8019522:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8019528:	68bb      	ldr	r3, [r7, #8]
 801952a:	22ff      	movs	r2, #255	@ 0xff
 801952c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8019530:	68bb      	ldr	r3, [r7, #8]
 8019532:	2200      	movs	r2, #0
 8019534:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8019538:	68bb      	ldr	r3, [r7, #8]
 801953a:	2200      	movs	r2, #0
 801953c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8019540:	68bb      	ldr	r3, [r7, #8]
 8019542:	2200      	movs	r2, #0
 8019544:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 801954e:	2b00      	cmp	r3, #0
 8019550:	d005      	beq.n	801955e <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8019552:	68bb      	ldr	r3, [r7, #8]
 8019554:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
		pdev->stat_nvm.vhv_config__init =
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 801955e:	68bb      	ldr	r3, [r7, #8]
 8019560:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
 8019564:	2b00      	cmp	r3, #0
 8019566:	d005      	beq.n	8019574 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8019568:	68bb      	ldr	r3, [r7, #8]
 801956a:	f893 22e9 	ldrb.w	r2, [r3, #745]	@ 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 801956e:	68bb      	ldr	r3, [r7, #8]
 8019570:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8019574:	68bb      	ldr	r3, [r7, #8]
 8019576:	2200      	movs	r2, #0
 8019578:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d

	LOG_FUNCTION_END(status);

	return status;
 801957c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019580:	4618      	mov	r0, r3
 8019582:	3714      	adds	r7, #20
 8019584:	46bd      	mov	sp, r7
 8019586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801958a:	4770      	bx	lr

0801958c <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 801958c:	b480      	push	{r7}
 801958e:	b087      	sub	sp, #28
 8019590:	af00      	add	r7, sp, #0
 8019592:	60f8      	str	r0, [r7, #12]
 8019594:	60b9      	str	r1, [r7, #8]
 8019596:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8019598:	2300      	movs	r3, #0
 801959a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	2201      	movs	r2, #1
 80195a0:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	2200      	movs	r2, #0
 80195a6:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 80195a8:	68bb      	ldr	r3, [r7, #8]
 80195aa:	228b      	movs	r2, #139	@ 0x8b
 80195ac:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 80195b4:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	2202      	movs	r2, #2
 80195ba:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 80195bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80195c0:	4618      	mov	r0, r3
 80195c2:	371c      	adds	r7, #28
 80195c4:	46bd      	mov	sp, r7
 80195c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ca:	4770      	bx	lr

080195cc <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 80195cc:	b480      	push	{r7}
 80195ce:	b085      	sub	sp, #20
 80195d0:	af00      	add	r7, sp, #0
 80195d2:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80195d8:	2300      	movs	r3, #0
 80195da:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 80195fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80195fe:	b2da      	uxtb	r2, r3
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 801960c:	f003 0303 	and.w	r3, r3, #3
 8019610:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8019612:	68fb      	ldr	r3, [r7, #12]
 8019614:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8019618:	009b      	lsls	r3, r3, #2
 801961a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 801961c:	4413      	add	r3, r2
 801961e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8019620:	68fb      	ldr	r3, [r7, #12]
 8019622:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8019626:	68fb      	ldr	r3, [r7, #12]
 8019628:	2201      	movs	r2, #1
 801962a:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 801962e:	68fb      	ldr	r3, [r7, #12]
 8019630:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 801963a:	68fb      	ldr	r3, [r7, #12]
 801963c:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8019640:	68fb      	ldr	r3, [r7, #12]
 8019642:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8019646:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801964a:	4618      	mov	r0, r3
 801964c:	3714      	adds	r7, #20
 801964e:	46bd      	mov	sp, r7
 8019650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019654:	4770      	bx	lr

08019656 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8019656:	b480      	push	{r7}
 8019658:	b087      	sub	sp, #28
 801965a:	af00      	add	r7, sp, #0
 801965c:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8019662:	2300      	movs	r3, #0
 8019664:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	f8b3 31de 	ldrh.w	r3, [r3, #478]	@ 0x1de
 801966c:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 801966e:	68fb      	ldr	r3, [r7, #12]
 8019670:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	@ 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8019674:	4413      	add	r3, r2
 8019676:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8019678:	693b      	ldr	r3, [r7, #16]
 801967a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801967e:	d302      	bcc.n	8019686 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8019680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019684:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	041b      	lsls	r3, r3, #16
 801968a:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8019692:	2b00      	cmp	r3, #0
 8019694:	d102      	bne.n	801969c <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8019696:	23f1      	movs	r3, #241	@ 0xf1
 8019698:	75fb      	strb	r3, [r7, #23]
 801969a:	e035      	b.n	8019708 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 80196a2:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 80196a4:	693b      	ldr	r3, [r7, #16]
 80196a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80196aa:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 80196ac:	68fb      	ldr	r3, [r7, #12]
 80196ae:	693a      	ldr	r2, [r7, #16]
 80196b0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80196ba:	041b      	lsls	r3, r3, #16
 80196bc:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 80196be:	68fb      	ldr	r3, [r7, #12]
 80196c0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80196c4:	2b00      	cmp	r3, #0
 80196c6:	d102      	bne.n	80196ce <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80196c8:	23f1      	movs	r3, #241	@ 0xf1
 80196ca:	75fb      	strb	r3, [r7, #23]
 80196cc:	e01c      	b.n	8019708 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
			utemp32a = utemp32a /
 80196d4:	693a      	ldr	r2, [r7, #16]
 80196d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80196da:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 80196dc:	693b      	ldr	r3, [r7, #16]
 80196de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80196e2:	d302      	bcc.n	80196ea <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 80196e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80196e8:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80196ea:	693b      	ldr	r3, [r7, #16]
 80196ec:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8019700:	68fb      	ldr	r3, [r7, #12]
 8019702:	2202      	movs	r2, #2
 8019704:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8019708:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801970c:	f113 0f0f 	cmn.w	r3, #15
 8019710:	d110      	bne.n	8019734 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8019712:	68fb      	ldr	r3, [r7, #12]
 8019714:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8019718:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 801971c:	68fb      	ldr	r3, [r7, #12]
 801971e:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	2202      	movs	r2, #2
 801972c:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8019730:	2300      	movs	r3, #0
 8019732:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 8019734:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019738:	4618      	mov	r0, r3
 801973a:	371c      	adds	r7, #28
 801973c:	46bd      	mov	sp, r7
 801973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019742:	4770      	bx	lr

08019744 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8019744:	b480      	push	{r7}
 8019746:	b085      	sub	sp, #20
 8019748:	af00      	add	r7, sp, #0
 801974a:	4603      	mov	r3, r0
 801974c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 801974e:	2300      	movs	r3, #0
 8019750:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8019752:	88fb      	ldrh	r3, [r7, #6]
 8019754:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8019758:	fb92 f3f3 	sdiv	r3, r2, r3
 801975c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 801975e:	68fb      	ldr	r3, [r7, #12]
}
 8019760:	4618      	mov	r0, r3
 8019762:	3714      	adds	r7, #20
 8019764:	46bd      	mov	sp, r7
 8019766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801976a:	4770      	bx	lr

0801976c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 801976c:	b480      	push	{r7}
 801976e:	b085      	sub	sp, #20
 8019770:	af00      	add	r7, sp, #0
 8019772:	4603      	mov	r3, r0
 8019774:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8019776:	2300      	movs	r3, #0
 8019778:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 801977a:	79fb      	ldrb	r3, [r7, #7]
 801977c:	3301      	adds	r3, #1
 801977e:	b2db      	uxtb	r3, r3
 8019780:	005b      	lsls	r3, r3, #1
 8019782:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8019784:	7bfb      	ldrb	r3, [r7, #15]
}
 8019786:	4618      	mov	r0, r3
 8019788:	3714      	adds	r7, #20
 801978a:	46bd      	mov	sp, r7
 801978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019790:	4770      	bx	lr

08019792 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8019792:	b480      	push	{r7}
 8019794:	b085      	sub	sp, #20
 8019796:	af00      	add	r7, sp, #0
 8019798:	4603      	mov	r3, r0
 801979a:	60b9      	str	r1, [r7, #8]
 801979c:	607a      	str	r2, [r7, #4]
 801979e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 80197a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80197a4:	2b00      	cmp	r3, #0
 80197a6:	da10      	bge.n	80197ca <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 80197a8:	7bfb      	ldrb	r3, [r7, #15]
 80197aa:	43db      	mvns	r3, r3
 80197ac:	b2db      	uxtb	r3, r3
 80197ae:	f003 0307 	and.w	r3, r3, #7
 80197b2:	b2db      	uxtb	r3, r3
 80197b4:	3308      	adds	r3, #8
 80197b6:	b2da      	uxtb	r2, r3
 80197b8:	68bb      	ldr	r3, [r7, #8]
 80197ba:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80197bc:	7bfb      	ldrb	r3, [r7, #15]
 80197be:	3b80      	subs	r3, #128	@ 0x80
 80197c0:	10db      	asrs	r3, r3, #3
 80197c2:	b2da      	uxtb	r2, r3
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80197c8:	e00c      	b.n	80197e4 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80197ca:	7bfb      	ldrb	r3, [r7, #15]
 80197cc:	f003 0307 	and.w	r3, r3, #7
 80197d0:	b2da      	uxtb	r2, r3
 80197d2:	68bb      	ldr	r3, [r7, #8]
 80197d4:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80197d6:	7bfb      	ldrb	r3, [r7, #15]
 80197d8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80197dc:	10db      	asrs	r3, r3, #3
 80197de:	b2da      	uxtb	r2, r3
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	701a      	strb	r2, [r3, #0]
}
 80197e4:	bf00      	nop
 80197e6:	3714      	adds	r7, #20
 80197e8:	46bd      	mov	sp, r7
 80197ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ee:	4770      	bx	lr

080197f0 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80197f0:	b580      	push	{r7, lr}
 80197f2:	b086      	sub	sp, #24
 80197f4:	af00      	add	r7, sp, #0
 80197f6:	60f8      	str	r0, [r7, #12]
 80197f8:	460b      	mov	r3, r1
 80197fa:	607a      	str	r2, [r7, #4]
 80197fc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80197fe:	2300      	movs	r3, #0
 8019800:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8019802:	897b      	ldrh	r3, [r7, #10]
 8019804:	2b0a      	cmp	r3, #10
 8019806:	d802      	bhi.n	801980e <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8019808:	f06f 0309 	mvn.w	r3, #9
 801980c:	e047      	b.n	801989e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 801980e:	68fb      	ldr	r3, [r7, #12]
 8019810:	781b      	ldrb	r3, [r3, #0]
 8019812:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8019816:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801981c:	68fb      	ldr	r3, [r7, #12]
 801981e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8019824:	f002 020f 	and.w	r2, r2, #15
 8019828:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801982a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8019834:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019838:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801983a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801983c:	68fb      	ldr	r3, [r7, #12]
 801983e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8019844:	f002 0203 	and.w	r2, r2, #3
 8019848:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801984a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8019854:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019858:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801985a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	88d8      	ldrh	r0, [r3, #6]
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	3305      	adds	r3, #5
 8019864:	461a      	mov	r2, r3
 8019866:	2102      	movs	r1, #2
 8019868:	f7ff faef 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8019870:	68fa      	ldr	r2, [r7, #12]
 8019872:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8019874:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801987a:	68fa      	ldr	r2, [r7, #12]
 801987c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 801987e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8019880:	68fb      	ldr	r3, [r7, #12]
 8019882:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8019884:	687b      	ldr	r3, [r7, #4]
 8019886:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8019888:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801988c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801988e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8019894:	68fa      	ldr	r2, [r7, #12]
 8019896:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8019898:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801989a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801989e:	4618      	mov	r0, r3
 80198a0:	3718      	adds	r7, #24
 80198a2:	46bd      	mov	sp, r7
 80198a4:	bd80      	pop	{r7, pc}

080198a6 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 80198a6:	b580      	push	{r7, lr}
 80198a8:	b086      	sub	sp, #24
 80198aa:	af00      	add	r7, sp, #0
 80198ac:	4603      	mov	r3, r0
 80198ae:	60b9      	str	r1, [r7, #8]
 80198b0:	607a      	str	r2, [r7, #4]
 80198b2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80198b4:	2300      	movs	r3, #0
 80198b6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80198b8:	89fb      	ldrh	r3, [r7, #14]
 80198ba:	2b0a      	cmp	r3, #10
 80198bc:	d802      	bhi.n	80198c4 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80198be:	f06f 0309 	mvn.w	r3, #9
 80198c2:	e046      	b.n	8019952 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80198c4:	68bb      	ldr	r3, [r7, #8]
 80198c6:	781b      	ldrb	r3, [r3, #0]
 80198c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80198cc:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80198d2:	68bb      	ldr	r3, [r7, #8]
 80198d4:	3301      	adds	r3, #1
 80198d6:	781b      	ldrb	r3, [r3, #0]
 80198d8:	f003 030f 	and.w	r3, r3, #15
 80198dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80198e2:	68bb      	ldr	r3, [r7, #8]
 80198e4:	3302      	adds	r3, #2
 80198e6:	781b      	ldrb	r3, [r3, #0]
 80198e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80198ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80198f2:	68bb      	ldr	r3, [r7, #8]
 80198f4:	3303      	adds	r3, #3
 80198f6:	781b      	ldrb	r3, [r3, #0]
 80198f8:	f003 0303 	and.w	r3, r3, #3
 80198fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8019902:	68bb      	ldr	r3, [r7, #8]
 8019904:	3304      	adds	r3, #4
 8019906:	781b      	ldrb	r3, [r3, #0]
 8019908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801990c:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8019912:	68bb      	ldr	r3, [r7, #8]
 8019914:	3305      	adds	r3, #5
 8019916:	4619      	mov	r1, r3
 8019918:	2002      	movs	r0, #2
 801991a:	f7ff fac1 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801991e:	4603      	mov	r3, r0
 8019920:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8019926:	68bb      	ldr	r3, [r7, #8]
 8019928:	79da      	ldrb	r2, [r3, #7]
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	7a1a      	ldrb	r2, [r3, #8]
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8019936:	68bb      	ldr	r3, [r7, #8]
 8019938:	3309      	adds	r3, #9
 801993a:	781b      	ldrb	r3, [r3, #0]
 801993c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019940:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8019946:	68bb      	ldr	r3, [r7, #8]
 8019948:	7a9a      	ldrb	r2, [r3, #10]
 801994a:	687b      	ldr	r3, [r7, #4]
 801994c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 801994e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019952:	4618      	mov	r0, r3
 8019954:	3718      	adds	r7, #24
 8019956:	46bd      	mov	sp, r7
 8019958:	bd80      	pop	{r7, pc}

0801995a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801995a:	b580      	push	{r7, lr}
 801995c:	b086      	sub	sp, #24
 801995e:	af00      	add	r7, sp, #0
 8019960:	6078      	str	r0, [r7, #4]
 8019962:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019964:	2300      	movs	r3, #0
 8019966:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8019968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d108      	bne.n	8019982 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8019970:	f107 020c 	add.w	r2, r7, #12
 8019974:	230b      	movs	r3, #11
 8019976:	2101      	movs	r1, #1
 8019978:	6878      	ldr	r0, [r7, #4]
 801997a:	f7f3 fd96 	bl	800d4aa <VL53L1_ReadMulti>
 801997e:	4603      	mov	r3, r0
 8019980:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8019982:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019986:	2b00      	cmp	r3, #0
 8019988:	d108      	bne.n	801999c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801998a:	f107 030c 	add.w	r3, r7, #12
 801998e:	683a      	ldr	r2, [r7, #0]
 8019990:	4619      	mov	r1, r3
 8019992:	200b      	movs	r0, #11
 8019994:	f7ff ff87 	bl	80198a6 <VL53L1_i2c_decode_static_nvm_managed>
 8019998:	4603      	mov	r3, r0
 801999a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801999c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80199a0:	4618      	mov	r0, r3
 80199a2:	3718      	adds	r7, #24
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bd80      	pop	{r7, pc}

080199a8 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80199a8:	b580      	push	{r7, lr}
 80199aa:	b086      	sub	sp, #24
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	60f8      	str	r0, [r7, #12]
 80199b0:	460b      	mov	r3, r1
 80199b2:	607a      	str	r2, [r7, #4]
 80199b4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80199b6:	2300      	movs	r3, #0
 80199b8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80199ba:	897b      	ldrh	r3, [r7, #10]
 80199bc:	2b16      	cmp	r3, #22
 80199be:	d802      	bhi.n	80199c6 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80199c0:	f06f 0309 	mvn.w	r3, #9
 80199c4:	e076      	b.n	8019ab4 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80199ca:	687b      	ldr	r3, [r7, #4]
 80199cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80199d2:	68fa      	ldr	r2, [r7, #12]
 80199d4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80199d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80199d8:	687b      	ldr	r3, [r7, #4]
 80199da:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80199dc:	68fa      	ldr	r2, [r7, #12]
 80199de:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80199e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80199e6:	68fa      	ldr	r2, [r7, #12]
 80199e8:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80199ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80199f0:	68fa      	ldr	r2, [r7, #12]
 80199f2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80199f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80199fe:	f002 020f 	and.w	r2, r2, #15
 8019a02:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8019a04:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8019a0a:	68fa      	ldr	r2, [r7, #12]
 8019a0c:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8019a0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8019a18:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019a1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8019a1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8019a28:	f002 0203 	and.w	r2, r2, #3
 8019a2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8019a2e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	8958      	ldrh	r0, [r3, #10]
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	3309      	adds	r3, #9
 8019a38:	461a      	mov	r2, r3
 8019a3a:	2102      	movs	r1, #2
 8019a3c:	f7ff fa05 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	330b      	adds	r3, #11
 8019a4a:	461a      	mov	r2, r3
 8019a4c:	2102      	movs	r1, #2
 8019a4e:	f7ff fa47 	bl	8018ee0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8019a52:	68fb      	ldr	r3, [r7, #12]
 8019a54:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	330d      	adds	r3, #13
 8019a5c:	461a      	mov	r2, r3
 8019a5e:	2102      	movs	r1, #2
 8019a60:	f7ff fa3e 	bl	8018ee0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	8a18      	ldrh	r0, [r3, #16]
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	330f      	adds	r3, #15
 8019a6c:	461a      	mov	r2, r3
 8019a6e:	2102      	movs	r1, #2
 8019a70:	f7ff f9eb 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8019a7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a7e:	b218      	sxth	r0, r3
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	3311      	adds	r3, #17
 8019a84:	461a      	mov	r2, r3
 8019a86:	2102      	movs	r1, #2
 8019a88:	f7ff fa2a 	bl	8018ee0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8019a92:	687b      	ldr	r3, [r7, #4]
 8019a94:	3313      	adds	r3, #19
 8019a96:	461a      	mov	r2, r3
 8019a98:	2102      	movs	r1, #2
 8019a9a:	f7ff fa21 	bl	8018ee0 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	3315      	adds	r3, #21
 8019aa8:	461a      	mov	r2, r3
 8019aaa:	2102      	movs	r1, #2
 8019aac:	f7ff fa18 	bl	8018ee0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8019ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019ab4:	4618      	mov	r0, r3
 8019ab6:	3718      	adds	r7, #24
 8019ab8:	46bd      	mov	sp, r7
 8019aba:	bd80      	pop	{r7, pc}

08019abc <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b086      	sub	sp, #24
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	60b9      	str	r1, [r7, #8]
 8019ac6:	607a      	str	r2, [r7, #4]
 8019ac8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019aca:	2300      	movs	r3, #0
 8019acc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8019ace:	89fb      	ldrh	r3, [r7, #14]
 8019ad0:	2b16      	cmp	r3, #22
 8019ad2:	d802      	bhi.n	8019ada <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8019ad4:	f06f 0309 	mvn.w	r3, #9
 8019ad8:	e079      	b.n	8019bce <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	785a      	ldrb	r2, [r3, #1]
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8019aea:	68bb      	ldr	r3, [r7, #8]
 8019aec:	789a      	ldrb	r2, [r3, #2]
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	78da      	ldrb	r2, [r3, #3]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8019afa:	68bb      	ldr	r3, [r7, #8]
 8019afc:	791a      	ldrb	r2, [r3, #4]
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8019b02:	68bb      	ldr	r3, [r7, #8]
 8019b04:	3305      	adds	r3, #5
 8019b06:	781b      	ldrb	r3, [r3, #0]
 8019b08:	f003 030f 	and.w	r3, r3, #15
 8019b0c:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8019b12:	68bb      	ldr	r3, [r7, #8]
 8019b14:	799a      	ldrb	r2, [r3, #6]
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8019b1a:	68bb      	ldr	r3, [r7, #8]
 8019b1c:	3307      	adds	r3, #7
 8019b1e:	781b      	ldrb	r3, [r3, #0]
 8019b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019b24:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8019b2a:	68bb      	ldr	r3, [r7, #8]
 8019b2c:	3308      	adds	r3, #8
 8019b2e:	781b      	ldrb	r3, [r3, #0]
 8019b30:	f003 0303 	and.w	r3, r3, #3
 8019b34:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8019b3a:	68bb      	ldr	r3, [r7, #8]
 8019b3c:	3309      	adds	r3, #9
 8019b3e:	4619      	mov	r1, r3
 8019b40:	2002      	movs	r0, #2
 8019b42:	f7ff f9ad 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 8019b46:	4603      	mov	r3, r0
 8019b48:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	330b      	adds	r3, #11
 8019b52:	4619      	mov	r1, r3
 8019b54:	2002      	movs	r0, #2
 8019b56:	f7ff f9ef 	bl	8018f38 <VL53L1_i2c_decode_int16_t>
 8019b5a:	4603      	mov	r3, r0
 8019b5c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8019b62:	68bb      	ldr	r3, [r7, #8]
 8019b64:	330d      	adds	r3, #13
 8019b66:	4619      	mov	r1, r3
 8019b68:	2002      	movs	r0, #2
 8019b6a:	f7ff f9e5 	bl	8018f38 <VL53L1_i2c_decode_int16_t>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	330f      	adds	r3, #15
 8019b7a:	4619      	mov	r1, r3
 8019b7c:	2002      	movs	r0, #2
 8019b7e:	f7ff f98f 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 8019b82:	4603      	mov	r3, r0
 8019b84:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	3311      	adds	r3, #17
 8019b8e:	4619      	mov	r1, r3
 8019b90:	2002      	movs	r0, #2
 8019b92:	f7ff f9d1 	bl	8018f38 <VL53L1_i2c_decode_int16_t>
 8019b96:	4603      	mov	r3, r0
 8019b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b9c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	3313      	adds	r3, #19
 8019ba6:	4619      	mov	r1, r3
 8019ba8:	2002      	movs	r0, #2
 8019baa:	f7ff f9c5 	bl	8018f38 <VL53L1_i2c_decode_int16_t>
 8019bae:	4603      	mov	r3, r0
 8019bb0:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	3315      	adds	r3, #21
 8019bba:	4619      	mov	r1, r3
 8019bbc:	2002      	movs	r0, #2
 8019bbe:	f7ff f9bb 	bl	8018f38 <VL53L1_i2c_decode_int16_t>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8019bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3718      	adds	r7, #24
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd80      	pop	{r7, pc}

08019bd6 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8019bd6:	b580      	push	{r7, lr}
 8019bd8:	b088      	sub	sp, #32
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	6078      	str	r0, [r7, #4]
 8019bde:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019be0:	2300      	movs	r3, #0
 8019be2:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8019be4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d108      	bne.n	8019bfe <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8019bec:	f107 0208 	add.w	r2, r7, #8
 8019bf0:	2317      	movs	r3, #23
 8019bf2:	210d      	movs	r1, #13
 8019bf4:	6878      	ldr	r0, [r7, #4]
 8019bf6:	f7f3 fc58 	bl	800d4aa <VL53L1_ReadMulti>
 8019bfa:	4603      	mov	r3, r0
 8019bfc:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8019bfe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d108      	bne.n	8019c18 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8019c06:	f107 0308 	add.w	r3, r7, #8
 8019c0a:	683a      	ldr	r2, [r7, #0]
 8019c0c:	4619      	mov	r1, r3
 8019c0e:	2017      	movs	r0, #23
 8019c10:	f7ff ff54 	bl	8019abc <VL53L1_i2c_decode_customer_nvm_managed>
 8019c14:	4603      	mov	r3, r0
 8019c16:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8019c18:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019c1c:	4618      	mov	r0, r3
 8019c1e:	3720      	adds	r7, #32
 8019c20:	46bd      	mov	sp, r7
 8019c22:	bd80      	pop	{r7, pc}

08019c24 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8019c24:	b580      	push	{r7, lr}
 8019c26:	b086      	sub	sp, #24
 8019c28:	af00      	add	r7, sp, #0
 8019c2a:	60f8      	str	r0, [r7, #12]
 8019c2c:	460b      	mov	r3, r1
 8019c2e:	607a      	str	r2, [r7, #4]
 8019c30:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019c32:	2300      	movs	r3, #0
 8019c34:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8019c36:	897b      	ldrh	r3, [r7, #10]
 8019c38:	2b1f      	cmp	r3, #31
 8019c3a:	d802      	bhi.n	8019c42 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8019c3c:	f06f 0309 	mvn.w	r3, #9
 8019c40:	e0cf      	b.n	8019de2 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	881b      	ldrh	r3, [r3, #0]
 8019c46:	687a      	ldr	r2, [r7, #4]
 8019c48:	2102      	movs	r1, #2
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	f7ff f8fd 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8019c58:	f002 0201 	and.w	r2, r2, #1
 8019c5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8019c5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8019c60:	68fb      	ldr	r3, [r7, #12]
 8019c62:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8019c68:	f002 020f 	and.w	r2, r2, #15
 8019c6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8019c6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8019c78:	f002 020f 	and.w	r2, r2, #15
 8019c7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8019c7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8019c88:	f002 021f 	and.w	r2, r2, #31
 8019c8c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8019c8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8019c98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019c9c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8019c9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8019ca4:	687b      	ldr	r3, [r7, #4]
 8019ca6:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8019ca8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019cac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8019cae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8019cb0:	68fb      	ldr	r3, [r7, #12]
 8019cb2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8019cb8:	f002 0201 	and.w	r2, r2, #1
 8019cbc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8019cbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8019cc4:	68fa      	ldr	r2, [r7, #12]
 8019cc6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8019cc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8019cd2:	f002 0201 	and.w	r2, r2, #1
 8019cd6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8019cd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8019cde:	687b      	ldr	r3, [r7, #4]
 8019ce0:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8019ce2:	f002 0203 	and.w	r2, r2, #3
 8019ce6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8019ce8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8019cf2:	f002 021f 	and.w	r2, r2, #31
 8019cf6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8019cf8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8019cfe:	687b      	ldr	r3, [r7, #4]
 8019d00:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8019d02:	f002 0203 	and.w	r2, r2, #3
 8019d06:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8019d08:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8019d12:	f002 0203 	and.w	r2, r2, #3
 8019d16:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8019d18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8019d22:	f002 0207 	and.w	r2, r2, #7
 8019d26:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8019d28:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8019d2a:	68fb      	ldr	r3, [r7, #12]
 8019d2c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8019d2e:	687b      	ldr	r3, [r7, #4]
 8019d30:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8019d32:	f002 021f 	and.w	r2, r2, #31
 8019d36:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8019d38:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8019d42:	f002 0201 	and.w	r2, r2, #1
 8019d46:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8019d48:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8019d4e:	68fa      	ldr	r2, [r7, #12]
 8019d50:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8019d52:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8019d58:	68fa      	ldr	r2, [r7, #12]
 8019d5a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8019d5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8019d5e:	687b      	ldr	r3, [r7, #4]
 8019d60:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8019d62:	68fa      	ldr	r2, [r7, #12]
 8019d64:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8019d66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8019d6c:	68fa      	ldr	r2, [r7, #12]
 8019d6e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8019d70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8019d76:	68fa      	ldr	r2, [r7, #12]
 8019d78:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8019d7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8019d80:	68fa      	ldr	r2, [r7, #12]
 8019d82:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8019d84:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	8b18      	ldrh	r0, [r3, #24]
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	3318      	adds	r3, #24
 8019d8e:	461a      	mov	r2, r3
 8019d90:	2102      	movs	r1, #2
 8019d92:	f7ff f85a 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 8019d9a:	68fa      	ldr	r2, [r7, #12]
 8019d9c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 8019d9e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8019da4:	68fa      	ldr	r2, [r7, #12]
 8019da6:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8019da8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 8019daa:	68fb      	ldr	r3, [r7, #12]
 8019dac:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8019db2:	f002 020f 	and.w	r2, r2, #15
 8019db6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8019db8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 8019dbe:	68fa      	ldr	r2, [r7, #12]
 8019dc0:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8019dc2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 8019dcc:	f002 020f 	and.w	r2, r2, #15
 8019dd0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8019dd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8019dd8:	68fa      	ldr	r2, [r7, #12]
 8019dda:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 8019ddc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8019dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019de2:	4618      	mov	r0, r3
 8019de4:	3718      	adds	r7, #24
 8019de6:	46bd      	mov	sp, r7
 8019de8:	bd80      	pop	{r7, pc}

08019dea <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8019dea:	b580      	push	{r7, lr}
 8019dec:	b086      	sub	sp, #24
 8019dee:	af00      	add	r7, sp, #0
 8019df0:	60f8      	str	r0, [r7, #12]
 8019df2:	460b      	mov	r3, r1
 8019df4:	607a      	str	r2, [r7, #4]
 8019df6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019df8:	2300      	movs	r3, #0
 8019dfa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8019dfc:	897b      	ldrh	r3, [r7, #10]
 8019dfe:	2b15      	cmp	r3, #21
 8019e00:	d802      	bhi.n	8019e08 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8019e02:	f06f 0309 	mvn.w	r3, #9
 8019e06:	e070      	b.n	8019eea <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 8019e08:	68fb      	ldr	r3, [r7, #12]
 8019e0a:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8019e0c:	687b      	ldr	r3, [r7, #4]
 8019e0e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8019e14:	68fa      	ldr	r2, [r7, #12]
 8019e16:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8019e18:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8019e1e:	68fa      	ldr	r2, [r7, #12]
 8019e20:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8019e22:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 8019e2c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019e30:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8019e32:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8019e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019e3c:	b298      	uxth	r0, r3
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	3304      	adds	r3, #4
 8019e42:	461a      	mov	r2, r3
 8019e44:	2102      	movs	r1, #2
 8019e46:	f7ff f800 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8019e52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019e56:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8019e58:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8019e5e:	68fa      	ldr	r2, [r7, #12]
 8019e60:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8019e62:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8019e68:	68fa      	ldr	r2, [r7, #12]
 8019e6a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8019e6c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 8019e6e:	68fb      	ldr	r3, [r7, #12]
 8019e70:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8019e76:	f002 0201 	and.w	r2, r2, #1
 8019e7a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8019e7c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 8019e7e:	68fb      	ldr	r3, [r7, #12]
 8019e80:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8019e86:	f002 0207 	and.w	r2, r2, #7
 8019e8a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8019e8c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	8998      	ldrh	r0, [r3, #12]
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	330c      	adds	r3, #12
 8019e96:	461a      	mov	r2, r3
 8019e98:	2102      	movs	r1, #2
 8019e9a:	f7fe ffd6 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 8019e9e:	68fb      	ldr	r3, [r7, #12]
 8019ea0:	89d8      	ldrh	r0, [r3, #14]
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	330e      	adds	r3, #14
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	2102      	movs	r1, #2
 8019eaa:	f7fe ffce 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	8a18      	ldrh	r0, [r3, #16]
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	3310      	adds	r3, #16
 8019eb6:	461a      	mov	r2, r3
 8019eb8:	2102      	movs	r1, #2
 8019eba:	f7fe ffc6 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8019ec2:	68fa      	ldr	r2, [r7, #12]
 8019ec4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8019ec6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 8019ecc:	68fa      	ldr	r2, [r7, #12]
 8019ece:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8019ed0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8019ed6:	68fa      	ldr	r2, [r7, #12]
 8019ed8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8019eda:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 8019ee0:	68fa      	ldr	r2, [r7, #12]
 8019ee2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8019ee4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8019ee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019eea:	4618      	mov	r0, r3
 8019eec:	3718      	adds	r7, #24
 8019eee:	46bd      	mov	sp, r7
 8019ef0:	bd80      	pop	{r7, pc}

08019ef2 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8019ef2:	b580      	push	{r7, lr}
 8019ef4:	b086      	sub	sp, #24
 8019ef6:	af00      	add	r7, sp, #0
 8019ef8:	60f8      	str	r0, [r7, #12]
 8019efa:	460b      	mov	r3, r1
 8019efc:	607a      	str	r2, [r7, #4]
 8019efe:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8019f00:	2300      	movs	r3, #0
 8019f02:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 8019f04:	897b      	ldrh	r3, [r7, #10]
 8019f06:	2b16      	cmp	r3, #22
 8019f08:	d802      	bhi.n	8019f10 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8019f0a:	f06f 0309 	mvn.w	r3, #9
 8019f0e:	e06e      	b.n	8019fee <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	781b      	ldrb	r3, [r3, #0]
 8019f14:	f003 030f 	and.w	r3, r3, #15
 8019f18:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8019f22:	68fa      	ldr	r2, [r7, #12]
 8019f24:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8019f26:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8019f30:	f002 020f 	and.w	r2, r2, #15
 8019f34:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8019f36:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8019f3c:	68fa      	ldr	r2, [r7, #12]
 8019f3e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8019f40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8019f4a:	f002 020f 	and.w	r2, r2, #15
 8019f4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8019f50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8019f56:	68fa      	ldr	r2, [r7, #12]
 8019f58:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8019f5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8019f60:	687b      	ldr	r3, [r7, #4]
 8019f62:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8019f64:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019f68:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8019f6a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8019f74:	f002 020f 	and.w	r2, r2, #15
 8019f78:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8019f7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8019f80:	68fa      	ldr	r2, [r7, #12]
 8019f82:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8019f84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8019f8e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019f92:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8019f94:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8019f96:	68fb      	ldr	r3, [r7, #12]
 8019f98:	8958      	ldrh	r0, [r3, #10]
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	330a      	adds	r3, #10
 8019f9e:	461a      	mov	r2, r3
 8019fa0:	2102      	movs	r1, #2
 8019fa2:	f7fe ff52 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8019fa6:	68fb      	ldr	r3, [r7, #12]
 8019fa8:	8998      	ldrh	r0, [r3, #12]
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	330c      	adds	r3, #12
 8019fae:	461a      	mov	r2, r3
 8019fb0:	2102      	movs	r1, #2
 8019fb2:	f7fe ff4a 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8019fb6:	687b      	ldr	r3, [r7, #4]
 8019fb8:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 8019fba:	68fa      	ldr	r2, [r7, #12]
 8019fbc:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 8019fbe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8019fc0:	687b      	ldr	r3, [r7, #4]
 8019fc2:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8019fc4:	68fa      	ldr	r2, [r7, #12]
 8019fc6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8019fc8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	6918      	ldr	r0, [r3, #16]
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	3312      	adds	r3, #18
 8019fd2:	461a      	mov	r2, r3
 8019fd4:	2104      	movs	r1, #4
 8019fd6:	f7fe ffd8 	bl	8018f8a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 8019fe2:	f002 0201 	and.w	r2, r2, #1
 8019fe6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 8019fe8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8019fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3718      	adds	r7, #24
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}

08019ff6 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8019ff6:	b580      	push	{r7, lr}
 8019ff8:	b086      	sub	sp, #24
 8019ffa:	af00      	add	r7, sp, #0
 8019ffc:	60f8      	str	r0, [r7, #12]
 8019ffe:	460b      	mov	r3, r1
 801a000:	607a      	str	r2, [r7, #4]
 801a002:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a004:	2300      	movs	r3, #0
 801a006:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 801a008:	897b      	ldrh	r3, [r7, #10]
 801a00a:	2b11      	cmp	r3, #17
 801a00c:	d802      	bhi.n	801a014 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801a00e:	f06f 0309 	mvn.w	r3, #9
 801a012:	e071      	b.n	801a0f8 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	f003 0303 	and.w	r3, r3, #3
 801a01c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801a022:	68fb      	ldr	r3, [r7, #12]
 801a024:	8858      	ldrh	r0, [r3, #2]
 801a026:	687b      	ldr	r3, [r7, #4]
 801a028:	3301      	adds	r3, #1
 801a02a:	461a      	mov	r2, r3
 801a02c:	2102      	movs	r1, #2
 801a02e:	f7fe ff0c 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 801a032:	68fb      	ldr	r3, [r7, #12]
 801a034:	8898      	ldrh	r0, [r3, #4]
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	3303      	adds	r3, #3
 801a03a:	461a      	mov	r2, r3
 801a03c:	2102      	movs	r1, #2
 801a03e:	f7fe ff04 	bl	8018e4a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801a04a:	f002 0201 	and.w	r2, r2, #1
 801a04e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801a050:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 801a052:	68fb      	ldr	r3, [r7, #12]
 801a054:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 801a05a:	f002 0207 	and.w	r2, r2, #7
 801a05e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801a060:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 801a066:	68fa      	ldr	r2, [r7, #12]
 801a068:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801a06a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 801a070:	68fa      	ldr	r2, [r7, #12]
 801a072:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 801a074:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801a07e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a082:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801a084:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801a08e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a092:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 801a094:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801a09e:	f002 0203 	and.w	r2, r2, #3
 801a0a2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801a0a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 801a0ae:	f002 0203 	and.w	r2, r2, #3
 801a0b2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 801a0b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 801a0b6:	68fb      	ldr	r3, [r7, #12]
 801a0b8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 801a0be:	f002 020f 	and.w	r2, r2, #15
 801a0c2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 801a0c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 801a0ca:	68fa      	ldr	r2, [r7, #12]
 801a0cc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 801a0ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 801a0d4:	68fa      	ldr	r2, [r7, #12]
 801a0d6:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 801a0d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 801a0e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 801a0ec:	f002 0203 	and.w	r2, r2, #3
 801a0f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 801a0f2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801a0f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a0f8:	4618      	mov	r0, r3
 801a0fa:	3718      	adds	r7, #24
 801a0fc:	46bd      	mov	sp, r7
 801a0fe:	bd80      	pop	{r7, pc}

0801a100 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 801a100:	b480      	push	{r7}
 801a102:	b087      	sub	sp, #28
 801a104:	af00      	add	r7, sp, #0
 801a106:	60f8      	str	r0, [r7, #12]
 801a108:	460b      	mov	r3, r1
 801a10a:	607a      	str	r2, [r7, #4]
 801a10c:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a10e:	2300      	movs	r3, #0
 801a110:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 801a112:	897b      	ldrh	r3, [r7, #10]
 801a114:	2b04      	cmp	r3, #4
 801a116:	d802      	bhi.n	801a11e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801a118:	f06f 0309 	mvn.w	r3, #9
 801a11c:	e025      	b.n	801a16a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	781b      	ldrb	r3, [r3, #0]
 801a122:	f003 0301 	and.w	r3, r3, #1
 801a126:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 801a12c:	68fb      	ldr	r3, [r7, #12]
 801a12e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 801a134:	f002 0201 	and.w	r2, r2, #1
 801a138:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801a13a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 801a144:	f002 0201 	and.w	r2, r2, #1
 801a148:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801a14a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 801a154:	f002 0203 	and.w	r2, r2, #3
 801a158:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801a15a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 801a160:	68fa      	ldr	r2, [r7, #12]
 801a162:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 801a164:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801a166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a16a:	4618      	mov	r0, r3
 801a16c:	371c      	adds	r7, #28
 801a16e:	46bd      	mov	sp, r7
 801a170:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a174:	4770      	bx	lr

0801a176 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 801a176:	b580      	push	{r7, lr}
 801a178:	b084      	sub	sp, #16
 801a17a:	af00      	add	r7, sp, #0
 801a17c:	6078      	str	r0, [r7, #4]
 801a17e:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a180:	2300      	movs	r3, #0
 801a182:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 801a184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d108      	bne.n	801a19e <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 801a18c:	f107 0308 	add.w	r3, r7, #8
 801a190:	461a      	mov	r2, r3
 801a192:	2105      	movs	r1, #5
 801a194:	6838      	ldr	r0, [r7, #0]
 801a196:	f7ff ffb3 	bl	801a100 <VL53L1_i2c_encode_system_control>
 801a19a:	4603      	mov	r3, r0
 801a19c:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 801a19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d108      	bne.n	801a1b8 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 801a1a6:	f107 0208 	add.w	r2, r7, #8
 801a1aa:	2305      	movs	r3, #5
 801a1ac:	2183      	movs	r1, #131	@ 0x83
 801a1ae:	6878      	ldr	r0, [r7, #4]
 801a1b0:	f7f3 f955 	bl	800d45e <VL53L1_WriteMulti>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 801a1b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a1bc:	4618      	mov	r0, r3
 801a1be:	3710      	adds	r7, #16
 801a1c0:	46bd      	mov	sp, r7
 801a1c2:	bd80      	pop	{r7, pc}

0801a1c4 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 801a1c4:	b580      	push	{r7, lr}
 801a1c6:	b086      	sub	sp, #24
 801a1c8:	af00      	add	r7, sp, #0
 801a1ca:	4603      	mov	r3, r0
 801a1cc:	60b9      	str	r1, [r7, #8]
 801a1ce:	607a      	str	r2, [r7, #4]
 801a1d0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a1d2:	2300      	movs	r3, #0
 801a1d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 801a1d6:	89fb      	ldrh	r3, [r7, #14]
 801a1d8:	2b2b      	cmp	r3, #43	@ 0x2b
 801a1da:	d802      	bhi.n	801a1e2 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801a1dc:	f06f 0309 	mvn.w	r3, #9
 801a1e0:	e0e2      	b.n	801a3a8 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 801a1e2:	68bb      	ldr	r3, [r7, #8]
 801a1e4:	781b      	ldrb	r3, [r3, #0]
 801a1e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a1ea:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 801a1f0:	68bb      	ldr	r3, [r7, #8]
 801a1f2:	785a      	ldrb	r2, [r3, #1]
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 801a1f8:	68bb      	ldr	r3, [r7, #8]
 801a1fa:	3302      	adds	r3, #2
 801a1fc:	781b      	ldrb	r3, [r3, #0]
 801a1fe:	f003 030f 	and.w	r3, r3, #15
 801a202:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 801a208:	68bb      	ldr	r3, [r7, #8]
 801a20a:	78da      	ldrb	r2, [r3, #3]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 801a210:	68bb      	ldr	r3, [r7, #8]
 801a212:	3304      	adds	r3, #4
 801a214:	4619      	mov	r1, r3
 801a216:	2002      	movs	r0, #2
 801a218:	f7fe fe42 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a21c:	4603      	mov	r3, r0
 801a21e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 801a224:	68bb      	ldr	r3, [r7, #8]
 801a226:	3306      	adds	r3, #6
 801a228:	4619      	mov	r1, r3
 801a22a:	2002      	movs	r0, #2
 801a22c:	f7fe fe38 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a230:	4603      	mov	r3, r0
 801a232:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 801a238:	68bb      	ldr	r3, [r7, #8]
 801a23a:	3308      	adds	r3, #8
 801a23c:	4619      	mov	r1, r3
 801a23e:	2002      	movs	r0, #2
 801a240:	f7fe fe2e 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a244:	4603      	mov	r3, r0
 801a246:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	330a      	adds	r3, #10
 801a250:	4619      	mov	r1, r3
 801a252:	2002      	movs	r0, #2
 801a254:	f7fe fe24 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a258:	4603      	mov	r3, r0
 801a25a:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	330c      	adds	r3, #12
 801a264:	4619      	mov	r1, r3
 801a266:	2002      	movs	r0, #2
 801a268:	f7fe fe1a 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a26c:	4603      	mov	r3, r0
 801a26e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 801a274:	68bb      	ldr	r3, [r7, #8]
 801a276:	330e      	adds	r3, #14
 801a278:	4619      	mov	r1, r3
 801a27a:	2002      	movs	r0, #2
 801a27c:	f7fe fe10 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a280:	4603      	mov	r3, r0
 801a282:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 801a284:	687b      	ldr	r3, [r7, #4]
 801a286:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 801a288:	68bb      	ldr	r3, [r7, #8]
 801a28a:	3310      	adds	r3, #16
 801a28c:	4619      	mov	r1, r3
 801a28e:	2002      	movs	r0, #2
 801a290:	f7fe fe06 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a294:	4603      	mov	r3, r0
 801a296:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 801a29c:	68bb      	ldr	r3, [r7, #8]
 801a29e:	3312      	adds	r3, #18
 801a2a0:	4619      	mov	r1, r3
 801a2a2:	2002      	movs	r0, #2
 801a2a4:	f7fe fdfc 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 801a2ac:	687b      	ldr	r3, [r7, #4]
 801a2ae:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 801a2b0:	68bb      	ldr	r3, [r7, #8]
 801a2b2:	3314      	adds	r3, #20
 801a2b4:	4619      	mov	r1, r3
 801a2b6:	2002      	movs	r0, #2
 801a2b8:	f7fe fdf2 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a2bc:	4603      	mov	r3, r0
 801a2be:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801a2c4:	68bb      	ldr	r3, [r7, #8]
 801a2c6:	3316      	adds	r3, #22
 801a2c8:	4619      	mov	r1, r3
 801a2ca:	2002      	movs	r0, #2
 801a2cc:	f7fe fde8 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801a2d8:	68bb      	ldr	r3, [r7, #8]
 801a2da:	3318      	adds	r3, #24
 801a2dc:	4619      	mov	r1, r3
 801a2de:	2002      	movs	r0, #2
 801a2e0:	f7fe fdde 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 801a2ec:	68bb      	ldr	r3, [r7, #8]
 801a2ee:	331a      	adds	r3, #26
 801a2f0:	4619      	mov	r1, r3
 801a2f2:	2002      	movs	r0, #2
 801a2f4:	f7fe fdd4 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a2f8:	4603      	mov	r3, r0
 801a2fa:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	331c      	adds	r3, #28
 801a304:	4619      	mov	r1, r3
 801a306:	2002      	movs	r0, #2
 801a308:	f7fe fdca 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a30c:	4603      	mov	r3, r0
 801a30e:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	331e      	adds	r3, #30
 801a318:	4619      	mov	r1, r3
 801a31a:	2002      	movs	r0, #2
 801a31c:	f7fe fdc0 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a320:	4603      	mov	r3, r0
 801a322:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 801a328:	68bb      	ldr	r3, [r7, #8]
 801a32a:	3320      	adds	r3, #32
 801a32c:	4619      	mov	r1, r3
 801a32e:	2002      	movs	r0, #2
 801a330:	f7fe fdb6 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a334:	4603      	mov	r3, r0
 801a336:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 801a338:	687b      	ldr	r3, [r7, #4]
 801a33a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 801a33c:	68bb      	ldr	r3, [r7, #8]
 801a33e:	3322      	adds	r3, #34	@ 0x22
 801a340:	4619      	mov	r1, r3
 801a342:	2002      	movs	r0, #2
 801a344:	f7fe fdac 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a348:	4603      	mov	r3, r0
 801a34a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 801a350:	68bb      	ldr	r3, [r7, #8]
 801a352:	3324      	adds	r3, #36	@ 0x24
 801a354:	4619      	mov	r1, r3
 801a356:	2002      	movs	r0, #2
 801a358:	f7fe fda2 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a35c:	4603      	mov	r3, r0
 801a35e:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 801a364:	68bb      	ldr	r3, [r7, #8]
 801a366:	3326      	adds	r3, #38	@ 0x26
 801a368:	4619      	mov	r1, r3
 801a36a:	2002      	movs	r0, #2
 801a36c:	f7fe fd98 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a370:	4603      	mov	r3, r0
 801a372:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 801a378:	68bb      	ldr	r3, [r7, #8]
 801a37a:	3328      	adds	r3, #40	@ 0x28
 801a37c:	4619      	mov	r1, r3
 801a37e:	2002      	movs	r0, #2
 801a380:	f7fe fd8e 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a384:	4603      	mov	r3, r0
 801a386:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 801a38c:	68bb      	ldr	r3, [r7, #8]
 801a38e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 801a398:	68bb      	ldr	r3, [r7, #8]
 801a39a:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 801a3a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	3718      	adds	r7, #24
 801a3ac:	46bd      	mov	sp, r7
 801a3ae:	bd80      	pop	{r7, pc}

0801a3b0 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b086      	sub	sp, #24
 801a3b4:	af00      	add	r7, sp, #0
 801a3b6:	4603      	mov	r3, r0
 801a3b8:	60b9      	str	r1, [r7, #8]
 801a3ba:	607a      	str	r2, [r7, #4]
 801a3bc:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a3be:	2300      	movs	r3, #0
 801a3c0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 801a3c2:	89fb      	ldrh	r3, [r7, #14]
 801a3c4:	2b20      	cmp	r3, #32
 801a3c6:	d802      	bhi.n	801a3ce <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801a3c8:	f06f 0309 	mvn.w	r3, #9
 801a3cc:	e04d      	b.n	801a46a <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 801a3ce:	68b9      	ldr	r1, [r7, #8]
 801a3d0:	2004      	movs	r0, #4
 801a3d2:	f7fe fe04 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a3d6:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 801a3dc:	68bb      	ldr	r3, [r7, #8]
 801a3de:	3304      	adds	r3, #4
 801a3e0:	4619      	mov	r1, r3
 801a3e2:	2004      	movs	r0, #4
 801a3e4:	f7fe fdfb 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a3e8:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 801a3ee:	68bb      	ldr	r3, [r7, #8]
 801a3f0:	3308      	adds	r3, #8
 801a3f2:	4619      	mov	r1, r3
 801a3f4:	2004      	movs	r0, #4
 801a3f6:	f7fe fe0f 	bl	8019018 <VL53L1_i2c_decode_int32_t>
 801a3fa:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 801a400:	68bb      	ldr	r3, [r7, #8]
 801a402:	330c      	adds	r3, #12
 801a404:	4619      	mov	r1, r3
 801a406:	2004      	movs	r0, #4
 801a408:	f7fe fde9 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a40c:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 801a412:	68bb      	ldr	r3, [r7, #8]
 801a414:	3310      	adds	r3, #16
 801a416:	4619      	mov	r1, r3
 801a418:	2004      	movs	r0, #4
 801a41a:	f7fe fde0 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a41e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 801a424:	68bb      	ldr	r3, [r7, #8]
 801a426:	3314      	adds	r3, #20
 801a428:	4619      	mov	r1, r3
 801a42a:	2004      	movs	r0, #4
 801a42c:	f7fe fdd7 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a430:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 801a436:	68bb      	ldr	r3, [r7, #8]
 801a438:	3318      	adds	r3, #24
 801a43a:	4619      	mov	r1, r3
 801a43c:	2004      	movs	r0, #4
 801a43e:	f7fe fdeb 	bl	8019018 <VL53L1_i2c_decode_int32_t>
 801a442:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 801a448:	68bb      	ldr	r3, [r7, #8]
 801a44a:	331c      	adds	r3, #28
 801a44c:	4619      	mov	r1, r3
 801a44e:	2004      	movs	r0, #4
 801a450:	f7fe fdc5 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a454:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 801a45a:	68bb      	ldr	r3, [r7, #8]
 801a45c:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 801a466:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a46a:	4618      	mov	r0, r3
 801a46c:	3718      	adds	r7, #24
 801a46e:	46bd      	mov	sp, r7
 801a470:	bd80      	pop	{r7, pc}

0801a472 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 801a472:	b580      	push	{r7, lr}
 801a474:	b086      	sub	sp, #24
 801a476:	af00      	add	r7, sp, #0
 801a478:	4603      	mov	r3, r0
 801a47a:	60b9      	str	r1, [r7, #8]
 801a47c:	607a      	str	r2, [r7, #4]
 801a47e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a480:	2300      	movs	r3, #0
 801a482:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 801a484:	89fb      	ldrh	r3, [r7, #14]
 801a486:	2b37      	cmp	r3, #55	@ 0x37
 801a488:	d802      	bhi.n	801a490 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801a48a:	f06f 0309 	mvn.w	r3, #9
 801a48e:	e15e      	b.n	801a74e <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 801a490:	68b9      	ldr	r1, [r7, #8]
 801a492:	2002      	movs	r0, #2
 801a494:	f7fe fd04 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a498:	4603      	mov	r3, r0
 801a49a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 801a4a0:	68bb      	ldr	r3, [r7, #8]
 801a4a2:	3302      	adds	r3, #2
 801a4a4:	781b      	ldrb	r3, [r3, #0]
 801a4a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a4aa:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801a4ac:	687b      	ldr	r3, [r7, #4]
 801a4ae:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 801a4b0:	68bb      	ldr	r3, [r7, #8]
 801a4b2:	3303      	adds	r3, #3
 801a4b4:	781b      	ldrb	r3, [r3, #0]
 801a4b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a4ba:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 801a4c0:	68bb      	ldr	r3, [r7, #8]
 801a4c2:	3304      	adds	r3, #4
 801a4c4:	781b      	ldrb	r3, [r3, #0]
 801a4c6:	f003 0303 	and.w	r3, r3, #3
 801a4ca:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 801a4d0:	68bb      	ldr	r3, [r7, #8]
 801a4d2:	3305      	adds	r3, #5
 801a4d4:	781b      	ldrb	r3, [r3, #0]
 801a4d6:	f003 0301 	and.w	r3, r3, #1
 801a4da:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	3306      	adds	r3, #6
 801a4e4:	781b      	ldrb	r3, [r3, #0]
 801a4e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a4ea:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 801a4ec:	687b      	ldr	r3, [r7, #4]
 801a4ee:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 801a4f0:	68bb      	ldr	r3, [r7, #8]
 801a4f2:	3307      	adds	r3, #7
 801a4f4:	781b      	ldrb	r3, [r3, #0]
 801a4f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a4fa:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 801a4fc:	687b      	ldr	r3, [r7, #4]
 801a4fe:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	3308      	adds	r3, #8
 801a504:	4619      	mov	r1, r3
 801a506:	2002      	movs	r0, #2
 801a508:	f7fe fcca 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a50c:	4603      	mov	r3, r0
 801a50e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801a512:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 801a518:	68bb      	ldr	r3, [r7, #8]
 801a51a:	330a      	adds	r3, #10
 801a51c:	781b      	ldrb	r3, [r3, #0]
 801a51e:	f003 0303 	and.w	r3, r3, #3
 801a522:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 801a528:	68bb      	ldr	r3, [r7, #8]
 801a52a:	330b      	adds	r3, #11
 801a52c:	781b      	ldrb	r3, [r3, #0]
 801a52e:	f003 0303 	and.w	r3, r3, #3
 801a532:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 801a538:	68bb      	ldr	r3, [r7, #8]
 801a53a:	330c      	adds	r3, #12
 801a53c:	781b      	ldrb	r3, [r3, #0]
 801a53e:	f003 030f 	and.w	r3, r3, #15
 801a542:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 801a548:	68bb      	ldr	r3, [r7, #8]
 801a54a:	330d      	adds	r3, #13
 801a54c:	781b      	ldrb	r3, [r3, #0]
 801a54e:	f003 0307 	and.w	r3, r3, #7
 801a552:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 801a558:	68bb      	ldr	r3, [r7, #8]
 801a55a:	330e      	adds	r3, #14
 801a55c:	781b      	ldrb	r3, [r3, #0]
 801a55e:	f003 0301 	and.w	r3, r3, #1
 801a562:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 801a568:	68bb      	ldr	r3, [r7, #8]
 801a56a:	330f      	adds	r3, #15
 801a56c:	781b      	ldrb	r3, [r3, #0]
 801a56e:	f003 0303 	and.w	r3, r3, #3
 801a572:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 801a574:	687b      	ldr	r3, [r7, #4]
 801a576:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 801a578:	68bb      	ldr	r3, [r7, #8]
 801a57a:	7c1a      	ldrb	r2, [r3, #16]
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 801a580:	68bb      	ldr	r3, [r7, #8]
 801a582:	7c5a      	ldrb	r2, [r3, #17]
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 801a588:	68bb      	ldr	r3, [r7, #8]
 801a58a:	3312      	adds	r3, #18
 801a58c:	4619      	mov	r1, r3
 801a58e:	2002      	movs	r0, #2
 801a590:	f7fe fc86 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a594:	4603      	mov	r3, r0
 801a596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801a59a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 801a5a0:	68bb      	ldr	r3, [r7, #8]
 801a5a2:	3316      	adds	r3, #22
 801a5a4:	4619      	mov	r1, r3
 801a5a6:	2002      	movs	r0, #2
 801a5a8:	f7fe fc7a 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 801a5b4:	68bb      	ldr	r3, [r7, #8]
 801a5b6:	3318      	adds	r3, #24
 801a5b8:	4619      	mov	r1, r3
 801a5ba:	2002      	movs	r0, #2
 801a5bc:	f7fe fc70 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 801a5c8:	68bb      	ldr	r3, [r7, #8]
 801a5ca:	331a      	adds	r3, #26
 801a5cc:	781b      	ldrb	r3, [r3, #0]
 801a5ce:	f003 0301 	and.w	r3, r3, #1
 801a5d2:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 801a5d8:	68bb      	ldr	r3, [r7, #8]
 801a5da:	331b      	adds	r3, #27
 801a5dc:	781b      	ldrb	r3, [r3, #0]
 801a5de:	f003 0307 	and.w	r3, r3, #7
 801a5e2:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 801a5e8:	68bb      	ldr	r3, [r7, #8]
 801a5ea:	7f1a      	ldrb	r2, [r3, #28]
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	7f5a      	ldrb	r2, [r3, #29]
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 801a5f8:	68bb      	ldr	r3, [r7, #8]
 801a5fa:	331e      	adds	r3, #30
 801a5fc:	781b      	ldrb	r3, [r3, #0]
 801a5fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a602:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 801a608:	68bb      	ldr	r3, [r7, #8]
 801a60a:	331f      	adds	r3, #31
 801a60c:	781b      	ldrb	r3, [r3, #0]
 801a60e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a612:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 801a618:	68bb      	ldr	r3, [r7, #8]
 801a61a:	3320      	adds	r3, #32
 801a61c:	781b      	ldrb	r3, [r3, #0]
 801a61e:	f003 0303 	and.w	r3, r3, #3
 801a622:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 801a628:	68bb      	ldr	r3, [r7, #8]
 801a62a:	3321      	adds	r3, #33	@ 0x21
 801a62c:	781b      	ldrb	r3, [r3, #0]
 801a62e:	f003 030f 	and.w	r3, r3, #15
 801a632:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 801a638:	68bb      	ldr	r3, [r7, #8]
 801a63a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 801a644:	68bb      	ldr	r3, [r7, #8]
 801a646:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 801a650:	68bb      	ldr	r3, [r7, #8]
 801a652:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a656:	687b      	ldr	r3, [r7, #4]
 801a658:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801a65c:	68bb      	ldr	r3, [r7, #8]
 801a65e:	3325      	adds	r3, #37	@ 0x25
 801a660:	781b      	ldrb	r3, [r3, #0]
 801a662:	f003 0301 	and.w	r3, r3, #1
 801a666:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 801a66e:	68bb      	ldr	r3, [r7, #8]
 801a670:	3326      	adds	r3, #38	@ 0x26
 801a672:	781b      	ldrb	r3, [r3, #0]
 801a674:	f003 0303 	and.w	r3, r3, #3
 801a678:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 801a680:	68bb      	ldr	r3, [r7, #8]
 801a682:	3327      	adds	r3, #39	@ 0x27
 801a684:	781b      	ldrb	r3, [r3, #0]
 801a686:	f003 031f 	and.w	r3, r3, #31
 801a68a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 801a692:	68bb      	ldr	r3, [r7, #8]
 801a694:	3328      	adds	r3, #40	@ 0x28
 801a696:	781b      	ldrb	r3, [r3, #0]
 801a698:	f003 031f 	and.w	r3, r3, #31
 801a69c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 801a6a4:	68bb      	ldr	r3, [r7, #8]
 801a6a6:	3329      	adds	r3, #41	@ 0x29
 801a6a8:	781b      	ldrb	r3, [r3, #0]
 801a6aa:	f003 031f 	and.w	r3, r3, #31
 801a6ae:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 801a6b6:	68bb      	ldr	r3, [r7, #8]
 801a6b8:	332a      	adds	r3, #42	@ 0x2a
 801a6ba:	781b      	ldrb	r3, [r3, #0]
 801a6bc:	f003 0301 	and.w	r3, r3, #1
 801a6c0:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 801a6c8:	68bb      	ldr	r3, [r7, #8]
 801a6ca:	332b      	adds	r3, #43	@ 0x2b
 801a6cc:	781b      	ldrb	r3, [r3, #0]
 801a6ce:	f003 0301 	and.w	r3, r3, #1
 801a6d2:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801a6da:	68bb      	ldr	r3, [r7, #8]
 801a6dc:	332c      	adds	r3, #44	@ 0x2c
 801a6de:	781b      	ldrb	r3, [r3, #0]
 801a6e0:	f003 0303 	and.w	r3, r3, #3
 801a6e4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 801a6ec:	68bb      	ldr	r3, [r7, #8]
 801a6ee:	332d      	adds	r3, #45	@ 0x2d
 801a6f0:	781b      	ldrb	r3, [r3, #0]
 801a6f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a6f6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 801a6fe:	68bb      	ldr	r3, [r7, #8]
 801a700:	332e      	adds	r3, #46	@ 0x2e
 801a702:	4619      	mov	r1, r3
 801a704:	2004      	movs	r0, #4
 801a706:	f7fe fc6a 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a70a:	4603      	mov	r3, r0
 801a70c:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 801a714:	68bb      	ldr	r3, [r7, #8]
 801a716:	3332      	adds	r3, #50	@ 0x32
 801a718:	4619      	mov	r1, r3
 801a71a:	2004      	movs	r0, #4
 801a71c:	f7fe fc5f 	bl	8018fde <VL53L1_i2c_decode_uint32_t>
 801a720:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 801a726:	68bb      	ldr	r3, [r7, #8]
 801a728:	3336      	adds	r3, #54	@ 0x36
 801a72a:	781b      	ldrb	r3, [r3, #0]
 801a72c:	f003 0301 	and.w	r3, r3, #1
 801a730:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 801a738:	68bb      	ldr	r3, [r7, #8]
 801a73a:	3337      	adds	r3, #55	@ 0x37
 801a73c:	781b      	ldrb	r3, [r3, #0]
 801a73e:	f003 0301 	and.w	r3, r3, #1
 801a742:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 801a74a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a74e:	4618      	mov	r0, r3
 801a750:	3718      	adds	r7, #24
 801a752:	46bd      	mov	sp, r7
 801a754:	bd80      	pop	{r7, pc}

0801a756 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801a756:	b580      	push	{r7, lr}
 801a758:	b086      	sub	sp, #24
 801a75a:	af00      	add	r7, sp, #0
 801a75c:	4603      	mov	r3, r0
 801a75e:	60b9      	str	r1, [r7, #8]
 801a760:	607a      	str	r2, [r7, #4]
 801a762:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a764:	2300      	movs	r3, #0
 801a766:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 801a768:	89fb      	ldrh	r3, [r7, #14]
 801a76a:	2b30      	cmp	r3, #48	@ 0x30
 801a76c:	d802      	bhi.n	801a774 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801a76e:	f06f 0309 	mvn.w	r3, #9
 801a772:	e112      	b.n	801a99a <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 801a774:	68bb      	ldr	r3, [r7, #8]
 801a776:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801a77c:	68bb      	ldr	r3, [r7, #8]
 801a77e:	785a      	ldrb	r2, [r3, #1]
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 801a784:	68bb      	ldr	r3, [r7, #8]
 801a786:	789a      	ldrb	r2, [r3, #2]
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801a78c:	68bb      	ldr	r3, [r7, #8]
 801a78e:	3303      	adds	r3, #3
 801a790:	4619      	mov	r1, r3
 801a792:	2002      	movs	r0, #2
 801a794:	f7fe fb84 	bl	8018ea0 <VL53L1_i2c_decode_uint16_t>
 801a798:	4603      	mov	r3, r0
 801a79a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 801a7a0:	68bb      	ldr	r3, [r7, #8]
 801a7a2:	3305      	adds	r3, #5
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a7aa:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	3306      	adds	r3, #6
 801a7b4:	781b      	ldrb	r3, [r3, #0]
 801a7b6:	f003 0307 	and.w	r3, r3, #7
 801a7ba:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 801a7c0:	68bb      	ldr	r3, [r7, #8]
 801a7c2:	3307      	adds	r3, #7
 801a7c4:	781b      	ldrb	r3, [r3, #0]
 801a7c6:	f003 0307 	and.w	r3, r3, #7
 801a7ca:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 801a7d0:	68bb      	ldr	r3, [r7, #8]
 801a7d2:	3308      	adds	r3, #8
 801a7d4:	781b      	ldrb	r3, [r3, #0]
 801a7d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a7da:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	3309      	adds	r3, #9
 801a7e4:	781b      	ldrb	r3, [r3, #0]
 801a7e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a7ea:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 801a7f0:	68bb      	ldr	r3, [r7, #8]
 801a7f2:	330a      	adds	r3, #10
 801a7f4:	781b      	ldrb	r3, [r3, #0]
 801a7f6:	f003 0301 	and.w	r3, r3, #1
 801a7fa:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 801a800:	68bb      	ldr	r3, [r7, #8]
 801a802:	330b      	adds	r3, #11
 801a804:	781b      	ldrb	r3, [r3, #0]
 801a806:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801a80a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 801a810:	68bb      	ldr	r3, [r7, #8]
 801a812:	330c      	adds	r3, #12
 801a814:	781b      	ldrb	r3, [r3, #0]
 801a816:	f003 0301 	and.w	r3, r3, #1
 801a81a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 801a820:	68bb      	ldr	r3, [r7, #8]
 801a822:	330d      	adds	r3, #13
 801a824:	781b      	ldrb	r3, [r3, #0]
 801a826:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a82a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 801a830:	68bb      	ldr	r3, [r7, #8]
 801a832:	330e      	adds	r3, #14
 801a834:	781b      	ldrb	r3, [r3, #0]
 801a836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a83a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	7bda      	ldrb	r2, [r3, #15]
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 801a848:	68bb      	ldr	r3, [r7, #8]
 801a84a:	7c1a      	ldrb	r2, [r3, #16]
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 801a850:	68bb      	ldr	r3, [r7, #8]
 801a852:	7c5a      	ldrb	r2, [r3, #17]
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 801a858:	68bb      	ldr	r3, [r7, #8]
 801a85a:	7c9a      	ldrb	r2, [r3, #18]
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 801a860:	68bb      	ldr	r3, [r7, #8]
 801a862:	7cda      	ldrb	r2, [r3, #19]
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 801a868:	68bb      	ldr	r3, [r7, #8]
 801a86a:	7d1a      	ldrb	r2, [r3, #20]
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 801a870:	68bb      	ldr	r3, [r7, #8]
 801a872:	7d5a      	ldrb	r2, [r3, #21]
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 801a878:	68bb      	ldr	r3, [r7, #8]
 801a87a:	7d9a      	ldrb	r2, [r3, #22]
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 801a880:	68bb      	ldr	r3, [r7, #8]
 801a882:	7dda      	ldrb	r2, [r3, #23]
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 801a888:	68bb      	ldr	r3, [r7, #8]
 801a88a:	7e1a      	ldrb	r2, [r3, #24]
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 801a890:	68bb      	ldr	r3, [r7, #8]
 801a892:	7e5a      	ldrb	r2, [r3, #25]
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 801a898:	68bb      	ldr	r3, [r7, #8]
 801a89a:	7e9a      	ldrb	r2, [r3, #26]
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 801a8a0:	68bb      	ldr	r3, [r7, #8]
 801a8a2:	7eda      	ldrb	r2, [r3, #27]
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 801a8a8:	68bb      	ldr	r3, [r7, #8]
 801a8aa:	7f1a      	ldrb	r2, [r3, #28]
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	7f5a      	ldrb	r2, [r3, #29]
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 801a8b8:	68bb      	ldr	r3, [r7, #8]
 801a8ba:	7f9a      	ldrb	r2, [r3, #30]
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 801a8c0:	68bb      	ldr	r3, [r7, #8]
 801a8c2:	7fda      	ldrb	r2, [r3, #31]
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 801a8ca:	68bb      	ldr	r3, [r7, #8]
 801a8cc:	f893 2020 	ldrb.w	r2, [r3, #32]
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 801a8d6:	68bb      	ldr	r3, [r7, #8]
 801a8d8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 801a8e2:	68bb      	ldr	r3, [r7, #8]
 801a8e4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801a8e8:	687b      	ldr	r3, [r7, #4]
 801a8ea:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 801a8ee:	68bb      	ldr	r3, [r7, #8]
 801a8f0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 801a8fa:	68bb      	ldr	r3, [r7, #8]
 801a8fc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 801a906:	68bb      	ldr	r3, [r7, #8]
 801a908:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 801a912:	68bb      	ldr	r3, [r7, #8]
 801a914:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801a91e:	68bb      	ldr	r3, [r7, #8]
 801a920:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801a92a:	68bb      	ldr	r3, [r7, #8]
 801a92c:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 801a936:	68bb      	ldr	r3, [r7, #8]
 801a938:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801a93c:	687b      	ldr	r3, [r7, #4]
 801a93e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 801a942:	68bb      	ldr	r3, [r7, #8]
 801a944:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801a94e:	68bb      	ldr	r3, [r7, #8]
 801a950:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801a95a:	68bb      	ldr	r3, [r7, #8]
 801a95c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 801a972:	68bb      	ldr	r3, [r7, #8]
 801a974:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 801a996:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a99a:	4618      	mov	r0, r3
 801a99c:	3718      	adds	r7, #24
 801a99e:	46bd      	mov	sp, r7
 801a9a0:	bd80      	pop	{r7, pc}

0801a9a2 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 801a9a2:	b580      	push	{r7, lr}
 801a9a4:	b090      	sub	sp, #64	@ 0x40
 801a9a6:	af00      	add	r7, sp, #0
 801a9a8:	6078      	str	r0, [r7, #4]
 801a9aa:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 801a9b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d10a      	bne.n	801a9d0 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 801a9ba:	f107 020c 	add.w	r2, r7, #12
 801a9be:	2331      	movs	r3, #49	@ 0x31
 801a9c0:	f240 110f 	movw	r1, #271	@ 0x10f
 801a9c4:	6878      	ldr	r0, [r7, #4]
 801a9c6:	f7f2 fd70 	bl	800d4aa <VL53L1_ReadMulti>
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 801a9d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d109      	bne.n	801a9ec <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 801a9d8:	f107 030c 	add.w	r3, r7, #12
 801a9dc:	683a      	ldr	r2, [r7, #0]
 801a9de:	4619      	mov	r1, r3
 801a9e0:	2031      	movs	r0, #49	@ 0x31
 801a9e2:	f7ff feb8 	bl	801a756 <VL53L1_i2c_decode_nvm_copy_data>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801a9ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	3740      	adds	r7, #64	@ 0x40
 801a9f4:	46bd      	mov	sp, r7
 801a9f6:	bd80      	pop	{r7, pc}

0801a9f8 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 801a9f8:	b580      	push	{r7, lr}
 801a9fa:	b086      	sub	sp, #24
 801a9fc:	af00      	add	r7, sp, #0
 801a9fe:	6078      	str	r0, [r7, #4]
 801aa00:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801aa02:	2300      	movs	r3, #0
 801aa04:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 801aa0e:	2300      	movs	r3, #0
 801aa10:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 801aa12:	2300      	movs	r3, #0
 801aa14:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 801aa16:	693b      	ldr	r3, [r7, #16]
 801aa18:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 801aa1c:	f003 0310 	and.w	r3, r3, #16
 801aa20:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 801aa22:	7bfb      	ldrb	r3, [r7, #15]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	d102      	bne.n	801aa2e <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 801aa28:	2301      	movs	r3, #1
 801aa2a:	75fb      	strb	r3, [r7, #23]
 801aa2c:	e001      	b.n	801aa32 <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 801aa2e:	2300      	movs	r3, #0
 801aa30:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 801aa32:	f107 030e 	add.w	r3, r7, #14
 801aa36:	461a      	mov	r2, r3
 801aa38:	2131      	movs	r1, #49	@ 0x31
 801aa3a:	6878      	ldr	r0, [r7, #4]
 801aa3c:	f7f2 fd80 	bl	800d540 <VL53L1_RdByte>
 801aa40:	4603      	mov	r3, r0
 801aa42:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 801aa44:	7bbb      	ldrb	r3, [r7, #14]
 801aa46:	f003 0201 	and.w	r2, r3, #1
 801aa4a:	7dfb      	ldrb	r3, [r7, #23]
 801aa4c:	429a      	cmp	r2, r3
 801aa4e:	d103      	bne.n	801aa58 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 801aa50:	683b      	ldr	r3, [r7, #0]
 801aa52:	2201      	movs	r2, #1
 801aa54:	701a      	strb	r2, [r3, #0]
 801aa56:	e002      	b.n	801aa5e <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 801aa58:	683b      	ldr	r3, [r7, #0]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801aa5e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 801aa62:	4618      	mov	r0, r3
 801aa64:	3718      	adds	r7, #24
 801aa66:	46bd      	mov	sp, r7
 801aa68:	bd80      	pop	{r7, pc}
	...

0801aa6c <arm_mat_trans_f32>:
 801aa6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa70:	8802      	ldrh	r2, [r0, #0]
 801aa72:	884b      	ldrh	r3, [r1, #2]
 801aa74:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801aa78:	684f      	ldr	r7, [r1, #4]
 801aa7a:	8840      	ldrh	r0, [r0, #2]
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	b083      	sub	sp, #12
 801aa80:	d14c      	bne.n	801ab1c <arm_mat_trans_f32+0xb0>
 801aa82:	f8b1 e000 	ldrh.w	lr, [r1]
 801aa86:	4586      	cmp	lr, r0
 801aa88:	d148      	bne.n	801ab1c <arm_mat_trans_f32+0xb0>
 801aa8a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 801aa8e:	009c      	lsls	r4, r3, #2
 801aa90:	f00e 0e03 	and.w	lr, lr, #3
 801aa94:	fb08 f904 	mul.w	r9, r8, r4
 801aa98:	ea4f 028e 	mov.w	r2, lr, lsl #2
 801aa9c:	011d      	lsls	r5, r3, #4
 801aa9e:	00db      	lsls	r3, r3, #3
 801aaa0:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801aaa4:	eb07 0a04 	add.w	sl, r7, r4
 801aaa8:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 801aaac:	9201      	str	r2, [sp, #4]
 801aaae:	9300      	str	r3, [sp, #0]
 801aab0:	463b      	mov	r3, r7
 801aab2:	f1b8 0f00 	cmp.w	r8, #0
 801aab6:	d01d      	beq.n	801aaf4 <arm_mat_trans_f32+0x88>
 801aab8:	9900      	ldr	r1, [sp, #0]
 801aaba:	f10c 0210 	add.w	r2, ip, #16
 801aabe:	4439      	add	r1, r7
 801aac0:	4640      	mov	r0, r8
 801aac2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 801aac6:	601e      	str	r6, [r3, #0]
 801aac8:	ed52 7a03 	vldr	s15, [r2, #-12]
 801aacc:	191e      	adds	r6, r3, r4
 801aace:	edc6 7a00 	vstr	s15, [r6]
 801aad2:	f852 6c08 	ldr.w	r6, [r2, #-8]
 801aad6:	600e      	str	r6, [r1, #0]
 801aad8:	ed52 7a01 	vldr	s15, [r2, #-4]
 801aadc:	190e      	adds	r6, r1, r4
 801aade:	3801      	subs	r0, #1
 801aae0:	442b      	add	r3, r5
 801aae2:	f102 0210 	add.w	r2, r2, #16
 801aae6:	edc6 7a00 	vstr	s15, [r6]
 801aaea:	4429      	add	r1, r5
 801aaec:	d1e9      	bne.n	801aac2 <arm_mat_trans_f32+0x56>
 801aaee:	44dc      	add	ip, fp
 801aaf0:	eb09 0307 	add.w	r3, r9, r7
 801aaf4:	f1be 0f00 	cmp.w	lr, #0
 801aaf8:	d009      	beq.n	801ab0e <arm_mat_trans_f32+0xa2>
 801aafa:	4672      	mov	r2, lr
 801aafc:	4661      	mov	r1, ip
 801aafe:	f851 0b04 	ldr.w	r0, [r1], #4
 801ab02:	6018      	str	r0, [r3, #0]
 801ab04:	3a01      	subs	r2, #1
 801ab06:	4423      	add	r3, r4
 801ab08:	d1f9      	bne.n	801aafe <arm_mat_trans_f32+0x92>
 801ab0a:	9b01      	ldr	r3, [sp, #4]
 801ab0c:	449c      	add	ip, r3
 801ab0e:	3704      	adds	r7, #4
 801ab10:	4557      	cmp	r7, sl
 801ab12:	d1cd      	bne.n	801aab0 <arm_mat_trans_f32+0x44>
 801ab14:	2000      	movs	r0, #0
 801ab16:	b003      	add	sp, #12
 801ab18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab1c:	f06f 0002 	mvn.w	r0, #2
 801ab20:	e7f9      	b.n	801ab16 <arm_mat_trans_f32+0xaa>
 801ab22:	bf00      	nop

0801ab24 <arm_mat_scale_f32>:
 801ab24:	b470      	push	{r4, r5, r6}
 801ab26:	e9d1 3500 	ldrd	r3, r5, [r1]
 801ab2a:	6802      	ldr	r2, [r0, #0]
 801ab2c:	6846      	ldr	r6, [r0, #4]
 801ab2e:	429a      	cmp	r2, r3
 801ab30:	d147      	bne.n	801abc2 <arm_mat_scale_f32+0x9e>
 801ab32:	8803      	ldrh	r3, [r0, #0]
 801ab34:	8840      	ldrh	r0, [r0, #2]
 801ab36:	fb00 f003 	mul.w	r0, r0, r3
 801ab3a:	0884      	lsrs	r4, r0, #2
 801ab3c:	d025      	beq.n	801ab8a <arm_mat_scale_f32+0x66>
 801ab3e:	f106 0210 	add.w	r2, r6, #16
 801ab42:	f105 0310 	add.w	r3, r5, #16
 801ab46:	4621      	mov	r1, r4
 801ab48:	ed52 7a04 	vldr	s15, [r2, #-16]
 801ab4c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ab50:	3901      	subs	r1, #1
 801ab52:	ed43 7a04 	vstr	s15, [r3, #-16]
 801ab56:	ed52 7a03 	vldr	s15, [r2, #-12]
 801ab5a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ab5e:	f102 0210 	add.w	r2, r2, #16
 801ab62:	ed43 7a03 	vstr	s15, [r3, #-12]
 801ab66:	ed52 7a06 	vldr	s15, [r2, #-24]	@ 0xffffffe8
 801ab6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ab6e:	f103 0310 	add.w	r3, r3, #16
 801ab72:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 801ab76:	ed52 7a05 	vldr	s15, [r2, #-20]	@ 0xffffffec
 801ab7a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ab7e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 801ab82:	d1e1      	bne.n	801ab48 <arm_mat_scale_f32+0x24>
 801ab84:	0124      	lsls	r4, r4, #4
 801ab86:	4426      	add	r6, r4
 801ab88:	4425      	add	r5, r4
 801ab8a:	f010 0003 	ands.w	r0, r0, #3
 801ab8e:	d015      	beq.n	801abbc <arm_mat_scale_f32+0x98>
 801ab90:	edd6 7a00 	vldr	s15, [r6]
 801ab94:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ab98:	3801      	subs	r0, #1
 801ab9a:	edc5 7a00 	vstr	s15, [r5]
 801ab9e:	d00d      	beq.n	801abbc <arm_mat_scale_f32+0x98>
 801aba0:	edd6 7a01 	vldr	s15, [r6, #4]
 801aba4:	ee67 7a80 	vmul.f32	s15, s15, s0
 801aba8:	2801      	cmp	r0, #1
 801abaa:	edc5 7a01 	vstr	s15, [r5, #4]
 801abae:	d005      	beq.n	801abbc <arm_mat_scale_f32+0x98>
 801abb0:	edd6 7a02 	vldr	s15, [r6, #8]
 801abb4:	ee27 0a80 	vmul.f32	s0, s15, s0
 801abb8:	ed85 0a02 	vstr	s0, [r5, #8]
 801abbc:	2000      	movs	r0, #0
 801abbe:	bc70      	pop	{r4, r5, r6}
 801abc0:	4770      	bx	lr
 801abc2:	f06f 0002 	mvn.w	r0, #2
 801abc6:	e7fa      	b.n	801abbe <arm_mat_scale_f32+0x9a>

0801abc8 <arm_mat_mult_f32>:
 801abc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801abcc:	8845      	ldrh	r5, [r0, #2]
 801abce:	880b      	ldrh	r3, [r1, #0]
 801abd0:	8806      	ldrh	r6, [r0, #0]
 801abd2:	6847      	ldr	r7, [r0, #4]
 801abd4:	6854      	ldr	r4, [r2, #4]
 801abd6:	6848      	ldr	r0, [r1, #4]
 801abd8:	b08b      	sub	sp, #44	@ 0x2c
 801abda:	42ab      	cmp	r3, r5
 801abdc:	9109      	str	r1, [sp, #36]	@ 0x24
 801abde:	9604      	str	r6, [sp, #16]
 801abe0:	8849      	ldrh	r1, [r1, #2]
 801abe2:	f040 808a 	bne.w	801acfa <arm_mat_mult_f32+0x132>
 801abe6:	8815      	ldrh	r5, [r2, #0]
 801abe8:	42b5      	cmp	r5, r6
 801abea:	f040 8086 	bne.w	801acfa <arm_mat_mult_f32+0x132>
 801abee:	8852      	ldrh	r2, [r2, #2]
 801abf0:	428a      	cmp	r2, r1
 801abf2:	f040 8082 	bne.w	801acfa <arm_mat_mult_f32+0x132>
 801abf6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801abfa:	1d01      	adds	r1, r0, #4
 801abfc:	0116      	lsls	r6, r2, #4
 801abfe:	9108      	str	r1, [sp, #32]
 801ac00:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 801ac04:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 801ac08:	9101      	str	r1, [sp, #4]
 801ac0a:	fb06 f108 	mul.w	r1, r6, r8
 801ac0e:	0095      	lsls	r5, r2, #2
 801ac10:	9103      	str	r1, [sp, #12]
 801ac12:	00d2      	lsls	r2, r2, #3
 801ac14:	ea4f 018c 	mov.w	r1, ip, lsl #2
 801ac18:	f003 0903 	and.w	r9, r3, #3
 801ac1c:	009b      	lsls	r3, r3, #2
 801ac1e:	f107 0b10 	add.w	fp, r7, #16
 801ac22:	eb04 0a05 	add.w	sl, r4, r5
 801ac26:	9107      	str	r1, [sp, #28]
 801ac28:	9202      	str	r2, [sp, #8]
 801ac2a:	9306      	str	r3, [sp, #24]
 801ac2c:	f1ab 0310 	sub.w	r3, fp, #16
 801ac30:	9305      	str	r3, [sp, #20]
 801ac32:	9b07      	ldr	r3, [sp, #28]
 801ac34:	f8dd e020 	ldr.w	lr, [sp, #32]
 801ac38:	eb03 0c0a 	add.w	ip, r3, sl
 801ac3c:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801ad04 <arm_mat_mult_f32+0x13c>
 801ac40:	f1b8 0f00 	cmp.w	r8, #0
 801ac44:	d053      	beq.n	801acee <arm_mat_mult_f32+0x126>
 801ac46:	9b02      	ldr	r3, [sp, #8]
 801ac48:	4644      	mov	r4, r8
 801ac4a:	18c1      	adds	r1, r0, r3
 801ac4c:	4602      	mov	r2, r0
 801ac4e:	465b      	mov	r3, fp
 801ac50:	ed92 6a00 	vldr	s12, [r2]
 801ac54:	ed13 7a04 	vldr	s14, [r3, #-16]
 801ac58:	ed53 4a03 	vldr	s9, [r3, #-12]
 801ac5c:	ed53 6a02 	vldr	s13, [r3, #-8]
 801ac60:	ed91 5a00 	vldr	s10, [r1]
 801ac64:	ed53 5a01 	vldr	s11, [r3, #-4]
 801ac68:	1957      	adds	r7, r2, r5
 801ac6a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801ac6e:	ed97 6a00 	vldr	s12, [r7]
 801ac72:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ac76:	ee26 6a24 	vmul.f32	s12, s12, s9
 801ac7a:	194f      	adds	r7, r1, r5
 801ac7c:	ee36 6a27 	vadd.f32	s12, s12, s15
 801ac80:	ee26 7a85 	vmul.f32	s14, s13, s10
 801ac84:	edd7 7a00 	vldr	s15, [r7]
 801ac88:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ac8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801ac90:	3c01      	subs	r4, #1
 801ac92:	4432      	add	r2, r6
 801ac94:	4431      	add	r1, r6
 801ac96:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ac9a:	f103 0310 	add.w	r3, r3, #16
 801ac9e:	d1d7      	bne.n	801ac50 <arm_mat_mult_f32+0x88>
 801aca0:	9b03      	ldr	r3, [sp, #12]
 801aca2:	9a01      	ldr	r2, [sp, #4]
 801aca4:	4418      	add	r0, r3
 801aca6:	f1b9 0f00 	cmp.w	r9, #0
 801acaa:	d00b      	beq.n	801acc4 <arm_mat_mult_f32+0xfc>
 801acac:	464b      	mov	r3, r9
 801acae:	edd0 6a00 	vldr	s13, [r0]
 801acb2:	ecb2 7a01 	vldmia	r2!, {s14}
 801acb6:	ee27 7a26 	vmul.f32	s14, s14, s13
 801acba:	3b01      	subs	r3, #1
 801acbc:	4428      	add	r0, r5
 801acbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 801acc2:	d1f4      	bne.n	801acae <arm_mat_mult_f32+0xe6>
 801acc4:	ecec 7a01 	vstmia	ip!, {s15}
 801acc8:	45d4      	cmp	ip, sl
 801acca:	4670      	mov	r0, lr
 801accc:	f10e 0e04 	add.w	lr, lr, #4
 801acd0:	d1b4      	bne.n	801ac3c <arm_mat_mult_f32+0x74>
 801acd2:	9a01      	ldr	r2, [sp, #4]
 801acd4:	9b06      	ldr	r3, [sp, #24]
 801acd6:	4611      	mov	r1, r2
 801acd8:	4419      	add	r1, r3
 801acda:	449b      	add	fp, r3
 801acdc:	9b04      	ldr	r3, [sp, #16]
 801acde:	9101      	str	r1, [sp, #4]
 801ace0:	3b01      	subs	r3, #1
 801ace2:	44aa      	add	sl, r5
 801ace4:	9304      	str	r3, [sp, #16]
 801ace6:	d004      	beq.n	801acf2 <arm_mat_mult_f32+0x12a>
 801ace8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acea:	6858      	ldr	r0, [r3, #4]
 801acec:	e79e      	b.n	801ac2c <arm_mat_mult_f32+0x64>
 801acee:	9a05      	ldr	r2, [sp, #20]
 801acf0:	e7d9      	b.n	801aca6 <arm_mat_mult_f32+0xde>
 801acf2:	4618      	mov	r0, r3
 801acf4:	b00b      	add	sp, #44	@ 0x2c
 801acf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acfa:	f06f 0002 	mvn.w	r0, #2
 801acfe:	b00b      	add	sp, #44	@ 0x2c
 801ad00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad04:	00000000 	.word	0x00000000

0801ad08 <arm_mat_inverse_f32>:
 801ad08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad0c:	8843      	ldrh	r3, [r0, #2]
 801ad0e:	8804      	ldrh	r4, [r0, #0]
 801ad10:	684e      	ldr	r6, [r1, #4]
 801ad12:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801ad16:	b087      	sub	sp, #28
 801ad18:	429c      	cmp	r4, r3
 801ad1a:	9301      	str	r3, [sp, #4]
 801ad1c:	9603      	str	r6, [sp, #12]
 801ad1e:	f040 80ea 	bne.w	801aef6 <arm_mat_inverse_f32+0x1ee>
 801ad22:	880a      	ldrh	r2, [r1, #0]
 801ad24:	884b      	ldrh	r3, [r1, #2]
 801ad26:	4293      	cmp	r3, r2
 801ad28:	f040 80e5 	bne.w	801aef6 <arm_mat_inverse_f32+0x1ee>
 801ad2c:	429c      	cmp	r4, r3
 801ad2e:	f040 80e2 	bne.w	801aef6 <arm_mat_inverse_f32+0x1ee>
 801ad32:	9005      	str	r0, [sp, #20]
 801ad34:	b30c      	cbz	r4, 801ad7a <arm_mat_inverse_f32+0x72>
 801ad36:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801ad3a:	1e67      	subs	r7, r4, #1
 801ad3c:	f846 bb04 	str.w	fp, [r6], #4
 801ad40:	d01b      	beq.n	801ad7a <arm_mat_inverse_f32+0x72>
 801ad42:	f04f 0801 	mov.w	r8, #1
 801ad46:	00ba      	lsls	r2, r7, #2
 801ad48:	eb06 0a02 	add.w	sl, r6, r2
 801ad4c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 801ad50:	4630      	mov	r0, r6
 801ad52:	2100      	movs	r1, #0
 801ad54:	f000 f96e 	bl	801b034 <memset>
 801ad58:	eb0a 0605 	add.w	r6, sl, r5
 801ad5c:	462a      	mov	r2, r5
 801ad5e:	2100      	movs	r1, #0
 801ad60:	4650      	mov	r0, sl
 801ad62:	f1b8 0f00 	cmp.w	r8, #0
 801ad66:	f000 80cb 	beq.w	801af00 <arm_mat_inverse_f32+0x1f8>
 801ad6a:	f000 f963 	bl	801b034 <memset>
 801ad6e:	3f01      	subs	r7, #1
 801ad70:	f108 0801 	add.w	r8, r8, #1
 801ad74:	f846 bb04 	str.w	fp, [r6], #4
 801ad78:	d1e5      	bne.n	801ad46 <arm_mat_inverse_f32+0x3e>
 801ad7a:	9b01      	ldr	r3, [sp, #4]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	f000 80b5 	beq.w	801aeec <arm_mat_inverse_f32+0x1e4>
 801ad82:	009d      	lsls	r5, r3, #2
 801ad84:	eb09 0205 	add.w	r2, r9, r5
 801ad88:	46cc      	mov	ip, r9
 801ad8a:	9202      	str	r2, [sp, #8]
 801ad8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801ad90:	1d2a      	adds	r2, r5, #4
 801ad92:	9204      	str	r2, [sp, #16]
 801ad94:	462f      	mov	r7, r5
 801ad96:	469e      	mov	lr, r3
 801ad98:	2600      	movs	r6, #0
 801ad9a:	9b02      	ldr	r3, [sp, #8]
 801ad9c:	eddc 6a00 	vldr	s13, [ip]
 801ada0:	42b4      	cmp	r4, r6
 801ada2:	eba3 0b07 	sub.w	fp, r3, r7
 801ada6:	f000 80a1 	beq.w	801aeec <arm_mat_inverse_f32+0x1e4>
 801adaa:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801af10 <arm_mat_inverse_f32+0x208>
 801adae:	4632      	mov	r2, r6
 801adb0:	4663      	mov	r3, ip
 801adb2:	e00b      	b.n	801adcc <arm_mat_inverse_f32+0xc4>
 801adb4:	eef4 7a47 	vcmp.f32	s15, s14
 801adb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adbc:	f102 0201 	add.w	r2, r2, #1
 801adc0:	bfc8      	it	gt
 801adc2:	eeb0 7a67 	vmovgt.f32	s14, s15
 801adc6:	42a2      	cmp	r2, r4
 801adc8:	442b      	add	r3, r5
 801adca:	d014      	beq.n	801adf6 <arm_mat_inverse_f32+0xee>
 801adcc:	edd3 7a00 	vldr	s15, [r3]
 801add0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801add4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801add8:	eeb1 6a67 	vneg.f32	s12, s15
 801addc:	dcea      	bgt.n	801adb4 <arm_mat_inverse_f32+0xac>
 801adde:	eeb4 6a47 	vcmp.f32	s12, s14
 801ade2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ade6:	f102 0201 	add.w	r2, r2, #1
 801adea:	bfc8      	it	gt
 801adec:	eeb0 7a46 	vmovgt.f32	s14, s12
 801adf0:	42a2      	cmp	r2, r4
 801adf2:	442b      	add	r3, r5
 801adf4:	d1ea      	bne.n	801adcc <arm_mat_inverse_f32+0xc4>
 801adf6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801adfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adfe:	d075      	beq.n	801aeec <arm_mat_inverse_f32+0x1e4>
 801ae00:	eef5 6a40 	vcmp.f32	s13, #0.0
 801ae04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae08:	d070      	beq.n	801aeec <arm_mat_inverse_f32+0x1e4>
 801ae0a:	4672      	mov	r2, lr
 801ae0c:	4663      	mov	r3, ip
 801ae0e:	ed93 7a00 	vldr	s14, [r3]
 801ae12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ae16:	3a01      	subs	r2, #1
 801ae18:	ece3 7a01 	vstmia	r3!, {s15}
 801ae1c:	d1f7      	bne.n	801ae0e <arm_mat_inverse_f32+0x106>
 801ae1e:	9901      	ldr	r1, [sp, #4]
 801ae20:	464b      	mov	r3, r9
 801ae22:	ed93 7a00 	vldr	s14, [r3]
 801ae26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801ae2a:	3901      	subs	r1, #1
 801ae2c:	ece3 7a01 	vstmia	r3!, {s15}
 801ae30:	d1f7      	bne.n	801ae22 <arm_mat_inverse_f32+0x11a>
 801ae32:	9803      	ldr	r0, [sp, #12]
 801ae34:	ea4f 0886 	mov.w	r8, r6, lsl #2
 801ae38:	42b1      	cmp	r1, r6
 801ae3a:	d039      	beq.n	801aeb0 <arm_mat_inverse_f32+0x1a8>
 801ae3c:	eddb 6a00 	vldr	s13, [fp]
 801ae40:	465a      	mov	r2, fp
 801ae42:	4673      	mov	r3, lr
 801ae44:	46e2      	mov	sl, ip
 801ae46:	ecba 7a01 	vldmia	sl!, {s14}
 801ae4a:	edd2 7a00 	vldr	s15, [r2]
 801ae4e:	ee26 7a87 	vmul.f32	s14, s13, s14
 801ae52:	3b01      	subs	r3, #1
 801ae54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae58:	ece2 7a01 	vstmia	r2!, {s15}
 801ae5c:	d1f3      	bne.n	801ae46 <arm_mat_inverse_f32+0x13e>
 801ae5e:	9b01      	ldr	r3, [sp, #4]
 801ae60:	44bb      	add	fp, r7
 801ae62:	4602      	mov	r2, r0
 801ae64:	46ca      	mov	sl, r9
 801ae66:	ecba 7a01 	vldmia	sl!, {s14}
 801ae6a:	edd2 7a00 	vldr	s15, [r2]
 801ae6e:	ee26 7a87 	vmul.f32	s14, s13, s14
 801ae72:	3b01      	subs	r3, #1
 801ae74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ae78:	ece2 7a01 	vstmia	r2!, {s15}
 801ae7c:	d1f3      	bne.n	801ae66 <arm_mat_inverse_f32+0x15e>
 801ae7e:	4428      	add	r0, r5
 801ae80:	3101      	adds	r1, #1
 801ae82:	428c      	cmp	r4, r1
 801ae84:	44c3      	add	fp, r8
 801ae86:	d1d7      	bne.n	801ae38 <arm_mat_inverse_f32+0x130>
 801ae88:	9b04      	ldr	r3, [sp, #16]
 801ae8a:	f1be 0e01 	subs.w	lr, lr, #1
 801ae8e:	f106 0601 	add.w	r6, r6, #1
 801ae92:	449c      	add	ip, r3
 801ae94:	f1a7 0704 	sub.w	r7, r7, #4
 801ae98:	44a9      	add	r9, r5
 801ae9a:	f47f af7e 	bne.w	801ad9a <arm_mat_inverse_f32+0x92>
 801ae9e:	eef5 6a40 	vcmp.f32	s13, #0.0
 801aea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea6:	d006      	beq.n	801aeb6 <arm_mat_inverse_f32+0x1ae>
 801aea8:	2000      	movs	r0, #0
 801aeaa:	b007      	add	sp, #28
 801aeac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aeb0:	44bb      	add	fp, r7
 801aeb2:	4428      	add	r0, r5
 801aeb4:	e7e4      	b.n	801ae80 <arm_mat_inverse_f32+0x178>
 801aeb6:	9b05      	ldr	r3, [sp, #20]
 801aeb8:	9a01      	ldr	r2, [sp, #4]
 801aeba:	685b      	ldr	r3, [r3, #4]
 801aebc:	edd3 7a00 	vldr	s15, [r3]
 801aec0:	eef5 7a40 	vcmp.f32	s15, #0.0
 801aec4:	fb02 f204 	mul.w	r2, r2, r4
 801aec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aecc:	4614      	mov	r4, r2
 801aece:	bf08      	it	eq
 801aed0:	3304      	addeq	r3, #4
 801aed2:	d007      	beq.n	801aee4 <arm_mat_inverse_f32+0x1dc>
 801aed4:	e7e8      	b.n	801aea8 <arm_mat_inverse_f32+0x1a0>
 801aed6:	ecf3 7a01 	vldmia	r3!, {s15}
 801aeda:	eef5 7a40 	vcmp.f32	s15, #0.0
 801aede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aee2:	d1e1      	bne.n	801aea8 <arm_mat_inverse_f32+0x1a0>
 801aee4:	f10e 0e01 	add.w	lr, lr, #1
 801aee8:	4574      	cmp	r4, lr
 801aeea:	d1f4      	bne.n	801aed6 <arm_mat_inverse_f32+0x1ce>
 801aeec:	f06f 0004 	mvn.w	r0, #4
 801aef0:	b007      	add	sp, #28
 801aef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aef6:	f06f 0002 	mvn.w	r0, #2
 801aefa:	b007      	add	sp, #28
 801aefc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af00:	4656      	mov	r6, sl
 801af02:	3f01      	subs	r7, #1
 801af04:	f846 bb04 	str.w	fp, [r6], #4
 801af08:	f47f af1b 	bne.w	801ad42 <arm_mat_inverse_f32+0x3a>
 801af0c:	e735      	b.n	801ad7a <arm_mat_inverse_f32+0x72>
 801af0e:	bf00      	nop
 801af10:	00000000 	.word	0x00000000

0801af14 <arm_sin_f32>:
 801af14:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 801af94 <arm_sin_f32+0x80>
 801af18:	ee20 0a27 	vmul.f32	s0, s0, s15
 801af1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801af20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af24:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801af28:	d504      	bpl.n	801af34 <arm_sin_f32+0x20>
 801af2a:	ee17 3a90 	vmov	r3, s15
 801af2e:	3b01      	subs	r3, #1
 801af30:	ee07 3a90 	vmov	s15, r3
 801af34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801af38:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 801af98 <arm_sin_f32+0x84>
 801af3c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801af40:	ee20 0a07 	vmul.f32	s0, s0, s14
 801af44:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801af48:	ee17 3a90 	vmov	r3, s15
 801af4c:	b29b      	uxth	r3, r3
 801af4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801af52:	d21a      	bcs.n	801af8a <arm_sin_f32+0x76>
 801af54:	ee07 3a90 	vmov	s15, r3
 801af58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801af5c:	1c59      	adds	r1, r3, #1
 801af5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801af62:	4a0e      	ldr	r2, [pc, #56]	@ (801af9c <arm_sin_f32+0x88>)
 801af64:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801af68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801af6c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801af70:	ed93 7a00 	vldr	s14, [r3]
 801af74:	edd2 6a00 	vldr	s13, [r2]
 801af78:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801af7c:	ee20 0a26 	vmul.f32	s0, s0, s13
 801af80:	ee67 7a87 	vmul.f32	s15, s15, s14
 801af84:	ee37 0a80 	vadd.f32	s0, s15, s0
 801af88:	4770      	bx	lr
 801af8a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801af8e:	2101      	movs	r1, #1
 801af90:	2300      	movs	r3, #0
 801af92:	e7e6      	b.n	801af62 <arm_sin_f32+0x4e>
 801af94:	3e22f983 	.word	0x3e22f983
 801af98:	44000000 	.word	0x44000000
 801af9c:	0801eb78 	.word	0x0801eb78

0801afa0 <arm_cos_f32>:
 801afa0:	eddf 7a21 	vldr	s15, [pc, #132]	@ 801b028 <arm_cos_f32+0x88>
 801afa4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801afa8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801afac:	ee30 0a27 	vadd.f32	s0, s0, s15
 801afb0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801afb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afb8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801afbc:	d504      	bpl.n	801afc8 <arm_cos_f32+0x28>
 801afbe:	ee17 3a90 	vmov	r3, s15
 801afc2:	3b01      	subs	r3, #1
 801afc4:	ee07 3a90 	vmov	s15, r3
 801afc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801afcc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 801b02c <arm_cos_f32+0x8c>
 801afd0:	ee30 0a67 	vsub.f32	s0, s0, s15
 801afd4:	ee20 0a07 	vmul.f32	s0, s0, s14
 801afd8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801afdc:	ee17 3a90 	vmov	r3, s15
 801afe0:	b29b      	uxth	r3, r3
 801afe2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801afe6:	d21a      	bcs.n	801b01e <arm_cos_f32+0x7e>
 801afe8:	ee07 3a90 	vmov	s15, r3
 801afec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801aff0:	1c59      	adds	r1, r3, #1
 801aff2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801aff6:	4a0e      	ldr	r2, [pc, #56]	@ (801b030 <arm_cos_f32+0x90>)
 801aff8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801affc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b000:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801b004:	ed93 7a00 	vldr	s14, [r3]
 801b008:	edd2 6a00 	vldr	s13, [r2]
 801b00c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801b010:	ee20 0a26 	vmul.f32	s0, s0, s13
 801b014:	ee67 7a87 	vmul.f32	s15, s15, s14
 801b018:	ee37 0a80 	vadd.f32	s0, s15, s0
 801b01c:	4770      	bx	lr
 801b01e:	ee30 0a47 	vsub.f32	s0, s0, s14
 801b022:	2101      	movs	r1, #1
 801b024:	2300      	movs	r3, #0
 801b026:	e7e6      	b.n	801aff6 <arm_cos_f32+0x56>
 801b028:	3e22f983 	.word	0x3e22f983
 801b02c:	44000000 	.word	0x44000000
 801b030:	0801eb78 	.word	0x0801eb78

0801b034 <memset>:
 801b034:	4402      	add	r2, r0
 801b036:	4603      	mov	r3, r0
 801b038:	4293      	cmp	r3, r2
 801b03a:	d100      	bne.n	801b03e <memset+0xa>
 801b03c:	4770      	bx	lr
 801b03e:	f803 1b01 	strb.w	r1, [r3], #1
 801b042:	e7f9      	b.n	801b038 <memset+0x4>

0801b044 <strncpy>:
 801b044:	b510      	push	{r4, lr}
 801b046:	3901      	subs	r1, #1
 801b048:	4603      	mov	r3, r0
 801b04a:	b132      	cbz	r2, 801b05a <strncpy+0x16>
 801b04c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b050:	f803 4b01 	strb.w	r4, [r3], #1
 801b054:	3a01      	subs	r2, #1
 801b056:	2c00      	cmp	r4, #0
 801b058:	d1f7      	bne.n	801b04a <strncpy+0x6>
 801b05a:	441a      	add	r2, r3
 801b05c:	2100      	movs	r1, #0
 801b05e:	4293      	cmp	r3, r2
 801b060:	d100      	bne.n	801b064 <strncpy+0x20>
 801b062:	bd10      	pop	{r4, pc}
 801b064:	f803 1b01 	strb.w	r1, [r3], #1
 801b068:	e7f9      	b.n	801b05e <strncpy+0x1a>
	...

0801b06c <__errno>:
 801b06c:	4b01      	ldr	r3, [pc, #4]	@ (801b074 <__errno+0x8>)
 801b06e:	6818      	ldr	r0, [r3, #0]
 801b070:	4770      	bx	lr
 801b072:	bf00      	nop
 801b074:	20000188 	.word	0x20000188

0801b078 <__libc_init_array>:
 801b078:	b570      	push	{r4, r5, r6, lr}
 801b07a:	4d0d      	ldr	r5, [pc, #52]	@ (801b0b0 <__libc_init_array+0x38>)
 801b07c:	4c0d      	ldr	r4, [pc, #52]	@ (801b0b4 <__libc_init_array+0x3c>)
 801b07e:	1b64      	subs	r4, r4, r5
 801b080:	10a4      	asrs	r4, r4, #2
 801b082:	2600      	movs	r6, #0
 801b084:	42a6      	cmp	r6, r4
 801b086:	d109      	bne.n	801b09c <__libc_init_array+0x24>
 801b088:	4d0b      	ldr	r5, [pc, #44]	@ (801b0b8 <__libc_init_array+0x40>)
 801b08a:	4c0c      	ldr	r4, [pc, #48]	@ (801b0bc <__libc_init_array+0x44>)
 801b08c:	f002 fdf4 	bl	801dc78 <_init>
 801b090:	1b64      	subs	r4, r4, r5
 801b092:	10a4      	asrs	r4, r4, #2
 801b094:	2600      	movs	r6, #0
 801b096:	42a6      	cmp	r6, r4
 801b098:	d105      	bne.n	801b0a6 <__libc_init_array+0x2e>
 801b09a:	bd70      	pop	{r4, r5, r6, pc}
 801b09c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0a0:	4798      	blx	r3
 801b0a2:	3601      	adds	r6, #1
 801b0a4:	e7ee      	b.n	801b084 <__libc_init_array+0xc>
 801b0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b0aa:	4798      	blx	r3
 801b0ac:	3601      	adds	r6, #1
 801b0ae:	e7f2      	b.n	801b096 <__libc_init_array+0x1e>
 801b0b0:	0801f838 	.word	0x0801f838
 801b0b4:	0801f838 	.word	0x0801f838
 801b0b8:	0801f838 	.word	0x0801f838
 801b0bc:	0801f83c 	.word	0x0801f83c

0801b0c0 <memcpy>:
 801b0c0:	440a      	add	r2, r1
 801b0c2:	4291      	cmp	r1, r2
 801b0c4:	f100 33ff 	add.w	r3, r0, #4294967295
 801b0c8:	d100      	bne.n	801b0cc <memcpy+0xc>
 801b0ca:	4770      	bx	lr
 801b0cc:	b510      	push	{r4, lr}
 801b0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b0d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b0d6:	4291      	cmp	r1, r2
 801b0d8:	d1f9      	bne.n	801b0ce <memcpy+0xe>
 801b0da:	bd10      	pop	{r4, pc}

0801b0dc <asin>:
 801b0dc:	b538      	push	{r3, r4, r5, lr}
 801b0de:	ed2d 8b02 	vpush	{d8}
 801b0e2:	ec55 4b10 	vmov	r4, r5, d0
 801b0e6:	f000 fb8f 	bl	801b808 <__ieee754_asin>
 801b0ea:	4622      	mov	r2, r4
 801b0ec:	462b      	mov	r3, r5
 801b0ee:	4620      	mov	r0, r4
 801b0f0:	4629      	mov	r1, r5
 801b0f2:	eeb0 8a40 	vmov.f32	s16, s0
 801b0f6:	eef0 8a60 	vmov.f32	s17, s1
 801b0fa:	f7e5 fcc9 	bl	8000a90 <__aeabi_dcmpun>
 801b0fe:	b9a8      	cbnz	r0, 801b12c <asin+0x50>
 801b100:	ec45 4b10 	vmov	d0, r4, r5
 801b104:	f000 f84c 	bl	801b1a0 <fabs>
 801b108:	4b0c      	ldr	r3, [pc, #48]	@ (801b13c <asin+0x60>)
 801b10a:	ec51 0b10 	vmov	r0, r1, d0
 801b10e:	2200      	movs	r2, #0
 801b110:	f7e5 fcb4 	bl	8000a7c <__aeabi_dcmpgt>
 801b114:	b150      	cbz	r0, 801b12c <asin+0x50>
 801b116:	f7ff ffa9 	bl	801b06c <__errno>
 801b11a:	ecbd 8b02 	vpop	{d8}
 801b11e:	2321      	movs	r3, #33	@ 0x21
 801b120:	6003      	str	r3, [r0, #0]
 801b122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b126:	4806      	ldr	r0, [pc, #24]	@ (801b140 <asin+0x64>)
 801b128:	f000 ba36 	b.w	801b598 <nan>
 801b12c:	eeb0 0a48 	vmov.f32	s0, s16
 801b130:	eef0 0a68 	vmov.f32	s1, s17
 801b134:	ecbd 8b02 	vpop	{d8}
 801b138:	bd38      	pop	{r3, r4, r5, pc}
 801b13a:	bf00      	nop
 801b13c:	3ff00000 	.word	0x3ff00000
 801b140:	0801f37c 	.word	0x0801f37c

0801b144 <atan2>:
 801b144:	f000 bd64 	b.w	801bc10 <__ieee754_atan2>

0801b148 <sqrt>:
 801b148:	b538      	push	{r3, r4, r5, lr}
 801b14a:	ed2d 8b02 	vpush	{d8}
 801b14e:	ec55 4b10 	vmov	r4, r5, d0
 801b152:	f000 fa79 	bl	801b648 <__ieee754_sqrt>
 801b156:	4622      	mov	r2, r4
 801b158:	462b      	mov	r3, r5
 801b15a:	4620      	mov	r0, r4
 801b15c:	4629      	mov	r1, r5
 801b15e:	eeb0 8a40 	vmov.f32	s16, s0
 801b162:	eef0 8a60 	vmov.f32	s17, s1
 801b166:	f7e5 fc93 	bl	8000a90 <__aeabi_dcmpun>
 801b16a:	b990      	cbnz	r0, 801b192 <sqrt+0x4a>
 801b16c:	2200      	movs	r2, #0
 801b16e:	2300      	movs	r3, #0
 801b170:	4620      	mov	r0, r4
 801b172:	4629      	mov	r1, r5
 801b174:	f7e5 fc64 	bl	8000a40 <__aeabi_dcmplt>
 801b178:	b158      	cbz	r0, 801b192 <sqrt+0x4a>
 801b17a:	f7ff ff77 	bl	801b06c <__errno>
 801b17e:	2321      	movs	r3, #33	@ 0x21
 801b180:	6003      	str	r3, [r0, #0]
 801b182:	2200      	movs	r2, #0
 801b184:	2300      	movs	r3, #0
 801b186:	4610      	mov	r0, r2
 801b188:	4619      	mov	r1, r3
 801b18a:	f7e5 fb11 	bl	80007b0 <__aeabi_ddiv>
 801b18e:	ec41 0b18 	vmov	d8, r0, r1
 801b192:	eeb0 0a48 	vmov.f32	s0, s16
 801b196:	eef0 0a68 	vmov.f32	s1, s17
 801b19a:	ecbd 8b02 	vpop	{d8}
 801b19e:	bd38      	pop	{r3, r4, r5, pc}

0801b1a0 <fabs>:
 801b1a0:	ec51 0b10 	vmov	r0, r1, d0
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801b1aa:	ec43 2b10 	vmov	d0, r2, r3
 801b1ae:	4770      	bx	lr

0801b1b0 <acosf>:
 801b1b0:	b508      	push	{r3, lr}
 801b1b2:	ed2d 8b02 	vpush	{d8}
 801b1b6:	eeb0 8a40 	vmov.f32	s16, s0
 801b1ba:	f001 f909 	bl	801c3d0 <__ieee754_acosf>
 801b1be:	eeb4 8a48 	vcmp.f32	s16, s16
 801b1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1c6:	eef0 8a40 	vmov.f32	s17, s0
 801b1ca:	d615      	bvs.n	801b1f8 <acosf+0x48>
 801b1cc:	eeb0 0a48 	vmov.f32	s0, s16
 801b1d0:	f000 f966 	bl	801b4a0 <fabsf>
 801b1d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b1d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801b1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b1e0:	dd0a      	ble.n	801b1f8 <acosf+0x48>
 801b1e2:	f7ff ff43 	bl	801b06c <__errno>
 801b1e6:	ecbd 8b02 	vpop	{d8}
 801b1ea:	2321      	movs	r3, #33	@ 0x21
 801b1ec:	6003      	str	r3, [r0, #0]
 801b1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b1f2:	4804      	ldr	r0, [pc, #16]	@ (801b204 <acosf+0x54>)
 801b1f4:	f000 b9e2 	b.w	801b5bc <nanf>
 801b1f8:	eeb0 0a68 	vmov.f32	s0, s17
 801b1fc:	ecbd 8b02 	vpop	{d8}
 801b200:	bd08      	pop	{r3, pc}
 801b202:	bf00      	nop
 801b204:	0801f37c 	.word	0x0801f37c

0801b208 <asinf>:
 801b208:	b508      	push	{r3, lr}
 801b20a:	ed2d 8b02 	vpush	{d8}
 801b20e:	eeb0 8a40 	vmov.f32	s16, s0
 801b212:	f001 f9d5 	bl	801c5c0 <__ieee754_asinf>
 801b216:	eeb4 8a48 	vcmp.f32	s16, s16
 801b21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b21e:	eef0 8a40 	vmov.f32	s17, s0
 801b222:	d615      	bvs.n	801b250 <asinf+0x48>
 801b224:	eeb0 0a48 	vmov.f32	s0, s16
 801b228:	f000 f93a 	bl	801b4a0 <fabsf>
 801b22c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801b230:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801b234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b238:	dd0a      	ble.n	801b250 <asinf+0x48>
 801b23a:	f7ff ff17 	bl	801b06c <__errno>
 801b23e:	ecbd 8b02 	vpop	{d8}
 801b242:	2321      	movs	r3, #33	@ 0x21
 801b244:	6003      	str	r3, [r0, #0]
 801b246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b24a:	4804      	ldr	r0, [pc, #16]	@ (801b25c <asinf+0x54>)
 801b24c:	f000 b9b6 	b.w	801b5bc <nanf>
 801b250:	eeb0 0a68 	vmov.f32	s0, s17
 801b254:	ecbd 8b02 	vpop	{d8}
 801b258:	bd08      	pop	{r3, pc}
 801b25a:	bf00      	nop
 801b25c:	0801f37c 	.word	0x0801f37c

0801b260 <atan2f>:
 801b260:	f001 ba94 	b.w	801c78c <__ieee754_atan2f>

0801b264 <expf>:
 801b264:	b508      	push	{r3, lr}
 801b266:	ed2d 8b02 	vpush	{d8}
 801b26a:	eef0 8a40 	vmov.f32	s17, s0
 801b26e:	f001 fb2d 	bl	801c8cc <__ieee754_expf>
 801b272:	eeb0 8a40 	vmov.f32	s16, s0
 801b276:	eeb0 0a68 	vmov.f32	s0, s17
 801b27a:	f000 f995 	bl	801b5a8 <finitef>
 801b27e:	b160      	cbz	r0, 801b29a <expf+0x36>
 801b280:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 801b2c0 <expf+0x5c>
 801b284:	eef4 8ae7 	vcmpe.f32	s17, s15
 801b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b28c:	dd0a      	ble.n	801b2a4 <expf+0x40>
 801b28e:	f7ff feed 	bl	801b06c <__errno>
 801b292:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 801b2c4 <expf+0x60>
 801b296:	2322      	movs	r3, #34	@ 0x22
 801b298:	6003      	str	r3, [r0, #0]
 801b29a:	eeb0 0a48 	vmov.f32	s0, s16
 801b29e:	ecbd 8b02 	vpop	{d8}
 801b2a2:	bd08      	pop	{r3, pc}
 801b2a4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801b2c8 <expf+0x64>
 801b2a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 801b2ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2b0:	d5f3      	bpl.n	801b29a <expf+0x36>
 801b2b2:	f7ff fedb 	bl	801b06c <__errno>
 801b2b6:	2322      	movs	r3, #34	@ 0x22
 801b2b8:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 801b2cc <expf+0x68>
 801b2bc:	6003      	str	r3, [r0, #0]
 801b2be:	e7ec      	b.n	801b29a <expf+0x36>
 801b2c0:	42b17217 	.word	0x42b17217
 801b2c4:	7f800000 	.word	0x7f800000
 801b2c8:	c2cff1b5 	.word	0xc2cff1b5
 801b2cc:	00000000 	.word	0x00000000

0801b2d0 <logf>:
 801b2d0:	b508      	push	{r3, lr}
 801b2d2:	ed2d 8b02 	vpush	{d8}
 801b2d6:	eeb0 8a40 	vmov.f32	s16, s0
 801b2da:	f001 fbc5 	bl	801ca68 <__ieee754_logf>
 801b2de:	eeb4 8a48 	vcmp.f32	s16, s16
 801b2e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e6:	d60f      	bvs.n	801b308 <logf+0x38>
 801b2e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2f0:	dc0a      	bgt.n	801b308 <logf+0x38>
 801b2f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b2f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2fa:	d108      	bne.n	801b30e <logf+0x3e>
 801b2fc:	f7ff feb6 	bl	801b06c <__errno>
 801b300:	2322      	movs	r3, #34	@ 0x22
 801b302:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801b324 <logf+0x54>
 801b306:	6003      	str	r3, [r0, #0]
 801b308:	ecbd 8b02 	vpop	{d8}
 801b30c:	bd08      	pop	{r3, pc}
 801b30e:	f7ff fead 	bl	801b06c <__errno>
 801b312:	ecbd 8b02 	vpop	{d8}
 801b316:	2321      	movs	r3, #33	@ 0x21
 801b318:	6003      	str	r3, [r0, #0]
 801b31a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b31e:	4802      	ldr	r0, [pc, #8]	@ (801b328 <logf+0x58>)
 801b320:	f000 b94c 	b.w	801b5bc <nanf>
 801b324:	ff800000 	.word	0xff800000
 801b328:	0801f37c 	.word	0x0801f37c

0801b32c <powf>:
 801b32c:	b508      	push	{r3, lr}
 801b32e:	ed2d 8b04 	vpush	{d8-d9}
 801b332:	eeb0 8a60 	vmov.f32	s16, s1
 801b336:	eeb0 9a40 	vmov.f32	s18, s0
 801b33a:	f001 fc87 	bl	801cc4c <__ieee754_powf>
 801b33e:	eeb4 8a48 	vcmp.f32	s16, s16
 801b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b346:	eef0 8a40 	vmov.f32	s17, s0
 801b34a:	d63e      	bvs.n	801b3ca <powf+0x9e>
 801b34c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b354:	d112      	bne.n	801b37c <powf+0x50>
 801b356:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b35e:	d039      	beq.n	801b3d4 <powf+0xa8>
 801b360:	eeb0 0a48 	vmov.f32	s0, s16
 801b364:	f000 f920 	bl	801b5a8 <finitef>
 801b368:	b378      	cbz	r0, 801b3ca <powf+0x9e>
 801b36a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b372:	d52a      	bpl.n	801b3ca <powf+0x9e>
 801b374:	f7ff fe7a 	bl	801b06c <__errno>
 801b378:	2322      	movs	r3, #34	@ 0x22
 801b37a:	e014      	b.n	801b3a6 <powf+0x7a>
 801b37c:	f000 f914 	bl	801b5a8 <finitef>
 801b380:	b998      	cbnz	r0, 801b3aa <powf+0x7e>
 801b382:	eeb0 0a49 	vmov.f32	s0, s18
 801b386:	f000 f90f 	bl	801b5a8 <finitef>
 801b38a:	b170      	cbz	r0, 801b3aa <powf+0x7e>
 801b38c:	eeb0 0a48 	vmov.f32	s0, s16
 801b390:	f000 f90a 	bl	801b5a8 <finitef>
 801b394:	b148      	cbz	r0, 801b3aa <powf+0x7e>
 801b396:	eef4 8a68 	vcmp.f32	s17, s17
 801b39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b39e:	d7e9      	bvc.n	801b374 <powf+0x48>
 801b3a0:	f7ff fe64 	bl	801b06c <__errno>
 801b3a4:	2321      	movs	r3, #33	@ 0x21
 801b3a6:	6003      	str	r3, [r0, #0]
 801b3a8:	e00f      	b.n	801b3ca <powf+0x9e>
 801b3aa:	eef5 8a40 	vcmp.f32	s17, #0.0
 801b3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3b2:	d10a      	bne.n	801b3ca <powf+0x9e>
 801b3b4:	eeb0 0a49 	vmov.f32	s0, s18
 801b3b8:	f000 f8f6 	bl	801b5a8 <finitef>
 801b3bc:	b128      	cbz	r0, 801b3ca <powf+0x9e>
 801b3be:	eeb0 0a48 	vmov.f32	s0, s16
 801b3c2:	f000 f8f1 	bl	801b5a8 <finitef>
 801b3c6:	2800      	cmp	r0, #0
 801b3c8:	d1d4      	bne.n	801b374 <powf+0x48>
 801b3ca:	eeb0 0a68 	vmov.f32	s0, s17
 801b3ce:	ecbd 8b04 	vpop	{d8-d9}
 801b3d2:	bd08      	pop	{r3, pc}
 801b3d4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801b3d8:	e7f7      	b.n	801b3ca <powf+0x9e>
	...

0801b3dc <sqrtf>:
 801b3dc:	b508      	push	{r3, lr}
 801b3de:	ed2d 8b02 	vpush	{d8}
 801b3e2:	eeb0 8a40 	vmov.f32	s16, s0
 801b3e6:	f000 fa09 	bl	801b7fc <__ieee754_sqrtf>
 801b3ea:	eeb4 8a48 	vcmp.f32	s16, s16
 801b3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3f2:	d60c      	bvs.n	801b40e <sqrtf+0x32>
 801b3f4:	eddf 8a07 	vldr	s17, [pc, #28]	@ 801b414 <sqrtf+0x38>
 801b3f8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b3fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b400:	d505      	bpl.n	801b40e <sqrtf+0x32>
 801b402:	f7ff fe33 	bl	801b06c <__errno>
 801b406:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801b40a:	2321      	movs	r3, #33	@ 0x21
 801b40c:	6003      	str	r3, [r0, #0]
 801b40e:	ecbd 8b02 	vpop	{d8}
 801b412:	bd08      	pop	{r3, pc}
 801b414:	00000000 	.word	0x00000000

0801b418 <cosf>:
 801b418:	ee10 3a10 	vmov	r3, s0
 801b41c:	b507      	push	{r0, r1, r2, lr}
 801b41e:	4a1e      	ldr	r2, [pc, #120]	@ (801b498 <cosf+0x80>)
 801b420:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b424:	4293      	cmp	r3, r2
 801b426:	d806      	bhi.n	801b436 <cosf+0x1e>
 801b428:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 801b49c <cosf+0x84>
 801b42c:	b003      	add	sp, #12
 801b42e:	f85d eb04 	ldr.w	lr, [sp], #4
 801b432:	f000 be4d 	b.w	801c0d0 <__kernel_cosf>
 801b436:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b43a:	d304      	bcc.n	801b446 <cosf+0x2e>
 801b43c:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b440:	b003      	add	sp, #12
 801b442:	f85d fb04 	ldr.w	pc, [sp], #4
 801b446:	4668      	mov	r0, sp
 801b448:	f001 fed0 	bl	801d1ec <__ieee754_rem_pio2f>
 801b44c:	f000 0003 	and.w	r0, r0, #3
 801b450:	2801      	cmp	r0, #1
 801b452:	d009      	beq.n	801b468 <cosf+0x50>
 801b454:	2802      	cmp	r0, #2
 801b456:	d010      	beq.n	801b47a <cosf+0x62>
 801b458:	b9b0      	cbnz	r0, 801b488 <cosf+0x70>
 801b45a:	eddd 0a01 	vldr	s1, [sp, #4]
 801b45e:	ed9d 0a00 	vldr	s0, [sp]
 801b462:	f000 fe35 	bl	801c0d0 <__kernel_cosf>
 801b466:	e7eb      	b.n	801b440 <cosf+0x28>
 801b468:	eddd 0a01 	vldr	s1, [sp, #4]
 801b46c:	ed9d 0a00 	vldr	s0, [sp]
 801b470:	f000 fe86 	bl	801c180 <__kernel_sinf>
 801b474:	eeb1 0a40 	vneg.f32	s0, s0
 801b478:	e7e2      	b.n	801b440 <cosf+0x28>
 801b47a:	eddd 0a01 	vldr	s1, [sp, #4]
 801b47e:	ed9d 0a00 	vldr	s0, [sp]
 801b482:	f000 fe25 	bl	801c0d0 <__kernel_cosf>
 801b486:	e7f5      	b.n	801b474 <cosf+0x5c>
 801b488:	eddd 0a01 	vldr	s1, [sp, #4]
 801b48c:	ed9d 0a00 	vldr	s0, [sp]
 801b490:	2001      	movs	r0, #1
 801b492:	f000 fe75 	bl	801c180 <__kernel_sinf>
 801b496:	e7d3      	b.n	801b440 <cosf+0x28>
 801b498:	3f490fd8 	.word	0x3f490fd8
 801b49c:	00000000 	.word	0x00000000

0801b4a0 <fabsf>:
 801b4a0:	ee10 3a10 	vmov	r3, s0
 801b4a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b4a8:	ee00 3a10 	vmov	s0, r3
 801b4ac:	4770      	bx	lr
	...

0801b4b0 <sinf>:
 801b4b0:	ee10 3a10 	vmov	r3, s0
 801b4b4:	b507      	push	{r0, r1, r2, lr}
 801b4b6:	4a1f      	ldr	r2, [pc, #124]	@ (801b534 <sinf+0x84>)
 801b4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b4bc:	4293      	cmp	r3, r2
 801b4be:	d807      	bhi.n	801b4d0 <sinf+0x20>
 801b4c0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 801b538 <sinf+0x88>
 801b4c4:	2000      	movs	r0, #0
 801b4c6:	b003      	add	sp, #12
 801b4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b4cc:	f000 be58 	b.w	801c180 <__kernel_sinf>
 801b4d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b4d4:	d304      	bcc.n	801b4e0 <sinf+0x30>
 801b4d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b4da:	b003      	add	sp, #12
 801b4dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b4e0:	4668      	mov	r0, sp
 801b4e2:	f001 fe83 	bl	801d1ec <__ieee754_rem_pio2f>
 801b4e6:	f000 0003 	and.w	r0, r0, #3
 801b4ea:	2801      	cmp	r0, #1
 801b4ec:	d00a      	beq.n	801b504 <sinf+0x54>
 801b4ee:	2802      	cmp	r0, #2
 801b4f0:	d00f      	beq.n	801b512 <sinf+0x62>
 801b4f2:	b9c0      	cbnz	r0, 801b526 <sinf+0x76>
 801b4f4:	eddd 0a01 	vldr	s1, [sp, #4]
 801b4f8:	ed9d 0a00 	vldr	s0, [sp]
 801b4fc:	2001      	movs	r0, #1
 801b4fe:	f000 fe3f 	bl	801c180 <__kernel_sinf>
 801b502:	e7ea      	b.n	801b4da <sinf+0x2a>
 801b504:	eddd 0a01 	vldr	s1, [sp, #4]
 801b508:	ed9d 0a00 	vldr	s0, [sp]
 801b50c:	f000 fde0 	bl	801c0d0 <__kernel_cosf>
 801b510:	e7e3      	b.n	801b4da <sinf+0x2a>
 801b512:	eddd 0a01 	vldr	s1, [sp, #4]
 801b516:	ed9d 0a00 	vldr	s0, [sp]
 801b51a:	2001      	movs	r0, #1
 801b51c:	f000 fe30 	bl	801c180 <__kernel_sinf>
 801b520:	eeb1 0a40 	vneg.f32	s0, s0
 801b524:	e7d9      	b.n	801b4da <sinf+0x2a>
 801b526:	eddd 0a01 	vldr	s1, [sp, #4]
 801b52a:	ed9d 0a00 	vldr	s0, [sp]
 801b52e:	f000 fdcf 	bl	801c0d0 <__kernel_cosf>
 801b532:	e7f5      	b.n	801b520 <sinf+0x70>
 801b534:	3f490fd8 	.word	0x3f490fd8
 801b538:	00000000 	.word	0x00000000

0801b53c <tanf>:
 801b53c:	ee10 3a10 	vmov	r3, s0
 801b540:	b507      	push	{r0, r1, r2, lr}
 801b542:	4a12      	ldr	r2, [pc, #72]	@ (801b58c <tanf+0x50>)
 801b544:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b548:	4293      	cmp	r3, r2
 801b54a:	d807      	bhi.n	801b55c <tanf+0x20>
 801b54c:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801b590 <tanf+0x54>
 801b550:	2001      	movs	r0, #1
 801b552:	b003      	add	sp, #12
 801b554:	f85d eb04 	ldr.w	lr, [sp], #4
 801b558:	f000 be5a 	b.w	801c210 <__kernel_tanf>
 801b55c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801b560:	d304      	bcc.n	801b56c <tanf+0x30>
 801b562:	ee30 0a40 	vsub.f32	s0, s0, s0
 801b566:	b003      	add	sp, #12
 801b568:	f85d fb04 	ldr.w	pc, [sp], #4
 801b56c:	4668      	mov	r0, sp
 801b56e:	f001 fe3d 	bl	801d1ec <__ieee754_rem_pio2f>
 801b572:	0040      	lsls	r0, r0, #1
 801b574:	f000 0002 	and.w	r0, r0, #2
 801b578:	eddd 0a01 	vldr	s1, [sp, #4]
 801b57c:	ed9d 0a00 	vldr	s0, [sp]
 801b580:	f1c0 0001 	rsb	r0, r0, #1
 801b584:	f000 fe44 	bl	801c210 <__kernel_tanf>
 801b588:	e7ed      	b.n	801b566 <tanf+0x2a>
 801b58a:	bf00      	nop
 801b58c:	3f490fda 	.word	0x3f490fda
	...

0801b598 <nan>:
 801b598:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801b5a0 <nan+0x8>
 801b59c:	4770      	bx	lr
 801b59e:	bf00      	nop
 801b5a0:	00000000 	.word	0x00000000
 801b5a4:	7ff80000 	.word	0x7ff80000

0801b5a8 <finitef>:
 801b5a8:	ee10 3a10 	vmov	r3, s0
 801b5ac:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 801b5b0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801b5b4:	bfac      	ite	ge
 801b5b6:	2000      	movge	r0, #0
 801b5b8:	2001      	movlt	r0, #1
 801b5ba:	4770      	bx	lr

0801b5bc <nanf>:
 801b5bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801b5c4 <nanf+0x8>
 801b5c0:	4770      	bx	lr
 801b5c2:	bf00      	nop
 801b5c4:	7fc00000 	.word	0x7fc00000

0801b5c8 <lrintf>:
 801b5c8:	ee10 3a10 	vmov	r3, s0
 801b5cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801b5d0:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 801b5d4:	281e      	cmp	r0, #30
 801b5d6:	b082      	sub	sp, #8
 801b5d8:	dc2f      	bgt.n	801b63a <lrintf+0x72>
 801b5da:	1c41      	adds	r1, r0, #1
 801b5dc:	da02      	bge.n	801b5e4 <lrintf+0x1c>
 801b5de:	2000      	movs	r0, #0
 801b5e0:	b002      	add	sp, #8
 801b5e2:	4770      	bx	lr
 801b5e4:	2816      	cmp	r0, #22
 801b5e6:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801b5ea:	dd0a      	ble.n	801b602 <lrintf+0x3a>
 801b5ec:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801b5f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801b5f4:	3a96      	subs	r2, #150	@ 0x96
 801b5f6:	fa03 f002 	lsl.w	r0, r3, r2
 801b5fa:	2900      	cmp	r1, #0
 801b5fc:	d0f0      	beq.n	801b5e0 <lrintf+0x18>
 801b5fe:	4240      	negs	r0, r0
 801b600:	e7ee      	b.n	801b5e0 <lrintf+0x18>
 801b602:	4b10      	ldr	r3, [pc, #64]	@ (801b644 <lrintf+0x7c>)
 801b604:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801b608:	ed93 7a00 	vldr	s14, [r3]
 801b60c:	ee37 0a00 	vadd.f32	s0, s14, s0
 801b610:	ed8d 0a01 	vstr	s0, [sp, #4]
 801b614:	eddd 7a01 	vldr	s15, [sp, #4]
 801b618:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801b61c:	ee17 3a90 	vmov	r3, s15
 801b620:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801b624:	d0db      	beq.n	801b5de <lrintf+0x16>
 801b626:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801b62a:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801b62e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801b632:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801b636:	40d8      	lsrs	r0, r3
 801b638:	e7df      	b.n	801b5fa <lrintf+0x32>
 801b63a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801b63e:	ee17 0a90 	vmov	r0, s15
 801b642:	e7cd      	b.n	801b5e0 <lrintf+0x18>
 801b644:	0801f380 	.word	0x0801f380

0801b648 <__ieee754_sqrt>:
 801b648:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b64c:	4a68      	ldr	r2, [pc, #416]	@ (801b7f0 <__ieee754_sqrt+0x1a8>)
 801b64e:	ec55 4b10 	vmov	r4, r5, d0
 801b652:	43aa      	bics	r2, r5
 801b654:	462b      	mov	r3, r5
 801b656:	4621      	mov	r1, r4
 801b658:	d110      	bne.n	801b67c <__ieee754_sqrt+0x34>
 801b65a:	4622      	mov	r2, r4
 801b65c:	4620      	mov	r0, r4
 801b65e:	4629      	mov	r1, r5
 801b660:	f7e4 ff7c 	bl	800055c <__aeabi_dmul>
 801b664:	4602      	mov	r2, r0
 801b666:	460b      	mov	r3, r1
 801b668:	4620      	mov	r0, r4
 801b66a:	4629      	mov	r1, r5
 801b66c:	f7e4 fdc0 	bl	80001f0 <__adddf3>
 801b670:	4604      	mov	r4, r0
 801b672:	460d      	mov	r5, r1
 801b674:	ec45 4b10 	vmov	d0, r4, r5
 801b678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b67c:	2d00      	cmp	r5, #0
 801b67e:	dc0e      	bgt.n	801b69e <__ieee754_sqrt+0x56>
 801b680:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801b684:	4322      	orrs	r2, r4
 801b686:	d0f5      	beq.n	801b674 <__ieee754_sqrt+0x2c>
 801b688:	b19d      	cbz	r5, 801b6b2 <__ieee754_sqrt+0x6a>
 801b68a:	4622      	mov	r2, r4
 801b68c:	4620      	mov	r0, r4
 801b68e:	4629      	mov	r1, r5
 801b690:	f7e4 fdac 	bl	80001ec <__aeabi_dsub>
 801b694:	4602      	mov	r2, r0
 801b696:	460b      	mov	r3, r1
 801b698:	f7e5 f88a 	bl	80007b0 <__aeabi_ddiv>
 801b69c:	e7e8      	b.n	801b670 <__ieee754_sqrt+0x28>
 801b69e:	152a      	asrs	r2, r5, #20
 801b6a0:	d115      	bne.n	801b6ce <__ieee754_sqrt+0x86>
 801b6a2:	2000      	movs	r0, #0
 801b6a4:	e009      	b.n	801b6ba <__ieee754_sqrt+0x72>
 801b6a6:	0acb      	lsrs	r3, r1, #11
 801b6a8:	3a15      	subs	r2, #21
 801b6aa:	0549      	lsls	r1, r1, #21
 801b6ac:	2b00      	cmp	r3, #0
 801b6ae:	d0fa      	beq.n	801b6a6 <__ieee754_sqrt+0x5e>
 801b6b0:	e7f7      	b.n	801b6a2 <__ieee754_sqrt+0x5a>
 801b6b2:	462a      	mov	r2, r5
 801b6b4:	e7fa      	b.n	801b6ac <__ieee754_sqrt+0x64>
 801b6b6:	005b      	lsls	r3, r3, #1
 801b6b8:	3001      	adds	r0, #1
 801b6ba:	02dc      	lsls	r4, r3, #11
 801b6bc:	d5fb      	bpl.n	801b6b6 <__ieee754_sqrt+0x6e>
 801b6be:	1e44      	subs	r4, r0, #1
 801b6c0:	1b12      	subs	r2, r2, r4
 801b6c2:	f1c0 0420 	rsb	r4, r0, #32
 801b6c6:	fa21 f404 	lsr.w	r4, r1, r4
 801b6ca:	4323      	orrs	r3, r4
 801b6cc:	4081      	lsls	r1, r0
 801b6ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b6d2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801b6d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801b6da:	07d2      	lsls	r2, r2, #31
 801b6dc:	bf5c      	itt	pl
 801b6de:	005b      	lslpl	r3, r3, #1
 801b6e0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 801b6e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b6e8:	bf58      	it	pl
 801b6ea:	0049      	lslpl	r1, r1, #1
 801b6ec:	2600      	movs	r6, #0
 801b6ee:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 801b6f2:	106d      	asrs	r5, r5, #1
 801b6f4:	0049      	lsls	r1, r1, #1
 801b6f6:	2016      	movs	r0, #22
 801b6f8:	4632      	mov	r2, r6
 801b6fa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 801b6fe:	1917      	adds	r7, r2, r4
 801b700:	429f      	cmp	r7, r3
 801b702:	bfde      	ittt	le
 801b704:	193a      	addle	r2, r7, r4
 801b706:	1bdb      	suble	r3, r3, r7
 801b708:	1936      	addle	r6, r6, r4
 801b70a:	0fcf      	lsrs	r7, r1, #31
 801b70c:	3801      	subs	r0, #1
 801b70e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801b712:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b716:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b71a:	d1f0      	bne.n	801b6fe <__ieee754_sqrt+0xb6>
 801b71c:	4604      	mov	r4, r0
 801b71e:	2720      	movs	r7, #32
 801b720:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 801b724:	429a      	cmp	r2, r3
 801b726:	eb00 0e0c 	add.w	lr, r0, ip
 801b72a:	db02      	blt.n	801b732 <__ieee754_sqrt+0xea>
 801b72c:	d113      	bne.n	801b756 <__ieee754_sqrt+0x10e>
 801b72e:	458e      	cmp	lr, r1
 801b730:	d811      	bhi.n	801b756 <__ieee754_sqrt+0x10e>
 801b732:	f1be 0f00 	cmp.w	lr, #0
 801b736:	eb0e 000c 	add.w	r0, lr, ip
 801b73a:	da42      	bge.n	801b7c2 <__ieee754_sqrt+0x17a>
 801b73c:	2800      	cmp	r0, #0
 801b73e:	db40      	blt.n	801b7c2 <__ieee754_sqrt+0x17a>
 801b740:	f102 0801 	add.w	r8, r2, #1
 801b744:	1a9b      	subs	r3, r3, r2
 801b746:	458e      	cmp	lr, r1
 801b748:	bf88      	it	hi
 801b74a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801b74e:	eba1 010e 	sub.w	r1, r1, lr
 801b752:	4464      	add	r4, ip
 801b754:	4642      	mov	r2, r8
 801b756:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801b75a:	3f01      	subs	r7, #1
 801b75c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 801b760:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801b764:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 801b768:	d1dc      	bne.n	801b724 <__ieee754_sqrt+0xdc>
 801b76a:	4319      	orrs	r1, r3
 801b76c:	d01b      	beq.n	801b7a6 <__ieee754_sqrt+0x15e>
 801b76e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 801b7f4 <__ieee754_sqrt+0x1ac>
 801b772:	f8df b084 	ldr.w	fp, [pc, #132]	@ 801b7f8 <__ieee754_sqrt+0x1b0>
 801b776:	e9da 0100 	ldrd	r0, r1, [sl]
 801b77a:	e9db 2300 	ldrd	r2, r3, [fp]
 801b77e:	f7e4 fd35 	bl	80001ec <__aeabi_dsub>
 801b782:	e9da 8900 	ldrd	r8, r9, [sl]
 801b786:	4602      	mov	r2, r0
 801b788:	460b      	mov	r3, r1
 801b78a:	4640      	mov	r0, r8
 801b78c:	4649      	mov	r1, r9
 801b78e:	f7e5 f961 	bl	8000a54 <__aeabi_dcmple>
 801b792:	b140      	cbz	r0, 801b7a6 <__ieee754_sqrt+0x15e>
 801b794:	f1b4 3fff 	cmp.w	r4, #4294967295
 801b798:	e9da 0100 	ldrd	r0, r1, [sl]
 801b79c:	e9db 2300 	ldrd	r2, r3, [fp]
 801b7a0:	d111      	bne.n	801b7c6 <__ieee754_sqrt+0x17e>
 801b7a2:	3601      	adds	r6, #1
 801b7a4:	463c      	mov	r4, r7
 801b7a6:	1072      	asrs	r2, r6, #1
 801b7a8:	0863      	lsrs	r3, r4, #1
 801b7aa:	07f1      	lsls	r1, r6, #31
 801b7ac:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 801b7b0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801b7b4:	bf48      	it	mi
 801b7b6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 801b7ba:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 801b7be:	4618      	mov	r0, r3
 801b7c0:	e756      	b.n	801b670 <__ieee754_sqrt+0x28>
 801b7c2:	4690      	mov	r8, r2
 801b7c4:	e7be      	b.n	801b744 <__ieee754_sqrt+0xfc>
 801b7c6:	f7e4 fd13 	bl	80001f0 <__adddf3>
 801b7ca:	e9da 8900 	ldrd	r8, r9, [sl]
 801b7ce:	4602      	mov	r2, r0
 801b7d0:	460b      	mov	r3, r1
 801b7d2:	4640      	mov	r0, r8
 801b7d4:	4649      	mov	r1, r9
 801b7d6:	f7e5 f933 	bl	8000a40 <__aeabi_dcmplt>
 801b7da:	b120      	cbz	r0, 801b7e6 <__ieee754_sqrt+0x19e>
 801b7dc:	1ca0      	adds	r0, r4, #2
 801b7de:	bf08      	it	eq
 801b7e0:	3601      	addeq	r6, #1
 801b7e2:	3402      	adds	r4, #2
 801b7e4:	e7df      	b.n	801b7a6 <__ieee754_sqrt+0x15e>
 801b7e6:	1c63      	adds	r3, r4, #1
 801b7e8:	f023 0401 	bic.w	r4, r3, #1
 801b7ec:	e7db      	b.n	801b7a6 <__ieee754_sqrt+0x15e>
 801b7ee:	bf00      	nop
 801b7f0:	7ff00000 	.word	0x7ff00000
 801b7f4:	200001e0 	.word	0x200001e0
 801b7f8:	200001d8 	.word	0x200001d8

0801b7fc <__ieee754_sqrtf>:
 801b7fc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801b800:	4770      	bx	lr
 801b802:	0000      	movs	r0, r0
 801b804:	0000      	movs	r0, r0
	...

0801b808 <__ieee754_asin>:
 801b808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b80c:	ec55 4b10 	vmov	r4, r5, d0
 801b810:	4bc7      	ldr	r3, [pc, #796]	@ (801bb30 <__ieee754_asin+0x328>)
 801b812:	b087      	sub	sp, #28
 801b814:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801b818:	429e      	cmp	r6, r3
 801b81a:	9501      	str	r5, [sp, #4]
 801b81c:	d92d      	bls.n	801b87a <__ieee754_asin+0x72>
 801b81e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 801b822:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 801b826:	4326      	orrs	r6, r4
 801b828:	d116      	bne.n	801b858 <__ieee754_asin+0x50>
 801b82a:	a3a7      	add	r3, pc, #668	@ (adr r3, 801bac8 <__ieee754_asin+0x2c0>)
 801b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b830:	4620      	mov	r0, r4
 801b832:	4629      	mov	r1, r5
 801b834:	f7e4 fe92 	bl	800055c <__aeabi_dmul>
 801b838:	a3a5      	add	r3, pc, #660	@ (adr r3, 801bad0 <__ieee754_asin+0x2c8>)
 801b83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83e:	4606      	mov	r6, r0
 801b840:	460f      	mov	r7, r1
 801b842:	4620      	mov	r0, r4
 801b844:	4629      	mov	r1, r5
 801b846:	f7e4 fe89 	bl	800055c <__aeabi_dmul>
 801b84a:	4602      	mov	r2, r0
 801b84c:	460b      	mov	r3, r1
 801b84e:	4630      	mov	r0, r6
 801b850:	4639      	mov	r1, r7
 801b852:	f7e4 fccd 	bl	80001f0 <__adddf3>
 801b856:	e009      	b.n	801b86c <__ieee754_asin+0x64>
 801b858:	4622      	mov	r2, r4
 801b85a:	462b      	mov	r3, r5
 801b85c:	4620      	mov	r0, r4
 801b85e:	4629      	mov	r1, r5
 801b860:	f7e4 fcc4 	bl	80001ec <__aeabi_dsub>
 801b864:	4602      	mov	r2, r0
 801b866:	460b      	mov	r3, r1
 801b868:	f7e4 ffa2 	bl	80007b0 <__aeabi_ddiv>
 801b86c:	4604      	mov	r4, r0
 801b86e:	460d      	mov	r5, r1
 801b870:	ec45 4b10 	vmov	d0, r4, r5
 801b874:	b007      	add	sp, #28
 801b876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b87a:	4bae      	ldr	r3, [pc, #696]	@ (801bb34 <__ieee754_asin+0x32c>)
 801b87c:	429e      	cmp	r6, r3
 801b87e:	d810      	bhi.n	801b8a2 <__ieee754_asin+0x9a>
 801b880:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 801b884:	f080 80ad 	bcs.w	801b9e2 <__ieee754_asin+0x1da>
 801b888:	a393      	add	r3, pc, #588	@ (adr r3, 801bad8 <__ieee754_asin+0x2d0>)
 801b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b88e:	4620      	mov	r0, r4
 801b890:	4629      	mov	r1, r5
 801b892:	f7e4 fcad 	bl	80001f0 <__adddf3>
 801b896:	4ba8      	ldr	r3, [pc, #672]	@ (801bb38 <__ieee754_asin+0x330>)
 801b898:	2200      	movs	r2, #0
 801b89a:	f7e5 f8ef 	bl	8000a7c <__aeabi_dcmpgt>
 801b89e:	2800      	cmp	r0, #0
 801b8a0:	d1e6      	bne.n	801b870 <__ieee754_asin+0x68>
 801b8a2:	ec45 4b10 	vmov	d0, r4, r5
 801b8a6:	f7ff fc7b 	bl	801b1a0 <fabs>
 801b8aa:	49a3      	ldr	r1, [pc, #652]	@ (801bb38 <__ieee754_asin+0x330>)
 801b8ac:	ec53 2b10 	vmov	r2, r3, d0
 801b8b0:	2000      	movs	r0, #0
 801b8b2:	f7e4 fc9b 	bl	80001ec <__aeabi_dsub>
 801b8b6:	4ba1      	ldr	r3, [pc, #644]	@ (801bb3c <__ieee754_asin+0x334>)
 801b8b8:	2200      	movs	r2, #0
 801b8ba:	f7e4 fe4f 	bl	800055c <__aeabi_dmul>
 801b8be:	a388      	add	r3, pc, #544	@ (adr r3, 801bae0 <__ieee754_asin+0x2d8>)
 801b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8c4:	4604      	mov	r4, r0
 801b8c6:	460d      	mov	r5, r1
 801b8c8:	f7e4 fe48 	bl	800055c <__aeabi_dmul>
 801b8cc:	a386      	add	r3, pc, #536	@ (adr r3, 801bae8 <__ieee754_asin+0x2e0>)
 801b8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8d2:	f7e4 fc8d 	bl	80001f0 <__adddf3>
 801b8d6:	4622      	mov	r2, r4
 801b8d8:	462b      	mov	r3, r5
 801b8da:	f7e4 fe3f 	bl	800055c <__aeabi_dmul>
 801b8de:	a384      	add	r3, pc, #528	@ (adr r3, 801baf0 <__ieee754_asin+0x2e8>)
 801b8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8e4:	f7e4 fc82 	bl	80001ec <__aeabi_dsub>
 801b8e8:	4622      	mov	r2, r4
 801b8ea:	462b      	mov	r3, r5
 801b8ec:	f7e4 fe36 	bl	800055c <__aeabi_dmul>
 801b8f0:	a381      	add	r3, pc, #516	@ (adr r3, 801baf8 <__ieee754_asin+0x2f0>)
 801b8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8f6:	f7e4 fc7b 	bl	80001f0 <__adddf3>
 801b8fa:	4622      	mov	r2, r4
 801b8fc:	462b      	mov	r3, r5
 801b8fe:	f7e4 fe2d 	bl	800055c <__aeabi_dmul>
 801b902:	a37f      	add	r3, pc, #508	@ (adr r3, 801bb00 <__ieee754_asin+0x2f8>)
 801b904:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b908:	f7e4 fc70 	bl	80001ec <__aeabi_dsub>
 801b90c:	4622      	mov	r2, r4
 801b90e:	462b      	mov	r3, r5
 801b910:	f7e4 fe24 	bl	800055c <__aeabi_dmul>
 801b914:	a37c      	add	r3, pc, #496	@ (adr r3, 801bb08 <__ieee754_asin+0x300>)
 801b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b91a:	f7e4 fc69 	bl	80001f0 <__adddf3>
 801b91e:	4622      	mov	r2, r4
 801b920:	462b      	mov	r3, r5
 801b922:	f7e4 fe1b 	bl	800055c <__aeabi_dmul>
 801b926:	a37a      	add	r3, pc, #488	@ (adr r3, 801bb10 <__ieee754_asin+0x308>)
 801b928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b930:	4620      	mov	r0, r4
 801b932:	4629      	mov	r1, r5
 801b934:	f7e4 fe12 	bl	800055c <__aeabi_dmul>
 801b938:	a377      	add	r3, pc, #476	@ (adr r3, 801bb18 <__ieee754_asin+0x310>)
 801b93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b93e:	f7e4 fc55 	bl	80001ec <__aeabi_dsub>
 801b942:	4622      	mov	r2, r4
 801b944:	462b      	mov	r3, r5
 801b946:	f7e4 fe09 	bl	800055c <__aeabi_dmul>
 801b94a:	a375      	add	r3, pc, #468	@ (adr r3, 801bb20 <__ieee754_asin+0x318>)
 801b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b950:	f7e4 fc4e 	bl	80001f0 <__adddf3>
 801b954:	4622      	mov	r2, r4
 801b956:	462b      	mov	r3, r5
 801b958:	f7e4 fe00 	bl	800055c <__aeabi_dmul>
 801b95c:	a372      	add	r3, pc, #456	@ (adr r3, 801bb28 <__ieee754_asin+0x320>)
 801b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b962:	f7e4 fc43 	bl	80001ec <__aeabi_dsub>
 801b966:	4622      	mov	r2, r4
 801b968:	462b      	mov	r3, r5
 801b96a:	f7e4 fdf7 	bl	800055c <__aeabi_dmul>
 801b96e:	4b72      	ldr	r3, [pc, #456]	@ (801bb38 <__ieee754_asin+0x330>)
 801b970:	2200      	movs	r2, #0
 801b972:	f7e4 fc3d 	bl	80001f0 <__adddf3>
 801b976:	ec45 4b10 	vmov	d0, r4, r5
 801b97a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b97e:	f7ff fe63 	bl	801b648 <__ieee754_sqrt>
 801b982:	4b6f      	ldr	r3, [pc, #444]	@ (801bb40 <__ieee754_asin+0x338>)
 801b984:	429e      	cmp	r6, r3
 801b986:	ec5b ab10 	vmov	sl, fp, d0
 801b98a:	f240 80db 	bls.w	801bb44 <__ieee754_asin+0x33c>
 801b98e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b996:	f7e4 ff0b 	bl	80007b0 <__aeabi_ddiv>
 801b99a:	4652      	mov	r2, sl
 801b99c:	465b      	mov	r3, fp
 801b99e:	f7e4 fddd 	bl	800055c <__aeabi_dmul>
 801b9a2:	4652      	mov	r2, sl
 801b9a4:	465b      	mov	r3, fp
 801b9a6:	f7e4 fc23 	bl	80001f0 <__adddf3>
 801b9aa:	4602      	mov	r2, r0
 801b9ac:	460b      	mov	r3, r1
 801b9ae:	f7e4 fc1f 	bl	80001f0 <__adddf3>
 801b9b2:	a347      	add	r3, pc, #284	@ (adr r3, 801bad0 <__ieee754_asin+0x2c8>)
 801b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b8:	f7e4 fc18 	bl	80001ec <__aeabi_dsub>
 801b9bc:	4602      	mov	r2, r0
 801b9be:	460b      	mov	r3, r1
 801b9c0:	a141      	add	r1, pc, #260	@ (adr r1, 801bac8 <__ieee754_asin+0x2c0>)
 801b9c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b9c6:	f7e4 fc11 	bl	80001ec <__aeabi_dsub>
 801b9ca:	9b01      	ldr	r3, [sp, #4]
 801b9cc:	2b00      	cmp	r3, #0
 801b9ce:	bfdc      	itt	le
 801b9d0:	4602      	movle	r2, r0
 801b9d2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 801b9d6:	4604      	mov	r4, r0
 801b9d8:	460d      	mov	r5, r1
 801b9da:	bfdc      	itt	le
 801b9dc:	4614      	movle	r4, r2
 801b9de:	461d      	movle	r5, r3
 801b9e0:	e746      	b.n	801b870 <__ieee754_asin+0x68>
 801b9e2:	4622      	mov	r2, r4
 801b9e4:	462b      	mov	r3, r5
 801b9e6:	4620      	mov	r0, r4
 801b9e8:	4629      	mov	r1, r5
 801b9ea:	f7e4 fdb7 	bl	800055c <__aeabi_dmul>
 801b9ee:	a33c      	add	r3, pc, #240	@ (adr r3, 801bae0 <__ieee754_asin+0x2d8>)
 801b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9f4:	4606      	mov	r6, r0
 801b9f6:	460f      	mov	r7, r1
 801b9f8:	f7e4 fdb0 	bl	800055c <__aeabi_dmul>
 801b9fc:	a33a      	add	r3, pc, #232	@ (adr r3, 801bae8 <__ieee754_asin+0x2e0>)
 801b9fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba02:	f7e4 fbf5 	bl	80001f0 <__adddf3>
 801ba06:	4632      	mov	r2, r6
 801ba08:	463b      	mov	r3, r7
 801ba0a:	f7e4 fda7 	bl	800055c <__aeabi_dmul>
 801ba0e:	a338      	add	r3, pc, #224	@ (adr r3, 801baf0 <__ieee754_asin+0x2e8>)
 801ba10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba14:	f7e4 fbea 	bl	80001ec <__aeabi_dsub>
 801ba18:	4632      	mov	r2, r6
 801ba1a:	463b      	mov	r3, r7
 801ba1c:	f7e4 fd9e 	bl	800055c <__aeabi_dmul>
 801ba20:	a335      	add	r3, pc, #212	@ (adr r3, 801baf8 <__ieee754_asin+0x2f0>)
 801ba22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba26:	f7e4 fbe3 	bl	80001f0 <__adddf3>
 801ba2a:	4632      	mov	r2, r6
 801ba2c:	463b      	mov	r3, r7
 801ba2e:	f7e4 fd95 	bl	800055c <__aeabi_dmul>
 801ba32:	a333      	add	r3, pc, #204	@ (adr r3, 801bb00 <__ieee754_asin+0x2f8>)
 801ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba38:	f7e4 fbd8 	bl	80001ec <__aeabi_dsub>
 801ba3c:	4632      	mov	r2, r6
 801ba3e:	463b      	mov	r3, r7
 801ba40:	f7e4 fd8c 	bl	800055c <__aeabi_dmul>
 801ba44:	a330      	add	r3, pc, #192	@ (adr r3, 801bb08 <__ieee754_asin+0x300>)
 801ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba4a:	f7e4 fbd1 	bl	80001f0 <__adddf3>
 801ba4e:	4632      	mov	r2, r6
 801ba50:	463b      	mov	r3, r7
 801ba52:	f7e4 fd83 	bl	800055c <__aeabi_dmul>
 801ba56:	a32e      	add	r3, pc, #184	@ (adr r3, 801bb10 <__ieee754_asin+0x308>)
 801ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba5c:	4680      	mov	r8, r0
 801ba5e:	4689      	mov	r9, r1
 801ba60:	4630      	mov	r0, r6
 801ba62:	4639      	mov	r1, r7
 801ba64:	f7e4 fd7a 	bl	800055c <__aeabi_dmul>
 801ba68:	a32b      	add	r3, pc, #172	@ (adr r3, 801bb18 <__ieee754_asin+0x310>)
 801ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba6e:	f7e4 fbbd 	bl	80001ec <__aeabi_dsub>
 801ba72:	4632      	mov	r2, r6
 801ba74:	463b      	mov	r3, r7
 801ba76:	f7e4 fd71 	bl	800055c <__aeabi_dmul>
 801ba7a:	a329      	add	r3, pc, #164	@ (adr r3, 801bb20 <__ieee754_asin+0x318>)
 801ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba80:	f7e4 fbb6 	bl	80001f0 <__adddf3>
 801ba84:	4632      	mov	r2, r6
 801ba86:	463b      	mov	r3, r7
 801ba88:	f7e4 fd68 	bl	800055c <__aeabi_dmul>
 801ba8c:	a326      	add	r3, pc, #152	@ (adr r3, 801bb28 <__ieee754_asin+0x320>)
 801ba8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba92:	f7e4 fbab 	bl	80001ec <__aeabi_dsub>
 801ba96:	4632      	mov	r2, r6
 801ba98:	463b      	mov	r3, r7
 801ba9a:	f7e4 fd5f 	bl	800055c <__aeabi_dmul>
 801ba9e:	4b26      	ldr	r3, [pc, #152]	@ (801bb38 <__ieee754_asin+0x330>)
 801baa0:	2200      	movs	r2, #0
 801baa2:	f7e4 fba5 	bl	80001f0 <__adddf3>
 801baa6:	4602      	mov	r2, r0
 801baa8:	460b      	mov	r3, r1
 801baaa:	4640      	mov	r0, r8
 801baac:	4649      	mov	r1, r9
 801baae:	f7e4 fe7f 	bl	80007b0 <__aeabi_ddiv>
 801bab2:	4622      	mov	r2, r4
 801bab4:	462b      	mov	r3, r5
 801bab6:	f7e4 fd51 	bl	800055c <__aeabi_dmul>
 801baba:	4602      	mov	r2, r0
 801babc:	460b      	mov	r3, r1
 801babe:	4620      	mov	r0, r4
 801bac0:	4629      	mov	r1, r5
 801bac2:	e6c6      	b.n	801b852 <__ieee754_asin+0x4a>
 801bac4:	f3af 8000 	nop.w
 801bac8:	54442d18 	.word	0x54442d18
 801bacc:	3ff921fb 	.word	0x3ff921fb
 801bad0:	33145c07 	.word	0x33145c07
 801bad4:	3c91a626 	.word	0x3c91a626
 801bad8:	8800759c 	.word	0x8800759c
 801badc:	7e37e43c 	.word	0x7e37e43c
 801bae0:	0dfdf709 	.word	0x0dfdf709
 801bae4:	3f023de1 	.word	0x3f023de1
 801bae8:	7501b288 	.word	0x7501b288
 801baec:	3f49efe0 	.word	0x3f49efe0
 801baf0:	b5688f3b 	.word	0xb5688f3b
 801baf4:	3fa48228 	.word	0x3fa48228
 801baf8:	0e884455 	.word	0x0e884455
 801bafc:	3fc9c155 	.word	0x3fc9c155
 801bb00:	03eb6f7d 	.word	0x03eb6f7d
 801bb04:	3fd4d612 	.word	0x3fd4d612
 801bb08:	55555555 	.word	0x55555555
 801bb0c:	3fc55555 	.word	0x3fc55555
 801bb10:	b12e9282 	.word	0xb12e9282
 801bb14:	3fb3b8c5 	.word	0x3fb3b8c5
 801bb18:	1b8d0159 	.word	0x1b8d0159
 801bb1c:	3fe6066c 	.word	0x3fe6066c
 801bb20:	9c598ac8 	.word	0x9c598ac8
 801bb24:	40002ae5 	.word	0x40002ae5
 801bb28:	1c8a2d4b 	.word	0x1c8a2d4b
 801bb2c:	40033a27 	.word	0x40033a27
 801bb30:	3fefffff 	.word	0x3fefffff
 801bb34:	3fdfffff 	.word	0x3fdfffff
 801bb38:	3ff00000 	.word	0x3ff00000
 801bb3c:	3fe00000 	.word	0x3fe00000
 801bb40:	3fef3332 	.word	0x3fef3332
 801bb44:	4652      	mov	r2, sl
 801bb46:	465b      	mov	r3, fp
 801bb48:	4650      	mov	r0, sl
 801bb4a:	4659      	mov	r1, fp
 801bb4c:	f7e4 fb50 	bl	80001f0 <__adddf3>
 801bb50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb54:	4606      	mov	r6, r0
 801bb56:	460f      	mov	r7, r1
 801bb58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bb5c:	f7e4 fe28 	bl	80007b0 <__aeabi_ddiv>
 801bb60:	4602      	mov	r2, r0
 801bb62:	460b      	mov	r3, r1
 801bb64:	4630      	mov	r0, r6
 801bb66:	4639      	mov	r1, r7
 801bb68:	f7e4 fcf8 	bl	800055c <__aeabi_dmul>
 801bb6c:	f04f 0800 	mov.w	r8, #0
 801bb70:	4606      	mov	r6, r0
 801bb72:	460f      	mov	r7, r1
 801bb74:	4642      	mov	r2, r8
 801bb76:	465b      	mov	r3, fp
 801bb78:	4640      	mov	r0, r8
 801bb7a:	4659      	mov	r1, fp
 801bb7c:	f7e4 fcee 	bl	800055c <__aeabi_dmul>
 801bb80:	4602      	mov	r2, r0
 801bb82:	460b      	mov	r3, r1
 801bb84:	4620      	mov	r0, r4
 801bb86:	4629      	mov	r1, r5
 801bb88:	f7e4 fb30 	bl	80001ec <__aeabi_dsub>
 801bb8c:	4642      	mov	r2, r8
 801bb8e:	4604      	mov	r4, r0
 801bb90:	460d      	mov	r5, r1
 801bb92:	465b      	mov	r3, fp
 801bb94:	4650      	mov	r0, sl
 801bb96:	4659      	mov	r1, fp
 801bb98:	f7e4 fb2a 	bl	80001f0 <__adddf3>
 801bb9c:	4602      	mov	r2, r0
 801bb9e:	460b      	mov	r3, r1
 801bba0:	4620      	mov	r0, r4
 801bba2:	4629      	mov	r1, r5
 801bba4:	f7e4 fe04 	bl	80007b0 <__aeabi_ddiv>
 801bba8:	4602      	mov	r2, r0
 801bbaa:	460b      	mov	r3, r1
 801bbac:	f7e4 fb20 	bl	80001f0 <__adddf3>
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	460b      	mov	r3, r1
 801bbb4:	a112      	add	r1, pc, #72	@ (adr r1, 801bc00 <__ieee754_asin+0x3f8>)
 801bbb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbba:	f7e4 fb17 	bl	80001ec <__aeabi_dsub>
 801bbbe:	4602      	mov	r2, r0
 801bbc0:	460b      	mov	r3, r1
 801bbc2:	4630      	mov	r0, r6
 801bbc4:	4639      	mov	r1, r7
 801bbc6:	f7e4 fb11 	bl	80001ec <__aeabi_dsub>
 801bbca:	4642      	mov	r2, r8
 801bbcc:	4604      	mov	r4, r0
 801bbce:	460d      	mov	r5, r1
 801bbd0:	465b      	mov	r3, fp
 801bbd2:	4640      	mov	r0, r8
 801bbd4:	4659      	mov	r1, fp
 801bbd6:	f7e4 fb0b 	bl	80001f0 <__adddf3>
 801bbda:	4602      	mov	r2, r0
 801bbdc:	460b      	mov	r3, r1
 801bbde:	a10a      	add	r1, pc, #40	@ (adr r1, 801bc08 <__ieee754_asin+0x400>)
 801bbe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbe4:	f7e4 fb02 	bl	80001ec <__aeabi_dsub>
 801bbe8:	4602      	mov	r2, r0
 801bbea:	460b      	mov	r3, r1
 801bbec:	4620      	mov	r0, r4
 801bbee:	4629      	mov	r1, r5
 801bbf0:	f7e4 fafc 	bl	80001ec <__aeabi_dsub>
 801bbf4:	4602      	mov	r2, r0
 801bbf6:	460b      	mov	r3, r1
 801bbf8:	a103      	add	r1, pc, #12	@ (adr r1, 801bc08 <__ieee754_asin+0x400>)
 801bbfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bbfe:	e6e2      	b.n	801b9c6 <__ieee754_asin+0x1be>
 801bc00:	33145c07 	.word	0x33145c07
 801bc04:	3c91a626 	.word	0x3c91a626
 801bc08:	54442d18 	.word	0x54442d18
 801bc0c:	3fe921fb 	.word	0x3fe921fb

0801bc10 <__ieee754_atan2>:
 801bc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc14:	ec57 6b11 	vmov	r6, r7, d1
 801bc18:	4273      	negs	r3, r6
 801bc1a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 801bd98 <__ieee754_atan2+0x188>
 801bc1e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 801bc22:	4333      	orrs	r3, r6
 801bc24:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801bc28:	4543      	cmp	r3, r8
 801bc2a:	ec51 0b10 	vmov	r0, r1, d0
 801bc2e:	4635      	mov	r5, r6
 801bc30:	d809      	bhi.n	801bc46 <__ieee754_atan2+0x36>
 801bc32:	4244      	negs	r4, r0
 801bc34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801bc38:	4304      	orrs	r4, r0
 801bc3a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801bc3e:	4544      	cmp	r4, r8
 801bc40:	468e      	mov	lr, r1
 801bc42:	4681      	mov	r9, r0
 801bc44:	d907      	bls.n	801bc56 <__ieee754_atan2+0x46>
 801bc46:	4632      	mov	r2, r6
 801bc48:	463b      	mov	r3, r7
 801bc4a:	f7e4 fad1 	bl	80001f0 <__adddf3>
 801bc4e:	ec41 0b10 	vmov	d0, r0, r1
 801bc52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc56:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 801bc5a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 801bc5e:	4334      	orrs	r4, r6
 801bc60:	d103      	bne.n	801bc6a <__ieee754_atan2+0x5a>
 801bc62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc66:	f000 b89b 	b.w	801bda0 <atan>
 801bc6a:	17bc      	asrs	r4, r7, #30
 801bc6c:	f004 0402 	and.w	r4, r4, #2
 801bc70:	ea53 0909 	orrs.w	r9, r3, r9
 801bc74:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801bc78:	d107      	bne.n	801bc8a <__ieee754_atan2+0x7a>
 801bc7a:	2c02      	cmp	r4, #2
 801bc7c:	d05f      	beq.n	801bd3e <__ieee754_atan2+0x12e>
 801bc7e:	2c03      	cmp	r4, #3
 801bc80:	d1e5      	bne.n	801bc4e <__ieee754_atan2+0x3e>
 801bc82:	a141      	add	r1, pc, #260	@ (adr r1, 801bd88 <__ieee754_atan2+0x178>)
 801bc84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc88:	e7e1      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bc8a:	4315      	orrs	r5, r2
 801bc8c:	d106      	bne.n	801bc9c <__ieee754_atan2+0x8c>
 801bc8e:	f1be 0f00 	cmp.w	lr, #0
 801bc92:	da5f      	bge.n	801bd54 <__ieee754_atan2+0x144>
 801bc94:	a13e      	add	r1, pc, #248	@ (adr r1, 801bd90 <__ieee754_atan2+0x180>)
 801bc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bc9a:	e7d8      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bc9c:	4542      	cmp	r2, r8
 801bc9e:	d10f      	bne.n	801bcc0 <__ieee754_atan2+0xb0>
 801bca0:	4293      	cmp	r3, r2
 801bca2:	f104 34ff 	add.w	r4, r4, #4294967295
 801bca6:	d107      	bne.n	801bcb8 <__ieee754_atan2+0xa8>
 801bca8:	2c02      	cmp	r4, #2
 801bcaa:	d84c      	bhi.n	801bd46 <__ieee754_atan2+0x136>
 801bcac:	4b34      	ldr	r3, [pc, #208]	@ (801bd80 <__ieee754_atan2+0x170>)
 801bcae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bcb2:	e9d3 0100 	ldrd	r0, r1, [r3]
 801bcb6:	e7ca      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bcb8:	2c02      	cmp	r4, #2
 801bcba:	d848      	bhi.n	801bd4e <__ieee754_atan2+0x13e>
 801bcbc:	4b31      	ldr	r3, [pc, #196]	@ (801bd84 <__ieee754_atan2+0x174>)
 801bcbe:	e7f6      	b.n	801bcae <__ieee754_atan2+0x9e>
 801bcc0:	4543      	cmp	r3, r8
 801bcc2:	d0e4      	beq.n	801bc8e <__ieee754_atan2+0x7e>
 801bcc4:	1a9b      	subs	r3, r3, r2
 801bcc6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 801bcca:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bcce:	da1e      	bge.n	801bd0e <__ieee754_atan2+0xfe>
 801bcd0:	2f00      	cmp	r7, #0
 801bcd2:	da01      	bge.n	801bcd8 <__ieee754_atan2+0xc8>
 801bcd4:	323c      	adds	r2, #60	@ 0x3c
 801bcd6:	db1e      	blt.n	801bd16 <__ieee754_atan2+0x106>
 801bcd8:	4632      	mov	r2, r6
 801bcda:	463b      	mov	r3, r7
 801bcdc:	f7e4 fd68 	bl	80007b0 <__aeabi_ddiv>
 801bce0:	ec41 0b10 	vmov	d0, r0, r1
 801bce4:	f7ff fa5c 	bl	801b1a0 <fabs>
 801bce8:	f000 f85a 	bl	801bda0 <atan>
 801bcec:	ec51 0b10 	vmov	r0, r1, d0
 801bcf0:	2c01      	cmp	r4, #1
 801bcf2:	d013      	beq.n	801bd1c <__ieee754_atan2+0x10c>
 801bcf4:	2c02      	cmp	r4, #2
 801bcf6:	d015      	beq.n	801bd24 <__ieee754_atan2+0x114>
 801bcf8:	2c00      	cmp	r4, #0
 801bcfa:	d0a8      	beq.n	801bc4e <__ieee754_atan2+0x3e>
 801bcfc:	a318      	add	r3, pc, #96	@ (adr r3, 801bd60 <__ieee754_atan2+0x150>)
 801bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd02:	f7e4 fa73 	bl	80001ec <__aeabi_dsub>
 801bd06:	a318      	add	r3, pc, #96	@ (adr r3, 801bd68 <__ieee754_atan2+0x158>)
 801bd08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0c:	e014      	b.n	801bd38 <__ieee754_atan2+0x128>
 801bd0e:	a118      	add	r1, pc, #96	@ (adr r1, 801bd70 <__ieee754_atan2+0x160>)
 801bd10:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd14:	e7ec      	b.n	801bcf0 <__ieee754_atan2+0xe0>
 801bd16:	2000      	movs	r0, #0
 801bd18:	2100      	movs	r1, #0
 801bd1a:	e7e9      	b.n	801bcf0 <__ieee754_atan2+0xe0>
 801bd1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801bd20:	4619      	mov	r1, r3
 801bd22:	e794      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bd24:	a30e      	add	r3, pc, #56	@ (adr r3, 801bd60 <__ieee754_atan2+0x150>)
 801bd26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd2a:	f7e4 fa5f 	bl	80001ec <__aeabi_dsub>
 801bd2e:	4602      	mov	r2, r0
 801bd30:	460b      	mov	r3, r1
 801bd32:	a10d      	add	r1, pc, #52	@ (adr r1, 801bd68 <__ieee754_atan2+0x158>)
 801bd34:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd38:	f7e4 fa58 	bl	80001ec <__aeabi_dsub>
 801bd3c:	e787      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bd3e:	a10a      	add	r1, pc, #40	@ (adr r1, 801bd68 <__ieee754_atan2+0x158>)
 801bd40:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd44:	e783      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bd46:	a10c      	add	r1, pc, #48	@ (adr r1, 801bd78 <__ieee754_atan2+0x168>)
 801bd48:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd4c:	e77f      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bd4e:	2000      	movs	r0, #0
 801bd50:	2100      	movs	r1, #0
 801bd52:	e77c      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bd54:	a106      	add	r1, pc, #24	@ (adr r1, 801bd70 <__ieee754_atan2+0x160>)
 801bd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd5a:	e778      	b.n	801bc4e <__ieee754_atan2+0x3e>
 801bd5c:	f3af 8000 	nop.w
 801bd60:	33145c07 	.word	0x33145c07
 801bd64:	3ca1a626 	.word	0x3ca1a626
 801bd68:	54442d18 	.word	0x54442d18
 801bd6c:	400921fb 	.word	0x400921fb
 801bd70:	54442d18 	.word	0x54442d18
 801bd74:	3ff921fb 	.word	0x3ff921fb
 801bd78:	54442d18 	.word	0x54442d18
 801bd7c:	3fe921fb 	.word	0x3fe921fb
 801bd80:	0801f3a0 	.word	0x0801f3a0
 801bd84:	0801f388 	.word	0x0801f388
 801bd88:	54442d18 	.word	0x54442d18
 801bd8c:	c00921fb 	.word	0xc00921fb
 801bd90:	54442d18 	.word	0x54442d18
 801bd94:	bff921fb 	.word	0xbff921fb
 801bd98:	7ff00000 	.word	0x7ff00000
 801bd9c:	00000000 	.word	0x00000000

0801bda0 <atan>:
 801bda0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda4:	ec55 4b10 	vmov	r4, r5, d0
 801bda8:	4bbf      	ldr	r3, [pc, #764]	@ (801c0a8 <atan+0x308>)
 801bdaa:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 801bdae:	429e      	cmp	r6, r3
 801bdb0:	46ab      	mov	fp, r5
 801bdb2:	d918      	bls.n	801bde6 <atan+0x46>
 801bdb4:	4bbd      	ldr	r3, [pc, #756]	@ (801c0ac <atan+0x30c>)
 801bdb6:	429e      	cmp	r6, r3
 801bdb8:	d801      	bhi.n	801bdbe <atan+0x1e>
 801bdba:	d109      	bne.n	801bdd0 <atan+0x30>
 801bdbc:	b144      	cbz	r4, 801bdd0 <atan+0x30>
 801bdbe:	4622      	mov	r2, r4
 801bdc0:	462b      	mov	r3, r5
 801bdc2:	4620      	mov	r0, r4
 801bdc4:	4629      	mov	r1, r5
 801bdc6:	f7e4 fa13 	bl	80001f0 <__adddf3>
 801bdca:	4604      	mov	r4, r0
 801bdcc:	460d      	mov	r5, r1
 801bdce:	e006      	b.n	801bdde <atan+0x3e>
 801bdd0:	f1bb 0f00 	cmp.w	fp, #0
 801bdd4:	f340 812b 	ble.w	801c02e <atan+0x28e>
 801bdd8:	a597      	add	r5, pc, #604	@ (adr r5, 801c038 <atan+0x298>)
 801bdda:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bdde:	ec45 4b10 	vmov	d0, r4, r5
 801bde2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bde6:	4bb2      	ldr	r3, [pc, #712]	@ (801c0b0 <atan+0x310>)
 801bde8:	429e      	cmp	r6, r3
 801bdea:	d813      	bhi.n	801be14 <atan+0x74>
 801bdec:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 801bdf0:	429e      	cmp	r6, r3
 801bdf2:	d80c      	bhi.n	801be0e <atan+0x6e>
 801bdf4:	a392      	add	r3, pc, #584	@ (adr r3, 801c040 <atan+0x2a0>)
 801bdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdfa:	4620      	mov	r0, r4
 801bdfc:	4629      	mov	r1, r5
 801bdfe:	f7e4 f9f7 	bl	80001f0 <__adddf3>
 801be02:	4bac      	ldr	r3, [pc, #688]	@ (801c0b4 <atan+0x314>)
 801be04:	2200      	movs	r2, #0
 801be06:	f7e4 fe39 	bl	8000a7c <__aeabi_dcmpgt>
 801be0a:	2800      	cmp	r0, #0
 801be0c:	d1e7      	bne.n	801bdde <atan+0x3e>
 801be0e:	f04f 3aff 	mov.w	sl, #4294967295
 801be12:	e029      	b.n	801be68 <atan+0xc8>
 801be14:	f7ff f9c4 	bl	801b1a0 <fabs>
 801be18:	4ba7      	ldr	r3, [pc, #668]	@ (801c0b8 <atan+0x318>)
 801be1a:	429e      	cmp	r6, r3
 801be1c:	ec55 4b10 	vmov	r4, r5, d0
 801be20:	f200 80bc 	bhi.w	801bf9c <atan+0x1fc>
 801be24:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 801be28:	429e      	cmp	r6, r3
 801be2a:	f200 809e 	bhi.w	801bf6a <atan+0x1ca>
 801be2e:	4622      	mov	r2, r4
 801be30:	462b      	mov	r3, r5
 801be32:	4620      	mov	r0, r4
 801be34:	4629      	mov	r1, r5
 801be36:	f7e4 f9db 	bl	80001f0 <__adddf3>
 801be3a:	4b9e      	ldr	r3, [pc, #632]	@ (801c0b4 <atan+0x314>)
 801be3c:	2200      	movs	r2, #0
 801be3e:	f7e4 f9d5 	bl	80001ec <__aeabi_dsub>
 801be42:	2200      	movs	r2, #0
 801be44:	4606      	mov	r6, r0
 801be46:	460f      	mov	r7, r1
 801be48:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801be4c:	4620      	mov	r0, r4
 801be4e:	4629      	mov	r1, r5
 801be50:	f7e4 f9ce 	bl	80001f0 <__adddf3>
 801be54:	4602      	mov	r2, r0
 801be56:	460b      	mov	r3, r1
 801be58:	4630      	mov	r0, r6
 801be5a:	4639      	mov	r1, r7
 801be5c:	f7e4 fca8 	bl	80007b0 <__aeabi_ddiv>
 801be60:	f04f 0a00 	mov.w	sl, #0
 801be64:	4604      	mov	r4, r0
 801be66:	460d      	mov	r5, r1
 801be68:	4622      	mov	r2, r4
 801be6a:	462b      	mov	r3, r5
 801be6c:	4620      	mov	r0, r4
 801be6e:	4629      	mov	r1, r5
 801be70:	f7e4 fb74 	bl	800055c <__aeabi_dmul>
 801be74:	4602      	mov	r2, r0
 801be76:	460b      	mov	r3, r1
 801be78:	4680      	mov	r8, r0
 801be7a:	4689      	mov	r9, r1
 801be7c:	f7e4 fb6e 	bl	800055c <__aeabi_dmul>
 801be80:	a371      	add	r3, pc, #452	@ (adr r3, 801c048 <atan+0x2a8>)
 801be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be86:	4606      	mov	r6, r0
 801be88:	460f      	mov	r7, r1
 801be8a:	f7e4 fb67 	bl	800055c <__aeabi_dmul>
 801be8e:	a370      	add	r3, pc, #448	@ (adr r3, 801c050 <atan+0x2b0>)
 801be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be94:	f7e4 f9ac 	bl	80001f0 <__adddf3>
 801be98:	4632      	mov	r2, r6
 801be9a:	463b      	mov	r3, r7
 801be9c:	f7e4 fb5e 	bl	800055c <__aeabi_dmul>
 801bea0:	a36d      	add	r3, pc, #436	@ (adr r3, 801c058 <atan+0x2b8>)
 801bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea6:	f7e4 f9a3 	bl	80001f0 <__adddf3>
 801beaa:	4632      	mov	r2, r6
 801beac:	463b      	mov	r3, r7
 801beae:	f7e4 fb55 	bl	800055c <__aeabi_dmul>
 801beb2:	a36b      	add	r3, pc, #428	@ (adr r3, 801c060 <atan+0x2c0>)
 801beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beb8:	f7e4 f99a 	bl	80001f0 <__adddf3>
 801bebc:	4632      	mov	r2, r6
 801bebe:	463b      	mov	r3, r7
 801bec0:	f7e4 fb4c 	bl	800055c <__aeabi_dmul>
 801bec4:	a368      	add	r3, pc, #416	@ (adr r3, 801c068 <atan+0x2c8>)
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 f991 	bl	80001f0 <__adddf3>
 801bece:	4632      	mov	r2, r6
 801bed0:	463b      	mov	r3, r7
 801bed2:	f7e4 fb43 	bl	800055c <__aeabi_dmul>
 801bed6:	a366      	add	r3, pc, #408	@ (adr r3, 801c070 <atan+0x2d0>)
 801bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bedc:	f7e4 f988 	bl	80001f0 <__adddf3>
 801bee0:	4642      	mov	r2, r8
 801bee2:	464b      	mov	r3, r9
 801bee4:	f7e4 fb3a 	bl	800055c <__aeabi_dmul>
 801bee8:	a363      	add	r3, pc, #396	@ (adr r3, 801c078 <atan+0x2d8>)
 801beea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beee:	4680      	mov	r8, r0
 801bef0:	4689      	mov	r9, r1
 801bef2:	4630      	mov	r0, r6
 801bef4:	4639      	mov	r1, r7
 801bef6:	f7e4 fb31 	bl	800055c <__aeabi_dmul>
 801befa:	a361      	add	r3, pc, #388	@ (adr r3, 801c080 <atan+0x2e0>)
 801befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf00:	f7e4 f974 	bl	80001ec <__aeabi_dsub>
 801bf04:	4632      	mov	r2, r6
 801bf06:	463b      	mov	r3, r7
 801bf08:	f7e4 fb28 	bl	800055c <__aeabi_dmul>
 801bf0c:	a35e      	add	r3, pc, #376	@ (adr r3, 801c088 <atan+0x2e8>)
 801bf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf12:	f7e4 f96b 	bl	80001ec <__aeabi_dsub>
 801bf16:	4632      	mov	r2, r6
 801bf18:	463b      	mov	r3, r7
 801bf1a:	f7e4 fb1f 	bl	800055c <__aeabi_dmul>
 801bf1e:	a35c      	add	r3, pc, #368	@ (adr r3, 801c090 <atan+0x2f0>)
 801bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf24:	f7e4 f962 	bl	80001ec <__aeabi_dsub>
 801bf28:	4632      	mov	r2, r6
 801bf2a:	463b      	mov	r3, r7
 801bf2c:	f7e4 fb16 	bl	800055c <__aeabi_dmul>
 801bf30:	a359      	add	r3, pc, #356	@ (adr r3, 801c098 <atan+0x2f8>)
 801bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf36:	f7e4 f959 	bl	80001ec <__aeabi_dsub>
 801bf3a:	4632      	mov	r2, r6
 801bf3c:	463b      	mov	r3, r7
 801bf3e:	f7e4 fb0d 	bl	800055c <__aeabi_dmul>
 801bf42:	4602      	mov	r2, r0
 801bf44:	460b      	mov	r3, r1
 801bf46:	4640      	mov	r0, r8
 801bf48:	4649      	mov	r1, r9
 801bf4a:	f7e4 f951 	bl	80001f0 <__adddf3>
 801bf4e:	4622      	mov	r2, r4
 801bf50:	462b      	mov	r3, r5
 801bf52:	f7e4 fb03 	bl	800055c <__aeabi_dmul>
 801bf56:	f1ba 3fff 	cmp.w	sl, #4294967295
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	460b      	mov	r3, r1
 801bf5e:	d148      	bne.n	801bff2 <atan+0x252>
 801bf60:	4620      	mov	r0, r4
 801bf62:	4629      	mov	r1, r5
 801bf64:	f7e4 f942 	bl	80001ec <__aeabi_dsub>
 801bf68:	e72f      	b.n	801bdca <atan+0x2a>
 801bf6a:	4b52      	ldr	r3, [pc, #328]	@ (801c0b4 <atan+0x314>)
 801bf6c:	2200      	movs	r2, #0
 801bf6e:	4620      	mov	r0, r4
 801bf70:	4629      	mov	r1, r5
 801bf72:	f7e4 f93b 	bl	80001ec <__aeabi_dsub>
 801bf76:	4b4f      	ldr	r3, [pc, #316]	@ (801c0b4 <atan+0x314>)
 801bf78:	4606      	mov	r6, r0
 801bf7a:	460f      	mov	r7, r1
 801bf7c:	2200      	movs	r2, #0
 801bf7e:	4620      	mov	r0, r4
 801bf80:	4629      	mov	r1, r5
 801bf82:	f7e4 f935 	bl	80001f0 <__adddf3>
 801bf86:	4602      	mov	r2, r0
 801bf88:	460b      	mov	r3, r1
 801bf8a:	4630      	mov	r0, r6
 801bf8c:	4639      	mov	r1, r7
 801bf8e:	f7e4 fc0f 	bl	80007b0 <__aeabi_ddiv>
 801bf92:	f04f 0a01 	mov.w	sl, #1
 801bf96:	4604      	mov	r4, r0
 801bf98:	460d      	mov	r5, r1
 801bf9a:	e765      	b.n	801be68 <atan+0xc8>
 801bf9c:	4b47      	ldr	r3, [pc, #284]	@ (801c0bc <atan+0x31c>)
 801bf9e:	429e      	cmp	r6, r3
 801bfa0:	d21c      	bcs.n	801bfdc <atan+0x23c>
 801bfa2:	4b47      	ldr	r3, [pc, #284]	@ (801c0c0 <atan+0x320>)
 801bfa4:	2200      	movs	r2, #0
 801bfa6:	4620      	mov	r0, r4
 801bfa8:	4629      	mov	r1, r5
 801bfaa:	f7e4 f91f 	bl	80001ec <__aeabi_dsub>
 801bfae:	4b44      	ldr	r3, [pc, #272]	@ (801c0c0 <atan+0x320>)
 801bfb0:	4606      	mov	r6, r0
 801bfb2:	460f      	mov	r7, r1
 801bfb4:	2200      	movs	r2, #0
 801bfb6:	4620      	mov	r0, r4
 801bfb8:	4629      	mov	r1, r5
 801bfba:	f7e4 facf 	bl	800055c <__aeabi_dmul>
 801bfbe:	4b3d      	ldr	r3, [pc, #244]	@ (801c0b4 <atan+0x314>)
 801bfc0:	2200      	movs	r2, #0
 801bfc2:	f7e4 f915 	bl	80001f0 <__adddf3>
 801bfc6:	4602      	mov	r2, r0
 801bfc8:	460b      	mov	r3, r1
 801bfca:	4630      	mov	r0, r6
 801bfcc:	4639      	mov	r1, r7
 801bfce:	f7e4 fbef 	bl	80007b0 <__aeabi_ddiv>
 801bfd2:	f04f 0a02 	mov.w	sl, #2
 801bfd6:	4604      	mov	r4, r0
 801bfd8:	460d      	mov	r5, r1
 801bfda:	e745      	b.n	801be68 <atan+0xc8>
 801bfdc:	4622      	mov	r2, r4
 801bfde:	462b      	mov	r3, r5
 801bfe0:	4938      	ldr	r1, [pc, #224]	@ (801c0c4 <atan+0x324>)
 801bfe2:	2000      	movs	r0, #0
 801bfe4:	f7e4 fbe4 	bl	80007b0 <__aeabi_ddiv>
 801bfe8:	f04f 0a03 	mov.w	sl, #3
 801bfec:	4604      	mov	r4, r0
 801bfee:	460d      	mov	r5, r1
 801bff0:	e73a      	b.n	801be68 <atan+0xc8>
 801bff2:	4b35      	ldr	r3, [pc, #212]	@ (801c0c8 <atan+0x328>)
 801bff4:	4e35      	ldr	r6, [pc, #212]	@ (801c0cc <atan+0x32c>)
 801bff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bffe:	f7e4 f8f5 	bl	80001ec <__aeabi_dsub>
 801c002:	4622      	mov	r2, r4
 801c004:	462b      	mov	r3, r5
 801c006:	f7e4 f8f1 	bl	80001ec <__aeabi_dsub>
 801c00a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801c00e:	4602      	mov	r2, r0
 801c010:	460b      	mov	r3, r1
 801c012:	e9d6 0100 	ldrd	r0, r1, [r6]
 801c016:	f7e4 f8e9 	bl	80001ec <__aeabi_dsub>
 801c01a:	f1bb 0f00 	cmp.w	fp, #0
 801c01e:	4604      	mov	r4, r0
 801c020:	460d      	mov	r5, r1
 801c022:	f6bf aedc 	bge.w	801bdde <atan+0x3e>
 801c026:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801c02a:	461d      	mov	r5, r3
 801c02c:	e6d7      	b.n	801bdde <atan+0x3e>
 801c02e:	a51c      	add	r5, pc, #112	@ (adr r5, 801c0a0 <atan+0x300>)
 801c030:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c034:	e6d3      	b.n	801bdde <atan+0x3e>
 801c036:	bf00      	nop
 801c038:	54442d18 	.word	0x54442d18
 801c03c:	3ff921fb 	.word	0x3ff921fb
 801c040:	8800759c 	.word	0x8800759c
 801c044:	7e37e43c 	.word	0x7e37e43c
 801c048:	e322da11 	.word	0xe322da11
 801c04c:	3f90ad3a 	.word	0x3f90ad3a
 801c050:	24760deb 	.word	0x24760deb
 801c054:	3fa97b4b 	.word	0x3fa97b4b
 801c058:	a0d03d51 	.word	0xa0d03d51
 801c05c:	3fb10d66 	.word	0x3fb10d66
 801c060:	c54c206e 	.word	0xc54c206e
 801c064:	3fb745cd 	.word	0x3fb745cd
 801c068:	920083ff 	.word	0x920083ff
 801c06c:	3fc24924 	.word	0x3fc24924
 801c070:	5555550d 	.word	0x5555550d
 801c074:	3fd55555 	.word	0x3fd55555
 801c078:	2c6a6c2f 	.word	0x2c6a6c2f
 801c07c:	bfa2b444 	.word	0xbfa2b444
 801c080:	52defd9a 	.word	0x52defd9a
 801c084:	3fadde2d 	.word	0x3fadde2d
 801c088:	af749a6d 	.word	0xaf749a6d
 801c08c:	3fb3b0f2 	.word	0x3fb3b0f2
 801c090:	fe231671 	.word	0xfe231671
 801c094:	3fbc71c6 	.word	0x3fbc71c6
 801c098:	9998ebc4 	.word	0x9998ebc4
 801c09c:	3fc99999 	.word	0x3fc99999
 801c0a0:	54442d18 	.word	0x54442d18
 801c0a4:	bff921fb 	.word	0xbff921fb
 801c0a8:	440fffff 	.word	0x440fffff
 801c0ac:	7ff00000 	.word	0x7ff00000
 801c0b0:	3fdbffff 	.word	0x3fdbffff
 801c0b4:	3ff00000 	.word	0x3ff00000
 801c0b8:	3ff2ffff 	.word	0x3ff2ffff
 801c0bc:	40038000 	.word	0x40038000
 801c0c0:	3ff80000 	.word	0x3ff80000
 801c0c4:	bff00000 	.word	0xbff00000
 801c0c8:	0801f3b8 	.word	0x0801f3b8
 801c0cc:	0801f3d8 	.word	0x0801f3d8

0801c0d0 <__kernel_cosf>:
 801c0d0:	ee10 3a10 	vmov	r3, s0
 801c0d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c0d8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c0dc:	eef0 6a40 	vmov.f32	s13, s0
 801c0e0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801c0e4:	d204      	bcs.n	801c0f0 <__kernel_cosf+0x20>
 801c0e6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 801c0ea:	ee17 2a90 	vmov	r2, s15
 801c0ee:	b342      	cbz	r2, 801c142 <__kernel_cosf+0x72>
 801c0f0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c0f4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 801c160 <__kernel_cosf+0x90>
 801c0f8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801c164 <__kernel_cosf+0x94>
 801c0fc:	4a1a      	ldr	r2, [pc, #104]	@ (801c168 <__kernel_cosf+0x98>)
 801c0fe:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c102:	4293      	cmp	r3, r2
 801c104:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801c16c <__kernel_cosf+0x9c>
 801c108:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c10c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 801c170 <__kernel_cosf+0xa0>
 801c110:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c114:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801c174 <__kernel_cosf+0xa4>
 801c118:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c11c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 801c178 <__kernel_cosf+0xa8>
 801c120:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c124:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 801c128:	ee26 6a07 	vmul.f32	s12, s12, s14
 801c12c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c130:	eee7 0a06 	vfma.f32	s1, s14, s12
 801c134:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c138:	d804      	bhi.n	801c144 <__kernel_cosf+0x74>
 801c13a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c13e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c142:	4770      	bx	lr
 801c144:	4a0d      	ldr	r2, [pc, #52]	@ (801c17c <__kernel_cosf+0xac>)
 801c146:	4293      	cmp	r3, r2
 801c148:	bf9a      	itte	ls
 801c14a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801c14e:	ee07 3a10 	vmovls	s14, r3
 801c152:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801c156:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c15a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c15e:	e7ec      	b.n	801c13a <__kernel_cosf+0x6a>
 801c160:	ad47d74e 	.word	0xad47d74e
 801c164:	310f74f6 	.word	0x310f74f6
 801c168:	3e999999 	.word	0x3e999999
 801c16c:	b493f27c 	.word	0xb493f27c
 801c170:	37d00d01 	.word	0x37d00d01
 801c174:	bab60b61 	.word	0xbab60b61
 801c178:	3d2aaaab 	.word	0x3d2aaaab
 801c17c:	3f480000 	.word	0x3f480000

0801c180 <__kernel_sinf>:
 801c180:	ee10 3a10 	vmov	r3, s0
 801c184:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c188:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 801c18c:	d204      	bcs.n	801c198 <__kernel_sinf+0x18>
 801c18e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801c192:	ee17 3a90 	vmov	r3, s15
 801c196:	b35b      	cbz	r3, 801c1f0 <__kernel_sinf+0x70>
 801c198:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c19c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801c1f4 <__kernel_sinf+0x74>
 801c1a0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 801c1f8 <__kernel_sinf+0x78>
 801c1a4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c1a8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 801c1fc <__kernel_sinf+0x7c>
 801c1ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c1b0:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801c200 <__kernel_sinf+0x80>
 801c1b4:	eea7 6a87 	vfma.f32	s12, s15, s14
 801c1b8:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801c204 <__kernel_sinf+0x84>
 801c1bc:	ee60 6a07 	vmul.f32	s13, s0, s14
 801c1c0:	eee6 7a07 	vfma.f32	s15, s12, s14
 801c1c4:	b930      	cbnz	r0, 801c1d4 <__kernel_sinf+0x54>
 801c1c6:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 801c208 <__kernel_sinf+0x88>
 801c1ca:	eea7 6a27 	vfma.f32	s12, s14, s15
 801c1ce:	eea6 0a26 	vfma.f32	s0, s12, s13
 801c1d2:	4770      	bx	lr
 801c1d4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801c1d8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 801c1dc:	eee0 7a86 	vfma.f32	s15, s1, s12
 801c1e0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801c1e4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 801c20c <__kernel_sinf+0x8c>
 801c1e8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801c1ec:	ee30 0a60 	vsub.f32	s0, s0, s1
 801c1f0:	4770      	bx	lr
 801c1f2:	bf00      	nop
 801c1f4:	2f2ec9d3 	.word	0x2f2ec9d3
 801c1f8:	b2d72f34 	.word	0xb2d72f34
 801c1fc:	3638ef1b 	.word	0x3638ef1b
 801c200:	b9500d01 	.word	0xb9500d01
 801c204:	3c088889 	.word	0x3c088889
 801c208:	be2aaaab 	.word	0xbe2aaaab
 801c20c:	3e2aaaab 	.word	0x3e2aaaab

0801c210 <__kernel_tanf>:
 801c210:	b508      	push	{r3, lr}
 801c212:	ee10 3a10 	vmov	r3, s0
 801c216:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801c21a:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 801c21e:	eef0 7a40 	vmov.f32	s15, s0
 801c222:	d217      	bcs.n	801c254 <__kernel_tanf+0x44>
 801c224:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801c228:	ee17 1a10 	vmov	r1, s14
 801c22c:	bb41      	cbnz	r1, 801c280 <__kernel_tanf+0x70>
 801c22e:	1c43      	adds	r3, r0, #1
 801c230:	4313      	orrs	r3, r2
 801c232:	d108      	bne.n	801c246 <__kernel_tanf+0x36>
 801c234:	f7ff f934 	bl	801b4a0 <fabsf>
 801c238:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c23c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c240:	eeb0 0a67 	vmov.f32	s0, s15
 801c244:	bd08      	pop	{r3, pc}
 801c246:	2801      	cmp	r0, #1
 801c248:	d0fa      	beq.n	801c240 <__kernel_tanf+0x30>
 801c24a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801c24e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c252:	e7f5      	b.n	801c240 <__kernel_tanf+0x30>
 801c254:	494c      	ldr	r1, [pc, #304]	@ (801c388 <__kernel_tanf+0x178>)
 801c256:	428a      	cmp	r2, r1
 801c258:	d312      	bcc.n	801c280 <__kernel_tanf+0x70>
 801c25a:	2b00      	cmp	r3, #0
 801c25c:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 801c38c <__kernel_tanf+0x17c>
 801c260:	bfb8      	it	lt
 801c262:	eef1 7a40 	vneglt.f32	s15, s0
 801c266:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c26a:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801c390 <__kernel_tanf+0x180>
 801c26e:	bfb8      	it	lt
 801c270:	eef1 0a60 	vneglt.f32	s1, s1
 801c274:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c278:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801c394 <__kernel_tanf+0x184>
 801c27c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c280:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801c284:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801c398 <__kernel_tanf+0x188>
 801c288:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 801c39c <__kernel_tanf+0x18c>
 801c28c:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 801c3a0 <__kernel_tanf+0x190>
 801c290:	493d      	ldr	r1, [pc, #244]	@ (801c388 <__kernel_tanf+0x178>)
 801c292:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801c296:	428a      	cmp	r2, r1
 801c298:	eea7 6a25 	vfma.f32	s12, s14, s11
 801c29c:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801c3a4 <__kernel_tanf+0x194>
 801c2a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c2a4:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 801c3a8 <__kernel_tanf+0x198>
 801c2a8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c2ac:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c3ac <__kernel_tanf+0x19c>
 801c2b0:	eee6 5a07 	vfma.f32	s11, s12, s14
 801c2b4:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 801c3b0 <__kernel_tanf+0x1a0>
 801c2b8:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c2bc:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801c3b4 <__kernel_tanf+0x1a4>
 801c2c0:	eee7 5a05 	vfma.f32	s11, s14, s10
 801c2c4:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801c3b8 <__kernel_tanf+0x1a8>
 801c2c8:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c2cc:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801c3bc <__kernel_tanf+0x1ac>
 801c2d0:	eee5 5a07 	vfma.f32	s11, s10, s14
 801c2d4:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801c3c0 <__kernel_tanf+0x1b0>
 801c2d8:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c2dc:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801c3c4 <__kernel_tanf+0x1b4>
 801c2e0:	eee5 5a07 	vfma.f32	s11, s10, s14
 801c2e4:	eeb0 7a46 	vmov.f32	s14, s12
 801c2e8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801c2ec:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801c2f0:	eeb0 6a60 	vmov.f32	s12, s1
 801c2f4:	eea7 6a05 	vfma.f32	s12, s14, s10
 801c2f8:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 801c3c8 <__kernel_tanf+0x1b8>
 801c2fc:	eee6 0a26 	vfma.f32	s1, s12, s13
 801c300:	eee5 0a07 	vfma.f32	s1, s10, s14
 801c304:	ee37 6aa0 	vadd.f32	s12, s15, s1
 801c308:	d31d      	bcc.n	801c346 <__kernel_tanf+0x136>
 801c30a:	ee07 0a10 	vmov	s14, r0
 801c30e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c312:	ee26 5a06 	vmul.f32	s10, s12, s12
 801c316:	ee36 6a07 	vadd.f32	s12, s12, s14
 801c31a:	179b      	asrs	r3, r3, #30
 801c31c:	eec5 5a06 	vdiv.f32	s11, s10, s12
 801c320:	f003 0302 	and.w	r3, r3, #2
 801c324:	f1c3 0301 	rsb	r3, r3, #1
 801c328:	ee06 3a90 	vmov	s13, r3
 801c32c:	ee35 6ae0 	vsub.f32	s12, s11, s1
 801c330:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c334:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c338:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801c33c:	eea7 7ac6 	vfms.f32	s14, s15, s12
 801c340:	ee66 7a87 	vmul.f32	s15, s13, s14
 801c344:	e77c      	b.n	801c240 <__kernel_tanf+0x30>
 801c346:	2801      	cmp	r0, #1
 801c348:	d01b      	beq.n	801c382 <__kernel_tanf+0x172>
 801c34a:	4b20      	ldr	r3, [pc, #128]	@ (801c3cc <__kernel_tanf+0x1bc>)
 801c34c:	ee16 2a10 	vmov	r2, s12
 801c350:	401a      	ands	r2, r3
 801c352:	ee05 2a90 	vmov	s11, r2
 801c356:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c35a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c35e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c362:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 801c366:	eec7 6a86 	vdiv.f32	s13, s15, s12
 801c36a:	ee16 2a90 	vmov	r2, s13
 801c36e:	4013      	ands	r3, r2
 801c370:	ee07 3a90 	vmov	s15, r3
 801c374:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c378:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801c37c:	eee7 7a26 	vfma.f32	s15, s14, s13
 801c380:	e75e      	b.n	801c240 <__kernel_tanf+0x30>
 801c382:	eef0 7a46 	vmov.f32	s15, s12
 801c386:	e75b      	b.n	801c240 <__kernel_tanf+0x30>
 801c388:	3f2ca140 	.word	0x3f2ca140
 801c38c:	3f490fda 	.word	0x3f490fda
 801c390:	33222168 	.word	0x33222168
 801c394:	00000000 	.word	0x00000000
 801c398:	b79bae5f 	.word	0xb79bae5f
 801c39c:	38a3f445 	.word	0x38a3f445
 801c3a0:	37d95384 	.word	0x37d95384
 801c3a4:	3a1a26c8 	.word	0x3a1a26c8
 801c3a8:	3b6b6916 	.word	0x3b6b6916
 801c3ac:	3cb327a4 	.word	0x3cb327a4
 801c3b0:	3e088889 	.word	0x3e088889
 801c3b4:	3895c07a 	.word	0x3895c07a
 801c3b8:	398137b9 	.word	0x398137b9
 801c3bc:	3abede48 	.word	0x3abede48
 801c3c0:	3c11371f 	.word	0x3c11371f
 801c3c4:	3d5d0dd1 	.word	0x3d5d0dd1
 801c3c8:	3eaaaaab 	.word	0x3eaaaaab
 801c3cc:	fffff000 	.word	0xfffff000

0801c3d0 <__ieee754_acosf>:
 801c3d0:	b508      	push	{r3, lr}
 801c3d2:	ee10 3a10 	vmov	r3, s0
 801c3d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801c3da:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801c3de:	ed2d 8b0c 	vpush	{d8-d13}
 801c3e2:	d10a      	bne.n	801c3fa <__ieee754_acosf+0x2a>
 801c3e4:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 801c57c <__ieee754_acosf+0x1ac>
 801c3e8:	eddf 7a65 	vldr	s15, [pc, #404]	@ 801c580 <__ieee754_acosf+0x1b0>
 801c3ec:	2b00      	cmp	r3, #0
 801c3ee:	bfc8      	it	gt
 801c3f0:	eeb0 0a67 	vmovgt.f32	s0, s15
 801c3f4:	ecbd 8b0c 	vpop	{d8-d13}
 801c3f8:	bd08      	pop	{r3, pc}
 801c3fa:	d904      	bls.n	801c406 <__ieee754_acosf+0x36>
 801c3fc:	ee30 8a40 	vsub.f32	s16, s0, s0
 801c400:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c404:	e7f6      	b.n	801c3f4 <__ieee754_acosf+0x24>
 801c406:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 801c40a:	d23c      	bcs.n	801c486 <__ieee754_acosf+0xb6>
 801c40c:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801c410:	f240 80b1 	bls.w	801c576 <__ieee754_acosf+0x1a6>
 801c414:	ee60 7a00 	vmul.f32	s15, s0, s0
 801c418:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801c584 <__ieee754_acosf+0x1b4>
 801c41c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 801c588 <__ieee754_acosf+0x1b8>
 801c420:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 801c58c <__ieee754_acosf+0x1bc>
 801c424:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801c428:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801c590 <__ieee754_acosf+0x1c0>
 801c42c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c430:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801c594 <__ieee754_acosf+0x1c4>
 801c434:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c438:	eddf 6a57 	vldr	s13, [pc, #348]	@ 801c598 <__ieee754_acosf+0x1c8>
 801c43c:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c440:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 801c59c <__ieee754_acosf+0x1cc>
 801c444:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c448:	eddf 6a55 	vldr	s13, [pc, #340]	@ 801c5a0 <__ieee754_acosf+0x1d0>
 801c44c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 801c450:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801c5a4 <__ieee754_acosf+0x1d4>
 801c454:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c458:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 801c5a8 <__ieee754_acosf+0x1d8>
 801c45c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801c460:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c464:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c468:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c46c:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 801c5ac <__ieee754_acosf+0x1dc>
 801c470:	ee87 6a26 	vdiv.f32	s12, s14, s13
 801c474:	eee0 7a46 	vfms.f32	s15, s0, s12
 801c478:	ee70 7a67 	vsub.f32	s15, s0, s15
 801c47c:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 801c5b0 <__ieee754_acosf+0x1e0>
 801c480:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c484:	e7b6      	b.n	801c3f4 <__ieee754_acosf+0x24>
 801c486:	2b00      	cmp	r3, #0
 801c488:	eddf da3e 	vldr	s27, [pc, #248]	@ 801c584 <__ieee754_acosf+0x1b4>
 801c48c:	eddf ca3e 	vldr	s25, [pc, #248]	@ 801c588 <__ieee754_acosf+0x1b8>
 801c490:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 801c590 <__ieee754_acosf+0x1c0>
 801c494:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801c594 <__ieee754_acosf+0x1c4>
 801c498:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 801c598 <__ieee754_acosf+0x1c8>
 801c49c:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 801c59c <__ieee754_acosf+0x1cc>
 801c4a0:	ed9f da3f 	vldr	s26, [pc, #252]	@ 801c5a0 <__ieee754_acosf+0x1d0>
 801c4a4:	eddf aa39 	vldr	s21, [pc, #228]	@ 801c58c <__ieee754_acosf+0x1bc>
 801c4a8:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801c5a4 <__ieee754_acosf+0x1d4>
 801c4ac:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 801c5a8 <__ieee754_acosf+0x1d8>
 801c4b0:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801c4b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c4b8:	da28      	bge.n	801c50c <__ieee754_acosf+0x13c>
 801c4ba:	ee30 8a09 	vadd.f32	s16, s0, s18
 801c4be:	ee28 0a27 	vmul.f32	s0, s16, s15
 801c4c2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801c4c6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801c4ca:	eeac ca80 	vfma.f32	s24, s25, s0
 801c4ce:	eeaa aa80 	vfma.f32	s20, s21, s0
 801c4d2:	eeec ba00 	vfma.f32	s23, s24, s0
 801c4d6:	eeea 9a00 	vfma.f32	s19, s20, s0
 801c4da:	eeab ba80 	vfma.f32	s22, s23, s0
 801c4de:	eea9 9a80 	vfma.f32	s18, s19, s0
 801c4e2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801c4e6:	ee68 8a80 	vmul.f32	s17, s17, s0
 801c4ea:	f7ff f987 	bl	801b7fc <__ieee754_sqrtf>
 801c4ee:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801c4f2:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801c5b4 <__ieee754_acosf+0x1e4>
 801c4f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c4fa:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801c4fe:	ee77 7a80 	vadd.f32	s15, s15, s0
 801c502:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 801c5b8 <__ieee754_acosf+0x1e8>
 801c506:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801c50a:	e773      	b.n	801c3f4 <__ieee754_acosf+0x24>
 801c50c:	ee39 8a40 	vsub.f32	s16, s18, s0
 801c510:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c514:	eeb0 0a48 	vmov.f32	s0, s16
 801c518:	f7ff f970 	bl	801b7fc <__ieee754_sqrtf>
 801c51c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801c520:	eee8 aa0d 	vfma.f32	s21, s16, s26
 801c524:	eeac ca88 	vfma.f32	s24, s25, s16
 801c528:	eeaa aa88 	vfma.f32	s20, s21, s16
 801c52c:	eeec ba08 	vfma.f32	s23, s24, s16
 801c530:	ee10 3a10 	vmov	r3, s0
 801c534:	eeab ba88 	vfma.f32	s22, s23, s16
 801c538:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801c53c:	f023 030f 	bic.w	r3, r3, #15
 801c540:	eeea 9a08 	vfma.f32	s19, s20, s16
 801c544:	ee07 3a90 	vmov	s15, r3
 801c548:	eeeb 8a08 	vfma.f32	s17, s22, s16
 801c54c:	eeb0 6a48 	vmov.f32	s12, s16
 801c550:	eea7 6ae7 	vfms.f32	s12, s15, s15
 801c554:	eea9 9a88 	vfma.f32	s18, s19, s16
 801c558:	ee70 6a27 	vadd.f32	s13, s0, s15
 801c55c:	ee68 8a88 	vmul.f32	s17, s17, s16
 801c560:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c564:	eec8 6a89 	vdiv.f32	s13, s17, s18
 801c568:	eea0 7a26 	vfma.f32	s14, s0, s13
 801c56c:	ee37 0a87 	vadd.f32	s0, s15, s14
 801c570:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c574:	e73e      	b.n	801c3f4 <__ieee754_acosf+0x24>
 801c576:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 801c5bc <__ieee754_acosf+0x1ec>
 801c57a:	e73b      	b.n	801c3f4 <__ieee754_acosf+0x24>
 801c57c:	40490fdb 	.word	0x40490fdb
 801c580:	00000000 	.word	0x00000000
 801c584:	3811ef08 	.word	0x3811ef08
 801c588:	3a4f7f04 	.word	0x3a4f7f04
 801c58c:	bf303361 	.word	0xbf303361
 801c590:	bd241146 	.word	0xbd241146
 801c594:	3e4e0aa8 	.word	0x3e4e0aa8
 801c598:	bea6b090 	.word	0xbea6b090
 801c59c:	3e2aaaab 	.word	0x3e2aaaab
 801c5a0:	3d9dc62e 	.word	0x3d9dc62e
 801c5a4:	4001572d 	.word	0x4001572d
 801c5a8:	c019d139 	.word	0xc019d139
 801c5ac:	33a22168 	.word	0x33a22168
 801c5b0:	3fc90fda 	.word	0x3fc90fda
 801c5b4:	b3a22168 	.word	0xb3a22168
 801c5b8:	40490fda 	.word	0x40490fda
 801c5bc:	3fc90fdb 	.word	0x3fc90fdb

0801c5c0 <__ieee754_asinf>:
 801c5c0:	b538      	push	{r3, r4, r5, lr}
 801c5c2:	ee10 5a10 	vmov	r5, s0
 801c5c6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801c5ca:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 801c5ce:	ed2d 8b04 	vpush	{d8-d9}
 801c5d2:	d10c      	bne.n	801c5ee <__ieee754_asinf+0x2e>
 801c5d4:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 801c74c <__ieee754_asinf+0x18c>
 801c5d8:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 801c750 <__ieee754_asinf+0x190>
 801c5dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c5e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c5e4:	eeb0 0a67 	vmov.f32	s0, s15
 801c5e8:	ecbd 8b04 	vpop	{d8-d9}
 801c5ec:	bd38      	pop	{r3, r4, r5, pc}
 801c5ee:	d904      	bls.n	801c5fa <__ieee754_asinf+0x3a>
 801c5f0:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c5f4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c5f8:	e7f6      	b.n	801c5e8 <__ieee754_asinf+0x28>
 801c5fa:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801c5fe:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801c602:	d20b      	bcs.n	801c61c <__ieee754_asinf+0x5c>
 801c604:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 801c608:	d252      	bcs.n	801c6b0 <__ieee754_asinf+0xf0>
 801c60a:	eddf 7a52 	vldr	s15, [pc, #328]	@ 801c754 <__ieee754_asinf+0x194>
 801c60e:	ee70 7a27 	vadd.f32	s15, s0, s15
 801c612:	eef4 7ae8 	vcmpe.f32	s15, s17
 801c616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c61a:	dce5      	bgt.n	801c5e8 <__ieee754_asinf+0x28>
 801c61c:	f7fe ff40 	bl	801b4a0 <fabsf>
 801c620:	ee38 8ac0 	vsub.f32	s16, s17, s0
 801c624:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801c628:	ee28 8a27 	vmul.f32	s16, s16, s15
 801c62c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 801c758 <__ieee754_asinf+0x198>
 801c630:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 801c75c <__ieee754_asinf+0x19c>
 801c634:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 801c760 <__ieee754_asinf+0x1a0>
 801c638:	eea8 7a27 	vfma.f32	s14, s16, s15
 801c63c:	eddf 7a49 	vldr	s15, [pc, #292]	@ 801c764 <__ieee754_asinf+0x1a4>
 801c640:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c644:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801c768 <__ieee754_asinf+0x1a8>
 801c648:	eea7 7a88 	vfma.f32	s14, s15, s16
 801c64c:	eddf 7a47 	vldr	s15, [pc, #284]	@ 801c76c <__ieee754_asinf+0x1ac>
 801c650:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c654:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 801c770 <__ieee754_asinf+0x1b0>
 801c658:	eea7 9a88 	vfma.f32	s18, s15, s16
 801c65c:	eddf 7a45 	vldr	s15, [pc, #276]	@ 801c774 <__ieee754_asinf+0x1b4>
 801c660:	eee8 7a07 	vfma.f32	s15, s16, s14
 801c664:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 801c778 <__ieee754_asinf+0x1b8>
 801c668:	eea7 7a88 	vfma.f32	s14, s15, s16
 801c66c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 801c77c <__ieee754_asinf+0x1bc>
 801c670:	eee7 7a08 	vfma.f32	s15, s14, s16
 801c674:	eeb0 0a48 	vmov.f32	s0, s16
 801c678:	eee7 8a88 	vfma.f32	s17, s15, s16
 801c67c:	f7ff f8be 	bl	801b7fc <__ieee754_sqrtf>
 801c680:	4b3f      	ldr	r3, [pc, #252]	@ (801c780 <__ieee754_asinf+0x1c0>)
 801c682:	ee29 9a08 	vmul.f32	s18, s18, s16
 801c686:	429c      	cmp	r4, r3
 801c688:	ee89 6a28 	vdiv.f32	s12, s18, s17
 801c68c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801c690:	d93d      	bls.n	801c70e <__ieee754_asinf+0x14e>
 801c692:	eea0 0a06 	vfma.f32	s0, s0, s12
 801c696:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801c784 <__ieee754_asinf+0x1c4>
 801c69a:	eee0 7a26 	vfma.f32	s15, s0, s13
 801c69e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 801c750 <__ieee754_asinf+0x190>
 801c6a2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c6a6:	2d00      	cmp	r5, #0
 801c6a8:	bfd8      	it	le
 801c6aa:	eeb1 0a40 	vnegle.f32	s0, s0
 801c6ae:	e79b      	b.n	801c5e8 <__ieee754_asinf+0x28>
 801c6b0:	ee60 7a00 	vmul.f32	s15, s0, s0
 801c6b4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801c75c <__ieee754_asinf+0x19c>
 801c6b8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 801c758 <__ieee754_asinf+0x198>
 801c6bc:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 801c770 <__ieee754_asinf+0x1b0>
 801c6c0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801c6c4:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801c764 <__ieee754_asinf+0x1a4>
 801c6c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c6cc:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 801c768 <__ieee754_asinf+0x1a8>
 801c6d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c6d4:	eddf 6a25 	vldr	s13, [pc, #148]	@ 801c76c <__ieee754_asinf+0x1ac>
 801c6d8:	eee7 6a27 	vfma.f32	s13, s14, s15
 801c6dc:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 801c760 <__ieee754_asinf+0x1a0>
 801c6e0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c6e4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 801c774 <__ieee754_asinf+0x1b4>
 801c6e8:	eee7 6a86 	vfma.f32	s13, s15, s12
 801c6ec:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801c778 <__ieee754_asinf+0x1b8>
 801c6f0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801c6f4:	eddf 6a21 	vldr	s13, [pc, #132]	@ 801c77c <__ieee754_asinf+0x1bc>
 801c6f8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c6fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c700:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801c704:	eec7 7a28 	vdiv.f32	s15, s14, s17
 801c708:	eea0 0a27 	vfma.f32	s0, s0, s15
 801c70c:	e76c      	b.n	801c5e8 <__ieee754_asinf+0x28>
 801c70e:	ee10 3a10 	vmov	r3, s0
 801c712:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801c716:	f023 030f 	bic.w	r3, r3, #15
 801c71a:	ee07 3a10 	vmov	s14, r3
 801c71e:	eea7 8a47 	vfms.f32	s16, s14, s14
 801c722:	ee70 5a00 	vadd.f32	s11, s0, s0
 801c726:	ee30 0a07 	vadd.f32	s0, s0, s14
 801c72a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801c74c <__ieee754_asinf+0x18c>
 801c72e:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801c732:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801c788 <__ieee754_asinf+0x1c8>
 801c736:	eee5 7a66 	vfms.f32	s15, s10, s13
 801c73a:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801c73e:	eeb0 6a40 	vmov.f32	s12, s0
 801c742:	eea7 6a66 	vfms.f32	s12, s14, s13
 801c746:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c74a:	e7aa      	b.n	801c6a2 <__ieee754_asinf+0xe2>
 801c74c:	b33bbd2e 	.word	0xb33bbd2e
 801c750:	3fc90fdb 	.word	0x3fc90fdb
 801c754:	7149f2ca 	.word	0x7149f2ca
 801c758:	3a4f7f04 	.word	0x3a4f7f04
 801c75c:	3811ef08 	.word	0x3811ef08
 801c760:	3e2aaaab 	.word	0x3e2aaaab
 801c764:	bd241146 	.word	0xbd241146
 801c768:	3e4e0aa8 	.word	0x3e4e0aa8
 801c76c:	bea6b090 	.word	0xbea6b090
 801c770:	3d9dc62e 	.word	0x3d9dc62e
 801c774:	bf303361 	.word	0xbf303361
 801c778:	4001572d 	.word	0x4001572d
 801c77c:	c019d139 	.word	0xc019d139
 801c780:	3f799999 	.word	0x3f799999
 801c784:	333bbd2e 	.word	0x333bbd2e
 801c788:	3f490fdb 	.word	0x3f490fdb

0801c78c <__ieee754_atan2f>:
 801c78c:	ee10 2a90 	vmov	r2, s1
 801c790:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801c794:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801c798:	b510      	push	{r4, lr}
 801c79a:	eef0 7a40 	vmov.f32	s15, s0
 801c79e:	d806      	bhi.n	801c7ae <__ieee754_atan2f+0x22>
 801c7a0:	ee10 0a10 	vmov	r0, s0
 801c7a4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801c7a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c7ac:	d904      	bls.n	801c7b8 <__ieee754_atan2f+0x2c>
 801c7ae:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801c7b2:	eeb0 0a67 	vmov.f32	s0, s15
 801c7b6:	bd10      	pop	{r4, pc}
 801c7b8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801c7bc:	d103      	bne.n	801c7c6 <__ieee754_atan2f+0x3a>
 801c7be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c7c2:	f000 be43 	b.w	801d44c <atanf>
 801c7c6:	1794      	asrs	r4, r2, #30
 801c7c8:	f004 0402 	and.w	r4, r4, #2
 801c7cc:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 801c7d0:	b943      	cbnz	r3, 801c7e4 <__ieee754_atan2f+0x58>
 801c7d2:	2c02      	cmp	r4, #2
 801c7d4:	d05e      	beq.n	801c894 <__ieee754_atan2f+0x108>
 801c7d6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801c8a8 <__ieee754_atan2f+0x11c>
 801c7da:	2c03      	cmp	r4, #3
 801c7dc:	bf08      	it	eq
 801c7de:	eef0 7a47 	vmoveq.f32	s15, s14
 801c7e2:	e7e6      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c7e4:	b941      	cbnz	r1, 801c7f8 <__ieee754_atan2f+0x6c>
 801c7e6:	eddf 7a31 	vldr	s15, [pc, #196]	@ 801c8ac <__ieee754_atan2f+0x120>
 801c7ea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801c8b0 <__ieee754_atan2f+0x124>
 801c7ee:	2800      	cmp	r0, #0
 801c7f0:	bfb8      	it	lt
 801c7f2:	eef0 7a47 	vmovlt.f32	s15, s14
 801c7f6:	e7dc      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c7f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801c7fc:	d110      	bne.n	801c820 <__ieee754_atan2f+0x94>
 801c7fe:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c802:	f104 34ff 	add.w	r4, r4, #4294967295
 801c806:	d107      	bne.n	801c818 <__ieee754_atan2f+0x8c>
 801c808:	2c02      	cmp	r4, #2
 801c80a:	d846      	bhi.n	801c89a <__ieee754_atan2f+0x10e>
 801c80c:	4b29      	ldr	r3, [pc, #164]	@ (801c8b4 <__ieee754_atan2f+0x128>)
 801c80e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801c812:	edd3 7a00 	vldr	s15, [r3]
 801c816:	e7cc      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c818:	2c02      	cmp	r4, #2
 801c81a:	d841      	bhi.n	801c8a0 <__ieee754_atan2f+0x114>
 801c81c:	4b26      	ldr	r3, [pc, #152]	@ (801c8b8 <__ieee754_atan2f+0x12c>)
 801c81e:	e7f6      	b.n	801c80e <__ieee754_atan2f+0x82>
 801c820:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c824:	d0df      	beq.n	801c7e6 <__ieee754_atan2f+0x5a>
 801c826:	1a5b      	subs	r3, r3, r1
 801c828:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 801c82c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801c830:	da1a      	bge.n	801c868 <__ieee754_atan2f+0xdc>
 801c832:	2a00      	cmp	r2, #0
 801c834:	da01      	bge.n	801c83a <__ieee754_atan2f+0xae>
 801c836:	313c      	adds	r1, #60	@ 0x3c
 801c838:	db19      	blt.n	801c86e <__ieee754_atan2f+0xe2>
 801c83a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801c83e:	f7fe fe2f 	bl	801b4a0 <fabsf>
 801c842:	f000 fe03 	bl	801d44c <atanf>
 801c846:	eef0 7a40 	vmov.f32	s15, s0
 801c84a:	2c01      	cmp	r4, #1
 801c84c:	d012      	beq.n	801c874 <__ieee754_atan2f+0xe8>
 801c84e:	2c02      	cmp	r4, #2
 801c850:	d017      	beq.n	801c882 <__ieee754_atan2f+0xf6>
 801c852:	2c00      	cmp	r4, #0
 801c854:	d0ad      	beq.n	801c7b2 <__ieee754_atan2f+0x26>
 801c856:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 801c8bc <__ieee754_atan2f+0x130>
 801c85a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c85e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 801c8c0 <__ieee754_atan2f+0x134>
 801c862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c866:	e7a4      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c868:	eddf 7a10 	vldr	s15, [pc, #64]	@ 801c8ac <__ieee754_atan2f+0x120>
 801c86c:	e7ed      	b.n	801c84a <__ieee754_atan2f+0xbe>
 801c86e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801c8c4 <__ieee754_atan2f+0x138>
 801c872:	e7ea      	b.n	801c84a <__ieee754_atan2f+0xbe>
 801c874:	ee17 3a90 	vmov	r3, s15
 801c878:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 801c87c:	ee07 3a90 	vmov	s15, r3
 801c880:	e797      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c882:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 801c8bc <__ieee754_atan2f+0x130>
 801c886:	ee77 7a87 	vadd.f32	s15, s15, s14
 801c88a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 801c8c0 <__ieee754_atan2f+0x134>
 801c88e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c892:	e78e      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c894:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 801c8c0 <__ieee754_atan2f+0x134>
 801c898:	e78b      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c89a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801c8c8 <__ieee754_atan2f+0x13c>
 801c89e:	e788      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c8a0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801c8c4 <__ieee754_atan2f+0x138>
 801c8a4:	e785      	b.n	801c7b2 <__ieee754_atan2f+0x26>
 801c8a6:	bf00      	nop
 801c8a8:	c0490fdb 	.word	0xc0490fdb
 801c8ac:	3fc90fdb 	.word	0x3fc90fdb
 801c8b0:	bfc90fdb 	.word	0xbfc90fdb
 801c8b4:	0801f404 	.word	0x0801f404
 801c8b8:	0801f3f8 	.word	0x0801f3f8
 801c8bc:	33bbbd2e 	.word	0x33bbbd2e
 801c8c0:	40490fdb 	.word	0x40490fdb
 801c8c4:	00000000 	.word	0x00000000
 801c8c8:	3f490fdb 	.word	0x3f490fdb

0801c8cc <__ieee754_expf>:
 801c8cc:	ee10 2a10 	vmov	r2, s0
 801c8d0:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801c8d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801c8d8:	d902      	bls.n	801c8e0 <__ieee754_expf+0x14>
 801c8da:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c8de:	4770      	bx	lr
 801c8e0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801c8e4:	d106      	bne.n	801c8f4 <__ieee754_expf+0x28>
 801c8e6:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 801ca20 <__ieee754_expf+0x154>
 801c8ea:	2900      	cmp	r1, #0
 801c8ec:	bf18      	it	ne
 801c8ee:	eeb0 0a67 	vmovne.f32	s0, s15
 801c8f2:	4770      	bx	lr
 801c8f4:	484b      	ldr	r0, [pc, #300]	@ (801ca24 <__ieee754_expf+0x158>)
 801c8f6:	4282      	cmp	r2, r0
 801c8f8:	dd02      	ble.n	801c900 <__ieee754_expf+0x34>
 801c8fa:	2000      	movs	r0, #0
 801c8fc:	f000 bf00 	b.w	801d700 <__math_oflowf>
 801c900:	2a00      	cmp	r2, #0
 801c902:	da05      	bge.n	801c910 <__ieee754_expf+0x44>
 801c904:	4a48      	ldr	r2, [pc, #288]	@ (801ca28 <__ieee754_expf+0x15c>)
 801c906:	4293      	cmp	r3, r2
 801c908:	d902      	bls.n	801c910 <__ieee754_expf+0x44>
 801c90a:	2000      	movs	r0, #0
 801c90c:	f000 bef2 	b.w	801d6f4 <__math_uflowf>
 801c910:	4a46      	ldr	r2, [pc, #280]	@ (801ca2c <__ieee754_expf+0x160>)
 801c912:	4293      	cmp	r3, r2
 801c914:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 801c918:	d952      	bls.n	801c9c0 <__ieee754_expf+0xf4>
 801c91a:	4a45      	ldr	r2, [pc, #276]	@ (801ca30 <__ieee754_expf+0x164>)
 801c91c:	4293      	cmp	r3, r2
 801c91e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 801c922:	d834      	bhi.n	801c98e <__ieee754_expf+0xc2>
 801c924:	4b43      	ldr	r3, [pc, #268]	@ (801ca34 <__ieee754_expf+0x168>)
 801c926:	4413      	add	r3, r2
 801c928:	ed93 7a00 	vldr	s14, [r3]
 801c92c:	4b42      	ldr	r3, [pc, #264]	@ (801ca38 <__ieee754_expf+0x16c>)
 801c92e:	4413      	add	r3, r2
 801c930:	ee30 7a47 	vsub.f32	s14, s0, s14
 801c934:	f1c1 0201 	rsb	r2, r1, #1
 801c938:	edd3 7a00 	vldr	s15, [r3]
 801c93c:	1a52      	subs	r2, r2, r1
 801c93e:	ee37 0a67 	vsub.f32	s0, s14, s15
 801c942:	ee20 6a00 	vmul.f32	s12, s0, s0
 801c946:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 801ca3c <__ieee754_expf+0x170>
 801c94a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801ca40 <__ieee754_expf+0x174>
 801c94e:	eee6 6a05 	vfma.f32	s13, s12, s10
 801c952:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801ca44 <__ieee754_expf+0x178>
 801c956:	eea6 5a86 	vfma.f32	s10, s13, s12
 801c95a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801ca48 <__ieee754_expf+0x17c>
 801c95e:	eee5 6a06 	vfma.f32	s13, s10, s12
 801c962:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 801ca4c <__ieee754_expf+0x180>
 801c966:	eea6 5a86 	vfma.f32	s10, s13, s12
 801c96a:	eef0 6a40 	vmov.f32	s13, s0
 801c96e:	eee5 6a46 	vfms.f32	s13, s10, s12
 801c972:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801c976:	ee20 5a26 	vmul.f32	s10, s0, s13
 801c97a:	bb92      	cbnz	r2, 801c9e2 <__ieee754_expf+0x116>
 801c97c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 801c980:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801c984:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c988:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801c98c:	4770      	bx	lr
 801c98e:	4b30      	ldr	r3, [pc, #192]	@ (801ca50 <__ieee754_expf+0x184>)
 801c990:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801ca54 <__ieee754_expf+0x188>
 801c994:	eddf 6a30 	vldr	s13, [pc, #192]	@ 801ca58 <__ieee754_expf+0x18c>
 801c998:	4413      	add	r3, r2
 801c99a:	edd3 7a00 	vldr	s15, [r3]
 801c99e:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c9a2:	eeb0 7a40 	vmov.f32	s14, s0
 801c9a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c9aa:	ee17 2a90 	vmov	r2, s15
 801c9ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c9b2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801c9b6:	eddf 6a29 	vldr	s13, [pc, #164]	@ 801ca5c <__ieee754_expf+0x190>
 801c9ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c9be:	e7be      	b.n	801c93e <__ieee754_expf+0x72>
 801c9c0:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801c9c4:	d20b      	bcs.n	801c9de <__ieee754_expf+0x112>
 801c9c6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801ca60 <__ieee754_expf+0x194>
 801c9ca:	ee70 6a26 	vadd.f32	s13, s0, s13
 801c9ce:	eef4 6ae5 	vcmpe.f32	s13, s11
 801c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c9d6:	dd02      	ble.n	801c9de <__ieee754_expf+0x112>
 801c9d8:	ee30 0a25 	vadd.f32	s0, s0, s11
 801c9dc:	4770      	bx	lr
 801c9de:	2200      	movs	r2, #0
 801c9e0:	e7af      	b.n	801c942 <__ieee754_expf+0x76>
 801c9e2:	ee36 6a66 	vsub.f32	s12, s12, s13
 801c9e6:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 801c9ea:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c9ee:	bfb8      	it	lt
 801c9f0:	3264      	addlt	r2, #100	@ 0x64
 801c9f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c9f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c9fa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801c9fe:	ee17 3a90 	vmov	r3, s15
 801ca02:	bfab      	itete	ge
 801ca04:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801ca08:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801ca0c:	ee00 3a10 	vmovge	s0, r3
 801ca10:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801ca64 <__ieee754_expf+0x198>
 801ca14:	bfbc      	itt	lt
 801ca16:	ee00 3a10 	vmovlt	s0, r3
 801ca1a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801ca1e:	4770      	bx	lr
 801ca20:	00000000 	.word	0x00000000
 801ca24:	42b17217 	.word	0x42b17217
 801ca28:	42cff1b5 	.word	0x42cff1b5
 801ca2c:	3eb17218 	.word	0x3eb17218
 801ca30:	3f851591 	.word	0x3f851591
 801ca34:	0801f418 	.word	0x0801f418
 801ca38:	0801f410 	.word	0x0801f410
 801ca3c:	3331bb4c 	.word	0x3331bb4c
 801ca40:	b5ddea0e 	.word	0xb5ddea0e
 801ca44:	388ab355 	.word	0x388ab355
 801ca48:	bb360b61 	.word	0xbb360b61
 801ca4c:	3e2aaaab 	.word	0x3e2aaaab
 801ca50:	0801f420 	.word	0x0801f420
 801ca54:	3fb8aa3b 	.word	0x3fb8aa3b
 801ca58:	3f317180 	.word	0x3f317180
 801ca5c:	3717f7d1 	.word	0x3717f7d1
 801ca60:	7149f2ca 	.word	0x7149f2ca
 801ca64:	0d800000 	.word	0x0d800000

0801ca68 <__ieee754_logf>:
 801ca68:	ee10 3a10 	vmov	r3, s0
 801ca6c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801ca70:	d106      	bne.n	801ca80 <__ieee754_logf+0x18>
 801ca72:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801cc0c <__ieee754_logf+0x1a4>
 801ca76:	eddf 7a66 	vldr	s15, [pc, #408]	@ 801cc10 <__ieee754_logf+0x1a8>
 801ca7a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801ca7e:	4770      	bx	lr
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	461a      	mov	r2, r3
 801ca84:	da02      	bge.n	801ca8c <__ieee754_logf+0x24>
 801ca86:	ee30 7a40 	vsub.f32	s14, s0, s0
 801ca8a:	e7f4      	b.n	801ca76 <__ieee754_logf+0xe>
 801ca8c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801ca90:	db02      	blt.n	801ca98 <__ieee754_logf+0x30>
 801ca92:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ca96:	4770      	bx	lr
 801ca98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801ca9c:	bfb8      	it	lt
 801ca9e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 801cc14 <__ieee754_logf+0x1ac>
 801caa2:	485d      	ldr	r0, [pc, #372]	@ (801cc18 <__ieee754_logf+0x1b0>)
 801caa4:	bfbe      	ittt	lt
 801caa6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801caaa:	f06f 0118 	mvnlt.w	r1, #24
 801caae:	ee17 2a90 	vmovlt	r2, s15
 801cab2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801cab6:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801caba:	4410      	add	r0, r2
 801cabc:	bfa8      	it	ge
 801cabe:	2100      	movge	r1, #0
 801cac0:	3b7f      	subs	r3, #127	@ 0x7f
 801cac2:	440b      	add	r3, r1
 801cac4:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 801cac8:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801cacc:	4311      	orrs	r1, r2
 801cace:	ee00 1a10 	vmov	s0, r1
 801cad2:	4952      	ldr	r1, [pc, #328]	@ (801cc1c <__ieee754_logf+0x1b4>)
 801cad4:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 801cad8:	f102 000f 	add.w	r0, r2, #15
 801cadc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cae0:	4001      	ands	r1, r0
 801cae2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cae6:	bb89      	cbnz	r1, 801cb4c <__ieee754_logf+0xe4>
 801cae8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801caec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801caf0:	d10f      	bne.n	801cb12 <__ieee754_logf+0xaa>
 801caf2:	2b00      	cmp	r3, #0
 801caf4:	f000 8087 	beq.w	801cc06 <__ieee754_logf+0x19e>
 801caf8:	ee07 3a90 	vmov	s15, r3
 801cafc:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 801cc20 <__ieee754_logf+0x1b8>
 801cb00:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 801cc24 <__ieee754_logf+0x1bc>
 801cb04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb08:	ee27 0a80 	vmul.f32	s0, s15, s0
 801cb0c:	eea7 0a87 	vfma.f32	s0, s15, s14
 801cb10:	4770      	bx	lr
 801cb12:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801cc28 <__ieee754_logf+0x1c0>
 801cb16:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cb1a:	eee0 7a66 	vfms.f32	s15, s0, s13
 801cb1e:	ee20 7a00 	vmul.f32	s14, s0, s0
 801cb22:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cb26:	b913      	cbnz	r3, 801cb2e <__ieee754_logf+0xc6>
 801cb28:	ee30 0a47 	vsub.f32	s0, s0, s14
 801cb2c:	4770      	bx	lr
 801cb2e:	ee07 3a90 	vmov	s15, r3
 801cb32:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801cc20 <__ieee754_logf+0x1b8>
 801cb36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801cb3a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801cb3e:	ee37 0a40 	vsub.f32	s0, s14, s0
 801cb42:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801cc24 <__ieee754_logf+0x1bc>
 801cb46:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801cb4a:	4770      	bx	lr
 801cb4c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801cb50:	ee70 7a27 	vadd.f32	s15, s0, s15
 801cb54:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801cc2c <__ieee754_logf+0x1c4>
 801cb58:	eddf 4a35 	vldr	s9, [pc, #212]	@ 801cc30 <__ieee754_logf+0x1c8>
 801cb5c:	4935      	ldr	r1, [pc, #212]	@ (801cc34 <__ieee754_logf+0x1cc>)
 801cb5e:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801cb62:	4411      	add	r1, r2
 801cb64:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 801cb68:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 801cb6c:	430a      	orrs	r2, r1
 801cb6e:	2a00      	cmp	r2, #0
 801cb70:	ee07 3a90 	vmov	s15, r3
 801cb74:	ee26 5a06 	vmul.f32	s10, s12, s12
 801cb78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801cb7c:	ee25 7a05 	vmul.f32	s14, s10, s10
 801cb80:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 801cc38 <__ieee754_logf+0x1d0>
 801cb84:	eee7 7a25 	vfma.f32	s15, s14, s11
 801cb88:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 801cc3c <__ieee754_logf+0x1d4>
 801cb8c:	eee7 5a87 	vfma.f32	s11, s15, s14
 801cb90:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 801cc40 <__ieee754_logf+0x1d8>
 801cb94:	eee7 7a24 	vfma.f32	s15, s14, s9
 801cb98:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801cc44 <__ieee754_logf+0x1dc>
 801cb9c:	eee7 4a87 	vfma.f32	s9, s15, s14
 801cba0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801cc48 <__ieee754_logf+0x1e0>
 801cba4:	eee4 7a87 	vfma.f32	s15, s9, s14
 801cba8:	ee67 7a85 	vmul.f32	s15, s15, s10
 801cbac:	eee5 7a87 	vfma.f32	s15, s11, s14
 801cbb0:	dd1a      	ble.n	801cbe8 <__ieee754_logf+0x180>
 801cbb2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801cbb6:	ee20 7a07 	vmul.f32	s14, s0, s14
 801cbba:	ee27 7a00 	vmul.f32	s14, s14, s0
 801cbbe:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cbc2:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cbc6:	b913      	cbnz	r3, 801cbce <__ieee754_logf+0x166>
 801cbc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 801cbcc:	e7ac      	b.n	801cb28 <__ieee754_logf+0xc0>
 801cbce:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 801cc20 <__ieee754_logf+0x1b8>
 801cbd2:	eee6 7a86 	vfma.f32	s15, s13, s12
 801cbd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 801cbda:	ee37 0a40 	vsub.f32	s0, s14, s0
 801cbde:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801cc24 <__ieee754_logf+0x1bc>
 801cbe2:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801cbe6:	4770      	bx	lr
 801cbe8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801cbec:	ee67 7a86 	vmul.f32	s15, s15, s12
 801cbf0:	b913      	cbnz	r3, 801cbf8 <__ieee754_logf+0x190>
 801cbf2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cbf6:	4770      	bx	lr
 801cbf8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 801cc20 <__ieee754_logf+0x1b8>
 801cbfc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801cc00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801cc04:	e7eb      	b.n	801cbde <__ieee754_logf+0x176>
 801cc06:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 801cc10 <__ieee754_logf+0x1a8>
 801cc0a:	4770      	bx	lr
 801cc0c:	cc000000 	.word	0xcc000000
 801cc10:	00000000 	.word	0x00000000
 801cc14:	4c000000 	.word	0x4c000000
 801cc18:	004afb20 	.word	0x004afb20
 801cc1c:	007ffff0 	.word	0x007ffff0
 801cc20:	3717f7d1 	.word	0x3717f7d1
 801cc24:	3f317180 	.word	0x3f317180
 801cc28:	3eaaaaab 	.word	0x3eaaaaab
 801cc2c:	3e1cd04f 	.word	0x3e1cd04f
 801cc30:	3e178897 	.word	0x3e178897
 801cc34:	ffcf5c30 	.word	0xffcf5c30
 801cc38:	3e638e29 	.word	0x3e638e29
 801cc3c:	3ecccccd 	.word	0x3ecccccd
 801cc40:	3e3a3325 	.word	0x3e3a3325
 801cc44:	3e924925 	.word	0x3e924925
 801cc48:	3f2aaaab 	.word	0x3f2aaaab

0801cc4c <__ieee754_powf>:
 801cc4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc50:	ee10 4a90 	vmov	r4, s1
 801cc54:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801cc58:	ed2d 8b02 	vpush	{d8}
 801cc5c:	ee10 6a10 	vmov	r6, s0
 801cc60:	eeb0 8a40 	vmov.f32	s16, s0
 801cc64:	eef0 8a60 	vmov.f32	s17, s1
 801cc68:	d10c      	bne.n	801cc84 <__ieee754_powf+0x38>
 801cc6a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 801cc6e:	0076      	lsls	r6, r6, #1
 801cc70:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801cc74:	f240 829c 	bls.w	801d1b0 <__ieee754_powf+0x564>
 801cc78:	ee38 0a28 	vadd.f32	s0, s16, s17
 801cc7c:	ecbd 8b02 	vpop	{d8}
 801cc80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cc84:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801cc88:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 801cc8c:	d802      	bhi.n	801cc94 <__ieee754_powf+0x48>
 801cc8e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801cc92:	d908      	bls.n	801cca6 <__ieee754_powf+0x5a>
 801cc94:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801cc98:	d1ee      	bne.n	801cc78 <__ieee754_powf+0x2c>
 801cc9a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801cc9e:	0064      	lsls	r4, r4, #1
 801cca0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801cca4:	e7e6      	b.n	801cc74 <__ieee754_powf+0x28>
 801cca6:	2e00      	cmp	r6, #0
 801cca8:	da1e      	bge.n	801cce8 <__ieee754_powf+0x9c>
 801ccaa:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801ccae:	d22b      	bcs.n	801cd08 <__ieee754_powf+0xbc>
 801ccb0:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801ccb4:	d332      	bcc.n	801cd1c <__ieee754_powf+0xd0>
 801ccb6:	ea4f 53e9 	mov.w	r3, r9, asr #23
 801ccba:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801ccbe:	fa49 f503 	asr.w	r5, r9, r3
 801ccc2:	fa05 f303 	lsl.w	r3, r5, r3
 801ccc6:	454b      	cmp	r3, r9
 801ccc8:	d126      	bne.n	801cd18 <__ieee754_powf+0xcc>
 801ccca:	f005 0501 	and.w	r5, r5, #1
 801ccce:	f1c5 0502 	rsb	r5, r5, #2
 801ccd2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801ccd6:	d122      	bne.n	801cd1e <__ieee754_powf+0xd2>
 801ccd8:	2c00      	cmp	r4, #0
 801ccda:	f280 826f 	bge.w	801d1bc <__ieee754_powf+0x570>
 801ccde:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cce2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801cce6:	e7c9      	b.n	801cc7c <__ieee754_powf+0x30>
 801cce8:	2500      	movs	r5, #0
 801ccea:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801ccee:	d1f0      	bne.n	801ccd2 <__ieee754_powf+0x86>
 801ccf0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 801ccf4:	f000 825c 	beq.w	801d1b0 <__ieee754_powf+0x564>
 801ccf8:	d908      	bls.n	801cd0c <__ieee754_powf+0xc0>
 801ccfa:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 801d05c <__ieee754_powf+0x410>
 801ccfe:	2c00      	cmp	r4, #0
 801cd00:	bfa8      	it	ge
 801cd02:	eeb0 0a68 	vmovge.f32	s0, s17
 801cd06:	e7b9      	b.n	801cc7c <__ieee754_powf+0x30>
 801cd08:	2502      	movs	r5, #2
 801cd0a:	e7ee      	b.n	801ccea <__ieee754_powf+0x9e>
 801cd0c:	2c00      	cmp	r4, #0
 801cd0e:	f280 8252 	bge.w	801d1b6 <__ieee754_powf+0x56a>
 801cd12:	eeb1 0a68 	vneg.f32	s0, s17
 801cd16:	e7b1      	b.n	801cc7c <__ieee754_powf+0x30>
 801cd18:	2500      	movs	r5, #0
 801cd1a:	e7da      	b.n	801ccd2 <__ieee754_powf+0x86>
 801cd1c:	2500      	movs	r5, #0
 801cd1e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801cd22:	d102      	bne.n	801cd2a <__ieee754_powf+0xde>
 801cd24:	ee28 0a08 	vmul.f32	s0, s16, s16
 801cd28:	e7a8      	b.n	801cc7c <__ieee754_powf+0x30>
 801cd2a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801cd2e:	d109      	bne.n	801cd44 <__ieee754_powf+0xf8>
 801cd30:	2e00      	cmp	r6, #0
 801cd32:	db07      	blt.n	801cd44 <__ieee754_powf+0xf8>
 801cd34:	eeb0 0a48 	vmov.f32	s0, s16
 801cd38:	ecbd 8b02 	vpop	{d8}
 801cd3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd40:	f7fe bd5c 	b.w	801b7fc <__ieee754_sqrtf>
 801cd44:	eeb0 0a48 	vmov.f32	s0, s16
 801cd48:	f7fe fbaa 	bl	801b4a0 <fabsf>
 801cd4c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801cd50:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801cd54:	4647      	mov	r7, r8
 801cd56:	d002      	beq.n	801cd5e <__ieee754_powf+0x112>
 801cd58:	f1b8 0f00 	cmp.w	r8, #0
 801cd5c:	d117      	bne.n	801cd8e <__ieee754_powf+0x142>
 801cd5e:	2c00      	cmp	r4, #0
 801cd60:	bfbc      	itt	lt
 801cd62:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801cd66:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801cd6a:	2e00      	cmp	r6, #0
 801cd6c:	da86      	bge.n	801cc7c <__ieee754_powf+0x30>
 801cd6e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801cd72:	ea58 0805 	orrs.w	r8, r8, r5
 801cd76:	d104      	bne.n	801cd82 <__ieee754_powf+0x136>
 801cd78:	ee70 7a40 	vsub.f32	s15, s0, s0
 801cd7c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801cd80:	e77c      	b.n	801cc7c <__ieee754_powf+0x30>
 801cd82:	2d01      	cmp	r5, #1
 801cd84:	f47f af7a 	bne.w	801cc7c <__ieee754_powf+0x30>
 801cd88:	eeb1 0a40 	vneg.f32	s0, s0
 801cd8c:	e776      	b.n	801cc7c <__ieee754_powf+0x30>
 801cd8e:	0ff0      	lsrs	r0, r6, #31
 801cd90:	3801      	subs	r0, #1
 801cd92:	ea55 0300 	orrs.w	r3, r5, r0
 801cd96:	d104      	bne.n	801cda2 <__ieee754_powf+0x156>
 801cd98:	ee38 8a48 	vsub.f32	s16, s16, s16
 801cd9c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801cda0:	e76c      	b.n	801cc7c <__ieee754_powf+0x30>
 801cda2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801cda6:	d973      	bls.n	801ce90 <__ieee754_powf+0x244>
 801cda8:	4bad      	ldr	r3, [pc, #692]	@ (801d060 <__ieee754_powf+0x414>)
 801cdaa:	4598      	cmp	r8, r3
 801cdac:	d808      	bhi.n	801cdc0 <__ieee754_powf+0x174>
 801cdae:	2c00      	cmp	r4, #0
 801cdb0:	da0b      	bge.n	801cdca <__ieee754_powf+0x17e>
 801cdb2:	2000      	movs	r0, #0
 801cdb4:	ecbd 8b02 	vpop	{d8}
 801cdb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdbc:	f000 bca0 	b.w	801d700 <__math_oflowf>
 801cdc0:	4ba8      	ldr	r3, [pc, #672]	@ (801d064 <__ieee754_powf+0x418>)
 801cdc2:	4598      	cmp	r8, r3
 801cdc4:	d908      	bls.n	801cdd8 <__ieee754_powf+0x18c>
 801cdc6:	2c00      	cmp	r4, #0
 801cdc8:	dcf3      	bgt.n	801cdb2 <__ieee754_powf+0x166>
 801cdca:	2000      	movs	r0, #0
 801cdcc:	ecbd 8b02 	vpop	{d8}
 801cdd0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdd4:	f000 bc8e 	b.w	801d6f4 <__math_uflowf>
 801cdd8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801cddc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801cde0:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 801d068 <__ieee754_powf+0x41c>
 801cde4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801cde8:	eee0 6a67 	vfms.f32	s13, s0, s15
 801cdec:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801cdf0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801cdf4:	ee20 7a00 	vmul.f32	s14, s0, s0
 801cdf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801cdfc:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 801d06c <__ieee754_powf+0x420>
 801ce00:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 801ce04:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 801d070 <__ieee754_powf+0x424>
 801ce08:	eee0 7a07 	vfma.f32	s15, s0, s14
 801ce0c:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801d074 <__ieee754_powf+0x428>
 801ce10:	eef0 6a67 	vmov.f32	s13, s15
 801ce14:	eee0 6a07 	vfma.f32	s13, s0, s14
 801ce18:	ee16 3a90 	vmov	r3, s13
 801ce1c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801ce20:	f023 030f 	bic.w	r3, r3, #15
 801ce24:	ee06 3a90 	vmov	s13, r3
 801ce28:	eee0 6a47 	vfms.f32	s13, s0, s14
 801ce2c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ce30:	3d01      	subs	r5, #1
 801ce32:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801ce36:	4305      	orrs	r5, r0
 801ce38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ce3c:	f024 040f 	bic.w	r4, r4, #15
 801ce40:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801ce44:	bf18      	it	ne
 801ce46:	eeb0 8a47 	vmovne.f32	s16, s14
 801ce4a:	ee07 4a10 	vmov	s14, r4
 801ce4e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801ce52:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801ce56:	ee07 3a90 	vmov	s15, r3
 801ce5a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801ce5e:	ee07 4a10 	vmov	s14, r4
 801ce62:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ce66:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801ce6a:	ee17 1a10 	vmov	r1, s14
 801ce6e:	2900      	cmp	r1, #0
 801ce70:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801ce74:	f340 80dd 	ble.w	801d032 <__ieee754_powf+0x3e6>
 801ce78:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801ce7c:	f240 80ca 	bls.w	801d014 <__ieee754_powf+0x3c8>
 801ce80:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ce84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce88:	bf4c      	ite	mi
 801ce8a:	2001      	movmi	r0, #1
 801ce8c:	2000      	movpl	r0, #0
 801ce8e:	e791      	b.n	801cdb4 <__ieee754_powf+0x168>
 801ce90:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801ce94:	bf01      	itttt	eq
 801ce96:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801d078 <__ieee754_powf+0x42c>
 801ce9a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 801ce9e:	f06f 0317 	mvneq.w	r3, #23
 801cea2:	ee17 7a90 	vmoveq	r7, s15
 801cea6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 801ceaa:	bf18      	it	ne
 801ceac:	2300      	movne	r3, #0
 801ceae:	3a7f      	subs	r2, #127	@ 0x7f
 801ceb0:	441a      	add	r2, r3
 801ceb2:	4b72      	ldr	r3, [pc, #456]	@ (801d07c <__ieee754_powf+0x430>)
 801ceb4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 801ceb8:	429f      	cmp	r7, r3
 801ceba:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 801cebe:	dd06      	ble.n	801cece <__ieee754_powf+0x282>
 801cec0:	4b6f      	ldr	r3, [pc, #444]	@ (801d080 <__ieee754_powf+0x434>)
 801cec2:	429f      	cmp	r7, r3
 801cec4:	f340 80a4 	ble.w	801d010 <__ieee754_powf+0x3c4>
 801cec8:	3201      	adds	r2, #1
 801ceca:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 801cece:	2600      	movs	r6, #0
 801ced0:	4b6c      	ldr	r3, [pc, #432]	@ (801d084 <__ieee754_powf+0x438>)
 801ced2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801ced6:	ee07 1a10 	vmov	s14, r1
 801ceda:	edd3 5a00 	vldr	s11, [r3]
 801cede:	4b6a      	ldr	r3, [pc, #424]	@ (801d088 <__ieee754_powf+0x43c>)
 801cee0:	ee75 7a87 	vadd.f32	s15, s11, s14
 801cee4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cee8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801ceec:	1049      	asrs	r1, r1, #1
 801ceee:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801cef2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801cef6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801cefa:	ee37 6a65 	vsub.f32	s12, s14, s11
 801cefe:	ee07 1a90 	vmov	s15, r1
 801cf02:	ee26 5a24 	vmul.f32	s10, s12, s9
 801cf06:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801cf0a:	ee15 7a10 	vmov	r7, s10
 801cf0e:	401f      	ands	r7, r3
 801cf10:	ee06 7a90 	vmov	s13, r7
 801cf14:	eea6 6ae7 	vfms.f32	s12, s13, s15
 801cf18:	ee37 7a65 	vsub.f32	s14, s14, s11
 801cf1c:	ee65 7a05 	vmul.f32	s15, s10, s10
 801cf20:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801cf24:	eddf 5a59 	vldr	s11, [pc, #356]	@ 801d08c <__ieee754_powf+0x440>
 801cf28:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 801d090 <__ieee754_powf+0x444>
 801cf2c:	eee7 5a87 	vfma.f32	s11, s15, s14
 801cf30:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801d094 <__ieee754_powf+0x448>
 801cf34:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801cf38:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801d068 <__ieee754_powf+0x41c>
 801cf3c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801cf40:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801d098 <__ieee754_powf+0x44c>
 801cf44:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801cf48:	eddf 5a54 	vldr	s11, [pc, #336]	@ 801d09c <__ieee754_powf+0x450>
 801cf4c:	ee26 6a24 	vmul.f32	s12, s12, s9
 801cf50:	eee7 5a27 	vfma.f32	s11, s14, s15
 801cf54:	ee35 7a26 	vadd.f32	s14, s10, s13
 801cf58:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801cf5c:	ee27 7a06 	vmul.f32	s14, s14, s12
 801cf60:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801cf64:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801cf68:	eef0 5a67 	vmov.f32	s11, s15
 801cf6c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 801cf70:	ee75 5a87 	vadd.f32	s11, s11, s14
 801cf74:	ee15 1a90 	vmov	r1, s11
 801cf78:	4019      	ands	r1, r3
 801cf7a:	ee05 1a90 	vmov	s11, r1
 801cf7e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801cf82:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801cf86:	ee77 7a67 	vsub.f32	s15, s14, s15
 801cf8a:	ee67 7a85 	vmul.f32	s15, s15, s10
 801cf8e:	eee6 7a25 	vfma.f32	s15, s12, s11
 801cf92:	eeb0 6a67 	vmov.f32	s12, s15
 801cf96:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801cf9a:	ee16 1a10 	vmov	r1, s12
 801cf9e:	4019      	ands	r1, r3
 801cfa0:	ee06 1a10 	vmov	s12, r1
 801cfa4:	eeb0 7a46 	vmov.f32	s14, s12
 801cfa8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 801cfac:	493c      	ldr	r1, [pc, #240]	@ (801d0a0 <__ieee754_powf+0x454>)
 801cfae:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801cfb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801cfb6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801d0a4 <__ieee754_powf+0x458>
 801cfba:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801d0a8 <__ieee754_powf+0x45c>
 801cfbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 801cfc2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 801d0ac <__ieee754_powf+0x460>
 801cfc6:	eee6 7a07 	vfma.f32	s15, s12, s14
 801cfca:	ed91 7a00 	vldr	s14, [r1]
 801cfce:	ee77 7a87 	vadd.f32	s15, s15, s14
 801cfd2:	ee07 2a10 	vmov	s14, r2
 801cfd6:	eef0 6a67 	vmov.f32	s13, s15
 801cfda:	4a35      	ldr	r2, [pc, #212]	@ (801d0b0 <__ieee754_powf+0x464>)
 801cfdc:	eee6 6a25 	vfma.f32	s13, s12, s11
 801cfe0:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 801cfe4:	ed92 5a00 	vldr	s10, [r2]
 801cfe8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801cfec:	ee76 6a85 	vadd.f32	s13, s13, s10
 801cff0:	ee76 6a87 	vadd.f32	s13, s13, s14
 801cff4:	ee16 2a90 	vmov	r2, s13
 801cff8:	4013      	ands	r3, r2
 801cffa:	ee06 3a90 	vmov	s13, r3
 801cffe:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801d002:	ee37 7a45 	vsub.f32	s14, s14, s10
 801d006:	eea6 7a65 	vfms.f32	s14, s12, s11
 801d00a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d00e:	e70f      	b.n	801ce30 <__ieee754_powf+0x1e4>
 801d010:	2601      	movs	r6, #1
 801d012:	e75d      	b.n	801ced0 <__ieee754_powf+0x284>
 801d014:	d152      	bne.n	801d0bc <__ieee754_powf+0x470>
 801d016:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801d0b4 <__ieee754_powf+0x468>
 801d01a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d01e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801d022:	eef4 6ac7 	vcmpe.f32	s13, s14
 801d026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d02a:	f73f af29 	bgt.w	801ce80 <__ieee754_powf+0x234>
 801d02e:	2386      	movs	r3, #134	@ 0x86
 801d030:	e048      	b.n	801d0c4 <__ieee754_powf+0x478>
 801d032:	4a21      	ldr	r2, [pc, #132]	@ (801d0b8 <__ieee754_powf+0x46c>)
 801d034:	4293      	cmp	r3, r2
 801d036:	d907      	bls.n	801d048 <__ieee754_powf+0x3fc>
 801d038:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801d03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d040:	bf4c      	ite	mi
 801d042:	2001      	movmi	r0, #1
 801d044:	2000      	movpl	r0, #0
 801d046:	e6c1      	b.n	801cdcc <__ieee754_powf+0x180>
 801d048:	d138      	bne.n	801d0bc <__ieee754_powf+0x470>
 801d04a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d04e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801d052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d056:	dbea      	blt.n	801d02e <__ieee754_powf+0x3e2>
 801d058:	e7ee      	b.n	801d038 <__ieee754_powf+0x3ec>
 801d05a:	bf00      	nop
 801d05c:	00000000 	.word	0x00000000
 801d060:	3f7ffff3 	.word	0x3f7ffff3
 801d064:	3f800007 	.word	0x3f800007
 801d068:	3eaaaaab 	.word	0x3eaaaaab
 801d06c:	3fb8aa3b 	.word	0x3fb8aa3b
 801d070:	36eca570 	.word	0x36eca570
 801d074:	3fb8aa00 	.word	0x3fb8aa00
 801d078:	4b800000 	.word	0x4b800000
 801d07c:	001cc471 	.word	0x001cc471
 801d080:	005db3d6 	.word	0x005db3d6
 801d084:	0801f438 	.word	0x0801f438
 801d088:	fffff000 	.word	0xfffff000
 801d08c:	3e6c3255 	.word	0x3e6c3255
 801d090:	3e53f142 	.word	0x3e53f142
 801d094:	3e8ba305 	.word	0x3e8ba305
 801d098:	3edb6db7 	.word	0x3edb6db7
 801d09c:	3f19999a 	.word	0x3f19999a
 801d0a0:	0801f428 	.word	0x0801f428
 801d0a4:	3f76384f 	.word	0x3f76384f
 801d0a8:	3f763800 	.word	0x3f763800
 801d0ac:	369dc3a0 	.word	0x369dc3a0
 801d0b0:	0801f430 	.word	0x0801f430
 801d0b4:	3338aa3c 	.word	0x3338aa3c
 801d0b8:	43160000 	.word	0x43160000
 801d0bc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 801d0c0:	d971      	bls.n	801d1a6 <__ieee754_powf+0x55a>
 801d0c2:	15db      	asrs	r3, r3, #23
 801d0c4:	3b7e      	subs	r3, #126	@ 0x7e
 801d0c6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801d0ca:	4118      	asrs	r0, r3
 801d0cc:	4408      	add	r0, r1
 801d0ce:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801d0d2:	4a3c      	ldr	r2, [pc, #240]	@ (801d1c4 <__ieee754_powf+0x578>)
 801d0d4:	3b7f      	subs	r3, #127	@ 0x7f
 801d0d6:	411a      	asrs	r2, r3
 801d0d8:	4002      	ands	r2, r0
 801d0da:	ee07 2a10 	vmov	s14, r2
 801d0de:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801d0e2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801d0e6:	f1c3 0317 	rsb	r3, r3, #23
 801d0ea:	4118      	asrs	r0, r3
 801d0ec:	2900      	cmp	r1, #0
 801d0ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d0f2:	bfb8      	it	lt
 801d0f4:	4240      	neglt	r0, r0
 801d0f6:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801d0fa:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801d1c8 <__ieee754_powf+0x57c>
 801d0fe:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801d1cc <__ieee754_powf+0x580>
 801d102:	ee17 3a10 	vmov	r3, s14
 801d106:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801d10a:	f023 030f 	bic.w	r3, r3, #15
 801d10e:	ee07 3a10 	vmov	s14, r3
 801d112:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d116:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d11a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801d11e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801d1d0 <__ieee754_powf+0x584>
 801d122:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d126:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801d12a:	eef0 6a67 	vmov.f32	s13, s15
 801d12e:	eee7 6a06 	vfma.f32	s13, s14, s12
 801d132:	eef0 5a66 	vmov.f32	s11, s13
 801d136:	eee7 5a46 	vfms.f32	s11, s14, s12
 801d13a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801d13e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801d142:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801d1d4 <__ieee754_powf+0x588>
 801d146:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801d1d8 <__ieee754_powf+0x58c>
 801d14a:	eea7 6a25 	vfma.f32	s12, s14, s11
 801d14e:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801d1dc <__ieee754_powf+0x590>
 801d152:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d156:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801d1e0 <__ieee754_powf+0x594>
 801d15a:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d15e:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801d1e4 <__ieee754_powf+0x598>
 801d162:	eee6 5a07 	vfma.f32	s11, s12, s14
 801d166:	eeb0 6a66 	vmov.f32	s12, s13
 801d16a:	eea5 6ac7 	vfms.f32	s12, s11, s14
 801d16e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801d172:	ee66 5a86 	vmul.f32	s11, s13, s12
 801d176:	ee36 6a47 	vsub.f32	s12, s12, s14
 801d17a:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801d17e:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801d182:	ee77 7a67 	vsub.f32	s15, s14, s15
 801d186:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d18a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d18e:	ee10 3a10 	vmov	r3, s0
 801d192:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801d196:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d19a:	da06      	bge.n	801d1aa <__ieee754_powf+0x55e>
 801d19c:	f000 fa2a 	bl	801d5f4 <scalbnf>
 801d1a0:	ee20 0a08 	vmul.f32	s0, s0, s16
 801d1a4:	e56a      	b.n	801cc7c <__ieee754_powf+0x30>
 801d1a6:	2000      	movs	r0, #0
 801d1a8:	e7a5      	b.n	801d0f6 <__ieee754_powf+0x4aa>
 801d1aa:	ee00 3a10 	vmov	s0, r3
 801d1ae:	e7f7      	b.n	801d1a0 <__ieee754_powf+0x554>
 801d1b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d1b4:	e562      	b.n	801cc7c <__ieee754_powf+0x30>
 801d1b6:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801d1e8 <__ieee754_powf+0x59c>
 801d1ba:	e55f      	b.n	801cc7c <__ieee754_powf+0x30>
 801d1bc:	eeb0 0a48 	vmov.f32	s0, s16
 801d1c0:	e55c      	b.n	801cc7c <__ieee754_powf+0x30>
 801d1c2:	bf00      	nop
 801d1c4:	ff800000 	.word	0xff800000
 801d1c8:	3f317218 	.word	0x3f317218
 801d1cc:	3f317200 	.word	0x3f317200
 801d1d0:	35bfbe8c 	.word	0x35bfbe8c
 801d1d4:	b5ddea0e 	.word	0xb5ddea0e
 801d1d8:	3331bb4c 	.word	0x3331bb4c
 801d1dc:	388ab355 	.word	0x388ab355
 801d1e0:	bb360b61 	.word	0xbb360b61
 801d1e4:	3e2aaaab 	.word	0x3e2aaaab
 801d1e8:	00000000 	.word	0x00000000

0801d1ec <__ieee754_rem_pio2f>:
 801d1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d1ee:	ee10 6a10 	vmov	r6, s0
 801d1f2:	4b88      	ldr	r3, [pc, #544]	@ (801d414 <__ieee754_rem_pio2f+0x228>)
 801d1f4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801d1f8:	429d      	cmp	r5, r3
 801d1fa:	b087      	sub	sp, #28
 801d1fc:	4604      	mov	r4, r0
 801d1fe:	d805      	bhi.n	801d20c <__ieee754_rem_pio2f+0x20>
 801d200:	2300      	movs	r3, #0
 801d202:	ed80 0a00 	vstr	s0, [r0]
 801d206:	6043      	str	r3, [r0, #4]
 801d208:	2000      	movs	r0, #0
 801d20a:	e022      	b.n	801d252 <__ieee754_rem_pio2f+0x66>
 801d20c:	4b82      	ldr	r3, [pc, #520]	@ (801d418 <__ieee754_rem_pio2f+0x22c>)
 801d20e:	429d      	cmp	r5, r3
 801d210:	d83a      	bhi.n	801d288 <__ieee754_rem_pio2f+0x9c>
 801d212:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801d216:	2e00      	cmp	r6, #0
 801d218:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801d41c <__ieee754_rem_pio2f+0x230>
 801d21c:	4a80      	ldr	r2, [pc, #512]	@ (801d420 <__ieee754_rem_pio2f+0x234>)
 801d21e:	f023 030f 	bic.w	r3, r3, #15
 801d222:	dd18      	ble.n	801d256 <__ieee754_rem_pio2f+0x6a>
 801d224:	4293      	cmp	r3, r2
 801d226:	ee70 7a47 	vsub.f32	s15, s0, s14
 801d22a:	bf09      	itett	eq
 801d22c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801d424 <__ieee754_rem_pio2f+0x238>
 801d230:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801d428 <__ieee754_rem_pio2f+0x23c>
 801d234:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801d42c <__ieee754_rem_pio2f+0x240>
 801d238:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801d23c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801d240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d244:	ed80 7a00 	vstr	s14, [r0]
 801d248:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d24c:	edc0 7a01 	vstr	s15, [r0, #4]
 801d250:	2001      	movs	r0, #1
 801d252:	b007      	add	sp, #28
 801d254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d256:	4293      	cmp	r3, r2
 801d258:	ee70 7a07 	vadd.f32	s15, s0, s14
 801d25c:	bf09      	itett	eq
 801d25e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801d424 <__ieee754_rem_pio2f+0x238>
 801d262:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801d428 <__ieee754_rem_pio2f+0x23c>
 801d266:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801d42c <__ieee754_rem_pio2f+0x240>
 801d26a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801d26e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801d272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d276:	ed80 7a00 	vstr	s14, [r0]
 801d27a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d27e:	edc0 7a01 	vstr	s15, [r0, #4]
 801d282:	f04f 30ff 	mov.w	r0, #4294967295
 801d286:	e7e4      	b.n	801d252 <__ieee754_rem_pio2f+0x66>
 801d288:	4b69      	ldr	r3, [pc, #420]	@ (801d430 <__ieee754_rem_pio2f+0x244>)
 801d28a:	429d      	cmp	r5, r3
 801d28c:	d873      	bhi.n	801d376 <__ieee754_rem_pio2f+0x18a>
 801d28e:	f7fe f907 	bl	801b4a0 <fabsf>
 801d292:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801d434 <__ieee754_rem_pio2f+0x248>
 801d296:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d29a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801d29e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d2a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801d2a6:	ee17 0a90 	vmov	r0, s15
 801d2aa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801d41c <__ieee754_rem_pio2f+0x230>
 801d2ae:	eea7 0a67 	vfms.f32	s0, s14, s15
 801d2b2:	281f      	cmp	r0, #31
 801d2b4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801d428 <__ieee754_rem_pio2f+0x23c>
 801d2b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d2bc:	eeb1 6a47 	vneg.f32	s12, s14
 801d2c0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d2c4:	ee16 1a90 	vmov	r1, s13
 801d2c8:	dc09      	bgt.n	801d2de <__ieee754_rem_pio2f+0xf2>
 801d2ca:	4a5b      	ldr	r2, [pc, #364]	@ (801d438 <__ieee754_rem_pio2f+0x24c>)
 801d2cc:	1e47      	subs	r7, r0, #1
 801d2ce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801d2d2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801d2d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801d2da:	4293      	cmp	r3, r2
 801d2dc:	d107      	bne.n	801d2ee <__ieee754_rem_pio2f+0x102>
 801d2de:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801d2e2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801d2e6:	2a08      	cmp	r2, #8
 801d2e8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801d2ec:	dc14      	bgt.n	801d318 <__ieee754_rem_pio2f+0x12c>
 801d2ee:	6021      	str	r1, [r4, #0]
 801d2f0:	ed94 7a00 	vldr	s14, [r4]
 801d2f4:	ee30 0a47 	vsub.f32	s0, s0, s14
 801d2f8:	2e00      	cmp	r6, #0
 801d2fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d2fe:	ed84 0a01 	vstr	s0, [r4, #4]
 801d302:	daa6      	bge.n	801d252 <__ieee754_rem_pio2f+0x66>
 801d304:	eeb1 7a47 	vneg.f32	s14, s14
 801d308:	eeb1 0a40 	vneg.f32	s0, s0
 801d30c:	ed84 7a00 	vstr	s14, [r4]
 801d310:	ed84 0a01 	vstr	s0, [r4, #4]
 801d314:	4240      	negs	r0, r0
 801d316:	e79c      	b.n	801d252 <__ieee754_rem_pio2f+0x66>
 801d318:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801d424 <__ieee754_rem_pio2f+0x238>
 801d31c:	eef0 6a40 	vmov.f32	s13, s0
 801d320:	eee6 6a25 	vfma.f32	s13, s12, s11
 801d324:	ee70 7a66 	vsub.f32	s15, s0, s13
 801d328:	eee6 7a25 	vfma.f32	s15, s12, s11
 801d32c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d42c <__ieee754_rem_pio2f+0x240>
 801d330:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801d334:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801d338:	ee15 2a90 	vmov	r2, s11
 801d33c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801d340:	1a5b      	subs	r3, r3, r1
 801d342:	2b19      	cmp	r3, #25
 801d344:	dc04      	bgt.n	801d350 <__ieee754_rem_pio2f+0x164>
 801d346:	edc4 5a00 	vstr	s11, [r4]
 801d34a:	eeb0 0a66 	vmov.f32	s0, s13
 801d34e:	e7cf      	b.n	801d2f0 <__ieee754_rem_pio2f+0x104>
 801d350:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801d43c <__ieee754_rem_pio2f+0x250>
 801d354:	eeb0 0a66 	vmov.f32	s0, s13
 801d358:	eea6 0a25 	vfma.f32	s0, s12, s11
 801d35c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801d360:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801d440 <__ieee754_rem_pio2f+0x254>
 801d364:	eee6 7a25 	vfma.f32	s15, s12, s11
 801d368:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801d36c:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d370:	ed84 7a00 	vstr	s14, [r4]
 801d374:	e7bc      	b.n	801d2f0 <__ieee754_rem_pio2f+0x104>
 801d376:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801d37a:	d306      	bcc.n	801d38a <__ieee754_rem_pio2f+0x19e>
 801d37c:	ee70 7a40 	vsub.f32	s15, s0, s0
 801d380:	edc0 7a01 	vstr	s15, [r0, #4]
 801d384:	edc0 7a00 	vstr	s15, [r0]
 801d388:	e73e      	b.n	801d208 <__ieee754_rem_pio2f+0x1c>
 801d38a:	15ea      	asrs	r2, r5, #23
 801d38c:	3a86      	subs	r2, #134	@ 0x86
 801d38e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801d392:	ee07 3a90 	vmov	s15, r3
 801d396:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801d39a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801d444 <__ieee754_rem_pio2f+0x258>
 801d39e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d3a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d3a6:	ed8d 7a03 	vstr	s14, [sp, #12]
 801d3aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d3ae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801d3b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d3b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d3ba:	ed8d 7a04 	vstr	s14, [sp, #16]
 801d3be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d3c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 801d3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3ca:	edcd 7a05 	vstr	s15, [sp, #20]
 801d3ce:	d11e      	bne.n	801d40e <__ieee754_rem_pio2f+0x222>
 801d3d0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801d3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3d8:	bf0c      	ite	eq
 801d3da:	2301      	moveq	r3, #1
 801d3dc:	2302      	movne	r3, #2
 801d3de:	491a      	ldr	r1, [pc, #104]	@ (801d448 <__ieee754_rem_pio2f+0x25c>)
 801d3e0:	9101      	str	r1, [sp, #4]
 801d3e2:	2102      	movs	r1, #2
 801d3e4:	9100      	str	r1, [sp, #0]
 801d3e6:	a803      	add	r0, sp, #12
 801d3e8:	4621      	mov	r1, r4
 801d3ea:	f000 f98f 	bl	801d70c <__kernel_rem_pio2f>
 801d3ee:	2e00      	cmp	r6, #0
 801d3f0:	f6bf af2f 	bge.w	801d252 <__ieee754_rem_pio2f+0x66>
 801d3f4:	edd4 7a00 	vldr	s15, [r4]
 801d3f8:	eef1 7a67 	vneg.f32	s15, s15
 801d3fc:	edc4 7a00 	vstr	s15, [r4]
 801d400:	edd4 7a01 	vldr	s15, [r4, #4]
 801d404:	eef1 7a67 	vneg.f32	s15, s15
 801d408:	edc4 7a01 	vstr	s15, [r4, #4]
 801d40c:	e782      	b.n	801d314 <__ieee754_rem_pio2f+0x128>
 801d40e:	2303      	movs	r3, #3
 801d410:	e7e5      	b.n	801d3de <__ieee754_rem_pio2f+0x1f2>
 801d412:	bf00      	nop
 801d414:	3f490fd8 	.word	0x3f490fd8
 801d418:	4016cbe3 	.word	0x4016cbe3
 801d41c:	3fc90f80 	.word	0x3fc90f80
 801d420:	3fc90fd0 	.word	0x3fc90fd0
 801d424:	37354400 	.word	0x37354400
 801d428:	37354443 	.word	0x37354443
 801d42c:	2e85a308 	.word	0x2e85a308
 801d430:	43490f80 	.word	0x43490f80
 801d434:	3f22f984 	.word	0x3f22f984
 801d438:	0801f440 	.word	0x0801f440
 801d43c:	2e85a300 	.word	0x2e85a300
 801d440:	248d3132 	.word	0x248d3132
 801d444:	43800000 	.word	0x43800000
 801d448:	0801f4c0 	.word	0x0801f4c0

0801d44c <atanf>:
 801d44c:	b538      	push	{r3, r4, r5, lr}
 801d44e:	ee10 5a10 	vmov	r5, s0
 801d452:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801d456:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801d45a:	eef0 7a40 	vmov.f32	s15, s0
 801d45e:	d310      	bcc.n	801d482 <atanf+0x36>
 801d460:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801d464:	d904      	bls.n	801d470 <atanf+0x24>
 801d466:	ee70 7a00 	vadd.f32	s15, s0, s0
 801d46a:	eeb0 0a67 	vmov.f32	s0, s15
 801d46e:	bd38      	pop	{r3, r4, r5, pc}
 801d470:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801d5a8 <atanf+0x15c>
 801d474:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801d5ac <atanf+0x160>
 801d478:	2d00      	cmp	r5, #0
 801d47a:	bfc8      	it	gt
 801d47c:	eef0 7a47 	vmovgt.f32	s15, s14
 801d480:	e7f3      	b.n	801d46a <atanf+0x1e>
 801d482:	4b4b      	ldr	r3, [pc, #300]	@ (801d5b0 <atanf+0x164>)
 801d484:	429c      	cmp	r4, r3
 801d486:	d810      	bhi.n	801d4aa <atanf+0x5e>
 801d488:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801d48c:	d20a      	bcs.n	801d4a4 <atanf+0x58>
 801d48e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801d5b4 <atanf+0x168>
 801d492:	ee30 7a07 	vadd.f32	s14, s0, s14
 801d496:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d49a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801d49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d4a2:	dce2      	bgt.n	801d46a <atanf+0x1e>
 801d4a4:	f04f 33ff 	mov.w	r3, #4294967295
 801d4a8:	e013      	b.n	801d4d2 <atanf+0x86>
 801d4aa:	f7fd fff9 	bl	801b4a0 <fabsf>
 801d4ae:	4b42      	ldr	r3, [pc, #264]	@ (801d5b8 <atanf+0x16c>)
 801d4b0:	429c      	cmp	r4, r3
 801d4b2:	d84f      	bhi.n	801d554 <atanf+0x108>
 801d4b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801d4b8:	429c      	cmp	r4, r3
 801d4ba:	d841      	bhi.n	801d540 <atanf+0xf4>
 801d4bc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801d4c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801d4c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d4c8:	2300      	movs	r3, #0
 801d4ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d4ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4d2:	1c5a      	adds	r2, r3, #1
 801d4d4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801d4d8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801d5bc <atanf+0x170>
 801d4dc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801d5c0 <atanf+0x174>
 801d4e0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801d5c4 <atanf+0x178>
 801d4e4:	ee66 6a06 	vmul.f32	s13, s12, s12
 801d4e8:	eee6 5a87 	vfma.f32	s11, s13, s14
 801d4ec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801d5c8 <atanf+0x17c>
 801d4f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d4f4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801d5cc <atanf+0x180>
 801d4f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d4fc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801d5d0 <atanf+0x184>
 801d500:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801d504:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801d5d4 <atanf+0x188>
 801d508:	eee7 5a26 	vfma.f32	s11, s14, s13
 801d50c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801d5d8 <atanf+0x18c>
 801d510:	eea6 5a87 	vfma.f32	s10, s13, s14
 801d514:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801d5dc <atanf+0x190>
 801d518:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d51c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801d5e0 <atanf+0x194>
 801d520:	eea7 5a26 	vfma.f32	s10, s14, s13
 801d524:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801d5e4 <atanf+0x198>
 801d528:	eea5 7a26 	vfma.f32	s14, s10, s13
 801d52c:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d530:	eea5 7a86 	vfma.f32	s14, s11, s12
 801d534:	ee27 7a87 	vmul.f32	s14, s15, s14
 801d538:	d121      	bne.n	801d57e <atanf+0x132>
 801d53a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d53e:	e794      	b.n	801d46a <atanf+0x1e>
 801d540:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801d544:	ee30 7a67 	vsub.f32	s14, s0, s15
 801d548:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d54c:	2301      	movs	r3, #1
 801d54e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d552:	e7be      	b.n	801d4d2 <atanf+0x86>
 801d554:	4b24      	ldr	r3, [pc, #144]	@ (801d5e8 <atanf+0x19c>)
 801d556:	429c      	cmp	r4, r3
 801d558:	d80b      	bhi.n	801d572 <atanf+0x126>
 801d55a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801d55e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d562:	eea0 7a27 	vfma.f32	s14, s0, s15
 801d566:	2302      	movs	r3, #2
 801d568:	ee70 6a67 	vsub.f32	s13, s0, s15
 801d56c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d570:	e7af      	b.n	801d4d2 <atanf+0x86>
 801d572:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801d576:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d57a:	2303      	movs	r3, #3
 801d57c:	e7a9      	b.n	801d4d2 <atanf+0x86>
 801d57e:	4a1b      	ldr	r2, [pc, #108]	@ (801d5ec <atanf+0x1a0>)
 801d580:	491b      	ldr	r1, [pc, #108]	@ (801d5f0 <atanf+0x1a4>)
 801d582:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d586:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d58a:	edd3 6a00 	vldr	s13, [r3]
 801d58e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801d592:	2d00      	cmp	r5, #0
 801d594:	ee37 7a67 	vsub.f32	s14, s14, s15
 801d598:	edd2 7a00 	vldr	s15, [r2]
 801d59c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801d5a0:	bfb8      	it	lt
 801d5a2:	eef1 7a67 	vneglt.f32	s15, s15
 801d5a6:	e760      	b.n	801d46a <atanf+0x1e>
 801d5a8:	bfc90fdb 	.word	0xbfc90fdb
 801d5ac:	3fc90fdb 	.word	0x3fc90fdb
 801d5b0:	3edfffff 	.word	0x3edfffff
 801d5b4:	7149f2ca 	.word	0x7149f2ca
 801d5b8:	3f97ffff 	.word	0x3f97ffff
 801d5bc:	3c8569d7 	.word	0x3c8569d7
 801d5c0:	3d4bda59 	.word	0x3d4bda59
 801d5c4:	bd6ef16b 	.word	0xbd6ef16b
 801d5c8:	3d886b35 	.word	0x3d886b35
 801d5cc:	3dba2e6e 	.word	0x3dba2e6e
 801d5d0:	3e124925 	.word	0x3e124925
 801d5d4:	3eaaaaab 	.word	0x3eaaaaab
 801d5d8:	bd15a221 	.word	0xbd15a221
 801d5dc:	bd9d8795 	.word	0xbd9d8795
 801d5e0:	bde38e38 	.word	0xbde38e38
 801d5e4:	be4ccccd 	.word	0xbe4ccccd
 801d5e8:	401bffff 	.word	0x401bffff
 801d5ec:	0801f7e8 	.word	0x0801f7e8
 801d5f0:	0801f7d8 	.word	0x0801f7d8

0801d5f4 <scalbnf>:
 801d5f4:	ee10 3a10 	vmov	r3, s0
 801d5f8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801d5fc:	d02b      	beq.n	801d656 <scalbnf+0x62>
 801d5fe:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801d602:	d302      	bcc.n	801d60a <scalbnf+0x16>
 801d604:	ee30 0a00 	vadd.f32	s0, s0, s0
 801d608:	4770      	bx	lr
 801d60a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801d60e:	d123      	bne.n	801d658 <scalbnf+0x64>
 801d610:	4b24      	ldr	r3, [pc, #144]	@ (801d6a4 <scalbnf+0xb0>)
 801d612:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801d6a8 <scalbnf+0xb4>
 801d616:	4298      	cmp	r0, r3
 801d618:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d61c:	db17      	blt.n	801d64e <scalbnf+0x5a>
 801d61e:	ee10 3a10 	vmov	r3, s0
 801d622:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801d626:	3a19      	subs	r2, #25
 801d628:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801d62c:	4288      	cmp	r0, r1
 801d62e:	dd15      	ble.n	801d65c <scalbnf+0x68>
 801d630:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801d6ac <scalbnf+0xb8>
 801d634:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801d6b0 <scalbnf+0xbc>
 801d638:	ee10 3a10 	vmov	r3, s0
 801d63c:	eeb0 7a67 	vmov.f32	s14, s15
 801d640:	2b00      	cmp	r3, #0
 801d642:	bfb8      	it	lt
 801d644:	eef0 7a66 	vmovlt.f32	s15, s13
 801d648:	ee27 0a87 	vmul.f32	s0, s15, s14
 801d64c:	4770      	bx	lr
 801d64e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801d6b4 <scalbnf+0xc0>
 801d652:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d656:	4770      	bx	lr
 801d658:	0dd2      	lsrs	r2, r2, #23
 801d65a:	e7e5      	b.n	801d628 <scalbnf+0x34>
 801d65c:	4410      	add	r0, r2
 801d65e:	28fe      	cmp	r0, #254	@ 0xfe
 801d660:	dce6      	bgt.n	801d630 <scalbnf+0x3c>
 801d662:	2800      	cmp	r0, #0
 801d664:	dd06      	ble.n	801d674 <scalbnf+0x80>
 801d666:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801d66a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801d66e:	ee00 3a10 	vmov	s0, r3
 801d672:	4770      	bx	lr
 801d674:	f110 0f16 	cmn.w	r0, #22
 801d678:	da09      	bge.n	801d68e <scalbnf+0x9a>
 801d67a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801d6b4 <scalbnf+0xc0>
 801d67e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801d6b8 <scalbnf+0xc4>
 801d682:	ee10 3a10 	vmov	r3, s0
 801d686:	eeb0 7a67 	vmov.f32	s14, s15
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	e7d9      	b.n	801d642 <scalbnf+0x4e>
 801d68e:	3019      	adds	r0, #25
 801d690:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801d694:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801d698:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801d6bc <scalbnf+0xc8>
 801d69c:	ee07 3a90 	vmov	s15, r3
 801d6a0:	e7d7      	b.n	801d652 <scalbnf+0x5e>
 801d6a2:	bf00      	nop
 801d6a4:	ffff3cb0 	.word	0xffff3cb0
 801d6a8:	4c000000 	.word	0x4c000000
 801d6ac:	7149f2ca 	.word	0x7149f2ca
 801d6b0:	f149f2ca 	.word	0xf149f2ca
 801d6b4:	0da24260 	.word	0x0da24260
 801d6b8:	8da24260 	.word	0x8da24260
 801d6bc:	33000000 	.word	0x33000000

0801d6c0 <with_errnof>:
 801d6c0:	b510      	push	{r4, lr}
 801d6c2:	ed2d 8b02 	vpush	{d8}
 801d6c6:	eeb0 8a40 	vmov.f32	s16, s0
 801d6ca:	4604      	mov	r4, r0
 801d6cc:	f7fd fcce 	bl	801b06c <__errno>
 801d6d0:	eeb0 0a48 	vmov.f32	s0, s16
 801d6d4:	ecbd 8b02 	vpop	{d8}
 801d6d8:	6004      	str	r4, [r0, #0]
 801d6da:	bd10      	pop	{r4, pc}

0801d6dc <xflowf>:
 801d6dc:	b130      	cbz	r0, 801d6ec <xflowf+0x10>
 801d6de:	eef1 7a40 	vneg.f32	s15, s0
 801d6e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d6e6:	2022      	movs	r0, #34	@ 0x22
 801d6e8:	f7ff bfea 	b.w	801d6c0 <with_errnof>
 801d6ec:	eef0 7a40 	vmov.f32	s15, s0
 801d6f0:	e7f7      	b.n	801d6e2 <xflowf+0x6>
	...

0801d6f4 <__math_uflowf>:
 801d6f4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801d6fc <__math_uflowf+0x8>
 801d6f8:	f7ff bff0 	b.w	801d6dc <xflowf>
 801d6fc:	10000000 	.word	0x10000000

0801d700 <__math_oflowf>:
 801d700:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801d708 <__math_oflowf+0x8>
 801d704:	f7ff bfea 	b.w	801d6dc <xflowf>
 801d708:	70000000 	.word	0x70000000

0801d70c <__kernel_rem_pio2f>:
 801d70c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d710:	ed2d 8b04 	vpush	{d8-d9}
 801d714:	b0d9      	sub	sp, #356	@ 0x164
 801d716:	4690      	mov	r8, r2
 801d718:	9001      	str	r0, [sp, #4]
 801d71a:	4ab9      	ldr	r2, [pc, #740]	@ (801da00 <__kernel_rem_pio2f+0x2f4>)
 801d71c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801d71e:	f118 0f04 	cmn.w	r8, #4
 801d722:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801d726:	460f      	mov	r7, r1
 801d728:	f103 3bff 	add.w	fp, r3, #4294967295
 801d72c:	db27      	blt.n	801d77e <__kernel_rem_pio2f+0x72>
 801d72e:	f1b8 0203 	subs.w	r2, r8, #3
 801d732:	bf48      	it	mi
 801d734:	f108 0204 	addmi.w	r2, r8, #4
 801d738:	10d2      	asrs	r2, r2, #3
 801d73a:	1c55      	adds	r5, r2, #1
 801d73c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801d73e:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801d742:	00e8      	lsls	r0, r5, #3
 801d744:	eba2 060b 	sub.w	r6, r2, fp
 801d748:	9002      	str	r0, [sp, #8]
 801d74a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801d74e:	eb0a 0c0b 	add.w	ip, sl, fp
 801d752:	ac1c      	add	r4, sp, #112	@ 0x70
 801d754:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801d758:	2000      	movs	r0, #0
 801d75a:	4560      	cmp	r0, ip
 801d75c:	dd11      	ble.n	801d782 <__kernel_rem_pio2f+0x76>
 801d75e:	a91c      	add	r1, sp, #112	@ 0x70
 801d760:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801d764:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801d768:	f04f 0c00 	mov.w	ip, #0
 801d76c:	45d4      	cmp	ip, sl
 801d76e:	dc27      	bgt.n	801d7c0 <__kernel_rem_pio2f+0xb4>
 801d770:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d774:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801d778:	4606      	mov	r6, r0
 801d77a:	2400      	movs	r4, #0
 801d77c:	e016      	b.n	801d7ac <__kernel_rem_pio2f+0xa0>
 801d77e:	2200      	movs	r2, #0
 801d780:	e7db      	b.n	801d73a <__kernel_rem_pio2f+0x2e>
 801d782:	42c6      	cmn	r6, r0
 801d784:	bf5d      	ittte	pl
 801d786:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801d78a:	ee07 1a90 	vmovpl	s15, r1
 801d78e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801d792:	eef0 7a47 	vmovmi.f32	s15, s14
 801d796:	ece4 7a01 	vstmia	r4!, {s15}
 801d79a:	3001      	adds	r0, #1
 801d79c:	e7dd      	b.n	801d75a <__kernel_rem_pio2f+0x4e>
 801d79e:	ecfe 6a01 	vldmia	lr!, {s13}
 801d7a2:	ed96 7a00 	vldr	s14, [r6]
 801d7a6:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d7aa:	3401      	adds	r4, #1
 801d7ac:	455c      	cmp	r4, fp
 801d7ae:	f1a6 0604 	sub.w	r6, r6, #4
 801d7b2:	ddf4      	ble.n	801d79e <__kernel_rem_pio2f+0x92>
 801d7b4:	ece9 7a01 	vstmia	r9!, {s15}
 801d7b8:	f10c 0c01 	add.w	ip, ip, #1
 801d7bc:	3004      	adds	r0, #4
 801d7be:	e7d5      	b.n	801d76c <__kernel_rem_pio2f+0x60>
 801d7c0:	a908      	add	r1, sp, #32
 801d7c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d7c6:	9104      	str	r1, [sp, #16]
 801d7c8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801d7ca:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801da0c <__kernel_rem_pio2f+0x300>
 801d7ce:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801da08 <__kernel_rem_pio2f+0x2fc>
 801d7d2:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801d7d6:	9203      	str	r2, [sp, #12]
 801d7d8:	4654      	mov	r4, sl
 801d7da:	00a2      	lsls	r2, r4, #2
 801d7dc:	9205      	str	r2, [sp, #20]
 801d7de:	aa58      	add	r2, sp, #352	@ 0x160
 801d7e0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801d7e4:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801d7e8:	a944      	add	r1, sp, #272	@ 0x110
 801d7ea:	aa08      	add	r2, sp, #32
 801d7ec:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801d7f0:	4694      	mov	ip, r2
 801d7f2:	4626      	mov	r6, r4
 801d7f4:	2e00      	cmp	r6, #0
 801d7f6:	f1a0 0004 	sub.w	r0, r0, #4
 801d7fa:	dc4c      	bgt.n	801d896 <__kernel_rem_pio2f+0x18a>
 801d7fc:	4628      	mov	r0, r5
 801d7fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801d802:	f7ff fef7 	bl	801d5f4 <scalbnf>
 801d806:	eeb0 8a40 	vmov.f32	s16, s0
 801d80a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801d80e:	ee28 0a00 	vmul.f32	s0, s16, s0
 801d812:	f000 f9ed 	bl	801dbf0 <floorf>
 801d816:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801d81a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801d81e:	2d00      	cmp	r5, #0
 801d820:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d824:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801d828:	ee17 9a90 	vmov	r9, s15
 801d82c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d830:	ee38 8a67 	vsub.f32	s16, s16, s15
 801d834:	dd41      	ble.n	801d8ba <__kernel_rem_pio2f+0x1ae>
 801d836:	f104 3cff 	add.w	ip, r4, #4294967295
 801d83a:	a908      	add	r1, sp, #32
 801d83c:	f1c5 0e08 	rsb	lr, r5, #8
 801d840:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801d844:	fa46 f00e 	asr.w	r0, r6, lr
 801d848:	4481      	add	r9, r0
 801d84a:	fa00 f00e 	lsl.w	r0, r0, lr
 801d84e:	1a36      	subs	r6, r6, r0
 801d850:	f1c5 0007 	rsb	r0, r5, #7
 801d854:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801d858:	4106      	asrs	r6, r0
 801d85a:	2e00      	cmp	r6, #0
 801d85c:	dd3c      	ble.n	801d8d8 <__kernel_rem_pio2f+0x1cc>
 801d85e:	f04f 0e00 	mov.w	lr, #0
 801d862:	f109 0901 	add.w	r9, r9, #1
 801d866:	4670      	mov	r0, lr
 801d868:	4574      	cmp	r4, lr
 801d86a:	dc68      	bgt.n	801d93e <__kernel_rem_pio2f+0x232>
 801d86c:	2d00      	cmp	r5, #0
 801d86e:	dd03      	ble.n	801d878 <__kernel_rem_pio2f+0x16c>
 801d870:	2d01      	cmp	r5, #1
 801d872:	d074      	beq.n	801d95e <__kernel_rem_pio2f+0x252>
 801d874:	2d02      	cmp	r5, #2
 801d876:	d07d      	beq.n	801d974 <__kernel_rem_pio2f+0x268>
 801d878:	2e02      	cmp	r6, #2
 801d87a:	d12d      	bne.n	801d8d8 <__kernel_rem_pio2f+0x1cc>
 801d87c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d880:	ee30 8a48 	vsub.f32	s16, s0, s16
 801d884:	b340      	cbz	r0, 801d8d8 <__kernel_rem_pio2f+0x1cc>
 801d886:	4628      	mov	r0, r5
 801d888:	9306      	str	r3, [sp, #24]
 801d88a:	f7ff feb3 	bl	801d5f4 <scalbnf>
 801d88e:	9b06      	ldr	r3, [sp, #24]
 801d890:	ee38 8a40 	vsub.f32	s16, s16, s0
 801d894:	e020      	b.n	801d8d8 <__kernel_rem_pio2f+0x1cc>
 801d896:	ee60 7a28 	vmul.f32	s15, s0, s17
 801d89a:	3e01      	subs	r6, #1
 801d89c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801d8a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d8a4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801d8a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801d8ac:	ecac 0a01 	vstmia	ip!, {s0}
 801d8b0:	ed90 0a00 	vldr	s0, [r0]
 801d8b4:	ee37 0a80 	vadd.f32	s0, s15, s0
 801d8b8:	e79c      	b.n	801d7f4 <__kernel_rem_pio2f+0xe8>
 801d8ba:	d105      	bne.n	801d8c8 <__kernel_rem_pio2f+0x1bc>
 801d8bc:	1e60      	subs	r0, r4, #1
 801d8be:	a908      	add	r1, sp, #32
 801d8c0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801d8c4:	11f6      	asrs	r6, r6, #7
 801d8c6:	e7c8      	b.n	801d85a <__kernel_rem_pio2f+0x14e>
 801d8c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801d8cc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8d4:	da31      	bge.n	801d93a <__kernel_rem_pio2f+0x22e>
 801d8d6:	2600      	movs	r6, #0
 801d8d8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801d8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8e0:	f040 8098 	bne.w	801da14 <__kernel_rem_pio2f+0x308>
 801d8e4:	1e60      	subs	r0, r4, #1
 801d8e6:	2200      	movs	r2, #0
 801d8e8:	4550      	cmp	r0, sl
 801d8ea:	da4b      	bge.n	801d984 <__kernel_rem_pio2f+0x278>
 801d8ec:	2a00      	cmp	r2, #0
 801d8ee:	d065      	beq.n	801d9bc <__kernel_rem_pio2f+0x2b0>
 801d8f0:	3c01      	subs	r4, #1
 801d8f2:	ab08      	add	r3, sp, #32
 801d8f4:	3d08      	subs	r5, #8
 801d8f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d0f8      	beq.n	801d8f0 <__kernel_rem_pio2f+0x1e4>
 801d8fe:	4628      	mov	r0, r5
 801d900:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801d904:	f7ff fe76 	bl	801d5f4 <scalbnf>
 801d908:	1c63      	adds	r3, r4, #1
 801d90a:	aa44      	add	r2, sp, #272	@ 0x110
 801d90c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801da0c <__kernel_rem_pio2f+0x300>
 801d910:	0099      	lsls	r1, r3, #2
 801d912:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801d916:	4623      	mov	r3, r4
 801d918:	2b00      	cmp	r3, #0
 801d91a:	f280 80a9 	bge.w	801da70 <__kernel_rem_pio2f+0x364>
 801d91e:	4623      	mov	r3, r4
 801d920:	2b00      	cmp	r3, #0
 801d922:	f2c0 80c7 	blt.w	801dab4 <__kernel_rem_pio2f+0x3a8>
 801d926:	aa44      	add	r2, sp, #272	@ 0x110
 801d928:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801d92c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801da04 <__kernel_rem_pio2f+0x2f8>
 801d930:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801d934:	2000      	movs	r0, #0
 801d936:	1ae2      	subs	r2, r4, r3
 801d938:	e0b1      	b.n	801da9e <__kernel_rem_pio2f+0x392>
 801d93a:	2602      	movs	r6, #2
 801d93c:	e78f      	b.n	801d85e <__kernel_rem_pio2f+0x152>
 801d93e:	f852 1b04 	ldr.w	r1, [r2], #4
 801d942:	b948      	cbnz	r0, 801d958 <__kernel_rem_pio2f+0x24c>
 801d944:	b121      	cbz	r1, 801d950 <__kernel_rem_pio2f+0x244>
 801d946:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801d94a:	f842 1c04 	str.w	r1, [r2, #-4]
 801d94e:	2101      	movs	r1, #1
 801d950:	f10e 0e01 	add.w	lr, lr, #1
 801d954:	4608      	mov	r0, r1
 801d956:	e787      	b.n	801d868 <__kernel_rem_pio2f+0x15c>
 801d958:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801d95c:	e7f5      	b.n	801d94a <__kernel_rem_pio2f+0x23e>
 801d95e:	f104 3cff 	add.w	ip, r4, #4294967295
 801d962:	aa08      	add	r2, sp, #32
 801d964:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d968:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801d96c:	a908      	add	r1, sp, #32
 801d96e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801d972:	e781      	b.n	801d878 <__kernel_rem_pio2f+0x16c>
 801d974:	f104 3cff 	add.w	ip, r4, #4294967295
 801d978:	aa08      	add	r2, sp, #32
 801d97a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801d97e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d982:	e7f3      	b.n	801d96c <__kernel_rem_pio2f+0x260>
 801d984:	a908      	add	r1, sp, #32
 801d986:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801d98a:	3801      	subs	r0, #1
 801d98c:	430a      	orrs	r2, r1
 801d98e:	e7ab      	b.n	801d8e8 <__kernel_rem_pio2f+0x1dc>
 801d990:	3201      	adds	r2, #1
 801d992:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801d996:	2e00      	cmp	r6, #0
 801d998:	d0fa      	beq.n	801d990 <__kernel_rem_pio2f+0x284>
 801d99a:	9905      	ldr	r1, [sp, #20]
 801d99c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801d9a0:	eb0d 0001 	add.w	r0, sp, r1
 801d9a4:	18e6      	adds	r6, r4, r3
 801d9a6:	a91c      	add	r1, sp, #112	@ 0x70
 801d9a8:	f104 0c01 	add.w	ip, r4, #1
 801d9ac:	384c      	subs	r0, #76	@ 0x4c
 801d9ae:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801d9b2:	4422      	add	r2, r4
 801d9b4:	4562      	cmp	r2, ip
 801d9b6:	da04      	bge.n	801d9c2 <__kernel_rem_pio2f+0x2b6>
 801d9b8:	4614      	mov	r4, r2
 801d9ba:	e70e      	b.n	801d7da <__kernel_rem_pio2f+0xce>
 801d9bc:	9804      	ldr	r0, [sp, #16]
 801d9be:	2201      	movs	r2, #1
 801d9c0:	e7e7      	b.n	801d992 <__kernel_rem_pio2f+0x286>
 801d9c2:	9903      	ldr	r1, [sp, #12]
 801d9c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 801d9c8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801d9cc:	9105      	str	r1, [sp, #20]
 801d9ce:	ee07 1a90 	vmov	s15, r1
 801d9d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d9d6:	2400      	movs	r4, #0
 801d9d8:	ece6 7a01 	vstmia	r6!, {s15}
 801d9dc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801d9e0:	46b1      	mov	r9, r6
 801d9e2:	455c      	cmp	r4, fp
 801d9e4:	dd04      	ble.n	801d9f0 <__kernel_rem_pio2f+0x2e4>
 801d9e6:	ece0 7a01 	vstmia	r0!, {s15}
 801d9ea:	f10c 0c01 	add.w	ip, ip, #1
 801d9ee:	e7e1      	b.n	801d9b4 <__kernel_rem_pio2f+0x2a8>
 801d9f0:	ecfe 6a01 	vldmia	lr!, {s13}
 801d9f4:	ed39 7a01 	vldmdb	r9!, {s14}
 801d9f8:	3401      	adds	r4, #1
 801d9fa:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d9fe:	e7f0      	b.n	801d9e2 <__kernel_rem_pio2f+0x2d6>
 801da00:	0801f824 	.word	0x0801f824
 801da04:	0801f7f8 	.word	0x0801f7f8
 801da08:	43800000 	.word	0x43800000
 801da0c:	3b800000 	.word	0x3b800000
 801da10:	00000000 	.word	0x00000000
 801da14:	9b02      	ldr	r3, [sp, #8]
 801da16:	eeb0 0a48 	vmov.f32	s0, s16
 801da1a:	eba3 0008 	sub.w	r0, r3, r8
 801da1e:	f7ff fde9 	bl	801d5f4 <scalbnf>
 801da22:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801da08 <__kernel_rem_pio2f+0x2fc>
 801da26:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801da2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da2e:	db19      	blt.n	801da64 <__kernel_rem_pio2f+0x358>
 801da30:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801da0c <__kernel_rem_pio2f+0x300>
 801da34:	ee60 7a27 	vmul.f32	s15, s0, s15
 801da38:	aa08      	add	r2, sp, #32
 801da3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801da3e:	3508      	adds	r5, #8
 801da40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da44:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801da48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801da4c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801da50:	ee10 3a10 	vmov	r3, s0
 801da54:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801da58:	ee17 3a90 	vmov	r3, s15
 801da5c:	3401      	adds	r4, #1
 801da5e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801da62:	e74c      	b.n	801d8fe <__kernel_rem_pio2f+0x1f2>
 801da64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801da68:	aa08      	add	r2, sp, #32
 801da6a:	ee10 3a10 	vmov	r3, s0
 801da6e:	e7f6      	b.n	801da5e <__kernel_rem_pio2f+0x352>
 801da70:	a808      	add	r0, sp, #32
 801da72:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801da76:	9001      	str	r0, [sp, #4]
 801da78:	ee07 0a90 	vmov	s15, r0
 801da7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801da80:	3b01      	subs	r3, #1
 801da82:	ee67 7a80 	vmul.f32	s15, s15, s0
 801da86:	ee20 0a07 	vmul.f32	s0, s0, s14
 801da8a:	ed62 7a01 	vstmdb	r2!, {s15}
 801da8e:	e743      	b.n	801d918 <__kernel_rem_pio2f+0x20c>
 801da90:	ecfc 6a01 	vldmia	ip!, {s13}
 801da94:	ecb5 7a01 	vldmia	r5!, {s14}
 801da98:	eee6 7a87 	vfma.f32	s15, s13, s14
 801da9c:	3001      	adds	r0, #1
 801da9e:	4550      	cmp	r0, sl
 801daa0:	dc01      	bgt.n	801daa6 <__kernel_rem_pio2f+0x39a>
 801daa2:	4282      	cmp	r2, r0
 801daa4:	daf4      	bge.n	801da90 <__kernel_rem_pio2f+0x384>
 801daa6:	a858      	add	r0, sp, #352	@ 0x160
 801daa8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801daac:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801dab0:	3b01      	subs	r3, #1
 801dab2:	e735      	b.n	801d920 <__kernel_rem_pio2f+0x214>
 801dab4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801dab6:	2b02      	cmp	r3, #2
 801dab8:	dc09      	bgt.n	801dace <__kernel_rem_pio2f+0x3c2>
 801daba:	2b00      	cmp	r3, #0
 801dabc:	dc2b      	bgt.n	801db16 <__kernel_rem_pio2f+0x40a>
 801dabe:	d044      	beq.n	801db4a <__kernel_rem_pio2f+0x43e>
 801dac0:	f009 0007 	and.w	r0, r9, #7
 801dac4:	b059      	add	sp, #356	@ 0x164
 801dac6:	ecbd 8b04 	vpop	{d8-d9}
 801daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dace:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801dad0:	2b03      	cmp	r3, #3
 801dad2:	d1f5      	bne.n	801dac0 <__kernel_rem_pio2f+0x3b4>
 801dad4:	aa30      	add	r2, sp, #192	@ 0xc0
 801dad6:	1f0b      	subs	r3, r1, #4
 801dad8:	4413      	add	r3, r2
 801dada:	461a      	mov	r2, r3
 801dadc:	4620      	mov	r0, r4
 801dade:	2800      	cmp	r0, #0
 801dae0:	f1a2 0204 	sub.w	r2, r2, #4
 801dae4:	dc52      	bgt.n	801db8c <__kernel_rem_pio2f+0x480>
 801dae6:	4622      	mov	r2, r4
 801dae8:	2a01      	cmp	r2, #1
 801daea:	f1a3 0304 	sub.w	r3, r3, #4
 801daee:	dc5d      	bgt.n	801dbac <__kernel_rem_pio2f+0x4a0>
 801daf0:	ab30      	add	r3, sp, #192	@ 0xc0
 801daf2:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801daf6:	440b      	add	r3, r1
 801daf8:	2c01      	cmp	r4, #1
 801dafa:	dc67      	bgt.n	801dbcc <__kernel_rem_pio2f+0x4c0>
 801dafc:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801db00:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801db04:	2e00      	cmp	r6, #0
 801db06:	d167      	bne.n	801dbd8 <__kernel_rem_pio2f+0x4cc>
 801db08:	edc7 6a00 	vstr	s13, [r7]
 801db0c:	ed87 7a01 	vstr	s14, [r7, #4]
 801db10:	edc7 7a02 	vstr	s15, [r7, #8]
 801db14:	e7d4      	b.n	801dac0 <__kernel_rem_pio2f+0x3b4>
 801db16:	ab30      	add	r3, sp, #192	@ 0xc0
 801db18:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801db1c:	440b      	add	r3, r1
 801db1e:	4622      	mov	r2, r4
 801db20:	2a00      	cmp	r2, #0
 801db22:	da24      	bge.n	801db6e <__kernel_rem_pio2f+0x462>
 801db24:	b34e      	cbz	r6, 801db7a <__kernel_rem_pio2f+0x46e>
 801db26:	eef1 7a47 	vneg.f32	s15, s14
 801db2a:	edc7 7a00 	vstr	s15, [r7]
 801db2e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801db32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801db36:	aa31      	add	r2, sp, #196	@ 0xc4
 801db38:	2301      	movs	r3, #1
 801db3a:	429c      	cmp	r4, r3
 801db3c:	da20      	bge.n	801db80 <__kernel_rem_pio2f+0x474>
 801db3e:	b10e      	cbz	r6, 801db44 <__kernel_rem_pio2f+0x438>
 801db40:	eef1 7a67 	vneg.f32	s15, s15
 801db44:	edc7 7a01 	vstr	s15, [r7, #4]
 801db48:	e7ba      	b.n	801dac0 <__kernel_rem_pio2f+0x3b4>
 801db4a:	ab30      	add	r3, sp, #192	@ 0xc0
 801db4c:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801da10 <__kernel_rem_pio2f+0x304>
 801db50:	440b      	add	r3, r1
 801db52:	2c00      	cmp	r4, #0
 801db54:	da05      	bge.n	801db62 <__kernel_rem_pio2f+0x456>
 801db56:	b10e      	cbz	r6, 801db5c <__kernel_rem_pio2f+0x450>
 801db58:	eef1 7a67 	vneg.f32	s15, s15
 801db5c:	edc7 7a00 	vstr	s15, [r7]
 801db60:	e7ae      	b.n	801dac0 <__kernel_rem_pio2f+0x3b4>
 801db62:	ed33 7a01 	vldmdb	r3!, {s14}
 801db66:	3c01      	subs	r4, #1
 801db68:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db6c:	e7f1      	b.n	801db52 <__kernel_rem_pio2f+0x446>
 801db6e:	ed73 7a01 	vldmdb	r3!, {s15}
 801db72:	3a01      	subs	r2, #1
 801db74:	ee37 7a27 	vadd.f32	s14, s14, s15
 801db78:	e7d2      	b.n	801db20 <__kernel_rem_pio2f+0x414>
 801db7a:	eef0 7a47 	vmov.f32	s15, s14
 801db7e:	e7d4      	b.n	801db2a <__kernel_rem_pio2f+0x41e>
 801db80:	ecb2 7a01 	vldmia	r2!, {s14}
 801db84:	3301      	adds	r3, #1
 801db86:	ee77 7a87 	vadd.f32	s15, s15, s14
 801db8a:	e7d6      	b.n	801db3a <__kernel_rem_pio2f+0x42e>
 801db8c:	edd2 7a00 	vldr	s15, [r2]
 801db90:	edd2 6a01 	vldr	s13, [r2, #4]
 801db94:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801db98:	3801      	subs	r0, #1
 801db9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801db9e:	ed82 7a00 	vstr	s14, [r2]
 801dba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dba6:	edc2 7a01 	vstr	s15, [r2, #4]
 801dbaa:	e798      	b.n	801dade <__kernel_rem_pio2f+0x3d2>
 801dbac:	edd3 7a00 	vldr	s15, [r3]
 801dbb0:	edd3 6a01 	vldr	s13, [r3, #4]
 801dbb4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801dbb8:	3a01      	subs	r2, #1
 801dbba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dbbe:	ed83 7a00 	vstr	s14, [r3]
 801dbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbc6:	edc3 7a01 	vstr	s15, [r3, #4]
 801dbca:	e78d      	b.n	801dae8 <__kernel_rem_pio2f+0x3dc>
 801dbcc:	ed33 7a01 	vldmdb	r3!, {s14}
 801dbd0:	3c01      	subs	r4, #1
 801dbd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801dbd6:	e78f      	b.n	801daf8 <__kernel_rem_pio2f+0x3ec>
 801dbd8:	eef1 6a66 	vneg.f32	s13, s13
 801dbdc:	eeb1 7a47 	vneg.f32	s14, s14
 801dbe0:	edc7 6a00 	vstr	s13, [r7]
 801dbe4:	ed87 7a01 	vstr	s14, [r7, #4]
 801dbe8:	eef1 7a67 	vneg.f32	s15, s15
 801dbec:	e790      	b.n	801db10 <__kernel_rem_pio2f+0x404>
 801dbee:	bf00      	nop

0801dbf0 <floorf>:
 801dbf0:	ee10 3a10 	vmov	r3, s0
 801dbf4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dbf8:	3a7f      	subs	r2, #127	@ 0x7f
 801dbfa:	2a16      	cmp	r2, #22
 801dbfc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801dc00:	dc2b      	bgt.n	801dc5a <floorf+0x6a>
 801dc02:	2a00      	cmp	r2, #0
 801dc04:	da12      	bge.n	801dc2c <floorf+0x3c>
 801dc06:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801dc6c <floorf+0x7c>
 801dc0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801dc0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801dc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc16:	dd06      	ble.n	801dc26 <floorf+0x36>
 801dc18:	2b00      	cmp	r3, #0
 801dc1a:	da24      	bge.n	801dc66 <floorf+0x76>
 801dc1c:	2900      	cmp	r1, #0
 801dc1e:	4b14      	ldr	r3, [pc, #80]	@ (801dc70 <floorf+0x80>)
 801dc20:	bf08      	it	eq
 801dc22:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801dc26:	ee00 3a10 	vmov	s0, r3
 801dc2a:	4770      	bx	lr
 801dc2c:	4911      	ldr	r1, [pc, #68]	@ (801dc74 <floorf+0x84>)
 801dc2e:	4111      	asrs	r1, r2
 801dc30:	420b      	tst	r3, r1
 801dc32:	d0fa      	beq.n	801dc2a <floorf+0x3a>
 801dc34:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801dc6c <floorf+0x7c>
 801dc38:	ee30 0a27 	vadd.f32	s0, s0, s15
 801dc3c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801dc40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dc44:	ddef      	ble.n	801dc26 <floorf+0x36>
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	bfbe      	ittt	lt
 801dc4a:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801dc4e:	fa40 f202 	asrlt.w	r2, r0, r2
 801dc52:	189b      	addlt	r3, r3, r2
 801dc54:	ea23 0301 	bic.w	r3, r3, r1
 801dc58:	e7e5      	b.n	801dc26 <floorf+0x36>
 801dc5a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801dc5e:	d3e4      	bcc.n	801dc2a <floorf+0x3a>
 801dc60:	ee30 0a00 	vadd.f32	s0, s0, s0
 801dc64:	4770      	bx	lr
 801dc66:	2300      	movs	r3, #0
 801dc68:	e7dd      	b.n	801dc26 <floorf+0x36>
 801dc6a:	bf00      	nop
 801dc6c:	7149f2ca 	.word	0x7149f2ca
 801dc70:	bf800000 	.word	0xbf800000
 801dc74:	007fffff 	.word	0x007fffff

0801dc78 <_init>:
 801dc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc7a:	bf00      	nop
 801dc7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc7e:	bc08      	pop	{r3}
 801dc80:	469e      	mov	lr, r3
 801dc82:	4770      	bx	lr

0801dc84 <_fini>:
 801dc84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc86:	bf00      	nop
 801dc88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dc8a:	bc08      	pop	{r3}
 801dc8c:	469e      	mov	lr, r3
 801dc8e:	4770      	bx	lr
