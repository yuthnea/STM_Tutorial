
FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a988  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b0c  0801ab18  0801ab18  0001bb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c624  0801c624  000236cc  2**0
                  CONTENTS
  4 .ARM          00000008  0801c624  0801c624  0001d624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c62c  0801c62c  000236cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c62c  0801c62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c630  0801c630  0001d630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0801c634  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .nzds         00000028  200001d0  0801c804  0001e1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       000046cc  10000000  0801c82c  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000a354  200001f8  200001f8  000241f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000a54c  2000a54c  000241f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000236cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004c0d9  00000000  00000000  000236fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b3c7  00000000  00000000  0006f7d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002d08  00000000  00000000  0007aba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000218b  00000000  00000000  0007d8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ccd4  00000000  00000000  0007fa33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000453b6  00000000  00000000  000ac707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f6a2b  00000000  00000000  000f1abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  001e84e8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bcec  00000000  00000000  001e85a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  001f428c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000015c0  00000000  00000000  001f42e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000060  00000000  00000000  001f58a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ab00 	.word	0x0801ab00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0801ab00 	.word	0x0801ab00

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_frsub>:
 8000b5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b60:	e002      	b.n	8000b68 <__addsf3>
 8000b62:	bf00      	nop

08000b64 <__aeabi_fsub>:
 8000b64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b68 <__addsf3>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	bf1f      	itttt	ne
 8000b6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b70:	ea92 0f03 	teqne	r2, r3
 8000b74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7c:	d06a      	beq.n	8000c54 <__addsf3+0xec>
 8000b7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b86:	bfc1      	itttt	gt
 8000b88:	18d2      	addgt	r2, r2, r3
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	4048      	eorgt	r0, r1
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	bfb8      	it	lt
 8000b92:	425b      	neglt	r3, r3
 8000b94:	2b19      	cmp	r3, #25
 8000b96:	bf88      	it	hi
 8000b98:	4770      	bxhi	lr
 8000b9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4249      	negne	r1, r1
 8000bba:	ea92 0f03 	teq	r2, r3
 8000bbe:	d03f      	beq.n	8000c40 <__addsf3+0xd8>
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc8:	eb10 000c 	adds.w	r0, r0, ip
 8000bcc:	f1c3 0320 	rsb	r3, r3, #32
 8000bd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__addsf3+0x78>
 8000bda:	4249      	negs	r1, r1
 8000bdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be4:	d313      	bcc.n	8000c0e <__addsf3+0xa6>
 8000be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bea:	d306      	bcc.n	8000bfa <__addsf3+0x92>
 8000bec:	0840      	lsrs	r0, r0, #1
 8000bee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf2:	f102 0201 	add.w	r2, r2, #1
 8000bf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf8:	d251      	bcs.n	8000c9e <__addsf3+0x136>
 8000bfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	ea40 0003 	orr.w	r0, r0, r3
 8000c0c:	4770      	bx	lr
 8000c0e:	0049      	lsls	r1, r1, #1
 8000c10:	eb40 0000 	adc.w	r0, r0, r0
 8000c14:	3a01      	subs	r2, #1
 8000c16:	bf28      	it	cs
 8000c18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c1c:	d2ed      	bcs.n	8000bfa <__addsf3+0x92>
 8000c1e:	fab0 fc80 	clz	ip, r0
 8000c22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c26:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2e:	bfaa      	itet	ge
 8000c30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c34:	4252      	neglt	r2, r2
 8000c36:	4318      	orrge	r0, r3
 8000c38:	bfbc      	itt	lt
 8000c3a:	40d0      	lsrlt	r0, r2
 8000c3c:	4318      	orrlt	r0, r3
 8000c3e:	4770      	bx	lr
 8000c40:	f092 0f00 	teq	r2, #0
 8000c44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c48:	bf06      	itte	eq
 8000c4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	3201      	addeq	r2, #1
 8000c50:	3b01      	subne	r3, #1
 8000c52:	e7b5      	b.n	8000bc0 <__addsf3+0x58>
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d021      	beq.n	8000ca8 <__addsf3+0x140>
 8000c64:	ea92 0f03 	teq	r2, r3
 8000c68:	d004      	beq.n	8000c74 <__addsf3+0x10c>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	bf08      	it	eq
 8000c70:	4608      	moveq	r0, r1
 8000c72:	4770      	bx	lr
 8000c74:	ea90 0f01 	teq	r0, r1
 8000c78:	bf1c      	itt	ne
 8000c7a:	2000      	movne	r0, #0
 8000c7c:	4770      	bxne	lr
 8000c7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c82:	d104      	bne.n	8000c8e <__addsf3+0x126>
 8000c84:	0040      	lsls	r0, r0, #1
 8000c86:	bf28      	it	cs
 8000c88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	4770      	bx	lr
 8000c8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c92:	bf3c      	itt	cc
 8000c94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c98:	4770      	bxcc	lr
 8000c9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ca2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	4770      	bx	lr
 8000ca8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cac:	bf16      	itet	ne
 8000cae:	4608      	movne	r0, r1
 8000cb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb4:	4601      	movne	r1, r0
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	bf06      	itte	eq
 8000cba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cbe:	ea90 0f01 	teqeq	r0, r1
 8000cc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_ui2f>:
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e004      	b.n	8000cd8 <__aeabi_i2f+0x8>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_i2f>:
 8000cd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	bf48      	it	mi
 8000cd6:	4240      	negmi	r0, r0
 8000cd8:	ea5f 0c00 	movs.w	ip, r0
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	f04f 0000 	mov.w	r0, #0
 8000cea:	e01c      	b.n	8000d26 <__aeabi_l2f+0x2a>

08000cec <__aeabi_ul2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e00a      	b.n	8000d10 <__aeabi_l2f+0x14>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_l2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_l2f+0x14>
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	ea5f 0c01 	movs.w	ip, r1
 8000d14:	bf02      	ittt	eq
 8000d16:	4684      	moveq	ip, r0
 8000d18:	4601      	moveq	r1, r0
 8000d1a:	2000      	moveq	r0, #0
 8000d1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d20:	bf08      	it	eq
 8000d22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	fabc f28c 	clz	r2, ip
 8000d2e:	3a08      	subs	r2, #8
 8000d30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d34:	db10      	blt.n	8000d58 <__aeabi_l2f+0x5c>
 8000d36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d48:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f102 0220 	add.w	r2, r2, #32
 8000d5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d68:	fa21 f202 	lsr.w	r2, r1, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_ldivmod>:
 8000d78:	b97b      	cbnz	r3, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7a:	b972      	cbnz	r2, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bfbe      	ittt	lt
 8000d80:	2000      	movlt	r0, #0
 8000d82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d86:	e006      	blt.n	8000d96 <__aeabi_ldivmod+0x1e>
 8000d88:	bf08      	it	eq
 8000d8a:	2800      	cmpeq	r0, #0
 8000d8c:	bf1c      	itt	ne
 8000d8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d92:	f04f 30ff 	movne.w	r0, #4294967295
 8000d96:	f000 b9b5 	b.w	8001104 <__aeabi_idiv0>
 8000d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da2:	2900      	cmp	r1, #0
 8000da4:	db09      	blt.n	8000dba <__aeabi_ldivmod+0x42>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db1a      	blt.n	8000de0 <__aeabi_ldivmod+0x68>
 8000daa:	f000 f84d 	bl	8000e48 <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4770      	bx	lr
 8000dba:	4240      	negs	r0, r0
 8000dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db1b      	blt.n	8000dfc <__aeabi_ldivmod+0x84>
 8000dc4:	f000 f840 	bl	8000e48 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	4252      	negs	r2, r2
 8000dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dde:	4770      	bx	lr
 8000de0:	4252      	negs	r2, r2
 8000de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de6:	f000 f82f 	bl	8000e48 <__udivmoddi4>
 8000dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df2:	b004      	add	sp, #16
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	4770      	bx	lr
 8000dfc:	4252      	negs	r2, r2
 8000dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e02:	f000 f821 	bl	8000e48 <__udivmoddi4>
 8000e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e0e:	b004      	add	sp, #16
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_uldivmod>:
 8000e18:	b953      	cbnz	r3, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1a:	b94a      	cbnz	r2, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	bf08      	it	eq
 8000e20:	2800      	cmpeq	r0, #0
 8000e22:	bf1c      	itt	ne
 8000e24:	f04f 31ff 	movne.w	r1, #4294967295
 8000e28:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2c:	f000 b96a 	b.w	8001104 <__aeabi_idiv0>
 8000e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e38:	f000 f806 	bl	8000e48 <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4770      	bx	lr

08000e48 <__udivmoddi4>:
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	9d08      	ldr	r5, [sp, #32]
 8000e4e:	460c      	mov	r4, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d14e      	bne.n	8000ef2 <__udivmoddi4+0xaa>
 8000e54:	4694      	mov	ip, r2
 8000e56:	458c      	cmp	ip, r1
 8000e58:	4686      	mov	lr, r0
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	d962      	bls.n	8000f26 <__udivmoddi4+0xde>
 8000e60:	b14a      	cbz	r2, 8000e76 <__udivmoddi4+0x2e>
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	4091      	lsls	r1, r2
 8000e68:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	4319      	orrs	r1, r3
 8000e72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f f68c 	uxth.w	r6, ip
 8000e7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e86:	fb07 1114 	mls	r1, r7, r4, r1
 8000e8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8e:	fb04 f106 	mul.w	r1, r4, r6
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x64>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e9e:	f080 8112 	bcs.w	80010c6 <__udivmoddi4+0x27e>
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	f240 810f 	bls.w	80010c6 <__udivmoddi4+0x27e>
 8000ea8:	3c02      	subs	r4, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1a59      	subs	r1, r3, r1
 8000eae:	fa1f f38e 	uxth.w	r3, lr
 8000eb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f606 	mul.w	r6, r0, r6
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d90a      	bls.n	8000edc <__udivmoddi4+0x94>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ece:	f080 80fc 	bcs.w	80010ca <__udivmoddi4+0x282>
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	f240 80f9 	bls.w	80010ca <__udivmoddi4+0x282>
 8000ed8:	4463      	add	r3, ip
 8000eda:	3802      	subs	r0, #2
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	b11d      	cbz	r5, 8000eee <__udivmoddi4+0xa6>
 8000ee6:	40d3      	lsrs	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	e9c5 3200 	strd	r3, r2, [r5]
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d905      	bls.n	8000f02 <__udivmoddi4+0xba>
 8000ef6:	b10d      	cbz	r5, 8000efc <__udivmoddi4+0xb4>
 8000ef8:	e9c5 0100 	strd	r0, r1, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4608      	mov	r0, r1
 8000f00:	e7f5      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f02:	fab3 f183 	clz	r1, r3
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d146      	bne.n	8000f98 <__udivmoddi4+0x150>
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0xcc>
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	f0c0 80f0 	bcc.w	80010f4 <__udivmoddi4+0x2ac>
 8000f14:	1a86      	subs	r6, r0, r2
 8000f16:	eb64 0303 	sbc.w	r3, r4, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d0e6      	beq.n	8000eee <__udivmoddi4+0xa6>
 8000f20:	e9c5 6300 	strd	r6, r3, [r5]
 8000f24:	e7e3      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8090 	bne.w	800104c <__udivmoddi4+0x204>
 8000f2c:	eba1 040c 	sub.w	r4, r1, ip
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f42:	fb08 4416 	mls	r4, r8, r6, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb07 f006 	mul.w	r0, r7, r6
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x11c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x11a>
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	f200 80cd 	bhi.w	80010fc <__udivmoddi4+0x2b4>
 8000f62:	4626      	mov	r6, r4
 8000f64:	1a1c      	subs	r4, r3, r0
 8000f66:	fa1f f38e 	uxth.w	r3, lr
 8000f6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f76:	fb00 f707 	mul.w	r7, r0, r7
 8000f7a:	429f      	cmp	r7, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x148>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x146>
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	f200 80b0 	bhi.w	80010ee <__udivmoddi4+0x2a6>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	1bdb      	subs	r3, r3, r7
 8000f92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f96:	e7a5      	b.n	8000ee4 <__udivmoddi4+0x9c>
 8000f98:	f1c1 0620 	rsb	r6, r1, #32
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000fa2:	431f      	orrs	r7, r3
 8000fa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fac:	ea43 030c 	orr.w	r3, r3, ip
 8000fb0:	40f4      	lsrs	r4, r6
 8000fb2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb6:	0c38      	lsrs	r0, r7, #16
 8000fb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fc0:	fa1f fc87 	uxth.w	ip, r7
 8000fc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000fd0:	45a1      	cmp	r9, r4
 8000fd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd6:	d90a      	bls.n	8000fee <__udivmoddi4+0x1a6>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fde:	f080 8084 	bcs.w	80010ea <__udivmoddi4+0x2a2>
 8000fe2:	45a1      	cmp	r9, r4
 8000fe4:	f240 8081 	bls.w	80010ea <__udivmoddi4+0x2a2>
 8000fe8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	eba4 0409 	sub.w	r4, r4, r9
 8000ff2:	fa1f f983 	uxth.w	r9, r3
 8000ff6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ffa:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001002:	fb03 fc0c 	mul.w	ip, r3, ip
 8001006:	45a4      	cmp	ip, r4
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x1d2>
 800100a:	193c      	adds	r4, r7, r4
 800100c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001010:	d267      	bcs.n	80010e2 <__udivmoddi4+0x29a>
 8001012:	45a4      	cmp	ip, r4
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0x29a>
 8001016:	3b02      	subs	r3, #2
 8001018:	443c      	add	r4, r7
 800101a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101e:	fba0 9302 	umull	r9, r3, r0, r2
 8001022:	eba4 040c 	sub.w	r4, r4, ip
 8001026:	429c      	cmp	r4, r3
 8001028:	46ce      	mov	lr, r9
 800102a:	469c      	mov	ip, r3
 800102c:	d351      	bcc.n	80010d2 <__udivmoddi4+0x28a>
 800102e:	d04e      	beq.n	80010ce <__udivmoddi4+0x286>
 8001030:	b155      	cbz	r5, 8001048 <__udivmoddi4+0x200>
 8001032:	ebb8 030e 	subs.w	r3, r8, lr
 8001036:	eb64 040c 	sbc.w	r4, r4, ip
 800103a:	fa04 f606 	lsl.w	r6, r4, r6
 800103e:	40cb      	lsrs	r3, r1
 8001040:	431e      	orrs	r6, r3
 8001042:	40cc      	lsrs	r4, r1
 8001044:	e9c5 6400 	strd	r6, r4, [r5]
 8001048:	2100      	movs	r1, #0
 800104a:	e750      	b.n	8000eee <__udivmoddi4+0xa6>
 800104c:	f1c2 0320 	rsb	r3, r2, #32
 8001050:	fa20 f103 	lsr.w	r1, r0, r3
 8001054:	fa0c fc02 	lsl.w	ip, ip, r2
 8001058:	fa24 f303 	lsr.w	r3, r4, r3
 800105c:	4094      	lsls	r4, r2
 800105e:	430c      	orrs	r4, r1
 8001060:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001064:	fa00 fe02 	lsl.w	lr, r0, r2
 8001068:	fa1f f78c 	uxth.w	r7, ip
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3110 	mls	r1, r8, r0, r3
 8001074:	0c23      	lsrs	r3, r4, #16
 8001076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107a:	fb00 f107 	mul.w	r1, r0, r7
 800107e:	4299      	cmp	r1, r3
 8001080:	d908      	bls.n	8001094 <__udivmoddi4+0x24c>
 8001082:	eb1c 0303 	adds.w	r3, ip, r3
 8001086:	f100 36ff 	add.w	r6, r0, #4294967295
 800108a:	d22c      	bcs.n	80010e6 <__udivmoddi4+0x29e>
 800108c:	4299      	cmp	r1, r3
 800108e:	d92a      	bls.n	80010e6 <__udivmoddi4+0x29e>
 8001090:	3802      	subs	r0, #2
 8001092:	4463      	add	r3, ip
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb3 f1f8 	udiv	r1, r3, r8
 800109c:	fb08 3311 	mls	r3, r8, r1, r3
 80010a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a4:	fb01 f307 	mul.w	r3, r1, r7
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x276>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010b4:	d213      	bcs.n	80010de <__udivmoddi4+0x296>
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	d911      	bls.n	80010de <__udivmoddi4+0x296>
 80010ba:	3902      	subs	r1, #2
 80010bc:	4464      	add	r4, ip
 80010be:	1ae4      	subs	r4, r4, r3
 80010c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c4:	e739      	b.n	8000f3a <__udivmoddi4+0xf2>
 80010c6:	4604      	mov	r4, r0
 80010c8:	e6f0      	b.n	8000eac <__udivmoddi4+0x64>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e706      	b.n	8000edc <__udivmoddi4+0x94>
 80010ce:	45c8      	cmp	r8, r9
 80010d0:	d2ae      	bcs.n	8001030 <__udivmoddi4+0x1e8>
 80010d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010da:	3801      	subs	r0, #1
 80010dc:	e7a8      	b.n	8001030 <__udivmoddi4+0x1e8>
 80010de:	4631      	mov	r1, r6
 80010e0:	e7ed      	b.n	80010be <__udivmoddi4+0x276>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e799      	b.n	800101a <__udivmoddi4+0x1d2>
 80010e6:	4630      	mov	r0, r6
 80010e8:	e7d4      	b.n	8001094 <__udivmoddi4+0x24c>
 80010ea:	46d6      	mov	lr, sl
 80010ec:	e77f      	b.n	8000fee <__udivmoddi4+0x1a6>
 80010ee:	4463      	add	r3, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e74d      	b.n	8000f90 <__udivmoddi4+0x148>
 80010f4:	4606      	mov	r6, r0
 80010f6:	4623      	mov	r3, r4
 80010f8:	4608      	mov	r0, r1
 80010fa:	e70f      	b.n	8000f1c <__udivmoddi4+0xd4>
 80010fc:	3e02      	subs	r6, #2
 80010fe:	4463      	add	r3, ip
 8001100:	e730      	b.n	8000f64 <__udivmoddi4+0x11c>
 8001102:	bf00      	nop

08001104 <__aeabi_idiv0>:
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f8c8 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000214 	.word	0x20000214

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ff99 	bl	8001250 <NVIC_EncodePriority>
 800131e:	4602      	mov	r2, r0
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff68 	bl	80011fc <__NVIC_SetPriority>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff3c 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <SysTick_Config>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ff0a 	bl	800118c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fef1 	bl	800118c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa91 	bl	8001994 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fa48 	bl	8001928 <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	223f      	movs	r2, #63	@ 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <HAL_DMA_Start_IT+0x26>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e040      	b.n	800156c <HAL_DMA_Start_IT+0xa8>
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2201      	movs	r2, #1
 80014ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d12f      	bne.n	800155e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2202      	movs	r2, #2
 8001502:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2200      	movs	r2, #0
 800150a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	68f8      	ldr	r0, [r7, #12]
 8001514:	f000 f9da 	bl	80018cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800151c:	223f      	movs	r2, #63	@ 0x3f
 800151e:	409a      	lsls	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 0216 	orr.w	r2, r2, #22
 8001532:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	2b00      	cmp	r3, #0
 800153a:	d007      	beq.n	800154c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f042 0208 	orr.w	r2, r2, #8
 800154a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	e005      	b.n	800156a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001566:	2302      	movs	r3, #2
 8001568:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800156a:	7dfb      	ldrb	r3, [r7, #23]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d004      	beq.n	8001592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2280      	movs	r2, #128	@ 0x80
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00c      	b.n	80015ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2205      	movs	r2, #5
 8001596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0201 	bic.w	r2, r2, #1
 80015a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001800 <HAL_DMA_IRQHandler+0x248>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001804 <HAL_DMA_IRQHandler+0x24c>)
 80015ca:	fba2 2303 	umull	r2, r3, r2, r3
 80015ce:	0a9b      	lsrs	r3, r3, #10
 80015d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e2:	2208      	movs	r2, #8
 80015e4:	409a      	lsls	r2, r3
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d01a      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d013      	beq.n	8001624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 0204 	bic.w	r2, r2, #4
 800160a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001610:	2208      	movs	r2, #8
 8001612:	409a      	lsls	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f043 0201 	orr.w	r2, r3, #1
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001628:	2201      	movs	r2, #1
 800162a:	409a      	lsls	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	4013      	ands	r3, r2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d012      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001646:	2201      	movs	r2, #1
 8001648:	409a      	lsls	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	2204      	movs	r2, #4
 8001660:	409a      	lsls	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d012      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00b      	beq.n	8001690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	2204      	movs	r2, #4
 800167e:	409a      	lsls	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001688:	f043 0204 	orr.w	r2, r3, #4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001694:	2210      	movs	r2, #16
 8001696:	409a      	lsls	r2, r3
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4013      	ands	r3, r2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d043      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d03c      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b2:	2210      	movs	r2, #16
 80016b4:	409a      	lsls	r2, r3
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d018      	beq.n	80016fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d108      	bne.n	80016e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	4798      	blx	r3
 80016e6:	e01f      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01b      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	4798      	blx	r3
 80016f8:	e016      	b.n	8001728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d107      	bne.n	8001718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0208 	bic.w	r2, r2, #8
 8001716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2220      	movs	r2, #32
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	f000 808f 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 8087 	beq.w	8001858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174e:	2220      	movs	r2, #32
 8001750:	409a      	lsls	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b05      	cmp	r3, #5
 8001760:	d136      	bne.n	80017d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0216 	bic.w	r2, r2, #22
 8001770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	2b00      	cmp	r3, #0
 8001788:	d103      	bne.n	8001792 <HAL_DMA_IRQHandler+0x1da>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0208 	bic.w	r2, r2, #8
 80017a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a6:	223f      	movs	r2, #63	@ 0x3f
 80017a8:	409a      	lsls	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d07e      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	4798      	blx	r3
        }
        return;
 80017ce:	e079      	b.n	80018c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d01d      	beq.n	800181a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10d      	bne.n	8001808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d031      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e02c      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
 80017fe:	bf00      	nop
 8001800:	20000000 	.word	0x20000000
 8001804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800180c:	2b00      	cmp	r3, #0
 800180e:	d023      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	4798      	blx	r3
 8001818:	e01e      	b.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0210 	bic.w	r2, r2, #16
 8001836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2200      	movs	r2, #0
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d003      	beq.n	8001858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800185c:	2b00      	cmp	r3, #0
 800185e:	d032      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	2b00      	cmp	r3, #0
 800186a:	d022      	beq.n	80018b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2205      	movs	r2, #5
 8001870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	3301      	adds	r3, #1
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	d307      	bcc.n	80018a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f2      	bne.n	8001884 <HAL_DMA_IRQHandler+0x2cc>
 800189e:	e000      	b.n	80018a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80018c4:	bf00      	nop
    }
  }
}
 80018c6:	3718      	adds	r7, #24
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	60f8      	str	r0, [r7, #12]
 80018d4:	60b9      	str	r1, [r7, #8]
 80018d6:	607a      	str	r2, [r7, #4]
 80018d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80018e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b40      	cmp	r3, #64	@ 0x40
 80018f8:	d108      	bne.n	800190c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800190a:	e007      	b.n	800191c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	60da      	str	r2, [r3, #12]
}
 800191c:	bf00      	nop
 800191e:	3714      	adds	r7, #20
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	3b10      	subs	r3, #16
 8001938:	4a14      	ldr	r2, [pc, #80]	@ (800198c <DMA_CalcBaseAndBitshift+0x64>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	091b      	lsrs	r3, r3, #4
 8001940:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001942:	4a13      	ldr	r2, [pc, #76]	@ (8001990 <DMA_CalcBaseAndBitshift+0x68>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4413      	add	r3, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b03      	cmp	r3, #3
 8001954:	d909      	bls.n	800196a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800195e:	f023 0303 	bic.w	r3, r3, #3
 8001962:	1d1a      	adds	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	659a      	str	r2, [r3, #88]	@ 0x58
 8001968:	e007      	b.n	800197a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001972:	f023 0303 	bic.w	r3, r3, #3
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	aaaaaaab 	.word	0xaaaaaaab
 8001990:	0801b9a0 	.word	0x0801b9a0

08001994 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d11f      	bne.n	80019ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b03      	cmp	r3, #3
 80019b2:	d856      	bhi.n	8001a62 <DMA_CheckFifoParam+0xce>
 80019b4:	a201      	add	r2, pc, #4	@ (adr r2, 80019bc <DMA_CheckFifoParam+0x28>)
 80019b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ba:	bf00      	nop
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019df 	.word	0x080019df
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	08001a63 	.word	0x08001a63
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d046      	beq.n	8001a66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019dc:	e043      	b.n	8001a66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80019e6:	d140      	bne.n	8001a6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019ec:	e03d      	b.n	8001a6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019f6:	d121      	bne.n	8001a3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	d837      	bhi.n	8001a6e <DMA_CheckFifoParam+0xda>
 80019fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <DMA_CheckFifoParam+0x70>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a1b 	.word	0x08001a1b
 8001a0c:	08001a15 	.word	0x08001a15
 8001a10:	08001a2d 	.word	0x08001a2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e030      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d025      	beq.n	8001a72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a2a:	e022      	b.n	8001a72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a34:	d11f      	bne.n	8001a76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a3a:	e01c      	b.n	8001a76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d903      	bls.n	8001a4a <DMA_CheckFifoParam+0xb6>
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d003      	beq.n	8001a50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a48:	e018      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001a4e:	e015      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00e      	beq.n	8001a7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001a60:	e00b      	b.n	8001a7a <DMA_CheckFifoParam+0xe6>
      break;
 8001a62:	bf00      	nop
 8001a64:	e00a      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a66:	bf00      	nop
 8001a68:	e008      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6a:	bf00      	nop
 8001a6c:	e006      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a6e:	bf00      	nop
 8001a70:	e004      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a72:	bf00      	nop
 8001a74:	e002      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001a76:	bf00      	nop
 8001a78:	e000      	b.n	8001a7c <DMA_CheckFifoParam+0xe8>
      break;
 8001a7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop

08001a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	@ 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
 8001aa6:	e16b      	b.n	8001d80 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	f040 815a 	bne.w	8001d7a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d005      	beq.n	8001ade <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d130      	bne.n	8001b40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	4013      	ands	r3, r2
 8001af4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	69ba      	ldr	r2, [r7, #24]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b14:	2201      	movs	r2, #1
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0201 	and.w	r2, r3, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d017      	beq.n	8001b7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	2203      	movs	r2, #3
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 0303 	and.w	r3, r3, #3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d123      	bne.n	8001bd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3208      	adds	r2, #8
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	08da      	lsrs	r2, r3, #3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	3208      	adds	r2, #8
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0203 	and.w	r2, r3, #3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80b4 	beq.w	8001d7a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c22:	4b5d      	ldr	r3, [pc, #372]	@ (8001d98 <HAL_GPIO_Init+0x30c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c2e:	4a5b      	ldr	r2, [pc, #364]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	089b      	lsrs	r3, r3, #2
 8001c34:	3302      	adds	r3, #2
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0303 	and.w	r3, r3, #3
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	220f      	movs	r2, #15
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a52      	ldr	r2, [pc, #328]	@ (8001da0 <HAL_GPIO_Init+0x314>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d02b      	beq.n	8001cb2 <HAL_GPIO_Init+0x226>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <HAL_GPIO_Init+0x318>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d025      	beq.n	8001cae <HAL_GPIO_Init+0x222>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a50      	ldr	r2, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x31c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d01f      	beq.n	8001caa <HAL_GPIO_Init+0x21e>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <HAL_GPIO_Init+0x320>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d019      	beq.n	8001ca6 <HAL_GPIO_Init+0x21a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4e      	ldr	r2, [pc, #312]	@ (8001db0 <HAL_GPIO_Init+0x324>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0x216>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <HAL_GPIO_Init+0x328>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d00d      	beq.n	8001c9e <HAL_GPIO_Init+0x212>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x32c>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d007      	beq.n	8001c9a <HAL_GPIO_Init+0x20e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8001dbc <HAL_GPIO_Init+0x330>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d101      	bne.n	8001c96 <HAL_GPIO_Init+0x20a>
 8001c92:	2307      	movs	r3, #7
 8001c94:	e00e      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c96:	2308      	movs	r3, #8
 8001c98:	e00c      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9a:	2306      	movs	r3, #6
 8001c9c:	e00a      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001c9e:	2305      	movs	r3, #5
 8001ca0:	e008      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	e006      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e004      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e002      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_GPIO_Init+0x228>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	69fa      	ldr	r2, [r7, #28]
 8001cb6:	f002 0203 	and.w	r2, r2, #3
 8001cba:	0092      	lsls	r2, r2, #2
 8001cbc:	4093      	lsls	r3, r2
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cc4:	4935      	ldr	r1, [pc, #212]	@ (8001d9c <HAL_GPIO_Init+0x310>)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	089b      	lsrs	r3, r3, #2
 8001cca:	3302      	adds	r3, #2
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cf6:	4a32      	ldr	r2, [pc, #200]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cfc:	4b30      	ldr	r3, [pc, #192]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d20:	4a27      	ldr	r2, [pc, #156]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d26:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d4a:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d50:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	61fb      	str	r3, [r7, #28]
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b0f      	cmp	r3, #15
 8001d84:	f67f ae90 	bls.w	8001aa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3724      	adds	r7, #36	@ 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40013800 	.word	0x40013800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40020400 	.word	0x40020400
 8001da8:	40020800 	.word	0x40020800
 8001dac:	40020c00 	.word	0x40020c00
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40021400 	.word	0x40021400
 8001db8:	40021800 	.word	0x40021800
 8001dbc:	40021c00 	.word	0x40021c00
 8001dc0:	40013c00 	.word	0x40013c00

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b085      	sub	sp, #20
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e08:	887a      	ldrh	r2, [r7, #2]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	43d9      	mvns	r1, r3
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	400b      	ands	r3, r1
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	619a      	str	r2, [r3, #24]
}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e12b      	b.n	8002096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f008 fab0 	bl	800a3b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2224      	movs	r2, #36	@ 0x24
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e90:	f001 fc64 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8001e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4a81      	ldr	r2, [pc, #516]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d807      	bhi.n	8001eb0 <HAL_I2C_Init+0x84>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4a80      	ldr	r2, [pc, #512]	@ (80020a4 <HAL_I2C_Init+0x278>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	bf94      	ite	ls
 8001ea8:	2301      	movls	r3, #1
 8001eaa:	2300      	movhi	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e006      	b.n	8001ebe <HAL_I2C_Init+0x92>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80020a8 <HAL_I2C_Init+0x27c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	bf94      	ite	ls
 8001eb8:	2301      	movls	r3, #1
 8001eba:	2300      	movhi	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e7      	b.n	8002096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4a78      	ldr	r2, [pc, #480]	@ (80020ac <HAL_I2C_Init+0x280>)
 8001eca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ece:	0c9b      	lsrs	r3, r3, #18
 8001ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68ba      	ldr	r2, [r7, #8]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d802      	bhi.n	8001f00 <HAL_I2C_Init+0xd4>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3301      	adds	r3, #1
 8001efe:	e009      	b.n	8001f14 <HAL_I2C_Init+0xe8>
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f06:	fb02 f303 	mul.w	r3, r2, r3
 8001f0a:	4a69      	ldr	r2, [pc, #420]	@ (80020b0 <HAL_I2C_Init+0x284>)
 8001f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f10:	099b      	lsrs	r3, r3, #6
 8001f12:	3301      	adds	r3, #1
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	430b      	orrs	r3, r1
 8001f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	495c      	ldr	r1, [pc, #368]	@ (80020a0 <HAL_I2C_Init+0x274>)
 8001f30:	428b      	cmp	r3, r1
 8001f32:	d819      	bhi.n	8001f68 <HAL_I2C_Init+0x13c>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1e59      	subs	r1, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f42:	1c59      	adds	r1, r3, #1
 8001f44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001f48:	400b      	ands	r3, r1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_I2C_Init+0x138>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1e59      	subs	r1, r3, #1
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f62:	e051      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e04f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d111      	bne.n	8001f94 <HAL_I2C_Init+0x168>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1e58      	subs	r0, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6859      	ldr	r1, [r3, #4]
 8001f78:	460b      	mov	r3, r1
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	440b      	add	r3, r1
 8001f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	bf0c      	ite	eq
 8001f8c:	2301      	moveq	r3, #1
 8001f8e:	2300      	movne	r3, #0
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	e012      	b.n	8001fba <HAL_I2C_Init+0x18e>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	1e58      	subs	r0, r3, #1
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6859      	ldr	r1, [r3, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	0099      	lsls	r1, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001faa:	3301      	adds	r3, #1
 8001fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	bf0c      	ite	eq
 8001fb4:	2301      	moveq	r3, #1
 8001fb6:	2300      	movne	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_I2C_Init+0x196>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e022      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_I2C_Init+0x1bc>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1e58      	subs	r0, r3, #1
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6859      	ldr	r1, [r3, #4]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fdc:	3301      	adds	r3, #1
 8001fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001fe6:	e00f      	b.n	8002008 <HAL_I2C_Init+0x1dc>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e58      	subs	r0, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	0099      	lsls	r1, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002004:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002008:	6879      	ldr	r1, [r7, #4]
 800200a:	6809      	ldr	r1, [r1, #0]
 800200c:	4313      	orrs	r3, r2
 800200e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69da      	ldr	r2, [r3, #28]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	430a      	orrs	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002036:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6911      	ldr	r1, [r2, #16]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	68d2      	ldr	r2, [r2, #12]
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	430b      	orrs	r3, r1
 800204a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	431a      	orrs	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f042 0201 	orr.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	000186a0 	.word	0x000186a0
 80020a4:	001e847f 	.word	0x001e847f
 80020a8:	003d08ff 	.word	0x003d08ff
 80020ac:	431bde83 	.word	0x431bde83
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	4608      	mov	r0, r1
 80020be:	4611      	mov	r1, r2
 80020c0:	461a      	mov	r2, r3
 80020c2:	4603      	mov	r3, r0
 80020c4:	817b      	strh	r3, [r7, #10]
 80020c6:	460b      	mov	r3, r1
 80020c8:	813b      	strh	r3, [r7, #8]
 80020ca:	4613      	mov	r3, r2
 80020cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020ce:	f7ff f85d 	bl	800118c <HAL_GetTick>
 80020d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b20      	cmp	r3, #32
 80020de:	f040 80d9 	bne.w	8002294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2319      	movs	r3, #25
 80020e8:	2201      	movs	r2, #1
 80020ea:	496d      	ldr	r1, [pc, #436]	@ (80022a0 <HAL_I2C_Mem_Write+0x1ec>)
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 fc8f 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0cc      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002102:	2b01      	cmp	r3, #1
 8002104:	d101      	bne.n	800210a <HAL_I2C_Mem_Write+0x56>
 8002106:	2302      	movs	r3, #2
 8002108:	e0c5      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2201      	movs	r2, #1
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b01      	cmp	r3, #1
 800211e:	d007      	beq.n	8002130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800213e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2221      	movs	r2, #33	@ 0x21
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	6a3a      	ldr	r2, [r7, #32]
 800215a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002160:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4a4d      	ldr	r2, [pc, #308]	@ (80022a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002170:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002172:	88f8      	ldrh	r0, [r7, #6]
 8002174:	893a      	ldrh	r2, [r7, #8]
 8002176:	8979      	ldrh	r1, [r7, #10]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	4603      	mov	r3, r0
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 fac6 	bl	8002714 <I2C_RequestMemoryWrite>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d052      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e081      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002192:	697a      	ldr	r2, [r7, #20]
 8002194:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 fd54 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00d      	beq.n	80021be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d107      	bne.n	80021ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e06b      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	781a      	ldrb	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	695b      	ldr	r3, [r3, #20]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b04      	cmp	r3, #4
 80021fa:	d11b      	bne.n	8002234 <HAL_I2C_Mem_Write+0x180>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	d017      	beq.n	8002234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800222a:	b29b      	uxth	r3, r3
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1aa      	bne.n	8002192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 fd47 	bl	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00d      	beq.n	8002268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002250:	2b04      	cmp	r3, #4
 8002252:	d107      	bne.n	8002264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e016      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e000      	b.n	8002296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002294:	2302      	movs	r3, #2
  }
}
 8002296:	4618      	mov	r0, r3
 8002298:	3718      	adds	r7, #24
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	00100002 	.word	0x00100002
 80022a4:	ffff0000 	.word	0xffff0000

080022a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	@ 0x30
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	4608      	mov	r0, r1
 80022b2:	4611      	mov	r1, r2
 80022b4:	461a      	mov	r2, r3
 80022b6:	4603      	mov	r3, r0
 80022b8:	817b      	strh	r3, [r7, #10]
 80022ba:	460b      	mov	r3, r1
 80022bc:	813b      	strh	r3, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022c2:	f7fe ff63 	bl	800118c <HAL_GetTick>
 80022c6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	f040 8218 	bne.w	8002706 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2319      	movs	r3, #25
 80022dc:	2201      	movs	r2, #1
 80022de:	497c      	ldr	r1, [pc, #496]	@ (80024d0 <HAL_I2C_Mem_Read+0x228>)
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f000 fb95 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d001      	beq.n	80022f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
 80022ee:	e20b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2C_Mem_Read+0x56>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e204      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d007      	beq.n	8002324 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2222      	movs	r2, #34	@ 0x22
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2240      	movs	r2, #64	@ 0x40
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002354:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800235a:	b29a      	uxth	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a5c      	ldr	r2, [pc, #368]	@ (80024d4 <HAL_I2C_Mem_Read+0x22c>)
 8002364:	62da      	str	r2, [r3, #44]	@ 0x2c
//    hal_flage = 1;//JH
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002366:	88f8      	ldrh	r0, [r7, #6]
 8002368:	893a      	ldrh	r2, [r7, #8]
 800236a:	8979      	ldrh	r1, [r7, #10]
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	4603      	mov	r3, r0
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 fa62 	bl	8002840 <I2C_RequestMemoryRead>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_I2C_Mem_Read+0xe4>
    {
    	hal_flage = 1;//JH
 8002382:	4b55      	ldr	r3, [pc, #340]	@ (80024d8 <HAL_I2C_Mem_Read+0x230>)
 8002384:	2201      	movs	r2, #1
 8002386:	701a      	strb	r2, [r3, #0]
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e1bd      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
//      hal_flage = 1;// Not follow rule can't debug
    }
//    hal_flage = 1;//NJH

    if (hi2c->XferSize == 0U)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002390:	2b00      	cmp	r3, #0
 8002392:	d113      	bne.n	80023bc <HAL_I2C_Mem_Read+0x114>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002394:	2300      	movs	r3, #0
 8002396:	623b      	str	r3, [r7, #32]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	623b      	str	r3, [r7, #32]
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	623b      	str	r3, [r7, #32]
 80023a8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	e191      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11b      	bne.n	80023fc <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023d2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	61fb      	str	r3, [r7, #28]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	61fb      	str	r3, [r7, #28]
 80023e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e171      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 2U)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	2b02      	cmp	r3, #2
 8002402:	d11b      	bne.n	800243c <HAL_I2C_Mem_Read+0x194>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002412:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	61bb      	str	r3, [r7, #24]
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	e151      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    }
//    hal_flage = 1;//NJH
    while (hi2c->XferSize > 0U)
 8002452:	e145      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	2b03      	cmp	r3, #3
 800245a:	f200 80f2 	bhi.w	8002642 <HAL_I2C_Mem_Read+0x39a>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002462:	2b01      	cmp	r3, #1
 8002464:	d123      	bne.n	80024ae <HAL_I2C_Mem_Read+0x206>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002468:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fc7a 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <HAL_I2C_Mem_Read+0x1d2>
          {
            return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e146      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80024ac:	e118      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d14f      	bne.n	8002556 <HAL_I2C_Mem_Read+0x2ae>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b8:	9300      	str	r3, [sp, #0]
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	2200      	movs	r2, #0
 80024be:	4907      	ldr	r1, [pc, #28]	@ (80024dc <HAL_I2C_Mem_Read+0x234>)
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	f000 faa5 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d009      	beq.n	80024e0 <HAL_I2C_Mem_Read+0x238>
          {
            return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e11b      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
 80024d0:	00100002 	.word	0x00100002
 80024d4:	ffff0000 	.word	0xffff0000
 80024d8:	20000218 	.word	0x20000218
 80024dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691a      	ldr	r2, [r3, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002502:	1c5a      	adds	r2, r3, #1
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002518:	b29b      	uxth	r3, r3
 800251a:	3b01      	subs	r3, #1
 800251c:	b29a      	uxth	r2, r3
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	691a      	ldr	r2, [r3, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002554:	e0c4      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	496c      	ldr	r1, [pc, #432]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa55 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x2c8>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0cb      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	2200      	movs	r2, #0
 80025ba:	4955      	ldr	r1, [pc, #340]	@ (8002710 <HAL_I2C_Mem_Read+0x468>)
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 fa27 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_I2C_Mem_Read+0x324>
          {
            return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e09d      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691a      	ldr	r2, [r3, #16]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29a      	uxth	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002636:	b29b      	uxth	r3, r3
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002640:	e04e      	b.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002644:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb8c 	bl	8002d64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Mem_Read+0x3ae>
        {
          return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e058      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691a      	ldr	r2, [r3, #16]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b04      	cmp	r3, #4
 8002694:	d124      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x438>
        {
          if (hi2c->XferSize == 3U)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269a:	2b03      	cmp	r3, #3
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Read+0x406>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026c0:	1c5a      	adds	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f aeb5 	bne.w	8002454 <HAL_I2C_Mem_Read+0x1ac>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
//    hal_flage = 1;//NJH
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
//    hal_flage = 1;//NJH
    return HAL_OK;
 8002702:	2300      	movs	r3, #0
 8002704:	e000      	b.n	8002708 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
//	  hal_flage = 1;//NJH
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3728      	adds	r7, #40	@ 0x28
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00010004 	.word	0x00010004

08002714 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	4608      	mov	r0, r1
 800271e:	4611      	mov	r1, r2
 8002720:	461a      	mov	r2, r3
 8002722:	4603      	mov	r3, r0
 8002724:	817b      	strh	r3, [r7, #10]
 8002726:	460b      	mov	r3, r1
 8002728:	813b      	strh	r3, [r7, #8]
 800272a:	4613      	mov	r3, r2
 800272c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800273c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2200      	movs	r2, #0
 8002746:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f960 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00d      	beq.n	8002772 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d103      	bne.n	800276e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e05f      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002780:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	6a3a      	ldr	r2, [r7, #32]
 8002786:	492d      	ldr	r1, [pc, #180]	@ (800283c <I2C_RequestMemoryWrite+0x128>)
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f9bb 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e04c      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	617b      	str	r3, [r7, #20]
 80027ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b0:	6a39      	ldr	r1, [r7, #32]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 fa46 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00d      	beq.n	80027da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d107      	bne.n	80027d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e02b      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027da:	88fb      	ldrh	r3, [r7, #6]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80027e0:	893b      	ldrh	r3, [r7, #8]
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]
 80027ea:	e021      	b.n	8002830 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80027ec:	893b      	ldrh	r3, [r7, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	b2da      	uxtb	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027fc:	6a39      	ldr	r1, [r7, #32]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f000 fa20 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00d      	beq.n	8002826 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2b04      	cmp	r3, #4
 8002810:	d107      	bne.n	8002822 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002820:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e005      	b.n	8002832 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	00010002 	.word	0x00010002

08002840 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b088      	sub	sp, #32
 8002844:	af02      	add	r7, sp, #8
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	4608      	mov	r0, r1
 800284a:	4611      	mov	r1, r2
 800284c:	461a      	mov	r2, r3
 800284e:	4603      	mov	r3, r0
 8002850:	817b      	strh	r3, [r7, #10]
 8002852:	460b      	mov	r3, r1
 8002854:	813b      	strh	r3, [r7, #8]
 8002856:	4613      	mov	r3, r2
 8002858:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002868:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002878:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	2200      	movs	r2, #0
 8002882:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f000 f8c2 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00d      	beq.n	80028ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028a0:	d103      	bne.n	80028aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e0aa      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ae:	897b      	ldrh	r3, [r7, #10]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6a3a      	ldr	r2, [r7, #32]
 80028c2:	4952      	ldr	r1, [pc, #328]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80028c4:	68f8      	ldr	r0, [r7, #12]
 80028c6:	f000 f91d 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e097      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	617b      	str	r3, [r7, #20]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	617b      	str	r3, [r7, #20]
 80028e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028ec:	6a39      	ldr	r1, [r7, #32]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f9a8 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00d      	beq.n	8002916 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d107      	bne.n	8002912 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002910:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e076      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002916:	88fb      	ldrh	r3, [r7, #6]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d105      	bne.n	8002928 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]
 8002926:	e021      	b.n	800296c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002928:	893b      	ldrh	r3, [r7, #8]
 800292a:	0a1b      	lsrs	r3, r3, #8
 800292c:	b29b      	uxth	r3, r3
 800292e:	b2da      	uxtb	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002938:	6a39      	ldr	r1, [r7, #32]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f982 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00d      	beq.n	8002962 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	2b04      	cmp	r3, #4
 800294c:	d107      	bne.n	800295e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800295c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e050      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002962:	893b      	ldrh	r3, [r7, #8]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800296c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800296e:	6a39      	ldr	r1, [r7, #32]
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f967 	bl	8002c44 <I2C_WaitOnTXEFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d00d      	beq.n	8002998 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	2b04      	cmp	r3, #4
 8002982:	d107      	bne.n	8002994 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002992:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e035      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 f82b 	bl	8002a10 <I2C_WaitOnFlagUntilTimeout>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00d      	beq.n	80029dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ce:	d103      	bne.n	80029d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e013      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80029dc:	897b      	ldrh	r3, [r7, #10]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ee:	6a3a      	ldr	r2, [r7, #32]
 80029f0:	4906      	ldr	r1, [pc, #24]	@ (8002a0c <I2C_RequestMemoryRead+0x1cc>)
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f886 	bl	8002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	00010002 	.word	0x00010002

08002a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a20:	e048      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d044      	beq.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a2a:	f7fe fbaf 	bl	800118c <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d302      	bcc.n	8002a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d139      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d10d      	bne.n	8002a66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	43da      	mvns	r2, r3
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4013      	ands	r3, r2
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	e00c      	b.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4013      	ands	r3, r2
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	bf0c      	ite	eq
 8002a78:	2301      	moveq	r3, #1
 8002a7a:	2300      	movne	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e023      	b.n	8002afc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <I2C_WaitOnFlagUntilTimeout+0xca>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	43da      	mvns	r2, r3
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	bf0c      	ite	eq
 8002ad0:	2301      	moveq	r3, #1
 8002ad2:	2300      	movne	r3, #0
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	e00c      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	79fb      	ldrb	r3, [r7, #7]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d093      	beq.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b12:	e071      	b.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b22:	d123      	bne.n	8002b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002b3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e067      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b72:	d041      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b74:	f7fe fb0a 	bl	800118c <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d302      	bcc.n	8002b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d136      	bne.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0c1b      	lsrs	r3, r3, #16
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10c      	bne.n	8002bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	43da      	mvns	r2, r3
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e00b      	b.n	8002bc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d016      	beq.n	8002bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be4:	f043 0220 	orr.w	r2, r3, #32
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e021      	b.n	8002c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d10c      	bne.n	8002c1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	43da      	mvns	r2, r3
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf14      	ite	ne
 8002c14:	2301      	movne	r3, #1
 8002c16:	2300      	moveq	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e00b      	b.n	8002c34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	43da      	mvns	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4013      	ands	r3, r2
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	bf14      	ite	ne
 8002c2e:	2301      	movne	r3, #1
 8002c30:	2300      	moveq	r3, #0
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f47f af6d 	bne.w	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c50:	e034      	b.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f8e3 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e034      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c68:	d028      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c6a:	f7fe fa8f 	bl	800118c <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	68ba      	ldr	r2, [r7, #8]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d302      	bcc.n	8002c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d11d      	bne.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d016      	beq.n	8002cbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca8:	f043 0220 	orr.w	r2, r3, #32
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e007      	b.n	8002ccc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc6:	2b80      	cmp	r3, #128	@ 0x80
 8002cc8:	d1c3      	bne.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b084      	sub	sp, #16
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce0:	e034      	b.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 f89b 	bl	8002e1e <I2C_IsAcknowledgeFailed>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e034      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf8:	d028      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfa:	f7fe fa47 	bl	800118c <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	68ba      	ldr	r2, [r7, #8]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d302      	bcc.n	8002d10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d11d      	bne.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d016      	beq.n	8002d4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	f043 0220 	orr.w	r2, r3, #32
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e007      	b.n	8002d5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d1c3      	bne.n	8002ce2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d70:	e049      	b.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	695b      	ldr	r3, [r3, #20]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b10      	cmp	r3, #16
 8002d7e:	d119      	bne.n	8002db4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0210 	mvn.w	r2, #16
 8002d88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2220      	movs	r2, #32
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e030      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db4:	f7fe f9ea 	bl	800118c <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d302      	bcc.n	8002dca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d11d      	bne.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695b      	ldr	r3, [r3, #20]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b40      	cmp	r3, #64	@ 0x40
 8002dd6:	d016      	beq.n	8002e06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df2:	f043 0220 	orr.w	r2, r3, #32
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e007      	b.n	8002e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e10:	2b40      	cmp	r3, #64	@ 0x40
 8002e12:	d1ae      	bne.n	8002d72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e34:	d11b      	bne.n	8002e6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f043 0204 	orr.w	r2, r3, #4
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e000      	b.n	8002e70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe f92a 	bl	800118c <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe f926 	bl	800118c <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe f916 	bl	800118c <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe f912 	bl	800118c <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f8cb 	bl	800118c <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f8c7 	bl	800118c <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe f8aa 	bl	800118c <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe f8a6 	bl	800118c <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f88a 	bl	800118c <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe f886 	bl	800118c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe f873 	bl	800118c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe f86f 	bl	800118c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe f82f 	bl	800118c <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe f82b 	bl	800118c <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fd fff0 	bl	800118c <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fd ffec 	bl	800118c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fd ffda 	bl	800118c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fd ffd6 	bl	800118c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd ffaa 	bl	800118c <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd ffa6 	bl	800118c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fd ff7f 	bl	800118c <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003292:	f7fd ff7b 	bl	800118c <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fd ff68 	bl	800118c <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fd ff64 	bl	800118c <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fd fe96 	bl	800118c <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fd fe92 	bl	800118c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd fe0a 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	0801b988 	.word	0x0801b988
 8003530:	20000000 	.word	0x20000000
 8003534:	20000004 	.word	0x20000004

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b094      	sub	sp, #80	@ 0x50
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003544:	2300      	movs	r3, #0
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b79      	ldr	r3, [pc, #484]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80e1 	bhi.w	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e0db      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b73      	ldr	r3, [pc, #460]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 800356e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003570:	e0db      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b73      	ldr	r3, [pc, #460]	@ (8003740 <HAL_RCC_GetSysClockFreq+0x208>)
 8003574:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003576:	e0d8      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003580:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b6d      	ldr	r3, [pc, #436]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d063      	beq.n	8003656 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b6a      	ldr	r3, [pc, #424]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003598:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035a2:	2300      	movs	r3, #0
 80035a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4621      	mov	r1, r4
 80035c4:	1a51      	subs	r1, r2, r1
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035dc:	4659      	mov	r1, fp
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	4651      	mov	r1, sl
 80035e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e6:	4651      	mov	r1, sl
 80035e8:	018a      	lsls	r2, r1, #6
 80035ea:	4651      	mov	r1, sl
 80035ec:	ebb2 0801 	subs.w	r8, r2, r1
 80035f0:	4659      	mov	r1, fp
 80035f2:	eb63 0901 	sbc.w	r9, r3, r1
 80035f6:	f04f 0200 	mov.w	r2, #0
 80035fa:	f04f 0300 	mov.w	r3, #0
 80035fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003602:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003606:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800360a:	4690      	mov	r8, r2
 800360c:	4699      	mov	r9, r3
 800360e:	4623      	mov	r3, r4
 8003610:	eb18 0303 	adds.w	r3, r8, r3
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	462b      	mov	r3, r5
 8003618:	eb49 0303 	adc.w	r3, r9, r3
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800362a:	4629      	mov	r1, r5
 800362c:	024b      	lsls	r3, r1, #9
 800362e:	4621      	mov	r1, r4
 8003630:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003634:	4621      	mov	r1, r4
 8003636:	024a      	lsls	r2, r1, #9
 8003638:	4610      	mov	r0, r2
 800363a:	4619      	mov	r1, r3
 800363c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800363e:	2200      	movs	r2, #0
 8003640:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003642:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003644:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003648:	f7fd fbe6 	bl	8000e18 <__aeabi_uldivmod>
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4613      	mov	r3, r2
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	e058      	b.n	8003708 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003656:	4b38      	ldr	r3, [pc, #224]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	2200      	movs	r2, #0
 800365e:	4618      	mov	r0, r3
 8003660:	4611      	mov	r1, r2
 8003662:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003666:	623b      	str	r3, [r7, #32]
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	@ 0x24
 800366c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003670:	4642      	mov	r2, r8
 8003672:	464b      	mov	r3, r9
 8003674:	f04f 0000 	mov.w	r0, #0
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	0159      	lsls	r1, r3, #5
 800367e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003682:	0150      	lsls	r0, r2, #5
 8003684:	4602      	mov	r2, r0
 8003686:	460b      	mov	r3, r1
 8003688:	4641      	mov	r1, r8
 800368a:	ebb2 0a01 	subs.w	sl, r2, r1
 800368e:	4649      	mov	r1, r9
 8003690:	eb63 0b01 	sbc.w	fp, r3, r1
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036a8:	ebb2 040a 	subs.w	r4, r2, sl
 80036ac:	eb63 050b 	sbc.w	r5, r3, fp
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	00eb      	lsls	r3, r5, #3
 80036ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036be:	00e2      	lsls	r2, r4, #3
 80036c0:	4614      	mov	r4, r2
 80036c2:	461d      	mov	r5, r3
 80036c4:	4643      	mov	r3, r8
 80036c6:	18e3      	adds	r3, r4, r3
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	464b      	mov	r3, r9
 80036cc:	eb45 0303 	adc.w	r3, r5, r3
 80036d0:	607b      	str	r3, [r7, #4]
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	f04f 0300 	mov.w	r3, #0
 80036da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80036de:	4629      	mov	r1, r5
 80036e0:	028b      	lsls	r3, r1, #10
 80036e2:	4621      	mov	r1, r4
 80036e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80036e8:	4621      	mov	r1, r4
 80036ea:	028a      	lsls	r2, r1, #10
 80036ec:	4610      	mov	r0, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	2200      	movs	r2, #0
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	61fa      	str	r2, [r7, #28]
 80036f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036fc:	f7fd fb8c 	bl	8000e18 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x200>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0c1b      	lsrs	r3, r3, #16
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	3301      	adds	r3, #1
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003718:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800371a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800371c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003720:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003722:	e002      	b.n	800372a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003724:	4b05      	ldr	r3, [pc, #20]	@ (800373c <HAL_RCC_GetSysClockFreq+0x204>)
 8003726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800372a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800372c:	4618      	mov	r0, r3
 800372e:	3750      	adds	r7, #80	@ 0x50
 8003730:	46bd      	mov	sp, r7
 8003732:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	00f42400 	.word	0x00f42400
 8003740:	007a1200 	.word	0x007a1200

08003744 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003748:	4b03      	ldr	r3, [pc, #12]	@ (8003758 <HAL_RCC_GetHCLKFreq+0x14>)
 800374a:	681b      	ldr	r3, [r3, #0]
}
 800374c:	4618      	mov	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	20000000 	.word	0x20000000

0800375c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003760:	f7ff fff0 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003764:	4602      	mov	r2, r0
 8003766:	4b05      	ldr	r3, [pc, #20]	@ (800377c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	0a9b      	lsrs	r3, r3, #10
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	4903      	ldr	r1, [pc, #12]	@ (8003780 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003772:	5ccb      	ldrb	r3, [r1, r3]
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40023800 	.word	0x40023800
 8003780:	0801b998 	.word	0x0801b998

08003784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003788:	f7ff ffdc 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0b5b      	lsrs	r3, r3, #13
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4903      	ldr	r1, [pc, #12]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	0801b998 	.word	0x0801b998

080037ac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b088      	sub	sp, #32
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037bc:	f7fd fce6 	bl	800118c <HAL_GetTick>
 80037c0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80037c2:	88fb      	ldrh	r3, [r7, #6]
 80037c4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	e12a      	b.n	8003a2c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <HAL_SPI_Transmit+0x36>
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e122      	b.n	8003a2c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d101      	bne.n	80037f4 <HAL_SPI_Transmit+0x48>
 80037f0:	2302      	movs	r3, #2
 80037f2:	e11b      	b.n	8003a2c <HAL_SPI_Transmit+0x280>
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2203      	movs	r2, #3
 8003800:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	88fa      	ldrh	r2, [r7, #6]
 8003814:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003842:	d10f      	bne.n	8003864 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003852:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003862:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386e:	2b40      	cmp	r3, #64	@ 0x40
 8003870:	d007      	beq.n	8003882 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003880:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800388a:	d152      	bne.n	8003932 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_Transmit+0xee>
 8003894:	8b7b      	ldrh	r3, [r7, #26]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d145      	bne.n	8003926 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800389e:	881a      	ldrh	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038aa:	1c9a      	adds	r2, r3, #2
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038be:	e032      	b.n	8003926 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d112      	bne.n	80038f4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038f2:	e018      	b.n	8003926 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038f4:	f7fd fc4a 	bl	800118c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	429a      	cmp	r2, r3
 8003902:	d803      	bhi.n	800390c <HAL_SPI_Transmit+0x160>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d102      	bne.n	8003912 <HAL_SPI_Transmit+0x166>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e082      	b.n	8003a2c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1c7      	bne.n	80038c0 <HAL_SPI_Transmit+0x114>
 8003930:	e053      	b.n	80039da <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <HAL_SPI_Transmit+0x194>
 800393a:	8b7b      	ldrh	r3, [r7, #26]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d147      	bne.n	80039d0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	330c      	adds	r3, #12
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003966:	e033      	b.n	80039d0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b02      	cmp	r3, #2
 8003974:	d113      	bne.n	800399e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800399c:	e018      	b.n	80039d0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800399e:	f7fd fbf5 	bl	800118c <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d803      	bhi.n	80039b6 <HAL_SPI_Transmit+0x20a>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b4:	d102      	bne.n	80039bc <HAL_SPI_Transmit+0x210>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d109      	bne.n	80039d0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039cc:	2303      	movs	r3, #3
 80039ce:	e02d      	b.n	8003a2c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1c6      	bne.n	8003968 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	6839      	ldr	r1, [r7, #0]
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 fcea 	bl	80043b8 <SPI_EndRxTxTransaction>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2220      	movs	r2, #32
 80039ee:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10a      	bne.n	8003a0e <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3720      	adds	r7, #32
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d001      	beq.n	8003a54 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a50:	2302      	movs	r3, #2
 8003a52:	e104      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a5c:	d112      	bne.n	8003a84 <HAL_SPI_Receive+0x50>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	9300      	str	r3, [sp, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 f8f3 	bl	8003c66 <HAL_SPI_TransmitReceive>
 8003a80:	4603      	mov	r3, r0
 8003a82:	e0ec      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a84:	f7fd fb82 	bl	800118c <HAL_GetTick>
 8003a88:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_SPI_Receive+0x62>
 8003a90:	88fb      	ldrh	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d101      	bne.n	8003a9a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e0e1      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SPI_Receive+0x74>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0da      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2204      	movs	r2, #4
 8003ab4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	88fa      	ldrh	r2, [r7, #6]
 8003ace:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003af6:	d10f      	bne.n	8003b18 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b06:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b16:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b22:	2b40      	cmp	r3, #64	@ 0x40
 8003b24:	d007      	beq.n	8003b36 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b34:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d170      	bne.n	8003c20 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b3e:	e035      	b.n	8003bac <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d115      	bne.n	8003b7a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f103 020c 	add.w	r2, r3, #12
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b78:	e018      	b.n	8003bac <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b7a:	f7fd fb07 	bl	800118c <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d803      	bhi.n	8003b92 <HAL_SPI_Receive+0x15e>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Receive+0x164>
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e058      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1c4      	bne.n	8003b40 <HAL_SPI_Receive+0x10c>
 8003bb6:	e038      	b.n	8003c2a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0301 	and.w	r3, r3, #1
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d113      	bne.n	8003bee <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd0:	b292      	uxth	r2, r2
 8003bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bec:	e018      	b.n	8003c20 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bee:	f7fd facd 	bl	800118c <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <HAL_SPI_Receive+0x1d2>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Receive+0x1d8>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d109      	bne.n	8003c20 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e01e      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1c6      	bne.n	8003bb8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6839      	ldr	r1, [r7, #0]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 fb5c 	bl	80042ec <SPI_EndRxTransaction>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
  }
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b08a      	sub	sp, #40	@ 0x28
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
 8003c72:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c74:	2301      	movs	r3, #1
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c78:	f7fd fa88 	bl	800118c <HAL_GetTick>
 8003c7c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c84:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c90:	7ffb      	ldrb	r3, [r7, #31]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d00c      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x4a>
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c9c:	d106      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x46>
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d001      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
 8003cae:	e17f      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_SPI_TransmitReceive+0x5c>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <HAL_SPI_TransmitReceive+0x5c>
 8003cbc:	887b      	ldrh	r3, [r7, #2]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e174      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d101      	bne.n	8003cd4 <HAL_SPI_TransmitReceive+0x6e>
 8003cd0:	2302      	movs	r3, #2
 8003cd2:	e16d      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d003      	beq.n	8003cf0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2205      	movs	r2, #5
 8003cec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	887a      	ldrh	r2, [r7, #2]
 8003d06:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	887a      	ldrh	r2, [r7, #2]
 8003d12:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	887a      	ldrh	r2, [r7, #2]
 8003d18:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d30:	2b40      	cmp	r3, #64	@ 0x40
 8003d32:	d007      	beq.n	8003d44 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d42:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d4c:	d17e      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d002      	beq.n	8003d5c <HAL_SPI_TransmitReceive+0xf6>
 8003d56:	8afb      	ldrh	r3, [r7, #22]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d16c      	bne.n	8003e36 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d60:	881a      	ldrh	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6c:	1c9a      	adds	r2, r3, #2
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d80:	e059      	b.n	8003e36 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d11b      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x162>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d016      	beq.n	8003dc8 <HAL_SPI_TransmitReceive+0x162>
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d113      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da4:	881a      	ldrh	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db0:	1c9a      	adds	r2, r3, #2
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d119      	bne.n	8003e0a <HAL_SPI_TransmitReceive+0x1a4>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d014      	beq.n	8003e0a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	b292      	uxth	r2, r2
 8003dec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	1c9a      	adds	r2, r3, #2
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e06:	2301      	movs	r3, #1
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003e0a:	f7fd f9bf 	bl	800118c <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d80d      	bhi.n	8003e36 <HAL_SPI_TransmitReceive+0x1d0>
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e20:	d009      	beq.n	8003e36 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e0bc      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1a0      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x11c>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d19b      	bne.n	8003d82 <HAL_SPI_TransmitReceive+0x11c>
 8003e4a:	e082      	b.n	8003f52 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d002      	beq.n	8003e5a <HAL_SPI_TransmitReceive+0x1f4>
 8003e54:	8afb      	ldrh	r3, [r7, #22]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d171      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	7812      	ldrb	r2, [r2, #0]
 8003e66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e80:	e05d      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d11c      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x264>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d017      	beq.n	8003eca <HAL_SPI_TransmitReceive+0x264>
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d114      	bne.n	8003eca <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	7812      	ldrb	r2, [r2, #0]
 8003eac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d119      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x2a6>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d014      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f0c:	f7fd f93e 	bl	800118c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d803      	bhi.n	8003f24 <HAL_SPI_TransmitReceive+0x2be>
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d102      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x2c4>
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e038      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d19c      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x21c>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d197      	bne.n	8003e82 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fa2e 	bl	80043b8 <SPI_EndRxTxTransaction>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e01d      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	613b      	str	r3, [r7, #16]
 8003f90:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003fae:	2300      	movs	r3, #0
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3728      	adds	r7, #40	@ 0x28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b088      	sub	sp, #32
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d009      	beq.n	8003ff8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d004      	beq.n	8003ff8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	4798      	blx	r3
    return;
 8003ff6:	e0ce      	b.n	8004196 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_SPI_IRQHandler+0x5e>
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
    return;
 8004014:	e0bf      	b.n	8004196 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_SPI_IRQHandler+0x7e>
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d105      	bne.n	8004036 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80b0 	beq.w	8004196 <HAL_SPI_IRQHandler+0x1de>
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	f003 0320 	and.w	r3, r3, #32
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80aa 	beq.w	8004196 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004048:	2b00      	cmp	r3, #0
 800404a:	d023      	beq.n	8004094 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b03      	cmp	r3, #3
 8004056:	d011      	beq.n	800407c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	e00b      	b.n	8004094 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800407c:	2300      	movs	r3, #0
 800407e:	613b      	str	r3, [r7, #16]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	693b      	ldr	r3, [r7, #16]
        return;
 8004092:	e080      	b.n	8004196 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d014      	beq.n	80040c8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a2:	f043 0201 	orr.w	r2, r3, #1
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00c      	beq.n	80040ec <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d6:	f043 0208 	orr.w	r2, r3, #8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d04f      	beq.n	8004194 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004102:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d104      	bne.n	8004120 <HAL_SPI_IRQHandler+0x168>
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b00      	cmp	r3, #0
 800411e:	d034      	beq.n	800418a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0203 	bic.w	r2, r2, #3
 800412e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d011      	beq.n	800415c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413c:	4a17      	ldr	r2, [pc, #92]	@ (800419c <HAL_SPI_IRQHandler+0x1e4>)
 800413e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004144:	4618      	mov	r0, r3
 8004146:	f7fd fa15 	bl	8001574 <HAL_DMA_Abort_IT>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004154:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004160:	2b00      	cmp	r3, #0
 8004162:	d016      	beq.n	8004192 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004168:	4a0c      	ldr	r2, [pc, #48]	@ (800419c <HAL_SPI_IRQHandler+0x1e4>)
 800416a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004170:	4618      	mov	r0, r3
 8004172:	f7fd f9ff 	bl	8001574 <HAL_DMA_Abort_IT>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004180:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004188:	e003      	b.n	8004192 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f808 	bl	80041a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004190:	e000      	b.n	8004194 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004192:	bf00      	nop
    return;
 8004194:	bf00      	nop
  }
}
 8004196:	3720      	adds	r7, #32
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	080041b5 	.word	0x080041b5

080041a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff ffe6 	bl	80041a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041d4:	bf00      	nop
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b088      	sub	sp, #32
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	4613      	mov	r3, r2
 80041ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041ec:	f7fc ffce 	bl	800118c <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	4413      	add	r3, r2
 80041fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041fc:	f7fc ffc6 	bl	800118c <HAL_GetTick>
 8004200:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004202:	4b39      	ldr	r3, [pc, #228]	@ (80042e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	015b      	lsls	r3, r3, #5
 8004208:	0d1b      	lsrs	r3, r3, #20
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004212:	e054      	b.n	80042be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421a:	d050      	beq.n	80042be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800421c:	f7fc ffb6 	bl	800118c <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	429a      	cmp	r2, r3
 800422a:	d902      	bls.n	8004232 <SPI_WaitFlagStateUntilTimeout+0x56>
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d13d      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004240:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424a:	d111      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x94>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004254:	d004      	beq.n	8004260 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800425e:	d107      	bne.n	8004270 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800426e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004274:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004278:	d10f      	bne.n	800429a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004298:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e017      	b.n	80042de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4013      	ands	r3, r2
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d19b      	bne.n	8004214 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3720      	adds	r7, #32
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000000 	.word	0x20000000

080042ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004300:	d111      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800430a:	d004      	beq.n	8004316 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004314:	d107      	bne.n	8004326 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004324:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800432e:	d12a      	bne.n	8004386 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004338:	d012      	beq.n	8004360 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	2200      	movs	r2, #0
 8004342:	2180      	movs	r1, #128	@ 0x80
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff49 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d02d      	beq.n	80043ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f043 0220 	orr.w	r2, r3, #32
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e026      	b.n	80043ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	2101      	movs	r1, #1
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f7ff ff36 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d01a      	beq.n	80043ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437a:	f043 0220 	orr.w	r2, r3, #32
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e013      	b.n	80043ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	2200      	movs	r2, #0
 800438e:	2101      	movs	r1, #1
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f7ff ff23 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d007      	beq.n	80043ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a0:	f043 0220 	orr.w	r2, r3, #32
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e000      	b.n	80043ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
	...

080043b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af02      	add	r7, sp, #8
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	2201      	movs	r2, #1
 80043cc:	2102      	movs	r1, #2
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f7ff ff04 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d007      	beq.n	80043ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e032      	b.n	8004450 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004458 <SPI_EndRxTxTransaction+0xa0>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1b      	ldr	r2, [pc, #108]	@ (800445c <SPI_EndRxTxTransaction+0xa4>)
 80043f0:	fba2 2303 	umull	r2, r3, r2, r3
 80043f4:	0d5b      	lsrs	r3, r3, #21
 80043f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043fa:	fb02 f303 	mul.w	r3, r2, r3
 80043fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004408:	d112      	bne.n	8004430 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2200      	movs	r2, #0
 8004412:	2180      	movs	r1, #128	@ 0x80
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fee1 	bl	80041dc <SPI_WaitFlagStateUntilTimeout>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d016      	beq.n	800444e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	f043 0220 	orr.w	r2, r3, #32
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e00f      	b.n	8004450 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	3b01      	subs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004446:	2b80      	cmp	r3, #128	@ 0x80
 8004448:	d0f2      	beq.n	8004430 <SPI_EndRxTxTransaction+0x78>
 800444a:	e000      	b.n	800444e <SPI_EndRxTxTransaction+0x96>
        break;
 800444c:	bf00      	nop
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000000 	.word	0x20000000
 800445c:	165e9f81 	.word	0x165e9f81

08004460 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e041      	b.n	80044f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f006 fca4 	bl	800add4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	3304      	adds	r3, #4
 800449c:	4619      	mov	r1, r3
 800449e:	4610      	mov	r0, r2
 80044a0:	f000 fc58 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d001      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e04e      	b.n	80045b6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a23      	ldr	r2, [pc, #140]	@ (80045c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d022      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d01d      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1f      	ldr	r2, [pc, #124]	@ (80045c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d018      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a19      	ldr	r2, [pc, #100]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a18      	ldr	r2, [pc, #96]	@ (80045dc <HAL_TIM_Base_Start_IT+0xdc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d111      	bne.n	80045a4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d010      	beq.n	80045b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a2:	e007      	b.n	80045b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40001800 	.word	0x40001800

080045e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e041      	b.n	8004676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f006 fa00 	bl	800aa0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 fb98 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d109      	bne.n	80046a4 <HAL_TIM_PWM_Start+0x24>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b01      	cmp	r3, #1
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e022      	b.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d109      	bne.n	80046be <HAL_TIM_PWM_Start+0x3e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	e015      	b.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b08      	cmp	r3, #8
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x58>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e008      	b.n	80046ea <HAL_TIM_PWM_Start+0x6a>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	bf14      	ite	ne
 80046e4:	2301      	movne	r3, #1
 80046e6:	2300      	moveq	r3, #0
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d001      	beq.n	80046f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e07c      	b.n	80047ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0x82>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004700:	e013      	b.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b04      	cmp	r3, #4
 8004706:	d104      	bne.n	8004712 <HAL_TIM_PWM_Start+0x92>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004710:	e00b      	b.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b08      	cmp	r3, #8
 8004716:	d104      	bne.n	8004722 <HAL_TIM_PWM_Start+0xa2>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2202      	movs	r2, #2
 800471c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004720:	e003      	b.n	800472a <HAL_TIM_PWM_Start+0xaa>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2202      	movs	r2, #2
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2201      	movs	r2, #1
 8004730:	6839      	ldr	r1, [r7, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 fe04 	bl	8005340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2d      	ldr	r2, [pc, #180]	@ (80047f4 <HAL_TIM_PWM_Start+0x174>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <HAL_TIM_PWM_Start+0xcc>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2c      	ldr	r2, [pc, #176]	@ (80047f8 <HAL_TIM_PWM_Start+0x178>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d101      	bne.n	8004750 <HAL_TIM_PWM_Start+0xd0>
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_TIM_PWM_Start+0xd2>
 8004750:	2300      	movs	r3, #0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d007      	beq.n	8004766 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004764:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a22      	ldr	r2, [pc, #136]	@ (80047f4 <HAL_TIM_PWM_Start+0x174>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d022      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004778:	d01d      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <HAL_TIM_PWM_Start+0x17c>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d018      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <HAL_TIM_PWM_Start+0x180>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d013      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1c      	ldr	r2, [pc, #112]	@ (8004804 <HAL_TIM_PWM_Start+0x184>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d00e      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a16      	ldr	r2, [pc, #88]	@ (80047f8 <HAL_TIM_PWM_Start+0x178>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d009      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <HAL_TIM_PWM_Start+0x188>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d004      	beq.n	80047b6 <HAL_TIM_PWM_Start+0x136>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a16      	ldr	r2, [pc, #88]	@ (800480c <HAL_TIM_PWM_Start+0x18c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d111      	bne.n	80047da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2b06      	cmp	r3, #6
 80047c6:	d010      	beq.n	80047ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047d8:	e007      	b.n	80047ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0201 	orr.w	r2, r2, #1
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000
 800480c:	40001800 	.word	0x40001800

08004810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d020      	beq.n	8004874 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01b      	beq.n	8004874 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0202 	mvn.w	r2, #2
 8004844:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa5b 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa4d 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa5e 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 0304 	and.w	r3, r3, #4
 800487a:	2b00      	cmp	r3, #0
 800487c:	d020      	beq.n	80048c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d01b      	beq.n	80048c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f06f 0204 	mvn.w	r2, #4
 8004890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d003      	beq.n	80048ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fa35 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 80048ac:	e005      	b.n	80048ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa27 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fa38 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d020      	beq.n	800490c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f003 0308 	and.w	r3, r3, #8
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d01b      	beq.n	800490c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f06f 0208 	mvn.w	r2, #8
 80048dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2204      	movs	r2, #4
 80048e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	69db      	ldr	r3, [r3, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d003      	beq.n	80048fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fa0f 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 80048f8:	e005      	b.n	8004906 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa01 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 fa12 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d020      	beq.n	8004958 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f003 0310 	and.w	r3, r3, #16
 800491c:	2b00      	cmp	r3, #0
 800491e:	d01b      	beq.n	8004958 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0210 	mvn.w	r2, #16
 8004928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2208      	movs	r2, #8
 800492e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	69db      	ldr	r3, [r3, #28]
 8004936:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f9e9 	bl	8004d16 <HAL_TIM_IC_CaptureCallback>
 8004944:	e005      	b.n	8004952 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f9db 	bl	8004d02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f9ec 	bl	8004d2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00c      	beq.n	800497c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d007      	beq.n	800497c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f06f 0201 	mvn.w	r2, #1
 8004974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f004 fb62 	bl	8009040 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00c      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d007      	beq.n	80049a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004998:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 fd7c 	bl	8005498 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00c      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9bd 	bl	8004d3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00c      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d007      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0220 	mvn.w	r2, #32
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fd4e 	bl	8005484 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049fc:	2300      	movs	r3, #0
 80049fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d101      	bne.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	e0ae      	b.n	8004b6c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b0c      	cmp	r3, #12
 8004a1a:	f200 809f 	bhi.w	8004b5c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a24:	08004a59 	.word	0x08004a59
 8004a28:	08004b5d 	.word	0x08004b5d
 8004a2c:	08004b5d 	.word	0x08004b5d
 8004a30:	08004b5d 	.word	0x08004b5d
 8004a34:	08004a99 	.word	0x08004a99
 8004a38:	08004b5d 	.word	0x08004b5d
 8004a3c:	08004b5d 	.word	0x08004b5d
 8004a40:	08004b5d 	.word	0x08004b5d
 8004a44:	08004adb 	.word	0x08004adb
 8004a48:	08004b5d 	.word	0x08004b5d
 8004a4c:	08004b5d 	.word	0x08004b5d
 8004a50:	08004b5d 	.word	0x08004b5d
 8004a54:	08004b1b 	.word	0x08004b1b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fa24 	bl	8004eac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699a      	ldr	r2, [r3, #24]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0208 	orr.w	r2, r2, #8
 8004a72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699a      	ldr	r2, [r3, #24]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0204 	bic.w	r2, r2, #4
 8004a82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6999      	ldr	r1, [r3, #24]
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	619a      	str	r2, [r3, #24]
      break;
 8004a96:	e064      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fa74 	bl	8004f8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699a      	ldr	r2, [r3, #24]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ab2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	699a      	ldr	r2, [r3, #24]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ac2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6999      	ldr	r1, [r3, #24]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	021a      	lsls	r2, r3, #8
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	619a      	str	r2, [r3, #24]
      break;
 8004ad8:	e043      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68b9      	ldr	r1, [r7, #8]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 fac9 	bl	8005078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0208 	orr.w	r2, r2, #8
 8004af4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69da      	ldr	r2, [r3, #28]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0204 	bic.w	r2, r2, #4
 8004b04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	69d9      	ldr	r1, [r3, #28]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	430a      	orrs	r2, r1
 8004b16:	61da      	str	r2, [r3, #28]
      break;
 8004b18:	e023      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fb1d 	bl	8005160 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69da      	ldr	r2, [r3, #28]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	69da      	ldr	r2, [r3, #28]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69d9      	ldr	r1, [r3, #28]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	021a      	lsls	r2, r3, #8
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	61da      	str	r2, [r3, #28]
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d101      	bne.n	8004b90 <HAL_TIM_ConfigClockSource+0x1c>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0b4      	b.n	8004cfa <HAL_TIM_ConfigClockSource+0x186>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004bb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bc8:	d03e      	beq.n	8004c48 <HAL_TIM_ConfigClockSource+0xd4>
 8004bca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004bce:	f200 8087 	bhi.w	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bd6:	f000 8086 	beq.w	8004ce6 <HAL_TIM_ConfigClockSource+0x172>
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bde:	d87f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be0:	2b70      	cmp	r3, #112	@ 0x70
 8004be2:	d01a      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xa6>
 8004be4:	2b70      	cmp	r3, #112	@ 0x70
 8004be6:	d87b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b60      	cmp	r3, #96	@ 0x60
 8004bea:	d050      	beq.n	8004c8e <HAL_TIM_ConfigClockSource+0x11a>
 8004bec:	2b60      	cmp	r3, #96	@ 0x60
 8004bee:	d877      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b50      	cmp	r3, #80	@ 0x50
 8004bf2:	d03c      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xfa>
 8004bf4:	2b50      	cmp	r3, #80	@ 0x50
 8004bf6:	d873      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b40      	cmp	r3, #64	@ 0x40
 8004bfa:	d058      	beq.n	8004cae <HAL_TIM_ConfigClockSource+0x13a>
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d86f      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b30      	cmp	r3, #48	@ 0x30
 8004c02:	d064      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c04:	2b30      	cmp	r3, #48	@ 0x30
 8004c06:	d86b      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d060      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d867      	bhi.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d05c      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c14:	2b10      	cmp	r3, #16
 8004c16:	d05a      	beq.n	8004cce <HAL_TIM_ConfigClockSource+0x15a>
 8004c18:	e062      	b.n	8004ce0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c2a:	f000 fb69 	bl	8005300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]
      break;
 8004c46:	e04f      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c58:	f000 fb52 	bl	8005300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689a      	ldr	r2, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004c6a:	609a      	str	r2, [r3, #8]
      break;
 8004c6c:	e03c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	f000 fac6 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2150      	movs	r1, #80	@ 0x50
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fb1f 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004c8c:	e02c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f000 fae5 	bl	800526a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2160      	movs	r1, #96	@ 0x60
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fb0f 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004cac:	e01c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cba:	461a      	mov	r2, r3
 8004cbc:	f000 faa6 	bl	800520c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2140      	movs	r1, #64	@ 0x40
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 faff 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004ccc:	e00c      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	4610      	mov	r0, r2
 8004cda:	f000 faf6 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8004cde:	e003      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e000      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b083      	sub	sp, #12
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0a:	bf00      	nop
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b083      	sub	sp, #12
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b083      	sub	sp, #12
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a46      	ldr	r2, [pc, #280]	@ (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d72:	d00f      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a43      	ldr	r2, [pc, #268]	@ (8004e84 <TIM_Base_SetConfig+0x130>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a42      	ldr	r2, [pc, #264]	@ (8004e88 <TIM_Base_SetConfig+0x134>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a41      	ldr	r2, [pc, #260]	@ (8004e8c <TIM_Base_SetConfig+0x138>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a40      	ldr	r2, [pc, #256]	@ (8004e90 <TIM_Base_SetConfig+0x13c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d108      	bne.n	8004da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a35      	ldr	r2, [pc, #212]	@ (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02b      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db4:	d027      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a32      	ldr	r2, [pc, #200]	@ (8004e84 <TIM_Base_SetConfig+0x130>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d023      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	@ (8004e88 <TIM_Base_SetConfig+0x134>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01f      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a30      	ldr	r2, [pc, #192]	@ (8004e8c <TIM_Base_SetConfig+0x138>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01b      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8004e90 <TIM_Base_SetConfig+0x13c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d017      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <TIM_Base_SetConfig+0x140>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e98 <TIM_Base_SetConfig+0x144>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00f      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e9c <TIM_Base_SetConfig+0x148>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <TIM_Base_SetConfig+0x14c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea4 <TIM_Base_SetConfig+0x150>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a29      	ldr	r2, [pc, #164]	@ (8004ea8 <TIM_Base_SetConfig+0x154>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d108      	bne.n	8004e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a10      	ldr	r2, [pc, #64]	@ (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0xf8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <TIM_Base_SetConfig+0x13c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f023 0201 	bic.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]
  }
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40001800 	.word	0x40001800
 8004ea4:	40001c00 	.word	0x40001c00
 8004ea8:	40002000 	.word	0x40002000

08004eac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f023 0201 	bic.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 0303 	bic.w	r3, r3, #3
 8004ee2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f023 0302 	bic.w	r3, r3, #2
 8004ef4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a20      	ldr	r2, [pc, #128]	@ (8004f84 <TIM_OC1_SetConfig+0xd8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d003      	beq.n	8004f10 <TIM_OC1_SetConfig+0x64>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f88 <TIM_OC1_SetConfig+0xdc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d10c      	bne.n	8004f2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0308 	bic.w	r3, r3, #8
 8004f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f023 0304 	bic.w	r3, r3, #4
 8004f28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <TIM_OC1_SetConfig+0xd8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d003      	beq.n	8004f3a <TIM_OC1_SetConfig+0x8e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a14      	ldr	r2, [pc, #80]	@ (8004f88 <TIM_OC1_SetConfig+0xdc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d111      	bne.n	8004f5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	621a      	str	r2, [r3, #32]
}
 8004f78:	bf00      	nop
 8004f7a:	371c      	adds	r7, #28
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	40010000 	.word	0x40010000
 8004f88:	40010400 	.word	0x40010400

08004f8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a1b      	ldr	r3, [r3, #32]
 8004fa0:	f023 0210 	bic.w	r2, r3, #16
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f023 0320 	bic.w	r3, r3, #32
 8004fd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a22      	ldr	r2, [pc, #136]	@ (8005070 <TIM_OC2_SetConfig+0xe4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC2_SetConfig+0x68>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <TIM_OC2_SetConfig+0xe8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d10d      	bne.n	8005010 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ffa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800500e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a17      	ldr	r2, [pc, #92]	@ (8005070 <TIM_OC2_SetConfig+0xe4>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d003      	beq.n	8005020 <TIM_OC2_SetConfig+0x94>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4a16      	ldr	r2, [pc, #88]	@ (8005074 <TIM_OC2_SetConfig+0xe8>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d113      	bne.n	8005048 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005026:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	bf00      	nop
 8005064:	371c      	adds	r7, #28
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40010000 	.word	0x40010000
 8005074:	40010400 	.word	0x40010400

08005078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005078:	b480      	push	{r7}
 800507a:	b087      	sub	sp, #28
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a21      	ldr	r2, [pc, #132]	@ (8005158 <TIM_OC3_SetConfig+0xe0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC3_SetConfig+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a20      	ldr	r2, [pc, #128]	@ (800515c <TIM_OC3_SetConfig+0xe4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d10d      	bne.n	80050fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a16      	ldr	r2, [pc, #88]	@ (8005158 <TIM_OC3_SetConfig+0xe0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d003      	beq.n	800510a <TIM_OC3_SetConfig+0x92>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a15      	ldr	r2, [pc, #84]	@ (800515c <TIM_OC3_SetConfig+0xe4>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d113      	bne.n	8005132 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	4313      	orrs	r3, r2
 8005124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	693a      	ldr	r2, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	621a      	str	r2, [r3, #32]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	40010000 	.word	0x40010000
 800515c:	40010400 	.word	0x40010400

08005160 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005160:	b480      	push	{r7}
 8005162:	b087      	sub	sp, #28
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800518e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005196:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	021b      	lsls	r3, r3, #8
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	031b      	lsls	r3, r3, #12
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	4a12      	ldr	r2, [pc, #72]	@ (8005204 <TIM_OC4_SetConfig+0xa4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d003      	beq.n	80051c8 <TIM_OC4_SetConfig+0x68>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a11      	ldr	r2, [pc, #68]	@ (8005208 <TIM_OC4_SetConfig+0xa8>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d109      	bne.n	80051dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	019b      	lsls	r3, r3, #6
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	621a      	str	r2, [r3, #32]
}
 80051f6:	bf00      	nop
 80051f8:	371c      	adds	r7, #28
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	40010000 	.word	0x40010000
 8005208:	40010400 	.word	0x40010400

0800520c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	f023 0201 	bic.w	r2, r3, #1
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005236:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f023 030a 	bic.w	r3, r3, #10
 8005248:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4313      	orrs	r3, r2
 8005250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	60f8      	str	r0, [r7, #12]
 8005272:	60b9      	str	r1, [r7, #8]
 8005274:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	f023 0210 	bic.w	r2, r3, #16
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	031b      	lsls	r3, r3, #12
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80052a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	011b      	lsls	r3, r3, #4
 80052ac:	697a      	ldr	r2, [r7, #20]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	621a      	str	r2, [r3, #32]
}
 80052be:	bf00      	nop
 80052c0:	371c      	adds	r7, #28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f043 0307 	orr.w	r3, r3, #7
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800531a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	021a      	lsls	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	431a      	orrs	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2201      	movs	r2, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	431a      	orrs	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e05a      	b.n	800545a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d022      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f0:	d01d      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1d      	ldr	r2, [pc, #116]	@ (800546c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d018      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a1b      	ldr	r2, [pc, #108]	@ (8005470 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d013      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a1a      	ldr	r2, [pc, #104]	@ (8005474 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d00e      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a18      	ldr	r2, [pc, #96]	@ (8005478 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a17      	ldr	r2, [pc, #92]	@ (800547c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d004      	beq.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a15      	ldr	r2, [pc, #84]	@ (8005480 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d10c      	bne.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005434:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	4313      	orrs	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40010000 	.word	0x40010000
 800546c:	40000400 	.word	0x40000400
 8005470:	40000800 	.word	0x40000800
 8005474:	40000c00 	.word	0x40000c00
 8005478:	40010400 	.word	0x40010400
 800547c:	40014000 	.word	0x40014000
 8005480:	40001800 	.word	0x40001800

08005484 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e042      	b.n	8005544 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f005 fcd0 	bl	800ae78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2224      	movs	r2, #36	@ 0x24
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 fa95 	bl	8005a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	695a      	ldr	r2, [r3, #20]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68da      	ldr	r2, [r3, #12]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b20      	cmp	r3, #32
 8005564:	d112      	bne.n	800558c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <HAL_UART_Receive_DMA+0x26>
 800556c:	88fb      	ldrh	r3, [r7, #6]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d101      	bne.n	8005576 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e00b      	b.n	800558e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800557c:	88fb      	ldrh	r3, [r7, #6]
 800557e:	461a      	mov	r2, r3
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f000 f926 	bl	80057d4 <UART_Start_Receive_DMA>
 8005588:	4603      	mov	r3, r0
 800558a:	e000      	b.n	800558e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800558c:	2302      	movs	r3, #2
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	3710      	adds	r7, #16
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b09c      	sub	sp, #112	@ 0x70
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d172      	bne.n	80056d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80055f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f4:	2200      	movs	r2, #0
 80055f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005608:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800560a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800560e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005618:	65ba      	str	r2, [r7, #88]	@ 0x58
 800561a:	657b      	str	r3, [r7, #84]	@ 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800561e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005620:	e841 2300 	strex	r3, r2, [r1]
 8005624:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1e5      	bne.n	80055f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	3314      	adds	r3, #20
 8005632:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	e853 3f00 	ldrex	r3, [r3]
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800563c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800563e:	f023 0301 	bic.w	r3, r3, #1
 8005642:	667b      	str	r3, [r7, #100]	@ 0x64
 8005644:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3314      	adds	r3, #20
 800564a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800564c:	647a      	str	r2, [r7, #68]	@ 0x44
 800564e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005652:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800565a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e5      	bne.n	800562c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	3314      	adds	r3, #20
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800566a:	e853 3f00 	ldrex	r3, [r3]
 800566e:	623b      	str	r3, [r7, #32]
   return(result);
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005676:	663b      	str	r3, [r7, #96]	@ 0x60
 8005678:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	3314      	adds	r3, #20
 800567e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005680:	633a      	str	r2, [r7, #48]	@ 0x30
 8005682:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005684:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005688:	e841 2300 	strex	r3, r2, [r1]
 800568c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800568e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1e5      	bne.n	8005660 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800569c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800569e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d119      	bne.n	80056d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0310 	bic.w	r3, r3, #16
 80056ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80056c4:	61fa      	str	r2, [r7, #28]
 80056c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69b9      	ldr	r1, [r7, #24]
 80056ca:	69fa      	ldr	r2, [r7, #28]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	617b      	str	r3, [r7, #20]
   return(result);
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056da:	2200      	movs	r2, #0
 80056dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d106      	bne.n	80056f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80056ea:	4619      	mov	r1, r3
 80056ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056ee:	f7ff ff66 	bl	80055be <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056f2:	e002      	b.n	80056fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80056f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80056f6:	f003 fcc3 	bl	8009080 <HAL_UART_RxCpltCallback>
}
 80056fa:	bf00      	nop
 80056fc:	3770      	adds	r7, #112	@ 0x70
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b084      	sub	sp, #16
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800570e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800571a:	2b01      	cmp	r3, #1
 800571c:	d108      	bne.n	8005730 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005722:	085b      	lsrs	r3, r3, #1
 8005724:	b29b      	uxth	r3, r3
 8005726:	4619      	mov	r1, r3
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff48 	bl	80055be <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800572e:	e002      	b.n	8005736 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005730:	68f8      	ldr	r0, [r7, #12]
 8005732:	f7ff ff30 	bl	8005596 <HAL_UART_RxHalfCpltCallback>
}
 8005736:	bf00      	nop
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800575a:	2b80      	cmp	r3, #128	@ 0x80
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b21      	cmp	r3, #33	@ 0x21
 8005770:	d108      	bne.n	8005784 <UART_DMAError+0x46>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d005      	beq.n	8005784 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2200      	movs	r2, #0
 800577c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800577e:	68b8      	ldr	r0, [r7, #8]
 8005780:	f000 f8c2 	bl	8005908 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800578e:	2b40      	cmp	r3, #64	@ 0x40
 8005790:	bf0c      	ite	eq
 8005792:	2301      	moveq	r3, #1
 8005794:	2300      	movne	r3, #0
 8005796:	b2db      	uxtb	r3, r3
 8005798:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b22      	cmp	r3, #34	@ 0x22
 80057a4:	d108      	bne.n	80057b8 <UART_DMAError+0x7a>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80057b2:	68b8      	ldr	r0, [r7, #8]
 80057b4:	f000 f8d0 	bl	8005958 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057bc:	f043 0210 	orr.w	r2, r3, #16
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057c4:	68b8      	ldr	r0, [r7, #8]
 80057c6:	f7ff fef0 	bl	80055aa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057ca:	bf00      	nop
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b098      	sub	sp, #96	@ 0x60
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	4613      	mov	r3, r2
 80057e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	88fa      	ldrh	r2, [r7, #6]
 80057ec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2222      	movs	r2, #34	@ 0x22
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005800:	4a3e      	ldr	r2, [pc, #248]	@ (80058fc <UART_Start_Receive_DMA+0x128>)
 8005802:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005808:	4a3d      	ldr	r2, [pc, #244]	@ (8005900 <UART_Start_Receive_DMA+0x12c>)
 800580a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005810:	4a3c      	ldr	r2, [pc, #240]	@ (8005904 <UART_Start_Receive_DMA+0x130>)
 8005812:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005818:	2200      	movs	r2, #0
 800581a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800581c:	f107 0308 	add.w	r3, r7, #8
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3304      	adds	r3, #4
 800582c:	4619      	mov	r1, r3
 800582e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	f7fb fe46 	bl	80014c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005838:	2300      	movs	r3, #0
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	613b      	str	r3, [r7, #16]
 800584c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d019      	beq.n	800588a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005868:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800586c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	330c      	adds	r3, #12
 8005874:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005876:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005878:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800587c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005884:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1e5      	bne.n	8005856 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005894:	e853 3f00 	ldrex	r3, [r3]
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	f043 0301 	orr.w	r3, r3, #1
 80058a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	3314      	adds	r3, #20
 80058a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1e5      	bne.n	800588a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	3314      	adds	r3, #20
 80058c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	e853 3f00 	ldrex	r3, [r3]
 80058cc:	617b      	str	r3, [r7, #20]
   return(result);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3314      	adds	r3, #20
 80058dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80058de:	627a      	str	r2, [r7, #36]	@ 0x24
 80058e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e2:	6a39      	ldr	r1, [r7, #32]
 80058e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058e6:	e841 2300 	strex	r3, r2, [r1]
 80058ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1e5      	bne.n	80058be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3760      	adds	r7, #96	@ 0x60
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}
 80058fc:	080055d7 	.word	0x080055d7
 8005900:	08005703 	.word	0x08005703
 8005904:	0800573f 	.word	0x0800573f

08005908 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	@ 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005926:	61fb      	str	r3, [r7, #28]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	69fa      	ldr	r2, [r7, #28]
 8005930:	61ba      	str	r2, [r7, #24]
 8005932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005934:	6979      	ldr	r1, [r7, #20]
 8005936:	69ba      	ldr	r2, [r7, #24]
 8005938:	e841 2300 	strex	r3, r2, [r1]
 800593c:	613b      	str	r3, [r7, #16]
   return(result);
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1e5      	bne.n	8005910 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800594c:	bf00      	nop
 800594e:	3724      	adds	r7, #36	@ 0x24
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b095      	sub	sp, #84	@ 0x54
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005976:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005980:	643a      	str	r2, [r7, #64]	@ 0x40
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005986:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800598e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3314      	adds	r3, #20
 800599a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3314      	adds	r3, #20
 80059b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d119      	bne.n	8005a04 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	330c      	adds	r3, #12
 80059ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059f0:	61ba      	str	r2, [r7, #24]
 80059f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	613b      	str	r3, [r7, #16]
   return(result);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e5      	bne.n	80059d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2220      	movs	r2, #32
 8005a08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a12:	bf00      	nop
 8005a14:	3754      	adds	r7, #84	@ 0x54
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a24:	b0c0      	sub	sp, #256	@ 0x100
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	691b      	ldr	r3, [r3, #16]
 8005a34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a3c:	68d9      	ldr	r1, [r3, #12]
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	ea40 0301 	orr.w	r3, r0, r1
 8005a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4e:	689a      	ldr	r2, [r3, #8]
 8005a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	431a      	orrs	r2, r3
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a64:	69db      	ldr	r3, [r3, #28]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a78:	f021 010c 	bic.w	r1, r1, #12
 8005a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a86:	430b      	orrs	r3, r1
 8005a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9a:	6999      	ldr	r1, [r3, #24]
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	ea40 0301 	orr.w	r3, r0, r1
 8005aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b8f      	ldr	r3, [pc, #572]	@ (8005cec <UART_SetConfig+0x2cc>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d005      	beq.n	8005ac0 <UART_SetConfig+0xa0>
 8005ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	4b8d      	ldr	r3, [pc, #564]	@ (8005cf0 <UART_SetConfig+0x2d0>)
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d104      	bne.n	8005aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ac0:	f7fd fe60 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 8005ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ac8:	e003      	b.n	8005ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005aca:	f7fd fe47 	bl	800375c <HAL_RCC_GetPCLK1Freq>
 8005ace:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005adc:	f040 810c 	bne.w	8005cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005aea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	1891      	adds	r1, r2, r2
 8005af8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005afa:	415b      	adcs	r3, r3
 8005afc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b02:	4621      	mov	r1, r4
 8005b04:	eb12 0801 	adds.w	r8, r2, r1
 8005b08:	4629      	mov	r1, r5
 8005b0a:	eb43 0901 	adc.w	r9, r3, r1
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	eb18 0303 	adds.w	r3, r8, r3
 8005b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b30:	462b      	mov	r3, r5
 8005b32:	eb49 0303 	adc.w	r3, r9, r3
 8005b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b4e:	460b      	mov	r3, r1
 8005b50:	18db      	adds	r3, r3, r3
 8005b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b54:	4613      	mov	r3, r2
 8005b56:	eb42 0303 	adc.w	r3, r2, r3
 8005b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005b64:	f7fb f958 	bl	8000e18 <__aeabi_uldivmod>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	4b61      	ldr	r3, [pc, #388]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005b72:	095b      	lsrs	r3, r3, #5
 8005b74:	011c      	lsls	r4, r3, #4
 8005b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	1891      	adds	r1, r2, r2
 8005b8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b90:	415b      	adcs	r3, r3
 8005b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b98:	4641      	mov	r1, r8
 8005b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bb8:	4692      	mov	sl, r2
 8005bba:	469b      	mov	fp, r3
 8005bbc:	4643      	mov	r3, r8
 8005bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8005bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005bc6:	464b      	mov	r3, r9
 8005bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8005bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005be4:	460b      	mov	r3, r1
 8005be6:	18db      	adds	r3, r3, r3
 8005be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005bea:	4613      	mov	r3, r2
 8005bec:	eb42 0303 	adc.w	r3, r2, r3
 8005bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005bfa:	f7fb f90d 	bl	8000e18 <__aeabi_uldivmod>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	460b      	mov	r3, r1
 8005c02:	4611      	mov	r1, r2
 8005c04:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005c06:	fba3 2301 	umull	r2, r3, r3, r1
 8005c0a:	095b      	lsrs	r3, r3, #5
 8005c0c:	2264      	movs	r2, #100	@ 0x64
 8005c0e:	fb02 f303 	mul.w	r3, r2, r3
 8005c12:	1acb      	subs	r3, r1, r3
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c1a:	4b36      	ldr	r3, [pc, #216]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c20:	095b      	lsrs	r3, r3, #5
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c28:	441c      	add	r4, r3
 8005c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c3c:	4642      	mov	r2, r8
 8005c3e:	464b      	mov	r3, r9
 8005c40:	1891      	adds	r1, r2, r2
 8005c42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c44:	415b      	adcs	r3, r3
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c4c:	4641      	mov	r1, r8
 8005c4e:	1851      	adds	r1, r2, r1
 8005c50:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c52:	4649      	mov	r1, r9
 8005c54:	414b      	adcs	r3, r1
 8005c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c58:	f04f 0200 	mov.w	r2, #0
 8005c5c:	f04f 0300 	mov.w	r3, #0
 8005c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005c64:	4659      	mov	r1, fp
 8005c66:	00cb      	lsls	r3, r1, #3
 8005c68:	4651      	mov	r1, sl
 8005c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c6e:	4651      	mov	r1, sl
 8005c70:	00ca      	lsls	r2, r1, #3
 8005c72:	4610      	mov	r0, r2
 8005c74:	4619      	mov	r1, r3
 8005c76:	4603      	mov	r3, r0
 8005c78:	4642      	mov	r2, r8
 8005c7a:	189b      	adds	r3, r3, r2
 8005c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c80:	464b      	mov	r3, r9
 8005c82:	460a      	mov	r2, r1
 8005c84:	eb42 0303 	adc.w	r3, r2, r3
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	18db      	adds	r3, r3, r3
 8005ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	eb42 0303 	adc.w	r3, r2, r3
 8005cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cb6:	f7fb f8af 	bl	8000e18 <__aeabi_uldivmod>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc4:	095b      	lsrs	r3, r3, #5
 8005cc6:	2164      	movs	r1, #100	@ 0x64
 8005cc8:	fb01 f303 	mul.w	r3, r1, r3
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	00db      	lsls	r3, r3, #3
 8005cd0:	3332      	adds	r3, #50	@ 0x32
 8005cd2:	4a08      	ldr	r2, [pc, #32]	@ (8005cf4 <UART_SetConfig+0x2d4>)
 8005cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	f003 0207 	and.w	r2, r3, #7
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4422      	add	r2, r4
 8005ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ce8:	e106      	b.n	8005ef8 <UART_SetConfig+0x4d8>
 8005cea:	bf00      	nop
 8005cec:	40011000 	.word	0x40011000
 8005cf0:	40011400 	.word	0x40011400
 8005cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d0a:	4642      	mov	r2, r8
 8005d0c:	464b      	mov	r3, r9
 8005d0e:	1891      	adds	r1, r2, r2
 8005d10:	6239      	str	r1, [r7, #32]
 8005d12:	415b      	adcs	r3, r3
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	1854      	adds	r4, r2, r1
 8005d1e:	4649      	mov	r1, r9
 8005d20:	eb43 0501 	adc.w	r5, r3, r1
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	00eb      	lsls	r3, r5, #3
 8005d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d32:	00e2      	lsls	r2, r4, #3
 8005d34:	4614      	mov	r4, r2
 8005d36:	461d      	mov	r5, r3
 8005d38:	4643      	mov	r3, r8
 8005d3a:	18e3      	adds	r3, r4, r3
 8005d3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d40:	464b      	mov	r3, r9
 8005d42:	eb45 0303 	adc.w	r3, r5, r3
 8005d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d5a:	f04f 0200 	mov.w	r2, #0
 8005d5e:	f04f 0300 	mov.w	r3, #0
 8005d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005d66:	4629      	mov	r1, r5
 8005d68:	008b      	lsls	r3, r1, #2
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d70:	4621      	mov	r1, r4
 8005d72:	008a      	lsls	r2, r1, #2
 8005d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d78:	f7fb f84e 	bl	8000e18 <__aeabi_uldivmod>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4b60      	ldr	r3, [pc, #384]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005d82:	fba3 2302 	umull	r2, r3, r3, r2
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	011c      	lsls	r4, r3, #4
 8005d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	464b      	mov	r3, r9
 8005da0:	1891      	adds	r1, r2, r2
 8005da2:	61b9      	str	r1, [r7, #24]
 8005da4:	415b      	adcs	r3, r3
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dac:	4641      	mov	r1, r8
 8005dae:	1851      	adds	r1, r2, r1
 8005db0:	6139      	str	r1, [r7, #16]
 8005db2:	4649      	mov	r1, r9
 8005db4:	414b      	adcs	r3, r1
 8005db6:	617b      	str	r3, [r7, #20]
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005dc4:	4659      	mov	r1, fp
 8005dc6:	00cb      	lsls	r3, r1, #3
 8005dc8:	4651      	mov	r1, sl
 8005dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dce:	4651      	mov	r1, sl
 8005dd0:	00ca      	lsls	r2, r1, #3
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	4642      	mov	r2, r8
 8005dda:	189b      	adds	r3, r3, r2
 8005ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005de0:	464b      	mov	r3, r9
 8005de2:	460a      	mov	r2, r1
 8005de4:	eb42 0303 	adc.w	r3, r2, r3
 8005de8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005df6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e04:	4649      	mov	r1, r9
 8005e06:	008b      	lsls	r3, r1, #2
 8005e08:	4641      	mov	r1, r8
 8005e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e0e:	4641      	mov	r1, r8
 8005e10:	008a      	lsls	r2, r1, #2
 8005e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e16:	f7fa ffff 	bl	8000e18 <__aeabi_uldivmod>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4611      	mov	r1, r2
 8005e20:	4b38      	ldr	r3, [pc, #224]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005e22:	fba3 2301 	umull	r2, r3, r3, r1
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	2264      	movs	r2, #100	@ 0x64
 8005e2a:	fb02 f303 	mul.w	r3, r2, r3
 8005e2e:	1acb      	subs	r3, r1, r3
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	3332      	adds	r3, #50	@ 0x32
 8005e34:	4a33      	ldr	r2, [pc, #204]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005e36:	fba2 2303 	umull	r2, r3, r2, r3
 8005e3a:	095b      	lsrs	r3, r3, #5
 8005e3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e40:	441c      	add	r4, r3
 8005e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e46:	2200      	movs	r2, #0
 8005e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e50:	4642      	mov	r2, r8
 8005e52:	464b      	mov	r3, r9
 8005e54:	1891      	adds	r1, r2, r2
 8005e56:	60b9      	str	r1, [r7, #8]
 8005e58:	415b      	adcs	r3, r3
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e60:	4641      	mov	r1, r8
 8005e62:	1851      	adds	r1, r2, r1
 8005e64:	6039      	str	r1, [r7, #0]
 8005e66:	4649      	mov	r1, r9
 8005e68:	414b      	adcs	r3, r1
 8005e6a:	607b      	str	r3, [r7, #4]
 8005e6c:	f04f 0200 	mov.w	r2, #0
 8005e70:	f04f 0300 	mov.w	r3, #0
 8005e74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e78:	4659      	mov	r1, fp
 8005e7a:	00cb      	lsls	r3, r1, #3
 8005e7c:	4651      	mov	r1, sl
 8005e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e82:	4651      	mov	r1, sl
 8005e84:	00ca      	lsls	r2, r1, #3
 8005e86:	4610      	mov	r0, r2
 8005e88:	4619      	mov	r1, r3
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	189b      	adds	r3, r3, r2
 8005e90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e92:	464b      	mov	r3, r9
 8005e94:	460a      	mov	r2, r1
 8005e96:	eb42 0303 	adc.w	r3, r2, r3
 8005e9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ea6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	008b      	lsls	r3, r1, #2
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	008a      	lsls	r2, r1, #2
 8005ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005ec6:	f7fa ffa7 	bl	8000e18 <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4b0d      	ldr	r3, [pc, #52]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	@ 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3332      	adds	r3, #50	@ 0x32
 8005ee2:	4a08      	ldr	r2, [pc, #32]	@ (8005f04 <UART_SetConfig+0x4e4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4422      	add	r2, r4
 8005ef6:	609a      	str	r2, [r3, #8]
}
 8005ef8:	bf00      	nop
 8005efa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005efe:	46bd      	mov	sp, r7
 8005f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f04:	51eb851f 	.word	0x51eb851f

08005f08 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 0208 	add.w	r2, r3, #8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f20:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f103 0208 	add.w	r2, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f103 0208 	add.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d103      	bne.n	8005fca <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e00c      	b.n	8005fe4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <vListInsert+0x2e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d2f6      	bcs.n	8005fd2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6892      	ldr	r2, [r2, #8]
 8006032:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6852      	ldr	r2, [r2, #4]
 800603c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d103      	bne.n	8006050 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d105      	bne.n	8006090 <xQueueGenericReset+0x20>
 8006084:	f240 120d 	movw	r2, #269	@ 0x10d
 8006088:	492a      	ldr	r1, [pc, #168]	@ (8006134 <xQueueGenericReset+0xc4>)
 800608a:	482b      	ldr	r0, [pc, #172]	@ (8006138 <xQueueGenericReset+0xc8>)
 800608c:	f00d fa38 	bl	8013500 <assertFail>

    taskENTER_CRITICAL();
 8006090:	f002 fc64 	bl	800895c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609c:	68f9      	ldr	r1, [r7, #12]
 800609e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c0:	3b01      	subs	r3, #1
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060c6:	fb01 f303 	mul.w	r3, r1, r3
 80060ca:	441a      	add	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	22ff      	movs	r2, #255	@ 0xff
 80060d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	22ff      	movs	r2, #255	@ 0xff
 80060dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d114      	bne.n	8006110 <xQueueGenericReset+0xa0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01a      	beq.n	8006124 <xQueueGenericReset+0xb4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3310      	adds	r3, #16
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fc1c 	bl	8007930 <xTaskRemoveFromEventList>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d012      	beq.n	8006124 <xQueueGenericReset+0xb4>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80060fe:	4b0f      	ldr	r3, [pc, #60]	@ (800613c <xQueueGenericReset+0xcc>)
 8006100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006104:	601a      	str	r2, [r3, #0]
 8006106:	f3bf 8f4f 	dsb	sy
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	e009      	b.n	8006124 <xQueueGenericReset+0xb4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3310      	adds	r3, #16
 8006114:	4618      	mov	r0, r3
 8006116:	f7ff fef7 	bl	8005f08 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3324      	adds	r3, #36	@ 0x24
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fef2 	bl	8005f08 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006124:	f002 fc48 	bl	80089b8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006128:	2301      	movs	r3, #1
}
 800612a:	4618      	mov	r0, r3
 800612c:	3710      	adds	r7, #16
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	0801ab18 	.word	0x0801ab18
 8006138:	0801ab2c 	.word	0x0801ab2c
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8006140:	b580      	push	{r7, lr}
 8006142:	b088      	sub	sp, #32
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d105      	bne.n	8006160 <xQueueGenericCreateStatic+0x20>
 8006154:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8006158:	4929      	ldr	r1, [pc, #164]	@ (8006200 <xQueueGenericCreateStatic+0xc0>)
 800615a:	482a      	ldr	r0, [pc, #168]	@ (8006204 <xQueueGenericCreateStatic+0xc4>)
 800615c:	f00d f9d0 	bl	8013500 <assertFail>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d105      	bne.n	8006172 <xQueueGenericCreateStatic+0x32>
 8006166:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 800616a:	4925      	ldr	r1, [pc, #148]	@ (8006200 <xQueueGenericCreateStatic+0xc0>)
 800616c:	4826      	ldr	r0, [pc, #152]	@ (8006208 <xQueueGenericCreateStatic+0xc8>)
 800616e:	f00d f9c7 	bl	8013500 <assertFail>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <xQueueGenericCreateStatic+0x3e>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <xQueueGenericCreateStatic+0x42>
 800617e:	2301      	movs	r3, #1
 8006180:	e000      	b.n	8006184 <xQueueGenericCreateStatic+0x44>
 8006182:	2300      	movs	r3, #0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <xQueueGenericCreateStatic+0x54>
 8006188:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800618c:	491c      	ldr	r1, [pc, #112]	@ (8006200 <xQueueGenericCreateStatic+0xc0>)
 800618e:	481f      	ldr	r0, [pc, #124]	@ (800620c <xQueueGenericCreateStatic+0xcc>)
 8006190:	f00d f9b6 	bl	8013500 <assertFail>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d102      	bne.n	80061a0 <xQueueGenericCreateStatic+0x60>
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <xQueueGenericCreateStatic+0x64>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <xQueueGenericCreateStatic+0x66>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d105      	bne.n	80061b6 <xQueueGenericCreateStatic+0x76>
 80061aa:	f240 1251 	movw	r2, #337	@ 0x151
 80061ae:	4914      	ldr	r1, [pc, #80]	@ (8006200 <xQueueGenericCreateStatic+0xc0>)
 80061b0:	4817      	ldr	r0, [pc, #92]	@ (8006210 <xQueueGenericCreateStatic+0xd0>)
 80061b2:	f00d f9a5 	bl	8013500 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80061b6:	2350      	movs	r3, #80	@ 0x50
 80061b8:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Queue_t ) );
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	2b50      	cmp	r3, #80	@ 0x50
 80061be:	d005      	beq.n	80061cc <xQueueGenericCreateStatic+0x8c>
 80061c0:	f240 1259 	movw	r2, #345	@ 0x159
 80061c4:	490e      	ldr	r1, [pc, #56]	@ (8006200 <xQueueGenericCreateStatic+0xc0>)
 80061c6:	4813      	ldr	r0, [pc, #76]	@ (8006214 <xQueueGenericCreateStatic+0xd4>)
 80061c8:	f00d f99a 	bl	8013500 <assertFail>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061cc:	693b      	ldr	r3, [r7, #16]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	617b      	str	r3, [r7, #20]

        if( pxNewQueue != NULL )
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <xQueueGenericCreateStatic+0xb4>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061e0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4613      	mov	r3, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f862 	bl	80062b8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80061f4:	697b      	ldr	r3, [r7, #20]
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	0801ab18 	.word	0x0801ab18
 8006204:	0801ab34 	.word	0x0801ab34
 8006208:	0801ab58 	.word	0x0801ab58
 800620c:	0801ab70 	.word	0x0801ab70
 8006210:	0801aba8 	.word	0x0801aba8
 8006214:	0801abe0 	.word	0x0801abe0

08006218 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006218:	b580      	push	{r7, lr}
 800621a:	b08a      	sub	sp, #40	@ 0x28
 800621c:	af02      	add	r7, sp, #8
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	4613      	mov	r3, r2
 8006224:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d105      	bne.n	8006238 <xQueueGenericCreate+0x20>
 800622c:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8006230:	491e      	ldr	r1, [pc, #120]	@ (80062ac <xQueueGenericCreate+0x94>)
 8006232:	481f      	ldr	r0, [pc, #124]	@ (80062b0 <xQueueGenericCreate+0x98>)
 8006234:	f00d f964 	bl	8013500 <assertFail>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	fb02 f303 	mul.w	r3, r2, r3
 8006240:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d006      	beq.n	8006256 <xQueueGenericCreate+0x3e>
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	429a      	cmp	r2, r3
 8006254:	d101      	bne.n	800625a <xQueueGenericCreate+0x42>
 8006256:	2301      	movs	r3, #1
 8006258:	e000      	b.n	800625c <xQueueGenericCreate+0x44>
 800625a:	2300      	movs	r3, #0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d105      	bne.n	800626c <xQueueGenericCreate+0x54>
 8006260:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 8006264:	4911      	ldr	r1, [pc, #68]	@ (80062ac <xQueueGenericCreate+0x94>)
 8006266:	4813      	ldr	r0, [pc, #76]	@ (80062b4 <xQueueGenericCreate+0x9c>)
 8006268:	f00d f94a 	bl	8013500 <assertFail>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	3350      	adds	r3, #80	@ 0x50
 8006270:	4618      	mov	r0, r3
 8006272:	f002 fc85 	bl	8008b80 <pvPortMalloc>
 8006276:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <xQueueGenericCreate+0x8a>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	3350      	adds	r3, #80	@ 0x50
 8006286:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006290:	79fa      	ldrb	r2, [r7, #7]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	4613      	mov	r3, r2
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f000 f80b 	bl	80062b8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80062a2:	69bb      	ldr	r3, [r7, #24]
    }
 80062a4:	4618      	mov	r0, r3
 80062a6:	3720      	adds	r7, #32
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	0801ab18 	.word	0x0801ab18
 80062b0:	0801ab34 	.word	0x0801ab34
 80062b4:	0801abfc 	.word	0x0801abfc

080062b8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d103      	bne.n	80062d4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	e002      	b.n	80062da <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062e6:	2101      	movs	r1, #1
 80062e8:	69b8      	ldr	r0, [r7, #24]
 80062ea:	f7ff fec1 	bl	8006070 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	78fa      	ldrb	r2, [r7, #3]
 80062f2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00e      	beq.n	800632a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800631e:	2300      	movs	r3, #0
 8006320:	2200      	movs	r2, #0
 8006322:	2100      	movs	r1, #0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f81f 	bl	8006368 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 8006332:	b580      	push	{r7, lr}
 8006334:	b088      	sub	sp, #32
 8006336:	af02      	add	r7, sp, #8
 8006338:	4603      	mov	r3, r0
 800633a:	6039      	str	r1, [r7, #0]
 800633c:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800633e:	2301      	movs	r3, #1
 8006340:	617b      	str	r3, [r7, #20]
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	9300      	str	r3, [sp, #0]
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	2200      	movs	r2, #0
 800634e:	6939      	ldr	r1, [r7, #16]
 8006350:	6978      	ldr	r0, [r7, #20]
 8006352:	f7ff fef5 	bl	8006140 <xQueueGenericCreateStatic>
 8006356:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ffd0 	bl	80062fe <prvInitialiseMutex>

        return xNewQueue;
 800635e:	68fb      	ldr	r3, [r7, #12]
    }
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	@ 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	607a      	str	r2, [r7, #4]
 8006374:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800637e:	6a3b      	ldr	r3, [r7, #32]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <xQueueGenericSend+0x28>
 8006384:	f240 3209 	movw	r2, #777	@ 0x309
 8006388:	4977      	ldr	r1, [pc, #476]	@ (8006568 <xQueueGenericSend+0x200>)
 800638a:	4878      	ldr	r0, [pc, #480]	@ (800656c <xQueueGenericSend+0x204>)
 800638c:	f00d f8b8 	bl	8013500 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <xQueueGenericSend+0x36>
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	d101      	bne.n	80063a2 <xQueueGenericSend+0x3a>
 800639e:	2301      	movs	r3, #1
 80063a0:	e000      	b.n	80063a4 <xQueueGenericSend+0x3c>
 80063a2:	2300      	movs	r3, #0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <xQueueGenericSend+0x4c>
 80063a8:	f240 320a 	movw	r2, #778	@ 0x30a
 80063ac:	496e      	ldr	r1, [pc, #440]	@ (8006568 <xQueueGenericSend+0x200>)
 80063ae:	4870      	ldr	r0, [pc, #448]	@ (8006570 <xQueueGenericSend+0x208>)
 80063b0:	f00d f8a6 	bl	8013500 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d103      	bne.n	80063c2 <xQueueGenericSend+0x5a>
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d101      	bne.n	80063c6 <xQueueGenericSend+0x5e>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e000      	b.n	80063c8 <xQueueGenericSend+0x60>
 80063c6:	2300      	movs	r3, #0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d105      	bne.n	80063d8 <xQueueGenericSend+0x70>
 80063cc:	f240 320b 	movw	r2, #779	@ 0x30b
 80063d0:	4965      	ldr	r1, [pc, #404]	@ (8006568 <xQueueGenericSend+0x200>)
 80063d2:	4868      	ldr	r0, [pc, #416]	@ (8006574 <xQueueGenericSend+0x20c>)
 80063d4:	f00d f894 	bl	8013500 <assertFail>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80063d8:	f001 fc52 	bl	8007c80 <xTaskGetSchedulerState>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d102      	bne.n	80063e8 <xQueueGenericSend+0x80>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <xQueueGenericSend+0x84>
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <xQueueGenericSend+0x86>
 80063ec:	2300      	movs	r3, #0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d105      	bne.n	80063fe <xQueueGenericSend+0x96>
 80063f2:	f240 320e 	movw	r2, #782	@ 0x30e
 80063f6:	495c      	ldr	r1, [pc, #368]	@ (8006568 <xQueueGenericSend+0x200>)
 80063f8:	485f      	ldr	r0, [pc, #380]	@ (8006578 <xQueueGenericSend+0x210>)
 80063fa:	f00d f881 	bl	8013500 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80063fe:	f002 faad 	bl	800895c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <xQueueGenericSend+0xac>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b02      	cmp	r3, #2
 8006412:	d12f      	bne.n	8006474 <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006418:	4a58      	ldr	r2, [pc, #352]	@ (800657c <xQueueGenericSend+0x214>)
 800641a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641e:	6013      	str	r3, [r2, #0]
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006420:	683a      	ldr	r2, [r7, #0]
 8006422:	68b9      	ldr	r1, [r7, #8]
 8006424:	6a38      	ldr	r0, [r7, #32]
 8006426:	f000 fbdf 	bl	8006be8 <prvCopyDataToQueue>
 800642a:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d010      	beq.n	8006456 <xQueueGenericSend+0xee>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006434:	6a3b      	ldr	r3, [r7, #32]
 8006436:	3324      	adds	r3, #36	@ 0x24
 8006438:	4618      	mov	r0, r3
 800643a:	f001 fa79 	bl	8007930 <xTaskRemoveFromEventList>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d013      	beq.n	800646c <xQueueGenericSend+0x104>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006444:	4b4e      	ldr	r3, [pc, #312]	@ (8006580 <xQueueGenericSend+0x218>)
 8006446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	e00a      	b.n	800646c <xQueueGenericSend+0x104>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <xQueueGenericSend+0x104>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800645c:	4b48      	ldr	r3, [pc, #288]	@ (8006580 <xQueueGenericSend+0x218>)
 800645e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800646c:	f002 faa4 	bl	80089b8 <vPortExitCritical>
                return pdPASS;
 8006470:	2301      	movs	r3, #1
 8006472:	e075      	b.n	8006560 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <xQueueGenericSend+0x126>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800647a:	f002 fa9d 	bl	80089b8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006482:	4a3e      	ldr	r2, [pc, #248]	@ (800657c <xQueueGenericSend+0x214>)
 8006484:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006488:	6013      	str	r3, [r2, #0]
                    return errQUEUE_FULL;
 800648a:	2300      	movs	r3, #0
 800648c:	e068      	b.n	8006560 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006494:	f107 0314 	add.w	r3, r7, #20
 8006498:	4618      	mov	r0, r3
 800649a:	f001 faab 	bl	80079f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800649e:	2301      	movs	r3, #1
 80064a0:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80064a2:	f002 fa89 	bl	80089b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80064a6:	f000 ffd1 	bl	800744c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80064aa:	f002 fa57 	bl	800895c <vPortEnterCritical>
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064b4:	b25b      	sxtb	r3, r3
 80064b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ba:	d103      	bne.n	80064c4 <xQueueGenericSend+0x15c>
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064ca:	b25b      	sxtb	r3, r3
 80064cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d0:	d103      	bne.n	80064da <xQueueGenericSend+0x172>
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064da:	f002 fa6d 	bl	80089b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064de:	1d3a      	adds	r2, r7, #4
 80064e0:	f107 0314 	add.w	r3, r7, #20
 80064e4:	4611      	mov	r1, r2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 fa9a 	bl	8007a20 <xTaskCheckForTimeOut>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d12a      	bne.n	8006548 <xQueueGenericSend+0x1e0>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064f2:	6a38      	ldr	r0, [r7, #32]
 80064f4:	f000 fc70 	bl	8006dd8 <prvIsQueueFull>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d01e      	beq.n	800653c <xQueueGenericSend+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 80064fe:	6a3b      	ldr	r3, [r7, #32]
 8006500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006502:	4a1e      	ldr	r2, [pc, #120]	@ (800657c <xQueueGenericSend+0x214>)
 8006504:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006508:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	3310      	adds	r3, #16
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	4611      	mov	r1, r2
 8006512:	4618      	mov	r0, r3
 8006514:	f001 f9be 	bl	8007894 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006518:	6a38      	ldr	r0, [r7, #32]
 800651a:	f000 fbf5 	bl	8006d08 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800651e:	f000 ffa3 	bl	8007468 <xTaskResumeAll>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f47f af6a 	bne.w	80063fe <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 800652a:	4b15      	ldr	r3, [pc, #84]	@ (8006580 <xQueueGenericSend+0x218>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	e760      	b.n	80063fe <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800653c:	6a38      	ldr	r0, [r7, #32]
 800653e:	f000 fbe3 	bl	8006d08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006542:	f000 ff91 	bl	8007468 <xTaskResumeAll>
 8006546:	e75a      	b.n	80063fe <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006548:	6a38      	ldr	r0, [r7, #32]
 800654a:	f000 fbdd 	bl	8006d08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800654e:	f000 ff8b 	bl	8007468 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006556:	4a09      	ldr	r2, [pc, #36]	@ (800657c <xQueueGenericSend+0x214>)
 8006558:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800655c:	6013      	str	r3, [r2, #0]
            return errQUEUE_FULL;
 800655e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006560:	4618      	mov	r0, r3
 8006562:	3728      	adds	r7, #40	@ 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0801ab18 	.word	0x0801ab18
 800656c:	0801ab2c 	.word	0x0801ab2c
 8006570:	0801ac4c 	.word	0x0801ac4c
 8006574:	0801ac9c 	.word	0x0801ac9c
 8006578:	0801ace4 	.word	0x0801ace4
 800657c:	e000000c 	.word	0xe000000c
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08c      	sub	sp, #48	@ 0x30
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8006596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <xQueueGenericSendFromISR+0x24>
 800659c:	f240 32dd 	movw	r2, #989	@ 0x3dd
 80065a0:	4943      	ldr	r1, [pc, #268]	@ (80066b0 <xQueueGenericSendFromISR+0x12c>)
 80065a2:	4844      	ldr	r0, [pc, #272]	@ (80066b4 <xQueueGenericSendFromISR+0x130>)
 80065a4:	f00c ffac 	bl	8013500 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d103      	bne.n	80065b6 <xQueueGenericSendFromISR+0x32>
 80065ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d101      	bne.n	80065ba <xQueueGenericSendFromISR+0x36>
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <xQueueGenericSendFromISR+0x38>
 80065ba:	2300      	movs	r3, #0
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <xQueueGenericSendFromISR+0x48>
 80065c0:	f240 32de 	movw	r2, #990	@ 0x3de
 80065c4:	493a      	ldr	r1, [pc, #232]	@ (80066b0 <xQueueGenericSendFromISR+0x12c>)
 80065c6:	483c      	ldr	r0, [pc, #240]	@ (80066b8 <xQueueGenericSendFromISR+0x134>)
 80065c8:	f00c ff9a 	bl	8013500 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d103      	bne.n	80065da <xQueueGenericSendFromISR+0x56>
 80065d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <xQueueGenericSendFromISR+0x5a>
 80065da:	2301      	movs	r3, #1
 80065dc:	e000      	b.n	80065e0 <xQueueGenericSendFromISR+0x5c>
 80065de:	2300      	movs	r3, #0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <xQueueGenericSendFromISR+0x6c>
 80065e4:	f240 32df 	movw	r2, #991	@ 0x3df
 80065e8:	4931      	ldr	r1, [pc, #196]	@ (80066b0 <xQueueGenericSendFromISR+0x12c>)
 80065ea:	4834      	ldr	r0, [pc, #208]	@ (80066bc <xQueueGenericSendFromISR+0x138>)
 80065ec:	f00c ff88 	bl	8013500 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065f0:	f002 fa8c 	bl	8008b0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80065f4:	f3ef 8211 	mrs	r2, BASEPRI
 80065f8:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	61ba      	str	r2, [r7, #24]
 800660a:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800660c:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800660e:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006612:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006618:	429a      	cmp	r2, r3
 800661a:	d302      	bcc.n	8006622 <xQueueGenericSendFromISR+0x9e>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b02      	cmp	r3, #2
 8006620:	d139      	bne.n	8006696 <xQueueGenericSendFromISR+0x112>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800662c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006630:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006638:	f000 fad6 	bl	8006be8 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800663c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006644:	d112      	bne.n	800666c <xQueueGenericSendFromISR+0xe8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800664a:	2b00      	cmp	r3, #0
 800664c:	d020      	beq.n	8006690 <xQueueGenericSendFromISR+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800664e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006650:	3324      	adds	r3, #36	@ 0x24
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f96c 	bl	8007930 <xTaskRemoveFromEventList>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d018      	beq.n	8006690 <xQueueGenericSendFromISR+0x10c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d015      	beq.n	8006690 <xQueueGenericSendFromISR+0x10c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e011      	b.n	8006690 <xQueueGenericSendFromISR+0x10c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800666c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8006670:	2b7f      	cmp	r3, #127	@ 0x7f
 8006672:	d105      	bne.n	8006680 <xQueueGenericSendFromISR+0xfc>
 8006674:	f44f 628d 	mov.w	r2, #1128	@ 0x468
 8006678:	490d      	ldr	r1, [pc, #52]	@ (80066b0 <xQueueGenericSendFromISR+0x12c>)
 800667a:	4811      	ldr	r0, [pc, #68]	@ (80066c0 <xQueueGenericSendFromISR+0x13c>)
 800667c:	f00c ff40 	bl	8013500 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006680:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006684:	3301      	adds	r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	b25a      	sxtb	r2, r3
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006690:	2301      	movs	r3, #1
 8006692:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8006694:	e001      	b.n	800669a <xQueueGenericSendFromISR+0x116>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006696:	2300      	movs	r3, #0
 8006698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800669a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80066a4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80066a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3730      	adds	r7, #48	@ 0x30
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	0801ab18 	.word	0x0801ab18
 80066b4:	0801ab2c 	.word	0x0801ab2c
 80066b8:	0801ac4c 	.word	0x0801ac4c
 80066bc:	0801ac9c 	.word	0x0801ac9c
 80066c0:	0801ad3c 	.word	0x0801ad3c

080066c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08a      	sub	sp, #40	@ 0x28
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d105      	bne.n	80066e4 <xQueueGiveFromISR+0x20>
 80066d8:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 80066dc:	493c      	ldr	r1, [pc, #240]	@ (80067d0 <xQueueGiveFromISR+0x10c>)
 80066de:	483d      	ldr	r0, [pc, #244]	@ (80067d4 <xQueueGiveFromISR+0x110>)
 80066e0:	f00c ff0e 	bl	8013500 <assertFail>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d005      	beq.n	80066f8 <xQueueGiveFromISR+0x34>
 80066ec:	f240 428c 	movw	r2, #1164	@ 0x48c
 80066f0:	4937      	ldr	r1, [pc, #220]	@ (80067d0 <xQueueGiveFromISR+0x10c>)
 80066f2:	4839      	ldr	r0, [pc, #228]	@ (80067d8 <xQueueGiveFromISR+0x114>)
 80066f4:	f00c ff04 	bl	8013500 <assertFail>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <xQueueGiveFromISR+0x44>
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d101      	bne.n	800670c <xQueueGiveFromISR+0x48>
 8006708:	2301      	movs	r3, #1
 800670a:	e000      	b.n	800670e <xQueueGiveFromISR+0x4a>
 800670c:	2300      	movs	r3, #0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <xQueueGiveFromISR+0x5a>
 8006712:	f240 4291 	movw	r2, #1169	@ 0x491
 8006716:	492e      	ldr	r1, [pc, #184]	@ (80067d0 <xQueueGiveFromISR+0x10c>)
 8006718:	4830      	ldr	r0, [pc, #192]	@ (80067dc <xQueueGiveFromISR+0x118>)
 800671a:	f00c fef1 	bl	8013500 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800671e:	f002 f9f5 	bl	8008b0c <vPortValidateInterruptPriority>
        __asm volatile
 8006722:	f3ef 8211 	mrs	r2, BASEPRI
 8006726:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 800672a:	f383 8811 	msr	BASEPRI, r3
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	f3bf 8f4f 	dsb	sy
 8006736:	613a      	str	r2, [r7, #16]
 8006738:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 800673a:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800673c:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006742:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006748:	69ba      	ldr	r2, [r7, #24]
 800674a:	429a      	cmp	r2, r3
 800674c:	d233      	bcs.n	80067b6 <xQueueGiveFromISR+0xf2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006754:	75fb      	strb	r3, [r7, #23]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	6a3b      	ldr	r3, [r7, #32]
 800675c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800675e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d112      	bne.n	800678e <xQueueGiveFromISR+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01f      	beq.n	80067b0 <xQueueGiveFromISR+0xec>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	3324      	adds	r3, #36	@ 0x24
 8006774:	4618      	mov	r0, r3
 8006776:	f001 f8db 	bl	8007930 <xTaskRemoveFromEventList>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d017      	beq.n	80067b0 <xQueueGiveFromISR+0xec>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d014      	beq.n	80067b0 <xQueueGiveFromISR+0xec>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	601a      	str	r2, [r3, #0]
 800678c:	e010      	b.n	80067b0 <xQueueGiveFromISR+0xec>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800678e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006792:	2b7f      	cmp	r3, #127	@ 0x7f
 8006794:	d105      	bne.n	80067a2 <xQueueGiveFromISR+0xde>
 8006796:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 800679a:	490d      	ldr	r1, [pc, #52]	@ (80067d0 <xQueueGiveFromISR+0x10c>)
 800679c:	4810      	ldr	r0, [pc, #64]	@ (80067e0 <xQueueGiveFromISR+0x11c>)
 800679e:	f00c feaf 	bl	8013500 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	3301      	adds	r3, #1
 80067a6:	b2db      	uxtb	r3, r3
 80067a8:	b25a      	sxtb	r2, r3
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80067b0:	2301      	movs	r3, #1
 80067b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b4:	e001      	b.n	80067ba <xQueueGiveFromISR+0xf6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80067b6:	2300      	movs	r3, #0
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	60bb      	str	r3, [r7, #8]
        __asm volatile
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	f383 8811 	msr	BASEPRI, r3
    }
 80067c4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3728      	adds	r7, #40	@ 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	0801ab18 	.word	0x0801ab18
 80067d4:	0801ab2c 	.word	0x0801ab2c
 80067d8:	0801ad58 	.word	0x0801ad58
 80067dc:	0801ad74 	.word	0x0801ad74
 80067e0:	0801ad3c 	.word	0x0801ad3c

080067e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b08a      	sub	sp, #40	@ 0x28
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d105      	bne.n	800680a <xQueueReceive+0x26>
 80067fe:	f240 522c 	movw	r2, #1324	@ 0x52c
 8006802:	4962      	ldr	r1, [pc, #392]	@ (800698c <xQueueReceive+0x1a8>)
 8006804:	4862      	ldr	r0, [pc, #392]	@ (8006990 <xQueueReceive+0x1ac>)
 8006806:	f00c fe7b 	bl	8013500 <assertFail>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d103      	bne.n	8006818 <xQueueReceive+0x34>
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <xQueueReceive+0x38>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <xQueueReceive+0x3a>
 800681c:	2300      	movs	r3, #0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d105      	bne.n	800682e <xQueueReceive+0x4a>
 8006822:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8006826:	4959      	ldr	r1, [pc, #356]	@ (800698c <xQueueReceive+0x1a8>)
 8006828:	485a      	ldr	r0, [pc, #360]	@ (8006994 <xQueueReceive+0x1b0>)
 800682a:	f00c fe69 	bl	8013500 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800682e:	f001 fa27 	bl	8007c80 <xTaskGetSchedulerState>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <xQueueReceive+0x5a>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <xQueueReceive+0x5e>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <xQueueReceive+0x60>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d105      	bne.n	8006854 <xQueueReceive+0x70>
 8006848:	f240 5235 	movw	r2, #1333	@ 0x535
 800684c:	494f      	ldr	r1, [pc, #316]	@ (800698c <xQueueReceive+0x1a8>)
 800684e:	4852      	ldr	r0, [pc, #328]	@ (8006998 <xQueueReceive+0x1b4>)
 8006850:	f00c fe56 	bl	8013500 <assertFail>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006854:	f002 f882 	bl	800895c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006858:	6a3b      	ldr	r3, [r7, #32]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d01f      	beq.n	80068a4 <xQueueReceive+0xc0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006864:	68b9      	ldr	r1, [r7, #8]
 8006866:	6a38      	ldr	r0, [r7, #32]
 8006868:	f000 fa28 	bl	8006cbc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	1e5a      	subs	r2, r3, #1
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00f      	beq.n	800689c <xQueueReceive+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	3310      	adds	r3, #16
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f855 	bl	8007930 <xTaskRemoveFromEventList>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d007      	beq.n	800689c <xQueueReceive+0xb8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800688c:	4b43      	ldr	r3, [pc, #268]	@ (800699c <xQueueReceive+0x1b8>)
 800688e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	f3bf 8f4f 	dsb	sy
 8006898:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800689c:	f002 f88c 	bl	80089b8 <vPortExitCritical>
                return pdPASS;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e06f      	b.n	8006984 <xQueueReceive+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d103      	bne.n	80068b2 <xQueueReceive+0xce>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80068aa:	f002 f885 	bl	80089b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e068      	b.n	8006984 <xQueueReceive+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80068b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d106      	bne.n	80068c6 <xQueueReceive+0xe2>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80068b8:	f107 0314 	add.w	r3, r7, #20
 80068bc:	4618      	mov	r0, r3
 80068be:	f001 f899 	bl	80079f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80068c2:	2301      	movs	r3, #1
 80068c4:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80068c6:	f002 f877 	bl	80089b8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80068ca:	f000 fdbf 	bl	800744c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80068ce:	f002 f845 	bl	800895c <vPortEnterCritical>
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068d8:	b25b      	sxtb	r3, r3
 80068da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068de:	d103      	bne.n	80068e8 <xQueueReceive+0x104>
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068ee:	b25b      	sxtb	r3, r3
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d103      	bne.n	80068fe <xQueueReceive+0x11a>
 80068f6:	6a3b      	ldr	r3, [r7, #32]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068fe:	f002 f85b 	bl	80089b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006902:	1d3a      	adds	r2, r7, #4
 8006904:	f107 0314 	add.w	r3, r7, #20
 8006908:	4611      	mov	r1, r2
 800690a:	4618      	mov	r0, r3
 800690c:	f001 f888 	bl	8007a20 <xTaskCheckForTimeOut>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d129      	bne.n	800696a <xQueueReceive+0x186>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006916:	6a38      	ldr	r0, [r7, #32]
 8006918:	f000 fa48 	bl	8006dac <prvIsQueueEmpty>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d01d      	beq.n	800695e <xQueueReceive+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006926:	4a1e      	ldr	r2, [pc, #120]	@ (80069a0 <xQueueReceive+0x1bc>)
 8006928:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800692c:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	3324      	adds	r3, #36	@ 0x24
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	4611      	mov	r1, r2
 8006936:	4618      	mov	r0, r3
 8006938:	f000 ffac 	bl	8007894 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800693c:	6a38      	ldr	r0, [r7, #32]
 800693e:	f000 f9e3 	bl	8006d08 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006942:	f000 fd91 	bl	8007468 <xTaskResumeAll>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d183      	bne.n	8006854 <xQueueReceive+0x70>
                {
                    portYIELD_WITHIN_API();
 800694c:	4b13      	ldr	r3, [pc, #76]	@ (800699c <xQueueReceive+0x1b8>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	e77a      	b.n	8006854 <xQueueReceive+0x70>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800695e:	6a38      	ldr	r0, [r7, #32]
 8006960:	f000 f9d2 	bl	8006d08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006964:	f000 fd80 	bl	8007468 <xTaskResumeAll>
 8006968:	e774      	b.n	8006854 <xQueueReceive+0x70>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800696a:	6a38      	ldr	r0, [r7, #32]
 800696c:	f000 f9cc 	bl	8006d08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006970:	f000 fd7a 	bl	8007468 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006974:	6a38      	ldr	r0, [r7, #32]
 8006976:	f000 fa19 	bl	8006dac <prvIsQueueEmpty>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	f43f af69 	beq.w	8006854 <xQueueReceive+0x70>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006982:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006984:	4618      	mov	r0, r3
 8006986:	3728      	adds	r7, #40	@ 0x28
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	0801ab18 	.word	0x0801ab18
 8006990:	0801addc 	.word	0x0801addc
 8006994:	0801ade8 	.word	0x0801ade8
 8006998:	0801ace4 	.word	0x0801ace4
 800699c:	e000ed04 	.word	0xe000ed04
 80069a0:	e000000c 	.word	0xe000000c

080069a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b08a      	sub	sp, #40	@ 0x28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80069ae:	2300      	movs	r3, #0
 80069b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <xQueueSemaphoreTake+0x28>
 80069c0:	f240 52be 	movw	r2, #1470	@ 0x5be
 80069c4:	4975      	ldr	r1, [pc, #468]	@ (8006b9c <xQueueSemaphoreTake+0x1f8>)
 80069c6:	4876      	ldr	r0, [pc, #472]	@ (8006ba0 <xQueueSemaphoreTake+0x1fc>)
 80069c8:	f00c fd9a 	bl	8013500 <assertFail>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <xQueueSemaphoreTake+0x3c>
 80069d4:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 80069d8:	4970      	ldr	r1, [pc, #448]	@ (8006b9c <xQueueSemaphoreTake+0x1f8>)
 80069da:	4872      	ldr	r0, [pc, #456]	@ (8006ba4 <xQueueSemaphoreTake+0x200>)
 80069dc:	f00c fd90 	bl	8013500 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069e0:	f001 f94e 	bl	8007c80 <xTaskGetSchedulerState>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d102      	bne.n	80069f0 <xQueueSemaphoreTake+0x4c>
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <xQueueSemaphoreTake+0x50>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <xQueueSemaphoreTake+0x52>
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <xQueueSemaphoreTake+0x62>
 80069fa:	f240 52c7 	movw	r2, #1479	@ 0x5c7
 80069fe:	4967      	ldr	r1, [pc, #412]	@ (8006b9c <xQueueSemaphoreTake+0x1f8>)
 8006a00:	4869      	ldr	r0, [pc, #420]	@ (8006ba8 <xQueueSemaphoreTake+0x204>)
 8006a02:	f00c fd7d 	bl	8013500 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006a06:	f001 ffa9 	bl	800895c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0e:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d024      	beq.n	8006a60 <xQueueSemaphoreTake+0xbc>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d104      	bne.n	8006a30 <xQueueSemaphoreTake+0x8c>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a26:	f001 fabf 	bl	8007fa8 <pvTaskIncrementMutexHeldCount>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00f      	beq.n	8006a58 <xQueueSemaphoreTake+0xb4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	3310      	adds	r3, #16
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 ff77 	bl	8007930 <xTaskRemoveFromEventList>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d007      	beq.n	8006a58 <xQueueSemaphoreTake+0xb4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006a48:	4b58      	ldr	r3, [pc, #352]	@ (8006bac <xQueueSemaphoreTake+0x208>)
 8006a4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	f3bf 8f4f 	dsb	sy
 8006a54:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006a58:	f001 ffae 	bl	80089b8 <vPortExitCritical>
                return pdPASS;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e098      	b.n	8006b92 <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <xQueueSemaphoreTake+0xdc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8006a66:	6a3b      	ldr	r3, [r7, #32]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <xQueueSemaphoreTake+0xd4>
 8006a6c:	f240 620d 	movw	r2, #1549	@ 0x60d
 8006a70:	494a      	ldr	r1, [pc, #296]	@ (8006b9c <xQueueSemaphoreTake+0x1f8>)
 8006a72:	484f      	ldr	r0, [pc, #316]	@ (8006bb0 <xQueueSemaphoreTake+0x20c>)
 8006a74:	f00c fd44 	bl	8013500 <assertFail>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8006a78:	f001 ff9e 	bl	80089b8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	e088      	b.n	8006b92 <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <xQueueSemaphoreTake+0xf0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006a86:	f107 030c 	add.w	r3, r7, #12
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 ffb2 	bl	80079f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006a90:	2301      	movs	r3, #1
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006a94:	f001 ff90 	bl	80089b8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006a98:	f000 fcd8 	bl	800744c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006a9c:	f001 ff5e 	bl	800895c <vPortEnterCritical>
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa6:	b25b      	sxtb	r3, r3
 8006aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aac:	d103      	bne.n	8006ab6 <xQueueSemaphoreTake+0x112>
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006abc:	b25b      	sxtb	r3, r3
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac2:	d103      	bne.n	8006acc <xQueueSemaphoreTake+0x128>
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006acc:	f001 ff74 	bl	80089b8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ad0:	463a      	mov	r2, r7
 8006ad2:	f107 030c 	add.w	r3, r7, #12
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ffa1 	bl	8007a20 <xTaskCheckForTimeOut>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d138      	bne.n	8006b56 <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae4:	69f8      	ldr	r0, [r7, #28]
 8006ae6:	f000 f961 	bl	8006dac <prvIsQueueEmpty>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d02c      	beq.n	8006b4a <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af4:	4a2f      	ldr	r2, [pc, #188]	@ (8006bb4 <xQueueSemaphoreTake+0x210>)
 8006af6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006afa:	6013      	str	r3, [r2, #0]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <xQueueSemaphoreTake+0x174>
                        {
                            taskENTER_CRITICAL();
 8006b04:	f001 ff2a 	bl	800895c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 f8d5 	bl	8007cbc <xTaskPriorityInherit>
 8006b12:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 8006b14:	f001 ff50 	bl	80089b8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	3324      	adds	r3, #36	@ 0x24
 8006b1c:	683a      	ldr	r2, [r7, #0]
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f000 feb7 	bl	8007894 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8006b26:	69f8      	ldr	r0, [r7, #28]
 8006b28:	f000 f8ee 	bl	8006d08 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006b2c:	f000 fc9c 	bl	8007468 <xTaskResumeAll>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f47f af67 	bne.w	8006a06 <xQueueSemaphoreTake+0x62>
                {
                    portYIELD_WITHIN_API();
 8006b38:	4b1c      	ldr	r3, [pc, #112]	@ (8006bac <xQueueSemaphoreTake+0x208>)
 8006b3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	e75d      	b.n	8006a06 <xQueueSemaphoreTake+0x62>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8006b4a:	69f8      	ldr	r0, [r7, #28]
 8006b4c:	f000 f8dc 	bl	8006d08 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006b50:	f000 fc8a 	bl	8007468 <xTaskResumeAll>
 8006b54:	e757      	b.n	8006a06 <xQueueSemaphoreTake+0x62>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8006b56:	69f8      	ldr	r0, [r7, #28]
 8006b58:	f000 f8d6 	bl	8006d08 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006b5c:	f000 fc84 	bl	8007468 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b60:	69f8      	ldr	r0, [r7, #28]
 8006b62:	f000 f923 	bl	8006dac <prvIsQueueEmpty>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f43f af4c 	beq.w	8006a06 <xQueueSemaphoreTake+0x62>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <xQueueSemaphoreTake+0x1ec>
                        {
                            taskENTER_CRITICAL();
 8006b74:	f001 fef2 	bl	800895c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b78:	69f8      	ldr	r0, [r7, #28]
 8006b7a:	f000 f81d 	bl	8006bb8 <prvGetDisinheritPriorityAfterTimeout>
 8006b7e:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	6979      	ldr	r1, [r7, #20]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 f984 	bl	8007e94 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8006b8c:	f001 ff14 	bl	80089b8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006b90:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3728      	adds	r7, #40	@ 0x28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	0801ab18 	.word	0x0801ab18
 8006ba0:	0801addc 	.word	0x0801addc
 8006ba4:	0801ad58 	.word	0x0801ad58
 8006ba8:	0801ace4 	.word	0x0801ace4
 8006bac:	e000ed04 	.word	0xe000ed04
 8006bb0:	0801ae3c 	.word	0x0801ae3c
 8006bb4:	e000000c 	.word	0xe000000c

08006bb8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d006      	beq.n	8006bd6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1c3 0306 	rsb	r3, r3, #6
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e001      	b.n	8006bda <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8006bda:	68fb      	ldr	r3, [r7, #12]
    }
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	60b9      	str	r1, [r7, #8]
 8006bf2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfc:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10d      	bne.n	8006c22 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d14d      	bne.n	8006caa <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f001 f8c8 	bl	8007da8 <xTaskPriorityDisinherit>
 8006c18:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	e043      	b.n	8006caa <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d119      	bne.n	8006c5c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6858      	ldr	r0, [r3, #4]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c30:	461a      	mov	r2, r3
 8006c32:	68b9      	ldr	r1, [r7, #8]
 8006c34:	f011 ff3c 	bl	8018ab0 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c40:	441a      	add	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	685a      	ldr	r2, [r3, #4]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d32b      	bcc.n	8006caa <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	605a      	str	r2, [r3, #4]
 8006c5a:	e026      	b.n	8006caa <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	68d8      	ldr	r0, [r3, #12]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c64:	461a      	mov	r2, r3
 8006c66:	68b9      	ldr	r1, [r7, #8]
 8006c68:	f011 ff22 	bl	8018ab0 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	425b      	negs	r3, r3
 8006c76:	441a      	add	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	68da      	ldr	r2, [r3, #12]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d207      	bcs.n	8006c98 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c90:	425b      	negs	r3, r3
 8006c92:	441a      	add	r2, r3
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d105      	bne.n	8006caa <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	1c5a      	adds	r2, r3, #1
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8006cb2:	697b      	ldr	r3, [r7, #20]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d018      	beq.n	8006d00 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd6:	441a      	add	r2, r3
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68da      	ldr	r2, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d303      	bcc.n	8006cf0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	68d9      	ldr	r1, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	6838      	ldr	r0, [r7, #0]
 8006cfc:	f011 fed8 	bl	8018ab0 <memcpy>
    }
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006d10:	f001 fe24 	bl	800895c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d1a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d1c:	e011      	b.n	8006d42 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d012      	beq.n	8006d4c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	3324      	adds	r3, #36	@ 0x24
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f000 fe00 	bl	8007930 <xTaskRemoveFromEventList>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006d36:	f000 fed5 	bl	8007ae4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	dce9      	bgt.n	8006d1e <prvUnlockQueue+0x16>
 8006d4a:	e000      	b.n	8006d4e <prvUnlockQueue+0x46>
                        break;
 8006d4c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	22ff      	movs	r2, #255	@ 0xff
 8006d52:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006d56:	f001 fe2f 	bl	80089b8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006d5a:	f001 fdff 	bl	800895c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d64:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d66:	e011      	b.n	8006d8c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d012      	beq.n	8006d96 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	3310      	adds	r3, #16
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 fddb 	bl	8007930 <xTaskRemoveFromEventList>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006d80:	f000 feb0 	bl	8007ae4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	dce9      	bgt.n	8006d68 <prvUnlockQueue+0x60>
 8006d94:	e000      	b.n	8006d98 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006d96:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	22ff      	movs	r2, #255	@ 0xff
 8006d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006da0:	f001 fe0a 	bl	80089b8 <vPortExitCritical>
}
 8006da4:	bf00      	nop
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006db4:	f001 fdd2 	bl	800895c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	60fb      	str	r3, [r7, #12]
 8006dc4:	e001      	b.n	8006dca <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006dca:	f001 fdf5 	bl	80089b8 <vPortExitCritical>

    return xReturn;
 8006dce:	68fb      	ldr	r3, [r7, #12]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006de0:	f001 fdbc 	bl	800895c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d102      	bne.n	8006df6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006df0:	2301      	movs	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	e001      	b.n	8006dfa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8006df6:	2300      	movs	r3, #0
 8006df8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006dfa:	f001 fddd 	bl	80089b8 <vPortExitCritical>

    return xReturn;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
 8006e16:	e014      	b.n	8006e42 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006e18:	4a0f      	ldr	r2, [pc, #60]	@ (8006e58 <vQueueAddToRegistry+0x50>)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10b      	bne.n	8006e3c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006e24:	490c      	ldr	r1, [pc, #48]	@ (8006e58 <vQueueAddToRegistry+0x50>)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e58 <vQueueAddToRegistry+0x50>)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	00db      	lsls	r3, r3, #3
 8006e34:	4413      	add	r3, r2
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006e3a:	e006      	b.n	8006e4a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	3301      	adds	r3, #1
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2b09      	cmp	r3, #9
 8006e46:	d9e7      	bls.n	8006e18 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	2000021c 	.word	0x2000021c

08006e5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006e6c:	f001 fd76 	bl	800895c <vPortEnterCritical>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d103      	bne.n	8006e86 <vQueueWaitForMessageRestricted+0x2a>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e92:	d103      	bne.n	8006e9c <vQueueWaitForMessageRestricted+0x40>
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e9c:	f001 fd8c 	bl	80089b8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d106      	bne.n	8006eb6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	3324      	adds	r3, #36	@ 0x24
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	68b9      	ldr	r1, [r7, #8]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fd13 	bl	80078dc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7ff ff26 	bl	8006d08 <prvUnlockQueue>
    }
 8006ebc:	bf00      	nop
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08c      	sub	sp, #48	@ 0x30
 8006ec8:	af04      	add	r7, sp, #16
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 8006ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d105      	bne.n	8006ee4 <xTaskCreateStatic+0x20>
 8006ed8:	f240 2243 	movw	r2, #579	@ 0x243
 8006edc:	4920      	ldr	r1, [pc, #128]	@ (8006f60 <xTaskCreateStatic+0x9c>)
 8006ede:	4821      	ldr	r0, [pc, #132]	@ (8006f64 <xTaskCreateStatic+0xa0>)
 8006ee0:	f00c fb0e 	bl	8013500 <assertFail>
        configASSERT( pxTaskBuffer != NULL );
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d105      	bne.n	8006ef6 <xTaskCreateStatic+0x32>
 8006eea:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8006eee:	491c      	ldr	r1, [pc, #112]	@ (8006f60 <xTaskCreateStatic+0x9c>)
 8006ef0:	481d      	ldr	r0, [pc, #116]	@ (8006f68 <xTaskCreateStatic+0xa4>)
 8006ef2:	f00c fb05 	bl	8013500 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 8006ef6:	2364      	movs	r3, #100	@ 0x64
 8006ef8:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	2b64      	cmp	r3, #100	@ 0x64
 8006efe:	d005      	beq.n	8006f0c <xTaskCreateStatic+0x48>
 8006f00:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 8006f04:	4916      	ldr	r1, [pc, #88]	@ (8006f60 <xTaskCreateStatic+0x9c>)
 8006f06:	4819      	ldr	r0, [pc, #100]	@ (8006f6c <xTaskCreateStatic+0xa8>)
 8006f08:	f00c fafa 	bl	8013500 <assertFail>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f0c:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d01e      	beq.n	8006f52 <xTaskCreateStatic+0x8e>
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d01b      	beq.n	8006f52 <xTaskCreateStatic+0x8e>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f24:	69fb      	ldr	r3, [r7, #28]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9303      	str	r3, [sp, #12]
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	9302      	str	r3, [sp, #8]
 8006f34:	f107 0318 	add.w	r3, r7, #24
 8006f38:	9301      	str	r3, [sp, #4]
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	9300      	str	r3, [sp, #0]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	68b9      	ldr	r1, [r7, #8]
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f000 f859 	bl	8006ffc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006f4a:	69f8      	ldr	r0, [r7, #28]
 8006f4c:	f000 f8f4 	bl	8007138 <prvAddNewTaskToReadyList>
 8006f50:	e001      	b.n	8006f56 <xTaskCreateStatic+0x92>
        }
        else
        {
            xReturn = NULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006f56:	69bb      	ldr	r3, [r7, #24]
    }
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3720      	adds	r7, #32
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	0801aee8 	.word	0x0801aee8
 8006f64:	0801aefc 	.word	0x0801aefc
 8006f68:	0801af14 	.word	0x0801af14
 8006f6c:	0801af2c 	.word	0x0801af2c

08006f70 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08c      	sub	sp, #48	@ 0x30
 8006f74:	af04      	add	r7, sp, #16
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	603b      	str	r3, [r7, #0]
 8006f7c:	4613      	mov	r3, r2
 8006f7e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f80:	88fb      	ldrh	r3, [r7, #6]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f001 fdfb 	bl	8008b80 <pvPortMalloc>
 8006f8a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00e      	beq.n	8006fb0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f92:	2064      	movs	r0, #100	@ 0x64
 8006f94:	f001 fdf4 	bl	8008b80 <pvPortMalloc>
 8006f98:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d003      	beq.n	8006fa8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fa6:	e005      	b.n	8006fb4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006fa8:	6978      	ldr	r0, [r7, #20]
 8006faa:	f001 feb1 	bl	8008d10 <vPortFree>
 8006fae:	e001      	b.n	8006fb4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d017      	beq.n	8006fea <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fc2:	88fa      	ldrh	r2, [r7, #6]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	9303      	str	r3, [sp, #12]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	9302      	str	r3, [sp, #8]
 8006fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f80f 	bl	8006ffc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006fde:	69f8      	ldr	r0, [r7, #28]
 8006fe0:	f000 f8aa 	bl	8007138 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	61bb      	str	r3, [r7, #24]
 8006fe8:	e002      	b.n	8006ff0 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fea:	f04f 33ff 	mov.w	r3, #4294967295
 8006fee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006ff0:	69bb      	ldr	r3, [r7, #24]
    }
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
	...

08006ffc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800700a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	461a      	mov	r2, r3
 8007014:	21a5      	movs	r1, #165	@ 0xa5
 8007016:	f011 fd05 	bl	8018a24 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007024:	3b01      	subs	r3, #1
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	4413      	add	r3, r2
 800702a:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f023 0307 	bic.w	r3, r3, #7
 8007032:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	f003 0307 	and.w	r3, r3, #7
 800703a:	2b00      	cmp	r3, #0
 800703c:	d005      	beq.n	800704a <prvInitialiseNewTask+0x4e>
 800703e:	f240 3259 	movw	r2, #857	@ 0x359
 8007042:	493b      	ldr	r1, [pc, #236]	@ (8007130 <prvInitialiseNewTask+0x134>)
 8007044:	483b      	ldr	r0, [pc, #236]	@ (8007134 <prvInitialiseNewTask+0x138>)
 8007046:	f00c fa5b 	bl	8013500 <assertFail>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 800704a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800704c:	693a      	ldr	r2, [r7, #16]
 800704e:	641a      	str	r2, [r3, #64]	@ 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d01f      	beq.n	8007096 <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007056:	2300      	movs	r3, #0
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e012      	b.n	8007082 <prvInitialiseNewTask+0x86>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	4413      	add	r3, r2
 8007062:	7819      	ldrb	r1, [r3, #0]
 8007064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	4413      	add	r3, r2
 800706a:	3334      	adds	r3, #52	@ 0x34
 800706c:	460a      	mov	r2, r1
 800706e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	4413      	add	r3, r2
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d006      	beq.n	800708a <prvInitialiseNewTask+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	3301      	adds	r3, #1
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b09      	cmp	r3, #9
 8007086:	d9e9      	bls.n	800705c <prvInitialiseNewTask+0x60>
 8007088:	e000      	b.n	800708c <prvInitialiseNewTask+0x90>
            {
                break;
 800708a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	2200      	movs	r2, #0
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007094:	e003      	b.n	800709e <prvInitialiseNewTask+0xa2>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007098:	2200      	movs	r2, #0
 800709a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800709e:	6a3b      	ldr	r3, [r7, #32]
 80070a0:	2b05      	cmp	r3, #5
 80070a2:	d901      	bls.n	80070a8 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80070a4:	2305      	movs	r3, #5
 80070a6:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80070a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070aa:	6a3a      	ldr	r2, [r7, #32]
 80070ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	6a3a      	ldr	r2, [r7, #32]
 80070b2:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	2200      	movs	r2, #0
 80070b8:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	3304      	adds	r3, #4
 80070be:	4618      	mov	r0, r3
 80070c0:	f7fe ff42 	bl	8005f48 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c6:	3318      	adds	r3, #24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe ff3d 	bl	8005f48 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070d2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	f1c3 0206 	rsb	r2, r3, #6
 80070da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070dc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070e2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 80070e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e6:	2200      	movs	r2, #0
 80070e8:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	2200      	movs	r2, #0
 80070ee:	659a      	str	r2, [r3, #88]	@ 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	335c      	adds	r3, #92	@ 0x5c
 80070f4:	2204      	movs	r2, #4
 80070f6:	2100      	movs	r1, #0
 80070f8:	4618      	mov	r0, r3
 80070fa:	f011 fc93 	bl	8018a24 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80070fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007100:	3360      	adds	r3, #96	@ 0x60
 8007102:	2201      	movs	r2, #1
 8007104:	2100      	movs	r1, #0
 8007106:	4618      	mov	r0, r3
 8007108:	f011 fc8c 	bl	8018a24 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800710c:	683a      	ldr	r2, [r7, #0]
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	6938      	ldr	r0, [r7, #16]
 8007112:	f001 fb0d 	bl	8008730 <pxPortInitialiseStack>
 8007116:	4602      	mov	r2, r0
 8007118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800711c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <prvInitialiseNewTask+0x12c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007124:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007126:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007128:	bf00      	nop
 800712a:	3718      	adds	r7, #24
 800712c:	46bd      	mov	sp, r7
 800712e:	bd80      	pop	{r7, pc}
 8007130:	0801aee8 	.word	0x0801aee8
 8007134:	0801af48 	.word	0x0801af48

08007138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007140:	f001 fc0c 	bl	800895c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007144:	4b2c      	ldr	r3, [pc, #176]	@ (80071f8 <prvAddNewTaskToReadyList+0xc0>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	4a2b      	ldr	r2, [pc, #172]	@ (80071f8 <prvAddNewTaskToReadyList+0xc0>)
 800714c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800714e:	4b2b      	ldr	r3, [pc, #172]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007156:	4a29      	ldr	r2, [pc, #164]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800715c:	4b26      	ldr	r3, [pc, #152]	@ (80071f8 <prvAddNewTaskToReadyList+0xc0>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d110      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007164:	f000 fcd4 	bl	8007b10 <prvInitialiseTaskLists>
 8007168:	e00d      	b.n	8007186 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800716a:	4b25      	ldr	r3, [pc, #148]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007172:	4b22      	ldr	r3, [pc, #136]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	429a      	cmp	r2, r3
 800717e:	d802      	bhi.n	8007186 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007180:	4a1e      	ldr	r2, [pc, #120]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007186:	4b1f      	ldr	r3, [pc, #124]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	4a1d      	ldr	r2, [pc, #116]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 800718e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007190:	4b1c      	ldr	r3, [pc, #112]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	2201      	movs	r2, #1
 800719e:	409a      	lsls	r2, r3
 80071a0:	4b19      	ldr	r3, [pc, #100]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	4a18      	ldr	r2, [pc, #96]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 80071a8:	6013      	str	r3, [r2, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	4a15      	ldr	r2, [pc, #84]	@ (800720c <prvAddNewTaskToReadyList+0xd4>)
 80071b8:	441a      	add	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f7fe fece 	bl	8005f62 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80071c6:	f001 fbf7 	bl	80089b8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80071ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00e      	beq.n	80071f0 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071d2:	4b0a      	ldr	r3, [pc, #40]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071dc:	429a      	cmp	r2, r3
 80071de:	d207      	bcs.n	80071f0 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <prvAddNewTaskToReadyList+0xd8>)
 80071e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80071f0:	bf00      	nop
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	20000358 	.word	0x20000358
 80071fc:	2000026c 	.word	0x2000026c
 8007200:	20000364 	.word	0x20000364
 8007204:	20000374 	.word	0x20000374
 8007208:	20000360 	.word	0x20000360
 800720c:	20000270 	.word	0x20000270
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800721e:	2300      	movs	r3, #0
 8007220:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d105      	bne.n	8007234 <vTaskDelayUntil+0x20>
 8007228:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 800722c:	492d      	ldr	r1, [pc, #180]	@ (80072e4 <vTaskDelayUntil+0xd0>)
 800722e:	482e      	ldr	r0, [pc, #184]	@ (80072e8 <vTaskDelayUntil+0xd4>)
 8007230:	f00c f966 	bl	8013500 <assertFail>
        configASSERT( ( xTimeIncrement > 0U ) );
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <vTaskDelayUntil+0x32>
 800723a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800723e:	4929      	ldr	r1, [pc, #164]	@ (80072e4 <vTaskDelayUntil+0xd0>)
 8007240:	482a      	ldr	r0, [pc, #168]	@ (80072ec <vTaskDelayUntil+0xd8>)
 8007242:	f00c f95d 	bl	8013500 <assertFail>
        configASSERT( uxSchedulerSuspended == 0 );
 8007246:	4b2a      	ldr	r3, [pc, #168]	@ (80072f0 <vTaskDelayUntil+0xdc>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d005      	beq.n	800725a <vTaskDelayUntil+0x46>
 800724e:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 8007252:	4924      	ldr	r1, [pc, #144]	@ (80072e4 <vTaskDelayUntil+0xd0>)
 8007254:	4827      	ldr	r0, [pc, #156]	@ (80072f4 <vTaskDelayUntil+0xe0>)
 8007256:	f00c f953 	bl	8013500 <assertFail>

        vTaskSuspendAll();
 800725a:	f000 f8f7 	bl	800744c <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 800725e:	4b26      	ldr	r3, [pc, #152]	@ (80072f8 <vTaskDelayUntil+0xe4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	683a      	ldr	r2, [r7, #0]
 800726a:	4413      	add	r3, r2
 800726c:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	429a      	cmp	r2, r3
 8007276:	d20b      	bcs.n	8007290 <vTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68fa      	ldr	r2, [r7, #12]
 800727e:	429a      	cmp	r2, r3
 8007280:	d211      	bcs.n	80072a6 <vTaskDelayUntil+0x92>
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	429a      	cmp	r2, r3
 8007288:	d90d      	bls.n	80072a6 <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 800728a:	2301      	movs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	e00a      	b.n	80072a6 <vTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	429a      	cmp	r2, r3
 8007298:	d303      	bcc.n	80072a2 <vTaskDelayUntil+0x8e>
 800729a:	68fa      	ldr	r2, [r7, #12]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d901      	bls.n	80072a6 <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 80072a2:	2301      	movs	r3, #1
 80072a4:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d006      	beq.n	80072c0 <vTaskDelayUntil+0xac>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	2100      	movs	r1, #0
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 fe88 	bl	8007fd0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80072c0:	f000 f8d2 	bl	8007468 <xTaskResumeAll>
 80072c4:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d107      	bne.n	80072dc <vTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 80072cc:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <vTaskDelayUntil+0xe8>)
 80072ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072d2:	601a      	str	r2, [r3, #0]
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	0801aee8 	.word	0x0801aee8
 80072e8:	0801afd0 	.word	0x0801afd0
 80072ec:	0801afe4 	.word	0x0801afe4
 80072f0:	20000380 	.word	0x20000380
 80072f4:	0801afb4 	.word	0x0801afb4
 80072f8:	2000035c 	.word	0x2000035c
 80072fc:	e000ed04 	.word	0xe000ed04

08007300 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d012      	beq.n	8007338 <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8007312:	4b11      	ldr	r3, [pc, #68]	@ (8007358 <vTaskDelay+0x58>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d005      	beq.n	8007326 <vTaskDelay+0x26>
 800731a:	f44f 62a7 	mov.w	r2, #1336	@ 0x538
 800731e:	490f      	ldr	r1, [pc, #60]	@ (800735c <vTaskDelay+0x5c>)
 8007320:	480f      	ldr	r0, [pc, #60]	@ (8007360 <vTaskDelay+0x60>)
 8007322:	f00c f8ed 	bl	8013500 <assertFail>
            vTaskSuspendAll();
 8007326:	f000 f891 	bl	800744c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800732a:	2100      	movs	r1, #0
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 fe4f 	bl	8007fd0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007332:	f000 f899 	bl	8007468 <xTaskResumeAll>
 8007336:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d107      	bne.n	800734e <vTaskDelay+0x4e>
        {
            portYIELD_WITHIN_API();
 800733e:	4b09      	ldr	r3, [pc, #36]	@ (8007364 <vTaskDelay+0x64>)
 8007340:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007344:	601a      	str	r2, [r3, #0]
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800734e:	bf00      	nop
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20000380 	.word	0x20000380
 800735c:	0801aee8 	.word	0x0801aee8
 8007360:	0801afb4 	.word	0x0801afb4
 8007364:	e000ed04 	.word	0xe000ed04

08007368 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	@ 0x28
 800736c:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800736e:	2300      	movs	r3, #0
 8007370:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8007372:	2300      	movs	r3, #0
 8007374:	60bb      	str	r3, [r7, #8]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007376:	1d3a      	adds	r2, r7, #4
 8007378:	f107 0108 	add.w	r1, r7, #8
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	4618      	mov	r0, r3
 8007382:	f006 fdfd 	bl	800df80 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	9202      	str	r2, [sp, #8]
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	2300      	movs	r3, #0
 8007392:	9300      	str	r3, [sp, #0]
 8007394:	2300      	movs	r3, #0
 8007396:	460a      	mov	r2, r1
 8007398:	4922      	ldr	r1, [pc, #136]	@ (8007424 <vTaskStartScheduler+0xbc>)
 800739a:	4823      	ldr	r0, [pc, #140]	@ (8007428 <vTaskStartScheduler+0xc0>)
 800739c:	f7ff fd92 	bl	8006ec4 <xTaskCreateStatic>
 80073a0:	4603      	mov	r3, r0
 80073a2:	4a22      	ldr	r2, [pc, #136]	@ (800742c <vTaskStartScheduler+0xc4>)
 80073a4:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80073a6:	4b21      	ldr	r3, [pc, #132]	@ (800742c <vTaskStartScheduler+0xc4>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d002      	beq.n	80073b4 <vTaskStartScheduler+0x4c>
            {
                xReturn = pdPASS;
 80073ae:	2301      	movs	r3, #1
 80073b0:	617b      	str	r3, [r7, #20]
 80073b2:	e001      	b.n	80073b8 <vTaskStartScheduler+0x50>
            }
            else
            {
                xReturn = pdFAIL;
 80073b4:	2300      	movs	r3, #0
 80073b6:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d102      	bne.n	80073c4 <vTaskStartScheduler+0x5c>
            {
                xReturn = xTimerCreateTimerTask();
 80073be:	f000 fe6d 	bl	800809c <xTimerCreateTimerTask>
 80073c2:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d11e      	bne.n	8007408 <vTaskStartScheduler+0xa0>
        __asm volatile
 80073ca:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	613b      	str	r3, [r7, #16]
    }
 80073dc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80073de:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <vTaskStartScheduler+0xc8>)
 80073e0:	f04f 32ff 	mov.w	r2, #4294967295
 80073e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80073e6:	4b13      	ldr	r3, [pc, #76]	@ (8007434 <vTaskStartScheduler+0xcc>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073ec:	4b12      	ldr	r3, [pc, #72]	@ (8007438 <vTaskStartScheduler+0xd0>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80073f2:	f005 fc25 	bl	800cc40 <usecTimerInit>

        traceTASK_SWITCHED_IN();
 80073f6:	4b11      	ldr	r3, [pc, #68]	@ (800743c <vTaskStartScheduler+0xd4>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	3334      	adds	r3, #52	@ 0x34
 80073fc:	4a10      	ldr	r2, [pc, #64]	@ (8007440 <vTaskStartScheduler+0xd8>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6013      	str	r3, [r2, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8007402:	f001 fa1f 	bl	8008844 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 8007406:	e009      	b.n	800741c <vTaskStartScheduler+0xb4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d105      	bne.n	800741c <vTaskStartScheduler+0xb4>
 8007410:	f640 022a 	movw	r2, #2090	@ 0x82a
 8007414:	490b      	ldr	r1, [pc, #44]	@ (8007444 <vTaskStartScheduler+0xdc>)
 8007416:	480c      	ldr	r0, [pc, #48]	@ (8007448 <vTaskStartScheduler+0xe0>)
 8007418:	f00c f872 	bl	8013500 <assertFail>
}
 800741c:	bf00      	nop
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	0801b048 	.word	0x0801b048
 8007428:	08007afd 	.word	0x08007afd
 800742c:	2000037c 	.word	0x2000037c
 8007430:	20000378 	.word	0x20000378
 8007434:	20000364 	.word	0x20000364
 8007438:	2000035c 	.word	0x2000035c
 800743c:	2000026c 	.word	0x2000026c
 8007440:	e0000004 	.word	0xe0000004
 8007444:	0801aee8 	.word	0x0801aee8
 8007448:	0801b050 	.word	0x0801b050

0800744c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800744c:	b480      	push	{r7}
 800744e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007450:	4b04      	ldr	r3, [pc, #16]	@ (8007464 <vTaskSuspendAll+0x18>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	3301      	adds	r3, #1
 8007456:	4a03      	ldr	r2, [pc, #12]	@ (8007464 <vTaskSuspendAll+0x18>)
 8007458:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800745a:	bf00      	nop
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	20000380 	.word	0x20000380

08007468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007476:	4b3f      	ldr	r3, [pc, #252]	@ (8007574 <xTaskResumeAll+0x10c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d105      	bne.n	800748a <xTaskResumeAll+0x22>
 800747e:	f640 0299 	movw	r2, #2201	@ 0x899
 8007482:	493d      	ldr	r1, [pc, #244]	@ (8007578 <xTaskResumeAll+0x110>)
 8007484:	483d      	ldr	r0, [pc, #244]	@ (800757c <xTaskResumeAll+0x114>)
 8007486:	f00c f83b 	bl	8013500 <assertFail>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800748a:	f001 fa67 	bl	800895c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800748e:	4b39      	ldr	r3, [pc, #228]	@ (8007574 <xTaskResumeAll+0x10c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3b01      	subs	r3, #1
 8007494:	4a37      	ldr	r2, [pc, #220]	@ (8007574 <xTaskResumeAll+0x10c>)
 8007496:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007498:	4b36      	ldr	r3, [pc, #216]	@ (8007574 <xTaskResumeAll+0x10c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d161      	bne.n	8007564 <xTaskResumeAll+0xfc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074a0:	4b37      	ldr	r3, [pc, #220]	@ (8007580 <xTaskResumeAll+0x118>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d05d      	beq.n	8007564 <xTaskResumeAll+0xfc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074a8:	e02e      	b.n	8007508 <xTaskResumeAll+0xa0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074aa:	4b36      	ldr	r3, [pc, #216]	@ (8007584 <xTaskResumeAll+0x11c>)
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	3318      	adds	r3, #24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe fdb0 	bl	800601c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3304      	adds	r3, #4
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fe fdab 	bl	800601c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	2201      	movs	r2, #1
 80074cc:	409a      	lsls	r2, r3
 80074ce:	4b2e      	ldr	r3, [pc, #184]	@ (8007588 <xTaskResumeAll+0x120>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	4a2c      	ldr	r2, [pc, #176]	@ (8007588 <xTaskResumeAll+0x120>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074dc:	4613      	mov	r3, r2
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4413      	add	r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4a29      	ldr	r2, [pc, #164]	@ (800758c <xTaskResumeAll+0x124>)
 80074e6:	441a      	add	r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4619      	mov	r1, r3
 80074ee:	4610      	mov	r0, r2
 80074f0:	f7fe fd37 	bl	8005f62 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f8:	4b25      	ldr	r3, [pc, #148]	@ (8007590 <xTaskResumeAll+0x128>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fe:	429a      	cmp	r2, r3
 8007500:	d302      	bcc.n	8007508 <xTaskResumeAll+0xa0>
                    {
                        xYieldPending = pdTRUE;
 8007502:	4b24      	ldr	r3, [pc, #144]	@ (8007594 <xTaskResumeAll+0x12c>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007508:	4b1e      	ldr	r3, [pc, #120]	@ (8007584 <xTaskResumeAll+0x11c>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1cc      	bne.n	80074aa <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d001      	beq.n	800751a <xTaskResumeAll+0xb2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007516:	f000 fb97 	bl	8007c48 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800751a:	4b1f      	ldr	r3, [pc, #124]	@ (8007598 <xTaskResumeAll+0x130>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d010      	beq.n	8007548 <xTaskResumeAll+0xe0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007526:	f000 f84b 	bl	80075c0 <xTaskIncrementTick>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <xTaskResumeAll+0xce>
                            {
                                xYieldPending = pdTRUE;
 8007530:	4b18      	ldr	r3, [pc, #96]	@ (8007594 <xTaskResumeAll+0x12c>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3b01      	subs	r3, #1
 800753a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f1      	bne.n	8007526 <xTaskResumeAll+0xbe>

                        xPendedTicks = 0;
 8007542:	4b15      	ldr	r3, [pc, #84]	@ (8007598 <xTaskResumeAll+0x130>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007548:	4b12      	ldr	r3, [pc, #72]	@ (8007594 <xTaskResumeAll+0x12c>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <xTaskResumeAll+0xfc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007550:	2301      	movs	r3, #1
 8007552:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007554:	4b11      	ldr	r3, [pc, #68]	@ (800759c <xTaskResumeAll+0x134>)
 8007556:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007564:	f001 fa28 	bl	80089b8 <vPortExitCritical>

    return xAlreadyYielded;
 8007568:	68bb      	ldr	r3, [r7, #8]
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	20000380 	.word	0x20000380
 8007578:	0801aee8 	.word	0x0801aee8
 800757c:	0801b084 	.word	0x0801b084
 8007580:	20000358 	.word	0x20000358
 8007584:	20000318 	.word	0x20000318
 8007588:	20000360 	.word	0x20000360
 800758c:	20000270 	.word	0x20000270
 8007590:	2000026c 	.word	0x2000026c
 8007594:	2000036c 	.word	0x2000036c
 8007598:	20000368 	.word	0x20000368
 800759c:	e000ed04 	.word	0xe000ed04

080075a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80075a6:	4b05      	ldr	r3, [pc, #20]	@ (80075bc <xTaskGetTickCount+0x1c>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80075ac:	687b      	ldr	r3, [r7, #4]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	2000035c 	.word	0x2000035c

080075c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 80075ca:	4a4e      	ldr	r2, [pc, #312]	@ (8007704 <xTaskIncrementTick+0x144>)
 80075cc:	4b4e      	ldr	r3, [pc, #312]	@ (8007708 <xTaskIncrementTick+0x148>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6013      	str	r3, [r2, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d2:	4b4e      	ldr	r3, [pc, #312]	@ (800770c <xTaskIncrementTick+0x14c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f040 8089 	bne.w	80076ee <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075dc:	4b4a      	ldr	r3, [pc, #296]	@ (8007708 <xTaskIncrementTick+0x148>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3301      	adds	r3, #1
 80075e2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80075e4:	4a48      	ldr	r2, [pc, #288]	@ (8007708 <xTaskIncrementTick+0x148>)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d11b      	bne.n	8007628 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 80075f0:	4b47      	ldr	r3, [pc, #284]	@ (8007710 <xTaskIncrementTick+0x150>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <xTaskIncrementTick+0x46>
 80075fa:	f640 22ac 	movw	r2, #2732	@ 0xaac
 80075fe:	4945      	ldr	r1, [pc, #276]	@ (8007714 <xTaskIncrementTick+0x154>)
 8007600:	4845      	ldr	r0, [pc, #276]	@ (8007718 <xTaskIncrementTick+0x158>)
 8007602:	f00b ff7d 	bl	8013500 <assertFail>
 8007606:	4b42      	ldr	r3, [pc, #264]	@ (8007710 <xTaskIncrementTick+0x150>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60fb      	str	r3, [r7, #12]
 800760c:	4b43      	ldr	r3, [pc, #268]	@ (800771c <xTaskIncrementTick+0x15c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a3f      	ldr	r2, [pc, #252]	@ (8007710 <xTaskIncrementTick+0x150>)
 8007612:	6013      	str	r3, [r2, #0]
 8007614:	4a41      	ldr	r2, [pc, #260]	@ (800771c <xTaskIncrementTick+0x15c>)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6013      	str	r3, [r2, #0]
 800761a:	4b41      	ldr	r3, [pc, #260]	@ (8007720 <xTaskIncrementTick+0x160>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a3f      	ldr	r2, [pc, #252]	@ (8007720 <xTaskIncrementTick+0x160>)
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	f000 fb10 	bl	8007c48 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007628:	4b3e      	ldr	r3, [pc, #248]	@ (8007724 <xTaskIncrementTick+0x164>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d348      	bcc.n	80076c4 <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007632:	4b37      	ldr	r3, [pc, #220]	@ (8007710 <xTaskIncrementTick+0x150>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d104      	bne.n	8007646 <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763c:	4b39      	ldr	r3, [pc, #228]	@ (8007724 <xTaskIncrementTick+0x164>)
 800763e:	f04f 32ff 	mov.w	r2, #4294967295
 8007642:	601a      	str	r2, [r3, #0]
                    break;
 8007644:	e03e      	b.n	80076c4 <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007646:	4b32      	ldr	r3, [pc, #200]	@ (8007710 <xTaskIncrementTick+0x150>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	429a      	cmp	r2, r3
 800765c:	d203      	bcs.n	8007666 <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800765e:	4a31      	ldr	r2, [pc, #196]	@ (8007724 <xTaskIncrementTick+0x164>)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007664:	e02e      	b.n	80076c4 <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	3304      	adds	r3, #4
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fcd6 	bl	800601c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	2b00      	cmp	r3, #0
 8007676:	d004      	beq.n	8007682 <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	3318      	adds	r3, #24
 800767c:	4618      	mov	r0, r3
 800767e:	f7fe fccd 	bl	800601c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007686:	2201      	movs	r2, #1
 8007688:	409a      	lsls	r2, r3
 800768a:	4b27      	ldr	r3, [pc, #156]	@ (8007728 <xTaskIncrementTick+0x168>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4313      	orrs	r3, r2
 8007690:	4a25      	ldr	r2, [pc, #148]	@ (8007728 <xTaskIncrementTick+0x168>)
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4a22      	ldr	r2, [pc, #136]	@ (800772c <xTaskIncrementTick+0x16c>)
 80076a2:	441a      	add	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3304      	adds	r3, #4
 80076a8:	4619      	mov	r1, r3
 80076aa:	4610      	mov	r0, r2
 80076ac:	f7fe fc59 	bl	8005f62 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b4:	4b1e      	ldr	r3, [pc, #120]	@ (8007730 <xTaskIncrementTick+0x170>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d3b9      	bcc.n	8007632 <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 80076be:	2301      	movs	r3, #1
 80076c0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c2:	e7b6      	b.n	8007632 <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076c4:	4b1a      	ldr	r3, [pc, #104]	@ (8007730 <xTaskIncrementTick+0x170>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ca:	4918      	ldr	r1, [pc, #96]	@ (800772c <xTaskIncrementTick+0x16c>)
 80076cc:	4613      	mov	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4413      	add	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	440b      	add	r3, r1
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d901      	bls.n	80076e0 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80076e0:	4b14      	ldr	r3, [pc, #80]	@ (8007734 <xTaskIncrementTick+0x174>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d007      	beq.n	80076f8 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
 80076ec:	e004      	b.n	80076f8 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80076ee:	4b12      	ldr	r3, [pc, #72]	@ (8007738 <xTaskIncrementTick+0x178>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a10      	ldr	r2, [pc, #64]	@ (8007738 <xTaskIncrementTick+0x178>)
 80076f6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80076f8:	697b      	ldr	r3, [r7, #20]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3718      	adds	r7, #24
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	e0000008 	.word	0xe0000008
 8007708:	2000035c 	.word	0x2000035c
 800770c:	20000380 	.word	0x20000380
 8007710:	20000310 	.word	0x20000310
 8007714:	0801aee8 	.word	0x0801aee8
 8007718:	0801b0b8 	.word	0x0801b0b8
 800771c:	20000314 	.word	0x20000314
 8007720:	20000370 	.word	0x20000370
 8007724:	20000378 	.word	0x20000378
 8007728:	20000360 	.word	0x20000360
 800772c:	20000270 	.word	0x20000270
 8007730:	2000026c 	.word	0x2000026c
 8007734:	2000036c 	.word	0x2000036c
 8007738:	20000368 	.word	0x20000368

0800773c <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d103      	bne.n	8007754 <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 800774c:	4b08      	ldr	r3, [pc, #32]	@ (8007770 <vTaskSetApplicationTaskTag+0x34>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e001      	b.n	8007758 <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 8007758:	f001 f900 	bl	800895c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        taskEXIT_CRITICAL();
 8007762:	f001 f929 	bl	80089b8 <vPortExitCritical>
    }
 8007766:	bf00      	nop
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	2000026c 	.word	0x2000026c

08007774 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800777a:	4b3c      	ldr	r3, [pc, #240]	@ (800786c <vTaskSwitchContext+0xf8>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d003      	beq.n	800778a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007782:	4b3b      	ldr	r3, [pc, #236]	@ (8007870 <vTaskSwitchContext+0xfc>)
 8007784:	2201      	movs	r2, #1
 8007786:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007788:	e06b      	b.n	8007862 <vTaskSwitchContext+0xee>
        xYieldPending = pdFALSE;
 800778a:	4b39      	ldr	r3, [pc, #228]	@ (8007870 <vTaskSwitchContext+0xfc>)
 800778c:	2200      	movs	r2, #0
 800778e:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8007790:	f005 fa8e 	bl	800ccb0 <usecTimestamp>
 8007794:	4602      	mov	r2, r0
 8007796:	460b      	mov	r3, r1
 8007798:	4b36      	ldr	r3, [pc, #216]	@ (8007874 <vTaskSwitchContext+0x100>)
 800779a:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 800779c:	4b35      	ldr	r3, [pc, #212]	@ (8007874 <vTaskSwitchContext+0x100>)
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	4b35      	ldr	r3, [pc, #212]	@ (8007878 <vTaskSwitchContext+0x104>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d909      	bls.n	80077bc <vTaskSwitchContext+0x48>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80077a8:	4b32      	ldr	r3, [pc, #200]	@ (8007874 <vTaskSwitchContext+0x100>)
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	4b32      	ldr	r3, [pc, #200]	@ (8007878 <vTaskSwitchContext+0x104>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	1ad1      	subs	r1, r2, r3
 80077b2:	4b32      	ldr	r3, [pc, #200]	@ (800787c <vTaskSwitchContext+0x108>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80077b8:	440a      	add	r2, r1
 80077ba:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 80077bc:	4b2d      	ldr	r3, [pc, #180]	@ (8007874 <vTaskSwitchContext+0x100>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a2d      	ldr	r2, [pc, #180]	@ (8007878 <vTaskSwitchContext+0x104>)
 80077c2:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 80077c4:	4b2d      	ldr	r3, [pc, #180]	@ (800787c <vTaskSwitchContext+0x108>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4b2c      	ldr	r3, [pc, #176]	@ (800787c <vTaskSwitchContext+0x108>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d808      	bhi.n	80077e6 <vTaskSwitchContext+0x72>
 80077d4:	4b29      	ldr	r3, [pc, #164]	@ (800787c <vTaskSwitchContext+0x108>)
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b28      	ldr	r3, [pc, #160]	@ (800787c <vTaskSwitchContext+0x108>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3334      	adds	r3, #52	@ 0x34
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f006 fd0d 	bl	800e200 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e6:	4b26      	ldr	r3, [pc, #152]	@ (8007880 <vTaskSwitchContext+0x10c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	fab3 f383 	clz	r3, r3
 80077f2:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	f1c3 031f 	rsb	r3, r3, #31
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	4921      	ldr	r1, [pc, #132]	@ (8007884 <vTaskSwitchContext+0x110>)
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	440b      	add	r3, r1
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d105      	bne.n	800781c <vTaskSwitchContext+0xa8>
 8007810:	f640 32e7 	movw	r2, #3047	@ 0xbe7
 8007814:	491c      	ldr	r1, [pc, #112]	@ (8007888 <vTaskSwitchContext+0x114>)
 8007816:	481d      	ldr	r0, [pc, #116]	@ (800788c <vTaskSwitchContext+0x118>)
 8007818:	f00b fe72 	bl	8013500 <assertFail>
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4613      	mov	r3, r2
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4a17      	ldr	r2, [pc, #92]	@ (8007884 <vTaskSwitchContext+0x110>)
 8007828:	4413      	add	r3, r2
 800782a:	60bb      	str	r3, [r7, #8]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	605a      	str	r2, [r3, #4]
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	685a      	ldr	r2, [r3, #4]
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	3308      	adds	r3, #8
 800783e:	429a      	cmp	r2, r3
 8007840:	d104      	bne.n	800784c <vTaskSwitchContext+0xd8>
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	605a      	str	r2, [r3, #4]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <vTaskSwitchContext+0x108>)
 8007854:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8007856:	4b09      	ldr	r3, [pc, #36]	@ (800787c <vTaskSwitchContext+0x108>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	3334      	adds	r3, #52	@ 0x34
 800785c:	4a0c      	ldr	r2, [pc, #48]	@ (8007890 <vTaskSwitchContext+0x11c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6013      	str	r3, [r2, #0]
}
 8007862:	bf00      	nop
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	20000380 	.word	0x20000380
 8007870:	2000036c 	.word	0x2000036c
 8007874:	20000388 	.word	0x20000388
 8007878:	20000384 	.word	0x20000384
 800787c:	2000026c 	.word	0x2000026c
 8007880:	20000360 	.word	0x20000360
 8007884:	20000270 	.word	0x20000270
 8007888:	0801aee8 	.word	0x0801aee8
 800788c:	0801b0e4 	.word	0x0801b0e4
 8007890:	e0000004 	.word	0xe0000004

08007894 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d105      	bne.n	80078b0 <vTaskPlaceOnEventList+0x1c>
 80078a4:	f640 4201 	movw	r2, #3073	@ 0xc01
 80078a8:	4909      	ldr	r1, [pc, #36]	@ (80078d0 <vTaskPlaceOnEventList+0x3c>)
 80078aa:	480a      	ldr	r0, [pc, #40]	@ (80078d4 <vTaskPlaceOnEventList+0x40>)
 80078ac:	f00b fe28 	bl	8013500 <assertFail>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078b0:	4b09      	ldr	r3, [pc, #36]	@ (80078d8 <vTaskPlaceOnEventList+0x44>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	3318      	adds	r3, #24
 80078b6:	4619      	mov	r1, r3
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7fe fb76 	bl	8005faa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80078be:	2101      	movs	r1, #1
 80078c0:	6838      	ldr	r0, [r7, #0]
 80078c2:	f000 fb85 	bl	8007fd0 <prvAddCurrentTaskToDelayedList>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop
 80078d0:	0801aee8 	.word	0x0801aee8
 80078d4:	0801b12c 	.word	0x0801b12c
 80078d8:	2000026c 	.word	0x2000026c

080078dc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d105      	bne.n	80078fa <vTaskPlaceOnEventListRestricted+0x1e>
 80078ee:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 80078f2:	490c      	ldr	r1, [pc, #48]	@ (8007924 <vTaskPlaceOnEventListRestricted+0x48>)
 80078f4:	480c      	ldr	r0, [pc, #48]	@ (8007928 <vTaskPlaceOnEventListRestricted+0x4c>)
 80078f6:	f00b fe03 	bl	8013500 <assertFail>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80078fa:	4b0c      	ldr	r3, [pc, #48]	@ (800792c <vTaskPlaceOnEventListRestricted+0x50>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3318      	adds	r3, #24
 8007900:	4619      	mov	r1, r3
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f7fe fb2d 	bl	8005f62 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <vTaskPlaceOnEventListRestricted+0x38>
        {
            xTicksToWait = portMAX_DELAY;
 800790e:	f04f 33ff 	mov.w	r3, #4294967295
 8007912:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007914:	6879      	ldr	r1, [r7, #4]
 8007916:	68b8      	ldr	r0, [r7, #8]
 8007918:	f000 fb5a 	bl	8007fd0 <prvAddCurrentTaskToDelayedList>
    }
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}
 8007924:	0801aee8 	.word	0x0801aee8
 8007928:	0801b12c 	.word	0x0801b12c
 800792c:	2000026c 	.word	0x2000026c

08007930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b084      	sub	sp, #16
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d105      	bne.n	8007952 <xTaskRemoveFromEventList+0x22>
 8007946:	f44f 6246 	mov.w	r2, #3168	@ 0xc60
 800794a:	4922      	ldr	r1, [pc, #136]	@ (80079d4 <xTaskRemoveFromEventList+0xa4>)
 800794c:	4822      	ldr	r0, [pc, #136]	@ (80079d8 <xTaskRemoveFromEventList+0xa8>)
 800794e:	f00b fdd7 	bl	8013500 <assertFail>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	3318      	adds	r3, #24
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fb60 	bl	800601c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800795c:	4b1f      	ldr	r3, [pc, #124]	@ (80079dc <xTaskRemoveFromEventList+0xac>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d11c      	bne.n	800799e <xTaskRemoveFromEventList+0x6e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	3304      	adds	r3, #4
 8007968:	4618      	mov	r0, r3
 800796a:	f7fe fb57 	bl	800601c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007972:	2201      	movs	r2, #1
 8007974:	409a      	lsls	r2, r3
 8007976:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <xTaskRemoveFromEventList+0xb0>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4313      	orrs	r3, r2
 800797c:	4a18      	ldr	r2, [pc, #96]	@ (80079e0 <xTaskRemoveFromEventList+0xb0>)
 800797e:	6013      	str	r3, [r2, #0]
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007984:	4613      	mov	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	4413      	add	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4a15      	ldr	r2, [pc, #84]	@ (80079e4 <xTaskRemoveFromEventList+0xb4>)
 800798e:	441a      	add	r2, r3
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f7fe fae3 	bl	8005f62 <vListInsertEnd>
 800799c:	e005      	b.n	80079aa <xTaskRemoveFromEventList+0x7a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	3318      	adds	r3, #24
 80079a2:	4619      	mov	r1, r3
 80079a4:	4810      	ldr	r0, [pc, #64]	@ (80079e8 <xTaskRemoveFromEventList+0xb8>)
 80079a6:	f7fe fadc 	bl	8005f62 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ae:	4b0f      	ldr	r3, [pc, #60]	@ (80079ec <xTaskRemoveFromEventList+0xbc>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d905      	bls.n	80079c4 <xTaskRemoveFromEventList+0x94>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80079bc:	4b0c      	ldr	r3, [pc, #48]	@ (80079f0 <xTaskRemoveFromEventList+0xc0>)
 80079be:	2201      	movs	r2, #1
 80079c0:	601a      	str	r2, [r3, #0]
 80079c2:	e001      	b.n	80079c8 <xTaskRemoveFromEventList+0x98>
    }
    else
    {
        xReturn = pdFALSE;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80079c8:	68fb      	ldr	r3, [r7, #12]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	0801aee8 	.word	0x0801aee8
 80079d8:	0801b154 	.word	0x0801b154
 80079dc:	20000380 	.word	0x20000380
 80079e0:	20000360 	.word	0x20000360
 80079e4:	20000270 	.word	0x20000270
 80079e8:	20000318 	.word	0x20000318
 80079ec:	2000026c 	.word	0x2000026c
 80079f0:	2000036c 	.word	0x2000036c

080079f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80079fc:	4b06      	ldr	r3, [pc, #24]	@ (8007a18 <vTaskInternalSetTimeOutState+0x24>)
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007a04:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <vTaskInternalSetTimeOutState+0x28>)
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	605a      	str	r2, [r3, #4]
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	20000370 	.word	0x20000370
 8007a1c:	2000035c 	.word	0x2000035c

08007a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d105      	bne.n	8007a3c <xTaskCheckForTimeOut+0x1c>
 8007a30:	f640 42db 	movw	r2, #3291	@ 0xcdb
 8007a34:	4926      	ldr	r1, [pc, #152]	@ (8007ad0 <xTaskCheckForTimeOut+0xb0>)
 8007a36:	4827      	ldr	r0, [pc, #156]	@ (8007ad4 <xTaskCheckForTimeOut+0xb4>)
 8007a38:	f00b fd62 	bl	8013500 <assertFail>
    configASSERT( pxTicksToWait );
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d105      	bne.n	8007a4e <xTaskCheckForTimeOut+0x2e>
 8007a42:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8007a46:	4922      	ldr	r1, [pc, #136]	@ (8007ad0 <xTaskCheckForTimeOut+0xb0>)
 8007a48:	4823      	ldr	r0, [pc, #140]	@ (8007ad8 <xTaskCheckForTimeOut+0xb8>)
 8007a4a:	f00b fd59 	bl	8013500 <assertFail>

    taskENTER_CRITICAL();
 8007a4e:	f000 ff85 	bl	800895c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007a52:	4b22      	ldr	r3, [pc, #136]	@ (8007adc <xTaskCheckForTimeOut+0xbc>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	1ad3      	subs	r3, r2, r3
 8007a60:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d102      	bne.n	8007a72 <xTaskCheckForTimeOut+0x52>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	617b      	str	r3, [r7, #20]
 8007a70:	e026      	b.n	8007ac0 <xTaskCheckForTimeOut+0xa0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	4b1a      	ldr	r3, [pc, #104]	@ (8007ae0 <xTaskCheckForTimeOut+0xc0>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d00a      	beq.n	8007a94 <xTaskCheckForTimeOut+0x74>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d305      	bcc.n	8007a94 <xTaskCheckForTimeOut+0x74>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e015      	b.n	8007ac0 <xTaskCheckForTimeOut+0xa0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d20b      	bcs.n	8007ab6 <xTaskCheckForTimeOut+0x96>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1ad2      	subs	r2, r2, r3
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff ffa2 	bl	80079f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e004      	b.n	8007ac0 <xTaskCheckForTimeOut+0xa0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8007ac0:	f000 ff7a 	bl	80089b8 <vPortExitCritical>

    return xReturn;
 8007ac4:	697b      	ldr	r3, [r7, #20]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	0801aee8 	.word	0x0801aee8
 8007ad4:	0801b184 	.word	0x0801b184
 8007ad8:	0801b190 	.word	0x0801b190
 8007adc:	2000035c 	.word	0x2000035c
 8007ae0:	20000370 	.word	0x20000370

08007ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007ae8:	4b03      	ldr	r3, [pc, #12]	@ (8007af8 <vTaskMissedYield+0x14>)
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
}
 8007aee:	bf00      	nop
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	2000036c 	.word	0x2000036c

08007afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007b04:	f000 f844 	bl	8007b90 <prvCheckTasksWaitingTermination>
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8007b08:	f006 fb64 	bl	800e1d4 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8007b0c:	bf00      	nop
 8007b0e:	e7f9      	b.n	8007b04 <prvIdleTask+0x8>

08007b10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b082      	sub	sp, #8
 8007b14:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b16:	2300      	movs	r3, #0
 8007b18:	607b      	str	r3, [r7, #4]
 8007b1a:	e00c      	b.n	8007b36 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a12      	ldr	r2, [pc, #72]	@ (8007b70 <prvInitialiseTaskLists+0x60>)
 8007b28:	4413      	add	r3, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe f9ec 	bl	8005f08 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3301      	adds	r3, #1
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b05      	cmp	r3, #5
 8007b3a:	d9ef      	bls.n	8007b1c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007b3c:	480d      	ldr	r0, [pc, #52]	@ (8007b74 <prvInitialiseTaskLists+0x64>)
 8007b3e:	f7fe f9e3 	bl	8005f08 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007b42:	480d      	ldr	r0, [pc, #52]	@ (8007b78 <prvInitialiseTaskLists+0x68>)
 8007b44:	f7fe f9e0 	bl	8005f08 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007b48:	480c      	ldr	r0, [pc, #48]	@ (8007b7c <prvInitialiseTaskLists+0x6c>)
 8007b4a:	f7fe f9dd 	bl	8005f08 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007b4e:	480c      	ldr	r0, [pc, #48]	@ (8007b80 <prvInitialiseTaskLists+0x70>)
 8007b50:	f7fe f9da 	bl	8005f08 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007b54:	480b      	ldr	r0, [pc, #44]	@ (8007b84 <prvInitialiseTaskLists+0x74>)
 8007b56:	f7fe f9d7 	bl	8005f08 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b88 <prvInitialiseTaskLists+0x78>)
 8007b5c:	4a05      	ldr	r2, [pc, #20]	@ (8007b74 <prvInitialiseTaskLists+0x64>)
 8007b5e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b60:	4b0a      	ldr	r3, [pc, #40]	@ (8007b8c <prvInitialiseTaskLists+0x7c>)
 8007b62:	4a05      	ldr	r2, [pc, #20]	@ (8007b78 <prvInitialiseTaskLists+0x68>)
 8007b64:	601a      	str	r2, [r3, #0]
}
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000270 	.word	0x20000270
 8007b74:	200002e8 	.word	0x200002e8
 8007b78:	200002fc 	.word	0x200002fc
 8007b7c:	20000318 	.word	0x20000318
 8007b80:	2000032c 	.word	0x2000032c
 8007b84:	20000344 	.word	0x20000344
 8007b88:	20000310 	.word	0x20000310
 8007b8c:	20000314 	.word	0x20000314

08007b90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b96:	e019      	b.n	8007bcc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007b98:	f000 fee0 	bl	800895c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b9c:	4b10      	ldr	r3, [pc, #64]	@ (8007be0 <prvCheckTasksWaitingTermination+0x50>)
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7fe fa37 	bl	800601c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007bae:	4b0d      	ldr	r3, [pc, #52]	@ (8007be4 <prvCheckTasksWaitingTermination+0x54>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8007be4 <prvCheckTasksWaitingTermination+0x54>)
 8007bb6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8007be8 <prvCheckTasksWaitingTermination+0x58>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8007be8 <prvCheckTasksWaitingTermination+0x58>)
 8007bc0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007bc2:	f000 fef9 	bl	80089b8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f810 	bl	8007bec <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007bcc:	4b06      	ldr	r3, [pc, #24]	@ (8007be8 <prvCheckTasksWaitingTermination+0x58>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e1      	bne.n	8007b98 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	2000032c 	.word	0x2000032c
 8007be4:	20000358 	.word	0x20000358
 8007be8:	20000340 	.word	0x20000340

08007bec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d108      	bne.n	8007c10 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c02:	4618      	mov	r0, r3
 8007c04:	f001 f884 	bl	8008d10 <vPortFree>
                    vPortFree( pxTCB );
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 f881 	bl	8008d10 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007c0e:	e013      	b.n	8007c38 <prvDeleteTCB+0x4c>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d103      	bne.n	8007c22 <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 f878 	bl	8008d10 <vPortFree>
    }
 8007c20:	e00a      	b.n	8007c38 <prvDeleteTCB+0x4c>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d005      	beq.n	8007c38 <prvDeleteTCB+0x4c>
 8007c2c:	f640 727a 	movw	r2, #3962	@ 0xf7a
 8007c30:	4903      	ldr	r1, [pc, #12]	@ (8007c40 <prvDeleteTCB+0x54>)
 8007c32:	4804      	ldr	r0, [pc, #16]	@ (8007c44 <prvDeleteTCB+0x58>)
 8007c34:	f00b fc64 	bl	8013500 <assertFail>
    }
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	0801aee8 	.word	0x0801aee8
 8007c44:	0801b1a0 	.word	0x0801b1a0

08007c48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c78 <prvResetNextTaskUnblockTime+0x30>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d104      	bne.n	8007c60 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007c56:	4b09      	ldr	r3, [pc, #36]	@ (8007c7c <prvResetNextTaskUnblockTime+0x34>)
 8007c58:	f04f 32ff 	mov.w	r2, #4294967295
 8007c5c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007c5e:	e005      	b.n	8007c6c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007c60:	4b05      	ldr	r3, [pc, #20]	@ (8007c78 <prvResetNextTaskUnblockTime+0x30>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a04      	ldr	r2, [pc, #16]	@ (8007c7c <prvResetNextTaskUnblockTime+0x34>)
 8007c6a:	6013      	str	r3, [r2, #0]
}
 8007c6c:	bf00      	nop
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	20000310 	.word	0x20000310
 8007c7c:	20000378 	.word	0x20000378

08007c80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007c86:	4b0b      	ldr	r3, [pc, #44]	@ (8007cb4 <xTaskGetSchedulerState+0x34>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d102      	bne.n	8007c94 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	607b      	str	r3, [r7, #4]
 8007c92:	e008      	b.n	8007ca6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c94:	4b08      	ldr	r3, [pc, #32]	@ (8007cb8 <xTaskGetSchedulerState+0x38>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007c9c:	2302      	movs	r3, #2
 8007c9e:	607b      	str	r3, [r7, #4]
 8007ca0:	e001      	b.n	8007ca6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007ca6:	687b      	ldr	r3, [r7, #4]
    }
 8007ca8:	4618      	mov	r0, r3
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr
 8007cb4:	20000364 	.word	0x20000364
 8007cb8:	20000380 	.word	0x20000380

08007cbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b084      	sub	sp, #16
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d05e      	beq.n	8007d90 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd6:	4b31      	ldr	r3, [pc, #196]	@ (8007d9c <xTaskPriorityInherit+0xe0>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d24e      	bcs.n	8007d7e <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	699b      	ldr	r3, [r3, #24]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	db06      	blt.n	8007cf6 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ce8:	4b2c      	ldr	r3, [pc, #176]	@ (8007d9c <xTaskPriorityInherit+0xe0>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cee:	f1c3 0206 	rsb	r2, r3, #6
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6959      	ldr	r1, [r3, #20]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a26      	ldr	r2, [pc, #152]	@ (8007da0 <xTaskPriorityInherit+0xe4>)
 8007d08:	4413      	add	r3, r2
 8007d0a:	4299      	cmp	r1, r3
 8007d0c:	d12f      	bne.n	8007d6e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	3304      	adds	r3, #4
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe f982 	bl	800601c <uxListRemove>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d22:	2201      	movs	r2, #1
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	43da      	mvns	r2, r3
 8007d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007da4 <xTaskPriorityInherit+0xe8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	4a1c      	ldr	r2, [pc, #112]	@ (8007da4 <xTaskPriorityInherit+0xe8>)
 8007d32:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d34:	4b19      	ldr	r3, [pc, #100]	@ (8007d9c <xTaskPriorityInherit+0xe0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d42:	2201      	movs	r2, #1
 8007d44:	409a      	lsls	r2, r3
 8007d46:	4b17      	ldr	r3, [pc, #92]	@ (8007da4 <xTaskPriorityInherit+0xe8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	4a15      	ldr	r2, [pc, #84]	@ (8007da4 <xTaskPriorityInherit+0xe8>)
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d54:	4613      	mov	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4a10      	ldr	r2, [pc, #64]	@ (8007da0 <xTaskPriorityInherit+0xe4>)
 8007d5e:	441a      	add	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	3304      	adds	r3, #4
 8007d64:	4619      	mov	r1, r3
 8007d66:	4610      	mov	r0, r2
 8007d68:	f7fe f8fb 	bl	8005f62 <vListInsertEnd>
 8007d6c:	e004      	b.n	8007d78 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8007d9c <xTaskPriorityInherit+0xe0>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	e008      	b.n	8007d90 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d82:	4b06      	ldr	r3, [pc, #24]	@ (8007d9c <xTaskPriorityInherit+0xe0>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d201      	bcs.n	8007d90 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007d90:	68fb      	ldr	r3, [r7, #12]
    }
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	2000026c 	.word	0x2000026c
 8007da0:	20000270 	.word	0x20000270
 8007da4:	20000360 	.word	0x20000360

08007da8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d059      	beq.n	8007e72 <xTaskPriorityDisinherit+0xca>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007dbe:	4b2f      	ldr	r3, [pc, #188]	@ (8007e7c <xTaskPriorityDisinherit+0xd4>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d005      	beq.n	8007dd4 <xTaskPriorityDisinherit+0x2c>
 8007dc8:	f241 022d 	movw	r2, #4141	@ 0x102d
 8007dcc:	492c      	ldr	r1, [pc, #176]	@ (8007e80 <xTaskPriorityDisinherit+0xd8>)
 8007dce:	482d      	ldr	r0, [pc, #180]	@ (8007e84 <xTaskPriorityDisinherit+0xdc>)
 8007dd0:	f00b fb96 	bl	8013500 <assertFail>
            configASSERT( pxTCB->uxMutexesHeld );
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d105      	bne.n	8007de8 <xTaskPriorityDisinherit+0x40>
 8007ddc:	f241 022e 	movw	r2, #4142	@ 0x102e
 8007de0:	4927      	ldr	r1, [pc, #156]	@ (8007e80 <xTaskPriorityDisinherit+0xd8>)
 8007de2:	4829      	ldr	r0, [pc, #164]	@ (8007e88 <xTaskPriorityDisinherit+0xe0>)
 8007de4:	f00b fb8c 	bl	8013500 <assertFail>
            ( pxTCB->uxMutexesHeld )--;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dec:	1e5a      	subs	r2, r3, #1
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d039      	beq.n	8007e72 <xTaskPriorityDisinherit+0xca>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d135      	bne.n	8007e72 <xTaskPriorityDisinherit+0xca>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3304      	adds	r3, #4
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe f906 	bl	800601c <uxListRemove>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <xTaskPriorityDisinherit+0x84>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e20:	43da      	mvns	r2, r3
 8007e22:	4b1a      	ldr	r3, [pc, #104]	@ (8007e8c <xTaskPriorityDisinherit+0xe4>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4013      	ands	r3, r2
 8007e28:	4a18      	ldr	r2, [pc, #96]	@ (8007e8c <xTaskPriorityDisinherit+0xe4>)
 8007e2a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e38:	f1c3 0206 	rsb	r2, r3, #6
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e44:	2201      	movs	r2, #1
 8007e46:	409a      	lsls	r2, r3
 8007e48:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <xTaskPriorityDisinherit+0xe4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	4a0f      	ldr	r2, [pc, #60]	@ (8007e8c <xTaskPriorityDisinherit+0xe4>)
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8007e90 <xTaskPriorityDisinherit+0xe8>)
 8007e60:	441a      	add	r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	3304      	adds	r3, #4
 8007e66:	4619      	mov	r1, r3
 8007e68:	4610      	mov	r0, r2
 8007e6a:	f7fe f87a 	bl	8005f62 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007e72:	68fb      	ldr	r3, [r7, #12]
    }
 8007e74:	4618      	mov	r0, r3
 8007e76:	3710      	adds	r7, #16
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	2000026c 	.word	0x2000026c
 8007e80:	0801aee8 	.word	0x0801aee8
 8007e84:	0801b1e8 	.word	0x0801b1e8
 8007e88:	0801b200 	.word	0x0801b200
 8007e8c:	20000360 	.word	0x20000360
 8007e90:	20000270 	.word	0x20000270

08007e94 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b086      	sub	sp, #24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d06d      	beq.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0xf4>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d105      	bne.n	8007ec0 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8007eb4:	f241 027d 	movw	r2, #4221	@ 0x107d
 8007eb8:	4935      	ldr	r1, [pc, #212]	@ (8007f90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007eba:	4836      	ldr	r0, [pc, #216]	@ (8007f94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ebc:	f00b fb20 	bl	8013500 <assertFail>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d902      	bls.n	8007ed0 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	617b      	str	r3, [r7, #20]
 8007ece:	e002      	b.n	8007ed6 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ed4:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d053      	beq.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0xf4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d14e      	bne.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0xf4>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8007eea:	4b2b      	ldr	r3, [pc, #172]	@ (8007f98 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	693a      	ldr	r2, [r7, #16]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d105      	bne.n	8007f00 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 8007ef4:	f241 0298 	movw	r2, #4248	@ 0x1098
 8007ef8:	4925      	ldr	r1, [pc, #148]	@ (8007f90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007efa:	4828      	ldr	r0, [pc, #160]	@ (8007f9c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007efc:	f00b fb00 	bl	8013500 <assertFail>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	699b      	ldr	r3, [r3, #24]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	db04      	blt.n	8007f1e <vTaskPriorityDisinheritAfterTimeout+0x8a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	f1c3 0206 	rsb	r2, r3, #6
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	6959      	ldr	r1, [r3, #20]
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	4613      	mov	r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	4413      	add	r3, r2
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007f2e:	4413      	add	r3, r2
 8007f30:	4299      	cmp	r1, r3
 8007f32:	d129      	bne.n	8007f88 <vTaskPriorityDisinheritAfterTimeout+0xf4>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3304      	adds	r3, #4
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fe f86f 	bl	800601c <uxListRemove>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <vTaskPriorityDisinheritAfterTimeout+0xc6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	2201      	movs	r2, #1
 8007f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f4e:	43da      	mvns	r2, r3
 8007f50:	4b14      	ldr	r3, [pc, #80]	@ (8007fa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4013      	ands	r3, r2
 8007f56:	4a13      	ldr	r2, [pc, #76]	@ (8007fa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007f58:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5e:	2201      	movs	r2, #1
 8007f60:	409a      	lsls	r2, r3
 8007f62:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	4a0e      	ldr	r2, [pc, #56]	@ (8007fa4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	4a09      	ldr	r2, [pc, #36]	@ (8007fa0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007f7a:	441a      	add	r2, r3
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fd ffed 	bl	8005f62 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007f88:	bf00      	nop
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	0801aee8 	.word	0x0801aee8
 8007f94:	0801b200 	.word	0x0801b200
 8007f98:	2000026c 	.word	0x2000026c
 8007f9c:	0801b218 	.word	0x0801b218
 8007fa0:	20000270 	.word	0x20000270
 8007fa4:	20000360 	.word	0x20000360

08007fa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8007fac:	4b07      	ldr	r3, [pc, #28]	@ (8007fcc <pvTaskIncrementMutexHeldCount+0x24>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d004      	beq.n	8007fbe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8007fb4:	4b05      	ldr	r3, [pc, #20]	@ (8007fcc <pvTaskIncrementMutexHeldCount+0x24>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007fba:	3201      	adds	r2, #1
 8007fbc:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 8007fbe:	4b03      	ldr	r3, [pc, #12]	@ (8007fcc <pvTaskIncrementMutexHeldCount+0x24>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
    }
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr
 8007fcc:	2000026c 	.word	0x2000026c

08007fd0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b084      	sub	sp, #16
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007fda:	4b29      	ldr	r3, [pc, #164]	@ (8008080 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fe0:	4b28      	ldr	r3, [pc, #160]	@ (8008084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe f818 	bl	800601c <uxListRemove>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10b      	bne.n	800800a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007ff2:	4b24      	ldr	r3, [pc, #144]	@ (8008084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	43da      	mvns	r2, r3
 8008000:	4b21      	ldr	r3, [pc, #132]	@ (8008088 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4013      	ands	r3, r2
 8008006:	4a20      	ldr	r2, [pc, #128]	@ (8008088 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008008:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008010:	d10a      	bne.n	8008028 <prvAddCurrentTaskToDelayedList+0x58>
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008018:	4b1a      	ldr	r3, [pc, #104]	@ (8008084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	3304      	adds	r3, #4
 800801e:	4619      	mov	r1, r3
 8008020:	481a      	ldr	r0, [pc, #104]	@ (800808c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008022:	f7fd ff9e 	bl	8005f62 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008026:	e026      	b.n	8008076 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4413      	add	r3, r2
 800802e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008030:	4b14      	ldr	r3, [pc, #80]	@ (8008084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	429a      	cmp	r2, r3
 800803e:	d209      	bcs.n	8008054 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008040:	4b13      	ldr	r3, [pc, #76]	@ (8008090 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	4b0f      	ldr	r3, [pc, #60]	@ (8008084 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	3304      	adds	r3, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4610      	mov	r0, r2
 800804e:	f7fd ffac 	bl	8005faa <vListInsert>
}
 8008052:	e010      	b.n	8008076 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008054:	4b0f      	ldr	r3, [pc, #60]	@ (8008094 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008056:	681a      	ldr	r2, [r3, #0]
 8008058:	4b0a      	ldr	r3, [pc, #40]	@ (8008084 <prvAddCurrentTaskToDelayedList+0xb4>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3304      	adds	r3, #4
 800805e:	4619      	mov	r1, r3
 8008060:	4610      	mov	r0, r2
 8008062:	f7fd ffa2 	bl	8005faa <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008066:	4b0c      	ldr	r3, [pc, #48]	@ (8008098 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	429a      	cmp	r2, r3
 800806e:	d202      	bcs.n	8008076 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008070:	4a09      	ldr	r2, [pc, #36]	@ (8008098 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	6013      	str	r3, [r2, #0]
}
 8008076:	bf00      	nop
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	2000035c 	.word	0x2000035c
 8008084:	2000026c 	.word	0x2000026c
 8008088:	20000360 	.word	0x20000360
 800808c:	20000344 	.word	0x20000344
 8008090:	20000314 	.word	0x20000314
 8008094:	20000310 	.word	0x20000310
 8008098:	20000378 	.word	0x20000378

0800809c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800809c:	b580      	push	{r7, lr}
 800809e:	b088      	sub	sp, #32
 80080a0:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80080a6:	f000 fb03 	bl	80086b0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80080aa:	4b19      	ldr	r3, [pc, #100]	@ (8008110 <xTimerCreateTimerTask+0x74>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d020      	beq.n	80080f4 <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80080b6:	2300      	movs	r3, #0
 80080b8:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80080ba:	463a      	mov	r2, r7
 80080bc:	1d39      	adds	r1, r7, #4
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	4618      	mov	r0, r3
 80080c4:	f005 ff76 	bl	800dfb4 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80080c8:	6839      	ldr	r1, [r7, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	9202      	str	r2, [sp, #8]
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	2301      	movs	r3, #1
 80080d4:	9300      	str	r3, [sp, #0]
 80080d6:	2300      	movs	r3, #0
 80080d8:	460a      	mov	r2, r1
 80080da:	490e      	ldr	r1, [pc, #56]	@ (8008114 <xTimerCreateTimerTask+0x78>)
 80080dc:	480e      	ldr	r0, [pc, #56]	@ (8008118 <xTimerCreateTimerTask+0x7c>)
 80080de:	f7fe fef1 	bl	8006ec4 <xTaskCreateStatic>
 80080e2:	4603      	mov	r3, r0
 80080e4:	4a0d      	ldr	r2, [pc, #52]	@ (800811c <xTimerCreateTimerTask+0x80>)
 80080e6:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 80080e8:	4b0c      	ldr	r3, [pc, #48]	@ (800811c <xTimerCreateTimerTask+0x80>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 80080f0:	2301      	movs	r3, #1
 80080f2:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d105      	bne.n	8008106 <xTimerCreateTimerTask+0x6a>
 80080fa:	f240 120d 	movw	r2, #269	@ 0x10d
 80080fe:	4908      	ldr	r1, [pc, #32]	@ (8008120 <xTimerCreateTimerTask+0x84>)
 8008100:	4808      	ldr	r0, [pc, #32]	@ (8008124 <xTimerCreateTimerTask+0x88>)
 8008102:	f00b f9fd 	bl	8013500 <assertFail>
        return xReturn;
 8008106:	68fb      	ldr	r3, [r7, #12]
    }
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	200003bc 	.word	0x200003bc
 8008114:	0801b348 	.word	0x0801b348
 8008118:	08008259 	.word	0x08008259
 800811c:	200003c0 	.word	0x200003c0
 8008120:	0801b350 	.word	0x0801b350
 8008124:	0801b368 	.word	0x0801b368

08008128 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8008128:	b580      	push	{r7, lr}
 800812a:	b08a      	sub	sp, #40	@ 0x28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8008136:	2300      	movs	r3, #0
 8008138:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d105      	bne.n	800814c <xTimerGenericCommand+0x24>
 8008140:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 8008144:	491b      	ldr	r1, [pc, #108]	@ (80081b4 <xTimerGenericCommand+0x8c>)
 8008146:	481c      	ldr	r0, [pc, #112]	@ (80081b8 <xTimerGenericCommand+0x90>)
 8008148:	f00b f9da 	bl	8013500 <assertFail>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800814c:	4b1b      	ldr	r3, [pc, #108]	@ (80081bc <xTimerGenericCommand+0x94>)
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d02a      	beq.n	80081aa <xTimerGenericCommand+0x82>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b05      	cmp	r3, #5
 8008164:	dc18      	bgt.n	8008198 <xTimerGenericCommand+0x70>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008166:	f7ff fd8b 	bl	8007c80 <xTaskGetSchedulerState>
 800816a:	4603      	mov	r3, r0
 800816c:	2b02      	cmp	r3, #2
 800816e:	d109      	bne.n	8008184 <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008170:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <xTimerGenericCommand+0x94>)
 8008172:	6818      	ldr	r0, [r3, #0]
 8008174:	f107 0114 	add.w	r1, r7, #20
 8008178:	2300      	movs	r3, #0
 800817a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817c:	f7fe f8f4 	bl	8006368 <xQueueGenericSend>
 8008180:	6278      	str	r0, [r7, #36]	@ 0x24
 8008182:	e012      	b.n	80081aa <xTimerGenericCommand+0x82>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008184:	4b0d      	ldr	r3, [pc, #52]	@ (80081bc <xTimerGenericCommand+0x94>)
 8008186:	6818      	ldr	r0, [r3, #0]
 8008188:	f107 0114 	add.w	r1, r7, #20
 800818c:	2300      	movs	r3, #0
 800818e:	2200      	movs	r2, #0
 8008190:	f7fe f8ea 	bl	8006368 <xQueueGenericSend>
 8008194:	6278      	str	r0, [r7, #36]	@ 0x24
 8008196:	e008      	b.n	80081aa <xTimerGenericCommand+0x82>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008198:	4b08      	ldr	r3, [pc, #32]	@ (80081bc <xTimerGenericCommand+0x94>)
 800819a:	6818      	ldr	r0, [r3, #0]
 800819c:	f107 0114 	add.w	r1, r7, #20
 80081a0:	2300      	movs	r3, #0
 80081a2:	683a      	ldr	r2, [r7, #0]
 80081a4:	f7fe f9ee 	bl	8006584 <xQueueGenericSendFromISR>
 80081a8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80081ac:	4618      	mov	r0, r3
 80081ae:	3728      	adds	r7, #40	@ 0x28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}
 80081b4:	0801b350 	.word	0x0801b350
 80081b8:	0801b3b8 	.word	0x0801b3b8
 80081bc:	200003bc 	.word	0x200003bc

080081c0 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af02      	add	r7, sp, #8
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081ca:	4b20      	ldr	r3, [pc, #128]	@ (800824c <prvProcessExpiredTimer+0x8c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	3304      	adds	r3, #4
 80081d8:	4618      	mov	r0, r3
 80081da:	f7fd ff1f 	bl	800601c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e4:	f003 0304 	and.w	r3, r3, #4
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01e      	beq.n	800822a <prvProcessExpiredTimer+0x6a>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	699a      	ldr	r2, [r3, #24]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	18d1      	adds	r1, r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	683a      	ldr	r2, [r7, #0]
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f8d3 	bl	80083a4 <prvInsertTimerInActiveList>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01b      	beq.n	800823c <prvProcessExpiredTimer+0x7c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008204:	2300      	movs	r3, #0
 8008206:	9300      	str	r3, [sp, #0]
 8008208:	2300      	movs	r3, #0
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	2100      	movs	r1, #0
 800820e:	68f8      	ldr	r0, [r7, #12]
 8008210:	f7ff ff8a 	bl	8008128 <xTimerGenericCommand>
 8008214:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10f      	bne.n	800823c <prvProcessExpiredTimer+0x7c>
 800821c:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8008220:	490b      	ldr	r1, [pc, #44]	@ (8008250 <prvProcessExpiredTimer+0x90>)
 8008222:	480c      	ldr	r0, [pc, #48]	@ (8008254 <prvProcessExpiredTimer+0x94>)
 8008224:	f00b f96c 	bl	8013500 <assertFail>
 8008228:	e008      	b.n	800823c <prvProcessExpiredTimer+0x7c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	b2da      	uxtb	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	4798      	blx	r3
    }
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	200003b4 	.word	0x200003b4
 8008250:	0801b350 	.word	0x0801b350
 8008254:	0801b3e0 	.word	0x0801b3e0

08008258 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008260:	f107 0308 	add.w	r3, r7, #8
 8008264:	4618      	mov	r0, r3
 8008266:	f000 f859 	bl	800831c <prvGetNextExpireTime>
 800826a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4619      	mov	r1, r3
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f000 f805 	bl	8008280 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8008276:	f000 f8d7 	bl	8008428 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800827a:	bf00      	nop
 800827c:	e7f0      	b.n	8008260 <prvTimerTask+0x8>
	...

08008280 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800828a:	f7ff f8df 	bl	800744c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800828e:	f107 0308 	add.w	r3, r7, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f866 	bl	8008364 <prvSampleTimeNow>
 8008298:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d130      	bne.n	8008302 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d10a      	bne.n	80082bc <prvProcessTimerOrBlockTask+0x3c>
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d806      	bhi.n	80082bc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80082ae:	f7ff f8db 	bl	8007468 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80082b2:	68f9      	ldr	r1, [r7, #12]
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f7ff ff83 	bl	80081c0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80082ba:	e024      	b.n	8008306 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d008      	beq.n	80082d4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80082c2:	4b13      	ldr	r3, [pc, #76]	@ (8008310 <prvProcessTimerOrBlockTask+0x90>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <prvProcessTimerOrBlockTask+0x50>
 80082cc:	2301      	movs	r3, #1
 80082ce:	e000      	b.n	80082d2 <prvProcessTimerOrBlockTask+0x52>
 80082d0:	2300      	movs	r3, #0
 80082d2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80082d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008314 <prvProcessTimerOrBlockTask+0x94>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	1ad3      	subs	r3, r2, r3
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	4619      	mov	r1, r3
 80082e2:	f7fe fdbb 	bl	8006e5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80082e6:	f7ff f8bf 	bl	8007468 <xTaskResumeAll>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10a      	bne.n	8008306 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80082f0:	4b09      	ldr	r3, [pc, #36]	@ (8008318 <prvProcessTimerOrBlockTask+0x98>)
 80082f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082f6:	601a      	str	r2, [r3, #0]
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
    }
 8008300:	e001      	b.n	8008306 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008302:	f7ff f8b1 	bl	8007468 <xTaskResumeAll>
    }
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200003b8 	.word	0x200003b8
 8008314:	200003bc 	.word	0x200003bc
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008324:	4b0e      	ldr	r3, [pc, #56]	@ (8008360 <prvGetNextExpireTime+0x44>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d101      	bne.n	8008332 <prvGetNextExpireTime+0x16>
 800832e:	2201      	movs	r2, #1
 8008330:	e000      	b.n	8008334 <prvGetNextExpireTime+0x18>
 8008332:	2200      	movs	r2, #0
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d105      	bne.n	800834c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <prvGetNextExpireTime+0x44>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	60fb      	str	r3, [r7, #12]
 800834a:	e001      	b.n	8008350 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800834c:	2300      	movs	r3, #0
 800834e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8008350:	68fb      	ldr	r3, [r7, #12]
    }
 8008352:	4618      	mov	r0, r3
 8008354:	3714      	adds	r7, #20
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	200003b4 	.word	0x200003b4

08008364 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800836c:	f7ff f918 	bl	80075a0 <xTaskGetTickCount>
 8008370:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8008372:	4b0b      	ldr	r3, [pc, #44]	@ (80083a0 <prvSampleTimeNow+0x3c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	429a      	cmp	r2, r3
 800837a:	d205      	bcs.n	8008388 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800837c:	f000 f934 	bl	80085e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e002      	b.n	800838e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800838e:	4a04      	ldr	r2, [pc, #16]	@ (80083a0 <prvSampleTimeNow+0x3c>)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008394:	68fb      	ldr	r3, [r7, #12]
    }
 8008396:	4618      	mov	r0, r3
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	200003c4 	.word	0x200003c4

080083a4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80083b2:	2300      	movs	r3, #0
 80083b4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d812      	bhi.n	80083f0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	1ad2      	subs	r2, r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	699b      	ldr	r3, [r3, #24]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d302      	bcc.n	80083de <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80083d8:	2301      	movs	r3, #1
 80083da:	617b      	str	r3, [r7, #20]
 80083dc:	e01b      	b.n	8008416 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80083de:	4b10      	ldr	r3, [pc, #64]	@ (8008420 <prvInsertTimerInActiveList+0x7c>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3304      	adds	r3, #4
 80083e6:	4619      	mov	r1, r3
 80083e8:	4610      	mov	r0, r2
 80083ea:	f7fd fdde 	bl	8005faa <vListInsert>
 80083ee:	e012      	b.n	8008416 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d206      	bcs.n	8008406 <prvInsertTimerInActiveList+0x62>
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d302      	bcc.n	8008406 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008400:	2301      	movs	r3, #1
 8008402:	617b      	str	r3, [r7, #20]
 8008404:	e007      	b.n	8008416 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008406:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <prvInsertTimerInActiveList+0x80>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	4610      	mov	r0, r2
 8008412:	f7fd fdca 	bl	8005faa <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008416:	697b      	ldr	r3, [r7, #20]
    }
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	200003b8 	.word	0x200003b8
 8008424:	200003b4 	.word	0x200003b4

08008428 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008428:	b580      	push	{r7, lr}
 800842a:	b08c      	sub	sp, #48	@ 0x30
 800842c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800842e:	e0bf      	b.n	80085b0 <prvProcessReceivedCommands+0x188>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	2b00      	cmp	r3, #0
 8008434:	da14      	bge.n	8008460 <prvProcessReceivedCommands+0x38>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008436:	f107 0308 	add.w	r3, r7, #8
 800843a:	3304      	adds	r3, #4
 800843c:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <prvProcessReceivedCommands+0x28>
 8008444:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8008448:	4962      	ldr	r1, [pc, #392]	@ (80085d4 <prvProcessReceivedCommands+0x1ac>)
 800844a:	4863      	ldr	r0, [pc, #396]	@ (80085d8 <prvProcessReceivedCommands+0x1b0>)
 800844c:	f00b f858 	bl	8013500 <assertFail>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008456:	6850      	ldr	r0, [r2, #4]
 8008458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800845a:	6892      	ldr	r2, [r2, #8]
 800845c:	4611      	mov	r1, r2
 800845e:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	f2c0 80a4 	blt.w	80085b0 <prvProcessReceivedCommands+0x188>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	695b      	ldr	r3, [r3, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d004      	beq.n	800847e <prvProcessReceivedCommands+0x56>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	3304      	adds	r3, #4
 8008478:	4618      	mov	r0, r3
 800847a:	f7fd fdcf 	bl	800601c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800847e:	1d3b      	adds	r3, r7, #4
 8008480:	4618      	mov	r0, r3
 8008482:	f7ff ff6f 	bl	8008364 <prvSampleTimeNow>
 8008486:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	2b09      	cmp	r3, #9
 800848c:	f200 808d 	bhi.w	80085aa <prvProcessReceivedCommands+0x182>
 8008490:	a201      	add	r2, pc, #4	@ (adr r2, 8008498 <prvProcessReceivedCommands+0x70>)
 8008492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008496:	bf00      	nop
 8008498:	080084c1 	.word	0x080084c1
 800849c:	080084c1 	.word	0x080084c1
 80084a0:	080084c1 	.word	0x080084c1
 80084a4:	0800852d 	.word	0x0800852d
 80084a8:	08008541 	.word	0x08008541
 80084ac:	08008581 	.word	0x08008581
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c1 	.word	0x080084c1
 80084b8:	0800852d 	.word	0x0800852d
 80084bc:	08008541 	.word	0x08008541
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084c6:	f043 0301 	orr.w	r3, r3, #1
 80084ca:	b2da      	uxtb	r2, r3
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	6a3b      	ldr	r3, [r7, #32]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	18d1      	adds	r1, r2, r3
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	69fa      	ldr	r2, [r7, #28]
 80084de:	6a38      	ldr	r0, [r7, #32]
 80084e0:	f7ff ff60 	bl	80083a4 <prvInsertTimerInActiveList>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d061      	beq.n	80085ae <prvProcessReceivedCommands+0x186>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084ea:	6a3b      	ldr	r3, [r7, #32]
 80084ec:	6a1b      	ldr	r3, [r3, #32]
 80084ee:	6a38      	ldr	r0, [r7, #32]
 80084f0:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084f2:	6a3b      	ldr	r3, [r7, #32]
 80084f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d056      	beq.n	80085ae <prvProcessReceivedCommands+0x186>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	441a      	add	r2, r3
 8008508:	2300      	movs	r3, #0
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	2300      	movs	r3, #0
 800850e:	2100      	movs	r1, #0
 8008510:	6a38      	ldr	r0, [r7, #32]
 8008512:	f7ff fe09 	bl	8008128 <xTimerGenericCommand>
 8008516:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d147      	bne.n	80085ae <prvProcessReceivedCommands+0x186>
 800851e:	f240 3236 	movw	r2, #822	@ 0x336
 8008522:	492c      	ldr	r1, [pc, #176]	@ (80085d4 <prvProcessReceivedCommands+0x1ac>)
 8008524:	482d      	ldr	r0, [pc, #180]	@ (80085dc <prvProcessReceivedCommands+0x1b4>)
 8008526:	f00a ffeb 	bl	8013500 <assertFail>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800852a:	e040      	b.n	80085ae <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800852c:	6a3b      	ldr	r3, [r7, #32]
 800852e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800853e:	e037      	b.n	80085b0 <prvProcessReceivedCommands+0x188>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008546:	f043 0301 	orr.w	r3, r3, #1
 800854a:	b2da      	uxtb	r2, r3
 800854c:	6a3b      	ldr	r3, [r7, #32]
 800854e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	6a3b      	ldr	r3, [r7, #32]
 8008556:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008558:	6a3b      	ldr	r3, [r7, #32]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d105      	bne.n	800856c <prvProcessReceivedCommands+0x144>
 8008560:	f240 324f 	movw	r2, #847	@ 0x34f
 8008564:	491b      	ldr	r1, [pc, #108]	@ (80085d4 <prvProcessReceivedCommands+0x1ac>)
 8008566:	481e      	ldr	r0, [pc, #120]	@ (80085e0 <prvProcessReceivedCommands+0x1b8>)
 8008568:	f00a ffca 	bl	8013500 <assertFail>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	699a      	ldr	r2, [r3, #24]
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	18d1      	adds	r1, r2, r3
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	69fa      	ldr	r2, [r7, #28]
 8008578:	6a38      	ldr	r0, [r7, #32]
 800857a:	f7ff ff13 	bl	80083a4 <prvInsertTimerInActiveList>
                        break;
 800857e:	e017      	b.n	80085b0 <prvProcessReceivedCommands+0x188>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008580:	6a3b      	ldr	r3, [r7, #32]
 8008582:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008586:	f003 0302 	and.w	r3, r3, #2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d103      	bne.n	8008596 <prvProcessReceivedCommands+0x16e>
                                {
                                    vPortFree( pxTimer );
 800858e:	6a38      	ldr	r0, [r7, #32]
 8008590:	f000 fbbe 	bl	8008d10 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008594:	e00c      	b.n	80085b0 <prvProcessReceivedCommands+0x188>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800859c:	f023 0301 	bic.w	r3, r3, #1
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80085a8:	e002      	b.n	80085b0 <prvProcessReceivedCommands+0x188>

                    default:
                        /* Don't expect to get here. */
                        break;
 80085aa:	bf00      	nop
 80085ac:	e000      	b.n	80085b0 <prvProcessReceivedCommands+0x188>
                        break;
 80085ae:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085b0:	4b0c      	ldr	r3, [pc, #48]	@ (80085e4 <prvProcessReceivedCommands+0x1bc>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	2200      	movs	r2, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe f912 	bl	80067e4 <xQueueReceive>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	f47f af34 	bne.w	8008430 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	3728      	adds	r7, #40	@ 0x28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	0801b350 	.word	0x0801b350
 80085d8:	0801b3e8 	.word	0x0801b3e8
 80085dc:	0801b3e0 	.word	0x0801b3e0
 80085e0:	0801b3f4 	.word	0x0801b3f4
 80085e4:	200003bc 	.word	0x200003bc

080085e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b088      	sub	sp, #32
 80085ec:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085ee:	e043      	b.n	8008678 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085f0:	4b2b      	ldr	r3, [pc, #172]	@ (80086a0 <prvSwitchTimerLists+0xb8>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	68db      	ldr	r3, [r3, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fa:	4b29      	ldr	r3, [pc, #164]	@ (80086a0 <prvSwitchTimerLists+0xb8>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fd fd07 	bl	800601c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6a1b      	ldr	r3, [r3, #32]
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b00      	cmp	r3, #0
 8008622:	d029      	beq.n	8008678 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	699b      	ldr	r3, [r3, #24]
 8008628:	693a      	ldr	r2, [r7, #16]
 800862a:	4413      	add	r3, r2
 800862c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	429a      	cmp	r2, r3
 8008634:	d90e      	bls.n	8008654 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008642:	4b17      	ldr	r3, [pc, #92]	@ (80086a0 <prvSwitchTimerLists+0xb8>)
 8008644:	681a      	ldr	r2, [r3, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f7fd fcac 	bl	8005faa <vListInsert>
 8008652:	e011      	b.n	8008678 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008654:	2300      	movs	r3, #0
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	2300      	movs	r3, #0
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	2100      	movs	r1, #0
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff fd62 	bl	8008128 <xTimerGenericCommand>
 8008664:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d105      	bne.n	8008678 <prvSwitchTimerLists+0x90>
 800866c:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8008670:	490c      	ldr	r1, [pc, #48]	@ (80086a4 <prvSwitchTimerLists+0xbc>)
 8008672:	480d      	ldr	r0, [pc, #52]	@ (80086a8 <prvSwitchTimerLists+0xc0>)
 8008674:	f00a ff44 	bl	8013500 <assertFail>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008678:	4b09      	ldr	r3, [pc, #36]	@ (80086a0 <prvSwitchTimerLists+0xb8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1b6      	bne.n	80085f0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008682:	4b07      	ldr	r3, [pc, #28]	@ (80086a0 <prvSwitchTimerLists+0xb8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8008688:	4b08      	ldr	r3, [pc, #32]	@ (80086ac <prvSwitchTimerLists+0xc4>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a04      	ldr	r2, [pc, #16]	@ (80086a0 <prvSwitchTimerLists+0xb8>)
 800868e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008690:	4a06      	ldr	r2, [pc, #24]	@ (80086ac <prvSwitchTimerLists+0xc4>)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	6013      	str	r3, [r2, #0]
    }
 8008696:	bf00      	nop
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	200003b4 	.word	0x200003b4
 80086a4:	0801b350 	.word	0x0801b350
 80086a8:	0801b3e0 	.word	0x0801b3e0
 80086ac:	200003b8 	.word	0x200003b8

080086b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b082      	sub	sp, #8
 80086b4:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80086b6:	f000 f951 	bl	800895c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80086ba:	4b15      	ldr	r3, [pc, #84]	@ (8008710 <prvCheckForValidListAndQueue+0x60>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d120      	bne.n	8008704 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 80086c2:	4814      	ldr	r0, [pc, #80]	@ (8008714 <prvCheckForValidListAndQueue+0x64>)
 80086c4:	f7fd fc20 	bl	8005f08 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80086c8:	4813      	ldr	r0, [pc, #76]	@ (8008718 <prvCheckForValidListAndQueue+0x68>)
 80086ca:	f7fd fc1d 	bl	8005f08 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80086ce:	4b13      	ldr	r3, [pc, #76]	@ (800871c <prvCheckForValidListAndQueue+0x6c>)
 80086d0:	4a10      	ldr	r2, [pc, #64]	@ (8008714 <prvCheckForValidListAndQueue+0x64>)
 80086d2:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80086d4:	4b12      	ldr	r3, [pc, #72]	@ (8008720 <prvCheckForValidListAndQueue+0x70>)
 80086d6:	4a10      	ldr	r2, [pc, #64]	@ (8008718 <prvCheckForValidListAndQueue+0x68>)
 80086d8:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80086da:	2300      	movs	r3, #0
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	4b11      	ldr	r3, [pc, #68]	@ (8008724 <prvCheckForValidListAndQueue+0x74>)
 80086e0:	4a11      	ldr	r2, [pc, #68]	@ (8008728 <prvCheckForValidListAndQueue+0x78>)
 80086e2:	2110      	movs	r1, #16
 80086e4:	2014      	movs	r0, #20
 80086e6:	f7fd fd2b 	bl	8006140 <xQueueGenericCreateStatic>
 80086ea:	4603      	mov	r3, r0
 80086ec:	4a08      	ldr	r2, [pc, #32]	@ (8008710 <prvCheckForValidListAndQueue+0x60>)
 80086ee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80086f0:	4b07      	ldr	r3, [pc, #28]	@ (8008710 <prvCheckForValidListAndQueue+0x60>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086f8:	4b05      	ldr	r3, [pc, #20]	@ (8008710 <prvCheckForValidListAndQueue+0x60>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	490b      	ldr	r1, [pc, #44]	@ (800872c <prvCheckForValidListAndQueue+0x7c>)
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fb82 	bl	8006e08 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008704:	f000 f958 	bl	80089b8 <vPortExitCritical>
    }
 8008708:	bf00      	nop
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	200003bc 	.word	0x200003bc
 8008714:	2000038c 	.word	0x2000038c
 8008718:	200003a0 	.word	0x200003a0
 800871c:	200003b4 	.word	0x200003b4
 8008720:	200003b8 	.word	0x200003b8
 8008724:	20000508 	.word	0x20000508
 8008728:	200003c8 	.word	0x200003c8
 800872c:	0801b41c 	.word	0x0801b41c

08008730 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	3b04      	subs	r3, #4
 8008740:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008748:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	3b04      	subs	r3, #4
 800874e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f023 0201 	bic.w	r2, r3, #1
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3b04      	subs	r3, #4
 800875e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008760:	4a0c      	ldr	r2, [pc, #48]	@ (8008794 <pxPortInitialiseStack+0x64>)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	3b14      	subs	r3, #20
 800876a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	3b04      	subs	r3, #4
 8008776:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f06f 0202 	mvn.w	r2, #2
 800877e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3b20      	subs	r3, #32
 8008784:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008786:	68fb      	ldr	r3, [r7, #12]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	08008799 	.word	0x08008799

08008798 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80087a2:	4b0e      	ldr	r3, [pc, #56]	@ (80087dc <prvTaskExitError+0x44>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087aa:	d004      	beq.n	80087b6 <prvTaskExitError+0x1e>
 80087ac:	22e5      	movs	r2, #229	@ 0xe5
 80087ae:	490c      	ldr	r1, [pc, #48]	@ (80087e0 <prvTaskExitError+0x48>)
 80087b0:	480c      	ldr	r0, [pc, #48]	@ (80087e4 <prvTaskExitError+0x4c>)
 80087b2:	f00a fea5 	bl	8013500 <assertFail>
        __asm volatile
 80087b6:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 80087ba:	f383 8811 	msr	BASEPRI, r3
 80087be:	f3bf 8f6f 	isb	sy
 80087c2:	f3bf 8f4f 	dsb	sy
 80087c6:	607b      	str	r3, [r7, #4]
    }
 80087c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80087ca:	bf00      	nop
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d0fc      	beq.n	80087cc <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	2000000c 	.word	0x2000000c
 80087e0:	0801b430 	.word	0x0801b430
 80087e4:	0801b45c 	.word	0x0801b45c
	...

080087f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80087f0:	4b07      	ldr	r3, [pc, #28]	@ (8008810 <pxCurrentTCBConst2>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6808      	ldr	r0, [r1, #0]
 80087f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	f380 8809 	msr	PSP, r0
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8811 	msr	BASEPRI, r0
 800880a:	4770      	bx	lr
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst2>:
 8008810:	2000026c 	.word	0x2000026c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008818:	4808      	ldr	r0, [pc, #32]	@ (800883c <prvPortStartFirstTask+0x24>)
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	6800      	ldr	r0, [r0, #0]
 800881e:	f380 8808 	msr	MSP, r0
 8008822:	f04f 0000 	mov.w	r0, #0
 8008826:	f380 8814 	msr	CONTROL, r0
 800882a:	b662      	cpsie	i
 800882c:	b661      	cpsie	f
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	df00      	svc	0
 8008838:	bf00      	nop
 800883a:	0000      	.short	0x0000
 800883c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008840:	bf00      	nop
 8008842:	bf00      	nop

08008844 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800884a:	4b38      	ldr	r3, [pc, #224]	@ (800892c <xPortStartScheduler+0xe8>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a38      	ldr	r2, [pc, #224]	@ (8008930 <xPortStartScheduler+0xec>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d105      	bne.n	8008860 <xPortStartScheduler+0x1c>
 8008854:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008858:	4936      	ldr	r1, [pc, #216]	@ (8008934 <xPortStartScheduler+0xf0>)
 800885a:	4837      	ldr	r0, [pc, #220]	@ (8008938 <xPortStartScheduler+0xf4>)
 800885c:	f00a fe50 	bl	8013500 <assertFail>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008860:	4b32      	ldr	r3, [pc, #200]	@ (800892c <xPortStartScheduler+0xe8>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a35      	ldr	r2, [pc, #212]	@ (800893c <xPortStartScheduler+0xf8>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d105      	bne.n	8008876 <xPortStartScheduler+0x32>
 800886a:	f240 122d 	movw	r2, #301	@ 0x12d
 800886e:	4931      	ldr	r1, [pc, #196]	@ (8008934 <xPortStartScheduler+0xf0>)
 8008870:	4833      	ldr	r0, [pc, #204]	@ (8008940 <xPortStartScheduler+0xfc>)
 8008872:	f00a fe45 	bl	8013500 <assertFail>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008876:	4b33      	ldr	r3, [pc, #204]	@ (8008944 <xPortStartScheduler+0x100>)
 8008878:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	781b      	ldrb	r3, [r3, #0]
 800887e:	b2db      	uxtb	r3, r3
 8008880:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	22ff      	movs	r2, #255	@ 0xff
 8008886:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	b2db      	uxtb	r3, r3
 800888e:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008890:	79fb      	ldrb	r3, [r7, #7]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8008898:	b2da      	uxtb	r2, r3
 800889a:	4b2b      	ldr	r3, [pc, #172]	@ (8008948 <xPortStartScheduler+0x104>)
 800889c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800889e:	4b2b      	ldr	r3, [pc, #172]	@ (800894c <xPortStartScheduler+0x108>)
 80088a0:	2207      	movs	r2, #7
 80088a2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088a4:	e009      	b.n	80088ba <xPortStartScheduler+0x76>
            {
                ulMaxPRIGROUPValue--;
 80088a6:	4b29      	ldr	r3, [pc, #164]	@ (800894c <xPortStartScheduler+0x108>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3b01      	subs	r3, #1
 80088ac:	4a27      	ldr	r2, [pc, #156]	@ (800894c <xPortStartScheduler+0x108>)
 80088ae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	005b      	lsls	r3, r3, #1
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088c2:	2b80      	cmp	r3, #128	@ 0x80
 80088c4:	d0ef      	beq.n	80088a6 <xPortStartScheduler+0x62>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088c6:	4b21      	ldr	r3, [pc, #132]	@ (800894c <xPortStartScheduler+0x108>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	021b      	lsls	r3, r3, #8
 80088cc:	4a1f      	ldr	r2, [pc, #124]	@ (800894c <xPortStartScheduler+0x108>)
 80088ce:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088d0:	4b1e      	ldr	r3, [pc, #120]	@ (800894c <xPortStartScheduler+0x108>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088d8:	4a1c      	ldr	r2, [pc, #112]	@ (800894c <xPortStartScheduler+0x108>)
 80088da:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	b2da      	uxtb	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80088e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008950 <xPortStartScheduler+0x10c>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a19      	ldr	r2, [pc, #100]	@ (8008950 <xPortStartScheduler+0x10c>)
 80088ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088ee:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80088f0:	4b17      	ldr	r3, [pc, #92]	@ (8008950 <xPortStartScheduler+0x10c>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a16      	ldr	r2, [pc, #88]	@ (8008950 <xPortStartScheduler+0x10c>)
 80088f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088fa:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80088fc:	f000 f8de 	bl	8008abc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008900:	4b14      	ldr	r3, [pc, #80]	@ (8008954 <xPortStartScheduler+0x110>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008906:	f000 f8f5 	bl	8008af4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800890a:	4b13      	ldr	r3, [pc, #76]	@ (8008958 <xPortStartScheduler+0x114>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4a12      	ldr	r2, [pc, #72]	@ (8008958 <xPortStartScheduler+0x114>)
 8008910:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008914:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008916:	f7ff ff7f 	bl	8008818 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800891a:	f7fe ff2b 	bl	8007774 <vTaskSwitchContext>
    prvTaskExitError();
 800891e:	f7ff ff3b 	bl	8008798 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	e000ed00 	.word	0xe000ed00
 8008930:	410fc271 	.word	0x410fc271
 8008934:	0801b430 	.word	0x0801b430
 8008938:	0801b478 	.word	0x0801b478
 800893c:	410fc270 	.word	0x410fc270
 8008940:	0801b49c 	.word	0x0801b49c
 8008944:	e000e400 	.word	0xe000e400
 8008948:	20000558 	.word	0x20000558
 800894c:	2000055c 	.word	0x2000055c
 8008950:	e000ed20 	.word	0xe000ed20
 8008954:	2000000c 	.word	0x2000000c
 8008958:	e000ef34 	.word	0xe000ef34

0800895c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
        __asm volatile
 8008962:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008966:	f383 8811 	msr	BASEPRI, r3
 800896a:	f3bf 8f6f 	isb	sy
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	607b      	str	r3, [r7, #4]
    }
 8008974:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008976:	4b0c      	ldr	r3, [pc, #48]	@ (80089a8 <vPortEnterCritical+0x4c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3301      	adds	r3, #1
 800897c:	4a0a      	ldr	r2, [pc, #40]	@ (80089a8 <vPortEnterCritical+0x4c>)
 800897e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008980:	4b09      	ldr	r3, [pc, #36]	@ (80089a8 <vPortEnterCritical+0x4c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b01      	cmp	r3, #1
 8008986:	d10a      	bne.n	800899e <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008988:	4b08      	ldr	r3, [pc, #32]	@ (80089ac <vPortEnterCritical+0x50>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	b2db      	uxtb	r3, r3
 800898e:	2b00      	cmp	r3, #0
 8008990:	d005      	beq.n	800899e <vPortEnterCritical+0x42>
 8008992:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8008996:	4906      	ldr	r1, [pc, #24]	@ (80089b0 <vPortEnterCritical+0x54>)
 8008998:	4806      	ldr	r0, [pc, #24]	@ (80089b4 <vPortEnterCritical+0x58>)
 800899a:	f00a fdb1 	bl	8013500 <assertFail>
    }
}
 800899e:	bf00      	nop
 80089a0:	3708      	adds	r7, #8
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	2000000c 	.word	0x2000000c
 80089ac:	e000ed04 	.word	0xe000ed04
 80089b0:	0801b430 	.word	0x0801b430
 80089b4:	0801b4dc 	.word	0x0801b4dc

080089b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80089be:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <vPortExitCritical+0x40>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d105      	bne.n	80089d2 <vPortExitCritical+0x1a>
 80089c6:	f240 12ab 	movw	r2, #427	@ 0x1ab
 80089ca:	490c      	ldr	r1, [pc, #48]	@ (80089fc <vPortExitCritical+0x44>)
 80089cc:	480c      	ldr	r0, [pc, #48]	@ (8008a00 <vPortExitCritical+0x48>)
 80089ce:	f00a fd97 	bl	8013500 <assertFail>
    uxCriticalNesting--;
 80089d2:	4b09      	ldr	r3, [pc, #36]	@ (80089f8 <vPortExitCritical+0x40>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	4a07      	ldr	r2, [pc, #28]	@ (80089f8 <vPortExitCritical+0x40>)
 80089da:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <vPortExitCritical+0x40>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d105      	bne.n	80089f0 <vPortExitCritical+0x38>
 80089e4:	2300      	movs	r3, #0
 80089e6:	607b      	str	r3, [r7, #4]
        __asm volatile
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f383 8811 	msr	BASEPRI, r3
    }
 80089ee:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	2000000c 	.word	0x2000000c
 80089fc:	0801b430 	.word	0x0801b430
 8008a00:	0801b514 	.word	0x0801b514
	...

08008a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008a10:	f3ef 8009 	mrs	r0, PSP
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	4b15      	ldr	r3, [pc, #84]	@ (8008a70 <pxCurrentTCBConst>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	f01e 0f10 	tst.w	lr, #16
 8008a20:	bf08      	it	eq
 8008a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	6010      	str	r0, [r2, #0]
 8008a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a30:	f04f 005f 	mov.w	r0, #95	@ 0x5f
 8008a34:	f380 8811 	msr	BASEPRI, r0
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f7fe fe98 	bl	8007774 <vTaskSwitchContext>
 8008a44:	f04f 0000 	mov.w	r0, #0
 8008a48:	f380 8811 	msr	BASEPRI, r0
 8008a4c:	bc09      	pop	{r0, r3}
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	6808      	ldr	r0, [r1, #0]
 8008a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a56:	f01e 0f10 	tst.w	lr, #16
 8008a5a:	bf08      	it	eq
 8008a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a60:	f380 8809 	msr	PSP, r0
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst>:
 8008a70:	2000026c 	.word	0x2000026c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
        __asm volatile
 8008a7e:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
    }
 8008a90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008a92:	f7fe fd95 	bl	80075c0 <xTaskIncrementTick>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <tickFreeRTOS+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a9c:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <tickFreeRTOS+0x40>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f383 8811 	msr	BASEPRI, r3
    }
 8008aae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ac0:	4b08      	ldr	r3, [pc, #32]	@ (8008ae4 <vPortSetupTimerInterrupt+0x28>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ac6:	4b08      	ldr	r3, [pc, #32]	@ (8008ae8 <vPortSetupTimerInterrupt+0x2c>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008acc:	4b07      	ldr	r3, [pc, #28]	@ (8008aec <vPortSetupTimerInterrupt+0x30>)
 8008ace:	4a08      	ldr	r2, [pc, #32]	@ (8008af0 <vPortSetupTimerInterrupt+0x34>)
 8008ad0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ad2:	4b04      	ldr	r3, [pc, #16]	@ (8008ae4 <vPortSetupTimerInterrupt+0x28>)
 8008ad4:	2207      	movs	r2, #7
 8008ad6:	601a      	str	r2, [r3, #0]
}
 8008ad8:	bf00      	nop
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	e000e010 	.word	0xe000e010
 8008ae8:	e000e018 	.word	0xe000e018
 8008aec:	e000e014 	.word	0xe000e014
 8008af0:	0002903f 	.word	0x0002903f

08008af4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008af4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b04 <vPortEnableVFP+0x10>
 8008af8:	6801      	ldr	r1, [r0, #0]
 8008afa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008afe:	6001      	str	r1, [r0, #0]
 8008b00:	4770      	bx	lr
 8008b02:	0000      	.short	0x0000
 8008b04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008b08:	bf00      	nop
 8008b0a:	bf00      	nop

08008b0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008b12:	f3ef 8305 	mrs	r3, IPSR
 8008b16:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2b0f      	cmp	r3, #15
 8008b1c:	d90f      	bls.n	8008b3e <vPortValidateInterruptPriority+0x32>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b1e:	4a11      	ldr	r2, [pc, #68]	@ (8008b64 <vPortValidateInterruptPriority+0x58>)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4413      	add	r3, r2
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b28:	4b0f      	ldr	r3, [pc, #60]	@ (8008b68 <vPortValidateInterruptPriority+0x5c>)
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	78fa      	ldrb	r2, [r7, #3]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d205      	bcs.n	8008b3e <vPortValidateInterruptPriority+0x32>
 8008b32:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8008b36:	490d      	ldr	r1, [pc, #52]	@ (8008b6c <vPortValidateInterruptPriority+0x60>)
 8008b38:	480d      	ldr	r0, [pc, #52]	@ (8008b70 <vPortValidateInterruptPriority+0x64>)
 8008b3a:	f00a fce1 	bl	8013500 <assertFail>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b74 <vPortValidateInterruptPriority+0x68>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b46:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <vPortValidateInterruptPriority+0x6c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d905      	bls.n	8008b5a <vPortValidateInterruptPriority+0x4e>
 8008b4e:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8008b52:	4906      	ldr	r1, [pc, #24]	@ (8008b6c <vPortValidateInterruptPriority+0x60>)
 8008b54:	4809      	ldr	r0, [pc, #36]	@ (8008b7c <vPortValidateInterruptPriority+0x70>)
 8008b56:	f00a fcd3 	bl	8013500 <assertFail>
    }
 8008b5a:	bf00      	nop
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	e000e3f0 	.word	0xe000e3f0
 8008b68:	20000558 	.word	0x20000558
 8008b6c:	0801b430 	.word	0x0801b430
 8008b70:	0801b528 	.word	0x0801b528
 8008b74:	e000ed0c 	.word	0xe000ed0c
 8008b78:	2000055c 	.word	0x2000055c
 8008b7c:	0801b554 	.word	0x0801b554

08008b80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8008b8c:	f7fe fc5e 	bl	800744c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8008b90:	4b55      	ldr	r3, [pc, #340]	@ (8008ce8 <pvPortMalloc+0x168>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8008b98:	f000 f918 	bl	8008dcc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b9c:	4b53      	ldr	r3, [pc, #332]	@ (8008cec <pvPortMalloc+0x16c>)
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	f040 8087 	bne.w	8008cb8 <pvPortMalloc+0x138>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d017      	beq.n	8008be0 <pvPortMalloc+0x60>
            {
                xWantedSize += xHeapStructSize;
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f003 0307 	and.w	r3, r3, #7
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d00e      	beq.n	8008be0 <pvPortMalloc+0x60>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f023 0307 	bic.w	r3, r3, #7
 8008bc8:	3308      	adds	r3, #8
 8008bca:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f003 0307 	and.w	r3, r3, #7
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <pvPortMalloc+0x60>
 8008bd6:	2297      	movs	r2, #151	@ 0x97
 8008bd8:	4945      	ldr	r1, [pc, #276]	@ (8008cf0 <pvPortMalloc+0x170>)
 8008bda:	4846      	ldr	r0, [pc, #280]	@ (8008cf4 <pvPortMalloc+0x174>)
 8008bdc:	f00a fc90 	bl	8013500 <assertFail>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d068      	beq.n	8008cb8 <pvPortMalloc+0x138>
 8008be6:	4b44      	ldr	r3, [pc, #272]	@ (8008cf8 <pvPortMalloc+0x178>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d863      	bhi.n	8008cb8 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008bf0:	4b42      	ldr	r3, [pc, #264]	@ (8008cfc <pvPortMalloc+0x17c>)
 8008bf2:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8008bf4:	4b41      	ldr	r3, [pc, #260]	@ (8008cfc <pvPortMalloc+0x17c>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bfa:	e004      	b.n	8008c06 <pvPortMalloc+0x86>
                {
                    pxPreviousBlock = pxBlock;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c06:	697b      	ldr	r3, [r7, #20]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d903      	bls.n	8008c18 <pvPortMalloc+0x98>
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1f1      	bne.n	8008bfc <pvPortMalloc+0x7c>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8008c18:	4b33      	ldr	r3, [pc, #204]	@ (8008ce8 <pvPortMalloc+0x168>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d04a      	beq.n	8008cb8 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2208      	movs	r2, #8
 8008c28:	4413      	add	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	681a      	ldr	r2, [r3, #0]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	685a      	ldr	r2, [r3, #4]
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	1ad2      	subs	r2, r2, r3
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	005b      	lsls	r3, r3, #1
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d919      	bls.n	8008c78 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4413      	add	r3, r2
 8008c4a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	f003 0307 	and.w	r3, r3, #7
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <pvPortMalloc+0xe0>
 8008c56:	22c5      	movs	r2, #197	@ 0xc5
 8008c58:	4925      	ldr	r1, [pc, #148]	@ (8008cf0 <pvPortMalloc+0x170>)
 8008c5a:	4829      	ldr	r0, [pc, #164]	@ (8008d00 <pvPortMalloc+0x180>)
 8008c5c:	f00a fc50 	bl	8013500 <assertFail>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	1ad2      	subs	r2, r2, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c72:	68b8      	ldr	r0, [r7, #8]
 8008c74:	f000 f90c 	bl	8008e90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c78:	4b1f      	ldr	r3, [pc, #124]	@ (8008cf8 <pvPortMalloc+0x178>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	4a1d      	ldr	r2, [pc, #116]	@ (8008cf8 <pvPortMalloc+0x178>)
 8008c84:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c86:	4b1c      	ldr	r3, [pc, #112]	@ (8008cf8 <pvPortMalloc+0x178>)
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8008d04 <pvPortMalloc+0x184>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d203      	bcs.n	8008c9a <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c92:	4b19      	ldr	r3, [pc, #100]	@ (8008cf8 <pvPortMalloc+0x178>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a1b      	ldr	r2, [pc, #108]	@ (8008d04 <pvPortMalloc+0x184>)
 8008c98:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	685a      	ldr	r2, [r3, #4]
 8008c9e:	4b13      	ldr	r3, [pc, #76]	@ (8008cec <pvPortMalloc+0x16c>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008cae:	4b16      	ldr	r3, [pc, #88]	@ (8008d08 <pvPortMalloc+0x188>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	4a14      	ldr	r2, [pc, #80]	@ (8008d08 <pvPortMalloc+0x188>)
 8008cb6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008cb8:	f7fe fbd6 	bl	8007468 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <pvPortMalloc+0x146>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 8008cc2:	f005 faa8 	bl	800e216 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <pvPortMalloc+0x15c>
 8008cd0:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8008cd4:	4906      	ldr	r1, [pc, #24]	@ (8008cf0 <pvPortMalloc+0x170>)
 8008cd6:	480d      	ldr	r0, [pc, #52]	@ (8008d0c <pvPortMalloc+0x18c>)
 8008cd8:	f00a fc12 	bl	8013500 <assertFail>
    return pvReturn;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20007a98 	.word	0x20007a98
 8008cec:	20007aac 	.word	0x20007aac
 8008cf0:	0801b598 	.word	0x0801b598
 8008cf4:	0801b5c0 	.word	0x0801b5c0
 8008cf8:	20007a9c 	.word	0x20007a9c
 8008cfc:	20007a90 	.word	0x20007a90
 8008d00:	0801b5f0 	.word	0x0801b5f0
 8008d04:	20007aa0 	.word	0x20007aa0
 8008d08:	20007aa4 	.word	0x20007aa4
 8008d0c:	0801b634 	.word	0x0801b634

08008d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d043      	beq.n	8008daa <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008d22:	2308      	movs	r3, #8
 8008d24:	425b      	negs	r3, r3
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	4413      	add	r3, r2
 8008d2a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	4b1f      	ldr	r3, [pc, #124]	@ (8008db4 <vPortFree+0xa4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4013      	ands	r3, r2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d105      	bne.n	8008d4a <vPortFree+0x3a>
 8008d3e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8008d42:	491d      	ldr	r1, [pc, #116]	@ (8008db8 <vPortFree+0xa8>)
 8008d44:	481d      	ldr	r0, [pc, #116]	@ (8008dbc <vPortFree+0xac>)
 8008d46:	f00a fbdb 	bl	8013500 <assertFail>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d4a:	68bb      	ldr	r3, [r7, #8]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d005      	beq.n	8008d5e <vPortFree+0x4e>
 8008d52:	f240 121b 	movw	r2, #283	@ 0x11b
 8008d56:	4918      	ldr	r1, [pc, #96]	@ (8008db8 <vPortFree+0xa8>)
 8008d58:	4819      	ldr	r0, [pc, #100]	@ (8008dc0 <vPortFree+0xb0>)
 8008d5a:	f00a fbd1 	bl	8013500 <assertFail>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	4b14      	ldr	r3, [pc, #80]	@ (8008db4 <vPortFree+0xa4>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01e      	beq.n	8008daa <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d11a      	bne.n	8008daa <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	4b0e      	ldr	r3, [pc, #56]	@ (8008db4 <vPortFree+0xa4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	401a      	ands	r2, r3
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008d84:	f7fe fb62 	bl	800744c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc4 <vPortFree+0xb4>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4413      	add	r3, r2
 8008d92:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc4 <vPortFree+0xb4>)
 8008d94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d96:	68b8      	ldr	r0, [r7, #8]
 8008d98:	f000 f87a 	bl	8008e90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc8 <vPortFree+0xb8>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	4a09      	ldr	r2, [pc, #36]	@ (8008dc8 <vPortFree+0xb8>)
 8008da4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008da6:	f7fe fb5f 	bl	8007468 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008daa:	bf00      	nop
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20007aac 	.word	0x20007aac
 8008db8:	0801b598 	.word	0x0801b598
 8008dbc:	0801b67c 	.word	0x0801b67c
 8008dc0:	0801b6b0 	.word	0x0801b6b0
 8008dc4:	20007a9c 	.word	0x20007a9c
 8008dc8:	20007aa8 	.word	0x20007aa8

08008dcc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dd2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008dd6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008dd8:	4b27      	ldr	r3, [pc, #156]	@ (8008e78 <prvHeapInit+0xac>)
 8008dda:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00c      	beq.n	8008e00 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	3307      	adds	r3, #7
 8008dea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f023 0307 	bic.w	r3, r3, #7
 8008df2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008df4:	68ba      	ldr	r2, [r7, #8]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	4a1f      	ldr	r2, [pc, #124]	@ (8008e78 <prvHeapInit+0xac>)
 8008dfc:	4413      	add	r3, r2
 8008dfe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e04:	4a1d      	ldr	r2, [pc, #116]	@ (8008e7c <prvHeapInit+0xb0>)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8008e7c <prvHeapInit+0xb0>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68ba      	ldr	r2, [r7, #8]
 8008e14:	4413      	add	r3, r2
 8008e16:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008e18:	2208      	movs	r2, #8
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	1a9b      	subs	r3, r3, r2
 8008e1e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	f023 0307 	bic.w	r3, r3, #7
 8008e26:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4a15      	ldr	r2, [pc, #84]	@ (8008e80 <prvHeapInit+0xb4>)
 8008e2c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008e2e:	4b14      	ldr	r3, [pc, #80]	@ (8008e80 <prvHeapInit+0xb4>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	2200      	movs	r2, #0
 8008e34:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008e36:	4b12      	ldr	r3, [pc, #72]	@ (8008e80 <prvHeapInit+0xb4>)
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	68fa      	ldr	r2, [r7, #12]
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e80 <prvHeapInit+0xb4>)
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	4a0a      	ldr	r2, [pc, #40]	@ (8008e84 <prvHeapInit+0xb8>)
 8008e5a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	4a09      	ldr	r2, [pc, #36]	@ (8008e88 <prvHeapInit+0xbc>)
 8008e62:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e64:	4b09      	ldr	r3, [pc, #36]	@ (8008e8c <prvHeapInit+0xc0>)
 8008e66:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e6a:	601a      	str	r2, [r3, #0]
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	20000560 	.word	0x20000560
 8008e7c:	20007a90 	.word	0x20007a90
 8008e80:	20007a98 	.word	0x20007a98
 8008e84:	20007aa0 	.word	0x20007aa0
 8008e88:	20007a9c 	.word	0x20007a9c
 8008e8c:	20007aac 	.word	0x20007aac

08008e90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e98:	4b28      	ldr	r3, [pc, #160]	@ (8008f3c <prvInsertBlockIntoFreeList+0xac>)
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e002      	b.n	8008ea4 <prvInsertBlockIntoFreeList+0x14>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d8f7      	bhi.n	8008e9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	68ba      	ldr	r2, [r7, #8]
 8008eb8:	4413      	add	r3, r2
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d108      	bne.n	8008ed2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	441a      	add	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	441a      	add	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d118      	bne.n	8008f18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	4b15      	ldr	r3, [pc, #84]	@ (8008f40 <prvInsertBlockIntoFreeList+0xb0>)
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	d00d      	beq.n	8008f0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685a      	ldr	r2, [r3, #4]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	441a      	add	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	601a      	str	r2, [r3, #0]
 8008f0c:	e008      	b.n	8008f20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f40 <prvInsertBlockIntoFreeList+0xb0>)
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	e003      	b.n	8008f20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d002      	beq.n	8008f2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008f2e:	bf00      	nop
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	20007a90 	.word	0x20007a90
 8008f40:	20007a98 	.word	0x20007a98

08008f44 <main>:

void SystemClock_Config(void);


int main( void )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0

//	HAL_Init();
	SystemClock_Config();
 8008f4a:	f000 f80f 	bl	8008f6c <SystemClock_Config>

	int err = platformInit();
 8008f4e:	f00a f9d0 	bl	80132f2 <platformInit>
 8008f52:	6078      	str	r0, [r7, #4]
	if (err != 0) {
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <main+0x1a>
		// The firmware is running on the wrong hardware. Halt
		while (1);
 8008f5a:	bf00      	nop
 8008f5c:	e7fd      	b.n	8008f5a <main+0x16>
	}

	systemLaunch();
 8008f5e:	f005 f843 	bl	800dfe8 <systemLaunch>
//	counter +=1;
//	cournter_timint = 1;
//	HAL_TIM_Base_Start_IT(&htim4);
//	cournter_timint = 2;
	//JH
	vTaskStartScheduler();
 8008f62:	f7fe fa01 	bl	8007368 <vTaskStartScheduler>
//	cournter_timint = 2;
	//NJH
//	counter +=1;

    for(;;)
 8008f66:	bf00      	nop
 8008f68:	e7fd      	b.n	8008f66 <main+0x22>
	...

08008f6c <SystemClock_Config>:
//			counter +=1;
//		}
    }
}
void SystemClock_Config(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b094      	sub	sp, #80	@ 0x50
 8008f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f72:	f107 0320 	add.w	r3, r7, #32
 8008f76:	2230      	movs	r2, #48	@ 0x30
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f00f fd52 	bl	8018a24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f80:	f107 030c 	add.w	r3, r7, #12
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	605a      	str	r2, [r3, #4]
 8008f8a:	609a      	str	r2, [r3, #8]
 8008f8c:	60da      	str	r2, [r3, #12]
 8008f8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f90:	2300      	movs	r3, #0
 8008f92:	60bb      	str	r3, [r7, #8]
 8008f94:	4b28      	ldr	r3, [pc, #160]	@ (8009038 <SystemClock_Config+0xcc>)
 8008f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f98:	4a27      	ldr	r2, [pc, #156]	@ (8009038 <SystemClock_Config+0xcc>)
 8008f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8008fa0:	4b25      	ldr	r3, [pc, #148]	@ (8009038 <SystemClock_Config+0xcc>)
 8008fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fa8:	60bb      	str	r3, [r7, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fac:	2300      	movs	r3, #0
 8008fae:	607b      	str	r3, [r7, #4]
 8008fb0:	4b22      	ldr	r3, [pc, #136]	@ (800903c <SystemClock_Config+0xd0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a21      	ldr	r2, [pc, #132]	@ (800903c <SystemClock_Config+0xd0>)
 8008fb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	4b1f      	ldr	r3, [pc, #124]	@ (800903c <SystemClock_Config+0xd0>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fc4:	607b      	str	r3, [r7, #4]
 8008fc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008fc8:	2301      	movs	r3, #1
 8008fca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008fcc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008fd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008fdc:	2304      	movs	r3, #4
 8008fde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008fe0:	23a8      	movs	r3, #168	@ 0xa8
 8008fe2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008fe4:	2302      	movs	r3, #2
 8008fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008fe8:	2304      	movs	r3, #4
 8008fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008fec:	f107 0320 	add.w	r3, r7, #32
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f9 ff43 	bl	8002e7c <HAL_RCC_OscConfig>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008ffc:	f000 f850 	bl	80090a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009000:	230f      	movs	r3, #15
 8009002:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009004:	2302      	movs	r3, #2
 8009006:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009008:	2300      	movs	r3, #0
 800900a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800900c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8009010:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009016:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009018:	f107 030c 	add.w	r3, r7, #12
 800901c:	2105      	movs	r1, #5
 800901e:	4618      	mov	r0, r3
 8009020:	f7fa f9a4 	bl	800336c <HAL_RCC_ClockConfig>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d001      	beq.n	800902e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800902a:	f000 f839 	bl	80090a0 <Error_Handler>
  }
}
 800902e:	bf00      	nop
 8009030:	3750      	adds	r7, #80	@ 0x50
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	40023800 	.word	0x40023800
 800903c:	40007000 	.word	0x40007000

08009040 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009040:	b580      	push	{r7, lr}
 8009042:	b082      	sub	sp, #8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a09      	ldr	r2, [pc, #36]	@ (8009074 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d10b      	bne.n	800906a <HAL_TIM_PeriodElapsedCallback+0x2a>
//		cournter += 1;
//		  hal_dshot_write(my_motor_values);
		  cournter_timint += 1;
 8009052:	4b09      	ldr	r3, [pc, #36]	@ (8009078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3301      	adds	r3, #1
 8009058:	4a07      	ldr	r2, [pc, #28]	@ (8009078 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800905a:	6013      	str	r3, [r2, #0]
		  hal_ibus_read(ibus_data);
 800905c:	4807      	ldr	r0, [pc, #28]	@ (800907c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800905e:	f000 fe3d 	bl	8009cdc <hal_ibus_read>
		  ibus_soft_failsafe(ibus_data, 10);
 8009062:	210a      	movs	r1, #10
 8009064:	4805      	ldr	r0, [pc, #20]	@ (800907c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8009066:	f000 fecd 	bl	8009e04 <ibus_soft_failsafe>
//		  HAL_Delay(1);
	}
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40000800 	.word	0x40000800
 8009078:	20007ab0 	.word	0x20007ab0
 800907c:	20007ab4 	.word	0x20007ab4

08009080 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	if(huart == IBUS_UART){
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a04      	ldr	r2, [pc, #16]	@ (800909c <HAL_UART_RxCpltCallback+0x1c>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d101      	bne.n	8009094 <HAL_UART_RxCpltCallback+0x14>
		ibus_reset_failsafe();
 8009090:	f000 fef4 	bl	8009e7c <ibus_reset_failsafe>
	}
}
 8009094:	bf00      	nop
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20007f9c 	.word	0x20007f9c

080090a0 <Error_Handler>:



void Error_Handler(void)
{
 80090a0:	b480      	push	{r7}
 80090a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80090a4:	b672      	cpsid	i
}
 80090a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80090a8:	bf00      	nop
 80090aa:	e7fd      	b.n	80090a8 <Error_Handler+0x8>

080090ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80090ac:	480d      	ldr	r0, [pc, #52]	@ (80090e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80090b0:	f7f8 f82a 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090b4:	480c      	ldr	r0, [pc, #48]	@ (80090e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80090b6:	490d      	ldr	r1, [pc, #52]	@ (80090ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80090b8:	4a0d      	ldr	r2, [pc, #52]	@ (80090f0 <LoopForever+0xe>)
  movs r3, #0
 80090ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80090bc:	e002      	b.n	80090c4 <LoopCopyDataInit>

080090be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090c2:	3304      	adds	r3, #4

080090c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090c8:	d3f9      	bcc.n	80090be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090ca:	4a0a      	ldr	r2, [pc, #40]	@ (80090f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80090cc:	4c0a      	ldr	r4, [pc, #40]	@ (80090f8 <LoopForever+0x16>)
  movs r3, #0
 80090ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80090d0:	e001      	b.n	80090d6 <LoopFillZerobss>

080090d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80090d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80090d4:	3204      	adds	r2, #4

080090d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80090d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80090d8:	d3fb      	bcc.n	80090d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80090da:	f00f fcc5 	bl	8018a68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80090de:	f7ff ff31 	bl	8008f44 <main>

080090e2 <LoopForever>:

LoopForever:
  b LoopForever
 80090e2:	e7fe      	b.n	80090e2 <LoopForever>
  ldr   r0, =_estack
 80090e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80090e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80090ec:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80090f0:	0801c634 	.word	0x0801c634
  ldr r2, =_sbss
 80090f4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80090f8:	2000a54c 	.word	0x2000a54c

080090fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80090fc:	e7fe      	b.n	80090fc <ADC_IRQHandler>
	...

08009100 <SPI3_IRQHandler>:
//	}
//
//
//}
void SPI3_IRQHandler(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0

  HAL_SPI_IRQHandler(&hspi3);
 8009104:	4802      	ldr	r0, [pc, #8]	@ (8009110 <SPI3_IRQHandler+0x10>)
 8009106:	f7fa ff57 	bl	8003fb8 <HAL_SPI_IRQHandler>

}
 800910a:	bf00      	nop
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	20007d34 	.word	0x20007d34

08009114 <zRanger2GetMeasurementAndRestart>:
bool checkRangeID;

NO_DMA_CCM_SAFE_ZERO_INIT static VL53L1_Dev_t dev;

static uint16_t zRanger2GetMeasurementAndRestart(VL53L1_Dev_t *dev)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b08c      	sub	sp, #48	@ 0x30
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
    VL53L1_Error status = VL53L1_ERROR_NONE;
 800911c:	2300      	movs	r3, #0
 800911e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    VL53L1_RangingMeasurementData_t rangingData;
    uint8_t dataReady = 0;
 8009122:	2300      	movs	r3, #0
 8009124:	73fb      	strb	r3, [r7, #15]
    uint16_t range;

    while (dataReady == 0)
 8009126:	e00b      	b.n	8009140 <zRanger2GetMeasurementAndRestart+0x2c>
    {
        status = VL53L1_GetMeasurementDataReady(dev, &dataReady);
 8009128:	f107 030f 	add.w	r3, r7, #15
 800912c:	4619      	mov	r1, r3
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f00b f878 	bl	8014224 <VL53L1_GetMeasurementDataReady>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        vTaskDelay(M2T(1));
 800913a:	2001      	movs	r0, #1
 800913c:	f7fe f8e0 	bl	8007300 <vTaskDelay>
    while (dataReady == 0)
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0f0      	beq.n	8009128 <zRanger2GetMeasurementAndRestart+0x14>
    }

    status = VL53L1_GetRangingMeasurementData(dev, &rangingData);
 8009146:	f107 0310 	add.w	r3, r7, #16
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f00b fa25 	bl	801459c <VL53L1_GetRangingMeasurementData>
 8009152:	4603      	mov	r3, r0
 8009154:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    range = rangingData.RangeMilliMeter;
 8009158:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800915c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    VL53L1_StopMeasurement(dev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f00b f847 	bl	80141f2 <VL53L1_StopMeasurement>
    status = VL53L1_StartMeasurement(dev);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f00b f805 	bl	8014174 <VL53L1_StartMeasurement>
 800916a:	4603      	mov	r3, r0
 800916c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    status = status;

    return range;
 8009170:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 8009172:	4618      	mov	r0, r3
 8009174:	3730      	adds	r7, #48	@ 0x30
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
	...

0800917c <zRanger2Init>:

void zRanger2Init()
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af02      	add	r7, sp, #8
  if (isInit)
 8009182:	4b1a      	ldr	r3, [pc, #104]	@ (80091ec <zRanger2Init+0x70>)
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d12d      	bne.n	80091e6 <zRanger2Init+0x6a>
    return;

  checkRangeID = vl53l1xInit(&dev, &hi2c2);
 800918a:	4919      	ldr	r1, [pc, #100]	@ (80091f0 <zRanger2Init+0x74>)
 800918c:	4819      	ldr	r0, [pc, #100]	@ (80091f4 <zRanger2Init+0x78>)
 800918e:	f002 f817 	bl	800b1c0 <vl53l1xInit>
 8009192:	4603      	mov	r3, r0
 8009194:	461a      	mov	r2, r3
 8009196:	4b18      	ldr	r3, [pc, #96]	@ (80091f8 <zRanger2Init+0x7c>)
 8009198:	701a      	strb	r2, [r3, #0]


  xTaskCreate(zRanger2Task, ZRANGER2_TASK_NAME, ZRANGER2_TASK_STACKSIZE, NULL, ZRANGER2_TASK_PRI, NULL);
 800919a:	2300      	movs	r3, #0
 800919c:	9301      	str	r3, [sp, #4]
 800919e:	2302      	movs	r3, #2
 80091a0:	9300      	str	r3, [sp, #0]
 80091a2:	2300      	movs	r3, #0
 80091a4:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80091a8:	4914      	ldr	r1, [pc, #80]	@ (80091fc <zRanger2Init+0x80>)
 80091aa:	4815      	ldr	r0, [pc, #84]	@ (8009200 <zRanger2Init+0x84>)
 80091ac:	f7fd fee0 	bl	8006f70 <xTaskCreate>

  // pre-compute constant in the measurement noise model for kalman
  expCoeff = logf(expStdB / expStdA) / (expPointB - expPointA);
 80091b0:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8009204 <zRanger2Init+0x88>
 80091b4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009208 <zRanger2Init+0x8c>
 80091b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091bc:	eeb0 0a67 	vmov.f32	s0, s15
 80091c0:	f00f fd14 	bl	8018bec <logf>
 80091c4:	eef0 6a40 	vmov.f32	s13, s0
 80091c8:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80091cc:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 80091d0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091d8:	4b0c      	ldr	r3, [pc, #48]	@ (800920c <zRanger2Init+0x90>)
 80091da:	edc3 7a00 	vstr	s15, [r3]

  isInit = true;
 80091de:	4b03      	ldr	r3, [pc, #12]	@ (80091ec <zRanger2Init+0x70>)
 80091e0:	2201      	movs	r2, #1
 80091e2:	701a      	strb	r2, [r3, #0]
 80091e4:	e000      	b.n	80091e8 <zRanger2Init+0x6c>
    return;
 80091e6:	bf00      	nop
}
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20007ac6 	.word	0x20007ac6
 80091f0:	20007c84 	.word	0x20007c84
 80091f4:	10000000 	.word	0x10000000
 80091f8:	20007acc 	.word	0x20007acc
 80091fc:	0801b6d0 	.word	0x0801b6d0
 8009200:	08009211 	.word	0x08009211
 8009204:	3e4ccccd 	.word	0x3e4ccccd
 8009208:	3b23d70a 	.word	0x3b23d70a
 800920c:	20007ac0 	.word	0x20007ac0

08009210 <zRanger2Task>:

  return true;
}

void zRanger2Task(void* arg)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b086      	sub	sp, #24
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  TickType_t lastWakeTime;

  systemWaitStart();
 8009218:	f004 ffba 	bl	800e190 <systemWaitStart>

  // Restart sensor
  VL53L1_StopMeasurement(&dev);
 800921c:	4835      	ldr	r0, [pc, #212]	@ (80092f4 <zRanger2Task+0xe4>)
 800921e:	f00a ffe8 	bl	80141f2 <VL53L1_StopMeasurement>
  VL53L1_SetDistanceMode(&dev, VL53L1_DISTANCEMODE_MEDIUM);
 8009222:	2102      	movs	r1, #2
 8009224:	4833      	ldr	r0, [pc, #204]	@ (80092f4 <zRanger2Task+0xe4>)
 8009226:	f00a fd04 	bl	8013c32 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds(&dev, 25000);
 800922a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800922e:	4831      	ldr	r0, [pc, #196]	@ (80092f4 <zRanger2Task+0xe4>)
 8009230:	f00a fd86 	bl	8013d40 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>

  VL53L1_StartMeasurement(&dev);
 8009234:	482f      	ldr	r0, [pc, #188]	@ (80092f4 <zRanger2Task+0xe4>)
 8009236:	f00a ff9d 	bl	8014174 <VL53L1_StartMeasurement>

  lastWakeTime = xTaskGetTickCount();
 800923a:	f7fe f9b1 	bl	80075a0 <xTaskGetTickCount>
 800923e:	4603      	mov	r3, r0
 8009240:	60fb      	str	r3, [r7, #12]

  while (1) {
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8009242:	f107 030c 	add.w	r3, r7, #12
 8009246:	2119      	movs	r1, #25
 8009248:	4618      	mov	r0, r3
 800924a:	f7fd ffe3 	bl	8007214 <vTaskDelayUntil>
    rangeCounter++;
 800924e:	4b2a      	ldr	r3, [pc, #168]	@ (80092f8 <zRanger2Task+0xe8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	3301      	adds	r3, #1
 8009254:	4a28      	ldr	r2, [pc, #160]	@ (80092f8 <zRanger2Task+0xe8>)
 8009256:	6013      	str	r3, [r2, #0]
    range_last = zRanger2GetMeasurementAndRestart(&dev);
 8009258:	4826      	ldr	r0, [pc, #152]	@ (80092f4 <zRanger2Task+0xe4>)
 800925a:	f7ff ff5b 	bl	8009114 <zRanger2GetMeasurementAndRestart>
 800925e:	4603      	mov	r3, r0
 8009260:	461a      	mov	r2, r3
 8009262:	4b26      	ldr	r3, [pc, #152]	@ (80092fc <zRanger2Task+0xec>)
 8009264:	801a      	strh	r2, [r3, #0]
    rangeSet(rangeDown, range_last / 1000.0f);
 8009266:	4b25      	ldr	r3, [pc, #148]	@ (80092fc <zRanger2Task+0xec>)
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	ee07 3a90 	vmov	s15, r3
 800926e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009272:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8009300 <zRanger2Task+0xf0>
 8009276:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800927a:	eeb0 0a47 	vmov.f32	s0, s14
 800927e:	2005      	movs	r0, #5
 8009280:	f003 feba 	bl	800cff8 <rangeSet>

    // check if range is feasible and push into the estimator
    // the sensor should not be able to measure >5 [m], and outliers typically
    // occur as >8 [m] measurements
    if (range_last < RANGE_OUTLIER_LIMIT) {
 8009284:	4b1d      	ldr	r3, [pc, #116]	@ (80092fc <zRanger2Task+0xec>)
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	f241 3287 	movw	r2, #4999	@ 0x1387
 800928c:	4293      	cmp	r3, r2
 800928e:	d8d8      	bhi.n	8009242 <zRanger2Task+0x32>
      float distance = (float)range_last * 0.001f; // Scale from [mm] to [m]
 8009290:	4b1a      	ldr	r3, [pc, #104]	@ (80092fc <zRanger2Task+0xec>)
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	ee07 3a90 	vmov	s15, r3
 8009298:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800929c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009304 <zRanger2Task+0xf4>
 80092a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092a4:	edc7 7a05 	vstr	s15, [r7, #20]
      float stdDev = expStdA * (1.0f  + expf( expCoeff * (distance - expPointA)));
 80092a8:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 80092ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80092b0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80092b4:	4b14      	ldr	r3, [pc, #80]	@ (8009308 <zRanger2Task+0xf8>)
 80092b6:	edd3 7a00 	vldr	s15, [r3]
 80092ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80092be:	eeb0 0a67 	vmov.f32	s0, s15
 80092c2:	f00f fc5d 	bl	8018b80 <expf>
 80092c6:	eef0 7a40 	vmov.f32	s15, s0
 80092ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80092ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800930c <zRanger2Task+0xfc>
 80092d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092da:	edc7 7a04 	vstr	s15, [r7, #16]
      rangeEnqueueDownRangeInEstimator(distance, stdDev, xTaskGetTickCount());
 80092de:	f7fe f95f 	bl	80075a0 <xTaskGetTickCount>
 80092e2:	4603      	mov	r3, r0
 80092e4:	4618      	mov	r0, r3
 80092e6:	edd7 0a04 	vldr	s1, [r7, #16]
 80092ea:	ed97 0a05 	vldr	s0, [r7, #20]
 80092ee:	f003 fea7 	bl	800d040 <rangeEnqueueDownRangeInEstimator>
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 80092f2:	e7a6      	b.n	8009242 <zRanger2Task+0x32>
 80092f4:	10000000 	.word	0x10000000
 80092f8:	20007ac8 	.word	0x20007ac8
 80092fc:	20007ac4 	.word	0x20007ac4
 8009300:	447a0000 	.word	0x447a0000
 8009304:	3a83126f 	.word	0x3a83126f
 8009308:	20007ac0 	.word	0x20007ac0
 800930c:	3b23d70a 	.word	0x3b23d70a

08009310 <bmp280_StartUp>:

static int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9;
static uint16_t t1, p1;
static int32_t t_fine;

static void bmp280_StartUp(){
 8009310:	b580      	push	{r7, lr}
 8009312:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8009314:	2200      	movs	r2, #0
 8009316:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800931a:	4807      	ldr	r0, [pc, #28]	@ (8009338 <bmp280_StartUp+0x28>)
 800931c:	f7f8 fd52 	bl	8001dc4 <HAL_GPIO_WritePin>
	vTaskDelay(5);
 8009320:	2005      	movs	r0, #5
 8009322:	f7fd ffed 	bl	8007300 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8009326:	2201      	movs	r2, #1
 8009328:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800932c:	4802      	ldr	r0, [pc, #8]	@ (8009338 <bmp280_StartUp+0x28>)
 800932e:	f7f8 fd49 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 8009332:	bf00      	nop
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40020400 	.word	0x40020400

0800933c <bmp280_WriteReg>:
static void bmp280_WriteReg(uint8_t reg, uint8_t val){
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	460a      	mov	r2, r1
 8009346:	71fb      	strb	r3, [r7, #7]
 8009348:	4613      	mov	r3, r2
 800934a:	71bb      	strb	r3, [r7, #6]

	uint8_t buf[2];
	buf[0] = reg;
 800934c:	79fb      	ldrb	r3, [r7, #7]
 800934e:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(1<<7);
 8009350:	7b3b      	ldrb	r3, [r7, #12]
 8009352:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009356:	b2db      	uxtb	r3, r3
 8009358:	733b      	strb	r3, [r7, #12]
	buf[1] = val;
 800935a:	79bb      	ldrb	r3, [r7, #6]
 800935c:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800935e:	2200      	movs	r2, #0
 8009360:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8009364:	4809      	ldr	r0, [pc, #36]	@ (800938c <bmp280_WriteReg+0x50>)
 8009366:	f7f8 fd2d 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, buf, 2, 100);
 800936a:	f107 010c 	add.w	r1, r7, #12
 800936e:	2364      	movs	r3, #100	@ 0x64
 8009370:	2202      	movs	r2, #2
 8009372:	4807      	ldr	r0, [pc, #28]	@ (8009390 <bmp280_WriteReg+0x54>)
 8009374:	f7fa fa1a 	bl	80037ac <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8009378:	2201      	movs	r2, #1
 800937a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800937e:	4803      	ldr	r0, [pc, #12]	@ (800938c <bmp280_WriteReg+0x50>)
 8009380:	f7f8 fd20 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8009384:	bf00      	nop
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	40020400 	.word	0x40020400
 8009390:	20007cdc 	.word	0x20007cdc

08009394 <bmp280_ReadReg>:
void bmp280_ReadReg(uint8_t reg, uint8_t *buffer, uint8_t len){
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80093aa:	b2db      	uxtb	r3, r3
 80093ac:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80093ae:	2200      	movs	r2, #0
 80093b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80093b4:	480d      	ldr	r0, [pc, #52]	@ (80093ec <bmp280_ReadReg+0x58>)
 80093b6:	f7f8 fd05 	bl	8001dc4 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 100);
 80093ba:	f107 010f 	add.w	r1, r7, #15
 80093be:	2364      	movs	r3, #100	@ 0x64
 80093c0:	2201      	movs	r2, #1
 80093c2:	480b      	ldr	r0, [pc, #44]	@ (80093f0 <bmp280_ReadReg+0x5c>)
 80093c4:	f7fa f9f2 	bl	80037ac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buffer, len, 100);
 80093c8:	79bb      	ldrb	r3, [r7, #6]
 80093ca:	b29a      	uxth	r2, r3
 80093cc:	2364      	movs	r3, #100	@ 0x64
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	4807      	ldr	r0, [pc, #28]	@ (80093f0 <bmp280_ReadReg+0x5c>)
 80093d2:	f7fa fb2f 	bl	8003a34 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80093d6:	2201      	movs	r2, #1
 80093d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80093dc:	4803      	ldr	r0, [pc, #12]	@ (80093ec <bmp280_ReadReg+0x58>)
 80093de:	f7f8 fcf1 	bl	8001dc4 <HAL_GPIO_WritePin>

}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	40020400 	.word	0x40020400
 80093f0:	20007cdc 	.word	0x20007cdc

080093f4 <bmp280_ReadCalibrateValue>:
static void bmp280_ReadCalibrateValue(){
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0

	uint8_t buf[24];
	bmp280_ReadReg(DIG_T1, buf, 24);
 80093fa:	463b      	mov	r3, r7
 80093fc:	2218      	movs	r2, #24
 80093fe:	4619      	mov	r1, r3
 8009400:	2088      	movs	r0, #136	@ 0x88
 8009402:	f7ff ffc7 	bl	8009394 <bmp280_ReadReg>

	t1 = buf[1] << 8 | buf[0];
 8009406:	787b      	ldrb	r3, [r7, #1]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	b21a      	sxth	r2, r3
 800940c:	783b      	ldrb	r3, [r7, #0]
 800940e:	b21b      	sxth	r3, r3
 8009410:	4313      	orrs	r3, r2
 8009412:	b21b      	sxth	r3, r3
 8009414:	b29a      	uxth	r2, r3
 8009416:	4b35      	ldr	r3, [pc, #212]	@ (80094ec <bmp280_ReadCalibrateValue+0xf8>)
 8009418:	801a      	strh	r2, [r3, #0]
	t2 = buf[3] << 8 | buf[2];
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	021b      	lsls	r3, r3, #8
 800941e:	b21a      	sxth	r2, r3
 8009420:	78bb      	ldrb	r3, [r7, #2]
 8009422:	b21b      	sxth	r3, r3
 8009424:	4313      	orrs	r3, r2
 8009426:	b21a      	sxth	r2, r3
 8009428:	4b31      	ldr	r3, [pc, #196]	@ (80094f0 <bmp280_ReadCalibrateValue+0xfc>)
 800942a:	801a      	strh	r2, [r3, #0]
	t3 = buf[5] << 8 | buf[4];
 800942c:	797b      	ldrb	r3, [r7, #5]
 800942e:	021b      	lsls	r3, r3, #8
 8009430:	b21a      	sxth	r2, r3
 8009432:	793b      	ldrb	r3, [r7, #4]
 8009434:	b21b      	sxth	r3, r3
 8009436:	4313      	orrs	r3, r2
 8009438:	b21a      	sxth	r2, r3
 800943a:	4b2e      	ldr	r3, [pc, #184]	@ (80094f4 <bmp280_ReadCalibrateValue+0x100>)
 800943c:	801a      	strh	r2, [r3, #0]

	p1 = buf[7] << 8 | buf[6];
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	021b      	lsls	r3, r3, #8
 8009442:	b21a      	sxth	r2, r3
 8009444:	79bb      	ldrb	r3, [r7, #6]
 8009446:	b21b      	sxth	r3, r3
 8009448:	4313      	orrs	r3, r2
 800944a:	b21b      	sxth	r3, r3
 800944c:	b29a      	uxth	r2, r3
 800944e:	4b2a      	ldr	r3, [pc, #168]	@ (80094f8 <bmp280_ReadCalibrateValue+0x104>)
 8009450:	801a      	strh	r2, [r3, #0]
	p2 = buf[9] << 8 | buf[8];
 8009452:	7a7b      	ldrb	r3, [r7, #9]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	b21a      	sxth	r2, r3
 8009458:	7a3b      	ldrb	r3, [r7, #8]
 800945a:	b21b      	sxth	r3, r3
 800945c:	4313      	orrs	r3, r2
 800945e:	b21a      	sxth	r2, r3
 8009460:	4b26      	ldr	r3, [pc, #152]	@ (80094fc <bmp280_ReadCalibrateValue+0x108>)
 8009462:	801a      	strh	r2, [r3, #0]
	p3 = buf[11]<< 8 | buf[10];
 8009464:	7afb      	ldrb	r3, [r7, #11]
 8009466:	021b      	lsls	r3, r3, #8
 8009468:	b21a      	sxth	r2, r3
 800946a:	7abb      	ldrb	r3, [r7, #10]
 800946c:	b21b      	sxth	r3, r3
 800946e:	4313      	orrs	r3, r2
 8009470:	b21a      	sxth	r2, r3
 8009472:	4b23      	ldr	r3, [pc, #140]	@ (8009500 <bmp280_ReadCalibrateValue+0x10c>)
 8009474:	801a      	strh	r2, [r3, #0]
	p4 = buf[13]<< 8 | buf[12];
 8009476:	7b7b      	ldrb	r3, [r7, #13]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	b21a      	sxth	r2, r3
 800947c:	7b3b      	ldrb	r3, [r7, #12]
 800947e:	b21b      	sxth	r3, r3
 8009480:	4313      	orrs	r3, r2
 8009482:	b21a      	sxth	r2, r3
 8009484:	4b1f      	ldr	r3, [pc, #124]	@ (8009504 <bmp280_ReadCalibrateValue+0x110>)
 8009486:	801a      	strh	r2, [r3, #0]
	p5 = buf[15]<< 8 | buf[14];
 8009488:	7bfb      	ldrb	r3, [r7, #15]
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b21a      	sxth	r2, r3
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	b21b      	sxth	r3, r3
 8009492:	4313      	orrs	r3, r2
 8009494:	b21a      	sxth	r2, r3
 8009496:	4b1c      	ldr	r3, [pc, #112]	@ (8009508 <bmp280_ReadCalibrateValue+0x114>)
 8009498:	801a      	strh	r2, [r3, #0]
	p6 = buf[17]<< 8 | buf[16];
 800949a:	7c7b      	ldrb	r3, [r7, #17]
 800949c:	021b      	lsls	r3, r3, #8
 800949e:	b21a      	sxth	r2, r3
 80094a0:	7c3b      	ldrb	r3, [r7, #16]
 80094a2:	b21b      	sxth	r3, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	b21a      	sxth	r2, r3
 80094a8:	4b18      	ldr	r3, [pc, #96]	@ (800950c <bmp280_ReadCalibrateValue+0x118>)
 80094aa:	801a      	strh	r2, [r3, #0]
	p7 = buf[19]<< 8 | buf[18];
 80094ac:	7cfb      	ldrb	r3, [r7, #19]
 80094ae:	021b      	lsls	r3, r3, #8
 80094b0:	b21a      	sxth	r2, r3
 80094b2:	7cbb      	ldrb	r3, [r7, #18]
 80094b4:	b21b      	sxth	r3, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b21a      	sxth	r2, r3
 80094ba:	4b15      	ldr	r3, [pc, #84]	@ (8009510 <bmp280_ReadCalibrateValue+0x11c>)
 80094bc:	801a      	strh	r2, [r3, #0]
	p8 = buf[21]<< 8 | buf[20];
 80094be:	7d7b      	ldrb	r3, [r7, #21]
 80094c0:	021b      	lsls	r3, r3, #8
 80094c2:	b21a      	sxth	r2, r3
 80094c4:	7d3b      	ldrb	r3, [r7, #20]
 80094c6:	b21b      	sxth	r3, r3
 80094c8:	4313      	orrs	r3, r2
 80094ca:	b21a      	sxth	r2, r3
 80094cc:	4b11      	ldr	r3, [pc, #68]	@ (8009514 <bmp280_ReadCalibrateValue+0x120>)
 80094ce:	801a      	strh	r2, [r3, #0]
	p9 = buf[23]<< 8 | buf[22];
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	b21a      	sxth	r2, r3
 80094d6:	7dbb      	ldrb	r3, [r7, #22]
 80094d8:	b21b      	sxth	r3, r3
 80094da:	4313      	orrs	r3, r2
 80094dc:	b21a      	sxth	r2, r3
 80094de:	4b0e      	ldr	r3, [pc, #56]	@ (8009518 <bmp280_ReadCalibrateValue+0x124>)
 80094e0:	801a      	strh	r2, [r3, #0]

}
 80094e2:	bf00      	nop
 80094e4:	3718      	adds	r7, #24
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20007ae2 	.word	0x20007ae2
 80094f0:	20007ace 	.word	0x20007ace
 80094f4:	20007ad0 	.word	0x20007ad0
 80094f8:	20007ae4 	.word	0x20007ae4
 80094fc:	20007ad2 	.word	0x20007ad2
 8009500:	20007ad4 	.word	0x20007ad4
 8009504:	20007ad6 	.word	0x20007ad6
 8009508:	20007ad8 	.word	0x20007ad8
 800950c:	20007ada 	.word	0x20007ada
 8009510:	20007adc 	.word	0x20007adc
 8009514:	20007ade 	.word	0x20007ade
 8009518:	20007ae0 	.word	0x20007ae0

0800951c <bmp280GetTemperature>:
static void bmp280GetTemperature(float* temperature)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf[3];
	int32_t temp_adc;
	int32_t var1, var2;

	bmp280_ReadReg(BMP280_TEMP_REG_DATA, temp_buf, 3);
 8009524:	f107 0308 	add.w	r3, r7, #8
 8009528:	2203      	movs	r2, #3
 800952a:	4619      	mov	r1, r3
 800952c:	20fa      	movs	r0, #250	@ 0xfa
 800952e:	f7ff ff31 	bl	8009394 <bmp280_ReadReg>
	temp_adc = (temp_buf[0] << 16) | (temp_buf[1] << 8) | temp_buf[2];
 8009532:	7a3b      	ldrb	r3, [r7, #8]
 8009534:	041a      	lsls	r2, r3, #16
 8009536:	7a7b      	ldrb	r3, [r7, #9]
 8009538:	021b      	lsls	r3, r3, #8
 800953a:	4313      	orrs	r3, r2
 800953c:	7aba      	ldrb	r2, [r7, #10]
 800953e:	4313      	orrs	r3, r2
 8009540:	617b      	str	r3, [r7, #20]
	temp_adc >>= 4;
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	111b      	asrs	r3, r3, #4
 8009546:	617b      	str	r3, [r7, #20]

	var1  = ((((temp_adc>>3) - ((int32_t)t1 <<1))) * ((int32_t)t2)) >> 11;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	10da      	asrs	r2, r3, #3
 800954c:	4b1c      	ldr	r3, [pc, #112]	@ (80095c0 <bmp280GetTemperature+0xa4>)
 800954e:	881b      	ldrh	r3, [r3, #0]
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	4a1b      	ldr	r2, [pc, #108]	@ (80095c4 <bmp280GetTemperature+0xa8>)
 8009556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800955a:	fb02 f303 	mul.w	r3, r2, r3
 800955e:	12db      	asrs	r3, r3, #11
 8009560:	613b      	str	r3, [r7, #16]
	var2  = (((((temp_adc >> 4) - ((int32_t) t1)) * ((temp_adc >> 4) - ((int32_t) t1))) >> 12) * ((int32_t) t3)) >> 14;
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	111b      	asrs	r3, r3, #4
 8009566:	4a16      	ldr	r2, [pc, #88]	@ (80095c0 <bmp280GetTemperature+0xa4>)
 8009568:	8812      	ldrh	r2, [r2, #0]
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	697a      	ldr	r2, [r7, #20]
 800956e:	1112      	asrs	r2, r2, #4
 8009570:	4913      	ldr	r1, [pc, #76]	@ (80095c0 <bmp280GetTemperature+0xa4>)
 8009572:	8809      	ldrh	r1, [r1, #0]
 8009574:	1a52      	subs	r2, r2, r1
 8009576:	fb02 f303 	mul.w	r3, r2, r3
 800957a:	131b      	asrs	r3, r3, #12
 800957c:	4a12      	ldr	r2, [pc, #72]	@ (80095c8 <bmp280GetTemperature+0xac>)
 800957e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009582:	fb02 f303 	mul.w	r3, r2, r3
 8009586:	139b      	asrs	r3, r3, #14
 8009588:	60fb      	str	r3, [r7, #12]

	t_fine = (var1 + var2);
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	4a0e      	ldr	r2, [pc, #56]	@ (80095cc <bmp280GetTemperature+0xb0>)
 8009592:	6013      	str	r3, [r2, #0]

	*temperature = (((t_fine * 5) + 128 ) >> 8) /100.0f;
 8009594:	4b0d      	ldr	r3, [pc, #52]	@ (80095cc <bmp280GetTemperature+0xb0>)
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	4613      	mov	r3, r2
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	4413      	add	r3, r2
 800959e:	3380      	adds	r3, #128	@ 0x80
 80095a0:	121b      	asrs	r3, r3, #8
 80095a2:	ee07 3a90 	vmov	s15, r3
 80095a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80095aa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80095d0 <bmp280GetTemperature+0xb4>
 80095ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	edc3 7a00 	vstr	s15, [r3]
}
 80095b8:	bf00      	nop
 80095ba:	3718      	adds	r7, #24
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}
 80095c0:	20007ae2 	.word	0x20007ae2
 80095c4:	20007ace 	.word	0x20007ace
 80095c8:	20007ad0 	.word	0x20007ad0
 80095cc:	20007ae8 	.word	0x20007ae8
 80095d0:	42c80000 	.word	0x42c80000

080095d4 <bmp280GetPressure>:
static void bmp280GetPressure(float *pressure)
{
 80095d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80095d8:	b0ce      	sub	sp, #312	@ 0x138
 80095da:	af00      	add	r7, sp, #0
 80095dc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	uint8_t pres_buf[3];
	int32_t pres_adc;
	int64_t var1, var2, p;
	float temp;

	bmp280GetTemperature(&temp);
 80095e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80095e4:	4618      	mov	r0, r3
 80095e6:	f7ff ff99 	bl	800951c <bmp280GetTemperature>
	bmp280_ReadReg(BMP280_PRESSURE_REG_DAT, pres_buf, 3);
 80095ea:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 80095ee:	2203      	movs	r2, #3
 80095f0:	4619      	mov	r1, r3
 80095f2:	20f7      	movs	r0, #247	@ 0xf7
 80095f4:	f7ff fece 	bl	8009394 <bmp280_ReadReg>

	pres_adc = (pres_buf[0] << 16) | (pres_buf[1] << 8) | pres_buf[2];
 80095f8:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 80095fc:	041a      	lsls	r2, r3, #16
 80095fe:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	431a      	orrs	r2, r3
 8009606:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800960a:	4313      	orrs	r3, r2
 800960c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	pres_adc >>= 4;
 8009610:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8009614:	111b      	asrs	r3, r3, #4
 8009616:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	var1 = ((int64_t)t_fine) - 128000;
 800961a:	4baa      	ldr	r3, [pc, #680]	@ (80098c4 <bmp280GetPressure+0x2f0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	17da      	asrs	r2, r3, #31
 8009620:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009624:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8009628:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800962c:	460b      	mov	r3, r1
 800962e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8009632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009634:	4613      	mov	r3, r2
 8009636:	f143 33ff 	adc.w	r3, r3, #4294967295
 800963a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800963c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009640:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t)p6;
 8009644:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009648:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800964c:	fb03 f102 	mul.w	r1, r3, r2
 8009650:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8009654:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009658:	fb02 f303 	mul.w	r3, r2, r3
 800965c:	18ca      	adds	r2, r1, r3
 800965e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009662:	fba3 4503 	umull	r4, r5, r3, r3
 8009666:	1953      	adds	r3, r2, r5
 8009668:	461d      	mov	r5, r3
 800966a:	4b97      	ldr	r3, [pc, #604]	@ (80098c8 <bmp280GetPressure+0x2f4>)
 800966c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009670:	b21b      	sxth	r3, r3
 8009672:	17da      	asrs	r2, r3, #31
 8009674:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009678:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800967c:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8009680:	4603      	mov	r3, r0
 8009682:	fb03 f205 	mul.w	r2, r3, r5
 8009686:	460b      	mov	r3, r1
 8009688:	fb04 f303 	mul.w	r3, r4, r3
 800968c:	4413      	add	r3, r2
 800968e:	4602      	mov	r2, r0
 8009690:	fba4 8902 	umull	r8, r9, r4, r2
 8009694:	444b      	add	r3, r9
 8009696:	4699      	mov	r9, r3
 8009698:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 800969c:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 80096a0:	4b8a      	ldr	r3, [pc, #552]	@ (80098cc <bmp280GetPressure+0x2f8>)
 80096a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80096a6:	b21b      	sxth	r3, r3
 80096a8:	17da      	asrs	r2, r3, #31
 80096aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80096ae:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80096b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096b6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80096ba:	462a      	mov	r2, r5
 80096bc:	fb02 f203 	mul.w	r2, r2, r3
 80096c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80096c4:	4621      	mov	r1, r4
 80096c6:	fb01 f303 	mul.w	r3, r1, r3
 80096ca:	441a      	add	r2, r3
 80096cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80096d0:	4621      	mov	r1, r4
 80096d2:	fba3 ab01 	umull	sl, fp, r3, r1
 80096d6:	eb02 030b 	add.w	r3, r2, fp
 80096da:	469b      	mov	fp, r3
 80096dc:	f04f 0000 	mov.w	r0, #0
 80096e0:	f04f 0100 	mov.w	r1, #0
 80096e4:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80096e8:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80096ec:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80096f0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80096f4:	1814      	adds	r4, r2, r0
 80096f6:	643c      	str	r4, [r7, #64]	@ 0x40
 80096f8:	414b      	adcs	r3, r1
 80096fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80096fc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8009700:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t)p4)<<35);
 8009704:	4b72      	ldr	r3, [pc, #456]	@ (80098d0 <bmp280GetPressure+0x2fc>)
 8009706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800970a:	b21b      	sxth	r3, r3
 800970c:	17da      	asrs	r2, r3, #31
 800970e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009712:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8009716:	f04f 0000 	mov.w	r0, #0
 800971a:	f04f 0100 	mov.w	r1, #0
 800971e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009722:	00d9      	lsls	r1, r3, #3
 8009724:	2000      	movs	r0, #0
 8009726:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800972a:	1814      	adds	r4, r2, r0
 800972c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800972e:	414b      	adcs	r3, r1
 8009730:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009732:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8009736:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t)p3)>>8) + ((var1 * (int64_t)p2)<<12);
 800973a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800973e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009742:	fb03 f102 	mul.w	r1, r3, r2
 8009746:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800974a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800974e:	fb02 f303 	mul.w	r3, r2, r3
 8009752:	18ca      	adds	r2, r1, r3
 8009754:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009758:	fba3 1303 	umull	r1, r3, r3, r3
 800975c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009760:	460b      	mov	r3, r1
 8009762:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800976a:	18d3      	adds	r3, r2, r3
 800976c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009770:	4b58      	ldr	r3, [pc, #352]	@ (80098d4 <bmp280GetPressure+0x300>)
 8009772:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009776:	b21b      	sxth	r3, r3
 8009778:	17da      	asrs	r2, r3, #31
 800977a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800977e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009782:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8009786:	462b      	mov	r3, r5
 8009788:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800978c:	4642      	mov	r2, r8
 800978e:	fb02 f203 	mul.w	r2, r2, r3
 8009792:	464b      	mov	r3, r9
 8009794:	4621      	mov	r1, r4
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	4622      	mov	r2, r4
 800979e:	4641      	mov	r1, r8
 80097a0:	fba2 1201 	umull	r1, r2, r2, r1
 80097a4:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80097a8:	460a      	mov	r2, r1
 80097aa:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80097ae:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80097b2:	4413      	add	r3, r2
 80097b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097b8:	f04f 0000 	mov.w	r0, #0
 80097bc:	f04f 0100 	mov.w	r1, #0
 80097c0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80097c4:	4623      	mov	r3, r4
 80097c6:	0a18      	lsrs	r0, r3, #8
 80097c8:	462b      	mov	r3, r5
 80097ca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80097ce:	462b      	mov	r3, r5
 80097d0:	1219      	asrs	r1, r3, #8
 80097d2:	4b41      	ldr	r3, [pc, #260]	@ (80098d8 <bmp280GetPressure+0x304>)
 80097d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097d8:	b21b      	sxth	r3, r3
 80097da:	17da      	asrs	r2, r3, #31
 80097dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097e0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80097e8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80097ec:	464a      	mov	r2, r9
 80097ee:	fb02 f203 	mul.w	r2, r2, r3
 80097f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80097f6:	4644      	mov	r4, r8
 80097f8:	fb04 f303 	mul.w	r3, r4, r3
 80097fc:	441a      	add	r2, r3
 80097fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8009802:	4644      	mov	r4, r8
 8009804:	fba3 4304 	umull	r4, r3, r3, r4
 8009808:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800980c:	4623      	mov	r3, r4
 800980e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009816:	18d3      	adds	r3, r2, r3
 8009818:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800981c:	f04f 0200 	mov.w	r2, #0
 8009820:	f04f 0300 	mov.w	r3, #0
 8009824:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8009828:	464c      	mov	r4, r9
 800982a:	0323      	lsls	r3, r4, #12
 800982c:	4644      	mov	r4, r8
 800982e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8009832:	4644      	mov	r4, r8
 8009834:	0322      	lsls	r2, r4, #12
 8009836:	1884      	adds	r4, r0, r2
 8009838:	633c      	str	r4, [r7, #48]	@ 0x30
 800983a:	eb41 0303 	adc.w	r3, r1, r3
 800983e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009840:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8009844:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8009848:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800984c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8009850:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8009854:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8009858:	4b20      	ldr	r3, [pc, #128]	@ (80098dc <bmp280GetPressure+0x308>)
 800985a:	881b      	ldrh	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	2200      	movs	r2, #0
 8009860:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009864:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009868:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800986c:	462b      	mov	r3, r5
 800986e:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8009872:	4642      	mov	r2, r8
 8009874:	fb02 f203 	mul.w	r2, r2, r3
 8009878:	464b      	mov	r3, r9
 800987a:	4621      	mov	r1, r4
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	4413      	add	r3, r2
 8009882:	4622      	mov	r2, r4
 8009884:	4641      	mov	r1, r8
 8009886:	fba2 1201 	umull	r1, r2, r2, r1
 800988a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800988e:	460a      	mov	r2, r1
 8009890:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8009894:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8009898:	4413      	add	r3, r2
 800989a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80098aa:	4629      	mov	r1, r5
 80098ac:	104a      	asrs	r2, r1, #1
 80098ae:	4629      	mov	r1, r5
 80098b0:	17cb      	asrs	r3, r1, #31
 80098b2:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if ( var1 == 0 ) return;
 80098b6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f000 8165 	beq.w	8009b8a <bmp280GetPressure+0x5b6>
 80098c0:	e00e      	b.n	80098e0 <bmp280GetPressure+0x30c>
 80098c2:	bf00      	nop
 80098c4:	20007ae8 	.word	0x20007ae8
 80098c8:	20007ada 	.word	0x20007ada
 80098cc:	20007ad8 	.word	0x20007ad8
 80098d0:	20007ad6 	.word	0x20007ad6
 80098d4:	20007ad4 	.word	0x20007ad4
 80098d8:	20007ad2 	.word	0x20007ad2
 80098dc:	20007ae4 	.word	0x20007ae4

	p = 1048576 - pres_adc;
 80098e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80098e4:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80098e8:	17da      	asrs	r2, r3, #31
 80098ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098ee:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80098f2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p<<31) - var2)*3125) / var1;
 80098f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80098fa:	105b      	asrs	r3, r3, #1
 80098fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009900:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009904:	07db      	lsls	r3, r3, #31
 8009906:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800990a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800990e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8009912:	4621      	mov	r1, r4
 8009914:	1a89      	subs	r1, r1, r2
 8009916:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800991a:	4629      	mov	r1, r5
 800991c:	eb61 0303 	sbc.w	r3, r1, r3
 8009920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009924:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8009928:	4622      	mov	r2, r4
 800992a:	462b      	mov	r3, r5
 800992c:	1891      	adds	r1, r2, r2
 800992e:	6239      	str	r1, [r7, #32]
 8009930:	415b      	adcs	r3, r3
 8009932:	627b      	str	r3, [r7, #36]	@ 0x24
 8009934:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009938:	4621      	mov	r1, r4
 800993a:	1851      	adds	r1, r2, r1
 800993c:	61b9      	str	r1, [r7, #24]
 800993e:	4629      	mov	r1, r5
 8009940:	414b      	adcs	r3, r1
 8009942:	61fb      	str	r3, [r7, #28]
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8009950:	4649      	mov	r1, r9
 8009952:	018b      	lsls	r3, r1, #6
 8009954:	4641      	mov	r1, r8
 8009956:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800995a:	4641      	mov	r1, r8
 800995c:	018a      	lsls	r2, r1, #6
 800995e:	4641      	mov	r1, r8
 8009960:	1889      	adds	r1, r1, r2
 8009962:	6139      	str	r1, [r7, #16]
 8009964:	4649      	mov	r1, r9
 8009966:	eb43 0101 	adc.w	r1, r3, r1
 800996a:	6179      	str	r1, [r7, #20]
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	f04f 0300 	mov.w	r3, #0
 8009974:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8009978:	4649      	mov	r1, r9
 800997a:	008b      	lsls	r3, r1, #2
 800997c:	4641      	mov	r1, r8
 800997e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009982:	4641      	mov	r1, r8
 8009984:	008a      	lsls	r2, r1, #2
 8009986:	4610      	mov	r0, r2
 8009988:	4619      	mov	r1, r3
 800998a:	4603      	mov	r3, r0
 800998c:	4622      	mov	r2, r4
 800998e:	189b      	adds	r3, r3, r2
 8009990:	60bb      	str	r3, [r7, #8]
 8009992:	460b      	mov	r3, r1
 8009994:	462a      	mov	r2, r5
 8009996:	eb42 0303 	adc.w	r3, r2, r3
 800999a:	60fb      	str	r3, [r7, #12]
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80099a8:	4649      	mov	r1, r9
 80099aa:	008b      	lsls	r3, r1, #2
 80099ac:	4641      	mov	r1, r8
 80099ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099b2:	4641      	mov	r1, r8
 80099b4:	008a      	lsls	r2, r1, #2
 80099b6:	4610      	mov	r0, r2
 80099b8:	4619      	mov	r1, r3
 80099ba:	4603      	mov	r3, r0
 80099bc:	4622      	mov	r2, r4
 80099be:	189b      	adds	r3, r3, r2
 80099c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099c2:	462b      	mov	r3, r5
 80099c4:	460a      	mov	r2, r1
 80099c6:	eb42 0303 	adc.w	r3, r2, r3
 80099ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099cc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80099d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80099d4:	f7f7 f9d0 	bl	8000d78 <__aeabi_ldivmod>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80099e0:	4b6d      	ldr	r3, [pc, #436]	@ (8009b98 <bmp280GetPressure+0x5c4>)
 80099e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80099e6:	b21b      	sxth	r3, r3
 80099e8:	17da      	asrs	r2, r3, #31
 80099ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80099ec:	677a      	str	r2, [r7, #116]	@ 0x74
 80099ee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80099f2:	f04f 0000 	mov.w	r0, #0
 80099f6:	f04f 0100 	mov.w	r1, #0
 80099fa:	0b50      	lsrs	r0, r2, #13
 80099fc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009a00:	1359      	asrs	r1, r3, #13
 8009a02:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8009a06:	462b      	mov	r3, r5
 8009a08:	fb00 f203 	mul.w	r2, r0, r3
 8009a0c:	4623      	mov	r3, r4
 8009a0e:	fb03 f301 	mul.w	r3, r3, r1
 8009a12:	4413      	add	r3, r2
 8009a14:	4622      	mov	r2, r4
 8009a16:	fba2 1200 	umull	r1, r2, r2, r0
 8009a1a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8009a1e:	460a      	mov	r2, r1
 8009a20:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8009a24:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009a28:	4413      	add	r3, r2
 8009a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009a2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f04f 0100 	mov.w	r1, #0
 8009a3a:	0b50      	lsrs	r0, r2, #13
 8009a3c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8009a40:	1359      	asrs	r1, r3, #13
 8009a42:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8009a46:	462b      	mov	r3, r5
 8009a48:	fb00 f203 	mul.w	r2, r0, r3
 8009a4c:	4623      	mov	r3, r4
 8009a4e:	fb03 f301 	mul.w	r3, r3, r1
 8009a52:	4413      	add	r3, r2
 8009a54:	4622      	mov	r2, r4
 8009a56:	fba2 1200 	umull	r1, r2, r2, r0
 8009a5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a5e:	460a      	mov	r2, r1
 8009a60:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8009a64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009a68:	4413      	add	r3, r2
 8009a6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a6e:	f04f 0200 	mov.w	r2, #0
 8009a72:	f04f 0300 	mov.w	r3, #0
 8009a76:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	0e4a      	lsrs	r2, r1, #25
 8009a7e:	4629      	mov	r1, r5
 8009a80:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8009a84:	4629      	mov	r1, r5
 8009a86:	164b      	asrs	r3, r1, #25
 8009a88:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = (((int64_t)p8) * p) >> 19;
 8009a8c:	4b43      	ldr	r3, [pc, #268]	@ (8009b9c <bmp280GetPressure+0x5c8>)
 8009a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a92:	b21b      	sxth	r3, r3
 8009a94:	17da      	asrs	r2, r3, #31
 8009a96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009a9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8009a9e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8009aa2:	462a      	mov	r2, r5
 8009aa4:	fb02 f203 	mul.w	r2, r2, r3
 8009aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009aac:	4621      	mov	r1, r4
 8009aae:	fb01 f303 	mul.w	r3, r1, r3
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8009ab8:	4621      	mov	r1, r4
 8009aba:	fba2 1201 	umull	r1, r2, r2, r1
 8009abe:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009ac2:	460a      	mov	r2, r1
 8009ac4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8009ac8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8009acc:	4413      	add	r3, r2
 8009ace:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ad2:	f04f 0200 	mov.w	r2, #0
 8009ad6:	f04f 0300 	mov.w	r3, #0
 8009ada:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8009ade:	4621      	mov	r1, r4
 8009ae0:	0cca      	lsrs	r2, r1, #19
 8009ae2:	4629      	mov	r1, r5
 8009ae4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8009ae8:	4629      	mov	r1, r5
 8009aea:	14cb      	asrs	r3, r1, #19
 8009aec:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8009af0:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009af4:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8009af8:	1884      	adds	r4, r0, r2
 8009afa:	663c      	str	r4, [r7, #96]	@ 0x60
 8009afc:	eb41 0303 	adc.w	r3, r1, r3
 8009b00:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b02:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8009b06:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	1889      	adds	r1, r1, r2
 8009b0e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009b10:	4629      	mov	r1, r5
 8009b12:	eb43 0101 	adc.w	r1, r3, r1
 8009b16:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8009b18:	f04f 0000 	mov.w	r0, #0
 8009b1c:	f04f 0100 	mov.w	r1, #0
 8009b20:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009b24:	4623      	mov	r3, r4
 8009b26:	0a18      	lsrs	r0, r3, #8
 8009b28:	462b      	mov	r3, r5
 8009b2a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8009b2e:	462b      	mov	r3, r5
 8009b30:	1219      	asrs	r1, r3, #8
 8009b32:	4b1b      	ldr	r3, [pc, #108]	@ (8009ba0 <bmp280GetPressure+0x5cc>)
 8009b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b38:	b21b      	sxth	r3, r3
 8009b3a:	17da      	asrs	r2, r3, #31
 8009b3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b3e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009b40:	f04f 0200 	mov.w	r2, #0
 8009b44:	f04f 0300 	mov.w	r3, #0
 8009b48:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8009b4c:	464c      	mov	r4, r9
 8009b4e:	0123      	lsls	r3, r4, #4
 8009b50:	4644      	mov	r4, r8
 8009b52:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8009b56:	4644      	mov	r4, r8
 8009b58:	0122      	lsls	r2, r4, #4
 8009b5a:	1884      	adds	r4, r0, r2
 8009b5c:	603c      	str	r4, [r7, #0]
 8009b5e:	eb41 0303 	adc.w	r3, r1, r3
 8009b62:	607b      	str	r3, [r7, #4]
 8009b64:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009b68:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	*pressure = (float) p / 256.0f;
 8009b6c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8009b70:	f7f7 f8c4 	bl	8000cfc <__aeabi_l2f>
 8009b74:	ee06 0a90 	vmov	s13, r0
 8009b78:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8009ba4 <bmp280GetPressure+0x5d0>
 8009b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009b84:	edc3 7a00 	vstr	s15, [r3]
 8009b88:	e000      	b.n	8009b8c <bmp280GetPressure+0x5b8>
	if ( var1 == 0 ) return;
 8009b8a:	bf00      	nop

}
 8009b8c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8009b90:	46bd      	mov	sp, r7
 8009b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b96:	bf00      	nop
 8009b98:	20007ae0 	.word	0x20007ae0
 8009b9c:	20007ade 	.word	0x20007ade
 8009ba0:	20007adc 	.word	0x20007adc
 8009ba4:	43800000 	.word	0x43800000

08009ba8 <bmp280Init>:
void bmp280Init()
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0

	bmp280_StartUp();
 8009bac:	f7ff fbb0 	bl	8009310 <bmp280_StartUp>
	vTaskDelay(5);
 8009bb0:	2005      	movs	r0, #5
 8009bb2:	f7fd fba5 	bl	8007300 <vTaskDelay>
	bmp280_ReadCalibrateValue();
 8009bb6:	f7ff fc1d 	bl	80093f4 <bmp280_ReadCalibrateValue>
	vTaskDelay(5);
 8009bba:	2005      	movs	r0, #5
 8009bbc:	f7fd fba0 	bl	8007300 <vTaskDelay>
	bmp280_WriteReg(BMP280_REG_CTRL, ( (TEMP_18BIT_RES<<5) | (PRES_18BIT_RES<<2) | BMP280_NORMAL_MODE));
 8009bc0:	216f      	movs	r1, #111	@ 0x6f
 8009bc2:	20f4      	movs	r0, #244	@ 0xf4
 8009bc4:	f7ff fbba 	bl	800933c <bmp280_WriteReg>
	isInit = true;
 8009bc8:	4b02      	ldr	r3, [pc, #8]	@ (8009bd4 <bmp280Init+0x2c>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	701a      	strb	r2, [r3, #0]
}
 8009bce:	bf00      	nop
 8009bd0:	bd80      	pop	{r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20007acd 	.word	0x20007acd

08009bd8 <bmp280TestConnection>:
{

	return true;
}
bool bmp280TestConnection()
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
	uint8_t checkID;

	if (!isInit) return false;
 8009bde:	4b0d      	ldr	r3, [pc, #52]	@ (8009c14 <bmp280TestConnection+0x3c>)
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	f083 0301 	eor.w	r3, r3, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <bmp280TestConnection+0x18>
 8009bec:	2300      	movs	r3, #0
 8009bee:	e00d      	b.n	8009c0c <bmp280TestConnection+0x34>

	bmp280_StartUp();
 8009bf0:	f7ff fb8e 	bl	8009310 <bmp280_StartUp>
	bmp280_ReadReg(BMP280_REG_ID, &checkID, 1);
 8009bf4:	1dfb      	adds	r3, r7, #7
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	20d0      	movs	r0, #208	@ 0xd0
 8009bfc:	f7ff fbca 	bl	8009394 <bmp280_ReadReg>

	if ( checkID != 0x58 ) return false;
 8009c00:	79fb      	ldrb	r3, [r7, #7]
 8009c02:	2b58      	cmp	r3, #88	@ 0x58
 8009c04:	d001      	beq.n	8009c0a <bmp280TestConnection+0x32>
 8009c06:	2300      	movs	r3, #0
 8009c08:	e000      	b.n	8009c0c <bmp280TestConnection+0x34>

	return true;
 8009c0a:	2301      	movs	r3, #1
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	3708      	adds	r7, #8
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	20007acd 	.word	0x20007acd

08009c18 <bmp280GetData>:
void bmp280GetData(float* pressure, float* temperature, float* asl)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	60f8      	str	r0, [r7, #12]
 8009c20:	60b9      	str	r1, [r7, #8]
 8009c22:	607a      	str	r2, [r7, #4]
	bmp280GetTemperature(temperature);
 8009c24:	68b8      	ldr	r0, [r7, #8]
 8009c26:	f7ff fc79 	bl	800951c <bmp280GetTemperature>
	bmp280GetPressure(pressure);
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f7ff fcd2 	bl	80095d4 <bmp280GetPressure>
	*asl = bmp280PressureToAltitude(pressure);
 8009c30:	68f8      	ldr	r0, [r7, #12]
 8009c32:	f000 f809 	bl	8009c48 <bmp280PressureToAltitude>
 8009c36:	eef0 7a40 	vmov.f32	s15, s0
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	edc3 7a00 	vstr	s15, [r3]

}
 8009c40:	bf00      	nop
 8009c42:	3710      	adds	r7, #16
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <bmp280PressureToAltitude>:
#define CONST_PF2 44330.0f
#define FIX_TEMP 25         // Fixed Temperature. ASL is a function of pressure and temperature, but as the temperature changes so much (blow a little towards the flie and watch it drop 5 degrees) it corrupts the ASL estimates.
                            // TLDR: Adjusting for temp changes does more harm than good.

float bmp280PressureToAltitude(float* pressure)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
    if (*pressure > 0)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	edd3 7a00 	vldr	s15, [r3]
 8009c56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5e:	dd1b      	ble.n	8009c98 <bmp280PressureToAltitude+0x50>
    {
        //return (1.f - pow(*pressure / CONST_SEA_PRESSURE, CONST_PF)) * CONST_PF2;
        //return ((pow((1015.7 / *pressure), CONST_PF) - 1.0) * (25. + 273.15)) / 0.0065;
        return ((powf((1015.7f / *pressure), CONST_PF) - 1.0f) * (FIX_TEMP + 273.15f)) / 0.0065f;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	edd3 7a00 	vldr	s15, [r3]
 8009c66:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8009cac <bmp280PressureToAltitude+0x64>
 8009c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c6e:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8009cb0 <bmp280PressureToAltitude+0x68>
 8009c72:	eeb0 0a47 	vmov.f32	s0, s14
 8009c76:	f00e ffe7 	bl	8018c48 <powf>
 8009c7a:	eef0 7a40 	vmov.f32	s15, s0
 8009c7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009c82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c86:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8009cb4 <bmp280PressureToAltitude+0x6c>
 8009c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c8e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8009cb8 <bmp280PressureToAltitude+0x70>
 8009c92:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009c96:	e001      	b.n	8009c9c <bmp280PressureToAltitude+0x54>
    }
    else
    {
        return 0;
 8009c98:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8009cbc <bmp280PressureToAltitude+0x74>
    }
}
 8009c9c:	eef0 7a47 	vmov.f32	s15, s14
 8009ca0:	eeb0 0a67 	vmov.f32	s0, s15
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	447deccd 	.word	0x447deccd
 8009cb0:	3e42d454 	.word	0x3e42d454
 8009cb4:	43951333 	.word	0x43951333
 8009cb8:	3bd4fdf4 	.word	0x3bd4fdf4
 8009cbc:	00000000 	.word	0x00000000

08009cc0 <hal_ibus_init>:
static uint8_t fail_safe_flag = 0;

/*
 * Main Function
 */
void hal_ibus_init(){
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(IBUS_UART, uart_rx_buffer, 32);
 8009cc4:	2220      	movs	r2, #32
 8009cc6:	4903      	ldr	r1, [pc, #12]	@ (8009cd4 <hal_ibus_init+0x14>)
 8009cc8:	4803      	ldr	r0, [pc, #12]	@ (8009cd8 <hal_ibus_init+0x18>)
 8009cca:	f7fb fc3f 	bl	800554c <HAL_UART_Receive_DMA>
}
 8009cce:	bf00      	nop
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20007aec 	.word	0x20007aec
 8009cd8:	20007f9c 	.word	0x20007f9c

08009cdc <hal_ibus_read>:
void hal_ibus_read(uint16_t* ibus_data){
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
	if(!ibus_is_valid()){
 8009ce4:	f000 f818 	bl	8009d18 <ibus_is_valid>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	f083 0301 	eor.w	r3, r3, #1
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <hal_ibus_read+0x30>
		return false;
	}
	if(!ibus_checksum()){
 8009cf4:	f000 f828 	bl	8009d48 <ibus_checksum>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f083 0301 	eor.w	r3, r3, #1
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d105      	bne.n	8009d10 <hal_ibus_read+0x34>
		return false;
	}
	ibus_update(ibus_data);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f84f 	bl	8009da8 <ibus_update>
	return true;
 8009d0a:	e002      	b.n	8009d12 <hal_ibus_read+0x36>
		return false;
 8009d0c:	bf00      	nop
 8009d0e:	e000      	b.n	8009d12 <hal_ibus_read+0x36>
		return false;
 8009d10:	bf00      	nop
}
 8009d12:	3708      	adds	r7, #8
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <ibus_is_valid>:
/*
 * Helper Functions
 */
bool ibus_is_valid(){
 8009d18:	b480      	push	{r7}
 8009d1a:	af00      	add	r7, sp, #0
	// is it ibus?
	return (uart_rx_buffer[0] == IBUS_LENGTH && uart_rx_buffer[1] == IBUS_COMMAND40);
 8009d1c:	4b09      	ldr	r3, [pc, #36]	@ (8009d44 <ibus_is_valid+0x2c>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b20      	cmp	r3, #32
 8009d22:	d105      	bne.n	8009d30 <ibus_is_valid+0x18>
 8009d24:	4b07      	ldr	r3, [pc, #28]	@ (8009d44 <ibus_is_valid+0x2c>)
 8009d26:	785b      	ldrb	r3, [r3, #1]
 8009d28:	2b40      	cmp	r3, #64	@ 0x40
 8009d2a:	d101      	bne.n	8009d30 <ibus_is_valid+0x18>
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e000      	b.n	8009d32 <ibus_is_valid+0x1a>
 8009d30:	2300      	movs	r3, #0
 8009d32:	f003 0301 	and.w	r3, r3, #1
 8009d36:	b2db      	uxtb	r3, r3
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	20007aec 	.word	0x20007aec

08009d48 <ibus_checksum>:
bool ibus_checksum(){
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
	uint16_t checksum_cal = 0xffff;
 8009d4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d52:	81fb      	strh	r3, [r7, #14]
	uint16_t checksum_ibus;

	for(int i=0; i < 30; i++ ){
 8009d54:	2300      	movs	r3, #0
 8009d56:	60bb      	str	r3, [r7, #8]
 8009d58:	e00a      	b.n	8009d70 <ibus_checksum+0x28>
		checksum_cal -= uart_rx_buffer[i];
 8009d5a:	4a12      	ldr	r2, [pc, #72]	@ (8009da4 <ibus_checksum+0x5c>)
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	4413      	add	r3, r2
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	461a      	mov	r2, r3
 8009d64:	89fb      	ldrh	r3, [r7, #14]
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	81fb      	strh	r3, [r7, #14]
	for(int i=0; i < 30; i++ ){
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	3301      	adds	r3, #1
 8009d6e:	60bb      	str	r3, [r7, #8]
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2b1d      	cmp	r3, #29
 8009d74:	ddf1      	ble.n	8009d5a <ibus_checksum+0x12>
	}
	checksum_ibus = uart_rx_buffer[31] << 8 | uart_rx_buffer[30]; // checksum value from ibus
 8009d76:	4b0b      	ldr	r3, [pc, #44]	@ (8009da4 <ibus_checksum+0x5c>)
 8009d78:	7fdb      	ldrb	r3, [r3, #31]
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	b21a      	sxth	r2, r3
 8009d7e:	4b09      	ldr	r3, [pc, #36]	@ (8009da4 <ibus_checksum+0x5c>)
 8009d80:	7f9b      	ldrb	r3, [r3, #30]
 8009d82:	b21b      	sxth	r3, r3
 8009d84:	4313      	orrs	r3, r2
 8009d86:	b21b      	sxth	r3, r3
 8009d88:	80fb      	strh	r3, [r7, #6]
	return (checksum_ibus == checksum_cal);
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	89fb      	ldrh	r3, [r7, #14]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	bf0c      	ite	eq
 8009d92:	2301      	moveq	r3, #1
 8009d94:	2300      	movne	r3, #0
 8009d96:	b2db      	uxtb	r3, r3
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	20007aec 	.word	0x20007aec

08009da8 <ibus_update>:

void ibus_update(uint16_t* ibus_data){
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index ++, bf_index +=2){
 8009db0:	2300      	movs	r3, #0
 8009db2:	60fb      	str	r3, [r7, #12]
 8009db4:	2302      	movs	r3, #2
 8009db6:	60bb      	str	r3, [r7, #8]
 8009db8:	e018      	b.n	8009dec <ibus_update+0x44>
		ibus_data[ch_index] = uart_rx_buffer[bf_index + 1] << 8| uart_rx_buffer[bf_index];
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	4a10      	ldr	r2, [pc, #64]	@ (8009e00 <ibus_update+0x58>)
 8009dc0:	5cd3      	ldrb	r3, [r2, r3]
 8009dc2:	021b      	lsls	r3, r3, #8
 8009dc4:	b21a      	sxth	r2, r3
 8009dc6:	490e      	ldr	r1, [pc, #56]	@ (8009e00 <ibus_update+0x58>)
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	440b      	add	r3, r1
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	b21b      	sxth	r3, r3
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b219      	sxth	r1, r3
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	687a      	ldr	r2, [r7, #4]
 8009dda:	4413      	add	r3, r2
 8009ddc:	b28a      	uxth	r2, r1
 8009dde:	801a      	strh	r2, [r3, #0]
	for(int ch_index = 0, bf_index = 2; ch_index < IBUS_USER_CHANNELS; ch_index ++, bf_index +=2){
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	3301      	adds	r3, #1
 8009de4:	60fb      	str	r3, [r7, #12]
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	3302      	adds	r3, #2
 8009dea:	60bb      	str	r3, [r7, #8]
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2b05      	cmp	r3, #5
 8009df0:	dde3      	ble.n	8009dba <ibus_update+0x12>
	}
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	20007aec 	.word	0x20007aec

08009e04 <ibus_soft_failsafe>:

// @note FS-A8S don't have fail soft feature, So we make software fail-soft
void ibus_soft_failsafe(uint16_t* ibus_data, uint8_t fail_safe_max){
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
	fail_safe_flag ++;
 8009e10:	4b18      	ldr	r3, [pc, #96]	@ (8009e74 <ibus_soft_failsafe+0x70>)
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	4b16      	ldr	r3, [pc, #88]	@ (8009e74 <ibus_soft_failsafe+0x70>)
 8009e1a:	701a      	strb	r2, [r3, #0]
	if(fail_safe_max > fail_safe_flag){
 8009e1c:	4b15      	ldr	r3, [pc, #84]	@ (8009e74 <ibus_soft_failsafe+0x70>)
 8009e1e:	781b      	ldrb	r3, [r3, #0]
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d820      	bhi.n	8009e68 <ibus_soft_failsafe+0x64>
		return;
	}
	// clear ibus data
	for(int i = 0; i< IBUS_USER_CHANNELS; i++){
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	e008      	b.n	8009e3e <ibus_soft_failsafe+0x3a>
		ibus_data[i] = 0;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	005b      	lsls	r3, r3, #1
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	4413      	add	r3, r2
 8009e34:	2200      	movs	r2, #0
 8009e36:	801a      	strh	r2, [r3, #0]
	for(int i = 0; i< IBUS_USER_CHANNELS; i++){
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	3301      	adds	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2b05      	cmp	r3, #5
 8009e42:	ddf3      	ble.n	8009e2c <ibus_soft_failsafe+0x28>
	}
	// clear ibus buffer
	for(int j=0; j < IBUS_LENGTH; j++){
 8009e44:	2300      	movs	r3, #0
 8009e46:	60bb      	str	r3, [r7, #8]
 8009e48:	e007      	b.n	8009e5a <ibus_soft_failsafe+0x56>
		uart_rx_buffer[j] = 0;
 8009e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8009e78 <ibus_soft_failsafe+0x74>)
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	4413      	add	r3, r2
 8009e50:	2200      	movs	r2, #0
 8009e52:	701a      	strb	r2, [r3, #0]
	for(int j=0; j < IBUS_LENGTH; j++){
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	3301      	adds	r3, #1
 8009e58:	60bb      	str	r3, [r7, #8]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b1f      	cmp	r3, #31
 8009e5e:	ddf4      	ble.n	8009e4a <ibus_soft_failsafe+0x46>
	}
	fail_safe_flag = 0;
 8009e60:	4b04      	ldr	r3, [pc, #16]	@ (8009e74 <ibus_soft_failsafe+0x70>)
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]
	return;
 8009e66:	e000      	b.n	8009e6a <ibus_soft_failsafe+0x66>
		return;
 8009e68:	bf00      	nop
}
 8009e6a:	3714      	adds	r7, #20
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr
 8009e74:	20007b0c 	.word	0x20007b0c
 8009e78:	20007aec 	.word	0x20007aec

08009e7c <ibus_reset_failsafe>:

//@note this function is located in HAL_UART_RxCpltCallback.
void ibus_reset_failsafe(){
 8009e7c:	b480      	push	{r7}
 8009e7e:	af00      	add	r7, sp, #0
	fail_safe_flag = 0; // flag reset
 8009e80:	4b03      	ldr	r3, [pc, #12]	@ (8009e90 <ibus_reset_failsafe+0x14>)
 8009e82:	2200      	movs	r2, #0
 8009e84:	701a      	strb	r2, [r3, #0]
}
 8009e86:	bf00      	nop
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr
 8009e90:	20007b0c 	.word	0x20007b0c

08009e94 <hal_dshot_init>:
static void dshot_enable_dma_request();

/*
 * Functions
 */
void hal_dshot_init(dshot_type dshot_type){
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8009e9e:	79fb      	ldrb	r3, [r7, #7]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 f833 	bl	8009f0c <dshot_set_timer>
	dshot_put_tc_callback_function();
 8009ea6:	f000 f8d1 	bl	800a04c <dshot_put_tc_callback_function>
	// tc tranfer complet = disable dma( if chang to circular mode maybe modify this )
	dshot_start_pwm();
 8009eaa:	f000 f8eb 	bl	800a084 <dshot_start_pwm>
}
 8009eae:	bf00      	nop
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <hal_dshot_write>:

void hal_dshot_write(uint16_t* motor_value){
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b082      	sub	sp, #8
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f95c 	bl	800a17c <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8009ec4:	f000 f986 	bl	800a1d4 <dshot_dma_start>
	dshot_enable_dma_request();
 8009ec8:	f000 f9ba 	bl	800a240 <dshot_enable_dma_request>
//	step_after = 1;
}
 8009ecc:	bf00      	nop
 8009ece:	3708      	adds	r7, #8
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <dshot_choose_type>:
/*
 * Static Functions
 */

static uint32_t dshot_choose_type(dshot_type dshot_type)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b083      	sub	sp, #12
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8009ede:	79fb      	ldrb	r3, [r7, #7]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d003      	beq.n	8009eec <dshot_choose_type+0x18>
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d103      	bne.n	8009ef0 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return dshot600_hz;
 8009ee8:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <dshot_choose_type+0x2c>)
 8009eea:	e002      	b.n	8009ef2 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return dshot300_hz;
 8009eec:	4b05      	ldr	r3, [pc, #20]	@ (8009f04 <dshot_choose_type+0x30>)
 8009eee:	e000      	b.n	8009ef2 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return dshot150_hz;
 8009ef0:	4b05      	ldr	r3, [pc, #20]	@ (8009f08 <dshot_choose_type+0x34>)
	}
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	00b71b00 	.word	0x00b71b00
 8009f04:	005b8d80 	.word	0x005b8d80
 8009f08:	002dc6c0 	.word	0x002dc6c0

08009f0c <dshot_set_timer>:


static void dshot_set_timer(dshot_type dshot_type)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	ed2d 8b02 	vpush	{d8}
 8009f12:	b084      	sub	sp, #16
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	4603      	mov	r3, r0
 8009f18:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8009f1a:	4b27      	ldr	r3, [pc, #156]	@ (8009fb8 <dshot_set_timer+0xac>)
 8009f1c:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	ee07 3a90 	vmov	s15, r3
 8009f24:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009f28:	79fb      	ldrb	r3, [r7, #7]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff ffd2 	bl	8009ed4 <dshot_choose_type>
 8009f30:	ee07 0a90 	vmov	s15, r0
 8009f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f38:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8009f3c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8009fbc <dshot_set_timer+0xb0>
 8009f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f44:	eeb0 0a67 	vmov.f32	s0, s15
 8009f48:	f00e ffc2 	bl	8018ed0 <lrintf>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	3b01      	subs	r3, #1
 8009f52:	817b      	strh	r3, [r7, #10]
	//if we choose dshot600 = 12 Mhz => time clock / 12Mhzh -1 = 6
	// dshot prescalar = 6 and atore load = 20
	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8009f54:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	897a      	ldrh	r2, [r7, #10]
 8009f5a:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8009f5c:	4b18      	ldr	r3, [pc, #96]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	2214      	movs	r2, #20
 8009f62:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009f64:	4b16      	ldr	r3, [pc, #88]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f66:	2214      	movs	r2, #20
 8009f68:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8009f6a:	4b15      	ldr	r3, [pc, #84]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	897a      	ldrh	r2, [r7, #10]
 8009f70:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8009f72:	4b13      	ldr	r3, [pc, #76]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2214      	movs	r2, #20
 8009f78:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009f7a:	4b11      	ldr	r3, [pc, #68]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f7c:	2214      	movs	r2, #20
 8009f7e:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8009f80:	4b0f      	ldr	r3, [pc, #60]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	897a      	ldrh	r2, [r7, #10]
 8009f86:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8009f88:	4b0d      	ldr	r3, [pc, #52]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2214      	movs	r2, #20
 8009f8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009f90:	4b0b      	ldr	r3, [pc, #44]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f92:	2214      	movs	r2, #20
 8009f94:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8009f96:	4b0a      	ldr	r3, [pc, #40]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	897a      	ldrh	r2, [r7, #10]
 8009f9c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8009f9e:	4b08      	ldr	r3, [pc, #32]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2214      	movs	r2, #20
 8009fa4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009fa6:	4b06      	ldr	r3, [pc, #24]	@ (8009fc0 <dshot_set_timer+0xb4>)
 8009fa8:	2214      	movs	r2, #20
 8009faa:	60da      	str	r2, [r3, #12]
}
 8009fac:	bf00      	nop
 8009fae:	3710      	adds	r7, #16
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	ecbd 8b02 	vpop	{d8}
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	0501bd00 	.word	0x0501bd00
 8009fbc:	3c23d70a 	.word	0x3c23d70a
 8009fc0:	20007d8c 	.word	0x20007d8c

08009fc4 <dshot_dma_tc_callback>:


static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fd0:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d108      	bne.n	8009fee <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68da      	ldr	r2, [r3, #12]
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009fea:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8009fec:	e028      	b.n	800a040 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	429a      	cmp	r2, r3
 8009ff6:	d108      	bne.n	800a00a <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	68da      	ldr	r2, [r3, #12]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a006:	60da      	str	r2, [r3, #12]
}
 800a008:	e01a      	b.n	800a040 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	429a      	cmp	r2, r3
 800a012:	d108      	bne.n	800a026 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68da      	ldr	r2, [r3, #12]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a022:	60da      	str	r2, [r3, #12]
}
 800a024:	e00c      	b.n	800a040 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a02a:	687a      	ldr	r2, [r7, #4]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d107      	bne.n	800a040 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a03e:	60da      	str	r2, [r3, #12]
}
 800a040:	bf00      	nop
 800a042:	3714      	adds	r7, #20
 800a044:	46bd      	mov	sp, r7
 800a046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04a:	4770      	bx	lr

0800a04c <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 800a050:	4b0a      	ldr	r3, [pc, #40]	@ (800a07c <dshot_put_tc_callback_function+0x30>)
 800a052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a054:	4a0a      	ldr	r2, [pc, #40]	@ (800a080 <dshot_put_tc_callback_function+0x34>)
 800a056:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800a058:	4b08      	ldr	r3, [pc, #32]	@ (800a07c <dshot_put_tc_callback_function+0x30>)
 800a05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a05c:	4a08      	ldr	r2, [pc, #32]	@ (800a080 <dshot_put_tc_callback_function+0x34>)
 800a05e:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800a060:	4b06      	ldr	r3, [pc, #24]	@ (800a07c <dshot_put_tc_callback_function+0x30>)
 800a062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a064:	4a06      	ldr	r2, [pc, #24]	@ (800a080 <dshot_put_tc_callback_function+0x34>)
 800a066:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 800a068:	4b04      	ldr	r3, [pc, #16]	@ (800a07c <dshot_put_tc_callback_function+0x30>)
 800a06a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a06c:	4a04      	ldr	r2, [pc, #16]	@ (800a080 <dshot_put_tc_callback_function+0x34>)
 800a06e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a070:	bf00      	nop
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20007d8c 	.word	0x20007d8c
 800a080:	08009fc5 	.word	0x08009fc5

0800a084 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800a084:	b580      	push	{r7, lr}
 800a086:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 800a088:	2100      	movs	r1, #0
 800a08a:	4808      	ldr	r0, [pc, #32]	@ (800a0ac <dshot_start_pwm+0x28>)
 800a08c:	f7fa faf8 	bl	8004680 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 800a090:	2104      	movs	r1, #4
 800a092:	4806      	ldr	r0, [pc, #24]	@ (800a0ac <dshot_start_pwm+0x28>)
 800a094:	f7fa faf4 	bl	8004680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 800a098:	2108      	movs	r1, #8
 800a09a:	4804      	ldr	r0, [pc, #16]	@ (800a0ac <dshot_start_pwm+0x28>)
 800a09c:	f7fa faf0 	bl	8004680 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 800a0a0:	210c      	movs	r1, #12
 800a0a2:	4802      	ldr	r0, [pc, #8]	@ (800a0ac <dshot_start_pwm+0x28>)
 800a0a4:	f7fa faec 	bl	8004680 <HAL_TIM_PWM_Start>
}
 800a0a8:	bf00      	nop
 800a0aa:	bd80      	pop	{r7, pc}
 800a0ac:	20007d8c 	.word	0x20007d8c

0800a0b0 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800a0be:	88fb      	ldrh	r3, [r7, #6]
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	b21a      	sxth	r2, r3
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	b21b      	sxth	r3, r3
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	b21b      	sxth	r3, r3
 800a0cc:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet; // if value = 50 => packet = 100
 800a0d2:	893b      	ldrh	r3, [r7, #8]
 800a0d4:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	60fb      	str	r3, [r7, #12]
 800a0da:	e009      	b.n	800a0f0 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 800a0dc:	697a      	ldr	r2, [r7, #20]
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	4053      	eors	r3, r2
 800a0e2:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	091b      	lsrs	r3, r3, #4
 800a0e8:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	3301      	adds	r3, #1
 800a0ee:	60fb      	str	r3, [r7, #12]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	ddf2      	ble.n	800a0dc <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;// 0 1111
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	f003 030f 	and.w	r3, r3, #15
 800a0fc:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 800a0fe:	893b      	ldrh	r3, [r7, #8]
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	b29a      	uxth	r2, r3
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	b29b      	uxth	r3, r3
 800a108:	4313      	orrs	r3, r2
 800a10a:	813b      	strh	r3, [r7, #8]

	return packet;
 800a10c:	893b      	ldrh	r3, [r7, #8]
}
 800a10e:	4618      	mov	r0, r3
 800a110:	371c      	adds	r7, #28
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 800a126:	887b      	ldrh	r3, [r7, #2]
 800a128:	4618      	mov	r0, r3
 800a12a:	f7ff ffc1 	bl	800a0b0 <dshot_prepare_packet>
 800a12e:	4603      	mov	r3, r0
 800a130:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 800a132:	2300      	movs	r3, #0
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	e011      	b.n	800a15c <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 800a138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	da01      	bge.n	800a144 <dshot_prepare_dmabuffer+0x2a>
 800a140:	220e      	movs	r2, #14
 800a142:	e000      	b.n	800a146 <dshot_prepare_dmabuffer+0x2c>
 800a144:	2207      	movs	r2, #7
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	6879      	ldr	r1, [r7, #4]
 800a14c:	440b      	add	r3, r1
 800a14e:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 800a150:	89fb      	ldrh	r3, [r7, #14]
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	3301      	adds	r3, #1
 800a15a:	60bb      	str	r3, [r7, #8]
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	2b0f      	cmp	r3, #15
 800a160:	ddea      	ble.n	800a138 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3340      	adds	r3, #64	@ 0x40
 800a166:	2200      	movs	r2, #0
 800a168:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3344      	adds	r3, #68	@ 0x44
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}
	...

0800a17c <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	4619      	mov	r1, r3
 800a18a:	480e      	ldr	r0, [pc, #56]	@ (800a1c4 <dshot_prepare_dmabuffer_all+0x48>)
 800a18c:	f7ff ffc5 	bl	800a11a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3302      	adds	r3, #2
 800a194:	881b      	ldrh	r3, [r3, #0]
 800a196:	4619      	mov	r1, r3
 800a198:	480b      	ldr	r0, [pc, #44]	@ (800a1c8 <dshot_prepare_dmabuffer_all+0x4c>)
 800a19a:	f7ff ffbe 	bl	800a11a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	881b      	ldrh	r3, [r3, #0]
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	4809      	ldr	r0, [pc, #36]	@ (800a1cc <dshot_prepare_dmabuffer_all+0x50>)
 800a1a8:	f7ff ffb7 	bl	800a11a <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	3306      	adds	r3, #6
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4806      	ldr	r0, [pc, #24]	@ (800a1d0 <dshot_prepare_dmabuffer_all+0x54>)
 800a1b6:	f7ff ffb0 	bl	800a11a <dshot_prepare_dmabuffer>
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20007b10 	.word	0x20007b10
 800a1c8:	20007b58 	.word	0x20007b58
 800a1cc:	20007ba0 	.word	0x20007ba0
 800a1d0:	20007be8 	.word	0x20007be8

0800a1d4 <dshot_dma_start>:

static void dshot_dma_start()
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 800a1d8:	4b14      	ldr	r3, [pc, #80]	@ (800a22c <dshot_dma_start+0x58>)
 800a1da:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a1dc:	4914      	ldr	r1, [pc, #80]	@ (800a230 <dshot_dma_start+0x5c>)
 800a1de:	4b13      	ldr	r3, [pc, #76]	@ (800a22c <dshot_dma_start+0x58>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	3334      	adds	r3, #52	@ 0x34
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	2312      	movs	r3, #18
 800a1e8:	f7f7 f96c 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 800a1ec:	4b0f      	ldr	r3, [pc, #60]	@ (800a22c <dshot_dma_start+0x58>)
 800a1ee:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800a1f0:	4910      	ldr	r1, [pc, #64]	@ (800a234 <dshot_dma_start+0x60>)
 800a1f2:	4b0e      	ldr	r3, [pc, #56]	@ (800a22c <dshot_dma_start+0x58>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	3338      	adds	r3, #56	@ 0x38
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	2312      	movs	r3, #18
 800a1fc:	f7f7 f962 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 800a200:	4b0a      	ldr	r3, [pc, #40]	@ (800a22c <dshot_dma_start+0x58>)
 800a202:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800a204:	490c      	ldr	r1, [pc, #48]	@ (800a238 <dshot_dma_start+0x64>)
 800a206:	4b09      	ldr	r3, [pc, #36]	@ (800a22c <dshot_dma_start+0x58>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	333c      	adds	r3, #60	@ 0x3c
 800a20c:	461a      	mov	r2, r3
 800a20e:	2312      	movs	r3, #18
 800a210:	f7f7 f958 	bl	80014c4 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 800a214:	4b05      	ldr	r3, [pc, #20]	@ (800a22c <dshot_dma_start+0x58>)
 800a216:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800a218:	4908      	ldr	r1, [pc, #32]	@ (800a23c <dshot_dma_start+0x68>)
 800a21a:	4b04      	ldr	r3, [pc, #16]	@ (800a22c <dshot_dma_start+0x58>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	3340      	adds	r3, #64	@ 0x40
 800a220:	461a      	mov	r2, r3
 800a222:	2312      	movs	r3, #18
 800a224:	f7f7 f94e 	bl	80014c4 <HAL_DMA_Start_IT>
}
 800a228:	bf00      	nop
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	20007d8c 	.word	0x20007d8c
 800a230:	20007b10 	.word	0x20007b10
 800a234:	20007b58 	.word	0x20007b58
 800a238:	20007ba0 	.word	0x20007ba0
 800a23c:	20007be8 	.word	0x20007be8

0800a240 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC1);
 800a244:	4b12      	ldr	r3, [pc, #72]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	68da      	ldr	r2, [r3, #12]
 800a24a:	4b11      	ldr	r3, [pc, #68]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a252:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC2);
 800a254:	4b0e      	ldr	r3, [pc, #56]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68da      	ldr	r2, [r3, #12]
 800a25a:	4b0d      	ldr	r3, [pc, #52]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a262:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC3);
 800a264:	4b0a      	ldr	r3, [pc, #40]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68da      	ldr	r2, [r3, #12]
 800a26a:	4b09      	ldr	r3, [pc, #36]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a272:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC4);
 800a274:	4b06      	ldr	r3, [pc, #24]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68da      	ldr	r2, [r3, #12]
 800a27a:	4b05      	ldr	r3, [pc, #20]	@ (800a290 <dshot_enable_dma_request+0x50>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a282:	60da      	str	r2, [r3, #12]
}
 800a284:	bf00      	nop
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20007d8c 	.word	0x20007d8c

0800a294 <GPIO_Init>:
 *      Author: AI FARM
 */

#include "gpio_drv.h"

void GPIO_Init(void){
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	4b17      	ldr	r3, [pc, #92]	@ (800a2fc <GPIO_Init+0x68>)
 800a2a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a2:	4a16      	ldr	r2, [pc, #88]	@ (800a2fc <GPIO_Init+0x68>)
 800a2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2a8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a2aa:	4b14      	ldr	r3, [pc, #80]	@ (800a2fc <GPIO_Init+0x68>)
 800a2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60bb      	str	r3, [r7, #8]
 800a2ba:	4b10      	ldr	r3, [pc, #64]	@ (800a2fc <GPIO_Init+0x68>)
 800a2bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2be:	4a0f      	ldr	r2, [pc, #60]	@ (800a2fc <GPIO_Init+0x68>)
 800a2c0:	f043 0304 	orr.w	r3, r3, #4
 800a2c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a2c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a2fc <GPIO_Init+0x68>)
 800a2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2ca:	f003 0304 	and.w	r3, r3, #4
 800a2ce:	60bb      	str	r3, [r7, #8]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	607b      	str	r3, [r7, #4]
 800a2d6:	4b09      	ldr	r3, [pc, #36]	@ (800a2fc <GPIO_Init+0x68>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2da:	4a08      	ldr	r2, [pc, #32]	@ (800a2fc <GPIO_Init+0x68>)
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a2e2:	4b06      	ldr	r3, [pc, #24]	@ (800a2fc <GPIO_Init+0x68>)
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	607b      	str	r3, [r7, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
}
 800a2ee:	bf00      	nop
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	40023800 	.word	0x40023800

0800a300 <I2C1_Init>:
#include "i2c_drv.h"

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
void I2C1_Init(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 800a304:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <I2C1_Init+0x50>)
 800a306:	4a13      	ldr	r2, [pc, #76]	@ (800a354 <I2C1_Init+0x54>)
 800a308:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800a30a:	4b11      	ldr	r3, [pc, #68]	@ (800a350 <I2C1_Init+0x50>)
 800a30c:	4a12      	ldr	r2, [pc, #72]	@ (800a358 <I2C1_Init+0x58>)
 800a30e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a310:	4b0f      	ldr	r3, [pc, #60]	@ (800a350 <I2C1_Init+0x50>)
 800a312:	2200      	movs	r2, #0
 800a314:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800a316:	4b0e      	ldr	r3, [pc, #56]	@ (800a350 <I2C1_Init+0x50>)
 800a318:	2200      	movs	r2, #0
 800a31a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a31c:	4b0c      	ldr	r3, [pc, #48]	@ (800a350 <I2C1_Init+0x50>)
 800a31e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a322:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a324:	4b0a      	ldr	r3, [pc, #40]	@ (800a350 <I2C1_Init+0x50>)
 800a326:	2200      	movs	r2, #0
 800a328:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800a32a:	4b09      	ldr	r3, [pc, #36]	@ (800a350 <I2C1_Init+0x50>)
 800a32c:	2200      	movs	r2, #0
 800a32e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a330:	4b07      	ldr	r3, [pc, #28]	@ (800a350 <I2C1_Init+0x50>)
 800a332:	2200      	movs	r2, #0
 800a334:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a336:	4b06      	ldr	r3, [pc, #24]	@ (800a350 <I2C1_Init+0x50>)
 800a338:	2200      	movs	r2, #0
 800a33a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800a33c:	4804      	ldr	r0, [pc, #16]	@ (800a350 <I2C1_Init+0x50>)
 800a33e:	f7f7 fd75 	bl	8001e2c <HAL_I2C_Init>
 800a342:	4603      	mov	r3, r0
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <I2C1_Init+0x4c>
		Error_Handler();
 800a348:	f7fe feaa 	bl	80090a0 <Error_Handler>
	}

}
 800a34c:	bf00      	nop
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20007c30 	.word	0x20007c30
 800a354:	40005400 	.word	0x40005400
 800a358:	00061a80 	.word	0x00061a80

0800a35c <I2C2_Init>:
void I2C2_Init(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 800a360:	4b12      	ldr	r3, [pc, #72]	@ (800a3ac <I2C2_Init+0x50>)
 800a362:	4a13      	ldr	r2, [pc, #76]	@ (800a3b0 <I2C2_Init+0x54>)
 800a364:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800a366:	4b11      	ldr	r3, [pc, #68]	@ (800a3ac <I2C2_Init+0x50>)
 800a368:	4a12      	ldr	r2, [pc, #72]	@ (800a3b4 <I2C2_Init+0x58>)
 800a36a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a36c:	4b0f      	ldr	r3, [pc, #60]	@ (800a3ac <I2C2_Init+0x50>)
 800a36e:	2200      	movs	r2, #0
 800a370:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a372:	4b0e      	ldr	r3, [pc, #56]	@ (800a3ac <I2C2_Init+0x50>)
 800a374:	2200      	movs	r2, #0
 800a376:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a378:	4b0c      	ldr	r3, [pc, #48]	@ (800a3ac <I2C2_Init+0x50>)
 800a37a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800a37e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a380:	4b0a      	ldr	r3, [pc, #40]	@ (800a3ac <I2C2_Init+0x50>)
 800a382:	2200      	movs	r2, #0
 800a384:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a386:	4b09      	ldr	r3, [pc, #36]	@ (800a3ac <I2C2_Init+0x50>)
 800a388:	2200      	movs	r2, #0
 800a38a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a38c:	4b07      	ldr	r3, [pc, #28]	@ (800a3ac <I2C2_Init+0x50>)
 800a38e:	2200      	movs	r2, #0
 800a390:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a392:	4b06      	ldr	r3, [pc, #24]	@ (800a3ac <I2C2_Init+0x50>)
 800a394:	2200      	movs	r2, #0
 800a396:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a398:	4804      	ldr	r0, [pc, #16]	@ (800a3ac <I2C2_Init+0x50>)
 800a39a:	f7f7 fd47 	bl	8001e2c <HAL_I2C_Init>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <I2C2_Init+0x4c>
  {
    Error_Handler();
 800a3a4:	f7fe fe7c 	bl	80090a0 <Error_Handler>
  }

}
 800a3a8:	bf00      	nop
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	20007c84 	.word	0x20007c84
 800a3b0:	40005800 	.word	0x40005800
 800a3b4:	00061a80 	.word	0x00061a80

0800a3b8 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	@ 0x30
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3c0:	f107 031c 	add.w	r3, r7, #28
 800a3c4:	2200      	movs	r2, #0
 800a3c6:	601a      	str	r2, [r3, #0]
 800a3c8:	605a      	str	r2, [r3, #4]
 800a3ca:	609a      	str	r2, [r3, #8]
 800a3cc:	60da      	str	r2, [r3, #12]
 800a3ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a32      	ldr	r2, [pc, #200]	@ (800a4a0 <HAL_I2C_MspInit+0xe8>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d12b      	bne.n	800a432 <HAL_I2C_MspInit+0x7a>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
 800a3de:	4b31      	ldr	r3, [pc, #196]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a3e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3e2:	4a30      	ldr	r2, [pc, #192]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a3e4:	f043 0302 	orr.w	r3, r3, #2
 800a3e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3ea:	4b2e      	ldr	r3, [pc, #184]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a3ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ee:	f003 0302 	and.w	r3, r3, #2
 800a3f2:	61bb      	str	r3, [r7, #24]
 800a3f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a3f6:	23c0      	movs	r3, #192	@ 0xc0
 800a3f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a3fa:	2312      	movs	r3, #18
 800a3fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3fe:	2300      	movs	r3, #0
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a402:	2303      	movs	r3, #3
 800a404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a406:	2304      	movs	r3, #4
 800a408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a40a:	f107 031c 	add.w	r3, r7, #28
 800a40e:	4619      	mov	r1, r3
 800a410:	4825      	ldr	r0, [pc, #148]	@ (800a4a8 <HAL_I2C_MspInit+0xf0>)
 800a412:	f7f7 fb3b 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a416:	2300      	movs	r3, #0
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	4b22      	ldr	r3, [pc, #136]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a41c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41e:	4a21      	ldr	r2, [pc, #132]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a420:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a424:	6413      	str	r3, [r2, #64]	@ 0x40
 800a426:	4b1f      	ldr	r3, [pc, #124]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	697b      	ldr	r3, [r7, #20]

  }
  if(i2cHandle->Instance==I2C2)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a1d      	ldr	r2, [pc, #116]	@ (800a4ac <HAL_I2C_MspInit+0xf4>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d12c      	bne.n	800a496 <HAL_I2C_MspInit+0xde>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a43c:	2300      	movs	r3, #0
 800a43e:	613b      	str	r3, [r7, #16]
 800a440:	4b18      	ldr	r3, [pc, #96]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a444:	4a17      	ldr	r2, [pc, #92]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a446:	f043 0302 	orr.w	r3, r3, #2
 800a44a:	6313      	str	r3, [r2, #48]	@ 0x30
 800a44c:	4b15      	ldr	r3, [pc, #84]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a44e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	613b      	str	r3, [r7, #16]
 800a456:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a458:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a45c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a45e:	2312      	movs	r3, #18
 800a460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a462:	2300      	movs	r3, #0
 800a464:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a466:	2303      	movs	r3, #3
 800a468:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a46a:	2304      	movs	r3, #4
 800a46c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a46e:	f107 031c 	add.w	r3, r7, #28
 800a472:	4619      	mov	r1, r3
 800a474:	480c      	ldr	r0, [pc, #48]	@ (800a4a8 <HAL_I2C_MspInit+0xf0>)
 800a476:	f7f7 fb09 	bl	8001a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a47a:	2300      	movs	r3, #0
 800a47c:	60fb      	str	r3, [r7, #12]
 800a47e:	4b09      	ldr	r3, [pc, #36]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a482:	4a08      	ldr	r2, [pc, #32]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a484:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a488:	6413      	str	r3, [r2, #64]	@ 0x40
 800a48a:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <HAL_I2C_MspInit+0xec>)
 800a48c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a48e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	68fb      	ldr	r3, [r7, #12]

  }
}
 800a496:	bf00      	nop
 800a498:	3730      	adds	r7, #48	@ 0x30
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	40005400 	.word	0x40005400
 800a4a4:	40023800 	.word	0x40023800
 800a4a8:	40020400 	.word	0x40020400
 800a4ac:	40005800 	.word	0x40005800

0800a4b0 <i2cdevReadReg16>:
#include "i2cdev.h"
#include "stdbool.h"


bool i2cdevReadReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b08a      	sub	sp, #40	@ 0x28
 800a4b4:	af04      	add	r7, sp, #16
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	4608      	mov	r0, r1
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	461a      	mov	r2, r3
 800a4be:	4603      	mov	r3, r0
 800a4c0:	72fb      	strb	r3, [r7, #11]
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	813b      	strh	r3, [r7, #8]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800a4ca:	7afb      	ldrb	r3, [r7, #11]
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	005b      	lsls	r3, r3, #1
 800a4d0:	b299      	uxth	r1, r3
 800a4d2:	893a      	ldrh	r2, [r7, #8]
 800a4d4:	2364      	movs	r3, #100	@ 0x64
 800a4d6:	9302      	str	r3, [sp, #8]
 800a4d8:	88fb      	ldrh	r3, [r7, #6]
 800a4da:	9301      	str	r3, [sp, #4]
 800a4dc:	6a3b      	ldr	r3, [r7, #32]
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	2310      	movs	r3, #16
 800a4e2:	4807      	ldr	r0, [pc, #28]	@ (800a500 <i2cdevReadReg16+0x50>)
 800a4e4:	f7f7 fee0 	bl	80022a8 <HAL_I2C_Mem_Read>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <i2cdevReadReg16+0x46>
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e000      	b.n	800a4f8 <i2cdevReadReg16+0x48>
	else return false;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20007c84 	.word	0x20007c84

0800a504 <i2cdevWriteReg16>:
bool i2cdevWriteReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b08a      	sub	sp, #40	@ 0x28
 800a508:	af04      	add	r7, sp, #16
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	4608      	mov	r0, r1
 800a50e:	4611      	mov	r1, r2
 800a510:	461a      	mov	r2, r3
 800a512:	4603      	mov	r3, r0
 800a514:	72fb      	strb	r3, [r7, #11]
 800a516:	460b      	mov	r3, r1
 800a518:	813b      	strh	r3, [r7, #8]
 800a51a:	4613      	mov	r3, r2
 800a51c:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800a51e:	7afb      	ldrb	r3, [r7, #11]
 800a520:	b29b      	uxth	r3, r3
 800a522:	005b      	lsls	r3, r3, #1
 800a524:	b299      	uxth	r1, r3
 800a526:	893a      	ldrh	r2, [r7, #8]
 800a528:	2364      	movs	r3, #100	@ 0x64
 800a52a:	9302      	str	r3, [sp, #8]
 800a52c:	88fb      	ldrh	r3, [r7, #6]
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	6a3b      	ldr	r3, [r7, #32]
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	2310      	movs	r3, #16
 800a536:	4807      	ldr	r0, [pc, #28]	@ (800a554 <i2cdevWriteReg16+0x50>)
 800a538:	f7f7 fdbc 	bl	80020b4 <HAL_I2C_Mem_Write>
 800a53c:	4603      	mov	r3, r0
 800a53e:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800a540:	7dfb      	ldrb	r3, [r7, #23]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d101      	bne.n	800a54a <i2cdevWriteReg16+0x46>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <i2cdevWriteReg16+0x48>
	else return false;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}
 800a554:	20007c84 	.word	0x20007c84

0800a558 <ledInit>:

static bool isInit;


void ledInit()
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b086      	sub	sp, #24
 800a55c:	af00      	add	r7, sp, #0

	if (isInit)
 800a55e:	4b1a      	ldr	r3, [pc, #104]	@ (800a5c8 <ledInit+0x70>)
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d12c      	bne.n	800a5c0 <ledInit+0x68>
		return;
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800a566:	1d3b      	adds	r3, r7, #4
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	605a      	str	r2, [r3, #4]
 800a56e:	609a      	str	r2, [r3, #8]
 800a570:	60da      	str	r2, [r3, #12]
 800a572:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800a574:	2300      	movs	r3, #0
 800a576:	603b      	str	r3, [r7, #0]
 800a578:	4b14      	ldr	r3, [pc, #80]	@ (800a5cc <ledInit+0x74>)
 800a57a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a57c:	4a13      	ldr	r2, [pc, #76]	@ (800a5cc <ledInit+0x74>)
 800a57e:	f043 0304 	orr.w	r3, r3, #4
 800a582:	6313      	str	r3, [r2, #48]	@ 0x30
 800a584:	4b11      	ldr	r3, [pc, #68]	@ (800a5cc <ledInit+0x74>)
 800a586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 800a590:	2200      	movs	r2, #0
 800a592:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a596:	480e      	ldr	r0, [pc, #56]	@ (800a5d0 <ledInit+0x78>)
 800a598:	f7f7 fc14 	bl	8001dc4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LED_PIN;
 800a59c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a5a0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 800a5ae:	1d3b      	adds	r3, r7, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4807      	ldr	r0, [pc, #28]	@ (800a5d0 <ledInit+0x78>)
 800a5b4:	f7f7 fa6a 	bl	8001a8c <HAL_GPIO_Init>

	isInit = true;
 800a5b8:	4b03      	ldr	r3, [pc, #12]	@ (800a5c8 <ledInit+0x70>)
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e000      	b.n	800a5c2 <ledInit+0x6a>
		return;
 800a5c0:	bf00      	nop
}
 800a5c2:	3718      	adds	r7, #24
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20007cd8 	.word	0x20007cd8
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	40020800 	.word	0x40020800

0800a5d4 <ledSet>:


void ledSet(bool value)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	71fb      	strb	r3, [r7, #7]
	if ( value == 0 ) HAL_GPIO_WritePin(LED_PORT, LED_PIN, 0);
 800a5de:	79fb      	ldrb	r3, [r7, #7]
 800a5e0:	f083 0301 	eor.w	r3, r3, #1
 800a5e4:	b2db      	uxtb	r3, r3
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d006      	beq.n	800a5f8 <ledSet+0x24>
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a5f0:	4806      	ldr	r0, [pc, #24]	@ (800a60c <ledSet+0x38>)
 800a5f2:	f7f7 fbe7 	bl	8001dc4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);

}
 800a5f6:	e005      	b.n	800a604 <ledSet+0x30>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800a5fe:	4803      	ldr	r0, [pc, #12]	@ (800a60c <ledSet+0x38>)
 800a600:	f7f7 fbe0 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 800a604:	bf00      	nop
 800a606:	3708      	adds	r7, #8
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}
 800a60c:	40020800 	.word	0x40020800

0800a610 <mpu6500TestConnection>:
#include "mpu6500.h"
#include "i2c_drv.h"

uint8_t walk = 0;

bool mpu6500TestConnection() {
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af04      	add	r7, sp, #16
	uint8_t mpuID;
//	walk = 1;//JH
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, WHO_AM_I_REG, 1, &mpuID, 1, 100);
 800a616:	2364      	movs	r3, #100	@ 0x64
 800a618:	9302      	str	r3, [sp, #8]
 800a61a:	2301      	movs	r3, #1
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	1dfb      	adds	r3, r7, #7
 800a620:	9300      	str	r3, [sp, #0]
 800a622:	2301      	movs	r3, #1
 800a624:	2275      	movs	r2, #117	@ 0x75
 800a626:	21d0      	movs	r1, #208	@ 0xd0
 800a628:	4806      	ldr	r0, [pc, #24]	@ (800a644 <mpu6500TestConnection+0x34>)
 800a62a:	f7f7 fe3d 	bl	80022a8 <HAL_I2C_Mem_Read>
//	walk =1;//NJH
	if (mpuID != 0x75)
 800a62e:	79fb      	ldrb	r3, [r7, #7]
 800a630:	2b75      	cmp	r3, #117	@ 0x75
 800a632:	d001      	beq.n	800a638 <mpu6500TestConnection+0x28>
		return false;
 800a634:	2300      	movs	r3, #0
 800a636:	e000      	b.n	800a63a <mpu6500TestConnection+0x2a>
//	walk = 1;//NJH
	return true;
 800a638:	2301      	movs	r3, #1
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3708      	adds	r7, #8
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	20007c30 	.word	0x20007c30

0800a648 <mpu6500SelfTest>:
		//                string, (double)low, (double)high, (double)value);
		return false;
	}
	return true;
}
bool mpu6500SelfTest() {
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
	return true;
 800a64c:	2301      	movs	r3, #1
}
 800a64e:	4618      	mov	r0, r3
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <mpu6500Init>:
void mpu6500Init(void) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af04      	add	r7, sp, #16
	uint8_t data;
	data = 0x00;
 800a65e:	2300      	movs	r3, #0
 800a660:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1,
 800a662:	2364      	movs	r3, #100	@ 0x64
 800a664:	9302      	str	r3, [sp, #8]
 800a666:	2301      	movs	r3, #1
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	1dfb      	adds	r3, r7, #7
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	2301      	movs	r3, #1
 800a670:	226b      	movs	r2, #107	@ 0x6b
 800a672:	21d0      	movs	r1, #208	@ 0xd0
 800a674:	482d      	ldr	r0, [pc, #180]	@ (800a72c <mpu6500Init+0xd4>)
 800a676:	f7f7 fd1d 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(500);
 800a67a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800a67e:	f7fc fe3f 	bl	8007300 <vTaskDelay>
	// Set ACCEL to +-16g, GYRO to +-2000dps
	data = 0x18;
 800a682:	2318      	movs	r3, #24
 800a684:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1,
 800a686:	2364      	movs	r3, #100	@ 0x64
 800a688:	9302      	str	r3, [sp, #8]
 800a68a:	2301      	movs	r3, #1
 800a68c:	9301      	str	r3, [sp, #4]
 800a68e:	1dfb      	adds	r3, r7, #7
 800a690:	9300      	str	r3, [sp, #0]
 800a692:	2301      	movs	r3, #1
 800a694:	221b      	movs	r2, #27
 800a696:	21d0      	movs	r1, #208	@ 0xd0
 800a698:	4824      	ldr	r0, [pc, #144]	@ (800a72c <mpu6500Init+0xd4>)
 800a69a:	f7f7 fd0b 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 800a69e:	200a      	movs	r0, #10
 800a6a0:	f7fc fe2e 	bl	8007300 <vTaskDelay>
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1,
 800a6a4:	2364      	movs	r3, #100	@ 0x64
 800a6a6:	9302      	str	r3, [sp, #8]
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	9301      	str	r3, [sp, #4]
 800a6ac:	1dfb      	adds	r3, r7, #7
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	221c      	movs	r2, #28
 800a6b4:	21d0      	movs	r1, #208	@ 0xd0
 800a6b6:	481d      	ldr	r0, [pc, #116]	@ (800a72c <mpu6500Init+0xd4>)
 800a6b8:	f7f7 fcfc 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 800a6bc:	200a      	movs	r0, #10
 800a6be:	f7fc fe1f 	bl	8007300 <vTaskDelay>
	// Set sampling rate to 1khz
	data = 0x07;
 800a6c2:	2307      	movs	r3, #7
 800a6c4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1,
 800a6c6:	2364      	movs	r3, #100	@ 0x64
 800a6c8:	9302      	str	r3, [sp, #8]
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	9301      	str	r3, [sp, #4]
 800a6ce:	1dfb      	adds	r3, r7, #7
 800a6d0:	9300      	str	r3, [sp, #0]
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	2219      	movs	r2, #25
 800a6d6:	21d0      	movs	r1, #208	@ 0xd0
 800a6d8:	4814      	ldr	r0, [pc, #80]	@ (800a72c <mpu6500Init+0xd4>)
 800a6da:	f7f7 fceb 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);

	vTaskDelay(10);
 800a6de:	200a      	movs	r0, #10
 800a6e0:	f7fc fe0e 	bl	8007300 <vTaskDelay>
	// Set GYRO to 41hz bandwidth
	data = 0x03;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, CONFIG_REG, 1, &data, 1, 100);
 800a6e8:	2364      	movs	r3, #100	@ 0x64
 800a6ea:	9302      	str	r3, [sp, #8]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	9301      	str	r3, [sp, #4]
 800a6f0:	1dfb      	adds	r3, r7, #7
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	221a      	movs	r2, #26
 800a6f8:	21d0      	movs	r1, #208	@ 0xd0
 800a6fa:	480c      	ldr	r0, [pc, #48]	@ (800a72c <mpu6500Init+0xd4>)
 800a6fc:	f7f7 fcda 	bl	80020b4 <HAL_I2C_Mem_Write>

	// Enable data ready interrupt to propagate to interrupt pin
	vTaskDelay(10);
 800a700:	200a      	movs	r0, #10
 800a702:	f7fc fdfd 	bl	8007300 <vTaskDelay>
	data = 0x01;
 800a706:	2301      	movs	r3, #1
 800a708:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, INT_ENABLE_REG, 1, &data, 1,
 800a70a:	2364      	movs	r3, #100	@ 0x64
 800a70c:	9302      	str	r3, [sp, #8]
 800a70e:	2301      	movs	r3, #1
 800a710:	9301      	str	r3, [sp, #4]
 800a712:	1dfb      	adds	r3, r7, #7
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	2301      	movs	r3, #1
 800a718:	2238      	movs	r2, #56	@ 0x38
 800a71a:	21d0      	movs	r1, #208	@ 0xd0
 800a71c:	4803      	ldr	r0, [pc, #12]	@ (800a72c <mpu6500Init+0xd4>)
 800a71e:	f7f7 fcc9 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20007c30 	.word	0x20007c30

0800a730 <mpu6500SetAccelDLPF>:

void mpu6500SetAccelDLPF(uint8_t range) {
 800a730:	b580      	push	{r7, lr}
 800a732:	b086      	sub	sp, #24
 800a734:	af04      	add	r7, sp, #16
 800a736:	4603      	mov	r3, r0
 800a738:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_2_REG, 1, &range, 1,
 800a73a:	2364      	movs	r3, #100	@ 0x64
 800a73c:	9302      	str	r3, [sp, #8]
 800a73e:	2301      	movs	r3, #1
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	1dfb      	adds	r3, r7, #7
 800a744:	9300      	str	r3, [sp, #0]
 800a746:	2301      	movs	r3, #1
 800a748:	221d      	movs	r2, #29
 800a74a:	21d0      	movs	r1, #208	@ 0xd0
 800a74c:	4803      	ldr	r0, [pc, #12]	@ (800a75c <mpu6500SetAccelDLPF+0x2c>)
 800a74e:	f7f7 fcb1 	bl	80020b4 <HAL_I2C_Mem_Write>
			100);
}
 800a752:	bf00      	nop
 800a754:	3708      	adds	r7, #8
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20007c30 	.word	0x20007c30

0800a760 <mpu6500GetAccelGyroData>:
void mpu6500GetAccelGyroData(mpu6500_t *mpu6500TypeDef) {
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af04      	add	r7, sp, #16
 800a766:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
			mpu6500TypeDef->buf, sizeof(mpu6500_t), 100);
 800a768:	687b      	ldr	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
 800a76a:	2264      	movs	r2, #100	@ 0x64
 800a76c:	9202      	str	r2, [sp, #8]
 800a76e:	220e      	movs	r2, #14
 800a770:	9201      	str	r2, [sp, #4]
 800a772:	9300      	str	r3, [sp, #0]
 800a774:	2301      	movs	r3, #1
 800a776:	223b      	movs	r2, #59	@ 0x3b
 800a778:	21d0      	movs	r1, #208	@ 0xd0
 800a77a:	4803      	ldr	r0, [pc, #12]	@ (800a788 <mpu6500GetAccelGyroData+0x28>)
 800a77c:	f7f7 fd94 	bl	80022a8 <HAL_I2C_Mem_Read>
}
 800a780:	bf00      	nop
 800a782:	3708      	adds	r7, #8
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	20007c30 	.word	0x20007c30

0800a78c <mpu6500GetMotion6>:
void mpu6500GetMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx,
		int16_t *gy, int16_t *gz) {
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b08c      	sub	sp, #48	@ 0x30
 800a790:	af04      	add	r7, sp, #16
 800a792:	60f8      	str	r0, [r7, #12]
 800a794:	60b9      	str	r1, [r7, #8]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	603b      	str	r3, [r7, #0]
	uint8_t buf[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1, buf, 14,
 800a79a:	2364      	movs	r3, #100	@ 0x64
 800a79c:	9302      	str	r3, [sp, #8]
 800a79e:	230e      	movs	r3, #14
 800a7a0:	9301      	str	r3, [sp, #4]
 800a7a2:	f107 0310 	add.w	r3, r7, #16
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	223b      	movs	r2, #59	@ 0x3b
 800a7ac:	21d0      	movs	r1, #208	@ 0xd0
 800a7ae:	481e      	ldr	r0, [pc, #120]	@ (800a828 <mpu6500GetMotion6+0x9c>)
 800a7b0:	f7f7 fd7a 	bl	80022a8 <HAL_I2C_Mem_Read>
			100);
	*ax = (((int16_t) buf[0]) << 8) | buf[1];
 800a7b4:	7c3b      	ldrb	r3, [r7, #16]
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	b21a      	sxth	r2, r3
 800a7ba:	7c7b      	ldrb	r3, [r7, #17]
 800a7bc:	b21b      	sxth	r3, r3
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	b21a      	sxth	r2, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	801a      	strh	r2, [r3, #0]
	*ay = (((int16_t) buf[2]) << 8) | buf[3];
 800a7c6:	7cbb      	ldrb	r3, [r7, #18]
 800a7c8:	021b      	lsls	r3, r3, #8
 800a7ca:	b21a      	sxth	r2, r3
 800a7cc:	7cfb      	ldrb	r3, [r7, #19]
 800a7ce:	b21b      	sxth	r3, r3
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	b21a      	sxth	r2, r3
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	801a      	strh	r2, [r3, #0]
	*az = (((int16_t) buf[4]) << 8) | buf[5];
 800a7d8:	7d3b      	ldrb	r3, [r7, #20]
 800a7da:	021b      	lsls	r3, r3, #8
 800a7dc:	b21a      	sxth	r2, r3
 800a7de:	7d7b      	ldrb	r3, [r7, #21]
 800a7e0:	b21b      	sxth	r3, r3
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	b21a      	sxth	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	801a      	strh	r2, [r3, #0]
	*gx = (((int16_t) buf[8]) << 8) | buf[9];
 800a7ea:	7e3b      	ldrb	r3, [r7, #24]
 800a7ec:	021b      	lsls	r3, r3, #8
 800a7ee:	b21a      	sxth	r2, r3
 800a7f0:	7e7b      	ldrb	r3, [r7, #25]
 800a7f2:	b21b      	sxth	r3, r3
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	b21a      	sxth	r2, r3
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	801a      	strh	r2, [r3, #0]
	*gy = (((int16_t) buf[10]) << 8) | buf[11];
 800a7fc:	7ebb      	ldrb	r3, [r7, #26]
 800a7fe:	021b      	lsls	r3, r3, #8
 800a800:	b21a      	sxth	r2, r3
 800a802:	7efb      	ldrb	r3, [r7, #27]
 800a804:	b21b      	sxth	r3, r3
 800a806:	4313      	orrs	r3, r2
 800a808:	b21a      	sxth	r2, r3
 800a80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a80c:	801a      	strh	r2, [r3, #0]
	*gz = (((int16_t) buf[12]) << 8) | buf[13];
 800a80e:	7f3b      	ldrb	r3, [r7, #28]
 800a810:	021b      	lsls	r3, r3, #8
 800a812:	b21a      	sxth	r2, r3
 800a814:	7f7b      	ldrb	r3, [r7, #29]
 800a816:	b21b      	sxth	r3, r3
 800a818:	4313      	orrs	r3, r2
 800a81a:	b21a      	sxth	r2, r3
 800a81c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a81e:	801a      	strh	r2, [r3, #0]
}
 800a820:	bf00      	nop
 800a822:	3720      	adds	r7, #32
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	20007c30 	.word	0x20007c30

0800a82c <nvicInit>:
extern DMA_HandleTypeDef hdma_usart1_rx;

#define DONT_DISCARD __attribute__((used))

void nvicInit(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
//  NVIC_PriorityGroupConfig((uint32_t)0x300);
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 */
extern void tickFreeRTOS(void);

void DONT_DISCARD SysTick_Handler(void)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	af00      	add	r7, sp, #0
    tickFreeRTOS();
 800a83e:	f7fe f91b 	bl	8008a78 <tickFreeRTOS>
}
 800a842:	bf00      	nop
 800a844:	bd80      	pop	{r7, pc}

0800a846 <NMI_Handler>:

/**
  * @brief  This function handles NMI exception.
  */
void DONT_DISCARD NMI_Handler(void)
{
 800a846:	b480      	push	{r7}
 800a848:	af00      	add	r7, sp, #0
}
 800a84a:	bf00      	nop
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr

0800a854 <HardFault_Handler>:

/**
 * @brief  This function handles Hard Fault exception.
 */
void DONT_DISCARD HardFault_Handler(void)
{
 800a854:	b480      	push	{r7}
 800a856:	af00      	add	r7, sp, #0
  //To test this application, you can use this snippet anywhere:
  // //Let's crash the MCU!
  // asm (" MOVS r0, #1 \n"
  // " LDM r0,{r1-r2} \n"
  // " BX LR; \n");
  asm( "TST LR, #4 \n"
 800a858:	f01e 0f04 	tst.w	lr, #4
 800a85c:	bf0c      	ite	eq
 800a85e:	f3ef 8008 	mrseq	r0, MSP
 800a862:	f3ef 8009 	mrsne	r0, PSP
 800a866:	f000 b805 	b.w	800a874 <printHardFault>
  "ITE EQ \n"
  "MRSEQ R0, MSP \n"
  "MRSNE R0, PSP \n"
  "B printHardFault");
}
 800a86a:	bf00      	nop
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr

0800a874 <printHardFault>:

void DONT_DISCARD printHardFault(uint32_t* hardfaultArgs)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
//    stacked_r3,
//    stacked_r12,
//    stacked_lr,
//    stacked_pc,
//    stacked_psr);
  while (1)
 800a87c:	bf00      	nop
 800a87e:	e7fd      	b.n	800a87c <printHardFault+0x8>

0800a880 <BusFault_Handler>:

/**
 * @brief  This function handles Bus Fault exception.
 */
void DONT_DISCARD BusFault_Handler(void)
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("BusFault");
  while (1)
 800a884:	bf00      	nop
 800a886:	e7fd      	b.n	800a884 <BusFault_Handler+0x4>

0800a888 <UsageFault_Handler>:

/**
 * @brief  This function handles Usage Fault exception.
 */
void DONT_DISCARD UsageFault_Handler(void)
{
 800a888:	b480      	push	{r7}
 800a88a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("UsageFault");
  while (1)
 800a88c:	bf00      	nop
 800a88e:	e7fd      	b.n	800a88c <UsageFault_Handler+0x4>

0800a890 <DebugMon_Handler>:

/**
 * @brief  This function handles Debug Monitor exception.
 */
void DONT_DISCARD DebugMon_Handler(void)
{
 800a890:	b480      	push	{r7}
 800a892:	af00      	add	r7, sp, #0
}
 800a894:	bf00      	nop
 800a896:	46bd      	mov	sp, r7
 800a898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89c:	4770      	bx	lr
	...

0800a8a0 <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 800a8a4:	4802      	ldr	r0, [pc, #8]	@ (800a8b0 <DMA1_Stream2_IRQHandler+0x10>)
 800a8a6:	f7f6 fe87 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800a8aa:	bf00      	nop
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	20007ef4 	.word	0x20007ef4

0800a8b4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 800a8b8:	4802      	ldr	r0, [pc, #8]	@ (800a8c4 <DMA1_Stream4_IRQHandler+0x10>)
 800a8ba:	f7f6 fe7d 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800a8be:	bf00      	nop
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20007dd4 	.word	0x20007dd4

0800a8c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800a8cc:	4802      	ldr	r0, [pc, #8]	@ (800a8d8 <DMA1_Stream5_IRQHandler+0x10>)
 800a8ce:	f7f6 fe73 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800a8d2:	bf00      	nop
 800a8d4:	bd80      	pop	{r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	20007e34 	.word	0x20007e34

0800a8dc <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_tim3_ch3);
 800a8e0:	4802      	ldr	r0, [pc, #8]	@ (800a8ec <DMA1_Stream7_IRQHandler+0x10>)
 800a8e2:	f7f6 fe69 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800a8e6:	bf00      	nop
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20007e94 	.word	0x20007e94

0800a8f0 <TIM4_IRQHandler>:


void TIM4_IRQHandler(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim4);
 800a8f4:	4802      	ldr	r0, [pc, #8]	@ (800a900 <TIM4_IRQHandler+0x10>)
 800a8f6:	f7f9 ff8b 	bl	8004810 <HAL_TIM_IRQHandler>
}
 800a8fa:	bf00      	nop
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20007f54 	.word	0x20007f54

0800a904 <DMA2_Stream2_IRQHandler>:


void DMA2_Stream2_IRQHandler(void) {
 800a904:	b580      	push	{r7, lr}
 800a906:	af00      	add	r7, sp, #0
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a908:	4802      	ldr	r0, [pc, #8]	@ (800a914 <DMA2_Stream2_IRQHandler+0x10>)
 800a90a:	f7f6 fe55 	bl	80015b8 <HAL_DMA_IRQHandler>
}
 800a90e:	bf00      	nop
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20007fe4 	.word	0x20007fe4

0800a918 <TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch4_up;

TIM_HandleTypeDef htim4;

void TIM3_Init(void)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b08a      	sub	sp, #40	@ 0x28
 800a91c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a91e:	f107 0320 	add.w	r3, r7, #32
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a928:	1d3b      	adds	r3, r7, #4
 800a92a:	2200      	movs	r2, #0
 800a92c:	601a      	str	r2, [r3, #0]
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	609a      	str	r2, [r3, #8]
 800a932:	60da      	str	r2, [r3, #12]
 800a934:	611a      	str	r2, [r3, #16]
 800a936:	615a      	str	r2, [r3, #20]
 800a938:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a93a:	4b32      	ldr	r3, [pc, #200]	@ (800aa04 <TIM3_Init+0xec>)
 800a93c:	4a32      	ldr	r2, [pc, #200]	@ (800aa08 <TIM3_Init+0xf0>)
 800a93e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800a940:	4b30      	ldr	r3, [pc, #192]	@ (800aa04 <TIM3_Init+0xec>)
 800a942:	2200      	movs	r2, #0
 800a944:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a946:	4b2f      	ldr	r3, [pc, #188]	@ (800aa04 <TIM3_Init+0xec>)
 800a948:	2200      	movs	r2, #0
 800a94a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800a94c:	4b2d      	ldr	r3, [pc, #180]	@ (800aa04 <TIM3_Init+0xec>)
 800a94e:	2200      	movs	r2, #0
 800a950:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a952:	4b2c      	ldr	r3, [pc, #176]	@ (800aa04 <TIM3_Init+0xec>)
 800a954:	2200      	movs	r2, #0
 800a956:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a958:	4b2a      	ldr	r3, [pc, #168]	@ (800aa04 <TIM3_Init+0xec>)
 800a95a:	2200      	movs	r2, #0
 800a95c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800a95e:	4829      	ldr	r0, [pc, #164]	@ (800aa04 <TIM3_Init+0xec>)
 800a960:	f7f9 fe3e 	bl	80045e0 <HAL_TIM_PWM_Init>
 800a964:	4603      	mov	r3, r0
 800a966:	2b00      	cmp	r3, #0
 800a968:	d001      	beq.n	800a96e <TIM3_Init+0x56>
  {
    Error_Handler();
 800a96a:	f7fe fb99 	bl	80090a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a96e:	2300      	movs	r3, #0
 800a970:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a972:	2300      	movs	r3, #0
 800a974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a976:	f107 0320 	add.w	r3, r7, #32
 800a97a:	4619      	mov	r1, r3
 800a97c:	4821      	ldr	r0, [pc, #132]	@ (800aa04 <TIM3_Init+0xec>)
 800a97e:	f7fa fd05 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 800a982:	4603      	mov	r3, r0
 800a984:	2b00      	cmp	r3, #0
 800a986:	d001      	beq.n	800a98c <TIM3_Init+0x74>
  {
    Error_Handler();
 800a988:	f7fe fb8a 	bl	80090a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a98c:	2360      	movs	r3, #96	@ 0x60
 800a98e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a990:	2300      	movs	r3, #0
 800a992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a994:	2300      	movs	r3, #0
 800a996:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a998:	2300      	movs	r3, #0
 800a99a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a99c:	1d3b      	adds	r3, r7, #4
 800a99e:	2200      	movs	r2, #0
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4818      	ldr	r0, [pc, #96]	@ (800aa04 <TIM3_Init+0xec>)
 800a9a4:	f7fa f824 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <TIM3_Init+0x9a>
  {
    Error_Handler();
 800a9ae:	f7fe fb77 	bl	80090a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a9b2:	1d3b      	adds	r3, r7, #4
 800a9b4:	2204      	movs	r2, #4
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	4812      	ldr	r0, [pc, #72]	@ (800aa04 <TIM3_Init+0xec>)
 800a9ba:	f7fa f819 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <TIM3_Init+0xb0>
  {
    Error_Handler();
 800a9c4:	f7fe fb6c 	bl	80090a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a9c8:	1d3b      	adds	r3, r7, #4
 800a9ca:	2208      	movs	r2, #8
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	480d      	ldr	r0, [pc, #52]	@ (800aa04 <TIM3_Init+0xec>)
 800a9d0:	f7fa f80e 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <TIM3_Init+0xc6>
  {
    Error_Handler();
 800a9da:	f7fe fb61 	bl	80090a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a9de:	1d3b      	adds	r3, r7, #4
 800a9e0:	220c      	movs	r2, #12
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	4807      	ldr	r0, [pc, #28]	@ (800aa04 <TIM3_Init+0xec>)
 800a9e6:	f7fa f803 	bl	80049f0 <HAL_TIM_PWM_ConfigChannel>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d001      	beq.n	800a9f4 <TIM3_Init+0xdc>
  {
    Error_Handler();
 800a9f0:	f7fe fb56 	bl	80090a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800a9f4:	4803      	ldr	r0, [pc, #12]	@ (800aa04 <TIM3_Init+0xec>)
 800a9f6:	f000 f92d 	bl	800ac54 <HAL_TIM_MspPostInit>

}
 800a9fa:	bf00      	nop
 800a9fc:	3728      	adds	r7, #40	@ 0x28
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	20007d8c 	.word	0x20007d8c
 800aa08:	40000400 	.word	0x40000400

0800aa0c <HAL_TIM_PWM_MspInit>:


void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a84      	ldr	r2, [pc, #528]	@ (800ac2c <HAL_TIM_PWM_MspInit+0x220>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	f040 8102 	bne.w	800ac24 <HAL_TIM_PWM_MspInit+0x218>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800aa20:	2300      	movs	r3, #0
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	4b82      	ldr	r3, [pc, #520]	@ (800ac30 <HAL_TIM_PWM_MspInit+0x224>)
 800aa26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa28:	4a81      	ldr	r2, [pc, #516]	@ (800ac30 <HAL_TIM_PWM_MspInit+0x224>)
 800aa2a:	f043 0302 	orr.w	r3, r3, #2
 800aa2e:	6413      	str	r3, [r2, #64]	@ 0x40
 800aa30:	4b7f      	ldr	r3, [pc, #508]	@ (800ac30 <HAL_TIM_PWM_MspInit+0x224>)
 800aa32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa34:	f003 0302 	and.w	r3, r3, #2
 800aa38:	60fb      	str	r3, [r7, #12]
 800aa3a:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 800aa3c:	4b7d      	ldr	r3, [pc, #500]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa3e:	4a7e      	ldr	r2, [pc, #504]	@ (800ac38 <HAL_TIM_PWM_MspInit+0x22c>)
 800aa40:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 800aa42:	4b7c      	ldr	r3, [pc, #496]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa44:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800aa48:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aa4a:	4b7a      	ldr	r3, [pc, #488]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa4c:	2240      	movs	r2, #64	@ 0x40
 800aa4e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800aa50:	4b78      	ldr	r3, [pc, #480]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 800aa56:	4b77      	ldr	r3, [pc, #476]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aa5c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800aa5e:	4b75      	ldr	r3, [pc, #468]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aa64:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800aa66:	4b73      	ldr	r3, [pc, #460]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa68:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800aa6c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800aa6e:	4b71      	ldr	r3, [pc, #452]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa70:	2200      	movs	r2, #0
 800aa72:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_HIGH;
 800aa74:	4b6f      	ldr	r3, [pc, #444]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa76:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800aa7a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800aa7c:	4b6d      	ldr	r3, [pc, #436]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa7e:	2204      	movs	r2, #4
 800aa80:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch1_trig.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800aa82:	4b6c      	ldr	r3, [pc, #432]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa84:	2200      	movs	r2, #0
 800aa86:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch1_trig.Init.MemBurst = DMA_MBURST_SINGLE;
 800aa88:	4b6a      	ldr	r3, [pc, #424]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch1_trig.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800aa8e:	4b69      	ldr	r3, [pc, #420]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa90:	2200      	movs	r2, #0
 800aa92:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800aa94:	4867      	ldr	r0, [pc, #412]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aa96:	f7f6 fc67 	bl	8001368 <HAL_DMA_Init>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 800aaa0:	f7fe fafe 	bl	80090a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	4a63      	ldr	r2, [pc, #396]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aaa8:	625a      	str	r2, [r3, #36]	@ 0x24
 800aaaa:	4a62      	ldr	r2, [pc, #392]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a60      	ldr	r2, [pc, #384]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aab4:	639a      	str	r2, [r3, #56]	@ 0x38
 800aab6:	4a5f      	ldr	r2, [pc, #380]	@ (800ac34 <HAL_TIM_PWM_MspInit+0x228>)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 800aabc:	4b5f      	ldr	r3, [pc, #380]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aabe:	4a60      	ldr	r2, [pc, #384]	@ (800ac40 <HAL_TIM_PWM_MspInit+0x234>)
 800aac0:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800aac2:	4b5e      	ldr	r3, [pc, #376]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aac4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800aac8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800aaca:	4b5c      	ldr	r3, [pc, #368]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aacc:	2240      	movs	r2, #64	@ 0x40
 800aace:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800aad0:	4b5a      	ldr	r3, [pc, #360]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aad2:	2200      	movs	r2, #0
 800aad4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800aad6:	4b59      	ldr	r3, [pc, #356]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aad8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aadc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800aade:	4b57      	ldr	r3, [pc, #348]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aae0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800aae4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800aae6:	4b55      	ldr	r3, [pc, #340]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aae8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800aaec:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800aaee:	4b53      	ldr	r3, [pc, #332]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800aaf4:	4b51      	ldr	r3, [pc, #324]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aaf6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800aafa:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800aafc:	4b4f      	ldr	r3, [pc, #316]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800aafe:	2204      	movs	r2, #4
 800ab00:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800ab02:	4b4e      	ldr	r3, [pc, #312]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800ab08:	4b4c      	ldr	r3, [pc, #304]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ab0e:	4b4b      	ldr	r3, [pc, #300]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800ab10:	2200      	movs	r2, #0
 800ab12:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800ab14:	4849      	ldr	r0, [pc, #292]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800ab16:	f7f6 fc27 	bl	8001368 <HAL_DMA_Init>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <HAL_TIM_PWM_MspInit+0x118>
    {
      Error_Handler();
 800ab20:	f7fe fabe 	bl	80090a0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4a45      	ldr	r2, [pc, #276]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800ab28:	629a      	str	r2, [r3, #40]	@ 0x28
 800ab2a:	4a44      	ldr	r2, [pc, #272]	@ (800ac3c <HAL_TIM_PWM_MspInit+0x230>)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH3 Init */
    hdma_tim3_ch3.Instance = DMA1_Stream7;
 800ab30:	4b44      	ldr	r3, [pc, #272]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab32:	4a45      	ldr	r2, [pc, #276]	@ (800ac48 <HAL_TIM_PWM_MspInit+0x23c>)
 800ab34:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch3.Init.Channel = DMA_CHANNEL_5;
 800ab36:	4b43      	ldr	r3, [pc, #268]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab38:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800ab3c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800ab3e:	4b41      	ldr	r3, [pc, #260]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab40:	2240      	movs	r2, #64	@ 0x40
 800ab42:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab44:	4b3f      	ldr	r3, [pc, #252]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab46:	2200      	movs	r2, #0
 800ab48:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800ab4a:	4b3e      	ldr	r3, [pc, #248]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab50:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ab52:	4b3c      	ldr	r3, [pc, #240]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800ab58:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800ab5a:	4b3a      	ldr	r3, [pc, #232]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab5c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800ab60:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch3.Init.Mode = DMA_NORMAL;
 800ab62:	4b38      	ldr	r3, [pc, #224]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800ab68:	4b36      	ldr	r3, [pc, #216]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab6a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800ab6e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800ab70:	4b34      	ldr	r3, [pc, #208]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab72:	2204      	movs	r2, #4
 800ab74:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800ab76:	4b33      	ldr	r3, [pc, #204]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800ab7c:	4b31      	ldr	r3, [pc, #196]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab7e:	2200      	movs	r2, #0
 800ab80:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ab82:	4b30      	ldr	r3, [pc, #192]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch3) != HAL_OK)
 800ab88:	482e      	ldr	r0, [pc, #184]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab8a:	f7f6 fbed 	bl	8001368 <HAL_DMA_Init>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <HAL_TIM_PWM_MspInit+0x18c>
    {
      Error_Handler();
 800ab94:	f7fe fa84 	bl	80090a0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim3_ch3);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a2a      	ldr	r2, [pc, #168]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800ab9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ab9e:	4a29      	ldr	r2, [pc, #164]	@ (800ac44 <HAL_TIM_PWM_MspInit+0x238>)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM3_CH4_UP Init */
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 800aba4:	4b29      	ldr	r3, [pc, #164]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800aba6:	4a2a      	ldr	r2, [pc, #168]	@ (800ac50 <HAL_TIM_PWM_MspInit+0x244>)
 800aba8:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800abaa:	4b28      	ldr	r3, [pc, #160]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 800abb0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800abb2:	4b26      	ldr	r3, [pc, #152]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abb4:	2240      	movs	r2, #64	@ 0x40
 800abb6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800abb8:	4b24      	ldr	r3, [pc, #144]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abba:	2200      	movs	r2, #0
 800abbc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800abbe:	4b23      	ldr	r3, [pc, #140]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800abc4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800abc6:	4b21      	ldr	r3, [pc, #132]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abc8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800abcc:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800abce:	4b1f      	ldr	r3, [pc, #124]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abd0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800abd4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_NORMAL;
 800abd6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abd8:	2200      	movs	r2, #0
 800abda:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_HIGH;
 800abdc:	4b1b      	ldr	r3, [pc, #108]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abde:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800abe2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800abe4:	4b19      	ldr	r3, [pc, #100]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abe6:	2204      	movs	r2, #4
 800abe8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim3_ch4_up.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800abea:	4b18      	ldr	r3, [pc, #96]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abec:	2200      	movs	r2, #0
 800abee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim3_ch4_up.Init.MemBurst = DMA_MBURST_SINGLE;
 800abf0:	4b16      	ldr	r3, [pc, #88]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abf2:	2200      	movs	r2, #0
 800abf4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim3_ch4_up.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800abf6:	4b15      	ldr	r3, [pc, #84]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800abfc:	4813      	ldr	r0, [pc, #76]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800abfe:	f7f6 fbb3 	bl	8001368 <HAL_DMA_Init>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d001      	beq.n	800ac0c <HAL_TIM_PWM_MspInit+0x200>
    {
      Error_Handler();
 800ac08:	f7fe fa4a 	bl	80090a0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4a0f      	ldr	r2, [pc, #60]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800ac10:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac12:	4a0e      	ldr	r2, [pc, #56]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800ac1c:	621a      	str	r2, [r3, #32]
 800ac1e:	4a0b      	ldr	r2, [pc, #44]	@ (800ac4c <HAL_TIM_PWM_MspInit+0x240>)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800ac24:	bf00      	nop
 800ac26:	3710      	adds	r7, #16
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	40000400 	.word	0x40000400
 800ac30:	40023800 	.word	0x40023800
 800ac34:	20007dd4 	.word	0x20007dd4
 800ac38:	40026070 	.word	0x40026070
 800ac3c:	20007e34 	.word	0x20007e34
 800ac40:	40026088 	.word	0x40026088
 800ac44:	20007e94 	.word	0x20007e94
 800ac48:	400260b8 	.word	0x400260b8
 800ac4c:	20007ef4 	.word	0x20007ef4
 800ac50:	40026040 	.word	0x40026040

0800ac54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac5c:	f107 030c 	add.w	r3, r7, #12
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
 800ac64:	605a      	str	r2, [r3, #4]
 800ac66:	609a      	str	r2, [r3, #8]
 800ac68:	60da      	str	r2, [r3, #12]
 800ac6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a12      	ldr	r2, [pc, #72]	@ (800acbc <HAL_TIM_MspPostInit+0x68>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d11e      	bne.n	800acb4 <HAL_TIM_MspPostInit+0x60>
  {
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ac76:	2300      	movs	r3, #0
 800ac78:	60bb      	str	r3, [r7, #8]
 800ac7a:	4b11      	ldr	r3, [pc, #68]	@ (800acc0 <HAL_TIM_MspPostInit+0x6c>)
 800ac7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac7e:	4a10      	ldr	r2, [pc, #64]	@ (800acc0 <HAL_TIM_MspPostInit+0x6c>)
 800ac80:	f043 0304 	orr.w	r3, r3, #4
 800ac84:	6313      	str	r3, [r2, #48]	@ 0x30
 800ac86:	4b0e      	ldr	r3, [pc, #56]	@ (800acc0 <HAL_TIM_MspPostInit+0x6c>)
 800ac88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac8a:	f003 0304 	and.w	r3, r3, #4
 800ac8e:	60bb      	str	r3, [r7, #8]
 800ac90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800ac92:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800ac96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac98:	2302      	movs	r3, #2
 800ac9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aca0:	2300      	movs	r3, #0
 800aca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800aca4:	2302      	movs	r3, #2
 800aca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aca8:	f107 030c 	add.w	r3, r7, #12
 800acac:	4619      	mov	r1, r3
 800acae:	4805      	ldr	r0, [pc, #20]	@ (800acc4 <HAL_TIM_MspPostInit+0x70>)
 800acb0:	f7f6 feec 	bl	8001a8c <HAL_GPIO_Init>
  }

}
 800acb4:	bf00      	nop
 800acb6:	3720      	adds	r7, #32
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	40000400 	.word	0x40000400
 800acc0:	40023800 	.word	0x40023800
 800acc4:	40020800 	.word	0x40020800

0800acc8 <TIM3_DMA_Init>:
    HAL_DMA_DeInit(tim_pwmHandle->hdma[TIM_DMA_ID_UPDATE]);
  }
}

void TIM3_DMA_Init(void)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800acce:	2300      	movs	r3, #0
 800acd0:	607b      	str	r3, [r7, #4]
 800acd2:	4b18      	ldr	r3, [pc, #96]	@ (800ad34 <TIM3_DMA_Init+0x6c>)
 800acd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd6:	4a17      	ldr	r2, [pc, #92]	@ (800ad34 <TIM3_DMA_Init+0x6c>)
 800acd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800acdc:	6313      	str	r3, [r2, #48]	@ 0x30
 800acde:	4b15      	ldr	r3, [pc, #84]	@ (800ad34 <TIM3_DMA_Init+0x6c>)
 800ace0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ace2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ace6:	607b      	str	r3, [r7, #4]
 800ace8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800acea:	2200      	movs	r2, #0
 800acec:	2100      	movs	r1, #0
 800acee:	200d      	movs	r0, #13
 800acf0:	f7f6 fb04 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800acf4:	200d      	movs	r0, #13
 800acf6:	f7f6 fb1d 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800acfa:	2200      	movs	r2, #0
 800acfc:	2100      	movs	r1, #0
 800acfe:	200f      	movs	r0, #15
 800ad00:	f7f6 fafc 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800ad04:	200f      	movs	r0, #15
 800ad06:	f7f6 fb15 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	2010      	movs	r0, #16
 800ad10:	f7f6 faf4 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800ad14:	2010      	movs	r0, #16
 800ad16:	f7f6 fb0d 	bl	8001334 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	202f      	movs	r0, #47	@ 0x2f
 800ad20:	f7f6 faec 	bl	80012fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800ad24:	202f      	movs	r0, #47	@ 0x2f
 800ad26:	f7f6 fb05 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800ad2a:	bf00      	nop
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	40023800 	.word	0x40023800

0800ad38 <TIM4_Init>:

void TIM4_Init(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b086      	sub	sp, #24
 800ad3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad3e:	f107 0308 	add.w	r3, r7, #8
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	605a      	str	r2, [r3, #4]
 800ad48:	609a      	str	r2, [r3, #8]
 800ad4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ad54:	4b1d      	ldr	r3, [pc, #116]	@ (800adcc <TIM4_Init+0x94>)
 800ad56:	4a1e      	ldr	r2, [pc, #120]	@ (800add0 <TIM4_Init+0x98>)
 800ad58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ad5a:	4b1c      	ldr	r3, [pc, #112]	@ (800adcc <TIM4_Init+0x94>)
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad60:	4b1a      	ldr	r3, [pc, #104]	@ (800adcc <TIM4_Init+0x94>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800ad66:	4b19      	ldr	r3, [pc, #100]	@ (800adcc <TIM4_Init+0x94>)
 800ad68:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ad6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad6e:	4b17      	ldr	r3, [pc, #92]	@ (800adcc <TIM4_Init+0x94>)
 800ad70:	2200      	movs	r2, #0
 800ad72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad74:	4b15      	ldr	r3, [pc, #84]	@ (800adcc <TIM4_Init+0x94>)
 800ad76:	2200      	movs	r2, #0
 800ad78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800ad7a:	4814      	ldr	r0, [pc, #80]	@ (800adcc <TIM4_Init+0x94>)
 800ad7c:	f7f9 fb70 	bl	8004460 <HAL_TIM_Base_Init>
 800ad80:	4603      	mov	r3, r0
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d001      	beq.n	800ad8a <TIM4_Init+0x52>
  {
    Error_Handler();
 800ad86:	f7fe f98b 	bl	80090a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ad8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	4619      	mov	r1, r3
 800ad96:	480d      	ldr	r0, [pc, #52]	@ (800adcc <TIM4_Init+0x94>)
 800ad98:	f7f9 feec 	bl	8004b74 <HAL_TIM_ConfigClockSource>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <TIM4_Init+0x6e>
  {
    Error_Handler();
 800ada2:	f7fe f97d 	bl	80090a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ada6:	2300      	movs	r3, #0
 800ada8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800adaa:	2300      	movs	r3, #0
 800adac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800adae:	463b      	mov	r3, r7
 800adb0:	4619      	mov	r1, r3
 800adb2:	4806      	ldr	r0, [pc, #24]	@ (800adcc <TIM4_Init+0x94>)
 800adb4:	f7fa faea 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 800adb8:	4603      	mov	r3, r0
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d001      	beq.n	800adc2 <TIM4_Init+0x8a>
  {
    Error_Handler();
 800adbe:	f7fe f96f 	bl	80090a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800adc2:	bf00      	nop
 800adc4:	3718      	adds	r7, #24
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	20007f54 	.word	0x20007f54
 800add0:	40000800 	.word	0x40000800

0800add4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a0e      	ldr	r2, [pc, #56]	@ (800ae1c <HAL_TIM_Base_MspInit+0x48>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d115      	bne.n	800ae12 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800ade6:	2300      	movs	r3, #0
 800ade8:	60fb      	str	r3, [r7, #12]
 800adea:	4b0d      	ldr	r3, [pc, #52]	@ (800ae20 <HAL_TIM_Base_MspInit+0x4c>)
 800adec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adee:	4a0c      	ldr	r2, [pc, #48]	@ (800ae20 <HAL_TIM_Base_MspInit+0x4c>)
 800adf0:	f043 0304 	orr.w	r3, r3, #4
 800adf4:	6413      	str	r3, [r2, #64]	@ 0x40
 800adf6:	4b0a      	ldr	r3, [pc, #40]	@ (800ae20 <HAL_TIM_Base_MspInit+0x4c>)
 800adf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfa:	f003 0304 	and.w	r3, r3, #4
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800ae02:	2200      	movs	r2, #0
 800ae04:	2100      	movs	r1, #0
 800ae06:	201e      	movs	r0, #30
 800ae08:	f7f6 fa78 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800ae0c:	201e      	movs	r0, #30
 800ae0e:	f7f6 fa91 	bl	8001334 <HAL_NVIC_EnableIRQ>
  }
}
 800ae12:	bf00      	nop
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	40000800 	.word	0x40000800
 800ae20:	40023800 	.word	0x40023800

0800ae24 <MX_USART1_UART_Init>:
  }

}

void MX_USART1_UART_Init(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800ae28:	4b11      	ldr	r3, [pc, #68]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae2a:	4a12      	ldr	r2, [pc, #72]	@ (800ae74 <MX_USART1_UART_Init+0x50>)
 800ae2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800ae2e:	4b10      	ldr	r3, [pc, #64]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800ae34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ae36:	4b0e      	ldr	r3, [pc, #56]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ae3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae3e:	2200      	movs	r2, #0
 800ae40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ae42:	4b0b      	ldr	r3, [pc, #44]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae44:	2200      	movs	r2, #0
 800ae46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ae48:	4b09      	ldr	r3, [pc, #36]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae4a:	220c      	movs	r2, #12
 800ae4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ae4e:	4b08      	ldr	r3, [pc, #32]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ae54:	4b06      	ldr	r3, [pc, #24]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae56:	2200      	movs	r2, #0
 800ae58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800ae5a:	4805      	ldr	r0, [pc, #20]	@ (800ae70 <MX_USART1_UART_Init+0x4c>)
 800ae5c:	f7fa fb26 	bl	80054ac <HAL_UART_Init>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800ae66:	f7fe f91b 	bl	80090a0 <Error_Handler>
  }

}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	20007f9c 	.word	0x20007f9c
 800ae74:	40011000 	.word	0x40011000

0800ae78 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b090      	sub	sp, #64	@ 0x40
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	605a      	str	r2, [r3, #4]
 800ae8a:	609a      	str	r2, [r3, #8]
 800ae8c:	60da      	str	r2, [r3, #12]
 800ae8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	4a79      	ldr	r2, [pc, #484]	@ (800b07c <HAL_UART_MspInit+0x204>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d12c      	bne.n	800aef4 <HAL_UART_MspInit+0x7c>
  {

    __HAL_RCC_UART4_CLK_ENABLE();
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae9e:	4b78      	ldr	r3, [pc, #480]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea2:	4a77      	ldr	r2, [pc, #476]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aea4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aea8:	6413      	str	r3, [r2, #64]	@ 0x40
 800aeaa:	4b75      	ldr	r3, [pc, #468]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aeac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aeb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aeba:	4b71      	ldr	r3, [pc, #452]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aebe:	4a70      	ldr	r2, [pc, #448]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aec0:	f043 0301 	orr.w	r3, r3, #1
 800aec4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aec6:	4b6e      	ldr	r3, [pc, #440]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeca:	f003 0301 	and.w	r3, r3, #1
 800aece:	627b      	str	r3, [r7, #36]	@ 0x24
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800aed2:	2303      	movs	r3, #3
 800aed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aed6:	2302      	movs	r3, #2
 800aed8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aeda:	2300      	movs	r3, #0
 800aedc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aede:	2303      	movs	r3, #3
 800aee0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800aee2:	2308      	movs	r3, #8
 800aee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aee6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800aeea:	4619      	mov	r1, r3
 800aeec:	4865      	ldr	r0, [pc, #404]	@ (800b084 <HAL_UART_MspInit+0x20c>)
 800aeee:	f7f6 fdcd 	bl	8001a8c <HAL_GPIO_Init>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);

  }
}
 800aef2:	e136      	b.n	800b162 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART1)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4a63      	ldr	r2, [pc, #396]	@ (800b088 <HAL_UART_MspInit+0x210>)
 800aefa:	4293      	cmp	r3, r2
 800aefc:	d15c      	bne.n	800afb8 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800aefe:	2300      	movs	r3, #0
 800af00:	623b      	str	r3, [r7, #32]
 800af02:	4b5f      	ldr	r3, [pc, #380]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800af04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af06:	4a5e      	ldr	r2, [pc, #376]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800af08:	f043 0310 	orr.w	r3, r3, #16
 800af0c:	6453      	str	r3, [r2, #68]	@ 0x44
 800af0e:	4b5c      	ldr	r3, [pc, #368]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800af10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af12:	f003 0310 	and.w	r3, r3, #16
 800af16:	623b      	str	r3, [r7, #32]
 800af18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800af1a:	2300      	movs	r3, #0
 800af1c:	61fb      	str	r3, [r7, #28]
 800af1e:	4b58      	ldr	r3, [pc, #352]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800af20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af22:	4a57      	ldr	r2, [pc, #348]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800af24:	f043 0301 	orr.w	r3, r3, #1
 800af28:	6313      	str	r3, [r2, #48]	@ 0x30
 800af2a:	4b55      	ldr	r3, [pc, #340]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800af2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	61fb      	str	r3, [r7, #28]
 800af34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800af36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800af3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af3c:	2302      	movs	r3, #2
 800af3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af40:	2300      	movs	r3, #0
 800af42:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af44:	2303      	movs	r3, #3
 800af46:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800af48:	2307      	movs	r3, #7
 800af4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800af50:	4619      	mov	r1, r3
 800af52:	484c      	ldr	r0, [pc, #304]	@ (800b084 <HAL_UART_MspInit+0x20c>)
 800af54:	f7f6 fd9a 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800af58:	4b4c      	ldr	r3, [pc, #304]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af5a:	4a4d      	ldr	r2, [pc, #308]	@ (800b090 <HAL_UART_MspInit+0x218>)
 800af5c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800af5e:	4b4b      	ldr	r3, [pc, #300]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af60:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800af64:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800af66:	4b49      	ldr	r3, [pc, #292]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af68:	2200      	movs	r2, #0
 800af6a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800af6c:	4b47      	ldr	r3, [pc, #284]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af6e:	2200      	movs	r2, #0
 800af70:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800af72:	4b46      	ldr	r3, [pc, #280]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800af78:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800af7a:	4b44      	ldr	r3, [pc, #272]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800af80:	4b42      	ldr	r3, [pc, #264]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af82:	2200      	movs	r2, #0
 800af84:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800af86:	4b41      	ldr	r3, [pc, #260]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800af8c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800af8e:	4b3f      	ldr	r3, [pc, #252]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af90:	2200      	movs	r2, #0
 800af92:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800af94:	4b3d      	ldr	r3, [pc, #244]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af96:	2200      	movs	r2, #0
 800af98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800af9a:	483c      	ldr	r0, [pc, #240]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800af9c:	f7f6 f9e4 	bl	8001368 <HAL_DMA_Init>
 800afa0:	4603      	mov	r3, r0
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d001      	beq.n	800afaa <HAL_UART_MspInit+0x132>
      Error_Handler();
 800afa6:	f7fe f87b 	bl	80090a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4a37      	ldr	r2, [pc, #220]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800afae:	63da      	str	r2, [r3, #60]	@ 0x3c
 800afb0:	4a36      	ldr	r2, [pc, #216]	@ (800b08c <HAL_UART_MspInit+0x214>)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800afb6:	e0d4      	b.n	800b162 <HAL_UART_MspInit+0x2ea>
  else if(uartHandle->Instance==USART2)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a35      	ldr	r2, [pc, #212]	@ (800b094 <HAL_UART_MspInit+0x21c>)
 800afbe:	4293      	cmp	r3, r2
 800afc0:	d16e      	bne.n	800b0a0 <HAL_UART_MspInit+0x228>
    __HAL_RCC_USART2_CLK_ENABLE();
 800afc2:	2300      	movs	r3, #0
 800afc4:	61bb      	str	r3, [r7, #24]
 800afc6:	4b2e      	ldr	r3, [pc, #184]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800afc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afca:	4a2d      	ldr	r2, [pc, #180]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800afcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afd0:	6413      	str	r3, [r2, #64]	@ 0x40
 800afd2:	4b2b      	ldr	r3, [pc, #172]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800afd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800afda:	61bb      	str	r3, [r7, #24]
 800afdc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800afde:	2300      	movs	r3, #0
 800afe0:	617b      	str	r3, [r7, #20]
 800afe2:	4b27      	ldr	r3, [pc, #156]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800afe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afe6:	4a26      	ldr	r2, [pc, #152]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800afe8:	f043 0301 	orr.w	r3, r3, #1
 800afec:	6313      	str	r3, [r2, #48]	@ 0x30
 800afee:	4b24      	ldr	r3, [pc, #144]	@ (800b080 <HAL_UART_MspInit+0x208>)
 800aff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	617b      	str	r3, [r7, #20]
 800aff8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800affa:	230c      	movs	r3, #12
 800affc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800affe:	2302      	movs	r3, #2
 800b000:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b002:	2300      	movs	r3, #0
 800b004:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b006:	2303      	movs	r3, #3
 800b008:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b00a:	2307      	movs	r3, #7
 800b00c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b00e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b012:	4619      	mov	r1, r3
 800b014:	481b      	ldr	r0, [pc, #108]	@ (800b084 <HAL_UART_MspInit+0x20c>)
 800b016:	f7f6 fd39 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800b01a:	4b1f      	ldr	r3, [pc, #124]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b01c:	4a1f      	ldr	r2, [pc, #124]	@ (800b09c <HAL_UART_MspInit+0x224>)
 800b01e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800b020:	4b1d      	ldr	r3, [pc, #116]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b022:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b026:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b028:	4b1b      	ldr	r3, [pc, #108]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b02e:	4b1a      	ldr	r3, [pc, #104]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b030:	2200      	movs	r2, #0
 800b032:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b034:	4b18      	ldr	r3, [pc, #96]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b036:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b03a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b03c:	4b16      	ldr	r3, [pc, #88]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b03e:	2200      	movs	r2, #0
 800b040:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b042:	4b15      	ldr	r3, [pc, #84]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b044:	2200      	movs	r2, #0
 800b046:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800b048:	4b13      	ldr	r3, [pc, #76]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b04a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b04e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800b050:	4b11      	ldr	r3, [pc, #68]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b052:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800b056:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b058:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800b05e:	480e      	ldr	r0, [pc, #56]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b060:	f7f6 f982 	bl	8001368 <HAL_DMA_Init>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d001      	beq.n	800b06e <HAL_UART_MspInit+0x1f6>
      Error_Handler();
 800b06a:	f7fe f819 	bl	80090a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a09      	ldr	r2, [pc, #36]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b072:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b074:	4a08      	ldr	r2, [pc, #32]	@ (800b098 <HAL_UART_MspInit+0x220>)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b07a:	e072      	b.n	800b162 <HAL_UART_MspInit+0x2ea>
 800b07c:	40004c00 	.word	0x40004c00
 800b080:	40023800 	.word	0x40023800
 800b084:	40020000 	.word	0x40020000
 800b088:	40011000 	.word	0x40011000
 800b08c:	20007fe4 	.word	0x20007fe4
 800b090:	40026440 	.word	0x40026440
 800b094:	40004400 	.word	0x40004400
 800b098:	20008044 	.word	0x20008044
 800b09c:	40026088 	.word	0x40026088
  else if(uartHandle->Instance==USART3)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a31      	ldr	r2, [pc, #196]	@ (800b16c <HAL_UART_MspInit+0x2f4>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d15b      	bne.n	800b162 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART3_CLK_ENABLE();
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	613b      	str	r3, [r7, #16]
 800b0ae:	4b30      	ldr	r3, [pc, #192]	@ (800b170 <HAL_UART_MspInit+0x2f8>)
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b2:	4a2f      	ldr	r2, [pc, #188]	@ (800b170 <HAL_UART_MspInit+0x2f8>)
 800b0b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b0b8:	6413      	str	r3, [r2, #64]	@ 0x40
 800b0ba:	4b2d      	ldr	r3, [pc, #180]	@ (800b170 <HAL_UART_MspInit+0x2f8>)
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	4b29      	ldr	r3, [pc, #164]	@ (800b170 <HAL_UART_MspInit+0x2f8>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ce:	4a28      	ldr	r2, [pc, #160]	@ (800b170 <HAL_UART_MspInit+0x2f8>)
 800b0d0:	f043 0304 	orr.w	r3, r3, #4
 800b0d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800b0d6:	4b26      	ldr	r3, [pc, #152]	@ (800b170 <HAL_UART_MspInit+0x2f8>)
 800b0d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0da:	f003 0304 	and.w	r3, r3, #4
 800b0de:	60fb      	str	r3, [r7, #12]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b0e2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800b0e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b0e8:	2302      	movs	r3, #2
 800b0ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0f0:	2303      	movs	r3, #3
 800b0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b0f4:	2307      	movs	r3, #7
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	481d      	ldr	r0, [pc, #116]	@ (800b174 <HAL_UART_MspInit+0x2fc>)
 800b100:	f7f6 fcc4 	bl	8001a8c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800b104:	4b1c      	ldr	r3, [pc, #112]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b106:	4a1d      	ldr	r2, [pc, #116]	@ (800b17c <HAL_UART_MspInit+0x304>)
 800b108:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800b10a:	4b1b      	ldr	r3, [pc, #108]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b10c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800b110:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b112:	4b19      	ldr	r3, [pc, #100]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b114:	2200      	movs	r2, #0
 800b116:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b118:	4b17      	ldr	r3, [pc, #92]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b11e:	4b16      	ldr	r3, [pc, #88]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b120:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b124:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b126:	4b14      	ldr	r3, [pc, #80]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b128:	2200      	movs	r2, #0
 800b12a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b12c:	4b12      	ldr	r3, [pc, #72]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b12e:	2200      	movs	r2, #0
 800b130:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800b132:	4b11      	ldr	r3, [pc, #68]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b134:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b138:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b13a:	4b0f      	ldr	r3, [pc, #60]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b140:	4b0d      	ldr	r3, [pc, #52]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b142:	2200      	movs	r2, #0
 800b144:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800b146:	480c      	ldr	r0, [pc, #48]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b148:	f7f6 f90e 	bl	8001368 <HAL_DMA_Init>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <HAL_UART_MspInit+0x2de>
      Error_Handler();
 800b152:	f7fd ffa5 	bl	80090a0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a07      	ldr	r2, [pc, #28]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b15a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b15c:	4a06      	ldr	r2, [pc, #24]	@ (800b178 <HAL_UART_MspInit+0x300>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800b162:	bf00      	nop
 800b164:	3740      	adds	r7, #64	@ 0x40
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40004800 	.word	0x40004800
 800b170:	40023800 	.word	0x40023800
 800b174:	40020800 	.word	0x40020800
 800b178:	200080a4 	.word	0x200080a4
 800b17c:	40026028 	.word	0x40026028

0800b180 <uart_dma_init>:
    HAL_DMA_DeInit(uartHandle->hdmarx);

  }
}

void uart_dma_init(void) {
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800b186:	2300      	movs	r3, #0
 800b188:	607b      	str	r3, [r7, #4]
 800b18a:	4b0c      	ldr	r3, [pc, #48]	@ (800b1bc <uart_dma_init+0x3c>)
 800b18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b18e:	4a0b      	ldr	r2, [pc, #44]	@ (800b1bc <uart_dma_init+0x3c>)
 800b190:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b194:	6313      	str	r3, [r2, #48]	@ 0x30
 800b196:	4b09      	ldr	r3, [pc, #36]	@ (800b1bc <uart_dma_init+0x3c>)
 800b198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b19a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b19e:	607b      	str	r3, [r7, #4]
 800b1a0:	687b      	ldr	r3, [r7, #4]
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	203a      	movs	r0, #58	@ 0x3a
 800b1a8:	f7f6 f8a8 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800b1ac:	203a      	movs	r0, #58	@ 0x3a
 800b1ae:	f7f6 f8c1 	bl	8001334 <HAL_NVIC_EnableIRQ>

}
 800b1b2:	bf00      	nop
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	40023800 	.word	0x40023800

0800b1c0 <vl53l1xInit>:
// Set the start address 1 step after the VL53L0 dynamic addresses
static int nextI2CAddress = VL53L1X_DEFAULT_ADDRESS+1;


bool vl53l1xInit(VL53L1_Dev_t *pdev, I2C_HandleTypeDef *I2Cx)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	73fb      	strb	r3, [r7, #15]

  pdev->I2Cx = I2Cx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	683a      	ldr	r2, [r7, #0]
 800b1d2:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c
  pdev->devAddr = VL53L1X_DEFAULT_ADDRESS;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2229      	movs	r2, #41	@ 0x29
 800b1da:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

  /* Move initialized sensor to a new I2C address */
  int newAddress;

  taskENTER_CRITICAL();
 800b1de:	f7fd fbbd 	bl	800895c <vPortEnterCritical>
  newAddress = nextI2CAddress++;
 800b1e2:	4b13      	ldr	r3, [pc, #76]	@ (800b230 <vl53l1xInit+0x70>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	1c5a      	adds	r2, r3, #1
 800b1e8:	4911      	ldr	r1, [pc, #68]	@ (800b230 <vl53l1xInit+0x70>)
 800b1ea:	600a      	str	r2, [r1, #0]
 800b1ec:	60bb      	str	r3, [r7, #8]
  taskEXIT_CRITICAL();
 800b1ee:	f7fd fbe3 	bl	80089b8 <vPortExitCritical>

  vl53l1xSetI2CAddress(pdev, newAddress);
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f81b 	bl	800b234 <vl53l1xSetI2CAddress>

  status = VL53L1_DataInit(pdev);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f008 fb69 	bl	80138d6 <VL53L1_DataInit>
 800b204:	4603      	mov	r3, r0
 800b206:	73fb      	strb	r3, [r7, #15]

  if (status == VL53L1_ERROR_NONE)
 800b208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d104      	bne.n	800b21a <vl53l1xInit+0x5a>
  {
    status = VL53L1_StaticInit(pdev);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f008 fbcf 	bl	80139b4 <VL53L1_StaticInit>
 800b216:	4603      	mov	r3, r0
 800b218:	73fb      	strb	r3, [r7, #15]
  }

  return status == VL53L1_ERROR_NONE;
 800b21a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bf0c      	ite	eq
 800b222:	2301      	moveq	r3, #1
 800b224:	2300      	movne	r3, #0
 800b226:	b2db      	uxtb	r3, r3
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3710      	adds	r7, #16
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}
 800b230:	20000010 	.word	0x20000010

0800b234 <vl53l1xSetI2CAddress>:
 * Any subsequent communication will be on the new address
 * The address passed is the 7bit I2C address from LSB (ie. without the
 * read/write bit)
 */
VL53L1_Error vl53l1xSetI2CAddress(VL53L1_Dev_t* pdev, uint8_t address)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b084      	sub	sp, #16
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	460b      	mov	r3, r1
 800b23e:	70fb      	strb	r3, [r7, #3]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 800b240:	2300      	movs	r3, #0
 800b242:	73fb      	strb	r3, [r7, #15]

  status = VL53L1_SetDeviceAddress(pdev, address);
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	4619      	mov	r1, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f008 fb2e 	bl	80138aa <VL53L1_SetDeviceAddress>
 800b24e:	4603      	mov	r3, r0
 800b250:	73fb      	strb	r3, [r7, #15]
  pdev->devAddr = address;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	78fa      	ldrb	r2, [r7, #3]
 800b256:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  return  status;
 800b25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <VL53L1_WriteMulti>:
VL53L1_Error VL53L1_WriteMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800b266:	b590      	push	{r4, r7, lr}
 800b268:	b089      	sub	sp, #36	@ 0x24
 800b26a:	af02      	add	r7, sp, #8
 800b26c:	60f8      	str	r0, [r7, #12]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	460b      	mov	r3, r1
 800b274:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b276:	2300      	movs	r3, #0
 800b278:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	b29c      	uxth	r4, r3
 800b28a:	897a      	ldrh	r2, [r7, #10]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	4623      	mov	r3, r4
 800b292:	f7ff f937 	bl	800a504 <i2cdevWriteReg16>
 800b296:	4603      	mov	r3, r0
 800b298:	f083 0301 	eor.w	r3, r3, #1
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <VL53L1_WriteMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b2a2:	23f3      	movs	r3, #243	@ 0xf3
 800b2a4:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800b2a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	371c      	adds	r7, #28
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd90      	pop	{r4, r7, pc}

0800b2b2 <VL53L1_ReadMulti>:
VL53L1_Error VL53L1_ReadMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 800b2b2:	b590      	push	{r4, r7, lr}
 800b2b4:	b089      	sub	sp, #36	@ 0x24
 800b2b6:	af02      	add	r7, sp, #8
 800b2b8:	60f8      	str	r0, [r7, #12]
 800b2ba:	607a      	str	r2, [r7, #4]
 800b2bc:	603b      	str	r3, [r7, #0]
 800b2be:	460b      	mov	r3, r1
 800b2c0:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	b29c      	uxth	r4, r3
 800b2d6:	897a      	ldrh	r2, [r7, #10]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	4623      	mov	r3, r4
 800b2de:	f7ff f8e7 	bl	800a4b0 <i2cdevReadReg16>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f083 0301 	eor.w	r3, r3, #1
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <VL53L1_ReadMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b2ee:	23f3      	movs	r3, #243	@ 0xf3
 800b2f0:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 800b2f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	371c      	adds	r7, #28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd90      	pop	{r4, r7, pc}

0800b2fe <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t       data)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b086      	sub	sp, #24
 800b302:	af02      	add	r7, sp, #8
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	460b      	mov	r3, r1
 800b308:	807b      	strh	r3, [r7, #2]
 800b30a:	4613      	mov	r3, r2
 800b30c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]

	if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, 1, &data))
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800b31e:	887a      	ldrh	r2, [r7, #2]
 800b320:	1c7b      	adds	r3, r7, #1
 800b322:	9300      	str	r3, [sp, #0]
 800b324:	2301      	movs	r3, #1
 800b326:	f7ff f8ed 	bl	800a504 <i2cdevWriteReg16>
 800b32a:	4603      	mov	r3, r0
 800b32c:	f083 0301 	eor.w	r3, r3, #1
 800b330:	b2db      	uxtb	r3, r3
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <VL53L1_WrByte+0x3c>
	{
	  status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b336:	23f3      	movs	r3, #243	@ 0xf3
 800b338:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800b33a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
	...

0800b348 <VL53L1_RdByte>:

VL53L1_Error VL53L1_RdByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	460b      	mov	r3, r1
 800b352:	607a      	str	r2, [r7, #4]
 800b354:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b356:	2300      	movs	r3, #0
 800b358:	75fb      	strb	r3, [r7, #23]
  static uint8_t r8data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 1, &r8data))
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800b366:	897a      	ldrh	r2, [r7, #10]
 800b368:	4b0b      	ldr	r3, [pc, #44]	@ (800b398 <VL53L1_RdByte+0x50>)
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	2301      	movs	r3, #1
 800b36e:	f7ff f89f 	bl	800a4b0 <i2cdevReadReg16>
 800b372:	4603      	mov	r3, r0
 800b374:	f083 0301 	eor.w	r3, r3, #1
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d001      	beq.n	800b382 <VL53L1_RdByte+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b37e:	23f3      	movs	r3, #243	@ 0xf3
 800b380:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r8data;
 800b382:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <VL53L1_RdByte+0x50>)
 800b384:	781a      	ldrb	r2, [r3, #0]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	701a      	strb	r2, [r3, #0]

  return status;
 800b38a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20008104 	.word	0x20008104

0800b39c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint16_t     *pdata)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b088      	sub	sp, #32
 800b3a0:	af02      	add	r7, sp, #8
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	460b      	mov	r3, r1
 800b3a6:	607a      	str	r2, [r7, #4]
 800b3a8:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	75fb      	strb	r3, [r7, #23]
  static uint16_t r16data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 2, (uint8_t *)&r16data))
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 800b3ba:	897a      	ldrh	r2, [r7, #10]
 800b3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b3ec <VL53L1_RdWord+0x50>)
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	f7ff f875 	bl	800a4b0 <i2cdevReadReg16>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	f083 0301 	eor.w	r3, r3, #1
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <VL53L1_RdWord+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 800b3d2:	23f3      	movs	r3, #243	@ 0xf3
 800b3d4:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r16data;
 800b3d6:	4b05      	ldr	r3, [pc, #20]	@ (800b3ec <VL53L1_RdWord+0x50>)
 800b3d8:	881a      	ldrh	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	801a      	strh	r2, [r3, #0]
  
  return status;
 800b3de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3718      	adds	r7, #24
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20008106 	.word	0x20008106

0800b3f0 <led_task_test>:
#include <stdlib.h>

uint32_t counter_led_task = 0;


static void led_task_test(void *param){
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
//	systemWaitStart();
//	uint64_t lastTime  = usecTimestamp();
// Open made code belowe not work

	while(1){
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800b3f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800b3fc:	4803      	ldr	r0, [pc, #12]	@ (800b40c <led_task_test+0x1c>)
 800b3fe:	f7f6 fcfa 	bl	8001df6 <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 800b402:	2064      	movs	r0, #100	@ 0x64
 800b404:	f7fb ff7c 	bl	8007300 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 800b408:	bf00      	nop
 800b40a:	e7f5      	b.n	800b3f8 <led_task_test+0x8>
 800b40c:	40020800 	.word	0x40020800

0800b410 <ledblink_test>:
	}
}
void ledblink_test(){
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af02      	add	r7, sp, #8
	xTaskCreate(led_task_test, LED_TASK_NAME, LED_TASK_STACKSIZE, NULL, LED_TASK_PRI_TEST, NULL);
 800b416:	2300      	movs	r3, #0
 800b418:	9301      	str	r3, [sp, #4]
 800b41a:	2303      	movs	r3, #3
 800b41c:	9300      	str	r3, [sp, #0]
 800b41e:	2300      	movs	r3, #0
 800b420:	2296      	movs	r2, #150	@ 0x96
 800b422:	4903      	ldr	r1, [pc, #12]	@ (800b430 <ledblink_test+0x20>)
 800b424:	4803      	ldr	r0, [pc, #12]	@ (800b434 <ledblink_test+0x24>)
 800b426:	f7fb fda3 	bl	8006f70 <xTaskCreate>
}
 800b42a:	bf00      	nop
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	0801b6dc 	.word	0x0801b6dc
 800b434:	0800b3f1 	.word	0x0800b3f1

0800b438 <motors_task_test>:
uint32_t motors_value = 0;
uint16_t my_motor_value[4] = {0, 0, 0, 0};
uint8_t next_state = 0;


static void motors_task_test(void *param) {
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
//	hal_dshot_init(DSHOT600);
//	vTaskDelay(100);
	//JH
	while(1){
		motors_value += 1;
 800b440:	4b06      	ldr	r3, [pc, #24]	@ (800b45c <motors_task_test+0x24>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3301      	adds	r3, #1
 800b446:	4a05      	ldr	r2, [pc, #20]	@ (800b45c <motors_task_test+0x24>)
 800b448:	6013      	str	r3, [r2, #0]
		hal_dshot_write(my_motor_value);
 800b44a:	4805      	ldr	r0, [pc, #20]	@ (800b460 <motors_task_test+0x28>)
 800b44c:	f7fe fd33 	bl	8009eb6 <hal_dshot_write>
		//JH only a round
//		next_state = 1;
		vTaskDelay(1);
 800b450:	2001      	movs	r0, #1
 800b452:	f7fb ff55 	bl	8007300 <vTaskDelay>
	while(1){
 800b456:	bf00      	nop
 800b458:	e7f2      	b.n	800b440 <motors_task_test+0x8>
 800b45a:	bf00      	nop
 800b45c:	20008108 	.word	0x20008108
 800b460:	2000810c 	.word	0x2000810c

0800b464 <motors_test>:
	}
}
void motors_test(){
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af02      	add	r7, sp, #8
	xTaskCreate(motors_task_test, MOTORS_TASK_NAME_TEST, MOTORS_TASK_STACKSIZE_TEST, NULL, MOTORS_TASK_PRI_TEST, NULL);
 800b46a:	2300      	movs	r3, #0
 800b46c:	9301      	str	r3, [sp, #4]
 800b46e:	2303      	movs	r3, #3
 800b470:	9300      	str	r3, [sp, #0]
 800b472:	2300      	movs	r3, #0
 800b474:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b478:	4903      	ldr	r1, [pc, #12]	@ (800b488 <motors_test+0x24>)
 800b47a:	4804      	ldr	r0, [pc, #16]	@ (800b48c <motors_test+0x28>)
 800b47c:	f7fb fd78 	bl	8006f70 <xTaskCreate>
}
 800b480:	bf00      	nop
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	0801b6e8 	.word	0x0801b6e8
 800b48c:	0800b439 	.word	0x0800b439

0800b490 <rc_task_test>:
#include "dragonll_ibus.h"

uint32_t rc_cournter = 0;
//uint16_t ibus_data[IBUS_USER_CHANNELS];

static void rc_task_test(void *param) {
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]

	for (;;) {
		rc_cournter += 1;
 800b498:	4b04      	ldr	r3, [pc, #16]	@ (800b4ac <rc_task_test+0x1c>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	4a03      	ldr	r2, [pc, #12]	@ (800b4ac <rc_task_test+0x1c>)
 800b4a0:	6013      	str	r3, [r2, #0]
//		hal_ibus_read(ibus_data);
		vTaskDelay(1);
 800b4a2:	2001      	movs	r0, #1
 800b4a4:	f7fb ff2c 	bl	8007300 <vTaskDelay>
		rc_cournter += 1;
 800b4a8:	bf00      	nop
 800b4aa:	e7f5      	b.n	800b498 <rc_task_test+0x8>
 800b4ac:	20008114 	.word	0x20008114

0800b4b0 <rc_test>:
	}

}

void rc_test(){
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af02      	add	r7, sp, #8
	xTaskCreate(rc_task_test, RC_TASK_NAME_TEST, RC_TASK_STACKSIZE, NULL, RC_TASK_PRI_TEST, NULL);
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	9300      	str	r3, [sp, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b4c4:	4903      	ldr	r1, [pc, #12]	@ (800b4d4 <rc_test+0x24>)
 800b4c6:	4804      	ldr	r0, [pc, #16]	@ (800b4d8 <rc_test+0x28>)
 800b4c8:	f7fb fd52 	bl	8006f70 <xTaskCreate>
}
 800b4cc:	bf00      	nop
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	0801b6f4 	.word	0x0801b6f4
 800b4d8:	0800b491 	.word	0x0800b491

0800b4dc <nullFunction>:
  void (*dataAvailableCallback)(void);
} sensorsImplementation_t;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
static void nullFunction(void) {}
 800b4dc:	b480      	push	{r7}
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	bf00      	nop
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr
	...

0800b4ec <sensorsInit>:

static const sensorsImplementation_t* activeImplementation;
static bool isInit = false;
static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation);

void sensorsInit(void) {
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
  if (isInit) {
 800b4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800b528 <sensorsInit+0x3c>)
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d112      	bne.n	800b520 <sensorsInit+0x34>
    return;
  }

#ifndef SENSORS_FORCE
  SensorImplementation_t sensorImplementation = platformConfigGetSensorImplementation();
 800b4fa:	f007 ff9b 	bl	8013434 <platformConfigGetSensorImplementation>
 800b4fe:	4603      	mov	r3, r0
 800b500:	71fb      	strb	r3, [r7, #7]
  SensorImplementation_t sensorImplementation = SENSORS_FORCE;
  DEBUG_PRINT("Forcing sensors to " xstr(SENSORS_FORCE) "\n");
#endif
//run = 1;//JH

  activeImplementation = findImplementation(sensorImplementation);
 800b502:	79fb      	ldrb	r3, [r7, #7]
 800b504:	4618      	mov	r0, r3
 800b506:	f000 f879 	bl	800b5fc <findImplementation>
 800b50a:	4603      	mov	r3, r0
 800b50c:	4a07      	ldr	r2, [pc, #28]	@ (800b52c <sensorsInit+0x40>)
 800b50e:	6013      	str	r3, [r2, #0]
//  run = 1;//JH

  activeImplementation->init();
 800b510:	4b06      	ldr	r3, [pc, #24]	@ (800b52c <sensorsInit+0x40>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	4798      	blx	r3
//  run = 1; // NJH

  isInit = true;
 800b518:	4b03      	ldr	r3, [pc, #12]	@ (800b528 <sensorsInit+0x3c>)
 800b51a:	2201      	movs	r2, #1
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e000      	b.n	800b522 <sensorsInit+0x36>
    return;
 800b520:	bf00      	nop
}
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	2000811c 	.word	0x2000811c
 800b52c:	20008118 	.word	0x20008118

0800b530 <sensorsAreCalibrated>:
bool sensorsTest(void) {
  return activeImplementation->test();
}

bool sensorsAreCalibrated(void) {
 800b530:	b580      	push	{r7, lr}
 800b532:	af00      	add	r7, sp, #0
  return activeImplementation->areCalibrated();
 800b534:	4b03      	ldr	r3, [pc, #12]	@ (800b544 <sensorsAreCalibrated+0x14>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	4798      	blx	r3
 800b53c:	4603      	mov	r3, r0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	20008118 	.word	0x20008118

0800b548 <sensorsAcquire>:

bool sensorsManufacturingTest(void){
  return activeImplementation->manufacturingTest;
}

void sensorsAcquire(sensorData_t *sensors) {
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  activeImplementation->acquire(sensors);
 800b550:	4b04      	ldr	r3, [pc, #16]	@ (800b564 <sensorsAcquire+0x1c>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	6878      	ldr	r0, [r7, #4]
 800b558:	4798      	blx	r3
}
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20008118 	.word	0x20008118

0800b568 <sensorsWaitDataReady>:

void sensorsWaitDataReady(void) {
 800b568:	b580      	push	{r7, lr}
 800b56a:	af00      	add	r7, sp, #0
  activeImplementation->waitDataReady();
 800b56c:	4b02      	ldr	r3, [pc, #8]	@ (800b578 <sensorsWaitDataReady+0x10>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	699b      	ldr	r3, [r3, #24]
 800b572:	4798      	blx	r3
}
 800b574:	bf00      	nop
 800b576:	bd80      	pop	{r7, pc}
 800b578:	20008118 	.word	0x20008118

0800b57c <sensorsReadGyro>:

bool sensorsReadGyro(Axis3f *gyro) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  return activeImplementation->readGyro(gyro);
 800b584:	4b04      	ldr	r3, [pc, #16]	@ (800b598 <sensorsReadGyro+0x1c>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	4798      	blx	r3
 800b58e:	4603      	mov	r3, r0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	20008118 	.word	0x20008118

0800b59c <sensorsReadAcc>:

bool sensorsReadAcc(Axis3f *acc) {
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  return activeImplementation->readAcc(acc);
 800b5a4:	4b04      	ldr	r3, [pc, #16]	@ (800b5b8 <sensorsReadAcc+0x1c>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	4798      	blx	r3
 800b5ae:	4603      	mov	r3, r0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3708      	adds	r7, #8
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20008118 	.word	0x20008118

0800b5bc <sensorsReadMag>:

bool sensorsReadMag(Axis3f *mag) {
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b082      	sub	sp, #8
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  return activeImplementation->readMag(mag);
 800b5c4:	4b04      	ldr	r3, [pc, #16]	@ (800b5d8 <sensorsReadMag+0x1c>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	4798      	blx	r3
 800b5ce:	4603      	mov	r3, r0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3708      	adds	r7, #8
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20008118 	.word	0x20008118

0800b5dc <sensorsReadBaro>:

bool sensorsReadBaro(baro_t *baro) {
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b082      	sub	sp, #8
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  return activeImplementation->readBaro(baro);
 800b5e4:	4b04      	ldr	r3, [pc, #16]	@ (800b5f8 <sensorsReadBaro+0x1c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	4798      	blx	r3
 800b5ee:	4603      	mov	r3, r0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3708      	adds	r7, #8
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	20008118 	.word	0x20008118

0800b5fc <findImplementation>:

void __attribute__((used)) EXTI1_Callback(void) {
  activeImplementation->dataAvailableCallback();
}

static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation) {
 800b5fc:	b480      	push	{r7}
 800b5fe:	b085      	sub	sp, #20
 800b600:	af00      	add	r7, sp, #0
 800b602:	4603      	mov	r3, r0
 800b604:	71fb      	strb	r3, [r7, #7]
  const sensorsImplementation_t* result = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800b60a:	2300      	movs	r3, #0
 800b60c:	60bb      	str	r3, [r7, #8]
 800b60e:	e014      	b.n	800b63a <findImplementation+0x3e>
    if (sensorImplementations[i].implements == implementation) {
 800b610:	4a0f      	ldr	r2, [pc, #60]	@ (800b650 <findImplementation+0x54>)
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2134      	movs	r1, #52	@ 0x34
 800b616:	fb01 f303 	mul.w	r3, r1, r3
 800b61a:	4413      	add	r3, r2
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	79fa      	ldrb	r2, [r7, #7]
 800b620:	429a      	cmp	r2, r3
 800b622:	d107      	bne.n	800b634 <findImplementation+0x38>
      result = &sensorImplementations[i];
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2234      	movs	r2, #52	@ 0x34
 800b628:	fb02 f303 	mul.w	r3, r2, r3
 800b62c:	4a08      	ldr	r2, [pc, #32]	@ (800b650 <findImplementation+0x54>)
 800b62e:	4413      	add	r3, r2
 800b630:	60fb      	str	r3, [r7, #12]
      break;
 800b632:	e005      	b.n	800b640 <findImplementation+0x44>
  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	3301      	adds	r3, #1
 800b638:	60bb      	str	r3, [r7, #8]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	dde7      	ble.n	800b610 <findImplementation+0x14>
    }
  }

  return result;
 800b640:	68fb      	ldr	r3, [r7, #12]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	0801b9a8 	.word	0x0801b9a8

0800b654 <sensorsMpu6500Bmp280ReadGyro>:

STATIC_MEM_TASK_ALLOC(sensorsTask, SENSORS_TASK_STACKSIZE);


bool sensorsMpu6500Bmp280ReadGyro(Axis3f *gyro)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(gyroDataQueue, gyro, 0));
 800b65c:	4b08      	ldr	r3, [pc, #32]	@ (800b680 <sensorsMpu6500Bmp280ReadGyro+0x2c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2200      	movs	r2, #0
 800b662:	6879      	ldr	r1, [r7, #4]
 800b664:	4618      	mov	r0, r3
 800b666:	f7fb f8bd 	bl	80067e4 <xQueueReceive>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	bf0c      	ite	eq
 800b670:	2301      	moveq	r3, #1
 800b672:	2300      	movne	r3, #0
 800b674:	b2db      	uxtb	r3, r3
}
 800b676:	4618      	mov	r0, r3
 800b678:	3708      	adds	r7, #8
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd80      	pop	{r7, pc}
 800b67e:	bf00      	nop
 800b680:	20008124 	.word	0x20008124

0800b684 <sensorsMpu6500Bmp280ReadAcc>:
bool sensorsMpu6500Bmp280ReadAcc(Axis3f *acc)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(accelerometerDataQueue, acc, 0));
 800b68c:	4b08      	ldr	r3, [pc, #32]	@ (800b6b0 <sensorsMpu6500Bmp280ReadAcc+0x2c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	2200      	movs	r2, #0
 800b692:	6879      	ldr	r1, [r7, #4]
 800b694:	4618      	mov	r0, r3
 800b696:	f7fb f8a5 	bl	80067e4 <xQueueReceive>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	bf0c      	ite	eq
 800b6a0:	2301      	moveq	r3, #1
 800b6a2:	2300      	movne	r3, #0
 800b6a4:	b2db      	uxtb	r3, r3
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3708      	adds	r7, #8
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20008120 	.word	0x20008120

0800b6b4 <sensorsMpu6500Bmp280ReadMag>:
bool sensorsMpu6500Bmp280ReadMag(Axis3f *mag)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b082      	sub	sp, #8
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(magnetometerDataQueue, mag, 0));
 800b6bc:	4b08      	ldr	r3, [pc, #32]	@ (800b6e0 <sensorsMpu6500Bmp280ReadMag+0x2c>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	6879      	ldr	r1, [r7, #4]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f7fb f88d 	bl	80067e4 <xQueueReceive>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	bf0c      	ite	eq
 800b6d0:	2301      	moveq	r3, #1
 800b6d2:	2300      	movne	r3, #0
 800b6d4:	b2db      	uxtb	r3, r3
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	20008128 	.word	0x20008128

0800b6e4 <sensorsMpu6500Bmp280ReadBaro>:
bool sensorsMpu6500Bmp280ReadBaro(baro_t *baro)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(barometerDataQueue, baro, 0));
 800b6ec:	4b08      	ldr	r3, [pc, #32]	@ (800b710 <sensorsMpu6500Bmp280ReadBaro+0x2c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7fb f875 	bl	80067e4 <xQueueReceive>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	2000812c 	.word	0x2000812c

0800b714 <sensorsMpu6500Bmp280Acquire>:
void sensorsMpu6500Bmp280Acquire(sensorData_t *sensors)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
	sensorsReadGyro(&sensors->gyro);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	330c      	adds	r3, #12
 800b720:	4618      	mov	r0, r3
 800b722:	f7ff ff2b 	bl	800b57c <sensorsReadGyro>
	sensorsReadAcc(&sensors->acc);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	f7ff ff37 	bl	800b59c <sensorsReadAcc>
	sensorsReadMag(&sensors->mag);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	3318      	adds	r3, #24
 800b732:	4618      	mov	r0, r3
 800b734:	f7ff ff42 	bl	800b5bc <sensorsReadMag>
	sensorsReadBaro(&sensors->baro);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	3324      	adds	r3, #36	@ 0x24
 800b73c:	4618      	mov	r0, r3
 800b73e:	f7ff ff4d 	bl	800b5dc <sensorsReadBaro>
	sensors->interruptTimestamp = sensorData.interruptTimestamp;
 800b742:	4b05      	ldr	r3, [pc, #20]	@ (800b758 <sensorsMpu6500Bmp280Acquire+0x44>)
 800b744:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b748:	6879      	ldr	r1, [r7, #4]
 800b74a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	200081e0 	.word	0x200081e0

0800b75c <sensorsMpu6500Bmp280AreCalibrated>:
bool sensorsMpu6500Bmp280AreCalibrated(void)
{
 800b75c:	b480      	push	{r7}
 800b75e:	af00      	add	r7, sp, #0
	return gyroBiasFound;
 800b760:	4b03      	ldr	r3, [pc, #12]	@ (800b770 <sensorsMpu6500Bmp280AreCalibrated+0x14>)
 800b762:	781b      	ldrb	r3, [r3, #0]
}
 800b764:	4618      	mov	r0, r3
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	20008248 	.word	0x20008248

0800b774 <sensorsTask>:

static void sensorsTask(void *param)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b08e      	sub	sp, #56	@ 0x38
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
	measurement_t measurement;
	vTaskDelay(10);
 800b77c:	200a      	movs	r0, #10
 800b77e:	f7fb fdbf 	bl	8007300 <vTaskDelay>

	systemWaitStart();
 800b782:	f002 fd05 	bl	800e190 <systemWaitStart>

	while (1) {


	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800b786:	4b45      	ldr	r3, [pc, #276]	@ (800b89c <sensorsTask+0x128>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	f04f 31ff 	mov.w	r1, #4294967295
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fb f908 	bl	80069a4 <xQueueSemaphoreTake>
 800b794:	4603      	mov	r3, r0
 800b796:	2b01      	cmp	r3, #1
 800b798:	d1f5      	bne.n	800b786 <sensorsTask+0x12>
	    {
	    	sensorData.interruptTimestamp = imuIntTimestamp;
 800b79a:	4b41      	ldr	r3, [pc, #260]	@ (800b8a0 <sensorsTask+0x12c>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	4940      	ldr	r1, [pc, #256]	@ (800b8a4 <sensorsTask+0x130>)
 800b7a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	    	sysCounter++;
 800b7a6:	4b40      	ldr	r3, [pc, #256]	@ (800b8a8 <sensorsTask+0x134>)
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	4a3e      	ldr	r2, [pc, #248]	@ (800b8a8 <sensorsTask+0x134>)
 800b7ae:	6013      	str	r3, [r2, #0]
	    	mpu6500GetAccelGyroData(&imu);
 800b7b0:	483e      	ldr	r0, [pc, #248]	@ (800b8ac <sensorsTask+0x138>)
 800b7b2:	f7fe ffd5 	bl	800a760 <mpu6500GetAccelGyroData>
	    	processAccGyroMeasurements();
 800b7b6:	f000 f8a7 	bl	800b908 <processAccGyroMeasurements>
	    	if (isBarometerPresent)
 800b7ba:	4b3d      	ldr	r3, [pc, #244]	@ (800b8b0 <sensorsTask+0x13c>)
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <sensorsTask+0x52>
	    	{
	    		processBarometerMeasurements();
 800b7c2:	f000 f9b1 	bl	800bb28 <processBarometerMeasurements>

	    	}

	        measurement.type = MeasurementTypeAcceleration;
 800b7c6:	230a      	movs	r3, #10
 800b7c8:	723b      	strb	r3, [r7, #8]
	        measurement.data.acceleration.acc = sensorData.acc;
 800b7ca:	4a36      	ldr	r2, [pc, #216]	@ (800b8a4 <sensorsTask+0x130>)
 800b7cc:	f107 030c 	add.w	r3, r7, #12
 800b7d0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b7d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        ax = sensorData.acc.x;
 800b7d6:	4b33      	ldr	r3, [pc, #204]	@ (800b8a4 <sensorsTask+0x130>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	4a36      	ldr	r2, [pc, #216]	@ (800b8b4 <sensorsTask+0x140>)
 800b7dc:	6013      	str	r3, [r2, #0]
	        ay = sensorData.acc.y;
 800b7de:	4b31      	ldr	r3, [pc, #196]	@ (800b8a4 <sensorsTask+0x130>)
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	4a35      	ldr	r2, [pc, #212]	@ (800b8b8 <sensorsTask+0x144>)
 800b7e4:	6013      	str	r3, [r2, #0]
	        az = sensorData.acc.z;
 800b7e6:	4b2f      	ldr	r3, [pc, #188]	@ (800b8a4 <sensorsTask+0x130>)
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	4a34      	ldr	r2, [pc, #208]	@ (800b8bc <sensorsTask+0x148>)
 800b7ec:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800b7ee:	f107 0308 	add.w	r3, r7, #8
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f002 fe28 	bl	800e448 <estimatorEnqueue>
	        xQueueOverwrite(accelerometerDataQueue, &sensorData.acc);
 800b7f8:	4b31      	ldr	r3, [pc, #196]	@ (800b8c0 <sensorsTask+0x14c>)
 800b7fa:	6818      	ldr	r0, [r3, #0]
 800b7fc:	2302      	movs	r3, #2
 800b7fe:	2200      	movs	r2, #0
 800b800:	4928      	ldr	r1, [pc, #160]	@ (800b8a4 <sensorsTask+0x130>)
 800b802:	f7fa fdb1 	bl	8006368 <xQueueGenericSend>

	        measurement.type = MeasurementTypeGyroscope;
 800b806:	2309      	movs	r3, #9
 800b808:	723b      	strb	r3, [r7, #8]
	        measurement.data.gyroscope.gyro = sensorData.gyro;
 800b80a:	4a26      	ldr	r2, [pc, #152]	@ (800b8a4 <sensorsTask+0x130>)
 800b80c:	f107 030c 	add.w	r3, r7, #12
 800b810:	320c      	adds	r2, #12
 800b812:	ca07      	ldmia	r2, {r0, r1, r2}
 800b814:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        gx = sensorData.gyro.x;
 800b818:	4b22      	ldr	r3, [pc, #136]	@ (800b8a4 <sensorsTask+0x130>)
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	4a29      	ldr	r2, [pc, #164]	@ (800b8c4 <sensorsTask+0x150>)
 800b81e:	6013      	str	r3, [r2, #0]
	        gy = sensorData.gyro.y;
 800b820:	4b20      	ldr	r3, [pc, #128]	@ (800b8a4 <sensorsTask+0x130>)
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	4a28      	ldr	r2, [pc, #160]	@ (800b8c8 <sensorsTask+0x154>)
 800b826:	6013      	str	r3, [r2, #0]
	        gz = sensorData.gyro.z;
 800b828:	4b1e      	ldr	r3, [pc, #120]	@ (800b8a4 <sensorsTask+0x130>)
 800b82a:	695b      	ldr	r3, [r3, #20]
 800b82c:	4a27      	ldr	r2, [pc, #156]	@ (800b8cc <sensorsTask+0x158>)
 800b82e:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 800b830:	f107 0308 	add.w	r3, r7, #8
 800b834:	4618      	mov	r0, r3
 800b836:	f002 fe07 	bl	800e448 <estimatorEnqueue>
	        xQueueOverwrite(gyroDataQueue, &sensorData.gyro);
 800b83a:	4b25      	ldr	r3, [pc, #148]	@ (800b8d0 <sensorsTask+0x15c>)
 800b83c:	6818      	ldr	r0, [r3, #0]
 800b83e:	2302      	movs	r3, #2
 800b840:	2200      	movs	r2, #0
 800b842:	4924      	ldr	r1, [pc, #144]	@ (800b8d4 <sensorsTask+0x160>)
 800b844:	f7fa fd90 	bl	8006368 <xQueueGenericSend>

			if (isBarometerPresent) {
 800b848:	4b19      	ldr	r3, [pc, #100]	@ (800b8b0 <sensorsTask+0x13c>)
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d01c      	beq.n	800b88a <sensorsTask+0x116>
				measurement.type = MeasurementTypeBarometer;
 800b850:	230b      	movs	r3, #11
 800b852:	723b      	strb	r3, [r7, #8]
				measurement.data.barometer.baro = sensorData.baro;
 800b854:	4a13      	ldr	r2, [pc, #76]	@ (800b8a4 <sensorsTask+0x130>)
 800b856:	f107 030c 	add.w	r3, r7, #12
 800b85a:	3224      	adds	r2, #36	@ 0x24
 800b85c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b85e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				press = sensorData.baro.pressure;
 800b862:	4b10      	ldr	r3, [pc, #64]	@ (800b8a4 <sensorsTask+0x130>)
 800b864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b866:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d8 <sensorsTask+0x164>)
 800b868:	6013      	str	r3, [r2, #0]
				asl = sensorData.baro.asl;
 800b86a:	4b0e      	ldr	r3, [pc, #56]	@ (800b8a4 <sensorsTask+0x130>)
 800b86c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b86e:	4a1b      	ldr	r2, [pc, #108]	@ (800b8dc <sensorsTask+0x168>)
 800b870:	6013      	str	r3, [r2, #0]
				estimatorEnqueue(&measurement);
 800b872:	f107 0308 	add.w	r3, r7, #8
 800b876:	4618      	mov	r0, r3
 800b878:	f002 fde6 	bl	800e448 <estimatorEnqueue>
				xQueueOverwrite(barometerDataQueue, &sensorData.baro);
 800b87c:	4b18      	ldr	r3, [pc, #96]	@ (800b8e0 <sensorsTask+0x16c>)
 800b87e:	6818      	ldr	r0, [r3, #0]
 800b880:	2302      	movs	r3, #2
 800b882:	2200      	movs	r2, #0
 800b884:	4917      	ldr	r1, [pc, #92]	@ (800b8e4 <sensorsTask+0x170>)
 800b886:	f7fa fd6f 	bl	8006368 <xQueueGenericSend>
			}

	    	xSemaphoreGive(dataReady);
 800b88a:	4b17      	ldr	r3, [pc, #92]	@ (800b8e8 <sensorsTask+0x174>)
 800b88c:	6818      	ldr	r0, [r3, #0]
 800b88e:	2300      	movs	r3, #0
 800b890:	2200      	movs	r2, #0
 800b892:	2100      	movs	r1, #0
 800b894:	f7fa fd68 	bl	8006368 <xQueueGenericSend>
	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800b898:	e775      	b.n	800b786 <sensorsTask+0x12>
 800b89a:	bf00      	nop
 800b89c:	20008130 	.word	0x20008130
 800b8a0:	20008218 	.word	0x20008218
 800b8a4:	200081e0 	.word	0x200081e0
 800b8a8:	2000833c 	.word	0x2000833c
 800b8ac:	2000832c 	.word	0x2000832c
 800b8b0:	200082f8 	.word	0x200082f8
 800b8b4:	20008354 	.word	0x20008354
 800b8b8:	20008358 	.word	0x20008358
 800b8bc:	2000835c 	.word	0x2000835c
 800b8c0:	20008120 	.word	0x20008120
 800b8c4:	20008348 	.word	0x20008348
 800b8c8:	2000834c 	.word	0x2000834c
 800b8cc:	20008350 	.word	0x20008350
 800b8d0:	20008124 	.word	0x20008124
 800b8d4:	200081ec 	.word	0x200081ec
 800b8d8:	20008340 	.word	0x20008340
 800b8dc:	20008344 	.word	0x20008344
 800b8e0:	2000812c 	.word	0x2000812c
 800b8e4:	20008204 	.word	0x20008204
 800b8e8:	20008184 	.word	0x20008184

0800b8ec <sensorsMpu6500Bmp280WaitDataReady>:
	    }
	}

}
void sensorsMpu6500Bmp280WaitDataReady(void)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
	xSemaphoreTake(dataReady, portMAX_DELAY);
 800b8f0:	4b04      	ldr	r3, [pc, #16]	@ (800b904 <sensorsMpu6500Bmp280WaitDataReady+0x18>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f04f 31ff 	mov.w	r1, #4294967295
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fb f853 	bl	80069a4 <xQueueSemaphoreTake>
}
 800b8fe:	bf00      	nop
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20008184 	.word	0x20008184

0800b908 <processAccGyroMeasurements>:
void processAccGyroMeasurements()
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b086      	sub	sp, #24
 800b90c:	af00      	add	r7, sp, #0
	Axis3f gyroScaledIMU;
	Axis3f accScaledIMU;
//	Axis3f accScaled;
	accelRaw.x = ((int16_t) imu.buf[0] << 8 | imu.buf[1]);
 800b90e:	4b79      	ldr	r3, [pc, #484]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	021b      	lsls	r3, r3, #8
 800b914:	b21a      	sxth	r2, r3
 800b916:	4b77      	ldr	r3, [pc, #476]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b918:	785b      	ldrb	r3, [r3, #1]
 800b91a:	b21b      	sxth	r3, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	b21a      	sxth	r2, r3
 800b920:	4b75      	ldr	r3, [pc, #468]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800b922:	801a      	strh	r2, [r3, #0]
	accelRaw.y = ((int16_t) imu.buf[2] << 8 | imu.buf[3]);
 800b924:	4b73      	ldr	r3, [pc, #460]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b926:	789b      	ldrb	r3, [r3, #2]
 800b928:	021b      	lsls	r3, r3, #8
 800b92a:	b21a      	sxth	r2, r3
 800b92c:	4b71      	ldr	r3, [pc, #452]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b92e:	78db      	ldrb	r3, [r3, #3]
 800b930:	b21b      	sxth	r3, r3
 800b932:	4313      	orrs	r3, r2
 800b934:	b21a      	sxth	r2, r3
 800b936:	4b70      	ldr	r3, [pc, #448]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800b938:	805a      	strh	r2, [r3, #2]
	accelRaw.z = ((int16_t) imu.buf[4] << 8 | imu.buf[5]);
 800b93a:	4b6e      	ldr	r3, [pc, #440]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b93c:	791b      	ldrb	r3, [r3, #4]
 800b93e:	021b      	lsls	r3, r3, #8
 800b940:	b21a      	sxth	r2, r3
 800b942:	4b6c      	ldr	r3, [pc, #432]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b944:	795b      	ldrb	r3, [r3, #5]
 800b946:	b21b      	sxth	r3, r3
 800b948:	4313      	orrs	r3, r2
 800b94a:	b21a      	sxth	r2, r3
 800b94c:	4b6a      	ldr	r3, [pc, #424]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800b94e:	809a      	strh	r2, [r3, #4]
	gyroRaw.x = ((int16_t) imu.buf[8] << 8 | imu.buf[9]);
 800b950:	4b68      	ldr	r3, [pc, #416]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b952:	7a1b      	ldrb	r3, [r3, #8]
 800b954:	021b      	lsls	r3, r3, #8
 800b956:	b21a      	sxth	r2, r3
 800b958:	4b66      	ldr	r3, [pc, #408]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b95a:	7a5b      	ldrb	r3, [r3, #9]
 800b95c:	b21b      	sxth	r3, r3
 800b95e:	4313      	orrs	r3, r2
 800b960:	b21a      	sxth	r2, r3
 800b962:	4b66      	ldr	r3, [pc, #408]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b964:	801a      	strh	r2, [r3, #0]
	gyroRaw.y = ((int16_t) imu.buf[10] << 8 | imu.buf[11]);
 800b966:	4b63      	ldr	r3, [pc, #396]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b968:	7a9b      	ldrb	r3, [r3, #10]
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	b21a      	sxth	r2, r3
 800b96e:	4b61      	ldr	r3, [pc, #388]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b970:	7adb      	ldrb	r3, [r3, #11]
 800b972:	b21b      	sxth	r3, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	b21a      	sxth	r2, r3
 800b978:	4b60      	ldr	r3, [pc, #384]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b97a:	805a      	strh	r2, [r3, #2]
	gyroRaw.z = ((int16_t) imu.buf[12] << 8 | imu.buf[13]);
 800b97c:	4b5d      	ldr	r3, [pc, #372]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b97e:	7b1b      	ldrb	r3, [r3, #12]
 800b980:	021b      	lsls	r3, r3, #8
 800b982:	b21a      	sxth	r2, r3
 800b984:	4b5b      	ldr	r3, [pc, #364]	@ (800baf4 <processAccGyroMeasurements+0x1ec>)
 800b986:	7b5b      	ldrb	r3, [r3, #13]
 800b988:	b21b      	sxth	r3, r3
 800b98a:	4313      	orrs	r3, r2
 800b98c:	b21a      	sxth	r2, r3
 800b98e:	4b5b      	ldr	r3, [pc, #364]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b990:	809a      	strh	r2, [r3, #4]

	gyroBiasFound = processGyroBias(gyroRaw.x, gyroRaw.y, gyroRaw.z, &gyroBias);
 800b992:	4b5a      	ldr	r3, [pc, #360]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b994:	f9b3 0000 	ldrsh.w	r0, [r3]
 800b998:	4b58      	ldr	r3, [pc, #352]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b99a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 800b99e:	4b57      	ldr	r3, [pc, #348]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b9a0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800b9a4:	4b56      	ldr	r3, [pc, #344]	@ (800bb00 <processAccGyroMeasurements+0x1f8>)
 800b9a6:	f000 fb53 	bl	800c050 <processGyroBias>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	4b55      	ldr	r3, [pc, #340]	@ (800bb04 <processAccGyroMeasurements+0x1fc>)
 800b9b0:	701a      	strb	r2, [r3, #0]

	if (gyroBiasFound) {
 800b9b2:	4b54      	ldr	r3, [pc, #336]	@ (800bb04 <processAccGyroMeasurements+0x1fc>)
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00b      	beq.n	800b9d2 <processAccGyroMeasurements+0xca>
		processAccScale(accelRaw.x, accelRaw.y, accelRaw.z);
 800b9ba:	4b4f      	ldr	r3, [pc, #316]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800b9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c0:	4a4d      	ldr	r2, [pc, #308]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800b9c2:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800b9c6:	4a4c      	ldr	r2, [pc, #304]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800b9c8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 fa4d 	bl	800be6c <processAccScale>
	}

	gyroScaledIMU.x = -(gyroRaw.x - gyroBias.x) * SENSORS_DEG_PER_LSB_CFG;
 800b9d2:	4b4a      	ldr	r3, [pc, #296]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b9d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9d8:	ee07 3a90 	vmov	s15, r3
 800b9dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9e0:	4b47      	ldr	r3, [pc, #284]	@ (800bb00 <processAccGyroMeasurements+0x1f8>)
 800b9e2:	edd3 7a00 	vldr	s15, [r3]
 800b9e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ea:	eef1 7a67 	vneg.f32	s15, s15
 800b9ee:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800bb08 <processAccGyroMeasurements+0x200>
 800b9f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b9f6:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroScaledIMU.y = (gyroRaw.y - gyroBias.y) * SENSORS_DEG_PER_LSB_CFG;
 800b9fa:	4b40      	ldr	r3, [pc, #256]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800b9fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba00:	ee07 3a90 	vmov	s15, r3
 800ba04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba08:	4b3d      	ldr	r3, [pc, #244]	@ (800bb00 <processAccGyroMeasurements+0x1f8>)
 800ba0a:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba12:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800bb08 <processAccGyroMeasurements+0x200>
 800ba16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba1a:	edc7 7a04 	vstr	s15, [r7, #16]
	gyroScaledIMU.z = (gyroRaw.z - gyroBias.z) * SENSORS_DEG_PER_LSB_CFG;
 800ba1e:	4b37      	ldr	r3, [pc, #220]	@ (800bafc <processAccGyroMeasurements+0x1f4>)
 800ba20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800ba24:	ee07 3a90 	vmov	s15, r3
 800ba28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba2c:	4b34      	ldr	r3, [pc, #208]	@ (800bb00 <processAccGyroMeasurements+0x1f8>)
 800ba2e:	edd3 7a02 	vldr	s15, [r3, #8]
 800ba32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba36:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800bb08 <processAccGyroMeasurements+0x200>
 800ba3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba3e:	edc7 7a05 	vstr	s15, [r7, #20]
	sensorsAlignToAirframe(&gyroScaledIMU, &sensorData.gyro);
 800ba42:	f107 030c 	add.w	r3, r7, #12
 800ba46:	4931      	ldr	r1, [pc, #196]	@ (800bb0c <processAccGyroMeasurements+0x204>)
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f000 fe6f 	bl	800c72c <sensorsAlignToAirframe>
	applyAxis3fLpf((lpf2pData*) (&gyroLpf), &sensorData.gyro);
 800ba4e:	492f      	ldr	r1, [pc, #188]	@ (800bb0c <processAccGyroMeasurements+0x204>)
 800ba50:	482f      	ldr	r0, [pc, #188]	@ (800bb10 <processAccGyroMeasurements+0x208>)
 800ba52:	f001 f845 	bl	800cae0 <applyAxis3fLpf>

	accScaledIMU.x = -(accelRaw.x - accBias.x) * SENSORS_G_PER_LSB_CFG / accScale;
 800ba56:	4b28      	ldr	r3, [pc, #160]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800ba58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba64:	4b2b      	ldr	r3, [pc, #172]	@ (800bb14 <processAccGyroMeasurements+0x20c>)
 800ba66:	edd3 7a00 	vldr	s15, [r3]
 800ba6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba6e:	eef1 7a67 	vneg.f32	s15, s15
 800ba72:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800bb18 <processAccGyroMeasurements+0x210>
 800ba76:	ee67 6a87 	vmul.f32	s13, s15, s14
 800ba7a:	4b28      	ldr	r3, [pc, #160]	@ (800bb1c <processAccGyroMeasurements+0x214>)
 800ba7c:	ed93 7a00 	vldr	s14, [r3]
 800ba80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba84:	edc7 7a00 	vstr	s15, [r7]
	accScaledIMU.y = (accelRaw.y - accBias.y) * SENSORS_G_PER_LSB_CFG / accScale;
 800ba88:	4b1b      	ldr	r3, [pc, #108]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800ba8a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba96:	4b1f      	ldr	r3, [pc, #124]	@ (800bb14 <processAccGyroMeasurements+0x20c>)
 800ba98:	edd3 7a01 	vldr	s15, [r3, #4]
 800ba9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800baa0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800bb18 <processAccGyroMeasurements+0x210>
 800baa4:	ee67 6a87 	vmul.f32	s13, s15, s14
 800baa8:	4b1c      	ldr	r3, [pc, #112]	@ (800bb1c <processAccGyroMeasurements+0x214>)
 800baaa:	ed93 7a00 	vldr	s14, [r3]
 800baae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bab2:	edc7 7a01 	vstr	s15, [r7, #4]
	accScaledIMU.z = (accelRaw.z) * SENSORS_G_PER_LSB_CFG / accScale;
 800bab6:	4b10      	ldr	r3, [pc, #64]	@ (800baf8 <processAccGyroMeasurements+0x1f0>)
 800bab8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bac4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800bb18 <processAccGyroMeasurements+0x210>
 800bac8:	ee67 6a87 	vmul.f32	s13, s15, s14
 800bacc:	4b13      	ldr	r3, [pc, #76]	@ (800bb1c <processAccGyroMeasurements+0x214>)
 800bace:	ed93 7a00 	vldr	s14, [r3]
 800bad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bad6:	edc7 7a02 	vstr	s15, [r7, #8]
	sensorsAlignToAirframe(&accScaledIMU, &sensorData.acc);
 800bada:	463b      	mov	r3, r7
 800badc:	4910      	ldr	r1, [pc, #64]	@ (800bb20 <processAccGyroMeasurements+0x218>)
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fe24 	bl	800c72c <sensorsAlignToAirframe>
//	sensorsAccAlignToGravity(&accScaled, &sensorData.acc);
	applyAxis3fLpf((lpf2pData*) (&accLpf), &sensorData.acc);
 800bae4:	490e      	ldr	r1, [pc, #56]	@ (800bb20 <processAccGyroMeasurements+0x218>)
 800bae6:	480f      	ldr	r0, [pc, #60]	@ (800bb24 <processAccGyroMeasurements+0x21c>)
 800bae8:	f000 fffa 	bl	800cae0 <applyAxis3fLpf>


}
 800baec:	bf00      	nop
 800baee:	3718      	adds	r7, #24
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}
 800baf4:	2000832c 	.word	0x2000832c
 800baf8:	20008228 	.word	0x20008228
 800bafc:	20008220 	.word	0x20008220
 800bb00:	20008230 	.word	0x20008230
 800bb04:	20008248 	.word	0x20008248
 800bb08:	3d7a0000 	.word	0x3d7a0000
 800bb0c:	200081ec 	.word	0x200081ec
 800bb10:	200082a4 	.word	0x200082a4
 800bb14:	2000823c 	.word	0x2000823c
 800bb18:	3a000000 	.word	0x3a000000
 800bb1c:	20000014 	.word	0x20000014
 800bb20:	200081e0 	.word	0x200081e0
 800bb24:	20008250 	.word	0x20008250

0800bb28 <processBarometerMeasurements>:
static void processBarometerMeasurements()
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
	float pressure, temperature,asl;
	bmp280GetData(&pressure, &temperature, &asl);
 800bb2e:	1d3a      	adds	r2, r7, #4
 800bb30:	f107 0108 	add.w	r1, r7, #8
 800bb34:	f107 030c 	add.w	r3, r7, #12
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7fe f86d 	bl	8009c18 <bmp280GetData>

	sensorData.baro.pressure = pressure / 100.0f;
 800bb3e:	ed97 7a03 	vldr	s14, [r7, #12]
 800bb42:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800bb70 <processBarometerMeasurements+0x48>
 800bb46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bb4a:	4b0a      	ldr	r3, [pc, #40]	@ (800bb74 <processBarometerMeasurements+0x4c>)
 800bb4c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensorData.baro.temperature = temperature;
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	4a08      	ldr	r2, [pc, #32]	@ (800bb74 <processBarometerMeasurements+0x4c>)
 800bb54:	6293      	str	r3, [r2, #40]	@ 0x28
	sensorData.baro.asl = bmp280PressureToAltitude(&sensorData.baro.pressure);
 800bb56:	4808      	ldr	r0, [pc, #32]	@ (800bb78 <processBarometerMeasurements+0x50>)
 800bb58:	f7fe f876 	bl	8009c48 <bmp280PressureToAltitude>
 800bb5c:	eef0 7a40 	vmov.f32	s15, s0
 800bb60:	4b04      	ldr	r3, [pc, #16]	@ (800bb74 <processBarometerMeasurements+0x4c>)
 800bb62:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800bb66:	bf00      	nop
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	42c80000 	.word	0x42c80000
 800bb74:	200081e0 	.word	0x200081e0
 800bb78:	20008204 	.word	0x20008204

0800bb7c <sensorsDeviceInit>:
static void sensorsDeviceInit(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
	isMagnetometerPresent = false;
 800bb82:	4b2f      	ldr	r3, [pc, #188]	@ (800bc40 <sensorsDeviceInit+0xc4>)
 800bb84:	2200      	movs	r2, #0
 800bb86:	701a      	strb	r2, [r3, #0]
	isBarometerPresent = false;
 800bb88:	4b2e      	ldr	r3, [pc, #184]	@ (800bc44 <sensorsDeviceInit+0xc8>)
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
	TickType_t xStartTime = 0;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	603b      	str	r3, [r7, #0]
	vTaskDelayUntil(&xStartTime, T2M(1000));
 800bb92:	463b      	mov	r3, r7
 800bb94:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f7fb fb3b 	bl	8007214 <vTaskDelayUntil>
//	stand = 1;// JH

	if ( mpu6500TestConnection() == false ){
 800bb9e:	f7fe fd37 	bl	800a610 <mpu6500TestConnection>
 800bba2:	4603      	mov	r3, r0
 800bba4:	f083 0301 	eor.w	r3, r3, #1
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d001      	beq.n	800bbb2 <sensorsDeviceInit+0x36>
//		stand = 1;//NJH
		while(1);
 800bbae:	bf00      	nop
 800bbb0:	e7fd      	b.n	800bbae <sensorsDeviceInit+0x32>
	}
	vTaskDelay(100);
 800bbb2:	2064      	movs	r0, #100	@ 0x64
 800bbb4:	f7fb fba4 	bl	8007300 <vTaskDelay>
//	stand = 1;// NJH
	mpu6500Init();
 800bbb8:	f7fe fd4e 	bl	800a658 <mpu6500Init>
//	stand = 1;// NJH

	vTaskDelay(100);
 800bbbc:	2064      	movs	r0, #100	@ 0x64
 800bbbe:	f7fb fb9f 	bl	8007300 <vTaskDelay>
	for (uint8_t i = 0; i < 3; i++) {
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	71fb      	strb	r3, [r7, #7]
 800bbc6:	e01e      	b.n	800bc06 <sensorsDeviceInit+0x8a>
		lpf2pInit(&gyroLpf[i], 1000, GYRO_LPF_CUTOFF_FREQ);
 800bbc8:	79fa      	ldrb	r2, [r7, #7]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	00db      	lsls	r3, r3, #3
 800bbce:	1a9b      	subs	r3, r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4a1d      	ldr	r2, [pc, #116]	@ (800bc48 <sensorsDeviceInit+0xcc>)
 800bbd4:	4413      	add	r3, r2
 800bbd6:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800bc4c <sensorsDeviceInit+0xd0>
 800bbda:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 800bc50 <sensorsDeviceInit+0xd4>
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f007 fcc8 	bl	8013574 <lpf2pInit>
		lpf2pInit(&accLpf[i], 1000, ACCEL_LPF_CUTOFF_FREQ);
 800bbe4:	79fa      	ldrb	r2, [r7, #7]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4a19      	ldr	r2, [pc, #100]	@ (800bc54 <sensorsDeviceInit+0xd8>)
 800bbf0:	4413      	add	r3, r2
 800bbf2:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800bbf6:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800bc50 <sensorsDeviceInit+0xd4>
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f007 fcba 	bl	8013574 <lpf2pInit>
	for (uint8_t i = 0; i < 3; i++) {
 800bc00:	79fb      	ldrb	r3, [r7, #7]
 800bc02:	3301      	adds	r3, #1
 800bc04:	71fb      	strb	r3, [r7, #7]
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d9dd      	bls.n	800bbc8 <sensorsDeviceInit+0x4c>
	}

	vTaskDelay(10);
 800bc0c:	200a      	movs	r0, #10
 800bc0e:	f7fb fb77 	bl	8007300 <vTaskDelay>
	bmp280Init();
 800bc12:	f7fd ffc9 	bl	8009ba8 <bmp280Init>
	if (bmp280TestConnection() == true){
 800bc16:	f7fd ffdf 	bl	8009bd8 <bmp280TestConnection>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <sensorsDeviceInit+0xac>
		isBarometerPresent = true;
 800bc20:	4b08      	ldr	r3, [pc, #32]	@ (800bc44 <sensorsDeviceInit+0xc8>)
 800bc22:	2201      	movs	r2, #1
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	e004      	b.n	800bc32 <sensorsDeviceInit+0xb6>
	}
	else{
		isBarometerPresent = false;
 800bc28:	4b06      	ldr	r3, [pc, #24]	@ (800bc44 <sensorsDeviceInit+0xc8>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	701a      	strb	r2, [r3, #0]
		while(1);
 800bc2e:	bf00      	nop
 800bc30:	e7fd      	b.n	800bc2e <sensorsDeviceInit+0xb2>
	}
	vTaskDelay(10);
 800bc32:	200a      	movs	r0, #10
 800bc34:	f7fb fb64 	bl	8007300 <vTaskDelay>

}
 800bc38:	bf00      	nop
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}
 800bc40:	200082f9 	.word	0x200082f9
 800bc44:	200082f8 	.word	0x200082f8
 800bc48:	200082a4 	.word	0x200082a4
 800bc4c:	42a00000 	.word	0x42a00000
 800bc50:	447a0000 	.word	0x447a0000
 800bc54:	20008250 	.word	0x20008250

0800bc58 <sensorsTaskInit>:
static void sensorsTaskInit(void)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b084      	sub	sp, #16
 800bc5c:	af04      	add	r7, sp, #16
	accelerometerDataQueue = STATIC_MEM_QUEUE_CREATE(accelerometerDataQueue);
 800bc5e:	2301      	movs	r3, #1
 800bc60:	4618      	mov	r0, r3
 800bc62:	230c      	movs	r3, #12
 800bc64:	4619      	mov	r1, r3
 800bc66:	2300      	movs	r3, #0
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bce8 <sensorsTaskInit+0x90>)
 800bc6c:	4a1f      	ldr	r2, [pc, #124]	@ (800bcec <sensorsTaskInit+0x94>)
 800bc6e:	f7fa fa67 	bl	8006140 <xQueueGenericCreateStatic>
 800bc72:	4603      	mov	r3, r0
 800bc74:	4a1e      	ldr	r2, [pc, #120]	@ (800bcf0 <sensorsTaskInit+0x98>)
 800bc76:	6013      	str	r3, [r2, #0]
	gyroDataQueue = STATIC_MEM_QUEUE_CREATE(gyroDataQueue);
 800bc78:	2301      	movs	r3, #1
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	230c      	movs	r3, #12
 800bc7e:	4619      	mov	r1, r3
 800bc80:	2300      	movs	r3, #0
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	4b1b      	ldr	r3, [pc, #108]	@ (800bcf4 <sensorsTaskInit+0x9c>)
 800bc86:	4a1c      	ldr	r2, [pc, #112]	@ (800bcf8 <sensorsTaskInit+0xa0>)
 800bc88:	f7fa fa5a 	bl	8006140 <xQueueGenericCreateStatic>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	4a1b      	ldr	r2, [pc, #108]	@ (800bcfc <sensorsTaskInit+0xa4>)
 800bc90:	6013      	str	r3, [r2, #0]
	magnetometerDataQueue = STATIC_MEM_QUEUE_CREATE(magnetometerDataQueue);
 800bc92:	2301      	movs	r3, #1
 800bc94:	4618      	mov	r0, r3
 800bc96:	230c      	movs	r3, #12
 800bc98:	4619      	mov	r1, r3
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	4b18      	ldr	r3, [pc, #96]	@ (800bd00 <sensorsTaskInit+0xa8>)
 800bca0:	4a18      	ldr	r2, [pc, #96]	@ (800bd04 <sensorsTaskInit+0xac>)
 800bca2:	f7fa fa4d 	bl	8006140 <xQueueGenericCreateStatic>
 800bca6:	4603      	mov	r3, r0
 800bca8:	4a17      	ldr	r2, [pc, #92]	@ (800bd08 <sensorsTaskInit+0xb0>)
 800bcaa:	6013      	str	r3, [r2, #0]
	barometerDataQueue = STATIC_MEM_QUEUE_CREATE(barometerDataQueue);
 800bcac:	2301      	movs	r3, #1
 800bcae:	4618      	mov	r0, r3
 800bcb0:	230c      	movs	r3, #12
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	4b14      	ldr	r3, [pc, #80]	@ (800bd0c <sensorsTaskInit+0xb4>)
 800bcba:	4a15      	ldr	r2, [pc, #84]	@ (800bd10 <sensorsTaskInit+0xb8>)
 800bcbc:	f7fa fa40 	bl	8006140 <xQueueGenericCreateStatic>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	4a14      	ldr	r2, [pc, #80]	@ (800bd14 <sensorsTaskInit+0xbc>)
 800bcc4:	6013      	str	r3, [r2, #0]

	STATIC_MEM_TASK_CREATE(sensorsTask, sensorsTask, SENSORS_TASK_NAME, NULL, SENSORS_TASK_PRI);
 800bcc6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800bcca:	461a      	mov	r2, r3
 800bccc:	4b12      	ldr	r3, [pc, #72]	@ (800bd18 <sensorsTaskInit+0xc0>)
 800bcce:	9302      	str	r3, [sp, #8]
 800bcd0:	4b12      	ldr	r3, [pc, #72]	@ (800bd1c <sensorsTaskInit+0xc4>)
 800bcd2:	9301      	str	r3, [sp, #4]
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	9300      	str	r3, [sp, #0]
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4911      	ldr	r1, [pc, #68]	@ (800bd20 <sensorsTaskInit+0xc8>)
 800bcdc:	4811      	ldr	r0, [pc, #68]	@ (800bd24 <sensorsTaskInit+0xcc>)
 800bcde:	f7fb f8f1 	bl	8006ec4 <xTaskCreateStatic>

}
 800bce2:	bf00      	nop
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	100003b0 	.word	0x100003b0
 800bcec:	100003a4 	.word	0x100003a4
 800bcf0:	20008120 	.word	0x20008120
 800bcf4:	1000040c 	.word	0x1000040c
 800bcf8:	10000400 	.word	0x10000400
 800bcfc:	20008124 	.word	0x20008124
 800bd00:	10000468 	.word	0x10000468
 800bd04:	1000045c 	.word	0x1000045c
 800bd08:	20008128 	.word	0x20008128
 800bd0c:	100004c4 	.word	0x100004c4
 800bd10:	100004b8 	.word	0x100004b8
 800bd14:	2000812c 	.word	0x2000812c
 800bd18:	10001d40 	.word	0x10001d40
 800bd1c:	20008360 	.word	0x20008360
 800bd20:	0801b6fc 	.word	0x0801b6fc
 800bd24:	0800b775 	.word	0x0800b775

0800bd28 <sensorsInterruptInit>:

static void sensorsInterruptInit(void)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd2e:	1d3b      	adds	r3, r7, #4
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	605a      	str	r2, [r3, #4]
 800bd36:	609a      	str	r2, [r3, #8]
 800bd38:	60da      	str	r2, [r3, #12]
 800bd3a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	603b      	str	r3, [r7, #0]
 800bd40:	4b1c      	ldr	r3, [pc, #112]	@ (800bdb4 <sensorsInterruptInit+0x8c>)
 800bd42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd44:	4a1b      	ldr	r2, [pc, #108]	@ (800bdb4 <sensorsInterruptInit+0x8c>)
 800bd46:	f043 0301 	orr.w	r3, r3, #1
 800bd4a:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd4c:	4b19      	ldr	r3, [pc, #100]	@ (800bdb4 <sensorsInterruptInit+0x8c>)
 800bd4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd50:	f003 0301 	and.w	r3, r3, #1
 800bd54:	603b      	str	r3, [r7, #0]
 800bd56:	683b      	ldr	r3, [r7, #0]

	sensorsDataReady = xSemaphoreCreateBinaryStatic(&sensorsDataReadyBuffer);
 800bd58:	2303      	movs	r3, #3
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	4b16      	ldr	r3, [pc, #88]	@ (800bdb8 <sensorsInterruptInit+0x90>)
 800bd5e:	2200      	movs	r2, #0
 800bd60:	2100      	movs	r1, #0
 800bd62:	2001      	movs	r0, #1
 800bd64:	f7fa f9ec 	bl	8006140 <xQueueGenericCreateStatic>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	4a14      	ldr	r2, [pc, #80]	@ (800bdbc <sensorsInterruptInit+0x94>)
 800bd6c:	6013      	str	r3, [r2, #0]
	dataReady = xSemaphoreCreateBinaryStatic(&dataReadyBuffer);
 800bd6e:	2303      	movs	r3, #3
 800bd70:	9300      	str	r3, [sp, #0]
 800bd72:	4b13      	ldr	r3, [pc, #76]	@ (800bdc0 <sensorsInterruptInit+0x98>)
 800bd74:	2200      	movs	r2, #0
 800bd76:	2100      	movs	r1, #0
 800bd78:	2001      	movs	r0, #1
 800bd7a:	f7fa f9e1 	bl	8006140 <xQueueGenericCreateStatic>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	4a10      	ldr	r2, [pc, #64]	@ (800bdc4 <sensorsInterruptInit+0x9c>)
 800bd82:	6013      	str	r3, [r2, #0]


	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800bd84:	2302      	movs	r3, #2
 800bd86:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bd88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800bd8c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bd8e:	2301      	movs	r3, #1
 800bd90:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd92:	1d3b      	adds	r3, r7, #4
 800bd94:	4619      	mov	r1, r3
 800bd96:	480c      	ldr	r0, [pc, #48]	@ (800bdc8 <sensorsInterruptInit+0xa0>)
 800bd98:	f7f5 fe78 	bl	8001a8c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	2107      	movs	r1, #7
 800bda0:	2007      	movs	r0, #7
 800bda2:	f7f5 faab 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800bda6:	2007      	movs	r0, #7
 800bda8:	f7f5 fac4 	bl	8001334 <HAL_NVIC_EnableIRQ>
}
 800bdac:	bf00      	nop
 800bdae:	3718      	adds	r7, #24
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}
 800bdb4:	40023800 	.word	0x40023800
 800bdb8:	20008134 	.word	0x20008134
 800bdbc:	20008130 	.word	0x20008130
 800bdc0:	20008188 	.word	0x20008188
 800bdc4:	20008184 	.word	0x20008184
 800bdc8:	40020000 	.word	0x40020000

0800bdcc <sensorsMpu6500Bmp280Init>:

void sensorsMpu6500Bmp280Init(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
	if (isInit) {
 800bdd0:	4b09      	ldr	r3, [pc, #36]	@ (800bdf8 <sensorsMpu6500Bmp280Init+0x2c>)
 800bdd2:	781b      	ldrb	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d10c      	bne.n	800bdf2 <sensorsMpu6500Bmp280Init+0x26>
		return;
	}
	sensorsBiasObjInit(&gyroBiasRunning);
 800bdd8:	4808      	ldr	r0, [pc, #32]	@ (800bdfc <sensorsMpu6500Bmp280Init+0x30>)
 800bdda:	f000 f96d 	bl	800c0b8 <sensorsBiasObjInit>
//	stand = 1;//JH

	sensorsDeviceInit();
 800bdde:	f7ff fecd 	bl	800bb7c <sensorsDeviceInit>
//	stand = 1;//NJH

	sensorsInterruptInit();
 800bde2:	f7ff ffa1 	bl	800bd28 <sensorsInterruptInit>
	sensorsTaskInit();
 800bde6:	f7ff ff37 	bl	800bc58 <sensorsTaskInit>

	isInit = true;
 800bdea:	4b03      	ldr	r3, [pc, #12]	@ (800bdf8 <sensorsMpu6500Bmp280Init+0x2c>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	701a      	strb	r2, [r3, #0]
 800bdf0:	e000      	b.n	800bdf4 <sensorsMpu6500Bmp280Init+0x28>
		return;
 800bdf2:	bf00      	nop
}
 800bdf4:	bd80      	pop	{r7, pc}
 800bdf6:	bf00      	nop
 800bdf8:	200081d8 	.word	0x200081d8
 800bdfc:	10000514 	.word	0x10000514

0800be00 <sensorsMpu6500Bmp280Test>:
bool sensorsMpu6500Bmp280Test(void)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
	  bool testStatus = true;
 800be06:	2301      	movs	r3, #1
 800be08:	71fb      	strb	r3, [r7, #7]

	  if (!isInit)
 800be0a:	4b16      	ldr	r3, [pc, #88]	@ (800be64 <sensorsMpu6500Bmp280Test+0x64>)
 800be0c:	781b      	ldrb	r3, [r3, #0]
 800be0e:	f083 0301 	eor.w	r3, r3, #1
 800be12:	b2db      	uxtb	r3, r3
 800be14:	2b00      	cmp	r3, #0
 800be16:	d001      	beq.n	800be1c <sensorsMpu6500Bmp280Test+0x1c>
	  {
	    testStatus = false;
 800be18:	2300      	movs	r3, #0
 800be1a:	71fb      	strb	r3, [r7, #7]
	  }

	  // Try for 3 seconds so the quad has stabilized enough to pass the test
	  for (int i = 0; i < 300; i++)
 800be1c:	2300      	movs	r3, #0
 800be1e:	603b      	str	r3, [r7, #0]
 800be20:	e00e      	b.n	800be40 <sensorsMpu6500Bmp280Test+0x40>
	  {
	    if(mpu6500SelfTest() == true)
 800be22:	f7fe fc11 	bl	800a648 <mpu6500SelfTest>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d003      	beq.n	800be34 <sensorsMpu6500Bmp280Test+0x34>
	    {
	    	isMpu6500TestPassed = true;
 800be2c:	4b0e      	ldr	r3, [pc, #56]	@ (800be68 <sensorsMpu6500Bmp280Test+0x68>)
 800be2e:	2201      	movs	r2, #1
 800be30:	701a      	strb	r2, [r3, #0]
	      break;
 800be32:	e009      	b.n	800be48 <sensorsMpu6500Bmp280Test+0x48>
	    }
	    else
	    {
	      vTaskDelay(M2T(10));
 800be34:	200a      	movs	r0, #10
 800be36:	f7fb fa63 	bl	8007300 <vTaskDelay>
	  for (int i = 0; i < 300; i++)
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	3301      	adds	r3, #1
 800be3e:	603b      	str	r3, [r7, #0]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800be46:	dbec      	blt.n	800be22 <sensorsMpu6500Bmp280Test+0x22>
	    }
	  }
	  testStatus &= isMpu6500TestPassed;
 800be48:	79fb      	ldrb	r3, [r7, #7]
 800be4a:	4a07      	ldr	r2, [pc, #28]	@ (800be68 <sensorsMpu6500Bmp280Test+0x68>)
 800be4c:	7812      	ldrb	r2, [r2, #0]
 800be4e:	4013      	ands	r3, r2
 800be50:	2b00      	cmp	r3, #0
 800be52:	bf14      	ite	ne
 800be54:	2301      	movne	r3, #1
 800be56:	2300      	moveq	r3, #0
 800be58:	71fb      	strb	r3, [r7, #7]
	    isLPS25HTestPassed = lps25hSelfTest();
	    testStatus = isLPS25HTestPassed;
	  }
	#endif

	  return true;
 800be5a:	2301      	movs	r3, #1
//	  return testStatus;
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	200081d8 	.word	0x200081d8
 800be68:	200082fa 	.word	0x200082fa

0800be6c <processAccScale>:

static bool processAccScale(int16_t ax, int16_t ay, int16_t az)
{
 800be6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be70:	ed2d 8b02 	vpush	{d8}
 800be74:	b088      	sub	sp, #32
 800be76:	af00      	add	r7, sp, #0
 800be78:	4603      	mov	r3, r0
 800be7a:	83fb      	strh	r3, [r7, #30]
 800be7c:	460b      	mov	r3, r1
 800be7e:	83bb      	strh	r3, [r7, #28]
 800be80:	4613      	mov	r3, r2
 800be82:	837b      	strh	r3, [r7, #26]
  static bool accBiasFound = false;
  static uint32_t accScaleSumCount = 0;
  static int64_t accSum[GYRO_NBR_OF_AXES] = {0};


  if (!accBiasFound)
 800be84:	4b6a      	ldr	r3, [pc, #424]	@ (800c030 <processAccScale+0x1c4>)
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	f083 0301 	eor.w	r3, r3, #1
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f000 80c5 	beq.w	800c01e <processAccScale+0x1b2>
  {
    accScaleSum += sqrtf(powf(ax * SENSORS_G_PER_LSB_CFG, 2) + powf(ay * SENSORS_G_PER_LSB_CFG, 2) + powf(az * SENSORS_G_PER_LSB_CFG, 2));
 800be94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800be98:	ee07 3a90 	vmov	s15, r3
 800be9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bea0:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800c034 <processAccScale+0x1c8>
 800bea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bea8:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800beac:	eeb0 0a67 	vmov.f32	s0, s15
 800beb0:	f00c feca 	bl	8018c48 <powf>
 800beb4:	eeb0 8a40 	vmov.f32	s16, s0
 800beb8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800bebc:	ee07 3a90 	vmov	s15, r3
 800bec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bec4:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800c034 <processAccScale+0x1c8>
 800bec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800becc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800bed0:	eeb0 0a67 	vmov.f32	s0, s15
 800bed4:	f00c feb8 	bl	8018c48 <powf>
 800bed8:	eef0 7a40 	vmov.f32	s15, s0
 800bedc:	ee38 8a27 	vadd.f32	s16, s16, s15
 800bee0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800bee4:	ee07 3a90 	vmov	s15, r3
 800bee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beec:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800c034 <processAccScale+0x1c8>
 800bef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bef4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800bef8:	eeb0 0a67 	vmov.f32	s0, s15
 800befc:	f00c fea4 	bl	8018c48 <powf>
 800bf00:	eef0 7a40 	vmov.f32	s15, s0
 800bf04:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bf08:	eeb0 0a67 	vmov.f32	s0, s15
 800bf0c:	f00c fef4 	bl	8018cf8 <sqrtf>
 800bf10:	eeb0 7a40 	vmov.f32	s14, s0
 800bf14:	4b48      	ldr	r3, [pc, #288]	@ (800c038 <processAccScale+0x1cc>)
 800bf16:	edd3 7a00 	vldr	s15, [r3]
 800bf1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf1e:	4b46      	ldr	r3, [pc, #280]	@ (800c038 <processAccScale+0x1cc>)
 800bf20:	edc3 7a00 	vstr	s15, [r3]
    accScaleSumCount++;
 800bf24:	4b45      	ldr	r3, [pc, #276]	@ (800c03c <processAccScale+0x1d0>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	3301      	adds	r3, #1
 800bf2a:	4a44      	ldr	r2, [pc, #272]	@ (800c03c <processAccScale+0x1d0>)
 800bf2c:	6013      	str	r3, [r2, #0]
    accSum[0] += ax;
 800bf2e:	4b44      	ldr	r3, [pc, #272]	@ (800c040 <processAccScale+0x1d4>)
 800bf30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf34:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800bf38:	17c8      	asrs	r0, r1, #31
 800bf3a:	468a      	mov	sl, r1
 800bf3c:	4683      	mov	fp, r0
 800bf3e:	eb12 010a 	adds.w	r1, r2, sl
 800bf42:	6139      	str	r1, [r7, #16]
 800bf44:	eb43 030b 	adc.w	r3, r3, fp
 800bf48:	617b      	str	r3, [r7, #20]
 800bf4a:	4b3d      	ldr	r3, [pc, #244]	@ (800c040 <processAccScale+0x1d4>)
 800bf4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf50:	e9c3 1200 	strd	r1, r2, [r3]
    accSum[1] += ay;
 800bf54:	4b3a      	ldr	r3, [pc, #232]	@ (800c040 <processAccScale+0x1d4>)
 800bf56:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bf5a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 800bf5e:	17c8      	asrs	r0, r1, #31
 800bf60:	4688      	mov	r8, r1
 800bf62:	4681      	mov	r9, r0
 800bf64:	eb12 0108 	adds.w	r1, r2, r8
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	eb43 0309 	adc.w	r3, r3, r9
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	4b33      	ldr	r3, [pc, #204]	@ (800c040 <processAccScale+0x1d4>)
 800bf72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf76:	e9c3 1202 	strd	r1, r2, [r3, #8]
    accSum[2] += az;
 800bf7a:	4b31      	ldr	r3, [pc, #196]	@ (800c040 <processAccScale+0x1d4>)
 800bf7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bf80:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800bf84:	17c8      	asrs	r0, r1, #31
 800bf86:	460c      	mov	r4, r1
 800bf88:	4605      	mov	r5, r0
 800bf8a:	1911      	adds	r1, r2, r4
 800bf8c:	6039      	str	r1, [r7, #0]
 800bf8e:	416b      	adcs	r3, r5
 800bf90:	607b      	str	r3, [r7, #4]
 800bf92:	4b2b      	ldr	r3, [pc, #172]	@ (800c040 <processAccScale+0x1d4>)
 800bf94:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf98:	e9c3 1204 	strd	r1, r2, [r3, #16]

    if (accScaleSumCount == SENSORS_ACC_SCALE_SAMPLES)
 800bf9c:	4b27      	ldr	r3, [pc, #156]	@ (800c03c <processAccScale+0x1d0>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2bc8      	cmp	r3, #200	@ 0xc8
 800bfa2:	d13c      	bne.n	800c01e <processAccScale+0x1b2>
    {
      accScale = accScaleSum / SENSORS_ACC_SCALE_SAMPLES;
 800bfa4:	4b24      	ldr	r3, [pc, #144]	@ (800c038 <processAccScale+0x1cc>)
 800bfa6:	ed93 7a00 	vldr	s14, [r3]
 800bfaa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c044 <processAccScale+0x1d8>
 800bfae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bfb2:	4b25      	ldr	r3, [pc, #148]	@ (800c048 <processAccScale+0x1dc>)
 800bfb4:	edc3 7a00 	vstr	s15, [r3]
      accBias.x = (float) accSum[0] / SENSORS_ACC_SCALE_SAMPLES;
 800bfb8:	4b21      	ldr	r3, [pc, #132]	@ (800c040 <processAccScale+0x1d4>)
 800bfba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	4619      	mov	r1, r3
 800bfc2:	f7f4 fe9b 	bl	8000cfc <__aeabi_l2f>
 800bfc6:	ee06 0a90 	vmov	s13, r0
 800bfca:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800c044 <processAccScale+0x1d8>
 800bfce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bfd2:	4b1e      	ldr	r3, [pc, #120]	@ (800c04c <processAccScale+0x1e0>)
 800bfd4:	edc3 7a00 	vstr	s15, [r3]
      accBias.y = (float) accSum[1] / SENSORS_ACC_SCALE_SAMPLES;
 800bfd8:	4b19      	ldr	r3, [pc, #100]	@ (800c040 <processAccScale+0x1d4>)
 800bfda:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800bfde:	4610      	mov	r0, r2
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	f7f4 fe8b 	bl	8000cfc <__aeabi_l2f>
 800bfe6:	ee06 0a90 	vmov	s13, r0
 800bfea:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800c044 <processAccScale+0x1d8>
 800bfee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bff2:	4b16      	ldr	r3, [pc, #88]	@ (800c04c <processAccScale+0x1e0>)
 800bff4:	edc3 7a01 	vstr	s15, [r3, #4]
      accBias.z = (float) accSum[2] / SENSORS_ACC_SCALE_SAMPLES;
 800bff8:	4b11      	ldr	r3, [pc, #68]	@ (800c040 <processAccScale+0x1d4>)
 800bffa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bffe:	4610      	mov	r0, r2
 800c000:	4619      	mov	r1, r3
 800c002:	f7f4 fe7b 	bl	8000cfc <__aeabi_l2f>
 800c006:	ee06 0a90 	vmov	s13, r0
 800c00a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800c044 <processAccScale+0x1d8>
 800c00e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c012:	4b0e      	ldr	r3, [pc, #56]	@ (800c04c <processAccScale+0x1e0>)
 800c014:	edc3 7a02 	vstr	s15, [r3, #8]
      accBiasFound = true;
 800c018:	4b05      	ldr	r3, [pc, #20]	@ (800c030 <processAccScale+0x1c4>)
 800c01a:	2201      	movs	r2, #1
 800c01c:	701a      	strb	r2, [r3, #0]
    }
  }

  return accBiasFound;
 800c01e:	4b04      	ldr	r3, [pc, #16]	@ (800c030 <processAccScale+0x1c4>)
 800c020:	781b      	ldrb	r3, [r3, #0]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3720      	adds	r7, #32
 800c026:	46bd      	mov	sp, r7
 800c028:	ecbd 8b02 	vpop	{d8}
 800c02c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c030:	20008810 	.word	0x20008810
 800c034:	3a000000 	.word	0x3a000000
 800c038:	2000824c 	.word	0x2000824c
 800c03c:	20008814 	.word	0x20008814
 800c040:	20008818 	.word	0x20008818
 800c044:	43480000 	.word	0x43480000
 800c048:	20000014 	.word	0x20000014
 800c04c:	2000823c 	.word	0x2000823c

0800c050 <processGyroBias>:
static bool processGyroBias(int16_t gx, int16_t gy, int16_t gz,  Axis3f *gyroBiasOut)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	607b      	str	r3, [r7, #4]
 800c058:	4603      	mov	r3, r0
 800c05a:	81fb      	strh	r3, [r7, #14]
 800c05c:	460b      	mov	r3, r1
 800c05e:	81bb      	strh	r3, [r7, #12]
 800c060:	4613      	mov	r3, r2
 800c062:	817b      	strh	r3, [r7, #10]
	sensorsAddBiasValue(&gyroBiasRunning, gx, gy, gz);
 800c064:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c068:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c06c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800c070:	4810      	ldr	r0, [pc, #64]	@ (800c0b4 <processGyroBias+0x64>)
 800c072:	f000 f9e3 	bl	800c43c <sensorsAddBiasValue>

	if (!gyroBiasRunning.isBiasValueFound)
 800c076:	4b0f      	ldr	r3, [pc, #60]	@ (800c0b4 <processGyroBias+0x64>)
 800c078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c07c:	f083 0301 	eor.w	r3, r3, #1
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <processGyroBias+0x3c>
	{
		sensorsFindBiasValue(&gyroBiasRunning);
 800c086:	480b      	ldr	r0, [pc, #44]	@ (800c0b4 <processGyroBias+0x64>)
 800c088:	f000 fa0e 	bl	800c4a8 <sensorsFindBiasValue>
	}

	gyroBiasOut->x = gyroBiasRunning.bias.x;
 800c08c:	4b09      	ldr	r3, [pc, #36]	@ (800c0b4 <processGyroBias+0x64>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	601a      	str	r2, [r3, #0]
	gyroBiasOut->y = gyroBiasRunning.bias.y;
 800c094:	4b07      	ldr	r3, [pc, #28]	@ (800c0b4 <processGyroBias+0x64>)
 800c096:	685a      	ldr	r2, [r3, #4]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	605a      	str	r2, [r3, #4]
	gyroBiasOut->z = gyroBiasRunning.bias.z;
 800c09c:	4b05      	ldr	r3, [pc, #20]	@ (800c0b4 <processGyroBias+0x64>)
 800c09e:	689a      	ldr	r2, [r3, #8]
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	609a      	str	r2, [r3, #8]

	return gyroBiasRunning.isBiasValueFound;
 800c0a4:	4b03      	ldr	r3, [pc, #12]	@ (800c0b4 <processGyroBias+0x64>)
 800c0a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
 800c0b2:	bf00      	nop
 800c0b4:	10000514 	.word	0x10000514

0800c0b8 <sensorsBiasObjInit>:
static void sensorsBiasObjInit(BiasObj* bias)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  bias->isBufferFilled = false;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  bias->bufHead = bias->buffer;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800c0d2:	bf00      	nop
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
	...

0800c0e0 <sensorsCalculateVarianceAndMean>:

static void sensorsCalculateVarianceAndMean(BiasObj* bias, Axis3f* varOut, Axis3f* meanOut)
{
 800c0e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0e4:	b0ac      	sub	sp, #176	@ 0xb0
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6778      	str	r0, [r7, #116]	@ 0x74
 800c0ea:	6739      	str	r1, [r7, #112]	@ 0x70
 800c0ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
  uint32_t i;
  int64_t sum[GYRO_NBR_OF_AXES] = {0};
 800c0ee:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	6013      	str	r3, [r2, #0]
 800c0f6:	6053      	str	r3, [r2, #4]
 800c0f8:	6093      	str	r3, [r2, #8]
 800c0fa:	60d3      	str	r3, [r2, #12]
 800c0fc:	6113      	str	r3, [r2, #16]
 800c0fe:	6153      	str	r3, [r2, #20]
  int64_t sumSq[GYRO_NBR_OF_AXES] = {0};
 800c100:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 800c104:	2300      	movs	r3, #0
 800c106:	6013      	str	r3, [r2, #0]
 800c108:	6053      	str	r3, [r2, #4]
 800c10a:	6093      	str	r3, [r2, #8]
 800c10c:	60d3      	str	r3, [r2, #12]
 800c10e:	6113      	str	r3, [r2, #16]
 800c110:	6153      	str	r3, [r2, #20]

  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800c112:	2300      	movs	r3, #0
 800c114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c118:	e0d8      	b.n	800c2cc <sensorsCalculateVarianceAndMean+0x1ec>
  {
		sum[0] += bias->buffer[i].x;
 800c11a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 800c11e:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c120:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c124:	4613      	mov	r3, r2
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	4413      	add	r3, r2
 800c12a:	005b      	lsls	r3, r3, #1
 800c12c:	4423      	add	r3, r4
 800c12e:	332c      	adds	r3, #44	@ 0x2c
 800c130:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c134:	b21b      	sxth	r3, r3
 800c136:	17da      	asrs	r2, r3, #31
 800c138:	663b      	str	r3, [r7, #96]	@ 0x60
 800c13a:	667a      	str	r2, [r7, #100]	@ 0x64
 800c13c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800c140:	4623      	mov	r3, r4
 800c142:	18c3      	adds	r3, r0, r3
 800c144:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c146:	462b      	mov	r3, r5
 800c148:	eb41 0303 	adc.w	r3, r1, r3
 800c14c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c14e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 800c152:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
		sum[1] += bias->buffer[i].y;
 800c156:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800c15a:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c15c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c160:	4613      	mov	r3, r2
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	4413      	add	r3, r2
 800c166:	005b      	lsls	r3, r3, #1
 800c168:	4423      	add	r3, r4
 800c16a:	332e      	adds	r3, #46	@ 0x2e
 800c16c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c170:	b21b      	sxth	r3, r3
 800c172:	17da      	asrs	r2, r3, #31
 800c174:	653b      	str	r3, [r7, #80]	@ 0x50
 800c176:	657a      	str	r2, [r7, #84]	@ 0x54
 800c178:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800c17c:	4623      	mov	r3, r4
 800c17e:	18c3      	adds	r3, r0, r3
 800c180:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c182:	462b      	mov	r3, r5
 800c184:	eb41 0303 	adc.w	r3, r1, r3
 800c188:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c18a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 800c18e:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
		sum[2] += bias->buffer[i].z;
 800c192:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 800c196:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c198:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c19c:	4613      	mov	r3, r2
 800c19e:	005b      	lsls	r3, r3, #1
 800c1a0:	4413      	add	r3, r2
 800c1a2:	005b      	lsls	r3, r3, #1
 800c1a4:	4423      	add	r3, r4
 800c1a6:	3330      	adds	r3, #48	@ 0x30
 800c1a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1ac:	b21b      	sxth	r3, r3
 800c1ae:	17da      	asrs	r2, r3, #31
 800c1b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1b2:	647a      	str	r2, [r7, #68]	@ 0x44
 800c1b4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800c1b8:	4623      	mov	r3, r4
 800c1ba:	18c3      	adds	r3, r0, r3
 800c1bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c1be:	462b      	mov	r3, r5
 800c1c0:	eb41 0303 	adc.w	r3, r1, r3
 800c1c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1c6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800c1ca:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
		sumSq[0] += bias->buffer[i].x * bias->buffer[i].x;
 800c1ce:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800c1d2:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c1d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c1d8:	4613      	mov	r3, r2
 800c1da:	005b      	lsls	r3, r3, #1
 800c1dc:	4413      	add	r3, r2
 800c1de:	005b      	lsls	r3, r3, #1
 800c1e0:	4423      	add	r3, r4
 800c1e2:	332c      	adds	r3, #44	@ 0x2c
 800c1e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1e8:	461d      	mov	r5, r3
 800c1ea:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c1ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	005b      	lsls	r3, r3, #1
 800c1f4:	4413      	add	r3, r2
 800c1f6:	005b      	lsls	r3, r3, #1
 800c1f8:	4423      	add	r3, r4
 800c1fa:	332c      	adds	r3, #44	@ 0x2c
 800c1fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c200:	fb05 f303 	mul.w	r3, r5, r3
 800c204:	17da      	asrs	r2, r3, #31
 800c206:	633b      	str	r3, [r7, #48]	@ 0x30
 800c208:	637a      	str	r2, [r7, #52]	@ 0x34
 800c20a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c20e:	4623      	mov	r3, r4
 800c210:	18c3      	adds	r3, r0, r3
 800c212:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c214:	462b      	mov	r3, r5
 800c216:	eb41 0303 	adc.w	r3, r1, r3
 800c21a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c21c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800c220:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
		sumSq[1] += bias->buffer[i].y * bias->buffer[i].y;
 800c224:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800c228:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c22a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c22e:	4613      	mov	r3, r2
 800c230:	005b      	lsls	r3, r3, #1
 800c232:	4413      	add	r3, r2
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	4423      	add	r3, r4
 800c238:	332e      	adds	r3, #46	@ 0x2e
 800c23a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c23e:	461d      	mov	r5, r3
 800c240:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c242:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c246:	4613      	mov	r3, r2
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	4413      	add	r3, r2
 800c24c:	005b      	lsls	r3, r3, #1
 800c24e:	4423      	add	r3, r4
 800c250:	332e      	adds	r3, #46	@ 0x2e
 800c252:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c256:	fb05 f303 	mul.w	r3, r5, r3
 800c25a:	17da      	asrs	r2, r3, #31
 800c25c:	623b      	str	r3, [r7, #32]
 800c25e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c260:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c264:	4623      	mov	r3, r4
 800c266:	18c3      	adds	r3, r0, r3
 800c268:	61bb      	str	r3, [r7, #24]
 800c26a:	462b      	mov	r3, r5
 800c26c:	eb41 0303 	adc.w	r3, r1, r3
 800c270:	61fb      	str	r3, [r7, #28]
 800c272:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800c276:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
		sumSq[2] += bias->buffer[i].z * bias->buffer[i].z;
 800c27a:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800c27e:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c280:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c284:	4613      	mov	r3, r2
 800c286:	005b      	lsls	r3, r3, #1
 800c288:	4413      	add	r3, r2
 800c28a:	005b      	lsls	r3, r3, #1
 800c28c:	4423      	add	r3, r4
 800c28e:	3330      	adds	r3, #48	@ 0x30
 800c290:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c294:	461d      	mov	r5, r3
 800c296:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 800c298:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c29c:	4613      	mov	r3, r2
 800c29e:	005b      	lsls	r3, r3, #1
 800c2a0:	4413      	add	r3, r2
 800c2a2:	005b      	lsls	r3, r3, #1
 800c2a4:	4423      	add	r3, r4
 800c2a6:	3330      	adds	r3, #48	@ 0x30
 800c2a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c2ac:	fb05 f303 	mul.w	r3, r5, r3
 800c2b0:	17da      	asrs	r2, r3, #31
 800c2b2:	4698      	mov	r8, r3
 800c2b4:	4691      	mov	r9, r2
 800c2b6:	eb10 0a08 	adds.w	sl, r0, r8
 800c2ba:	eb41 0b09 	adc.w	fp, r1, r9
 800c2be:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88
  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 800c2c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c2cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800c2d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2d4:	f4ff af21 	bcc.w	800c11a <sensorsCalculateVarianceAndMean+0x3a>

  }



  meanOut->x = (float) sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800c2d8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 800c2dc:	4610      	mov	r0, r2
 800c2de:	4619      	mov	r1, r3
 800c2e0:	f7f4 fd0c 	bl	8000cfc <__aeabi_l2f>
 800c2e4:	ee06 0a90 	vmov	s13, r0
 800c2e8:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 800c438 <sensorsCalculateVarianceAndMean+0x358>
 800c2ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c2f2:	edc3 7a00 	vstr	s15, [r3]
  meanOut->y = (float) sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800c2f6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 800c2fa:	4610      	mov	r0, r2
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	f7f4 fcfd 	bl	8000cfc <__aeabi_l2f>
 800c302:	ee06 0a90 	vmov	s13, r0
 800c306:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 800c438 <sensorsCalculateVarianceAndMean+0x358>
 800c30a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c30e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c310:	edc3 7a01 	vstr	s15, [r3, #4]
  meanOut->z = (float) sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
 800c314:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 800c318:	4610      	mov	r0, r2
 800c31a:	4619      	mov	r1, r3
 800c31c:	f7f4 fcee 	bl	8000cfc <__aeabi_l2f>
 800c320:	ee06 0a90 	vmov	s13, r0
 800c324:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 800c438 <sensorsCalculateVarianceAndMean+0x358>
 800c328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c32c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c32e:	edc3 7a02 	vstr	s15, [r3, #8]

  varOut->x = sumSq[0] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->x * meanOut->x;
 800c332:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 800c336:	2b00      	cmp	r3, #0
 800c338:	da08      	bge.n	800c34c <sensorsCalculateVarianceAndMean+0x26c>
 800c33a:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800c33e:	1851      	adds	r1, r2, r1
 800c340:	6139      	str	r1, [r7, #16]
 800c342:	f143 0300 	adc.w	r3, r3, #0
 800c346:	617b      	str	r3, [r7, #20]
 800c348:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c34c:	f04f 0000 	mov.w	r0, #0
 800c350:	f04f 0100 	mov.w	r1, #0
 800c354:	0a90      	lsrs	r0, r2, #10
 800c356:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800c35a:	1299      	asrs	r1, r3, #10
 800c35c:	4602      	mov	r2, r0
 800c35e:	460b      	mov	r3, r1
 800c360:	4610      	mov	r0, r2
 800c362:	4619      	mov	r1, r3
 800c364:	f7f4 fcca 	bl	8000cfc <__aeabi_l2f>
 800c368:	ee06 0a90 	vmov	s13, r0
 800c36c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c36e:	ed93 7a00 	vldr	s14, [r3]
 800c372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c374:	edd3 7a00 	vldr	s15, [r3]
 800c378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c37c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c380:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c382:	edc3 7a00 	vstr	s15, [r3]
  varOut->y = sumSq[1] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->y * meanOut->y;
 800c386:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	da08      	bge.n	800c3a0 <sensorsCalculateVarianceAndMean+0x2c0>
 800c38e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800c392:	1851      	adds	r1, r2, r1
 800c394:	60b9      	str	r1, [r7, #8]
 800c396:	f143 0300 	adc.w	r3, r3, #0
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c3a0:	f04f 0000 	mov.w	r0, #0
 800c3a4:	f04f 0100 	mov.w	r1, #0
 800c3a8:	0a90      	lsrs	r0, r2, #10
 800c3aa:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800c3ae:	1299      	asrs	r1, r3, #10
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	f7f4 fca0 	bl	8000cfc <__aeabi_l2f>
 800c3bc:	ee06 0a90 	vmov	s13, r0
 800c3c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c2:	ed93 7a01 	vldr	s14, [r3, #4]
 800c3c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c3c8:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c3d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3d6:	edc3 7a01 	vstr	s15, [r3, #4]
  varOut->z = sumSq[2] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->z * meanOut->z;
 800c3da:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	da08      	bge.n	800c3f4 <sensorsCalculateVarianceAndMean+0x314>
 800c3e2:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800c3e6:	1851      	adds	r1, r2, r1
 800c3e8:	6039      	str	r1, [r7, #0]
 800c3ea:	f143 0300 	adc.w	r3, r3, #0
 800c3ee:	607b      	str	r3, [r7, #4]
 800c3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3f4:	f04f 0000 	mov.w	r0, #0
 800c3f8:	f04f 0100 	mov.w	r1, #0
 800c3fc:	0a90      	lsrs	r0, r2, #10
 800c3fe:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 800c402:	1299      	asrs	r1, r3, #10
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4610      	mov	r0, r2
 800c40a:	4619      	mov	r1, r3
 800c40c:	f7f4 fc76 	bl	8000cfc <__aeabi_l2f>
 800c410:	ee06 0a90 	vmov	s13, r0
 800c414:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c416:	ed93 7a02 	vldr	s14, [r3, #8]
 800c41a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c41c:	edd3 7a02 	vldr	s15, [r3, #8]
 800c420:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c424:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c428:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c42a:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800c42e:	bf00      	nop
 800c430:	37b0      	adds	r7, #176	@ 0xb0
 800c432:	46bd      	mov	sp, r7
 800c434:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c438:	44800000 	.word	0x44800000

0800c43c <sensorsAddBiasValue>:
  meanOut->x = sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->y = sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->z = sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
}
static void sensorsAddBiasValue(BiasObj* bias, int16_t x, int16_t y, int16_t z)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b085      	sub	sp, #20
 800c440:	af00      	add	r7, sp, #0
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	4608      	mov	r0, r1
 800c446:	4611      	mov	r1, r2
 800c448:	461a      	mov	r2, r3
 800c44a:	4603      	mov	r3, r0
 800c44c:	817b      	strh	r3, [r7, #10]
 800c44e:	460b      	mov	r3, r1
 800c450:	813b      	strh	r3, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	80fb      	strh	r3, [r7, #6]
  bias->bufHead->x = x;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c45a:	897a      	ldrh	r2, [r7, #10]
 800c45c:	801a      	strh	r2, [r3, #0]
  bias->bufHead->y = y;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c462:	893a      	ldrh	r2, [r7, #8]
 800c464:	805a      	strh	r2, [r3, #2]
  bias->bufHead->z = z;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c46a:	88fa      	ldrh	r2, [r7, #6]
 800c46c:	809a      	strh	r2, [r3, #4]
  bias->bufHead++;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c472:	1d9a      	adds	r2, r3, #6
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (bias->bufHead >= &bias->buffer[SENSORS_NBR_OF_BIAS_SAMPLES])
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f503 53c1 	add.w	r3, r3, #6176	@ 0x1820
 800c482:	330c      	adds	r3, #12
 800c484:	429a      	cmp	r2, r3
 800c486:	d308      	bcc.n	800c49a <sensorsAddBiasValue+0x5e>
  {
    bias->bufHead = bias->buffer;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	629a      	str	r2, [r3, #40]	@ 0x28
    bias->isBufferFilled = true;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2201      	movs	r2, #1
 800c496:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
}
 800c49a:	bf00      	nop
 800c49c:	3714      	adds	r7, #20
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr
	...

0800c4a8 <sensorsFindBiasValue>:
static bool sensorsFindBiasValue(BiasObj* bias)
{
 800c4a8:	b590      	push	{r4, r7, lr}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  static int32_t varianceSampleTime;
  bool foundBias = false;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	73fb      	strb	r3, [r7, #15]

  if (bias->isBufferFilled)
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d047      	beq.n	800c54e <sensorsFindBiasValue+0xa6>
  {
    sensorsCalculateVarianceAndMean(bias, &bias->variance, &bias->mean);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f103 010c 	add.w	r1, r3, #12
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	3318      	adds	r3, #24
 800c4c8:	461a      	mov	r2, r3
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff fe08 	bl	800c0e0 <sensorsCalculateVarianceAndMean>

    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	edd3 7a03 	vldr	s15, [r3, #12]
 800c4d6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800c558 <sensorsFindBiasValue+0xb0>
 800c4da:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4e2:	d534      	bpl.n	800c54e <sensorsFindBiasValue+0xa6>
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	edd3 7a04 	vldr	s15, [r3, #16]
    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 800c4ea:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 800c558 <sensorsFindBiasValue+0xb0>
 800c4ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4f6:	d52a      	bpl.n	800c54e <sensorsFindBiasValue+0xa6>
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	edd3 7a05 	vldr	s15, [r3, #20]
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 800c4fe:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800c558 <sensorsFindBiasValue+0xb0>
 800c502:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c50a:	d520      	bpl.n	800c54e <sensorsFindBiasValue+0xa6>
        (varianceSampleTime + GYRO_MIN_BIAS_TIMEOUT_MS < xTaskGetTickCount()))
 800c50c:	4b13      	ldr	r3, [pc, #76]	@ (800c55c <sensorsFindBiasValue+0xb4>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 800c514:	f7fb f844 	bl	80075a0 <xTaskGetTickCount>
 800c518:	4603      	mov	r3, r0
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 800c51a:	429c      	cmp	r4, r3
 800c51c:	d217      	bcs.n	800c54e <sensorsFindBiasValue+0xa6>
    {
      varianceSampleTime = xTaskGetTickCount();
 800c51e:	f7fb f83f 	bl	80075a0 <xTaskGetTickCount>
 800c522:	4603      	mov	r3, r0
 800c524:	461a      	mov	r2, r3
 800c526:	4b0d      	ldr	r3, [pc, #52]	@ (800c55c <sensorsFindBiasValue+0xb4>)
 800c528:	601a      	str	r2, [r3, #0]
      bias->bias.x = bias->mean.x;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	699a      	ldr	r2, [r3, #24]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	601a      	str	r2, [r3, #0]
      bias->bias.y = bias->mean.y;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	69da      	ldr	r2, [r3, #28]
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	605a      	str	r2, [r3, #4]
      bias->bias.z = bias->mean.z;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1a      	ldr	r2, [r3, #32]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	609a      	str	r2, [r3, #8]
      foundBias = true;
 800c542:	2301      	movs	r3, #1
 800c544:	73fb      	strb	r3, [r7, #15]
      bias->isBiasValueFound = true;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2201      	movs	r2, #1
 800c54a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
  }

  return foundBias;
 800c54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c550:	4618      	mov	r0, r3
 800c552:	3714      	adds	r7, #20
 800c554:	46bd      	mov	sp, r7
 800c556:	bd90      	pop	{r4, r7, pc}
 800c558:	42480000 	.word	0x42480000
 800c55c:	20008830 	.word	0x20008830

0800c560 <sensorsMpu6500Bmp280ManufacturingTest>:

bool sensorsMpu6500Bmp280ManufacturingTest(void)
{
 800c560:	b590      	push	{r4, r7, lr}
 800c562:	ed2d 8b02 	vpush	{d8}
 800c566:	b08f      	sub	sp, #60	@ 0x3c
 800c568:	af02      	add	r7, sp, #8
	bool testStatus = false;
 800c56a:	2300      	movs	r3, #0
 800c56c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	Axis3i16 g;
	Axis3i16 a;
	Axis3f acc;  // Accelerometer axis data in mG
	float pitch, roll;
	uint32_t startTick = xTaskGetTickCount();
 800c570:	f7fb f816 	bl	80075a0 <xTaskGetTickCount>
 800c574:	62b8      	str	r0, [r7, #40]	@ 0x28

	testStatus = mpu6500SelfTest();
 800c576:	f7fe f867 	bl	800a648 <mpu6500SelfTest>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (testStatus)
 800c580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 80bc 	beq.w	800c702 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
	{
		sensorsBiasObjInit(&gyroBiasRunning);
 800c58a:	4862      	ldr	r0, [pc, #392]	@ (800c714 <sensorsMpu6500Bmp280ManufacturingTest+0x1b4>)
 800c58c:	f7ff fd94 	bl	800c0b8 <sensorsBiasObjInit>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800c590:	e024      	b.n	800c5dc <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
		{
			mpu6500GetMotion6(&a.y, &a.x, &a.z, &g.y, &g.x, &g.z);
 800c592:	f107 0318 	add.w	r3, r7, #24
 800c596:	1c9c      	adds	r4, r3, #2
 800c598:	f107 0310 	add.w	r3, r7, #16
 800c59c:	1d1a      	adds	r2, r3, #4
 800c59e:	f107 0110 	add.w	r1, r7, #16
 800c5a2:	f107 0310 	add.w	r3, r7, #16
 800c5a6:	1c98      	adds	r0, r3, #2
 800c5a8:	f107 0318 	add.w	r3, r7, #24
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	f107 0318 	add.w	r3, r7, #24
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	4623      	mov	r3, r4
 800c5b8:	f7fe f8e8 	bl	800a78c <mpu6500GetMotion6>
			if (processGyroBias(g.x, g.y, g.z, &gyroBias))
 800c5bc:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800c5c0:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800c5c4:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800c5c8:	4b53      	ldr	r3, [pc, #332]	@ (800c718 <sensorsMpu6500Bmp280ManufacturingTest+0x1b8>)
 800c5ca:	f7ff fd41 	bl	800c050 <processGyroBias>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d003      	beq.n	800c5dc <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
			{
				gyroBiasFound = true;
 800c5d4:	4b51      	ldr	r3, [pc, #324]	@ (800c71c <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	701a      	strb	r2, [r3, #0]
				break;
 800c5da:	e007      	b.n	800c5ec <sensorsMpu6500Bmp280ManufacturingTest+0x8c>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 800c5dc:	f7fa ffe0 	bl	80075a0 <xTaskGetTickCount>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800c5ea:	d3d2      	bcc.n	800c592 <sensorsMpu6500Bmp280ManufacturingTest+0x32>
			}
		}

		if (gyroBiasFound) {
 800c5ec:	4b4b      	ldr	r3, [pc, #300]	@ (800c71c <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	f000 8083 	beq.w	800c6fc <sensorsMpu6500Bmp280ManufacturingTest+0x19c>
			acc.x = -(a.x) * SENSORS_G_PER_LSB_CFG;
 800c5f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c5fa:	425b      	negs	r3, r3
 800c5fc:	ee07 3a90 	vmov	s15, r3
 800c600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c604:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800c720 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800c608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c60c:	edc7 7a01 	vstr	s15, [r7, #4]
			acc.y = (a.y) * SENSORS_G_PER_LSB_CFG;
 800c610:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c614:	ee07 3a90 	vmov	s15, r3
 800c618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c61c:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800c720 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800c620:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c624:	edc7 7a02 	vstr	s15, [r7, #8]
			acc.z = (a.z) * SENSORS_G_PER_LSB_CFG;
 800c628:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800c62c:	ee07 3a90 	vmov	s15, r3
 800c630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c634:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c720 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 800c638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c63c:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate pitch and roll based on accelerometer. Board must be level
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800c640:	edd7 7a01 	vldr	s15, [r7, #4]
 800c644:	eeb1 8a67 	vneg.f32	s16, s15
 800c648:	ed97 7a02 	vldr	s14, [r7, #8]
 800c64c:	edd7 7a02 	vldr	s15, [r7, #8]
 800c650:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c654:	edd7 6a03 	vldr	s13, [r7, #12]
 800c658:	edd7 7a03 	vldr	s15, [r7, #12]
 800c65c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c660:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c664:	eeb0 0a67 	vmov.f32	s0, s15
 800c668:	f00c fb46 	bl	8018cf8 <sqrtf>
 800c66c:	eeb0 7a40 	vmov.f32	s14, s0
 800c670:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800c674:	eeb0 0a67 	vmov.f32	s0, s15
 800c678:	f00c fbee 	bl	8018e58 <tanf>
 800c67c:	eef0 7a40 	vmov.f32	s15, s0
					* 180/(float) M_PI;
 800c680:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800c724 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800c684:	ee27 7a87 	vmul.f32	s14, s15, s14
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 800c688:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c728 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800c68c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c690:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			roll = tanf(acc.y / acc.z) * 180 / (float) M_PI;
 800c694:	ed97 7a02 	vldr	s14, [r7, #8]
 800c698:	edd7 7a03 	vldr	s15, [r7, #12]
 800c69c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c6a0:	eeb0 0a66 	vmov.f32	s0, s13
 800c6a4:	f00c fbd8 	bl	8018e58 <tanf>
 800c6a8:	eef0 7a40 	vmov.f32	s15, s0
 800c6ac:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800c724 <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 800c6b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c6b4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800c728 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 800c6b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c6bc:	edc7 7a08 	vstr	s15, [r7, #32]

			if ((fabsf(roll) < SENSORS_MAN_TEST_LEVEL_MAX) && (fabsf(pitch) < SENSORS_MAN_TEST_LEVEL_MAX))
 800c6c0:	edd7 7a08 	vldr	s15, [r7, #32]
 800c6c4:	eef0 7ae7 	vabs.f32	s15, s15
 800c6c8:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800c6cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d4:	d50e      	bpl.n	800c6f4 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
 800c6d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c6da:	eef0 7ae7 	vabs.f32	s15, s15
 800c6de:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800c6e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ea:	d503      	bpl.n	800c6f4 <sensorsMpu6500Bmp280ManufacturingTest+0x194>
			{
				testStatus = true;
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c6f2:	e006      	b.n	800c702 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
			else
			{
				testStatus = false;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800c6fa:	e002      	b.n	800c702 <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
		} else {

			testStatus = false;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}

	return testStatus;
 800c702:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 800c706:	4618      	mov	r0, r3
 800c708:	3734      	adds	r7, #52	@ 0x34
 800c70a:	46bd      	mov	sp, r7
 800c70c:	ecbd 8b02 	vpop	{d8}
 800c710:	bd90      	pop	{r4, r7, pc}
 800c712:	bf00      	nop
 800c714:	10000514 	.word	0x10000514
 800c718:	20008230 	.word	0x20008230
 800c71c:	20008248 	.word	0x20008248
 800c720:	3a000000 	.word	0x3a000000
 800c724:	43340000 	.word	0x43340000
 800c728:	40490fdb 	.word	0x40490fdb

0800c72c <sensorsAlignToAirframe>:
	}

}

static void sensorsAlignToAirframe(Axis3f* in, Axis3f* out)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  // IMU alignment
  static float sphi, cphi, stheta, ctheta, spsi, cpsi;

  sphi   = sinf(imuPhi * (float) M_PI / 180);
 800c736:	4bba      	ldr	r3, [pc, #744]	@ (800ca20 <sensorsAlignToAirframe+0x2f4>)
 800c738:	edd3 7a00 	vldr	s15, [r3]
 800c73c:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800ca24 <sensorsAlignToAirframe+0x2f8>
 800c740:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c744:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 800ca28 <sensorsAlignToAirframe+0x2fc>
 800c748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c74c:	eeb0 0a47 	vmov.f32	s0, s14
 800c750:	f00c fb3c 	bl	8018dcc <sinf>
 800c754:	eef0 7a40 	vmov.f32	s15, s0
 800c758:	4bb4      	ldr	r3, [pc, #720]	@ (800ca2c <sensorsAlignToAirframe+0x300>)
 800c75a:	edc3 7a00 	vstr	s15, [r3]
  cphi   = cosf(imuPhi * (float) M_PI / 180);
 800c75e:	4bb0      	ldr	r3, [pc, #704]	@ (800ca20 <sensorsAlignToAirframe+0x2f4>)
 800c760:	edd3 7a00 	vldr	s15, [r3]
 800c764:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800ca24 <sensorsAlignToAirframe+0x2f8>
 800c768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c76c:	eddf 6aae 	vldr	s13, [pc, #696]	@ 800ca28 <sensorsAlignToAirframe+0x2fc>
 800c770:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c774:	eeb0 0a47 	vmov.f32	s0, s14
 800c778:	f00c fadc 	bl	8018d34 <cosf>
 800c77c:	eef0 7a40 	vmov.f32	s15, s0
 800c780:	4bab      	ldr	r3, [pc, #684]	@ (800ca30 <sensorsAlignToAirframe+0x304>)
 800c782:	edc3 7a00 	vstr	s15, [r3]
  stheta = sinf(imuTheta * (float) M_PI / 180);
 800c786:	4bab      	ldr	r3, [pc, #684]	@ (800ca34 <sensorsAlignToAirframe+0x308>)
 800c788:	edd3 7a00 	vldr	s15, [r3]
 800c78c:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800ca24 <sensorsAlignToAirframe+0x2f8>
 800c790:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c794:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800ca28 <sensorsAlignToAirframe+0x2fc>
 800c798:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c79c:	eeb0 0a47 	vmov.f32	s0, s14
 800c7a0:	f00c fb14 	bl	8018dcc <sinf>
 800c7a4:	eef0 7a40 	vmov.f32	s15, s0
 800c7a8:	4ba3      	ldr	r3, [pc, #652]	@ (800ca38 <sensorsAlignToAirframe+0x30c>)
 800c7aa:	edc3 7a00 	vstr	s15, [r3]
  ctheta = cosf(imuTheta * (float) M_PI / 180);
 800c7ae:	4ba1      	ldr	r3, [pc, #644]	@ (800ca34 <sensorsAlignToAirframe+0x308>)
 800c7b0:	edd3 7a00 	vldr	s15, [r3]
 800c7b4:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800ca24 <sensorsAlignToAirframe+0x2f8>
 800c7b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7bc:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800ca28 <sensorsAlignToAirframe+0x2fc>
 800c7c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c7c4:	eeb0 0a47 	vmov.f32	s0, s14
 800c7c8:	f00c fab4 	bl	8018d34 <cosf>
 800c7cc:	eef0 7a40 	vmov.f32	s15, s0
 800c7d0:	4b9a      	ldr	r3, [pc, #616]	@ (800ca3c <sensorsAlignToAirframe+0x310>)
 800c7d2:	edc3 7a00 	vstr	s15, [r3]
  spsi   = sinf(imuPsi * (float) M_PI / 180);
 800c7d6:	4b9a      	ldr	r3, [pc, #616]	@ (800ca40 <sensorsAlignToAirframe+0x314>)
 800c7d8:	edd3 7a00 	vldr	s15, [r3]
 800c7dc:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800ca24 <sensorsAlignToAirframe+0x2f8>
 800c7e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c7e4:	eddf 6a90 	vldr	s13, [pc, #576]	@ 800ca28 <sensorsAlignToAirframe+0x2fc>
 800c7e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c7ec:	eeb0 0a47 	vmov.f32	s0, s14
 800c7f0:	f00c faec 	bl	8018dcc <sinf>
 800c7f4:	eef0 7a40 	vmov.f32	s15, s0
 800c7f8:	4b92      	ldr	r3, [pc, #584]	@ (800ca44 <sensorsAlignToAirframe+0x318>)
 800c7fa:	edc3 7a00 	vstr	s15, [r3]
  cpsi   = cosf(imuPsi * (float) M_PI / 180);
 800c7fe:	4b90      	ldr	r3, [pc, #576]	@ (800ca40 <sensorsAlignToAirframe+0x314>)
 800c800:	edd3 7a00 	vldr	s15, [r3]
 800c804:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800ca24 <sensorsAlignToAirframe+0x2f8>
 800c808:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c80c:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800ca28 <sensorsAlignToAirframe+0x2fc>
 800c810:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c814:	eeb0 0a47 	vmov.f32	s0, s14
 800c818:	f00c fa8c 	bl	8018d34 <cosf>
 800c81c:	eef0 7a40 	vmov.f32	s15, s0
 800c820:	4b89      	ldr	r3, [pc, #548]	@ (800ca48 <sensorsAlignToAirframe+0x31c>)
 800c822:	edc3 7a00 	vstr	s15, [r3]

  // tait-bryan passive rotation in order: yaw, psi (1) -> pitch, theta (2) ->  roll, phi (3) [https://en.wikipedia.org/wiki/Euler_angles#cite_note-3]
  // mathematically R = R_x(phi)^T . R_y(theta)^T . R_z(psi)^T  [http://eecs.qmul.ac.uk/~gslabaugh/publications/euler.pdf]
  // transpose because it's a passive rotation not active [https://en.wikipedia.org/wiki/Active_and_passive_transformation]
  R[0][0] = ctheta * cpsi;
 800c826:	4b85      	ldr	r3, [pc, #532]	@ (800ca3c <sensorsAlignToAirframe+0x310>)
 800c828:	ed93 7a00 	vldr	s14, [r3]
 800c82c:	4b86      	ldr	r3, [pc, #536]	@ (800ca48 <sensorsAlignToAirframe+0x31c>)
 800c82e:	edd3 7a00 	vldr	s15, [r3]
 800c832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c836:	4b85      	ldr	r3, [pc, #532]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c838:	edc3 7a00 	vstr	s15, [r3]
  R[0][1] = ctheta * spsi;
 800c83c:	4b7f      	ldr	r3, [pc, #508]	@ (800ca3c <sensorsAlignToAirframe+0x310>)
 800c83e:	ed93 7a00 	vldr	s14, [r3]
 800c842:	4b80      	ldr	r3, [pc, #512]	@ (800ca44 <sensorsAlignToAirframe+0x318>)
 800c844:	edd3 7a00 	vldr	s15, [r3]
 800c848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c84c:	4b7f      	ldr	r3, [pc, #508]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c84e:	edc3 7a01 	vstr	s15, [r3, #4]
  R[0][2] = -stheta;
 800c852:	4b79      	ldr	r3, [pc, #484]	@ (800ca38 <sensorsAlignToAirframe+0x30c>)
 800c854:	edd3 7a00 	vldr	s15, [r3]
 800c858:	eef1 7a67 	vneg.f32	s15, s15
 800c85c:	4b7b      	ldr	r3, [pc, #492]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c85e:	edc3 7a02 	vstr	s15, [r3, #8]
  R[1][0] = sphi * stheta * cpsi - cphi * spsi;
 800c862:	4b72      	ldr	r3, [pc, #456]	@ (800ca2c <sensorsAlignToAirframe+0x300>)
 800c864:	ed93 7a00 	vldr	s14, [r3]
 800c868:	4b73      	ldr	r3, [pc, #460]	@ (800ca38 <sensorsAlignToAirframe+0x30c>)
 800c86a:	edd3 7a00 	vldr	s15, [r3]
 800c86e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c872:	4b75      	ldr	r3, [pc, #468]	@ (800ca48 <sensorsAlignToAirframe+0x31c>)
 800c874:	edd3 7a00 	vldr	s15, [r3]
 800c878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c87c:	4b6c      	ldr	r3, [pc, #432]	@ (800ca30 <sensorsAlignToAirframe+0x304>)
 800c87e:	edd3 6a00 	vldr	s13, [r3]
 800c882:	4b70      	ldr	r3, [pc, #448]	@ (800ca44 <sensorsAlignToAirframe+0x318>)
 800c884:	edd3 7a00 	vldr	s15, [r3]
 800c888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c88c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c890:	4b6e      	ldr	r3, [pc, #440]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c892:	edc3 7a03 	vstr	s15, [r3, #12]
  R[1][1] = sphi * stheta * spsi + cphi * cpsi;
 800c896:	4b65      	ldr	r3, [pc, #404]	@ (800ca2c <sensorsAlignToAirframe+0x300>)
 800c898:	ed93 7a00 	vldr	s14, [r3]
 800c89c:	4b66      	ldr	r3, [pc, #408]	@ (800ca38 <sensorsAlignToAirframe+0x30c>)
 800c89e:	edd3 7a00 	vldr	s15, [r3]
 800c8a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8a6:	4b67      	ldr	r3, [pc, #412]	@ (800ca44 <sensorsAlignToAirframe+0x318>)
 800c8a8:	edd3 7a00 	vldr	s15, [r3]
 800c8ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8b0:	4b5f      	ldr	r3, [pc, #380]	@ (800ca30 <sensorsAlignToAirframe+0x304>)
 800c8b2:	edd3 6a00 	vldr	s13, [r3]
 800c8b6:	4b64      	ldr	r3, [pc, #400]	@ (800ca48 <sensorsAlignToAirframe+0x31c>)
 800c8b8:	edd3 7a00 	vldr	s15, [r3]
 800c8bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c8c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c8c4:	4b61      	ldr	r3, [pc, #388]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c8c6:	edc3 7a04 	vstr	s15, [r3, #16]
  R[1][2] = sphi * ctheta;
 800c8ca:	4b58      	ldr	r3, [pc, #352]	@ (800ca2c <sensorsAlignToAirframe+0x300>)
 800c8cc:	ed93 7a00 	vldr	s14, [r3]
 800c8d0:	4b5a      	ldr	r3, [pc, #360]	@ (800ca3c <sensorsAlignToAirframe+0x310>)
 800c8d2:	edd3 7a00 	vldr	s15, [r3]
 800c8d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8da:	4b5c      	ldr	r3, [pc, #368]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c8dc:	edc3 7a05 	vstr	s15, [r3, #20]
  R[2][0] = cphi * stheta * cpsi + sphi * spsi;
 800c8e0:	4b53      	ldr	r3, [pc, #332]	@ (800ca30 <sensorsAlignToAirframe+0x304>)
 800c8e2:	ed93 7a00 	vldr	s14, [r3]
 800c8e6:	4b54      	ldr	r3, [pc, #336]	@ (800ca38 <sensorsAlignToAirframe+0x30c>)
 800c8e8:	edd3 7a00 	vldr	s15, [r3]
 800c8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8f0:	4b55      	ldr	r3, [pc, #340]	@ (800ca48 <sensorsAlignToAirframe+0x31c>)
 800c8f2:	edd3 7a00 	vldr	s15, [r3]
 800c8f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8fa:	4b4c      	ldr	r3, [pc, #304]	@ (800ca2c <sensorsAlignToAirframe+0x300>)
 800c8fc:	edd3 6a00 	vldr	s13, [r3]
 800c900:	4b50      	ldr	r3, [pc, #320]	@ (800ca44 <sensorsAlignToAirframe+0x318>)
 800c902:	edd3 7a00 	vldr	s15, [r3]
 800c906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c90a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c90e:	4b4f      	ldr	r3, [pc, #316]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c910:	edc3 7a06 	vstr	s15, [r3, #24]
  R[2][1] = cphi * stheta * spsi - sphi * cpsi;
 800c914:	4b46      	ldr	r3, [pc, #280]	@ (800ca30 <sensorsAlignToAirframe+0x304>)
 800c916:	ed93 7a00 	vldr	s14, [r3]
 800c91a:	4b47      	ldr	r3, [pc, #284]	@ (800ca38 <sensorsAlignToAirframe+0x30c>)
 800c91c:	edd3 7a00 	vldr	s15, [r3]
 800c920:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c924:	4b47      	ldr	r3, [pc, #284]	@ (800ca44 <sensorsAlignToAirframe+0x318>)
 800c926:	edd3 7a00 	vldr	s15, [r3]
 800c92a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c92e:	4b3f      	ldr	r3, [pc, #252]	@ (800ca2c <sensorsAlignToAirframe+0x300>)
 800c930:	edd3 6a00 	vldr	s13, [r3]
 800c934:	4b44      	ldr	r3, [pc, #272]	@ (800ca48 <sensorsAlignToAirframe+0x31c>)
 800c936:	edd3 7a00 	vldr	s15, [r3]
 800c93a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c93e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c942:	4b42      	ldr	r3, [pc, #264]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c944:	edc3 7a07 	vstr	s15, [r3, #28]
  R[2][2] = cphi * ctheta;
 800c948:	4b39      	ldr	r3, [pc, #228]	@ (800ca30 <sensorsAlignToAirframe+0x304>)
 800c94a:	ed93 7a00 	vldr	s14, [r3]
 800c94e:	4b3b      	ldr	r3, [pc, #236]	@ (800ca3c <sensorsAlignToAirframe+0x310>)
 800c950:	edd3 7a00 	vldr	s15, [r3]
 800c954:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c958:	4b3c      	ldr	r3, [pc, #240]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c95a:	edc3 7a08 	vstr	s15, [r3, #32]

  out->x = in->x*R[0][0] + in->y*R[0][1] + in->z*R[0][2];
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	ed93 7a00 	vldr	s14, [r3]
 800c964:	4b39      	ldr	r3, [pc, #228]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c966:	edd3 7a00 	vldr	s15, [r3]
 800c96a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	edd3 6a01 	vldr	s13, [r3, #4]
 800c974:	4b35      	ldr	r3, [pc, #212]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c976:	edd3 7a01 	vldr	s15, [r3, #4]
 800c97a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c97e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	edd3 6a02 	vldr	s13, [r3, #8]
 800c988:	4b30      	ldr	r3, [pc, #192]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c98a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c98e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c992:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	edc3 7a00 	vstr	s15, [r3]
  out->y = in->x*R[1][0] + in->y*R[1][1] + in->z*R[1][2];
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	ed93 7a00 	vldr	s14, [r3]
 800c9a2:	4b2a      	ldr	r3, [pc, #168]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c9a4:	edd3 7a03 	vldr	s15, [r3, #12]
 800c9a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	edd3 6a01 	vldr	s13, [r3, #4]
 800c9b2:	4b26      	ldr	r3, [pc, #152]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c9b4:	edd3 7a04 	vldr	s15, [r3, #16]
 800c9b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	edd3 6a02 	vldr	s13, [r3, #8]
 800c9c6:	4b21      	ldr	r3, [pc, #132]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c9c8:	edd3 7a05 	vldr	s15, [r3, #20]
 800c9cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = in->x*R[2][0] + in->y*R[2][1] + in->z*R[2][2];
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	ed93 7a00 	vldr	s14, [r3]
 800c9e0:	4b1a      	ldr	r3, [pc, #104]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c9e2:	edd3 7a06 	vldr	s15, [r3, #24]
 800c9e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	edd3 6a01 	vldr	s13, [r3, #4]
 800c9f0:	4b16      	ldr	r3, [pc, #88]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800c9f2:	edd3 7a07 	vldr	s15, [r3, #28]
 800c9f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c9fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	edd3 6a02 	vldr	s13, [r3, #8]
 800ca04:	4b11      	ldr	r3, [pc, #68]	@ (800ca4c <sensorsAlignToAirframe+0x320>)
 800ca06:	edd3 7a08 	vldr	s15, [r3, #32]
 800ca0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ca0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800ca18:	bf00      	nop
 800ca1a:	3708      	adds	r7, #8
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	200082fc 	.word	0x200082fc
 800ca24:	40490fdb 	.word	0x40490fdb
 800ca28:	43340000 	.word	0x43340000
 800ca2c:	20008834 	.word	0x20008834
 800ca30:	20008838 	.word	0x20008838
 800ca34:	20008300 	.word	0x20008300
 800ca38:	2000883c 	.word	0x2000883c
 800ca3c:	20008840 	.word	0x20008840
 800ca40:	20008304 	.word	0x20008304
 800ca44:	20008844 	.word	0x20008844
 800ca48:	20008848 	.word	0x20008848
 800ca4c:	20008308 	.word	0x20008308

0800ca50 <sensorsMpu6500Bmp280SetAccMode>:
//  out->x = ry.x;
//  out->y = ry.y;
//  out->z = ry.z;
//}
void sensorsMpu6500Bmp280SetAccMode(accModes accMode)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b084      	sub	sp, #16
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	71fb      	strb	r3, [r7, #7]
  switch (accMode)
 800ca5a:	79fb      	ldrb	r3, [r7, #7]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d11a      	bne.n	800ca96 <sensorsMpu6500Bmp280SetAccMode+0x46>
  {
    case ACC_MODE_PROPTEST:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_460);
 800ca60:	2000      	movs	r0, #0
 800ca62:	f7fd fe65 	bl	800a730 <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]
 800ca6a:	e010      	b.n	800ca8e <sensorsMpu6500Bmp280SetAccMode+0x3e>
      {
        lpf2pInit(&accLpf[i],  1000, 500);
 800ca6c:	7bfa      	ldrb	r2, [r7, #15]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	1a9b      	subs	r3, r3, r2
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4a17      	ldr	r2, [pc, #92]	@ (800cad4 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800ca78:	4413      	add	r3, r2
 800ca7a:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800cad8 <sensorsMpu6500Bmp280SetAccMode+0x88>
 800ca7e:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800cadc <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800ca82:	4618      	mov	r0, r3
 800ca84:	f006 fd76 	bl	8013574 <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	73fb      	strb	r3, [r7, #15]
 800ca8e:	7bfb      	ldrb	r3, [r7, #15]
 800ca90:	2b02      	cmp	r3, #2
 800ca92:	d9eb      	bls.n	800ca6c <sensorsMpu6500Bmp280SetAccMode+0x1c>
      }
      break;
 800ca94:	e01a      	b.n	800cacc <sensorsMpu6500Bmp280SetAccMode+0x7c>
    case ACC_MODE_FLIGHT:
    default:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_44);
 800ca96:	2003      	movs	r0, #3
 800ca98:	f7fd fe4a 	bl	800a730 <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73bb      	strb	r3, [r7, #14]
 800caa0:	e010      	b.n	800cac4 <sensorsMpu6500Bmp280SetAccMode+0x74>
      {
        lpf2pInit(&accLpf[i],  1000, ACCEL_LPF_CUTOFF_FREQ);
 800caa2:	7bba      	ldrb	r2, [r7, #14]
 800caa4:	4613      	mov	r3, r2
 800caa6:	00db      	lsls	r3, r3, #3
 800caa8:	1a9b      	subs	r3, r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	4a09      	ldr	r2, [pc, #36]	@ (800cad4 <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800caae:	4413      	add	r3, r2
 800cab0:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800cab4:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800cadc <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800cab8:	4618      	mov	r0, r3
 800caba:	f006 fd5b 	bl	8013574 <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800cabe:	7bbb      	ldrb	r3, [r7, #14]
 800cac0:	3301      	adds	r3, #1
 800cac2:	73bb      	strb	r3, [r7, #14]
 800cac4:	7bbb      	ldrb	r3, [r7, #14]
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d9eb      	bls.n	800caa2 <sensorsMpu6500Bmp280SetAccMode+0x52>
      }
      break;
 800caca:	bf00      	nop
  }
}
 800cacc:	bf00      	nop
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	20008250 	.word	0x20008250
 800cad8:	43fa0000 	.word	0x43fa0000
 800cadc:	447a0000 	.word	0x447a0000

0800cae0 <applyAxis3fLpf>:
static void applyAxis3fLpf(lpf2pData *data, Axis3f* in)
{
 800cae0:	b590      	push	{r4, r7, lr}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
 800cae8:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 3; i++) {
 800caea:	2300      	movs	r3, #0
 800caec:	73fb      	strb	r3, [r7, #15]
 800caee:	e01d      	b.n	800cb2c <applyAxis3fLpf+0x4c>
    in->axis[i] = lpf2pApply(&data[i], in->axis[i]);
 800caf0:	7bfa      	ldrb	r2, [r7, #15]
 800caf2:	4613      	mov	r3, r2
 800caf4:	00db      	lsls	r3, r3, #3
 800caf6:	1a9b      	subs	r3, r3, r2
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	461a      	mov	r2, r3
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	1899      	adds	r1, r3, r2
 800cb00:	7bfb      	ldrb	r3, [r7, #15]
 800cb02:	683a      	ldr	r2, [r7, #0]
 800cb04:	009b      	lsls	r3, r3, #2
 800cb06:	4413      	add	r3, r2
 800cb08:	edd3 7a00 	vldr	s15, [r3]
 800cb0c:	7bfc      	ldrb	r4, [r7, #15]
 800cb0e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb12:	4608      	mov	r0, r1
 800cb14:	f006 fdca 	bl	80136ac <lpf2pApply>
 800cb18:	eef0 7a40 	vmov.f32	s15, s0
 800cb1c:	683a      	ldr	r2, [r7, #0]
 800cb1e:	00a3      	lsls	r3, r4, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 3; i++) {
 800cb26:	7bfb      	ldrb	r3, [r7, #15]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	73fb      	strb	r3, [r7, #15]
 800cb2c:	7bfb      	ldrb	r3, [r7, #15]
 800cb2e:	2b02      	cmp	r3, #2
 800cb30:	d9de      	bls.n	800caf0 <applyAxis3fLpf+0x10>
  }
}
 800cb32:	bf00      	nop
 800cb34:	bf00      	nop
 800cb36:	3714      	adds	r7, #20
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd90      	pop	{r4, r7, pc}

0800cb3c <EXTI1_IRQHandler>:
	return testStatus;

}

void __attribute__((used)) EXTI1_IRQHandler(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800cb42:	2300      	movs	r3, #0
 800cb44:	607b      	str	r3, [r7, #4]
	imuIntTimestamp = usecTimestamp();
 800cb46:	f000 f8b3 	bl	800ccb0 <usecTimestamp>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4913      	ldr	r1, [pc, #76]	@ (800cb9c <EXTI1_IRQHandler+0x60>)
 800cb50:	e9c1 2300 	strd	r2, r3, [r1]
    // Check if EXTI line 1 triggered the interrupt
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 800cb54:	4b12      	ldr	r3, [pc, #72]	@ (800cba0 <EXTI1_IRQHandler+0x64>)
 800cb56:	695b      	ldr	r3, [r3, #20]
 800cb58:	f003 0302 	and.w	r3, r3, #2
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d009      	beq.n	800cb74 <EXTI1_IRQHandler+0x38>
    {
        // Clear the interrupt flag
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 800cb60:	4b0f      	ldr	r3, [pc, #60]	@ (800cba0 <EXTI1_IRQHandler+0x64>)
 800cb62:	2202      	movs	r2, #2
 800cb64:	615a      	str	r2, [r3, #20]
    	xSemaphoreGiveFromISR(sensorsDataReady, &xHigherPriorityTaskWoken);
 800cb66:	4b0f      	ldr	r3, [pc, #60]	@ (800cba4 <EXTI1_IRQHandler+0x68>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	1d3a      	adds	r2, r7, #4
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f7f9 fda8 	bl	80066c4 <xQueueGiveFromISR>
    }

	intCounter++;
 800cb74:	4b0c      	ldr	r3, [pc, #48]	@ (800cba8 <EXTI1_IRQHandler+0x6c>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	4a0b      	ldr	r2, [pc, #44]	@ (800cba8 <EXTI1_IRQHandler+0x6c>)
 800cb7c:	6013      	str	r3, [r2, #0]
	if (xHigherPriorityTaskWoken) {
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d007      	beq.n	800cb94 <EXTI1_IRQHandler+0x58>
		portYIELD();
 800cb84:	4b09      	ldr	r3, [pc, #36]	@ (800cbac <EXTI1_IRQHandler+0x70>)
 800cb86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	f3bf 8f6f 	isb	sy
	}

}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20008850 	.word	0x20008850
 800cba0:	40013c00 	.word	0x40013c00
 800cba4:	2000884c 	.word	0x2000884c
 800cba8:	20008858 	.word	0x20008858
 800cbac:	e000ed04 	.word	0xe000ed04

0800cbb0 <__NVIC_EnableIRQ>:
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cbba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	db0b      	blt.n	800cbda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cbc2:	79fb      	ldrb	r3, [r7, #7]
 800cbc4:	f003 021f 	and.w	r2, r3, #31
 800cbc8:	4907      	ldr	r1, [pc, #28]	@ (800cbe8 <__NVIC_EnableIRQ+0x38>)
 800cbca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbce:	095b      	lsrs	r3, r3, #5
 800cbd0:	2001      	movs	r0, #1
 800cbd2:	fa00 f202 	lsl.w	r2, r0, r2
 800cbd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cbda:	bf00      	nop
 800cbdc:	370c      	adds	r7, #12
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	e000e100 	.word	0xe000e100

0800cbec <__NVIC_SetPriority>:
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	6039      	str	r1, [r7, #0]
 800cbf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800cbf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	db0a      	blt.n	800cc16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	490c      	ldr	r1, [pc, #48]	@ (800cc38 <__NVIC_SetPriority+0x4c>)
 800cc06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc0a:	0112      	lsls	r2, r2, #4
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	440b      	add	r3, r1
 800cc10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800cc14:	e00a      	b.n	800cc2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	b2da      	uxtb	r2, r3
 800cc1a:	4908      	ldr	r1, [pc, #32]	@ (800cc3c <__NVIC_SetPriority+0x50>)
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	f003 030f 	and.w	r3, r3, #15
 800cc22:	3b04      	subs	r3, #4
 800cc24:	0112      	lsls	r2, r2, #4
 800cc26:	b2d2      	uxtb	r2, r2
 800cc28:	440b      	add	r3, r1
 800cc2a:	761a      	strb	r2, [r3, #24]
}
 800cc2c:	bf00      	nop
 800cc2e:	370c      	adds	r7, #12
 800cc30:	46bd      	mov	sp, r7
 800cc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc36:	4770      	bx	lr
 800cc38:	e000e100 	.word	0xe000e100
 800cc3c:	e000ed00 	.word	0xe000ed00

0800cc40 <usecTimerInit>:
static bool isInit = false;

static uint32_t usecTimerHighCount;

void usecTimerInit(void)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	af00      	add	r7, sp, #0
  if (isInit) {
 800cc44:	4b16      	ldr	r3, [pc, #88]	@ (800cca0 <usecTimerInit+0x60>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d126      	bne.n	800cc9a <usecTimerInit+0x5a>
    return;
  }

  usecTimerHighCount = 0;
 800cc4c:	4b15      	ldr	r3, [pc, #84]	@ (800cca4 <usecTimerInit+0x64>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]

  // 1. Enable the clock for TIM7
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800cc52:	4b15      	ldr	r3, [pc, #84]	@ (800cca8 <usecTimerInit+0x68>)
 800cc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc56:	4a14      	ldr	r2, [pc, #80]	@ (800cca8 <usecTimerInit+0x68>)
 800cc58:	f043 0320 	orr.w	r3, r3, #32
 800cc5c:	6413      	str	r3, [r2, #64]	@ 0x40

  // 2. Set the prescaler value
  // Assuming the APB1 clock is 42 MHz (84 MHz/2) and you want a 1 kHz timer clock (1 ms per tick)
  TIM7->PSC = 41;  // Prescaler = 42000 - 1
 800cc5e:	4b13      	ldr	r3, [pc, #76]	@ (800ccac <usecTimerInit+0x6c>)
 800cc60:	2229      	movs	r2, #41	@ 0x29
 800cc62:	629a      	str	r2, [r3, #40]	@ 0x28

  // 3. Set the auto-reload value
  TIM7->ARR = 999;  // 1000 ticks -> 1 second (1 ms per tick)
 800cc64:	4b11      	ldr	r3, [pc, #68]	@ (800ccac <usecTimerInit+0x6c>)
 800cc66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800cc6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  // 4. Enable the update interrupt (UIE)
  TIM7->DIER |= TIM_DIER_UIE;
 800cc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ccac <usecTimerInit+0x6c>)
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	4a0e      	ldr	r2, [pc, #56]	@ (800ccac <usecTimerInit+0x6c>)
 800cc72:	f043 0301 	orr.w	r3, r3, #1
 800cc76:	60d3      	str	r3, [r2, #12]

  // 5. Enable the counter
  TIM7->CR1 |= TIM_CR1_CEN;
 800cc78:	4b0c      	ldr	r3, [pc, #48]	@ (800ccac <usecTimerInit+0x6c>)
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a0b      	ldr	r2, [pc, #44]	@ (800ccac <usecTimerInit+0x6c>)
 800cc7e:	f043 0301 	orr.w	r3, r3, #1
 800cc82:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(TIM7_IRQn, 3);
 800cc84:	2103      	movs	r1, #3
 800cc86:	2037      	movs	r0, #55	@ 0x37
 800cc88:	f7ff ffb0 	bl	800cbec <__NVIC_SetPriority>
  // 6. Enable TIM7 interrupt in NVIC
  NVIC_EnableIRQ(TIM7_IRQn);
 800cc8c:	2037      	movs	r0, #55	@ 0x37
 800cc8e:	f7ff ff8f 	bl	800cbb0 <__NVIC_EnableIRQ>
  isInit = true;
 800cc92:	4b03      	ldr	r3, [pc, #12]	@ (800cca0 <usecTimerInit+0x60>)
 800cc94:	2201      	movs	r2, #1
 800cc96:	701a      	strb	r2, [r3, #0]
 800cc98:	e000      	b.n	800cc9c <usecTimerInit+0x5c>
    return;
 800cc9a:	bf00      	nop
}
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	2000885c 	.word	0x2000885c
 800cca4:	20008860 	.word	0x20008860
 800cca8:	40023800 	.word	0x40023800
 800ccac:	40001400 	.word	0x40001400

0800ccb0 <usecTimestamp>:

  TIM7->CNT = 0;
}

uint64_t usecTimestamp(void)
{
 800ccb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ccb4:	b08c      	sub	sp, #48	@ 0x30
 800ccb6:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800ccb8:	4b2b      	ldr	r3, [pc, #172]	@ (800cd68 <usecTimestamp+0xb8>)
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d104      	bne.n	800ccca <usecTimestamp+0x1a>
 800ccc0:	224e      	movs	r2, #78	@ 0x4e
 800ccc2:	492a      	ldr	r1, [pc, #168]	@ (800cd6c <usecTimestamp+0xbc>)
 800ccc4:	482a      	ldr	r0, [pc, #168]	@ (800cd70 <usecTimestamp+0xc0>)
 800ccc6:	f006 fc1b 	bl	8013500 <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 800ccca:	4b2a      	ldr	r3, [pc, #168]	@ (800cd74 <usecTimestamp+0xc4>)
 800cccc:	f3bf 8f5b 	dmb	ish
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f3bf 8f5b 	dmb	ish
 800ccd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t low = TIM7->CNT;
 800ccd8:	4b27      	ldr	r3, [pc, #156]	@ (800cd78 <usecTimestamp+0xc8>)
 800ccda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 800ccde:	4b25      	ldr	r3, [pc, #148]	@ (800cd74 <usecTimestamp+0xc4>)
 800cce0:	f3bf 8f5b 	dmb	ish
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f3bf 8f5b 	dmb	ish
 800ccea:	627b      	str	r3, [r7, #36]	@ 0x24

  // There was no increment in between
  if (high == high0)
 800ccec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d118      	bne.n	800cd26 <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	61bb      	str	r3, [r7, #24]
 800ccfa:	61fa      	str	r2, [r7, #28]
 800ccfc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cd00:	460b      	mov	r3, r1
 800cd02:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800cd06:	460b      	mov	r3, r1
 800cd08:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800cd0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd0e:	2200      	movs	r2, #0
 800cd10:	613b      	str	r3, [r7, #16]
 800cd12:	617a      	str	r2, [r7, #20]
 800cd14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cd18:	460b      	mov	r3, r1
 800cd1a:	eb1a 0403 	adds.w	r4, sl, r3
 800cd1e:	4613      	mov	r3, r2
 800cd20:	eb4b 0503 	adc.w	r5, fp, r3
 800cd24:	e018      	b.n	800cd58 <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	2200      	movs	r2, #0
 800cd2a:	60bb      	str	r3, [r7, #8]
 800cd2c:	60fa      	str	r2, [r7, #12]
 800cd2e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cd32:	460b      	mov	r3, r1
 800cd34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800cd38:	460b      	mov	r3, r1
 800cd3a:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800cd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800cd78 <usecTimestamp+0xc8>)
 800cd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd42:	2200      	movs	r2, #0
 800cd44:	603b      	str	r3, [r7, #0]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cd4c:	460b      	mov	r3, r1
 800cd4e:	eb18 0403 	adds.w	r4, r8, r3
 800cd52:	4613      	mov	r3, r2
 800cd54:	eb49 0503 	adc.w	r5, r9, r3
}
 800cd58:	4622      	mov	r2, r4
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4619      	mov	r1, r3
 800cd60:	3730      	adds	r7, #48	@ 0x30
 800cd62:	46bd      	mov	sp, r7
 800cd64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cd68:	2000885c 	.word	0x2000885c
 800cd6c:	0801b704 	.word	0x0801b704
 800cd70:	0801b71c 	.word	0x0801b71c
 800cd74:	20008860 	.word	0x20008860
 800cd78:	40001400 	.word	0x40001400

0800cd7c <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	af00      	add	r7, sp, #0

    if (TIM7->SR & TIM_SR_UIF) {
 800cd80:	4b0e      	ldr	r3, [pc, #56]	@ (800cdbc <TIM7_IRQHandler+0x40>)
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	f003 0301 	and.w	r3, r3, #1
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d005      	beq.n	800cd98 <TIM7_IRQHandler+0x1c>
        // Clear the update interrupt flag
        TIM7->SR &= ~TIM_SR_UIF;
 800cd8c:	4b0b      	ldr	r3, [pc, #44]	@ (800cdbc <TIM7_IRQHandler+0x40>)
 800cd8e:	691b      	ldr	r3, [r3, #16]
 800cd90:	4a0a      	ldr	r2, [pc, #40]	@ (800cdbc <TIM7_IRQHandler+0x40>)
 800cd92:	f023 0301 	bic.w	r3, r3, #1
 800cd96:	6113      	str	r3, [r2, #16]
    }

  __sync_fetch_and_add(&usecTimerHighCount, 1);
 800cd98:	4b09      	ldr	r3, [pc, #36]	@ (800cdc0 <TIM7_IRQHandler+0x44>)
 800cd9a:	f3bf 8f5b 	dmb	ish
 800cd9e:	e853 1f00 	ldrex	r1, [r3]
 800cda2:	f101 0101 	add.w	r1, r1, #1
 800cda6:	e843 1200 	strex	r2, r1, [r3]
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	d1f7      	bne.n	800cd9e <TIM7_IRQHandler+0x22>
 800cdae:	f3bf 8f5b 	dmb	ish
}
 800cdb2:	bf00      	nop
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdba:	4770      	bx	lr
 800cdbc:	40001400 	.word	0x40001400
 800cdc0:	20008860 	.word	0x20008860

0800cdc4 <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b082      	sub	sp, #8
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 800cdd0:	2220      	movs	r2, #32
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f00b fe25 	bl	8018a24 <memset>
  this->conversionFactor = conversionFactor;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	683a      	ldr	r2, [r7, #0]
 800cdde:	611a      	str	r2, [r3, #16]
}
 800cde0:	bf00      	nop
 800cde2:	3708      	adds	r7, #8
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}

0800cde8 <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	ed93 7a00 	vldr	s14, [r3]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	edd3 7a00 	vldr	s15, [r3]
 800cdfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce0e:	683b      	ldr	r3, [r7, #0]
 800ce10:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	ed93 7a02 	vldr	s14, [r3, #8]
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	edd3 7a02 	vldr	s15, [r3, #8]
 800ce2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	60da      	str	r2, [r3, #12]
}
 800ce3e:	bf00      	nop
 800ce40:	370c      	adds	r7, #12
 800ce42:	46bd      	mov	sp, r7
 800ce44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce48:	4770      	bx	lr

0800ce4a <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 800ce4a:	b480      	push	{r7}
 800ce4c:	b087      	sub	sp, #28
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	68db      	ldr	r3, [r3, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d041      	beq.n	800cede <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	ed93 7a00 	vldr	s14, [r3]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	edd3 7a04 	vldr	s15, [r3, #16]
 800ce66:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	ee07 3a90 	vmov	s15, r3
 800ce72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	edd3 7a04 	vldr	s15, [r3, #16]
 800ce8c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	ee07 3a90 	vmov	s15, r3
 800ce98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ce9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	ed93 7a02 	vldr	s14, [r3, #8]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	edd3 7a04 	vldr	s15, [r3, #16]
 800ceb2:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	461a      	mov	r2, r3
 800ced6:	2300      	movs	r3, #0
 800ced8:	6013      	str	r3, [r2, #0]
 800ceda:	6053      	str	r3, [r2, #4]
 800cedc:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	3314      	adds	r3, #20
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr
	...

0800cef0 <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 800cef0:	b480      	push	{r7}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800cef8:	2300      	movs	r3, #0
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	e058      	b.n	800cfb0 <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 800cefe:	4b31      	ldr	r3, [pc, #196]	@ (800cfc4 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800cf00:	edd3 7a00 	vldr	s15, [r3]
 800cf04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	dd21      	ble.n	800cf52 <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4413      	add	r3, r2
 800cf16:	ed93 7a00 	vldr	s14, [r3]
 800cf1a:	4b2a      	ldr	r3, [pc, #168]	@ (800cfc4 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800cf1c:	edd3 7a00 	vldr	s15, [r3]
 800cf20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf28:	dd01      	ble.n	800cf2e <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e044      	b.n	800cfb8 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	009b      	lsls	r3, r3, #2
 800cf34:	4413      	add	r3, r2
 800cf36:	ed93 7a00 	vldr	s14, [r3]
 800cf3a:	4b22      	ldr	r3, [pc, #136]	@ (800cfc4 <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800cf3c:	edd3 7a00 	vldr	s15, [r3]
 800cf40:	eef1 7a67 	vneg.f32	s15, s15
 800cf44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4c:	d501      	bpl.n	800cf52 <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e032      	b.n	800cfb8 <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800cf52:	4b1d      	ldr	r3, [pc, #116]	@ (800cfc8 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800cf54:	edd3 7a00 	vldr	s15, [r3]
 800cf58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf60:	dd23      	ble.n	800cfaa <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	3303      	adds	r3, #3
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	4413      	add	r3, r2
 800cf6c:	ed93 7a00 	vldr	s14, [r3]
 800cf70:	4b15      	ldr	r3, [pc, #84]	@ (800cfc8 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800cf72:	edd3 7a00 	vldr	s15, [r3]
 800cf76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7e:	dd01      	ble.n	800cf84 <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 800cf80:	2300      	movs	r3, #0
 800cf82:	e019      	b.n	800cfb8 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	3303      	adds	r3, #3
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	4413      	add	r3, r2
 800cf8e:	ed93 7a00 	vldr	s14, [r3]
 800cf92:	4b0d      	ldr	r3, [pc, #52]	@ (800cfc8 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800cf94:	edd3 7a00 	vldr	s15, [r3]
 800cf98:	eef1 7a67 	vneg.f32	s15, s15
 800cf9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800cfa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa4:	d501      	bpl.n	800cfaa <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	e006      	b.n	800cfb8 <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	3301      	adds	r3, #1
 800cfae:	60fb      	str	r3, [r7, #12]
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	dda3      	ble.n	800cefe <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 800cfb6:	2301      	movs	r3, #1
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	3714      	adds	r7, #20
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	20000018 	.word	0x20000018
 800cfc8:	2000001c 	.word	0x2000001c

0800cfcc <estimatorEnqueueTOF>:
  m.data.distance = *distance;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueueTOF(const tofMeasurement_t *tof)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b08e      	sub	sp, #56	@ 0x38
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypeTOF;
 800cfd4:	2304      	movs	r3, #4
 800cfd6:	723b      	strb	r3, [r7, #8]
  m.data.tof = *tof;
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	f107 030c 	add.w	r3, r7, #12
 800cfde:	ca07      	ldmia	r2, {r0, r1, r2}
 800cfe0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  estimatorEnqueue(&m);
 800cfe4:	f107 0308 	add.w	r3, r7, #8
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f001 fa2d 	bl	800e448 <estimatorEnqueue>
}
 800cfee:	bf00      	nop
 800cff0:	3738      	adds	r7, #56	@ 0x38
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <rangeSet>:
#include "estimator.h"

static uint16_t ranges[RANGE_T_END] = {0,};

void rangeSet(rangeDirection_t direction, float range_m)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	ed87 0a00 	vstr	s0, [r7]
 800d004:	71fb      	strb	r3, [r7, #7]
  if (direction > (RANGE_T_END-1)) return;
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2b05      	cmp	r3, #5
 800d00a:	d80f      	bhi.n	800d02c <rangeSet+0x34>

  ranges[direction] = range_m * 1000;
 800d00c:	edd7 7a00 	vldr	s15, [r7]
 800d010:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800d038 <rangeSet+0x40>
 800d014:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d018:	79fb      	ldrb	r3, [r7, #7]
 800d01a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d01e:	ee17 2a90 	vmov	r2, s15
 800d022:	b291      	uxth	r1, r2
 800d024:	4a05      	ldr	r2, [pc, #20]	@ (800d03c <rangeSet+0x44>)
 800d026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800d02a:	e000      	b.n	800d02e <rangeSet+0x36>
  if (direction > (RANGE_T_END-1)) return;
 800d02c:	bf00      	nop
}
 800d02e:	370c      	adds	r7, #12
 800d030:	46bd      	mov	sp, r7
 800d032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d036:	4770      	bx	lr
 800d038:	447a0000 	.word	0x447a0000
 800d03c:	20008864 	.word	0x20008864

0800d040 <rangeEnqueueDownRangeInEstimator>:
    if (direction > (RANGE_T_END-1)) return 0;

  return ranges[direction];
}

void rangeEnqueueDownRangeInEstimator(float distance, float stdDev, uint32_t timeStamp) {
 800d040:	b580      	push	{r7, lr}
 800d042:	b088      	sub	sp, #32
 800d044:	af00      	add	r7, sp, #0
 800d046:	ed87 0a03 	vstr	s0, [r7, #12]
 800d04a:	edc7 0a02 	vstr	s1, [r7, #8]
 800d04e:	6078      	str	r0, [r7, #4]
  tofMeasurement_t tofData;
  tofData.timestamp = timeStamp;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	617b      	str	r3, [r7, #20]
  tofData.distance = distance;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	61bb      	str	r3, [r7, #24]
  tofData.stdDev = stdDev;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	61fb      	str	r3, [r7, #28]
  estimatorEnqueueTOF(&tofData);
 800d05c:	f107 0314 	add.w	r3, r7, #20
 800d060:	4618      	mov	r0, r3
 800d062:	f7ff ffb3 	bl	800cfcc <estimatorEnqueueTOF>
}
 800d066:	bf00      	nop
 800d068:	3720      	adds	r7, #32
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}
	...

0800d070 <sensfusion6Init>:

// TODO: Make math util file
static float invSqrt(float x);

void sensfusion6Init()
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
  if(isInit)
 800d074:	4b06      	ldr	r3, [pc, #24]	@ (800d090 <sensfusion6Init+0x20>)
 800d076:	781b      	ldrb	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d103      	bne.n	800d084 <sensfusion6Init+0x14>
    return;

  isInit = true;
 800d07c:	4b04      	ldr	r3, [pc, #16]	@ (800d090 <sensfusion6Init+0x20>)
 800d07e:	2201      	movs	r2, #1
 800d080:	701a      	strb	r2, [r3, #0]
 800d082:	e000      	b.n	800d086 <sensfusion6Init+0x16>
    return;
 800d084:	bf00      	nop
}
 800d086:	46bd      	mov	sp, r7
 800d088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	20008894 	.word	0x20008894

0800d094 <sensfusion6Test>:

bool sensfusion6Test(void)
{
 800d094:	b480      	push	{r7}
 800d096:	af00      	add	r7, sp, #0
  return isInit;
 800d098:	4b03      	ldr	r3, [pc, #12]	@ (800d0a8 <sensfusion6Test+0x14>)
 800d09a:	781b      	ldrb	r3, [r3, #0]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a4:	4770      	bx	lr
 800d0a6:	bf00      	nop
 800d0a8:	20008894 	.word	0x20008894

0800d0ac <sensfusion6UpdateQ>:

void sensfusion6UpdateQ(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b088      	sub	sp, #32
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	ed87 0a07 	vstr	s0, [r7, #28]
 800d0b6:	edc7 0a06 	vstr	s1, [r7, #24]
 800d0ba:	ed87 1a05 	vstr	s2, [r7, #20]
 800d0be:	edc7 1a04 	vstr	s3, [r7, #16]
 800d0c2:	ed87 2a03 	vstr	s4, [r7, #12]
 800d0c6:	edc7 2a02 	vstr	s5, [r7, #8]
 800d0ca:	ed87 3a01 	vstr	s6, [r7, #4]
  sensfusion6UpdateQImpl(gx, gy, gz, ax, ay, az, dt);
 800d0ce:	ed97 3a01 	vldr	s6, [r7, #4]
 800d0d2:	edd7 2a02 	vldr	s5, [r7, #8]
 800d0d6:	ed97 2a03 	vldr	s4, [r7, #12]
 800d0da:	edd7 1a04 	vldr	s3, [r7, #16]
 800d0de:	ed97 1a05 	vldr	s2, [r7, #20]
 800d0e2:	edd7 0a06 	vldr	s1, [r7, #24]
 800d0e6:	ed97 0a07 	vldr	s0, [r7, #28]
 800d0ea:	f000 f82b 	bl	800d144 <sensfusion6UpdateQImpl>
  estimatedGravityDirection(&gravX, &gravY, &gravZ);
 800d0ee:	4a10      	ldr	r2, [pc, #64]	@ (800d130 <sensfusion6UpdateQ+0x84>)
 800d0f0:	4910      	ldr	r1, [pc, #64]	@ (800d134 <sensfusion6UpdateQ+0x88>)
 800d0f2:	4811      	ldr	r0, [pc, #68]	@ (800d138 <sensfusion6UpdateQ+0x8c>)
 800d0f4:	f000 fc1c 	bl	800d930 <estimatedGravityDirection>

  if (!isCalibrated) {
 800d0f8:	4b10      	ldr	r3, [pc, #64]	@ (800d13c <sensfusion6UpdateQ+0x90>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	f083 0301 	eor.w	r3, r3, #1
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00f      	beq.n	800d126 <sensfusion6UpdateQ+0x7a>
    baseZacc = sensfusion6GetAccZ(ax, ay, az);
 800d106:	ed97 1a02 	vldr	s2, [r7, #8]
 800d10a:	edd7 0a03 	vldr	s1, [r7, #12]
 800d10e:	ed97 0a04 	vldr	s0, [r7, #16]
 800d112:	f000 fbdd 	bl	800d8d0 <sensfusion6GetAccZ>
 800d116:	eef0 7a40 	vmov.f32	s15, s0
 800d11a:	4b09      	ldr	r3, [pc, #36]	@ (800d140 <sensfusion6UpdateQ+0x94>)
 800d11c:	edc3 7a00 	vstr	s15, [r3]
    isCalibrated = true;
 800d120:	4b06      	ldr	r3, [pc, #24]	@ (800d13c <sensfusion6UpdateQ+0x90>)
 800d122:	2201      	movs	r2, #1
 800d124:	701a      	strb	r2, [r3, #0]
  }
}
 800d126:	bf00      	nop
 800d128:	3720      	adds	r7, #32
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20008890 	.word	0x20008890
 800d134:	2000888c 	.word	0x2000888c
 800d138:	20008888 	.word	0x20008888
 800d13c:	20008895 	.word	0x20008895
 800d140:	2000002c 	.word	0x2000002c

0800d144 <sensfusion6UpdateQImpl>:
//
// Date     Author      Notes
// 29/09/2011 SOH Madgwick    Initial release
// 02/10/2011 SOH Madgwick  Optimised for reduced CPU load
static void sensfusion6UpdateQImpl(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b092      	sub	sp, #72	@ 0x48
 800d148:	af00      	add	r7, sp, #0
 800d14a:	ed87 0a07 	vstr	s0, [r7, #28]
 800d14e:	edc7 0a06 	vstr	s1, [r7, #24]
 800d152:	ed87 1a05 	vstr	s2, [r7, #20]
 800d156:	edc7 1a04 	vstr	s3, [r7, #16]
 800d15a:	ed87 2a03 	vstr	s4, [r7, #12]
 800d15e:	edc7 2a02 	vstr	s5, [r7, #8]
 800d162:	ed87 3a01 	vstr	s6, [r7, #4]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = gx * M_PI_F / 180;
 800d166:	edd7 7a07 	vldr	s15, [r7, #28]
 800d16a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800d3d0 <sensfusion6UpdateQImpl+0x28c>
 800d16e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d172:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800d3d4 <sensfusion6UpdateQImpl+0x290>
 800d176:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d17a:	edc7 7a07 	vstr	s15, [r7, #28]
  gy = gy * M_PI_F / 180;
 800d17e:	edd7 7a06 	vldr	s15, [r7, #24]
 800d182:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800d3d0 <sensfusion6UpdateQImpl+0x28c>
 800d186:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d18a:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800d3d4 <sensfusion6UpdateQImpl+0x290>
 800d18e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d192:	edc7 7a06 	vstr	s15, [r7, #24]
  gz = gz * M_PI_F / 180;
 800d196:	edd7 7a05 	vldr	s15, [r7, #20]
 800d19a:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800d3d0 <sensfusion6UpdateQImpl+0x28c>
 800d19e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d1a2:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800d3d4 <sensfusion6UpdateQImpl+0x290>
 800d1a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d1aa:	edc7 7a05 	vstr	s15, [r7, #20]

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800d1ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800d1b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d1b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1ba:	d10e      	bne.n	800d1da <sensfusion6UpdateQImpl+0x96>
 800d1bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c8:	d107      	bne.n	800d1da <sensfusion6UpdateQImpl+0x96>
 800d1ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800d1ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d1d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d6:	f000 8142 	beq.w	800d45e <sensfusion6UpdateQImpl+0x31a>
  {
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800d1da:	edd7 7a04 	vldr	s15, [r7, #16]
 800d1de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d1e2:	edd7 7a03 	vldr	s15, [r7, #12]
 800d1e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d1ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800d1f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d1f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d1fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d1fe:	f000 fb2b 	bl	800d858 <invSqrt>
 800d202:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    ax *= recipNorm;
 800d206:	ed97 7a04 	vldr	s14, [r7, #16]
 800d20a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d20e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d212:	edc7 7a04 	vstr	s15, [r7, #16]
    ay *= recipNorm;
 800d216:	ed97 7a03 	vldr	s14, [r7, #12]
 800d21a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d21e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d222:	edc7 7a03 	vstr	s15, [r7, #12]
    az *= recipNorm;
 800d226:	ed97 7a02 	vldr	s14, [r7, #8]
 800d22a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d22e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d232:	edc7 7a02 	vstr	s15, [r7, #8]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = qx * qz - qw * qy;
 800d236:	4b68      	ldr	r3, [pc, #416]	@ (800d3d8 <sensfusion6UpdateQImpl+0x294>)
 800d238:	ed93 7a00 	vldr	s14, [r3]
 800d23c:	4b67      	ldr	r3, [pc, #412]	@ (800d3dc <sensfusion6UpdateQImpl+0x298>)
 800d23e:	edd3 7a00 	vldr	s15, [r3]
 800d242:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d246:	4b66      	ldr	r3, [pc, #408]	@ (800d3e0 <sensfusion6UpdateQImpl+0x29c>)
 800d248:	edd3 6a00 	vldr	s13, [r3]
 800d24c:	4b65      	ldr	r3, [pc, #404]	@ (800d3e4 <sensfusion6UpdateQImpl+0x2a0>)
 800d24e:	edd3 7a00 	vldr	s15, [r3]
 800d252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d256:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d25a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    halfvy = qw * qx + qy * qz;
 800d25e:	4b60      	ldr	r3, [pc, #384]	@ (800d3e0 <sensfusion6UpdateQImpl+0x29c>)
 800d260:	ed93 7a00 	vldr	s14, [r3]
 800d264:	4b5c      	ldr	r3, [pc, #368]	@ (800d3d8 <sensfusion6UpdateQImpl+0x294>)
 800d266:	edd3 7a00 	vldr	s15, [r3]
 800d26a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d26e:	4b5d      	ldr	r3, [pc, #372]	@ (800d3e4 <sensfusion6UpdateQImpl+0x2a0>)
 800d270:	edd3 6a00 	vldr	s13, [r3]
 800d274:	4b59      	ldr	r3, [pc, #356]	@ (800d3dc <sensfusion6UpdateQImpl+0x298>)
 800d276:	edd3 7a00 	vldr	s15, [r3]
 800d27a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d27e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d282:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    halfvz = qw * qw - 0.5f + qz * qz;
 800d286:	4b56      	ldr	r3, [pc, #344]	@ (800d3e0 <sensfusion6UpdateQImpl+0x29c>)
 800d288:	ed93 7a00 	vldr	s14, [r3]
 800d28c:	4b54      	ldr	r3, [pc, #336]	@ (800d3e0 <sensfusion6UpdateQImpl+0x29c>)
 800d28e:	edd3 7a00 	vldr	s15, [r3]
 800d292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d296:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d29a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800d29e:	4b4f      	ldr	r3, [pc, #316]	@ (800d3dc <sensfusion6UpdateQImpl+0x298>)
 800d2a0:	edd3 6a00 	vldr	s13, [r3]
 800d2a4:	4b4d      	ldr	r3, [pc, #308]	@ (800d3dc <sensfusion6UpdateQImpl+0x298>)
 800d2a6:	edd3 7a00 	vldr	s15, [r3]
 800d2aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2b2:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800d2b6:	ed97 7a03 	vldr	s14, [r7, #12]
 800d2ba:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d2be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2c2:	edd7 6a02 	vldr	s13, [r7, #8]
 800d2c6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800d2ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    halfey = (az * halfvx - ax * halfvz);
 800d2d6:	ed97 7a02 	vldr	s14, [r7, #8]
 800d2da:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800d2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2e2:	edd7 6a04 	vldr	s13, [r7, #16]
 800d2e6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800d2ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    halfez = (ax * halfvy - ay * halfvx);
 800d2f6:	ed97 7a04 	vldr	s14, [r7, #16]
 800d2fa:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800d2fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d302:	edd7 6a03 	vldr	s13, [r7, #12]
 800d306:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800d30a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d30e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d312:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f)
 800d316:	4b34      	ldr	r3, [pc, #208]	@ (800d3e8 <sensfusion6UpdateQImpl+0x2a4>)
 800d318:	edd3 7a00 	vldr	s15, [r3]
 800d31c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d324:	dd68      	ble.n	800d3f8 <sensfusion6UpdateQImpl+0x2b4>
    {
      integralFBx += twoKi * halfex * dt;  // integral error scaled by Ki
 800d326:	4b30      	ldr	r3, [pc, #192]	@ (800d3e8 <sensfusion6UpdateQImpl+0x2a4>)
 800d328:	ed93 7a00 	vldr	s14, [r3]
 800d32c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d330:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d334:	edd7 7a01 	vldr	s15, [r7, #4]
 800d338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33c:	4b2b      	ldr	r3, [pc, #172]	@ (800d3ec <sensfusion6UpdateQImpl+0x2a8>)
 800d33e:	edd3 7a00 	vldr	s15, [r3]
 800d342:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d346:	4b29      	ldr	r3, [pc, #164]	@ (800d3ec <sensfusion6UpdateQImpl+0x2a8>)
 800d348:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * dt;
 800d34c:	4b26      	ldr	r3, [pc, #152]	@ (800d3e8 <sensfusion6UpdateQImpl+0x2a4>)
 800d34e:	ed93 7a00 	vldr	s14, [r3]
 800d352:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d35a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d35e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d362:	4b23      	ldr	r3, [pc, #140]	@ (800d3f0 <sensfusion6UpdateQImpl+0x2ac>)
 800d364:	edd3 7a00 	vldr	s15, [r3]
 800d368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d36c:	4b20      	ldr	r3, [pc, #128]	@ (800d3f0 <sensfusion6UpdateQImpl+0x2ac>)
 800d36e:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * dt;
 800d372:	4b1d      	ldr	r3, [pc, #116]	@ (800d3e8 <sensfusion6UpdateQImpl+0x2a4>)
 800d374:	ed93 7a00 	vldr	s14, [r3]
 800d378:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d37c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d380:	edd7 7a01 	vldr	s15, [r7, #4]
 800d384:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d388:	4b1a      	ldr	r3, [pc, #104]	@ (800d3f4 <sensfusion6UpdateQImpl+0x2b0>)
 800d38a:	edd3 7a00 	vldr	s15, [r3]
 800d38e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d392:	4b18      	ldr	r3, [pc, #96]	@ (800d3f4 <sensfusion6UpdateQImpl+0x2b0>)
 800d394:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx;  // apply integral feedback
 800d398:	4b14      	ldr	r3, [pc, #80]	@ (800d3ec <sensfusion6UpdateQImpl+0x2a8>)
 800d39a:	edd3 7a00 	vldr	s15, [r3]
 800d39e:	ed97 7a07 	vldr	s14, [r7, #28]
 800d3a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3a6:	edc7 7a07 	vstr	s15, [r7, #28]
      gy += integralFBy;
 800d3aa:	4b11      	ldr	r3, [pc, #68]	@ (800d3f0 <sensfusion6UpdateQImpl+0x2ac>)
 800d3ac:	edd3 7a00 	vldr	s15, [r3]
 800d3b0:	ed97 7a06 	vldr	s14, [r7, #24]
 800d3b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3b8:	edc7 7a06 	vstr	s15, [r7, #24]
      gz += integralFBz;
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f4 <sensfusion6UpdateQImpl+0x2b0>)
 800d3be:	edd3 7a00 	vldr	s15, [r3]
 800d3c2:	ed97 7a05 	vldr	s14, [r7, #20]
 800d3c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ca:	edc7 7a05 	vstr	s15, [r7, #20]
 800d3ce:	e01f      	b.n	800d410 <sensfusion6UpdateQImpl+0x2cc>
 800d3d0:	40490fdb 	.word	0x40490fdb
 800d3d4:	43340000 	.word	0x43340000
 800d3d8:	2000887c 	.word	0x2000887c
 800d3dc:	20008884 	.word	0x20008884
 800d3e0:	20000028 	.word	0x20000028
 800d3e4:	20008880 	.word	0x20008880
 800d3e8:	20000024 	.word	0x20000024
 800d3ec:	20008870 	.word	0x20008870
 800d3f0:	20008874 	.word	0x20008874
 800d3f4:	20008878 	.word	0x20008878
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800d3f8:	4b9a      	ldr	r3, [pc, #616]	@ (800d664 <sensfusion6UpdateQImpl+0x520>)
 800d3fa:	f04f 0200 	mov.w	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800d400:	4b99      	ldr	r3, [pc, #612]	@ (800d668 <sensfusion6UpdateQImpl+0x524>)
 800d402:	f04f 0200 	mov.w	r2, #0
 800d406:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800d408:	4b98      	ldr	r3, [pc, #608]	@ (800d66c <sensfusion6UpdateQImpl+0x528>)
 800d40a:	f04f 0200 	mov.w	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800d410:	4b97      	ldr	r3, [pc, #604]	@ (800d670 <sensfusion6UpdateQImpl+0x52c>)
 800d412:	ed93 7a00 	vldr	s14, [r3]
 800d416:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800d41a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d41e:	ed97 7a07 	vldr	s14, [r7, #28]
 800d422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d426:	edc7 7a07 	vstr	s15, [r7, #28]
    gy += twoKp * halfey;
 800d42a:	4b91      	ldr	r3, [pc, #580]	@ (800d670 <sensfusion6UpdateQImpl+0x52c>)
 800d42c:	ed93 7a00 	vldr	s14, [r3]
 800d430:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800d434:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d438:	ed97 7a06 	vldr	s14, [r7, #24]
 800d43c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d440:	edc7 7a06 	vstr	s15, [r7, #24]
    gz += twoKp * halfez;
 800d444:	4b8a      	ldr	r3, [pc, #552]	@ (800d670 <sensfusion6UpdateQImpl+0x52c>)
 800d446:	ed93 7a00 	vldr	s14, [r3]
 800d44a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800d44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d452:	ed97 7a05 	vldr	s14, [r7, #20]
 800d456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d45a:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * dt);   // pre-multiply common factors
 800d45e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d462:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d466:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d46a:	ed97 7a07 	vldr	s14, [r7, #28]
 800d46e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d472:	edc7 7a07 	vstr	s15, [r7, #28]
  gy *= (0.5f * dt);
 800d476:	edd7 7a01 	vldr	s15, [r7, #4]
 800d47a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d47e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d482:	ed97 7a06 	vldr	s14, [r7, #24]
 800d486:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d48a:	edc7 7a06 	vstr	s15, [r7, #24]
  gz *= (0.5f * dt);
 800d48e:	edd7 7a01 	vldr	s15, [r7, #4]
 800d492:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d49a:	ed97 7a05 	vldr	s14, [r7, #20]
 800d49e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4a2:	edc7 7a05 	vstr	s15, [r7, #20]
  qa = qw;
 800d4a6:	4b73      	ldr	r3, [pc, #460]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  qb = qx;
 800d4ac:	4b72      	ldr	r3, [pc, #456]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	627b      	str	r3, [r7, #36]	@ 0x24
  qc = qy;
 800d4b2:	4b72      	ldr	r3, [pc, #456]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	623b      	str	r3, [r7, #32]
  qw += (-qb * gx - qc * gy - qz * gz);
 800d4b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800d4bc:	eeb1 7a67 	vneg.f32	s14, s15
 800d4c0:	edd7 7a07 	vldr	s15, [r7, #28]
 800d4c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4c8:	edd7 6a08 	vldr	s13, [r7, #32]
 800d4cc:	edd7 7a06 	vldr	s15, [r7, #24]
 800d4d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4d8:	4b69      	ldr	r3, [pc, #420]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d4da:	edd3 6a00 	vldr	s13, [r3]
 800d4de:	edd7 7a05 	vldr	s15, [r7, #20]
 800d4e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d4ea:	4b62      	ldr	r3, [pc, #392]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d4ec:	edd3 7a00 	vldr	s15, [r3]
 800d4f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d4f4:	4b5f      	ldr	r3, [pc, #380]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d4f6:	edc3 7a00 	vstr	s15, [r3]
  qx += (qa * gx + qc * gz - qz * gy);
 800d4fa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d4fe:	edd7 7a07 	vldr	s15, [r7, #28]
 800d502:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d506:	edd7 6a08 	vldr	s13, [r7, #32]
 800d50a:	edd7 7a05 	vldr	s15, [r7, #20]
 800d50e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d512:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d516:	4b5a      	ldr	r3, [pc, #360]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d518:	edd3 6a00 	vldr	s13, [r3]
 800d51c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d524:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d528:	4b53      	ldr	r3, [pc, #332]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d52a:	edd3 7a00 	vldr	s15, [r3]
 800d52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d532:	4b51      	ldr	r3, [pc, #324]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d534:	edc3 7a00 	vstr	s15, [r3]
  qy += (qa * gy - qb * gz + qz * gx);
 800d538:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d53c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d540:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d544:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800d548:	edd7 7a05 	vldr	s15, [r7, #20]
 800d54c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d550:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d554:	4b4a      	ldr	r3, [pc, #296]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d556:	edd3 6a00 	vldr	s13, [r3]
 800d55a:	edd7 7a07 	vldr	s15, [r7, #28]
 800d55e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d562:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d566:	4b45      	ldr	r3, [pc, #276]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d568:	edd3 7a00 	vldr	s15, [r3]
 800d56c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d570:	4b42      	ldr	r3, [pc, #264]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d572:	edc3 7a00 	vstr	s15, [r3]
  qz += (qa * gz + qb * gy - qc * gx);
 800d576:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800d57a:	edd7 7a05 	vldr	s15, [r7, #20]
 800d57e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d582:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800d586:	edd7 7a06 	vldr	s15, [r7, #24]
 800d58a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d58e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d592:	edd7 6a08 	vldr	s13, [r7, #32]
 800d596:	edd7 7a07 	vldr	s15, [r7, #28]
 800d59a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d59e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d5a2:	4b37      	ldr	r3, [pc, #220]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d5a4:	edd3 7a00 	vldr	s15, [r3]
 800d5a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5ac:	4b34      	ldr	r3, [pc, #208]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d5ae:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 800d5b2:	4b30      	ldr	r3, [pc, #192]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d5b4:	ed93 7a00 	vldr	s14, [r3]
 800d5b8:	4b2e      	ldr	r3, [pc, #184]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d5ba:	edd3 7a00 	vldr	s15, [r3]
 800d5be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5c2:	4b2d      	ldr	r3, [pc, #180]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d5c4:	edd3 6a00 	vldr	s13, [r3]
 800d5c8:	4b2b      	ldr	r3, [pc, #172]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d5ca:	edd3 7a00 	vldr	s15, [r3]
 800d5ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5d6:	4b29      	ldr	r3, [pc, #164]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d5d8:	edd3 6a00 	vldr	s13, [r3]
 800d5dc:	4b27      	ldr	r3, [pc, #156]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d5de:	edd3 7a00 	vldr	s15, [r3]
 800d5e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d5ea:	4b25      	ldr	r3, [pc, #148]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d5ec:	edd3 6a00 	vldr	s13, [r3]
 800d5f0:	4b23      	ldr	r3, [pc, #140]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d5f2:	edd3 7a00 	vldr	s15, [r3]
 800d5f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5fe:	eeb0 0a67 	vmov.f32	s0, s15
 800d602:	f000 f929 	bl	800d858 <invSqrt>
 800d606:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
  qw *= recipNorm;
 800d60a:	4b1a      	ldr	r3, [pc, #104]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d60c:	ed93 7a00 	vldr	s14, [r3]
 800d610:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d614:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d618:	4b16      	ldr	r3, [pc, #88]	@ (800d674 <sensfusion6UpdateQImpl+0x530>)
 800d61a:	edc3 7a00 	vstr	s15, [r3]
  qx *= recipNorm;
 800d61e:	4b16      	ldr	r3, [pc, #88]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d620:	ed93 7a00 	vldr	s14, [r3]
 800d624:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d62c:	4b12      	ldr	r3, [pc, #72]	@ (800d678 <sensfusion6UpdateQImpl+0x534>)
 800d62e:	edc3 7a00 	vstr	s15, [r3]
  qy *= recipNorm;
 800d632:	4b12      	ldr	r3, [pc, #72]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d634:	ed93 7a00 	vldr	s14, [r3]
 800d638:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d63c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d640:	4b0e      	ldr	r3, [pc, #56]	@ (800d67c <sensfusion6UpdateQImpl+0x538>)
 800d642:	edc3 7a00 	vstr	s15, [r3]
  qz *= recipNorm;
 800d646:	4b0e      	ldr	r3, [pc, #56]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d648:	ed93 7a00 	vldr	s14, [r3]
 800d64c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800d650:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d654:	4b0a      	ldr	r3, [pc, #40]	@ (800d680 <sensfusion6UpdateQImpl+0x53c>)
 800d656:	edc3 7a00 	vstr	s15, [r3]
}
 800d65a:	bf00      	nop
 800d65c:	3748      	adds	r7, #72	@ 0x48
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}
 800d662:	bf00      	nop
 800d664:	20008870 	.word	0x20008870
 800d668:	20008874 	.word	0x20008874
 800d66c:	20008878 	.word	0x20008878
 800d670:	20000020 	.word	0x20000020
 800d674:	20000028 	.word	0x20000028
 800d678:	2000887c 	.word	0x2000887c
 800d67c:	20008880 	.word	0x20008880
 800d680:	20008884 	.word	0x20008884

0800d684 <sensfusion6GetQuaternion>:
#endif

void sensfusion6GetQuaternion(float* q_x, float* q_y, float* q_z, float* q_w)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	60b9      	str	r1, [r7, #8]
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	603b      	str	r3, [r7, #0]
  *q_x = qx;
 800d692:	4b0b      	ldr	r3, [pc, #44]	@ (800d6c0 <sensfusion6GetQuaternion+0x3c>)
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	601a      	str	r2, [r3, #0]
  *q_y = qy;
 800d69a:	4b0a      	ldr	r3, [pc, #40]	@ (800d6c4 <sensfusion6GetQuaternion+0x40>)
 800d69c:	681a      	ldr	r2, [r3, #0]
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	601a      	str	r2, [r3, #0]
  *q_z = qz;
 800d6a2:	4b09      	ldr	r3, [pc, #36]	@ (800d6c8 <sensfusion6GetQuaternion+0x44>)
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	601a      	str	r2, [r3, #0]
  *q_w = qw;
 800d6aa:	4b08      	ldr	r3, [pc, #32]	@ (800d6cc <sensfusion6GetQuaternion+0x48>)
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	601a      	str	r2, [r3, #0]
}
 800d6b2:	bf00      	nop
 800d6b4:	3714      	adds	r7, #20
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6bc:	4770      	bx	lr
 800d6be:	bf00      	nop
 800d6c0:	2000887c 	.word	0x2000887c
 800d6c4:	20008880 	.word	0x20008880
 800d6c8:	20008884 	.word	0x20008884
 800d6cc:	20000028 	.word	0x20000028

0800d6d0 <sensfusion6GetEulerRPY>:

void sensfusion6GetEulerRPY(float* roll, float* pitch, float* yaw)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b088      	sub	sp, #32
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60f8      	str	r0, [r7, #12]
 800d6d8:	60b9      	str	r1, [r7, #8]
 800d6da:	607a      	str	r2, [r7, #4]
  float gx = gravX;
 800d6dc:	4b44      	ldr	r3, [pc, #272]	@ (800d7f0 <sensfusion6GetEulerRPY+0x120>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	61fb      	str	r3, [r7, #28]
  float gy = gravY;
 800d6e2:	4b44      	ldr	r3, [pc, #272]	@ (800d7f4 <sensfusion6GetEulerRPY+0x124>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	61bb      	str	r3, [r7, #24]
  float gz = gravZ;
 800d6e8:	4b43      	ldr	r3, [pc, #268]	@ (800d7f8 <sensfusion6GetEulerRPY+0x128>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	617b      	str	r3, [r7, #20]

  if (gx>1) gx=1;
 800d6ee:	edd7 7a07 	vldr	s15, [r7, #28]
 800d6f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d6f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fe:	dd02      	ble.n	800d706 <sensfusion6GetEulerRPY+0x36>
 800d700:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800d704:	61fb      	str	r3, [r7, #28]
  if (gx<-1) gx=-1;
 800d706:	edd7 7a07 	vldr	s15, [r7, #28]
 800d70a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800d70e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d716:	d501      	bpl.n	800d71c <sensfusion6GetEulerRPY+0x4c>
 800d718:	4b38      	ldr	r3, [pc, #224]	@ (800d7fc <sensfusion6GetEulerRPY+0x12c>)
 800d71a:	61fb      	str	r3, [r7, #28]

  *yaw = -atan2f(2*(qw*qz + qx*qy), (+1.0f - 2.0f * (qy*qy + qz*qz))) * 180 / M_PI_F;
 800d71c:	4b38      	ldr	r3, [pc, #224]	@ (800d800 <sensfusion6GetEulerRPY+0x130>)
 800d71e:	ed93 7a00 	vldr	s14, [r3]
 800d722:	4b38      	ldr	r3, [pc, #224]	@ (800d804 <sensfusion6GetEulerRPY+0x134>)
 800d724:	edd3 7a00 	vldr	s15, [r3]
 800d728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d72c:	4b36      	ldr	r3, [pc, #216]	@ (800d808 <sensfusion6GetEulerRPY+0x138>)
 800d72e:	edd3 6a00 	vldr	s13, [r3]
 800d732:	4b36      	ldr	r3, [pc, #216]	@ (800d80c <sensfusion6GetEulerRPY+0x13c>)
 800d734:	edd3 7a00 	vldr	s15, [r3]
 800d738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d73c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d740:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800d744:	4b31      	ldr	r3, [pc, #196]	@ (800d80c <sensfusion6GetEulerRPY+0x13c>)
 800d746:	ed93 7a00 	vldr	s14, [r3]
 800d74a:	4b30      	ldr	r3, [pc, #192]	@ (800d80c <sensfusion6GetEulerRPY+0x13c>)
 800d74c:	edd3 7a00 	vldr	s15, [r3]
 800d750:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d754:	4b2b      	ldr	r3, [pc, #172]	@ (800d804 <sensfusion6GetEulerRPY+0x134>)
 800d756:	edd3 6a00 	vldr	s13, [r3]
 800d75a:	4b2a      	ldr	r3, [pc, #168]	@ (800d804 <sensfusion6GetEulerRPY+0x134>)
 800d75c:	edd3 7a00 	vldr	s15, [r3]
 800d760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d764:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d768:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d76c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d770:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d774:	eef0 0a67 	vmov.f32	s1, s15
 800d778:	eeb0 0a46 	vmov.f32	s0, s12
 800d77c:	f00b f9fe 	bl	8018b7c <atan2f>
 800d780:	eef0 7a40 	vmov.f32	s15, s0
 800d784:	eef1 7a67 	vneg.f32	s15, s15
 800d788:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800d810 <sensfusion6GetEulerRPY+0x140>
 800d78c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d790:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800d814 <sensfusion6GetEulerRPY+0x144>
 800d794:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	edc3 7a00 	vstr	s15, [r3]
  *pitch = asinf(gx) * 180 / M_PI_F; //Pitch seems to be inverted
 800d79e:	ed97 0a07 	vldr	s0, [r7, #28]
 800d7a2:	f00b f9bf 	bl	8018b24 <asinf>
 800d7a6:	eef0 7a40 	vmov.f32	s15, s0
 800d7aa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800d810 <sensfusion6GetEulerRPY+0x140>
 800d7ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d7b2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800d814 <sensfusion6GetEulerRPY+0x144>
 800d7b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	edc3 7a00 	vstr	s15, [r3]
  *roll = atan2f(gy, gz) * 180 / M_PI_F;
 800d7c0:	edd7 0a05 	vldr	s1, [r7, #20]
 800d7c4:	ed97 0a06 	vldr	s0, [r7, #24]
 800d7c8:	f00b f9d8 	bl	8018b7c <atan2f>
 800d7cc:	eef0 7a40 	vmov.f32	s15, s0
 800d7d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800d810 <sensfusion6GetEulerRPY+0x140>
 800d7d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d7d8:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800d814 <sensfusion6GetEulerRPY+0x144>
 800d7dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	edc3 7a00 	vstr	s15, [r3]
}
 800d7e6:	bf00      	nop
 800d7e8:	3720      	adds	r7, #32
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	20008888 	.word	0x20008888
 800d7f4:	2000888c 	.word	0x2000888c
 800d7f8:	20008890 	.word	0x20008890
 800d7fc:	bf800000 	.word	0xbf800000
 800d800:	20000028 	.word	0x20000028
 800d804:	20008884 	.word	0x20008884
 800d808:	2000887c 	.word	0x2000887c
 800d80c:	20008880 	.word	0x20008880
 800d810:	43340000 	.word	0x43340000
 800d814:	40490fdb 	.word	0x40490fdb

0800d818 <sensfusion6GetAccZWithoutGravity>:

float sensfusion6GetAccZWithoutGravity(const float ax, const float ay, const float az)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	ed87 0a03 	vstr	s0, [r7, #12]
 800d822:	edc7 0a02 	vstr	s1, [r7, #8]
 800d826:	ed87 1a01 	vstr	s2, [r7, #4]
  return sensfusion6GetAccZ(ax, ay, az) - baseZacc;
 800d82a:	ed97 1a01 	vldr	s2, [r7, #4]
 800d82e:	edd7 0a02 	vldr	s1, [r7, #8]
 800d832:	ed97 0a03 	vldr	s0, [r7, #12]
 800d836:	f000 f84b 	bl	800d8d0 <sensfusion6GetAccZ>
 800d83a:	eeb0 7a40 	vmov.f32	s14, s0
 800d83e:	4b05      	ldr	r3, [pc, #20]	@ (800d854 <sensfusion6GetAccZWithoutGravity+0x3c>)
 800d840:	edd3 7a00 	vldr	s15, [r3]
 800d844:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800d848:	eeb0 0a67 	vmov.f32	s0, s15
 800d84c:	3710      	adds	r7, #16
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	2000002c 	.word	0x2000002c

0800d858 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x)
{
 800d858:	b480      	push	{r7}
 800d85a:	b087      	sub	sp, #28
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800d862:	edd7 7a01 	vldr	s15, [r7, #4]
 800d866:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800d86a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d86e:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 800d876:	f107 0310 	add.w	r3, r7, #16
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i>>1);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	105a      	asrs	r2, r3, #1
 800d882:	4b12      	ldr	r3, [pc, #72]	@ (800d8cc <invSqrt+0x74>)
 800d884:	1a9b      	subs	r3, r3, r2
 800d886:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 800d888:	f107 030c 	add.w	r3, r7, #12
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800d890:	ed97 7a04 	vldr	s14, [r7, #16]
 800d894:	edd7 7a05 	vldr	s15, [r7, #20]
 800d898:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d89c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8a4:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800d8a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d8ac:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8b4:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	ee07 3a90 	vmov	s15, r3
}
 800d8be:	eeb0 0a67 	vmov.f32	s0, s15
 800d8c2:	371c      	adds	r7, #28
 800d8c4:	46bd      	mov	sp, r7
 800d8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ca:	4770      	bx	lr
 800d8cc:	5f3759df 	.word	0x5f3759df

0800d8d0 <sensfusion6GetAccZ>:

static float sensfusion6GetAccZ(const float ax, const float ay, const float az)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	ed87 0a03 	vstr	s0, [r7, #12]
 800d8da:	edc7 0a02 	vstr	s1, [r7, #8]
 800d8de:	ed87 1a01 	vstr	s2, [r7, #4]
  // return vertical acceleration
  // (A dot G) / |G|,  (|G| = 1) -> (A dot G)
  return (ax * gravX + ay * gravY + az * gravZ);
 800d8e2:	4b10      	ldr	r3, [pc, #64]	@ (800d924 <sensfusion6GetAccZ+0x54>)
 800d8e4:	ed93 7a00 	vldr	s14, [r3]
 800d8e8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8f0:	4b0d      	ldr	r3, [pc, #52]	@ (800d928 <sensfusion6GetAccZ+0x58>)
 800d8f2:	edd3 6a00 	vldr	s13, [r3]
 800d8f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d8fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d902:	4b0a      	ldr	r3, [pc, #40]	@ (800d92c <sensfusion6GetAccZ+0x5c>)
 800d904:	edd3 6a00 	vldr	s13, [r3]
 800d908:	edd7 7a01 	vldr	s15, [r7, #4]
 800d90c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d910:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800d914:	eeb0 0a67 	vmov.f32	s0, s15
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	20008888 	.word	0x20008888
 800d928:	2000888c 	.word	0x2000888c
 800d92c:	20008890 	.word	0x20008890

0800d930 <estimatedGravityDirection>:

static void estimatedGravityDirection(float* gx, float* gy, float* gz)
{
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	60f8      	str	r0, [r7, #12]
 800d938:	60b9      	str	r1, [r7, #8]
 800d93a:	607a      	str	r2, [r7, #4]
  *gx = 2 * (qx * qz - qw * qy);
 800d93c:	4b2e      	ldr	r3, [pc, #184]	@ (800d9f8 <estimatedGravityDirection+0xc8>)
 800d93e:	ed93 7a00 	vldr	s14, [r3]
 800d942:	4b2e      	ldr	r3, [pc, #184]	@ (800d9fc <estimatedGravityDirection+0xcc>)
 800d944:	edd3 7a00 	vldr	s15, [r3]
 800d948:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d94c:	4b2c      	ldr	r3, [pc, #176]	@ (800da00 <estimatedGravityDirection+0xd0>)
 800d94e:	edd3 6a00 	vldr	s13, [r3]
 800d952:	4b2c      	ldr	r3, [pc, #176]	@ (800da04 <estimatedGravityDirection+0xd4>)
 800d954:	edd3 7a00 	vldr	s15, [r3]
 800d958:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d95c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d960:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	edc3 7a00 	vstr	s15, [r3]
  *gy = 2 * (qw * qx + qy * qz);
 800d96a:	4b25      	ldr	r3, [pc, #148]	@ (800da00 <estimatedGravityDirection+0xd0>)
 800d96c:	ed93 7a00 	vldr	s14, [r3]
 800d970:	4b21      	ldr	r3, [pc, #132]	@ (800d9f8 <estimatedGravityDirection+0xc8>)
 800d972:	edd3 7a00 	vldr	s15, [r3]
 800d976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d97a:	4b22      	ldr	r3, [pc, #136]	@ (800da04 <estimatedGravityDirection+0xd4>)
 800d97c:	edd3 6a00 	vldr	s13, [r3]
 800d980:	4b1e      	ldr	r3, [pc, #120]	@ (800d9fc <estimatedGravityDirection+0xcc>)
 800d982:	edd3 7a00 	vldr	s15, [r3]
 800d986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d98a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d98e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	edc3 7a00 	vstr	s15, [r3]
  *gz = qw * qw - qx * qx - qy * qy + qz * qz;
 800d998:	4b19      	ldr	r3, [pc, #100]	@ (800da00 <estimatedGravityDirection+0xd0>)
 800d99a:	ed93 7a00 	vldr	s14, [r3]
 800d99e:	4b18      	ldr	r3, [pc, #96]	@ (800da00 <estimatedGravityDirection+0xd0>)
 800d9a0:	edd3 7a00 	vldr	s15, [r3]
 800d9a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9a8:	4b13      	ldr	r3, [pc, #76]	@ (800d9f8 <estimatedGravityDirection+0xc8>)
 800d9aa:	edd3 6a00 	vldr	s13, [r3]
 800d9ae:	4b12      	ldr	r3, [pc, #72]	@ (800d9f8 <estimatedGravityDirection+0xc8>)
 800d9b0:	edd3 7a00 	vldr	s15, [r3]
 800d9b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9bc:	4b11      	ldr	r3, [pc, #68]	@ (800da04 <estimatedGravityDirection+0xd4>)
 800d9be:	edd3 6a00 	vldr	s13, [r3]
 800d9c2:	4b10      	ldr	r3, [pc, #64]	@ (800da04 <estimatedGravityDirection+0xd4>)
 800d9c4:	edd3 7a00 	vldr	s15, [r3]
 800d9c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d9d0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9fc <estimatedGravityDirection+0xcc>)
 800d9d2:	edd3 6a00 	vldr	s13, [r3]
 800d9d6:	4b09      	ldr	r3, [pc, #36]	@ (800d9fc <estimatedGravityDirection+0xcc>)
 800d9d8:	edd3 7a00 	vldr	s15, [r3]
 800d9dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	edc3 7a00 	vstr	s15, [r3]
}
 800d9ea:	bf00      	nop
 800d9ec:	3714      	adds	r7, #20
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	2000887c 	.word	0x2000887c
 800d9fc:	20008884 	.word	0x20008884
 800da00:	20000028 	.word	0x20000028
 800da04:	20008880 	.word	0x20008880

0800da08 <quatcompress>:
#include <stdint.h>
#include <math.h>

// assumes input quaternion is normalized. will fail if not.
static inline uint32_t quatcompress(float const q[4])
{
 800da08:	b480      	push	{r7}
 800da0a:	b08b      	sub	sp, #44	@ 0x2c
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
	// we send the values of the quaternion's smallest 3 elements.
	unsigned i_largest = 0;
 800da10:	2300      	movs	r3, #0
 800da12:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800da14:	2301      	movs	r3, #1
 800da16:	623b      	str	r3, [r7, #32]
 800da18:	e019      	b.n	800da4e <quatcompress+0x46>
		if (fabsf(q[i]) > fabsf(q[i_largest])) {
 800da1a:	6a3b      	ldr	r3, [r7, #32]
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	4413      	add	r3, r2
 800da22:	edd3 7a00 	vldr	s15, [r3]
 800da26:	eeb0 7ae7 	vabs.f32	s14, s15
 800da2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da2c:	009b      	lsls	r3, r3, #2
 800da2e:	687a      	ldr	r2, [r7, #4]
 800da30:	4413      	add	r3, r2
 800da32:	edd3 7a00 	vldr	s15, [r3]
 800da36:	eef0 7ae7 	vabs.f32	s15, s15
 800da3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da42:	dd01      	ble.n	800da48 <quatcompress+0x40>
			i_largest = i;
 800da44:	6a3b      	ldr	r3, [r7, #32]
 800da46:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	3301      	adds	r3, #1
 800da4c:	623b      	str	r3, [r7, #32]
 800da4e:	6a3b      	ldr	r3, [r7, #32]
 800da50:	2b03      	cmp	r3, #3
 800da52:	d9e2      	bls.n	800da1a <quatcompress+0x12>
	}

	// since -q represents the same rotation as q,
	// transform the quaternion so the largest element is positive.
	// this avoids having to send its sign bit.
	unsigned negate = q[i_largest] < 0;
 800da54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	4413      	add	r3, r2
 800da5c:	edd3 7a00 	vldr	s15, [r3]
 800da60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da68:	bf4c      	ite	mi
 800da6a:	2301      	movmi	r3, #1
 800da6c:	2300      	movpl	r3, #0
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	617b      	str	r3, [r7, #20]

	// 1/sqrt(2) is the largest possible value 
	// of the second-largest element in a unit quaternion.

	// do compression using sign bit and 9-bit precision per element.
	uint32_t comp = i_largest;
 800da72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da74:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800da76:	2300      	movs	r3, #0
 800da78:	61bb      	str	r3, [r7, #24]
 800da7a:	e039      	b.n	800daf0 <quatcompress+0xe8>
		if (i != i_largest) {
 800da7c:	69ba      	ldr	r2, [r7, #24]
 800da7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da80:	429a      	cmp	r2, r3
 800da82:	d032      	beq.n	800daea <quatcompress+0xe2>
			unsigned negbit = (q[i] < 0) ^ negate;
 800da84:	69bb      	ldr	r3, [r7, #24]
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	4413      	add	r3, r2
 800da8c:	edd3 7a00 	vldr	s15, [r3]
 800da90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800da94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da98:	bf4c      	ite	mi
 800da9a:	2301      	movmi	r3, #1
 800da9c:	2300      	movpl	r3, #0
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	461a      	mov	r2, r3
 800daa2:	697b      	ldr	r3, [r7, #20]
 800daa4:	4053      	eors	r3, r2
 800daa6:	613b      	str	r3, [r7, #16]
			unsigned mag = ((1 << 9) - 1) * (fabsf(q[i]) / (float)M_SQRT1_2) + 0.5f;
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	4413      	add	r3, r2
 800dab0:	edd3 7a00 	vldr	s15, [r3]
 800dab4:	eeb0 7ae7 	vabs.f32	s14, s15
 800dab8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800db04 <quatcompress+0xfc>
 800dabc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800dac0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800db08 <quatcompress+0x100>
 800dac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dac8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800dacc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dad4:	ee17 3a90 	vmov	r3, s15
 800dad8:	60fb      	str	r3, [r7, #12]
			comp = (comp << 10) | (negbit << 9) | mag;
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	029a      	lsls	r2, r3, #10
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	025b      	lsls	r3, r3, #9
 800dae2:	4313      	orrs	r3, r2
 800dae4:	68fa      	ldr	r2, [r7, #12]
 800dae6:	4313      	orrs	r3, r2
 800dae8:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	3301      	adds	r3, #1
 800daee:	61bb      	str	r3, [r7, #24]
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	2b03      	cmp	r3, #3
 800daf4:	d9c2      	bls.n	800da7c <quatcompress+0x74>
		}
	}

	return comp;
 800daf6:	69fb      	ldr	r3, [r7, #28]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	372c      	adds	r7, #44	@ 0x2c
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	3f3504f3 	.word	0x3f3504f3
 800db08:	43ff8000 	.word	0x43ff8000

0800db0c <calcSensorToOutputLatency>:
STATIC_MEM_TASK_ALLOC(stabilizerTask, STABILIZER_TASK_STACKSIZE);

static void stabilizerTask(void* param);

static void calcSensorToOutputLatency(const sensorData_t *sensorData)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  uint64_t outTimestamp = usecTimestamp();
 800db14:	f7ff f8cc 	bl	800ccb0 <usecTimestamp>
 800db18:	e9c7 0102 	strd	r0, r1, [r7, #8]
  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;
 800db1c:	68b9      	ldr	r1, [r7, #8]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800db24:	4613      	mov	r3, r2
 800db26:	1acb      	subs	r3, r1, r3
 800db28:	4a02      	ldr	r2, [pc, #8]	@ (800db34 <calcSensorToOutputLatency+0x28>)
 800db2a:	6013      	str	r3, [r2, #0]
}
 800db2c:	bf00      	nop
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	20008898 	.word	0x20008898

0800db38 <compressState>:

static void compressState()
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
  stateCompressed.x = state.position.x * 1000.0f;
 800db3e:	4b6a      	ldr	r3, [pc, #424]	@ (800dce8 <compressState+0x1b0>)
 800db40:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800db44:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800dcec <compressState+0x1b4>
 800db48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db50:	ee17 3a90 	vmov	r3, s15
 800db54:	b21a      	sxth	r2, r3
 800db56:	4b66      	ldr	r3, [pc, #408]	@ (800dcf0 <compressState+0x1b8>)
 800db58:	801a      	strh	r2, [r3, #0]
  stateCompressed.y = state.position.y * 1000.0f;
 800db5a:	4b63      	ldr	r3, [pc, #396]	@ (800dce8 <compressState+0x1b0>)
 800db5c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800db60:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800dcec <compressState+0x1b4>
 800db64:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db6c:	ee17 3a90 	vmov	r3, s15
 800db70:	b21a      	sxth	r2, r3
 800db72:	4b5f      	ldr	r3, [pc, #380]	@ (800dcf0 <compressState+0x1b8>)
 800db74:	805a      	strh	r2, [r3, #2]
  stateCompressed.z = state.position.z * 1000.0f;
 800db76:	4b5c      	ldr	r3, [pc, #368]	@ (800dce8 <compressState+0x1b0>)
 800db78:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800db7c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800dcec <compressState+0x1b4>
 800db80:	ee67 7a87 	vmul.f32	s15, s15, s14
 800db84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db88:	ee17 3a90 	vmov	r3, s15
 800db8c:	b21a      	sxth	r2, r3
 800db8e:	4b58      	ldr	r3, [pc, #352]	@ (800dcf0 <compressState+0x1b8>)
 800db90:	809a      	strh	r2, [r3, #4]

  stateCompressed.vx = state.velocity.x * 1000.0f;
 800db92:	4b55      	ldr	r3, [pc, #340]	@ (800dce8 <compressState+0x1b0>)
 800db94:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800db98:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800dcec <compressState+0x1b4>
 800db9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dba0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dba4:	ee17 3a90 	vmov	r3, s15
 800dba8:	b21a      	sxth	r2, r3
 800dbaa:	4b51      	ldr	r3, [pc, #324]	@ (800dcf0 <compressState+0x1b8>)
 800dbac:	80da      	strh	r2, [r3, #6]
  stateCompressed.vy = state.velocity.y * 1000.0f;
 800dbae:	4b4e      	ldr	r3, [pc, #312]	@ (800dce8 <compressState+0x1b0>)
 800dbb0:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800dbb4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800dcec <compressState+0x1b4>
 800dbb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbc0:	ee17 3a90 	vmov	r3, s15
 800dbc4:	b21a      	sxth	r2, r3
 800dbc6:	4b4a      	ldr	r3, [pc, #296]	@ (800dcf0 <compressState+0x1b8>)
 800dbc8:	811a      	strh	r2, [r3, #8]
  stateCompressed.vz = state.velocity.z * 1000.0f;
 800dbca:	4b47      	ldr	r3, [pc, #284]	@ (800dce8 <compressState+0x1b0>)
 800dbcc:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800dbd0:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800dcec <compressState+0x1b4>
 800dbd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dbdc:	ee17 3a90 	vmov	r3, s15
 800dbe0:	b21a      	sxth	r2, r3
 800dbe2:	4b43      	ldr	r3, [pc, #268]	@ (800dcf0 <compressState+0x1b8>)
 800dbe4:	815a      	strh	r2, [r3, #10]

  stateCompressed.ax = state.acc.x * 9.81f * 1000.0f;
 800dbe6:	4b40      	ldr	r3, [pc, #256]	@ (800dce8 <compressState+0x1b0>)
 800dbe8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800dbec:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800dcf4 <compressState+0x1bc>
 800dbf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbf4:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800dcec <compressState+0x1b4>
 800dbf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dbfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc00:	ee17 3a90 	vmov	r3, s15
 800dc04:	b21a      	sxth	r2, r3
 800dc06:	4b3a      	ldr	r3, [pc, #232]	@ (800dcf0 <compressState+0x1b8>)
 800dc08:	819a      	strh	r2, [r3, #12]
  stateCompressed.ay = state.acc.y * 9.81f * 1000.0f;
 800dc0a:	4b37      	ldr	r3, [pc, #220]	@ (800dce8 <compressState+0x1b0>)
 800dc0c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800dc10:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800dcf4 <compressState+0x1bc>
 800dc14:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc18:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800dcec <compressState+0x1b4>
 800dc1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc24:	ee17 3a90 	vmov	r3, s15
 800dc28:	b21a      	sxth	r2, r3
 800dc2a:	4b31      	ldr	r3, [pc, #196]	@ (800dcf0 <compressState+0x1b8>)
 800dc2c:	81da      	strh	r2, [r3, #14]
  stateCompressed.az = (state.acc.z + 1) * 9.81f * 1000.0f;
 800dc2e:	4b2e      	ldr	r3, [pc, #184]	@ (800dce8 <compressState+0x1b0>)
 800dc30:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800dc34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc38:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc3c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800dcf4 <compressState+0x1bc>
 800dc40:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc44:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800dcec <compressState+0x1b4>
 800dc48:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dc4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc50:	ee17 3a90 	vmov	r3, s15
 800dc54:	b21a      	sxth	r2, r3
 800dc56:	4b26      	ldr	r3, [pc, #152]	@ (800dcf0 <compressState+0x1b8>)
 800dc58:	821a      	strh	r2, [r3, #16]

  float const q[4] = {
    state.attitudeQuaternion.x,
 800dc5a:	4b23      	ldr	r3, [pc, #140]	@ (800dce8 <compressState+0x1b0>)
 800dc5c:	691b      	ldr	r3, [r3, #16]
  float const q[4] = {
 800dc5e:	607b      	str	r3, [r7, #4]
    state.attitudeQuaternion.y,
 800dc60:	4b21      	ldr	r3, [pc, #132]	@ (800dce8 <compressState+0x1b0>)
 800dc62:	695b      	ldr	r3, [r3, #20]
  float const q[4] = {
 800dc64:	60bb      	str	r3, [r7, #8]
    state.attitudeQuaternion.z,
 800dc66:	4b20      	ldr	r3, [pc, #128]	@ (800dce8 <compressState+0x1b0>)
 800dc68:	699b      	ldr	r3, [r3, #24]
  float const q[4] = {
 800dc6a:	60fb      	str	r3, [r7, #12]
    state.attitudeQuaternion.w};
 800dc6c:	4b1e      	ldr	r3, [pc, #120]	@ (800dce8 <compressState+0x1b0>)
 800dc6e:	69db      	ldr	r3, [r3, #28]
  float const q[4] = {
 800dc70:	613b      	str	r3, [r7, #16]
  stateCompressed.quat = quatcompress(q);
 800dc72:	1d3b      	adds	r3, r7, #4
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff fec7 	bl	800da08 <quatcompress>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	4b1c      	ldr	r3, [pc, #112]	@ (800dcf0 <compressState+0x1b8>)
 800dc80:	615a      	str	r2, [r3, #20]

  float const deg2millirad = ((float)M_PI * 1000.0f) / 180.0f;
 800dc82:	4b1d      	ldr	r3, [pc, #116]	@ (800dcf8 <compressState+0x1c0>)
 800dc84:	617b      	str	r3, [r7, #20]
  stateCompressed.rateRoll = sensorData.gyro.x * deg2millirad;
 800dc86:	4b1d      	ldr	r3, [pc, #116]	@ (800dcfc <compressState+0x1c4>)
 800dc88:	ed93 7a03 	vldr	s14, [r3, #12]
 800dc8c:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dc98:	ee17 3a90 	vmov	r3, s15
 800dc9c:	b21a      	sxth	r2, r3
 800dc9e:	4b14      	ldr	r3, [pc, #80]	@ (800dcf0 <compressState+0x1b8>)
 800dca0:	831a      	strh	r2, [r3, #24]
  stateCompressed.ratePitch = -sensorData.gyro.y * deg2millirad;
 800dca2:	4b16      	ldr	r3, [pc, #88]	@ (800dcfc <compressState+0x1c4>)
 800dca4:	edd3 7a04 	vldr	s15, [r3, #16]
 800dca8:	eeb1 7a67 	vneg.f32	s14, s15
 800dcac:	edd7 7a05 	vldr	s15, [r7, #20]
 800dcb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcb8:	ee17 3a90 	vmov	r3, s15
 800dcbc:	b21a      	sxth	r2, r3
 800dcbe:	4b0c      	ldr	r3, [pc, #48]	@ (800dcf0 <compressState+0x1b8>)
 800dcc0:	835a      	strh	r2, [r3, #26]
  stateCompressed.rateYaw = sensorData.gyro.z * deg2millirad;
 800dcc2:	4b0e      	ldr	r3, [pc, #56]	@ (800dcfc <compressState+0x1c4>)
 800dcc4:	ed93 7a05 	vldr	s14, [r3, #20]
 800dcc8:	edd7 7a05 	vldr	s15, [r7, #20]
 800dccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dcd4:	ee17 3a90 	vmov	r3, s15
 800dcd8:	b21a      	sxth	r2, r3
 800dcda:	4b05      	ldr	r3, [pc, #20]	@ (800dcf0 <compressState+0x1b8>)
 800dcdc:	839a      	strh	r2, [r3, #28]
}
 800dcde:	bf00      	nop
 800dce0:	3718      	adds	r7, #24
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20008948 	.word	0x20008948
 800dcec:	447a0000 	.word	0x447a0000
 800dcf0:	200089b8 	.word	0x200089b8
 800dcf4:	411cf5c3 	.word	0x411cf5c3
 800dcf8:	418ba058 	.word	0x418ba058
 800dcfc:	20008910 	.word	0x20008910

0800dd00 <compressSetpoint>:

static void compressSetpoint()
{
 800dd00:	b480      	push	{r7}
 800dd02:	af00      	add	r7, sp, #0
  setpointCompressed.x = setpoint.position.x * 1000.0f;
 800dd04:	4b41      	ldr	r3, [pc, #260]	@ (800de0c <compressSetpoint+0x10c>)
 800dd06:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800dd0a:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800de10 <compressSetpoint+0x110>
 800dd0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd16:	ee17 3a90 	vmov	r3, s15
 800dd1a:	b21a      	sxth	r2, r3
 800dd1c:	4b3d      	ldr	r3, [pc, #244]	@ (800de14 <compressSetpoint+0x114>)
 800dd1e:	801a      	strh	r2, [r3, #0]
  setpointCompressed.y = setpoint.position.y * 1000.0f;
 800dd20:	4b3a      	ldr	r3, [pc, #232]	@ (800de0c <compressSetpoint+0x10c>)
 800dd22:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800dd26:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800de10 <compressSetpoint+0x110>
 800dd2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd32:	ee17 3a90 	vmov	r3, s15
 800dd36:	b21a      	sxth	r2, r3
 800dd38:	4b36      	ldr	r3, [pc, #216]	@ (800de14 <compressSetpoint+0x114>)
 800dd3a:	805a      	strh	r2, [r3, #2]
  setpointCompressed.z = setpoint.position.z * 1000.0f;
 800dd3c:	4b33      	ldr	r3, [pc, #204]	@ (800de0c <compressSetpoint+0x10c>)
 800dd3e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800dd42:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800de10 <compressSetpoint+0x110>
 800dd46:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd4e:	ee17 3a90 	vmov	r3, s15
 800dd52:	b21a      	sxth	r2, r3
 800dd54:	4b2f      	ldr	r3, [pc, #188]	@ (800de14 <compressSetpoint+0x114>)
 800dd56:	809a      	strh	r2, [r3, #4]

  setpointCompressed.vx = setpoint.velocity.x * 1000.0f;
 800dd58:	4b2c      	ldr	r3, [pc, #176]	@ (800de0c <compressSetpoint+0x10c>)
 800dd5a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800dd5e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800de10 <compressSetpoint+0x110>
 800dd62:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd6a:	ee17 3a90 	vmov	r3, s15
 800dd6e:	b21a      	sxth	r2, r3
 800dd70:	4b28      	ldr	r3, [pc, #160]	@ (800de14 <compressSetpoint+0x114>)
 800dd72:	80da      	strh	r2, [r3, #6]
  setpointCompressed.vy = setpoint.velocity.y * 1000.0f;
 800dd74:	4b25      	ldr	r3, [pc, #148]	@ (800de0c <compressSetpoint+0x10c>)
 800dd76:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800dd7a:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800de10 <compressSetpoint+0x110>
 800dd7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd86:	ee17 3a90 	vmov	r3, s15
 800dd8a:	b21a      	sxth	r2, r3
 800dd8c:	4b21      	ldr	r3, [pc, #132]	@ (800de14 <compressSetpoint+0x114>)
 800dd8e:	811a      	strh	r2, [r3, #8]
  setpointCompressed.vz = setpoint.velocity.z * 1000.0f;
 800dd90:	4b1e      	ldr	r3, [pc, #120]	@ (800de0c <compressSetpoint+0x10c>)
 800dd92:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800dd96:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800de10 <compressSetpoint+0x110>
 800dd9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dda2:	ee17 3a90 	vmov	r3, s15
 800dda6:	b21a      	sxth	r2, r3
 800dda8:	4b1a      	ldr	r3, [pc, #104]	@ (800de14 <compressSetpoint+0x114>)
 800ddaa:	815a      	strh	r2, [r3, #10]

  setpointCompressed.ax = setpoint.acceleration.x * 1000.0f;
 800ddac:	4b17      	ldr	r3, [pc, #92]	@ (800de0c <compressSetpoint+0x10c>)
 800ddae:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800ddb2:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800de10 <compressSetpoint+0x110>
 800ddb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddbe:	ee17 3a90 	vmov	r3, s15
 800ddc2:	b21a      	sxth	r2, r3
 800ddc4:	4b13      	ldr	r3, [pc, #76]	@ (800de14 <compressSetpoint+0x114>)
 800ddc6:	819a      	strh	r2, [r3, #12]
  setpointCompressed.ay = setpoint.acceleration.y * 1000.0f;
 800ddc8:	4b10      	ldr	r3, [pc, #64]	@ (800de0c <compressSetpoint+0x10c>)
 800ddca:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800ddce:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800de10 <compressSetpoint+0x110>
 800ddd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddda:	ee17 3a90 	vmov	r3, s15
 800ddde:	b21a      	sxth	r2, r3
 800dde0:	4b0c      	ldr	r3, [pc, #48]	@ (800de14 <compressSetpoint+0x114>)
 800dde2:	81da      	strh	r2, [r3, #14]
  setpointCompressed.az = setpoint.acceleration.z * 1000.0f;
 800dde4:	4b09      	ldr	r3, [pc, #36]	@ (800de0c <compressSetpoint+0x10c>)
 800dde6:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800ddea:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800de10 <compressSetpoint+0x110>
 800ddee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddf6:	ee17 3a90 	vmov	r3, s15
 800ddfa:	b21a      	sxth	r2, r3
 800ddfc:	4b05      	ldr	r3, [pc, #20]	@ (800de14 <compressSetpoint+0x114>)
 800ddfe:	821a      	strh	r2, [r3, #16]
}
 800de00:	bf00      	nop
 800de02:	46bd      	mov	sp, r7
 800de04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de08:	4770      	bx	lr
 800de0a:	bf00      	nop
 800de0c:	2000889c 	.word	0x2000889c
 800de10:	447a0000 	.word	0x447a0000
 800de14:	200089d8 	.word	0x200089d8

0800de18 <stabilizerInit>:

void stabilizerInit(StateEstimatorType estimator)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af04      	add	r7, sp, #16
 800de1e:	4603      	mov	r3, r0
 800de20:	71fb      	strb	r3, [r7, #7]
  if(isInit)
 800de22:	4b13      	ldr	r3, [pc, #76]	@ (800de70 <stabilizerInit+0x58>)
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d11d      	bne.n	800de66 <stabilizerInit+0x4e>
    return;
//  skip = 1;//JH

  sensorsInit();
 800de2a:	f7fd fb5f 	bl	800b4ec <sensorsInit>
//  skip = 1;// NJH

  stateEstimatorInit(estimator);
 800de2e:	79fb      	ldrb	r3, [r7, #7]
 800de30:	4618      	mov	r0, r3
 800de32:	f000 fa41 	bl	800e2b8 <stateEstimatorInit>

//  controllerInit(ControllerTypeAutoSelect);
//  powerDistributionInit();
//  motorsInit(platformConfigGetMotorMapping());
//  collisionAvoidanceInit();
  estimatorType = stateEstimatorGetType();
 800de36:	f000 fa8b 	bl	800e350 <stateEstimatorGetType>
 800de3a:	4603      	mov	r3, r0
 800de3c:	461a      	mov	r2, r3
 800de3e:	4b0d      	ldr	r3, [pc, #52]	@ (800de74 <stabilizerInit+0x5c>)
 800de40:	701a      	strb	r2, [r3, #0]
//  skip = 1;
//  controllerType = controllerGetType();

  STATIC_MEM_TASK_CREATE(stabilizerTask, stabilizerTask, STABILIZER_TASK_NAME, NULL, STABILIZER_TASK_PRI);
 800de42:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800de46:	461a      	mov	r2, r3
 800de48:	4b0b      	ldr	r3, [pc, #44]	@ (800de78 <stabilizerInit+0x60>)
 800de4a:	9302      	str	r3, [sp, #8]
 800de4c:	4b0b      	ldr	r3, [pc, #44]	@ (800de7c <stabilizerInit+0x64>)
 800de4e:	9301      	str	r3, [sp, #4]
 800de50:	2305      	movs	r3, #5
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	2300      	movs	r3, #0
 800de56:	490a      	ldr	r1, [pc, #40]	@ (800de80 <stabilizerInit+0x68>)
 800de58:	480a      	ldr	r0, [pc, #40]	@ (800de84 <stabilizerInit+0x6c>)
 800de5a:	f7f9 f833 	bl	8006ec4 <xTaskCreateStatic>

  isInit = true;
 800de5e:	4b04      	ldr	r3, [pc, #16]	@ (800de70 <stabilizerInit+0x58>)
 800de60:	2201      	movs	r2, #1
 800de62:	701a      	strb	r2, [r3, #0]
 800de64:	e000      	b.n	800de68 <stabilizerInit+0x50>
    return;
 800de66:	bf00      	nop
}
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
 800de6e:	bf00      	nop
 800de70:	20008896 	.word	0x20008896
 800de74:	20008998 	.word	0x20008998
 800de78:	10001da4 	.word	0x10001da4
 800de7c:	200089ec 	.word	0x200089ec
 800de80:	0801b724 	.word	0x0801b724
 800de84:	0800dee9 	.word	0x0800dee9

0800de88 <stabilizerTest>:

bool stabilizerTest(void)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
  bool pass = true;
 800de8e:	2301      	movs	r3, #1
 800de90:	71fb      	strb	r3, [r7, #7]

//  pass &= sensorsTest();
  pass &= stateEstimatorTest();
 800de92:	f000 faa7 	bl	800e3e4 <stateEstimatorTest>
 800de96:	4603      	mov	r3, r0
 800de98:	461a      	mov	r2, r3
 800de9a:	79fb      	ldrb	r3, [r7, #7]
 800de9c:	4013      	ands	r3, r2
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	bf14      	ite	ne
 800dea2:	2301      	movne	r3, #1
 800dea4:	2300      	moveq	r3, #0
 800dea6:	71fb      	strb	r3, [r7, #7]
//  pass &= controllerTest();
//  pass &= powerDistributionTest();
//  pass &= motorsTest();
//  pass &= collisionAvoidanceTest();

  return pass;
 800dea8:	79fb      	ldrb	r3, [r7, #7]
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3708      	adds	r7, #8
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}
	...

0800deb4 <updateStateEstimatorAndControllerTypes>:
//  motorsSetRatio(MOTOR_M2, motorPwm->motors.m2);
//  motorsSetRatio(MOTOR_M3, motorPwm->motors.m3);
//  motorsSetRatio(MOTOR_M4, motorPwm->motors.m4);
//}

static void updateStateEstimatorAndControllerTypes() {
 800deb4:	b580      	push	{r7, lr}
 800deb6:	af00      	add	r7, sp, #0
  if (stateEstimatorGetType() != estimatorType) {
 800deb8:	f000 fa4a 	bl	800e350 <stateEstimatorGetType>
 800debc:	4603      	mov	r3, r0
 800debe:	461a      	mov	r2, r3
 800dec0:	4b08      	ldr	r3, [pc, #32]	@ (800dee4 <updateStateEstimatorAndControllerTypes+0x30>)
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d00a      	beq.n	800dede <updateStateEstimatorAndControllerTypes+0x2a>
    stateEstimatorSwitchTo(estimatorType);
 800dec8:	4b06      	ldr	r3, [pc, #24]	@ (800dee4 <updateStateEstimatorAndControllerTypes+0x30>)
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f000 fa13 	bl	800e2f8 <stateEstimatorSwitchTo>
    estimatorType = stateEstimatorGetType();
 800ded2:	f000 fa3d 	bl	800e350 <stateEstimatorGetType>
 800ded6:	4603      	mov	r3, r0
 800ded8:	461a      	mov	r2, r3
 800deda:	4b02      	ldr	r3, [pc, #8]	@ (800dee4 <updateStateEstimatorAndControllerTypes+0x30>)
 800dedc:	701a      	strb	r2, [r3, #0]

//  if (controllerGetType() != controllerType) {
//    controllerInit(controllerType);
//    controllerType = controllerGetType();
//  }
}
 800dede:	bf00      	nop
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	20008998 	.word	0x20008998

0800dee8 <stabilizerTask>:
/* The stabilizer loop runs at 1kHz. It is the
 * responsibility of the different functions to run slower by skipping call
 * (ie. returning without modifying the output structure).
 */
static void stabilizerTask(void* param)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af02      	add	r7, sp, #8
 800deee:	6078      	str	r0, [r7, #4]
  stabilizerStep_t stabilizerStep;
  uint32_t lastWakeTime;
  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);
 800def0:	2103      	movs	r1, #3
 800def2:	2000      	movs	r0, #0
 800def4:	f7f9 fc22 	bl	800773c <vTaskSetApplicationTaskTag>

  //Wait for the system to be fully started to start stabilization loop
  systemWaitStart();
 800def8:	f000 f94a 	bl	800e190 <systemWaitStart>

//  DEBUG_PRINT("Wait for sensor calibration...\n");

  // Wait for sensors to be calibrated
  lastWakeTime = xTaskGetTickCount();
 800defc:	f7f9 fb50 	bl	80075a0 <xTaskGetTickCount>
 800df00:	4603      	mov	r3, r0
 800df02:	60bb      	str	r3, [r7, #8]
  while(!sensorsAreCalibrated()) {
 800df04:	e005      	b.n	800df12 <stabilizerTask+0x2a>
    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));
 800df06:	f107 0308 	add.w	r3, r7, #8
 800df0a:	2101      	movs	r1, #1
 800df0c:	4618      	mov	r0, r3
 800df0e:	f7f9 f981 	bl	8007214 <vTaskDelayUntil>
  while(!sensorsAreCalibrated()) {
 800df12:	f7fd fb0d 	bl	800b530 <sensorsAreCalibrated>
 800df16:	4603      	mov	r3, r0
 800df18:	f083 0301 	eor.w	r3, r3, #1
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1f1      	bne.n	800df06 <stabilizerTask+0x1e>
  }
  // Initialize stabilizerStep to something else than 0
  stabilizerStep = 1;
 800df22:	2301      	movs	r3, #1
 800df24:	60fb      	str	r3, [r7, #12]


//  DEBUG_PRINT("Starting stabilizer loop\n");
  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997, 1003, 1);
 800df26:	f7f9 fb3b 	bl	80075a0 <xTaskGetTickCount>
 800df2a:	4601      	mov	r1, r0
 800df2c:	2301      	movs	r3, #1
 800df2e:	9301      	str	r3, [sp, #4]
 800df30:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	f240 33e5 	movw	r3, #997	@ 0x3e5
 800df3a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800df3e:	480d      	ldr	r0, [pc, #52]	@ (800df74 <stabilizerTask+0x8c>)
 800df40:	f005 fc4f 	bl	80137e2 <rateSupervisorInit>

  while(1) {
    // The sensor should unlock at 1kHz
    sensorsWaitDataReady();
 800df44:	f7fd fb10 	bl	800b568 <sensorsWaitDataReady>

    // update sensorData struct (for logging variables)
    sensorsAcquire(&sensorData);
 800df48:	480b      	ldr	r0, [pc, #44]	@ (800df78 <stabilizerTask+0x90>)
 800df4a:	f7fd fafd 	bl	800b548 <sensorsAcquire>

//    if (healthShallWeRunTest()) {
//      healthRunTests(&sensorData);
//    }
//    else {
      updateStateEstimatorAndControllerTypes();
 800df4e:	f7ff ffb1 	bl	800deb4 <updateStateEstimatorAndControllerTypes>

      stateEstimator(&state, stabilizerStep);
 800df52:	68f9      	ldr	r1, [r7, #12]
 800df54:	4809      	ldr	r0, [pc, #36]	@ (800df7c <stabilizerTask+0x94>)
 800df56:	f000 fa5b 	bl	800e410 <stateEstimator>
//      } else {
//        motorsStop();
//      }

      // Compute compressed log formats
      compressState();
 800df5a:	f7ff fded 	bl	800db38 <compressState>
      compressSetpoint();
 800df5e:	f7ff fecf 	bl	800dd00 <compressSetpoint>
          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer
          && RATE_DO_EXECUTE(usddeckFrequency(), stabilizerStep)) {
        usddeckTriggerLogging();
      }
#endif
      calcSensorToOutputLatency(&sensorData);
 800df62:	4805      	ldr	r0, [pc, #20]	@ (800df78 <stabilizerTask+0x90>)
 800df64:	f7ff fdd2 	bl	800db0c <calcSensorToOutputLatency>
      stabilizerStep++;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	3301      	adds	r3, #1
 800df6c:	60fb      	str	r3, [r7, #12]
    sensorsWaitDataReady();
 800df6e:	bf00      	nop
 800df70:	e7e8      	b.n	800df44 <stabilizerTask+0x5c>
 800df72:	bf00      	nop
 800df74:	2000899c 	.word	0x2000899c
 800df78:	20008910 	.word	0x20008910
 800df7c:	20008948 	.word	0x20008948

0800df80 <vApplicationGetIdleTaskMemory>:
 * used by the Idle task.
 */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 800df80:	b480      	push	{r7}
 800df82:	b085      	sub	sp, #20
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xIdleTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	4a07      	ldr	r2, [pc, #28]	@ (800dfac <vApplicationGetIdleTaskMemory+0x2c>)
 800df90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	4a06      	ldr	r2, [pc, #24]	@ (800dfb0 <vApplicationGetIdleTaskMemory+0x30>)
 800df96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	2296      	movs	r2, #150	@ 0x96
 800df9c:	601a      	str	r2, [r3, #0]
}
 800df9e:	bf00      	nop
 800dfa0:	3714      	adds	r7, #20
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	10001e08 	.word	0x10001e08
 800dfb0:	10001e6c 	.word	0x10001e6c

0800dfb4 <vApplicationGetTimerTaskMemory>:
 * to provide the memory that is used by the Timer service task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b085      	sub	sp, #20
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	60f8      	str	r0, [r7, #12]
 800dfbc:	60b9      	str	r1, [r7, #8]
 800dfbe:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xTimerTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	4a07      	ldr	r2, [pc, #28]	@ (800dfe0 <vApplicationGetTimerTaskMemory+0x2c>)
 800dfc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800dfc6:	68bb      	ldr	r3, [r7, #8]
 800dfc8:	4a06      	ldr	r2, [pc, #24]	@ (800dfe4 <vApplicationGetTimerTaskMemory+0x30>)
 800dfca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800dfd2:	601a      	str	r2, [r3, #0]
}
 800dfd4:	bf00      	nop
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr
 800dfe0:	100020c4 	.word	0x100020c4
 800dfe4:	10002128 	.word	0x10002128

0800dfe8 <systemLaunch>:

static void systemTask(void *arg);


void systemLaunch(void)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 800dfee:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800dff2:	461a      	mov	r2, r3
 800dff4:	4b06      	ldr	r3, [pc, #24]	@ (800e010 <systemLaunch+0x28>)
 800dff6:	9302      	str	r3, [sp, #8]
 800dff8:	4b06      	ldr	r3, [pc, #24]	@ (800e014 <systemLaunch+0x2c>)
 800dffa:	9301      	str	r3, [sp, #4]
 800dffc:	2302      	movs	r3, #2
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	2300      	movs	r3, #0
 800e002:	4905      	ldr	r1, [pc, #20]	@ (800e018 <systemLaunch+0x30>)
 800e004:	4805      	ldr	r0, [pc, #20]	@ (800e01c <systemLaunch+0x34>)
 800e006:	f7f8 ff5d 	bl	8006ec4 <xTaskCreateStatic>
}
 800e00a:	bf00      	nop
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	10002a88 	.word	0x10002a88
 800e014:	200090f8 	.word	0x200090f8
 800e018:	0801b730 	.word	0x0801b730
 800e01c:	0800e095 	.word	0x0800e095

0800e020 <systemInit>:
void systemInit(void)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	af00      	add	r7, sp, #0

	if (isInit) return;
 800e024:	4b0c      	ldr	r3, [pc, #48]	@ (800e058 <systemInit+0x38>)
 800e026:	781b      	ldrb	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d113      	bne.n	800e054 <systemInit+0x34>

	canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 800e02c:	490b      	ldr	r1, [pc, #44]	@ (800e05c <systemInit+0x3c>)
 800e02e:	2001      	movs	r0, #1
 800e030:	f7f8 f97f 	bl	8006332 <xQueueCreateMutexStatic>
 800e034:	4603      	mov	r3, r0
 800e036:	4a0a      	ldr	r2, [pc, #40]	@ (800e060 <systemInit+0x40>)
 800e038:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800e03a:	4b09      	ldr	r3, [pc, #36]	@ (800e060 <systemInit+0x40>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f04f 31ff 	mov.w	r1, #4294967295
 800e042:	4618      	mov	r0, r3
 800e044:	f7f8 fcae 	bl	80069a4 <xQueueSemaphoreTake>

	workerInit();
 800e048:	f000 f8ea 	bl	800e220 <workerInit>

	isInit = true;
 800e04c:	4b02      	ldr	r3, [pc, #8]	@ (800e058 <systemInit+0x38>)
 800e04e:	2201      	movs	r2, #1
 800e050:	701a      	strb	r2, [r3, #0]
 800e052:	e000      	b.n	800e056 <systemInit+0x36>
	if (isInit) return;
 800e054:	bf00      	nop
}
 800e056:	bd80      	pop	{r7, pc}
 800e058:	200090f4 	.word	0x200090f4
 800e05c:	200095ac 	.word	0x200095ac
 800e060:	200095a8 	.word	0x200095a8

0800e064 <systemTest>:
bool systemTest(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b082      	sub	sp, #8
 800e068:	af00      	add	r7, sp, #0
	bool pass=isInit;
 800e06a:	4b09      	ldr	r3, [pc, #36]	@ (800e090 <systemTest+0x2c>)
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	71fb      	strb	r3, [r7, #7]
	pass &= workerTest();
 800e070:	f000 f8f4 	bl	800e25c <workerTest>
 800e074:	4603      	mov	r3, r0
 800e076:	461a      	mov	r2, r3
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	4013      	ands	r3, r2
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	bf14      	ite	ne
 800e080:	2301      	movne	r3, #1
 800e082:	2300      	moveq	r3, #0
 800e084:	71fb      	strb	r3, [r7, #7]

	return pass;
 800e086:	79fb      	ldrb	r3, [r7, #7]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}
 800e090:	200090f4 	.word	0x200090f4

0800e094 <systemTask>:
void systemTask(void *arg) {
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
	bool pass = true;
 800e09c:	2301      	movs	r3, #1
 800e09e:	73fb      	strb	r3, [r7, #15]
//	counter += 1; // JUMP HERE
	ledInit();
 800e0a0:	f7fc fa5a 	bl	800a558 <ledInit>
//		vTaskDelay(1);
//	}
//	HAL_Init();
	//JH

	usecTimerInit();
 800e0a4:	f7fe fdcc 	bl	800cc40 <usecTimerInit>
	GPIO_Init();
 800e0a8:	f7fc f8f4 	bl	800a294 <GPIO_Init>
	TIM3_DMA_Init();
 800e0ac:	f7fc fe0c 	bl	800acc8 <TIM3_DMA_Init>
	uart_dma_init();
 800e0b0:	f7fd f866 	bl	800b180 <uart_dma_init>
	TIM4_Init();
 800e0b4:	f7fc fe40 	bl	800ad38 <TIM4_Init>
	TIM3_Init();
 800e0b8:	f7fc fc2e 	bl	800a918 <TIM3_Init>
	MX_USART1_UART_Init();
 800e0bc:	f7fc feb2 	bl	800ae24 <MX_USART1_UART_Init>

	hal_dshot_init(DSHOT600);
 800e0c0:	2002      	movs	r0, #2
 800e0c2:	f7fb fee7 	bl	8009e94 <hal_dshot_init>
	vTaskDelay(10);
 800e0c6:	200a      	movs	r0, #10
 800e0c8:	f7f9 f91a 	bl	8007300 <vTaskDelay>
	hal_ibus_init();
 800e0cc:	f7fb fdf8 	bl	8009cc0 <hal_ibus_init>
//	flage_rc = 1;
	// JH
	vTaskDelay(10);
 800e0d0:	200a      	movs	r0, #10
 800e0d2:	f7f9 f915 	bl	8007300 <vTaskDelay>
	HAL_TIM_Base_Start_IT(&htim4);
 800e0d6:	4826      	ldr	r0, [pc, #152]	@ (800e170 <systemTask+0xdc>)
 800e0d8:	f7f6 fa12 	bl	8004500 <HAL_TIM_Base_Start_IT>
	//NJH

	I2C1_Init();
 800e0dc:	f7fc f910 	bl	800a300 <I2C1_Init>
	I2C2_Init();
 800e0e0:	f7fc f93c 	bl	800a35c <I2C2_Init>
//	MX_UART4_Init();
//	MX_USART1_UART_Init();
//	MX_USART2_UART_Init();
//	MX_USART3_UART_Init();

	systemInit();
 800e0e4:	f7ff ff9c 	bl	800e020 <systemInit>
//	counter +=1 ; // JUMP HERE

	StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	73bb      	strb	r3, [r7, #14]
	//Macro-Work when we defind its
#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 1;
	estimatorKalmanTaskInit();
 800e0ec:	f000 faec 	bl	800e6c8 <estimatorKalmanTaskInit>
//	counter = 2;
	//JH
#endif
	zRanger2Init();
 800e0f0:	f7fb f844 	bl	800917c <zRanger2Init>
	//Test LED
	ledblink_test();
 800e0f4:	f7fd f98c 	bl	800b410 <ledblink_test>
	motors_test();
 800e0f8:	f7fd f9b4 	bl	800b464 <motors_test>
	rc_test();
 800e0fc:	f7fd f9d8 	bl	800b4b0 <rc_test>
//	counter +=1; // Not JUMP HERE
//	flowTofInit();
//	tofInit();

//	estimator = deckGetRequiredEstimator();
	stabilizerInit(estimator);
 800e100:	7bbb      	ldrb	r3, [r7, #14]
 800e102:	4618      	mov	r0, r3
 800e104:	f7ff fe88 	bl	800de18 <stabilizerInit>
//	counter +=1 ;// NJH
	if (systemTest() == false) {
 800e108:	f7ff ffac 	bl	800e064 <systemTest>
 800e10c:	4603      	mov	r3, r0
 800e10e:	f083 0301 	eor.w	r3, r3, #1
 800e112:	b2db      	uxtb	r3, r3
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <systemTask+0x88>
		pass = false;
 800e118:	2300      	movs	r3, #0
 800e11a:	73fb      	strb	r3, [r7, #15]
	}

	if ( stabilizerTest() == false )
 800e11c:	f7ff feb4 	bl	800de88 <stabilizerTest>
 800e120:	4603      	mov	r3, r0
 800e122:	f083 0301 	eor.w	r3, r3, #1
 800e126:	b2db      	uxtb	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d001      	beq.n	800e130 <systemTask+0x9c>
	{
		pass = false;
 800e12c:	2300      	movs	r3, #0
 800e12e:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 3;
	//NJH
if (estimatorKalmanTaskTest() == false) {
 800e130:	f000 fb12 	bl	800e758 <estimatorKalmanTaskTest>
 800e134:	4603      	mov	r3, r0
 800e136:	f083 0301 	eor.w	r3, r3, #1
 800e13a:	b2db      	uxtb	r3, r3
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <systemTask+0xb0>
//	counter = 1;
	//NJH
  pass = false;
 800e140:	2300      	movs	r3, #0
 800e142:	73fb      	strb	r3, [r7, #15]
}
#endif

	vTaskDelay(100);
 800e144:	2064      	movs	r0, #100	@ 0x64
 800e146:	f7f9 f8db 	bl	8007300 <vTaskDelay>
	ledSet(1);
 800e14a:	2001      	movs	r0, #1
 800e14c:	f7fc fa42 	bl	800a5d4 <ledSet>
	if (pass) {
 800e150:	7bfb      	ldrb	r3, [r7, #15]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <systemTask+0xc6>
		systemStart();
 800e156:	f000 f80d 	bl	800e174 <systemStart>
	}
	vTaskDelay(100);
 800e15a:	2064      	movs	r0, #100	@ 0x64
 800e15c:	f7f9 f8d0 	bl	8007300 <vTaskDelay>
	workerLoop();
 800e160:	f000 f88c 	bl	800e27c <workerLoop>
	while(1)
	{

		vTaskDelay(1000);
 800e164:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800e168:	f7f9 f8ca 	bl	8007300 <vTaskDelay>
 800e16c:	e7fa      	b.n	800e164 <systemTask+0xd0>
 800e16e:	bf00      	nop
 800e170:	20007f54 	.word	0x20007f54

0800e174 <systemStart>:
	}
}
void systemStart()
{
 800e174:	b580      	push	{r7, lr}
 800e176:	af00      	add	r7, sp, #0
	xSemaphoreGive(canStartMutex);
 800e178:	4b04      	ldr	r3, [pc, #16]	@ (800e18c <systemStart+0x18>)
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	2300      	movs	r3, #0
 800e17e:	2200      	movs	r2, #0
 800e180:	2100      	movs	r1, #0
 800e182:	f7f8 f8f1 	bl	8006368 <xQueueGenericSend>
}
 800e186:	bf00      	nop
 800e188:	bd80      	pop	{r7, pc}
 800e18a:	bf00      	nop
 800e18c:	200095a8 	.word	0x200095a8

0800e190 <systemWaitStart>:
void systemWaitStart(void)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	af00      	add	r7, sp, #0
//	flage = 2;
	while (!isInit) vTaskDelay(2);
 800e194:	e002      	b.n	800e19c <systemWaitStart+0xc>
 800e196:	2002      	movs	r0, #2
 800e198:	f7f9 f8b2 	bl	8007300 <vTaskDelay>
 800e19c:	4b0b      	ldr	r3, [pc, #44]	@ (800e1cc <systemWaitStart+0x3c>)
 800e19e:	781b      	ldrb	r3, [r3, #0]
 800e1a0:	f083 0301 	eor.w	r3, r3, #1
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d1f5      	bne.n	800e196 <systemWaitStart+0x6>
//	flage = 2; // nan JUMP HERE
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800e1aa:	4b09      	ldr	r3, [pc, #36]	@ (800e1d0 <systemWaitStart+0x40>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f04f 31ff 	mov.w	r1, #4294967295
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f7f8 fbf6 	bl	80069a4 <xQueueSemaphoreTake>
	xSemaphoreGive(canStartMutex);
 800e1b8:	4b05      	ldr	r3, [pc, #20]	@ (800e1d0 <systemWaitStart+0x40>)
 800e1ba:	6818      	ldr	r0, [r3, #0]
 800e1bc:	2300      	movs	r3, #0
 800e1be:	2200      	movs	r2, #0
 800e1c0:	2100      	movs	r1, #0
 800e1c2:	f7f8 f8d1 	bl	8006368 <xQueueGenericSend>
}
 800e1c6:	bf00      	nop
 800e1c8:	bd80      	pop	{r7, pc}
 800e1ca:	bf00      	nop
 800e1cc:	200090f4 	.word	0x200090f4
 800e1d0:	200095a8 	.word	0x200095a8

0800e1d4 <vApplicationIdleHook>:


void vApplicationIdleHook(void) {
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b082      	sub	sp, #8
 800e1d8:	af00      	add	r7, sp, #0

	static uint32_t tickOfLatestWatchdogReset = M2T(0);

	portTickType tickCount = xTaskGetTickCount();
 800e1da:	f7f9 f9e1 	bl	80075a0 <xTaskGetTickCount>
 800e1de:	6078      	str	r0, [r7, #4]

	if (tickCount - tickOfLatestWatchdogReset > M2T(80)) {
 800e1e0:	4b06      	ldr	r3, [pc, #24]	@ (800e1fc <vApplicationIdleHook+0x28>)
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	1ad3      	subs	r3, r2, r3
 800e1e8:	2b50      	cmp	r3, #80	@ 0x50
 800e1ea:	d902      	bls.n	800e1f2 <vApplicationIdleHook+0x1e>
		tickOfLatestWatchdogReset = tickCount;
 800e1ec:	4a03      	ldr	r2, [pc, #12]	@ (800e1fc <vApplicationIdleHook+0x28>)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6013      	str	r3, [r2, #0]
//		watchdogReset();
	}

}
 800e1f2:	bf00      	nop
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}
 800e1fa:	bf00      	nop
 800e1fc:	200095fc 	.word	0x200095fc

0800e200 <vApplicationStackOverflowHook>:

#if ( configCHECK_FOR_STACK_OVERFLOW > 0 )

    void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                        char * pcTaskName )
    {
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
        /* Check pcTaskName for the name of the offending task,
         * or pxCurrentTCB if pcTaskName has itself been corrupted. */
        ( void ) xTask;
        ( void ) pcTaskName;
    }
 800e20a:	bf00      	nop
 800e20c:	370c      	adds	r7, #12
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <vApplicationMallocFailedHook>:

#endif /* #if ( configCHECK_FOR_STACK_OVERFLOW > 0 ) */

void vApplicationMallocFailedHook( void ){
 800e216:	b480      	push	{r7}
 800e218:	af00      	add	r7, sp, #0
	while(1);
 800e21a:	bf00      	nop
 800e21c:	e7fd      	b.n	800e21a <vApplicationMallocFailedHook+0x4>
	...

0800e220 <workerInit>:
static xQueueHandle workerQueue;

STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af02      	add	r7, sp, #8
  if (workerQueue)
 800e226:	4b0a      	ldr	r3, [pc, #40]	@ (800e250 <workerInit+0x30>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d10d      	bne.n	800e24a <workerInit+0x2a>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 800e22e:	2305      	movs	r3, #5
 800e230:	4618      	mov	r0, r3
 800e232:	2308      	movs	r3, #8
 800e234:	4619      	mov	r1, r3
 800e236:	2300      	movs	r3, #0
 800e238:	9300      	str	r3, [sp, #0]
 800e23a:	4b06      	ldr	r3, [pc, #24]	@ (800e254 <workerInit+0x34>)
 800e23c:	4a06      	ldr	r2, [pc, #24]	@ (800e258 <workerInit+0x38>)
 800e23e:	f7f7 ff7f 	bl	8006140 <xQueueGenericCreateStatic>
 800e242:	4603      	mov	r3, r0
 800e244:	4a02      	ldr	r2, [pc, #8]	@ (800e250 <workerInit+0x30>)
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	e000      	b.n	800e24c <workerInit+0x2c>
    return;
 800e24a:	bf00      	nop

}
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	20009600 	.word	0x20009600
 800e254:	10002b14 	.word	0x10002b14
 800e258:	10002aec 	.word	0x10002aec

0800e25c <workerTest>:

bool workerTest()
{
 800e25c:	b480      	push	{r7}
 800e25e:	af00      	add	r7, sp, #0
  return (workerQueue != NULL);
 800e260:	4b05      	ldr	r3, [pc, #20]	@ (800e278 <workerTest+0x1c>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	bf14      	ite	ne
 800e268:	2301      	movne	r3, #1
 800e26a:	2300      	moveq	r3, #0
 800e26c:	b2db      	uxtb	r3, r3
}
 800e26e:	4618      	mov	r0, r3
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr
 800e278:	20009600 	.word	0x20009600

0800e27c <workerLoop>:

void workerLoop()
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
  struct worker_work work;

  if (!workerQueue)
 800e282:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b4 <workerLoop+0x38>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d00f      	beq.n	800e2aa <workerLoop+0x2e>
    return;

  while (1)
  {
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800e28a:	4b0a      	ldr	r3, [pc, #40]	@ (800e2b4 <workerLoop+0x38>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	4639      	mov	r1, r7
 800e290:	f04f 32ff 	mov.w	r2, #4294967295
 800e294:	4618      	mov	r0, r3
 800e296:	f7f8 faa5 	bl	80067e4 <xQueueReceive>

    if (work.function)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d0f4      	beq.n	800e28a <workerLoop+0xe>
      work.function(work.arg);
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	687a      	ldr	r2, [r7, #4]
 800e2a4:	4610      	mov	r0, r2
 800e2a6:	4798      	blx	r3
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800e2a8:	e7ef      	b.n	800e28a <workerLoop+0xe>
    return;
 800e2aa:	bf00      	nop
  }
}
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20009600 	.word	0x20009600

0800e2b8 <stateEstimatorInit>:
        .name = "OutOfTree",
    },
#endif
};

void stateEstimatorInit(StateEstimatorType estimator) {
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b084      	sub	sp, #16
 800e2bc:	af02      	add	r7, sp, #8
 800e2be:	4603      	mov	r3, r0
 800e2c0:	71fb      	strb	r3, [r7, #7]
  measurementsQueue = STATIC_MEM_QUEUE_CREATE(measurementsQueue);
 800e2c2:	2314      	movs	r3, #20
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	2330      	movs	r3, #48	@ 0x30
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	9300      	str	r3, [sp, #0]
 800e2ce:	4b07      	ldr	r3, [pc, #28]	@ (800e2ec <stateEstimatorInit+0x34>)
 800e2d0:	4a07      	ldr	r2, [pc, #28]	@ (800e2f0 <stateEstimatorInit+0x38>)
 800e2d2:	f7f7 ff35 	bl	8006140 <xQueueGenericCreateStatic>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	4a06      	ldr	r2, [pc, #24]	@ (800e2f4 <stateEstimatorInit+0x3c>)
 800e2da:	6013      	str	r3, [r2, #0]
  stateEstimatorSwitchTo(estimator);
 800e2dc:	79fb      	ldrb	r3, [r7, #7]
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f000 f80a 	bl	800e2f8 <stateEstimatorSwitchTo>
}
 800e2e4:	bf00      	nop
 800e2e6:	3708      	adds	r7, #8
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bd80      	pop	{r7, pc}
 800e2ec:	10002f24 	.word	0x10002f24
 800e2f0:	10002b64 	.word	0x10002b64
 800e2f4:	20009608 	.word	0x20009608

0800e2f8 <stateEstimatorSwitchTo>:

void stateEstimatorSwitchTo(StateEstimatorType estimator) {
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b084      	sub	sp, #16
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	71fb      	strb	r3, [r7, #7]
  if (estimator < 0 || estimator >= StateEstimatorType_COUNT) {
 800e302:	79fb      	ldrb	r3, [r7, #7]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d81c      	bhi.n	800e342 <stateEstimatorSwitchTo+0x4a>
    return;
  }

  StateEstimatorType newEstimator = estimator;
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	73fb      	strb	r3, [r7, #15]

  if (StateEstimatorTypeAutoSelect == newEstimator) {
 800e30c:	7bfb      	ldrb	r3, [r7, #15]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d101      	bne.n	800e316 <stateEstimatorSwitchTo+0x1e>
    newEstimator = DEFAULT_ESTIMATOR;
 800e312:	2301      	movs	r3, #1
 800e314:	73fb      	strb	r3, [r7, #15]
    #define ESTIMATOR StateEstimatorTypeComplementary
  #else
    #define ESTIMATOR StateEstimatorTypeAutoSelect
  #endif

  StateEstimatorType forcedEstimator = ESTIMATOR;
 800e316:	2300      	movs	r3, #0
 800e318:	73bb      	strb	r3, [r7, #14]
  if (forcedEstimator != StateEstimatorTypeAutoSelect) {
 800e31a:	7bbb      	ldrb	r3, [r7, #14]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d001      	beq.n	800e324 <stateEstimatorSwitchTo+0x2c>
//    DEBUG_PRINT("Estimator type forced\n");
    newEstimator = forcedEstimator;
 800e320:	7bbb      	ldrb	r3, [r7, #14]
 800e322:	73fb      	strb	r3, [r7, #15]
  }

  initEstimator(newEstimator);
 800e324:	7bfb      	ldrb	r3, [r7, #15]
 800e326:	4618      	mov	r0, r3
 800e328:	f000 f81e 	bl	800e368 <initEstimator>
  StateEstimatorType previousEstimator = currentEstimator;
 800e32c:	4b07      	ldr	r3, [pc, #28]	@ (800e34c <stateEstimatorSwitchTo+0x54>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	737b      	strb	r3, [r7, #13]
  currentEstimator = newEstimator;
 800e332:	4a06      	ldr	r2, [pc, #24]	@ (800e34c <stateEstimatorSwitchTo+0x54>)
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	7013      	strb	r3, [r2, #0]
  deinitEstimator(previousEstimator);
 800e338:	7b7b      	ldrb	r3, [r7, #13]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f000 f832 	bl	800e3a4 <deinitEstimator>
 800e340:	e000      	b.n	800e344 <stateEstimatorSwitchTo+0x4c>
    return;
 800e342:	bf00      	nop

//  DEBUG_PRINT("Using %s (%d) estimator\n", stateEstimatorGetName(), currentEstimator);
}
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	20009604 	.word	0x20009604

0800e350 <stateEstimatorGetType>:

StateEstimatorType stateEstimatorGetType(void) {
 800e350:	b480      	push	{r7}
 800e352:	af00      	add	r7, sp, #0
  return currentEstimator;
 800e354:	4b03      	ldr	r3, [pc, #12]	@ (800e364 <stateEstimatorGetType+0x14>)
 800e356:	781b      	ldrb	r3, [r3, #0]
}
 800e358:	4618      	mov	r0, r3
 800e35a:	46bd      	mov	sp, r7
 800e35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e360:	4770      	bx	lr
 800e362:	bf00      	nop
 800e364:	20009604 	.word	0x20009604

0800e368 <initEstimator>:

static void initEstimator(const StateEstimatorType estimator) {
 800e368:	b580      	push	{r7, lr}
 800e36a:	b082      	sub	sp, #8
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	4603      	mov	r3, r0
 800e370:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].init) {
 800e372:	79fa      	ldrb	r2, [r7, #7]
 800e374:	490a      	ldr	r1, [pc, #40]	@ (800e3a0 <initEstimator+0x38>)
 800e376:	4613      	mov	r3, r2
 800e378:	009b      	lsls	r3, r3, #2
 800e37a:	4413      	add	r3, r2
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	440b      	add	r3, r1
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d008      	beq.n	800e398 <initEstimator+0x30>
    estimatorFunctions[estimator].init();
 800e386:	79fa      	ldrb	r2, [r7, #7]
 800e388:	4905      	ldr	r1, [pc, #20]	@ (800e3a0 <initEstimator+0x38>)
 800e38a:	4613      	mov	r3, r2
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	4413      	add	r3, r2
 800e390:	009b      	lsls	r3, r3, #2
 800e392:	440b      	add	r3, r1
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	4798      	blx	r3
  }
}
 800e398:	bf00      	nop
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}
 800e3a0:	20000030 	.word	0x20000030

0800e3a4 <deinitEstimator>:

static void deinitEstimator(const StateEstimatorType estimator) {
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].deinit) {
 800e3ae:	79fa      	ldrb	r2, [r7, #7]
 800e3b0:	490b      	ldr	r1, [pc, #44]	@ (800e3e0 <deinitEstimator+0x3c>)
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	009b      	lsls	r3, r3, #2
 800e3b6:	4413      	add	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	440b      	add	r3, r1
 800e3bc:	3304      	adds	r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d009      	beq.n	800e3d8 <deinitEstimator+0x34>
    estimatorFunctions[estimator].deinit();
 800e3c4:	79fa      	ldrb	r2, [r7, #7]
 800e3c6:	4906      	ldr	r1, [pc, #24]	@ (800e3e0 <deinitEstimator+0x3c>)
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	4413      	add	r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	440b      	add	r3, r1
 800e3d2:	3304      	adds	r3, #4
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4798      	blx	r3
  }
}
 800e3d8:	bf00      	nop
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20000030 	.word	0x20000030

0800e3e4 <stateEstimatorTest>:

bool stateEstimatorTest(void) {
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	af00      	add	r7, sp, #0
  return estimatorFunctions[currentEstimator].test();
 800e3e8:	4b07      	ldr	r3, [pc, #28]	@ (800e408 <stateEstimatorTest+0x24>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4a07      	ldr	r2, [pc, #28]	@ (800e40c <stateEstimatorTest+0x28>)
 800e3f0:	460b      	mov	r3, r1
 800e3f2:	009b      	lsls	r3, r3, #2
 800e3f4:	440b      	add	r3, r1
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	4413      	add	r3, r2
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4798      	blx	r3
 800e400:	4603      	mov	r3, r0
}
 800e402:	4618      	mov	r0, r3
 800e404:	bd80      	pop	{r7, pc}
 800e406:	bf00      	nop
 800e408:	20009604 	.word	0x20009604
 800e40c:	20000030 	.word	0x20000030

0800e410 <stateEstimator>:

void stateEstimator(state_t *state, const stabilizerStep_t tick) {
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  estimatorFunctions[currentEstimator].update(state, tick);
 800e41a:	4b09      	ldr	r3, [pc, #36]	@ (800e440 <stateEstimator+0x30>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4619      	mov	r1, r3
 800e420:	4a08      	ldr	r2, [pc, #32]	@ (800e444 <stateEstimator+0x34>)
 800e422:	460b      	mov	r3, r1
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	440b      	add	r3, r1
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	4413      	add	r3, r2
 800e42c:	330c      	adds	r3, #12
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	4798      	blx	r3
}
 800e436:	bf00      	nop
 800e438:	3708      	adds	r7, #8
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	20009604 	.word	0x20009604
 800e444:	20000030 	.word	0x20000030

0800e448 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 800e450:	4b19      	ldr	r3, [pc, #100]	@ (800e4b8 <estimatorEnqueue+0x70>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d02b      	beq.n	800e4b0 <estimatorEnqueue+0x68>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 800e458:	4b18      	ldr	r3, [pc, #96]	@ (800e4bc <estimatorEnqueue+0x74>)
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e460:	2b00      	cmp	r3, #0
 800e462:	bf14      	ite	ne
 800e464:	2301      	movne	r3, #1
 800e466:	2300      	moveq	r3, #0
 800e468:	75fb      	strb	r3, [r7, #23]
  if (isInInterrupt) {
 800e46a:	7dfb      	ldrb	r3, [r7, #23]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d016      	beq.n	800e49e <estimatorEnqueue+0x56>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800e470:	2300      	movs	r3, #0
 800e472:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 800e474:	4b10      	ldr	r3, [pc, #64]	@ (800e4b8 <estimatorEnqueue+0x70>)
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	f107 020c 	add.w	r2, r7, #12
 800e47c:	2300      	movs	r3, #0
 800e47e:	6879      	ldr	r1, [r7, #4]
 800e480:	f7f8 f880 	bl	8006584 <xQueueGenericSendFromISR>
 800e484:	6138      	str	r0, [r7, #16]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	2b01      	cmp	r3, #1
 800e48a:	d112      	bne.n	800e4b2 <estimatorEnqueue+0x6a>
      portYIELD();
 800e48c:	4b0c      	ldr	r3, [pc, #48]	@ (800e4c0 <estimatorEnqueue+0x78>)
 800e48e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e492:	601a      	str	r2, [r3, #0]
 800e494:	f3bf 8f4f 	dsb	sy
 800e498:	f3bf 8f6f 	isb	sy
 800e49c:	e009      	b.n	800e4b2 <estimatorEnqueue+0x6a>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 800e49e:	4b06      	ldr	r3, [pc, #24]	@ (800e4b8 <estimatorEnqueue+0x70>)
 800e4a0:	6818      	ldr	r0, [r3, #0]
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	2200      	movs	r2, #0
 800e4a6:	6879      	ldr	r1, [r7, #4]
 800e4a8:	f7f7 ff5e 	bl	8006368 <xQueueGenericSend>
 800e4ac:	6138      	str	r0, [r7, #16]
 800e4ae:	e000      	b.n	800e4b2 <estimatorEnqueue+0x6a>
    return;
 800e4b0:	bf00      	nop
//    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
  } else {
//    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
  }

}
 800e4b2:	3718      	adds	r7, #24
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20009608 	.word	0x20009608
 800e4bc:	e000ed00 	.word	0xe000ed00
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 800e4cc:	4b08      	ldr	r3, [pc, #32]	@ (800e4f0 <estimatorDequeue+0x2c>)
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	6879      	ldr	r1, [r7, #4]
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7f8 f985 	bl	80067e4 <xQueueReceive>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	bf0c      	ite	eq
 800e4e0:	2301      	moveq	r3, #1
 800e4e2:	2300      	movne	r3, #0
 800e4e4:	b2db      	uxtb	r3, r3
}
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3708      	adds	r7, #8
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	20009608 	.word	0x20009608

0800e4f4 <estimatorComplementaryInit>:
#define POS_UPDATE_RATE RATE_100_HZ
#define POS_UPDATE_DT 1.0/POS_UPDATE_RATE


void estimatorComplementaryInit(void)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	af00      	add	r7, sp, #0
  sensfusion6Init();
 800e4f8:	f7fe fdba 	bl	800d070 <sensfusion6Init>
}
 800e4fc:	bf00      	nop
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <estimatorComplementaryTest>:

bool estimatorComplementaryTest(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
  bool pass = true;
 800e506:	2301      	movs	r3, #1
 800e508:	71fb      	strb	r3, [r7, #7]

  pass &= sensfusion6Test();
 800e50a:	f7fe fdc3 	bl	800d094 <sensfusion6Test>
 800e50e:	4603      	mov	r3, r0
 800e510:	461a      	mov	r2, r3
 800e512:	79fb      	ldrb	r3, [r7, #7]
 800e514:	4013      	ands	r3, r2
 800e516:	2b00      	cmp	r3, #0
 800e518:	bf14      	ite	ne
 800e51a:	2301      	movne	r3, #1
 800e51c:	2300      	moveq	r3, #0
 800e51e:	71fb      	strb	r3, [r7, #7]

  return pass;
 800e520:	79fb      	ldrb	r3, [r7, #7]
}
 800e522:	4618      	mov	r0, r3
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
	...

0800e52c <estimatorComplementary>:

void estimatorComplementary(state_t *state, const stabilizerStep_t stabilizerStep)
{
 800e52c:	b590      	push	{r4, r7, lr}
 800e52e:	b08f      	sub	sp, #60	@ 0x3c
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800e536:	e03c      	b.n	800e5b2 <estimatorComplementary+0x86>
    switch (m.type)
 800e538:	7a3b      	ldrb	r3, [r7, #8]
 800e53a:	3b04      	subs	r3, #4
 800e53c:	2b07      	cmp	r3, #7
 800e53e:	d837      	bhi.n	800e5b0 <estimatorComplementary+0x84>
 800e540:	a201      	add	r2, pc, #4	@ (adr r2, 800e548 <estimatorComplementary+0x1c>)
 800e542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e546:	bf00      	nop
 800e548:	0800e59f 	.word	0x0800e59f
 800e54c:	0800e5b1 	.word	0x0800e5b1
 800e550:	0800e5b1 	.word	0x0800e5b1
 800e554:	0800e5b1 	.word	0x0800e5b1
 800e558:	0800e5b1 	.word	0x0800e5b1
 800e55c:	0800e569 	.word	0x0800e569
 800e560:	0800e57b 	.word	0x0800e57b
 800e564:	0800e58d 	.word	0x0800e58d
    {
    case MeasurementTypeGyroscope:
      gyro = m.data.gyroscope.gyro;
 800e568:	4b50      	ldr	r3, [pc, #320]	@ (800e6ac <estimatorComplementary+0x180>)
 800e56a:	461c      	mov	r4, r3
 800e56c:	f107 030c 	add.w	r3, r7, #12
 800e570:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800e578:	e01b      	b.n	800e5b2 <estimatorComplementary+0x86>
    case MeasurementTypeAcceleration:
      acc = m.data.acceleration.acc;
 800e57a:	4b4d      	ldr	r3, [pc, #308]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e57c:	461c      	mov	r4, r3
 800e57e:	f107 030c 	add.w	r3, r7, #12
 800e582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800e58a:	e012      	b.n	800e5b2 <estimatorComplementary+0x86>
    case MeasurementTypeBarometer:
      baro = m.data.barometer.baro;
 800e58c:	4b49      	ldr	r3, [pc, #292]	@ (800e6b4 <estimatorComplementary+0x188>)
 800e58e:	461c      	mov	r4, r3
 800e590:	f107 030c 	add.w	r3, r7, #12
 800e594:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800e59c:	e009      	b.n	800e5b2 <estimatorComplementary+0x86>
    case MeasurementTypeTOF:
      tof = m.data.tof;
 800e59e:	4b46      	ldr	r3, [pc, #280]	@ (800e6b8 <estimatorComplementary+0x18c>)
 800e5a0:	461c      	mov	r4, r3
 800e5a2:	f107 030c 	add.w	r3, r7, #12
 800e5a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e5aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800e5ae:	e000      	b.n	800e5b2 <estimatorComplementary+0x86>
    default:
      break;
 800e5b0:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800e5b2:	f107 0308 	add.w	r3, r7, #8
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	f7ff ff84 	bl	800e4c4 <estimatorDequeue>
 800e5bc:	4603      	mov	r3, r0
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1ba      	bne.n	800e538 <estimatorComplementary+0xc>
    }
  }

  // Update filter
  if (RATE_DO_EXECUTE(ATTITUDE_UPDATE_RATE, stabilizerStep)) {
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	f003 0303 	and.w	r3, r3, #3
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d157      	bne.n	800e67c <estimatorComplementary+0x150>
    sensfusion6UpdateQ(gyro.x, gyro.y, gyro.z,
 800e5cc:	4b37      	ldr	r3, [pc, #220]	@ (800e6ac <estimatorComplementary+0x180>)
 800e5ce:	edd3 7a00 	vldr	s15, [r3]
 800e5d2:	4b36      	ldr	r3, [pc, #216]	@ (800e6ac <estimatorComplementary+0x180>)
 800e5d4:	ed93 7a01 	vldr	s14, [r3, #4]
 800e5d8:	4b34      	ldr	r3, [pc, #208]	@ (800e6ac <estimatorComplementary+0x180>)
 800e5da:	edd3 6a02 	vldr	s13, [r3, #8]
 800e5de:	4b34      	ldr	r3, [pc, #208]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e5e0:	ed93 6a00 	vldr	s12, [r3]
 800e5e4:	4b32      	ldr	r3, [pc, #200]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e5e6:	edd3 5a01 	vldr	s11, [r3, #4]
 800e5ea:	4b31      	ldr	r3, [pc, #196]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e5ec:	ed93 5a02 	vldr	s10, [r3, #8]
 800e5f0:	ed9f 3a32 	vldr	s6, [pc, #200]	@ 800e6bc <estimatorComplementary+0x190>
 800e5f4:	eef0 2a45 	vmov.f32	s5, s10
 800e5f8:	eeb0 2a65 	vmov.f32	s4, s11
 800e5fc:	eef0 1a46 	vmov.f32	s3, s12
 800e600:	eeb0 1a66 	vmov.f32	s2, s13
 800e604:	eef0 0a47 	vmov.f32	s1, s14
 800e608:	eeb0 0a67 	vmov.f32	s0, s15
 800e60c:	f7fe fd4e 	bl	800d0ac <sensfusion6UpdateQ>
                        acc.x, acc.y, acc.z,
                        ATTITUDE_UPDATE_DT);

    // Save attitude, adjusted for the legacy CF2 body coordinate system
    sensfusion6GetEulerRPY(&state->attitude.roll, &state->attitude.pitch, &state->attitude.yaw);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	1d18      	adds	r0, r3, #4
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f103 0108 	add.w	r1, r3, #8
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	330c      	adds	r3, #12
 800e61e:	461a      	mov	r2, r3
 800e620:	f7ff f856 	bl	800d6d0 <sensfusion6GetEulerRPY>

    // Save quaternion, hopefully one day this could be used in a better controller.
    // Note that this is not adjusted for the legacy coordinate system
    sensfusion6GetQuaternion(
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f103 0010 	add.w	r0, r3, #16
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	f103 0114 	add.w	r1, r3, #20
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f103 0218 	add.w	r2, r3, #24
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	331c      	adds	r3, #28
 800e63a:	f7ff f823 	bl	800d684 <sensfusion6GetQuaternion>
      &state->attitudeQuaternion.x,
      &state->attitudeQuaternion.y,
      &state->attitudeQuaternion.z,
      &state->attitudeQuaternion.w);

    state->acc.z = sensfusion6GetAccZWithoutGravity(acc.x,
 800e63e:	4b1c      	ldr	r3, [pc, #112]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e640:	edd3 7a00 	vldr	s15, [r3]
 800e644:	4b1a      	ldr	r3, [pc, #104]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e646:	ed93 7a01 	vldr	s14, [r3, #4]
 800e64a:	4b19      	ldr	r3, [pc, #100]	@ (800e6b0 <estimatorComplementary+0x184>)
 800e64c:	edd3 6a02 	vldr	s13, [r3, #8]
 800e650:	eeb0 1a66 	vmov.f32	s2, s13
 800e654:	eef0 0a47 	vmov.f32	s1, s14
 800e658:	eeb0 0a67 	vmov.f32	s0, s15
 800e65c:	f7ff f8dc 	bl	800d818 <sensfusion6GetAccZWithoutGravity>
 800e660:	eef0 7a40 	vmov.f32	s15, s0
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                                                    acc.y,
                                                    acc.z);

    positionUpdateVelocity(state->acc.z, ATTITUDE_UPDATE_DT);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800e670:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800e6bc <estimatorComplementary+0x190>
 800e674:	eeb0 0a67 	vmov.f32	s0, s15
 800e678:	f000 fa06 	bl	800ea88 <positionUpdateVelocity>
  }

  if (RATE_DO_EXECUTE(POS_UPDATE_RATE, stabilizerStep)) {
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	4b10      	ldr	r3, [pc, #64]	@ (800e6c0 <estimatorComplementary+0x194>)
 800e680:	fba3 2301 	umull	r2, r3, r3, r1
 800e684:	08da      	lsrs	r2, r3, #3
 800e686:	4613      	mov	r3, r2
 800e688:	009b      	lsls	r3, r3, #2
 800e68a:	4413      	add	r3, r2
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	1aca      	subs	r2, r1, r3
 800e690:	2a00      	cmp	r2, #0
 800e692:	d107      	bne.n	800e6a4 <estimatorComplementary+0x178>
    positionEstimate(state, &baro, &tof, POS_UPDATE_DT, stabilizerStep);
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800e6c4 <estimatorComplementary+0x198>
 800e69a:	4a07      	ldr	r2, [pc, #28]	@ (800e6b8 <estimatorComplementary+0x18c>)
 800e69c:	4905      	ldr	r1, [pc, #20]	@ (800e6b4 <estimatorComplementary+0x188>)
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 f9d8 	bl	800ea54 <positionEstimate>
  }
}
 800e6a4:	bf00      	nop
 800e6a6:	373c      	adds	r7, #60	@ 0x3c
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd90      	pop	{r4, r7, pc}
 800e6ac:	2000960c 	.word	0x2000960c
 800e6b0:	20009618 	.word	0x20009618
 800e6b4:	20009624 	.word	0x20009624
 800e6b8:	20009630 	.word	0x20009630
 800e6bc:	3b83126f 	.word	0x3b83126f
 800e6c0:	cccccccd 	.word	0xcccccccd
 800e6c4:	3c23d70a 	.word	0x3c23d70a

0800e6c8 <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 800e6ce:	4817      	ldr	r0, [pc, #92]	@ (800e72c <estimatorKalmanTaskInit+0x64>)
 800e6d0:	f000 fb98 	bl	800ee04 <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 800e6d4:	2203      	movs	r2, #3
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	2001      	movs	r0, #1
 800e6da:	f7f7 fd9d 	bl	8006218 <xQueueGenericCreate>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	4a13      	ldr	r2, [pc, #76]	@ (800e730 <estimatorKalmanTaskInit+0x68>)
 800e6e2:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 800e6e4:	4b12      	ldr	r3, [pc, #72]	@ (800e730 <estimatorKalmanTaskInit+0x68>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d104      	bne.n	800e6f6 <estimatorKalmanTaskInit+0x2e>
 800e6ec:	22b8      	movs	r2, #184	@ 0xb8
 800e6ee:	4911      	ldr	r1, [pc, #68]	@ (800e734 <estimatorKalmanTaskInit+0x6c>)
 800e6f0:	4811      	ldr	r0, [pc, #68]	@ (800e738 <estimatorKalmanTaskInit+0x70>)
 800e6f2:	f004 ff05 	bl	8013500 <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 800e6f6:	4911      	ldr	r1, [pc, #68]	@ (800e73c <estimatorKalmanTaskInit+0x74>)
 800e6f8:	2001      	movs	r0, #1
 800e6fa:	f7f7 fe1a 	bl	8006332 <xQueueCreateMutexStatic>
 800e6fe:	4603      	mov	r3, r0
 800e700:	4a0f      	ldr	r2, [pc, #60]	@ (800e740 <estimatorKalmanTaskInit+0x78>)
 800e702:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 800e704:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800e708:	461a      	mov	r2, r3
 800e70a:	4b0e      	ldr	r3, [pc, #56]	@ (800e744 <estimatorKalmanTaskInit+0x7c>)
 800e70c:	9302      	str	r3, [sp, #8]
 800e70e:	4b0e      	ldr	r3, [pc, #56]	@ (800e748 <estimatorKalmanTaskInit+0x80>)
 800e710:	9301      	str	r3, [sp, #4]
 800e712:	2302      	movs	r3, #2
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	2300      	movs	r3, #0
 800e718:	490c      	ldr	r1, [pc, #48]	@ (800e74c <estimatorKalmanTaskInit+0x84>)
 800e71a:	480d      	ldr	r0, [pc, #52]	@ (800e750 <estimatorKalmanTaskInit+0x88>)
 800e71c:	f7f8 fbd2 	bl	8006ec4 <xTaskCreateStatic>

  isInit = true;
 800e720:	4b0c      	ldr	r3, [pc, #48]	@ (800e754 <estimatorKalmanTaskInit+0x8c>)
 800e722:	2201      	movs	r2, #1
 800e724:	701a      	strb	r2, [r3, #0]
}
 800e726:	bf00      	nop
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}
 800e72c:	200096f4 	.word	0x200096f4
 800e730:	2000963c 	.word	0x2000963c
 800e734:	0801b750 	.word	0x0801b750
 800e738:	0801b77c 	.word	0x0801b77c
 800e73c:	20009644 	.word	0x20009644
 800e740:	20009640 	.word	0x20009640
 800e744:	10003a98 	.word	0x10003a98
 800e748:	10003138 	.word	0x10003138
 800e74c:	0801b790 	.word	0x0801b790
 800e750:	0800e771 	.word	0x0800e771
 800e754:	20009696 	.word	0x20009696

0800e758 <estimatorKalmanTaskTest>:

bool estimatorKalmanTaskTest() {
 800e758:	b480      	push	{r7}
 800e75a:	af00      	add	r7, sp, #0
  return isInit;
 800e75c:	4b03      	ldr	r3, [pc, #12]	@ (800e76c <estimatorKalmanTaskTest+0x14>)
 800e75e:	781b      	ldrb	r3, [r3, #0]
}
 800e760:	4618      	mov	r0, r3
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr
 800e76a:	bf00      	nop
 800e76c:	20009696 	.word	0x20009696

0800e770 <kalmanTask>:

static void kalmanTask(void* parameters) {
 800e770:	b580      	push	{r7, lr}
 800e772:	b088      	sub	sp, #32
 800e774:	af02      	add	r7, sp, #8
 800e776:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 800e778:	f7ff fd0a 	bl	800e190 <systemWaitStart>
  flage_hit = 1;
 800e77c:	4b38      	ldr	r3, [pc, #224]	@ (800e860 <kalmanTask+0xf0>)
 800e77e:	2201      	movs	r2, #1
 800e780:	701a      	strb	r2, [r3, #0]

  uint32_t nowMs = T2M(xTaskGetTickCount());
 800e782:	f7f8 ff0d 	bl	80075a0 <xTaskGetTickCount>
 800e786:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	617b      	str	r3, [r7, #20]

//  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 800e78c:	4b35      	ldr	r3, [pc, #212]	@ (800e864 <kalmanTask+0xf4>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f04f 31ff 	mov.w	r1, #4294967295
 800e794:	4618      	mov	r0, r3
 800e796:	f7f8 f905 	bl	80069a4 <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 800e79a:	f7f8 ff01 	bl	80075a0 <xTaskGetTickCount>
 800e79e:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 800e7a0:	4b31      	ldr	r3, [pc, #196]	@ (800e868 <kalmanTask+0xf8>)
 800e7a2:	781b      	ldrb	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d004      	beq.n	800e7b2 <kalmanTask+0x42>
      estimatorKalmanInit();
 800e7a8:	f000 f92e 	bl	800ea08 <estimatorKalmanInit>
      resetEstimation = false;
 800e7ac:	4b2e      	ldr	r3, [pc, #184]	@ (800e868 <kalmanTask+0xf8>)
 800e7ae:	2200      	movs	r2, #0
 800e7b0:	701a      	strb	r2, [r3, #0]
    }
    flage_hit = 2;
 800e7b2:	4b2b      	ldr	r3, [pc, #172]	@ (800e860 <kalmanTask+0xf0>)
 800e7b4:	2202      	movs	r2, #2
 800e7b6:	701a      	strb	r2, [r3, #0]

//    bool quadIsFlying = supervisorIsFlying();
    bool quadIsFlying = true;
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 800e7bc:	693a      	ldr	r2, [r7, #16]
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d315      	bcc.n	800e7f0 <kalmanTask+0x80>
      axis3fSubSamplerFinalize(&accSubSampler);
 800e7c4:	4829      	ldr	r0, [pc, #164]	@ (800e86c <kalmanTask+0xfc>)
 800e7c6:	f7fe fb40 	bl	800ce4a <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 800e7ca:	4829      	ldr	r0, [pc, #164]	@ (800e870 <kalmanTask+0x100>)
 800e7cc:	f7fe fb3d 	bl	800ce4a <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 800e7d0:	7bfb      	ldrb	r3, [r7, #15]
 800e7d2:	9300      	str	r3, [sp, #0]
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	4a27      	ldr	r2, [pc, #156]	@ (800e874 <kalmanTask+0x104>)
 800e7d8:	4927      	ldr	r1, [pc, #156]	@ (800e878 <kalmanTask+0x108>)
 800e7da:	4828      	ldr	r0, [pc, #160]	@ (800e87c <kalmanTask+0x10c>)
 800e7dc:	f002 f824 	bl	8010828 <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 800e7e0:	2214      	movs	r2, #20
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	617b      	str	r3, [r7, #20]

//      STATS_CNT_RATE_EVENT(&predictionCounter);

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 800e7e8:	6939      	ldr	r1, [r7, #16]
 800e7ea:	4825      	ldr	r0, [pc, #148]	@ (800e880 <kalmanTask+0x110>)
 800e7ec:	f005 f81d 	bl	801382a <rateSupervisorValidate>
//        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 800e7f0:	693a      	ldr	r2, [r7, #16]
 800e7f2:	4924      	ldr	r1, [pc, #144]	@ (800e884 <kalmanTask+0x114>)
 800e7f4:	4821      	ldr	r0, [pc, #132]	@ (800e87c <kalmanTask+0x10c>)
 800e7f6:	f002 fa49 	bl	8010c8c <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 800e7fa:	7bfb      	ldrb	r3, [r7, #15]
 800e7fc:	4619      	mov	r1, r3
 800e7fe:	6938      	ldr	r0, [r7, #16]
 800e800:	f000 f84a 	bl	800e898 <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 800e804:	481d      	ldr	r0, [pc, #116]	@ (800e87c <kalmanTask+0x10c>)
 800e806:	f002 fa6f 	bl	8010ce8 <kalmanCoreFinalize>
    {
//      STATS_CNT_RATE_EVENT(&finalizeCounter);
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 800e80a:	481c      	ldr	r0, [pc, #112]	@ (800e87c <kalmanTask+0x10c>)
 800e80c:	f7fe fb70 	bl	800cef0 <kalmanSupervisorIsStateWithinBounds>
 800e810:	4603      	mov	r3, r0
 800e812:	f083 0301 	eor.w	r3, r3, #1
 800e816:	b2db      	uxtb	r3, r3
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d00c      	beq.n	800e836 <kalmanTask+0xc6>
      resetEstimation = true;
 800e81c:	4b12      	ldr	r3, [pc, #72]	@ (800e868 <kalmanTask+0xf8>)
 800e81e:	2201      	movs	r2, #1
 800e820:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 800e822:	4b19      	ldr	r3, [pc, #100]	@ (800e888 <kalmanTask+0x118>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	693a      	ldr	r2, [r7, #16]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d904      	bls.n	800e836 <kalmanTask+0xc6>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800e832:	4a15      	ldr	r2, [pc, #84]	@ (800e888 <kalmanTask+0x118>)
 800e834:	6013      	str	r3, [r2, #0]

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 800e836:	4b15      	ldr	r3, [pc, #84]	@ (800e88c <kalmanTask+0x11c>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f04f 31ff 	mov.w	r1, #4294967295
 800e83e:	4618      	mov	r0, r3
 800e840:	f7f8 f8b0 	bl	80069a4 <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 800e844:	4a12      	ldr	r2, [pc, #72]	@ (800e890 <kalmanTask+0x120>)
 800e846:	4913      	ldr	r1, [pc, #76]	@ (800e894 <kalmanTask+0x124>)
 800e848:	480c      	ldr	r0, [pc, #48]	@ (800e87c <kalmanTask+0x10c>)
 800e84a:	f002 ff03 	bl	8011654 <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 800e84e:	4b0f      	ldr	r3, [pc, #60]	@ (800e88c <kalmanTask+0x11c>)
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	2300      	movs	r3, #0
 800e854:	2200      	movs	r2, #0
 800e856:	2100      	movs	r1, #0
 800e858:	f7f7 fd86 	bl	8006368 <xQueueGenericSend>
  while (true) {
 800e85c:	e796      	b.n	800e78c <kalmanTask+0x1c>
 800e85e:	bf00      	nop
 800e860:	20009695 	.word	0x20009695
 800e864:	2000963c 	.word	0x2000963c
 800e868:	200096f0 	.word	0x200096f0
 800e86c:	20009698 	.word	0x20009698
 800e870:	200096b8 	.word	0x200096b8
 800e874:	200096cc 	.word	0x200096cc
 800e878:	200096ac 	.word	0x200096ac
 800e87c:	10002f74 	.word	0x10002f74
 800e880:	20009788 	.word	0x20009788
 800e884:	200096f4 	.word	0x200096f4
 800e888:	200097a4 	.word	0x200097a4
 800e88c:	20009640 	.word	0x20009640
 800e890:	200096d8 	.word	0x200096d8
 800e894:	20009738 	.word	0x20009738

0800e898 <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 800e898:	b590      	push	{r4, r7, lr}
 800e89a:	b08f      	sub	sp, #60	@ 0x3c
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	460b      	mov	r3, r1
 800e8a2:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800e8a4:	e094      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
    switch (m.type) {
 800e8a6:	7a3b      	ldrb	r3, [r7, #8]
 800e8a8:	2b0b      	cmp	r3, #11
 800e8aa:	f200 808e 	bhi.w	800e9ca <updateQueuedMeasurements+0x132>
 800e8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e8b4 <updateQueuedMeasurements+0x1c>)
 800e8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b4:	0800e9cb 	.word	0x0800e9cb
 800e8b8:	0800e8e5 	.word	0x0800e8e5
 800e8bc:	0800e8f5 	.word	0x0800e8f5
 800e8c0:	0800e905 	.word	0x0800e905
 800e8c4:	0800e92d 	.word	0x0800e92d
 800e8c8:	0800e93d 	.word	0x0800e93d
 800e8cc:	0800e94d 	.word	0x0800e94d
 800e8d0:	0800e95f 	.word	0x0800e95f
 800e8d4:	0800e9cb 	.word	0x0800e9cb
 800e8d8:	0800e96f 	.word	0x0800e96f
 800e8dc:	0800e98f 	.word	0x0800e98f
 800e8e0:	0800e9af 	.word	0x0800e9af
          // standard KF update
//          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
        }
        break;
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 800e8e4:	f107 0308 	add.w	r3, r7, #8
 800e8e8:	3304      	adds	r3, #4
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	483f      	ldr	r0, [pc, #252]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e8ee:	f004 fc05 	bl	80130fc <kalmanCoreUpdateWithPosition>
        break;
 800e8f2:	e06d      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 800e8f4:	f107 0308 	add.w	r3, r7, #8
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	483b      	ldr	r0, [pc, #236]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e8fe:	f004 fa85 	bl	8012e0c <kalmanCoreUpdateWithPose>
        break;
 800e902:	e065      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeDistance:
        if(robustTwr){
 800e904:	4b3a      	ldr	r3, [pc, #232]	@ (800e9f0 <updateQueuedMeasurements+0x158>)
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d007      	beq.n	800e91c <updateQueuedMeasurements+0x84>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 800e90c:	f107 0308 	add.w	r3, r7, #8
 800e910:	3304      	adds	r3, #4
 800e912:	4619      	mov	r1, r3
 800e914:	4835      	ldr	r0, [pc, #212]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e916:	f003 fb59 	bl	8011fcc <kalmanCoreRobustUpdateWithDistance>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
        }
        break;
 800e91a:	e059      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 800e91c:	f107 0308 	add.w	r3, r7, #8
 800e920:	3304      	adds	r3, #4
 800e922:	4619      	mov	r1, r3
 800e924:	4831      	ldr	r0, [pc, #196]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e926:	f003 f8c3 	bl	8011ab0 <kalmanCoreUpdateWithDistance>
        break;
 800e92a:	e051      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 800e92c:	f107 0308 	add.w	r3, r7, #8
 800e930:	3304      	adds	r3, #4
 800e932:	4619      	mov	r1, r3
 800e934:	482d      	ldr	r0, [pc, #180]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e936:	f004 fc27 	bl	8013188 <kalmanCoreUpdateWithTof>
        break;
 800e93a:	e049      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 800e93c:	f107 0308 	add.w	r3, r7, #8
 800e940:	3304      	adds	r3, #4
 800e942:	4619      	mov	r1, r3
 800e944:	4829      	ldr	r0, [pc, #164]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e946:	f003 f847 	bl	80119d8 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 800e94a:	e041      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 800e94c:	f107 0308 	add.w	r3, r7, #8
 800e950:	3304      	adds	r3, #4
 800e952:	4a28      	ldr	r2, [pc, #160]	@ (800e9f4 <updateQueuedMeasurements+0x15c>)
 800e954:	4619      	mov	r1, r3
 800e956:	4825      	ldr	r0, [pc, #148]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e958:	f003 feec 	bl	8012734 <kalmanCoreUpdateWithFlow>
        break;
 800e95c:	e038      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 800e95e:	f107 0308 	add.w	r3, r7, #8
 800e962:	3304      	adds	r3, #4
 800e964:	4619      	mov	r1, r3
 800e966:	4821      	ldr	r0, [pc, #132]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e968:	f004 fc94 	bl	8013294 <kalmanCoreUpdateWithYawError>
        break;
 800e96c:	e030      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeSweepAngle:
//        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
        break;
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 800e96e:	f107 0308 	add.w	r3, r7, #8
 800e972:	3304      	adds	r3, #4
 800e974:	4619      	mov	r1, r3
 800e976:	4820      	ldr	r0, [pc, #128]	@ (800e9f8 <updateQueuedMeasurements+0x160>)
 800e978:	f7fe fa36 	bl	800cde8 <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 800e97c:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f4 <updateQueuedMeasurements+0x15c>)
 800e97e:	461c      	mov	r4, r3
 800e980:	f107 030c 	add.w	r3, r7, #12
 800e984:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800e98c:	e020      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 800e98e:	f107 0308 	add.w	r3, r7, #8
 800e992:	3304      	adds	r3, #4
 800e994:	4619      	mov	r1, r3
 800e996:	4819      	ldr	r0, [pc, #100]	@ (800e9fc <updateQueuedMeasurements+0x164>)
 800e998:	f7fe fa26 	bl	800cde8 <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 800e99c:	4b18      	ldr	r3, [pc, #96]	@ (800ea00 <updateQueuedMeasurements+0x168>)
 800e99e:	461c      	mov	r4, r3
 800e9a0:	f107 030c 	add.w	r3, r7, #12
 800e9a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e9a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800e9ac:	e010      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d00c      	beq.n	800e9ce <updateQueuedMeasurements+0x136>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 800e9b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800e9b8:	78fb      	ldrb	r3, [r7, #3]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	eeb0 0a67 	vmov.f32	s0, s15
 800e9c0:	4910      	ldr	r1, [pc, #64]	@ (800ea04 <updateQueuedMeasurements+0x16c>)
 800e9c2:	480a      	ldr	r0, [pc, #40]	@ (800e9ec <updateQueuedMeasurements+0x154>)
 800e9c4:	f000 ffb8 	bl	800f938 <kalmanCoreUpdateWithBaro>
        }
        break;
 800e9c8:	e001      	b.n	800e9ce <updateQueuedMeasurements+0x136>
      default:
        break;
 800e9ca:	bf00      	nop
 800e9cc:	e000      	b.n	800e9d0 <updateQueuedMeasurements+0x138>
        break;
 800e9ce:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800e9d0:	f107 0308 	add.w	r3, r7, #8
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff fd75 	bl	800e4c4 <estimatorDequeue>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f47f af62 	bne.w	800e8a6 <updateQueuedMeasurements+0xe>
    }
  }
}
 800e9e2:	bf00      	nop
 800e9e4:	bf00      	nop
 800e9e6:	373c      	adds	r7, #60	@ 0x3c
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd90      	pop	{r4, r7, pc}
 800e9ec:	10002f74 	.word	0x10002f74
 800e9f0:	20009694 	.word	0x20009694
 800e9f4:	200096e4 	.word	0x200096e4
 800e9f8:	200096b8 	.word	0x200096b8
 800e9fc:	20009698 	.word	0x20009698
 800ea00:	200096d8 	.word	0x200096d8
 800ea04:	200096f4 	.word	0x200096f4

0800ea08 <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 800ea0e:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800ea3c <estimatorKalmanInit+0x34>
 800ea12:	480b      	ldr	r0, [pc, #44]	@ (800ea40 <estimatorKalmanInit+0x38>)
 800ea14:	f7fe f9d6 	bl	800cdc4 <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 800ea18:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800ea44 <estimatorKalmanInit+0x3c>
 800ea1c:	480a      	ldr	r0, [pc, #40]	@ (800ea48 <estimatorKalmanInit+0x40>)
 800ea1e:	f7fe f9d1 	bl	800cdc4 <axis3fSubSamplerInit>


  uint32_t nowMs = T2M(xTaskGetTickCount());
 800ea22:	f7f8 fdbd 	bl	80075a0 <xTaskGetTickCount>
 800ea26:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 800ea28:	687a      	ldr	r2, [r7, #4]
 800ea2a:	4908      	ldr	r1, [pc, #32]	@ (800ea4c <estimatorKalmanInit+0x44>)
 800ea2c:	4808      	ldr	r0, [pc, #32]	@ (800ea50 <estimatorKalmanInit+0x48>)
 800ea2e:	f000 fa37 	bl	800eea0 <kalmanCoreInit>
}
 800ea32:	bf00      	nop
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
 800ea3a:	bf00      	nop
 800ea3c:	411cf5c3 	.word	0x411cf5c3
 800ea40:	20009698 	.word	0x20009698
 800ea44:	3c8efa35 	.word	0x3c8efa35
 800ea48:	200096b8 	.word	0x200096b8
 800ea4c:	200096f4 	.word	0x200096f4
 800ea50:	10002f74 	.word	0x10002f74

0800ea54 <positionEstimate>:
};

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state);
static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state);

void positionEstimate(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep) {
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b088      	sub	sp, #32
 800ea58:	af02      	add	r7, sp, #8
 800ea5a:	6178      	str	r0, [r7, #20]
 800ea5c:	6139      	str	r1, [r7, #16]
 800ea5e:	60fa      	str	r2, [r7, #12]
 800ea60:	ed87 0a02 	vstr	s0, [r7, #8]
 800ea64:	607b      	str	r3, [r7, #4]
  positionEstimateInternal(estimate, baro, tofMeasurement, dt, stabilizerStep, &state);
 800ea66:	4b07      	ldr	r3, [pc, #28]	@ (800ea84 <positionEstimate+0x30>)
 800ea68:	9300      	str	r3, [sp, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	ed97 0a02 	vldr	s0, [r7, #8]
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	6939      	ldr	r1, [r7, #16]
 800ea74:	6978      	ldr	r0, [r7, #20]
 800ea76:	f000 f81b 	bl	800eab0 <positionEstimateInternal>
}
 800ea7a:	bf00      	nop
 800ea7c:	3718      	adds	r7, #24
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	20000058 	.word	0x20000058

0800ea88 <positionUpdateVelocity>:

void positionUpdateVelocity(float accWZ, float dt) {
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	ed87 0a01 	vstr	s0, [r7, #4]
 800ea92:	edc7 0a00 	vstr	s1, [r7]
  positionUpdateVelocityInternal(accWZ, dt, &state);
 800ea96:	4805      	ldr	r0, [pc, #20]	@ (800eaac <positionUpdateVelocity+0x24>)
 800ea98:	edd7 0a00 	vldr	s1, [r7]
 800ea9c:	ed97 0a01 	vldr	s0, [r7, #4]
 800eaa0:	f000 f8b2 	bl	800ec08 <positionUpdateVelocityInternal>
}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}
 800eaac:	20000058 	.word	0x20000058

0800eab0 <positionEstimateInternal>:

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state) {
 800eab0:	b580      	push	{r7, lr}
 800eab2:	b08a      	sub	sp, #40	@ 0x28
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6178      	str	r0, [r7, #20]
 800eab8:	6139      	str	r1, [r7, #16]
 800eaba:	60fa      	str	r2, [r7, #12]
 800eabc:	ed87 0a02 	vstr	s0, [r7, #8]
 800eac0:	607b      	str	r3, [r7, #4]
  float filteredZ;
  static float prev_estimatedZ = 0;
  static bool surfaceFollowingMode = false;

  const uint32_t MAX_SAMPLE_AGE = M2T(50);
 800eac2:	2332      	movs	r3, #50	@ 0x32
 800eac4:	623b      	str	r3, [r7, #32]

  uint32_t now = xTaskGetTickCount();
 800eac6:	f7f8 fd6b 	bl	80075a0 <xTaskGetTickCount>
 800eaca:	61f8      	str	r0, [r7, #28]
//  bool isSampleUseful = ((now - tofMeasurement->timestamp) <= MAX_SAMPLE_AGE);
  bool isSampleUseful  =  false;
 800eacc:	2300      	movs	r3, #0
 800eace:	76fb      	strb	r3, [r7, #27]
  if (isSampleUseful) {
 800ead0:	7efb      	ldrb	r3, [r7, #27]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d002      	beq.n	800eadc <positionEstimateInternal+0x2c>
    surfaceFollowingMode = true;
 800ead6:	4b4a      	ldr	r3, [pc, #296]	@ (800ec00 <positionEstimateInternal+0x150>)
 800ead8:	2201      	movs	r2, #1
 800eada:	701a      	strb	r2, [r3, #0]
  }

  if (surfaceFollowingMode) {
 800eadc:	4b48      	ldr	r3, [pc, #288]	@ (800ec00 <positionEstimateInternal+0x150>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d02e      	beq.n	800eb42 <positionEstimateInternal+0x92>
    if (isSampleUseful) {
 800eae4:	7efb      	ldrb	r3, [r7, #27]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d062      	beq.n	800ebb0 <positionEstimateInternal+0x100>
      // IIR filter zrange
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800eaea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaec:	ed93 7a02 	vldr	s14, [r3, #8]
 800eaf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eaf2:	edd3 7a00 	vldr	s15, [r3]
 800eaf6:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaZrange) * tofMeasurement->distance;
 800eafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eafc:	edd3 7a02 	vldr	s15, [r3, #8]
 800eb00:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb04:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	edd3 7a01 	vldr	s15, [r3, #4]
 800eb0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800eb12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb16:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      // Use zrange as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800eb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb1c:	ed93 7a04 	vldr	s14, [r3, #16]
 800eb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb22:	edd3 7a01 	vldr	s15, [r3, #4]
 800eb26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb2a:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb32:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800eb36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3c:	edc3 7a00 	vstr	s15, [r3]
 800eb40:	e036      	b.n	800ebb0 <positionEstimateInternal+0x100>
    }
  } else {
    // FIXME: A bit of an hack to init IIR filter
    if (state->estimatedZ == 0.0f) {
 800eb42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb44:	edd3 7a00 	vldr	s15, [r3]
 800eb48:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eb4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb50:	d103      	bne.n	800eb5a <positionEstimateInternal+0xaa>
      filteredZ = baro->asl;
 800eb52:	693b      	ldr	r3, [r7, #16]
 800eb54:	689b      	ldr	r3, [r3, #8]
 800eb56:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb58:	e017      	b.n	800eb8a <positionEstimateInternal+0xda>
    } else {
      // IIR filter asl
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800eb5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb5c:	ed93 7a03 	vldr	s14, [r3, #12]
 800eb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb62:	edd3 7a00 	vldr	s15, [r3]
 800eb66:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaAsl) * baro->asl;
 800eb6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb6c:	edd3 7a03 	vldr	s15, [r3, #12]
 800eb70:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eb74:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	edd3 7a02 	vldr	s15, [r3, #8]
 800eb7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800eb82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb86:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    #if CONFIG_CONTROLLER_PID_IMPROVED_BARO_Z_HOLD
      state->estimatedZ = filteredZ;
    #else
      // Use asl as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb8c:	ed93 7a04 	vldr	s14, [r3, #16]
 800eb90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb92:	edd3 7a01 	vldr	s15, [r3, #4]
 800eb96:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb9a:	edd7 7a02 	vldr	s15, [r7, #8]
 800eb9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eba2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800eba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebac:	edc3 7a00 	vstr	s15, [r3]
    #endif
  }

  estimate->position.x = 0.0f;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	f04f 0200 	mov.w	r2, #0
 800ebb6:	625a      	str	r2, [r3, #36]	@ 0x24
  estimate->position.y = 0.0f;
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f04f 0200 	mov.w	r2, #0
 800ebbe:	629a      	str	r2, [r3, #40]	@ 0x28
  estimate->position.z = state->estimatedZ;
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebc2:	681a      	ldr	r2, [r3, #0]
 800ebc4:	697b      	ldr	r3, [r7, #20]
 800ebc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  estimate->velocity.z = (state->estimatedZ - prev_estimatedZ) / dt;
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebca:	ed93 7a00 	vldr	s14, [r3]
 800ebce:	4b0d      	ldr	r3, [pc, #52]	@ (800ec04 <positionEstimateInternal+0x154>)
 800ebd0:	edd3 7a00 	vldr	s15, [r3]
 800ebd4:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ebd8:	ed97 7a02 	vldr	s14, [r7, #8]
 800ebdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  state->estimatedVZ = estimate->velocity.z;
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ebea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebec:	61da      	str	r2, [r3, #28]
  prev_estimatedZ = state->estimatedZ;
 800ebee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	4a04      	ldr	r2, [pc, #16]	@ (800ec04 <positionEstimateInternal+0x154>)
 800ebf4:	6013      	str	r3, [r2, #0]
}
 800ebf6:	bf00      	nop
 800ebf8:	3728      	adds	r7, #40	@ 0x28
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	200097a8 	.word	0x200097a8
 800ec04:	200097ac 	.word	0x200097ac

0800ec08 <positionUpdateVelocityInternal>:

static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state) {
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b084      	sub	sp, #16
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	ed87 0a03 	vstr	s0, [r7, #12]
 800ec12:	edc7 0a02 	vstr	s1, [r7, #8]
 800ec16:	6078      	str	r0, [r7, #4]
  state->velocityZ += deadband(accWZ, state->vAccDeadband) * dt * G;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ec1e:	eef0 0a67 	vmov.f32	s1, s15
 800ec22:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec26:	f004 fd9d 	bl	8013764 <deadband>
 800ec2a:	eeb0 7a40 	vmov.f32	s14, s0
 800ec2e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ec32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec36:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800ec6c <positionUpdateVelocityInternal+0x64>
 800ec3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	edd3 7a01 	vldr	s15, [r3, #4]
 800ec44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	edc3 7a01 	vstr	s15, [r3, #4]
  state->velocityZ *= state->velZAlpha;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	ed93 7a01 	vldr	s14, [r3, #4]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	edd3 7a06 	vldr	s15, [r3, #24]
 800ec5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800ec64:	bf00      	nop
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	411cf5c3 	.word	0x411cf5c3

0800ec70 <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b084      	sub	sp, #16
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f003 0303 	and.w	r3, r3, #3
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d004      	beq.n	800ec92 <assert_aligned_4_bytes+0x22>
 800ec88:	2239      	movs	r2, #57	@ 0x39
 800ec8a:	4904      	ldr	r1, [pc, #16]	@ (800ec9c <assert_aligned_4_bytes+0x2c>)
 800ec8c:	4804      	ldr	r0, [pc, #16]	@ (800eca0 <assert_aligned_4_bytes+0x30>)
 800ec8e:	f004 fc37 	bl	8013500 <assertFail>
}
 800ec92:	bf00      	nop
 800ec94:	3710      	adds	r7, #16
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}
 800ec9a:	bf00      	nop
 800ec9c:	0801b798 	.word	0x0801b798
 800eca0:	0801b7d8 	.word	0x0801b7d8

0800eca4 <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	6078      	str	r0, [r7, #4]
 800ecac:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f7ff ffde 	bl	800ec70 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800ecb4:	6838      	ldr	r0, [r7, #0]
 800ecb6:	f7ff ffdb 	bl	800ec70 <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800ecba:	6839      	ldr	r1, [r7, #0]
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f009 fbcd 	bl	801845c <arm_mat_trans_f32>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800ecc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d004      	beq.n	800ecd8 <mat_trans+0x34>
 800ecce:	2241      	movs	r2, #65	@ 0x41
 800ecd0:	4903      	ldr	r1, [pc, #12]	@ (800ece0 <mat_trans+0x3c>)
 800ecd2:	4804      	ldr	r0, [pc, #16]	@ (800ece4 <mat_trans+0x40>)
 800ecd4:	f004 fc14 	bl	8013500 <assertFail>
}
 800ecd8:	bf00      	nop
 800ecda:	3710      	adds	r7, #16
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	0801b798 	.word	0x0801b798
 800ece4:	0801b7f0 	.word	0x0801b7f0

0800ece8 <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b086      	sub	sp, #24
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	60f8      	str	r0, [r7, #12]
 800ecf0:	60b9      	str	r1, [r7, #8]
 800ecf2:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	f7ff ffbb 	bl	800ec70 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800ecfa:	68b8      	ldr	r0, [r7, #8]
 800ecfc:	f7ff ffb8 	bl	800ec70 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f7ff ffb5 	bl	800ec70 <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	68b9      	ldr	r1, [r7, #8]
 800ed0a:	68f8      	ldr	r0, [r7, #12]
 800ed0c:	f009 fc54 	bl	80185b8 <arm_mat_mult_f32>
 800ed10:	4603      	mov	r3, r0
 800ed12:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800ed14:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d004      	beq.n	800ed26 <mat_mult+0x3e>
 800ed1c:	2252      	movs	r2, #82	@ 0x52
 800ed1e:	4904      	ldr	r1, [pc, #16]	@ (800ed30 <mat_mult+0x48>)
 800ed20:	4804      	ldr	r0, [pc, #16]	@ (800ed34 <mat_mult+0x4c>)
 800ed22:	f004 fbed 	bl	8013500 <assertFail>
}
 800ed26:	bf00      	nop
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	0801b798 	.word	0x0801b798
 800ed34:	0801b7f0 	.word	0x0801b7f0

0800ed38 <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b086      	sub	sp, #24
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800ed42:	f04f 0300 	mov.w	r3, #0
 800ed46:	60bb      	str	r3, [r7, #8]
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	613b      	str	r3, [r7, #16]
 800ed4c:	f107 0308 	add.w	r3, r7, #8
 800ed50:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800ed52:	edd7 7a04 	vldr	s15, [r7, #16]
 800ed56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ed5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5e:	db0a      	blt.n	800ed76 <arm_sqrt+0x3e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800ed60:	ed97 0a04 	vldr	s0, [r7, #16]
 800ed64:	f009 ffc8 	bl	8018cf8 <sqrtf>
 800ed68:	eef0 7a40 	vmov.f32	s15, s0
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800ed72:	2300      	movs	r3, #0
 800ed74:	e005      	b.n	800ed82 <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	f04f 0200 	mov.w	r2, #0
 800ed7c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800ed7e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 800ed82:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800ed84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d004      	beq.n	800ed96 <arm_sqrt+0x5e>
 800ed8c:	2258      	movs	r2, #88	@ 0x58
 800ed8e:	4906      	ldr	r1, [pc, #24]	@ (800eda8 <arm_sqrt+0x70>)
 800ed90:	4806      	ldr	r0, [pc, #24]	@ (800edac <arm_sqrt+0x74>)
 800ed92:	f004 fbb5 	bl	8013500 <assertFail>
  return pOut;
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	ee07 3a90 	vmov	s15, r3
}
 800ed9c:	eeb0 0a67 	vmov.f32	s0, s15
 800eda0:	3718      	adds	r7, #24
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}
 800eda6:	bf00      	nop
 800eda8:	0801b798 	.word	0x0801b798
 800edac:	0801b7f0 	.word	0x0801b7f0

0800edb0 <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b086      	sub	sp, #24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	ed87 0a02 	vstr	s0, [r7, #8]
 800edbc:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 800edbe:	6879      	ldr	r1, [r7, #4]
 800edc0:	ed97 0a02 	vldr	s0, [r7, #8]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f009 fba5 	bl	8018514 <arm_mat_scale_f32>
 800edca:	4603      	mov	r3, r0
 800edcc:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800edce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d004      	beq.n	800ede0 <mat_scale+0x30>
 800edd6:	2272      	movs	r2, #114	@ 0x72
 800edd8:	4903      	ldr	r1, [pc, #12]	@ (800ede8 <mat_scale+0x38>)
 800edda:	4804      	ldr	r0, [pc, #16]	@ (800edec <mat_scale+0x3c>)
 800eddc:	f004 fb90 	bl	8013500 <assertFail>
}
 800ede0:	bf00      	nop
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	0801b798 	.word	0x0801b798
 800edec:	0801b7f0 	.word	0x0801b7f0

0800edf0 <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  return;
 800edf8:	bf00      	nop
}
 800edfa:	370c      	adds	r7, #12
 800edfc:	46bd      	mov	sp, r7
 800edfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee02:	4770      	bx	lr

0800ee04 <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 800ee04:	b480      	push	{r7}
 800ee06:	b083      	sub	sp, #12
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	4a21      	ldr	r2, [pc, #132]	@ (800ee94 <kalmanCoreDefaultParams+0x90>)
 800ee10:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ee18:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a1e      	ldr	r2, [pc, #120]	@ (800ee98 <kalmanCoreDefaultParams+0x94>)
 800ee1e:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4a1d      	ldr	r2, [pc, #116]	@ (800ee98 <kalmanCoreDefaultParams+0x94>)
 800ee24:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4a1b      	ldr	r2, [pc, #108]	@ (800ee98 <kalmanCoreDefaultParams+0x94>)
 800ee2a:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800ee32:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800ee3a:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f04f 0200 	mov.w	r2, #0
 800ee42:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f04f 0200 	mov.w	r2, #0
 800ee4a:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	f04f 0200 	mov.w	r2, #0
 800ee52:	625a      	str	r2, [r3, #36]	@ 0x24
  params->measNoiseBaro = 2.0f;           // meters
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800ee5a:	629a      	str	r2, [r3, #40]	@ 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	4a0f      	ldr	r2, [pc, #60]	@ (800ee9c <kalmanCoreDefaultParams+0x98>)
 800ee60:	62da      	str	r2, [r3, #44]	@ 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4a0d      	ldr	r2, [pc, #52]	@ (800ee9c <kalmanCoreDefaultParams+0x98>)
 800ee66:	631a      	str	r2, [r3, #48]	@ 0x30

  params->initialX = 0.0;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f04f 0200 	mov.w	r2, #0
 800ee6e:	635a      	str	r2, [r3, #52]	@ 0x34
  params->initialY = 0.0;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f04f 0200 	mov.w	r2, #0
 800ee76:	639a      	str	r2, [r3, #56]	@ 0x38
  params->initialZ = 0.0;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f04f 0200 	mov.w	r2, #0
 800ee7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f04f 0200 	mov.w	r2, #0
 800ee86:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800ee88:	bf00      	nop
 800ee8a:	370c      	adds	r7, #12
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee92:	4770      	bx	lr
 800ee94:	42c80000 	.word	0x42c80000
 800ee98:	3c23d70a 	.word	0x3c23d70a
 800ee9c:	3dcccccd 	.word	0x3dcccccd

0800eea0 <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b08a      	sub	sp, #40	@ 0x28
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	60b9      	str	r1, [r7, #8]
 800eeaa:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 800eeac:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800eeb0:	2100      	movs	r1, #0
 800eeb2:	68f8      	ldr	r0, [r7, #12]
 800eeb4:	f009 fdb6 	bl	8018a24 <memset>

  this->S[KC_STATE_X] = params->initialX;
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 800eed0:	68bb      	ldr	r3, [r7, #8]
 800eed2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800eed6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eeda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eede:	eeb0 0a47 	vmov.f32	s0, s14
 800eee2:	f009 fd55 	bl	8018990 <arm_cos_f32>
 800eee6:	eef0 7a40 	vmov.f32	s15, s0
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
  this->initialQuaternion[1] = 0.0;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f04f 0200 	mov.w	r2, #0
 800eef6:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  this->initialQuaternion[2] = 0.0;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f04f 0200 	mov.w	r2, #0
 800ef00:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800ef0a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ef0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ef12:	eeb0 0a47 	vmov.f32	s0, s14
 800ef16:	f009 fcf5 	bl	8018904 <arm_sin_f32>
 800ef1a:	eef0 7a40 	vmov.f32	s15, s0
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 800ef24:	2300      	movs	r3, #0
 800ef26:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef28:	e00f      	b.n	800ef4a <kalmanCoreInit+0xaa>
 800ef2a:	68fa      	ldr	r2, [r7, #12]
 800ef2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef2e:	336a      	adds	r3, #106	@ 0x6a
 800ef30:	009b      	lsls	r3, r3, #2
 800ef32:	4413      	add	r3, r2
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	68f9      	ldr	r1, [r7, #12]
 800ef38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3a:	3308      	adds	r3, #8
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	440b      	add	r3, r1
 800ef40:	3304      	adds	r3, #4
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef46:	3301      	adds	r3, #1
 800ef48:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4c:	2b03      	cmp	r3, #3
 800ef4e:	ddec      	ble.n	800ef2a <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 800ef50:	2300      	movs	r3, #0
 800ef52:	623b      	str	r3, [r7, #32]
 800ef54:	e020      	b.n	800ef98 <kalmanCoreInit+0xf8>
 800ef56:	2300      	movs	r3, #0
 800ef58:	61fb      	str	r3, [r7, #28]
 800ef5a:	e017      	b.n	800ef8c <kalmanCoreInit+0xec>
 800ef5c:	6a3a      	ldr	r2, [r7, #32]
 800ef5e:	69fb      	ldr	r3, [r7, #28]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d102      	bne.n	800ef6a <kalmanCoreInit+0xca>
 800ef64:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800ef68:	e001      	b.n	800ef6e <kalmanCoreInit+0xce>
 800ef6a:	f04f 0100 	mov.w	r1, #0
 800ef6e:	68f8      	ldr	r0, [r7, #12]
 800ef70:	6a3a      	ldr	r2, [r7, #32]
 800ef72:	4613      	mov	r3, r2
 800ef74:	005b      	lsls	r3, r3, #1
 800ef76:	4413      	add	r3, r2
 800ef78:	69fa      	ldr	r2, [r7, #28]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	330c      	adds	r3, #12
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	4403      	add	r3, r0
 800ef82:	3304      	adds	r3, #4
 800ef84:	6019      	str	r1, [r3, #0]
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	61fb      	str	r3, [r7, #28]
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	2b02      	cmp	r3, #2
 800ef90:	dde4      	ble.n	800ef5c <kalmanCoreInit+0xbc>
 800ef92:	6a3b      	ldr	r3, [r7, #32]
 800ef94:	3301      	adds	r3, #1
 800ef96:	623b      	str	r3, [r7, #32]
 800ef98:	6a3b      	ldr	r3, [r7, #32]
 800ef9a:	2b02      	cmp	r3, #2
 800ef9c:	dddb      	ble.n	800ef56 <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 800ef9e:	2300      	movs	r3, #0
 800efa0:	61bb      	str	r3, [r7, #24]
 800efa2:	e018      	b.n	800efd6 <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 800efa4:	2300      	movs	r3, #0
 800efa6:	617b      	str	r3, [r7, #20]
 800efa8:	e00f      	b.n	800efca <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 800efaa:	68f9      	ldr	r1, [r7, #12]
 800efac:	69ba      	ldr	r2, [r7, #24]
 800efae:	4613      	mov	r3, r2
 800efb0:	00db      	lsls	r3, r3, #3
 800efb2:	4413      	add	r3, r2
 800efb4:	697a      	ldr	r2, [r7, #20]
 800efb6:	4413      	add	r3, r2
 800efb8:	3316      	adds	r3, #22
 800efba:	009b      	lsls	r3, r3, #2
 800efbc:	440b      	add	r3, r1
 800efbe:	f04f 0200 	mov.w	r2, #0
 800efc2:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	3301      	adds	r3, #1
 800efc8:	617b      	str	r3, [r7, #20]
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2b08      	cmp	r3, #8
 800efce:	ddec      	ble.n	800efaa <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	3301      	adds	r3, #1
 800efd4:	61bb      	str	r3, [r7, #24]
 800efd6:	69bb      	ldr	r3, [r7, #24]
 800efd8:	2b08      	cmp	r3, #8
 800efda:	dde3      	ble.n	800efa4 <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	edd3 7a00 	vldr	s15, [r3]
 800efe2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800efe6:	eeb0 0a67 	vmov.f32	s0, s15
 800efea:	f009 fe2d 	bl	8018c48 <powf>
 800efee:	eef0 7a40 	vmov.f32	s15, s0
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	edd3 7a00 	vldr	s15, [r3]
 800effe:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f002:	eeb0 0a67 	vmov.f32	s0, s15
 800f006:	f009 fe1f 	bl	8018c48 <powf>
 800f00a:	eef0 7a40 	vmov.f32	s15, s0
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	edd3 7a01 	vldr	s15, [r3, #4]
 800f01a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f01e:	eeb0 0a67 	vmov.f32	s0, s15
 800f022:	f009 fe11 	bl	8018c48 <powf>
 800f026:	eef0 7a40 	vmov.f32	s15, s0
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	edd3 7a02 	vldr	s15, [r3, #8]
 800f036:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f03a:	eeb0 0a67 	vmov.f32	s0, s15
 800f03e:	f009 fe03 	bl	8018c48 <powf>
 800f042:	eef0 7a40 	vmov.f32	s15, s0
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	edd3 7a02 	vldr	s15, [r3, #8]
 800f052:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f056:	eeb0 0a67 	vmov.f32	s0, s15
 800f05a:	f009 fdf5 	bl	8018c48 <powf>
 800f05e:	eef0 7a40 	vmov.f32	s15, s0
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	edd3 7a02 	vldr	s15, [r3, #8]
 800f06e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f072:	eeb0 0a67 	vmov.f32	s0, s15
 800f076:	f009 fde7 	bl	8018c48 <powf>
 800f07a:	eef0 7a40 	vmov.f32	s15, s0
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	edd3 7a03 	vldr	s15, [r3, #12]
 800f08a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f08e:	eeb0 0a67 	vmov.f32	s0, s15
 800f092:	f009 fdd9 	bl	8018c48 <powf>
 800f096:	eef0 7a40 	vmov.f32	s15, s0
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	edd3 7a03 	vldr	s15, [r3, #12]
 800f0a6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f0aa:	eeb0 0a67 	vmov.f32	s0, s15
 800f0ae:	f009 fdcb 	bl	8018c48 <powf>
 800f0b2:	eef0 7a40 	vmov.f32	s15, s0
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	edd3 7a04 	vldr	s15, [r3, #16]
 800f0c2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f0c6:	eeb0 0a67 	vmov.f32	s0, s15
 800f0ca:	f009 fdbd 	bl	8018c48 <powf>
 800f0ce:	eef0 7a40 	vmov.f32	s15, s0
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  this->Pm.numRows = KC_STATE_DIM;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	2209      	movs	r2, #9
 800f0dc:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	2209      	movs	r2, #9
 800f0e4:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
  this->Pm.pData = (float*)this->P;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

  this->baroReferenceHeight = 0.0;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	f04f 0200 	mov.w	r2, #0
 800f0fa:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  this->isUpdated = false;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  this->lastPredictionMs = nowMs;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	687a      	ldr	r2, [r7, #4]
 800f10a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 800f116:	bf00      	nop
 800f118:	3728      	adds	r7, #40	@ 0x28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
	...

0800f120 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b090      	sub	sp, #64	@ 0x40
 800f124:	af00      	add	r7, sp, #0
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	ed87 0a01 	vstr	s0, [r7, #4]
 800f12e:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d004      	beq.n	800f144 <kalmanCoreScalarUpdate+0x24>
 800f13a:	22e8      	movs	r2, #232	@ 0xe8
 800f13c:	49ac      	ldr	r1, [pc, #688]	@ (800f3f0 <kalmanCoreScalarUpdate+0x2d0>)
 800f13e:	48ad      	ldr	r0, [pc, #692]	@ (800f3f4 <kalmanCoreScalarUpdate+0x2d4>)
 800f140:	f004 f9de 	bl	8013500 <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	885b      	ldrh	r3, [r3, #2]
 800f148:	2b09      	cmp	r3, #9
 800f14a:	d004      	beq.n	800f156 <kalmanCoreScalarUpdate+0x36>
 800f14c:	22e9      	movs	r2, #233	@ 0xe9
 800f14e:	49a8      	ldr	r1, [pc, #672]	@ (800f3f0 <kalmanCoreScalarUpdate+0x2d0>)
 800f150:	48a9      	ldr	r0, [pc, #676]	@ (800f3f8 <kalmanCoreScalarUpdate+0x2d8>)
 800f152:	f004 f9d5 	bl	8013500 <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 800f156:	49a9      	ldr	r1, [pc, #676]	@ (800f3fc <kalmanCoreScalarUpdate+0x2dc>)
 800f158:	68b8      	ldr	r0, [r7, #8]
 800f15a:	f7ff fda3 	bl	800eca4 <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800f164:	4aa6      	ldr	r2, [pc, #664]	@ (800f400 <kalmanCoreScalarUpdate+0x2e0>)
 800f166:	49a5      	ldr	r1, [pc, #660]	@ (800f3fc <kalmanCoreScalarUpdate+0x2dc>)
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff fdbd 	bl	800ece8 <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 800f16e:	edd7 7a00 	vldr	s15, [r7]
 800f172:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f176:	edc7 7a08 	vstr	s15, [r7, #32]
  double HPHR = R; // HPH' + R
 800f17a:	6a38      	ldr	r0, [r7, #32]
 800f17c:	f7f1 f996 	bl	80004ac <__aeabi_f2d>
 800f180:	4602      	mov	r2, r0
 800f182:	460b      	mov	r3, r1
 800f184:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800f188:	2300      	movs	r3, #0
 800f18a:	637b      	str	r3, [r7, #52]	@ 0x34
 800f18c:	e01f      	b.n	800f1ce <kalmanCoreScalarUpdate+0xae>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	685a      	ldr	r2, [r3, #4]
 800f192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f194:	009b      	lsls	r3, r3, #2
 800f196:	4413      	add	r3, r2
 800f198:	ed93 7a00 	vldr	s14, [r3]
 800f19c:	4a99      	ldr	r2, [pc, #612]	@ (800f404 <kalmanCoreScalarUpdate+0x2e4>)
 800f19e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1a0:	009b      	lsls	r3, r3, #2
 800f1a2:	4413      	add	r3, r2
 800f1a4:	edd3 7a00 	vldr	s15, [r3]
 800f1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f1ac:	ee17 0a90 	vmov	r0, s15
 800f1b0:	f7f1 f97c 	bl	80004ac <__aeabi_f2d>
 800f1b4:	4602      	mov	r2, r0
 800f1b6:	460b      	mov	r3, r1
 800f1b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f1bc:	f7f1 f818 	bl	80001f0 <__adddf3>
 800f1c0:	4602      	mov	r2, r0
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800f1c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800f1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1d0:	2b08      	cmp	r3, #8
 800f1d2:	dddc      	ble.n	800f18e <kalmanCoreScalarUpdate+0x6e>

  }
  ASSERT(!isnan(HPHR));
 800f1d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f1d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800f1dc:	f7f1 fc58 	bl	8000a90 <__aeabi_dcmpun>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d004      	beq.n	800f1f0 <kalmanCoreScalarUpdate+0xd0>
 800f1e6:	22f6      	movs	r2, #246	@ 0xf6
 800f1e8:	4981      	ldr	r1, [pc, #516]	@ (800f3f0 <kalmanCoreScalarUpdate+0x2d0>)
 800f1ea:	4887      	ldr	r0, [pc, #540]	@ (800f408 <kalmanCoreScalarUpdate+0x2e8>)
 800f1ec:	f004 f988 	bl	8013500 <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800f1f4:	e032      	b.n	800f25c <kalmanCoreScalarUpdate+0x13c>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 800f1f6:	4a83      	ldr	r2, [pc, #524]	@ (800f404 <kalmanCoreScalarUpdate+0x2e4>)
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	4618      	mov	r0, r3
 800f202:	f7f1 f953 	bl	80004ac <__aeabi_f2d>
 800f206:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800f20a:	f7f1 fad1 	bl	80007b0 <__aeabi_ddiv>
 800f20e:	4602      	mov	r2, r0
 800f210:	460b      	mov	r3, r1
 800f212:	4610      	mov	r0, r2
 800f214:	4619      	mov	r1, r3
 800f216:	f7f1 fc51 	bl	8000abc <__aeabi_d2f>
 800f21a:	4602      	mov	r2, r0
 800f21c:	497b      	ldr	r1, [pc, #492]	@ (800f40c <kalmanCoreScalarUpdate+0x2ec>)
 800f21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f220:	009b      	lsls	r3, r3, #2
 800f222:	440b      	add	r3, r1
 800f224:	601a      	str	r2, [r3, #0]
    this->S[i] = this->S[i] + K[i] * error; // state update
 800f226:	68fa      	ldr	r2, [r7, #12]
 800f228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f22a:	009b      	lsls	r3, r3, #2
 800f22c:	4413      	add	r3, r2
 800f22e:	ed93 7a00 	vldr	s14, [r3]
 800f232:	4a76      	ldr	r2, [pc, #472]	@ (800f40c <kalmanCoreScalarUpdate+0x2ec>)
 800f234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f236:	009b      	lsls	r3, r3, #2
 800f238:	4413      	add	r3, r2
 800f23a:	edd3 6a00 	vldr	s13, [r3]
 800f23e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f246:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	4413      	add	r3, r2
 800f252:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 800f256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f258:	3301      	adds	r3, #1
 800f25a:	633b      	str	r3, [r7, #48]	@ 0x30
 800f25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f25e:	2b08      	cmp	r3, #8
 800f260:	ddc9      	ble.n	800f1f6 <kalmanCoreScalarUpdate+0xd6>
  }
  assertStateNotNaN(this);
 800f262:	68f8      	ldr	r0, [r7, #12]
 800f264:	f7ff fdc4 	bl	800edf0 <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 800f268:	4a69      	ldr	r2, [pc, #420]	@ (800f410 <kalmanCoreScalarUpdate+0x2f0>)
 800f26a:	68b9      	ldr	r1, [r7, #8]
 800f26c:	4869      	ldr	r0, [pc, #420]	@ (800f414 <kalmanCoreScalarUpdate+0x2f4>)
 800f26e:	f7ff fd3b 	bl	800ece8 <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 800f272:	2300      	movs	r3, #0
 800f274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f276:	e01a      	b.n	800f2ae <kalmanCoreScalarUpdate+0x18e>
 800f278:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f27a:	4613      	mov	r3, r2
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	4413      	add	r3, r2
 800f280:	005b      	lsls	r3, r3, #1
 800f282:	4a65      	ldr	r2, [pc, #404]	@ (800f418 <kalmanCoreScalarUpdate+0x2f8>)
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4413      	add	r3, r2
 800f288:	edd3 7a00 	vldr	s15, [r3]
 800f28c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f28e:	4613      	mov	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	4413      	add	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f29a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f29e:	4a5e      	ldr	r2, [pc, #376]	@ (800f418 <kalmanCoreScalarUpdate+0x2f8>)
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	4413      	add	r3, r2
 800f2a4:	edc3 7a00 	vstr	s15, [r3]
 800f2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f2ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2b0:	2b08      	cmp	r3, #8
 800f2b2:	dde1      	ble.n	800f278 <kalmanCoreScalarUpdate+0x158>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 800f2b4:	4959      	ldr	r1, [pc, #356]	@ (800f41c <kalmanCoreScalarUpdate+0x2fc>)
 800f2b6:	4856      	ldr	r0, [pc, #344]	@ (800f410 <kalmanCoreScalarUpdate+0x2f0>)
 800f2b8:	f7ff fcf4 	bl	800eca4 <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800f2c2:	4a57      	ldr	r2, [pc, #348]	@ (800f420 <kalmanCoreScalarUpdate+0x300>)
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	4852      	ldr	r0, [pc, #328]	@ (800f410 <kalmanCoreScalarUpdate+0x2f0>)
 800f2c8:	f7ff fd0e 	bl	800ece8 <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	4951      	ldr	r1, [pc, #324]	@ (800f41c <kalmanCoreScalarUpdate+0x2fc>)
 800f2d6:	4852      	ldr	r0, [pc, #328]	@ (800f420 <kalmanCoreScalarUpdate+0x300>)
 800f2d8:	f7ff fd06 	bl	800ece8 <mat_mult>
  assertStateNotNaN(this);
 800f2dc:	68f8      	ldr	r0, [r7, #12]
 800f2de:	f7ff fd87 	bl	800edf0 <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f2e6:	e101      	b.n	800f4ec <kalmanCoreScalarUpdate+0x3cc>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800f2e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2ec:	e0f7      	b.n	800f4de <kalmanCoreScalarUpdate+0x3be>
      double v = K[i] * R * K[j];
 800f2ee:	4a47      	ldr	r2, [pc, #284]	@ (800f40c <kalmanCoreScalarUpdate+0x2ec>)
 800f2f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	4413      	add	r3, r2
 800f2f6:	ed93 7a00 	vldr	s14, [r3]
 800f2fa:	edd7 7a08 	vldr	s15, [r7, #32]
 800f2fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f302:	4a42      	ldr	r2, [pc, #264]	@ (800f40c <kalmanCoreScalarUpdate+0x2ec>)
 800f304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f306:	009b      	lsls	r3, r3, #2
 800f308:	4413      	add	r3, r2
 800f30a:	edd3 7a00 	vldr	s15, [r3]
 800f30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f312:	ee17 0a90 	vmov	r0, s15
 800f316:	f7f1 f8c9 	bl	80004ac <__aeabi_f2d>
 800f31a:	4602      	mov	r2, r0
 800f31c:	460b      	mov	r3, r1
 800f31e:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 800f322:	68f9      	ldr	r1, [r7, #12]
 800f324:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f326:	4613      	mov	r3, r2
 800f328:	00db      	lsls	r3, r3, #3
 800f32a:	4413      	add	r3, r2
 800f32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f32e:	4413      	add	r3, r2
 800f330:	3316      	adds	r3, #22
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	440b      	add	r3, r1
 800f336:	edd3 7a00 	vldr	s15, [r3]
 800f33a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f33e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f342:	68f9      	ldr	r1, [r7, #12]
 800f344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f346:	4613      	mov	r3, r2
 800f348:	00db      	lsls	r3, r3, #3
 800f34a:	4413      	add	r3, r2
 800f34c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f34e:	4413      	add	r3, r2
 800f350:	3316      	adds	r3, #22
 800f352:	009b      	lsls	r3, r3, #2
 800f354:	440b      	add	r3, r1
 800f356:	edd3 7a00 	vldr	s15, [r3]
 800f35a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f35e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f366:	ee17 0a90 	vmov	r0, s15
 800f36a:	f7f1 f89f 	bl	80004ac <__aeabi_f2d>
 800f36e:	4602      	mov	r2, r0
 800f370:	460b      	mov	r3, r1
 800f372:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800f376:	f7f0 ff3b 	bl	80001f0 <__adddf3>
 800f37a:	4602      	mov	r2, r0
 800f37c:	460b      	mov	r3, r1
 800f37e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800f382:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f386:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f38a:	f7f1 fb81 	bl	8000a90 <__aeabi_dcmpun>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d109      	bne.n	800f3a8 <kalmanCoreScalarUpdate+0x288>
 800f394:	f04f 0200 	mov.w	r2, #0
 800f398:	4b22      	ldr	r3, [pc, #136]	@ (800f424 <kalmanCoreScalarUpdate+0x304>)
 800f39a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f39e:	f7f1 fb6d 	bl	8000a7c <__aeabi_dcmpgt>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d041      	beq.n	800f42c <kalmanCoreScalarUpdate+0x30c>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800f3a8:	68f9      	ldr	r1, [r7, #12]
 800f3aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	00db      	lsls	r3, r3, #3
 800f3b0:	4413      	add	r3, r2
 800f3b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3b4:	4413      	add	r3, r2
 800f3b6:	3316      	adds	r3, #22
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	440b      	add	r3, r1
 800f3bc:	4a1a      	ldr	r2, [pc, #104]	@ (800f428 <kalmanCoreScalarUpdate+0x308>)
 800f3be:	601a      	str	r2, [r3, #0]
 800f3c0:	68f9      	ldr	r1, [r7, #12]
 800f3c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	00db      	lsls	r3, r3, #3
 800f3c8:	4413      	add	r3, r2
 800f3ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3cc:	4413      	add	r3, r2
 800f3ce:	3316      	adds	r3, #22
 800f3d0:	009b      	lsls	r3, r3, #2
 800f3d2:	440b      	add	r3, r1
 800f3d4:	6819      	ldr	r1, [r3, #0]
 800f3d6:	68f8      	ldr	r0, [r7, #12]
 800f3d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3da:	4613      	mov	r3, r2
 800f3dc:	00db      	lsls	r3, r3, #3
 800f3de:	4413      	add	r3, r2
 800f3e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f3e2:	4413      	add	r3, r2
 800f3e4:	3316      	adds	r3, #22
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	4403      	add	r3, r0
 800f3ea:	6019      	str	r1, [r3, #0]
 800f3ec:	e074      	b.n	800f4d8 <kalmanCoreScalarUpdate+0x3b8>
 800f3ee:	bf00      	nop
 800f3f0:	0801b80c 	.word	0x0801b80c
 800f3f4:	0801b838 	.word	0x0801b838
 800f3f8:	0801b84c 	.word	0x0801b84c
 800f3fc:	20000078 	.word	0x20000078
 800f400:	20000080 	.word	0x20000080
 800f404:	10003f10 	.word	0x10003f10
 800f408:	0801b868 	.word	0x0801b868
 800f40c:	10003afc 	.word	0x10003afc
 800f410:	20000090 	.word	0x20000090
 800f414:	20000088 	.word	0x20000088
 800f418:	10003b20 	.word	0x10003b20
 800f41c:	20000098 	.word	0x20000098
 800f420:	200000a0 	.word	0x200000a0
 800f424:	40590000 	.word	0x40590000
 800f428:	42c80000 	.word	0x42c80000
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800f42c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f42e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f430:	429a      	cmp	r2, r3
 800f432:	d12c      	bne.n	800f48e <kalmanCoreScalarUpdate+0x36e>
 800f434:	a337      	add	r3, pc, #220	@ (adr r3, 800f514 <kalmanCoreScalarUpdate+0x3f4>)
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f43e:	f7f1 faff 	bl	8000a40 <__aeabi_dcmplt>
 800f442:	4603      	mov	r3, r0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d022      	beq.n	800f48e <kalmanCoreScalarUpdate+0x36e>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800f448:	68f9      	ldr	r1, [r7, #12]
 800f44a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f44c:	4613      	mov	r3, r2
 800f44e:	00db      	lsls	r3, r3, #3
 800f450:	4413      	add	r3, r2
 800f452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f454:	4413      	add	r3, r2
 800f456:	3316      	adds	r3, #22
 800f458:	009b      	lsls	r3, r3, #2
 800f45a:	440b      	add	r3, r1
 800f45c:	4a2c      	ldr	r2, [pc, #176]	@ (800f510 <kalmanCoreScalarUpdate+0x3f0>)
 800f45e:	601a      	str	r2, [r3, #0]
 800f460:	68f9      	ldr	r1, [r7, #12]
 800f462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f464:	4613      	mov	r3, r2
 800f466:	00db      	lsls	r3, r3, #3
 800f468:	4413      	add	r3, r2
 800f46a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f46c:	4413      	add	r3, r2
 800f46e:	3316      	adds	r3, #22
 800f470:	009b      	lsls	r3, r3, #2
 800f472:	440b      	add	r3, r1
 800f474:	6819      	ldr	r1, [r3, #0]
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f47a:	4613      	mov	r3, r2
 800f47c:	00db      	lsls	r3, r3, #3
 800f47e:	4413      	add	r3, r2
 800f480:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f482:	4413      	add	r3, r2
 800f484:	3316      	adds	r3, #22
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4403      	add	r3, r0
 800f48a:	6019      	str	r1, [r3, #0]
 800f48c:	e024      	b.n	800f4d8 <kalmanCoreScalarUpdate+0x3b8>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800f48e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f492:	f7f1 fb13 	bl	8000abc <__aeabi_d2f>
 800f496:	68f9      	ldr	r1, [r7, #12]
 800f498:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f49a:	4613      	mov	r3, r2
 800f49c:	00db      	lsls	r3, r3, #3
 800f49e:	4413      	add	r3, r2
 800f4a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4a2:	4413      	add	r3, r2
 800f4a4:	3316      	adds	r3, #22
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	440b      	add	r3, r1
 800f4aa:	6018      	str	r0, [r3, #0]
 800f4ac:	68f9      	ldr	r1, [r7, #12]
 800f4ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4b0:	4613      	mov	r3, r2
 800f4b2:	00db      	lsls	r3, r3, #3
 800f4b4:	4413      	add	r3, r2
 800f4b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4b8:	4413      	add	r3, r2
 800f4ba:	3316      	adds	r3, #22
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	440b      	add	r3, r1
 800f4c0:	6819      	ldr	r1, [r3, #0]
 800f4c2:	68f8      	ldr	r0, [r7, #12]
 800f4c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	00db      	lsls	r3, r3, #3
 800f4ca:	4413      	add	r3, r2
 800f4cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4ce:	4413      	add	r3, r2
 800f4d0:	3316      	adds	r3, #22
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	4403      	add	r3, r0
 800f4d6:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800f4d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4da:	3301      	adds	r3, #1
 800f4dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e0:	2b08      	cmp	r3, #8
 800f4e2:	f77f af04 	ble.w	800f2ee <kalmanCoreScalarUpdate+0x1ce>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800f4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ee:	2b08      	cmp	r3, #8
 800f4f0:	f77f aefa 	ble.w	800f2e8 <kalmanCoreScalarUpdate+0x1c8>
      }
    }
  }

  assertStateNotNaN(this);
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7ff fc7b 	bl	800edf0 <assertStateNotNaN>

  this->isUpdated = true;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800f502:	bf00      	nop
 800f504:	3740      	adds	r7, #64	@ 0x40
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	f3af 8000 	nop.w
 800f510:	358637bd 	.word	0x358637bd
 800f514:	a0000000 	.word	0xa0000000
 800f518:	3eb0c6f7 	.word	0x3eb0c6f7
 800f51c:	00000000 	.word	0x00000000

0800f520 <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 800f526:	af00      	add	r7, sp, #0
 800f528:	f507 7430 	add.w	r4, r7, #704	@ 0x2c0
 800f52c:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 800f530:	6020      	str	r0, [r4, #0]
 800f532:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800f536:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 800f53a:	6001      	str	r1, [r0, #0]
 800f53c:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 800f540:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 800f544:	600a      	str	r2, [r1, #0]
 800f546:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 800f54a:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800f54e:	6013      	str	r3, [r2, #0]
 800f550:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f554:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800f558:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static double tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 800f55c:	2300      	movs	r3, #0
 800f55e:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800f562:	e030      	b.n	800f5c6 <kalmanCoreUpdateWithPKE+0xa6>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 800f564:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f568:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f56c:	681a      	ldr	r2, [r3, #0]
 800f56e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800f572:	009b      	lsls	r3, r3, #2
 800f574:	4413      	add	r3, r2
 800f576:	ed93 7a00 	vldr	s14, [r3]
 800f57a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f57e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800f58a:	009b      	lsls	r3, r3, #2
 800f58c:	4413      	add	r3, r2
 800f58e:	edd3 6a00 	vldr	s13, [r3]
 800f592:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f596:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800f59a:	edd3 7a00 	vldr	s15, [r3]
 800f59e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5a6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f5aa:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f5ae:	681a      	ldr	r2, [r3, #0]
 800f5b0:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800f5b4:	009b      	lsls	r3, r3, #2
 800f5b6:	4413      	add	r3, r2
 800f5b8:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 800f5bc:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800f5c6:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800f5ca:	2b08      	cmp	r3, #8
 800f5cc:	ddca      	ble.n	800f564 <kalmanCoreUpdateWithPKE+0x44>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 800f5ce:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f5d2:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 800f5d6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f5da:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800f5de:	4ad0      	ldr	r2, [pc, #832]	@ (800f920 <kalmanCoreUpdateWithPKE+0x400>)
 800f5e0:	6809      	ldr	r1, [r1, #0]
 800f5e2:	6818      	ldr	r0, [r3, #0]
 800f5e4:	f7ff fb80 	bl	800ece8 <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 800f5e8:	49cd      	ldr	r1, [pc, #820]	@ (800f920 <kalmanCoreUpdateWithPKE+0x400>)
 800f5ea:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800f5ee:	48cc      	ldr	r0, [pc, #816]	@ (800f920 <kalmanCoreUpdateWithPKE+0x400>)
 800f5f0:	f7ff fbde 	bl	800edb0 <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800f5fa:	e021      	b.n	800f640 <kalmanCoreUpdateWithPKE+0x120>
 800f5fc:	49c9      	ldr	r1, [pc, #804]	@ (800f924 <kalmanCoreUpdateWithPKE+0x404>)
 800f5fe:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800f602:	4613      	mov	r3, r2
 800f604:	009b      	lsls	r3, r3, #2
 800f606:	4413      	add	r3, r2
 800f608:	011b      	lsls	r3, r3, #4
 800f60a:	440b      	add	r3, r1
 800f60c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800f610:	f04f 0200 	mov.w	r2, #0
 800f614:	4bc4      	ldr	r3, [pc, #784]	@ (800f928 <kalmanCoreUpdateWithPKE+0x408>)
 800f616:	f7f0 fdeb 	bl	80001f0 <__adddf3>
 800f61a:	4602      	mov	r2, r0
 800f61c:	460b      	mov	r3, r1
 800f61e:	4610      	mov	r0, r2
 800f620:	4619      	mov	r1, r3
 800f622:	4cc0      	ldr	r4, [pc, #768]	@ (800f924 <kalmanCoreUpdateWithPKE+0x404>)
 800f624:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800f628:	4613      	mov	r3, r2
 800f62a:	009b      	lsls	r3, r3, #2
 800f62c:	4413      	add	r3, r2
 800f62e:	011b      	lsls	r3, r3, #4
 800f630:	4423      	add	r3, r4
 800f632:	e9c3 0100 	strd	r0, r1, [r3]
 800f636:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800f63a:	3301      	adds	r3, #1
 800f63c:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800f640:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800f644:	2b08      	cmp	r3, #8
 800f646:	ddd9      	ble.n	800f5fc <kalmanCoreUpdateWithPKE+0xdc>
    double Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 800f648:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f64c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800f650:	4618      	mov	r0, r3
 800f652:	f44f 7322 	mov.w	r3, #648	@ 0x288
 800f656:	461a      	mov	r2, r3
 800f658:	2100      	movs	r1, #0
 800f65a:	f009 f9e3 	bl	8018a24 <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 800f65e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f662:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800f666:	2209      	movs	r2, #9
 800f668:	801a      	strh	r2, [r3, #0]
 800f66a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f66e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800f672:	2209      	movs	r2, #9
 800f674:	805a      	strh	r2, [r3, #2]
 800f676:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f67a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800f67e:	f107 0220 	add.w	r2, r7, #32
 800f682:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 800f684:	f107 0218 	add.w	r2, r7, #24
 800f688:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f68c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800f690:	6819      	ldr	r1, [r3, #0]
 800f692:	48a3      	ldr	r0, [pc, #652]	@ (800f920 <kalmanCoreUpdateWithPKE+0x400>)
 800f694:	f7ff fb28 	bl	800ece8 <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 800f698:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f69c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	3358      	adds	r3, #88	@ 0x58
 800f6a4:	f107 0120 	add.w	r1, r7, #32
 800f6a8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	f009 f9ff 	bl	8018ab0 <memcpy>

    assertStateNotNaN(this);
 800f6b2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f6b6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f6ba:	6818      	ldr	r0, [r3, #0]
 800f6bc:	f7ff fb98 	bl	800edf0 <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800f6c6:	e10d      	b.n	800f8e4 <kalmanCoreUpdateWithPKE+0x3c4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 800f6c8:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800f6cc:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800f6d0:	e0fe      	b.n	800f8d0 <kalmanCoreUpdateWithPKE+0x3b0>
        double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800f6d2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f6d6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f6da:	6819      	ldr	r1, [r3, #0]
 800f6dc:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	00db      	lsls	r3, r3, #3
 800f6e4:	4413      	add	r3, r2
 800f6e6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f6ea:	4413      	add	r3, r2
 800f6ec:	3316      	adds	r3, #22
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	440b      	add	r3, r1
 800f6f2:	edd3 7a00 	vldr	s15, [r3]
 800f6f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f6fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f6fe:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f702:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f706:	6819      	ldr	r1, [r3, #0]
 800f708:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f70c:	4613      	mov	r3, r2
 800f70e:	00db      	lsls	r3, r3, #3
 800f710:	4413      	add	r3, r2
 800f712:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f716:	4413      	add	r3, r2
 800f718:	3316      	adds	r3, #22
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	440b      	add	r3, r1
 800f71e:	edd3 7a00 	vldr	s15, [r3]
 800f722:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800f726:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f72a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f72e:	ee17 0a90 	vmov	r0, s15
 800f732:	f7f0 febb 	bl	80004ac <__aeabi_f2d>
 800f736:	4602      	mov	r2, r0
 800f738:	460b      	mov	r3, r1
 800f73a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
        if (isnan(p) || p > MAX_COVARIANCE) {
 800f73e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800f742:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800f746:	f7f1 f9a3 	bl	8000a90 <__aeabi_dcmpun>
 800f74a:	4603      	mov	r3, r0
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d109      	bne.n	800f764 <kalmanCoreUpdateWithPKE+0x244>
 800f750:	f04f 0200 	mov.w	r2, #0
 800f754:	4b75      	ldr	r3, [pc, #468]	@ (800f92c <kalmanCoreUpdateWithPKE+0x40c>)
 800f756:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800f75a:	f7f1 f98f 	bl	8000a7c <__aeabi_dcmpgt>
 800f75e:	4603      	mov	r3, r0
 800f760:	2b00      	cmp	r3, #0
 800f762:	d034      	beq.n	800f7ce <kalmanCoreUpdateWithPKE+0x2ae>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800f764:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f768:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f76c:	6819      	ldr	r1, [r3, #0]
 800f76e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f772:	4613      	mov	r3, r2
 800f774:	00db      	lsls	r3, r3, #3
 800f776:	4413      	add	r3, r2
 800f778:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f77c:	4413      	add	r3, r2
 800f77e:	3316      	adds	r3, #22
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	440b      	add	r3, r1
 800f784:	4a6a      	ldr	r2, [pc, #424]	@ (800f930 <kalmanCoreUpdateWithPKE+0x410>)
 800f786:	601a      	str	r2, [r3, #0]
 800f788:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f78c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f790:	6819      	ldr	r1, [r3, #0]
 800f792:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f796:	4613      	mov	r3, r2
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	4413      	add	r3, r2
 800f79c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f7a0:	4413      	add	r3, r2
 800f7a2:	3316      	adds	r3, #22
 800f7a4:	009b      	lsls	r3, r3, #2
 800f7a6:	440b      	add	r3, r1
 800f7a8:	6819      	ldr	r1, [r3, #0]
 800f7aa:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f7ae:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f7b2:	6818      	ldr	r0, [r3, #0]
 800f7b4:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	00db      	lsls	r3, r3, #3
 800f7bc:	4413      	add	r3, r2
 800f7be:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f7c2:	4413      	add	r3, r2
 800f7c4:	3316      	adds	r3, #22
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4403      	add	r3, r0
 800f7ca:	6019      	str	r1, [r3, #0]
 800f7cc:	e07b      	b.n	800f8c6 <kalmanCoreUpdateWithPKE+0x3a6>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 800f7ce:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f7d2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800f7d6:	429a      	cmp	r2, r3
 800f7d8:	d13e      	bne.n	800f858 <kalmanCoreUpdateWithPKE+0x338>
 800f7da:	a34f      	add	r3, pc, #316	@ (adr r3, 800f918 <kalmanCoreUpdateWithPKE+0x3f8>)
 800f7dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e0:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800f7e4:	f7f1 f92c 	bl	8000a40 <__aeabi_dcmplt>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d034      	beq.n	800f858 <kalmanCoreUpdateWithPKE+0x338>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800f7ee:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f7f2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f7f6:	6819      	ldr	r1, [r3, #0]
 800f7f8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f7fc:	4613      	mov	r3, r2
 800f7fe:	00db      	lsls	r3, r3, #3
 800f800:	4413      	add	r3, r2
 800f802:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f806:	4413      	add	r3, r2
 800f808:	3316      	adds	r3, #22
 800f80a:	009b      	lsls	r3, r3, #2
 800f80c:	440b      	add	r3, r1
 800f80e:	4a49      	ldr	r2, [pc, #292]	@ (800f934 <kalmanCoreUpdateWithPKE+0x414>)
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f816:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f81a:	6819      	ldr	r1, [r3, #0]
 800f81c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f820:	4613      	mov	r3, r2
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	4413      	add	r3, r2
 800f826:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f82a:	4413      	add	r3, r2
 800f82c:	3316      	adds	r3, #22
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	440b      	add	r3, r1
 800f832:	6819      	ldr	r1, [r3, #0]
 800f834:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f838:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f83c:	6818      	ldr	r0, [r3, #0]
 800f83e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f842:	4613      	mov	r3, r2
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	4413      	add	r3, r2
 800f848:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f84c:	4413      	add	r3, r2
 800f84e:	3316      	adds	r3, #22
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	4403      	add	r3, r0
 800f854:	6019      	str	r1, [r3, #0]
 800f856:	e036      	b.n	800f8c6 <kalmanCoreUpdateWithPKE+0x3a6>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 800f858:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800f85c:	f7f1 f92e 	bl	8000abc <__aeabi_d2f>
 800f860:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f864:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f868:	6819      	ldr	r1, [r3, #0]
 800f86a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f86e:	4613      	mov	r3, r2
 800f870:	00db      	lsls	r3, r3, #3
 800f872:	4413      	add	r3, r2
 800f874:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f878:	4413      	add	r3, r2
 800f87a:	3316      	adds	r3, #22
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	440b      	add	r3, r1
 800f880:	6018      	str	r0, [r3, #0]
 800f882:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f886:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f88a:	6819      	ldr	r1, [r3, #0]
 800f88c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f890:	4613      	mov	r3, r2
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	4413      	add	r3, r2
 800f896:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f89a:	4413      	add	r3, r2
 800f89c:	3316      	adds	r3, #22
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	440b      	add	r3, r1
 800f8a2:	6819      	ldr	r1, [r3, #0]
 800f8a4:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f8a8:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f8ac:	6818      	ldr	r0, [r3, #0]
 800f8ae:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800f8b2:	4613      	mov	r3, r2
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800f8bc:	4413      	add	r3, r2
 800f8be:	3316      	adds	r3, #22
 800f8c0:	009b      	lsls	r3, r3, #2
 800f8c2:	4403      	add	r3, r0
 800f8c4:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 800f8c6:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800f8d0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800f8d4:	2b08      	cmp	r3, #8
 800f8d6:	f77f aefc 	ble.w	800f6d2 <kalmanCoreUpdateWithPKE+0x1b2>
    for (int i=0; i<KC_STATE_DIM; i++) {
 800f8da:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800f8de:	3301      	adds	r3, #1
 800f8e0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800f8e4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800f8e8:	2b08      	cmp	r3, #8
 800f8ea:	f77f aeed 	ble.w	800f6c8 <kalmanCoreUpdateWithPKE+0x1a8>
            }
        }
    }
    assertStateNotNaN(this);
 800f8ee:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f8f2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f8f6:	6818      	ldr	r0, [r3, #0]
 800f8f8:	f7ff fa7a 	bl	800edf0 <assertStateNotNaN>

    this->isUpdated = true;
 800f8fc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800f900:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	2201      	movs	r2, #1
 800f908:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800f90c:	bf00      	nop
 800f90e:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 800f912:	46bd      	mov	sp, r7
 800f914:	bd90      	pop	{r4, r7, pc}
 800f916:	bf00      	nop
 800f918:	a0000000 	.word	0xa0000000
 800f91c:	3eb0c6f7 	.word	0x3eb0c6f7
 800f920:	200000a8 	.word	0x200000a8
 800f924:	200097c0 	.word	0x200097c0
 800f928:	3ff00000 	.word	0x3ff00000
 800f92c:	40590000 	.word	0x40590000
 800f930:	42c80000 	.word	0x42c80000
 800f934:	358637bd 	.word	0x358637bd

0800f938 <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b090      	sub	sp, #64	@ 0x40
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	ed87 0a01 	vstr	s0, [r7, #4]
 800f946:	4613      	mov	r3, r2
 800f948:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 800f94a:	f107 0318 	add.w	r3, r7, #24
 800f94e:	2224      	movs	r2, #36	@ 0x24
 800f950:	2100      	movs	r1, #0
 800f952:	4618      	mov	r0, r3
 800f954:	f009 f866 	bl	8018a24 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800f958:	2301      	movs	r3, #1
 800f95a:	823b      	strh	r3, [r7, #16]
 800f95c:	2309      	movs	r3, #9
 800f95e:	827b      	strh	r3, [r7, #18]
 800f960:	f107 0318 	add.w	r3, r7, #24
 800f964:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 800f966:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f96a:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 800f96c:	78fb      	ldrb	r3, [r7, #3]
 800f96e:	f083 0301 	eor.w	r3, r3, #1
 800f972:	b2db      	uxtb	r3, r3
 800f974:	2b00      	cmp	r3, #0
 800f976:	d109      	bne.n	800f98c <kalmanCoreUpdateWithBaro+0x54>
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800f97e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f982:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f98a:	d503      	bpl.n	800f994 <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	687a      	ldr	r2, [r7, #4]
 800f990:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  }

  float meas = (baroAsl - this->baroReferenceHeight);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800f99a:	ed97 7a01 	vldr	s14, [r7, #4]
 800f99e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9a2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	edd3 7a02 	vldr	s15, [r3, #8]
 800f9ac:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800f9b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f9ba:	f107 0310 	add.w	r3, r7, #16
 800f9be:	eef0 0a47 	vmov.f32	s1, s14
 800f9c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f9c6:	4619      	mov	r1, r3
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f7ff fba9 	bl	800f120 <kalmanCoreScalarUpdate>
}
 800f9ce:	bf00      	nop
 800f9d0:	3740      	adds	r7, #64	@ 0x40
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	bd80      	pop	{r7, pc}
	...

0800f9d8 <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b0a2      	sub	sp, #136	@ 0x88
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6178      	str	r0, [r7, #20]
 800f9e0:	6139      	str	r1, [r7, #16]
 800f9e2:	60fa      	str	r2, [r7, #12]
 800f9e4:	ed87 0a02 	vstr	s0, [r7, #8]
 800f9e8:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 800f9ea:	edd7 7a02 	vldr	s15, [r7, #8]
 800f9ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f9f2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 800f9f6:	4bd2      	ldr	r3, [pc, #840]	@ (800fd40 <predictDt+0x368>)
 800f9f8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800f9fc:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 800f9fe:	4bd0      	ldr	r3, [pc, #832]	@ (800fd40 <predictDt+0x368>)
 800fa00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa04:	629a      	str	r2, [r3, #40]	@ 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 800fa06:	4bce      	ldr	r3, [pc, #824]	@ (800fd40 <predictDt+0x368>)
 800fa08:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa0c:	651a      	str	r2, [r3, #80]	@ 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 800fa0e:	4bcc      	ldr	r3, [pc, #816]	@ (800fd40 <predictDt+0x368>)
 800fa10:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa14:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 800fa16:	4bca      	ldr	r3, [pc, #808]	@ (800fd40 <predictDt+0x368>)
 800fa18:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 800fa20:	4bc7      	ldr	r3, [pc, #796]	@ (800fd40 <predictDt+0x368>)
 800fa22:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa26:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 800fa2a:	4bc5      	ldr	r3, [pc, #788]	@ (800fd40 <predictDt+0x368>)
 800fa2c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa30:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 800fa34:	4bc2      	ldr	r3, [pc, #776]	@ (800fd40 <predictDt+0x368>)
 800fa36:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa3a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 800fa3e:	4bc0      	ldr	r3, [pc, #768]	@ (800fd40 <predictDt+0x368>)
 800fa40:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fa44:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800fa4e:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa56:	4bba      	ldr	r3, [pc, #744]	@ (800fd40 <predictDt+0x368>)
 800fa58:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800fa62:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa6a:	4bb5      	ldr	r3, [pc, #724]	@ (800fd40 <predictDt+0x368>)
 800fa6c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800fa76:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa7e:	4bb0      	ldr	r3, [pc, #704]	@ (800fd40 <predictDt+0x368>)
 800fa80:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800fa8a:	edd7 7a02 	vldr	s15, [r7, #8]
 800fa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fa92:	4bab      	ldr	r3, [pc, #684]	@ (800fd40 <predictDt+0x368>)
 800fa94:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800fa9e:	edd7 7a02 	vldr	s15, [r7, #8]
 800faa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faa6:	4ba6      	ldr	r3, [pc, #664]	@ (800fd40 <predictDt+0x368>)
 800faa8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800fab2:	edd7 7a02 	vldr	s15, [r7, #8]
 800fab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faba:	4ba1      	ldr	r3, [pc, #644]	@ (800fd40 <predictDt+0x368>)
 800fabc:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800fac6:	edd7 7a02 	vldr	s15, [r7, #8]
 800faca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800face:	4b9c      	ldr	r3, [pc, #624]	@ (800fd40 <predictDt+0x368>)
 800fad0:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800fada:	edd7 7a02 	vldr	s15, [r7, #8]
 800fade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fae2:	4b97      	ldr	r3, [pc, #604]	@ (800fd40 <predictDt+0x368>)
 800fae4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800faee:	edd7 7a02 	vldr	s15, [r7, #8]
 800faf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800faf6:	4b92      	ldr	r3, [pc, #584]	@ (800fd40 <predictDt+0x368>)
 800faf8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	ed93 7a04 	vldr	s14, [r3, #16]
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800fb08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb0c:	697b      	ldr	r3, [r7, #20]
 800fb0e:	edd3 6a05 	vldr	s13, [r3, #20]
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800fb18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb20:	edd7 7a02 	vldr	s15, [r7, #8]
 800fb24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb28:	4b85      	ldr	r3, [pc, #532]	@ (800fd40 <predictDt+0x368>)
 800fb2a:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 800fb2e:	697b      	ldr	r3, [r7, #20]
 800fb30:	ed93 7a04 	vldr	s14, [r3, #16]
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fb3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	edd3 6a05 	vldr	s13, [r3, #20]
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800fb4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb52:	edd7 7a02 	vldr	s15, [r7, #8]
 800fb56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb5a:	4b79      	ldr	r3, [pc, #484]	@ (800fd40 <predictDt+0x368>)
 800fb5c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	ed93 7a04 	vldr	s14, [r3, #16]
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800fb6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	edd3 6a05 	vldr	s13, [r3, #20]
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fb7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fb80:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fb84:	edd7 7a02 	vldr	s15, [r7, #8]
 800fb88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fb8c:	4b6c      	ldr	r3, [pc, #432]	@ (800fd40 <predictDt+0x368>)
 800fb8e:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	edd3 7a03 	vldr	s15, [r3, #12]
 800fb98:	eeb1 7a67 	vneg.f32	s14, s15
 800fb9c:	697b      	ldr	r3, [r7, #20]
 800fb9e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800fba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	edd3 6a05 	vldr	s13, [r3, #20]
 800fbac:	697b      	ldr	r3, [r7, #20]
 800fbae:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800fbb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbba:	edd7 7a02 	vldr	s15, [r7, #8]
 800fbbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbc2:	4b5f      	ldr	r3, [pc, #380]	@ (800fd40 <predictDt+0x368>)
 800fbc4:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	edd3 7a03 	vldr	s15, [r3, #12]
 800fbce:	eeb1 7a67 	vneg.f32	s14, s15
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800fbd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	edd3 6a05 	vldr	s13, [r3, #20]
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800fbe8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fbec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fbf0:	edd7 7a02 	vldr	s15, [r7, #8]
 800fbf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbf8:	4b51      	ldr	r3, [pc, #324]	@ (800fd40 <predictDt+0x368>)
 800fbfa:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	edd3 7a03 	vldr	s15, [r3, #12]
 800fc04:	eeb1 7a67 	vneg.f32	s14, s15
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800fc0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	edd3 6a05 	vldr	s13, [r3, #20]
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fc1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc22:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fc26:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc2e:	4b44      	ldr	r3, [pc, #272]	@ (800fd40 <predictDt+0x368>)
 800fc30:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 800fc34:	697b      	ldr	r3, [r7, #20]
 800fc36:	ed93 7a03 	vldr	s14, [r3, #12]
 800fc3a:	697b      	ldr	r3, [r7, #20]
 800fc3c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800fc40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	edd3 6a04 	vldr	s13, [r3, #16]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800fc50:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc54:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc58:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc60:	4b37      	ldr	r3, [pc, #220]	@ (800fd40 <predictDt+0x368>)
 800fc62:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 800fc66:	697b      	ldr	r3, [r7, #20]
 800fc68:	ed93 7a03 	vldr	s14, [r3, #12]
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800fc72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fc76:	697b      	ldr	r3, [r7, #20]
 800fc78:	edd3 6a04 	vldr	s13, [r3, #16]
 800fc7c:	697b      	ldr	r3, [r7, #20]
 800fc7e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800fc82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fc86:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc8a:	edd7 7a02 	vldr	s15, [r7, #8]
 800fc8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fc92:	4b2b      	ldr	r3, [pc, #172]	@ (800fd40 <predictDt+0x368>)
 800fc94:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	ed93 7a03 	vldr	s14, [r3, #12]
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	edd3 6a04 	vldr	s13, [r3, #16]
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fcb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fcb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fcbc:	edd7 7a02 	vldr	s15, [r7, #8]
 800fcc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcc4:	4b1e      	ldr	r3, [pc, #120]	@ (800fd40 <predictDt+0x368>)
 800fcc6:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 800fcca:	4b1d      	ldr	r3, [pc, #116]	@ (800fd40 <predictDt+0x368>)
 800fccc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fcd0:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	edd3 7a02 	vldr	s15, [r3, #8]
 800fcd8:	eeb1 7a67 	vneg.f32	s14, s15
 800fcdc:	edd7 7a02 	vldr	s15, [r7, #8]
 800fce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fce4:	4b16      	ldr	r3, [pc, #88]	@ (800fd40 <predictDt+0x368>)
 800fce6:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	ed93 7a01 	vldr	s14, [r3, #4]
 800fcf0:	edd7 7a02 	vldr	s15, [r7, #8]
 800fcf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fcf8:	4b11      	ldr	r3, [pc, #68]	@ (800fd40 <predictDt+0x368>)
 800fcfa:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	ed93 7a02 	vldr	s14, [r3, #8]
 800fd04:	edd7 7a02 	vldr	s15, [r7, #8]
 800fd08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd0c:	4b0c      	ldr	r3, [pc, #48]	@ (800fd40 <predictDt+0x368>)
 800fd0e:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 800fd12:	4b0b      	ldr	r3, [pc, #44]	@ (800fd40 <predictDt+0x368>)
 800fd14:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fd18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	edd3 7a00 	vldr	s15, [r3]
 800fd22:	eeb1 7a67 	vneg.f32	s14, s15
 800fd26:	edd7 7a02 	vldr	s15, [r7, #8]
 800fd2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd2e:	4b04      	ldr	r3, [pc, #16]	@ (800fd40 <predictDt+0x368>)
 800fd30:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	edd3 7a01 	vldr	s15, [r3, #4]
 800fd3a:	eeb1 7a67 	vneg.f32	s14, s15
 800fd3e:	e001      	b.n	800fd44 <predictDt+0x36c>
 800fd40:	10003f34 	.word	0x10003f34
 800fd44:	edd7 7a02 	vldr	s15, [r7, #8]
 800fd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd4c:	4bb2      	ldr	r3, [pc, #712]	@ (8010018 <predictDt+0x640>)
 800fd4e:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	ed93 7a00 	vldr	s14, [r3]
 800fd58:	edd7 7a02 	vldr	s15, [r7, #8]
 800fd5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd60:	4bad      	ldr	r3, [pc, #692]	@ (8010018 <predictDt+0x640>)
 800fd62:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 800fd66:	4bac      	ldr	r3, [pc, #688]	@ (8010018 <predictDt+0x640>)
 800fd68:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800fd6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 800fd70:	4ba9      	ldr	r3, [pc, #676]	@ (8010018 <predictDt+0x640>)
 800fd72:	f04f 0200 	mov.w	r2, #0
 800fd76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800fd80:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 801001c <predictDt+0x644>
 800fd84:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd88:	edd7 7a02 	vldr	s15, [r7, #8]
 800fd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fd90:	4ba1      	ldr	r3, [pc, #644]	@ (8010018 <predictDt+0x640>)
 800fd92:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fd9c:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 801002c <predictDt+0x654>
 800fda0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fda4:	edd7 7a02 	vldr	s15, [r7, #8]
 800fda8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdac:	4b9a      	ldr	r3, [pc, #616]	@ (8010018 <predictDt+0x640>)
 800fdae:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800fdb8:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 801002c <predictDt+0x654>
 800fdbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fdc0:	edd7 7a02 	vldr	s15, [r7, #8]
 800fdc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdc8:	4b93      	ldr	r3, [pc, #588]	@ (8010018 <predictDt+0x640>)
 800fdca:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 800fdce:	4b92      	ldr	r3, [pc, #584]	@ (8010018 <predictDt+0x640>)
 800fdd0:	f04f 0200 	mov.w	r2, #0
 800fdd4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fdde:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 801001c <predictDt+0x644>
 800fde2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fde6:	edd7 7a02 	vldr	s15, [r7, #8]
 800fdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fdee:	4b8a      	ldr	r3, [pc, #552]	@ (8010018 <predictDt+0x640>)
 800fdf0:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800fdfa:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 801001c <predictDt+0x644>
 800fdfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fe02:	edd7 7a02 	vldr	s15, [r7, #8]
 800fe06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe0a:	4b83      	ldr	r3, [pc, #524]	@ (8010018 <predictDt+0x640>)
 800fe0c:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 800fe10:	697b      	ldr	r3, [r7, #20]
 800fe12:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800fe16:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 801002c <predictDt+0x654>
 800fe1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fe1e:	edd7 7a02 	vldr	s15, [r7, #8]
 800fe22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe26:	4b7c      	ldr	r3, [pc, #496]	@ (8010018 <predictDt+0x640>)
 800fe28:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 800fe2c:	4b7a      	ldr	r3, [pc, #488]	@ (8010018 <predictDt+0x640>)
 800fe2e:	f04f 0200 	mov.w	r2, #0
 800fe32:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	ed93 7a00 	vldr	s14, [r3]
 800fe3c:	edd7 7a02 	vldr	s15, [r7, #8]
 800fe40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fe48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe4c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float d1 = gyro->y*dt/2;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	ed93 7a01 	vldr	s14, [r3, #4]
 800fe56:	edd7 7a02 	vldr	s15, [r7, #8]
 800fe5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe5e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fe62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe66:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float d2 = gyro->z*dt/2;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	ed93 7a02 	vldr	s14, [r3, #8]
 800fe70:	edd7 7a02 	vldr	s15, [r7, #8]
 800fe74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fe78:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fe7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe80:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 800fe84:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800fe88:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fe8c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fe90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800fe98:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fe9c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800fea0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fea4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800fea8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800feac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800feb0:	4b59      	ldr	r3, [pc, #356]	@ (8010018 <predictDt+0x640>)
 800feb2:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800feb6:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800feba:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800febe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fec2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fec6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800feca:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800fece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fed2:	4b51      	ldr	r3, [pc, #324]	@ (8010018 <predictDt+0x640>)
 800fed4:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 800fed8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800fedc:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800fee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fee4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800feec:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800fef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fef4:	4b48      	ldr	r3, [pc, #288]	@ (8010018 <predictDt+0x640>)
 800fef6:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 800fefa:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800fefe:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ff02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff06:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ff0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ff0e:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ff12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff16:	4b40      	ldr	r3, [pc, #256]	@ (8010018 <predictDt+0x640>)
 800ff18:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 800ff1c:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ff20:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ff24:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ff28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ff2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ff30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ff34:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ff38:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ff3c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ff40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ff44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ff48:	4b33      	ldr	r3, [pc, #204]	@ (8010018 <predictDt+0x640>)
 800ff4a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 800ff4e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800ff52:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ff56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff5a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ff5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ff62:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ff66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff6a:	4b2b      	ldr	r3, [pc, #172]	@ (8010018 <predictDt+0x640>)
 800ff6c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 800ff70:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800ff74:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ff78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff7c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ff80:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ff84:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ff88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff8c:	4b22      	ldr	r3, [pc, #136]	@ (8010018 <predictDt+0x640>)
 800ff8e:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 800ff92:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800ff96:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800ff9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff9e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ffa2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ffa6:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ffaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffae:	4b1a      	ldr	r3, [pc, #104]	@ (8010018 <predictDt+0x640>)
 800ffb0:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 800ffb4:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800ffb8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ffbc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ffc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ffc4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ffc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ffcc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800ffd0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ffd4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ffd8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ffdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ffe0:	4b0d      	ldr	r3, [pc, #52]	@ (8010018 <predictDt+0x640>)
 800ffe2:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ffec:	4a0c      	ldr	r2, [pc, #48]	@ (8010020 <predictDt+0x648>)
 800ffee:	4619      	mov	r1, r3
 800fff0:	480c      	ldr	r0, [pc, #48]	@ (8010024 <predictDt+0x64c>)
 800fff2:	f7fe fe79 	bl	800ece8 <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 800fff6:	490c      	ldr	r1, [pc, #48]	@ (8010028 <predictDt+0x650>)
 800fff8:	480a      	ldr	r0, [pc, #40]	@ (8010024 <predictDt+0x64c>)
 800fffa:	f7fe fe53 	bl	800eca4 <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 800fffe:	697b      	ldr	r3, [r7, #20]
 8010000:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8010004:	461a      	mov	r2, r3
 8010006:	4908      	ldr	r1, [pc, #32]	@ (8010028 <predictDt+0x650>)
 8010008:	4805      	ldr	r0, [pc, #20]	@ (8010020 <predictDt+0x648>)
 801000a:	f7fe fe6d 	bl	800ece8 <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 801000e:	79fb      	ldrb	r3, [r7, #7]
 8010010:	2b00      	cmp	r3, #0
 8010012:	f000 8125 	beq.w	8010260 <predictDt+0x888>
 8010016:	e00b      	b.n	8010030 <predictDt+0x658>
 8010018:	10003f34 	.word	0x10003f34
 801001c:	c11cf5c3 	.word	0xc11cf5c3
 8010020:	200000b8 	.word	0x200000b8
 8010024:	200000b0 	.word	0x200000b0
 8010028:	200000c0 	.word	0x200000c0
 801002c:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 8010030:	693b      	ldr	r3, [r7, #16]
 8010032:	689b      	ldr	r3, [r3, #8]
 8010034:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 8010036:	697b      	ldr	r3, [r7, #20]
 8010038:	edd3 7a03 	vldr	s15, [r3, #12]
 801003c:	ed97 7a02 	vldr	s14, [r7, #8]
 8010040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010044:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt;
 8010048:	697b      	ldr	r3, [r7, #20]
 801004a:	edd3 7a04 	vldr	s15, [r3, #16]
 801004e:	ed97 7a02 	vldr	s14, [r7, #8]
 8010052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010056:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	ed93 7a05 	vldr	s14, [r3, #20]
 8010060:	edd7 7a02 	vldr	s15, [r7, #8]
 8010064:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010068:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 801006c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010070:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010074:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010078:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801007c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010080:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 8010084:	697b      	ldr	r3, [r7, #20]
 8010086:	ed93 7a00 	vldr	s14, [r3]
 801008a:	697b      	ldr	r3, [r7, #20]
 801008c:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 8010090:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010094:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 801009e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80100a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80100a6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 80100b0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80100b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80100b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 80100c6:	697b      	ldr	r3, [r7, #20]
 80100c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80100d2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80100d6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80100da:	697b      	ldr	r3, [r7, #20]
 80100dc:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 80100e0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80100e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80100e8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 80100f2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80100f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80100fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80100fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	ed93 7a02 	vldr	s14, [r3, #8]
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8010114:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010118:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801011c:	697b      	ldr	r3, [r7, #20]
 801011e:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 8010122:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010126:	ee66 7a27 	vmul.f32	s15, s12, s15
 801012a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801012e:	697b      	ldr	r3, [r7, #20]
 8010130:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8010134:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010138:	ee66 7a27 	vmul.f32	s15, s12, s15
 801013c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010140:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010144:	ed1f 6a47 	vldr	s12, [pc, #-284]	@ 801002c <predictDt+0x654>
 8010148:	ee27 6a86 	vmul.f32	s12, s15, s12
 801014c:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8010150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010154:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010158:	ee77 7a27 	vadd.f32	s15, s14, s15
 801015c:	697b      	ldr	r3, [r7, #20]
 801015e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	691b      	ldr	r3, [r3, #16]
 801016c:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 801016e:	697b      	ldr	r3, [r7, #20]
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	ed93 7a03 	vldr	s14, [r3, #12]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	edd3 6a02 	vldr	s13, [r3, #8]
 8010180:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8010184:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	ed93 6a01 	vldr	s12, [r3, #4]
 801018e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8010192:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010196:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80101a0:	ed1f 6a5e 	vldr	s12, [pc, #-376]	@ 801002c <predictDt+0x654>
 80101a4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80101a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80101ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80101b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80101ca:	eef1 6a67 	vneg.f32	s13, s15
 80101ce:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80101d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	ed93 6a00 	vldr	s12, [r3]
 80101dc:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80101e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80101e4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 80101ee:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 801002c <predictDt+0x654>
 80101f2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80101f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80101fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80101fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 801020c:	697b      	ldr	r3, [r7, #20]
 801020e:	ed93 7a05 	vldr	s14, [r3, #20]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	edd3 6a01 	vldr	s13, [r3, #4]
 8010218:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 801021c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010220:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8010224:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	ed93 6a00 	vldr	s12, [r3]
 801022e:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8010232:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010236:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801023a:	697b      	ldr	r3, [r7, #20]
 801023c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010240:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 801002c <predictDt+0x654>
 8010244:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010248:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801024c:	edd7 7a02 	vldr	s15, [r7, #8]
 8010250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	edc3 7a05 	vstr	s15, [r3, #20]
 801025e:	e137      	b.n	80104d0 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 8010260:	697b      	ldr	r3, [r7, #20]
 8010262:	ed93 7a03 	vldr	s14, [r3, #12]
 8010266:	edd7 7a02 	vldr	s15, [r7, #8]
 801026a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801026e:	693b      	ldr	r3, [r7, #16]
 8010270:	edd3 6a00 	vldr	s13, [r3]
 8010274:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010278:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801027c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010280:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8010284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010288:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	ed93 7a04 	vldr	s14, [r3, #16]
 8010292:	edd7 7a02 	vldr	s15, [r7, #8]
 8010296:	ee27 7a27 	vmul.f32	s14, s14, s15
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	edd3 6a01 	vldr	s13, [r3, #4]
 80102a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80102a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80102a8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80102ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80102b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102b4:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80102be:	edd7 7a02 	vldr	s15, [r7, #8]
 80102c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	edd3 6a02 	vldr	s13, [r3, #8]
 80102cc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80102d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80102d4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80102d8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80102dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80102e0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	ed93 7a00 	vldr	s14, [r3]
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80102f0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80102f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80102f8:	697b      	ldr	r3, [r7, #20]
 80102fa:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 80102fe:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010302:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010306:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801030a:	697b      	ldr	r3, [r7, #20]
 801030c:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 8010310:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010314:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010318:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801031c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010320:	697b      	ldr	r3, [r7, #20]
 8010322:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 8010326:	697b      	ldr	r3, [r7, #20]
 8010328:	ed93 7a01 	vldr	s14, [r3, #4]
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 8010332:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010336:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 8010340:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010344:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010348:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801034c:	697b      	ldr	r3, [r7, #20]
 801034e:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 8010352:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010356:	ee66 7a27 	vmul.f32	s15, s12, s15
 801035a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801035e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010362:	697b      	ldr	r3, [r7, #20]
 8010364:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	ed93 7a02 	vldr	s14, [r3, #8]
 801036e:	697b      	ldr	r3, [r7, #20]
 8010370:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 8010374:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8010378:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801037c:	697b      	ldr	r3, [r7, #20]
 801037e:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 8010382:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8010386:	ee66 7a27 	vmul.f32	s15, s12, s15
 801038a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801038e:	697b      	ldr	r3, [r7, #20]
 8010390:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8010394:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8010398:	ee66 7a27 	vmul.f32	s15, s12, s15
 801039c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80103a0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80103a4:	ed9f 6ae1 	vldr	s12, [pc, #900]	@ 801072c <predictDt+0xd54>
 80103a8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80103ac:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 80103b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80103b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	691b      	ldr	r3, [r3, #16]
 80103cc:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	695b      	ldr	r3, [r3, #20]
 80103d2:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 80103d4:	697b      	ldr	r3, [r7, #20]
 80103d6:	ed93 7a03 	vldr	s14, [r3, #12]
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	edd3 6a00 	vldr	s13, [r3]
 80103e0:	68fb      	ldr	r3, [r7, #12]
 80103e2:	ed93 6a02 	vldr	s12, [r3, #8]
 80103e6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80103ea:	ee66 7a27 	vmul.f32	s15, s12, s15
 80103ee:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	ed93 6a01 	vldr	s12, [r3, #4]
 80103f8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80103fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010400:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 801040a:	ed9f 6ac8 	vldr	s12, [pc, #800]	@ 801072c <predictDt+0xd54>
 801040e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010412:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010416:	edd7 7a02 	vldr	s15, [r7, #8]
 801041a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801041e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 8010428:	697b      	ldr	r3, [r7, #20]
 801042a:	ed93 7a04 	vldr	s14, [r3, #16]
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	edd3 6a01 	vldr	s13, [r3, #4]
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	ed93 6a02 	vldr	s12, [r3, #8]
 801043a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 801043e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010442:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	ed93 6a00 	vldr	s12, [r3]
 801044c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8010450:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010454:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010458:	697b      	ldr	r3, [r7, #20]
 801045a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 801045e:	ed9f 6ab3 	vldr	s12, [pc, #716]	@ 801072c <predictDt+0xd54>
 8010462:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010466:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801046a:	edd7 7a02 	vldr	s15, [r7, #8]
 801046e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010476:	697b      	ldr	r3, [r7, #20]
 8010478:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 801047c:	697b      	ldr	r3, [r7, #20]
 801047e:	ed93 7a05 	vldr	s14, [r3, #20]
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	edd3 6a02 	vldr	s13, [r3, #8]
 8010488:	68fb      	ldr	r3, [r7, #12]
 801048a:	ed93 6a01 	vldr	s12, [r3, #4]
 801048e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8010492:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010496:	ee76 6aa7 	vadd.f32	s13, s13, s15
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	ed93 6a00 	vldr	s12, [r3]
 80104a0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80104a4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80104a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80104ac:	697b      	ldr	r3, [r7, #20]
 80104ae:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80104b2:	ed9f 6a9e 	vldr	s12, [pc, #632]	@ 801072c <predictDt+0xd54>
 80104b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80104ba:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80104be:	edd7 7a02 	vldr	s15, [r7, #8]
 80104c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	edd3 7a00 	vldr	s15, [r3]
 80104d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80104da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104de:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  float dtwy = dt*gyro->y;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80104e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80104ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80104f0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dtwz = dt*gyro->z;
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80104fa:	ed97 7a02 	vldr	s14, [r7, #8]
 80104fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010502:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 8010506:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801050a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801050e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010512:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010516:	ee37 7a27 	vadd.f32	s14, s14, s15
 801051a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801051e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010522:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010526:	eeb0 0a67 	vmov.f32	s0, s15
 801052a:	f7fe fc05 	bl	800ed38 <arm_sqrt>
 801052e:	eef0 7a40 	vmov.f32	s15, s0
 8010532:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8010738 <predictDt+0xd60>
 8010536:	ee77 7a87 	vadd.f32	s15, s15, s14
 801053a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 801053e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8010542:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010546:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801054a:	eeb0 0a47 	vmov.f32	s0, s14
 801054e:	f008 fa1f 	bl	8018990 <arm_cos_f32>
 8010552:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
  float sa = arm_sin_f32(angle/2.0f);
 8010556:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801055a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801055e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010562:	eeb0 0a47 	vmov.f32	s0, s14
 8010566:	f008 f9cd 	bl	8018904 <arm_sin_f32>
 801056a:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 801056e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010570:	61fb      	str	r3, [r7, #28]
 8010572:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010576:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 801057a:	ee67 6a27 	vmul.f32	s13, s14, s15
 801057e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8010582:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010586:	edc7 7a08 	vstr	s15, [r7, #32]
 801058a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 801058e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010592:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010596:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 801059a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801059e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 80105a2:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80105a6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80105aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80105ae:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80105b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80105b6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 80105ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80105be:	697b      	ldr	r3, [r7, #20]
 80105c0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80105c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105c8:	edd7 6a08 	vldr	s13, [r7, #32]
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80105d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105da:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80105de:	697b      	ldr	r3, [r7, #20]
 80105e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80105e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105ec:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80105f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105fe:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 8010602:	ed97 7a08 	vldr	s14, [r7, #32]
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801060c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010610:	edd7 6a07 	vldr	s13, [r7, #28]
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801061a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801061e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010622:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801062c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010630:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010634:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801063e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010642:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010646:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 801064a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010654:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010658:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010666:	ee37 7a67 	vsub.f32	s14, s14, s15
 801066a:	edd7 6a07 	vldr	s13, [r7, #28]
 801066e:	697b      	ldr	r3, [r7, #20]
 8010670:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010678:	ee37 7a27 	vadd.f32	s14, s14, s15
 801067c:	edd7 6a08 	vldr	s13, [r7, #32]
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010686:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801068a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801068e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 8010692:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801069c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106a0:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80106aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80106b2:	edd7 6a08 	vldr	s13, [r7, #32]
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80106bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80106c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80106ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80106d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106d6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

  if (! quadIsFlying) {
 80106da:	79fb      	ldrb	r3, [r7, #7]
 80106dc:	f083 0301 	eor.w	r3, r3, #1
 80106e0:	b2db      	uxtb	r3, r3
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d04e      	beq.n	8010784 <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 80106e6:	4b12      	ldr	r3, [pc, #72]	@ (8010730 <predictDt+0xd58>)
 80106e8:	633b      	str	r3, [r7, #48]	@ 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 80106ea:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80106ee:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80106f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 80106fc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8010734 <predictDt+0xd5c>
 8010700:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010708:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 801070c:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010710:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8010714:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	edd3 7a6b 	vldr	s15, [r3, #428]	@ 0x1ac
 801071e:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8010734 <predictDt+0xd5c>
 8010722:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010726:	ee77 7a27 	vadd.f32	s15, s14, s15
 801072a:	e007      	b.n	801073c <predictDt+0xd64>
 801072c:	411cf5c3 	.word	0x411cf5c3
 8010730:	3f7fbe77 	.word	0x3f7fbe77
 8010734:	3a83126f 	.word	0x3a83126f
 8010738:	358637bd 	.word	0x358637bd
 801073c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 8010740:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010744:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8010748:	ee27 7a27 	vmul.f32	s14, s14, s15
 801074c:	697b      	ldr	r3, [r7, #20]
 801074e:	edd3 7a6c 	vldr	s15, [r3, #432]	@ 0x1b0
 8010752:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8010734 <predictDt+0xd5c>
 8010756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801075a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801075e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 8010762:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010766:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 801076a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801076e:	697b      	ldr	r3, [r7, #20]
 8010770:	edd3 7a6d 	vldr	s15, [r3, #436]	@ 0x1b4
 8010774:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 8010734 <predictDt+0xd5c>
 8010778:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801077c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010780:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 8010784:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010788:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801078c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8010790:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010794:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010798:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801079c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80107a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80107a4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80107a8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80107ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107b0:	eeb0 0a67 	vmov.f32	s0, s15
 80107b4:	f7fe fac0 	bl	800ed38 <arm_sqrt>
 80107b8:	eef0 7a40 	vmov.f32	s15, s0
 80107bc:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 8010738 <predictDt+0xd60>
 80107c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80107c4:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 80107c8:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 80107cc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80107d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 80107da:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 80107de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80107e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 80107ec:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 80107f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80107f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 80107fe:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8010802:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8010806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  assertStateNotNaN(this);
 8010810:	6978      	ldr	r0, [r7, #20]
 8010812:	f7fe faed 	bl	800edf0 <assertStateNotNaN>

  this->isUpdated = true;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	2201      	movs	r2, #1
 801081a:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 801081e:	bf00      	nop
 8010820:	3788      	adds	r7, #136	@ 0x88
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop

08010828 <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 8010828:	b580      	push	{r7, lr}
 801082a:	b086      	sub	sp, #24
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
 8010834:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 801083c:	683a      	ldr	r2, [r7, #0]
 801083e:	1ad3      	subs	r3, r2, r3
 8010840:	ee07 3a90 	vmov	s15, r3
 8010844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010848:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8010878 <kalmanCorePredict+0x50>
 801084c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010850:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 8010854:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010858:	ed97 0a05 	vldr	s0, [r7, #20]
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	68b9      	ldr	r1, [r7, #8]
 8010860:	68f8      	ldr	r0, [r7, #12]
 8010862:	f7ff f8b9 	bl	800f9d8 <predictDt>
  this->lastPredictionMs = nowMs;
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
}
 801086e:	bf00      	nop
 8010870:	3718      	adds	r7, #24
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	447a0000 	.word	0x447a0000
 801087c:	00000000 	.word	0x00000000

08010880 <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b088      	sub	sp, #32
 8010884:	af00      	add	r7, sp, #0
 8010886:	60f8      	str	r0, [r7, #12]
 8010888:	60b9      	str	r1, [r7, #8]
 801088a:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	ed93 7a05 	vldr	s14, [r3, #20]
 8010894:	edd7 7a01 	vldr	s15, [r7, #4]
 8010898:	ee27 7a27 	vmul.f32	s14, s14, s15
 801089c:	edd7 7a01 	vldr	s15, [r7, #4]
 80108a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	edd3 6a07 	vldr	s13, [r3, #28]
 80108aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80108ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80108b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80108bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108c0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80108c4:	eeb0 0a67 	vmov.f32	s0, s15
 80108c8:	f008 f9be 	bl	8018c48 <powf>
 80108cc:	eeb0 7a40 	vmov.f32	s14, s0
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80108d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	ed93 7a05 	vldr	s14, [r3, #20]
 80108e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80108ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80108f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	edd3 6a07 	vldr	s13, [r3, #28]
 80108fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8010900:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010904:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	edd3 7a08 	vldr	s15, [r3, #32]
 801090e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010912:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010916:	eeb0 0a67 	vmov.f32	s0, s15
 801091a:	f008 f995 	bl	8018c48 <powf>
 801091e:	eeb0 7a40 	vmov.f32	s14, s0
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 8010928:	ee77 7a27 	vadd.f32	s15, s14, s15
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	ed93 7a06 	vldr	s14, [r3, #24]
 8010938:	edd7 7a01 	vldr	s15, [r7, #4]
 801093c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010940:	edd7 7a01 	vldr	s15, [r7, #4]
 8010944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010948:	68bb      	ldr	r3, [r7, #8]
 801094a:	edd3 6a07 	vldr	s13, [r3, #28]
 801094e:	edd7 7a01 	vldr	s15, [r7, #4]
 8010952:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010956:	ee37 7a27 	vadd.f32	s14, s14, s15
 801095a:	68bb      	ldr	r3, [r7, #8]
 801095c:	edd3 7a08 	vldr	s15, [r3, #32]
 8010960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010964:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010968:	eeb0 0a67 	vmov.f32	s0, s15
 801096c:	f008 f96c 	bl	8018c48 <powf>
 8010970:	eeb0 7a40 	vmov.f32	s14, s0
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 801097a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	ed93 7a05 	vldr	s14, [r3, #20]
 801098a:	edd7 7a01 	vldr	s15, [r7, #4]
 801098e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	edd3 7a07 	vldr	s15, [r3, #28]
 8010998:	ee77 7a27 	vadd.f32	s15, s14, s15
 801099c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80109a0:	eeb0 0a67 	vmov.f32	s0, s15
 80109a4:	f008 f950 	bl	8018c48 <powf>
 80109a8:	eeb0 7a40 	vmov.f32	s14, s0
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 80109b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	ed93 7a05 	vldr	s14, [r3, #20]
 80109c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80109c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80109d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109d4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80109d8:	eeb0 0a67 	vmov.f32	s0, s15
 80109dc:	f008 f934 	bl	8018c48 <powf>
 80109e0:	eeb0 7a40 	vmov.f32	s14, s0
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 80109ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 80109f4:	68bb      	ldr	r3, [r7, #8]
 80109f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80109fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80109fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	edd3 7a07 	vldr	s15, [r3, #28]
 8010a08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a0c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010a10:	eeb0 0a67 	vmov.f32	s0, s15
 8010a14:	f008 f918 	bl	8018c48 <powf>
 8010a18:	eeb0 7a40 	vmov.f32	s14, s0
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8010a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8010a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8010a36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a44:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010a48:	eeb0 0a67 	vmov.f32	s0, s15
 8010a4c:	f008 f8fc 	bl	8018c48 <powf>
 8010a50:	eeb0 7a40 	vmov.f32	s14, s0
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 8010a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a5e:	68fb      	ldr	r3, [r7, #12]
 8010a60:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8010a6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8010a6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010a78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a7c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010a80:	eeb0 0a67 	vmov.f32	s0, s15
 8010a84:	f008 f8e0 	bl	8018c48 <powf>
 8010a88:	eeb0 7a40 	vmov.f32	s14, s0
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 8010a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 8010a9c:	68bb      	ldr	r3, [r7, #8]
 8010a9e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8010aa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8010aa6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ab4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8010ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8010abc:	f008 f8c4 	bl	8018c48 <powf>
 8010ac0:	eeb0 7a40 	vmov.f32	s14, s0
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 8010aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	61fb      	str	r3, [r7, #28]
 8010ad8:	e0c2      	b.n	8010c60 <addProcessNoiseDt+0x3e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	61bb      	str	r3, [r7, #24]
 8010ade:	e0b8      	b.n	8010c52 <addProcessNoiseDt+0x3d2>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 8010ae0:	68f9      	ldr	r1, [r7, #12]
 8010ae2:	69fa      	ldr	r2, [r7, #28]
 8010ae4:	4613      	mov	r3, r2
 8010ae6:	00db      	lsls	r3, r3, #3
 8010ae8:	4413      	add	r3, r2
 8010aea:	69ba      	ldr	r2, [r7, #24]
 8010aec:	4413      	add	r3, r2
 8010aee:	3316      	adds	r3, #22
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	440b      	add	r3, r1
 8010af4:	edd3 7a00 	vldr	s15, [r3]
 8010af8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010afc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8010b00:	68f9      	ldr	r1, [r7, #12]
 8010b02:	69ba      	ldr	r2, [r7, #24]
 8010b04:	4613      	mov	r3, r2
 8010b06:	00db      	lsls	r3, r3, #3
 8010b08:	4413      	add	r3, r2
 8010b0a:	69fa      	ldr	r2, [r7, #28]
 8010b0c:	4413      	add	r3, r2
 8010b0e:	3316      	adds	r3, #22
 8010b10:	009b      	lsls	r3, r3, #2
 8010b12:	440b      	add	r3, r1
 8010b14:	edd3 7a00 	vldr	s15, [r3]
 8010b18:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8010b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b24:	ee17 0a90 	vmov	r0, s15
 8010b28:	f7ef fcc0 	bl	80004ac <__aeabi_f2d>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	460b      	mov	r3, r1
 8010b30:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 8010b34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8010b38:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010b3c:	f7ef ffa8 	bl	8000a90 <__aeabi_dcmpun>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d109      	bne.n	8010b5a <addProcessNoiseDt+0x2da>
 8010b46:	f04f 0200 	mov.w	r2, #0
 8010b4a:	4b4d      	ldr	r3, [pc, #308]	@ (8010c80 <addProcessNoiseDt+0x400>)
 8010b4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010b50:	f7ef ff94 	bl	8000a7c <__aeabi_dcmpgt>
 8010b54:	4603      	mov	r3, r0
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	d022      	beq.n	8010ba0 <addProcessNoiseDt+0x320>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8010b5a:	68f9      	ldr	r1, [r7, #12]
 8010b5c:	69ba      	ldr	r2, [r7, #24]
 8010b5e:	4613      	mov	r3, r2
 8010b60:	00db      	lsls	r3, r3, #3
 8010b62:	4413      	add	r3, r2
 8010b64:	69fa      	ldr	r2, [r7, #28]
 8010b66:	4413      	add	r3, r2
 8010b68:	3316      	adds	r3, #22
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	440b      	add	r3, r1
 8010b6e:	4a45      	ldr	r2, [pc, #276]	@ (8010c84 <addProcessNoiseDt+0x404>)
 8010b70:	601a      	str	r2, [r3, #0]
 8010b72:	68f9      	ldr	r1, [r7, #12]
 8010b74:	69ba      	ldr	r2, [r7, #24]
 8010b76:	4613      	mov	r3, r2
 8010b78:	00db      	lsls	r3, r3, #3
 8010b7a:	4413      	add	r3, r2
 8010b7c:	69fa      	ldr	r2, [r7, #28]
 8010b7e:	4413      	add	r3, r2
 8010b80:	3316      	adds	r3, #22
 8010b82:	009b      	lsls	r3, r3, #2
 8010b84:	440b      	add	r3, r1
 8010b86:	6819      	ldr	r1, [r3, #0]
 8010b88:	68f8      	ldr	r0, [r7, #12]
 8010b8a:	69fa      	ldr	r2, [r7, #28]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	00db      	lsls	r3, r3, #3
 8010b90:	4413      	add	r3, r2
 8010b92:	69ba      	ldr	r2, [r7, #24]
 8010b94:	4413      	add	r3, r2
 8010b96:	3316      	adds	r3, #22
 8010b98:	009b      	lsls	r3, r3, #2
 8010b9a:	4403      	add	r3, r0
 8010b9c:	6019      	str	r1, [r3, #0]
 8010b9e:	e055      	b.n	8010c4c <addProcessNoiseDt+0x3cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 8010ba0:	69fa      	ldr	r2, [r7, #28]
 8010ba2:	69bb      	ldr	r3, [r7, #24]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d12c      	bne.n	8010c02 <addProcessNoiseDt+0x382>
 8010ba8:	a333      	add	r3, pc, #204	@ (adr r3, 8010c78 <addProcessNoiseDt+0x3f8>)
 8010baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010bb2:	f7ef ff45 	bl	8000a40 <__aeabi_dcmplt>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d022      	beq.n	8010c02 <addProcessNoiseDt+0x382>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 8010bbc:	68f9      	ldr	r1, [r7, #12]
 8010bbe:	69ba      	ldr	r2, [r7, #24]
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	00db      	lsls	r3, r3, #3
 8010bc4:	4413      	add	r3, r2
 8010bc6:	69fa      	ldr	r2, [r7, #28]
 8010bc8:	4413      	add	r3, r2
 8010bca:	3316      	adds	r3, #22
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	440b      	add	r3, r1
 8010bd0:	4a2d      	ldr	r2, [pc, #180]	@ (8010c88 <addProcessNoiseDt+0x408>)
 8010bd2:	601a      	str	r2, [r3, #0]
 8010bd4:	68f9      	ldr	r1, [r7, #12]
 8010bd6:	69ba      	ldr	r2, [r7, #24]
 8010bd8:	4613      	mov	r3, r2
 8010bda:	00db      	lsls	r3, r3, #3
 8010bdc:	4413      	add	r3, r2
 8010bde:	69fa      	ldr	r2, [r7, #28]
 8010be0:	4413      	add	r3, r2
 8010be2:	3316      	adds	r3, #22
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	440b      	add	r3, r1
 8010be8:	6819      	ldr	r1, [r3, #0]
 8010bea:	68f8      	ldr	r0, [r7, #12]
 8010bec:	69fa      	ldr	r2, [r7, #28]
 8010bee:	4613      	mov	r3, r2
 8010bf0:	00db      	lsls	r3, r3, #3
 8010bf2:	4413      	add	r3, r2
 8010bf4:	69ba      	ldr	r2, [r7, #24]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	3316      	adds	r3, #22
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4403      	add	r3, r0
 8010bfe:	6019      	str	r1, [r3, #0]
 8010c00:	e024      	b.n	8010c4c <addProcessNoiseDt+0x3cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 8010c02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8010c06:	f7ef ff59 	bl	8000abc <__aeabi_d2f>
 8010c0a:	68f9      	ldr	r1, [r7, #12]
 8010c0c:	69ba      	ldr	r2, [r7, #24]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	00db      	lsls	r3, r3, #3
 8010c12:	4413      	add	r3, r2
 8010c14:	69fa      	ldr	r2, [r7, #28]
 8010c16:	4413      	add	r3, r2
 8010c18:	3316      	adds	r3, #22
 8010c1a:	009b      	lsls	r3, r3, #2
 8010c1c:	440b      	add	r3, r1
 8010c1e:	6018      	str	r0, [r3, #0]
 8010c20:	68f9      	ldr	r1, [r7, #12]
 8010c22:	69ba      	ldr	r2, [r7, #24]
 8010c24:	4613      	mov	r3, r2
 8010c26:	00db      	lsls	r3, r3, #3
 8010c28:	4413      	add	r3, r2
 8010c2a:	69fa      	ldr	r2, [r7, #28]
 8010c2c:	4413      	add	r3, r2
 8010c2e:	3316      	adds	r3, #22
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	440b      	add	r3, r1
 8010c34:	6819      	ldr	r1, [r3, #0]
 8010c36:	68f8      	ldr	r0, [r7, #12]
 8010c38:	69fa      	ldr	r2, [r7, #28]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	00db      	lsls	r3, r3, #3
 8010c3e:	4413      	add	r3, r2
 8010c40:	69ba      	ldr	r2, [r7, #24]
 8010c42:	4413      	add	r3, r2
 8010c44:	3316      	adds	r3, #22
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	4403      	add	r3, r0
 8010c4a:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 8010c4c:	69bb      	ldr	r3, [r7, #24]
 8010c4e:	3301      	adds	r3, #1
 8010c50:	61bb      	str	r3, [r7, #24]
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	2b08      	cmp	r3, #8
 8010c56:	f77f af43 	ble.w	8010ae0 <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	3301      	adds	r3, #1
 8010c5e:	61fb      	str	r3, [r7, #28]
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	2b08      	cmp	r3, #8
 8010c64:	f77f af39 	ble.w	8010ada <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 8010c68:	68f8      	ldr	r0, [r7, #12]
 8010c6a:	f7fe f8c1 	bl	800edf0 <assertStateNotNaN>
}
 8010c6e:	bf00      	nop
 8010c70:	3720      	adds	r7, #32
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	a0000000 	.word	0xa0000000
 8010c7c:	3eb0c6f7 	.word	0x3eb0c6f7
 8010c80:	40590000 	.word	0x40590000
 8010c84:	42c80000 	.word	0x42c80000
 8010c88:	358637bd 	.word	0x358637bd

08010c8c <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	ee07 3a90 	vmov	s15, r3
 8010ca6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010caa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010ce4 <kalmanCoreAddProcessNoise+0x58>
 8010cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010cb2:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 8010cb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8010cba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc2:	dc00      	bgt.n	8010cc6 <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 8010cc4:	e009      	b.n	8010cda <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 8010cc6:	ed97 0a05 	vldr	s0, [r7, #20]
 8010cca:	68b9      	ldr	r1, [r7, #8]
 8010ccc:	68f8      	ldr	r0, [r7, #12]
 8010cce:	f7ff fdd7 	bl	8010880 <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	687a      	ldr	r2, [r7, #4]
 8010cd6:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 8010cda:	bf00      	nop
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	447a0000 	.word	0x447a0000

08010ce8 <kalmanCoreFinalize>:
float v0;
float v1;
float v2;
bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b096      	sub	sp, #88	@ 0x58
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 8010cf6:	f083 0301 	eor.w	r3, r3, #1
 8010cfa:	b2db      	uxtb	r3, r3
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <kalmanCoreFinalize+0x1e>
    return false;
 8010d00:	2300      	movs	r3, #0
 8010d02:	f000 bc98 	b.w	8011636 <kalmanCoreFinalize+0x94e>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  v0 = this->S[KC_STATE_D0];
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	699b      	ldr	r3, [r3, #24]
 8010d0a:	4ade      	ldr	r2, [pc, #888]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8010d0c:	6013      	str	r3, [r2, #0]
  v1 = this->S[KC_STATE_D1];
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	69db      	ldr	r3, [r3, #28]
 8010d12:	4add      	ldr	r2, [pc, #884]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8010d14:	6013      	str	r3, [r2, #0]
  v2 = this->S[KC_STATE_D2];
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6a1b      	ldr	r3, [r3, #32]
 8010d1a:	4adc      	ldr	r2, [pc, #880]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 8010d1c:	6013      	str	r3, [r2, #0]

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 8010d1e:	4bd9      	ldr	r3, [pc, #868]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8010d20:	edd3 7a00 	vldr	s15, [r3]
 8010d24:	eef0 7ae7 	vabs.f32	s15, s15
 8010d28:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 8011090 <kalmanCoreFinalize+0x3a8>
 8010d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d34:	dc18      	bgt.n	8010d68 <kalmanCoreFinalize+0x80>
 8010d36:	4bd4      	ldr	r3, [pc, #848]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8010d38:	edd3 7a00 	vldr	s15, [r3]
 8010d3c:	eef0 7ae7 	vabs.f32	s15, s15
 8010d40:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 8011090 <kalmanCoreFinalize+0x3a8>
 8010d44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4c:	dc0c      	bgt.n	8010d68 <kalmanCoreFinalize+0x80>
 8010d4e:	4bcf      	ldr	r3, [pc, #828]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 8010d50:	edd3 7a00 	vldr	s15, [r3]
 8010d54:	eef0 7ae7 	vabs.f32	s15, s15
 8010d58:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8011090 <kalmanCoreFinalize+0x3a8>
 8010d5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d64:	f340 8278 	ble.w	8011258 <kalmanCoreFinalize+0x570>
 8010d68:	4bc6      	ldr	r3, [pc, #792]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8010d6a:	edd3 7a00 	vldr	s15, [r3]
 8010d6e:	eef0 7ae7 	vabs.f32	s15, s15
 8010d72:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8010d76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d7e:	f140 826b 	bpl.w	8011258 <kalmanCoreFinalize+0x570>
 8010d82:	4bc1      	ldr	r3, [pc, #772]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8010d84:	edd3 7a00 	vldr	s15, [r3]
 8010d88:	eef0 7ae7 	vabs.f32	s15, s15
 8010d8c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8010d90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d98:	f140 825e 	bpl.w	8011258 <kalmanCoreFinalize+0x570>
 8010d9c:	4bbb      	ldr	r3, [pc, #748]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 8010d9e:	edd3 7a00 	vldr	s15, [r3]
 8010da2:	eef0 7ae7 	vabs.f32	s15, s15
 8010da6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8010daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010db2:	f140 8251 	bpl.w	8011258 <kalmanCoreFinalize+0x570>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 8010db6:	4bb3      	ldr	r3, [pc, #716]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8010db8:	ed93 7a00 	vldr	s14, [r3]
 8010dbc:	4bb1      	ldr	r3, [pc, #708]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8010dbe:	edd3 7a00 	vldr	s15, [r3]
 8010dc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010dc6:	4bb0      	ldr	r3, [pc, #704]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8010dc8:	edd3 6a00 	vldr	s13, [r3]
 8010dcc:	4bae      	ldr	r3, [pc, #696]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8010dce:	edd3 7a00 	vldr	s15, [r3]
 8010dd2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010dda:	4bac      	ldr	r3, [pc, #688]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 8010ddc:	edd3 6a00 	vldr	s13, [r3]
 8010de0:	4baa      	ldr	r3, [pc, #680]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 8010de2:	edd3 7a00 	vldr	s15, [r3]
 8010de6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010dea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010dee:	eeb0 0a67 	vmov.f32	s0, s15
 8010df2:	f7fd ffa1 	bl	800ed38 <arm_sqrt>
 8010df6:	eef0 7a40 	vmov.f32	s15, s0
 8010dfa:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8011094 <kalmanCoreFinalize+0x3ac>
 8010dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010e02:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float ca = arm_cos_f32(angle / 2.0f);
 8010e06:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8010e0a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e0e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e12:	eeb0 0a47 	vmov.f32	s0, s14
 8010e16:	f007 fdbb 	bl	8018990 <arm_cos_f32>
 8010e1a:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float sa = arm_sin_f32(angle / 2.0f);
 8010e1e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8010e22:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8010e26:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8010e2a:	eeb0 0a47 	vmov.f32	s0, s14
 8010e2e:	f007 fd69 	bl	8018904 <arm_sin_f32>
 8010e32:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 8010e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010e38:	60bb      	str	r3, [r7, #8]
 8010e3a:	4b92      	ldr	r3, [pc, #584]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8010e3c:	ed93 7a00 	vldr	s14, [r3]
 8010e40:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010e44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010e48:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8010e4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e50:	edc7 7a03 	vstr	s15, [r7, #12]
 8010e54:	4b8c      	ldr	r3, [pc, #560]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8010e56:	ed93 7a00 	vldr	s14, [r3]
 8010e5a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010e5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010e62:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8010e66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e6a:	edc7 7a04 	vstr	s15, [r7, #16]
 8010e6e:	4b87      	ldr	r3, [pc, #540]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 8010e70:	ed93 7a00 	vldr	s14, [r3]
 8010e74:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8010e78:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010e7c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8010e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e84:	edc7 7a05 	vstr	s15, [r7, #20]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 8010e88:	ed97 7a02 	vldr	s14, [r7, #8]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010e92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010e96:	edd7 6a03 	vldr	s13, [r7, #12]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ea4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010ea8:	edd7 6a04 	vldr	s13, [r7, #16]
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010eb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010eba:	edd7 6a05 	vldr	s13, [r7, #20]
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010ec4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ec8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ecc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 8010ed0:	ed97 7a03 	vldr	s14, [r7, #12]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010eda:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ede:	edd7 6a02 	vldr	s13, [r7, #8]
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010ee8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ef0:	edd7 6a05 	vldr	s13, [r7, #20]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010efa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010efe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f02:	edd7 6a04 	vldr	s13, [r7, #16]
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010f14:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 8010f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010f22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f26:	edd7 6a05 	vldr	s13, [r7, #20]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f38:	edd7 6a02 	vldr	s13, [r7, #8]
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010f42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f4a:	edd7 6a03 	vldr	s13, [r7, #12]
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010f5c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 8010f60:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8010f6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010f6e:	edd7 6a04 	vldr	s13, [r7, #16]
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010f78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010f80:	edd7 6a03 	vldr	s13, [r7, #12]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8010f8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f92:	edd7 6a02 	vldr	s13, [r7, #8]
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8010f9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fa4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 8010fa8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8010fac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010fb0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8010fb4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010fb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fbc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010fc0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010fc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010fc8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8010fcc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010fd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8010fd8:	f7fd feae 	bl	800ed38 <arm_sqrt>
 8010fdc:	eef0 7a40 	vmov.f32	s15, s0
 8010fe0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8011094 <kalmanCoreFinalize+0x3ac>
 8010fe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010fe8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    this->q[0] = tmpq0 / norm;
 8010fec:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8010ff0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8010ff4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    this->q[1] = tmpq1 / norm;
 8010ffe:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011002:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    this->q[2] = tmpq2 / norm;
 8011010:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8011014:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8011018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    this->q[3] = tmpq3 / norm;
 8011022:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8011026:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 801102a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 8011034:	4b13      	ldr	r3, [pc, #76]	@ (8011084 <kalmanCoreFinalize+0x39c>)
 8011036:	ed93 7a00 	vldr	s14, [r3]
 801103a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801103e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011042:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 8011046:	4b10      	ldr	r3, [pc, #64]	@ (8011088 <kalmanCoreFinalize+0x3a0>)
 8011048:	ed93 7a00 	vldr	s14, [r3]
 801104c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011050:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011054:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d2 = v2/2;
 8011058:	4b0c      	ldr	r3, [pc, #48]	@ (801108c <kalmanCoreFinalize+0x3a4>)
 801105a:	ed93 7a00 	vldr	s14, [r3]
 801105e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011066:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    A[KC_STATE_X][KC_STATE_X] = 1;
 801106a:	4b0b      	ldr	r3, [pc, #44]	@ (8011098 <kalmanCoreFinalize+0x3b0>)
 801106c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011070:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 8011072:	4b09      	ldr	r3, [pc, #36]	@ (8011098 <kalmanCoreFinalize+0x3b0>)
 8011074:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011078:	629a      	str	r2, [r3, #40]	@ 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 801107a:	4b07      	ldr	r3, [pc, #28]	@ (8011098 <kalmanCoreFinalize+0x3b0>)
 801107c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8011080:	e00c      	b.n	801109c <kalmanCoreFinalize+0x3b4>
 8011082:	bf00      	nop
 8011084:	200097b0 	.word	0x200097b0
 8011088:	200097b4 	.word	0x200097b4
 801108c:	200097b8 	.word	0x200097b8
 8011090:	38d1b717 	.word	0x38d1b717
 8011094:	358637bd 	.word	0x358637bd
 8011098:	10004300 	.word	0x10004300
 801109c:	651a      	str	r2, [r3, #80]	@ 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 801109e:	4b6a      	ldr	r3, [pc, #424]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80110a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80110a4:	679a      	str	r2, [r3, #120]	@ 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 80110a6:	4b68      	ldr	r3, [pc, #416]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80110a8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80110ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 80110b0:	4b65      	ldr	r3, [pc, #404]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80110b2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80110b6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 80110ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80110be:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80110c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80110c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80110ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80110ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110d2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80110d6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80110da:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80110de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80110e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80110e6:	4b58      	ldr	r3, [pc, #352]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80110e8:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 80110ec:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80110f0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80110f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80110f8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80110fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011100:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011108:	4b4f      	ldr	r3, [pc, #316]	@ (8011248 <kalmanCoreFinalize+0x560>)
 801110a:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 801110e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011112:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011116:	ee67 7a27 	vmul.f32	s15, s14, s15
 801111a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801111e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011122:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011126:	ee77 7a67 	vsub.f32	s15, s14, s15
 801112a:	4b47      	ldr	r3, [pc, #284]	@ (8011248 <kalmanCoreFinalize+0x560>)
 801112c:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 8011130:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8011134:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011138:	ee67 7a27 	vmul.f32	s15, s14, s15
 801113c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011140:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011144:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011148:	ee77 7a67 	vsub.f32	s15, s14, s15
 801114c:	4b3e      	ldr	r3, [pc, #248]	@ (8011248 <kalmanCoreFinalize+0x560>)
 801114e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 8011152:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8011156:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801115a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801115e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8011166:	ee37 7a67 	vsub.f32	s14, s14, s15
 801116a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801116e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011172:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8011176:	eec6 7a86 	vdiv.f32	s15, s13, s12
 801117a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801117e:	4b32      	ldr	r3, [pc, #200]	@ (8011248 <kalmanCoreFinalize+0x560>)
 8011180:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 8011184:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8011188:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 801118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011190:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011194:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011198:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 801119c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111a0:	4b29      	ldr	r3, [pc, #164]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80111a2:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 80111a6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80111aa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80111ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111b2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111ba:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80111be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80111c2:	4b21      	ldr	r3, [pc, #132]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80111c4:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 80111c8:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80111cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80111d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80111d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80111dc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80111e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80111e4:	4b18      	ldr	r3, [pc, #96]	@ (8011248 <kalmanCoreFinalize+0x560>)
 80111e6:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 80111ea:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80111ee:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80111f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80111f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80111fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80111fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011202:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8011206:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801120a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801120e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8011212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011216:	4b0c      	ldr	r3, [pc, #48]	@ (8011248 <kalmanCoreFinalize+0x560>)
 8011218:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 801121c:	490b      	ldr	r1, [pc, #44]	@ (801124c <kalmanCoreFinalize+0x564>)
 801121e:	480c      	ldr	r0, [pc, #48]	@ (8011250 <kalmanCoreFinalize+0x568>)
 8011220:	f7fd fd40 	bl	800eca4 <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801122a:	4a0a      	ldr	r2, [pc, #40]	@ (8011254 <kalmanCoreFinalize+0x56c>)
 801122c:	4619      	mov	r1, r3
 801122e:	4808      	ldr	r0, [pc, #32]	@ (8011250 <kalmanCoreFinalize+0x568>)
 8011230:	f7fd fd5a 	bl	800ece8 <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801123a:	461a      	mov	r2, r3
 801123c:	4903      	ldr	r1, [pc, #12]	@ (801124c <kalmanCoreFinalize+0x564>)
 801123e:	4805      	ldr	r0, [pc, #20]	@ (8011254 <kalmanCoreFinalize+0x56c>)
 8011240:	f7fd fd52 	bl	800ece8 <mat_mult>
 8011244:	e008      	b.n	8011258 <kalmanCoreFinalize+0x570>
 8011246:	bf00      	nop
 8011248:	10004300 	.word	0x10004300
 801124c:	200000d0 	.word	0x200000d0
 8011250:	200000c8 	.word	0x200000c8
 8011254:	200000d8 	.word	0x200000d8
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011264:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011274:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011278:	ee37 7a27 	vadd.f32	s14, s14, s15
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011288:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801128c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801129c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80112b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80112ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80112c4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80112ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80112e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80112ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80112f6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011300:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011304:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011314:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801131e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011328:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011332:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011336:	ee77 7a27 	vadd.f32	s15, s14, s15
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801134c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801135c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011360:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011370:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011384:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011388:	ee77 7a67 	vsub.f32	s15, s14, s15
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011398:	ee37 7aa7 	vadd.f32	s14, s15, s15
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80113a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80113ac:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80113b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80113ca:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80113d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80113de:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80113e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80113ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80113fc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011406:	ee27 7a27 	vmul.f32	s14, s14, s15
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011410:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801141a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011448:	ee37 7a67 	vsub.f32	s14, s14, s15
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011458:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801145c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801146c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f04f 0200 	mov.w	r2, #0
 8011480:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f04f 0200 	mov.w	r2, #0
 8011488:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f04f 0200 	mov.w	r2, #0
 8011490:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011492:	2300      	movs	r3, #0
 8011494:	657b      	str	r3, [r7, #84]	@ 0x54
 8011496:	e0c2      	b.n	801161e <kalmanCoreFinalize+0x936>
    for (int j=i; j<KC_STATE_DIM; j++) {
 8011498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801149a:	653b      	str	r3, [r7, #80]	@ 0x50
 801149c:	e0b8      	b.n	8011610 <kalmanCoreFinalize+0x928>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 801149e:	6879      	ldr	r1, [r7, #4]
 80114a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80114a2:	4613      	mov	r3, r2
 80114a4:	00db      	lsls	r3, r3, #3
 80114a6:	4413      	add	r3, r2
 80114a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80114aa:	4413      	add	r3, r2
 80114ac:	3316      	adds	r3, #22
 80114ae:	009b      	lsls	r3, r3, #2
 80114b0:	440b      	add	r3, r1
 80114b2:	edd3 7a00 	vldr	s15, [r3]
 80114b6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80114ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80114be:	6879      	ldr	r1, [r7, #4]
 80114c0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80114c2:	4613      	mov	r3, r2
 80114c4:	00db      	lsls	r3, r3, #3
 80114c6:	4413      	add	r3, r2
 80114c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80114ca:	4413      	add	r3, r2
 80114cc:	3316      	adds	r3, #22
 80114ce:	009b      	lsls	r3, r3, #2
 80114d0:	440b      	add	r3, r1
 80114d2:	edd3 7a00 	vldr	s15, [r3]
 80114d6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80114da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80114de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80114e2:	ee17 0a90 	vmov	r0, s15
 80114e6:	f7ee ffe1 	bl	80004ac <__aeabi_f2d>
 80114ea:	4602      	mov	r2, r0
 80114ec:	460b      	mov	r3, r1
 80114ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
      if (isnan(p) || p > MAX_COVARIANCE) {
 80114f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80114f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80114fa:	f7ef fac9 	bl	8000a90 <__aeabi_dcmpun>
 80114fe:	4603      	mov	r3, r0
 8011500:	2b00      	cmp	r3, #0
 8011502:	d109      	bne.n	8011518 <kalmanCoreFinalize+0x830>
 8011504:	f04f 0200 	mov.w	r2, #0
 8011508:	4b4f      	ldr	r3, [pc, #316]	@ (8011648 <kalmanCoreFinalize+0x960>)
 801150a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801150e:	f7ef fab5 	bl	8000a7c <__aeabi_dcmpgt>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d022      	beq.n	801155e <kalmanCoreFinalize+0x876>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 8011518:	6879      	ldr	r1, [r7, #4]
 801151a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801151c:	4613      	mov	r3, r2
 801151e:	00db      	lsls	r3, r3, #3
 8011520:	4413      	add	r3, r2
 8011522:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011524:	4413      	add	r3, r2
 8011526:	3316      	adds	r3, #22
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	440b      	add	r3, r1
 801152c:	4a47      	ldr	r2, [pc, #284]	@ (801164c <kalmanCoreFinalize+0x964>)
 801152e:	601a      	str	r2, [r3, #0]
 8011530:	6879      	ldr	r1, [r7, #4]
 8011532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011534:	4613      	mov	r3, r2
 8011536:	00db      	lsls	r3, r3, #3
 8011538:	4413      	add	r3, r2
 801153a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801153c:	4413      	add	r3, r2
 801153e:	3316      	adds	r3, #22
 8011540:	009b      	lsls	r3, r3, #2
 8011542:	440b      	add	r3, r1
 8011544:	6819      	ldr	r1, [r3, #0]
 8011546:	6878      	ldr	r0, [r7, #4]
 8011548:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801154a:	4613      	mov	r3, r2
 801154c:	00db      	lsls	r3, r3, #3
 801154e:	4413      	add	r3, r2
 8011550:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011552:	4413      	add	r3, r2
 8011554:	3316      	adds	r3, #22
 8011556:	009b      	lsls	r3, r3, #2
 8011558:	4403      	add	r3, r0
 801155a:	6019      	str	r1, [r3, #0]
 801155c:	e055      	b.n	801160a <kalmanCoreFinalize+0x922>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 801155e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011562:	429a      	cmp	r2, r3
 8011564:	d12c      	bne.n	80115c0 <kalmanCoreFinalize+0x8d8>
 8011566:	a336      	add	r3, pc, #216	@ (adr r3, 8011640 <kalmanCoreFinalize+0x958>)
 8011568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8011570:	f7ef fa66 	bl	8000a40 <__aeabi_dcmplt>
 8011574:	4603      	mov	r3, r0
 8011576:	2b00      	cmp	r3, #0
 8011578:	d022      	beq.n	80115c0 <kalmanCoreFinalize+0x8d8>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 801157a:	6879      	ldr	r1, [r7, #4]
 801157c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801157e:	4613      	mov	r3, r2
 8011580:	00db      	lsls	r3, r3, #3
 8011582:	4413      	add	r3, r2
 8011584:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011586:	4413      	add	r3, r2
 8011588:	3316      	adds	r3, #22
 801158a:	009b      	lsls	r3, r3, #2
 801158c:	440b      	add	r3, r1
 801158e:	4a30      	ldr	r2, [pc, #192]	@ (8011650 <kalmanCoreFinalize+0x968>)
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	6879      	ldr	r1, [r7, #4]
 8011594:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011596:	4613      	mov	r3, r2
 8011598:	00db      	lsls	r3, r3, #3
 801159a:	4413      	add	r3, r2
 801159c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801159e:	4413      	add	r3, r2
 80115a0:	3316      	adds	r3, #22
 80115a2:	009b      	lsls	r3, r3, #2
 80115a4:	440b      	add	r3, r1
 80115a6:	6819      	ldr	r1, [r3, #0]
 80115a8:	6878      	ldr	r0, [r7, #4]
 80115aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115ac:	4613      	mov	r3, r2
 80115ae:	00db      	lsls	r3, r3, #3
 80115b0:	4413      	add	r3, r2
 80115b2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115b4:	4413      	add	r3, r2
 80115b6:	3316      	adds	r3, #22
 80115b8:	009b      	lsls	r3, r3, #2
 80115ba:	4403      	add	r3, r0
 80115bc:	6019      	str	r1, [r3, #0]
 80115be:	e024      	b.n	801160a <kalmanCoreFinalize+0x922>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 80115c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80115c4:	f7ef fa7a 	bl	8000abc <__aeabi_d2f>
 80115c8:	6879      	ldr	r1, [r7, #4]
 80115ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115cc:	4613      	mov	r3, r2
 80115ce:	00db      	lsls	r3, r3, #3
 80115d0:	4413      	add	r3, r2
 80115d2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115d4:	4413      	add	r3, r2
 80115d6:	3316      	adds	r3, #22
 80115d8:	009b      	lsls	r3, r3, #2
 80115da:	440b      	add	r3, r1
 80115dc:	6018      	str	r0, [r3, #0]
 80115de:	6879      	ldr	r1, [r7, #4]
 80115e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115e2:	4613      	mov	r3, r2
 80115e4:	00db      	lsls	r3, r3, #3
 80115e6:	4413      	add	r3, r2
 80115e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115ea:	4413      	add	r3, r2
 80115ec:	3316      	adds	r3, #22
 80115ee:	009b      	lsls	r3, r3, #2
 80115f0:	440b      	add	r3, r1
 80115f2:	6819      	ldr	r1, [r3, #0]
 80115f4:	6878      	ldr	r0, [r7, #4]
 80115f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115f8:	4613      	mov	r3, r2
 80115fa:	00db      	lsls	r3, r3, #3
 80115fc:	4413      	add	r3, r2
 80115fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011600:	4413      	add	r3, r2
 8011602:	3316      	adds	r3, #22
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	4403      	add	r3, r0
 8011608:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 801160a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801160c:	3301      	adds	r3, #1
 801160e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011610:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011612:	2b08      	cmp	r3, #8
 8011614:	f77f af43 	ble.w	801149e <kalmanCoreFinalize+0x7b6>
  for (int i=0; i<KC_STATE_DIM; i++) {
 8011618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801161a:	3301      	adds	r3, #1
 801161c:	657b      	str	r3, [r7, #84]	@ 0x54
 801161e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011620:	2b08      	cmp	r3, #8
 8011622:	f77f af39 	ble.w	8011498 <kalmanCoreFinalize+0x7b0>
      }
    }
  }

  assertStateNotNaN(this);
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7fd fbe2 	bl	800edf0 <assertStateNotNaN>

  this->isUpdated = false;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	2200      	movs	r2, #0
 8011630:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  return true;
 8011634:	2301      	movs	r3, #1
}
 8011636:	4618      	mov	r0, r3
 8011638:	3758      	adds	r7, #88	@ 0x58
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	a0000000 	.word	0xa0000000
 8011644:	3eb0c6f7 	.word	0x3eb0c6f7
 8011648:	40590000 	.word	0x40590000
 801164c:	42c80000 	.word	0x42c80000
 8011650:	358637bd 	.word	0x358637bd

08011654 <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 8011654:	b590      	push	{r4, r7, lr}
 8011656:	b09d      	sub	sp, #116	@ 0x74
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	3320      	adds	r3, #32
 8011670:	2200      	movs	r2, #0
 8011672:	601a      	str	r2, [r3, #0]
 8011674:	605a      	str	r2, [r3, #4]
 8011676:	609a      	str	r2, [r3, #8]
 8011678:	60da      	str	r2, [r3, #12]
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	625c      	str	r4, [r3, #36]	@ 0x24
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	6298      	str	r0, [r3, #40]	@ 0x28
 8011682:	68bb      	ldr	r3, [r7, #8]
 8011684:	62d9      	str	r1, [r3, #44]	@ 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	edd3 7a03 	vldr	s15, [r3, #12]
 8011692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	edd3 7a04 	vldr	s15, [r3, #16]
 80116a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80116b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80116ba:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80116ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80116da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80116de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80116ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80116f2:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8011702:	ee26 6a27 	vmul.f32	s12, s12, s15
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	edd3 7a04 	vldr	s15, [r3, #16]
 8011712:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8011716:	ee36 6a27 	vadd.f32	s12, s12, s15
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	edd3 7a05 	vldr	s15, [r3, #20]
 8011726:	ee65 7aa7 	vmul.f32	s15, s11, s15
 801172a:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 801172e:	68bb      	ldr	r3, [r7, #8]
 8011730:	3330      	adds	r3, #48	@ 0x30
 8011732:	2200      	movs	r2, #0
 8011734:	601a      	str	r2, [r3, #0]
 8011736:	605a      	str	r2, [r3, #4]
 8011738:	609a      	str	r2, [r3, #8]
 801173a:	60da      	str	r2, [r3, #12]
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
 8011742:	68bb      	ldr	r3, [r7, #8]
 8011744:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	edd3 7a00 	vldr	s15, [r3]
 801175a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	edd3 7a01 	vldr	s15, [r3, #4]
 801176a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801176e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	edd3 7a02 	vldr	s15, [r3, #8]
 801177e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011782:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	edd3 7a00 	vldr	s15, [r3]
 8011792:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	edd3 7a01 	vldr	s15, [r3, #4]
 80117a2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80117a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	edd3 7a02 	vldr	s15, [r3, #8]
 80117b6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80117ba:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	edd3 7a00 	vldr	s15, [r3]
 80117ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80117da:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80117de:	ee36 6a27 	vadd.f32	s12, s12, s15
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80117ee:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80117f2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80117f6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80117fa:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 80117fe:	68bb      	ldr	r3, [r7, #8]
 8011800:	3340      	adds	r3, #64	@ 0x40
 8011802:	2200      	movs	r2, #0
 8011804:	601a      	str	r2, [r3, #0]
 8011806:	605a      	str	r2, [r3, #4]
 8011808:	609a      	str	r2, [r3, #8]
 801180a:	60da      	str	r2, [r3, #12]
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	ed83 7a12 	vstr	s14, [r3, #72]	@ 0x48
 8011818:	68bb      	ldr	r3, [r7, #8]
 801181a:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 801182a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801183a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801183e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011842:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8011852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8011862:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011866:	ee37 7a27 	vadd.f32	s14, s14, s15
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801187a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 801188a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801188e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011892:	eef0 0a67 	vmov.f32	s1, s15
 8011896:	eeb0 0a46 	vmov.f32	s0, s12
 801189a:	f007 f96f 	bl	8018b7c <atan2f>
 801189e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80118ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80118be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80118c6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80118ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118ce:	eeb0 0a67 	vmov.f32	s0, s15
 80118d2:	f007 f927 	bl	8018b24 <asinf>
 80118d6:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80118e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80118f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80118fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80118fe:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 801190e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 801191e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011922:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8011932:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011936:	ee37 7a67 	vsub.f32	s14, s14, s15
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8011946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801194a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801194e:	eef0 0a67 	vmov.f32	s1, s15
 8011952:	eeb0 0a46 	vmov.f32	s0, s12
 8011956:	f007 f911 	bl	8018b7c <atan2f>
 801195a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 801195e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8011962:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80119d4 <kalmanCoreExternalizeState+0x380>
 8011966:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 801196a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 801196e:	eef1 7a67 	vneg.f32	s15, s15
 8011972:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80119d4 <kalmanCoreExternalizeState+0x380>
 8011976:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 801197a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 801197e:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80119d4 <kalmanCoreExternalizeState+0x380>
 8011982:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	461a      	mov	r2, r3
 801198a:	2300      	movs	r3, #0
 801198c:	6013      	str	r3, [r2, #0]
 801198e:	6053      	str	r3, [r2, #4]
 8011990:	6093      	str	r3, [r2, #8]
 8011992:	60d3      	str	r3, [r2, #12]
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	edc3 6a01 	vstr	s13, [r3, #4]
 801199a:	68bb      	ldr	r3, [r7, #8]
 801199c:	ed83 7a02 	vstr	s14, [r3, #8]
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      .y = this->q[2],
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
      .z = this->q[3]
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
      .w = this->q[0],
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  state->attitudeQuaternion = (quaternion_t){
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	611c      	str	r4, [r3, #16]
 80119ba:	68bb      	ldr	r3, [r7, #8]
 80119bc:	6158      	str	r0, [r3, #20]
 80119be:	68bb      	ldr	r3, [r7, #8]
 80119c0:	6199      	str	r1, [r3, #24]
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f7fd fa12 	bl	800edf0 <assertStateNotNaN>
}
 80119cc:	bf00      	nop
 80119ce:	3774      	adds	r7, #116	@ 0x74
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd90      	pop	{r4, r7, pc}
 80119d4:	42652ee0 	.word	0x42652ee0

080119d8 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 80119d8:	b580      	push	{r7, lr}
 80119da:	b08e      	sub	sp, #56	@ 0x38
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
 80119e0:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 80119e2:	f107 0314 	add.w	r3, r7, #20
 80119e6:	2224      	movs	r2, #36	@ 0x24
 80119e8:	2100      	movs	r1, #0
 80119ea:	4618      	mov	r0, r3
 80119ec:	f007 f81a 	bl	8018a24 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80119f0:	2301      	movs	r3, #1
 80119f2:	81bb      	strh	r3, [r7, #12]
 80119f4:	2309      	movs	r3, #9
 80119f6:	81fb      	strh	r3, [r7, #14]
 80119f8:	f107 0314 	add.w	r3, r7, #20
 80119fc:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 80119fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011a02:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 8011a04:	683b      	ldr	r3, [r7, #0]
 8011a06:	ed93 7a01 	vldr	s14, [r3, #4]
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8011a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	ed93 7a02 	vldr	s14, [r3, #8]
 8011a1a:	f107 030c 	add.w	r3, r7, #12
 8011a1e:	eef0 0a47 	vmov.f32	s1, s14
 8011a22:	eeb0 0a67 	vmov.f32	s0, s15
 8011a26:	4619      	mov	r1, r3
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f7fd fb79 	bl	800f120 <kalmanCoreScalarUpdate>
}
 8011a2e:	bf00      	nop
 8011a30:	3738      	adds	r7, #56	@ 0x38
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
	...

08011a38 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b086      	sub	sp, #24
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8011a42:	f04f 0300 	mov.w	r3, #0
 8011a46:	60bb      	str	r3, [r7, #8]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	613b      	str	r3, [r7, #16]
 8011a4c:	f107 0308 	add.w	r3, r7, #8
 8011a50:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8011a52:	edd7 7a04 	vldr	s15, [r7, #16]
 8011a56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a5e:	db0a      	blt.n	8011a76 <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 8011a60:	ed97 0a04 	vldr	s0, [r7, #16]
 8011a64:	f007 f948 	bl	8018cf8 <sqrtf>
 8011a68:	eef0 7a40 	vmov.f32	s15, s0
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8011a72:	2300      	movs	r3, #0
 8011a74:	e005      	b.n	8011a82 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f04f 0200 	mov.w	r2, #0
 8011a7c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8011a7e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 8011a82:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011a84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d004      	beq.n	8011a96 <arm_sqrt+0x5e>
 8011a8c:	2258      	movs	r2, #88	@ 0x58
 8011a8e:	4906      	ldr	r1, [pc, #24]	@ (8011aa8 <arm_sqrt+0x70>)
 8011a90:	4806      	ldr	r0, [pc, #24]	@ (8011aac <arm_sqrt+0x74>)
 8011a92:	f001 fd35 	bl	8013500 <assertFail>
  return pOut;
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	ee07 3a90 	vmov	s15, r3
}
 8011a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8011aa0:	3718      	adds	r7, #24
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	0801b878 	.word	0x0801b878
 8011aac:	0801b8b8 	.word	0x0801b8b8

08011ab0 <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	ed2d 8b02 	vpush	{d8}
 8011ab6:	b092      	sub	sp, #72	@ 0x48
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 8011abe:	f107 0310 	add.w	r3, r7, #16
 8011ac2:	2224      	movs	r2, #36	@ 0x24
 8011ac4:	2100      	movs	r1, #0
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f006 ffac 	bl	8018a24 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8011acc:	2301      	movs	r3, #1
 8011ace:	813b      	strh	r3, [r7, #8]
 8011ad0:	2309      	movs	r3, #9
 8011ad2:	817b      	strh	r3, [r7, #10]
 8011ad4:	f107 0310 	add.w	r3, r7, #16
 8011ad8:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	ed93 7a00 	vldr	s14, [r3]
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	edd3 7a00 	vldr	s15, [r3]
 8011ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011aea:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	ed93 7a01 	vldr	s14, [r3, #4]
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	edd3 7a01 	vldr	s15, [r3, #4]
 8011afa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011afe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	ed93 7a02 	vldr	s14, [r3, #8]
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	edd3 7a02 	vldr	s15, [r3, #8]
 8011b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011b12:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

  float measuredDistance = d->distance;
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	691b      	ldr	r3, [r3, #16]
 8011b1a:	63bb      	str	r3, [r7, #56]	@ 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8011b1c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011b20:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 8011b24:	f007 f890 	bl	8018c48 <powf>
 8011b28:	eeb0 8a40 	vmov.f32	s16, s0
 8011b2c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011b30:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 8011b34:	f007 f888 	bl	8018c48 <powf>
 8011b38:	eef0 7a40 	vmov.f32	s15, s0
 8011b3c:	ee38 8a27 	vadd.f32	s16, s16, s15
 8011b40:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011b44:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8011b48:	f007 f87e 	bl	8018c48 <powf>
 8011b4c:	eef0 7a40 	vmov.f32	s15, s0
 8011b50:	ee78 7a27 	vadd.f32	s15, s16, s15
 8011b54:	eeb0 0a67 	vmov.f32	s0, s15
 8011b58:	f7ff ff6e 	bl	8011a38 <arm_sqrt>
 8011b5c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  if (predictedDistance != 0.0f) {
 8011b60:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8011b64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b6c:	d018      	beq.n	8011ba0 <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 8011b6e:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 8011b72:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b7a:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 8011b7e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8011b82:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b8a:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 8011b8e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8011b92:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8011b96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b9a:	edc7 7a06 	vstr	s15, [r7, #24]
 8011b9e:	e008      	b.n	8011bb2 <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 8011ba0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8011ba4:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 8011ba6:	f04f 0300 	mov.w	r3, #0
 8011baa:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 8011bac:	f04f 0300 	mov.w	r3, #0
 8011bb0:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 8011bb2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8011bb6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8011bba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	ed93 7a05 	vldr	s14, [r3, #20]
 8011bc4:	f107 0308 	add.w	r3, r7, #8
 8011bc8:	eef0 0a47 	vmov.f32	s1, s14
 8011bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7fd faa4 	bl	800f120 <kalmanCoreScalarUpdate>
}
 8011bd8:	bf00      	nop
 8011bda:	3748      	adds	r7, #72	@ 0x48
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	ecbd 8b02 	vpop	{d8}
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b084      	sub	sp, #16
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	685b      	ldr	r3, [r3, #4]
 8011bf0:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f003 0303 	and.w	r3, r3, #3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d004      	beq.n	8011c06 <assert_aligned_4_bytes+0x22>
 8011bfc:	2239      	movs	r2, #57	@ 0x39
 8011bfe:	4904      	ldr	r1, [pc, #16]	@ (8011c10 <assert_aligned_4_bytes+0x2c>)
 8011c00:	4804      	ldr	r0, [pc, #16]	@ (8011c14 <assert_aligned_4_bytes+0x30>)
 8011c02:	f001 fc7d 	bl	8013500 <assertFail>
}
 8011c06:	bf00      	nop
 8011c08:	3710      	adds	r7, #16
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}
 8011c0e:	bf00      	nop
 8011c10:	0801b8d4 	.word	0x0801b8d4
 8011c14:	0801b914 	.word	0x0801b914

08011c18 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b084      	sub	sp, #16
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f7ff ffde 	bl	8011be4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8011c28:	6838      	ldr	r0, [r7, #0]
 8011c2a:	f7ff ffdb 	bl	8011be4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 8011c2e:	6839      	ldr	r1, [r7, #0]
 8011c30:	6878      	ldr	r0, [r7, #4]
 8011c32:	f006 fc13 	bl	801845c <arm_mat_trans_f32>
 8011c36:	4603      	mov	r3, r0
 8011c38:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d004      	beq.n	8011c4c <mat_trans+0x34>
 8011c42:	2241      	movs	r2, #65	@ 0x41
 8011c44:	4903      	ldr	r1, [pc, #12]	@ (8011c54 <mat_trans+0x3c>)
 8011c46:	4804      	ldr	r0, [pc, #16]	@ (8011c58 <mat_trans+0x40>)
 8011c48:	f001 fc5a 	bl	8013500 <assertFail>
}
 8011c4c:	bf00      	nop
 8011c4e:	3710      	adds	r7, #16
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}
 8011c54:	0801b8d4 	.word	0x0801b8d4
 8011c58:	0801b92c 	.word	0x0801b92c

08011c5c <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b084      	sub	sp, #16
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff ffbc 	bl	8011be4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8011c6c:	6838      	ldr	r0, [r7, #0]
 8011c6e:	f7ff ffb9 	bl	8011be4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 8011c72:	6839      	ldr	r1, [r7, #0]
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f006 fd3f 	bl	80186f8 <arm_mat_inverse_f32>
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011c7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d004      	beq.n	8011c90 <mat_inv+0x34>
 8011c86:	2249      	movs	r2, #73	@ 0x49
 8011c88:	4903      	ldr	r1, [pc, #12]	@ (8011c98 <mat_inv+0x3c>)
 8011c8a:	4804      	ldr	r0, [pc, #16]	@ (8011c9c <mat_inv+0x40>)
 8011c8c:	f001 fc38 	bl	8013500 <assertFail>
}
 8011c90:	bf00      	nop
 8011c92:	3710      	adds	r7, #16
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd80      	pop	{r7, pc}
 8011c98:	0801b8d4 	.word	0x0801b8d4
 8011c9c:	0801b92c 	.word	0x0801b92c

08011ca0 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b086      	sub	sp, #24
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	60f8      	str	r0, [r7, #12]
 8011ca8:	60b9      	str	r1, [r7, #8]
 8011caa:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 8011cac:	68f8      	ldr	r0, [r7, #12]
 8011cae:	f7ff ff99 	bl	8011be4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 8011cb2:	68b8      	ldr	r0, [r7, #8]
 8011cb4:	f7ff ff96 	bl	8011be4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 8011cb8:	6878      	ldr	r0, [r7, #4]
 8011cba:	f7ff ff93 	bl	8011be4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	68b9      	ldr	r1, [r7, #8]
 8011cc2:	68f8      	ldr	r0, [r7, #12]
 8011cc4:	f006 fc78 	bl	80185b8 <arm_mat_mult_f32>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011ccc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d004      	beq.n	8011cde <mat_mult+0x3e>
 8011cd4:	2252      	movs	r2, #82	@ 0x52
 8011cd6:	4904      	ldr	r1, [pc, #16]	@ (8011ce8 <mat_mult+0x48>)
 8011cd8:	4804      	ldr	r0, [pc, #16]	@ (8011cec <mat_mult+0x4c>)
 8011cda:	f001 fc11 	bl	8013500 <assertFail>
}
 8011cde:	bf00      	nop
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	0801b8d4 	.word	0x0801b8d4
 8011cec:	0801b92c 	.word	0x0801b92c

08011cf0 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b086      	sub	sp, #24
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 8011cfa:	f04f 0300 	mov.w	r3, #0
 8011cfe:	60bb      	str	r3, [r7, #8]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	613b      	str	r3, [r7, #16]
 8011d04:	f107 0308 	add.w	r3, r7, #8
 8011d08:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 8011d0a:	edd7 7a04 	vldr	s15, [r7, #16]
 8011d0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d16:	db0a      	blt.n	8011d2e <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 8011d18:	ed97 0a04 	vldr	s0, [r7, #16]
 8011d1c:	f006 ffec 	bl	8018cf8 <sqrtf>
 8011d20:	eef0 7a40 	vmov.f32	s15, s0
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	e005      	b.n	8011d3a <arm_sqrt+0x4a>
      *pOut = 0.0f;
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	f04f 0200 	mov.w	r2, #0
 8011d34:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8011d36:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 8011d3a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 8011d3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d004      	beq.n	8011d4e <arm_sqrt+0x5e>
 8011d44:	2258      	movs	r2, #88	@ 0x58
 8011d46:	4906      	ldr	r1, [pc, #24]	@ (8011d60 <arm_sqrt+0x70>)
 8011d48:	4806      	ldr	r0, [pc, #24]	@ (8011d64 <arm_sqrt+0x74>)
 8011d4a:	f001 fbd9 	bl	8013500 <assertFail>
  return pOut;
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	ee07 3a90 	vmov	s15, r3
}
 8011d54:	eeb0 0a67 	vmov.f32	s0, s15
 8011d58:	3718      	adds	r7, #24
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	0801b8d4 	.word	0x0801b8d4
 8011d64:	0801b92c 	.word	0x0801b92c

08011d68 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 8011d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d6c:	b08d      	sub	sp, #52	@ 0x34
 8011d6e:	af00      	add	r7, sp, #0
 8011d70:	60f8      	str	r0, [r7, #12]
 8011d72:	60b9      	str	r1, [r7, #8]
 8011d74:	607a      	str	r2, [r7, #4]
 8011d76:	68fa      	ldr	r2, [r7, #12]
 8011d78:	603a      	str	r2, [r7, #0]
 8011d7a:	1e53      	subs	r3, r2, #1
 8011d7c:	61bb      	str	r3, [r7, #24]
 8011d7e:	2300      	movs	r3, #0
 8011d80:	4690      	mov	r8, r2
 8011d82:	4699      	mov	r9, r3
 8011d84:	f04f 0200 	mov.w	r2, #0
 8011d88:	f04f 0300 	mov.w	r3, #0
 8011d8c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8011d90:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8011d94:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8011d98:	68fe      	ldr	r6, [r7, #12]
 8011d9a:	1e73      	subs	r3, r6, #1
 8011d9c:	617b      	str	r3, [r7, #20]
 8011d9e:	4632      	mov	r2, r6
 8011da0:	2300      	movs	r3, #0
 8011da2:	4614      	mov	r4, r2
 8011da4:	461d      	mov	r5, r3
 8011da6:	f04f 0200 	mov.w	r2, #0
 8011daa:	f04f 0300 	mov.w	r3, #0
 8011dae:	016b      	lsls	r3, r5, #5
 8011db0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8011db4:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 8011db6:	2300      	movs	r3, #0
 8011db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011dba:	e0af      	b.n	8011f1c <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011dc0:	e0a4      	b.n	8011f0c <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 8011dc2:	f04f 0300 	mov.w	r3, #0
 8011dc6:	627b      	str	r3, [r7, #36]	@ 0x24
            if (j == i) // summation for diagnols 
 8011dc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d146      	bne.n	8011e5e <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	623b      	str	r3, [r7, #32]
 8011dd4:	e01c      	b.n	8011e10 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 8011dd6:	4632      	mov	r2, r6
 8011dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011dda:	fb02 f303 	mul.w	r3, r2, r3
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	441a      	add	r2, r3
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	009b      	lsls	r3, r3, #2
 8011de8:	4413      	add	r3, r2
 8011dea:	edd3 7a00 	vldr	s15, [r3]
 8011dee:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 8011df2:	eeb0 0a67 	vmov.f32	s0, s15
 8011df6:	f006 ff27 	bl	8018c48 <powf>
 8011dfa:	eeb0 7a40 	vmov.f32	s14, s0
 8011dfe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011e02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e06:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 8011e0a:	6a3b      	ldr	r3, [r7, #32]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	623b      	str	r3, [r7, #32]
 8011e10:	6a3a      	ldr	r2, [r7, #32]
 8011e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e14:	429a      	cmp	r2, r3
 8011e16:	dbde      	blt.n	8011dd6 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e1c:	fb02 f303 	mul.w	r3, r2, r3
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	441a      	add	r2, r3
 8011e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e28:	009b      	lsls	r3, r3, #2
 8011e2a:	4413      	add	r3, r2
 8011e2c:	ed93 7a00 	vldr	s14, [r3]
 8011e30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011e38:	4632      	mov	r2, r6
 8011e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e3c:	fb02 f303 	mul.w	r3, r2, r3
 8011e40:	009b      	lsls	r3, r3, #2
 8011e42:	687a      	ldr	r2, [r7, #4]
 8011e44:	18d4      	adds	r4, r2, r3
 8011e46:	eeb0 0a67 	vmov.f32	s0, s15
 8011e4a:	f006 ff55 	bl	8018cf8 <sqrtf>
 8011e4e:	eef0 7a40 	vmov.f32	s15, s0
 8011e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	4423      	add	r3, r4
 8011e58:	edc3 7a00 	vstr	s15, [r3]
 8011e5c:	e053      	b.n	8011f06 <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 8011e5e:	2300      	movs	r3, #0
 8011e60:	61fb      	str	r3, [r7, #28]
 8011e62:	e022      	b.n	8011eaa <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 8011e64:	4632      	mov	r2, r6
 8011e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e68:	fb02 f303 	mul.w	r3, r2, r3
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	687a      	ldr	r2, [r7, #4]
 8011e70:	441a      	add	r2, r3
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	009b      	lsls	r3, r3, #2
 8011e76:	4413      	add	r3, r2
 8011e78:	ed93 7a00 	vldr	s14, [r3]
 8011e7c:	4632      	mov	r2, r6
 8011e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e80:	fb02 f303 	mul.w	r3, r2, r3
 8011e84:	009b      	lsls	r3, r3, #2
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	441a      	add	r2, r3
 8011e8a:	69fb      	ldr	r3, [r7, #28]
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	edd3 7a00 	vldr	s15, [r3]
 8011e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011e98:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8011e9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ea0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	61fb      	str	r3, [r7, #28]
 8011eaa:	69fa      	ldr	r2, [r7, #28]
 8011eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	dbd8      	blt.n	8011e64 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 8011eb2:	683a      	ldr	r2, [r7, #0]
 8011eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eb6:	fb02 f303 	mul.w	r3, r2, r3
 8011eba:	009b      	lsls	r3, r3, #2
 8011ebc:	68ba      	ldr	r2, [r7, #8]
 8011ebe:	441a      	add	r2, r3
 8011ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4413      	add	r3, r2
 8011ec6:	ed93 7a00 	vldr	s14, [r3]
 8011eca:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8011ece:	ee77 6a67 	vsub.f32	s13, s14, s15
 8011ed2:	4632      	mov	r2, r6
 8011ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ed6:	fb02 f303 	mul.w	r3, r2, r3
 8011eda:	009b      	lsls	r3, r3, #2
 8011edc:	687a      	ldr	r2, [r7, #4]
 8011ede:	441a      	add	r2, r3
 8011ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee2:	009b      	lsls	r3, r3, #2
 8011ee4:	4413      	add	r3, r2
 8011ee6:	ed93 7a00 	vldr	s14, [r3]
 8011eea:	4632      	mov	r2, r6
 8011eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011eee:	fb02 f303 	mul.w	r3, r2, r3
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	687a      	ldr	r2, [r7, #4]
 8011ef6:	441a      	add	r2, r3
 8011ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011efe:	009b      	lsls	r3, r3, #2
 8011f00:	4413      	add	r3, r2
 8011f02:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 8011f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f08:	3301      	adds	r3, #1
 8011f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011f0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f10:	429a      	cmp	r2, r3
 8011f12:	f77f af56 	ble.w	8011dc2 <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 8011f16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f18:	3301      	adds	r3, #1
 8011f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011f1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f1e:	68fb      	ldr	r3, [r7, #12]
 8011f20:	429a      	cmp	r2, r3
 8011f22:	f6ff af4b 	blt.w	8011dbc <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 8011f26:	bf00      	nop
 8011f28:	bf00      	nop
 8011f2a:	3734      	adds	r7, #52	@ 0x34
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08011f32 <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 8011f32:	b480      	push	{r7}
 8011f34:	b085      	sub	sp, #20
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	ed87 0a01 	vstr	s0, [r7, #4]
 8011f3c:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 8011f3e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8011f42:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8011f44:	edd7 7a01 	vldr	s15, [r7, #4]
 8011f48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f4c:	ed97 7a03 	vldr	s14, [r7, #12]
 8011f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011f54:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8011f58:	edd7 7a03 	vldr	s15, [r7, #12]
 8011f5c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011f60:	edd7 7a02 	vldr	s15, [r7, #8]
 8011f64:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	edc3 7a00 	vstr	s15, [r3]
}
 8011f72:	bf00      	nop
 8011f74:	3714      	adds	r7, #20
 8011f76:	46bd      	mov	sp, r7
 8011f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7c:	4770      	bx	lr

08011f7e <GM_state>:

static void GM_state(float e, float * GM_e){
 8011f7e:	b480      	push	{r7}
 8011f80:	b085      	sub	sp, #20
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	ed87 0a01 	vstr	s0, [r7, #4]
 8011f88:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 8011f8a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8011f8e:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 8011f90:	edd7 7a01 	vldr	s15, [r7, #4]
 8011f94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011f98:	ed97 7a03 	vldr	s14, [r7, #12]
 8011f9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011fa0:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 8011fa4:	edd7 7a03 	vldr	s15, [r7, #12]
 8011fa8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8011fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8011fb0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8011fb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011fb8:	683b      	ldr	r3, [r7, #0]
 8011fba:	edc3 7a00 	vstr	s15, [r3]
}
 8011fbe:	bf00      	nop
 8011fc0:	3714      	adds	r7, #20
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr
	...

08011fcc <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	ed2d 8b02 	vpush	{d8}
 8011fd2:	b0f8      	sub	sp, #480	@ 0x1e0
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011fda:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8011fde:	6018      	str	r0, [r3, #0]
 8011fe0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011fe4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8011fe8:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 8011fea:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011fee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	ed93 7a00 	vldr	s14, [r3]
 8011ff8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8011ffc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	edd3 7a00 	vldr	s15, [r3]
 8012006:	ee77 7a67 	vsub.f32	s15, s14, s15
 801200a:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 801200e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012012:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	ed93 7a01 	vldr	s14, [r3, #4]
 801201c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012020:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	edd3 7a01 	vldr	s15, [r3, #4]
 801202a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801202e:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 8012032:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012036:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	ed93 7a02 	vldr	s14, [r3, #8]
 8012040:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012044:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	edd3 7a02 	vldr	s15, [r3, #8]
 801204e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012052:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8
    float measuredDistance = d->distance;
 8012056:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801205a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801205e:	681b      	ldr	r3, [r3, #0]
 8012060:	691b      	ldr	r3, [r3, #16]
 8012062:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 8012066:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801206a:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 801206e:	f006 fdeb 	bl	8018c48 <powf>
 8012072:	eeb0 8a40 	vmov.f32	s16, s0
 8012076:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801207a:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 801207e:	f006 fde3 	bl	8018c48 <powf>
 8012082:	eef0 7a40 	vmov.f32	s15, s0
 8012086:	ee38 8a27 	vadd.f32	s16, s16, s15
 801208a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 801208e:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 8012092:	f006 fdd9 	bl	8018c48 <powf>
 8012096:	eef0 7a40 	vmov.f32	s15, s0
 801209a:	ee78 7a27 	vadd.f32	s15, s16, s15
 801209e:	eeb0 0a67 	vmov.f32	s0, s15
 80120a2:	f7ff fe25 	bl	8011cf0 <arm_sqrt>
 80120a6:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 80120aa:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 80120ae:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 80120b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80120b6:	edc7 7a67 	vstr	s15, [r7, #412]	@ 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 80120ba:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80120be:	2224      	movs	r2, #36	@ 0x24
 80120c0:	2100      	movs	r1, #0
 80120c2:	4618      	mov	r0, r3
 80120c4:	f006 fcae 	bl	8018a24 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 80120c8:	2301      	movs	r3, #1
 80120ca:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 80120ce:	2309      	movs	r3, #9
 80120d0:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
 80120d4:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 80120d8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 80120dc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80120e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80120ea:	f107 0310 	add.w	r3, r7, #16
 80120ee:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80120f2:	4618      	mov	r0, r3
 80120f4:	f006 fcdc 	bl	8018ab0 <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 80120f8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80120fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	ed93 7a05 	vldr	s14, [r3, #20]
 8012106:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801210a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	edd3 7a05 	vldr	s15, [r3, #20]
 8012114:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012118:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 801211c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012120:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	2224      	movs	r2, #36	@ 0x24
 8012128:	4619      	mov	r1, r3
 801212a:	48cf      	ldr	r0, [pc, #828]	@ (8012468 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 801212c:	f006 fcc0 	bl	8018ab0 <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 8012130:	2300      	movs	r3, #0
 8012132:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8012136:	e2c3      	b.n	80126c0 <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 8012138:	f107 0310 	add.w	r3, r7, #16
 801213c:	4acb      	ldr	r2, [pc, #812]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801213e:	4619      	mov	r1, r3
 8012140:	2009      	movs	r0, #9
 8012142:	f7ff fe11 	bl	8011d68 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 8012146:	49ca      	ldr	r1, [pc, #808]	@ (8012470 <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 8012148:	48ca      	ldr	r0, [pc, #808]	@ (8012474 <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 801214a:	f7ff fd65 	bl	8011c18 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 801214e:	ed97 0a77 	vldr	s0, [r7, #476]	@ 0x1dc
 8012152:	f006 fdd1 	bl	8018cf8 <sqrtf>
 8012156:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 801215a:	4bc3      	ldr	r3, [pc, #780]	@ (8012468 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8012162:	4bc1      	ldr	r3, [pc, #772]	@ (8012468 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 801216a:	4bbf      	ldr	r3, [pc, #764]	@ (8012468 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 801216c:	689b      	ldr	r3, [r3, #8]
 801216e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 8012172:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012176:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	edd3 7a00 	vldr	s15, [r3]
 8012180:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 8012184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012188:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
 801218c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012190:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	edd3 7a01 	vldr	s15, [r3, #4]
 801219a:	ed97 7a64 	vldr	s14, [r7, #400]	@ 0x190
 801219e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121a2:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
 80121a6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80121aa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80121b4:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 80121b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80121bc:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 80121c0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80121c4:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 80121c8:	f006 fd3e 	bl	8018c48 <powf>
 80121cc:	eeb0 8a40 	vmov.f32	s16, s0
 80121d0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80121d4:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 80121d8:	f006 fd36 	bl	8018c48 <powf>
 80121dc:	eef0 7a40 	vmov.f32	s15, s0
 80121e0:	ee38 8a27 	vadd.f32	s16, s16, s15
 80121e4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80121e8:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 80121ec:	f006 fd2c 	bl	8018c48 <powf>
 80121f0:	eef0 7a40 	vmov.f32	s15, s0
 80121f4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80121f8:	eeb0 0a67 	vmov.f32	s0, s15
 80121fc:	f7ff fd78 	bl	8011cf0 <arm_sqrt>
 8012200:	ed87 0a62 	vstr	s0, [r7, #392]	@ 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 8012204:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 8012208:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 801220c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012210:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184

        float e_y = error_iter;
 8012214:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8012218:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

        if (predicted_iter != 0.0f) {
 801221c:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 8012220:	eef5 7a40 	vcmp.f32	s15, #0.0
 8012224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012228:	d018      	beq.n	801225c <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 801222a:	edd7 6a6c 	vldr	s13, [r7, #432]	@ 0x1b0
 801222e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8012232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012236:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 801223a:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 801223e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8012242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012246:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 801224a:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 801224e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 8012252:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012256:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
 801225a:	e00b      	b.n	8012274 <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 801225c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8012260:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = 0.0f;
 8012264:	f04f 0300 	mov.w	r3, #0
 8012268:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = 0.0f;
 801226c:	f04f 0300 	mov.w	r3, #0
 8012270:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 8012274:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8012278:	eef0 7ae7 	vabs.f32	s15, s15
 801227c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8012478 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 8012280:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012288:	d508      	bpl.n	801229c <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 801228a:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 801228e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8012478 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 8012292:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012296:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
 801229a:	e007      	b.n	80122ac <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 801229c:	edd7 6a61 	vldr	s13, [r7, #388]	@ 0x184
 80122a0:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 80122a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80122a8:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 80122ac:	2300      	movs	r3, #0
 80122ae:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80122b2:	e095      	b.n	80123e0 <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 80122b4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80122b8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80122bc:	e086      	b.n	80123cc <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 80122be:	496b      	ldr	r1, [pc, #428]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80122c0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80122c4:	4613      	mov	r3, r2
 80122c6:	00db      	lsls	r3, r3, #3
 80122c8:	4413      	add	r3, r2
 80122ca:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80122ce:	4413      	add	r3, r2
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	440b      	add	r3, r1
 80122d4:	edd3 7a00 	vldr	s15, [r3]
 80122d8:	eef4 7a67 	vcmp.f32	s15, s15
 80122dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80122e0:	d613      	bvs.n	801230a <kalmanCoreRobustUpdateWithDistance+0x33e>
 80122e2:	4962      	ldr	r1, [pc, #392]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80122e4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80122e8:	4613      	mov	r3, r2
 80122ea:	00db      	lsls	r3, r3, #3
 80122ec:	4413      	add	r3, r2
 80122ee:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80122f2:	4413      	add	r3, r2
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	440b      	add	r3, r1
 80122f8:	edd3 7a00 	vldr	s15, [r3]
 80122fc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 801247c <kalmanCoreRobustUpdateWithDistance+0x4b0>
 8012300:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012308:	dd0d      	ble.n	8012326 <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 801230a:	4958      	ldr	r1, [pc, #352]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801230c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012310:	4613      	mov	r3, r2
 8012312:	00db      	lsls	r3, r3, #3
 8012314:	4413      	add	r3, r2
 8012316:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801231a:	4413      	add	r3, r2
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	440b      	add	r3, r1
 8012320:	4a57      	ldr	r2, [pc, #348]	@ (8012480 <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 8012322:	601a      	str	r2, [r3, #0]
 8012324:	e04d      	b.n	80123c2 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 8012326:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801232a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801232e:	429a      	cmp	r2, r3
 8012330:	d021      	beq.n	8012376 <kalmanCoreRobustUpdateWithDistance+0x3aa>
 8012332:	494e      	ldr	r1, [pc, #312]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012334:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012338:	4613      	mov	r3, r2
 801233a:	00db      	lsls	r3, r3, #3
 801233c:	4413      	add	r3, r2
 801233e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012342:	4413      	add	r3, r2
 8012344:	009b      	lsls	r3, r3, #2
 8012346:	440b      	add	r3, r1
 8012348:	edd3 7a00 	vldr	s15, [r3]
 801234c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8012484 <kalmanCoreRobustUpdateWithDistance+0x4b8>
 8012350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012358:	d50d      	bpl.n	8012376 <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 801235a:	4944      	ldr	r1, [pc, #272]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801235c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012360:	4613      	mov	r3, r2
 8012362:	00db      	lsls	r3, r3, #3
 8012364:	4413      	add	r3, r2
 8012366:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 801236a:	4413      	add	r3, r2
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	440b      	add	r3, r1
 8012370:	4a45      	ldr	r2, [pc, #276]	@ (8012488 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 8012372:	601a      	str	r2, [r3, #0]
 8012374:	e025      	b.n	80123c2 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 8012376:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 801237a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 801237e:	429a      	cmp	r2, r3
 8012380:	d11f      	bne.n	80123c2 <kalmanCoreRobustUpdateWithDistance+0x3f6>
 8012382:	493a      	ldr	r1, [pc, #232]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012384:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 8012388:	4613      	mov	r3, r2
 801238a:	00db      	lsls	r3, r3, #3
 801238c:	4413      	add	r3, r2
 801238e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 8012392:	4413      	add	r3, r2
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	440b      	add	r3, r1
 8012398:	edd3 7a00 	vldr	s15, [r3]
 801239c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80123a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123a4:	d50d      	bpl.n	80123c2 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 80123a6:	4931      	ldr	r1, [pc, #196]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80123a8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80123ac:	4613      	mov	r3, r2
 80123ae:	00db      	lsls	r3, r3, #3
 80123b0:	4413      	add	r3, r2
 80123b2:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	440b      	add	r3, r1
 80123bc:	f04f 0200 	mov.w	r2, #0
 80123c0:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 80123c2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80123c6:	3301      	adds	r3, #1
 80123c8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80123cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80123d0:	2b08      	cmp	r3, #8
 80123d2:	f77f af74 	ble.w	80122be <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 80123d6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80123da:	3301      	adds	r3, #1
 80123dc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80123e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80123e4:	2b08      	cmp	r3, #8
 80123e6:	f77f af65 	ble.w	80122b4 <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 80123ea:	4b28      	ldr	r3, [pc, #160]	@ (801248c <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 80123ec:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 80123f0:	2300      	movs	r3, #0
 80123f2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80123f6:	e01c      	b.n	8012432 <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 80123f8:	491c      	ldr	r1, [pc, #112]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 80123fa:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 80123fe:	4613      	mov	r3, r2
 8012400:	009b      	lsls	r3, r3, #2
 8012402:	4413      	add	r3, r2
 8012404:	00db      	lsls	r3, r3, #3
 8012406:	440b      	add	r3, r1
 8012408:	ed93 7a00 	vldr	s14, [r3]
 801240c:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 8012410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012414:	4915      	ldr	r1, [pc, #84]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 8012416:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 801241a:	4613      	mov	r3, r2
 801241c:	009b      	lsls	r3, r3, #2
 801241e:	4413      	add	r3, r2
 8012420:	00db      	lsls	r3, r3, #3
 8012422:	440b      	add	r3, r1
 8012424:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 8012428:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 801242c:	3301      	adds	r3, #1
 801242e:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8012432:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8012436:	2b08      	cmp	r3, #8
 8012438:	ddde      	ble.n	80123f8 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 801243a:	4a15      	ldr	r2, [pc, #84]	@ (8012490 <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 801243c:	4b0b      	ldr	r3, [pc, #44]	@ (801246c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 801243e:	4610      	mov	r0, r2
 8012440:	4619      	mov	r1, r3
 8012442:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8012446:	461a      	mov	r2, r3
 8012448:	f006 fb32 	bl	8018ab0 <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 801244c:	4911      	ldr	r1, [pc, #68]	@ (8012494 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 801244e:	4812      	ldr	r0, [pc, #72]	@ (8012498 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 8012450:	f7ff fc04 	bl	8011c5c <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 8012454:	4a11      	ldr	r2, [pc, #68]	@ (801249c <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 8012456:	4912      	ldr	r1, [pc, #72]	@ (80124a0 <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 8012458:	480e      	ldr	r0, [pc, #56]	@ (8012494 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 801245a:	f7ff fc21 	bl	8011ca0 <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 801245e:	2300      	movs	r3, #0
 8012460:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8012464:	e04f      	b.n	8012506 <kalmanCoreRobustUpdateWithDistance+0x53a>
 8012466:	bf00      	nop
 8012468:	20009a48 	.word	0x20009a48
 801246c:	20009a6c 	.word	0x20009a6c
 8012470:	200000e8 	.word	0x200000e8
 8012474:	200000e0 	.word	0x200000e0
 8012478:	38d1b717 	.word	0x38d1b717
 801247c:	42c80000 	.word	0x42c80000
 8012480:	42c80000 	.word	0x42c80000
 8012484:	c2c80000 	.word	0xc2c80000
 8012488:	c2c80000 	.word	0xc2c80000
 801248c:	3089705f 	.word	0x3089705f
 8012490:	20009bb0 	.word	0x20009bb0
 8012494:	200000f8 	.word	0x200000f8
 8012498:	200000f0 	.word	0x200000f0
 801249c:	20000108 	.word	0x20000108
 80124a0:	20000100 	.word	0x20000100
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 80124a4:	4a93      	ldr	r2, [pc, #588]	@ (80126f4 <kalmanCoreRobustUpdateWithDistance+0x728>)
 80124a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80124aa:	009b      	lsls	r3, r3, #2
 80124ac:	4413      	add	r3, r2
 80124ae:	edd3 7a00 	vldr	s15, [r3]
 80124b2:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80124b6:	4613      	mov	r3, r2
 80124b8:	009b      	lsls	r3, r3, #2
 80124ba:	4413      	add	r3, r2
 80124bc:	00db      	lsls	r3, r3, #3
 80124be:	4a8e      	ldr	r2, [pc, #568]	@ (80126f8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 80124c0:	4413      	add	r3, r2
 80124c2:	4618      	mov	r0, r3
 80124c4:	eeb0 0a67 	vmov.f32	s0, s15
 80124c8:	f7ff fd59 	bl	8011f7e <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 80124cc:	498a      	ldr	r1, [pc, #552]	@ (80126f8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 80124ce:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80124d2:	4613      	mov	r3, r2
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	4413      	add	r3, r2
 80124d8:	00db      	lsls	r3, r3, #3
 80124da:	440b      	add	r3, r1
 80124dc:	ed93 7a00 	vldr	s14, [r3]
 80124e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80124e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80124e8:	4983      	ldr	r1, [pc, #524]	@ (80126f8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 80124ea:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 80124ee:	4613      	mov	r3, r2
 80124f0:	009b      	lsls	r3, r3, #2
 80124f2:	4413      	add	r3, r2
 80124f4:	00db      	lsls	r3, r3, #3
 80124f6:	440b      	add	r3, r1
 80124f8:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 80124fc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8012500:	3301      	adds	r3, #1
 8012502:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8012506:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 801250a:	2b08      	cmp	r3, #8
 801250c:	ddca      	ble.n	80124a4 <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 801250e:	4a7b      	ldr	r2, [pc, #492]	@ (80126fc <kalmanCoreRobustUpdateWithDistance+0x730>)
 8012510:	497b      	ldr	r1, [pc, #492]	@ (8012700 <kalmanCoreRobustUpdateWithDistance+0x734>)
 8012512:	487c      	ldr	r0, [pc, #496]	@ (8012704 <kalmanCoreRobustUpdateWithDistance+0x738>)
 8012514:	f7ff fbc4 	bl	8011ca0 <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 8012518:	4a7b      	ldr	r2, [pc, #492]	@ (8012708 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 801251a:	497c      	ldr	r1, [pc, #496]	@ (801270c <kalmanCoreRobustUpdateWithDistance+0x740>)
 801251c:	4877      	ldr	r0, [pc, #476]	@ (80126fc <kalmanCoreRobustUpdateWithDistance+0x730>)
 801251e:	f7ff fbbf 	bl	8011ca0 <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 8012522:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012526:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801252a:	f04f 0200 	mov.w	r2, #0
 801252e:	601a      	str	r2, [r3, #0]
 8012530:	f04f 0300 	mov.w	r3, #0
 8012534:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 8012538:	f107 030c 	add.w	r3, r7, #12
 801253c:	4618      	mov	r0, r3
 801253e:	ed97 0a75 	vldr	s0, [r7, #468]	@ 0x1d4
 8012542:	f7ff fcf6 	bl	8011f32 <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 8012546:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801254a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801254e:	edd3 7a00 	vldr	s15, [r3]
 8012552:	eef0 7ae7 	vabs.f32	s15, s15
 8012556:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8012710 <kalmanCoreRobustUpdateWithDistance+0x744>
 801255a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012562:	d50a      	bpl.n	801257a <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 8012564:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 8012568:	ee27 7aa7 	vmul.f32	s14, s15, s15
 801256c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 8012710 <kalmanCoreRobustUpdateWithDistance+0x744>
 8012570:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8012574:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
 8012578:	e00d      	b.n	8012596 <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 801257a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 801257e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8012582:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012586:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 801258a:	ed93 7a00 	vldr	s14, [r3]
 801258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012592:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 8012596:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 801259a:	495e      	ldr	r1, [pc, #376]	@ (8012714 <kalmanCoreRobustUpdateWithDistance+0x748>)
 801259c:	4618      	mov	r0, r3
 801259e:	f7ff fb3b 	bl	8011c18 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 80125a2:	4a5d      	ldr	r2, [pc, #372]	@ (8012718 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 80125a4:	495b      	ldr	r1, [pc, #364]	@ (8012714 <kalmanCoreRobustUpdateWithDistance+0x748>)
 80125a6:	4858      	ldr	r0, [pc, #352]	@ (8012708 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 80125a8:	f7ff fb7a 	bl	8011ca0 <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 80125ac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80125b0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 80125b4:	2300      	movs	r3, #0
 80125b6:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80125ba:	e01c      	b.n	80125f6 <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 80125bc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80125c0:	009b      	lsls	r3, r3, #2
 80125c2:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 80125c6:	443b      	add	r3, r7
 80125c8:	3b84      	subs	r3, #132	@ 0x84
 80125ca:	ed93 7a00 	vldr	s14, [r3]
 80125ce:	4a53      	ldr	r2, [pc, #332]	@ (801271c <kalmanCoreRobustUpdateWithDistance+0x750>)
 80125d0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80125d4:	009b      	lsls	r3, r3, #2
 80125d6:	4413      	add	r3, r2
 80125d8:	edd3 7a00 	vldr	s15, [r3]
 80125dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80125e0:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 80125e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80125e8:	edc7 7a6f 	vstr	s15, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 80125ec:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80125f0:	3301      	adds	r3, #1
 80125f2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 80125f6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 80125fa:	2b08      	cmp	r3, #8
 80125fc:	ddde      	ble.n	80125bc <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 80125fe:	2300      	movs	r3, #0
 8012600:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8012604:	e043      	b.n	801268e <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 8012606:	4a45      	ldr	r2, [pc, #276]	@ (801271c <kalmanCoreRobustUpdateWithDistance+0x750>)
 8012608:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	4413      	add	r3, r2
 8012610:	edd3 6a00 	vldr	s13, [r3]
 8012614:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 8012618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801261c:	4a40      	ldr	r2, [pc, #256]	@ (8012720 <kalmanCoreRobustUpdateWithDistance+0x754>)
 801261e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012622:	009b      	lsls	r3, r3, #2
 8012624:	4413      	add	r3, r2
 8012626:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 801262a:	4a3d      	ldr	r2, [pc, #244]	@ (8012720 <kalmanCoreRobustUpdateWithDistance+0x754>)
 801262c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	4413      	add	r3, r2
 8012634:	ed93 7a00 	vldr	s14, [r3]
 8012638:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 801263c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012640:	4a38      	ldr	r2, [pc, #224]	@ (8012724 <kalmanCoreRobustUpdateWithDistance+0x758>)
 8012642:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012646:	009b      	lsls	r3, r3, #2
 8012648:	4413      	add	r3, r2
 801264a:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 801264e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8012652:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8012656:	681a      	ldr	r2, [r3, #0]
 8012658:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	4413      	add	r3, r2
 8012660:	ed93 7a00 	vldr	s14, [r3]
 8012664:	4a2f      	ldr	r2, [pc, #188]	@ (8012724 <kalmanCoreRobustUpdateWithDistance+0x758>)
 8012666:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801266a:	009b      	lsls	r3, r3, #2
 801266c:	4413      	add	r3, r2
 801266e:	edd3 7a00 	vldr	s15, [r3]
 8012672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012676:	4a2c      	ldr	r2, [pc, #176]	@ (8012728 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 8012678:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 801267c:	009b      	lsls	r3, r3, #2
 801267e:	4413      	add	r3, r2
 8012680:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 8012684:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012688:	3301      	adds	r3, #1
 801268a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 801268e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8012692:	2b08      	cmp	r3, #8
 8012694:	ddb7      	ble.n	8012606 <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 8012696:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 801269a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 801269e:	4a23      	ldr	r2, [pc, #140]	@ (801272c <kalmanCoreRobustUpdateWithDistance+0x760>)
 80126a0:	4618      	mov	r0, r3
 80126a2:	4611      	mov	r1, r2
 80126a4:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80126a8:	461a      	mov	r2, r3
 80126aa:	f006 fa01 	bl	8018ab0 <memcpy>
        R_iter = R_w;
 80126ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80126b2:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 80126b6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80126ba:	3301      	adds	r3, #1
 80126bc:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80126c0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	f77f ad37 	ble.w	8012138 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 80126ca:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 80126ce:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80126d2:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 80126d6:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 80126da:	4b0b      	ldr	r3, [pc, #44]	@ (8012708 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 80126dc:	4a14      	ldr	r2, [pc, #80]	@ (8012730 <kalmanCoreRobustUpdateWithDistance+0x764>)
 80126de:	6800      	ldr	r0, [r0, #0]
 80126e0:	f7fc ff1e 	bl	800f520 <kalmanCoreUpdateWithPKE>

}  
 80126e4:	bf00      	nop
 80126e6:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 80126ea:	46bd      	mov	sp, r7
 80126ec:	ecbd 8b02 	vpop	{d8}
 80126f0:	bd80      	pop	{r7, pc}
 80126f2:	bf00      	nop
 80126f4:	20009cf4 	.word	0x20009cf4
 80126f8:	20009d18 	.word	0x20009d18
 80126fc:	20000118 	.word	0x20000118
 8012700:	20000110 	.word	0x20000110
 8012704:	200000e0 	.word	0x200000e0
 8012708:	20000120 	.word	0x20000120
 801270c:	200000e8 	.word	0x200000e8
 8012710:	38d1b717 	.word	0x38d1b717
 8012714:	20000128 	.word	0x20000128
 8012718:	20000130 	.word	0x20000130
 801271c:	20009e5c 	.word	0x20009e5c
 8012720:	20009e80 	.word	0x20009e80
 8012724:	20009ea4 	.word	0x20009ea4
 8012728:	20009a48 	.word	0x20009a48
 801272c:	20009ec8 	.word	0x20009ec8
 8012730:	20000138 	.word	0x20000138

08012734 <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b0a2      	sub	sp, #136	@ 0x88
 8012738:	af00      	add	r7, sp, #0
 801273a:	60f8      	str	r0, [r7, #12]
 801273c:	60b9      	str	r1, [r7, #8]
 801273e:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 8012740:	4ba2      	ldr	r3, [pc, #648]	@ (80129cc <kalmanCoreUpdateWithFlow+0x298>)
 8012742:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 8012746:	4ba2      	ldr	r3, [pc, #648]	@ (80129d0 <kalmanCoreUpdateWithFlow+0x29c>)
 8012748:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	edd3 7a00 	vldr	s15, [r3]
 8012750:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80129d4 <kalmanCoreUpdateWithFlow+0x2a0>
 8012754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012758:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	edd3 7a01 	vldr	s15, [r3, #4]
 8012762:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80129d4 <kalmanCoreUpdateWithFlow+0x2a0>
 8012766:	ee67 7a87 	vmul.f32	s15, s15, s14
 801276a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	68db      	ldr	r3, [r3, #12]
 8012772:	673b      	str	r3, [r7, #112]	@ 0x70
  float dy_g = this->S[KC_STATE_PY];
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	691b      	ldr	r3, [r3, #16]
 8012778:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float z_g = 0.0;
 801277a:	f04f 0300 	mov.w	r3, #0
 801277e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	edd3 7a02 	vldr	s15, [r3, #8]
 8012788:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80129d8 <kalmanCoreUpdateWithFlow+0x2a4>
 801278c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012794:	d503      	bpl.n	801279e <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 8012796:	4b91      	ldr	r3, [pc, #580]	@ (80129dc <kalmanCoreUpdateWithFlow+0x2a8>)
 8012798:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801279c:	e003      	b.n	80127a6 <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	689b      	ldr	r3, [r3, #8]
 80127a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 80127a6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80127aa:	2224      	movs	r2, #36	@ 0x24
 80127ac:	2100      	movs	r1, #0
 80127ae:	4618      	mov	r0, r3
 80127b0:	f006 f938 	bl	8018a24 <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 80127b4:	2301      	movs	r3, #1
 80127b6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80127ba:	2309      	movs	r3, #9
 80127bc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80127c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80127c4:	647b      	str	r3, [r7, #68]	@ 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	ed93 7a05 	vldr	s14, [r3, #20]
 80127cc:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80127d0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80127d4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80127d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80127e2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80127e6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80127ea:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80127ee:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80127f2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80127f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80127fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127fe:	4b78      	ldr	r3, [pc, #480]	@ (80129e0 <kalmanCoreUpdateWithFlow+0x2ac>)
 8012800:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	edd3 7a01 	vldr	s15, [r3, #4]
 801280a:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80129d8 <kalmanCoreUpdateWithFlow+0x2a4>
 801280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012812:	4b74      	ldr	r3, [pc, #464]	@ (80129e4 <kalmanCoreUpdateWithFlow+0x2b0>)
 8012814:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 8012818:	68bb      	ldr	r3, [r7, #8]
 801281a:	ed93 7a05 	vldr	s14, [r3, #20]
 801281e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012822:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012826:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801282a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8012834:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8012838:	ee26 6aa7 	vmul.f32	s12, s13, s15
 801283c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012840:	eef1 6a67 	vneg.f32	s13, s15
 8012844:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012848:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801284c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012854:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8012858:	68bb      	ldr	r3, [r7, #8]
 801285a:	ed93 7a05 	vldr	s14, [r3, #20]
 801285e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8012862:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012866:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801286a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8012874:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8012878:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801287c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012880:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 8012884:	4b57      	ldr	r3, [pc, #348]	@ (80129e4 <kalmanCoreUpdateWithFlow+0x2b0>)
 8012886:	ed93 7a00 	vldr	s14, [r3]
 801288a:	4b55      	ldr	r3, [pc, #340]	@ (80129e0 <kalmanCoreUpdateWithFlow+0x2ac>)
 801288c:	edd3 7a00 	vldr	s15, [r3]
 8012890:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	edd3 7a03 	vldr	s15, [r3, #12]
 801289a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80129d8 <kalmanCoreUpdateWithFlow+0x2a4>
 801289e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80128a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80128a6:	eef0 0a67 	vmov.f32	s1, s15
 80128aa:	eeb0 0a47 	vmov.f32	s0, s14
 80128ae:	4619      	mov	r1, r3
 80128b0:	68f8      	ldr	r0, [r7, #12]
 80128b2:	f7fc fc35 	bl	800f120 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 80128b6:	f107 031c 	add.w	r3, r7, #28
 80128ba:	2224      	movs	r2, #36	@ 0x24
 80128bc:	2100      	movs	r1, #0
 80128be:	4618      	mov	r0, r3
 80128c0:	f006 f8b0 	bl	8018a24 <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 80128c4:	2301      	movs	r3, #1
 80128c6:	82bb      	strh	r3, [r7, #20]
 80128c8:	2309      	movs	r3, #9
 80128ca:	82fb      	strh	r3, [r7, #22]
 80128cc:	f107 031c 	add.w	r3, r7, #28
 80128d0:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	ed93 7a05 	vldr	s14, [r3, #20]
 80128d8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80128dc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80128e0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80128e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80128ee:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80128f2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80128f6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80128fa:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80128fe:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8012902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012906:	ee67 7a27 	vmul.f32	s15, s14, s15
 801290a:	4b37      	ldr	r3, [pc, #220]	@ (80129e8 <kalmanCoreUpdateWithFlow+0x2b4>)
 801290c:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	edd3 7a02 	vldr	s15, [r3, #8]
 8012916:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80129d8 <kalmanCoreUpdateWithFlow+0x2a4>
 801291a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801291e:	4b33      	ldr	r3, [pc, #204]	@ (80129ec <kalmanCoreUpdateWithFlow+0x2b8>)
 8012920:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	ed93 7a05 	vldr	s14, [r3, #20]
 801292a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801292e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012932:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8012936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8012940:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8012944:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8012948:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 801294c:	eef1 6a67 	vneg.f32	s13, s15
 8012950:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012954:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8012958:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012960:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8012964:	68bb      	ldr	r3, [r7, #8]
 8012966:	ed93 7a05 	vldr	s14, [r3, #20]
 801296a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801296e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012972:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8012976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8012980:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8012984:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012988:	ee67 7a27 	vmul.f32	s15, s14, s15
 801298c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 8012990:	4b16      	ldr	r3, [pc, #88]	@ (80129ec <kalmanCoreUpdateWithFlow+0x2b8>)
 8012992:	ed93 7a00 	vldr	s14, [r3]
 8012996:	4b14      	ldr	r3, [pc, #80]	@ (80129e8 <kalmanCoreUpdateWithFlow+0x2b4>)
 8012998:	edd3 7a00 	vldr	s15, [r3]
 801299c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	edd3 7a04 	vldr	s15, [r3, #16]
 80129a6:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80129d8 <kalmanCoreUpdateWithFlow+0x2a4>
 80129aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129ae:	f107 0314 	add.w	r3, r7, #20
 80129b2:	eef0 0a67 	vmov.f32	s1, s15
 80129b6:	eeb0 0a47 	vmov.f32	s0, s14
 80129ba:	4619      	mov	r1, r3
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f7fc fbaf 	bl	800f120 <kalmanCoreScalarUpdate>
}
 80129c2:	bf00      	nop
 80129c4:	3788      	adds	r7, #136	@ 0x88
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	420c0000 	.word	0x420c0000
 80129d0:	3f377c46 	.word	0x3f377c46
 80129d4:	3c8efa35 	.word	0x3c8efa35
 80129d8:	3dcccccd 	.word	0x3dcccccd
 80129dc:	3dcccccd 	.word	0x3dcccccd
 80129e0:	2000a3fc 	.word	0x2000a3fc
 80129e4:	2000a404 	.word	0x2000a404
 80129e8:	2000a400 	.word	0x2000a400
 80129ec:	2000a408 	.word	0x2000a408

080129f0 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 80129f0:	b480      	push	{r7}
 80129f2:	b08f      	sub	sp, #60	@ 0x3c
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	ed87 0a07 	vstr	s0, [r7, #28]
 80129fa:	edc7 0a06 	vstr	s1, [r7, #24]
 80129fe:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	623b      	str	r3, [r7, #32]
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	627b      	str	r3, [r7, #36]	@ 0x24
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	return v;
 8012a0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8012a12:	f107 0220 	add.w	r2, r7, #32
 8012a16:	ca07      	ldmia	r2, {r0, r1, r2}
 8012a18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8012a1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012a22:	ee06 1a90 	vmov	s13, r1
 8012a26:	ee07 2a10 	vmov	s14, r2
 8012a2a:	ee07 3a90 	vmov	s15, r3
}
 8012a2e:	eeb0 0a66 	vmov.f32	s0, s13
 8012a32:	eef0 0a47 	vmov.f32	s1, s14
 8012a36:	eeb0 1a67 	vmov.f32	s2, s15
 8012a3a:	373c      	adds	r7, #60	@ 0x3c
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b08c      	sub	sp, #48	@ 0x30
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	ed87 0a07 	vstr	s0, [r7, #28]
 8012a4e:	eef0 6a60 	vmov.f32	s13, s1
 8012a52:	eeb0 7a41 	vmov.f32	s14, s2
 8012a56:	eef0 7a61 	vmov.f32	s15, s3
 8012a5a:	edc7 6a04 	vstr	s13, [r7, #16]
 8012a5e:	ed87 7a05 	vstr	s14, [r7, #20]
 8012a62:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 8012a66:	ed97 7a04 	vldr	s14, [r7, #16]
 8012a6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a6e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8012a72:	ed97 7a05 	vldr	s14, [r7, #20]
 8012a76:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a7a:	ee27 6a27 	vmul.f32	s12, s14, s15
 8012a7e:	ed97 7a06 	vldr	s14, [r7, #24]
 8012a82:	edd7 7a07 	vldr	s15, [r7, #28]
 8012a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a8a:	eeb0 1a67 	vmov.f32	s2, s15
 8012a8e:	eef0 0a46 	vmov.f32	s1, s12
 8012a92:	eeb0 0a66 	vmov.f32	s0, s13
 8012a96:	f7ff ffab 	bl	80129f0 <mkvec>
 8012a9a:	eef0 6a40 	vmov.f32	s13, s0
 8012a9e:	eeb0 7a60 	vmov.f32	s14, s1
 8012aa2:	eef0 7a41 	vmov.f32	s15, s2
 8012aa6:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8012aaa:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8012aae:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8012ab2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012ab4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab8:	ee06 1a90 	vmov	s13, r1
 8012abc:	ee07 2a10 	vmov	s14, r2
 8012ac0:	ee07 3a90 	vmov	s15, r3
}
 8012ac4:	eeb0 0a66 	vmov.f32	s0, s13
 8012ac8:	eef0 0a47 	vmov.f32	s1, s14
 8012acc:	eeb0 1a67 	vmov.f32	s2, s15
 8012ad0:	3730      	adds	r7, #48	@ 0x30
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 8012ad6:	b490      	push	{r4, r7}
 8012ad8:	b090      	sub	sp, #64	@ 0x40
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	ed87 0a07 	vstr	s0, [r7, #28]
 8012ae0:	edc7 0a06 	vstr	s1, [r7, #24]
 8012ae4:	ed87 1a05 	vstr	s2, [r7, #20]
 8012ae8:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 8012aec:	69fb      	ldr	r3, [r7, #28]
 8012aee:	623b      	str	r3, [r7, #32]
 8012af0:	69bb      	ldr	r3, [r7, #24]
 8012af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012af4:	697b      	ldr	r3, [r7, #20]
 8012af6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012af8:	693b      	ldr	r3, [r7, #16]
 8012afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return q;
 8012afc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8012b00:	f107 0320 	add.w	r3, r7, #32
 8012b04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012b06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012b0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012b0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012b0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012b12:	ee06 0a10 	vmov	s12, r0
 8012b16:	ee06 1a90 	vmov	s13, r1
 8012b1a:	ee07 2a10 	vmov	s14, r2
 8012b1e:	ee07 3a90 	vmov	s15, r3
}
 8012b22:	eeb0 0a46 	vmov.f32	s0, s12
 8012b26:	eef0 0a66 	vmov.f32	s1, s13
 8012b2a:	eeb0 1a47 	vmov.f32	s2, s14
 8012b2e:	eef0 1a67 	vmov.f32	s3, s15
 8012b32:	3740      	adds	r7, #64	@ 0x40
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bc90      	pop	{r4, r7}
 8012b38:	4770      	bx	lr

08012b3a <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 8012b3a:	b580      	push	{r7, lr}
 8012b3c:	b08c      	sub	sp, #48	@ 0x30
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	eeb0 6a40 	vmov.f32	s12, s0
 8012b44:	eef0 6a60 	vmov.f32	s13, s1
 8012b48:	eeb0 7a41 	vmov.f32	s14, s2
 8012b4c:	eef0 7a61 	vmov.f32	s15, s3
 8012b50:	ed87 6a04 	vstr	s12, [r7, #16]
 8012b54:	edc7 6a05 	vstr	s13, [r7, #20]
 8012b58:	ed87 7a06 	vstr	s14, [r7, #24]
 8012b5c:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 8012b60:	edd7 7a04 	vldr	s15, [r7, #16]
 8012b64:	ed97 7a05 	vldr	s14, [r7, #20]
 8012b68:	edd7 6a06 	vldr	s13, [r7, #24]
 8012b6c:	eeb0 1a66 	vmov.f32	s2, s13
 8012b70:	eef0 0a47 	vmov.f32	s1, s14
 8012b74:	eeb0 0a67 	vmov.f32	s0, s15
 8012b78:	f7ff ff3a 	bl	80129f0 <mkvec>
 8012b7c:	eef0 6a40 	vmov.f32	s13, s0
 8012b80:	eeb0 7a60 	vmov.f32	s14, s1
 8012b84:	eef0 7a41 	vmov.f32	s15, s2
 8012b88:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8012b8c:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8012b90:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8012b94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9a:	ee06 1a90 	vmov	s13, r1
 8012b9e:	ee07 2a10 	vmov	s14, r2
 8012ba2:	ee07 3a90 	vmov	s15, r3
}
 8012ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8012baa:	eef0 0a47 	vmov.f32	s1, s14
 8012bae:	eeb0 1a67 	vmov.f32	s2, s15
 8012bb2:	3730      	adds	r7, #48	@ 0x30
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b094      	sub	sp, #80	@ 0x50
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	eeb0 4a40 	vmov.f32	s8, s0
 8012bc2:	eef0 4a60 	vmov.f32	s9, s1
 8012bc6:	eeb0 5a41 	vmov.f32	s10, s2
 8012bca:	eef0 5a61 	vmov.f32	s11, s3
 8012bce:	eeb0 6a42 	vmov.f32	s12, s4
 8012bd2:	eef0 6a62 	vmov.f32	s13, s5
 8012bd6:	eeb0 7a43 	vmov.f32	s14, s6
 8012bda:	eef0 7a63 	vmov.f32	s15, s7
 8012bde:	ed87 4a08 	vstr	s8, [r7, #32]
 8012be2:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 8012be6:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 8012bea:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 8012bee:	ed87 6a04 	vstr	s12, [r7, #16]
 8012bf2:	edc7 6a05 	vstr	s13, [r7, #20]
 8012bf6:	ed87 7a06 	vstr	s14, [r7, #24]
 8012bfa:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 8012bfe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8012c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8012c06:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c0a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8012c0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c1a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8012c1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012c22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c2a:	edd7 6a08 	vldr	s13, [r7, #32]
 8012c2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8012c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c3a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 8012c3e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8012c42:	eeb1 7a67 	vneg.f32	s14, s15
 8012c46:	edd7 7a04 	vldr	s15, [r7, #16]
 8012c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c4e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8012c52:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c5e:	edd7 6a08 	vldr	s13, [r7, #32]
 8012c62:	edd7 7a06 	vldr	s15, [r7, #24]
 8012c66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c6e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8012c72:	edd7 7a07 	vldr	s15, [r7, #28]
 8012c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c7e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 8012c82:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8012c86:	edd7 7a04 	vldr	s15, [r7, #16]
 8012c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012c8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8012c92:	edd7 7a05 	vldr	s15, [r7, #20]
 8012c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012c9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012c9e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8012ca2:	edd7 7a06 	vldr	s15, [r7, #24]
 8012ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012caa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012cae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8012cb2:	edd7 7a07 	vldr	s15, [r7, #28]
 8012cb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012cbe:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 8012cc2:	edd7 7a08 	vldr	s15, [r7, #32]
 8012cc6:	eeb1 7a67 	vneg.f32	s14, s15
 8012cca:	edd7 7a04 	vldr	s15, [r7, #16]
 8012cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8012cd2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8012cd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8012cda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012ce2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8012ce6:	edd7 7a06 	vldr	s15, [r7, #24]
 8012cea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8012cf2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8012cf6:	edd7 7a07 	vldr	s15, [r7, #28]
 8012cfa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8012cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012d02:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	return mkquat(x, y, z, w);
 8012d06:	edd7 1a10 	vldr	s3, [r7, #64]	@ 0x40
 8012d0a:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 8012d0e:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 8012d12:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8012d16:	f7ff fede 	bl	8012ad6 <mkquat>
 8012d1a:	eeb0 6a40 	vmov.f32	s12, s0
 8012d1e:	eef0 6a60 	vmov.f32	s13, s1
 8012d22:	eeb0 7a41 	vmov.f32	s14, s2
 8012d26:	eef0 7a61 	vmov.f32	s15, s3
 8012d2a:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 8012d2e:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8012d32:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8012d36:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 8012d3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012d3c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8012d3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012d42:	ee06 0a10 	vmov	s12, r0
 8012d46:	ee06 1a90 	vmov	s13, r1
 8012d4a:	ee07 2a10 	vmov	s14, r2
 8012d4e:	ee07 3a90 	vmov	s15, r3
}
 8012d52:	eeb0 0a46 	vmov.f32	s0, s12
 8012d56:	eef0 0a66 	vmov.f32	s1, s13
 8012d5a:	eeb0 1a47 	vmov.f32	s2, s14
 8012d5e:	eef0 1a67 	vmov.f32	s3, s15
 8012d62:	3750      	adds	r7, #80	@ 0x50
 8012d64:	46bd      	mov	sp, r7
 8012d66:	bd80      	pop	{r7, pc}

08012d68 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 8012d68:	b580      	push	{r7, lr}
 8012d6a:	b08c      	sub	sp, #48	@ 0x30
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	eeb0 6a40 	vmov.f32	s12, s0
 8012d72:	eef0 6a60 	vmov.f32	s13, s1
 8012d76:	eeb0 7a41 	vmov.f32	s14, s2
 8012d7a:	eef0 7a61 	vmov.f32	s15, s3
 8012d7e:	ed87 6a04 	vstr	s12, [r7, #16]
 8012d82:	edc7 6a05 	vstr	s13, [r7, #20]
 8012d86:	ed87 7a06 	vstr	s14, [r7, #24]
 8012d8a:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 8012d8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8012d92:	eeb1 7a67 	vneg.f32	s14, s15
 8012d96:	edd7 7a05 	vldr	s15, [r7, #20]
 8012d9a:	eef1 6a67 	vneg.f32	s13, s15
 8012d9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8012da2:	eef1 7a67 	vneg.f32	s15, s15
 8012da6:	ed97 6a07 	vldr	s12, [r7, #28]
 8012daa:	eef0 1a46 	vmov.f32	s3, s12
 8012dae:	eeb0 1a67 	vmov.f32	s2, s15
 8012db2:	eef0 0a66 	vmov.f32	s1, s13
 8012db6:	eeb0 0a47 	vmov.f32	s0, s14
 8012dba:	f7ff fe8c 	bl	8012ad6 <mkquat>
 8012dbe:	eeb0 6a40 	vmov.f32	s12, s0
 8012dc2:	eef0 6a60 	vmov.f32	s13, s1
 8012dc6:	eeb0 7a41 	vmov.f32	s14, s2
 8012dca:	eef0 7a61 	vmov.f32	s15, s3
 8012dce:	ed87 6a08 	vstr	s12, [r7, #32]
 8012dd2:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8012dd6:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8012dda:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8012dde:	6a38      	ldr	r0, [r7, #32]
 8012de0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012de6:	ee06 0a10 	vmov	s12, r0
 8012dea:	ee06 1a90 	vmov	s13, r1
 8012dee:	ee07 2a10 	vmov	s14, r2
 8012df2:	ee07 3a90 	vmov	s15, r3
}
 8012df6:	eeb0 0a46 	vmov.f32	s0, s12
 8012dfa:	eef0 0a66 	vmov.f32	s1, s13
 8012dfe:	eeb0 1a47 	vmov.f32	s2, s14
 8012e02:	eef0 1a67 	vmov.f32	s3, s15
 8012e06:	3730      	adds	r7, #48	@ 0x30
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	ed2d 8b02 	vpush	{d8}
 8012e12:	b0a6      	sub	sp, #152	@ 0x98
 8012e14:	af00      	add	r7, sp, #0
 8012e16:	6078      	str	r0, [r7, #4]
 8012e18:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012e20:	e038      	b.n	8012e94 <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 8012e22:	f107 0308 	add.w	r3, r7, #8
 8012e26:	2224      	movs	r2, #36	@ 0x24
 8012e28:	2100      	movs	r1, #0
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f005 fdfa 	bl	8018a24 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8012e30:	2301      	movs	r3, #1
 8012e32:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8012e34:	2309      	movs	r3, #9
 8012e36:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012e38:	f107 0308 	add.w	r3, r7, #8
 8012e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
    h[KC_STATE_X+i] = 1;
 8012e3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e42:	009b      	lsls	r3, r3, #2
 8012e44:	3398      	adds	r3, #152	@ 0x98
 8012e46:	443b      	add	r3, r7
 8012e48:	3b90      	subs	r3, #144	@ 0x90
 8012e4a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8012e4e:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 8012e50:	683a      	ldr	r2, [r7, #0]
 8012e52:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e56:	009b      	lsls	r3, r3, #2
 8012e58:	4413      	add	r3, r2
 8012e5a:	ed93 7a00 	vldr	s14, [r3]
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e64:	009b      	lsls	r3, r3, #2
 8012e66:	4413      	add	r3, r2
 8012e68:	edd3 7a00 	vldr	s15, [r3]
 8012e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8012e70:	683b      	ldr	r3, [r7, #0]
 8012e72:	ed93 7a07 	vldr	s14, [r3, #28]
 8012e76:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8012e7a:	eef0 0a47 	vmov.f32	s1, s14
 8012e7e:	eeb0 0a67 	vmov.f32	s0, s15
 8012e82:	4619      	mov	r1, r3
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f7fc f94b 	bl	800f120 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 8012e8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e8e:	3301      	adds	r3, #1
 8012e90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8012e94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8012e98:	2b02      	cmp	r3, #2
 8012e9a:	ddc2      	ble.n	8012e22 <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8012eb4:	eef0 1a46 	vmov.f32	s3, s12
 8012eb8:	eeb0 1a66 	vmov.f32	s2, s13
 8012ebc:	eef0 0a47 	vmov.f32	s1, s14
 8012ec0:	eeb0 0a67 	vmov.f32	s0, s15
 8012ec4:	f7ff fe07 	bl	8012ad6 <mkquat>
 8012ec8:	eeb0 6a40 	vmov.f32	s12, s0
 8012ecc:	eef0 6a60 	vmov.f32	s13, s1
 8012ed0:	eeb0 7a41 	vmov.f32	s14, s2
 8012ed4:	eef0 7a61 	vmov.f32	s15, s3
 8012ed8:	ed87 6a1a 	vstr	s12, [r7, #104]	@ 0x68
 8012edc:	edc7 6a1b 	vstr	s13, [r7, #108]	@ 0x6c
 8012ee0:	ed87 7a1c 	vstr	s14, [r7, #112]	@ 0x70
 8012ee4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 8012ee8:	683b      	ldr	r3, [r7, #0]
 8012eea:	edd3 7a03 	vldr	s15, [r3, #12]
 8012eee:	683b      	ldr	r3, [r7, #0]
 8012ef0:	ed93 7a04 	vldr	s14, [r3, #16]
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	edd3 6a05 	vldr	s13, [r3, #20]
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	ed93 6a06 	vldr	s12, [r3, #24]
 8012f00:	eef0 1a46 	vmov.f32	s3, s12
 8012f04:	eeb0 1a66 	vmov.f32	s2, s13
 8012f08:	eef0 0a47 	vmov.f32	s1, s14
 8012f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8012f10:	f7ff fde1 	bl	8012ad6 <mkquat>
 8012f14:	eeb0 6a40 	vmov.f32	s12, s0
 8012f18:	eef0 6a60 	vmov.f32	s13, s1
 8012f1c:	eeb0 7a41 	vmov.f32	s14, s2
 8012f20:	eef0 7a61 	vmov.f32	s15, s3
 8012f24:	ed87 6a16 	vstr	s12, [r7, #88]	@ 0x58
 8012f28:	edc7 6a17 	vstr	s13, [r7, #92]	@ 0x5c
 8012f2c:	ed87 7a18 	vstr	s14, [r7, #96]	@ 0x60
 8012f30:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 8012f34:	ed97 6a1a 	vldr	s12, [r7, #104]	@ 0x68
 8012f38:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8012f3c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8012f40:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8012f44:	eeb0 0a46 	vmov.f32	s0, s12
 8012f48:	eef0 0a66 	vmov.f32	s1, s13
 8012f4c:	eeb0 1a47 	vmov.f32	s2, s14
 8012f50:	eef0 1a67 	vmov.f32	s3, s15
 8012f54:	f7ff ff08 	bl	8012d68 <qinv>
 8012f58:	eeb0 6a40 	vmov.f32	s12, s0
 8012f5c:	eef0 6a60 	vmov.f32	s13, s1
 8012f60:	eeb0 7a41 	vmov.f32	s14, s2
 8012f64:	eef0 7a61 	vmov.f32	s15, s3
 8012f68:	ed87 6a1e 	vstr	s12, [r7, #120]	@ 0x78
 8012f6c:	edc7 6a1f 	vstr	s13, [r7, #124]	@ 0x7c
 8012f70:	ed87 7a20 	vstr	s14, [r7, #128]	@ 0x80
 8012f74:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8012f78:	ed97 4a16 	vldr	s8, [r7, #88]	@ 0x58
 8012f7c:	edd7 4a17 	vldr	s9, [r7, #92]	@ 0x5c
 8012f80:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 8012f84:	edd7 5a19 	vldr	s11, [r7, #100]	@ 0x64
 8012f88:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 8012f8c:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8012f90:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8012f94:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8012f98:	eeb0 2a44 	vmov.f32	s4, s8
 8012f9c:	eef0 2a64 	vmov.f32	s5, s9
 8012fa0:	eeb0 3a45 	vmov.f32	s6, s10
 8012fa4:	eef0 3a65 	vmov.f32	s7, s11
 8012fa8:	eeb0 0a46 	vmov.f32	s0, s12
 8012fac:	eef0 0a66 	vmov.f32	s1, s13
 8012fb0:	eeb0 1a47 	vmov.f32	s2, s14
 8012fb4:	eef0 1a67 	vmov.f32	s3, s15
 8012fb8:	f7ff fdfe 	bl	8012bb8 <qqmul>
 8012fbc:	eeb0 6a40 	vmov.f32	s12, s0
 8012fc0:	eef0 6a60 	vmov.f32	s13, s1
 8012fc4:	eeb0 7a41 	vmov.f32	s14, s2
 8012fc8:	eef0 7a61 	vmov.f32	s15, s3
 8012fcc:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 8012fd0:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8012fd4:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8012fd8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 8012fdc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012fe0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8012fe4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8012fe8:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 8012fec:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8012ff0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8012ff4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8012ff8:	eeb0 0a46 	vmov.f32	s0, s12
 8012ffc:	eef0 0a66 	vmov.f32	s1, s13
 8013000:	eeb0 1a47 	vmov.f32	s2, s14
 8013004:	eef0 1a67 	vmov.f32	s3, s15
 8013008:	f7ff fd97 	bl	8012b3a <quatimagpart>
 801300c:	eef0 6a40 	vmov.f32	s13, s0
 8013010:	eeb0 7a60 	vmov.f32	s14, s1
 8013014:	eef0 7a41 	vmov.f32	s15, s2
 8013018:	edc7 6a22 	vstr	s13, [r7, #136]	@ 0x88
 801301c:	ed87 7a23 	vstr	s14, [r7, #140]	@ 0x8c
 8013020:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 8013024:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 8013028:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 801302c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8013030:	eef0 0a66 	vmov.f32	s1, s13
 8013034:	eeb0 1a47 	vmov.f32	s2, s14
 8013038:	eef0 1a67 	vmov.f32	s3, s15
 801303c:	eeb0 0a48 	vmov.f32	s0, s16
 8013040:	f7ff fd00 	bl	8012a44 <vscl>
 8013044:	eef0 6a40 	vmov.f32	s13, s0
 8013048:	eeb0 7a60 	vmov.f32	s14, s1
 801304c:	eef0 7a41 	vmov.f32	s15, s2
 8013050:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 8013054:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8013058:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 801305c:	f107 0308 	add.w	r3, r7, #8
 8013060:	2224      	movs	r2, #36	@ 0x24
 8013062:	2100      	movs	r1, #0
 8013064:	4618      	mov	r0, r3
 8013066:	f005 fcdd 	bl	8018a24 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801306a:	2301      	movs	r3, #1
 801306c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801306e:	2309      	movs	r3, #9
 8013070:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8013072:	f107 0308 	add.w	r3, r7, #8
 8013076:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_D0] = 1;
 8013078:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801307c:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 801307e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8013082:	683b      	ldr	r3, [r7, #0]
 8013084:	ed93 7a08 	vldr	s14, [r3, #32]
 8013088:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801308c:	eef0 0a47 	vmov.f32	s1, s14
 8013090:	eeb0 0a67 	vmov.f32	s0, s15
 8013094:	4619      	mov	r1, r3
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f7fc f842 	bl	800f120 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 801309c:	f04f 0300 	mov.w	r3, #0
 80130a0:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 80130a2:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80130a6:	627b      	str	r3, [r7, #36]	@ 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 80130a8:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	ed93 7a08 	vldr	s14, [r3, #32]
 80130b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80130b6:	eef0 0a47 	vmov.f32	s1, s14
 80130ba:	eeb0 0a67 	vmov.f32	s0, s15
 80130be:	4619      	mov	r1, r3
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f7fc f82d 	bl	800f120 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 80130c6:	f04f 0300 	mov.w	r3, #0
 80130ca:	627b      	str	r3, [r7, #36]	@ 0x24

    h[KC_STATE_D2] = 1;
 80130cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80130d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 80130d2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80130dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80130e0:	eef0 0a47 	vmov.f32	s1, s14
 80130e4:	eeb0 0a67 	vmov.f32	s0, s15
 80130e8:	4619      	mov	r1, r3
 80130ea:	6878      	ldr	r0, [r7, #4]
 80130ec:	f7fc f818 	bl	800f120 <kalmanCoreScalarUpdate>
  }
}
 80130f0:	bf00      	nop
 80130f2:	3798      	adds	r7, #152	@ 0x98
 80130f4:	46bd      	mov	sp, r7
 80130f6:	ecbd 8b02 	vpop	{d8}
 80130fa:	bd80      	pop	{r7, pc}

080130fc <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b08e      	sub	sp, #56	@ 0x38
 8013100:	af00      	add	r7, sp, #0
 8013102:	6078      	str	r0, [r7, #4]
 8013104:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 8013106:	2300      	movs	r3, #0
 8013108:	637b      	str	r3, [r7, #52]	@ 0x34
 801310a:	e033      	b.n	8013174 <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 801310c:	f107 0308 	add.w	r3, r7, #8
 8013110:	2224      	movs	r2, #36	@ 0x24
 8013112:	2100      	movs	r1, #0
 8013114:	4618      	mov	r0, r3
 8013116:	f005 fc85 	bl	8018a24 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801311a:	2301      	movs	r3, #1
 801311c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801311e:	2309      	movs	r3, #9
 8013120:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8013122:	f107 0308 	add.w	r3, r7, #8
 8013126:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_X+i] = 1;
 8013128:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801312a:	009b      	lsls	r3, r3, #2
 801312c:	3338      	adds	r3, #56	@ 0x38
 801312e:	443b      	add	r3, r7
 8013130:	3b30      	subs	r3, #48	@ 0x30
 8013132:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013136:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 8013138:	683a      	ldr	r2, [r7, #0]
 801313a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	4413      	add	r3, r2
 8013140:	ed93 7a00 	vldr	s14, [r3]
 8013144:	687a      	ldr	r2, [r7, #4]
 8013146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013148:	009b      	lsls	r3, r3, #2
 801314a:	4413      	add	r3, r2
 801314c:	edd3 7a00 	vldr	s15, [r3]
 8013150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013154:	683b      	ldr	r3, [r7, #0]
 8013156:	ed93 7a03 	vldr	s14, [r3, #12]
 801315a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801315e:	eef0 0a47 	vmov.f32	s1, s14
 8013162:	eeb0 0a67 	vmov.f32	s0, s15
 8013166:	4619      	mov	r1, r3
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7fb ffd9 	bl	800f120 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 801316e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013170:	3301      	adds	r3, #1
 8013172:	637b      	str	r3, [r7, #52]	@ 0x34
 8013174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013176:	2b02      	cmp	r3, #2
 8013178:	ddc8      	ble.n	801310c <kalmanCoreUpdateWithPosition+0x10>
  }
}
 801317a:	bf00      	nop
 801317c:	bf00      	nop
 801317e:	3738      	adds	r7, #56	@ 0x38
 8013180:	46bd      	mov	sp, r7
 8013182:	bd80      	pop	{r7, pc}
 8013184:	0000      	movs	r0, r0
	...

08013188 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 8013188:	b580      	push	{r7, lr}
 801318a:	ed2d 8b02 	vpush	{d8}
 801318e:	b090      	sub	sp, #64	@ 0x40
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 8013196:	f107 0310 	add.w	r3, r7, #16
 801319a:	2224      	movs	r2, #36	@ 0x24
 801319c:	2100      	movs	r1, #0
 801319e:	4618      	mov	r0, r3
 80131a0:	f005 fc40 	bl	8018a24 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80131a4:	2301      	movs	r3, #1
 80131a6:	813b      	strh	r3, [r7, #8]
 80131a8:	2309      	movs	r3, #9
 80131aa:	817b      	strh	r3, [r7, #10]
 80131ac:	f107 0310 	add.w	r3, r7, #16
 80131b0:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80131b8:	eef0 7ae7 	vabs.f32	s15, s15
 80131bc:	ee17 0a90 	vmov	r0, s15
 80131c0:	f7ed f974 	bl	80004ac <__aeabi_f2d>
 80131c4:	a331      	add	r3, pc, #196	@ (adr r3, 801328c <kalmanCoreUpdateWithTof+0x104>)
 80131c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ca:	f7ed fc57 	bl	8000a7c <__aeabi_dcmpgt>
 80131ce:	4603      	mov	r3, r0
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d100      	bne.n	80131d6 <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 80131d4:	e050      	b.n	8013278 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80131dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80131e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131e4:	dc00      	bgt.n	80131e8 <kalmanCoreUpdateWithTof+0x60>
}
 80131e6:	e047      	b.n	8013278 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 80131ee:	eeb0 0a67 	vmov.f32	s0, s15
 80131f2:	f005 fc6b 	bl	8018acc <acosf>
 80131f6:	eef0 7a40 	vmov.f32	s15, s0
 80131fa:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8013288 <kalmanCoreUpdateWithTof+0x100>
 80131fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013202:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (angle < 0.0f) {
 8013206:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 801320a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801320e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013212:	d502      	bpl.n	801321a <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 8013214:	f04f 0300 	mov.w	r3, #0
 8013218:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	ed93 8a02 	vldr	s16, [r3, #8]
 8013220:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8013224:	f005 fd86 	bl	8018d34 <cosf>
 8013228:	eeb0 7a40 	vmov.f32	s14, s0
 801322c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013230:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float measuredDistance = tof->distance; // [m]
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	637b      	str	r3, [r7, #52]	@ 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 801323a:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 801323e:	f005 fd79 	bl	8018d34 <cosf>
 8013242:	eeb0 7a40 	vmov.f32	s14, s0
 8013246:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801324a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801324e:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 8013252:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8013256:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 801325a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	ed93 7a02 	vldr	s14, [r3, #8]
 8013264:	f107 0308 	add.w	r3, r7, #8
 8013268:	eef0 0a47 	vmov.f32	s1, s14
 801326c:	eeb0 0a67 	vmov.f32	s0, s15
 8013270:	4619      	mov	r1, r3
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7fb ff54 	bl	800f120 <kalmanCoreScalarUpdate>
}
 8013278:	bf00      	nop
 801327a:	3740      	adds	r7, #64	@ 0x40
 801327c:	46bd      	mov	sp, r7
 801327e:	ecbd 8b02 	vpop	{d8}
 8013282:	bd80      	pop	{r7, pc}
 8013284:	f3af 8000 	nop.w
 8013288:	3e060a92 	.word	0x3e060a92
 801328c:	9999999a 	.word	0x9999999a
 8013290:	3fb99999 	.word	0x3fb99999

08013294 <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b08e      	sub	sp, #56	@ 0x38
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 801329e:	f107 0314 	add.w	r3, r7, #20
 80132a2:	2224      	movs	r2, #36	@ 0x24
 80132a4:	2100      	movs	r1, #0
 80132a6:	4618      	mov	r0, r3
 80132a8:	f005 fbbc 	bl	8018a24 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80132ac:	2301      	movs	r3, #1
 80132ae:	81bb      	strh	r3, [r7, #12]
 80132b0:	2309      	movs	r3, #9
 80132b2:	81fb      	strh	r3, [r7, #14]
 80132b4:	f107 0314 	add.w	r3, r7, #20
 80132b8:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 80132ba:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80132be:	637b      	str	r3, [r7, #52]	@ 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	ed93 7a08 	vldr	s14, [r3, #32]
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80132cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80132d0:	683b      	ldr	r3, [r7, #0]
 80132d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80132d6:	f107 030c 	add.w	r3, r7, #12
 80132da:	eef0 0a47 	vmov.f32	s1, s14
 80132de:	eeb0 0a67 	vmov.f32	s0, s15
 80132e2:	4619      	mov	r1, r3
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f7fb ff1b 	bl	800f120 <kalmanCoreScalarUpdate>
}
 80132ea:	bf00      	nop
 80132ec:	3738      	adds	r7, #56	@ 0x38
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}

080132f2 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 80132f2:	b580      	push	{r7, lr}
 80132f4:	b084      	sub	sp, #16
 80132f6:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 80132f8:	2300      	movs	r3, #0
 80132fa:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 80132fc:	1d3b      	adds	r3, r7, #4
 80132fe:	4618      	mov	r0, r3
 8013300:	f000 f8a6 	bl	8013450 <platformGetListOfConfigurations>
 8013304:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	4619      	mov	r1, r3
 801330a:	68f8      	ldr	r0, [r7, #12]
 801330c:	f000 f856 	bl	80133bc <platformInitConfiguration>
 8013310:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d001      	beq.n	801331c <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8013318:	2301      	movs	r3, #1
 801331a:	e002      	b.n	8013322 <platformInit+0x30>
  }

  platformInitHardware();
 801331c:	f000 f8a8 	bl	8013470 <platformInitHardware>
  return 0;
 8013320:	2300      	movs	r3, #0
}
 8013322:	4618      	mov	r0, r3
 8013324:	3710      	adds	r7, #16
 8013326:	46bd      	mov	sp, r7
 8013328:	bd80      	pop	{r7, pc}

0801332a <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 801332a:	b580      	push	{r7, lr}
 801332c:	b086      	sub	sp, #24
 801332e:	af00      	add	r7, sp, #0
 8013330:	6078      	str	r0, [r7, #4]
 8013332:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	2b30      	cmp	r3, #48	@ 0x30
 801333a:	d104      	bne.n	8013346 <platformParseDeviceTypeString+0x1c>
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	3301      	adds	r3, #1
 8013340:	781b      	ldrb	r3, [r3, #0]
 8013342:	2b3b      	cmp	r3, #59	@ 0x3b
 8013344:	d001      	beq.n	801334a <platformParseDeviceTypeString+0x20>
    return 1;
 8013346:	2301      	movs	r3, #1
 8013348:	e034      	b.n	80133b4 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 801334a:	2302      	movs	r3, #2
 801334c:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 801334e:	693b      	ldr	r3, [r7, #16]
 8013350:	3304      	adds	r3, #4
 8013352:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8013354:	2300      	movs	r3, #0
 8013356:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	617b      	str	r3, [r7, #20]
 801335c:	e00e      	b.n	801337c <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	4413      	add	r3, r2
 8013364:	781b      	ldrb	r3, [r3, #0]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d00c      	beq.n	8013384 <platformParseDeviceTypeString+0x5a>
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	4413      	add	r3, r2
 8013370:	781b      	ldrb	r3, [r3, #0]
 8013372:	2b3b      	cmp	r3, #59	@ 0x3b
 8013374:	d006      	beq.n	8013384 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	3301      	adds	r3, #1
 801337a:	617b      	str	r3, [r7, #20]
 801337c:	697a      	ldr	r2, [r7, #20]
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	429a      	cmp	r2, r3
 8013382:	ddec      	ble.n	801335e <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8013384:	697a      	ldr	r2, [r7, #20]
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	429a      	cmp	r2, r3
 801338a:	dd01      	ble.n	8013390 <platformParseDeviceTypeString+0x66>
    return 1;
 801338c:	2301      	movs	r3, #1
 801338e:	e011      	b.n	80133b4 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8013390:	697a      	ldr	r2, [r7, #20]
 8013392:	693b      	ldr	r3, [r7, #16]
 8013394:	1ad3      	subs	r3, r2, r3
 8013396:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	687a      	ldr	r2, [r7, #4]
 801339c:	4413      	add	r3, r2
 801339e:	68ba      	ldr	r2, [r7, #8]
 80133a0:	4619      	mov	r1, r3
 80133a2:	6838      	ldr	r0, [r7, #0]
 80133a4:	f005 fb84 	bl	8018ab0 <memcpy>
  deviceType[length] = '\0';
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	683a      	ldr	r2, [r7, #0]
 80133ac:	4413      	add	r3, r2
 80133ae:	2200      	movs	r2, #0
 80133b0:	701a      	strb	r2, [r3, #0]
  return 0;
 80133b2:	2300      	movs	r3, #0
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3718      	adds	r7, #24
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}

080133bc <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 80133bc:	b580      	push	{r7, lr}
 80133be:	b090      	sub	sp, #64	@ 0x40
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 80133c6:	f107 0314 	add.w	r3, r7, #20
 80133ca:	4618      	mov	r0, r3
 80133cc:	f000 f866 	bl	801349c <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 80133d0:	f107 020c 	add.w	r2, r7, #12
 80133d4:	f107 0314 	add.w	r3, r7, #20
 80133d8:	4611      	mov	r1, r2
 80133da:	4618      	mov	r0, r3
 80133dc:	f7ff ffa5 	bl	801332a <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 80133e0:	2300      	movs	r3, #0
 80133e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80133e4:	e01a      	b.n	801341c <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 80133e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80133e8:	4613      	mov	r3, r2
 80133ea:	00db      	lsls	r3, r3, #3
 80133ec:	4413      	add	r3, r2
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	4413      	add	r3, r2
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	4413      	add	r3, r2
 80133f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 80133f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80133fa:	f107 020c 	add.w	r2, r7, #12
 80133fe:	4611      	mov	r1, r2
 8013400:	4618      	mov	r0, r3
 8013402:	f7ec fee5 	bl	80001d0 <strcmp>
 8013406:	4603      	mov	r3, r0
 8013408:	2b00      	cmp	r3, #0
 801340a:	d104      	bne.n	8013416 <platformInitConfiguration+0x5a>
      active_config = config;
 801340c:	4a08      	ldr	r2, [pc, #32]	@ (8013430 <platformInitConfiguration+0x74>)
 801340e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013410:	6013      	str	r3, [r2, #0]
      return 0;
 8013412:	2300      	movs	r3, #0
 8013414:	e007      	b.n	8013426 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8013416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013418:	3301      	adds	r3, #1
 801341a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801341c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	429a      	cmp	r2, r3
 8013422:	dbe0      	blt.n	80133e6 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8013424:	2301      	movs	r3, #1
}
 8013426:	4618      	mov	r0, r3
 8013428:	3740      	adds	r7, #64	@ 0x40
 801342a:	46bd      	mov	sp, r7
 801342c:	bd80      	pop	{r7, pc}
 801342e:	bf00      	nop
 8013430:	2000a40c 	.word	0x2000a40c

08013434 <platformConfigGetSensorImplementation>:

const char* platformConfigGetDeviceTypeName() {
  return active_config->deviceTypeName;
}

SensorImplementation_t platformConfigGetSensorImplementation() {
 8013434:	b480      	push	{r7}
 8013436:	af00      	add	r7, sp, #0
  return active_config->sensorImplementation;
 8013438:	4b04      	ldr	r3, [pc, #16]	@ (801344c <platformConfigGetSensorImplementation+0x18>)
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
}
 8013440:	4618      	mov	r0, r3
 8013442:	46bd      	mov	sp, r7
 8013444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013448:	4770      	bx	lr
 801344a:	bf00      	nop
 801344c:	2000a40c 	.word	0x2000a40c

08013450 <platformGetListOfConfigurations>:
//    .motorMap = motorMapCF21Brushless,
//  },
//#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8013450:	b480      	push	{r7}
 8013452:	b083      	sub	sp, #12
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2201      	movs	r2, #1
 801345c:	601a      	str	r2, [r3, #0]
  return configs;
 801345e:	4b03      	ldr	r3, [pc, #12]	@ (801346c <platformGetListOfConfigurations+0x1c>)
}
 8013460:	4618      	mov	r0, r3
 8013462:	370c      	adds	r7, #12
 8013464:	46bd      	mov	sp, r7
 8013466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346a:	4770      	bx	lr
 801346c:	20000140 	.word	0x20000140

08013470 <platformInitHardware>:

void platformInitHardware() {
 8013470:	b580      	push	{r7, lr}
 8013472:	af00      	add	r7, sp, #0
  //Low level init: Clock and Interrupt controller
  nvicInit();
 8013474:	f7f7 f9da 	bl	800a82c <nvicInit>

  //EXTI interrupts
//  extiInit();
}
 8013478:	bf00      	nop
 801347a:	bd80      	pop	{r7, pc}

0801347c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;DG20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 801347c:	b480      	push	{r7}
 801347e:	b083      	sub	sp, #12
 8013480:	af00      	add	r7, sp, #0
 8013482:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 801348a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 801348e:	015b      	lsls	r3, r3, #5
}
 8013490:	4618      	mov	r0, r3
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr

0801349c <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 801349c:	b580      	push	{r7, lr}
 801349e:	b086      	sub	sp, #24
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
  char* block = 0;
 80134a4:	2300      	movs	r3, #0
 80134a6:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80134a8:	2300      	movs	r3, #0
 80134aa:	613b      	str	r3, [r7, #16]
 80134ac:	e00d      	b.n	80134ca <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 80134ae:	6938      	ldr	r0, [r7, #16]
 80134b0:	f7ff ffe4 	bl	801347c <getAddressOfOtpMemoryBlock>
 80134b4:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	781b      	ldrb	r3, [r3, #0]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d002      	beq.n	80134c4 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	617b      	str	r3, [r7, #20]
      break;
 80134c2:	e005      	b.n	80134d0 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 80134c4:	693b      	ldr	r3, [r7, #16]
 80134c6:	3301      	adds	r3, #1
 80134c8:	613b      	str	r3, [r7, #16]
 80134ca:	693b      	ldr	r3, [r7, #16]
 80134cc:	2b0f      	cmp	r3, #15
 80134ce:	ddee      	ble.n	80134ae <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 80134d0:	697b      	ldr	r3, [r7, #20]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d003      	beq.n	80134de <platformGetDeviceTypeString+0x42>
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	2bff      	cmp	r3, #255	@ 0xff
 80134dc:	d101      	bne.n	80134e2 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 80134de:	4b07      	ldr	r3, [pc, #28]	@ (80134fc <platformGetDeviceTypeString+0x60>)
 80134e0:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 80134e2:	2220      	movs	r2, #32
 80134e4:	6979      	ldr	r1, [r7, #20]
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f005 faa4 	bl	8018a34 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	3320      	adds	r3, #32
 80134f0:	2200      	movs	r2, #0
 80134f2:	701a      	strb	r2, [r3, #0]
}
 80134f4:	bf00      	nop
 80134f6:	3718      	adds	r7, #24
 80134f8:	46bd      	mov	sp, r7
 80134fa:	bd80      	pop	{r7, pc}
 80134fc:	0801b948 	.word	0x0801b948

08013500 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8013500:	b580      	push	{r7, lr}
 8013502:	b086      	sub	sp, #24
 8013504:	af00      	add	r7, sp, #0
 8013506:	60f8      	str	r0, [r7, #12]
 8013508:	60b9      	str	r1, [r7, #8]
 801350a:	607a      	str	r2, [r7, #4]
        __asm volatile
 801350c:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8013510:	f383 8811 	msr	BASEPRI, r3
 8013514:	f3bf 8f6f 	isb	sy
 8013518:	f3bf 8f4f 	dsb	sy
 801351c:	617b      	str	r3, [r7, #20]
    }
 801351e:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8013520:	6879      	ldr	r1, [r7, #4]
 8013522:	68b8      	ldr	r0, [r7, #8]
 8013524:	f000 f804 	bl	8013530 <storeAssertFileData>
//  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
//  {
//    // Only reset if debugger is not connected
//    NVIC_SystemReset();
//  }
}
 8013528:	bf00      	nop
 801352a:	3718      	adds	r7, #24
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}

08013530 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8013530:	b480      	push	{r7}
 8013532:	b083      	sub	sp, #12
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 801353a:	4b0b      	ldr	r3, [pc, #44]	@ (8013568 <storeAssertFileData+0x38>)
 801353c:	4a0b      	ldr	r2, [pc, #44]	@ (801356c <storeAssertFileData+0x3c>)
 801353e:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8013540:	4b09      	ldr	r3, [pc, #36]	@ (8013568 <storeAssertFileData+0x38>)
 8013542:	2201      	movs	r2, #1
 8013544:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8013546:	4b08      	ldr	r3, [pc, #32]	@ (8013568 <storeAssertFileData+0x38>)
 8013548:	791a      	ldrb	r2, [r3, #4]
 801354a:	4b09      	ldr	r3, [pc, #36]	@ (8013570 <storeAssertFileData+0x40>)
 801354c:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 801354e:	4a06      	ldr	r2, [pc, #24]	@ (8013568 <storeAssertFileData+0x38>)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8013554:	4a04      	ldr	r2, [pc, #16]	@ (8013568 <storeAssertFileData+0x38>)
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	60d3      	str	r3, [r2, #12]
}
 801355a:	bf00      	nop
 801355c:	370c      	adds	r7, #12
 801355e:	46bd      	mov	sp, r7
 8013560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013564:	4770      	bx	lr
 8013566:	bf00      	nop
 8013568:	200001d0 	.word	0x200001d0
 801356c:	2f8a001f 	.word	0x2f8a001f
 8013570:	2000a410 	.word	0x2000a410

08013574 <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	ed87 0a02 	vstr	s0, [r7, #8]
 8013580:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d00e      	beq.n	80135a8 <lpf2pInit+0x34>
 801358a:	edd7 7a01 	vldr	s15, [r7, #4]
 801358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013596:	d907      	bls.n	80135a8 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8013598:	edd7 0a01 	vldr	s1, [r7, #4]
 801359c:	ed97 0a02 	vldr	s0, [r7, #8]
 80135a0:	68f8      	ldr	r0, [r7, #12]
 80135a2:	f000 f805 	bl	80135b0 <lpf2pSetCutoffFreq>
 80135a6:	e000      	b.n	80135aa <lpf2pInit+0x36>
    return;
 80135a8:	bf00      	nop
}
 80135aa:	3710      	adds	r7, #16
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}

080135b0 <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 80135b0:	b580      	push	{r7, lr}
 80135b2:	b088      	sub	sp, #32
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	60f8      	str	r0, [r7, #12]
 80135b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80135bc:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 80135c0:	edd7 6a02 	vldr	s13, [r7, #8]
 80135c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80135c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80135cc:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 80135d0:	eddf 6a34 	vldr	s13, [pc, #208]	@ 80136a4 <lpf2pSetCutoffFreq+0xf4>
 80135d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80135d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80135dc:	eeb0 0a47 	vmov.f32	s0, s14
 80135e0:	f005 fc3a 	bl	8018e58 <tanf>
 80135e4:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 80135e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80135ec:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80136a8 <lpf2pSetCutoffFreq+0xf8>
 80135f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80135f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80135f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80135fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8013600:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013608:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 801360c:	edd7 7a06 	vldr	s15, [r7, #24]
 8013610:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013614:	ed97 7a05 	vldr	s14, [r7, #20]
 8013618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	edd3 7a02 	vldr	s15, [r3, #8]
 8013628:	ee77 7aa7 	vadd.f32	s15, s15, s15
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	689a      	ldr	r2, [r3, #8]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 801363a:	edd7 7a06 	vldr	s15, [r7, #24]
 801363e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013642:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801364a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 801364e:	ed97 7a05 	vldr	s14, [r7, #20]
 8013652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 801365c:	edd7 7a06 	vldr	s15, [r7, #24]
 8013660:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80136a8 <lpf2pSetCutoffFreq+0xf8>
 8013664:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013668:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801366c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013670:	edd7 7a06 	vldr	s15, [r7, #24]
 8013674:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8013678:	ee77 6a27 	vadd.f32	s13, s14, s15
 801367c:	ed97 7a05 	vldr	s14, [r7, #20]
 8013680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	f04f 0200 	mov.w	r2, #0
 8013690:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	f04f 0200 	mov.w	r2, #0
 8013698:	619a      	str	r2, [r3, #24]
}
 801369a:	bf00      	nop
 801369c:	3720      	adds	r7, #32
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}
 80136a2:	bf00      	nop
 80136a4:	40490fdb 	.word	0x40490fdb
 80136a8:	3fb504f3 	.word	0x3fb504f3

080136ac <lpf2pApply>:

float lpf2pApply(lpf2pData* lpfData, float sample)
{
 80136ac:	b480      	push	{r7}
 80136ae:	b085      	sub	sp, #20
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	ed87 0a00 	vstr	s0, [r7]
  float delay_element_0 = sample - lpfData->delay_element_1 * lpfData->a1 - lpfData->delay_element_2 * lpfData->a2;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	edd3 7a00 	vldr	s15, [r3]
 80136c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80136c8:	ed97 7a00 	vldr	s14, [r7]
 80136cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	edd3 6a06 	vldr	s13, [r3, #24]
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80136dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80136e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80136e4:	edc7 7a03 	vstr	s15, [r7, #12]
  if (!isfinite(delay_element_0)) {
 80136e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80136ec:	eef0 7ae7 	vabs.f32	s15, s15
 80136f0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8013760 <lpf2pApply+0xb4>
 80136f4:	eef4 7a47 	vcmp.f32	s15, s14
 80136f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136fc:	d901      	bls.n	8013702 <lpf2pApply+0x56>
    // don't allow bad values to propigate via the filter
    delay_element_0 = sample;
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	60fb      	str	r3, [r7, #12]
  }

  float output = delay_element_0 * lpfData->b0 + lpfData->delay_element_1 * lpfData->b1 + lpfData->delay_element_2 * lpfData->b2;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	ed93 7a02 	vldr	s14, [r3, #8]
 8013708:	edd7 7a03 	vldr	s15, [r7, #12]
 801370c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	edd3 6a05 	vldr	s13, [r3, #20]
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	edd3 7a03 	vldr	s15, [r3, #12]
 801371c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013720:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	edd3 6a06 	vldr	s13, [r3, #24]
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	edd3 7a04 	vldr	s15, [r3, #16]
 8013730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8013734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013738:	edc7 7a02 	vstr	s15, [r7, #8]

  lpfData->delay_element_2 = lpfData->delay_element_1;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	695a      	ldr	r2, [r3, #20]
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	619a      	str	r2, [r3, #24]
  lpfData->delay_element_1 = delay_element_0;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	68fa      	ldr	r2, [r7, #12]
 8013748:	615a      	str	r2, [r3, #20]
  return output;
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	ee07 3a90 	vmov	s15, r3
}
 8013750:	eeb0 0a67 	vmov.f32	s0, s15
 8013754:	3714      	adds	r7, #20
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	7f7fffff 	.word	0x7f7fffff

08013764 <deadband>:
{
  return fminf(maxVal, fmaxf(minVal,value));
}

float deadband(float value, const float threshold)
{
 8013764:	b480      	push	{r7}
 8013766:	b083      	sub	sp, #12
 8013768:	af00      	add	r7, sp, #0
 801376a:	ed87 0a01 	vstr	s0, [r7, #4]
 801376e:	edc7 0a00 	vstr	s1, [r7]
  if (fabsf(value) < threshold)
 8013772:	edd7 7a01 	vldr	s15, [r7, #4]
 8013776:	eef0 7ae7 	vabs.f32	s15, s15
 801377a:	ed97 7a00 	vldr	s14, [r7]
 801377e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013786:	dd03      	ble.n	8013790 <deadband+0x2c>
  {
    value = 0;
 8013788:	f04f 0300 	mov.w	r3, #0
 801378c:	607b      	str	r3, [r7, #4]
 801378e:	e01e      	b.n	80137ce <deadband+0x6a>
  }
  else if (value > 0)
 8013790:	edd7 7a01 	vldr	s15, [r7, #4]
 8013794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8013798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379c:	dd08      	ble.n	80137b0 <deadband+0x4c>
  {
    value -= threshold;
 801379e:	ed97 7a01 	vldr	s14, [r7, #4]
 80137a2:	edd7 7a00 	vldr	s15, [r7]
 80137a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80137aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80137ae:	e00e      	b.n	80137ce <deadband+0x6a>
  }
  else if (value < 0)
 80137b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80137b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80137b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137bc:	d507      	bpl.n	80137ce <deadband+0x6a>
  {
    value += threshold;
 80137be:	ed97 7a01 	vldr	s14, [r7, #4]
 80137c2:	edd7 7a00 	vldr	s15, [r7]
 80137c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80137ca:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	ee07 3a90 	vmov	s15, r3
}
 80137d4:	eeb0 0a67 	vmov.f32	s0, s15
 80137d8:	370c      	adds	r7, #12
 80137da:	46bd      	mov	sp, r7
 80137dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e0:	4770      	bx	lr

080137e2 <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 80137e2:	b480      	push	{r7}
 80137e4:	b085      	sub	sp, #20
 80137e6:	af00      	add	r7, sp, #0
 80137e8:	60f8      	str	r0, [r7, #12]
 80137ea:	60b9      	str	r1, [r7, #8]
 80137ec:	607a      	str	r2, [r7, #4]
 80137ee:	603b      	str	r3, [r7, #0]
    context->count = 0;
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	2200      	movs	r2, #0
 80137f4:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 80137f6:	68fb      	ldr	r3, [r7, #12]
 80137f8:	687a      	ldr	r2, [r7, #4]
 80137fa:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	683a      	ldr	r2, [r7, #0]
 8013800:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	69ba      	ldr	r2, [r7, #24]
 8013806:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 8013808:	68ba      	ldr	r2, [r7, #8]
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	441a      	add	r2, r3
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2200      	movs	r2, #0
 8013816:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	7f3a      	ldrb	r2, [r7, #28]
 801381c:	761a      	strb	r2, [r3, #24]
}
 801381e:	bf00      	nop
 8013820:	3714      	adds	r7, #20
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr

0801382a <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 801382a:	b480      	push	{r7}
 801382c:	b085      	sub	sp, #20
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
 8013832:	6039      	str	r1, [r7, #0]
    bool result = true;
 8013834:	2301      	movs	r3, #1
 8013836:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	68db      	ldr	r3, [r3, #12]
 8013846:	683a      	ldr	r2, [r7, #0]
 8013848:	429a      	cmp	r2, r3
 801384a:	d927      	bls.n	801389c <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	68ba      	ldr	r2, [r7, #8]
 8013858:	429a      	cmp	r2, r3
 801385a:	d304      	bcc.n	8013866 <rateSupervisorValidate+0x3c>
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	689b      	ldr	r3, [r3, #8]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	429a      	cmp	r2, r3
 8013864:	d901      	bls.n	801386a <rateSupervisorValidate+0x40>
            result = false;
 8013866:	2300      	movs	r3, #0
 8013868:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	681a      	ldr	r2, [r3, #0]
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	615a      	str	r2, [r3, #20]
        context->count = 0;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	2200      	movs	r2, #0
 8013876:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	691a      	ldr	r2, [r3, #16]
 801387c:	683b      	ldr	r3, [r7, #0]
 801387e:	441a      	add	r2, r3
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	7e1b      	ldrb	r3, [r3, #24]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d007      	beq.n	801389c <rateSupervisorValidate+0x72>
            result = true;
 801388c:	2301      	movs	r3, #1
 801388e:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	7e1b      	ldrb	r3, [r3, #24]
 8013894:	3b01      	subs	r3, #1
 8013896:	b2da      	uxtb	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 801389c:	7bfb      	ldrb	r3, [r7, #15]
}
 801389e:	4618      	mov	r0, r3
 80138a0:	3714      	adds	r7, #20
 80138a2:	46bd      	mov	sp, r7
 80138a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a8:	4770      	bx	lr

080138aa <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 80138aa:	b580      	push	{r7, lr}
 80138ac:	b084      	sub	sp, #16
 80138ae:	af00      	add	r7, sp, #0
 80138b0:	6078      	str	r0, [r7, #4]
 80138b2:	460b      	mov	r3, r1
 80138b4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80138b6:	2300      	movs	r3, #0
 80138b8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 80138ba:	78fb      	ldrb	r3, [r7, #3]
 80138bc:	461a      	mov	r2, r3
 80138be:	2101      	movs	r1, #1
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f7f7 fd1c 	bl	800b2fe <VL53L1_WrByte>
 80138c6:	4603      	mov	r3, r0
 80138c8:	73fb      	strb	r3, [r7, #15]
		DeviceAddress);

	LOG_FUNCTION_END(Status);
	return Status;
 80138ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80138ce:	4618      	mov	r0, r3
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}

080138d6 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80138d6:	b580      	push	{r7, lr}
 80138d8:	b084      	sub	sp, #16
 80138da:	af00      	add	r7, sp, #0
 80138dc:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80138de:	2300      	movs	r3, #0
 80138e0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 80138e2:	f107 030e 	add.w	r3, r7, #14
 80138e6:	461a      	mov	r2, r3
 80138e8:	212e      	movs	r1, #46	@ 0x2e
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f7f7 fd2c 	bl	800b348 <VL53L1_RdByte>
 80138f0:	4603      	mov	r3, r0
 80138f2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 80138f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d10c      	bne.n	8013916 <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 80138fc:	7bbb      	ldrb	r3, [r7, #14]
 80138fe:	f043 0301 	orr.w	r3, r3, #1
 8013902:	b2db      	uxtb	r3, r3
 8013904:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 8013906:	7bbb      	ldrb	r3, [r7, #14]
 8013908:	461a      	mov	r2, r3
 801390a:	212e      	movs	r1, #46	@ 0x2e
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7f7 fcf6 	bl	800b2fe <VL53L1_WrByte>
 8013912:	4603      	mov	r3, r0
 8013914:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8013916:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d105      	bne.n	801392a <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 801391e:	2101      	movs	r1, #1
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f000 fe77 	bl	8014614 <VL53L1_data_init>
 8013926:	4603      	mov	r3, r0
 8013928:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 801392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d107      	bne.n	8013942 <VL53L1_DataInit+0x6c>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2201      	movs	r2, #1
 8013936:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2208      	movs	r2, #8
 801393e:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8013942:	2300      	movs	r3, #0
 8013944:	73bb      	strb	r3, [r7, #14]
 8013946:	e012      	b.n	801396e <VL53L1_DataInit+0x98>
		if (Status == VL53L1_ERROR_NONE)
 8013948:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d112      	bne.n	8013976 <VL53L1_DataInit+0xa0>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8013950:	7bbb      	ldrb	r3, [r7, #14]
 8013952:	2201      	movs	r2, #1
 8013954:	4619      	mov	r1, r3
 8013956:	6878      	ldr	r0, [r7, #4]
 8013958:	f000 fb04 	bl	8013f64 <VL53L1_SetLimitCheckEnable>
 801395c:	4603      	mov	r3, r0
 801395e:	461a      	mov	r2, r3
 8013960:	7bfb      	ldrb	r3, [r7, #15]
 8013962:	4313      	orrs	r3, r2
 8013964:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8013966:	7bbb      	ldrb	r3, [r7, #14]
 8013968:	3301      	adds	r3, #1
 801396a:	b2db      	uxtb	r3, r3
 801396c:	73bb      	strb	r3, [r7, #14]
 801396e:	7bbb      	ldrb	r3, [r7, #14]
 8013970:	2b01      	cmp	r3, #1
 8013972:	d9e9      	bls.n	8013948 <VL53L1_DataInit+0x72>
 8013974:	e000      	b.n	8013978 <VL53L1_DataInit+0xa2>
		else
			break;
 8013976:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8013978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d107      	bne.n	8013990 <VL53L1_DataInit+0xba>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8013980:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8013984:	2100      	movs	r1, #0
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f000 fb4d 	bl	8014026 <VL53L1_SetLimitCheckValue>
 801398c:	4603      	mov	r3, r0
 801398e:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8013990:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d107      	bne.n	80139a8 <VL53L1_DataInit+0xd2>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8013998:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801399c:	2101      	movs	r1, #1
 801399e:	6878      	ldr	r0, [r7, #4]
 80139a0:	f000 fb41 	bl	8014026 <VL53L1_SetLimitCheckValue>
 80139a4:	4603      	mov	r3, r0
 80139a6:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80139a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139ac:	4618      	mov	r0, r3
 80139ae:	3710      	adds	r7, #16
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd80      	pop	{r7, pc}

080139b4 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b084      	sub	sp, #16
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80139bc:	2300      	movs	r3, #0
 80139be:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	2203      	movs	r2, #3
 80139c4:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80139c8:	2320      	movs	r3, #32
 80139ca:	73bb      	strb	r3, [r7, #14]
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	7bba      	ldrb	r2, [r7, #14]
 80139d0:	709a      	strb	r2, [r3, #2]

	PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2203      	movs	r2, #3
 80139d6:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	2203      	movs	r2, #3
 80139de:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	2203      	movs	r2, #3
 80139e6:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 80139ea:	2108      	movs	r1, #8
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f8d8 	bl	8013ba2 <VL53L1_SetPresetMode>
 80139f2:	4603      	mov	r3, r0
 80139f4:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 80139f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3710      	adds	r7, #16
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
	...

08013a04 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8013a04:	b480      	push	{r7}
 8013a06:	b087      	sub	sp, #28
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	603a      	str	r2, [r7, #0]
 8013a0e:	71fb      	strb	r3, [r7, #7]
 8013a10:	460b      	mov	r3, r1
 8013a12:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013a14:	2300      	movs	r3, #0
 8013a16:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 8013a18:	4a2b      	ldr	r2, [pc, #172]	@ (8013ac8 <ComputeDevicePresetMode+0xc4>)
 8013a1a:	f107 0310 	add.w	r3, r7, #16
 8013a1e:	6812      	ldr	r2, [r2, #0]
 8013a20:	4611      	mov	r1, r2
 8013a22:	8019      	strh	r1, [r3, #0]
 8013a24:	3302      	adds	r3, #2
 8013a26:	0c12      	lsrs	r2, r2, #16
 8013a28:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 8013a2a:	4a28      	ldr	r2, [pc, #160]	@ (8013acc <ComputeDevicePresetMode+0xc8>)
 8013a2c:	f107 030c 	add.w	r3, r7, #12
 8013a30:	6812      	ldr	r2, [r2, #0]
 8013a32:	4611      	mov	r1, r2
 8013a34:	8019      	strh	r1, [r3, #0]
 8013a36:	3302      	adds	r3, #2
 8013a38:	0c12      	lsrs	r2, r2, #16
 8013a3a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8013a3c:	4a24      	ldr	r2, [pc, #144]	@ (8013ad0 <ComputeDevicePresetMode+0xcc>)
 8013a3e:	f107 0308 	add.w	r3, r7, #8
 8013a42:	6812      	ldr	r2, [r2, #0]
 8013a44:	4611      	mov	r1, r2
 8013a46:	8019      	strh	r1, [r3, #0]
 8013a48:	3302      	adds	r3, #2
 8013a4a:	0c12      	lsrs	r2, r2, #16
 8013a4c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8013a4e:	683b      	ldr	r3, [r7, #0]
 8013a50:	2201      	movs	r2, #1
 8013a52:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8013a54:	79bb      	ldrb	r3, [r7, #6]
 8013a56:	2b01      	cmp	r3, #1
 8013a58:	d002      	beq.n	8013a60 <ComputeDevicePresetMode+0x5c>
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	d003      	beq.n	8013a66 <ComputeDevicePresetMode+0x62>
 8013a5e:	e005      	b.n	8013a6c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8013a60:	2300      	movs	r3, #0
 8013a62:	75bb      	strb	r3, [r7, #22]
		break;
 8013a64:	e004      	b.n	8013a70 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8013a66:	2301      	movs	r3, #1
 8013a68:	75bb      	strb	r3, [r7, #22]
		break;
 8013a6a:	e001      	b.n	8013a70 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 8013a6c:	2302      	movs	r3, #2
 8013a6e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8013a70:	79fb      	ldrb	r3, [r7, #7]
 8013a72:	2b08      	cmp	r3, #8
 8013a74:	d015      	beq.n	8013aa2 <ComputeDevicePresetMode+0x9e>
 8013a76:	2b08      	cmp	r3, #8
 8013a78:	dc1b      	bgt.n	8013ab2 <ComputeDevicePresetMode+0xae>
 8013a7a:	2b03      	cmp	r3, #3
 8013a7c:	d009      	beq.n	8013a92 <ComputeDevicePresetMode+0x8e>
 8013a7e:	2b04      	cmp	r3, #4
 8013a80:	d117      	bne.n	8013ab2 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8013a82:	7dbb      	ldrb	r3, [r7, #22]
 8013a84:	3318      	adds	r3, #24
 8013a86:	443b      	add	r3, r7
 8013a88:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8013a8c:	683b      	ldr	r3, [r7, #0]
 8013a8e:	701a      	strb	r2, [r3, #0]
		break;
 8013a90:	e011      	b.n	8013ab6 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8013a92:	7dbb      	ldrb	r3, [r7, #22]
 8013a94:	3318      	adds	r3, #24
 8013a96:	443b      	add	r3, r7
 8013a98:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	701a      	strb	r2, [r3, #0]
		break;
 8013aa0:	e009      	b.n	8013ab6 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8013aa2:	7dbb      	ldrb	r3, [r7, #22]
 8013aa4:	3318      	adds	r3, #24
 8013aa6:	443b      	add	r3, r7
 8013aa8:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	701a      	strb	r2, [r3, #0]
		break;
 8013ab0:	e001      	b.n	8013ab6 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8013ab2:	23f8      	movs	r3, #248	@ 0xf8
 8013ab4:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8013ab6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	371c      	adds	r7, #28
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr
 8013ac6:	bf00      	nop
 8013ac8:	0801b97c 	.word	0x0801b97c
 8013acc:	0801b980 	.word	0x0801b980
 8013ad0:	0801b984 	.word	0x0801b984

08013ad4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 8013ad4:	b5b0      	push	{r4, r5, r7, lr}
 8013ad6:	b08e      	sub	sp, #56	@ 0x38
 8013ad8:	af04      	add	r7, sp, #16
 8013ada:	60f8      	str	r0, [r7, #12]
 8013adc:	607b      	str	r3, [r7, #4]
 8013ade:	460b      	mov	r3, r1
 8013ae0:	72fb      	strb	r3, [r7, #11]
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8013aec:	7afb      	ldrb	r3, [r7, #11]
 8013aee:	2b03      	cmp	r3, #3
 8013af0:	d002      	beq.n	8013af8 <SetPresetMode+0x24>
 8013af2:	7afb      	ldrb	r3, [r7, #11]
 8013af4:	2b08      	cmp	r3, #8
 8013af6:	d103      	bne.n	8013b00 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8013af8:	2340      	movs	r3, #64	@ 0x40
 8013afa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013afe:	e002      	b.n	8013b06 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8013b00:	2320      	movs	r3, #32
 8013b02:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 8013b06:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 8013b0a:	7ab9      	ldrb	r1, [r7, #10]
 8013b0c:	7afb      	ldrb	r3, [r7, #11]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7ff ff78 	bl	8013a04 <ComputeDevicePresetMode>
 8013b14:	4603      	mov	r3, r0
 8013b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8013b1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d112      	bne.n	8013b48 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 8013b22:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8013b26:	f107 001c 	add.w	r0, r7, #28
 8013b2a:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8013b2e:	f107 0314 	add.w	r3, r7, #20
 8013b32:	9301      	str	r3, [sp, #4]
 8013b34:	f107 0318 	add.w	r3, r7, #24
 8013b38:	9300      	str	r3, [sp, #0]
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	68f8      	ldr	r0, [r7, #12]
 8013b3e:	f001 f801 	bl	8014b44 <VL53L1_get_preset_mode_timing_cfg>
 8013b42:	4603      	mov	r3, r0
 8013b44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8013b48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d112      	bne.n	8013b76 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8013b50:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8013b54:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8013b56:	69fd      	ldr	r5, [r7, #28]
 8013b58:	69bb      	ldr	r3, [r7, #24]
 8013b5a:	697a      	ldr	r2, [r7, #20]
 8013b5c:	6879      	ldr	r1, [r7, #4]
 8013b5e:	9102      	str	r1, [sp, #8]
 8013b60:	9201      	str	r2, [sp, #4]
 8013b62:	9300      	str	r3, [sp, #0]
 8013b64:	462b      	mov	r3, r5
 8013b66:	4622      	mov	r2, r4
 8013b68:	4601      	mov	r1, r0
 8013b6a:	68f8      	ldr	r0, [r7, #12]
 8013b6c:	f001 f894 	bl	8014c98 <VL53L1_set_preset_mode>
 8013b70:	4603      	mov	r3, r0
 8013b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8013b76:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d103      	bne.n	8013b86 <SetPresetMode+0xb2>
		PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8013b84:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8013b86:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d103      	bne.n	8013b96 <SetPresetMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	7afa      	ldrb	r2, [r7, #11]
 8013b92:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8013b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3728      	adds	r7, #40	@ 0x28
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bdb0      	pop	{r4, r5, r7, pc}

08013ba2 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b084      	sub	sp, #16
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
 8013baa:	460b      	mov	r3, r1
 8013bac:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8013bb2:	2303      	movs	r3, #3
 8013bb4:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8013bb6:	7bba      	ldrb	r2, [r7, #14]
 8013bb8:	78f9      	ldrb	r1, [r7, #3]
 8013bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013bbe:	6878      	ldr	r0, [r7, #4]
 8013bc0:	f7ff ff88 	bl	8013ad4 <SetPresetMode>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8013bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d11f      	bne.n	8013c10 <VL53L1_SetPresetMode+0x6e>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	7bba      	ldrb	r2, [r7, #14]
 8013bd4:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				DistanceMode);

		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	7bba      	ldrb	r2, [r7, #14]
 8013bdc:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8013be0:	78fb      	ldrb	r3, [r7, #3]
 8013be2:	2b04      	cmp	r3, #4
 8013be4:	d005      	beq.n	8013bf2 <VL53L1_SetPresetMode+0x50>
 8013be6:	78fb      	ldrb	r3, [r7, #3]
 8013be8:	2b03      	cmp	r3, #3
 8013bea:	d002      	beq.n	8013bf2 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8013bec:	78fb      	ldrb	r3, [r7, #3]
 8013bee:	2b08      	cmp	r3, #8
 8013bf0:	d107      	bne.n	8013c02 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8013bf2:	f24a 0128 	movw	r1, #41000	@ 0xa028
 8013bf6:	6878      	ldr	r0, [r7, #4]
 8013bf8:	f000 f8a2 	bl	8013d40 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	73fb      	strb	r3, [r7, #15]
 8013c00:	e006      	b.n	8013c10 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 8013c02:	f248 2135 	movw	r1, #33333	@ 0x8235
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f000 f89a 	bl	8013d40 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8013c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d106      	bne.n	8013c26 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8013c18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f000 f965 	bl	8013eec <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 8013c22:	4603      	mov	r3, r0
 8013c24:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}

08013c32 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8013c32:	b580      	push	{r7, lr}
 8013c34:	b088      	sub	sp, #32
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013c3e:	2300      	movs	r3, #0
 8013c40:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8013c48:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8013c4a:	78fb      	ldrb	r3, [r7, #3]
 8013c4c:	2b01      	cmp	r3, #1
 8013c4e:	d008      	beq.n	8013c62 <VL53L1_SetDistanceMode+0x30>
 8013c50:	78fb      	ldrb	r3, [r7, #3]
 8013c52:	2b02      	cmp	r3, #2
 8013c54:	d005      	beq.n	8013c62 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8013c56:	78fb      	ldrb	r3, [r7, #3]
 8013c58:	2b03      	cmp	r3, #3
 8013c5a:	d002      	beq.n	8013c62 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 8013c5c:	f06f 0303 	mvn.w	r3, #3
 8013c60:	e069      	b.n	8013d36 <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8013c62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d10a      	bne.n	8013c80 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 8013c6a:	78fb      	ldrb	r3, [r7, #3]
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d002      	beq.n	8013c76 <VL53L1_SetDistanceMode+0x44>
 8013c70:	78fb      	ldrb	r3, [r7, #3]
 8013c72:	2b02      	cmp	r3, #2
 8013c74:	d102      	bne.n	8013c7c <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 8013c76:	78fb      	ldrb	r3, [r7, #3]
 8013c78:	77bb      	strb	r3, [r7, #30]
 8013c7a:	e001      	b.n	8013c80 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 8013c7c:	2303      	movs	r3, #3
 8013c7e:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 8013c80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d107      	bne.n	8013c98 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8013c88:	f107 0308 	add.w	r3, r7, #8
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 ff01 	bl	8014a96 <VL53L1_get_user_zone>
 8013c94:	4603      	mov	r3, r0
 8013c96:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  PALDevDataGet(Dev,
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	695b      	ldr	r3, [r3, #20]
 8013c9c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8013c9e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d10a      	bne.n	8013cbc <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8013ca6:	f107 0314 	add.w	r3, r7, #20
 8013caa:	f107 0210 	add.w	r2, r7, #16
 8013cae:	f107 010c 	add.w	r1, r7, #12
 8013cb2:	6878      	ldr	r0, [r7, #4]
 8013cb4:	f000 fe2c 	bl	8014910 <VL53L1_get_timeouts_us>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8013cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d107      	bne.n	8013cd4 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 8013cc4:	7fba      	ldrb	r2, [r7, #30]
 8013cc6:	7f79      	ldrb	r1, [r7, #29]
 8013cc8:	69bb      	ldr	r3, [r7, #24]
 8013cca:	6878      	ldr	r0, [r7, #4]
 8013ccc:	f7ff ff02 	bl	8013ad4 <SetPresetMode>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8013cd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d10b      	bne.n	8013cf4 <VL53L1_SetDistanceMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	7fba      	ldrb	r2, [r7, #30]
 8013ce0:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	7fba      	ldrb	r2, [r7, #30]
 8013ce8:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	78fa      	ldrb	r2, [r7, #3]
 8013cf0:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8013cf4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d10e      	bne.n	8013d1a <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8013cfc:	68f9      	ldr	r1, [r7, #12]
 8013cfe:	693a      	ldr	r2, [r7, #16]
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 fdcc 	bl	80148a0 <VL53L1_set_timeouts_us>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8013d0c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d102      	bne.n	8013d1a <VL53L1_SetDistanceMode+0xe8>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 8013d14:	697a      	ldr	r2, [r7, #20]
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8013d1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d107      	bne.n	8013d32 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8013d22:	f107 0308 	add.w	r3, r7, #8
 8013d26:	4619      	mov	r1, r3
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f000 fe91 	bl	8014a50 <VL53L1_set_user_zone>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8013d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013d36:	4618      	mov	r0, r3
 8013d38:	3720      	adds	r7, #32
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
	...

08013d40 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b08e      	sub	sp, #56	@ 0x38
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
 8013d48:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013d4a:	2300      	movs	r3, #0
 8013d4c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8013d50:	4b64      	ldr	r3, [pc, #400]	@ (8013ee4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8013d52:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_LLDriverData_t   *pLLData;

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	4a64      	ldr	r2, [pc, #400]	@ (8013ee8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 8013d58:	4293      	cmp	r3, r2
 8013d5a:	d902      	bls.n	8013d62 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8013d5c:	23fc      	movs	r3, #252	@ 0xfc
 8013d5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (Status == VL53L1_ERROR_NONE) {
 8013d62:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8013d6a:	f107 0317 	add.w	r3, r7, #23
 8013d6e:	461a      	mov	r2, r3
 8013d70:	2105      	movs	r1, #5
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f000 f9e7 	bl	8014146 <VL53L1_GetSequenceStepEnable>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8013d7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d109      	bne.n	8013d9a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8013d86:	f107 0316 	add.w	r3, r7, #22
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	2106      	movs	r1, #6
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f000 f9d9 	bl	8014146 <VL53L1_GetSequenceStepEnable>
 8013d94:	4603      	mov	r3, r0
 8013d96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8013d9a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d10b      	bne.n	8013dba <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 8013da2:	f107 0310 	add.w	r3, r7, #16
 8013da6:	f107 020c 	add.w	r2, r7, #12
 8013daa:	f107 0108 	add.w	r1, r7, #8
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f000 fdae 	bl	8014910 <VL53L1_get_timeouts_us>
 8013db4:	4603      	mov	r3, r0
 8013db6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8013dba:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	f040 8081 	bne.w	8013ec6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8013dca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		TimingGuard = 0;
 8013dce:	2300      	movs	r3, #0
 8013dd0:	633b      	str	r3, [r7, #48]	@ 0x30
		divisor = 1;
 8013dd2:	2301      	movs	r3, #1
 8013dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		switch (PresetMode) {
 8013dd6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013dda:	2b08      	cmp	r3, #8
 8013ddc:	d026      	beq.n	8013e2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 8013dde:	2b08      	cmp	r3, #8
 8013de0:	dc41      	bgt.n	8013e66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 8013de2:	2b03      	cmp	r3, #3
 8013de4:	d00f      	beq.n	8013e06 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 8013de6:	2b04      	cmp	r3, #4
 8013de8:	d13d      	bne.n	8013e66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
 8013dec:	2b01      	cmp	r3, #1
 8013dee:	d002      	beq.n	8013df6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
 8013df0:	7dbb      	ldrb	r3, [r7, #22]
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d103      	bne.n	8013dfe <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
				TimingGuard = 5000;
 8013df6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013dfa:	633b      	str	r3, [r7, #48]	@ 0x30
			else
				TimingGuard = 1000;
		break;
 8013dfc:	e036      	b.n	8013e6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 8013dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013e02:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8013e04:	e032      	b.n	8013e6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8013e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e08:	005b      	lsls	r3, r3, #1
 8013e0a:	627b      	str	r3, [r7, #36]	@ 0x24
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8013e0c:	7dfb      	ldrb	r3, [r7, #23]
 8013e0e:	2b01      	cmp	r3, #1
 8013e10:	d002      	beq.n	8013e18 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
 8013e12:	7dbb      	ldrb	r3, [r7, #22]
 8013e14:	2b01      	cmp	r3, #1
 8013e16:	d103      	bne.n	8013e20 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe0>
				TimingGuard = 26600;
 8013e18:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 8013e1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8013e1e:	e002      	b.n	8013e26 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe6>
			else
				TimingGuard = 21600;
 8013e20:	f245 4360 	movw	r3, #21600	@ 0x5460
 8013e24:	633b      	str	r3, [r7, #48]	@ 0x30
			divisor = 2;
 8013e26:	2302      	movs	r3, #2
 8013e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8013e2a:	e01f      	b.n	8013e6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013e2e:	005b      	lsls	r3, r3, #1
 8013e30:	627b      	str	r3, [r7, #36]	@ 0x24
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8013e32:	23f5      	movs	r3, #245	@ 0xf5
 8013e34:	62bb      	str	r3, [r7, #40]	@ 0x28
			pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	61fb      	str	r3, [r7, #28]
			vhv_loops = pLLData->low_power_auto_data.vhv_loop_bound;
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8013e40:	61bb      	str	r3, [r7, #24]
			if (vhv_loops > 0) {
 8013e42:	69bb      	ldr	r3, [r7, #24]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	dd07      	ble.n	8013e58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 8013e48:	69bb      	ldr	r3, [r7, #24]
 8013e4a:	22f5      	movs	r2, #245	@ 0xf5
 8013e4c:	fb02 f303 	mul.w	r3, r2, r3
 8013e50:	461a      	mov	r2, r3
 8013e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e54:	4413      	add	r3, r2
 8013e56:	62bb      	str	r3, [r7, #40]	@ 0x28
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8013e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e5a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 8013e5e:	633b      	str	r3, [r7, #48]	@ 0x30
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8013e60:	2302      	movs	r3, #2
 8013e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8013e64:	e002      	b.n	8013e6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8013e66:	23f8      	movs	r3, #248	@ 0xf8
 8013e68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8013e6c:	683a      	ldr	r2, [r7, #0]
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d803      	bhi.n	8013e7c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8013e74:	23fc      	movs	r3, #252	@ 0xfc
 8013e76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013e7a:	e003      	b.n	8013e84 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8013e7c:	683a      	ldr	r2, [r7, #0]
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013e80:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8013e82:	613b      	str	r3, [r7, #16]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8013e84:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d11c      	bne.n	8013ec6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8013e8c:	693b      	ldr	r3, [r7, #16]
 8013e8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013e90:	429a      	cmp	r2, r3
 8013e92:	d203      	bcs.n	8013e9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8013e94:	23fc      	movs	r3, #252	@ 0xfc
 8013e96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8013e9a:	e00d      	b.n	8013eb8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 8013e9c:	693a      	ldr	r2, [r7, #16]
 8013e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8013ea4:	613b      	str	r3, [r7, #16]
				Status = VL53L1_set_timeouts_us(
 8013ea6:	68b9      	ldr	r1, [r7, #8]
 8013ea8:	68fa      	ldr	r2, [r7, #12]
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	6878      	ldr	r0, [r7, #4]
 8013eae:	f000 fcf7 	bl	80148a0 <VL53L1_set_timeouts_us>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8013eb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d102      	bne.n	8013ec6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				PALDevDataSet(Dev,
 8013ec0:	693a      	ldr	r2, [r7, #16]
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8013ec6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d103      	bne.n	8013ed6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		PALDevDataSet(Dev,
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	683a      	ldr	r2, [r7, #0]
 8013ed2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013ed6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3738      	adds	r7, #56	@ 0x38
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	00086470 	.word	0x00086470
 8013ee8:	00989680 	.word	0x00989680

08013eec <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
 8013ef4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8013efa:	6839      	ldr	r1, [r7, #0]
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f000 fca6 	bl	801484e <VL53L1_set_inter_measurement_period_ms>
 8013f02:	4603      	mov	r3, r0
 8013f04:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8013f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3710      	adds	r7, #16
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}

08013f12 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8013f12:	b580      	push	{r7, lr}
 8013f14:	b086      	sub	sp, #24
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	60f8      	str	r0, [r7, #12]
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	607a      	str	r2, [r7, #4]
 8013f1e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013f20:	2300      	movs	r3, #0
 8013f22:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8013f24:	897b      	ldrh	r3, [r7, #10]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d002      	beq.n	8013f30 <SetLimitValue+0x1e>
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d009      	beq.n	8013f42 <SetLimitValue+0x30>
 8013f2e:	e011      	b.n	8013f54 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	0b9b      	lsrs	r3, r3, #14
 8013f34:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8013f36:	8abb      	ldrh	r3, [r7, #20]
 8013f38:	4619      	mov	r1, r3
 8013f3a:	68f8      	ldr	r0, [r7, #12]
 8013f3c:	f001 f838 	bl	8014fb0 <VL53L1_set_lite_sigma_threshold>
		break;
 8013f40:	e00a      	b.n	8013f58 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	0a5b      	lsrs	r3, r3, #9
 8013f46:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8013f48:	8abb      	ldrh	r3, [r7, #20]
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	68f8      	ldr	r0, [r7, #12]
 8013f4e:	f001 f85b 	bl	8015008 <VL53L1_set_lite_min_count_rate>
		break;
 8013f52:	e001      	b.n	8013f58 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8013f54:	23fc      	movs	r3, #252	@ 0xfc
 8013f56:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8013f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	3718      	adds	r7, #24
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}

08013f64 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	807b      	strh	r3, [r7, #2]
 8013f70:	4613      	mov	r3, r2
 8013f72:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013f74:	2300      	movs	r3, #0
 8013f76:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8013f78:	2300      	movs	r3, #0
 8013f7a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8013f7c:	887b      	ldrh	r3, [r7, #2]
 8013f7e:	2b01      	cmp	r3, #1
 8013f80:	d902      	bls.n	8013f88 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8013f82:	23fc      	movs	r3, #252	@ 0xfc
 8013f84:	73fb      	strb	r3, [r7, #15]
 8013f86:	e014      	b.n	8013fb2 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8013f88:	787b      	ldrb	r3, [r7, #1]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d102      	bne.n	8013f94 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	60bb      	str	r3, [r7, #8]
 8013f92:	e006      	b.n	8013fa2 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8013f94:	887b      	ldrh	r3, [r7, #2]
 8013f96:	687a      	ldr	r2, [r7, #4]
 8013f98:	33e0      	adds	r3, #224	@ 0xe0
 8013f9a:	009b      	lsls	r3, r3, #2
 8013f9c:	4413      	add	r3, r2
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8013fa2:	887b      	ldrh	r3, [r7, #2]
 8013fa4:	68ba      	ldr	r2, [r7, #8]
 8013fa6:	4619      	mov	r1, r3
 8013fa8:	6878      	ldr	r0, [r7, #4]
 8013faa:	f7ff ffb2 	bl	8013f12 <SetLimitValue>
 8013fae:	4603      	mov	r3, r0
 8013fb0:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8013fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d10c      	bne.n	8013fd4 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8013fba:	787b      	ldrb	r3, [r7, #1]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	bf14      	ite	ne
 8013fc0:	2301      	movne	r3, #1
 8013fc2:	2300      	moveq	r3, #0
 8013fc4:	b2da      	uxtb	r2, r3
 8013fc6:	887b      	ldrh	r3, [r7, #2]
 8013fc8:	4611      	mov	r1, r2
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	4413      	add	r3, r2
 8013fce:	460a      	mov	r2, r1
 8013fd0:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8013fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3710      	adds	r7, #16
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b087      	sub	sp, #28
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	460b      	mov	r3, r1
 8013fea:	607a      	str	r2, [r7, #4]
 8013fec:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8013ff2:	897b      	ldrh	r3, [r7, #10]
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d905      	bls.n	8014004 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8013ff8:	23fc      	movs	r3, #252	@ 0xfc
 8013ffa:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	2200      	movs	r2, #0
 8014000:	701a      	strb	r2, [r3, #0]
 8014002:	e008      	b.n	8014016 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8014004:	897b      	ldrh	r3, [r7, #10]
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	4413      	add	r3, r2
 801400a:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 801400e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	7dba      	ldrb	r2, [r7, #22]
 8014014:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8014016:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801401a:	4618      	mov	r0, r3
 801401c:	371c      	adds	r7, #28
 801401e:	46bd      	mov	sp, r7
 8014020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014024:	4770      	bx	lr

08014026 <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8014026:	b580      	push	{r7, lr}
 8014028:	b086      	sub	sp, #24
 801402a:	af00      	add	r7, sp, #0
 801402c:	60f8      	str	r0, [r7, #12]
 801402e:	460b      	mov	r3, r1
 8014030:	607a      	str	r2, [r7, #4]
 8014032:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014034:	2300      	movs	r3, #0
 8014036:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8014038:	897b      	ldrh	r3, [r7, #10]
 801403a:	2b01      	cmp	r3, #1
 801403c:	d902      	bls.n	8014044 <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801403e:	23fc      	movs	r3, #252	@ 0xfc
 8014040:	75fb      	strb	r3, [r7, #23]
 8014042:	e023      	b.n	801408c <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8014044:	897b      	ldrh	r3, [r7, #10]
 8014046:	68fa      	ldr	r2, [r7, #12]
 8014048:	4413      	add	r3, r2
 801404a:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 801404e:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8014050:	7dbb      	ldrb	r3, [r7, #22]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d107      	bne.n	8014066 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8014056:	897b      	ldrh	r3, [r7, #10]
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	33e0      	adds	r3, #224	@ 0xe0
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	4413      	add	r3, r2
 8014060:	687a      	ldr	r2, [r7, #4]
 8014062:	609a      	str	r2, [r3, #8]
 8014064:	e012      	b.n	801408c <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 8014066:	897b      	ldrh	r3, [r7, #10]
 8014068:	687a      	ldr	r2, [r7, #4]
 801406a:	4619      	mov	r1, r3
 801406c:	68f8      	ldr	r0, [r7, #12]
 801406e:	f7ff ff50 	bl	8013f12 <SetLimitValue>
 8014072:	4603      	mov	r3, r0
 8014074:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8014076:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d106      	bne.n	801408c <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801407e:	897b      	ldrh	r3, [r7, #10]
 8014080:	68fa      	ldr	r2, [r7, #12]
 8014082:	33e0      	adds	r3, #224	@ 0xe0
 8014084:	009b      	lsls	r3, r3, #2
 8014086:	4413      	add	r3, r2
 8014088:	687a      	ldr	r2, [r7, #4]
 801408a:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801408c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014090:	4618      	mov	r0, r3
 8014092:	3718      	adds	r7, #24
 8014094:	46bd      	mov	sp, r7
 8014096:	bd80      	pop	{r7, pc}

08014098 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8014098:	b580      	push	{r7, lr}
 801409a:	b088      	sub	sp, #32
 801409c:	af00      	add	r7, sp, #0
 801409e:	60f8      	str	r0, [r7, #12]
 80140a0:	460b      	mov	r3, r1
 80140a2:	607a      	str	r2, [r7, #4]
 80140a4:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80140a6:	2300      	movs	r3, #0
 80140a8:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80140aa:	897b      	ldrh	r3, [r7, #10]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d002      	beq.n	80140b6 <VL53L1_GetLimitCheckValue+0x1e>
 80140b0:	2b01      	cmp	r3, #1
 80140b2:	d00c      	beq.n	80140ce <VL53L1_GetLimitCheckValue+0x36>
 80140b4:	e017      	b.n	80140e6 <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 80140b6:	f107 0314 	add.w	r3, r7, #20
 80140ba:	4619      	mov	r1, r3
 80140bc:	68f8      	ldr	r0, [r7, #12]
 80140be:	f000 ff61 	bl	8014f84 <VL53L1_get_lite_sigma_threshold>
 80140c2:	4603      	mov	r3, r0
 80140c4:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 80140c6:	8abb      	ldrh	r3, [r7, #20]
 80140c8:	039b      	lsls	r3, r3, #14
 80140ca:	61bb      	str	r3, [r7, #24]
		break;
 80140cc:	e00d      	b.n	80140ea <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 80140ce:	f107 0316 	add.w	r3, r7, #22
 80140d2:	4619      	mov	r1, r3
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f000 ff81 	bl	8014fdc <VL53L1_get_lite_min_count_rate>
 80140da:	4603      	mov	r3, r0
 80140dc:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80140de:	8afb      	ldrh	r3, [r7, #22]
 80140e0:	025b      	lsls	r3, r3, #9
 80140e2:	61bb      	str	r3, [r7, #24]
		break;
 80140e4:	e001      	b.n	80140ea <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80140e6:	23fc      	movs	r3, #252	@ 0xfc
 80140e8:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80140ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d123      	bne.n	801413a <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d110      	bne.n	801411a <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80140f8:	897b      	ldrh	r3, [r7, #10]
 80140fa:	68fa      	ldr	r2, [r7, #12]
 80140fc:	33e0      	adds	r3, #224	@ 0xe0
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	4413      	add	r3, r2
 8014102:	689b      	ldr	r3, [r3, #8]
 8014104:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	69ba      	ldr	r2, [r7, #24]
 801410a:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801410c:	897b      	ldrh	r3, [r7, #10]
 801410e:	68fa      	ldr	r2, [r7, #12]
 8014110:	4413      	add	r3, r2
 8014112:	2200      	movs	r2, #0
 8014114:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 8014118:	e00f      	b.n	801413a <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	69ba      	ldr	r2, [r7, #24]
 801411e:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8014120:	897b      	ldrh	r3, [r7, #10]
 8014122:	68fa      	ldr	r2, [r7, #12]
 8014124:	33e0      	adds	r3, #224	@ 0xe0
 8014126:	009b      	lsls	r3, r3, #2
 8014128:	4413      	add	r3, r2
 801412a:	69ba      	ldr	r2, [r7, #24]
 801412c:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801412e:	897b      	ldrh	r3, [r7, #10]
 8014130:	68fa      	ldr	r2, [r7, #12]
 8014132:	4413      	add	r3, r2
 8014134:	2201      	movs	r2, #1
 8014136:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 801413a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 801413e:	4618      	mov	r0, r3
 8014140:	3720      	adds	r7, #32
 8014142:	46bd      	mov	sp, r7
 8014144:	bd80      	pop	{r7, pc}

08014146 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8014146:	b580      	push	{r7, lr}
 8014148:	b086      	sub	sp, #24
 801414a:	af00      	add	r7, sp, #0
 801414c:	60f8      	str	r0, [r7, #12]
 801414e:	460b      	mov	r3, r1
 8014150:	607a      	str	r2, [r7, #4]
 8014152:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8014154:	2300      	movs	r3, #0
 8014156:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8014158:	7afb      	ldrb	r3, [r7, #11]
 801415a:	687a      	ldr	r2, [r7, #4]
 801415c:	4619      	mov	r1, r3
 801415e:	68f8      	ldr	r0, [r7, #12]
 8014160:	f000 fc3f 	bl	80149e2 <VL53L1_get_sequence_config_bit>
 8014164:	4603      	mov	r3, r0
 8014166:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8014168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801416c:	4618      	mov	r0, r3
 801416e:	3718      	adds	r7, #24
 8014170:	46bd      	mov	sp, r7
 8014172:	bd80      	pop	{r7, pc}

08014174 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8014174:	b580      	push	{r7, lr}
 8014176:	b084      	sub	sp, #16
 8014178:	af00      	add	r7, sp, #0
 801417a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801417c:	2300      	movs	r3, #0
 801417e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = PALDevDataGet(Dev, PalState);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 8014186:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 8014188:	7bbb      	ldrb	r3, [r7, #14]
 801418a:	2b63      	cmp	r3, #99	@ 0x63
 801418c:	dc12      	bgt.n	80141b4 <VL53L1_StartMeasurement+0x40>
 801418e:	2b62      	cmp	r3, #98	@ 0x62
 8014190:	da0d      	bge.n	80141ae <VL53L1_StartMeasurement+0x3a>
 8014192:	2b05      	cmp	r3, #5
 8014194:	dc0e      	bgt.n	80141b4 <VL53L1_StartMeasurement+0x40>
 8014196:	2b04      	cmp	r3, #4
 8014198:	da09      	bge.n	80141ae <VL53L1_StartMeasurement+0x3a>
 801419a:	2b02      	cmp	r3, #2
 801419c:	dc02      	bgt.n	80141a4 <VL53L1_StartMeasurement+0x30>
 801419e:	2b00      	cmp	r3, #0
 80141a0:	da05      	bge.n	80141ae <VL53L1_StartMeasurement+0x3a>
 80141a2:	e007      	b.n	80141b4 <VL53L1_StartMeasurement+0x40>
 80141a4:	2b03      	cmp	r3, #3
 80141a6:	d105      	bne.n	80141b4 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80141a8:	2300      	movs	r3, #0
 80141aa:	73fb      	strb	r3, [r7, #15]
		break;
 80141ac:	e004      	b.n	80141b8 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80141ae:	23f2      	movs	r3, #242	@ 0xf2
 80141b0:	73fb      	strb	r3, [r7, #15]
		break;
 80141b2:	e001      	b.n	80141b8 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80141b4:	23fd      	movs	r3, #253	@ 0xfd
 80141b6:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = PALDevDataGet(Dev, LLData.measurement_mode);
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	789b      	ldrb	r3, [r3, #2]
 80141bc:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 80141be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d107      	bne.n	80141d6 <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 80141c6:	7b7b      	ldrb	r3, [r7, #13]
 80141c8:	2206      	movs	r2, #6
 80141ca:	4619      	mov	r1, r3
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 ff51 	bl	8015074 <VL53L1_init_and_start_range>
 80141d2:	4603      	mov	r3, r0
 80141d4:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 80141d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d103      	bne.n	80141e6 <VL53L1_StartMeasurement+0x72>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	2204      	movs	r2, #4
 80141e2:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 80141e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3710      	adds	r7, #16
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}

080141f2 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 80141f2:	b580      	push	{r7, lr}
 80141f4:	b084      	sub	sp, #16
 80141f6:	af00      	add	r7, sp, #0
 80141f8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80141fa:	2300      	movs	r3, #0
 80141fc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 80141fe:	6878      	ldr	r0, [r7, #4]
 8014200:	f001 f99a 	bl	8015538 <VL53L1_stop_range>
 8014204:	4603      	mov	r3, r0
 8014206:	73fb      	strb	r3, [r7, #15]

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 8014208:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d103      	bne.n	8014218 <VL53L1_StopMeasurement+0x26>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	2203      	movs	r2, #3
 8014214:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	LOG_FUNCTION_END(Status);
	return Status;
 8014218:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3710      	adds	r7, #16
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}

08014224 <VL53L1_GetMeasurementDataReady>:
}


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b084      	sub	sp, #16
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801422e:	2300      	movs	r3, #0
 8014230:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8014232:	6839      	ldr	r1, [r7, #0]
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f004 f8d7 	bl	80183e8 <VL53L1_is_new_data_ready>
 801423a:	4603      	mov	r3, r0
 801423c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 801423e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014242:	4618      	mov	r0, r3
 8014244:	3710      	adds	r7, #16
 8014246:	46bd      	mov	sp, r7
 8014248:	bd80      	pop	{r7, pc}
	...

0801424c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 801424c:	b480      	push	{r7}
 801424e:	b08d      	sub	sp, #52	@ 0x34
 8014250:	af00      	add	r7, sp, #0
 8014252:	4603      	mov	r3, r0
 8014254:	603a      	str	r2, [r7, #0]
 8014256:	71fb      	strb	r3, [r7, #7]
 8014258:	460b      	mov	r3, r1
 801425a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 801425c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8014260:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8014262:	231e      	movs	r3, #30
 8014264:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8014266:	4b33      	ldr	r3, [pc, #204]	@ (8014334 <ComputeRQL+0xe8>)
 8014268:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 801426a:	4b33      	ldr	r3, [pc, #204]	@ (8014338 <ComputeRQL+0xec>)
 801426c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 801426e:	f641 139a 	movw	r3, #6554	@ 0x199a
 8014272:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8014274:	79fb      	ldrb	r3, [r7, #7]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d103      	bne.n	8014282 <ComputeRQL+0x36>
		returnvalue = 0;
 801427a:	2300      	movs	r3, #0
 801427c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014280:	e04f      	b.n	8014322 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8014282:	79bb      	ldrb	r3, [r7, #6]
 8014284:	2b07      	cmp	r3, #7
 8014286:	d103      	bne.n	8014290 <ComputeRQL+0x44>
		returnvalue = 50;
 8014288:	2332      	movs	r3, #50	@ 0x32
 801428a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801428e:	e048      	b.n	8014322 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8014290:	683b      	ldr	r3, [r7, #0]
 8014292:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014296:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 801429a:	429a      	cmp	r2, r3
 801429c:	dd03      	ble.n	80142a6 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 801429e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80142a0:	041b      	lsls	r3, r3, #16
 80142a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80142a4:	e007      	b.n	80142b6 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 80142a6:	683b      	ldr	r3, [r7, #0]
 80142a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80142ac:	461a      	mov	r2, r3
 80142ae:	697b      	ldr	r3, [r7, #20]
 80142b0:	fb02 f303 	mul.w	r3, r2, r3
 80142b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 80142b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d020      	beq.n	80142fe <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 80142bc:	683b      	ldr	r3, [r7, #0]
 80142be:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80142c0:	461a      	mov	r2, r3
 80142c2:	69bb      	ldr	r3, [r7, #24]
 80142c4:	fb02 f303 	mul.w	r3, r2, r3
 80142c8:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 80142ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142cc:	085b      	lsrs	r3, r3, #1
 80142ce:	693a      	ldr	r2, [r7, #16]
 80142d0:	4413      	add	r3, r2
 80142d2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 80142d4:	693a      	ldr	r2, [r7, #16]
 80142d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80142d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80142dc:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 80142de:	693b      	ldr	r3, [r7, #16]
 80142e0:	041b      	lsls	r3, r3, #16
 80142e2:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 80142e4:	693a      	ldr	r2, [r7, #16]
 80142e6:	69fb      	ldr	r3, [r7, #28]
 80142e8:	429a      	cmp	r2, r3
 80142ea:	d804      	bhi.n	80142f6 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 80142ec:	69fa      	ldr	r2, [r7, #28]
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	1ad3      	subs	r3, r2, r3
 80142f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80142f4:	e006      	b.n	8014304 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 80142f6:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 80142fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80142fc:	e002      	b.n	8014304 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 80142fe:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8014302:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8014304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014306:	0c1b      	lsrs	r3, r3, #16
 8014308:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 801430a:	7bfb      	ldrb	r3, [r7, #15]
 801430c:	2b32      	cmp	r3, #50	@ 0x32
 801430e:	d905      	bls.n	801431c <ComputeRQL+0xd0>
 8014310:	7bfb      	ldrb	r3, [r7, #15]
 8014312:	2b64      	cmp	r3, #100	@ 0x64
 8014314:	bf28      	it	cs
 8014316:	2364      	movcs	r3, #100	@ 0x64
 8014318:	b2db      	uxtb	r3, r3
 801431a:	e000      	b.n	801431e <ComputeRQL+0xd2>
 801431c:	2332      	movs	r3, #50	@ 0x32
 801431e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8014322:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8014326:	4618      	mov	r0, r3
 8014328:	3734      	adds	r7, #52	@ 0x34
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop
 8014334:	0075b333 	.word	0x0075b333
 8014338:	0030cccd 	.word	0x0030cccd

0801433c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 801433c:	b480      	push	{r7}
 801433e:	b085      	sub	sp, #20
 8014340:	af00      	add	r7, sp, #0
 8014342:	4603      	mov	r3, r0
 8014344:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8014346:	79fb      	ldrb	r3, [r7, #7]
 8014348:	3b04      	subs	r3, #4
 801434a:	2b0f      	cmp	r3, #15
 801434c:	d83d      	bhi.n	80143ca <ConvertStatusLite+0x8e>
 801434e:	a201      	add	r2, pc, #4	@ (adr r2, 8014354 <ConvertStatusLite+0x18>)
 8014350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014354:	080143a7 	.word	0x080143a7
 8014358:	080143a1 	.word	0x080143a1
 801435c:	080143ad 	.word	0x080143ad
 8014360:	080143b3 	.word	0x080143b3
 8014364:	080143bf 	.word	0x080143bf
 8014368:	080143c5 	.word	0x080143c5
 801436c:	080143cb 	.word	0x080143cb
 8014370:	080143cb 	.word	0x080143cb
 8014374:	080143b9 	.word	0x080143b9
 8014378:	080143cb 	.word	0x080143cb
 801437c:	080143cb 	.word	0x080143cb
 8014380:	080143cb 	.word	0x080143cb
 8014384:	080143cb 	.word	0x080143cb
 8014388:	080143cb 	.word	0x080143cb
 801438c:	08014395 	.word	0x08014395
 8014390:	0801439b 	.word	0x0801439b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8014394:	230a      	movs	r3, #10
 8014396:	73fb      	strb	r3, [r7, #15]
		break;
 8014398:	e019      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 801439a:	2306      	movs	r3, #6
 801439c:	73fb      	strb	r3, [r7, #15]
		break;
 801439e:	e016      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 80143a0:	2304      	movs	r3, #4
 80143a2:	73fb      	strb	r3, [r7, #15]
		break;
 80143a4:	e013      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 80143a6:	2302      	movs	r3, #2
 80143a8:	73fb      	strb	r3, [r7, #15]
		break;
 80143aa:	e010      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 80143ac:	2301      	movs	r3, #1
 80143ae:	73fb      	strb	r3, [r7, #15]
		break;
 80143b0:	e00d      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 80143b2:	2307      	movs	r3, #7
 80143b4:	73fb      	strb	r3, [r7, #15]
		break;
 80143b6:	e00a      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 80143b8:	2309      	movs	r3, #9
 80143ba:	73fb      	strb	r3, [r7, #15]
		break;
 80143bc:	e007      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 80143be:	2303      	movs	r3, #3
 80143c0:	73fb      	strb	r3, [r7, #15]
		break;
 80143c2:	e004      	b.n	80143ce <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 80143c4:	2300      	movs	r3, #0
 80143c6:	73fb      	strb	r3, [r7, #15]
		break;
 80143c8:	e001      	b.n	80143ce <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 80143ca:	23ff      	movs	r3, #255	@ 0xff
 80143cc:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 80143ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80143d0:	4618      	mov	r0, r3
 80143d2:	3714      	adds	r7, #20
 80143d4:	46bd      	mov	sp, r7
 80143d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143da:	4770      	bx	lr

080143dc <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 80143dc:	b580      	push	{r7, lr}
 80143de:	b08c      	sub	sp, #48	@ 0x30
 80143e0:	af00      	add	r7, sp, #0
 80143e2:	60f8      	str	r0, [r7, #12]
 80143e4:	607b      	str	r3, [r7, #4]
 80143e6:	460b      	mov	r3, r1
 80143e8:	72fb      	strb	r3, [r7, #11]
 80143ea:	4613      	mov	r3, r2
 80143ec:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80143ee:	2300      	movs	r3, #0
 80143f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	685a      	ldr	r2, [r3, #4]
 80143f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143fa:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8014402:	f003 031f 	and.w	r3, r3, #31
 8014406:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 801440a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 801440e:	7afb      	ldrb	r3, [r7, #11]
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	4618      	mov	r0, r3
 8014414:	f7ff ff1a 	bl	801424c <ComputeRQL>
 8014418:	4603      	mov	r3, r0
 801441a:	461a      	mov	r2, r3
 801441c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801441e:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8014424:	025b      	lsls	r3, r3, #9
 8014426:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8014428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801442a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801442c:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8014432:	025b      	lsls	r3, r3, #9
 8014434:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8014436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014438:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801443a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8014440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014442:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014448:	025b      	lsls	r3, r3, #9
 801444a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 801444c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801444e:	6a3a      	ldr	r2, [r7, #32]
 8014450:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8014458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801445a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 801445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801445e:	2200      	movs	r2, #0
 8014460:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8014462:	7abb      	ldrb	r3, [r7, #10]
 8014464:	2b11      	cmp	r3, #17
 8014466:	d009      	beq.n	801447c <SetSimpleData+0xa0>
 8014468:	2b11      	cmp	r3, #17
 801446a:	dc0f      	bgt.n	801448c <SetSimpleData+0xb0>
 801446c:	2b03      	cmp	r3, #3
 801446e:	dc02      	bgt.n	8014476 <SetSimpleData+0x9a>
 8014470:	2b00      	cmp	r3, #0
 8014472:	dc03      	bgt.n	801447c <SetSimpleData+0xa0>
 8014474:	e00a      	b.n	801448c <SetSimpleData+0xb0>
 8014476:	2b0d      	cmp	r3, #13
 8014478:	d004      	beq.n	8014484 <SetSimpleData+0xa8>
 801447a:	e007      	b.n	801448c <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 801447c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801447e:	2205      	movs	r2, #5
 8014480:	76da      	strb	r2, [r3, #27]
		break;
 8014482:	e006      	b.n	8014492 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8014484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014486:	220d      	movs	r2, #13
 8014488:	76da      	strb	r2, [r3, #27]
		break;
 801448a:	e002      	b.n	8014492 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 801448c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801448e:	2200      	movs	r2, #0
 8014490:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8014492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014494:	7edb      	ldrb	r3, [r3, #27]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d108      	bne.n	80144ac <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 801449a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801449e:	4618      	mov	r0, r3
 80144a0:	f7ff ff4c 	bl	801433c <ConvertStatusLite>
 80144a4:	4603      	mov	r3, r0
 80144a6:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 80144a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80144aa:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80144b0:	025b      	lsls	r3, r3, #9
 80144b2:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80144b4:	68fb      	ldr	r3, [r7, #12]
 80144b6:	6a3a      	ldr	r2, [r7, #32]
 80144b8:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80144c0:	025b      	lsls	r3, r3, #9
 80144c2:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80144c4:	68fb      	ldr	r3, [r7, #12]
 80144c6:	6a3a      	ldr	r2, [r7, #32]
 80144c8:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 80144cc:	f107 0314 	add.w	r3, r7, #20
 80144d0:	461a      	mov	r2, r3
 80144d2:	2100      	movs	r1, #0
 80144d4:	68f8      	ldr	r0, [r7, #12]
 80144d6:	f7ff fddf 	bl	8014098 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 80144da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80144de:	2b06      	cmp	r3, #6
 80144e0:	bf0c      	ite	eq
 80144e2:	2301      	moveq	r3, #1
 80144e4:	2300      	movne	r3, #0
 80144e6:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 80144e8:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 80144ea:	f107 0319 	add.w	r3, r7, #25
 80144ee:	461a      	mov	r2, r3
 80144f0:	2100      	movs	r1, #0
 80144f2:	68f8      	ldr	r0, [r7, #12]
 80144f4:	f7ff fd74 	bl	8013fe0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 80144f8:	7e7b      	ldrb	r3, [r7, #25]
 80144fa:	2b01      	cmp	r3, #1
 80144fc:	d104      	bne.n	8014508 <SetSimpleData+0x12c>
 80144fe:	7ffb      	ldrb	r3, [r7, #31]
 8014500:	2b01      	cmp	r3, #1
 8014502:	d101      	bne.n	8014508 <SetSimpleData+0x12c>
 8014504:	2301      	movs	r3, #1
 8014506:	e000      	b.n	801450a <SetSimpleData+0x12e>
 8014508:	2300      	movs	r3, #0
 801450a:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	7fba      	ldrb	r2, [r7, #30]
 8014510:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8014514:	f107 0314 	add.w	r3, r7, #20
 8014518:	461a      	mov	r2, r3
 801451a:	2101      	movs	r1, #1
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f7ff fdbb 	bl	8014098 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8014522:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8014526:	2b04      	cmp	r3, #4
 8014528:	bf0c      	ite	eq
 801452a:	2301      	moveq	r3, #1
 801452c:	2300      	movne	r3, #0
 801452e:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8014530:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8014532:	f107 0319 	add.w	r3, r7, #25
 8014536:	461a      	mov	r2, r3
 8014538:	2101      	movs	r1, #1
 801453a:	68f8      	ldr	r0, [r7, #12]
 801453c:	f7ff fd50 	bl	8013fe0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8014540:	7e7b      	ldrb	r3, [r7, #25]
 8014542:	2b01      	cmp	r3, #1
 8014544:	d104      	bne.n	8014550 <SetSimpleData+0x174>
 8014546:	7f7b      	ldrb	r3, [r7, #29]
 8014548:	2b01      	cmp	r3, #1
 801454a:	d101      	bne.n	8014550 <SetSimpleData+0x174>
 801454c:	2301      	movs	r3, #1
 801454e:	e000      	b.n	8014552 <SetSimpleData+0x176>
 8014550:	2300      	movs	r3, #0
 8014552:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	7fba      	ldrb	r2, [r7, #30]
 8014558:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 801455c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801455e:	8b1b      	ldrh	r3, [r3, #24]
 8014560:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8014562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014564:	7edb      	ldrb	r3, [r3, #27]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d110      	bne.n	801458c <SetSimpleData+0x1b0>
 801456a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 801456e:	2b00      	cmp	r3, #0
 8014570:	da0c      	bge.n	801458c <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8014572:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8014576:	4b08      	ldr	r3, [pc, #32]	@ (8014598 <SetSimpleData+0x1bc>)
 8014578:	685b      	ldr	r3, [r3, #4]
 801457a:	429a      	cmp	r2, r3
 801457c:	da03      	bge.n	8014586 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 801457e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014580:	220e      	movs	r2, #14
 8014582:	76da      	strb	r2, [r3, #27]
 8014584:	e002      	b.n	801458c <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8014586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014588:	2200      	movs	r2, #0
 801458a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 801458c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8014590:	4618      	mov	r0, r3
 8014592:	3730      	adds	r7, #48	@ 0x30
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}
 8014598:	20000168 	.word	0x20000168

0801459c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b0a8      	sub	sp, #160	@ 0xa0
 80145a0:	af02      	add	r7, sp, #8
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80145a6:	2300      	movs	r3, #0
 80145a8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 80145ac:	f107 0308 	add.w	r3, r7, #8
 80145b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 80145b4:	221c      	movs	r2, #28
 80145b6:	21ff      	movs	r1, #255	@ 0xff
 80145b8:	6838      	ldr	r0, [r7, #0]
 80145ba:	f004 fa33 	bl	8018a24 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 80145be:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80145c2:	2102      	movs	r1, #2
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f001 f8ad 	bl	8015724 <VL53L1_get_device_results>
 80145ca:	4603      	mov	r3, r0
 80145cc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 80145d0:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d117      	bne.n	8014608 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 80145d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80145dc:	789a      	ldrb	r2, [r3, #2]
 80145de:	683b      	ldr	r3, [r7, #0]
 80145e0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 80145e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80145e6:	3304      	adds	r3, #4
 80145e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 80145ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80145f0:	78da      	ldrb	r2, [r3, #3]
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	9300      	str	r3, [sp, #0]
 80145f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80145fa:	2101      	movs	r1, #1
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f7ff feed 	bl	80143dc <SetSimpleData>
 8014602:	4603      	mov	r3, r0
 8014604:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8014608:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 801460c:	4618      	mov	r0, r3
 801460e:	3798      	adds	r7, #152	@ 0x98
 8014610:	46bd      	mov	sp, r7
 8014612:	bd80      	pop	{r7, pc}

08014614 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8014614:	b5b0      	push	{r4, r5, r7, lr}
 8014616:	b088      	sub	sp, #32
 8014618:	af04      	add	r7, sp, #16
 801461a:	6078      	str	r0, [r7, #4]
 801461c:	460b      	mov	r3, r1
 801461e:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014620:	2300      	movs	r3, #0
 8014622:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8014628:	2162      	movs	r1, #98	@ 0x62
 801462a:	6878      	ldr	r0, [r7, #4]
 801462c:	f001 fee9 	bl	8016402 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8014630:	68bb      	ldr	r3, [r7, #8]
 8014632:	2200      	movs	r2, #0
 8014634:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	2201      	movs	r2, #1
 801463a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	2200      	movs	r2, #0
 8014640:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8014642:	68bb      	ldr	r3, [r7, #8]
 8014644:	2201      	movs	r2, #1
 8014646:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	2201      	movs	r2, #1
 801464c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 801464e:	68bb      	ldr	r3, [r7, #8]
 8014650:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8014654:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 801465c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8014664:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	2264      	movs	r2, #100	@ 0x64
 801466a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8014672:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	2200      	movs	r2, #0
 8014678:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	f240 72db 	movw	r2, #2011	@ 0x7db
 8014682:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f001 fea0 	bl	80163cc <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 801468c:	78fb      	ldrb	r3, [r7, #3]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d008      	beq.n	80146a4 <VL53L1_data_init+0x90>
 8014692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d104      	bne.n	80146a4 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 f857 	bl	801474e <VL53L1_read_p2p_data>
 80146a0:	4603      	mov	r3, r0
 80146a2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80146a4:	68bb      	ldr	r3, [r7, #8]
 80146a6:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 80146aa:	4618      	mov	r0, r3
 80146ac:	f001 f9d2 	bl	8015a54 <VL53L1_init_refspadchar_config_struct>
 80146b0:	4603      	mov	r3, r0
 80146b2:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80146ba:	4618      	mov	r0, r3
 80146bc:	f001 f9ee 	bl	8015a9c <VL53L1_init_ssc_config_struct>
 80146c0:	4603      	mov	r3, r0
 80146c2:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 80146c4:	68bb      	ldr	r3, [r7, #8]
 80146c6:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80146d0:	4619      	mov	r1, r3
 80146d2:	4610      	mov	r0, r2
 80146d4:	f001 fa03 	bl	8015ade <VL53L1_init_xtalk_config_struct>
 80146d8:	4603      	mov	r3, r0
 80146da:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80146e2:	4618      	mov	r0, r3
 80146e4:	f001 fa5d 	bl	8015ba2 <VL53L1_init_offset_cal_config_struct>
 80146e8:	4603      	mov	r3, r0
 80146ea:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	33a4      	adds	r3, #164	@ 0xa4
 80146f0:	4618      	mov	r0, r3
 80146f2:	f001 fa7d 	bl	8015bf0 <VL53L1_init_tuning_parm_storage_struct>
 80146f6:	4603      	mov	r3, r0
 80146f8:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 80146fa:	2120      	movs	r1, #32
 80146fc:	6878      	ldr	r0, [r7, #4]
 80146fe:	f000 fc99 	bl	8015034 <VL53L1_set_vhv_loopbound>
 8014702:	4603      	mov	r3, r0
 8014704:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8014706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d116      	bne.n	801473c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 801470e:	68bb      	ldr	r3, [r7, #8]
 8014710:	7858      	ldrb	r0, [r3, #1]
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	8b1c      	ldrh	r4, [r3, #24]
 8014716:	68bb      	ldr	r3, [r7, #8]
 8014718:	689d      	ldr	r5, [r3, #8]
 801471a:	68bb      	ldr	r3, [r7, #8]
 801471c:	68db      	ldr	r3, [r3, #12]
 801471e:	68ba      	ldr	r2, [r7, #8]
 8014720:	6912      	ldr	r2, [r2, #16]
 8014722:	68b9      	ldr	r1, [r7, #8]
 8014724:	6949      	ldr	r1, [r1, #20]
 8014726:	9102      	str	r1, [sp, #8]
 8014728:	9201      	str	r2, [sp, #4]
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	462b      	mov	r3, r5
 801472e:	4622      	mov	r2, r4
 8014730:	4601      	mov	r1, r0
 8014732:	6878      	ldr	r0, [r7, #4]
 8014734:	f000 fab0 	bl	8014c98 <VL53L1_set_preset_mode>
 8014738:	4603      	mov	r3, r0
 801473a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f002 fbaf 	bl	8016ea0 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8014742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014746:	4618      	mov	r0, r3
 8014748:	3710      	adds	r7, #16
 801474a:	46bd      	mov	sp, r7
 801474c:	bdb0      	pop	{r4, r5, r7, pc}

0801474e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 801474e:	b580      	push	{r7, lr}
 8014750:	b084      	sub	sp, #16
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8014756:	2300      	movs	r3, #0
 8014758:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801475e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014762:	2b00      	cmp	r3, #0
 8014764:	d108      	bne.n	8014778 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 801476c:	4619      	mov	r1, r3
 801476e:	6878      	ldr	r0, [r7, #4]
 8014770:	f002 fdeb 	bl	801734a <VL53L1_get_static_nvm_managed>
 8014774:	4603      	mov	r3, r0
 8014776:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8014778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d107      	bne.n	8014790 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	3342      	adds	r3, #66	@ 0x42
 8014784:	4619      	mov	r1, r3
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f002 ff1d 	bl	80175c6 <VL53L1_get_customer_nvm_managed>
 801478c:	4603      	mov	r3, r0
 801478e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8014790:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d115      	bne.n	80147c4 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 801479e:	4619      	mov	r1, r3
 80147a0:	6878      	ldr	r0, [r7, #4]
 80147a2:	f003 fdf6 	bl	8018392 <VL53L1_get_nvm_copy_data>
 80147a6:	4603      	mov	r3, r0
 80147a8:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 80147aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d108      	bne.n	80147c4 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80147b2:	68bb      	ldr	r3, [r7, #8]
 80147b4:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	33f0      	adds	r3, #240	@ 0xf0
 80147bc:	4619      	mov	r1, r3
 80147be:	4610      	mov	r0, r2
 80147c0:	f001 ff81 	bl	80166c6 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 80147c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d109      	bne.n	80147e0 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 80147cc:	68bb      	ldr	r3, [r7, #8]
 80147ce:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80147d2:	461a      	mov	r2, r3
 80147d4:	21de      	movs	r1, #222	@ 0xde
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f7f6 fde0 	bl	800b39c <VL53L1_RdWord>
 80147dc:	4603      	mov	r3, r0
 80147de:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80147e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80147ea:	d204      	bcs.n	80147f6 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 80147f2:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 80147f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d107      	bne.n	801480e <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 80147fe:	68bb      	ldr	r3, [r7, #8]
 8014800:	339e      	adds	r3, #158	@ 0x9e
 8014802:	4619      	mov	r1, r3
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f000 f968 	bl	8014ada <VL53L1_get_mode_mitigation_roi>
 801480a:	4603      	mov	r3, r0
 801480c:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8014814:	2b00      	cmp	r3, #0
 8014816:	d114      	bne.n	8014842 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 801481e:	2b00      	cmp	r3, #0
 8014820:	d10f      	bne.n	8014842 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 8014828:	011b      	lsls	r3, r3, #4
 801482a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8014832:	68bb      	ldr	r3, [r7, #8]
 8014834:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8014838:	011b      	lsls	r3, r3, #4
 801483a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 801483c:	68bb      	ldr	r3, [r7, #8]
 801483e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8014842:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014846:	4618      	mov	r0, r3
 8014848:	3710      	adds	r7, #16
 801484a:	46bd      	mov	sp, r7
 801484c:	bd80      	pop	{r7, pc}

0801484e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 801484e:	b480      	push	{r7}
 8014850:	b085      	sub	sp, #20
 8014852:	af00      	add	r7, sp, #0
 8014854:	6078      	str	r0, [r7, #4]
 8014856:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014858:	2300      	movs	r3, #0
 801485a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8014866:	2b00      	cmp	r3, #0
 8014868:	d101      	bne.n	801486e <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801486a:	23f1      	movs	r3, #241	@ 0xf1
 801486c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 801486e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014872:	2b00      	cmp	r3, #0
 8014874:	d10c      	bne.n	8014890 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	683a      	ldr	r2, [r7, #0]
 801487a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 801487c:	68bb      	ldr	r3, [r7, #8]
 801487e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8014882:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8014890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014894:	4618      	mov	r0, r3
 8014896:	3714      	adds	r7, #20
 8014898:	46bd      	mov	sp, r7
 801489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801489e:	4770      	bx	lr

080148a0 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b088      	sub	sp, #32
 80148a4:	af02      	add	r7, sp, #8
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	60b9      	str	r1, [r7, #8]
 80148aa:	607a      	str	r2, [r7, #4]
 80148ac:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80148ae:	2300      	movs	r3, #0
 80148b0:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80148b6:	693b      	ldr	r3, [r7, #16]
 80148b8:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d101      	bne.n	80148c4 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80148c0:	23f1      	movs	r3, #241	@ 0xf1
 80148c2:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 80148c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d11b      	bne.n	8014904 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 80148cc:	693b      	ldr	r3, [r7, #16]
 80148ce:	68ba      	ldr	r2, [r7, #8]
 80148d0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80148d2:	693b      	ldr	r3, [r7, #16]
 80148d4:	687a      	ldr	r2, [r7, #4]
 80148d6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80148d8:	693b      	ldr	r3, [r7, #16]
 80148da:	683a      	ldr	r2, [r7, #0]
 80148dc:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 80148de:	693b      	ldr	r3, [r7, #16]
 80148e0:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 80148e4:	693b      	ldr	r3, [r7, #16]
 80148e6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80148ea:	693a      	ldr	r2, [r7, #16]
 80148ec:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 80148f0:	9201      	str	r2, [sp, #4]
 80148f2:	9300      	str	r3, [sp, #0]
 80148f4:	460b      	mov	r3, r1
 80148f6:	683a      	ldr	r2, [r7, #0]
 80148f8:	6879      	ldr	r1, [r7, #4]
 80148fa:	68b8      	ldr	r0, [r7, #8]
 80148fc:	f002 fa02 	bl	8016d04 <VL53L1_calc_timeout_register_values>
 8014900:	4603      	mov	r3, r0
 8014902:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8014904:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014908:	4618      	mov	r0, r3
 801490a:	3718      	adds	r7, #24
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}

08014910 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b088      	sub	sp, #32
 8014914:	af00      	add	r7, sp, #0
 8014916:	60f8      	str	r0, [r7, #12]
 8014918:	60b9      	str	r1, [r7, #8]
 801491a:	607a      	str	r2, [r7, #4]
 801491c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801491e:	2300      	movs	r3, #0
 8014920:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 801492a:	2300      	movs	r3, #0
 801492c:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 801492e:	69bb      	ldr	r3, [r7, #24]
 8014930:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8014934:	2b00      	cmp	r3, #0
 8014936:	d101      	bne.n	801493c <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8014938:	23f1      	movs	r3, #241	@ 0xf1
 801493a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 801493c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014940:	2b00      	cmp	r3, #0
 8014942:	d148      	bne.n	80149d6 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8014944:	69bb      	ldr	r3, [r7, #24]
 8014946:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 801494a:	69bb      	ldr	r3, [r7, #24]
 801494c:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8014950:	4619      	mov	r1, r3
 8014952:	4610      	mov	r0, r2
 8014954:	f002 f87d 	bl	8016a52 <VL53L1_calc_macro_period_us>
 8014958:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 801495a:	69bb      	ldr	r3, [r7, #24]
 801495c:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8014960:	6979      	ldr	r1, [r7, #20]
 8014962:	4618      	mov	r0, r3
 8014964:	f002 f935 	bl	8016bd2 <VL53L1_calc_timeout_us>
 8014968:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 801496e:	69bb      	ldr	r3, [r7, #24]
 8014970:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8014974:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8014976:	8a7b      	ldrh	r3, [r7, #18]
 8014978:	021b      	lsls	r3, r3, #8
 801497a:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 801497c:	69ba      	ldr	r2, [r7, #24]
 801497e:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8014982:	4413      	add	r3, r2
 8014984:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8014986:	8a7b      	ldrh	r3, [r7, #18]
 8014988:	6979      	ldr	r1, [r7, #20]
 801498a:	4618      	mov	r0, r3
 801498c:	f002 f961 	bl	8016c52 <VL53L1_calc_decoded_timeout_us>
 8014990:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8014996:	69bb      	ldr	r3, [r7, #24]
 8014998:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 801499c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 801499e:	8a7b      	ldrh	r3, [r7, #18]
 80149a0:	021b      	lsls	r3, r3, #8
 80149a2:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 80149a4:	69ba      	ldr	r2, [r7, #24]
 80149a6:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 80149aa:	4413      	add	r3, r2
 80149ac:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 80149ae:	8a7b      	ldrh	r3, [r7, #18]
 80149b0:	6979      	ldr	r1, [r7, #20]
 80149b2:	4618      	mov	r0, r3
 80149b4:	f002 f94d 	bl	8016c52 <VL53L1_calc_decoded_timeout_us>
 80149b8:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 80149be:	68bb      	ldr	r3, [r7, #8]
 80149c0:	681a      	ldr	r2, [r3, #0]
 80149c2:	69bb      	ldr	r3, [r7, #24]
 80149c4:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	69bb      	ldr	r3, [r7, #24]
 80149cc:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 80149ce:	683b      	ldr	r3, [r7, #0]
 80149d0:	681a      	ldr	r2, [r3, #0]
 80149d2:	69bb      	ldr	r3, [r7, #24]
 80149d4:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80149d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80149da:	4618      	mov	r0, r3
 80149dc:	3720      	adds	r7, #32
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}

080149e2 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80149e2:	b480      	push	{r7}
 80149e4:	b087      	sub	sp, #28
 80149e6:	af00      	add	r7, sp, #0
 80149e8:	60f8      	str	r0, [r7, #12]
 80149ea:	460b      	mov	r3, r1
 80149ec:	607a      	str	r2, [r7, #4]
 80149ee:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80149f0:	2300      	movs	r3, #0
 80149f2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 80149f8:	2301      	movs	r3, #1
 80149fa:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80149fc:	7afb      	ldrb	r3, [r7, #11]
 80149fe:	2b07      	cmp	r3, #7
 8014a00:	d81c      	bhi.n	8014a3c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8014a02:	7afb      	ldrb	r3, [r7, #11]
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d004      	beq.n	8014a12 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8014a08:	7afb      	ldrb	r3, [r7, #11]
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8014a10:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8014a12:	693b      	ldr	r3, [r7, #16]
 8014a14:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 8014a18:	7dbb      	ldrb	r3, [r7, #22]
 8014a1a:	4013      	ands	r3, r2
 8014a1c:	b2da      	uxtb	r2, r3
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8014a22:	7afb      	ldrb	r3, [r7, #11]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d00b      	beq.n	8014a40 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	781b      	ldrb	r3, [r3, #0]
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	7afb      	ldrb	r3, [r7, #11]
 8014a30:	fa42 f303 	asr.w	r3, r2, r3
 8014a34:	b2da      	uxtb	r2, r3
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	701a      	strb	r2, [r3, #0]
 8014a3a:	e001      	b.n	8014a40 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8014a3c:	23fc      	movs	r3, #252	@ 0xfc
 8014a3e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8014a40:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	371c      	adds	r7, #28
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4e:	4770      	bx	lr

08014a50 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b084      	sub	sp, #16
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	6078      	str	r0, [r7, #4]
 8014a58:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	7858      	ldrb	r0, [r3, #1]
 8014a66:	683b      	ldr	r3, [r7, #0]
 8014a68:	7819      	ldrb	r1, [r3, #0]
 8014a6a:	68bb      	ldr	r3, [r7, #8]
 8014a6c:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 8014a70:	461a      	mov	r2, r3
 8014a72:	f002 f9c0 	bl	8016df6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	7898      	ldrb	r0, [r3, #2]
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	78d9      	ldrb	r1, [r3, #3]
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8014a84:	461a      	mov	r2, r3
 8014a86:	f002 f9f5 	bl	8016e74 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8014a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}

08014a96 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8014a96:	b580      	push	{r7, lr}
 8014a98:	b084      	sub	sp, #16
 8014a9a:	af00      	add	r7, sp, #0
 8014a9c:	6078      	str	r0, [r7, #4]
 8014a9e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014aa0:	2300      	movs	r3, #0
 8014aa2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8014aa8:	68bb      	ldr	r3, [r7, #8]
 8014aaa:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 8014aae:	683b      	ldr	r3, [r7, #0]
 8014ab0:	3301      	adds	r3, #1
 8014ab2:	683a      	ldr	r2, [r7, #0]
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	f002 fb64 	bl	8017182 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8014aba:	68bb      	ldr	r3, [r7, #8]
 8014abc:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	1c99      	adds	r1, r3, #2
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	3303      	adds	r3, #3
 8014ac8:	461a      	mov	r2, r3
 8014aca:	f002 f9bb 	bl	8016e44 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8014ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3710      	adds	r7, #16
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}

08014ada <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8014ada:	b580      	push	{r7, lr}
 8014adc:	b086      	sub	sp, #24
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
 8014ae2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8014aec:	2300      	movs	r3, #0
 8014aee:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8014af0:	2300      	movs	r3, #0
 8014af2:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8014af4:	2300      	movs	r3, #0
 8014af6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8014af8:	693b      	ldr	r3, [r7, #16]
 8014afa:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 8014afe:	f107 020e 	add.w	r2, r7, #14
 8014b02:	f107 010d 	add.w	r1, r7, #13
 8014b06:	4618      	mov	r0, r3
 8014b08:	f002 fb3b 	bl	8017182 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8014b0c:	7bba      	ldrb	r2, [r7, #14]
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8014b12:	7b7a      	ldrb	r2, [r7, #13]
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 8014b1e:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8014b20:	7bfb      	ldrb	r3, [r7, #15]
 8014b22:	091b      	lsrs	r3, r3, #4
 8014b24:	b2da      	uxtb	r2, r3
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8014b2a:	7bfb      	ldrb	r3, [r7, #15]
 8014b2c:	f003 030f 	and.w	r3, r3, #15
 8014b30:	b2da      	uxtb	r2, r3
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8014b36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	3718      	adds	r7, #24
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd80      	pop	{r7, pc}
	...

08014b44 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b087      	sub	sp, #28
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	60f8      	str	r0, [r7, #12]
 8014b4c:	607a      	str	r2, [r7, #4]
 8014b4e:	603b      	str	r3, [r7, #0]
 8014b50:	460b      	mov	r3, r1
 8014b52:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014b54:	2300      	movs	r3, #0
 8014b56:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014b58:	68fb      	ldr	r3, [r7, #12]
 8014b5a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8014b5c:	7afb      	ldrb	r3, [r7, #11]
 8014b5e:	3b01      	subs	r3, #1
 8014b60:	2b25      	cmp	r3, #37	@ 0x25
 8014b62:	f200 808e 	bhi.w	8014c82 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8014b66:	a201      	add	r2, pc, #4	@ (adr r2, 8014b6c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8014b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b6c:	08014c05 	.word	0x08014c05
 8014b70:	08014c05 	.word	0x08014c05
 8014b74:	08014c05 	.word	0x08014c05
 8014b78:	08014c05 	.word	0x08014c05
 8014b7c:	08014c05 	.word	0x08014c05
 8014b80:	08014c2f 	.word	0x08014c2f
 8014b84:	08014c2f 	.word	0x08014c2f
 8014b88:	08014c2f 	.word	0x08014c2f
 8014b8c:	08014c83 	.word	0x08014c83
 8014b90:	08014c83 	.word	0x08014c83
 8014b94:	08014c83 	.word	0x08014c83
 8014b98:	08014c83 	.word	0x08014c83
 8014b9c:	08014c83 	.word	0x08014c83
 8014ba0:	08014c83 	.word	0x08014c83
 8014ba4:	08014c83 	.word	0x08014c83
 8014ba8:	08014c83 	.word	0x08014c83
 8014bac:	08014c05 	.word	0x08014c05
 8014bb0:	08014c2f 	.word	0x08014c2f
 8014bb4:	08014c83 	.word	0x08014c83
 8014bb8:	08014c83 	.word	0x08014c83
 8014bbc:	08014c83 	.word	0x08014c83
 8014bc0:	08014c83 	.word	0x08014c83
 8014bc4:	08014c83 	.word	0x08014c83
 8014bc8:	08014c83 	.word	0x08014c83
 8014bcc:	08014c83 	.word	0x08014c83
 8014bd0:	08014c83 	.word	0x08014c83
 8014bd4:	08014c83 	.word	0x08014c83
 8014bd8:	08014c83 	.word	0x08014c83
 8014bdc:	08014c83 	.word	0x08014c83
 8014be0:	08014c83 	.word	0x08014c83
 8014be4:	08014c83 	.word	0x08014c83
 8014be8:	08014c83 	.word	0x08014c83
 8014bec:	08014c83 	.word	0x08014c83
 8014bf0:	08014c83 	.word	0x08014c83
 8014bf4:	08014c83 	.word	0x08014c83
 8014bf8:	08014c59 	.word	0x08014c59
 8014bfc:	08014c59 	.word	0x08014c59
 8014c00:	08014c59 	.word	0x08014c59
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 8014c1e:	6a3b      	ldr	r3, [r7, #32]
 8014c20:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8014c22:	693b      	ldr	r3, [r7, #16]
 8014c24:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 8014c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c2a:	601a      	str	r2, [r3, #0]
	break;
 8014c2c:	e02c      	b.n	8014c88 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8014c42:	693b      	ldr	r3, [r7, #16]
 8014c44:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8014c48:	6a3b      	ldr	r3, [r7, #32]
 8014c4a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8014c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c54:	601a      	str	r2, [r3, #0]
	break;
 8014c56:	e017      	b.n	8014c88 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8014c58:	693b      	ldr	r3, [r7, #16]
 8014c5a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8014c62:	693b      	ldr	r3, [r7, #16]
 8014c64:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8014c68:	683b      	ldr	r3, [r7, #0]
 8014c6a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8014c6c:	693b      	ldr	r3, [r7, #16]
 8014c6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8014c72:	6a3b      	ldr	r3, [r7, #32]
 8014c74:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 8014c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c7e:	601a      	str	r2, [r3, #0]
	break;
 8014c80:	e002      	b.n	8014c88 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8014c82:	23fc      	movs	r3, #252	@ 0xfc
 8014c84:	75fb      	strb	r3, [r7, #23]
		break;
 8014c86:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8014c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	371c      	adds	r7, #28
 8014c90:	46bd      	mov	sp, r7
 8014c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c96:	4770      	bx	lr

08014c98 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b092      	sub	sp, #72	@ 0x48
 8014c9c:	af04      	add	r7, sp, #16
 8014c9e:	60f8      	str	r0, [r7, #12]
 8014ca0:	607b      	str	r3, [r7, #4]
 8014ca2:	460b      	mov	r3, r1
 8014ca4:	72fb      	strb	r3, [r7, #11]
 8014ca6:	4613      	mov	r3, r2
 8014ca8:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014caa:	2300      	movs	r3, #0
 8014cac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8014cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014cba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8014cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cbe:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8014cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8014cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cc6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 8014cca:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8014ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cce:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 8014cd2:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8014cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cd6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8014cda:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8014cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cde:	33a4      	adds	r3, #164	@ 0xa4
 8014ce0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8014ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ce4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8014ce8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8014cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cec:	7afa      	ldrb	r2, [r7, #11]
 8014cee:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8014cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014cf4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8014cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cf8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014cfa:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8014cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014cfe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014d00:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8014d02:	2103      	movs	r1, #3
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	f001 fb7c 	bl	8016402 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8014d0a:	7afb      	ldrb	r3, [r7, #11]
 8014d0c:	3b01      	subs	r3, #1
 8014d0e:	2b25      	cmp	r3, #37	@ 0x25
 8014d10:	f200 810c 	bhi.w	8014f2c <VL53L1_set_preset_mode+0x294>
 8014d14:	a201      	add	r2, pc, #4	@ (adr r2, 8014d1c <VL53L1_set_preset_mode+0x84>)
 8014d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d1a:	bf00      	nop
 8014d1c:	08014db5 	.word	0x08014db5
 8014d20:	08014dd1 	.word	0x08014dd1
 8014d24:	08014ded 	.word	0x08014ded
 8014d28:	08014e09 	.word	0x08014e09
 8014d2c:	08014e25 	.word	0x08014e25
 8014d30:	08014e41 	.word	0x08014e41
 8014d34:	08014e5d 	.word	0x08014e5d
 8014d38:	08014e79 	.word	0x08014e79
 8014d3c:	08014f2d 	.word	0x08014f2d
 8014d40:	08014f2d 	.word	0x08014f2d
 8014d44:	08014f2d 	.word	0x08014f2d
 8014d48:	08014f2d 	.word	0x08014f2d
 8014d4c:	08014f2d 	.word	0x08014f2d
 8014d50:	08014f2d 	.word	0x08014f2d
 8014d54:	08014f2d 	.word	0x08014f2d
 8014d58:	08014f2d 	.word	0x08014f2d
 8014d5c:	08014e95 	.word	0x08014e95
 8014d60:	08014eb1 	.word	0x08014eb1
 8014d64:	08014f2d 	.word	0x08014f2d
 8014d68:	08014f2d 	.word	0x08014f2d
 8014d6c:	08014f2d 	.word	0x08014f2d
 8014d70:	08014f2d 	.word	0x08014f2d
 8014d74:	08014f2d 	.word	0x08014f2d
 8014d78:	08014f2d 	.word	0x08014f2d
 8014d7c:	08014f2d 	.word	0x08014f2d
 8014d80:	08014f2d 	.word	0x08014f2d
 8014d84:	08014f2d 	.word	0x08014f2d
 8014d88:	08014f2d 	.word	0x08014f2d
 8014d8c:	08014f2d 	.word	0x08014f2d
 8014d90:	08014f2d 	.word	0x08014f2d
 8014d94:	08014f2d 	.word	0x08014f2d
 8014d98:	08014f2d 	.word	0x08014f2d
 8014d9c:	08014f2d 	.word	0x08014f2d
 8014da0:	08014f2d 	.word	0x08014f2d
 8014da4:	08014f2d 	.word	0x08014f2d
 8014da8:	08014ecd 	.word	0x08014ecd
 8014dac:	08014eed 	.word	0x08014eed
 8014db0:	08014f0d 	.word	0x08014f0d

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8014db4:	69bb      	ldr	r3, [r7, #24]
 8014db6:	9301      	str	r3, [sp, #4]
 8014db8:	69fb      	ldr	r3, [r7, #28]
 8014dba:	9300      	str	r3, [sp, #0]
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014dc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014dc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014dc4:	f000 ffa0 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 8014dc8:	4603      	mov	r3, r0
 8014dca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014dce:	e0b1      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8014dd0:	69bb      	ldr	r3, [r7, #24]
 8014dd2:	9301      	str	r3, [sp, #4]
 8014dd4:	69fb      	ldr	r3, [r7, #28]
 8014dd6:	9300      	str	r3, [sp, #0]
 8014dd8:	6a3b      	ldr	r3, [r7, #32]
 8014dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ddc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014dde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014de0:	f001 f8b0 	bl	8015f44 <VL53L1_preset_mode_standard_ranging_short_range>
 8014de4:	4603      	mov	r3, r0
 8014de6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014dea:	e0a3      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	9301      	str	r3, [sp, #4]
 8014df0:	69fb      	ldr	r3, [r7, #28]
 8014df2:	9300      	str	r3, [sp, #0]
 8014df4:	6a3b      	ldr	r3, [r7, #32]
 8014df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014df8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014dfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014dfc:	f001 f8e3 	bl	8015fc6 <VL53L1_preset_mode_standard_ranging_long_range>
 8014e00:	4603      	mov	r3, r0
 8014e02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014e06:	e095      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 8014e08:	69bb      	ldr	r3, [r7, #24]
 8014e0a:	9301      	str	r3, [sp, #4]
 8014e0c:	69fb      	ldr	r3, [r7, #28]
 8014e0e:	9300      	str	r3, [sp, #0]
 8014e10:	6a3b      	ldr	r3, [r7, #32]
 8014e12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e18:	f001 f916 	bl	8016048 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014e22:	e087      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 8014e24:	69bb      	ldr	r3, [r7, #24]
 8014e26:	9301      	str	r3, [sp, #4]
 8014e28:	69fb      	ldr	r3, [r7, #28]
 8014e2a:	9300      	str	r3, [sp, #0]
 8014e2c:	6a3b      	ldr	r3, [r7, #32]
 8014e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e32:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e34:	f001 f92d 	bl	8016092 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014e3e:	e079      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8014e40:	69bb      	ldr	r3, [r7, #24]
 8014e42:	9301      	str	r3, [sp, #4]
 8014e44:	69fb      	ldr	r3, [r7, #28]
 8014e46:	9300      	str	r3, [sp, #0]
 8014e48:	6a3b      	ldr	r3, [r7, #32]
 8014e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e50:	f001 f944 	bl	80160dc <VL53L1_preset_mode_timed_ranging>
 8014e54:	4603      	mov	r3, r0
 8014e56:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014e5a:	e06b      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 8014e5c:	69bb      	ldr	r3, [r7, #24]
 8014e5e:	9301      	str	r3, [sp, #4]
 8014e60:	69fb      	ldr	r3, [r7, #28]
 8014e62:	9300      	str	r3, [sp, #0]
 8014e64:	6a3b      	ldr	r3, [r7, #32]
 8014e66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e6c:	f001 f970 	bl	8016150 <VL53L1_preset_mode_timed_ranging_short_range>
 8014e70:	4603      	mov	r3, r0
 8014e72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014e76:	e05d      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8014e78:	69bb      	ldr	r3, [r7, #24]
 8014e7a:	9301      	str	r3, [sp, #4]
 8014e7c:	69fb      	ldr	r3, [r7, #28]
 8014e7e:	9300      	str	r3, [sp, #0]
 8014e80:	6a3b      	ldr	r3, [r7, #32]
 8014e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014e86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014e88:	f001 f99c 	bl	80161c4 <VL53L1_preset_mode_timed_ranging_long_range>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014e92:	e04f      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8014e94:	69bb      	ldr	r3, [r7, #24]
 8014e96:	9301      	str	r3, [sp, #4]
 8014e98:	69fb      	ldr	r3, [r7, #28]
 8014e9a:	9300      	str	r3, [sp, #0]
 8014e9c:	6a3b      	ldr	r3, [r7, #32]
 8014e9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ea4:	f001 fa70 	bl	8016388 <VL53L1_preset_mode_olt>
 8014ea8:	4603      	mov	r3, r0
 8014eaa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014eae:	e041      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8014eb0:	69bb      	ldr	r3, [r7, #24]
 8014eb2:	9301      	str	r3, [sp, #4]
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	9300      	str	r3, [sp, #0]
 8014eb8:	6a3b      	ldr	r3, [r7, #32]
 8014eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ebc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014ebe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ec0:	f001 fa2c 	bl	801631c <VL53L1_preset_mode_singleshot_ranging>
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8014eca:	e033      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	9302      	str	r3, [sp, #8]
 8014ed0:	69bb      	ldr	r3, [r7, #24]
 8014ed2:	9301      	str	r3, [sp, #4]
 8014ed4:	69fb      	ldr	r3, [r7, #28]
 8014ed6:	9300      	str	r3, [sp, #0]
 8014ed8:	6a3b      	ldr	r3, [r7, #32]
 8014eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014edc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014ede:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014ee0:	f001 f9d0 	bl	8016284 <VL53L1_preset_mode_low_power_auto_short_ranging>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8014eea:	e023      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	9302      	str	r3, [sp, #8]
 8014ef0:	69bb      	ldr	r3, [r7, #24]
 8014ef2:	9301      	str	r3, [sp, #4]
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	9300      	str	r3, [sp, #0]
 8014ef8:	6a3b      	ldr	r3, [r7, #32]
 8014efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014efc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014efe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f00:	f001 f99a 	bl	8016238 <VL53L1_preset_mode_low_power_auto_ranging>
 8014f04:	4603      	mov	r3, r0
 8014f06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8014f0a:	e013      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	9302      	str	r3, [sp, #8]
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	9301      	str	r3, [sp, #4]
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	9300      	str	r3, [sp, #0]
 8014f18:	6a3b      	ldr	r3, [r7, #32]
 8014f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014f1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014f20:	f001 f9d6 	bl	80162d0 <VL53L1_preset_mode_low_power_auto_long_ranging>
 8014f24:	4603      	mov	r3, r0
 8014f26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8014f2a:	e003      	b.n	8014f34 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8014f2c:	23fc      	movs	r3, #252	@ 0xfc
 8014f2e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8014f32:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8014f34:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d105      	bne.n	8014f48 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 8014f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014f3e:	893a      	ldrh	r2, [r7, #8]
 8014f40:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8014f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f44:	893a      	ldrh	r2, [r7, #8]
 8014f46:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8014f48:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d108      	bne.n	8014f62 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8014f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014f54:	6879      	ldr	r1, [r7, #4]
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f7ff fca2 	bl	80148a0 <VL53L1_set_timeouts_us>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8014f62:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d106      	bne.n	8014f78 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 8014f6a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014f6c:	68f8      	ldr	r0, [r7, #12]
 8014f6e:	f7ff fc6e 	bl	801484e <VL53L1_set_inter_measurement_period_ms>
 8014f72:	4603      	mov	r3, r0
 8014f74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8014f78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3738      	adds	r7, #56	@ 0x38
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}

08014f84 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8014f84:	b480      	push	{r7}
 8014f86:	b085      	sub	sp, #20
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8014fa0:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	3714      	adds	r7, #20
 8014fa8:	46bd      	mov	sp, r7
 8014faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fae:	4770      	bx	lr

08014fb0 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b085      	sub	sp, #20
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	460b      	mov	r3, r1
 8014fba:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	887a      	ldrh	r2, [r7, #2]
 8014fc8:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8014fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8014fd0:	4618      	mov	r0, r3
 8014fd2:	3714      	adds	r7, #20
 8014fd4:	46bd      	mov	sp, r7
 8014fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fda:	4770      	bx	lr

08014fdc <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8014fdc:	b480      	push	{r7}
 8014fde:	b085      	sub	sp, #20
 8014fe0:	af00      	add	r7, sp, #0
 8014fe2:	6078      	str	r0, [r7, #4]
 8014fe4:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8014fee:	68bb      	ldr	r3, [r7, #8]
 8014ff0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8014ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3714      	adds	r7, #20
 8015000:	46bd      	mov	sp, r7
 8015002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015006:	4770      	bx	lr

08015008 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 8015008:	b480      	push	{r7}
 801500a:	b085      	sub	sp, #20
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	460b      	mov	r3, r1
 8015012:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015014:	2300      	movs	r3, #0
 8015016:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	887a      	ldrh	r2, [r7, #2]
 8015020:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 8015024:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8015028:	4618      	mov	r0, r3
 801502a:	3714      	adds	r7, #20
 801502c:	46bd      	mov	sp, r7
 801502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015032:	4770      	bx	lr

08015034 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8015034:	b480      	push	{r7}
 8015036:	b085      	sub	sp, #20
 8015038:	af00      	add	r7, sp, #0
 801503a:	6078      	str	r0, [r7, #4]
 801503c:	460b      	mov	r3, r1
 801503e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015040:	2300      	movs	r3, #0
 8015042:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8015048:	68bb      	ldr	r3, [r7, #8]
 801504a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 801504e:	f003 0303 	and.w	r3, r3, #3
 8015052:	b2da      	uxtb	r2, r3
 8015054:	78fb      	ldrb	r3, [r7, #3]
 8015056:	009b      	lsls	r3, r3, #2
 8015058:	b2db      	uxtb	r3, r3
 801505a:	4413      	add	r3, r2
 801505c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 801505e:	68bb      	ldr	r3, [r7, #8]
 8015060:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8015064:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8015068:	4618      	mov	r0, r3
 801506a:	3714      	adds	r7, #20
 801506c:	46bd      	mov	sp, r7
 801506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015072:	4770      	bx	lr

08015074 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b0d0      	sub	sp, #320	@ 0x140
 8015078:	af00      	add	r7, sp, #0
 801507a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801507e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015082:	6018      	str	r0, [r3, #0]
 8015084:	4608      	mov	r0, r1
 8015086:	4611      	mov	r1, r2
 8015088:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801508c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8015090:	4602      	mov	r2, r0
 8015092:	701a      	strb	r2, [r3, #0]
 8015094:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015098:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801509c:	460a      	mov	r2, r1
 801509e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80150a0:	2300      	movs	r3, #0
 80150a2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80150a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80150aa:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 80150b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150b8:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 80150bc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 80150c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150c4:	3342      	adds	r3, #66	@ 0x42
 80150c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 80150ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80150d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80150d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150da:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80150de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80150e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150e6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80150ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80150ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150f2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80150f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80150fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80150fe:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8015102:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8015106:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801510a:	332c      	adds	r3, #44	@ 0x2c
 801510c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8015110:	f107 030c 	add.w	r3, r7, #12
 8015114:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 8015118:	2300      	movs	r3, #0
 801511a:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 801511e:	2300      	movs	r3, #0
 8015120:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 8015124:	2300      	movs	r3, #0
 8015126:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 801512a:	2300      	movs	r3, #0
 801512c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8015130:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015134:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8015138:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 801513c:	7812      	ldrb	r2, [r2, #0]
 801513e:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8015140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015144:	791b      	ldrb	r3, [r3, #4]
 8015146:	b25b      	sxtb	r3, r3
 8015148:	f003 030f 	and.w	r3, r3, #15
 801514c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 801514e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015152:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8015156:	f993 3000 	ldrsb.w	r3, [r3]
 801515a:	4313      	orrs	r3, r2
 801515c:	b25b      	sxtb	r3, r3
 801515e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8015160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015164:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8015166:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801516a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 801516e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015172:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8015176:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801517a:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 801517e:	2bff      	cmp	r3, #255	@ 0xff
 8015180:	d104      	bne.n	801518c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8015182:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015186:	2200      	movs	r2, #0
 8015188:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 801518c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015190:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015194:	2b01      	cmp	r3, #1
 8015196:	d139      	bne.n	801520c <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8015198:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801519c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d133      	bne.n	801520c <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 80151a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151a8:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 80151ac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151b0:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 80151b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151b8:	2220      	movs	r2, #32
 80151ba:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 80151be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151c2:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 80151c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d10c      	bne.n	80151e8 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 80151ce:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151d2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	b29b      	uxth	r3, r3
 80151dc:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 80151de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151e2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 80151e6:	e004      	b.n	80151f2 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 80151e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80151ec:	2200      	movs	r2, #0
 80151ee:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 80151f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80151f6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80151fa:	781b      	ldrb	r3, [r3, #0]
 80151fc:	2b04      	cmp	r3, #4
 80151fe:	d805      	bhi.n	801520c <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8015200:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015204:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015208:	2205      	movs	r2, #5
 801520a:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 801520c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015210:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015214:	2b01      	cmp	r3, #1
 8015216:	d113      	bne.n	8015240 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8015218:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801521c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8015220:	2b01      	cmp	r3, #1
 8015222:	d10d      	bne.n	8015240 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8015224:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015228:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 801522c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8015230:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8015234:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015238:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801523c:	2206      	movs	r2, #6
 801523e:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8015240:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015244:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015248:	781b      	ldrb	r3, [r3, #0]
 801524a:	3b01      	subs	r3, #1
 801524c:	2b05      	cmp	r3, #5
 801524e:	d827      	bhi.n	80152a0 <VL53L1_init_and_start_range+0x22c>
 8015250:	a201      	add	r2, pc, #4	@ (adr r2, 8015258 <VL53L1_init_and_start_range+0x1e4>)
 8015252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015256:	bf00      	nop
 8015258:	08015299 	.word	0x08015299
 801525c:	08015291 	.word	0x08015291
 8015260:	08015289 	.word	0x08015289
 8015264:	08015281 	.word	0x08015281
 8015268:	08015279 	.word	0x08015279
 801526c:	08015271 	.word	0x08015271
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8015270:	2301      	movs	r3, #1
 8015272:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015276:	e017      	b.n	80152a8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8015278:	230d      	movs	r3, #13
 801527a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 801527e:	e013      	b.n	80152a8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8015280:	2324      	movs	r3, #36	@ 0x24
 8015282:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015286:	e00f      	b.n	80152a8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8015288:	2344      	movs	r3, #68	@ 0x44
 801528a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 801528e:	e00b      	b.n	80152a8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8015290:	235a      	movs	r3, #90	@ 0x5a
 8015292:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8015296:	e007      	b.n	80152a8 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8015298:	2371      	movs	r3, #113	@ 0x71
 801529a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 801529e:	e003      	b.n	80152a8 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80152a0:	2383      	movs	r3, #131	@ 0x83
 80152a2:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 80152a6:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 80152a8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80152ac:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 80152b0:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 80152b4:	f107 030c 	add.w	r3, r7, #12
 80152b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80152bc:	2300      	movs	r3, #0
 80152be:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80152c2:	e00b      	b.n	80152dc <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 80152c4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80152c8:	1c5a      	adds	r2, r3, #1
 80152ca:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 80152ce:	2200      	movs	r2, #0
 80152d0:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 80152d2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 80152d6:	3301      	adds	r3, #1
 80152d8:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 80152dc:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 80152e0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d3ed      	bcc.n	80152c4 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 80152e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80152ec:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	2b05      	cmp	r3, #5
 80152f4:	d917      	bls.n	8015326 <VL53L1_init_and_start_range+0x2b2>
 80152f6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d113      	bne.n	8015326 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80152fe:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015302:	f1c3 0301 	rsb	r3, r3, #1
 8015306:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 801530a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 801530e:	f107 020c 	add.w	r2, r7, #12
 8015312:	4413      	add	r3, r2
 8015314:	461a      	mov	r2, r3
 8015316:	210b      	movs	r1, #11
 8015318:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 801531c:	f001 ff60 	bl	80171e0 <VL53L1_i2c_encode_static_nvm_managed>
 8015320:	4603      	mov	r3, r0
 8015322:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8015326:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801532a:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801532e:	781b      	ldrb	r3, [r3, #0]
 8015330:	2b04      	cmp	r3, #4
 8015332:	d917      	bls.n	8015364 <VL53L1_init_and_start_range+0x2f0>
 8015334:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015338:	2b00      	cmp	r3, #0
 801533a:	d113      	bne.n	8015364 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801533c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015340:	f1c3 030d 	rsb	r3, r3, #13
 8015344:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015348:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 801534c:	f107 020c 	add.w	r2, r7, #12
 8015350:	4413      	add	r3, r2
 8015352:	461a      	mov	r2, r3
 8015354:	2117      	movs	r1, #23
 8015356:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 801535a:	f002 f81d 	bl	8017398 <VL53L1_i2c_encode_customer_nvm_managed>
 801535e:	4603      	mov	r3, r0
 8015360:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8015364:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015368:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	2b03      	cmp	r3, #3
 8015370:	d917      	bls.n	80153a2 <VL53L1_init_and_start_range+0x32e>
 8015372:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015376:	2b00      	cmp	r3, #0
 8015378:	d113      	bne.n	80153a2 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 801537a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 801537e:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8015382:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015386:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 801538a:	f107 020c 	add.w	r2, r7, #12
 801538e:	4413      	add	r3, r2
 8015390:	461a      	mov	r2, r3
 8015392:	2120      	movs	r1, #32
 8015394:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8015398:	f002 f93c 	bl	8017614 <VL53L1_i2c_encode_static_config>
 801539c:	4603      	mov	r3, r0
 801539e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80153a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80153a6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80153aa:	781b      	ldrb	r3, [r3, #0]
 80153ac:	2b02      	cmp	r3, #2
 80153ae:	d917      	bls.n	80153e0 <VL53L1_init_and_start_range+0x36c>
 80153b0:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d113      	bne.n	80153e0 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80153b8:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80153bc:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 80153c0:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80153c4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 80153c8:	f107 020c 	add.w	r2, r7, #12
 80153cc:	4413      	add	r3, r2
 80153ce:	461a      	mov	r2, r3
 80153d0:	2116      	movs	r1, #22
 80153d2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80153d6:	f002 fa00 	bl	80177da <VL53L1_i2c_encode_general_config>
 80153da:	4603      	mov	r3, r0
 80153dc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 80153e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80153e4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	2b01      	cmp	r3, #1
 80153ec:	d917      	bls.n	801541e <VL53L1_init_and_start_range+0x3aa>
 80153ee:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d113      	bne.n	801541e <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80153f6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80153fa:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 80153fe:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8015402:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8015406:	f107 020c 	add.w	r2, r7, #12
 801540a:	4413      	add	r3, r2
 801540c:	461a      	mov	r2, r3
 801540e:	2117      	movs	r1, #23
 8015410:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8015414:	f002 fa65 	bl	80178e2 <VL53L1_i2c_encode_timing_config>
 8015418:	4603      	mov	r3, r0
 801541a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 801541e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8015422:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d036      	beq.n	801549a <VL53L1_init_and_start_range+0x426>
 801542c:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015430:	2b00      	cmp	r3, #0
 8015432:	d132      	bne.n	801549a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8015434:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8015438:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 801543c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8015440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015444:	791b      	ldrb	r3, [r3, #4]
 8015446:	f003 0320 	and.w	r3, r3, #32
 801544a:	2b00      	cmp	r3, #0
 801544c:	d017      	beq.n	801547e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 801544e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015452:	789b      	ldrb	r3, [r3, #2]
 8015454:	f043 0301 	orr.w	r3, r3, #1
 8015458:	b2da      	uxtb	r2, r3
 801545a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801545e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8015460:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015464:	789b      	ldrb	r3, [r3, #2]
 8015466:	f043 0301 	orr.w	r3, r3, #1
 801546a:	b2da      	uxtb	r2, r3
 801546c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015470:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8015472:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8015476:	789a      	ldrb	r2, [r3, #2]
 8015478:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801547c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 801547e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8015482:	f107 020c 	add.w	r2, r7, #12
 8015486:	4413      	add	r3, r2
 8015488:	461a      	mov	r2, r3
 801548a:	2112      	movs	r1, #18
 801548c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8015490:	f002 faa9 	bl	80179e6 <VL53L1_i2c_encode_dynamic_config>
 8015494:	4603      	mov	r3, r0
 8015496:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 801549a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d113      	bne.n	80154ca <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 80154a2:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 80154a6:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 80154aa:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80154ae:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 80154b2:	f107 020c 	add.w	r2, r7, #12
 80154b6:	4413      	add	r3, r2
 80154b8:	461a      	mov	r2, r3
 80154ba:	2105      	movs	r1, #5
 80154bc:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80154c0:	f002 fb16 	bl	8017af0 <VL53L1_i2c_encode_system_control>
 80154c4:	4603      	mov	r3, r0
 80154c6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 80154ca:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d10f      	bne.n	80154f2 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 80154d2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 80154d6:	f107 020c 	add.w	r2, r7, #12
 80154da:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 80154de:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80154e2:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 80154e6:	6800      	ldr	r0, [r0, #0]
 80154e8:	f7f5 febd 	bl	800b266 <VL53L1_WriteMulti>
 80154ec:	4603      	mov	r3, r0
 80154ee:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 80154f2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d109      	bne.n	801550e <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 80154fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80154fe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8015502:	6818      	ldr	r0, [r3, #0]
 8015504:	f000 ffa6 	bl	8016454 <VL53L1_update_ll_driver_rd_state>
 8015508:	4603      	mov	r3, r0
 801550a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 801550e:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8015512:	2b00      	cmp	r3, #0
 8015514:	d109      	bne.n	801552a <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8015516:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801551a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801551e:	6818      	ldr	r0, [r3, #0]
 8015520:	f001 f86b 	bl	80165fa <VL53L1_update_ll_driver_cfg_state>
 8015524:	4603      	mov	r3, r0
 8015526:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 801552a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 801552e:	4618      	mov	r0, r3
 8015530:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8015534:	46bd      	mov	sp, r7
 8015536:	bd80      	pop	{r7, pc}

08015538 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8015538:	b580      	push	{r7, lr}
 801553a:	b084      	sub	sp, #16
 801553c:	af00      	add	r7, sp, #0
 801553e:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015540:	2300      	movs	r3, #0
 8015542:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 801554e:	b25b      	sxtb	r3, r3
 8015550:	f003 030f 	and.w	r3, r3, #15
 8015554:	b25b      	sxtb	r3, r3
 8015556:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801555a:	b25b      	sxtb	r3, r3
 801555c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 801556a:	4619      	mov	r1, r3
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f002 fafa 	bl	8017b66 <VL53L1_set_system_control>
 8015572:	4603      	mov	r3, r0
 8015574:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8015576:	68bb      	ldr	r3, [r7, #8]
 8015578:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 801557c:	f003 030f 	and.w	r3, r3, #15
 8015580:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8015588:	2103      	movs	r1, #3
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f000 ff39 	bl	8016402 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015596:	2b01      	cmp	r3, #1
 8015598:	d102      	bne.n	80155a0 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f001 fcb4 	bl	8016f08 <VL53L1_low_power_auto_data_stop_range>

	return status;
 80155a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3710      	adds	r7, #16
 80155a8:	46bd      	mov	sp, r7
 80155aa:	bd80      	pop	{r7, pc}

080155ac <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80155ac:	b580      	push	{r7, lr}
 80155ae:	b0c8      	sub	sp, #288	@ 0x120
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80155ba:	6018      	str	r0, [r3, #0]
 80155bc:	460a      	mov	r2, r1
 80155be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155c2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80155c6:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80155c8:	2300      	movs	r3, #0
 80155ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80155ce:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80155d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80155dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80155e0:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 80155e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80155e8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80155ec:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80155f0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 80155f4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80155f8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 80155fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8015600:	2388      	movs	r3, #136	@ 0x88
 8015602:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8015606:	2300      	movs	r3, #0
 8015608:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 801560c:	2300      	movs	r3, #0
 801560e:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8015612:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015616:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 801561a:	781b      	ldrb	r3, [r3, #0]
 801561c:	2b01      	cmp	r3, #1
 801561e:	d008      	beq.n	8015632 <VL53L1_get_measurement_results+0x86>
 8015620:	2b02      	cmp	r3, #2
 8015622:	d10d      	bne.n	8015640 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8015624:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8015628:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 801562c:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8015630:	e00a      	b.n	8015648 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8015632:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8015636:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 801563a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 801563e:	e003      	b.n	8015648 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 8015640:	232c      	movs	r3, #44	@ 0x2c
 8015642:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8015646:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8015648:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 801564c:	2b00      	cmp	r3, #0
 801564e:	d10f      	bne.n	8015670 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8015650:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8015654:	f107 0208 	add.w	r2, r7, #8
 8015658:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 801565c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8015660:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8015664:	6800      	ldr	r0, [r0, #0]
 8015666:	f7f5 fe24 	bl	800b2b2 <VL53L1_ReadMulti>
 801566a:	4603      	mov	r3, r0
 801566c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8015670:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8015674:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8015678:	781b      	ldrb	r3, [r3, #0]
 801567a:	2b01      	cmp	r3, #1
 801567c:	d917      	bls.n	80156ae <VL53L1_get_measurement_results+0x102>
 801567e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8015682:	2b00      	cmp	r3, #0
 8015684:	d113      	bne.n	80156ae <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8015686:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 801568a:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 801568e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8015692:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8015696:	f107 0208 	add.w	r2, r7, #8
 801569a:	4413      	add	r3, r2
 801569c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80156a0:	4619      	mov	r1, r3
 80156a2:	2038      	movs	r0, #56	@ 0x38
 80156a4:	f002 fbdd 	bl	8017e62 <VL53L1_i2c_decode_debug_results>
 80156a8:	4603      	mov	r3, r0
 80156aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80156ae:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80156b2:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 80156b6:	781b      	ldrb	r3, [r3, #0]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d017      	beq.n	80156ec <VL53L1_get_measurement_results+0x140>
 80156bc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d113      	bne.n	80156ec <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80156c4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 80156c8:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 80156cc:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80156d0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 80156d4:	f107 0208 	add.w	r2, r7, #8
 80156d8:	4413      	add	r3, r2
 80156da:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80156de:	4619      	mov	r1, r3
 80156e0:	2021      	movs	r0, #33	@ 0x21
 80156e2:	f002 fb5d 	bl	8017da0 <VL53L1_i2c_decode_core_results>
 80156e6:	4603      	mov	r3, r0
 80156e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80156ec:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d110      	bne.n	8015716 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 80156f4:	2300      	movs	r3, #0
 80156f6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80156fa:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 80156fe:	f107 0208 	add.w	r2, r7, #8
 8015702:	4413      	add	r3, r2
 8015704:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8015708:	4619      	mov	r1, r3
 801570a:	202c      	movs	r0, #44	@ 0x2c
 801570c:	f002 fa52 	bl	8017bb4 <VL53L1_i2c_decode_system_results>
 8015710:	4603      	mov	r3, r0
 8015712:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8015716:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 801571a:	4618      	mov	r0, r3
 801571c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8015720:	46bd      	mov	sp, r7
 8015722:	bd80      	pop	{r7, pc}

08015724 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b088      	sub	sp, #32
 8015728:	af00      	add	r7, sp, #0
 801572a:	60f8      	str	r0, [r7, #12]
 801572c:	460b      	mov	r3, r1
 801572e:	607a      	str	r2, [r7, #4]
 8015730:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015732:	2300      	movs	r3, #0
 8015734:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8015740:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8015742:	697b      	ldr	r3, [r7, #20]
 8015744:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8015746:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d106      	bne.n	801575c <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 801574e:	7afb      	ldrb	r3, [r7, #11]
 8015750:	4619      	mov	r1, r3
 8015752:	68f8      	ldr	r0, [r7, #12]
 8015754:	f7ff ff2a 	bl	80155ac <VL53L1_get_measurement_results>
 8015758:	4603      	mov	r3, r0
 801575a:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 801575c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d10c      	bne.n	801577e <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8015764:	69bb      	ldr	r3, [r7, #24]
 8015766:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 801576a:	4618      	mov	r0, r3
 801576c:	69bb      	ldr	r3, [r7, #24]
 801576e:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	f000 f851 	bl	8015820 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 801577e:	69bb      	ldr	r3, [r7, #24]
 8015780:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8015784:	2b01      	cmp	r3, #1
 8015786:	d12d      	bne.n	80157e4 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8015788:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d10e      	bne.n	80157ae <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8015790:	69bb      	ldr	r3, [r7, #24]
 8015792:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8015796:	2b00      	cmp	r3, #0
 8015798:	d109      	bne.n	80157ae <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f001 fc0e 	bl	8016fbc <VL53L1_low_power_auto_setup_manual_calibration>
 80157a0:	4603      	mov	r3, r0
 80157a2:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80157a4:	69bb      	ldr	r3, [r7, #24]
 80157a6:	2201      	movs	r2, #1
 80157a8:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 80157ac:	e00c      	b.n	80157c8 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80157ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d108      	bne.n	80157c8 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 80157bc:	2b01      	cmp	r3, #1
 80157be:	d103      	bne.n	80157c8 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80157c0:	69bb      	ldr	r3, [r7, #24]
 80157c2:	2202      	movs	r2, #2
 80157c4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80157c8:	69bb      	ldr	r3, [r7, #24]
 80157ca:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 80157ce:	2bff      	cmp	r3, #255	@ 0xff
 80157d0:	d008      	beq.n	80157e4 <VL53L1_get_device_results+0xc0>
 80157d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d104      	bne.n	80157e4 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 80157da:	68f8      	ldr	r0, [r7, #12]
 80157dc:	f001 fc33 	bl	8017046 <VL53L1_low_power_auto_update_DSS>
 80157e0:	4603      	mov	r3, r0
 80157e2:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80157e4:	69bb      	ldr	r3, [r7, #24]
 80157e6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80157f4:	693b      	ldr	r3, [r7, #16]
 80157f6:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 80157f8:	2284      	movs	r2, #132	@ 0x84
 80157fa:	6939      	ldr	r1, [r7, #16]
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f003 f957 	bl	8018ab0 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8015802:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d104      	bne.n	8015814 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 801580a:	68f8      	ldr	r0, [r7, #12]
 801580c:	f000 feaa 	bl	8016564 <VL53L1_check_ll_driver_rd_state>
 8015810:	4603      	mov	r3, r0
 8015812:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8015814:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015818:	4618      	mov	r0, r3
 801581a:	3720      	adds	r7, #32
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8015820:	b480      	push	{r7}
 8015822:	b089      	sub	sp, #36	@ 0x24
 8015824:	af00      	add	r7, sp, #0
 8015826:	60f8      	str	r0, [r7, #12]
 8015828:	60b9      	str	r1, [r7, #8]
 801582a:	607a      	str	r2, [r7, #4]
 801582c:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 801582e:	2300      	movs	r3, #0
 8015830:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8015832:	2300      	movs	r3, #0
 8015834:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8015836:	2300      	movs	r3, #0
 8015838:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	78da      	ldrb	r2, [r3, #3]
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8015842:	683b      	ldr	r3, [r7, #0]
 8015844:	3304      	adds	r3, #4
 8015846:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8015848:	2300      	movs	r3, #0
 801584a:	77fb      	strb	r3, [r7, #31]
 801584c:	e0d0      	b.n	80159f0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 801584e:	69bb      	ldr	r3, [r7, #24]
 8015850:	7ffa      	ldrb	r2, [r7, #31]
 8015852:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8015854:	69bb      	ldr	r3, [r7, #24]
 8015856:	2200      	movs	r2, #0
 8015858:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	78db      	ldrb	r3, [r3, #3]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d10a      	bne.n	8015878 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8015862:	68bb      	ldr	r3, [r7, #8]
 8015864:	785b      	ldrb	r3, [r3, #1]
 8015866:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 801586a:	2b09      	cmp	r3, #9
 801586c:	d104      	bne.n	8015878 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 801586e:	69bb      	ldr	r3, [r7, #24]
 8015870:	2213      	movs	r2, #19
 8015872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8015876:	e007      	b.n	8015888 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8015878:	68bb      	ldr	r3, [r7, #8]
 801587a:	785b      	ldrb	r3, [r3, #1]
 801587c:	f003 031f 	and.w	r3, r3, #31
 8015880:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8015888:	7ffb      	ldrb	r3, [r7, #31]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d002      	beq.n	8015894 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 801588e:	2b01      	cmp	r3, #1
 8015890:	d05d      	beq.n	801594e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8015892:	e0a7      	b.n	80159e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	789b      	ldrb	r3, [r3, #2]
 8015898:	2b07      	cmp	r3, #7
 801589a:	d104      	bne.n	80158a6 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 80158a0:	69bb      	ldr	r3, [r7, #24]
 80158a2:	821a      	strh	r2, [r3, #16]
 80158a4:	e00c      	b.n	80158c0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	789b      	ldrb	r3, [r3, #2]
 80158aa:	2b08      	cmp	r3, #8
 80158ac:	d104      	bne.n	80158b8 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	821a      	strh	r2, [r3, #16]
 80158b6:	e003      	b.n	80158c0 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 80158bc:	69bb      	ldr	r3, [r7, #24]
 80158be:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 80158c0:	68bb      	ldr	r3, [r7, #8]
 80158c2:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 80158cc:	69bb      	ldr	r3, [r7, #24]
 80158ce:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	895b      	ldrh	r3, [r3, #10]
 80158dc:	015b      	lsls	r3, r3, #5
 80158de:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80158e6:	d302      	bcc.n	80158ee <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 80158e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80158ec:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80158ee:	697b      	ldr	r3, [r7, #20]
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	69bb      	ldr	r3, [r7, #24]
 80158f4:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 80158fe:	68bb      	ldr	r3, [r7, #8]
 8015900:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8015902:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	68fa      	ldr	r2, [r7, #12]
 8015908:	fb02 f303 	mul.w	r3, r2, r3
 801590c:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8015914:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	2b00      	cmp	r3, #0
 801591a:	da01      	bge.n	8015920 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 801591c:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8015920:	12db      	asrs	r3, r3, #11
 8015922:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8015924:	693b      	ldr	r3, [r7, #16]
 8015926:	b21a      	sxth	r2, r3
 8015928:	69bb      	ldr	r3, [r7, #24]
 801592a:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8015930:	69bb      	ldr	r3, [r7, #24]
 8015932:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8015938:	69bb      	ldr	r3, [r7, #24]
 801593a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8015940:	69bb      	ldr	r3, [r7, #24]
 8015942:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8015948:	69bb      	ldr	r3, [r7, #24]
 801594a:	621a      	str	r2, [r3, #32]

			break;
 801594c:	e04a      	b.n	80159e4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8015956:	68bb      	ldr	r3, [r7, #8]
 8015958:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015964:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8015966:	68bb      	ldr	r3, [r7, #8]
 8015968:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 801596e:	68bb      	ldr	r3, [r7, #8]
 8015970:	8bdb      	ldrh	r3, [r3, #30]
 8015972:	015b      	lsls	r3, r3, #5
 8015974:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8015976:	697b      	ldr	r3, [r7, #20]
 8015978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801597c:	d302      	bcc.n	8015984 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 801597e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015982:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8015984:	697b      	ldr	r3, [r7, #20]
 8015986:	b29a      	uxth	r2, r3
 8015988:	69bb      	ldr	r3, [r7, #24]
 801598a:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 801598c:	68bb      	ldr	r3, [r7, #8]
 801598e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8015994:	68bb      	ldr	r3, [r7, #8]
 8015996:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8015998:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	68fa      	ldr	r2, [r7, #12]
 801599e:	fb02 f303 	mul.w	r3, r2, r3
 80159a2:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80159aa:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	da01      	bge.n	80159b6 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 80159b2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80159b6:	12db      	asrs	r3, r3, #11
 80159b8:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	b21a      	sxth	r2, r3
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80159d6:	69bb      	ldr	r3, [r7, #24]
 80159d8:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 80159de:	69bb      	ldr	r3, [r7, #24]
 80159e0:	621a      	str	r2, [r3, #32]

			break;
 80159e2:	bf00      	nop
		}

		pdata++;
 80159e4:	69bb      	ldr	r3, [r7, #24]
 80159e6:	3340      	adds	r3, #64	@ 0x40
 80159e8:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 80159ea:	7ffb      	ldrb	r3, [r7, #31]
 80159ec:	3301      	adds	r3, #1
 80159ee:	77fb      	strb	r3, [r7, #31]
 80159f0:	7ffb      	ldrb	r3, [r7, #31]
 80159f2:	2b01      	cmp	r3, #1
 80159f4:	f67f af2b 	bls.w	801584e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80159f8:	683b      	ldr	r3, [r7, #0]
 80159fa:	2200      	movs	r2, #0
 80159fc:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 80159fe:	68bb      	ldr	r3, [r7, #8]
 8015a00:	785b      	ldrb	r3, [r3, #1]
 8015a02:	f003 031f 	and.w	r3, r3, #31
 8015a06:	2b11      	cmp	r3, #17
 8015a08:	bf8c      	ite	hi
 8015a0a:	2201      	movhi	r2, #1
 8015a0c:	2200      	movls	r2, #0
 8015a0e:	b2d2      	uxtb	r2, r2
 8015a10:	2a00      	cmp	r2, #0
 8015a12:	d117      	bne.n	8015a44 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 8015a14:	4a0e      	ldr	r2, [pc, #56]	@ (8015a50 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 8015a16:	fa22 f303 	lsr.w	r3, r2, r3
 8015a1a:	f003 0301 	and.w	r3, r3, #1
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	bf14      	ite	ne
 8015a22:	2301      	movne	r3, #1
 8015a24:	2300      	moveq	r3, #0
 8015a26:	b2db      	uxtb	r3, r3
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d00b      	beq.n	8015a44 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8015a2c:	68bb      	ldr	r3, [r7, #8]
 8015a2e:	785b      	ldrb	r3, [r3, #1]
 8015a30:	f003 031f 	and.w	r3, r3, #31
 8015a34:	b2da      	uxtb	r2, r3
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8015a3a:	683b      	ldr	r3, [r7, #0]
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8015a42:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8015a44:	bf00      	nop
 8015a46:	3724      	adds	r7, #36	@ 0x24
 8015a48:	46bd      	mov	sp, r7
 8015a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a4e:	4770      	bx	lr
 8015a50:	0002200e 	.word	0x0002200e

08015a54 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8015a54:	b480      	push	{r7}
 8015a56:	b085      	sub	sp, #20
 8015a58:	af00      	add	r7, sp, #0
 8015a5a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2208      	movs	r2, #8
 8015a64:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	220b      	movs	r2, #11
 8015a6a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015a72:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8015a7a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8015a82:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8015a8a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8015a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3714      	adds	r7, #20
 8015a94:	46bd      	mov	sp, r7
 8015a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a9a:	4770      	bx	lr

08015a9c <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8015a9c:	b480      	push	{r7}
 8015a9e:	b085      	sub	sp, #20
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2212      	movs	r2, #18
 8015ab2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	220f      	movs	r2, #15
 8015ab8:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	2202      	movs	r2, #2
 8015abe:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8015ac6:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	220c      	movs	r2, #12
 8015acc:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8015ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3714      	adds	r7, #20
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015adc:	4770      	bx	lr

08015ade <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8015ade:	b580      	push	{r7, lr}
 8015ae0:	b084      	sub	sp, #16
 8015ae2:	af00      	add	r7, sp, #0
 8015ae4:	6078      	str	r0, [r7, #4]
 8015ae6:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	895b      	ldrh	r3, [r3, #10]
 8015af0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8015afc:	683b      	ldr	r3, [r7, #0]
 8015afe:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 8015b06:	683b      	ldr	r3, [r7, #0]
 8015b08:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	895b      	ldrh	r3, [r3, #10]
 8015b0e:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8015b10:	683b      	ldr	r3, [r7, #0]
 8015b12:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 8015b1a:	683b      	ldr	r3, [r7, #0]
 8015b1c:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 8015b28:	683b      	ldr	r3, [r7, #0]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 8015b2e:	683b      	ldr	r3, [r7, #0]
 8015b30:	2240      	movs	r2, #64	@ 0x40
 8015b32:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d10d      	bne.n	8015b58 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d108      	bne.n	8015b58 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8015b46:	683b      	ldr	r3, [r7, #0]
 8015b48:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d103      	bne.n	8015b58 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8015b50:	683b      	ldr	r3, [r7, #0]
 8015b52:	2200      	movs	r2, #0
 8015b54:	741a      	strb	r2, [r3, #16]
 8015b56:	e002      	b.n	8015b5e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8015b58:	683b      	ldr	r3, [r7, #0]
 8015b5a:	2201      	movs	r2, #1
 8015b5c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 8015b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d114      	bne.n	8015b90 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8015b66:	683b      	ldr	r3, [r7, #0]
 8015b68:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d110      	bne.n	8015b90 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	6818      	ldr	r0, [r3, #0]
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8015b7e:	683b      	ldr	r3, [r7, #0]
 8015b80:	7d1b      	ldrb	r3, [r3, #20]
 8015b82:	f000 ff95 	bl	8016ab0 <VL53L1_calc_range_ignore_threshold>
 8015b86:	4603      	mov	r3, r0
 8015b88:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8015b8a:	683b      	ldr	r3, [r7, #0]
 8015b8c:	82da      	strh	r2, [r3, #22]
 8015b8e:	e002      	b.n	8015b96 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	2200      	movs	r2, #0
 8015b94:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8015b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015b9a:	4618      	mov	r0, r3
 8015b9c:	3710      	adds	r7, #16
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	bd80      	pop	{r7, pc}

08015ba2 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8015ba2:	b480      	push	{r7}
 8015ba4:	b085      	sub	sp, #20
 8015ba6:	af00      	add	r7, sp, #0
 8015ba8:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015baa:	2300      	movs	r3, #0
 8015bac:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8015bb4:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015bbc:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8015bc4:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8015bcc:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	2208      	movs	r2, #8
 8015bd2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2228      	movs	r2, #40	@ 0x28
 8015bd8:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	2209      	movs	r2, #9
 8015bde:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8015be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	3714      	adds	r7, #20
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b085      	sub	sp, #20
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f248 0203 	movw	r2, #32771	@ 0x8003
 8015c02:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f248 0201 	movw	r2, #32769	@ 0x8001
 8015c0a:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f248 0241 	movw	r2, #32833	@ 0x8041
 8015c12:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	220e      	movs	r2, #14
 8015c18:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	220a      	movs	r2, #10
 8015c1e:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2206      	movs	r2, #6
 8015c24:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	220e      	movs	r2, #14
 8015c2a:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	220a      	movs	r2, #10
 8015c30:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2206      	movs	r2, #6
 8015c36:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	2202      	movs	r2, #2
 8015c3c:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	2221      	movs	r2, #33	@ 0x21
 8015c42:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2200      	movs	r2, #0
 8015c48:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	223c      	movs	r2, #60	@ 0x3c
 8015c54:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	223c      	movs	r2, #60	@ 0x3c
 8015c5a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8015c62:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	2280      	movs	r2, #128	@ 0x80
 8015c68:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	2280      	movs	r2, #128	@ 0x80
 8015c6e:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	22c0      	movs	r2, #192	@ 0xc0
 8015c74:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	2208      	movs	r2, #8
 8015c7a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	2210      	movs	r2, #16
 8015c80:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	2201      	movs	r2, #1
 8015c86:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	2202      	movs	r2, #2
 8015c8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2201      	movs	r2, #1
 8015c96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	2202      	movs	r2, #2
 8015c9e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	2200      	movs	r2, #0
 8015ca6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8015cb0:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8015cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f248 0230 	movw	r2, #32816	@ 0x8030
 8015cc0:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015cc8:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8015cd0:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8015cd8:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8015ce0:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8015ce8:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	2201      	movs	r2, #1
 8015cee:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8015cf6:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8015cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	3714      	adds	r7, #20
 8015d00:	46bd      	mov	sp, r7
 8015d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d06:	4770      	bx	lr

08015d08 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8015d08:	b480      	push	{r7}
 8015d0a:	b087      	sub	sp, #28
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	60f8      	str	r0, [r7, #12]
 8015d10:	60b9      	str	r1, [r7, #8]
 8015d12:	607a      	str	r2, [r7, #4]
 8015d14:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015d16:	2300      	movs	r3, #0
 8015d18:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8015d20:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	2200      	movs	r2, #0
 8015d26:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	2200      	movs	r2, #0
 8015d2c:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	2200      	movs	r2, #0
 8015d32:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2200      	movs	r2, #0
 8015d38:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	2200      	movs	r2, #0
 8015d3e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	2200      	movs	r2, #0
 8015d44:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	2200      	movs	r2, #0
 8015d50:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2200      	movs	r2, #0
 8015d56:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	2211      	movs	r2, #17
 8015d62:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	2202      	movs	r2, #2
 8015d68:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	2202      	movs	r2, #2
 8015d74:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2208      	movs	r2, #8
 8015d7a:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	2200      	movs	r2, #0
 8015d80:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8015d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d84:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8015d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d8c:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8015d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d94:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2201      	movs	r2, #1
 8015da0:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	2200      	movs	r2, #0
 8015da6:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	2200      	movs	r2, #0
 8015dac:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	2200      	movs	r2, #0
 8015db2:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	22ff      	movs	r2, #255	@ 0xff
 8015db8:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8015dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dbc:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc4:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	2200      	movs	r2, #0
 8015de0:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	2200      	movs	r2, #0
 8015de6:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8015de8:	68bb      	ldr	r3, [r7, #8]
 8015dea:	2220      	movs	r2, #32
 8015dec:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 8015dee:	68bb      	ldr	r3, [r7, #8]
 8015df0:	220b      	movs	r2, #11
 8015df2:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8015df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015df6:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8015dfc:	68bb      	ldr	r3, [r7, #8]
 8015dfe:	2202      	movs	r2, #2
 8015e00:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	220d      	movs	r2, #13
 8015e06:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8015e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e0a:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	2200      	movs	r2, #0
 8015e14:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 8015e16:	68bb      	ldr	r3, [r7, #8]
 8015e18:	2201      	movs	r2, #1
 8015e1a:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 8015e1c:	68bb      	ldr	r3, [r7, #8]
 8015e1e:	2200      	movs	r2, #0
 8015e20:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 8015e22:	68bb      	ldr	r3, [r7, #8]
 8015e24:	2200      	movs	r2, #0
 8015e26:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 8015e2e:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	2200      	movs	r2, #0
 8015e34:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8015e36:	68bb      	ldr	r3, [r7, #8]
 8015e38:	2238      	movs	r2, #56	@ 0x38
 8015e3a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 8015e3c:	68bb      	ldr	r3, [r7, #8]
 8015e3e:	22ff      	movs	r2, #255	@ 0xff
 8015e40:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	2201      	movs	r2, #1
 8015e46:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	221a      	movs	r2, #26
 8015e52:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	2200      	movs	r2, #0
 8015e58:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2220      	movs	r2, #32
 8015e5e:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2201      	movs	r2, #1
 8015e64:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	22cc      	movs	r2, #204	@ 0xcc
 8015e6a:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	220b      	movs	r2, #11
 8015e70:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	2201      	movs	r2, #1
 8015e76:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	22f5      	movs	r2, #245	@ 0xf5
 8015e7c:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2209      	movs	r2, #9
 8015e82:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8015e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e86:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8015e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e8e:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	2208      	movs	r2, #8
 8015e98:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2278      	movs	r2, #120	@ 0x78
 8015e9e:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	2201      	movs	r2, #1
 8015eb0:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8015eb2:	683b      	ldr	r3, [r7, #0]
 8015eb4:	2200      	movs	r2, #0
 8015eb6:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	2200      	movs	r2, #0
 8015ec2:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8015ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 8015eca:	683b      	ldr	r3, [r7, #0]
 8015ecc:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	220b      	movs	r2, #11
 8015ed2:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8015ed4:	683b      	ldr	r3, [r7, #0]
 8015ed6:	2209      	movs	r2, #9
 8015ed8:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8015eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015edc:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 8015ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ee4:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8015eea:	683b      	ldr	r3, [r7, #0]
 8015eec:	2201      	movs	r2, #1
 8015eee:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 8015ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8015efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015efc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 8015f00:	683b      	ldr	r3, [r7, #0]
 8015f02:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8015f04:	683b      	ldr	r3, [r7, #0]
 8015f06:	22c7      	movs	r2, #199	@ 0xc7
 8015f08:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8015f0a:	683b      	ldr	r3, [r7, #0]
 8015f0c:	22ff      	movs	r2, #255	@ 0xff
 8015f0e:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	22db      	movs	r2, #219	@ 0xdb
 8015f14:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 8015f16:	683b      	ldr	r3, [r7, #0]
 8015f18:	2202      	movs	r2, #2
 8015f1a:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 8015f1c:	6a3b      	ldr	r3, [r7, #32]
 8015f1e:	2200      	movs	r2, #0
 8015f20:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 8015f22:	6a3b      	ldr	r3, [r7, #32]
 8015f24:	2201      	movs	r2, #1
 8015f26:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 8015f28:	6a3b      	ldr	r3, [r7, #32]
 8015f2a:	2201      	movs	r2, #1
 8015f2c:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 8015f2e:	6a3b      	ldr	r3, [r7, #32]
 8015f30:	2221      	movs	r2, #33	@ 0x21
 8015f32:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8015f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015f38:	4618      	mov	r0, r3
 8015f3a:	371c      	adds	r7, #28
 8015f3c:	46bd      	mov	sp, r7
 8015f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f42:	4770      	bx	lr

08015f44 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b088      	sub	sp, #32
 8015f48:	af02      	add	r7, sp, #8
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	607a      	str	r2, [r7, #4]
 8015f50:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015f52:	2300      	movs	r3, #0
 8015f54:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8015f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f58:	9301      	str	r3, [sp, #4]
 8015f5a:	6a3b      	ldr	r3, [r7, #32]
 8015f5c:	9300      	str	r3, [sp, #0]
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	687a      	ldr	r2, [r7, #4]
 8015f62:	68b9      	ldr	r1, [r7, #8]
 8015f64:	68f8      	ldr	r0, [r7, #12]
 8015f66:	f7ff fecf 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8015f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d121      	bne.n	8015fba <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2207      	movs	r2, #7
 8015f7a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	2205      	movs	r2, #5
 8015f80:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8015f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f84:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8015f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015f8c:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	2208      	movs	r2, #8
 8015f96:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2238      	movs	r2, #56	@ 0x38
 8015f9c:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 8015f9e:	683b      	ldr	r3, [r7, #0]
 8015fa0:	2207      	movs	r2, #7
 8015fa2:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8015fa4:	683b      	ldr	r3, [r7, #0]
 8015fa6:	2205      	movs	r2, #5
 8015fa8:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8015faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fac:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 8015fae:	683b      	ldr	r3, [r7, #0]
 8015fb0:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8015fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fb4:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8015fb6:	683b      	ldr	r3, [r7, #0]
 8015fb8:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8015fba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	3718      	adds	r7, #24
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8015fc6:	b580      	push	{r7, lr}
 8015fc8:	b088      	sub	sp, #32
 8015fca:	af02      	add	r7, sp, #8
 8015fcc:	60f8      	str	r0, [r7, #12]
 8015fce:	60b9      	str	r1, [r7, #8]
 8015fd0:	607a      	str	r2, [r7, #4]
 8015fd2:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8015fd4:	2300      	movs	r3, #0
 8015fd6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8015fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015fda:	9301      	str	r3, [sp, #4]
 8015fdc:	6a3b      	ldr	r3, [r7, #32]
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	683b      	ldr	r3, [r7, #0]
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	68b9      	ldr	r1, [r7, #8]
 8015fe6:	68f8      	ldr	r0, [r7, #12]
 8015fe8:	f7ff fe8e 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 8015fec:	4603      	mov	r3, r0
 8015fee:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8015ff0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d121      	bne.n	801603c <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	220f      	movs	r2, #15
 8015ffc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	220d      	movs	r2, #13
 8016002:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8016004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016006:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 801600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801600e:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	2208      	movs	r2, #8
 8016018:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	22b8      	movs	r2, #184	@ 0xb8
 801601e:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	220f      	movs	r2, #15
 8016024:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	220d      	movs	r2, #13
 801602a:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 801602c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801602e:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8016034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016036:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8016038:	683b      	ldr	r3, [r7, #0]
 801603a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 801603c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016040:	4618      	mov	r0, r3
 8016042:	3718      	adds	r7, #24
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}

08016048 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016048:	b580      	push	{r7, lr}
 801604a:	b088      	sub	sp, #32
 801604c:	af02      	add	r7, sp, #8
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	607a      	str	r2, [r7, #4]
 8016054:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016056:	2300      	movs	r3, #0
 8016058:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801605c:	9301      	str	r3, [sp, #4]
 801605e:	6a3b      	ldr	r3, [r7, #32]
 8016060:	9300      	str	r3, [sp, #0]
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	687a      	ldr	r2, [r7, #4]
 8016066:	68b9      	ldr	r1, [r7, #8]
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7ff fe4d 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 801606e:	4603      	mov	r3, r0
 8016070:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016072:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d105      	bne.n	8016086 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	2202      	movs	r2, #2
 801607e:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	223b      	movs	r2, #59	@ 0x3b
 8016084:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8016086:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801608a:	4618      	mov	r0, r3
 801608c:	3718      	adds	r7, #24
 801608e:	46bd      	mov	sp, r7
 8016090:	bd80      	pop	{r7, pc}

08016092 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016092:	b580      	push	{r7, lr}
 8016094:	b088      	sub	sp, #32
 8016096:	af02      	add	r7, sp, #8
 8016098:	60f8      	str	r0, [r7, #12]
 801609a:	60b9      	str	r1, [r7, #8]
 801609c:	607a      	str	r2, [r7, #4]
 801609e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80160a0:	2300      	movs	r3, #0
 80160a2:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80160a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a6:	9301      	str	r3, [sp, #4]
 80160a8:	6a3b      	ldr	r3, [r7, #32]
 80160aa:	9300      	str	r3, [sp, #0]
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	687a      	ldr	r2, [r7, #4]
 80160b0:	68b9      	ldr	r1, [r7, #8]
 80160b2:	68f8      	ldr	r0, [r7, #12]
 80160b4:	f7ff fe28 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 80160b8:	4603      	mov	r3, r0
 80160ba:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80160bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d105      	bne.n	80160d0 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	2202      	movs	r2, #2
 80160c8:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	225b      	movs	r2, #91	@ 0x5b
 80160ce:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80160d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}

080160dc <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80160dc:	b580      	push	{r7, lr}
 80160de:	b088      	sub	sp, #32
 80160e0:	af02      	add	r7, sp, #8
 80160e2:	60f8      	str	r0, [r7, #12]
 80160e4:	60b9      	str	r1, [r7, #8]
 80160e6:	607a      	str	r2, [r7, #4]
 80160e8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80160ea:	2300      	movs	r3, #0
 80160ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80160ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160f0:	9301      	str	r3, [sp, #4]
 80160f2:	6a3b      	ldr	r3, [r7, #32]
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	68b9      	ldr	r1, [r7, #8]
 80160fc:	68f8      	ldr	r0, [r7, #12]
 80160fe:	f7ff fe03 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 8016102:	4603      	mov	r3, r0
 8016104:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016106:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d11a      	bne.n	8016144 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	2200      	movs	r2, #0
 8016112:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	2200      	movs	r2, #0
 8016118:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	22b1      	movs	r2, #177	@ 0xb1
 801611e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2200      	movs	r2, #0
 8016124:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	22d4      	movs	r2, #212	@ 0xd4
 801612a:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8016132:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8016134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016136:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 801613a:	683b      	ldr	r3, [r7, #0]
 801613c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 801613e:	6a3b      	ldr	r3, [r7, #32]
 8016140:	2240      	movs	r2, #64	@ 0x40
 8016142:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8016144:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016148:	4618      	mov	r0, r3
 801614a:	3718      	adds	r7, #24
 801614c:	46bd      	mov	sp, r7
 801614e:	bd80      	pop	{r7, pc}

08016150 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016150:	b580      	push	{r7, lr}
 8016152:	b088      	sub	sp, #32
 8016154:	af02      	add	r7, sp, #8
 8016156:	60f8      	str	r0, [r7, #12]
 8016158:	60b9      	str	r1, [r7, #8]
 801615a:	607a      	str	r2, [r7, #4]
 801615c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801615e:	2300      	movs	r3, #0
 8016160:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8016162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016164:	9301      	str	r3, [sp, #4]
 8016166:	6a3b      	ldr	r3, [r7, #32]
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	687a      	ldr	r2, [r7, #4]
 801616e:	68b9      	ldr	r1, [r7, #8]
 8016170:	68f8      	ldr	r0, [r7, #12]
 8016172:	f7ff fee7 	bl	8015f44 <VL53L1_preset_mode_standard_ranging_short_range>
 8016176:	4603      	mov	r3, r0
 8016178:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801617a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d11a      	bne.n	80161b8 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8016182:	683b      	ldr	r3, [r7, #0]
 8016184:	2200      	movs	r2, #0
 8016186:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	2201      	movs	r2, #1
 801618c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2284      	movs	r2, #132	@ 0x84
 8016192:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	2201      	movs	r2, #1
 8016198:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	22b1      	movs	r2, #177	@ 0xb1
 801619e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 80161a6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80161a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161aa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80161b2:	6a3b      	ldr	r3, [r7, #32]
 80161b4:	2240      	movs	r2, #64	@ 0x40
 80161b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80161b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3718      	adds	r7, #24
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bd80      	pop	{r7, pc}

080161c4 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b088      	sub	sp, #32
 80161c8:	af02      	add	r7, sp, #8
 80161ca:	60f8      	str	r0, [r7, #12]
 80161cc:	60b9      	str	r1, [r7, #8]
 80161ce:	607a      	str	r2, [r7, #4]
 80161d0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80161d2:	2300      	movs	r3, #0
 80161d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 80161d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161d8:	9301      	str	r3, [sp, #4]
 80161da:	6a3b      	ldr	r3, [r7, #32]
 80161dc:	9300      	str	r3, [sp, #0]
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	68b9      	ldr	r1, [r7, #8]
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f7ff feee 	bl	8015fc6 <VL53L1_preset_mode_standard_ranging_long_range>
 80161ea:	4603      	mov	r3, r0
 80161ec:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80161ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d11a      	bne.n	801622c <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	2200      	movs	r2, #0
 80161fa:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	2200      	movs	r2, #0
 8016200:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	2297      	movs	r2, #151	@ 0x97
 8016206:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2200      	movs	r2, #0
 801620c:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	22b1      	movs	r2, #177	@ 0xb1
 8016212:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 801621a:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801621c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801621e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8016222:	683b      	ldr	r3, [r7, #0]
 8016224:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8016226:	6a3b      	ldr	r3, [r7, #32]
 8016228:	2240      	movs	r2, #64	@ 0x40
 801622a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 801622c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016230:	4618      	mov	r0, r3
 8016232:	3718      	adds	r7, #24
 8016234:	46bd      	mov	sp, r7
 8016236:	bd80      	pop	{r7, pc}

08016238 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8016238:	b580      	push	{r7, lr}
 801623a:	b088      	sub	sp, #32
 801623c:	af02      	add	r7, sp, #8
 801623e:	60f8      	str	r0, [r7, #12]
 8016240:	60b9      	str	r1, [r7, #8]
 8016242:	607a      	str	r2, [r7, #4]
 8016244:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016246:	2300      	movs	r3, #0
 8016248:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 801624a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801624c:	9301      	str	r3, [sp, #4]
 801624e:	6a3b      	ldr	r3, [r7, #32]
 8016250:	9300      	str	r3, [sp, #0]
 8016252:	683b      	ldr	r3, [r7, #0]
 8016254:	687a      	ldr	r2, [r7, #4]
 8016256:	68b9      	ldr	r1, [r7, #8]
 8016258:	68f8      	ldr	r0, [r7, #12]
 801625a:	f7ff ff3f 	bl	80160dc <VL53L1_preset_mode_timed_ranging>
 801625e:	4603      	mov	r3, r0
 8016260:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8016262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d106      	bne.n	8016278 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 801626a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801626c:	6839      	ldr	r1, [r7, #0]
 801626e:	68b8      	ldr	r0, [r7, #8]
 8016270:	f000 fe84 	bl	8016f7c <VL53L1_config_low_power_auto_mode>
 8016274:	4603      	mov	r3, r0
 8016276:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801627c:	4618      	mov	r0, r3
 801627e:	3718      	adds	r7, #24
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}

08016284 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b088      	sub	sp, #32
 8016288:	af02      	add	r7, sp, #8
 801628a:	60f8      	str	r0, [r7, #12]
 801628c:	60b9      	str	r1, [r7, #8]
 801628e:	607a      	str	r2, [r7, #4]
 8016290:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016292:	2300      	movs	r3, #0
 8016294:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8016296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016298:	9301      	str	r3, [sp, #4]
 801629a:	6a3b      	ldr	r3, [r7, #32]
 801629c:	9300      	str	r3, [sp, #0]
 801629e:	683b      	ldr	r3, [r7, #0]
 80162a0:	687a      	ldr	r2, [r7, #4]
 80162a2:	68b9      	ldr	r1, [r7, #8]
 80162a4:	68f8      	ldr	r0, [r7, #12]
 80162a6:	f7ff ff53 	bl	8016150 <VL53L1_preset_mode_timed_ranging_short_range>
 80162aa:	4603      	mov	r3, r0
 80162ac:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80162ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d106      	bne.n	80162c4 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80162b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80162b8:	6839      	ldr	r1, [r7, #0]
 80162ba:	68b8      	ldr	r0, [r7, #8]
 80162bc:	f000 fe5e 	bl	8016f7c <VL53L1_config_low_power_auto_mode>
 80162c0:	4603      	mov	r3, r0
 80162c2:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 80162c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	3718      	adds	r7, #24
 80162cc:	46bd      	mov	sp, r7
 80162ce:	bd80      	pop	{r7, pc}

080162d0 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b088      	sub	sp, #32
 80162d4:	af02      	add	r7, sp, #8
 80162d6:	60f8      	str	r0, [r7, #12]
 80162d8:	60b9      	str	r1, [r7, #8]
 80162da:	607a      	str	r2, [r7, #4]
 80162dc:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80162de:	2300      	movs	r3, #0
 80162e0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 80162e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e4:	9301      	str	r3, [sp, #4]
 80162e6:	6a3b      	ldr	r3, [r7, #32]
 80162e8:	9300      	str	r3, [sp, #0]
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	687a      	ldr	r2, [r7, #4]
 80162ee:	68b9      	ldr	r1, [r7, #8]
 80162f0:	68f8      	ldr	r0, [r7, #12]
 80162f2:	f7ff ff67 	bl	80161c4 <VL53L1_preset_mode_timed_ranging_long_range>
 80162f6:	4603      	mov	r3, r0
 80162f8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80162fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d106      	bne.n	8016310 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8016302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016304:	6839      	ldr	r1, [r7, #0]
 8016306:	68b8      	ldr	r0, [r7, #8]
 8016308:	f000 fe38 	bl	8016f7c <VL53L1_config_low_power_auto_mode>
 801630c:	4603      	mov	r3, r0
 801630e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8016310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016314:	4618      	mov	r0, r3
 8016316:	3718      	adds	r7, #24
 8016318:	46bd      	mov	sp, r7
 801631a:	bd80      	pop	{r7, pc}

0801631c <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 801631c:	b580      	push	{r7, lr}
 801631e:	b088      	sub	sp, #32
 8016320:	af02      	add	r7, sp, #8
 8016322:	60f8      	str	r0, [r7, #12]
 8016324:	60b9      	str	r1, [r7, #8]
 8016326:	607a      	str	r2, [r7, #4]
 8016328:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801632a:	2300      	movs	r3, #0
 801632c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 801632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016330:	9301      	str	r3, [sp, #4]
 8016332:	6a3b      	ldr	r3, [r7, #32]
 8016334:	9300      	str	r3, [sp, #0]
 8016336:	683b      	ldr	r3, [r7, #0]
 8016338:	687a      	ldr	r2, [r7, #4]
 801633a:	68b9      	ldr	r1, [r7, #8]
 801633c:	68f8      	ldr	r0, [r7, #12]
 801633e:	f7ff fce3 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 8016342:	4603      	mov	r3, r0
 8016344:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8016346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d116      	bne.n	801637c <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 801634e:	683b      	ldr	r3, [r7, #0]
 8016350:	2200      	movs	r2, #0
 8016352:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2200      	movs	r2, #0
 8016358:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	22b1      	movs	r2, #177	@ 0xb1
 801635e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	2200      	movs	r2, #0
 8016364:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	22d4      	movs	r2, #212	@ 0xd4
 801636a:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 801636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801636e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8016376:	6a3b      	ldr	r3, [r7, #32]
 8016378:	2210      	movs	r2, #16
 801637a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 801637c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016380:	4618      	mov	r0, r3
 8016382:	3718      	adds	r7, #24
 8016384:	46bd      	mov	sp, r7
 8016386:	bd80      	pop	{r7, pc}

08016388 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8016388:	b580      	push	{r7, lr}
 801638a:	b088      	sub	sp, #32
 801638c:	af02      	add	r7, sp, #8
 801638e:	60f8      	str	r0, [r7, #12]
 8016390:	60b9      	str	r1, [r7, #8]
 8016392:	607a      	str	r2, [r7, #4]
 8016394:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016396:	2300      	movs	r3, #0
 8016398:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 801639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801639c:	9301      	str	r3, [sp, #4]
 801639e:	6a3b      	ldr	r3, [r7, #32]
 80163a0:	9300      	str	r3, [sp, #0]
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	687a      	ldr	r2, [r7, #4]
 80163a6:	68b9      	ldr	r1, [r7, #8]
 80163a8:	68f8      	ldr	r0, [r7, #12]
 80163aa:	f7ff fcad 	bl	8015d08 <VL53L1_preset_mode_standard_ranging>
 80163ae:	4603      	mov	r3, r0
 80163b0:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80163b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d102      	bne.n	80163c0 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 80163ba:	6a3b      	ldr	r3, [r7, #32]
 80163bc:	2201      	movs	r2, #1
 80163be:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 80163c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80163c4:	4618      	mov	r0, r3
 80163c6:	3718      	adds	r7, #24
 80163c8:	46bd      	mov	sp, r7
 80163ca:	bd80      	pop	{r7, pc}

080163cc <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 80163cc:	b480      	push	{r7}
 80163ce:	b085      	sub	sp, #20
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 80163d8:	68fb      	ldr	r3, [r7, #12]
 80163da:	2201      	movs	r2, #1
 80163dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	2202      	movs	r2, #2
 80163e4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	2209      	movs	r2, #9
 80163ec:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	224b      	movs	r2, #75	@ 0x4b
 80163f4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80163f6:	bf00      	nop
 80163f8:	3714      	adds	r7, #20
 80163fa:	46bd      	mov	sp, r7
 80163fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016400:	4770      	bx	lr

08016402 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8016402:	b480      	push	{r7}
 8016404:	b085      	sub	sp, #20
 8016406:	af00      	add	r7, sp, #0
 8016408:	6078      	str	r0, [r7, #4]
 801640a:	460b      	mov	r3, r1
 801640c:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	332c      	adds	r3, #44	@ 0x2c
 8016416:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8016418:	68bb      	ldr	r3, [r7, #8]
 801641a:	78fa      	ldrb	r2, [r7, #3]
 801641c:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 801641e:	68bb      	ldr	r3, [r7, #8]
 8016420:	2200      	movs	r2, #0
 8016422:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016424:	68bb      	ldr	r3, [r7, #8]
 8016426:	2202      	movs	r2, #2
 8016428:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 801642a:	68bb      	ldr	r3, [r7, #8]
 801642c:	2200      	movs	r2, #0
 801642e:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8016430:	68bb      	ldr	r3, [r7, #8]
 8016432:	78fa      	ldrb	r2, [r7, #3]
 8016434:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8016436:	68bb      	ldr	r3, [r7, #8]
 8016438:	2200      	movs	r2, #0
 801643a:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 801643c:	68bb      	ldr	r3, [r7, #8]
 801643e:	2202      	movs	r2, #2
 8016440:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8016442:	68bb      	ldr	r3, [r7, #8]
 8016444:	2200      	movs	r2, #0
 8016446:	71da      	strb	r2, [r3, #7]

}
 8016448:	bf00      	nop
 801644a:	3714      	adds	r7, #20
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr

08016454 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8016454:	b480      	push	{r7}
 8016456:	b087      	sub	sp, #28
 8016458:	af00      	add	r7, sp, #0
 801645a:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 801645c:	2300      	movs	r3, #0
 801645e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8016464:	693b      	ldr	r3, [r7, #16]
 8016466:	332c      	adds	r3, #44	@ 0x2c
 8016468:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 801646a:	693b      	ldr	r3, [r7, #16]
 801646c:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8016470:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8016474:	2b00      	cmp	r3, #0
 8016476:	d10c      	bne.n	8016492 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	2203      	movs	r2, #3
 801647c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	2200      	movs	r2, #0
 8016482:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	2202      	movs	r2, #2
 8016488:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	2200      	movs	r2, #0
 801648e:	71da      	strb	r2, [r3, #7]
 8016490:	e060      	b.n	8016554 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	795b      	ldrb	r3, [r3, #5]
 8016496:	2bff      	cmp	r3, #255	@ 0xff
 8016498:	d103      	bne.n	80164a2 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	2280      	movs	r2, #128	@ 0x80
 801649e:	715a      	strb	r2, [r3, #5]
 80164a0:	e005      	b.n	80164ae <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	795b      	ldrb	r3, [r3, #5]
 80164a6:	3301      	adds	r3, #1
 80164a8:	b2da      	uxtb	r2, r3
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	799b      	ldrb	r3, [r3, #6]
 80164b2:	f083 0302 	eor.w	r3, r3, #2
 80164b6:	b2da      	uxtb	r2, r3
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	791b      	ldrb	r3, [r3, #4]
 80164c0:	3b03      	subs	r3, #3
 80164c2:	2b05      	cmp	r3, #5
 80164c4:	d839      	bhi.n	801653a <VL53L1_update_ll_driver_rd_state+0xe6>
 80164c6:	a201      	add	r2, pc, #4	@ (adr r2, 80164cc <VL53L1_update_ll_driver_rd_state+0x78>)
 80164c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164cc:	080164e5 	.word	0x080164e5
 80164d0:	0801653b 	.word	0x0801653b
 80164d4:	0801653b 	.word	0x0801653b
 80164d8:	0801650f 	.word	0x0801650f
 80164dc:	0801651d 	.word	0x0801651d
 80164e0:	08016525 	.word	0x08016525

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 80164ea:	f003 0302 	and.w	r3, r3, #2
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	dd03      	ble.n	80164fa <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	2206      	movs	r2, #6
 80164f6:	711a      	strb	r2, [r3, #4]
 80164f8:	e002      	b.n	8016500 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	2208      	movs	r2, #8
 80164fe:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	2200      	movs	r2, #0
 8016504:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	2200      	movs	r2, #0
 801650a:	71da      	strb	r2, [r3, #7]

		break;
 801650c:	e022      	b.n	8016554 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	2200      	movs	r2, #0
 8016512:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8016514:	68fb      	ldr	r3, [r7, #12]
 8016516:	2208      	movs	r2, #8
 8016518:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 801651a:	e01b      	b.n	8016554 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	2208      	movs	r2, #8
 8016520:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8016522:	e017      	b.n	8016554 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8016524:	68fb      	ldr	r3, [r7, #12]
 8016526:	79db      	ldrb	r3, [r3, #7]
 8016528:	f083 0301 	eor.w	r3, r3, #1
 801652c:	b2da      	uxtb	r2, r3
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	2208      	movs	r2, #8
 8016536:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8016538:	e00c      	b.n	8016554 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	2203      	movs	r2, #3
 801653e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	2200      	movs	r2, #0
 8016544:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	2202      	movs	r2, #2
 801654a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	2200      	movs	r2, #0
 8016550:	71da      	strb	r2, [r3, #7]

		break;
 8016552:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8016554:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016558:	4618      	mov	r0, r3
 801655a:	371c      	adds	r7, #28
 801655c:	46bd      	mov	sp, r7
 801655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016562:	4770      	bx	lr

08016564 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8016564:	b480      	push	{r7}
 8016566:	b089      	sub	sp, #36	@ 0x24
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 801656c:	2300      	movs	r3, #0
 801656e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8016574:	69bb      	ldr	r3, [r7, #24]
 8016576:	332c      	adds	r3, #44	@ 0x2c
 8016578:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 801657a:	69bb      	ldr	r3, [r7, #24]
 801657c:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8016580:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8016582:	2300      	movs	r3, #0
 8016584:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8016586:	2300      	movs	r3, #0
 8016588:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 801658a:	2300      	movs	r3, #0
 801658c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 801658e:	693b      	ldr	r3, [r7, #16]
 8016590:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8016592:	f003 031f 	and.w	r3, r3, #31
 8016596:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8016598:	693b      	ldr	r3, [r7, #16]
 801659a:	78db      	ldrb	r3, [r3, #3]
 801659c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 801659e:	693b      	ldr	r3, [r7, #16]
 80165a0:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 80165a2:	111b      	asrs	r3, r3, #4
 80165a4:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 80165a6:	f003 0302 	and.w	r3, r3, #2
 80165aa:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 80165ac:	69bb      	ldr	r3, [r7, #24]
 80165ae:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 80165b2:	f003 0320 	and.w	r3, r3, #32
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d017      	beq.n	80165ea <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 80165ba:	697b      	ldr	r3, [r7, #20]
 80165bc:	791b      	ldrb	r3, [r3, #4]
 80165be:	2b06      	cmp	r3, #6
 80165c0:	d105      	bne.n	80165ce <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 80165c2:	7bfb      	ldrb	r3, [r7, #15]
 80165c4:	2b12      	cmp	r3, #18
 80165c6:	d010      	beq.n	80165ea <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 80165c8:	23ef      	movs	r3, #239	@ 0xef
 80165ca:	77fb      	strb	r3, [r7, #31]
 80165cc:	e00d      	b.n	80165ea <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 80165ce:	697b      	ldr	r3, [r7, #20]
 80165d0:	795b      	ldrb	r3, [r3, #5]
 80165d2:	7bba      	ldrb	r2, [r7, #14]
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d001      	beq.n	80165dc <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 80165d8:	23ee      	movs	r3, #238	@ 0xee
 80165da:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	799b      	ldrb	r3, [r3, #6]
 80165e0:	7b7a      	ldrb	r2, [r7, #13]
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d001      	beq.n	80165ea <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 80165e6:	23ed      	movs	r3, #237	@ 0xed
 80165e8:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 80165ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3724      	adds	r7, #36	@ 0x24
 80165f2:	46bd      	mov	sp, r7
 80165f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f8:	4770      	bx	lr

080165fa <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 80165fa:	b480      	push	{r7}
 80165fc:	b087      	sub	sp, #28
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8016602:	2300      	movs	r3, #0
 8016604:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 801660a:	693b      	ldr	r3, [r7, #16]
 801660c:	332c      	adds	r3, #44	@ 0x2c
 801660e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8016610:	693b      	ldr	r3, [r7, #16]
 8016612:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8016616:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801661a:	2b00      	cmp	r3, #0
 801661c:	d10c      	bne.n	8016638 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	2203      	movs	r2, #3
 8016622:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8016624:	68fb      	ldr	r3, [r7, #12]
 8016626:	2200      	movs	r2, #0
 8016628:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 801662a:	68fb      	ldr	r3, [r7, #12]
 801662c:	2202      	movs	r2, #2
 801662e:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	2200      	movs	r2, #0
 8016634:	70da      	strb	r2, [r3, #3]
 8016636:	e03e      	b.n	80166b6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	785b      	ldrb	r3, [r3, #1]
 801663c:	2bff      	cmp	r3, #255	@ 0xff
 801663e:	d103      	bne.n	8016648 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	2280      	movs	r2, #128	@ 0x80
 8016644:	705a      	strb	r2, [r3, #1]
 8016646:	e005      	b.n	8016654 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	785b      	ldrb	r3, [r3, #1]
 801664c:	3301      	adds	r3, #1
 801664e:	b2da      	uxtb	r2, r3
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	789b      	ldrb	r3, [r3, #2]
 8016658:	f083 0302 	eor.w	r3, r3, #2
 801665c:	b2da      	uxtb	r2, r3
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8016662:	68fb      	ldr	r3, [r7, #12]
 8016664:	781b      	ldrb	r3, [r3, #0]
 8016666:	2b03      	cmp	r3, #3
 8016668:	d002      	beq.n	8016670 <VL53L1_update_ll_driver_cfg_state+0x76>
 801666a:	2b04      	cmp	r3, #4
 801666c:	d00e      	beq.n	801668c <VL53L1_update_ll_driver_cfg_state+0x92>
 801666e:	e015      	b.n	801669c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	78db      	ldrb	r3, [r3, #3]
 8016674:	f083 0301 	eor.w	r3, r3, #1
 8016678:	b2da      	uxtb	r2, r3
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2201      	movs	r2, #1
 8016682:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	2204      	movs	r2, #4
 8016688:	701a      	strb	r2, [r3, #0]
		break;
 801668a:	e014      	b.n	80166b6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	78db      	ldrb	r3, [r3, #3]
 8016690:	f083 0301 	eor.w	r3, r3, #1
 8016694:	b2da      	uxtb	r2, r3
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	70da      	strb	r2, [r3, #3]

		break;
 801669a:	e00c      	b.n	80166b6 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	2203      	movs	r2, #3
 80166a0:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	2200      	movs	r2, #0
 80166a6:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	2202      	movs	r2, #2
 80166ac:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	2200      	movs	r2, #0
 80166b2:	70da      	strb	r2, [r3, #3]

		break;
 80166b4:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80166b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80166ba:	4618      	mov	r0, r3
 80166bc:	371c      	adds	r7, #28
 80166be:	46bd      	mov	sp, r7
 80166c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c4:	4770      	bx	lr

080166c6 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 80166c6:	b480      	push	{r7}
 80166c8:	b083      	sub	sp, #12
 80166ca:	af00      	add	r7, sp, #0
 80166cc:	6078      	str	r0, [r7, #4]
 80166ce:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	7c1a      	ldrb	r2, [r3, #16]
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 80166d8:	683b      	ldr	r3, [r7, #0]
 80166da:	3301      	adds	r3, #1
 80166dc:	687a      	ldr	r2, [r7, #4]
 80166de:	7c52      	ldrb	r2, [r2, #17]
 80166e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	3302      	adds	r3, #2
 80166e6:	687a      	ldr	r2, [r7, #4]
 80166e8:	7c92      	ldrb	r2, [r2, #18]
 80166ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	3303      	adds	r3, #3
 80166f0:	687a      	ldr	r2, [r7, #4]
 80166f2:	7cd2      	ldrb	r2, [r2, #19]
 80166f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	3304      	adds	r3, #4
 80166fa:	687a      	ldr	r2, [r7, #4]
 80166fc:	7d12      	ldrb	r2, [r2, #20]
 80166fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8016700:	683b      	ldr	r3, [r7, #0]
 8016702:	3305      	adds	r3, #5
 8016704:	687a      	ldr	r2, [r7, #4]
 8016706:	7d52      	ldrb	r2, [r2, #21]
 8016708:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	3306      	adds	r3, #6
 801670e:	687a      	ldr	r2, [r7, #4]
 8016710:	7d92      	ldrb	r2, [r2, #22]
 8016712:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	3307      	adds	r3, #7
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	7dd2      	ldrb	r2, [r2, #23]
 801671c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	3308      	adds	r3, #8
 8016722:	687a      	ldr	r2, [r7, #4]
 8016724:	7e12      	ldrb	r2, [r2, #24]
 8016726:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8016728:	683b      	ldr	r3, [r7, #0]
 801672a:	3309      	adds	r3, #9
 801672c:	687a      	ldr	r2, [r7, #4]
 801672e:	7e52      	ldrb	r2, [r2, #25]
 8016730:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	330a      	adds	r3, #10
 8016736:	687a      	ldr	r2, [r7, #4]
 8016738:	7e92      	ldrb	r2, [r2, #26]
 801673a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	330b      	adds	r3, #11
 8016740:	687a      	ldr	r2, [r7, #4]
 8016742:	7ed2      	ldrb	r2, [r2, #27]
 8016744:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8016746:	683b      	ldr	r3, [r7, #0]
 8016748:	330c      	adds	r3, #12
 801674a:	687a      	ldr	r2, [r7, #4]
 801674c:	7f12      	ldrb	r2, [r2, #28]
 801674e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8016750:	683b      	ldr	r3, [r7, #0]
 8016752:	330d      	adds	r3, #13
 8016754:	687a      	ldr	r2, [r7, #4]
 8016756:	7f52      	ldrb	r2, [r2, #29]
 8016758:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	330e      	adds	r3, #14
 801675e:	687a      	ldr	r2, [r7, #4]
 8016760:	7f92      	ldrb	r2, [r2, #30]
 8016762:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	330f      	adds	r3, #15
 8016768:	687a      	ldr	r2, [r7, #4]
 801676a:	7fd2      	ldrb	r2, [r2, #31]
 801676c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	3310      	adds	r3, #16
 8016772:	687a      	ldr	r2, [r7, #4]
 8016774:	f892 2020 	ldrb.w	r2, [r2, #32]
 8016778:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	3311      	adds	r3, #17
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8016784:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	3312      	adds	r3, #18
 801678a:	687a      	ldr	r2, [r7, #4]
 801678c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8016790:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	3313      	adds	r3, #19
 8016796:	687a      	ldr	r2, [r7, #4]
 8016798:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 801679c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 801679e:	683b      	ldr	r3, [r7, #0]
 80167a0:	3314      	adds	r3, #20
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80167a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	3315      	adds	r3, #21
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 80167b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	3316      	adds	r3, #22
 80167ba:	687a      	ldr	r2, [r7, #4]
 80167bc:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 80167c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	3317      	adds	r3, #23
 80167c6:	687a      	ldr	r2, [r7, #4]
 80167c8:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 80167cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	3318      	adds	r3, #24
 80167d2:	687a      	ldr	r2, [r7, #4]
 80167d4:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80167d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	3319      	adds	r3, #25
 80167de:	687a      	ldr	r2, [r7, #4]
 80167e0:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80167e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 80167e6:	683b      	ldr	r3, [r7, #0]
 80167e8:	331a      	adds	r3, #26
 80167ea:	687a      	ldr	r2, [r7, #4]
 80167ec:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80167f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	331b      	adds	r3, #27
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 80167fc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	331c      	adds	r3, #28
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8016808:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	331d      	adds	r3, #29
 801680e:	687a      	ldr	r2, [r7, #4]
 8016810:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 8016814:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8016816:	683b      	ldr	r3, [r7, #0]
 8016818:	331e      	adds	r3, #30
 801681a:	687a      	ldr	r2, [r7, #4]
 801681c:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 8016820:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8016822:	683b      	ldr	r3, [r7, #0]
 8016824:	331f      	adds	r3, #31
 8016826:	687a      	ldr	r2, [r7, #4]
 8016828:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 801682c:	701a      	strb	r2, [r3, #0]
}
 801682e:	bf00      	nop
 8016830:	370c      	adds	r7, #12
 8016832:	46bd      	mov	sp, r7
 8016834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016838:	4770      	bx	lr

0801683a <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 801683a:	b480      	push	{r7}
 801683c:	b085      	sub	sp, #20
 801683e:	af00      	add	r7, sp, #0
 8016840:	4603      	mov	r3, r0
 8016842:	603a      	str	r2, [r7, #0]
 8016844:	80fb      	strh	r3, [r7, #6]
 8016846:	460b      	mov	r3, r1
 8016848:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 801684a:	2300      	movs	r3, #0
 801684c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 801684e:	2300      	movs	r3, #0
 8016850:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8016852:	88fb      	ldrh	r3, [r7, #6]
 8016854:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8016856:	2300      	movs	r3, #0
 8016858:	81fb      	strh	r3, [r7, #14]
 801685a:	e00e      	b.n	801687a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 801685c:	88ba      	ldrh	r2, [r7, #4]
 801685e:	89fb      	ldrh	r3, [r7, #14]
 8016860:	1ad3      	subs	r3, r2, r3
 8016862:	3b01      	subs	r3, #1
 8016864:	683a      	ldr	r2, [r7, #0]
 8016866:	4413      	add	r3, r2
 8016868:	89ba      	ldrh	r2, [r7, #12]
 801686a:	b2d2      	uxtb	r2, r2
 801686c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 801686e:	89bb      	ldrh	r3, [r7, #12]
 8016870:	0a1b      	lsrs	r3, r3, #8
 8016872:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8016874:	89fb      	ldrh	r3, [r7, #14]
 8016876:	3301      	adds	r3, #1
 8016878:	81fb      	strh	r3, [r7, #14]
 801687a:	89fa      	ldrh	r2, [r7, #14]
 801687c:	88bb      	ldrh	r3, [r7, #4]
 801687e:	429a      	cmp	r2, r3
 8016880:	d3ec      	bcc.n	801685c <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8016882:	bf00      	nop
 8016884:	bf00      	nop
 8016886:	3714      	adds	r7, #20
 8016888:	46bd      	mov	sp, r7
 801688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688e:	4770      	bx	lr

08016890 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8016890:	b480      	push	{r7}
 8016892:	b085      	sub	sp, #20
 8016894:	af00      	add	r7, sp, #0
 8016896:	4603      	mov	r3, r0
 8016898:	6039      	str	r1, [r7, #0]
 801689a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 801689c:	2300      	movs	r3, #0
 801689e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 80168a0:	e00a      	b.n	80168b8 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 80168a2:	89fb      	ldrh	r3, [r7, #14]
 80168a4:	021b      	lsls	r3, r3, #8
 80168a6:	b21a      	sxth	r2, r3
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	1c59      	adds	r1, r3, #1
 80168ac:	6039      	str	r1, [r7, #0]
 80168ae:	781b      	ldrb	r3, [r3, #0]
 80168b0:	b21b      	sxth	r3, r3
 80168b2:	4313      	orrs	r3, r2
 80168b4:	b21b      	sxth	r3, r3
 80168b6:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80168b8:	88fb      	ldrh	r3, [r7, #6]
 80168ba:	1e5a      	subs	r2, r3, #1
 80168bc:	80fa      	strh	r2, [r7, #6]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d1ef      	bne.n	80168a2 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 80168c2:	89fb      	ldrh	r3, [r7, #14]
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3714      	adds	r7, #20
 80168c8:	46bd      	mov	sp, r7
 80168ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ce:	4770      	bx	lr

080168d0 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80168d0:	b480      	push	{r7}
 80168d2:	b085      	sub	sp, #20
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	603a      	str	r2, [r7, #0]
 80168da:	80fb      	strh	r3, [r7, #6]
 80168dc:	460b      	mov	r3, r1
 80168de:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80168e0:	2300      	movs	r3, #0
 80168e2:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 80168e4:	2300      	movs	r3, #0
 80168e6:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80168e8:	88fb      	ldrh	r3, [r7, #6]
 80168ea:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80168ec:	2300      	movs	r3, #0
 80168ee:	81fb      	strh	r3, [r7, #14]
 80168f0:	e00f      	b.n	8016912 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80168f2:	88ba      	ldrh	r2, [r7, #4]
 80168f4:	89fb      	ldrh	r3, [r7, #14]
 80168f6:	1ad3      	subs	r3, r2, r3
 80168f8:	3b01      	subs	r3, #1
 80168fa:	683a      	ldr	r2, [r7, #0]
 80168fc:	4413      	add	r3, r2
 80168fe:	89ba      	ldrh	r2, [r7, #12]
 8016900:	b2d2      	uxtb	r2, r2
 8016902:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8016904:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8016908:	121b      	asrs	r3, r3, #8
 801690a:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 801690c:	89fb      	ldrh	r3, [r7, #14]
 801690e:	3301      	adds	r3, #1
 8016910:	81fb      	strh	r3, [r7, #14]
 8016912:	89fa      	ldrh	r2, [r7, #14]
 8016914:	88bb      	ldrh	r3, [r7, #4]
 8016916:	429a      	cmp	r2, r3
 8016918:	d3eb      	bcc.n	80168f2 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 801691a:	bf00      	nop
 801691c:	bf00      	nop
 801691e:	3714      	adds	r7, #20
 8016920:	46bd      	mov	sp, r7
 8016922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016926:	4770      	bx	lr

08016928 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8016928:	b480      	push	{r7}
 801692a:	b085      	sub	sp, #20
 801692c:	af00      	add	r7, sp, #0
 801692e:	4603      	mov	r3, r0
 8016930:	6039      	str	r1, [r7, #0]
 8016932:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8016934:	2300      	movs	r3, #0
 8016936:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8016938:	683b      	ldr	r3, [r7, #0]
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	b25b      	sxtb	r3, r3
 801693e:	2b00      	cmp	r3, #0
 8016940:	da0e      	bge.n	8016960 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8016942:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016946:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8016948:	e00a      	b.n	8016960 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 801694a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801694e:	021b      	lsls	r3, r3, #8
 8016950:	b21a      	sxth	r2, r3
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	1c59      	adds	r1, r3, #1
 8016956:	6039      	str	r1, [r7, #0]
 8016958:	781b      	ldrb	r3, [r3, #0]
 801695a:	b21b      	sxth	r3, r3
 801695c:	4313      	orrs	r3, r2
 801695e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8016960:	88fb      	ldrh	r3, [r7, #6]
 8016962:	1e5a      	subs	r2, r3, #1
 8016964:	80fa      	strh	r2, [r7, #6]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d1ef      	bne.n	801694a <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 801696a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801696e:	4618      	mov	r0, r3
 8016970:	3714      	adds	r7, #20
 8016972:	46bd      	mov	sp, r7
 8016974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016978:	4770      	bx	lr

0801697a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 801697a:	b480      	push	{r7}
 801697c:	b087      	sub	sp, #28
 801697e:	af00      	add	r7, sp, #0
 8016980:	60f8      	str	r0, [r7, #12]
 8016982:	460b      	mov	r3, r1
 8016984:	607a      	str	r2, [r7, #4]
 8016986:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8016988:	2300      	movs	r3, #0
 801698a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 801698c:	2300      	movs	r3, #0
 801698e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8016994:	2300      	movs	r3, #0
 8016996:	82fb      	strh	r3, [r7, #22]
 8016998:	e00e      	b.n	80169b8 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 801699a:	897a      	ldrh	r2, [r7, #10]
 801699c:	8afb      	ldrh	r3, [r7, #22]
 801699e:	1ad3      	subs	r3, r2, r3
 80169a0:	3b01      	subs	r3, #1
 80169a2:	687a      	ldr	r2, [r7, #4]
 80169a4:	4413      	add	r3, r2
 80169a6:	693a      	ldr	r2, [r7, #16]
 80169a8:	b2d2      	uxtb	r2, r2
 80169aa:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80169ac:	693b      	ldr	r3, [r7, #16]
 80169ae:	0a1b      	lsrs	r3, r3, #8
 80169b0:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 80169b2:	8afb      	ldrh	r3, [r7, #22]
 80169b4:	3301      	adds	r3, #1
 80169b6:	82fb      	strh	r3, [r7, #22]
 80169b8:	8afa      	ldrh	r2, [r7, #22]
 80169ba:	897b      	ldrh	r3, [r7, #10]
 80169bc:	429a      	cmp	r2, r3
 80169be:	d3ec      	bcc.n	801699a <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 80169c0:	bf00      	nop
 80169c2:	bf00      	nop
 80169c4:	371c      	adds	r7, #28
 80169c6:	46bd      	mov	sp, r7
 80169c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169cc:	4770      	bx	lr

080169ce <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80169ce:	b480      	push	{r7}
 80169d0:	b085      	sub	sp, #20
 80169d2:	af00      	add	r7, sp, #0
 80169d4:	4603      	mov	r3, r0
 80169d6:	6039      	str	r1, [r7, #0]
 80169d8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 80169da:	2300      	movs	r3, #0
 80169dc:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 80169de:	e007      	b.n	80169f0 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	021a      	lsls	r2, r3, #8
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	1c59      	adds	r1, r3, #1
 80169e8:	6039      	str	r1, [r7, #0]
 80169ea:	781b      	ldrb	r3, [r3, #0]
 80169ec:	4313      	orrs	r3, r2
 80169ee:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80169f0:	88fb      	ldrh	r3, [r7, #6]
 80169f2:	1e5a      	subs	r2, r3, #1
 80169f4:	80fa      	strh	r2, [r7, #6]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d1f2      	bne.n	80169e0 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 80169fa:	68fb      	ldr	r3, [r7, #12]
}
 80169fc:	4618      	mov	r0, r3
 80169fe:	3714      	adds	r7, #20
 8016a00:	46bd      	mov	sp, r7
 8016a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a06:	4770      	bx	lr

08016a08 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b085      	sub	sp, #20
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	4603      	mov	r3, r0
 8016a10:	6039      	str	r1, [r7, #0]
 8016a12:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 8016a14:	2300      	movs	r3, #0
 8016a16:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8016a18:	683b      	ldr	r3, [r7, #0]
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	b25b      	sxtb	r3, r3
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	da0b      	bge.n	8016a3a <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 8016a22:	f04f 33ff 	mov.w	r3, #4294967295
 8016a26:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 8016a28:	e007      	b.n	8016a3a <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	021a      	lsls	r2, r3, #8
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	1c59      	adds	r1, r3, #1
 8016a32:	6039      	str	r1, [r7, #0]
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	4313      	orrs	r3, r2
 8016a38:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 8016a3a:	88fb      	ldrh	r3, [r7, #6]
 8016a3c:	1e5a      	subs	r2, r3, #1
 8016a3e:	80fa      	strh	r2, [r7, #6]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d1f2      	bne.n	8016a2a <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8016a44:	68fb      	ldr	r3, [r7, #12]
}
 8016a46:	4618      	mov	r0, r3
 8016a48:	3714      	adds	r7, #20
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a50:	4770      	bx	lr

08016a52 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8016a52:	b580      	push	{r7, lr}
 8016a54:	b086      	sub	sp, #24
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	4603      	mov	r3, r0
 8016a5a:	460a      	mov	r2, r1
 8016a5c:	80fb      	strh	r3, [r7, #6]
 8016a5e:	4613      	mov	r3, r2
 8016a60:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8016a62:	2300      	movs	r3, #0
 8016a64:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 8016a6e:	88fb      	ldrh	r3, [r7, #6]
 8016a70:	4618      	mov	r0, r3
 8016a72:	f000 fb5f 	bl	8017134 <VL53L1_calc_pll_period_us>
 8016a76:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8016a78:	797b      	ldrb	r3, [r7, #5]
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	f000 fb6e 	bl	801715c <VL53L1_decode_vcsel_period>
 8016a80:	4603      	mov	r3, r0
 8016a82:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8016a84:	697a      	ldr	r2, [r7, #20]
 8016a86:	4613      	mov	r3, r2
 8016a88:	00db      	lsls	r3, r3, #3
 8016a8a:	4413      	add	r3, r2
 8016a8c:	021b      	lsls	r3, r3, #8
 8016a8e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8016a90:	68fb      	ldr	r3, [r7, #12]
 8016a92:	099b      	lsrs	r3, r3, #6
 8016a94:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8016a96:	7cfa      	ldrb	r2, [r7, #19]
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	fb02 f303 	mul.w	r3, r2, r3
 8016a9e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	099b      	lsrs	r3, r3, #6
 8016aa4:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8016aa6:	68fb      	ldr	r3, [r7, #12]
}
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	3718      	adds	r7, #24
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8016ab0:	b480      	push	{r7}
 8016ab2:	b089      	sub	sp, #36	@ 0x24
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	60f8      	str	r0, [r7, #12]
 8016ab8:	4608      	mov	r0, r1
 8016aba:	4611      	mov	r1, r2
 8016abc:	461a      	mov	r2, r3
 8016abe:	4603      	mov	r3, r0
 8016ac0:	817b      	strh	r3, [r7, #10]
 8016ac2:	460b      	mov	r3, r1
 8016ac4:	813b      	strh	r3, [r7, #8]
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8016aca:	2300      	movs	r3, #0
 8016acc:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 8016ace:	2300      	movs	r3, #0
 8016ad0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8016ad6:	2300      	movs	r3, #0
 8016ad8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8016ada:	2300      	movs	r3, #0
 8016adc:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	011b      	lsls	r3, r3, #4
 8016ae2:	4a23      	ldr	r2, [pc, #140]	@ (8016b70 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8016ae4:	fb82 1203 	smull	r1, r2, r2, r3
 8016ae8:	1192      	asrs	r2, r2, #6
 8016aea:	17db      	asrs	r3, r3, #31
 8016aec:	1ad3      	subs	r3, r2, r3
 8016aee:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 8016af0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	da03      	bge.n	8016b00 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8016af8:	897b      	ldrh	r3, [r7, #10]
 8016afa:	425b      	negs	r3, r3
 8016afc:	b29b      	uxth	r3, r3
 8016afe:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 8016b00:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	da03      	bge.n	8016b10 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8016b08:	893b      	ldrh	r3, [r7, #8]
 8016b0a:	425b      	negs	r3, r3
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 8016b10:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8016b14:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8016b18:	4413      	add	r3, r2
 8016b1a:	015b      	lsls	r3, r3, #5
 8016b1c:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	4a13      	ldr	r2, [pc, #76]	@ (8016b70 <VL53L1_calc_range_ignore_threshold+0xc0>)
 8016b22:	fb82 1203 	smull	r1, r2, r2, r3
 8016b26:	1192      	asrs	r2, r2, #6
 8016b28:	17db      	asrs	r3, r3, #31
 8016b2a:	1ad3      	subs	r3, r2, r3
 8016b2c:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 8016b2e:	697a      	ldr	r2, [r7, #20]
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	4413      	add	r3, r2
 8016b34:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8016b36:	79fa      	ldrb	r2, [r7, #7]
 8016b38:	697b      	ldr	r3, [r7, #20]
 8016b3a:	fb02 f303 	mul.w	r3, r2, r3
 8016b3e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8016b40:	697b      	ldr	r3, [r7, #20]
 8016b42:	3310      	adds	r3, #16
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	da00      	bge.n	8016b4a <VL53L1_calc_range_ignore_threshold+0x9a>
 8016b48:	331f      	adds	r3, #31
 8016b4a:	115b      	asrs	r3, r3, #5
 8016b4c:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 8016b4e:	697b      	ldr	r3, [r7, #20]
 8016b50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016b54:	db03      	blt.n	8016b5e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8016b56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016b5a:	83fb      	strh	r3, [r7, #30]
 8016b5c:	e001      	b.n	8016b62 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 8016b5e:	697b      	ldr	r3, [r7, #20]
 8016b60:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8016b62:	8bfb      	ldrh	r3, [r7, #30]
}
 8016b64:	4618      	mov	r0, r3
 8016b66:	3724      	adds	r7, #36	@ 0x24
 8016b68:	46bd      	mov	sp, r7
 8016b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b6e:	4770      	bx	lr
 8016b70:	10624dd3 	.word	0x10624dd3

08016b74 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8016b74:	b480      	push	{r7}
 8016b76:	b085      	sub	sp, #20
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8016b7e:	2300      	movs	r3, #0
 8016b80:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	031a      	lsls	r2, r3, #12
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	085b      	lsrs	r3, r3, #1
 8016b8a:	441a      	add	r2, r3
	timeout_mclks   =
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b92:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8016b94:	68fb      	ldr	r3, [r7, #12]
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	3714      	adds	r7, #20
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr

08016ba2 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8016ba2:	b580      	push	{r7, lr}
 8016ba4:	b084      	sub	sp, #16
 8016ba6:	af00      	add	r7, sp, #0
 8016ba8:	6078      	str	r0, [r7, #4]
 8016baa:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8016bac:	2300      	movs	r3, #0
 8016bae:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8016bb4:	6839      	ldr	r1, [r7, #0]
 8016bb6:	6878      	ldr	r0, [r7, #4]
 8016bb8:	f7ff ffdc 	bl	8016b74 <VL53L1_calc_timeout_mclks>
 8016bbc:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f000 f860 	bl	8016c84 <VL53L1_encode_timeout>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8016bc8:	897b      	ldrh	r3, [r7, #10]
}
 8016bca:	4618      	mov	r0, r3
 8016bcc:	3710      	adds	r7, #16
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	bd80      	pop	{r7, pc}

08016bd2 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 8016bd2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016bd6:	b087      	sub	sp, #28
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	6078      	str	r0, [r7, #4]
 8016bdc:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8016bde:	2100      	movs	r1, #0
 8016be0:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 8016be2:	f04f 0000 	mov.w	r0, #0
 8016be6:	f04f 0100 	mov.w	r1, #0
 8016bea:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8016bee:	6879      	ldr	r1, [r7, #4]
 8016bf0:	2000      	movs	r0, #0
 8016bf2:	4688      	mov	r8, r1
 8016bf4:	4681      	mov	r9, r0
 8016bf6:	6839      	ldr	r1, [r7, #0]
 8016bf8:	2000      	movs	r0, #0
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	4605      	mov	r5, r0
 8016bfe:	fb04 f009 	mul.w	r0, r4, r9
 8016c02:	fb08 f105 	mul.w	r1, r8, r5
 8016c06:	4401      	add	r1, r0
 8016c08:	fba8 2304 	umull	r2, r3, r8, r4
 8016c0c:	4419      	add	r1, r3
 8016c0e:	460b      	mov	r3, r1
 8016c10:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8016c14:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 8016c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8016c1c:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 8016c20:	f143 0b00 	adc.w	fp, r3, #0
 8016c24:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 8016c28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016c2c:	f04f 0200 	mov.w	r2, #0
 8016c30:	f04f 0300 	mov.w	r3, #0
 8016c34:	0b02      	lsrs	r2, r0, #12
 8016c36:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8016c3a:	0b0b      	lsrs	r3, r1, #12
 8016c3c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8016c40:	68bb      	ldr	r3, [r7, #8]
 8016c42:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8016c44:	697b      	ldr	r3, [r7, #20]
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	371c      	adds	r7, #28
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8016c50:	4770      	bx	lr

08016c52 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8016c52:	b580      	push	{r7, lr}
 8016c54:	b084      	sub	sp, #16
 8016c56:	af00      	add	r7, sp, #0
 8016c58:	4603      	mov	r3, r0
 8016c5a:	6039      	str	r1, [r7, #0]
 8016c5c:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8016c62:	2300      	movs	r3, #0
 8016c64:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8016c66:	88fb      	ldrh	r3, [r7, #6]
 8016c68:	4618      	mov	r0, r3
 8016c6a:	f000 f835 	bl	8016cd8 <VL53L1_decode_timeout>
 8016c6e:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	68f8      	ldr	r0, [r7, #12]
 8016c74:	f7ff ffad 	bl	8016bd2 <VL53L1_calc_timeout_us>
 8016c78:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 8016c7a:	68bb      	ldr	r3, [r7, #8]
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3710      	adds	r7, #16
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8016c84:	b480      	push	{r7}
 8016c86:	b087      	sub	sp, #28
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8016c8c:	2300      	movs	r3, #0
 8016c8e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8016c90:	2300      	movs	r3, #0
 8016c92:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8016c94:	2300      	movs	r3, #0
 8016c96:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d015      	beq.n	8016cca <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	3b01      	subs	r3, #1
 8016ca2:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8016ca4:	e005      	b.n	8016cb2 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	085b      	lsrs	r3, r3, #1
 8016caa:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8016cac:	89fb      	ldrh	r3, [r7, #14]
 8016cae:	3301      	adds	r3, #1
 8016cb0:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	2bff      	cmp	r3, #255	@ 0xff
 8016cb6:	d8f6      	bhi.n	8016ca6 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8016cb8:	89fb      	ldrh	r3, [r7, #14]
 8016cba:	021b      	lsls	r3, r3, #8
 8016cbc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	b29b      	uxth	r3, r3
 8016cc2:	b2db      	uxtb	r3, r3
 8016cc4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8016cc6:	4413      	add	r3, r2
 8016cc8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8016cca:	8afb      	ldrh	r3, [r7, #22]
}
 8016ccc:	4618      	mov	r0, r3
 8016cce:	371c      	adds	r7, #28
 8016cd0:	46bd      	mov	sp, r7
 8016cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd6:	4770      	bx	lr

08016cd8 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 8016cd8:	b480      	push	{r7}
 8016cda:	b085      	sub	sp, #20
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	4603      	mov	r3, r0
 8016ce0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8016ce6:	88fb      	ldrh	r3, [r7, #6]
 8016ce8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8016cea:	88fa      	ldrh	r2, [r7, #6]
 8016cec:	0a12      	lsrs	r2, r2, #8
 8016cee:	b292      	uxth	r2, r2
 8016cf0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8016cf2:	3301      	adds	r3, #1
 8016cf4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8016cf6:	68fb      	ldr	r3, [r7, #12]
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	3714      	adds	r7, #20
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr

08016d04 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8016d04:	b580      	push	{r7, lr}
 8016d06:	b088      	sub	sp, #32
 8016d08:	af00      	add	r7, sp, #0
 8016d0a:	60f8      	str	r0, [r7, #12]
 8016d0c:	60b9      	str	r1, [r7, #8]
 8016d0e:	607a      	str	r2, [r7, #4]
 8016d10:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8016d12:	2300      	movs	r3, #0
 8016d14:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8016d16:	2300      	movs	r3, #0
 8016d18:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 8016d1e:	2300      	movs	r3, #0
 8016d20:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 8016d22:	887b      	ldrh	r3, [r7, #2]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d102      	bne.n	8016d2e <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8016d28:	23f1      	movs	r3, #241	@ 0xf1
 8016d2a:	77fb      	strb	r3, [r7, #31]
 8016d2c:	e05d      	b.n	8016dea <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8016d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d30:	799a      	ldrb	r2, [r3, #6]
 8016d32:	887b      	ldrh	r3, [r7, #2]
 8016d34:	4611      	mov	r1, r2
 8016d36:	4618      	mov	r0, r3
 8016d38:	f7ff fe8b 	bl	8016a52 <VL53L1_calc_macro_period_us>
 8016d3c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 8016d3e:	6979      	ldr	r1, [r7, #20]
 8016d40:	68f8      	ldr	r0, [r7, #12]
 8016d42:	f7ff ff17 	bl	8016b74 <VL53L1_calc_timeout_mclks>
 8016d46:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8016d48:	69bb      	ldr	r3, [r7, #24]
 8016d4a:	2bff      	cmp	r3, #255	@ 0xff
 8016d4c:	d901      	bls.n	8016d52 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 8016d4e:	23ff      	movs	r3, #255	@ 0xff
 8016d50:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8016d52:	69bb      	ldr	r3, [r7, #24]
 8016d54:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8016d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016d58:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8016d5a:	6979      	ldr	r1, [r7, #20]
 8016d5c:	68b8      	ldr	r0, [r7, #8]
 8016d5e:	f7ff ff20 	bl	8016ba2 <VL53L1_calc_encoded_timeout>
 8016d62:	4603      	mov	r3, r0
 8016d64:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8016d66:	8a7b      	ldrh	r3, [r7, #18]
 8016d68:	0a1b      	lsrs	r3, r3, #8
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 8016d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d70:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8016d72:	8a7b      	ldrh	r3, [r7, #18]
 8016d74:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8016d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d78:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 8016d7a:	6979      	ldr	r1, [r7, #20]
 8016d7c:	6878      	ldr	r0, [r7, #4]
 8016d7e:	f7ff ff10 	bl	8016ba2 <VL53L1_calc_encoded_timeout>
 8016d82:	4603      	mov	r3, r0
 8016d84:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8016d86:	8a7b      	ldrh	r3, [r7, #18]
 8016d88:	0a1b      	lsrs	r3, r3, #8
 8016d8a:	b29b      	uxth	r3, r3
 8016d8c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8016d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d90:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8016d92:	8a7b      	ldrh	r3, [r7, #18]
 8016d94:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8016d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d98:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 8016d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d9c:	7a5a      	ldrb	r2, [r3, #9]
 8016d9e:	887b      	ldrh	r3, [r7, #2]
 8016da0:	4611      	mov	r1, r2
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7ff fe55 	bl	8016a52 <VL53L1_calc_macro_period_us>
 8016da8:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 8016daa:	6979      	ldr	r1, [r7, #20]
 8016dac:	68b8      	ldr	r0, [r7, #8]
 8016dae:	f7ff fef8 	bl	8016ba2 <VL53L1_calc_encoded_timeout>
 8016db2:	4603      	mov	r3, r0
 8016db4:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8016db6:	8a7b      	ldrh	r3, [r7, #18]
 8016db8:	0a1b      	lsrs	r3, r3, #8
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8016dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dc0:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8016dc2:	8a7b      	ldrh	r3, [r7, #18]
 8016dc4:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8016dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016dc8:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 8016dca:	6979      	ldr	r1, [r7, #20]
 8016dcc:	6878      	ldr	r0, [r7, #4]
 8016dce:	f7ff fee8 	bl	8016ba2 <VL53L1_calc_encoded_timeout>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8016dd6:	8a7b      	ldrh	r3, [r7, #18]
 8016dd8:	0a1b      	lsrs	r3, r3, #8
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8016dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016de0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8016de2:	8a7b      	ldrh	r3, [r7, #18]
 8016de4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8016de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016de8:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 8016dea:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8016dee:	4618      	mov	r0, r3
 8016df0:	3720      	adds	r7, #32
 8016df2:	46bd      	mov	sp, r7
 8016df4:	bd80      	pop	{r7, pc}

08016df6 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8016df6:	b480      	push	{r7}
 8016df8:	b083      	sub	sp, #12
 8016dfa:	af00      	add	r7, sp, #0
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	603a      	str	r2, [r7, #0]
 8016e00:	71fb      	strb	r3, [r7, #7]
 8016e02:	460b      	mov	r3, r1
 8016e04:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8016e06:	79fb      	ldrb	r3, [r7, #7]
 8016e08:	2b07      	cmp	r3, #7
 8016e0a:	d90a      	bls.n	8016e22 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 8016e0c:	79bb      	ldrb	r3, [r7, #6]
 8016e0e:	00db      	lsls	r3, r3, #3
 8016e10:	b2da      	uxtb	r2, r3
 8016e12:	79fb      	ldrb	r3, [r7, #7]
 8016e14:	1ad3      	subs	r3, r2, r3
 8016e16:	b2db      	uxtb	r3, r3
 8016e18:	3b71      	subs	r3, #113	@ 0x71
 8016e1a:	b2da      	uxtb	r2, r3
 8016e1c:	683b      	ldr	r3, [r7, #0]
 8016e1e:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 8016e20:	e00a      	b.n	8016e38 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 8016e22:	79bb      	ldrb	r3, [r7, #6]
 8016e24:	f1c3 030f 	rsb	r3, r3, #15
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	00db      	lsls	r3, r3, #3
 8016e2c:	b2da      	uxtb	r2, r3
 8016e2e:	79fb      	ldrb	r3, [r7, #7]
 8016e30:	4413      	add	r3, r2
 8016e32:	b2da      	uxtb	r2, r3
 8016e34:	683b      	ldr	r3, [r7, #0]
 8016e36:	701a      	strb	r2, [r3, #0]
}
 8016e38:	bf00      	nop
 8016e3a:	370c      	adds	r7, #12
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e42:	4770      	bx	lr

08016e44 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8016e44:	b480      	push	{r7}
 8016e46:	b085      	sub	sp, #20
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	60b9      	str	r1, [r7, #8]
 8016e4e:	607a      	str	r2, [r7, #4]
 8016e50:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8016e52:	7bfb      	ldrb	r3, [r7, #15]
 8016e54:	091b      	lsrs	r3, r3, #4
 8016e56:	b2da      	uxtb	r2, r3
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 8016e5c:	7bfb      	ldrb	r3, [r7, #15]
 8016e5e:	f003 030f 	and.w	r3, r3, #15
 8016e62:	b2da      	uxtb	r2, r3
 8016e64:	68bb      	ldr	r3, [r7, #8]
 8016e66:	701a      	strb	r2, [r3, #0]

}
 8016e68:	bf00      	nop
 8016e6a:	3714      	adds	r7, #20
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e72:	4770      	bx	lr

08016e74 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8016e74:	b480      	push	{r7}
 8016e76:	b083      	sub	sp, #12
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	603a      	str	r2, [r7, #0]
 8016e7e:	71fb      	strb	r3, [r7, #7]
 8016e80:	460b      	mov	r3, r1
 8016e82:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8016e84:	79bb      	ldrb	r3, [r7, #6]
 8016e86:	011b      	lsls	r3, r3, #4
 8016e88:	b2da      	uxtb	r2, r3
 8016e8a:	79fb      	ldrb	r3, [r7, #7]
 8016e8c:	4413      	add	r3, r2
 8016e8e:	b2da      	uxtb	r2, r3
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	701a      	strb	r2, [r3, #0]

}
 8016e94:	bf00      	nop
 8016e96:	370c      	adds	r7, #12
 8016e98:	46bd      	mov	sp, r7
 8016e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e9e:	4770      	bx	lr

08016ea0 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8016ea0:	b480      	push	{r7}
 8016ea2:	b085      	sub	sp, #20
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	2203      	movs	r2, #3
 8016eb4:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8016eb8:	68bb      	ldr	r3, [r7, #8]
 8016eba:	2200      	movs	r2, #0
 8016ebc:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8016ec0:	68bb      	ldr	r3, [r7, #8]
 8016ec2:	2200      	movs	r2, #0
 8016ec4:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	2200      	movs	r2, #0
 8016ecc:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 8016ed8:	68bb      	ldr	r3, [r7, #8]
 8016eda:	2200      	movs	r2, #0
 8016edc:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8016ee0:	68bb      	ldr	r3, [r7, #8]
 8016ee2:	2200      	movs	r2, #0
 8016ee4:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8016ee8:	68bb      	ldr	r3, [r7, #8]
 8016eea:	2200      	movs	r2, #0
 8016eec:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 8016ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016efc:	4618      	mov	r0, r3
 8016efe:	3714      	adds	r7, #20
 8016f00:	46bd      	mov	sp, r7
 8016f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f06:	4770      	bx	lr

08016f08 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 8016f08:	b480      	push	{r7}
 8016f0a:	b085      	sub	sp, #20
 8016f0c:	af00      	add	r7, sp, #0
 8016f0e:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016f10:	2300      	movs	r3, #0
 8016f12:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 8016f18:	68bb      	ldr	r3, [r7, #8]
 8016f1a:	22ff      	movs	r2, #255	@ 0xff
 8016f1c:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8016f20:	68bb      	ldr	r3, [r7, #8]
 8016f22:	2200      	movs	r2, #0
 8016f24:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	2200      	movs	r2, #0
 8016f34:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d005      	beq.n	8016f4e <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
		pdev->stat_nvm.vhv_config__init =
 8016f48:	68bb      	ldr	r3, [r7, #8]
 8016f4a:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8016f4e:	68bb      	ldr	r3, [r7, #8]
 8016f50:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d005      	beq.n	8016f64 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8016f58:	68bb      	ldr	r3, [r7, #8]
 8016f5a:	f893 22e9 	ldrb.w	r2, [r3, #745]	@ 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	2200      	movs	r2, #0
 8016f68:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d

	LOG_FUNCTION_END(status);

	return status;
 8016f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016f70:	4618      	mov	r0, r3
 8016f72:	3714      	adds	r7, #20
 8016f74:	46bd      	mov	sp, r7
 8016f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f7a:	4770      	bx	lr

08016f7c <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8016f7c:	b480      	push	{r7}
 8016f7e:	b087      	sub	sp, #28
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	60f8      	str	r0, [r7, #12]
 8016f84:	60b9      	str	r1, [r7, #8]
 8016f86:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016f88:	2300      	movs	r3, #0
 8016f8a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2201      	movs	r2, #1
 8016f90:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	2200      	movs	r2, #0
 8016f96:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	228b      	movs	r2, #139	@ 0x8b
 8016f9c:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 8016f9e:	68fb      	ldr	r3, [r7, #12]
 8016fa0:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 8016fa4:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	2202      	movs	r2, #2
 8016faa:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 8016fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	371c      	adds	r7, #28
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fba:	4770      	bx	lr

08016fbc <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 8016fbc:	b480      	push	{r7}
 8016fbe:	b085      	sub	sp, #20
 8016fc0:	af00      	add	r7, sp, #0
 8016fc2:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 8016fd2:	68fb      	ldr	r3, [r7, #12]
 8016fd4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 8016fea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016fee:	b2da      	uxtb	r2, r3
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 8016ffc:	f003 0303 	and.w	r3, r3, #3
 8017000:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8017008:	009b      	lsls	r3, r3, #2
 801700a:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 801700c:	4413      	add	r3, r2
 801700e:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2201      	movs	r2, #1
 801701a:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 8017024:	68fb      	ldr	r3, [r7, #12]
 8017026:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8017036:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801703a:	4618      	mov	r0, r3
 801703c:	3714      	adds	r7, #20
 801703e:	46bd      	mov	sp, r7
 8017040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017044:	4770      	bx	lr

08017046 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8017046:	b480      	push	{r7}
 8017048:	b087      	sub	sp, #28
 801704a:	af00      	add	r7, sp, #0
 801704c:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8017052:	2300      	movs	r3, #0
 8017054:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	f8b3 31de 	ldrh.w	r3, [r3, #478]	@ 0x1de
 801705c:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	@ 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8017064:	4413      	add	r3, r2
 8017066:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8017068:	693b      	ldr	r3, [r7, #16]
 801706a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801706e:	d302      	bcc.n	8017076 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8017070:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017074:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8017076:	693b      	ldr	r3, [r7, #16]
 8017078:	041b      	lsls	r3, r3, #16
 801707a:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 801707c:	68fb      	ldr	r3, [r7, #12]
 801707e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8017082:	2b00      	cmp	r3, #0
 8017084:	d102      	bne.n	801708c <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8017086:	23f1      	movs	r3, #241	@ 0xf1
 8017088:	75fb      	strb	r3, [r7, #23]
 801708a:	e035      	b.n	80170f8 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8017092:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8017094:	693b      	ldr	r3, [r7, #16]
 8017096:	fbb3 f3f2 	udiv	r3, r3, r2
 801709a:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	693a      	ldr	r2, [r7, #16]
 80170a0:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 80170aa:	041b      	lsls	r3, r3, #16
 80170ac:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d102      	bne.n	80170be <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80170b8:	23f1      	movs	r3, #241	@ 0xf1
 80170ba:	75fb      	strb	r3, [r7, #23]
 80170bc:	e01c      	b.n	80170f8 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
			utemp32a = utemp32a /
 80170c4:	693a      	ldr	r2, [r7, #16]
 80170c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80170ca:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 80170cc:	693b      	ldr	r3, [r7, #16]
 80170ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80170d2:	d302      	bcc.n	80170da <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 80170d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80170d8:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80170da:	693b      	ldr	r3, [r7, #16]
 80170dc:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	2202      	movs	r2, #2
 80170f4:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 80170f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80170fc:	f113 0f0f 	cmn.w	r3, #15
 8017100:	d110      	bne.n	8017124 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8017102:	68fb      	ldr	r3, [r7, #12]
 8017104:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8017108:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	2202      	movs	r2, #2
 801711c:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8017120:	2300      	movs	r3, #0
 8017122:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 8017124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017128:	4618      	mov	r0, r3
 801712a:	371c      	adds	r7, #28
 801712c:	46bd      	mov	sp, r7
 801712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017132:	4770      	bx	lr

08017134 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8017134:	b480      	push	{r7}
 8017136:	b085      	sub	sp, #20
 8017138:	af00      	add	r7, sp, #0
 801713a:	4603      	mov	r3, r0
 801713c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 801713e:	2300      	movs	r3, #0
 8017140:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8017142:	88fb      	ldrh	r3, [r7, #6]
 8017144:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8017148:	fb92 f3f3 	sdiv	r3, r2, r3
 801714c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 801714e:	68fb      	ldr	r3, [r7, #12]
}
 8017150:	4618      	mov	r0, r3
 8017152:	3714      	adds	r7, #20
 8017154:	46bd      	mov	sp, r7
 8017156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801715a:	4770      	bx	lr

0801715c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 801715c:	b480      	push	{r7}
 801715e:	b085      	sub	sp, #20
 8017160:	af00      	add	r7, sp, #0
 8017162:	4603      	mov	r3, r0
 8017164:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8017166:	2300      	movs	r3, #0
 8017168:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 801716a:	79fb      	ldrb	r3, [r7, #7]
 801716c:	3301      	adds	r3, #1
 801716e:	b2db      	uxtb	r3, r3
 8017170:	005b      	lsls	r3, r3, #1
 8017172:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8017174:	7bfb      	ldrb	r3, [r7, #15]
}
 8017176:	4618      	mov	r0, r3
 8017178:	3714      	adds	r7, #20
 801717a:	46bd      	mov	sp, r7
 801717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017180:	4770      	bx	lr

08017182 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8017182:	b480      	push	{r7}
 8017184:	b085      	sub	sp, #20
 8017186:	af00      	add	r7, sp, #0
 8017188:	4603      	mov	r3, r0
 801718a:	60b9      	str	r1, [r7, #8]
 801718c:	607a      	str	r2, [r7, #4]
 801718e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8017190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017194:	2b00      	cmp	r3, #0
 8017196:	da10      	bge.n	80171ba <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8017198:	7bfb      	ldrb	r3, [r7, #15]
 801719a:	43db      	mvns	r3, r3
 801719c:	b2db      	uxtb	r3, r3
 801719e:	f003 0307 	and.w	r3, r3, #7
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	3308      	adds	r3, #8
 80171a6:	b2da      	uxtb	r2, r3
 80171a8:	68bb      	ldr	r3, [r7, #8]
 80171aa:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 80171ac:	7bfb      	ldrb	r3, [r7, #15]
 80171ae:	3b80      	subs	r3, #128	@ 0x80
 80171b0:	10db      	asrs	r3, r3, #3
 80171b2:	b2da      	uxtb	r2, r3
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 80171b8:	e00c      	b.n	80171d4 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 80171ba:	7bfb      	ldrb	r3, [r7, #15]
 80171bc:	f003 0307 	and.w	r3, r3, #7
 80171c0:	b2da      	uxtb	r2, r3
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 80171c6:	7bfb      	ldrb	r3, [r7, #15]
 80171c8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80171cc:	10db      	asrs	r3, r3, #3
 80171ce:	b2da      	uxtb	r2, r3
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	701a      	strb	r2, [r3, #0]
}
 80171d4:	bf00      	nop
 80171d6:	3714      	adds	r7, #20
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr

080171e0 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b086      	sub	sp, #24
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	60f8      	str	r0, [r7, #12]
 80171e8:	460b      	mov	r3, r1
 80171ea:	607a      	str	r2, [r7, #4]
 80171ec:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80171ee:	2300      	movs	r3, #0
 80171f0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80171f2:	897b      	ldrh	r3, [r7, #10]
 80171f4:	2b0a      	cmp	r3, #10
 80171f6:	d802      	bhi.n	80171fe <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80171f8:	f06f 0309 	mvn.w	r3, #9
 80171fc:	e047      	b.n	801728e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	781b      	ldrb	r3, [r3, #0]
 8017202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017206:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8017214:	f002 020f 	and.w	r2, r2, #15
 8017218:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 801721a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8017224:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017228:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801722a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8017234:	f002 0203 	and.w	r2, r2, #3
 8017238:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801723a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8017244:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017248:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801724a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	88d8      	ldrh	r0, [r3, #6]
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	3305      	adds	r3, #5
 8017254:	461a      	mov	r2, r3
 8017256:	2102      	movs	r1, #2
 8017258:	f7ff faef 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8017260:	68fa      	ldr	r2, [r7, #12]
 8017262:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8017264:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 801726a:	68fa      	ldr	r2, [r7, #12]
 801726c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 801726e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8017278:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801727c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801727e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8017284:	68fa      	ldr	r2, [r7, #12]
 8017286:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8017288:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801728a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801728e:	4618      	mov	r0, r3
 8017290:	3718      	adds	r7, #24
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}

08017296 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8017296:	b580      	push	{r7, lr}
 8017298:	b086      	sub	sp, #24
 801729a:	af00      	add	r7, sp, #0
 801729c:	4603      	mov	r3, r0
 801729e:	60b9      	str	r1, [r7, #8]
 80172a0:	607a      	str	r2, [r7, #4]
 80172a2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80172a4:	2300      	movs	r3, #0
 80172a6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80172a8:	89fb      	ldrh	r3, [r7, #14]
 80172aa:	2b0a      	cmp	r3, #10
 80172ac:	d802      	bhi.n	80172b4 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80172ae:	f06f 0309 	mvn.w	r3, #9
 80172b2:	e046      	b.n	8017342 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 80172b4:	68bb      	ldr	r3, [r7, #8]
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80172bc:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	3301      	adds	r3, #1
 80172c6:	781b      	ldrb	r3, [r3, #0]
 80172c8:	f003 030f 	and.w	r3, r3, #15
 80172cc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 80172d2:	68bb      	ldr	r3, [r7, #8]
 80172d4:	3302      	adds	r3, #2
 80172d6:	781b      	ldrb	r3, [r3, #0]
 80172d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80172dc:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	3303      	adds	r3, #3
 80172e6:	781b      	ldrb	r3, [r3, #0]
 80172e8:	f003 0303 	and.w	r3, r3, #3
 80172ec:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 80172f2:	68bb      	ldr	r3, [r7, #8]
 80172f4:	3304      	adds	r3, #4
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80172fc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	3305      	adds	r3, #5
 8017306:	4619      	mov	r1, r3
 8017308:	2002      	movs	r0, #2
 801730a:	f7ff fac1 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 801730e:	4603      	mov	r3, r0
 8017310:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8017316:	68bb      	ldr	r3, [r7, #8]
 8017318:	79da      	ldrb	r2, [r3, #7]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	7a1a      	ldrb	r2, [r3, #8]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8017326:	68bb      	ldr	r3, [r7, #8]
 8017328:	3309      	adds	r3, #9
 801732a:	781b      	ldrb	r3, [r3, #0]
 801732c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017330:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8017336:	68bb      	ldr	r3, [r7, #8]
 8017338:	7a9a      	ldrb	r2, [r3, #10]
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 801733e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017342:	4618      	mov	r0, r3
 8017344:	3718      	adds	r7, #24
 8017346:	46bd      	mov	sp, r7
 8017348:	bd80      	pop	{r7, pc}

0801734a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 801734a:	b580      	push	{r7, lr}
 801734c:	b086      	sub	sp, #24
 801734e:	af00      	add	r7, sp, #0
 8017350:	6078      	str	r0, [r7, #4]
 8017352:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017354:	2300      	movs	r3, #0
 8017356:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8017358:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d108      	bne.n	8017372 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8017360:	f107 020c 	add.w	r2, r7, #12
 8017364:	230b      	movs	r3, #11
 8017366:	2101      	movs	r1, #1
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f7f3 ffa2 	bl	800b2b2 <VL53L1_ReadMulti>
 801736e:	4603      	mov	r3, r0
 8017370:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8017372:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d108      	bne.n	801738c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 801737a:	f107 030c 	add.w	r3, r7, #12
 801737e:	683a      	ldr	r2, [r7, #0]
 8017380:	4619      	mov	r1, r3
 8017382:	200b      	movs	r0, #11
 8017384:	f7ff ff87 	bl	8017296 <VL53L1_i2c_decode_static_nvm_managed>
 8017388:	4603      	mov	r3, r0
 801738a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 801738c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017390:	4618      	mov	r0, r3
 8017392:	3718      	adds	r7, #24
 8017394:	46bd      	mov	sp, r7
 8017396:	bd80      	pop	{r7, pc}

08017398 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b086      	sub	sp, #24
 801739c:	af00      	add	r7, sp, #0
 801739e:	60f8      	str	r0, [r7, #12]
 80173a0:	460b      	mov	r3, r1
 80173a2:	607a      	str	r2, [r7, #4]
 80173a4:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80173a6:	2300      	movs	r3, #0
 80173a8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80173aa:	897b      	ldrh	r3, [r7, #10]
 80173ac:	2b16      	cmp	r3, #22
 80173ae:	d802      	bhi.n	80173b6 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80173b0:	f06f 0309 	mvn.w	r3, #9
 80173b4:	e076      	b.n	80174a4 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 80173c2:	68fa      	ldr	r2, [r7, #12]
 80173c4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80173c6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 80173cc:	68fa      	ldr	r2, [r7, #12]
 80173ce:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80173d0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 80173d6:	68fa      	ldr	r2, [r7, #12]
 80173d8:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 80173da:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 80173e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 80173ee:	f002 020f 	and.w	r2, r2, #15
 80173f2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 80173f4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 80173fa:	68fa      	ldr	r2, [r7, #12]
 80173fc:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 80173fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8017408:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801740c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801740e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8017418:	f002 0203 	and.w	r2, r2, #3
 801741c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 801741e:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	8958      	ldrh	r0, [r3, #10]
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	3309      	adds	r3, #9
 8017428:	461a      	mov	r2, r3
 801742a:	2102      	movs	r1, #2
 801742c:	f7ff fa05 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8017430:	68fb      	ldr	r3, [r7, #12]
 8017432:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	330b      	adds	r3, #11
 801743a:	461a      	mov	r2, r3
 801743c:	2102      	movs	r1, #2
 801743e:	f7ff fa47 	bl	80168d0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8017442:	68fb      	ldr	r3, [r7, #12]
 8017444:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	330d      	adds	r3, #13
 801744c:	461a      	mov	r2, r3
 801744e:	2102      	movs	r1, #2
 8017450:	f7ff fa3e 	bl	80168d0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	8a18      	ldrh	r0, [r3, #16]
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	330f      	adds	r3, #15
 801745c:	461a      	mov	r2, r3
 801745e:	2102      	movs	r1, #2
 8017460:	f7ff f9eb 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 801746a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801746e:	b218      	sxth	r0, r3
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	3311      	adds	r3, #17
 8017474:	461a      	mov	r2, r3
 8017476:	2102      	movs	r1, #2
 8017478:	f7ff fa2a 	bl	80168d0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	3313      	adds	r3, #19
 8017486:	461a      	mov	r2, r3
 8017488:	2102      	movs	r1, #2
 801748a:	f7ff fa21 	bl	80168d0 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	3315      	adds	r3, #21
 8017498:	461a      	mov	r2, r3
 801749a:	2102      	movs	r1, #2
 801749c:	f7ff fa18 	bl	80168d0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 80174a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80174a4:	4618      	mov	r0, r3
 80174a6:	3718      	adds	r7, #24
 80174a8:	46bd      	mov	sp, r7
 80174aa:	bd80      	pop	{r7, pc}

080174ac <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80174ac:	b580      	push	{r7, lr}
 80174ae:	b086      	sub	sp, #24
 80174b0:	af00      	add	r7, sp, #0
 80174b2:	4603      	mov	r3, r0
 80174b4:	60b9      	str	r1, [r7, #8]
 80174b6:	607a      	str	r2, [r7, #4]
 80174b8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80174ba:	2300      	movs	r3, #0
 80174bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 80174be:	89fb      	ldrh	r3, [r7, #14]
 80174c0:	2b16      	cmp	r3, #22
 80174c2:	d802      	bhi.n	80174ca <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80174c4:	f06f 0309 	mvn.w	r3, #9
 80174c8:	e079      	b.n	80175be <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 80174ca:	68bb      	ldr	r3, [r7, #8]
 80174cc:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	785a      	ldrb	r2, [r3, #1]
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 80174da:	68bb      	ldr	r3, [r7, #8]
 80174dc:	789a      	ldrb	r2, [r3, #2]
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	78da      	ldrb	r2, [r3, #3]
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	791a      	ldrb	r2, [r3, #4]
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	3305      	adds	r3, #5
 80174f6:	781b      	ldrb	r3, [r3, #0]
 80174f8:	f003 030f 	and.w	r3, r3, #15
 80174fc:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8017502:	68bb      	ldr	r3, [r7, #8]
 8017504:	799a      	ldrb	r2, [r3, #6]
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 801750a:	68bb      	ldr	r3, [r7, #8]
 801750c:	3307      	adds	r3, #7
 801750e:	781b      	ldrb	r3, [r3, #0]
 8017510:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017514:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 801751a:	68bb      	ldr	r3, [r7, #8]
 801751c:	3308      	adds	r3, #8
 801751e:	781b      	ldrb	r3, [r3, #0]
 8017520:	f003 0303 	and.w	r3, r3, #3
 8017524:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 801752a:	68bb      	ldr	r3, [r7, #8]
 801752c:	3309      	adds	r3, #9
 801752e:	4619      	mov	r1, r3
 8017530:	2002      	movs	r0, #2
 8017532:	f7ff f9ad 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017536:	4603      	mov	r3, r0
 8017538:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	330b      	adds	r3, #11
 8017542:	4619      	mov	r1, r3
 8017544:	2002      	movs	r0, #2
 8017546:	f7ff f9ef 	bl	8016928 <VL53L1_i2c_decode_int16_t>
 801754a:	4603      	mov	r3, r0
 801754c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8017552:	68bb      	ldr	r3, [r7, #8]
 8017554:	330d      	adds	r3, #13
 8017556:	4619      	mov	r1, r3
 8017558:	2002      	movs	r0, #2
 801755a:	f7ff f9e5 	bl	8016928 <VL53L1_i2c_decode_int16_t>
 801755e:	4603      	mov	r3, r0
 8017560:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8017566:	68bb      	ldr	r3, [r7, #8]
 8017568:	330f      	adds	r3, #15
 801756a:	4619      	mov	r1, r3
 801756c:	2002      	movs	r0, #2
 801756e:	f7ff f98f 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017572:	4603      	mov	r3, r0
 8017574:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	3311      	adds	r3, #17
 801757e:	4619      	mov	r1, r3
 8017580:	2002      	movs	r0, #2
 8017582:	f7ff f9d1 	bl	8016928 <VL53L1_i2c_decode_int16_t>
 8017586:	4603      	mov	r3, r0
 8017588:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801758c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8017592:	68bb      	ldr	r3, [r7, #8]
 8017594:	3313      	adds	r3, #19
 8017596:	4619      	mov	r1, r3
 8017598:	2002      	movs	r0, #2
 801759a:	f7ff f9c5 	bl	8016928 <VL53L1_i2c_decode_int16_t>
 801759e:	4603      	mov	r3, r0
 80175a0:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	3315      	adds	r3, #21
 80175aa:	4619      	mov	r1, r3
 80175ac:	2002      	movs	r0, #2
 80175ae:	f7ff f9bb 	bl	8016928 <VL53L1_i2c_decode_int16_t>
 80175b2:	4603      	mov	r3, r0
 80175b4:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 80175ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80175be:	4618      	mov	r0, r3
 80175c0:	3718      	adds	r7, #24
 80175c2:	46bd      	mov	sp, r7
 80175c4:	bd80      	pop	{r7, pc}

080175c6 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 80175c6:	b580      	push	{r7, lr}
 80175c8:	b088      	sub	sp, #32
 80175ca:	af00      	add	r7, sp, #0
 80175cc:	6078      	str	r0, [r7, #4]
 80175ce:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80175d0:	2300      	movs	r3, #0
 80175d2:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80175d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d108      	bne.n	80175ee <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 80175dc:	f107 0208 	add.w	r2, r7, #8
 80175e0:	2317      	movs	r3, #23
 80175e2:	210d      	movs	r1, #13
 80175e4:	6878      	ldr	r0, [r7, #4]
 80175e6:	f7f3 fe64 	bl	800b2b2 <VL53L1_ReadMulti>
 80175ea:	4603      	mov	r3, r0
 80175ec:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80175ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d108      	bne.n	8017608 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 80175f6:	f107 0308 	add.w	r3, r7, #8
 80175fa:	683a      	ldr	r2, [r7, #0]
 80175fc:	4619      	mov	r1, r3
 80175fe:	2017      	movs	r0, #23
 8017600:	f7ff ff54 	bl	80174ac <VL53L1_i2c_decode_customer_nvm_managed>
 8017604:	4603      	mov	r3, r0
 8017606:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8017608:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801760c:	4618      	mov	r0, r3
 801760e:	3720      	adds	r7, #32
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b086      	sub	sp, #24
 8017618:	af00      	add	r7, sp, #0
 801761a:	60f8      	str	r0, [r7, #12]
 801761c:	460b      	mov	r3, r1
 801761e:	607a      	str	r2, [r7, #4]
 8017620:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017622:	2300      	movs	r3, #0
 8017624:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8017626:	897b      	ldrh	r3, [r7, #10]
 8017628:	2b1f      	cmp	r3, #31
 801762a:	d802      	bhi.n	8017632 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801762c:	f06f 0309 	mvn.w	r3, #9
 8017630:	e0cf      	b.n	80177d2 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	881b      	ldrh	r3, [r3, #0]
 8017636:	687a      	ldr	r2, [r7, #4]
 8017638:	2102      	movs	r1, #2
 801763a:	4618      	mov	r0, r3
 801763c:	f7ff f8fd 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8017648:	f002 0201 	and.w	r2, r2, #1
 801764c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801764e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8017650:	68fb      	ldr	r3, [r7, #12]
 8017652:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8017658:	f002 020f 	and.w	r2, r2, #15
 801765c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801765e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8017668:	f002 020f 	and.w	r2, r2, #15
 801766c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 801766e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8017678:	f002 021f 	and.w	r2, r2, #31
 801767c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 801767e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8017688:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801768c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801768e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8017698:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801769c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801769e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 80176a8:	f002 0201 	and.w	r2, r2, #1
 80176ac:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 80176ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 80176b4:	68fa      	ldr	r2, [r7, #12]
 80176b6:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 80176b8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 80176c2:	f002 0201 	and.w	r2, r2, #1
 80176c6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 80176c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 80176ca:	68fb      	ldr	r3, [r7, #12]
 80176cc:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 80176d2:	f002 0203 	and.w	r2, r2, #3
 80176d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80176d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 80176e2:	f002 021f 	and.w	r2, r2, #31
 80176e6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80176e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 80176f2:	f002 0203 	and.w	r2, r2, #3
 80176f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80176f8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8017702:	f002 0203 	and.w	r2, r2, #3
 8017706:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8017708:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8017712:	f002 0207 	and.w	r2, r2, #7
 8017716:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8017718:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8017722:	f002 021f 	and.w	r2, r2, #31
 8017726:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8017728:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8017732:	f002 0201 	and.w	r2, r2, #1
 8017736:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8017738:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 801773e:	68fa      	ldr	r2, [r7, #12]
 8017740:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8017742:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8017748:	68fa      	ldr	r2, [r7, #12]
 801774a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 801774c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8017752:	68fa      	ldr	r2, [r7, #12]
 8017754:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8017756:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 801775c:	68fa      	ldr	r2, [r7, #12]
 801775e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8017760:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8017766:	68fa      	ldr	r2, [r7, #12]
 8017768:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 801776a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8017770:	68fa      	ldr	r2, [r7, #12]
 8017772:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8017774:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	8b18      	ldrh	r0, [r3, #24]
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	3318      	adds	r3, #24
 801777e:	461a      	mov	r2, r3
 8017780:	2102      	movs	r1, #2
 8017782:	f7ff f85a 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 801778a:	68fa      	ldr	r2, [r7, #12]
 801778c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 801778e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8017794:	68fa      	ldr	r2, [r7, #12]
 8017796:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8017798:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 801779a:	68fb      	ldr	r3, [r7, #12]
 801779c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80177a2:	f002 020f 	and.w	r2, r2, #15
 80177a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80177a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80177b2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80177bc:	f002 020f 	and.w	r2, r2, #15
 80177c0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80177c2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80177c8:	68fa      	ldr	r2, [r7, #12]
 80177ca:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80177cc:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80177ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80177d2:	4618      	mov	r0, r3
 80177d4:	3718      	adds	r7, #24
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}

080177da <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80177da:	b580      	push	{r7, lr}
 80177dc:	b086      	sub	sp, #24
 80177de:	af00      	add	r7, sp, #0
 80177e0:	60f8      	str	r0, [r7, #12]
 80177e2:	460b      	mov	r3, r1
 80177e4:	607a      	str	r2, [r7, #4]
 80177e6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80177e8:	2300      	movs	r3, #0
 80177ea:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 80177ec:	897b      	ldrh	r3, [r7, #10]
 80177ee:	2b15      	cmp	r3, #21
 80177f0:	d802      	bhi.n	80177f8 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80177f2:	f06f 0309 	mvn.w	r3, #9
 80177f6:	e070      	b.n	80178da <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 8017804:	68fa      	ldr	r2, [r7, #12]
 8017806:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8017808:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 801780e:	68fa      	ldr	r2, [r7, #12]
 8017810:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8017812:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 801781c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017820:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8017822:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 8017828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801782c:	b298      	uxth	r0, r3
 801782e:	687b      	ldr	r3, [r7, #4]
 8017830:	3304      	adds	r3, #4
 8017832:	461a      	mov	r2, r3
 8017834:	2102      	movs	r1, #2
 8017836:	f7ff f800 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8017842:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017846:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8017848:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 801784e:	68fa      	ldr	r2, [r7, #12]
 8017850:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8017852:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8017858:	68fa      	ldr	r2, [r7, #12]
 801785a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801785c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8017866:	f002 0201 	and.w	r2, r2, #1
 801786a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801786c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8017876:	f002 0207 	and.w	r2, r2, #7
 801787a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801787c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	8998      	ldrh	r0, [r3, #12]
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	330c      	adds	r3, #12
 8017886:	461a      	mov	r2, r3
 8017888:	2102      	movs	r1, #2
 801788a:	f7fe ffd6 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	89d8      	ldrh	r0, [r3, #14]
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	330e      	adds	r3, #14
 8017896:	461a      	mov	r2, r3
 8017898:	2102      	movs	r1, #2
 801789a:	f7fe ffce 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	8a18      	ldrh	r0, [r3, #16]
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	3310      	adds	r3, #16
 80178a6:	461a      	mov	r2, r3
 80178a8:	2102      	movs	r1, #2
 80178aa:	f7fe ffc6 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80178b2:	68fa      	ldr	r2, [r7, #12]
 80178b4:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80178b6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80178bc:	68fa      	ldr	r2, [r7, #12]
 80178be:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80178c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80178c6:	68fa      	ldr	r2, [r7, #12]
 80178c8:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80178ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80178d0:	68fa      	ldr	r2, [r7, #12]
 80178d2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80178d4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80178d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3718      	adds	r7, #24
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}

080178e2 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80178e2:	b580      	push	{r7, lr}
 80178e4:	b086      	sub	sp, #24
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	60f8      	str	r0, [r7, #12]
 80178ea:	460b      	mov	r3, r1
 80178ec:	607a      	str	r2, [r7, #4]
 80178ee:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80178f0:	2300      	movs	r3, #0
 80178f2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80178f4:	897b      	ldrh	r3, [r7, #10]
 80178f6:	2b16      	cmp	r3, #22
 80178f8:	d802      	bhi.n	8017900 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80178fa:	f06f 0309 	mvn.w	r3, #9
 80178fe:	e06e      	b.n	80179de <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	781b      	ldrb	r3, [r3, #0]
 8017904:	f003 030f 	and.w	r3, r3, #15
 8017908:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8017912:	68fa      	ldr	r2, [r7, #12]
 8017914:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8017916:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8017920:	f002 020f 	and.w	r2, r2, #15
 8017924:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8017926:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 801792c:	68fa      	ldr	r2, [r7, #12]
 801792e:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8017930:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8017932:	68fb      	ldr	r3, [r7, #12]
 8017934:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801793a:	f002 020f 	and.w	r2, r2, #15
 801793e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8017940:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8017946:	68fa      	ldr	r2, [r7, #12]
 8017948:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 801794a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8017954:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017958:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801795a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8017964:	f002 020f 	and.w	r2, r2, #15
 8017968:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801796a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8017970:	68fa      	ldr	r2, [r7, #12]
 8017972:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8017974:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 801797e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017982:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8017984:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017986:	68fb      	ldr	r3, [r7, #12]
 8017988:	8958      	ldrh	r0, [r3, #10]
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	330a      	adds	r3, #10
 801798e:	461a      	mov	r2, r3
 8017990:	2102      	movs	r1, #2
 8017992:	f7fe ff52 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	8998      	ldrh	r0, [r3, #12]
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	330c      	adds	r3, #12
 801799e:	461a      	mov	r2, r3
 80179a0:	2102      	movs	r1, #2
 80179a2:	f7fe ff4a 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80179aa:	68fa      	ldr	r2, [r7, #12]
 80179ac:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80179ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80179b4:	68fa      	ldr	r2, [r7, #12]
 80179b6:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80179b8:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80179ba:	68fb      	ldr	r3, [r7, #12]
 80179bc:	6918      	ldr	r0, [r3, #16]
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	3312      	adds	r3, #18
 80179c2:	461a      	mov	r2, r3
 80179c4:	2104      	movs	r1, #4
 80179c6:	f7fe ffd8 	bl	801697a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80179d2:	f002 0201 	and.w	r2, r2, #1
 80179d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80179d8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80179da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3718      	adds	r7, #24
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}

080179e6 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80179e6:	b580      	push	{r7, lr}
 80179e8:	b086      	sub	sp, #24
 80179ea:	af00      	add	r7, sp, #0
 80179ec:	60f8      	str	r0, [r7, #12]
 80179ee:	460b      	mov	r3, r1
 80179f0:	607a      	str	r2, [r7, #4]
 80179f2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80179f4:	2300      	movs	r3, #0
 80179f6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80179f8:	897b      	ldrh	r3, [r7, #10]
 80179fa:	2b11      	cmp	r3, #17
 80179fc:	d802      	bhi.n	8017a04 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80179fe:	f06f 0309 	mvn.w	r3, #9
 8017a02:	e071      	b.n	8017ae8 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 8017a04:	68fb      	ldr	r3, [r7, #12]
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	f003 0303 	and.w	r3, r3, #3
 8017a0c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	8858      	ldrh	r0, [r3, #2]
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	3301      	adds	r3, #1
 8017a1a:	461a      	mov	r2, r3
 8017a1c:	2102      	movs	r1, #2
 8017a1e:	f7fe ff0c 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	8898      	ldrh	r0, [r3, #4]
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	3303      	adds	r3, #3
 8017a2a:	461a      	mov	r2, r3
 8017a2c:	2102      	movs	r1, #2
 8017a2e:	f7fe ff04 	bl	801683a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8017a3a:	f002 0201 	and.w	r2, r2, #1
 8017a3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8017a40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 8017a4a:	f002 0207 	and.w	r2, r2, #7
 8017a4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8017a50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8017a56:	68fa      	ldr	r2, [r7, #12]
 8017a58:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8017a5a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8017a60:	68fa      	ldr	r2, [r7, #12]
 8017a62:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8017a64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8017a6e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017a72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8017a74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8017a7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017a82:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8017a84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8017a86:	68fb      	ldr	r3, [r7, #12]
 8017a88:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8017a8e:	f002 0203 	and.w	r2, r2, #3
 8017a92:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8017a94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 8017a9a:	687b      	ldr	r3, [r7, #4]
 8017a9c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 8017a9e:	f002 0203 	and.w	r2, r2, #3
 8017aa2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8017aa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8017aa6:	68fb      	ldr	r3, [r7, #12]
 8017aa8:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 8017aaa:	687b      	ldr	r3, [r7, #4]
 8017aac:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 8017aae:	f002 020f 	and.w	r2, r2, #15
 8017ab2:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8017ab4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 8017aba:	68fa      	ldr	r2, [r7, #12]
 8017abc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 8017abe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8017ac4:	68fa      	ldr	r2, [r7, #12]
 8017ac6:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8017ac8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 8017ace:	68fa      	ldr	r2, [r7, #12]
 8017ad0:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 8017ad2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 8017adc:	f002 0203 	and.w	r2, r2, #3
 8017ae0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8017ae2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8017ae4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	3718      	adds	r7, #24
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bd80      	pop	{r7, pc}

08017af0 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8017af0:	b480      	push	{r7}
 8017af2:	b087      	sub	sp, #28
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	60f8      	str	r0, [r7, #12]
 8017af8:	460b      	mov	r3, r1
 8017afa:	607a      	str	r2, [r7, #4]
 8017afc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017afe:	2300      	movs	r3, #0
 8017b00:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8017b02:	897b      	ldrh	r3, [r7, #10]
 8017b04:	2b04      	cmp	r3, #4
 8017b06:	d802      	bhi.n	8017b0e <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017b08:	f06f 0309 	mvn.w	r3, #9
 8017b0c:	e025      	b.n	8017b5a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	781b      	ldrb	r3, [r3, #0]
 8017b12:	f003 0301 	and.w	r3, r3, #1
 8017b16:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 8017b1c:	68fb      	ldr	r3, [r7, #12]
 8017b1e:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8017b20:	687b      	ldr	r3, [r7, #4]
 8017b22:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8017b24:	f002 0201 	and.w	r2, r2, #1
 8017b28:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8017b2a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 8017b2c:	68fb      	ldr	r3, [r7, #12]
 8017b2e:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8017b34:	f002 0201 	and.w	r2, r2, #1
 8017b38:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8017b3a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8017b44:	f002 0203 	and.w	r2, r2, #3
 8017b48:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8017b4a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8017b50:	68fa      	ldr	r2, [r7, #12]
 8017b52:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8017b54:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8017b56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	371c      	adds	r7, #28
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr

08017b66 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8017b66:	b580      	push	{r7, lr}
 8017b68:	b084      	sub	sp, #16
 8017b6a:	af00      	add	r7, sp, #0
 8017b6c:	6078      	str	r0, [r7, #4]
 8017b6e:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017b70:	2300      	movs	r3, #0
 8017b72:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8017b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d108      	bne.n	8017b8e <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8017b7c:	f107 0308 	add.w	r3, r7, #8
 8017b80:	461a      	mov	r2, r3
 8017b82:	2105      	movs	r1, #5
 8017b84:	6838      	ldr	r0, [r7, #0]
 8017b86:	f7ff ffb3 	bl	8017af0 <VL53L1_i2c_encode_system_control>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 8017b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d108      	bne.n	8017ba8 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8017b96:	f107 0208 	add.w	r2, r7, #8
 8017b9a:	2305      	movs	r3, #5
 8017b9c:	2183      	movs	r1, #131	@ 0x83
 8017b9e:	6878      	ldr	r0, [r7, #4]
 8017ba0:	f7f3 fb61 	bl	800b266 <VL53L1_WriteMulti>
 8017ba4:	4603      	mov	r3, r0
 8017ba6:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8017ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017bac:	4618      	mov	r0, r3
 8017bae:	3710      	adds	r7, #16
 8017bb0:	46bd      	mov	sp, r7
 8017bb2:	bd80      	pop	{r7, pc}

08017bb4 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8017bb4:	b580      	push	{r7, lr}
 8017bb6:	b086      	sub	sp, #24
 8017bb8:	af00      	add	r7, sp, #0
 8017bba:	4603      	mov	r3, r0
 8017bbc:	60b9      	str	r1, [r7, #8]
 8017bbe:	607a      	str	r2, [r7, #4]
 8017bc0:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8017bc6:	89fb      	ldrh	r3, [r7, #14]
 8017bc8:	2b2b      	cmp	r3, #43	@ 0x2b
 8017bca:	d802      	bhi.n	8017bd2 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017bcc:	f06f 0309 	mvn.w	r3, #9
 8017bd0:	e0e2      	b.n	8017d98 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	781b      	ldrb	r3, [r3, #0]
 8017bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017bda:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 8017be0:	68bb      	ldr	r3, [r7, #8]
 8017be2:	785a      	ldrb	r2, [r3, #1]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	3302      	adds	r3, #2
 8017bec:	781b      	ldrb	r3, [r3, #0]
 8017bee:	f003 030f 	and.w	r3, r3, #15
 8017bf2:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	78da      	ldrb	r2, [r3, #3]
 8017bfc:	687b      	ldr	r3, [r7, #4]
 8017bfe:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	3304      	adds	r3, #4
 8017c04:	4619      	mov	r1, r3
 8017c06:	2002      	movs	r0, #2
 8017c08:	f7fe fe42 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	3306      	adds	r3, #6
 8017c18:	4619      	mov	r1, r3
 8017c1a:	2002      	movs	r0, #2
 8017c1c:	f7fe fe38 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c20:	4603      	mov	r3, r0
 8017c22:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	3308      	adds	r3, #8
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	2002      	movs	r0, #2
 8017c30:	f7fe fe2e 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c34:	4603      	mov	r3, r0
 8017c36:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8017c3c:	68bb      	ldr	r3, [r7, #8]
 8017c3e:	330a      	adds	r3, #10
 8017c40:	4619      	mov	r1, r3
 8017c42:	2002      	movs	r0, #2
 8017c44:	f7fe fe24 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c48:	4603      	mov	r3, r0
 8017c4a:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8017c50:	68bb      	ldr	r3, [r7, #8]
 8017c52:	330c      	adds	r3, #12
 8017c54:	4619      	mov	r1, r3
 8017c56:	2002      	movs	r0, #2
 8017c58:	f7fe fe1a 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c5c:	4603      	mov	r3, r0
 8017c5e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8017c64:	68bb      	ldr	r3, [r7, #8]
 8017c66:	330e      	adds	r3, #14
 8017c68:	4619      	mov	r1, r3
 8017c6a:	2002      	movs	r0, #2
 8017c6c:	f7fe fe10 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c70:	4603      	mov	r3, r0
 8017c72:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	3310      	adds	r3, #16
 8017c7c:	4619      	mov	r1, r3
 8017c7e:	2002      	movs	r0, #2
 8017c80:	f7fe fe06 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c84:	4603      	mov	r3, r0
 8017c86:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	3312      	adds	r3, #18
 8017c90:	4619      	mov	r1, r3
 8017c92:	2002      	movs	r0, #2
 8017c94:	f7fe fdfc 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	3314      	adds	r3, #20
 8017ca4:	4619      	mov	r1, r3
 8017ca6:	2002      	movs	r0, #2
 8017ca8:	f7fe fdf2 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017cac:	4603      	mov	r3, r0
 8017cae:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8017cb4:	68bb      	ldr	r3, [r7, #8]
 8017cb6:	3316      	adds	r3, #22
 8017cb8:	4619      	mov	r1, r3
 8017cba:	2002      	movs	r0, #2
 8017cbc:	f7fe fde8 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017cc0:	4603      	mov	r3, r0
 8017cc2:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8017cc8:	68bb      	ldr	r3, [r7, #8]
 8017cca:	3318      	adds	r3, #24
 8017ccc:	4619      	mov	r1, r3
 8017cce:	2002      	movs	r0, #2
 8017cd0:	f7fe fdde 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	331a      	adds	r3, #26
 8017ce0:	4619      	mov	r1, r3
 8017ce2:	2002      	movs	r0, #2
 8017ce4:	f7fe fdd4 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017ce8:	4603      	mov	r3, r0
 8017cea:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	331c      	adds	r3, #28
 8017cf4:	4619      	mov	r1, r3
 8017cf6:	2002      	movs	r0, #2
 8017cf8:	f7fe fdca 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	331e      	adds	r3, #30
 8017d08:	4619      	mov	r1, r3
 8017d0a:	2002      	movs	r0, #2
 8017d0c:	f7fe fdc0 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017d10:	4603      	mov	r3, r0
 8017d12:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	3320      	adds	r3, #32
 8017d1c:	4619      	mov	r1, r3
 8017d1e:	2002      	movs	r0, #2
 8017d20:	f7fe fdb6 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017d24:	4603      	mov	r3, r0
 8017d26:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	3322      	adds	r3, #34	@ 0x22
 8017d30:	4619      	mov	r1, r3
 8017d32:	2002      	movs	r0, #2
 8017d34:	f7fe fdac 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	3324      	adds	r3, #36	@ 0x24
 8017d44:	4619      	mov	r1, r3
 8017d46:	2002      	movs	r0, #2
 8017d48:	f7fe fda2 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	3326      	adds	r3, #38	@ 0x26
 8017d58:	4619      	mov	r1, r3
 8017d5a:	2002      	movs	r0, #2
 8017d5c:	f7fe fd98 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017d60:	4603      	mov	r3, r0
 8017d62:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8017d68:	68bb      	ldr	r3, [r7, #8]
 8017d6a:	3328      	adds	r3, #40	@ 0x28
 8017d6c:	4619      	mov	r1, r3
 8017d6e:	2002      	movs	r0, #2
 8017d70:	f7fe fd8e 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017d74:	4603      	mov	r3, r0
 8017d76:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 8017d7c:	68bb      	ldr	r3, [r7, #8]
 8017d7e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8017d94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3718      	adds	r7, #24
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd80      	pop	{r7, pc}

08017da0 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b086      	sub	sp, #24
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	4603      	mov	r3, r0
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	607a      	str	r2, [r7, #4]
 8017dac:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017dae:	2300      	movs	r3, #0
 8017db0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8017db2:	89fb      	ldrh	r3, [r7, #14]
 8017db4:	2b20      	cmp	r3, #32
 8017db6:	d802      	bhi.n	8017dbe <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017db8:	f06f 0309 	mvn.w	r3, #9
 8017dbc:	e04d      	b.n	8017e5a <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 8017dbe:	68b9      	ldr	r1, [r7, #8]
 8017dc0:	2004      	movs	r0, #4
 8017dc2:	f7fe fe04 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8017dc6:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 8017dcc:	68bb      	ldr	r3, [r7, #8]
 8017dce:	3304      	adds	r3, #4
 8017dd0:	4619      	mov	r1, r3
 8017dd2:	2004      	movs	r0, #4
 8017dd4:	f7fe fdfb 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8017dd8:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 8017dde:	68bb      	ldr	r3, [r7, #8]
 8017de0:	3308      	adds	r3, #8
 8017de2:	4619      	mov	r1, r3
 8017de4:	2004      	movs	r0, #4
 8017de6:	f7fe fe0f 	bl	8016a08 <VL53L1_i2c_decode_int32_t>
 8017dea:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8017df0:	68bb      	ldr	r3, [r7, #8]
 8017df2:	330c      	adds	r3, #12
 8017df4:	4619      	mov	r1, r3
 8017df6:	2004      	movs	r0, #4
 8017df8:	f7fe fde9 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8017dfc:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8017e02:	68bb      	ldr	r3, [r7, #8]
 8017e04:	3310      	adds	r3, #16
 8017e06:	4619      	mov	r1, r3
 8017e08:	2004      	movs	r0, #4
 8017e0a:	f7fe fde0 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8017e0e:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 8017e14:	68bb      	ldr	r3, [r7, #8]
 8017e16:	3314      	adds	r3, #20
 8017e18:	4619      	mov	r1, r3
 8017e1a:	2004      	movs	r0, #4
 8017e1c:	f7fe fdd7 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8017e20:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 8017e26:	68bb      	ldr	r3, [r7, #8]
 8017e28:	3318      	adds	r3, #24
 8017e2a:	4619      	mov	r1, r3
 8017e2c:	2004      	movs	r0, #4
 8017e2e:	f7fe fdeb 	bl	8016a08 <VL53L1_i2c_decode_int32_t>
 8017e32:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	331c      	adds	r3, #28
 8017e3c:	4619      	mov	r1, r3
 8017e3e:	2004      	movs	r0, #4
 8017e40:	f7fe fdc5 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8017e44:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8017e4a:	68bb      	ldr	r3, [r7, #8]
 8017e4c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8017e56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3718      	adds	r7, #24
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}

08017e62 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8017e62:	b580      	push	{r7, lr}
 8017e64:	b086      	sub	sp, #24
 8017e66:	af00      	add	r7, sp, #0
 8017e68:	4603      	mov	r3, r0
 8017e6a:	60b9      	str	r1, [r7, #8]
 8017e6c:	607a      	str	r2, [r7, #4]
 8017e6e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8017e70:	2300      	movs	r3, #0
 8017e72:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8017e74:	89fb      	ldrh	r3, [r7, #14]
 8017e76:	2b37      	cmp	r3, #55	@ 0x37
 8017e78:	d802      	bhi.n	8017e80 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8017e7a:	f06f 0309 	mvn.w	r3, #9
 8017e7e:	e15e      	b.n	801813e <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8017e80:	68b9      	ldr	r1, [r7, #8]
 8017e82:	2002      	movs	r0, #2
 8017e84:	f7fe fd04 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017e88:	4603      	mov	r3, r0
 8017e8a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8017e90:	68bb      	ldr	r3, [r7, #8]
 8017e92:	3302      	adds	r3, #2
 8017e94:	781b      	ldrb	r3, [r3, #0]
 8017e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017e9a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8017ea0:	68bb      	ldr	r3, [r7, #8]
 8017ea2:	3303      	adds	r3, #3
 8017ea4:	781b      	ldrb	r3, [r3, #0]
 8017ea6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017eaa:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8017eb0:	68bb      	ldr	r3, [r7, #8]
 8017eb2:	3304      	adds	r3, #4
 8017eb4:	781b      	ldrb	r3, [r3, #0]
 8017eb6:	f003 0303 	and.w	r3, r3, #3
 8017eba:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8017ec0:	68bb      	ldr	r3, [r7, #8]
 8017ec2:	3305      	adds	r3, #5
 8017ec4:	781b      	ldrb	r3, [r3, #0]
 8017ec6:	f003 0301 	and.w	r3, r3, #1
 8017eca:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	3306      	adds	r3, #6
 8017ed4:	781b      	ldrb	r3, [r3, #0]
 8017ed6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017eda:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 8017ee0:	68bb      	ldr	r3, [r7, #8]
 8017ee2:	3307      	adds	r3, #7
 8017ee4:	781b      	ldrb	r3, [r3, #0]
 8017ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017eea:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8017ef0:	68bb      	ldr	r3, [r7, #8]
 8017ef2:	3308      	adds	r3, #8
 8017ef4:	4619      	mov	r1, r3
 8017ef6:	2002      	movs	r0, #2
 8017ef8:	f7fe fcca 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017efc:	4603      	mov	r3, r0
 8017efe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8017f02:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 8017f04:	687b      	ldr	r3, [r7, #4]
 8017f06:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 8017f08:	68bb      	ldr	r3, [r7, #8]
 8017f0a:	330a      	adds	r3, #10
 8017f0c:	781b      	ldrb	r3, [r3, #0]
 8017f0e:	f003 0303 	and.w	r3, r3, #3
 8017f12:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	330b      	adds	r3, #11
 8017f1c:	781b      	ldrb	r3, [r3, #0]
 8017f1e:	f003 0303 	and.w	r3, r3, #3
 8017f22:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	330c      	adds	r3, #12
 8017f2c:	781b      	ldrb	r3, [r3, #0]
 8017f2e:	f003 030f 	and.w	r3, r3, #15
 8017f32:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8017f38:	68bb      	ldr	r3, [r7, #8]
 8017f3a:	330d      	adds	r3, #13
 8017f3c:	781b      	ldrb	r3, [r3, #0]
 8017f3e:	f003 0307 	and.w	r3, r3, #7
 8017f42:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	330e      	adds	r3, #14
 8017f4c:	781b      	ldrb	r3, [r3, #0]
 8017f4e:	f003 0301 	and.w	r3, r3, #1
 8017f52:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	330f      	adds	r3, #15
 8017f5c:	781b      	ldrb	r3, [r3, #0]
 8017f5e:	f003 0303 	and.w	r3, r3, #3
 8017f62:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8017f68:	68bb      	ldr	r3, [r7, #8]
 8017f6a:	7c1a      	ldrb	r2, [r3, #16]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8017f70:	68bb      	ldr	r3, [r7, #8]
 8017f72:	7c5a      	ldrb	r2, [r3, #17]
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8017f78:	68bb      	ldr	r3, [r7, #8]
 8017f7a:	3312      	adds	r3, #18
 8017f7c:	4619      	mov	r1, r3
 8017f7e:	2002      	movs	r0, #2
 8017f80:	f7fe fc86 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017f84:	4603      	mov	r3, r0
 8017f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017f8a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8017f90:	68bb      	ldr	r3, [r7, #8]
 8017f92:	3316      	adds	r3, #22
 8017f94:	4619      	mov	r1, r3
 8017f96:	2002      	movs	r0, #2
 8017f98:	f7fe fc7a 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8017fa4:	68bb      	ldr	r3, [r7, #8]
 8017fa6:	3318      	adds	r3, #24
 8017fa8:	4619      	mov	r1, r3
 8017faa:	2002      	movs	r0, #2
 8017fac:	f7fe fc70 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8017fb0:	4603      	mov	r3, r0
 8017fb2:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	331a      	adds	r3, #26
 8017fbc:	781b      	ldrb	r3, [r3, #0]
 8017fbe:	f003 0301 	and.w	r3, r3, #1
 8017fc2:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8017fc8:	68bb      	ldr	r3, [r7, #8]
 8017fca:	331b      	adds	r3, #27
 8017fcc:	781b      	ldrb	r3, [r3, #0]
 8017fce:	f003 0307 	and.w	r3, r3, #7
 8017fd2:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	7f1a      	ldrb	r2, [r3, #28]
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	7f5a      	ldrb	r2, [r3, #29]
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 8017fe8:	68bb      	ldr	r3, [r7, #8]
 8017fea:	331e      	adds	r3, #30
 8017fec:	781b      	ldrb	r3, [r3, #0]
 8017fee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8017ff2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	331f      	adds	r3, #31
 8017ffc:	781b      	ldrb	r3, [r3, #0]
 8017ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018002:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 8018008:	68bb      	ldr	r3, [r7, #8]
 801800a:	3320      	adds	r3, #32
 801800c:	781b      	ldrb	r3, [r3, #0]
 801800e:	f003 0303 	and.w	r3, r3, #3
 8018012:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 8018018:	68bb      	ldr	r3, [r7, #8]
 801801a:	3321      	adds	r3, #33	@ 0x21
 801801c:	781b      	ldrb	r3, [r3, #0]
 801801e:	f003 030f 	and.w	r3, r3, #15
 8018022:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 8018028:	68bb      	ldr	r3, [r7, #8]
 801802a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8018034:	68bb      	ldr	r3, [r7, #8]
 8018036:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8018040:	68bb      	ldr	r3, [r7, #8]
 8018042:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801804c:	68bb      	ldr	r3, [r7, #8]
 801804e:	3325      	adds	r3, #37	@ 0x25
 8018050:	781b      	ldrb	r3, [r3, #0]
 8018052:	f003 0301 	and.w	r3, r3, #1
 8018056:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	3326      	adds	r3, #38	@ 0x26
 8018062:	781b      	ldrb	r3, [r3, #0]
 8018064:	f003 0303 	and.w	r3, r3, #3
 8018068:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8018070:	68bb      	ldr	r3, [r7, #8]
 8018072:	3327      	adds	r3, #39	@ 0x27
 8018074:	781b      	ldrb	r3, [r3, #0]
 8018076:	f003 031f 	and.w	r3, r3, #31
 801807a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8018082:	68bb      	ldr	r3, [r7, #8]
 8018084:	3328      	adds	r3, #40	@ 0x28
 8018086:	781b      	ldrb	r3, [r3, #0]
 8018088:	f003 031f 	and.w	r3, r3, #31
 801808c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8018094:	68bb      	ldr	r3, [r7, #8]
 8018096:	3329      	adds	r3, #41	@ 0x29
 8018098:	781b      	ldrb	r3, [r3, #0]
 801809a:	f003 031f 	and.w	r3, r3, #31
 801809e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80180a6:	68bb      	ldr	r3, [r7, #8]
 80180a8:	332a      	adds	r3, #42	@ 0x2a
 80180aa:	781b      	ldrb	r3, [r3, #0]
 80180ac:	f003 0301 	and.w	r3, r3, #1
 80180b0:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	332b      	adds	r3, #43	@ 0x2b
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	f003 0301 	and.w	r3, r3, #1
 80180c2:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	332c      	adds	r3, #44	@ 0x2c
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	f003 0303 	and.w	r3, r3, #3
 80180d4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	332d      	adds	r3, #45	@ 0x2d
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80180e6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80180ee:	68bb      	ldr	r3, [r7, #8]
 80180f0:	332e      	adds	r3, #46	@ 0x2e
 80180f2:	4619      	mov	r1, r3
 80180f4:	2004      	movs	r0, #4
 80180f6:	f7fe fc6a 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 80180fa:	4603      	mov	r3, r0
 80180fc:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8018104:	68bb      	ldr	r3, [r7, #8]
 8018106:	3332      	adds	r3, #50	@ 0x32
 8018108:	4619      	mov	r1, r3
 801810a:	2004      	movs	r0, #4
 801810c:	f7fe fc5f 	bl	80169ce <VL53L1_i2c_decode_uint32_t>
 8018110:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8018116:	68bb      	ldr	r3, [r7, #8]
 8018118:	3336      	adds	r3, #54	@ 0x36
 801811a:	781b      	ldrb	r3, [r3, #0]
 801811c:	f003 0301 	and.w	r3, r3, #1
 8018120:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8018128:	68bb      	ldr	r3, [r7, #8]
 801812a:	3337      	adds	r3, #55	@ 0x37
 801812c:	781b      	ldrb	r3, [r3, #0]
 801812e:	f003 0301 	and.w	r3, r3, #1
 8018132:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8018134:	687b      	ldr	r3, [r7, #4]
 8018136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 801813a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801813e:	4618      	mov	r0, r3
 8018140:	3718      	adds	r7, #24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}

08018146 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8018146:	b580      	push	{r7, lr}
 8018148:	b086      	sub	sp, #24
 801814a:	af00      	add	r7, sp, #0
 801814c:	4603      	mov	r3, r0
 801814e:	60b9      	str	r1, [r7, #8]
 8018150:	607a      	str	r2, [r7, #4]
 8018152:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8018154:	2300      	movs	r3, #0
 8018156:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8018158:	89fb      	ldrh	r3, [r7, #14]
 801815a:	2b30      	cmp	r3, #48	@ 0x30
 801815c:	d802      	bhi.n	8018164 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801815e:	f06f 0309 	mvn.w	r3, #9
 8018162:	e112      	b.n	801838a <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 801816c:	68bb      	ldr	r3, [r7, #8]
 801816e:	785a      	ldrb	r2, [r3, #1]
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	789a      	ldrb	r2, [r3, #2]
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	3303      	adds	r3, #3
 8018180:	4619      	mov	r1, r3
 8018182:	2002      	movs	r0, #2
 8018184:	f7fe fb84 	bl	8016890 <VL53L1_i2c_decode_uint16_t>
 8018188:	4603      	mov	r3, r0
 801818a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8018190:	68bb      	ldr	r3, [r7, #8]
 8018192:	3305      	adds	r3, #5
 8018194:	781b      	ldrb	r3, [r3, #0]
 8018196:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801819a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 80181a0:	68bb      	ldr	r3, [r7, #8]
 80181a2:	3306      	adds	r3, #6
 80181a4:	781b      	ldrb	r3, [r3, #0]
 80181a6:	f003 0307 	and.w	r3, r3, #7
 80181aa:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	3307      	adds	r3, #7
 80181b4:	781b      	ldrb	r3, [r3, #0]
 80181b6:	f003 0307 	and.w	r3, r3, #7
 80181ba:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 80181c0:	68bb      	ldr	r3, [r7, #8]
 80181c2:	3308      	adds	r3, #8
 80181c4:	781b      	ldrb	r3, [r3, #0]
 80181c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80181ca:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	3309      	adds	r3, #9
 80181d4:	781b      	ldrb	r3, [r3, #0]
 80181d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80181da:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 80181e0:	68bb      	ldr	r3, [r7, #8]
 80181e2:	330a      	adds	r3, #10
 80181e4:	781b      	ldrb	r3, [r3, #0]
 80181e6:	f003 0301 	and.w	r3, r3, #1
 80181ea:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 80181f0:	68bb      	ldr	r3, [r7, #8]
 80181f2:	330b      	adds	r3, #11
 80181f4:	781b      	ldrb	r3, [r3, #0]
 80181f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80181fa:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8018200:	68bb      	ldr	r3, [r7, #8]
 8018202:	330c      	adds	r3, #12
 8018204:	781b      	ldrb	r3, [r3, #0]
 8018206:	f003 0301 	and.w	r3, r3, #1
 801820a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	330d      	adds	r3, #13
 8018214:	781b      	ldrb	r3, [r3, #0]
 8018216:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801821a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8018220:	68bb      	ldr	r3, [r7, #8]
 8018222:	330e      	adds	r3, #14
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801822a:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8018230:	68bb      	ldr	r3, [r7, #8]
 8018232:	7bda      	ldrb	r2, [r3, #15]
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	7c1a      	ldrb	r2, [r3, #16]
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8018240:	68bb      	ldr	r3, [r7, #8]
 8018242:	7c5a      	ldrb	r2, [r3, #17]
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8018248:	68bb      	ldr	r3, [r7, #8]
 801824a:	7c9a      	ldrb	r2, [r3, #18]
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	7cda      	ldrb	r2, [r3, #19]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8018258:	68bb      	ldr	r3, [r7, #8]
 801825a:	7d1a      	ldrb	r2, [r3, #20]
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8018260:	68bb      	ldr	r3, [r7, #8]
 8018262:	7d5a      	ldrb	r2, [r3, #21]
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	7d9a      	ldrb	r2, [r3, #22]
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8018270:	68bb      	ldr	r3, [r7, #8]
 8018272:	7dda      	ldrb	r2, [r3, #23]
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	7e1a      	ldrb	r2, [r3, #24]
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8018280:	68bb      	ldr	r3, [r7, #8]
 8018282:	7e5a      	ldrb	r2, [r3, #25]
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8018288:	68bb      	ldr	r3, [r7, #8]
 801828a:	7e9a      	ldrb	r2, [r3, #26]
 801828c:	687b      	ldr	r3, [r7, #4]
 801828e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8018290:	68bb      	ldr	r3, [r7, #8]
 8018292:	7eda      	ldrb	r2, [r3, #27]
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8018298:	68bb      	ldr	r3, [r7, #8]
 801829a:	7f1a      	ldrb	r2, [r3, #28]
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	7f5a      	ldrb	r2, [r3, #29]
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 80182a8:	68bb      	ldr	r3, [r7, #8]
 80182aa:	7f9a      	ldrb	r2, [r3, #30]
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 80182b0:	68bb      	ldr	r3, [r7, #8]
 80182b2:	7fda      	ldrb	r2, [r3, #31]
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 80182ba:	68bb      	ldr	r3, [r7, #8]
 80182bc:	f893 2020 	ldrb.w	r2, [r3, #32]
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 80182c6:	68bb      	ldr	r3, [r7, #8]
 80182c8:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 80182d2:	68bb      	ldr	r3, [r7, #8]
 80182d4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 80182de:	68bb      	ldr	r3, [r7, #8]
 80182e0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8018302:	68bb      	ldr	r3, [r7, #8]
 8018304:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 801830e:	68bb      	ldr	r3, [r7, #8]
 8018310:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 801832c:	687b      	ldr	r3, [r7, #4]
 801832e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8018332:	68bb      	ldr	r3, [r7, #8]
 8018334:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 801834a:	68bb      	ldr	r3, [r7, #8]
 801834c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8018356:	68bb      	ldr	r3, [r7, #8]
 8018358:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8018362:	68bb      	ldr	r3, [r7, #8]
 8018364:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 801837a:	68bb      	ldr	r3, [r7, #8]
 801837c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8018380:	687b      	ldr	r3, [r7, #4]
 8018382:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8018386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801838a:	4618      	mov	r0, r3
 801838c:	3718      	adds	r7, #24
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}

08018392 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8018392:	b580      	push	{r7, lr}
 8018394:	b090      	sub	sp, #64	@ 0x40
 8018396:	af00      	add	r7, sp, #0
 8018398:	6078      	str	r0, [r7, #4]
 801839a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801839c:	2300      	movs	r3, #0
 801839e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80183a2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d10a      	bne.n	80183c0 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 80183aa:	f107 020c 	add.w	r2, r7, #12
 80183ae:	2331      	movs	r3, #49	@ 0x31
 80183b0:	f240 110f 	movw	r1, #271	@ 0x10f
 80183b4:	6878      	ldr	r0, [r7, #4]
 80183b6:	f7f2 ff7c 	bl	800b2b2 <VL53L1_ReadMulti>
 80183ba:	4603      	mov	r3, r0
 80183bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 80183c0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d109      	bne.n	80183dc <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 80183c8:	f107 030c 	add.w	r3, r7, #12
 80183cc:	683a      	ldr	r2, [r7, #0]
 80183ce:	4619      	mov	r1, r3
 80183d0:	2031      	movs	r0, #49	@ 0x31
 80183d2:	f7ff feb8 	bl	8018146 <VL53L1_i2c_decode_nvm_copy_data>
 80183d6:	4603      	mov	r3, r0
 80183d8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 80183dc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80183e0:	4618      	mov	r0, r3
 80183e2:	3740      	adds	r7, #64	@ 0x40
 80183e4:	46bd      	mov	sp, r7
 80183e6:	bd80      	pop	{r7, pc}

080183e8 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 80183e8:	b580      	push	{r7, lr}
 80183ea:	b086      	sub	sp, #24
 80183ec:	af00      	add	r7, sp, #0
 80183ee:	6078      	str	r0, [r7, #4]
 80183f0:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80183f2:	2300      	movs	r3, #0
 80183f4:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 80183fa:	2300      	movs	r3, #0
 80183fc:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 80183fe:	2300      	movs	r3, #0
 8018400:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8018402:	2300      	movs	r3, #0
 8018404:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8018406:	693b      	ldr	r3, [r7, #16]
 8018408:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 801840c:	f003 0310 	and.w	r3, r3, #16
 8018410:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8018412:	7bfb      	ldrb	r3, [r7, #15]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d102      	bne.n	801841e <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8018418:	2301      	movs	r3, #1
 801841a:	75fb      	strb	r3, [r7, #23]
 801841c:	e001      	b.n	8018422 <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 801841e:	2300      	movs	r3, #0
 8018420:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 8018422:	f107 030e 	add.w	r3, r7, #14
 8018426:	461a      	mov	r2, r3
 8018428:	2131      	movs	r1, #49	@ 0x31
 801842a:	6878      	ldr	r0, [r7, #4]
 801842c:	f7f2 ff8c 	bl	800b348 <VL53L1_RdByte>
 8018430:	4603      	mov	r3, r0
 8018432:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8018434:	7bbb      	ldrb	r3, [r7, #14]
 8018436:	f003 0201 	and.w	r2, r3, #1
 801843a:	7dfb      	ldrb	r3, [r7, #23]
 801843c:	429a      	cmp	r2, r3
 801843e:	d103      	bne.n	8018448 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 8018440:	683b      	ldr	r3, [r7, #0]
 8018442:	2201      	movs	r2, #1
 8018444:	701a      	strb	r2, [r3, #0]
 8018446:	e002      	b.n	801844e <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 8018448:	683b      	ldr	r3, [r7, #0]
 801844a:	2200      	movs	r2, #0
 801844c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 801844e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8018452:	4618      	mov	r0, r3
 8018454:	3718      	adds	r7, #24
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}
	...

0801845c <arm_mat_trans_f32>:
 801845c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018460:	8802      	ldrh	r2, [r0, #0]
 8018462:	884b      	ldrh	r3, [r1, #2]
 8018464:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8018468:	684f      	ldr	r7, [r1, #4]
 801846a:	8840      	ldrh	r0, [r0, #2]
 801846c:	4293      	cmp	r3, r2
 801846e:	b083      	sub	sp, #12
 8018470:	d14c      	bne.n	801850c <arm_mat_trans_f32+0xb0>
 8018472:	f8b1 e000 	ldrh.w	lr, [r1]
 8018476:	4586      	cmp	lr, r0
 8018478:	d148      	bne.n	801850c <arm_mat_trans_f32+0xb0>
 801847a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 801847e:	009c      	lsls	r4, r3, #2
 8018480:	f00e 0e03 	and.w	lr, lr, #3
 8018484:	fb08 f904 	mul.w	r9, r8, r4
 8018488:	ea4f 028e 	mov.w	r2, lr, lsl #2
 801848c:	011d      	lsls	r5, r3, #4
 801848e:	00db      	lsls	r3, r3, #3
 8018490:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8018494:	eb07 0a04 	add.w	sl, r7, r4
 8018498:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 801849c:	9201      	str	r2, [sp, #4]
 801849e:	9300      	str	r3, [sp, #0]
 80184a0:	463b      	mov	r3, r7
 80184a2:	f1b8 0f00 	cmp.w	r8, #0
 80184a6:	d01d      	beq.n	80184e4 <arm_mat_trans_f32+0x88>
 80184a8:	9900      	ldr	r1, [sp, #0]
 80184aa:	f10c 0210 	add.w	r2, ip, #16
 80184ae:	4439      	add	r1, r7
 80184b0:	4640      	mov	r0, r8
 80184b2:	f852 6c10 	ldr.w	r6, [r2, #-16]
 80184b6:	601e      	str	r6, [r3, #0]
 80184b8:	ed52 7a03 	vldr	s15, [r2, #-12]
 80184bc:	191e      	adds	r6, r3, r4
 80184be:	edc6 7a00 	vstr	s15, [r6]
 80184c2:	f852 6c08 	ldr.w	r6, [r2, #-8]
 80184c6:	600e      	str	r6, [r1, #0]
 80184c8:	ed52 7a01 	vldr	s15, [r2, #-4]
 80184cc:	190e      	adds	r6, r1, r4
 80184ce:	3801      	subs	r0, #1
 80184d0:	442b      	add	r3, r5
 80184d2:	f102 0210 	add.w	r2, r2, #16
 80184d6:	edc6 7a00 	vstr	s15, [r6]
 80184da:	4429      	add	r1, r5
 80184dc:	d1e9      	bne.n	80184b2 <arm_mat_trans_f32+0x56>
 80184de:	44dc      	add	ip, fp
 80184e0:	eb09 0307 	add.w	r3, r9, r7
 80184e4:	f1be 0f00 	cmp.w	lr, #0
 80184e8:	d009      	beq.n	80184fe <arm_mat_trans_f32+0xa2>
 80184ea:	4672      	mov	r2, lr
 80184ec:	4661      	mov	r1, ip
 80184ee:	f851 0b04 	ldr.w	r0, [r1], #4
 80184f2:	6018      	str	r0, [r3, #0]
 80184f4:	3a01      	subs	r2, #1
 80184f6:	4423      	add	r3, r4
 80184f8:	d1f9      	bne.n	80184ee <arm_mat_trans_f32+0x92>
 80184fa:	9b01      	ldr	r3, [sp, #4]
 80184fc:	449c      	add	ip, r3
 80184fe:	3704      	adds	r7, #4
 8018500:	4557      	cmp	r7, sl
 8018502:	d1cd      	bne.n	80184a0 <arm_mat_trans_f32+0x44>
 8018504:	2000      	movs	r0, #0
 8018506:	b003      	add	sp, #12
 8018508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801850c:	f06f 0002 	mvn.w	r0, #2
 8018510:	e7f9      	b.n	8018506 <arm_mat_trans_f32+0xaa>
 8018512:	bf00      	nop

08018514 <arm_mat_scale_f32>:
 8018514:	b470      	push	{r4, r5, r6}
 8018516:	e9d1 3500 	ldrd	r3, r5, [r1]
 801851a:	6802      	ldr	r2, [r0, #0]
 801851c:	6846      	ldr	r6, [r0, #4]
 801851e:	429a      	cmp	r2, r3
 8018520:	d147      	bne.n	80185b2 <arm_mat_scale_f32+0x9e>
 8018522:	8803      	ldrh	r3, [r0, #0]
 8018524:	8840      	ldrh	r0, [r0, #2]
 8018526:	fb00 f003 	mul.w	r0, r0, r3
 801852a:	0884      	lsrs	r4, r0, #2
 801852c:	d025      	beq.n	801857a <arm_mat_scale_f32+0x66>
 801852e:	f106 0210 	add.w	r2, r6, #16
 8018532:	f105 0310 	add.w	r3, r5, #16
 8018536:	4621      	mov	r1, r4
 8018538:	ed52 7a04 	vldr	s15, [r2, #-16]
 801853c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018540:	3901      	subs	r1, #1
 8018542:	ed43 7a04 	vstr	s15, [r3, #-16]
 8018546:	ed52 7a03 	vldr	s15, [r2, #-12]
 801854a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801854e:	f102 0210 	add.w	r2, r2, #16
 8018552:	ed43 7a03 	vstr	s15, [r3, #-12]
 8018556:	ed52 7a06 	vldr	s15, [r2, #-24]	@ 0xffffffe8
 801855a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801855e:	f103 0310 	add.w	r3, r3, #16
 8018562:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8018566:	ed52 7a05 	vldr	s15, [r2, #-20]	@ 0xffffffec
 801856a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801856e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8018572:	d1e1      	bne.n	8018538 <arm_mat_scale_f32+0x24>
 8018574:	0124      	lsls	r4, r4, #4
 8018576:	4426      	add	r6, r4
 8018578:	4425      	add	r5, r4
 801857a:	f010 0003 	ands.w	r0, r0, #3
 801857e:	d015      	beq.n	80185ac <arm_mat_scale_f32+0x98>
 8018580:	edd6 7a00 	vldr	s15, [r6]
 8018584:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018588:	3801      	subs	r0, #1
 801858a:	edc5 7a00 	vstr	s15, [r5]
 801858e:	d00d      	beq.n	80185ac <arm_mat_scale_f32+0x98>
 8018590:	edd6 7a01 	vldr	s15, [r6, #4]
 8018594:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018598:	2801      	cmp	r0, #1
 801859a:	edc5 7a01 	vstr	s15, [r5, #4]
 801859e:	d005      	beq.n	80185ac <arm_mat_scale_f32+0x98>
 80185a0:	edd6 7a02 	vldr	s15, [r6, #8]
 80185a4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80185a8:	ed85 0a02 	vstr	s0, [r5, #8]
 80185ac:	2000      	movs	r0, #0
 80185ae:	bc70      	pop	{r4, r5, r6}
 80185b0:	4770      	bx	lr
 80185b2:	f06f 0002 	mvn.w	r0, #2
 80185b6:	e7fa      	b.n	80185ae <arm_mat_scale_f32+0x9a>

080185b8 <arm_mat_mult_f32>:
 80185b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80185bc:	8845      	ldrh	r5, [r0, #2]
 80185be:	880b      	ldrh	r3, [r1, #0]
 80185c0:	8806      	ldrh	r6, [r0, #0]
 80185c2:	6847      	ldr	r7, [r0, #4]
 80185c4:	6854      	ldr	r4, [r2, #4]
 80185c6:	6848      	ldr	r0, [r1, #4]
 80185c8:	b08b      	sub	sp, #44	@ 0x2c
 80185ca:	42ab      	cmp	r3, r5
 80185cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80185ce:	9604      	str	r6, [sp, #16]
 80185d0:	8849      	ldrh	r1, [r1, #2]
 80185d2:	f040 808a 	bne.w	80186ea <arm_mat_mult_f32+0x132>
 80185d6:	8815      	ldrh	r5, [r2, #0]
 80185d8:	42b5      	cmp	r5, r6
 80185da:	f040 8086 	bne.w	80186ea <arm_mat_mult_f32+0x132>
 80185de:	8852      	ldrh	r2, [r2, #2]
 80185e0:	428a      	cmp	r2, r1
 80185e2:	f040 8082 	bne.w	80186ea <arm_mat_mult_f32+0x132>
 80185e6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 80185ea:	1d01      	adds	r1, r0, #4
 80185ec:	0116      	lsls	r6, r2, #4
 80185ee:	9108      	str	r1, [sp, #32]
 80185f0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 80185f4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 80185f8:	9101      	str	r1, [sp, #4]
 80185fa:	fb06 f108 	mul.w	r1, r6, r8
 80185fe:	0095      	lsls	r5, r2, #2
 8018600:	9103      	str	r1, [sp, #12]
 8018602:	00d2      	lsls	r2, r2, #3
 8018604:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8018608:	f003 0903 	and.w	r9, r3, #3
 801860c:	009b      	lsls	r3, r3, #2
 801860e:	f107 0b10 	add.w	fp, r7, #16
 8018612:	eb04 0a05 	add.w	sl, r4, r5
 8018616:	9107      	str	r1, [sp, #28]
 8018618:	9202      	str	r2, [sp, #8]
 801861a:	9306      	str	r3, [sp, #24]
 801861c:	f1ab 0310 	sub.w	r3, fp, #16
 8018620:	9305      	str	r3, [sp, #20]
 8018622:	9b07      	ldr	r3, [sp, #28]
 8018624:	f8dd e020 	ldr.w	lr, [sp, #32]
 8018628:	eb03 0c0a 	add.w	ip, r3, sl
 801862c:	eddf 7a31 	vldr	s15, [pc, #196]	@ 80186f4 <arm_mat_mult_f32+0x13c>
 8018630:	f1b8 0f00 	cmp.w	r8, #0
 8018634:	d053      	beq.n	80186de <arm_mat_mult_f32+0x126>
 8018636:	9b02      	ldr	r3, [sp, #8]
 8018638:	4644      	mov	r4, r8
 801863a:	18c1      	adds	r1, r0, r3
 801863c:	4602      	mov	r2, r0
 801863e:	465b      	mov	r3, fp
 8018640:	ed92 6a00 	vldr	s12, [r2]
 8018644:	ed13 7a04 	vldr	s14, [r3, #-16]
 8018648:	ed53 4a03 	vldr	s9, [r3, #-12]
 801864c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8018650:	ed91 5a00 	vldr	s10, [r1]
 8018654:	ed53 5a01 	vldr	s11, [r3, #-4]
 8018658:	1957      	adds	r7, r2, r5
 801865a:	ee27 7a06 	vmul.f32	s14, s14, s12
 801865e:	ed97 6a00 	vldr	s12, [r7]
 8018662:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018666:	ee26 6a24 	vmul.f32	s12, s12, s9
 801866a:	194f      	adds	r7, r1, r5
 801866c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8018670:	ee26 7a85 	vmul.f32	s14, s13, s10
 8018674:	edd7 7a00 	vldr	s15, [r7]
 8018678:	ee37 7a06 	vadd.f32	s14, s14, s12
 801867c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018680:	3c01      	subs	r4, #1
 8018682:	4432      	add	r2, r6
 8018684:	4431      	add	r1, r6
 8018686:	ee77 7a87 	vadd.f32	s15, s15, s14
 801868a:	f103 0310 	add.w	r3, r3, #16
 801868e:	d1d7      	bne.n	8018640 <arm_mat_mult_f32+0x88>
 8018690:	9b03      	ldr	r3, [sp, #12]
 8018692:	9a01      	ldr	r2, [sp, #4]
 8018694:	4418      	add	r0, r3
 8018696:	f1b9 0f00 	cmp.w	r9, #0
 801869a:	d00b      	beq.n	80186b4 <arm_mat_mult_f32+0xfc>
 801869c:	464b      	mov	r3, r9
 801869e:	edd0 6a00 	vldr	s13, [r0]
 80186a2:	ecb2 7a01 	vldmia	r2!, {s14}
 80186a6:	ee27 7a26 	vmul.f32	s14, s14, s13
 80186aa:	3b01      	subs	r3, #1
 80186ac:	4428      	add	r0, r5
 80186ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80186b2:	d1f4      	bne.n	801869e <arm_mat_mult_f32+0xe6>
 80186b4:	ecec 7a01 	vstmia	ip!, {s15}
 80186b8:	45d4      	cmp	ip, sl
 80186ba:	4670      	mov	r0, lr
 80186bc:	f10e 0e04 	add.w	lr, lr, #4
 80186c0:	d1b4      	bne.n	801862c <arm_mat_mult_f32+0x74>
 80186c2:	9a01      	ldr	r2, [sp, #4]
 80186c4:	9b06      	ldr	r3, [sp, #24]
 80186c6:	4611      	mov	r1, r2
 80186c8:	4419      	add	r1, r3
 80186ca:	449b      	add	fp, r3
 80186cc:	9b04      	ldr	r3, [sp, #16]
 80186ce:	9101      	str	r1, [sp, #4]
 80186d0:	3b01      	subs	r3, #1
 80186d2:	44aa      	add	sl, r5
 80186d4:	9304      	str	r3, [sp, #16]
 80186d6:	d004      	beq.n	80186e2 <arm_mat_mult_f32+0x12a>
 80186d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186da:	6858      	ldr	r0, [r3, #4]
 80186dc:	e79e      	b.n	801861c <arm_mat_mult_f32+0x64>
 80186de:	9a05      	ldr	r2, [sp, #20]
 80186e0:	e7d9      	b.n	8018696 <arm_mat_mult_f32+0xde>
 80186e2:	4618      	mov	r0, r3
 80186e4:	b00b      	add	sp, #44	@ 0x2c
 80186e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186ea:	f06f 0002 	mvn.w	r0, #2
 80186ee:	b00b      	add	sp, #44	@ 0x2c
 80186f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f4:	00000000 	.word	0x00000000

080186f8 <arm_mat_inverse_f32>:
 80186f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186fc:	8843      	ldrh	r3, [r0, #2]
 80186fe:	8804      	ldrh	r4, [r0, #0]
 8018700:	684e      	ldr	r6, [r1, #4]
 8018702:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8018706:	b087      	sub	sp, #28
 8018708:	429c      	cmp	r4, r3
 801870a:	9301      	str	r3, [sp, #4]
 801870c:	9603      	str	r6, [sp, #12]
 801870e:	f040 80ea 	bne.w	80188e6 <arm_mat_inverse_f32+0x1ee>
 8018712:	880a      	ldrh	r2, [r1, #0]
 8018714:	884b      	ldrh	r3, [r1, #2]
 8018716:	4293      	cmp	r3, r2
 8018718:	f040 80e5 	bne.w	80188e6 <arm_mat_inverse_f32+0x1ee>
 801871c:	429c      	cmp	r4, r3
 801871e:	f040 80e2 	bne.w	80188e6 <arm_mat_inverse_f32+0x1ee>
 8018722:	9005      	str	r0, [sp, #20]
 8018724:	b30c      	cbz	r4, 801876a <arm_mat_inverse_f32+0x72>
 8018726:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 801872a:	1e67      	subs	r7, r4, #1
 801872c:	f846 bb04 	str.w	fp, [r6], #4
 8018730:	d01b      	beq.n	801876a <arm_mat_inverse_f32+0x72>
 8018732:	f04f 0801 	mov.w	r8, #1
 8018736:	00ba      	lsls	r2, r7, #2
 8018738:	eb06 0a02 	add.w	sl, r6, r2
 801873c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8018740:	4630      	mov	r0, r6
 8018742:	2100      	movs	r1, #0
 8018744:	f000 f96e 	bl	8018a24 <memset>
 8018748:	eb0a 0605 	add.w	r6, sl, r5
 801874c:	462a      	mov	r2, r5
 801874e:	2100      	movs	r1, #0
 8018750:	4650      	mov	r0, sl
 8018752:	f1b8 0f00 	cmp.w	r8, #0
 8018756:	f000 80cb 	beq.w	80188f0 <arm_mat_inverse_f32+0x1f8>
 801875a:	f000 f963 	bl	8018a24 <memset>
 801875e:	3f01      	subs	r7, #1
 8018760:	f108 0801 	add.w	r8, r8, #1
 8018764:	f846 bb04 	str.w	fp, [r6], #4
 8018768:	d1e5      	bne.n	8018736 <arm_mat_inverse_f32+0x3e>
 801876a:	9b01      	ldr	r3, [sp, #4]
 801876c:	2b00      	cmp	r3, #0
 801876e:	f000 80b5 	beq.w	80188dc <arm_mat_inverse_f32+0x1e4>
 8018772:	009d      	lsls	r5, r3, #2
 8018774:	eb09 0205 	add.w	r2, r9, r5
 8018778:	46cc      	mov	ip, r9
 801877a:	9202      	str	r2, [sp, #8]
 801877c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018780:	1d2a      	adds	r2, r5, #4
 8018782:	9204      	str	r2, [sp, #16]
 8018784:	462f      	mov	r7, r5
 8018786:	469e      	mov	lr, r3
 8018788:	2600      	movs	r6, #0
 801878a:	9b02      	ldr	r3, [sp, #8]
 801878c:	eddc 6a00 	vldr	s13, [ip]
 8018790:	42b4      	cmp	r4, r6
 8018792:	eba3 0b07 	sub.w	fp, r3, r7
 8018796:	f000 80a1 	beq.w	80188dc <arm_mat_inverse_f32+0x1e4>
 801879a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018900 <arm_mat_inverse_f32+0x208>
 801879e:	4632      	mov	r2, r6
 80187a0:	4663      	mov	r3, ip
 80187a2:	e00b      	b.n	80187bc <arm_mat_inverse_f32+0xc4>
 80187a4:	eef4 7a47 	vcmp.f32	s15, s14
 80187a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ac:	f102 0201 	add.w	r2, r2, #1
 80187b0:	bfc8      	it	gt
 80187b2:	eeb0 7a67 	vmovgt.f32	s14, s15
 80187b6:	42a2      	cmp	r2, r4
 80187b8:	442b      	add	r3, r5
 80187ba:	d014      	beq.n	80187e6 <arm_mat_inverse_f32+0xee>
 80187bc:	edd3 7a00 	vldr	s15, [r3]
 80187c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80187c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187c8:	eeb1 6a67 	vneg.f32	s12, s15
 80187cc:	dcea      	bgt.n	80187a4 <arm_mat_inverse_f32+0xac>
 80187ce:	eeb4 6a47 	vcmp.f32	s12, s14
 80187d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d6:	f102 0201 	add.w	r2, r2, #1
 80187da:	bfc8      	it	gt
 80187dc:	eeb0 7a46 	vmovgt.f32	s14, s12
 80187e0:	42a2      	cmp	r2, r4
 80187e2:	442b      	add	r3, r5
 80187e4:	d1ea      	bne.n	80187bc <arm_mat_inverse_f32+0xc4>
 80187e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80187ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ee:	d075      	beq.n	80188dc <arm_mat_inverse_f32+0x1e4>
 80187f0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80187f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f8:	d070      	beq.n	80188dc <arm_mat_inverse_f32+0x1e4>
 80187fa:	4672      	mov	r2, lr
 80187fc:	4663      	mov	r3, ip
 80187fe:	ed93 7a00 	vldr	s14, [r3]
 8018802:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8018806:	3a01      	subs	r2, #1
 8018808:	ece3 7a01 	vstmia	r3!, {s15}
 801880c:	d1f7      	bne.n	80187fe <arm_mat_inverse_f32+0x106>
 801880e:	9901      	ldr	r1, [sp, #4]
 8018810:	464b      	mov	r3, r9
 8018812:	ed93 7a00 	vldr	s14, [r3]
 8018816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801881a:	3901      	subs	r1, #1
 801881c:	ece3 7a01 	vstmia	r3!, {s15}
 8018820:	d1f7      	bne.n	8018812 <arm_mat_inverse_f32+0x11a>
 8018822:	9803      	ldr	r0, [sp, #12]
 8018824:	ea4f 0886 	mov.w	r8, r6, lsl #2
 8018828:	42b1      	cmp	r1, r6
 801882a:	d039      	beq.n	80188a0 <arm_mat_inverse_f32+0x1a8>
 801882c:	eddb 6a00 	vldr	s13, [fp]
 8018830:	465a      	mov	r2, fp
 8018832:	4673      	mov	r3, lr
 8018834:	46e2      	mov	sl, ip
 8018836:	ecba 7a01 	vldmia	sl!, {s14}
 801883a:	edd2 7a00 	vldr	s15, [r2]
 801883e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8018842:	3b01      	subs	r3, #1
 8018844:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018848:	ece2 7a01 	vstmia	r2!, {s15}
 801884c:	d1f3      	bne.n	8018836 <arm_mat_inverse_f32+0x13e>
 801884e:	9b01      	ldr	r3, [sp, #4]
 8018850:	44bb      	add	fp, r7
 8018852:	4602      	mov	r2, r0
 8018854:	46ca      	mov	sl, r9
 8018856:	ecba 7a01 	vldmia	sl!, {s14}
 801885a:	edd2 7a00 	vldr	s15, [r2]
 801885e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8018862:	3b01      	subs	r3, #1
 8018864:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018868:	ece2 7a01 	vstmia	r2!, {s15}
 801886c:	d1f3      	bne.n	8018856 <arm_mat_inverse_f32+0x15e>
 801886e:	4428      	add	r0, r5
 8018870:	3101      	adds	r1, #1
 8018872:	428c      	cmp	r4, r1
 8018874:	44c3      	add	fp, r8
 8018876:	d1d7      	bne.n	8018828 <arm_mat_inverse_f32+0x130>
 8018878:	9b04      	ldr	r3, [sp, #16]
 801887a:	f1be 0e01 	subs.w	lr, lr, #1
 801887e:	f106 0601 	add.w	r6, r6, #1
 8018882:	449c      	add	ip, r3
 8018884:	f1a7 0704 	sub.w	r7, r7, #4
 8018888:	44a9      	add	r9, r5
 801888a:	f47f af7e 	bne.w	801878a <arm_mat_inverse_f32+0x92>
 801888e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8018892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018896:	d006      	beq.n	80188a6 <arm_mat_inverse_f32+0x1ae>
 8018898:	2000      	movs	r0, #0
 801889a:	b007      	add	sp, #28
 801889c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188a0:	44bb      	add	fp, r7
 80188a2:	4428      	add	r0, r5
 80188a4:	e7e4      	b.n	8018870 <arm_mat_inverse_f32+0x178>
 80188a6:	9b05      	ldr	r3, [sp, #20]
 80188a8:	9a01      	ldr	r2, [sp, #4]
 80188aa:	685b      	ldr	r3, [r3, #4]
 80188ac:	edd3 7a00 	vldr	s15, [r3]
 80188b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80188b4:	fb02 f204 	mul.w	r2, r2, r4
 80188b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188bc:	4614      	mov	r4, r2
 80188be:	bf08      	it	eq
 80188c0:	3304      	addeq	r3, #4
 80188c2:	d007      	beq.n	80188d4 <arm_mat_inverse_f32+0x1dc>
 80188c4:	e7e8      	b.n	8018898 <arm_mat_inverse_f32+0x1a0>
 80188c6:	ecf3 7a01 	vldmia	r3!, {s15}
 80188ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80188ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188d2:	d1e1      	bne.n	8018898 <arm_mat_inverse_f32+0x1a0>
 80188d4:	f10e 0e01 	add.w	lr, lr, #1
 80188d8:	4574      	cmp	r4, lr
 80188da:	d1f4      	bne.n	80188c6 <arm_mat_inverse_f32+0x1ce>
 80188dc:	f06f 0004 	mvn.w	r0, #4
 80188e0:	b007      	add	sp, #28
 80188e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188e6:	f06f 0002 	mvn.w	r0, #2
 80188ea:	b007      	add	sp, #28
 80188ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80188f0:	4656      	mov	r6, sl
 80188f2:	3f01      	subs	r7, #1
 80188f4:	f846 bb04 	str.w	fp, [r6], #4
 80188f8:	f47f af1b 	bne.w	8018732 <arm_mat_inverse_f32+0x3a>
 80188fc:	e735      	b.n	801876a <arm_mat_inverse_f32+0x72>
 80188fe:	bf00      	nop
 8018900:	00000000 	.word	0x00000000

08018904 <arm_sin_f32>:
 8018904:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8018984 <arm_sin_f32+0x80>
 8018908:	ee20 0a27 	vmul.f32	s0, s0, s15
 801890c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018914:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018918:	d504      	bpl.n	8018924 <arm_sin_f32+0x20>
 801891a:	ee17 3a90 	vmov	r3, s15
 801891e:	3b01      	subs	r3, #1
 8018920:	ee07 3a90 	vmov	s15, r3
 8018924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018928:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8018988 <arm_sin_f32+0x84>
 801892c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018930:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018934:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8018938:	ee17 3a90 	vmov	r3, s15
 801893c:	b29b      	uxth	r3, r3
 801893e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018942:	d21a      	bcs.n	801897a <arm_sin_f32+0x76>
 8018944:	ee07 3a90 	vmov	s15, r3
 8018948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801894c:	1c59      	adds	r1, r3, #1
 801894e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018952:	4a0e      	ldr	r2, [pc, #56]	@ (801898c <arm_sin_f32+0x88>)
 8018954:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018958:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801895c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018960:	ed93 7a00 	vldr	s14, [r3]
 8018964:	edd2 6a00 	vldr	s13, [r2]
 8018968:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801896c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018970:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018974:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018978:	4770      	bx	lr
 801897a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801897e:	2101      	movs	r1, #1
 8018980:	2300      	movs	r3, #0
 8018982:	e7e6      	b.n	8018952 <arm_sin_f32+0x4e>
 8018984:	3e22f983 	.word	0x3e22f983
 8018988:	44000000 	.word	0x44000000
 801898c:	0801b9dc 	.word	0x0801b9dc

08018990 <arm_cos_f32>:
 8018990:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8018a18 <arm_cos_f32+0x88>
 8018994:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018998:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801899c:	ee30 0a27 	vadd.f32	s0, s0, s15
 80189a0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80189a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189a8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80189ac:	d504      	bpl.n	80189b8 <arm_cos_f32+0x28>
 80189ae:	ee17 3a90 	vmov	r3, s15
 80189b2:	3b01      	subs	r3, #1
 80189b4:	ee07 3a90 	vmov	s15, r3
 80189b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189bc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8018a1c <arm_cos_f32+0x8c>
 80189c0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80189c4:	ee20 0a07 	vmul.f32	s0, s0, s14
 80189c8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80189cc:	ee17 3a90 	vmov	r3, s15
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80189d6:	d21a      	bcs.n	8018a0e <arm_cos_f32+0x7e>
 80189d8:	ee07 3a90 	vmov	s15, r3
 80189dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80189e0:	1c59      	adds	r1, r3, #1
 80189e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80189e6:	4a0e      	ldr	r2, [pc, #56]	@ (8018a20 <arm_cos_f32+0x90>)
 80189e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80189ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80189f0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80189f4:	ed93 7a00 	vldr	s14, [r3]
 80189f8:	edd2 6a00 	vldr	s13, [r2]
 80189fc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018a00:	ee20 0a26 	vmul.f32	s0, s0, s13
 8018a04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018a08:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018a0c:	4770      	bx	lr
 8018a0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018a12:	2101      	movs	r1, #1
 8018a14:	2300      	movs	r3, #0
 8018a16:	e7e6      	b.n	80189e6 <arm_cos_f32+0x56>
 8018a18:	3e22f983 	.word	0x3e22f983
 8018a1c:	44000000 	.word	0x44000000
 8018a20:	0801b9dc 	.word	0x0801b9dc

08018a24 <memset>:
 8018a24:	4402      	add	r2, r0
 8018a26:	4603      	mov	r3, r0
 8018a28:	4293      	cmp	r3, r2
 8018a2a:	d100      	bne.n	8018a2e <memset+0xa>
 8018a2c:	4770      	bx	lr
 8018a2e:	f803 1b01 	strb.w	r1, [r3], #1
 8018a32:	e7f9      	b.n	8018a28 <memset+0x4>

08018a34 <strncpy>:
 8018a34:	b510      	push	{r4, lr}
 8018a36:	3901      	subs	r1, #1
 8018a38:	4603      	mov	r3, r0
 8018a3a:	b132      	cbz	r2, 8018a4a <strncpy+0x16>
 8018a3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018a40:	f803 4b01 	strb.w	r4, [r3], #1
 8018a44:	3a01      	subs	r2, #1
 8018a46:	2c00      	cmp	r4, #0
 8018a48:	d1f7      	bne.n	8018a3a <strncpy+0x6>
 8018a4a:	441a      	add	r2, r3
 8018a4c:	2100      	movs	r1, #0
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	d100      	bne.n	8018a54 <strncpy+0x20>
 8018a52:	bd10      	pop	{r4, pc}
 8018a54:	f803 1b01 	strb.w	r1, [r3], #1
 8018a58:	e7f9      	b.n	8018a4e <strncpy+0x1a>
	...

08018a5c <__errno>:
 8018a5c:	4b01      	ldr	r3, [pc, #4]	@ (8018a64 <__errno+0x8>)
 8018a5e:	6818      	ldr	r0, [r3, #0]
 8018a60:	4770      	bx	lr
 8018a62:	bf00      	nop
 8018a64:	20000180 	.word	0x20000180

08018a68 <__libc_init_array>:
 8018a68:	b570      	push	{r4, r5, r6, lr}
 8018a6a:	4d0d      	ldr	r5, [pc, #52]	@ (8018aa0 <__libc_init_array+0x38>)
 8018a6c:	4c0d      	ldr	r4, [pc, #52]	@ (8018aa4 <__libc_init_array+0x3c>)
 8018a6e:	1b64      	subs	r4, r4, r5
 8018a70:	10a4      	asrs	r4, r4, #2
 8018a72:	2600      	movs	r6, #0
 8018a74:	42a6      	cmp	r6, r4
 8018a76:	d109      	bne.n	8018a8c <__libc_init_array+0x24>
 8018a78:	4d0b      	ldr	r5, [pc, #44]	@ (8018aa8 <__libc_init_array+0x40>)
 8018a7a:	4c0c      	ldr	r4, [pc, #48]	@ (8018aac <__libc_init_array+0x44>)
 8018a7c:	f002 f840 	bl	801ab00 <_init>
 8018a80:	1b64      	subs	r4, r4, r5
 8018a82:	10a4      	asrs	r4, r4, #2
 8018a84:	2600      	movs	r6, #0
 8018a86:	42a6      	cmp	r6, r4
 8018a88:	d105      	bne.n	8018a96 <__libc_init_array+0x2e>
 8018a8a:	bd70      	pop	{r4, r5, r6, pc}
 8018a8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a90:	4798      	blx	r3
 8018a92:	3601      	adds	r6, #1
 8018a94:	e7ee      	b.n	8018a74 <__libc_init_array+0xc>
 8018a96:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a9a:	4798      	blx	r3
 8018a9c:	3601      	adds	r6, #1
 8018a9e:	e7f2      	b.n	8018a86 <__libc_init_array+0x1e>
 8018aa0:	0801c62c 	.word	0x0801c62c
 8018aa4:	0801c62c 	.word	0x0801c62c
 8018aa8:	0801c62c 	.word	0x0801c62c
 8018aac:	0801c630 	.word	0x0801c630

08018ab0 <memcpy>:
 8018ab0:	440a      	add	r2, r1
 8018ab2:	4291      	cmp	r1, r2
 8018ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8018ab8:	d100      	bne.n	8018abc <memcpy+0xc>
 8018aba:	4770      	bx	lr
 8018abc:	b510      	push	{r4, lr}
 8018abe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018ac2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018ac6:	4291      	cmp	r1, r2
 8018ac8:	d1f9      	bne.n	8018abe <memcpy+0xe>
 8018aca:	bd10      	pop	{r4, pc}

08018acc <acosf>:
 8018acc:	b508      	push	{r3, lr}
 8018ace:	ed2d 8b02 	vpush	{d8}
 8018ad2:	eeb0 8a40 	vmov.f32	s16, s0
 8018ad6:	f000 fbbf 	bl	8019258 <__ieee754_acosf>
 8018ada:	eeb4 8a48 	vcmp.f32	s16, s16
 8018ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ae2:	eef0 8a40 	vmov.f32	s17, s0
 8018ae6:	d615      	bvs.n	8018b14 <acosf+0x48>
 8018ae8:	eeb0 0a48 	vmov.f32	s0, s16
 8018aec:	f000 f966 	bl	8018dbc <fabsf>
 8018af0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018af4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018afc:	dd0a      	ble.n	8018b14 <acosf+0x48>
 8018afe:	f7ff ffad 	bl	8018a5c <__errno>
 8018b02:	ecbd 8b02 	vpop	{d8}
 8018b06:	2321      	movs	r3, #33	@ 0x21
 8018b08:	6003      	str	r3, [r0, #0]
 8018b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018b0e:	4804      	ldr	r0, [pc, #16]	@ (8018b20 <acosf+0x54>)
 8018b10:	f000 b9d8 	b.w	8018ec4 <nanf>
 8018b14:	eeb0 0a68 	vmov.f32	s0, s17
 8018b18:	ecbd 8b02 	vpop	{d8}
 8018b1c:	bd08      	pop	{r3, pc}
 8018b1e:	bf00      	nop
 8018b20:	0801c1e0 	.word	0x0801c1e0

08018b24 <asinf>:
 8018b24:	b508      	push	{r3, lr}
 8018b26:	ed2d 8b02 	vpush	{d8}
 8018b2a:	eeb0 8a40 	vmov.f32	s16, s0
 8018b2e:	f000 fc8b 	bl	8019448 <__ieee754_asinf>
 8018b32:	eeb4 8a48 	vcmp.f32	s16, s16
 8018b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b3a:	eef0 8a40 	vmov.f32	s17, s0
 8018b3e:	d615      	bvs.n	8018b6c <asinf+0x48>
 8018b40:	eeb0 0a48 	vmov.f32	s0, s16
 8018b44:	f000 f93a 	bl	8018dbc <fabsf>
 8018b48:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018b4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b54:	dd0a      	ble.n	8018b6c <asinf+0x48>
 8018b56:	f7ff ff81 	bl	8018a5c <__errno>
 8018b5a:	ecbd 8b02 	vpop	{d8}
 8018b5e:	2321      	movs	r3, #33	@ 0x21
 8018b60:	6003      	str	r3, [r0, #0]
 8018b62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018b66:	4804      	ldr	r0, [pc, #16]	@ (8018b78 <asinf+0x54>)
 8018b68:	f000 b9ac 	b.w	8018ec4 <nanf>
 8018b6c:	eeb0 0a68 	vmov.f32	s0, s17
 8018b70:	ecbd 8b02 	vpop	{d8}
 8018b74:	bd08      	pop	{r3, pc}
 8018b76:	bf00      	nop
 8018b78:	0801c1e0 	.word	0x0801c1e0

08018b7c <atan2f>:
 8018b7c:	f000 bd4a 	b.w	8019614 <__ieee754_atan2f>

08018b80 <expf>:
 8018b80:	b508      	push	{r3, lr}
 8018b82:	ed2d 8b02 	vpush	{d8}
 8018b86:	eef0 8a40 	vmov.f32	s17, s0
 8018b8a:	f000 fde3 	bl	8019754 <__ieee754_expf>
 8018b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8018b92:	eeb0 0a68 	vmov.f32	s0, s17
 8018b96:	f000 f98b 	bl	8018eb0 <finitef>
 8018b9a:	b160      	cbz	r0, 8018bb6 <expf+0x36>
 8018b9c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8018bdc <expf+0x5c>
 8018ba0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ba8:	dd0a      	ble.n	8018bc0 <expf+0x40>
 8018baa:	f7ff ff57 	bl	8018a5c <__errno>
 8018bae:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8018be0 <expf+0x60>
 8018bb2:	2322      	movs	r3, #34	@ 0x22
 8018bb4:	6003      	str	r3, [r0, #0]
 8018bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8018bba:	ecbd 8b02 	vpop	{d8}
 8018bbe:	bd08      	pop	{r3, pc}
 8018bc0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018be4 <expf+0x64>
 8018bc4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bcc:	d5f3      	bpl.n	8018bb6 <expf+0x36>
 8018bce:	f7ff ff45 	bl	8018a5c <__errno>
 8018bd2:	2322      	movs	r3, #34	@ 0x22
 8018bd4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8018be8 <expf+0x68>
 8018bd8:	6003      	str	r3, [r0, #0]
 8018bda:	e7ec      	b.n	8018bb6 <expf+0x36>
 8018bdc:	42b17217 	.word	0x42b17217
 8018be0:	7f800000 	.word	0x7f800000
 8018be4:	c2cff1b5 	.word	0xc2cff1b5
 8018be8:	00000000 	.word	0x00000000

08018bec <logf>:
 8018bec:	b508      	push	{r3, lr}
 8018bee:	ed2d 8b02 	vpush	{d8}
 8018bf2:	eeb0 8a40 	vmov.f32	s16, s0
 8018bf6:	f000 fe7b 	bl	80198f0 <__ieee754_logf>
 8018bfa:	eeb4 8a48 	vcmp.f32	s16, s16
 8018bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c02:	d60f      	bvs.n	8018c24 <logf+0x38>
 8018c04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c0c:	dc0a      	bgt.n	8018c24 <logf+0x38>
 8018c0e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c16:	d108      	bne.n	8018c2a <logf+0x3e>
 8018c18:	f7ff ff20 	bl	8018a5c <__errno>
 8018c1c:	2322      	movs	r3, #34	@ 0x22
 8018c1e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018c40 <logf+0x54>
 8018c22:	6003      	str	r3, [r0, #0]
 8018c24:	ecbd 8b02 	vpop	{d8}
 8018c28:	bd08      	pop	{r3, pc}
 8018c2a:	f7ff ff17 	bl	8018a5c <__errno>
 8018c2e:	ecbd 8b02 	vpop	{d8}
 8018c32:	2321      	movs	r3, #33	@ 0x21
 8018c34:	6003      	str	r3, [r0, #0]
 8018c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c3a:	4802      	ldr	r0, [pc, #8]	@ (8018c44 <logf+0x58>)
 8018c3c:	f000 b942 	b.w	8018ec4 <nanf>
 8018c40:	ff800000 	.word	0xff800000
 8018c44:	0801c1e0 	.word	0x0801c1e0

08018c48 <powf>:
 8018c48:	b508      	push	{r3, lr}
 8018c4a:	ed2d 8b04 	vpush	{d8-d9}
 8018c4e:	eeb0 8a60 	vmov.f32	s16, s1
 8018c52:	eeb0 9a40 	vmov.f32	s18, s0
 8018c56:	f000 ff3d 	bl	8019ad4 <__ieee754_powf>
 8018c5a:	eeb4 8a48 	vcmp.f32	s16, s16
 8018c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c62:	eef0 8a40 	vmov.f32	s17, s0
 8018c66:	d63e      	bvs.n	8018ce6 <powf+0x9e>
 8018c68:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8018c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c70:	d112      	bne.n	8018c98 <powf+0x50>
 8018c72:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c7a:	d039      	beq.n	8018cf0 <powf+0xa8>
 8018c7c:	eeb0 0a48 	vmov.f32	s0, s16
 8018c80:	f000 f916 	bl	8018eb0 <finitef>
 8018c84:	b378      	cbz	r0, 8018ce6 <powf+0x9e>
 8018c86:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018c8e:	d52a      	bpl.n	8018ce6 <powf+0x9e>
 8018c90:	f7ff fee4 	bl	8018a5c <__errno>
 8018c94:	2322      	movs	r3, #34	@ 0x22
 8018c96:	e014      	b.n	8018cc2 <powf+0x7a>
 8018c98:	f000 f90a 	bl	8018eb0 <finitef>
 8018c9c:	b998      	cbnz	r0, 8018cc6 <powf+0x7e>
 8018c9e:	eeb0 0a49 	vmov.f32	s0, s18
 8018ca2:	f000 f905 	bl	8018eb0 <finitef>
 8018ca6:	b170      	cbz	r0, 8018cc6 <powf+0x7e>
 8018ca8:	eeb0 0a48 	vmov.f32	s0, s16
 8018cac:	f000 f900 	bl	8018eb0 <finitef>
 8018cb0:	b148      	cbz	r0, 8018cc6 <powf+0x7e>
 8018cb2:	eef4 8a68 	vcmp.f32	s17, s17
 8018cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cba:	d7e9      	bvc.n	8018c90 <powf+0x48>
 8018cbc:	f7ff fece 	bl	8018a5c <__errno>
 8018cc0:	2321      	movs	r3, #33	@ 0x21
 8018cc2:	6003      	str	r3, [r0, #0]
 8018cc4:	e00f      	b.n	8018ce6 <powf+0x9e>
 8018cc6:	eef5 8a40 	vcmp.f32	s17, #0.0
 8018cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cce:	d10a      	bne.n	8018ce6 <powf+0x9e>
 8018cd0:	eeb0 0a49 	vmov.f32	s0, s18
 8018cd4:	f000 f8ec 	bl	8018eb0 <finitef>
 8018cd8:	b128      	cbz	r0, 8018ce6 <powf+0x9e>
 8018cda:	eeb0 0a48 	vmov.f32	s0, s16
 8018cde:	f000 f8e7 	bl	8018eb0 <finitef>
 8018ce2:	2800      	cmp	r0, #0
 8018ce4:	d1d4      	bne.n	8018c90 <powf+0x48>
 8018ce6:	eeb0 0a68 	vmov.f32	s0, s17
 8018cea:	ecbd 8b04 	vpop	{d8-d9}
 8018cee:	bd08      	pop	{r3, pc}
 8018cf0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018cf4:	e7f7      	b.n	8018ce6 <powf+0x9e>
	...

08018cf8 <sqrtf>:
 8018cf8:	b508      	push	{r3, lr}
 8018cfa:	ed2d 8b02 	vpush	{d8}
 8018cfe:	eeb0 8a40 	vmov.f32	s16, s0
 8018d02:	f000 f925 	bl	8018f50 <__ieee754_sqrtf>
 8018d06:	eeb4 8a48 	vcmp.f32	s16, s16
 8018d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d0e:	d60c      	bvs.n	8018d2a <sqrtf+0x32>
 8018d10:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8018d30 <sqrtf+0x38>
 8018d14:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1c:	d505      	bpl.n	8018d2a <sqrtf+0x32>
 8018d1e:	f7ff fe9d 	bl	8018a5c <__errno>
 8018d22:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018d26:	2321      	movs	r3, #33	@ 0x21
 8018d28:	6003      	str	r3, [r0, #0]
 8018d2a:	ecbd 8b02 	vpop	{d8}
 8018d2e:	bd08      	pop	{r3, pc}
 8018d30:	00000000 	.word	0x00000000

08018d34 <cosf>:
 8018d34:	ee10 3a10 	vmov	r3, s0
 8018d38:	b507      	push	{r0, r1, r2, lr}
 8018d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8018db4 <cosf+0x80>)
 8018d3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018d40:	4293      	cmp	r3, r2
 8018d42:	d806      	bhi.n	8018d52 <cosf+0x1e>
 8018d44:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018db8 <cosf+0x84>
 8018d48:	b003      	add	sp, #12
 8018d4a:	f85d eb04 	ldr.w	lr, [sp], #4
 8018d4e:	f000 b903 	b.w	8018f58 <__kernel_cosf>
 8018d52:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018d56:	d304      	bcc.n	8018d62 <cosf+0x2e>
 8018d58:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018d5c:	b003      	add	sp, #12
 8018d5e:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d62:	4668      	mov	r0, sp
 8018d64:	f001 f986 	bl	801a074 <__ieee754_rem_pio2f>
 8018d68:	f000 0003 	and.w	r0, r0, #3
 8018d6c:	2801      	cmp	r0, #1
 8018d6e:	d009      	beq.n	8018d84 <cosf+0x50>
 8018d70:	2802      	cmp	r0, #2
 8018d72:	d010      	beq.n	8018d96 <cosf+0x62>
 8018d74:	b9b0      	cbnz	r0, 8018da4 <cosf+0x70>
 8018d76:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d7a:	ed9d 0a00 	vldr	s0, [sp]
 8018d7e:	f000 f8eb 	bl	8018f58 <__kernel_cosf>
 8018d82:	e7eb      	b.n	8018d5c <cosf+0x28>
 8018d84:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d88:	ed9d 0a00 	vldr	s0, [sp]
 8018d8c:	f000 f93c 	bl	8019008 <__kernel_sinf>
 8018d90:	eeb1 0a40 	vneg.f32	s0, s0
 8018d94:	e7e2      	b.n	8018d5c <cosf+0x28>
 8018d96:	eddd 0a01 	vldr	s1, [sp, #4]
 8018d9a:	ed9d 0a00 	vldr	s0, [sp]
 8018d9e:	f000 f8db 	bl	8018f58 <__kernel_cosf>
 8018da2:	e7f5      	b.n	8018d90 <cosf+0x5c>
 8018da4:	eddd 0a01 	vldr	s1, [sp, #4]
 8018da8:	ed9d 0a00 	vldr	s0, [sp]
 8018dac:	2001      	movs	r0, #1
 8018dae:	f000 f92b 	bl	8019008 <__kernel_sinf>
 8018db2:	e7d3      	b.n	8018d5c <cosf+0x28>
 8018db4:	3f490fd8 	.word	0x3f490fd8
 8018db8:	00000000 	.word	0x00000000

08018dbc <fabsf>:
 8018dbc:	ee10 3a10 	vmov	r3, s0
 8018dc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018dc4:	ee00 3a10 	vmov	s0, r3
 8018dc8:	4770      	bx	lr
	...

08018dcc <sinf>:
 8018dcc:	ee10 3a10 	vmov	r3, s0
 8018dd0:	b507      	push	{r0, r1, r2, lr}
 8018dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8018e50 <sinf+0x84>)
 8018dd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018dd8:	4293      	cmp	r3, r2
 8018dda:	d807      	bhi.n	8018dec <sinf+0x20>
 8018ddc:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8018e54 <sinf+0x88>
 8018de0:	2000      	movs	r0, #0
 8018de2:	b003      	add	sp, #12
 8018de4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018de8:	f000 b90e 	b.w	8019008 <__kernel_sinf>
 8018dec:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018df0:	d304      	bcc.n	8018dfc <sinf+0x30>
 8018df2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018df6:	b003      	add	sp, #12
 8018df8:	f85d fb04 	ldr.w	pc, [sp], #4
 8018dfc:	4668      	mov	r0, sp
 8018dfe:	f001 f939 	bl	801a074 <__ieee754_rem_pio2f>
 8018e02:	f000 0003 	and.w	r0, r0, #3
 8018e06:	2801      	cmp	r0, #1
 8018e08:	d00a      	beq.n	8018e20 <sinf+0x54>
 8018e0a:	2802      	cmp	r0, #2
 8018e0c:	d00f      	beq.n	8018e2e <sinf+0x62>
 8018e0e:	b9c0      	cbnz	r0, 8018e42 <sinf+0x76>
 8018e10:	eddd 0a01 	vldr	s1, [sp, #4]
 8018e14:	ed9d 0a00 	vldr	s0, [sp]
 8018e18:	2001      	movs	r0, #1
 8018e1a:	f000 f8f5 	bl	8019008 <__kernel_sinf>
 8018e1e:	e7ea      	b.n	8018df6 <sinf+0x2a>
 8018e20:	eddd 0a01 	vldr	s1, [sp, #4]
 8018e24:	ed9d 0a00 	vldr	s0, [sp]
 8018e28:	f000 f896 	bl	8018f58 <__kernel_cosf>
 8018e2c:	e7e3      	b.n	8018df6 <sinf+0x2a>
 8018e2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018e32:	ed9d 0a00 	vldr	s0, [sp]
 8018e36:	2001      	movs	r0, #1
 8018e38:	f000 f8e6 	bl	8019008 <__kernel_sinf>
 8018e3c:	eeb1 0a40 	vneg.f32	s0, s0
 8018e40:	e7d9      	b.n	8018df6 <sinf+0x2a>
 8018e42:	eddd 0a01 	vldr	s1, [sp, #4]
 8018e46:	ed9d 0a00 	vldr	s0, [sp]
 8018e4a:	f000 f885 	bl	8018f58 <__kernel_cosf>
 8018e4e:	e7f5      	b.n	8018e3c <sinf+0x70>
 8018e50:	3f490fd8 	.word	0x3f490fd8
 8018e54:	00000000 	.word	0x00000000

08018e58 <tanf>:
 8018e58:	ee10 3a10 	vmov	r3, s0
 8018e5c:	b507      	push	{r0, r1, r2, lr}
 8018e5e:	4a12      	ldr	r2, [pc, #72]	@ (8018ea8 <tanf+0x50>)
 8018e60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018e64:	4293      	cmp	r3, r2
 8018e66:	d807      	bhi.n	8018e78 <tanf+0x20>
 8018e68:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8018eac <tanf+0x54>
 8018e6c:	2001      	movs	r0, #1
 8018e6e:	b003      	add	sp, #12
 8018e70:	f85d eb04 	ldr.w	lr, [sp], #4
 8018e74:	f000 b910 	b.w	8019098 <__kernel_tanf>
 8018e78:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018e7c:	d304      	bcc.n	8018e88 <tanf+0x30>
 8018e7e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018e82:	b003      	add	sp, #12
 8018e84:	f85d fb04 	ldr.w	pc, [sp], #4
 8018e88:	4668      	mov	r0, sp
 8018e8a:	f001 f8f3 	bl	801a074 <__ieee754_rem_pio2f>
 8018e8e:	0040      	lsls	r0, r0, #1
 8018e90:	f000 0002 	and.w	r0, r0, #2
 8018e94:	eddd 0a01 	vldr	s1, [sp, #4]
 8018e98:	ed9d 0a00 	vldr	s0, [sp]
 8018e9c:	f1c0 0001 	rsb	r0, r0, #1
 8018ea0:	f000 f8fa 	bl	8019098 <__kernel_tanf>
 8018ea4:	e7ed      	b.n	8018e82 <tanf+0x2a>
 8018ea6:	bf00      	nop
 8018ea8:	3f490fda 	.word	0x3f490fda
 8018eac:	00000000 	.word	0x00000000

08018eb0 <finitef>:
 8018eb0:	ee10 3a10 	vmov	r3, s0
 8018eb4:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8018eb8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8018ebc:	bfac      	ite	ge
 8018ebe:	2000      	movge	r0, #0
 8018ec0:	2001      	movlt	r0, #1
 8018ec2:	4770      	bx	lr

08018ec4 <nanf>:
 8018ec4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018ecc <nanf+0x8>
 8018ec8:	4770      	bx	lr
 8018eca:	bf00      	nop
 8018ecc:	7fc00000 	.word	0x7fc00000

08018ed0 <lrintf>:
 8018ed0:	ee10 3a10 	vmov	r3, s0
 8018ed4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018ed8:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8018edc:	281e      	cmp	r0, #30
 8018ede:	b082      	sub	sp, #8
 8018ee0:	dc2f      	bgt.n	8018f42 <lrintf+0x72>
 8018ee2:	1c41      	adds	r1, r0, #1
 8018ee4:	da02      	bge.n	8018eec <lrintf+0x1c>
 8018ee6:	2000      	movs	r0, #0
 8018ee8:	b002      	add	sp, #8
 8018eea:	4770      	bx	lr
 8018eec:	2816      	cmp	r0, #22
 8018eee:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8018ef2:	dd0a      	ble.n	8018f0a <lrintf+0x3a>
 8018ef4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8018efc:	3a96      	subs	r2, #150	@ 0x96
 8018efe:	fa03 f002 	lsl.w	r0, r3, r2
 8018f02:	2900      	cmp	r1, #0
 8018f04:	d0f0      	beq.n	8018ee8 <lrintf+0x18>
 8018f06:	4240      	negs	r0, r0
 8018f08:	e7ee      	b.n	8018ee8 <lrintf+0x18>
 8018f0a:	4b10      	ldr	r3, [pc, #64]	@ (8018f4c <lrintf+0x7c>)
 8018f0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018f10:	ed93 7a00 	vldr	s14, [r3]
 8018f14:	ee37 0a00 	vadd.f32	s0, s14, s0
 8018f18:	ed8d 0a01 	vstr	s0, [sp, #4]
 8018f1c:	eddd 7a01 	vldr	s15, [sp, #4]
 8018f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f24:	ee17 3a90 	vmov	r3, s15
 8018f28:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018f2c:	d0db      	beq.n	8018ee6 <lrintf+0x16>
 8018f2e:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8018f32:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8018f36:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8018f3a:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8018f3e:	40d8      	lsrs	r0, r3
 8018f40:	e7df      	b.n	8018f02 <lrintf+0x32>
 8018f42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018f46:	ee17 0a90 	vmov	r0, s15
 8018f4a:	e7cd      	b.n	8018ee8 <lrintf+0x18>
 8018f4c:	0801c1e4 	.word	0x0801c1e4

08018f50 <__ieee754_sqrtf>:
 8018f50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018f54:	4770      	bx	lr
	...

08018f58 <__kernel_cosf>:
 8018f58:	ee10 3a10 	vmov	r3, s0
 8018f5c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018f60:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018f64:	eef0 6a40 	vmov.f32	s13, s0
 8018f68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018f6c:	d204      	bcs.n	8018f78 <__kernel_cosf+0x20>
 8018f6e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018f72:	ee17 2a90 	vmov	r2, s15
 8018f76:	b342      	cbz	r2, 8018fca <__kernel_cosf+0x72>
 8018f78:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018f7c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8018fe8 <__kernel_cosf+0x90>
 8018f80:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8018fec <__kernel_cosf+0x94>
 8018f84:	4a1a      	ldr	r2, [pc, #104]	@ (8018ff0 <__kernel_cosf+0x98>)
 8018f86:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018f8a:	4293      	cmp	r3, r2
 8018f8c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018ff4 <__kernel_cosf+0x9c>
 8018f90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018f94:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8018ff8 <__kernel_cosf+0xa0>
 8018f98:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018f9c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018ffc <__kernel_cosf+0xa4>
 8018fa0:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018fa4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8019000 <__kernel_cosf+0xa8>
 8018fa8:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018fac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018fb0:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018fb4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018fb8:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018fc0:	d804      	bhi.n	8018fcc <__kernel_cosf+0x74>
 8018fc2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018fc6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018fca:	4770      	bx	lr
 8018fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8019004 <__kernel_cosf+0xac>)
 8018fce:	4293      	cmp	r3, r2
 8018fd0:	bf9a      	itte	ls
 8018fd2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8018fd6:	ee07 3a10 	vmovls	s14, r3
 8018fda:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8018fde:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018fe2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018fe6:	e7ec      	b.n	8018fc2 <__kernel_cosf+0x6a>
 8018fe8:	ad47d74e 	.word	0xad47d74e
 8018fec:	310f74f6 	.word	0x310f74f6
 8018ff0:	3e999999 	.word	0x3e999999
 8018ff4:	b493f27c 	.word	0xb493f27c
 8018ff8:	37d00d01 	.word	0x37d00d01
 8018ffc:	bab60b61 	.word	0xbab60b61
 8019000:	3d2aaaab 	.word	0x3d2aaaab
 8019004:	3f480000 	.word	0x3f480000

08019008 <__kernel_sinf>:
 8019008:	ee10 3a10 	vmov	r3, s0
 801900c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8019010:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8019014:	d204      	bcs.n	8019020 <__kernel_sinf+0x18>
 8019016:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801901a:	ee17 3a90 	vmov	r3, s15
 801901e:	b35b      	cbz	r3, 8019078 <__kernel_sinf+0x70>
 8019020:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019024:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801907c <__kernel_sinf+0x74>
 8019028:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8019080 <__kernel_sinf+0x78>
 801902c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019030:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8019084 <__kernel_sinf+0x7c>
 8019034:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019038:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8019088 <__kernel_sinf+0x80>
 801903c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8019040:	eddf 7a12 	vldr	s15, [pc, #72]	@ 801908c <__kernel_sinf+0x84>
 8019044:	ee60 6a07 	vmul.f32	s13, s0, s14
 8019048:	eee6 7a07 	vfma.f32	s15, s12, s14
 801904c:	b930      	cbnz	r0, 801905c <__kernel_sinf+0x54>
 801904e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8019090 <__kernel_sinf+0x88>
 8019052:	eea7 6a27 	vfma.f32	s12, s14, s15
 8019056:	eea6 0a26 	vfma.f32	s0, s12, s13
 801905a:	4770      	bx	lr
 801905c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8019060:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8019064:	eee0 7a86 	vfma.f32	s15, s1, s12
 8019068:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801906c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8019094 <__kernel_sinf+0x8c>
 8019070:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8019074:	ee30 0a60 	vsub.f32	s0, s0, s1
 8019078:	4770      	bx	lr
 801907a:	bf00      	nop
 801907c:	2f2ec9d3 	.word	0x2f2ec9d3
 8019080:	b2d72f34 	.word	0xb2d72f34
 8019084:	3638ef1b 	.word	0x3638ef1b
 8019088:	b9500d01 	.word	0xb9500d01
 801908c:	3c088889 	.word	0x3c088889
 8019090:	be2aaaab 	.word	0xbe2aaaab
 8019094:	3e2aaaab 	.word	0x3e2aaaab

08019098 <__kernel_tanf>:
 8019098:	b508      	push	{r3, lr}
 801909a:	ee10 3a10 	vmov	r3, s0
 801909e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80190a2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80190a6:	eef0 7a40 	vmov.f32	s15, s0
 80190aa:	d217      	bcs.n	80190dc <__kernel_tanf+0x44>
 80190ac:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80190b0:	ee17 1a10 	vmov	r1, s14
 80190b4:	bb41      	cbnz	r1, 8019108 <__kernel_tanf+0x70>
 80190b6:	1c43      	adds	r3, r0, #1
 80190b8:	4313      	orrs	r3, r2
 80190ba:	d108      	bne.n	80190ce <__kernel_tanf+0x36>
 80190bc:	f7ff fe7e 	bl	8018dbc <fabsf>
 80190c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80190c4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80190c8:	eeb0 0a67 	vmov.f32	s0, s15
 80190cc:	bd08      	pop	{r3, pc}
 80190ce:	2801      	cmp	r0, #1
 80190d0:	d0fa      	beq.n	80190c8 <__kernel_tanf+0x30>
 80190d2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80190d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80190da:	e7f5      	b.n	80190c8 <__kernel_tanf+0x30>
 80190dc:	494c      	ldr	r1, [pc, #304]	@ (8019210 <__kernel_tanf+0x178>)
 80190de:	428a      	cmp	r2, r1
 80190e0:	d312      	bcc.n	8019108 <__kernel_tanf+0x70>
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8019214 <__kernel_tanf+0x17c>
 80190e8:	bfb8      	it	lt
 80190ea:	eef1 7a40 	vneglt.f32	s15, s0
 80190ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80190f2:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8019218 <__kernel_tanf+0x180>
 80190f6:	bfb8      	it	lt
 80190f8:	eef1 0a60 	vneglt.f32	s1, s1
 80190fc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8019100:	eddf 0a46 	vldr	s1, [pc, #280]	@ 801921c <__kernel_tanf+0x184>
 8019104:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019108:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801910c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8019220 <__kernel_tanf+0x188>
 8019110:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8019224 <__kernel_tanf+0x18c>
 8019114:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8019228 <__kernel_tanf+0x190>
 8019118:	493d      	ldr	r1, [pc, #244]	@ (8019210 <__kernel_tanf+0x178>)
 801911a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801911e:	428a      	cmp	r2, r1
 8019120:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019124:	eddf 5a41 	vldr	s11, [pc, #260]	@ 801922c <__kernel_tanf+0x194>
 8019128:	eee6 5a07 	vfma.f32	s11, s12, s14
 801912c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8019230 <__kernel_tanf+0x198>
 8019130:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019134:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019234 <__kernel_tanf+0x19c>
 8019138:	eee6 5a07 	vfma.f32	s11, s12, s14
 801913c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8019238 <__kernel_tanf+0x1a0>
 8019140:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019144:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 801923c <__kernel_tanf+0x1a4>
 8019148:	eee7 5a05 	vfma.f32	s11, s14, s10
 801914c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8019240 <__kernel_tanf+0x1a8>
 8019150:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019154:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8019244 <__kernel_tanf+0x1ac>
 8019158:	eee5 5a07 	vfma.f32	s11, s10, s14
 801915c:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8019248 <__kernel_tanf+0x1b0>
 8019160:	eea5 5a87 	vfma.f32	s10, s11, s14
 8019164:	eddf 5a39 	vldr	s11, [pc, #228]	@ 801924c <__kernel_tanf+0x1b4>
 8019168:	eee5 5a07 	vfma.f32	s11, s10, s14
 801916c:	eeb0 7a46 	vmov.f32	s14, s12
 8019170:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8019174:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8019178:	eeb0 6a60 	vmov.f32	s12, s1
 801917c:	eea7 6a05 	vfma.f32	s12, s14, s10
 8019180:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8019250 <__kernel_tanf+0x1b8>
 8019184:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019188:	eee5 0a07 	vfma.f32	s1, s10, s14
 801918c:	ee37 6aa0 	vadd.f32	s12, s15, s1
 8019190:	d31d      	bcc.n	80191ce <__kernel_tanf+0x136>
 8019192:	ee07 0a10 	vmov	s14, r0
 8019196:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801919a:	ee26 5a06 	vmul.f32	s10, s12, s12
 801919e:	ee36 6a07 	vadd.f32	s12, s12, s14
 80191a2:	179b      	asrs	r3, r3, #30
 80191a4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80191a8:	f003 0302 	and.w	r3, r3, #2
 80191ac:	f1c3 0301 	rsb	r3, r3, #1
 80191b0:	ee06 3a90 	vmov	s13, r3
 80191b4:	ee35 6ae0 	vsub.f32	s12, s11, s1
 80191b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80191bc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80191c0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80191c4:	eea7 7ac6 	vfms.f32	s14, s15, s12
 80191c8:	ee66 7a87 	vmul.f32	s15, s13, s14
 80191cc:	e77c      	b.n	80190c8 <__kernel_tanf+0x30>
 80191ce:	2801      	cmp	r0, #1
 80191d0:	d01b      	beq.n	801920a <__kernel_tanf+0x172>
 80191d2:	4b20      	ldr	r3, [pc, #128]	@ (8019254 <__kernel_tanf+0x1bc>)
 80191d4:	ee16 2a10 	vmov	r2, s12
 80191d8:	401a      	ands	r2, r3
 80191da:	ee05 2a90 	vmov	s11, r2
 80191de:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80191e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80191e6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80191ea:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80191ee:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80191f2:	ee16 2a90 	vmov	r2, s13
 80191f6:	4013      	ands	r3, r2
 80191f8:	ee07 3a90 	vmov	s15, r3
 80191fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019200:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8019204:	eee7 7a26 	vfma.f32	s15, s14, s13
 8019208:	e75e      	b.n	80190c8 <__kernel_tanf+0x30>
 801920a:	eef0 7a46 	vmov.f32	s15, s12
 801920e:	e75b      	b.n	80190c8 <__kernel_tanf+0x30>
 8019210:	3f2ca140 	.word	0x3f2ca140
 8019214:	3f490fda 	.word	0x3f490fda
 8019218:	33222168 	.word	0x33222168
 801921c:	00000000 	.word	0x00000000
 8019220:	b79bae5f 	.word	0xb79bae5f
 8019224:	38a3f445 	.word	0x38a3f445
 8019228:	37d95384 	.word	0x37d95384
 801922c:	3a1a26c8 	.word	0x3a1a26c8
 8019230:	3b6b6916 	.word	0x3b6b6916
 8019234:	3cb327a4 	.word	0x3cb327a4
 8019238:	3e088889 	.word	0x3e088889
 801923c:	3895c07a 	.word	0x3895c07a
 8019240:	398137b9 	.word	0x398137b9
 8019244:	3abede48 	.word	0x3abede48
 8019248:	3c11371f 	.word	0x3c11371f
 801924c:	3d5d0dd1 	.word	0x3d5d0dd1
 8019250:	3eaaaaab 	.word	0x3eaaaaab
 8019254:	fffff000 	.word	0xfffff000

08019258 <__ieee754_acosf>:
 8019258:	b508      	push	{r3, lr}
 801925a:	ee10 3a10 	vmov	r3, s0
 801925e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019262:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019266:	ed2d 8b0c 	vpush	{d8-d13}
 801926a:	d10a      	bne.n	8019282 <__ieee754_acosf+0x2a>
 801926c:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8019404 <__ieee754_acosf+0x1ac>
 8019270:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8019408 <__ieee754_acosf+0x1b0>
 8019274:	2b00      	cmp	r3, #0
 8019276:	bfc8      	it	gt
 8019278:	eeb0 0a67 	vmovgt.f32	s0, s15
 801927c:	ecbd 8b0c 	vpop	{d8-d13}
 8019280:	bd08      	pop	{r3, pc}
 8019282:	d904      	bls.n	801928e <__ieee754_acosf+0x36>
 8019284:	ee30 8a40 	vsub.f32	s16, s0, s0
 8019288:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801928c:	e7f6      	b.n	801927c <__ieee754_acosf+0x24>
 801928e:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8019292:	d23c      	bcs.n	801930e <__ieee754_acosf+0xb6>
 8019294:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8019298:	f240 80b1 	bls.w	80193fe <__ieee754_acosf+0x1a6>
 801929c:	ee60 7a00 	vmul.f32	s15, s0, s0
 80192a0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 801940c <__ieee754_acosf+0x1b4>
 80192a4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8019410 <__ieee754_acosf+0x1b8>
 80192a8:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8019414 <__ieee754_acosf+0x1bc>
 80192ac:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80192b0:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8019418 <__ieee754_acosf+0x1c0>
 80192b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80192b8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801941c <__ieee754_acosf+0x1c4>
 80192bc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80192c0:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8019420 <__ieee754_acosf+0x1c8>
 80192c4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80192c8:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8019424 <__ieee754_acosf+0x1cc>
 80192cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80192d0:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8019428 <__ieee754_acosf+0x1d0>
 80192d4:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80192d8:	eddf 6a54 	vldr	s13, [pc, #336]	@ 801942c <__ieee754_acosf+0x1d4>
 80192dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 80192e0:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8019430 <__ieee754_acosf+0x1d8>
 80192e4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80192e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80192ec:	eee6 6a27 	vfma.f32	s13, s12, s15
 80192f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80192f4:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8019434 <__ieee754_acosf+0x1dc>
 80192f8:	ee87 6a26 	vdiv.f32	s12, s14, s13
 80192fc:	eee0 7a46 	vfms.f32	s15, s0, s12
 8019300:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019304:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8019438 <__ieee754_acosf+0x1e0>
 8019308:	ee30 0a67 	vsub.f32	s0, s0, s15
 801930c:	e7b6      	b.n	801927c <__ieee754_acosf+0x24>
 801930e:	2b00      	cmp	r3, #0
 8019310:	eddf da3e 	vldr	s27, [pc, #248]	@ 801940c <__ieee754_acosf+0x1b4>
 8019314:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8019410 <__ieee754_acosf+0x1b8>
 8019318:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8019418 <__ieee754_acosf+0x1c0>
 801931c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 801941c <__ieee754_acosf+0x1c4>
 8019320:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8019420 <__ieee754_acosf+0x1c8>
 8019324:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8019424 <__ieee754_acosf+0x1cc>
 8019328:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8019428 <__ieee754_acosf+0x1d0>
 801932c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8019414 <__ieee754_acosf+0x1bc>
 8019330:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 801942c <__ieee754_acosf+0x1d4>
 8019334:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8019430 <__ieee754_acosf+0x1d8>
 8019338:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 801933c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019340:	da28      	bge.n	8019394 <__ieee754_acosf+0x13c>
 8019342:	ee30 8a09 	vadd.f32	s16, s0, s18
 8019346:	ee28 0a27 	vmul.f32	s0, s16, s15
 801934a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 801934e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8019352:	eeac ca80 	vfma.f32	s24, s25, s0
 8019356:	eeaa aa80 	vfma.f32	s20, s21, s0
 801935a:	eeec ba00 	vfma.f32	s23, s24, s0
 801935e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8019362:	eeab ba80 	vfma.f32	s22, s23, s0
 8019366:	eea9 9a80 	vfma.f32	s18, s19, s0
 801936a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 801936e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8019372:	f7ff fded 	bl	8018f50 <__ieee754_sqrtf>
 8019376:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801937a:	eddf 7a30 	vldr	s15, [pc, #192]	@ 801943c <__ieee754_acosf+0x1e4>
 801937e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019382:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8019386:	ee77 7a80 	vadd.f32	s15, s15, s0
 801938a:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8019440 <__ieee754_acosf+0x1e8>
 801938e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019392:	e773      	b.n	801927c <__ieee754_acosf+0x24>
 8019394:	ee39 8a40 	vsub.f32	s16, s18, s0
 8019398:	ee28 8a27 	vmul.f32	s16, s16, s15
 801939c:	eeb0 0a48 	vmov.f32	s0, s16
 80193a0:	f7ff fdd6 	bl	8018f50 <__ieee754_sqrtf>
 80193a4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80193a8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80193ac:	eeac ca88 	vfma.f32	s24, s25, s16
 80193b0:	eeaa aa88 	vfma.f32	s20, s21, s16
 80193b4:	eeec ba08 	vfma.f32	s23, s24, s16
 80193b8:	ee10 3a10 	vmov	r3, s0
 80193bc:	eeab ba88 	vfma.f32	s22, s23, s16
 80193c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80193c4:	f023 030f 	bic.w	r3, r3, #15
 80193c8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80193cc:	ee07 3a90 	vmov	s15, r3
 80193d0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80193d4:	eeb0 6a48 	vmov.f32	s12, s16
 80193d8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80193dc:	eea9 9a88 	vfma.f32	s18, s19, s16
 80193e0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80193e4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80193e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80193ec:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80193f0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80193f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80193f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80193fc:	e73e      	b.n	801927c <__ieee754_acosf+0x24>
 80193fe:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8019444 <__ieee754_acosf+0x1ec>
 8019402:	e73b      	b.n	801927c <__ieee754_acosf+0x24>
 8019404:	40490fdb 	.word	0x40490fdb
 8019408:	00000000 	.word	0x00000000
 801940c:	3811ef08 	.word	0x3811ef08
 8019410:	3a4f7f04 	.word	0x3a4f7f04
 8019414:	bf303361 	.word	0xbf303361
 8019418:	bd241146 	.word	0xbd241146
 801941c:	3e4e0aa8 	.word	0x3e4e0aa8
 8019420:	bea6b090 	.word	0xbea6b090
 8019424:	3e2aaaab 	.word	0x3e2aaaab
 8019428:	3d9dc62e 	.word	0x3d9dc62e
 801942c:	4001572d 	.word	0x4001572d
 8019430:	c019d139 	.word	0xc019d139
 8019434:	33a22168 	.word	0x33a22168
 8019438:	3fc90fda 	.word	0x3fc90fda
 801943c:	b3a22168 	.word	0xb3a22168
 8019440:	40490fda 	.word	0x40490fda
 8019444:	3fc90fdb 	.word	0x3fc90fdb

08019448 <__ieee754_asinf>:
 8019448:	b538      	push	{r3, r4, r5, lr}
 801944a:	ee10 5a10 	vmov	r5, s0
 801944e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8019452:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8019456:	ed2d 8b04 	vpush	{d8-d9}
 801945a:	d10c      	bne.n	8019476 <__ieee754_asinf+0x2e>
 801945c:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 80195d4 <__ieee754_asinf+0x18c>
 8019460:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 80195d8 <__ieee754_asinf+0x190>
 8019464:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019468:	eee0 7a07 	vfma.f32	s15, s0, s14
 801946c:	eeb0 0a67 	vmov.f32	s0, s15
 8019470:	ecbd 8b04 	vpop	{d8-d9}
 8019474:	bd38      	pop	{r3, r4, r5, pc}
 8019476:	d904      	bls.n	8019482 <__ieee754_asinf+0x3a>
 8019478:	ee70 7a40 	vsub.f32	s15, s0, s0
 801947c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019480:	e7f6      	b.n	8019470 <__ieee754_asinf+0x28>
 8019482:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019486:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801948a:	d20b      	bcs.n	80194a4 <__ieee754_asinf+0x5c>
 801948c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8019490:	d252      	bcs.n	8019538 <__ieee754_asinf+0xf0>
 8019492:	eddf 7a52 	vldr	s15, [pc, #328]	@ 80195dc <__ieee754_asinf+0x194>
 8019496:	ee70 7a27 	vadd.f32	s15, s0, s15
 801949a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801949e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a2:	dce5      	bgt.n	8019470 <__ieee754_asinf+0x28>
 80194a4:	f7ff fc8a 	bl	8018dbc <fabsf>
 80194a8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80194ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80194b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80194b4:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80195e0 <__ieee754_asinf+0x198>
 80194b8:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 80195e4 <__ieee754_asinf+0x19c>
 80194bc:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 80195e8 <__ieee754_asinf+0x1a0>
 80194c0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80194c4:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80195ec <__ieee754_asinf+0x1a4>
 80194c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80194cc:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80195f0 <__ieee754_asinf+0x1a8>
 80194d0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80194d4:	eddf 7a47 	vldr	s15, [pc, #284]	@ 80195f4 <__ieee754_asinf+0x1ac>
 80194d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80194dc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 80195f8 <__ieee754_asinf+0x1b0>
 80194e0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80194e4:	eddf 7a45 	vldr	s15, [pc, #276]	@ 80195fc <__ieee754_asinf+0x1b4>
 80194e8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80194ec:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8019600 <__ieee754_asinf+0x1b8>
 80194f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80194f4:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8019604 <__ieee754_asinf+0x1bc>
 80194f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80194fc:	eeb0 0a48 	vmov.f32	s0, s16
 8019500:	eee7 8a88 	vfma.f32	s17, s15, s16
 8019504:	f7ff fd24 	bl	8018f50 <__ieee754_sqrtf>
 8019508:	4b3f      	ldr	r3, [pc, #252]	@ (8019608 <__ieee754_asinf+0x1c0>)
 801950a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801950e:	429c      	cmp	r4, r3
 8019510:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8019514:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8019518:	d93d      	bls.n	8019596 <__ieee754_asinf+0x14e>
 801951a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801951e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801960c <__ieee754_asinf+0x1c4>
 8019522:	eee0 7a26 	vfma.f32	s15, s0, s13
 8019526:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 80195d8 <__ieee754_asinf+0x190>
 801952a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801952e:	2d00      	cmp	r5, #0
 8019530:	bfd8      	it	le
 8019532:	eeb1 0a40 	vnegle.f32	s0, s0
 8019536:	e79b      	b.n	8019470 <__ieee754_asinf+0x28>
 8019538:	ee60 7a00 	vmul.f32	s15, s0, s0
 801953c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80195e4 <__ieee754_asinf+0x19c>
 8019540:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80195e0 <__ieee754_asinf+0x198>
 8019544:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 80195f8 <__ieee754_asinf+0x1b0>
 8019548:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801954c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80195ec <__ieee754_asinf+0x1a4>
 8019550:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019554:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80195f0 <__ieee754_asinf+0x1a8>
 8019558:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801955c:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80195f4 <__ieee754_asinf+0x1ac>
 8019560:	eee7 6a27 	vfma.f32	s13, s14, s15
 8019564:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80195e8 <__ieee754_asinf+0x1a0>
 8019568:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801956c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80195fc <__ieee754_asinf+0x1b4>
 8019570:	eee7 6a86 	vfma.f32	s13, s15, s12
 8019574:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8019600 <__ieee754_asinf+0x1b8>
 8019578:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801957c:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8019604 <__ieee754_asinf+0x1bc>
 8019580:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019584:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019588:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801958c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8019590:	eea0 0a27 	vfma.f32	s0, s0, s15
 8019594:	e76c      	b.n	8019470 <__ieee754_asinf+0x28>
 8019596:	ee10 3a10 	vmov	r3, s0
 801959a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 801959e:	f023 030f 	bic.w	r3, r3, #15
 80195a2:	ee07 3a10 	vmov	s14, r3
 80195a6:	eea7 8a47 	vfms.f32	s16, s14, s14
 80195aa:	ee70 5a00 	vadd.f32	s11, s0, s0
 80195ae:	ee30 0a07 	vadd.f32	s0, s0, s14
 80195b2:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80195d4 <__ieee754_asinf+0x18c>
 80195b6:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80195ba:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8019610 <__ieee754_asinf+0x1c8>
 80195be:	eee5 7a66 	vfms.f32	s15, s10, s13
 80195c2:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80195c6:	eeb0 6a40 	vmov.f32	s12, s0
 80195ca:	eea7 6a66 	vfms.f32	s12, s14, s13
 80195ce:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80195d2:	e7aa      	b.n	801952a <__ieee754_asinf+0xe2>
 80195d4:	b33bbd2e 	.word	0xb33bbd2e
 80195d8:	3fc90fdb 	.word	0x3fc90fdb
 80195dc:	7149f2ca 	.word	0x7149f2ca
 80195e0:	3a4f7f04 	.word	0x3a4f7f04
 80195e4:	3811ef08 	.word	0x3811ef08
 80195e8:	3e2aaaab 	.word	0x3e2aaaab
 80195ec:	bd241146 	.word	0xbd241146
 80195f0:	3e4e0aa8 	.word	0x3e4e0aa8
 80195f4:	bea6b090 	.word	0xbea6b090
 80195f8:	3d9dc62e 	.word	0x3d9dc62e
 80195fc:	bf303361 	.word	0xbf303361
 8019600:	4001572d 	.word	0x4001572d
 8019604:	c019d139 	.word	0xc019d139
 8019608:	3f799999 	.word	0x3f799999
 801960c:	333bbd2e 	.word	0x333bbd2e
 8019610:	3f490fdb 	.word	0x3f490fdb

08019614 <__ieee754_atan2f>:
 8019614:	ee10 2a90 	vmov	r2, s1
 8019618:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 801961c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019620:	b510      	push	{r4, lr}
 8019622:	eef0 7a40 	vmov.f32	s15, s0
 8019626:	d806      	bhi.n	8019636 <__ieee754_atan2f+0x22>
 8019628:	ee10 0a10 	vmov	r0, s0
 801962c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8019630:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019634:	d904      	bls.n	8019640 <__ieee754_atan2f+0x2c>
 8019636:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801963a:	eeb0 0a67 	vmov.f32	s0, s15
 801963e:	bd10      	pop	{r4, pc}
 8019640:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8019644:	d103      	bne.n	801964e <__ieee754_atan2f+0x3a>
 8019646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801964a:	f000 be43 	b.w	801a2d4 <atanf>
 801964e:	1794      	asrs	r4, r2, #30
 8019650:	f004 0402 	and.w	r4, r4, #2
 8019654:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8019658:	b943      	cbnz	r3, 801966c <__ieee754_atan2f+0x58>
 801965a:	2c02      	cmp	r4, #2
 801965c:	d05e      	beq.n	801971c <__ieee754_atan2f+0x108>
 801965e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019730 <__ieee754_atan2f+0x11c>
 8019662:	2c03      	cmp	r4, #3
 8019664:	bf08      	it	eq
 8019666:	eef0 7a47 	vmoveq.f32	s15, s14
 801966a:	e7e6      	b.n	801963a <__ieee754_atan2f+0x26>
 801966c:	b941      	cbnz	r1, 8019680 <__ieee754_atan2f+0x6c>
 801966e:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8019734 <__ieee754_atan2f+0x120>
 8019672:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8019738 <__ieee754_atan2f+0x124>
 8019676:	2800      	cmp	r0, #0
 8019678:	bfb8      	it	lt
 801967a:	eef0 7a47 	vmovlt.f32	s15, s14
 801967e:	e7dc      	b.n	801963a <__ieee754_atan2f+0x26>
 8019680:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019684:	d110      	bne.n	80196a8 <__ieee754_atan2f+0x94>
 8019686:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801968a:	f104 34ff 	add.w	r4, r4, #4294967295
 801968e:	d107      	bne.n	80196a0 <__ieee754_atan2f+0x8c>
 8019690:	2c02      	cmp	r4, #2
 8019692:	d846      	bhi.n	8019722 <__ieee754_atan2f+0x10e>
 8019694:	4b29      	ldr	r3, [pc, #164]	@ (801973c <__ieee754_atan2f+0x128>)
 8019696:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801969a:	edd3 7a00 	vldr	s15, [r3]
 801969e:	e7cc      	b.n	801963a <__ieee754_atan2f+0x26>
 80196a0:	2c02      	cmp	r4, #2
 80196a2:	d841      	bhi.n	8019728 <__ieee754_atan2f+0x114>
 80196a4:	4b26      	ldr	r3, [pc, #152]	@ (8019740 <__ieee754_atan2f+0x12c>)
 80196a6:	e7f6      	b.n	8019696 <__ieee754_atan2f+0x82>
 80196a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80196ac:	d0df      	beq.n	801966e <__ieee754_atan2f+0x5a>
 80196ae:	1a5b      	subs	r3, r3, r1
 80196b0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80196b4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80196b8:	da1a      	bge.n	80196f0 <__ieee754_atan2f+0xdc>
 80196ba:	2a00      	cmp	r2, #0
 80196bc:	da01      	bge.n	80196c2 <__ieee754_atan2f+0xae>
 80196be:	313c      	adds	r1, #60	@ 0x3c
 80196c0:	db19      	blt.n	80196f6 <__ieee754_atan2f+0xe2>
 80196c2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80196c6:	f7ff fb79 	bl	8018dbc <fabsf>
 80196ca:	f000 fe03 	bl	801a2d4 <atanf>
 80196ce:	eef0 7a40 	vmov.f32	s15, s0
 80196d2:	2c01      	cmp	r4, #1
 80196d4:	d012      	beq.n	80196fc <__ieee754_atan2f+0xe8>
 80196d6:	2c02      	cmp	r4, #2
 80196d8:	d017      	beq.n	801970a <__ieee754_atan2f+0xf6>
 80196da:	2c00      	cmp	r4, #0
 80196dc:	d0ad      	beq.n	801963a <__ieee754_atan2f+0x26>
 80196de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8019744 <__ieee754_atan2f+0x130>
 80196e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80196e6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8019748 <__ieee754_atan2f+0x134>
 80196ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80196ee:	e7a4      	b.n	801963a <__ieee754_atan2f+0x26>
 80196f0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8019734 <__ieee754_atan2f+0x120>
 80196f4:	e7ed      	b.n	80196d2 <__ieee754_atan2f+0xbe>
 80196f6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 801974c <__ieee754_atan2f+0x138>
 80196fa:	e7ea      	b.n	80196d2 <__ieee754_atan2f+0xbe>
 80196fc:	ee17 3a90 	vmov	r3, s15
 8019700:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019704:	ee07 3a90 	vmov	s15, r3
 8019708:	e797      	b.n	801963a <__ieee754_atan2f+0x26>
 801970a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8019744 <__ieee754_atan2f+0x130>
 801970e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019712:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8019748 <__ieee754_atan2f+0x134>
 8019716:	ee77 7a67 	vsub.f32	s15, s14, s15
 801971a:	e78e      	b.n	801963a <__ieee754_atan2f+0x26>
 801971c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8019748 <__ieee754_atan2f+0x134>
 8019720:	e78b      	b.n	801963a <__ieee754_atan2f+0x26>
 8019722:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8019750 <__ieee754_atan2f+0x13c>
 8019726:	e788      	b.n	801963a <__ieee754_atan2f+0x26>
 8019728:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801974c <__ieee754_atan2f+0x138>
 801972c:	e785      	b.n	801963a <__ieee754_atan2f+0x26>
 801972e:	bf00      	nop
 8019730:	c0490fdb 	.word	0xc0490fdb
 8019734:	3fc90fdb 	.word	0x3fc90fdb
 8019738:	bfc90fdb 	.word	0xbfc90fdb
 801973c:	0801c1f8 	.word	0x0801c1f8
 8019740:	0801c1ec 	.word	0x0801c1ec
 8019744:	33bbbd2e 	.word	0x33bbbd2e
 8019748:	40490fdb 	.word	0x40490fdb
 801974c:	00000000 	.word	0x00000000
 8019750:	3f490fdb 	.word	0x3f490fdb

08019754 <__ieee754_expf>:
 8019754:	ee10 2a10 	vmov	r2, s0
 8019758:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 801975c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019760:	d902      	bls.n	8019768 <__ieee754_expf+0x14>
 8019762:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019766:	4770      	bx	lr
 8019768:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 801976c:	d106      	bne.n	801977c <__ieee754_expf+0x28>
 801976e:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80198a8 <__ieee754_expf+0x154>
 8019772:	2900      	cmp	r1, #0
 8019774:	bf18      	it	ne
 8019776:	eeb0 0a67 	vmovne.f32	s0, s15
 801977a:	4770      	bx	lr
 801977c:	484b      	ldr	r0, [pc, #300]	@ (80198ac <__ieee754_expf+0x158>)
 801977e:	4282      	cmp	r2, r0
 8019780:	dd02      	ble.n	8019788 <__ieee754_expf+0x34>
 8019782:	2000      	movs	r0, #0
 8019784:	f000 bf00 	b.w	801a588 <__math_oflowf>
 8019788:	2a00      	cmp	r2, #0
 801978a:	da05      	bge.n	8019798 <__ieee754_expf+0x44>
 801978c:	4a48      	ldr	r2, [pc, #288]	@ (80198b0 <__ieee754_expf+0x15c>)
 801978e:	4293      	cmp	r3, r2
 8019790:	d902      	bls.n	8019798 <__ieee754_expf+0x44>
 8019792:	2000      	movs	r0, #0
 8019794:	f000 bef2 	b.w	801a57c <__math_uflowf>
 8019798:	4a46      	ldr	r2, [pc, #280]	@ (80198b4 <__ieee754_expf+0x160>)
 801979a:	4293      	cmp	r3, r2
 801979c:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80197a0:	d952      	bls.n	8019848 <__ieee754_expf+0xf4>
 80197a2:	4a45      	ldr	r2, [pc, #276]	@ (80198b8 <__ieee754_expf+0x164>)
 80197a4:	4293      	cmp	r3, r2
 80197a6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80197aa:	d834      	bhi.n	8019816 <__ieee754_expf+0xc2>
 80197ac:	4b43      	ldr	r3, [pc, #268]	@ (80198bc <__ieee754_expf+0x168>)
 80197ae:	4413      	add	r3, r2
 80197b0:	ed93 7a00 	vldr	s14, [r3]
 80197b4:	4b42      	ldr	r3, [pc, #264]	@ (80198c0 <__ieee754_expf+0x16c>)
 80197b6:	4413      	add	r3, r2
 80197b8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80197bc:	f1c1 0201 	rsb	r2, r1, #1
 80197c0:	edd3 7a00 	vldr	s15, [r3]
 80197c4:	1a52      	subs	r2, r2, r1
 80197c6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80197ca:	ee20 6a00 	vmul.f32	s12, s0, s0
 80197ce:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 80198c4 <__ieee754_expf+0x170>
 80197d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80198c8 <__ieee754_expf+0x174>
 80197d6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80197da:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 80198cc <__ieee754_expf+0x178>
 80197de:	eea6 5a86 	vfma.f32	s10, s13, s12
 80197e2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80198d0 <__ieee754_expf+0x17c>
 80197e6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80197ea:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 80198d4 <__ieee754_expf+0x180>
 80197ee:	eea6 5a86 	vfma.f32	s10, s13, s12
 80197f2:	eef0 6a40 	vmov.f32	s13, s0
 80197f6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80197fa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80197fe:	ee20 5a26 	vmul.f32	s10, s0, s13
 8019802:	bb92      	cbnz	r2, 801986a <__ieee754_expf+0x116>
 8019804:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8019808:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801980c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019810:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8019814:	4770      	bx	lr
 8019816:	4b30      	ldr	r3, [pc, #192]	@ (80198d8 <__ieee754_expf+0x184>)
 8019818:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80198dc <__ieee754_expf+0x188>
 801981c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80198e0 <__ieee754_expf+0x18c>
 8019820:	4413      	add	r3, r2
 8019822:	edd3 7a00 	vldr	s15, [r3]
 8019826:	eee0 7a07 	vfma.f32	s15, s0, s14
 801982a:	eeb0 7a40 	vmov.f32	s14, s0
 801982e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019832:	ee17 2a90 	vmov	r2, s15
 8019836:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801983a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801983e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 80198e4 <__ieee754_expf+0x190>
 8019842:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019846:	e7be      	b.n	80197c6 <__ieee754_expf+0x72>
 8019848:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801984c:	d20b      	bcs.n	8019866 <__ieee754_expf+0x112>
 801984e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80198e8 <__ieee754_expf+0x194>
 8019852:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019856:	eef4 6ae5 	vcmpe.f32	s13, s11
 801985a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801985e:	dd02      	ble.n	8019866 <__ieee754_expf+0x112>
 8019860:	ee30 0a25 	vadd.f32	s0, s0, s11
 8019864:	4770      	bx	lr
 8019866:	2200      	movs	r2, #0
 8019868:	e7af      	b.n	80197ca <__ieee754_expf+0x76>
 801986a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801986e:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8019872:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8019876:	bfb8      	it	lt
 8019878:	3264      	addlt	r2, #100	@ 0x64
 801987a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801987e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019882:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019886:	ee17 3a90 	vmov	r3, s15
 801988a:	bfab      	itete	ge
 801988c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019890:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019894:	ee00 3a10 	vmovge	s0, r3
 8019898:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 80198ec <__ieee754_expf+0x198>
 801989c:	bfbc      	itt	lt
 801989e:	ee00 3a10 	vmovlt	s0, r3
 80198a2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80198a6:	4770      	bx	lr
 80198a8:	00000000 	.word	0x00000000
 80198ac:	42b17217 	.word	0x42b17217
 80198b0:	42cff1b5 	.word	0x42cff1b5
 80198b4:	3eb17218 	.word	0x3eb17218
 80198b8:	3f851591 	.word	0x3f851591
 80198bc:	0801c20c 	.word	0x0801c20c
 80198c0:	0801c204 	.word	0x0801c204
 80198c4:	3331bb4c 	.word	0x3331bb4c
 80198c8:	b5ddea0e 	.word	0xb5ddea0e
 80198cc:	388ab355 	.word	0x388ab355
 80198d0:	bb360b61 	.word	0xbb360b61
 80198d4:	3e2aaaab 	.word	0x3e2aaaab
 80198d8:	0801c214 	.word	0x0801c214
 80198dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80198e0:	3f317180 	.word	0x3f317180
 80198e4:	3717f7d1 	.word	0x3717f7d1
 80198e8:	7149f2ca 	.word	0x7149f2ca
 80198ec:	0d800000 	.word	0x0d800000

080198f0 <__ieee754_logf>:
 80198f0:	ee10 3a10 	vmov	r3, s0
 80198f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80198f8:	d106      	bne.n	8019908 <__ieee754_logf+0x18>
 80198fa:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8019a94 <__ieee754_logf+0x1a4>
 80198fe:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8019a98 <__ieee754_logf+0x1a8>
 8019902:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019906:	4770      	bx	lr
 8019908:	2b00      	cmp	r3, #0
 801990a:	461a      	mov	r2, r3
 801990c:	da02      	bge.n	8019914 <__ieee754_logf+0x24>
 801990e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8019912:	e7f4      	b.n	80198fe <__ieee754_logf+0xe>
 8019914:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019918:	db02      	blt.n	8019920 <__ieee754_logf+0x30>
 801991a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801991e:	4770      	bx	lr
 8019920:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8019924:	bfb8      	it	lt
 8019926:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8019a9c <__ieee754_logf+0x1ac>
 801992a:	485d      	ldr	r0, [pc, #372]	@ (8019aa0 <__ieee754_logf+0x1b0>)
 801992c:	bfbe      	ittt	lt
 801992e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019932:	f06f 0118 	mvnlt.w	r1, #24
 8019936:	ee17 2a90 	vmovlt	r2, s15
 801993a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801993e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8019942:	4410      	add	r0, r2
 8019944:	bfa8      	it	ge
 8019946:	2100      	movge	r1, #0
 8019948:	3b7f      	subs	r3, #127	@ 0x7f
 801994a:	440b      	add	r3, r1
 801994c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8019950:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8019954:	4311      	orrs	r1, r2
 8019956:	ee00 1a10 	vmov	s0, r1
 801995a:	4952      	ldr	r1, [pc, #328]	@ (8019aa4 <__ieee754_logf+0x1b4>)
 801995c:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8019960:	f102 000f 	add.w	r0, r2, #15
 8019964:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019968:	4001      	ands	r1, r0
 801996a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801996e:	bb89      	cbnz	r1, 80199d4 <__ieee754_logf+0xe4>
 8019970:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8019974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019978:	d10f      	bne.n	801999a <__ieee754_logf+0xaa>
 801997a:	2b00      	cmp	r3, #0
 801997c:	f000 8087 	beq.w	8019a8e <__ieee754_logf+0x19e>
 8019980:	ee07 3a90 	vmov	s15, r3
 8019984:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8019aa8 <__ieee754_logf+0x1b8>
 8019988:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8019aac <__ieee754_logf+0x1bc>
 801998c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019990:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019994:	eea7 0a87 	vfma.f32	s0, s15, s14
 8019998:	4770      	bx	lr
 801999a:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8019ab0 <__ieee754_logf+0x1c0>
 801999e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80199a2:	eee0 7a66 	vfms.f32	s15, s0, s13
 80199a6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80199aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80199ae:	b913      	cbnz	r3, 80199b6 <__ieee754_logf+0xc6>
 80199b0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80199b4:	4770      	bx	lr
 80199b6:	ee07 3a90 	vmov	s15, r3
 80199ba:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8019aa8 <__ieee754_logf+0x1b8>
 80199be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80199c2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80199c6:	ee37 0a40 	vsub.f32	s0, s14, s0
 80199ca:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8019aac <__ieee754_logf+0x1bc>
 80199ce:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80199d2:	4770      	bx	lr
 80199d4:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80199d8:	ee70 7a27 	vadd.f32	s15, s0, s15
 80199dc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8019ab4 <__ieee754_logf+0x1c4>
 80199e0:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8019ab8 <__ieee754_logf+0x1c8>
 80199e4:	4935      	ldr	r1, [pc, #212]	@ (8019abc <__ieee754_logf+0x1cc>)
 80199e6:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80199ea:	4411      	add	r1, r2
 80199ec:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80199f0:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80199f4:	430a      	orrs	r2, r1
 80199f6:	2a00      	cmp	r2, #0
 80199f8:	ee07 3a90 	vmov	s15, r3
 80199fc:	ee26 5a06 	vmul.f32	s10, s12, s12
 8019a00:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019a04:	ee25 7a05 	vmul.f32	s14, s10, s10
 8019a08:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8019ac0 <__ieee754_logf+0x1d0>
 8019a0c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8019a10:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8019ac4 <__ieee754_logf+0x1d4>
 8019a14:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019a18:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8019ac8 <__ieee754_logf+0x1d8>
 8019a1c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8019a20:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8019acc <__ieee754_logf+0x1dc>
 8019a24:	eee7 4a87 	vfma.f32	s9, s15, s14
 8019a28:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8019ad0 <__ieee754_logf+0x1e0>
 8019a2c:	eee4 7a87 	vfma.f32	s15, s9, s14
 8019a30:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019a34:	eee5 7a87 	vfma.f32	s15, s11, s14
 8019a38:	dd1a      	ble.n	8019a70 <__ieee754_logf+0x180>
 8019a3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8019a3e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8019a42:	ee27 7a00 	vmul.f32	s14, s14, s0
 8019a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019a4e:	b913      	cbnz	r3, 8019a56 <__ieee754_logf+0x166>
 8019a50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019a54:	e7ac      	b.n	80199b0 <__ieee754_logf+0xc0>
 8019a56:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8019aa8 <__ieee754_logf+0x1b8>
 8019a5a:	eee6 7a86 	vfma.f32	s15, s13, s12
 8019a5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019a62:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019a66:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8019aac <__ieee754_logf+0x1bc>
 8019a6a:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8019a6e:	4770      	bx	lr
 8019a70:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019a74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019a78:	b913      	cbnz	r3, 8019a80 <__ieee754_logf+0x190>
 8019a7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019a7e:	4770      	bx	lr
 8019a80:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8019aa8 <__ieee754_logf+0x1b8>
 8019a84:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8019a88:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019a8c:	e7eb      	b.n	8019a66 <__ieee754_logf+0x176>
 8019a8e:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8019a98 <__ieee754_logf+0x1a8>
 8019a92:	4770      	bx	lr
 8019a94:	cc000000 	.word	0xcc000000
 8019a98:	00000000 	.word	0x00000000
 8019a9c:	4c000000 	.word	0x4c000000
 8019aa0:	004afb20 	.word	0x004afb20
 8019aa4:	007ffff0 	.word	0x007ffff0
 8019aa8:	3717f7d1 	.word	0x3717f7d1
 8019aac:	3f317180 	.word	0x3f317180
 8019ab0:	3eaaaaab 	.word	0x3eaaaaab
 8019ab4:	3e1cd04f 	.word	0x3e1cd04f
 8019ab8:	3e178897 	.word	0x3e178897
 8019abc:	ffcf5c30 	.word	0xffcf5c30
 8019ac0:	3e638e29 	.word	0x3e638e29
 8019ac4:	3ecccccd 	.word	0x3ecccccd
 8019ac8:	3e3a3325 	.word	0x3e3a3325
 8019acc:	3e924925 	.word	0x3e924925
 8019ad0:	3f2aaaab 	.word	0x3f2aaaab

08019ad4 <__ieee754_powf>:
 8019ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ad8:	ee10 4a90 	vmov	r4, s1
 8019adc:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8019ae0:	ed2d 8b02 	vpush	{d8}
 8019ae4:	ee10 6a10 	vmov	r6, s0
 8019ae8:	eeb0 8a40 	vmov.f32	s16, s0
 8019aec:	eef0 8a60 	vmov.f32	s17, s1
 8019af0:	d10c      	bne.n	8019b0c <__ieee754_powf+0x38>
 8019af2:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8019af6:	0076      	lsls	r6, r6, #1
 8019af8:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8019afc:	f240 829c 	bls.w	801a038 <__ieee754_powf+0x564>
 8019b00:	ee38 0a28 	vadd.f32	s0, s16, s17
 8019b04:	ecbd 8b02 	vpop	{d8}
 8019b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b0c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8019b10:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8019b14:	d802      	bhi.n	8019b1c <__ieee754_powf+0x48>
 8019b16:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019b1a:	d908      	bls.n	8019b2e <__ieee754_powf+0x5a>
 8019b1c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8019b20:	d1ee      	bne.n	8019b00 <__ieee754_powf+0x2c>
 8019b22:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8019b26:	0064      	lsls	r4, r4, #1
 8019b28:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8019b2c:	e7e6      	b.n	8019afc <__ieee754_powf+0x28>
 8019b2e:	2e00      	cmp	r6, #0
 8019b30:	da1e      	bge.n	8019b70 <__ieee754_powf+0x9c>
 8019b32:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8019b36:	d22b      	bcs.n	8019b90 <__ieee754_powf+0xbc>
 8019b38:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019b3c:	d332      	bcc.n	8019ba4 <__ieee754_powf+0xd0>
 8019b3e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8019b42:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8019b46:	fa49 f503 	asr.w	r5, r9, r3
 8019b4a:	fa05 f303 	lsl.w	r3, r5, r3
 8019b4e:	454b      	cmp	r3, r9
 8019b50:	d126      	bne.n	8019ba0 <__ieee754_powf+0xcc>
 8019b52:	f005 0501 	and.w	r5, r5, #1
 8019b56:	f1c5 0502 	rsb	r5, r5, #2
 8019b5a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019b5e:	d122      	bne.n	8019ba6 <__ieee754_powf+0xd2>
 8019b60:	2c00      	cmp	r4, #0
 8019b62:	f280 826f 	bge.w	801a044 <__ieee754_powf+0x570>
 8019b66:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019b6a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019b6e:	e7c9      	b.n	8019b04 <__ieee754_powf+0x30>
 8019b70:	2500      	movs	r5, #0
 8019b72:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8019b76:	d1f0      	bne.n	8019b5a <__ieee754_powf+0x86>
 8019b78:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8019b7c:	f000 825c 	beq.w	801a038 <__ieee754_powf+0x564>
 8019b80:	d908      	bls.n	8019b94 <__ieee754_powf+0xc0>
 8019b82:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8019ee4 <__ieee754_powf+0x410>
 8019b86:	2c00      	cmp	r4, #0
 8019b88:	bfa8      	it	ge
 8019b8a:	eeb0 0a68 	vmovge.f32	s0, s17
 8019b8e:	e7b9      	b.n	8019b04 <__ieee754_powf+0x30>
 8019b90:	2502      	movs	r5, #2
 8019b92:	e7ee      	b.n	8019b72 <__ieee754_powf+0x9e>
 8019b94:	2c00      	cmp	r4, #0
 8019b96:	f280 8252 	bge.w	801a03e <__ieee754_powf+0x56a>
 8019b9a:	eeb1 0a68 	vneg.f32	s0, s17
 8019b9e:	e7b1      	b.n	8019b04 <__ieee754_powf+0x30>
 8019ba0:	2500      	movs	r5, #0
 8019ba2:	e7da      	b.n	8019b5a <__ieee754_powf+0x86>
 8019ba4:	2500      	movs	r5, #0
 8019ba6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8019baa:	d102      	bne.n	8019bb2 <__ieee754_powf+0xde>
 8019bac:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019bb0:	e7a8      	b.n	8019b04 <__ieee754_powf+0x30>
 8019bb2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019bb6:	d109      	bne.n	8019bcc <__ieee754_powf+0xf8>
 8019bb8:	2e00      	cmp	r6, #0
 8019bba:	db07      	blt.n	8019bcc <__ieee754_powf+0xf8>
 8019bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8019bc0:	ecbd 8b02 	vpop	{d8}
 8019bc4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bc8:	f7ff b9c2 	b.w	8018f50 <__ieee754_sqrtf>
 8019bcc:	eeb0 0a48 	vmov.f32	s0, s16
 8019bd0:	f7ff f8f4 	bl	8018dbc <fabsf>
 8019bd4:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8019bd8:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8019bdc:	4647      	mov	r7, r8
 8019bde:	d002      	beq.n	8019be6 <__ieee754_powf+0x112>
 8019be0:	f1b8 0f00 	cmp.w	r8, #0
 8019be4:	d117      	bne.n	8019c16 <__ieee754_powf+0x142>
 8019be6:	2c00      	cmp	r4, #0
 8019be8:	bfbc      	itt	lt
 8019bea:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8019bee:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019bf2:	2e00      	cmp	r6, #0
 8019bf4:	da86      	bge.n	8019b04 <__ieee754_powf+0x30>
 8019bf6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8019bfa:	ea58 0805 	orrs.w	r8, r8, r5
 8019bfe:	d104      	bne.n	8019c0a <__ieee754_powf+0x136>
 8019c00:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019c04:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8019c08:	e77c      	b.n	8019b04 <__ieee754_powf+0x30>
 8019c0a:	2d01      	cmp	r5, #1
 8019c0c:	f47f af7a 	bne.w	8019b04 <__ieee754_powf+0x30>
 8019c10:	eeb1 0a40 	vneg.f32	s0, s0
 8019c14:	e776      	b.n	8019b04 <__ieee754_powf+0x30>
 8019c16:	0ff0      	lsrs	r0, r6, #31
 8019c18:	3801      	subs	r0, #1
 8019c1a:	ea55 0300 	orrs.w	r3, r5, r0
 8019c1e:	d104      	bne.n	8019c2a <__ieee754_powf+0x156>
 8019c20:	ee38 8a48 	vsub.f32	s16, s16, s16
 8019c24:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8019c28:	e76c      	b.n	8019b04 <__ieee754_powf+0x30>
 8019c2a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8019c2e:	d973      	bls.n	8019d18 <__ieee754_powf+0x244>
 8019c30:	4bad      	ldr	r3, [pc, #692]	@ (8019ee8 <__ieee754_powf+0x414>)
 8019c32:	4598      	cmp	r8, r3
 8019c34:	d808      	bhi.n	8019c48 <__ieee754_powf+0x174>
 8019c36:	2c00      	cmp	r4, #0
 8019c38:	da0b      	bge.n	8019c52 <__ieee754_powf+0x17e>
 8019c3a:	2000      	movs	r0, #0
 8019c3c:	ecbd 8b02 	vpop	{d8}
 8019c40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c44:	f000 bca0 	b.w	801a588 <__math_oflowf>
 8019c48:	4ba8      	ldr	r3, [pc, #672]	@ (8019eec <__ieee754_powf+0x418>)
 8019c4a:	4598      	cmp	r8, r3
 8019c4c:	d908      	bls.n	8019c60 <__ieee754_powf+0x18c>
 8019c4e:	2c00      	cmp	r4, #0
 8019c50:	dcf3      	bgt.n	8019c3a <__ieee754_powf+0x166>
 8019c52:	2000      	movs	r0, #0
 8019c54:	ecbd 8b02 	vpop	{d8}
 8019c58:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019c5c:	f000 bc8e 	b.w	801a57c <__math_uflowf>
 8019c60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019c64:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019c68:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8019ef0 <__ieee754_powf+0x41c>
 8019c6c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019c70:	eee0 6a67 	vfms.f32	s13, s0, s15
 8019c74:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019c78:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019c7c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8019c84:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8019ef4 <__ieee754_powf+0x420>
 8019c88:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8019c8c:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8019ef8 <__ieee754_powf+0x424>
 8019c90:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019c94:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8019efc <__ieee754_powf+0x428>
 8019c98:	eef0 6a67 	vmov.f32	s13, s15
 8019c9c:	eee0 6a07 	vfma.f32	s13, s0, s14
 8019ca0:	ee16 3a90 	vmov	r3, s13
 8019ca4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019ca8:	f023 030f 	bic.w	r3, r3, #15
 8019cac:	ee06 3a90 	vmov	s13, r3
 8019cb0:	eee0 6a47 	vfms.f32	s13, s0, s14
 8019cb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019cb8:	3d01      	subs	r5, #1
 8019cba:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 8019cbe:	4305      	orrs	r5, r0
 8019cc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019cc4:	f024 040f 	bic.w	r4, r4, #15
 8019cc8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8019ccc:	bf18      	it	ne
 8019cce:	eeb0 8a47 	vmovne.f32	s16, s14
 8019cd2:	ee07 4a10 	vmov	s14, r4
 8019cd6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8019cda:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8019cde:	ee07 3a90 	vmov	s15, r3
 8019ce2:	eee7 0a27 	vfma.f32	s1, s14, s15
 8019ce6:	ee07 4a10 	vmov	s14, r4
 8019cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019cee:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8019cf2:	ee17 1a10 	vmov	r1, s14
 8019cf6:	2900      	cmp	r1, #0
 8019cf8:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019cfc:	f340 80dd 	ble.w	8019eba <__ieee754_powf+0x3e6>
 8019d00:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8019d04:	f240 80ca 	bls.w	8019e9c <__ieee754_powf+0x3c8>
 8019d08:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d10:	bf4c      	ite	mi
 8019d12:	2001      	movmi	r0, #1
 8019d14:	2000      	movpl	r0, #0
 8019d16:	e791      	b.n	8019c3c <__ieee754_powf+0x168>
 8019d18:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8019d1c:	bf01      	itttt	eq
 8019d1e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8019f00 <__ieee754_powf+0x42c>
 8019d22:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8019d26:	f06f 0317 	mvneq.w	r3, #23
 8019d2a:	ee17 7a90 	vmoveq	r7, s15
 8019d2e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8019d32:	bf18      	it	ne
 8019d34:	2300      	movne	r3, #0
 8019d36:	3a7f      	subs	r2, #127	@ 0x7f
 8019d38:	441a      	add	r2, r3
 8019d3a:	4b72      	ldr	r3, [pc, #456]	@ (8019f04 <__ieee754_powf+0x430>)
 8019d3c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8019d40:	429f      	cmp	r7, r3
 8019d42:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8019d46:	dd06      	ble.n	8019d56 <__ieee754_powf+0x282>
 8019d48:	4b6f      	ldr	r3, [pc, #444]	@ (8019f08 <__ieee754_powf+0x434>)
 8019d4a:	429f      	cmp	r7, r3
 8019d4c:	f340 80a4 	ble.w	8019e98 <__ieee754_powf+0x3c4>
 8019d50:	3201      	adds	r2, #1
 8019d52:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8019d56:	2600      	movs	r6, #0
 8019d58:	4b6c      	ldr	r3, [pc, #432]	@ (8019f0c <__ieee754_powf+0x438>)
 8019d5a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8019d5e:	ee07 1a10 	vmov	s14, r1
 8019d62:	edd3 5a00 	vldr	s11, [r3]
 8019d66:	4b6a      	ldr	r3, [pc, #424]	@ (8019f10 <__ieee754_powf+0x43c>)
 8019d68:	ee75 7a87 	vadd.f32	s15, s11, s14
 8019d6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019d70:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8019d74:	1049      	asrs	r1, r1, #1
 8019d76:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8019d7a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8019d7e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8019d82:	ee37 6a65 	vsub.f32	s12, s14, s11
 8019d86:	ee07 1a90 	vmov	s15, r1
 8019d8a:	ee26 5a24 	vmul.f32	s10, s12, s9
 8019d8e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8019d92:	ee15 7a10 	vmov	r7, s10
 8019d96:	401f      	ands	r7, r3
 8019d98:	ee06 7a90 	vmov	s13, r7
 8019d9c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8019da0:	ee37 7a65 	vsub.f32	s14, s14, s11
 8019da4:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019da8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019dac:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8019f14 <__ieee754_powf+0x440>
 8019db0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8019f18 <__ieee754_powf+0x444>
 8019db4:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019db8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8019f1c <__ieee754_powf+0x448>
 8019dbc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019dc0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8019ef0 <__ieee754_powf+0x41c>
 8019dc4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019dc8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8019f20 <__ieee754_powf+0x44c>
 8019dcc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019dd0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8019f24 <__ieee754_powf+0x450>
 8019dd4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019dd8:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019ddc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8019de0:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8019de4:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019de8:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019dec:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8019df0:	eef0 5a67 	vmov.f32	s11, s15
 8019df4:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8019df8:	ee75 5a87 	vadd.f32	s11, s11, s14
 8019dfc:	ee15 1a90 	vmov	r1, s11
 8019e00:	4019      	ands	r1, r3
 8019e02:	ee05 1a90 	vmov	s11, r1
 8019e06:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8019e0a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8019e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019e12:	ee67 7a85 	vmul.f32	s15, s15, s10
 8019e16:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019e1a:	eeb0 6a67 	vmov.f32	s12, s15
 8019e1e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019e22:	ee16 1a10 	vmov	r1, s12
 8019e26:	4019      	ands	r1, r3
 8019e28:	ee06 1a10 	vmov	s12, r1
 8019e2c:	eeb0 7a46 	vmov.f32	s14, s12
 8019e30:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8019e34:	493c      	ldr	r1, [pc, #240]	@ (8019f28 <__ieee754_powf+0x454>)
 8019e36:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8019e3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e3e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8019f2c <__ieee754_powf+0x458>
 8019e42:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8019f30 <__ieee754_powf+0x45c>
 8019e46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8019e4a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8019f34 <__ieee754_powf+0x460>
 8019e4e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8019e52:	ed91 7a00 	vldr	s14, [r1]
 8019e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019e5a:	ee07 2a10 	vmov	s14, r2
 8019e5e:	eef0 6a67 	vmov.f32	s13, s15
 8019e62:	4a35      	ldr	r2, [pc, #212]	@ (8019f38 <__ieee754_powf+0x464>)
 8019e64:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019e68:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8019e6c:	ed92 5a00 	vldr	s10, [r2]
 8019e70:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019e74:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019e78:	ee76 6a87 	vadd.f32	s13, s13, s14
 8019e7c:	ee16 2a90 	vmov	r2, s13
 8019e80:	4013      	ands	r3, r2
 8019e82:	ee06 3a90 	vmov	s13, r3
 8019e86:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8019e8a:	ee37 7a45 	vsub.f32	s14, s14, s10
 8019e8e:	eea6 7a65 	vfms.f32	s14, s12, s11
 8019e92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019e96:	e70f      	b.n	8019cb8 <__ieee754_powf+0x1e4>
 8019e98:	2601      	movs	r6, #1
 8019e9a:	e75d      	b.n	8019d58 <__ieee754_powf+0x284>
 8019e9c:	d152      	bne.n	8019f44 <__ieee754_powf+0x470>
 8019e9e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8019f3c <__ieee754_powf+0x468>
 8019ea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019ea6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019eaa:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019eb2:	f73f af29 	bgt.w	8019d08 <__ieee754_powf+0x234>
 8019eb6:	2386      	movs	r3, #134	@ 0x86
 8019eb8:	e048      	b.n	8019f4c <__ieee754_powf+0x478>
 8019eba:	4a21      	ldr	r2, [pc, #132]	@ (8019f40 <__ieee754_powf+0x46c>)
 8019ebc:	4293      	cmp	r3, r2
 8019ebe:	d907      	bls.n	8019ed0 <__ieee754_powf+0x3fc>
 8019ec0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ec8:	bf4c      	ite	mi
 8019eca:	2001      	movmi	r0, #1
 8019ecc:	2000      	movpl	r0, #0
 8019ece:	e6c1      	b.n	8019c54 <__ieee754_powf+0x180>
 8019ed0:	d138      	bne.n	8019f44 <__ieee754_powf+0x470>
 8019ed2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019ed6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ede:	dbea      	blt.n	8019eb6 <__ieee754_powf+0x3e2>
 8019ee0:	e7ee      	b.n	8019ec0 <__ieee754_powf+0x3ec>
 8019ee2:	bf00      	nop
 8019ee4:	00000000 	.word	0x00000000
 8019ee8:	3f7ffff3 	.word	0x3f7ffff3
 8019eec:	3f800007 	.word	0x3f800007
 8019ef0:	3eaaaaab 	.word	0x3eaaaaab
 8019ef4:	3fb8aa3b 	.word	0x3fb8aa3b
 8019ef8:	36eca570 	.word	0x36eca570
 8019efc:	3fb8aa00 	.word	0x3fb8aa00
 8019f00:	4b800000 	.word	0x4b800000
 8019f04:	001cc471 	.word	0x001cc471
 8019f08:	005db3d6 	.word	0x005db3d6
 8019f0c:	0801c22c 	.word	0x0801c22c
 8019f10:	fffff000 	.word	0xfffff000
 8019f14:	3e6c3255 	.word	0x3e6c3255
 8019f18:	3e53f142 	.word	0x3e53f142
 8019f1c:	3e8ba305 	.word	0x3e8ba305
 8019f20:	3edb6db7 	.word	0x3edb6db7
 8019f24:	3f19999a 	.word	0x3f19999a
 8019f28:	0801c21c 	.word	0x0801c21c
 8019f2c:	3f76384f 	.word	0x3f76384f
 8019f30:	3f763800 	.word	0x3f763800
 8019f34:	369dc3a0 	.word	0x369dc3a0
 8019f38:	0801c224 	.word	0x0801c224
 8019f3c:	3338aa3c 	.word	0x3338aa3c
 8019f40:	43160000 	.word	0x43160000
 8019f44:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8019f48:	d971      	bls.n	801a02e <__ieee754_powf+0x55a>
 8019f4a:	15db      	asrs	r3, r3, #23
 8019f4c:	3b7e      	subs	r3, #126	@ 0x7e
 8019f4e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8019f52:	4118      	asrs	r0, r3
 8019f54:	4408      	add	r0, r1
 8019f56:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8019f5a:	4a3c      	ldr	r2, [pc, #240]	@ (801a04c <__ieee754_powf+0x578>)
 8019f5c:	3b7f      	subs	r3, #127	@ 0x7f
 8019f5e:	411a      	asrs	r2, r3
 8019f60:	4002      	ands	r2, r0
 8019f62:	ee07 2a10 	vmov	s14, r2
 8019f66:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8019f6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8019f6e:	f1c3 0317 	rsb	r3, r3, #23
 8019f72:	4118      	asrs	r0, r3
 8019f74:	2900      	cmp	r1, #0
 8019f76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f7a:	bfb8      	it	lt
 8019f7c:	4240      	neglt	r0, r0
 8019f7e:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8019f82:	eddf 6a33 	vldr	s13, [pc, #204]	@ 801a050 <__ieee754_powf+0x57c>
 8019f86:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 801a054 <__ieee754_powf+0x580>
 8019f8a:	ee17 3a10 	vmov	r3, s14
 8019f8e:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8019f92:	f023 030f 	bic.w	r3, r3, #15
 8019f96:	ee07 3a10 	vmov	s14, r3
 8019f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8019f9e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019fa2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8019fa6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 801a058 <__ieee754_powf+0x584>
 8019faa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019fae:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8019fb2:	eef0 6a67 	vmov.f32	s13, s15
 8019fb6:	eee7 6a06 	vfma.f32	s13, s14, s12
 8019fba:	eef0 5a66 	vmov.f32	s11, s13
 8019fbe:	eee7 5a46 	vfms.f32	s11, s14, s12
 8019fc2:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019fc6:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8019fca:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 801a05c <__ieee754_powf+0x588>
 8019fce:	eddf 5a24 	vldr	s11, [pc, #144]	@ 801a060 <__ieee754_powf+0x58c>
 8019fd2:	eea7 6a25 	vfma.f32	s12, s14, s11
 8019fd6:	eddf 5a23 	vldr	s11, [pc, #140]	@ 801a064 <__ieee754_powf+0x590>
 8019fda:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019fde:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 801a068 <__ieee754_powf+0x594>
 8019fe2:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019fe6:	eddf 5a21 	vldr	s11, [pc, #132]	@ 801a06c <__ieee754_powf+0x598>
 8019fea:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019fee:	eeb0 6a66 	vmov.f32	s12, s13
 8019ff2:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8019ff6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8019ffa:	ee66 5a86 	vmul.f32	s11, s13, s12
 8019ffe:	ee36 6a47 	vsub.f32	s12, s12, s14
 801a002:	eee6 7aa7 	vfma.f32	s15, s13, s15
 801a006:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801a00a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a00e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a012:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a016:	ee10 3a10 	vmov	r3, s0
 801a01a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801a01e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801a022:	da06      	bge.n	801a032 <__ieee754_powf+0x55e>
 801a024:	f000 fa2a 	bl	801a47c <scalbnf>
 801a028:	ee20 0a08 	vmul.f32	s0, s0, s16
 801a02c:	e56a      	b.n	8019b04 <__ieee754_powf+0x30>
 801a02e:	2000      	movs	r0, #0
 801a030:	e7a5      	b.n	8019f7e <__ieee754_powf+0x4aa>
 801a032:	ee00 3a10 	vmov	s0, r3
 801a036:	e7f7      	b.n	801a028 <__ieee754_powf+0x554>
 801a038:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a03c:	e562      	b.n	8019b04 <__ieee754_powf+0x30>
 801a03e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 801a070 <__ieee754_powf+0x59c>
 801a042:	e55f      	b.n	8019b04 <__ieee754_powf+0x30>
 801a044:	eeb0 0a48 	vmov.f32	s0, s16
 801a048:	e55c      	b.n	8019b04 <__ieee754_powf+0x30>
 801a04a:	bf00      	nop
 801a04c:	ff800000 	.word	0xff800000
 801a050:	3f317218 	.word	0x3f317218
 801a054:	3f317200 	.word	0x3f317200
 801a058:	35bfbe8c 	.word	0x35bfbe8c
 801a05c:	b5ddea0e 	.word	0xb5ddea0e
 801a060:	3331bb4c 	.word	0x3331bb4c
 801a064:	388ab355 	.word	0x388ab355
 801a068:	bb360b61 	.word	0xbb360b61
 801a06c:	3e2aaaab 	.word	0x3e2aaaab
 801a070:	00000000 	.word	0x00000000

0801a074 <__ieee754_rem_pio2f>:
 801a074:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a076:	ee10 6a10 	vmov	r6, s0
 801a07a:	4b88      	ldr	r3, [pc, #544]	@ (801a29c <__ieee754_rem_pio2f+0x228>)
 801a07c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 801a080:	429d      	cmp	r5, r3
 801a082:	b087      	sub	sp, #28
 801a084:	4604      	mov	r4, r0
 801a086:	d805      	bhi.n	801a094 <__ieee754_rem_pio2f+0x20>
 801a088:	2300      	movs	r3, #0
 801a08a:	ed80 0a00 	vstr	s0, [r0]
 801a08e:	6043      	str	r3, [r0, #4]
 801a090:	2000      	movs	r0, #0
 801a092:	e022      	b.n	801a0da <__ieee754_rem_pio2f+0x66>
 801a094:	4b82      	ldr	r3, [pc, #520]	@ (801a2a0 <__ieee754_rem_pio2f+0x22c>)
 801a096:	429d      	cmp	r5, r3
 801a098:	d83a      	bhi.n	801a110 <__ieee754_rem_pio2f+0x9c>
 801a09a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a09e:	2e00      	cmp	r6, #0
 801a0a0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 801a2a4 <__ieee754_rem_pio2f+0x230>
 801a0a4:	4a80      	ldr	r2, [pc, #512]	@ (801a2a8 <__ieee754_rem_pio2f+0x234>)
 801a0a6:	f023 030f 	bic.w	r3, r3, #15
 801a0aa:	dd18      	ble.n	801a0de <__ieee754_rem_pio2f+0x6a>
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	ee70 7a47 	vsub.f32	s15, s0, s14
 801a0b2:	bf09      	itett	eq
 801a0b4:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801a2ac <__ieee754_rem_pio2f+0x238>
 801a0b8:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 801a2b0 <__ieee754_rem_pio2f+0x23c>
 801a0bc:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 801a2b4 <__ieee754_rem_pio2f+0x240>
 801a0c0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801a0c4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 801a0c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0cc:	ed80 7a00 	vstr	s14, [r0]
 801a0d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a0d4:	edc0 7a01 	vstr	s15, [r0, #4]
 801a0d8:	2001      	movs	r0, #1
 801a0da:	b007      	add	sp, #28
 801a0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0de:	4293      	cmp	r3, r2
 801a0e0:	ee70 7a07 	vadd.f32	s15, s0, s14
 801a0e4:	bf09      	itett	eq
 801a0e6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801a2ac <__ieee754_rem_pio2f+0x238>
 801a0ea:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 801a2b0 <__ieee754_rem_pio2f+0x23c>
 801a0ee:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 801a2b4 <__ieee754_rem_pio2f+0x240>
 801a0f2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801a0f6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801a0fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a0fe:	ed80 7a00 	vstr	s14, [r0]
 801a102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801a106:	edc0 7a01 	vstr	s15, [r0, #4]
 801a10a:	f04f 30ff 	mov.w	r0, #4294967295
 801a10e:	e7e4      	b.n	801a0da <__ieee754_rem_pio2f+0x66>
 801a110:	4b69      	ldr	r3, [pc, #420]	@ (801a2b8 <__ieee754_rem_pio2f+0x244>)
 801a112:	429d      	cmp	r5, r3
 801a114:	d873      	bhi.n	801a1fe <__ieee754_rem_pio2f+0x18a>
 801a116:	f7fe fe51 	bl	8018dbc <fabsf>
 801a11a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801a2bc <__ieee754_rem_pio2f+0x248>
 801a11e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a122:	eee0 7a07 	vfma.f32	s15, s0, s14
 801a126:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a12a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801a12e:	ee17 0a90 	vmov	r0, s15
 801a132:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a2a4 <__ieee754_rem_pio2f+0x230>
 801a136:	eea7 0a67 	vfms.f32	s0, s14, s15
 801a13a:	281f      	cmp	r0, #31
 801a13c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 801a2b0 <__ieee754_rem_pio2f+0x23c>
 801a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 801a144:	eeb1 6a47 	vneg.f32	s12, s14
 801a148:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a14c:	ee16 1a90 	vmov	r1, s13
 801a150:	dc09      	bgt.n	801a166 <__ieee754_rem_pio2f+0xf2>
 801a152:	4a5b      	ldr	r2, [pc, #364]	@ (801a2c0 <__ieee754_rem_pio2f+0x24c>)
 801a154:	1e47      	subs	r7, r0, #1
 801a156:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801a15a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801a15e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 801a162:	4293      	cmp	r3, r2
 801a164:	d107      	bne.n	801a176 <__ieee754_rem_pio2f+0x102>
 801a166:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801a16a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801a16e:	2a08      	cmp	r2, #8
 801a170:	ea4f 53e5 	mov.w	r3, r5, asr #23
 801a174:	dc14      	bgt.n	801a1a0 <__ieee754_rem_pio2f+0x12c>
 801a176:	6021      	str	r1, [r4, #0]
 801a178:	ed94 7a00 	vldr	s14, [r4]
 801a17c:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a180:	2e00      	cmp	r6, #0
 801a182:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a186:	ed84 0a01 	vstr	s0, [r4, #4]
 801a18a:	daa6      	bge.n	801a0da <__ieee754_rem_pio2f+0x66>
 801a18c:	eeb1 7a47 	vneg.f32	s14, s14
 801a190:	eeb1 0a40 	vneg.f32	s0, s0
 801a194:	ed84 7a00 	vstr	s14, [r4]
 801a198:	ed84 0a01 	vstr	s0, [r4, #4]
 801a19c:	4240      	negs	r0, r0
 801a19e:	e79c      	b.n	801a0da <__ieee754_rem_pio2f+0x66>
 801a1a0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801a2ac <__ieee754_rem_pio2f+0x238>
 801a1a4:	eef0 6a40 	vmov.f32	s13, s0
 801a1a8:	eee6 6a25 	vfma.f32	s13, s12, s11
 801a1ac:	ee70 7a66 	vsub.f32	s15, s0, s13
 801a1b0:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a1b4:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801a2b4 <__ieee754_rem_pio2f+0x240>
 801a1b8:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801a1bc:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801a1c0:	ee15 2a90 	vmov	r2, s11
 801a1c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801a1c8:	1a5b      	subs	r3, r3, r1
 801a1ca:	2b19      	cmp	r3, #25
 801a1cc:	dc04      	bgt.n	801a1d8 <__ieee754_rem_pio2f+0x164>
 801a1ce:	edc4 5a00 	vstr	s11, [r4]
 801a1d2:	eeb0 0a66 	vmov.f32	s0, s13
 801a1d6:	e7cf      	b.n	801a178 <__ieee754_rem_pio2f+0x104>
 801a1d8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 801a2c4 <__ieee754_rem_pio2f+0x250>
 801a1dc:	eeb0 0a66 	vmov.f32	s0, s13
 801a1e0:	eea6 0a25 	vfma.f32	s0, s12, s11
 801a1e4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801a1e8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 801a2c8 <__ieee754_rem_pio2f+0x254>
 801a1ec:	eee6 7a25 	vfma.f32	s15, s12, s11
 801a1f0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801a1f4:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a1f8:	ed84 7a00 	vstr	s14, [r4]
 801a1fc:	e7bc      	b.n	801a178 <__ieee754_rem_pio2f+0x104>
 801a1fe:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801a202:	d306      	bcc.n	801a212 <__ieee754_rem_pio2f+0x19e>
 801a204:	ee70 7a40 	vsub.f32	s15, s0, s0
 801a208:	edc0 7a01 	vstr	s15, [r0, #4]
 801a20c:	edc0 7a00 	vstr	s15, [r0]
 801a210:	e73e      	b.n	801a090 <__ieee754_rem_pio2f+0x1c>
 801a212:	15ea      	asrs	r2, r5, #23
 801a214:	3a86      	subs	r2, #134	@ 0x86
 801a216:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801a21a:	ee07 3a90 	vmov	s15, r3
 801a21e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a222:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 801a2cc <__ieee754_rem_pio2f+0x258>
 801a226:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a22a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a22e:	ed8d 7a03 	vstr	s14, [sp, #12]
 801a232:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a236:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801a23a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801a23e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a242:	ed8d 7a04 	vstr	s14, [sp, #16]
 801a246:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801a24a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801a24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a252:	edcd 7a05 	vstr	s15, [sp, #20]
 801a256:	d11e      	bne.n	801a296 <__ieee754_rem_pio2f+0x222>
 801a258:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801a25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a260:	bf0c      	ite	eq
 801a262:	2301      	moveq	r3, #1
 801a264:	2302      	movne	r3, #2
 801a266:	491a      	ldr	r1, [pc, #104]	@ (801a2d0 <__ieee754_rem_pio2f+0x25c>)
 801a268:	9101      	str	r1, [sp, #4]
 801a26a:	2102      	movs	r1, #2
 801a26c:	9100      	str	r1, [sp, #0]
 801a26e:	a803      	add	r0, sp, #12
 801a270:	4621      	mov	r1, r4
 801a272:	f000 f98f 	bl	801a594 <__kernel_rem_pio2f>
 801a276:	2e00      	cmp	r6, #0
 801a278:	f6bf af2f 	bge.w	801a0da <__ieee754_rem_pio2f+0x66>
 801a27c:	edd4 7a00 	vldr	s15, [r4]
 801a280:	eef1 7a67 	vneg.f32	s15, s15
 801a284:	edc4 7a00 	vstr	s15, [r4]
 801a288:	edd4 7a01 	vldr	s15, [r4, #4]
 801a28c:	eef1 7a67 	vneg.f32	s15, s15
 801a290:	edc4 7a01 	vstr	s15, [r4, #4]
 801a294:	e782      	b.n	801a19c <__ieee754_rem_pio2f+0x128>
 801a296:	2303      	movs	r3, #3
 801a298:	e7e5      	b.n	801a266 <__ieee754_rem_pio2f+0x1f2>
 801a29a:	bf00      	nop
 801a29c:	3f490fd8 	.word	0x3f490fd8
 801a2a0:	4016cbe3 	.word	0x4016cbe3
 801a2a4:	3fc90f80 	.word	0x3fc90f80
 801a2a8:	3fc90fd0 	.word	0x3fc90fd0
 801a2ac:	37354400 	.word	0x37354400
 801a2b0:	37354443 	.word	0x37354443
 801a2b4:	2e85a308 	.word	0x2e85a308
 801a2b8:	43490f80 	.word	0x43490f80
 801a2bc:	3f22f984 	.word	0x3f22f984
 801a2c0:	0801c234 	.word	0x0801c234
 801a2c4:	2e85a300 	.word	0x2e85a300
 801a2c8:	248d3132 	.word	0x248d3132
 801a2cc:	43800000 	.word	0x43800000
 801a2d0:	0801c2b4 	.word	0x0801c2b4

0801a2d4 <atanf>:
 801a2d4:	b538      	push	{r3, r4, r5, lr}
 801a2d6:	ee10 5a10 	vmov	r5, s0
 801a2da:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801a2de:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801a2e2:	eef0 7a40 	vmov.f32	s15, s0
 801a2e6:	d310      	bcc.n	801a30a <atanf+0x36>
 801a2e8:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 801a2ec:	d904      	bls.n	801a2f8 <atanf+0x24>
 801a2ee:	ee70 7a00 	vadd.f32	s15, s0, s0
 801a2f2:	eeb0 0a67 	vmov.f32	s0, s15
 801a2f6:	bd38      	pop	{r3, r4, r5, pc}
 801a2f8:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801a430 <atanf+0x15c>
 801a2fc:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801a434 <atanf+0x160>
 801a300:	2d00      	cmp	r5, #0
 801a302:	bfc8      	it	gt
 801a304:	eef0 7a47 	vmovgt.f32	s15, s14
 801a308:	e7f3      	b.n	801a2f2 <atanf+0x1e>
 801a30a:	4b4b      	ldr	r3, [pc, #300]	@ (801a438 <atanf+0x164>)
 801a30c:	429c      	cmp	r4, r3
 801a30e:	d810      	bhi.n	801a332 <atanf+0x5e>
 801a310:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801a314:	d20a      	bcs.n	801a32c <atanf+0x58>
 801a316:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 801a43c <atanf+0x168>
 801a31a:	ee30 7a07 	vadd.f32	s14, s0, s14
 801a31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801a322:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801a326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a32a:	dce2      	bgt.n	801a2f2 <atanf+0x1e>
 801a32c:	f04f 33ff 	mov.w	r3, #4294967295
 801a330:	e013      	b.n	801a35a <atanf+0x86>
 801a332:	f7fe fd43 	bl	8018dbc <fabsf>
 801a336:	4b42      	ldr	r3, [pc, #264]	@ (801a440 <atanf+0x16c>)
 801a338:	429c      	cmp	r4, r3
 801a33a:	d84f      	bhi.n	801a3dc <atanf+0x108>
 801a33c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801a340:	429c      	cmp	r4, r3
 801a342:	d841      	bhi.n	801a3c8 <atanf+0xf4>
 801a344:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801a348:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a34c:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a350:	2300      	movs	r3, #0
 801a352:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a356:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a35a:	1c5a      	adds	r2, r3, #1
 801a35c:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801a360:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 801a444 <atanf+0x170>
 801a364:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801a448 <atanf+0x174>
 801a368:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 801a44c <atanf+0x178>
 801a36c:	ee66 6a06 	vmul.f32	s13, s12, s12
 801a370:	eee6 5a87 	vfma.f32	s11, s13, s14
 801a374:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801a450 <atanf+0x17c>
 801a378:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a37c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801a454 <atanf+0x180>
 801a380:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a384:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801a458 <atanf+0x184>
 801a388:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a38c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801a45c <atanf+0x188>
 801a390:	eee7 5a26 	vfma.f32	s11, s14, s13
 801a394:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801a460 <atanf+0x18c>
 801a398:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a39c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801a464 <atanf+0x190>
 801a3a0:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a3a4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801a468 <atanf+0x194>
 801a3a8:	eea7 5a26 	vfma.f32	s10, s14, s13
 801a3ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 801a46c <atanf+0x198>
 801a3b0:	eea5 7a26 	vfma.f32	s14, s10, s13
 801a3b4:	ee27 7a26 	vmul.f32	s14, s14, s13
 801a3b8:	eea5 7a86 	vfma.f32	s14, s11, s12
 801a3bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 801a3c0:	d121      	bne.n	801a406 <atanf+0x132>
 801a3c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a3c6:	e794      	b.n	801a2f2 <atanf+0x1e>
 801a3c8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801a3cc:	ee30 7a67 	vsub.f32	s14, s0, s15
 801a3d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801a3d4:	2301      	movs	r3, #1
 801a3d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a3da:	e7be      	b.n	801a35a <atanf+0x86>
 801a3dc:	4b24      	ldr	r3, [pc, #144]	@ (801a470 <atanf+0x19c>)
 801a3de:	429c      	cmp	r4, r3
 801a3e0:	d80b      	bhi.n	801a3fa <atanf+0x126>
 801a3e2:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801a3e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a3ea:	eea0 7a27 	vfma.f32	s14, s0, s15
 801a3ee:	2302      	movs	r3, #2
 801a3f0:	ee70 6a67 	vsub.f32	s13, s0, s15
 801a3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801a3f8:	e7af      	b.n	801a35a <atanf+0x86>
 801a3fa:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801a3fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a402:	2303      	movs	r3, #3
 801a404:	e7a9      	b.n	801a35a <atanf+0x86>
 801a406:	4a1b      	ldr	r2, [pc, #108]	@ (801a474 <atanf+0x1a0>)
 801a408:	491b      	ldr	r1, [pc, #108]	@ (801a478 <atanf+0x1a4>)
 801a40a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a40e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801a412:	edd3 6a00 	vldr	s13, [r3]
 801a416:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a41a:	2d00      	cmp	r5, #0
 801a41c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801a420:	edd2 7a00 	vldr	s15, [r2]
 801a424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a428:	bfb8      	it	lt
 801a42a:	eef1 7a67 	vneglt.f32	s15, s15
 801a42e:	e760      	b.n	801a2f2 <atanf+0x1e>
 801a430:	bfc90fdb 	.word	0xbfc90fdb
 801a434:	3fc90fdb 	.word	0x3fc90fdb
 801a438:	3edfffff 	.word	0x3edfffff
 801a43c:	7149f2ca 	.word	0x7149f2ca
 801a440:	3f97ffff 	.word	0x3f97ffff
 801a444:	3c8569d7 	.word	0x3c8569d7
 801a448:	3d4bda59 	.word	0x3d4bda59
 801a44c:	bd6ef16b 	.word	0xbd6ef16b
 801a450:	3d886b35 	.word	0x3d886b35
 801a454:	3dba2e6e 	.word	0x3dba2e6e
 801a458:	3e124925 	.word	0x3e124925
 801a45c:	3eaaaaab 	.word	0x3eaaaaab
 801a460:	bd15a221 	.word	0xbd15a221
 801a464:	bd9d8795 	.word	0xbd9d8795
 801a468:	bde38e38 	.word	0xbde38e38
 801a46c:	be4ccccd 	.word	0xbe4ccccd
 801a470:	401bffff 	.word	0x401bffff
 801a474:	0801c5dc 	.word	0x0801c5dc
 801a478:	0801c5cc 	.word	0x0801c5cc

0801a47c <scalbnf>:
 801a47c:	ee10 3a10 	vmov	r3, s0
 801a480:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 801a484:	d02b      	beq.n	801a4de <scalbnf+0x62>
 801a486:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801a48a:	d302      	bcc.n	801a492 <scalbnf+0x16>
 801a48c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a490:	4770      	bx	lr
 801a492:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 801a496:	d123      	bne.n	801a4e0 <scalbnf+0x64>
 801a498:	4b24      	ldr	r3, [pc, #144]	@ (801a52c <scalbnf+0xb0>)
 801a49a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 801a530 <scalbnf+0xb4>
 801a49e:	4298      	cmp	r0, r3
 801a4a0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801a4a4:	db17      	blt.n	801a4d6 <scalbnf+0x5a>
 801a4a6:	ee10 3a10 	vmov	r3, s0
 801a4aa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801a4ae:	3a19      	subs	r2, #25
 801a4b0:	f24c 3150 	movw	r1, #50000	@ 0xc350
 801a4b4:	4288      	cmp	r0, r1
 801a4b6:	dd15      	ble.n	801a4e4 <scalbnf+0x68>
 801a4b8:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 801a534 <scalbnf+0xb8>
 801a4bc:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801a538 <scalbnf+0xbc>
 801a4c0:	ee10 3a10 	vmov	r3, s0
 801a4c4:	eeb0 7a67 	vmov.f32	s14, s15
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	bfb8      	it	lt
 801a4cc:	eef0 7a66 	vmovlt.f32	s15, s13
 801a4d0:	ee27 0a87 	vmul.f32	s0, s15, s14
 801a4d4:	4770      	bx	lr
 801a4d6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a53c <scalbnf+0xc0>
 801a4da:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a4de:	4770      	bx	lr
 801a4e0:	0dd2      	lsrs	r2, r2, #23
 801a4e2:	e7e5      	b.n	801a4b0 <scalbnf+0x34>
 801a4e4:	4410      	add	r0, r2
 801a4e6:	28fe      	cmp	r0, #254	@ 0xfe
 801a4e8:	dce6      	bgt.n	801a4b8 <scalbnf+0x3c>
 801a4ea:	2800      	cmp	r0, #0
 801a4ec:	dd06      	ble.n	801a4fc <scalbnf+0x80>
 801a4ee:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a4f2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a4f6:	ee00 3a10 	vmov	s0, r3
 801a4fa:	4770      	bx	lr
 801a4fc:	f110 0f16 	cmn.w	r0, #22
 801a500:	da09      	bge.n	801a516 <scalbnf+0x9a>
 801a502:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 801a53c <scalbnf+0xc0>
 801a506:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 801a540 <scalbnf+0xc4>
 801a50a:	ee10 3a10 	vmov	r3, s0
 801a50e:	eeb0 7a67 	vmov.f32	s14, s15
 801a512:	2b00      	cmp	r3, #0
 801a514:	e7d9      	b.n	801a4ca <scalbnf+0x4e>
 801a516:	3019      	adds	r0, #25
 801a518:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 801a51c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801a520:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 801a544 <scalbnf+0xc8>
 801a524:	ee07 3a90 	vmov	s15, r3
 801a528:	e7d7      	b.n	801a4da <scalbnf+0x5e>
 801a52a:	bf00      	nop
 801a52c:	ffff3cb0 	.word	0xffff3cb0
 801a530:	4c000000 	.word	0x4c000000
 801a534:	7149f2ca 	.word	0x7149f2ca
 801a538:	f149f2ca 	.word	0xf149f2ca
 801a53c:	0da24260 	.word	0x0da24260
 801a540:	8da24260 	.word	0x8da24260
 801a544:	33000000 	.word	0x33000000

0801a548 <with_errnof>:
 801a548:	b510      	push	{r4, lr}
 801a54a:	ed2d 8b02 	vpush	{d8}
 801a54e:	eeb0 8a40 	vmov.f32	s16, s0
 801a552:	4604      	mov	r4, r0
 801a554:	f7fe fa82 	bl	8018a5c <__errno>
 801a558:	eeb0 0a48 	vmov.f32	s0, s16
 801a55c:	ecbd 8b02 	vpop	{d8}
 801a560:	6004      	str	r4, [r0, #0]
 801a562:	bd10      	pop	{r4, pc}

0801a564 <xflowf>:
 801a564:	b130      	cbz	r0, 801a574 <xflowf+0x10>
 801a566:	eef1 7a40 	vneg.f32	s15, s0
 801a56a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801a56e:	2022      	movs	r0, #34	@ 0x22
 801a570:	f7ff bfea 	b.w	801a548 <with_errnof>
 801a574:	eef0 7a40 	vmov.f32	s15, s0
 801a578:	e7f7      	b.n	801a56a <xflowf+0x6>
	...

0801a57c <__math_uflowf>:
 801a57c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a584 <__math_uflowf+0x8>
 801a580:	f7ff bff0 	b.w	801a564 <xflowf>
 801a584:	10000000 	.word	0x10000000

0801a588 <__math_oflowf>:
 801a588:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801a590 <__math_oflowf+0x8>
 801a58c:	f7ff bfea 	b.w	801a564 <xflowf>
 801a590:	70000000 	.word	0x70000000

0801a594 <__kernel_rem_pio2f>:
 801a594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a598:	ed2d 8b04 	vpush	{d8-d9}
 801a59c:	b0d9      	sub	sp, #356	@ 0x164
 801a59e:	4690      	mov	r8, r2
 801a5a0:	9001      	str	r0, [sp, #4]
 801a5a2:	4ab9      	ldr	r2, [pc, #740]	@ (801a888 <__kernel_rem_pio2f+0x2f4>)
 801a5a4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 801a5a6:	f118 0f04 	cmn.w	r8, #4
 801a5aa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 801a5ae:	460f      	mov	r7, r1
 801a5b0:	f103 3bff 	add.w	fp, r3, #4294967295
 801a5b4:	db27      	blt.n	801a606 <__kernel_rem_pio2f+0x72>
 801a5b6:	f1b8 0203 	subs.w	r2, r8, #3
 801a5ba:	bf48      	it	mi
 801a5bc:	f108 0204 	addmi.w	r2, r8, #4
 801a5c0:	10d2      	asrs	r2, r2, #3
 801a5c2:	1c55      	adds	r5, r2, #1
 801a5c4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a5c6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a5ca:	00e8      	lsls	r0, r5, #3
 801a5cc:	eba2 060b 	sub.w	r6, r2, fp
 801a5d0:	9002      	str	r0, [sp, #8]
 801a5d2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 801a5d6:	eb0a 0c0b 	add.w	ip, sl, fp
 801a5da:	ac1c      	add	r4, sp, #112	@ 0x70
 801a5dc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 801a5e0:	2000      	movs	r0, #0
 801a5e2:	4560      	cmp	r0, ip
 801a5e4:	dd11      	ble.n	801a60a <__kernel_rem_pio2f+0x76>
 801a5e6:	a91c      	add	r1, sp, #112	@ 0x70
 801a5e8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 801a5ec:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 801a5f0:	f04f 0c00 	mov.w	ip, #0
 801a5f4:	45d4      	cmp	ip, sl
 801a5f6:	dc27      	bgt.n	801a648 <__kernel_rem_pio2f+0xb4>
 801a5f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a5fc:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a600:	4606      	mov	r6, r0
 801a602:	2400      	movs	r4, #0
 801a604:	e016      	b.n	801a634 <__kernel_rem_pio2f+0xa0>
 801a606:	2200      	movs	r2, #0
 801a608:	e7db      	b.n	801a5c2 <__kernel_rem_pio2f+0x2e>
 801a60a:	42c6      	cmn	r6, r0
 801a60c:	bf5d      	ittte	pl
 801a60e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 801a612:	ee07 1a90 	vmovpl	s15, r1
 801a616:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a61a:	eef0 7a47 	vmovmi.f32	s15, s14
 801a61e:	ece4 7a01 	vstmia	r4!, {s15}
 801a622:	3001      	adds	r0, #1
 801a624:	e7dd      	b.n	801a5e2 <__kernel_rem_pio2f+0x4e>
 801a626:	ecfe 6a01 	vldmia	lr!, {s13}
 801a62a:	ed96 7a00 	vldr	s14, [r6]
 801a62e:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a632:	3401      	adds	r4, #1
 801a634:	455c      	cmp	r4, fp
 801a636:	f1a6 0604 	sub.w	r6, r6, #4
 801a63a:	ddf4      	ble.n	801a626 <__kernel_rem_pio2f+0x92>
 801a63c:	ece9 7a01 	vstmia	r9!, {s15}
 801a640:	f10c 0c01 	add.w	ip, ip, #1
 801a644:	3004      	adds	r0, #4
 801a646:	e7d5      	b.n	801a5f4 <__kernel_rem_pio2f+0x60>
 801a648:	a908      	add	r1, sp, #32
 801a64a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a64e:	9104      	str	r1, [sp, #16]
 801a650:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801a652:	eddf 8a90 	vldr	s17, [pc, #576]	@ 801a894 <__kernel_rem_pio2f+0x300>
 801a656:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 801a890 <__kernel_rem_pio2f+0x2fc>
 801a65a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a65e:	9203      	str	r2, [sp, #12]
 801a660:	4654      	mov	r4, sl
 801a662:	00a2      	lsls	r2, r4, #2
 801a664:	9205      	str	r2, [sp, #20]
 801a666:	aa58      	add	r2, sp, #352	@ 0x160
 801a668:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 801a66c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801a670:	a944      	add	r1, sp, #272	@ 0x110
 801a672:	aa08      	add	r2, sp, #32
 801a674:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 801a678:	4694      	mov	ip, r2
 801a67a:	4626      	mov	r6, r4
 801a67c:	2e00      	cmp	r6, #0
 801a67e:	f1a0 0004 	sub.w	r0, r0, #4
 801a682:	dc4c      	bgt.n	801a71e <__kernel_rem_pio2f+0x18a>
 801a684:	4628      	mov	r0, r5
 801a686:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a68a:	f7ff fef7 	bl	801a47c <scalbnf>
 801a68e:	eeb0 8a40 	vmov.f32	s16, s0
 801a692:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801a696:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a69a:	f000 f9ed 	bl	801aa78 <floorf>
 801a69e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 801a6a2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a6a6:	2d00      	cmp	r5, #0
 801a6a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a6ac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a6b0:	ee17 9a90 	vmov	r9, s15
 801a6b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a6b8:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a6bc:	dd41      	ble.n	801a742 <__kernel_rem_pio2f+0x1ae>
 801a6be:	f104 3cff 	add.w	ip, r4, #4294967295
 801a6c2:	a908      	add	r1, sp, #32
 801a6c4:	f1c5 0e08 	rsb	lr, r5, #8
 801a6c8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 801a6cc:	fa46 f00e 	asr.w	r0, r6, lr
 801a6d0:	4481      	add	r9, r0
 801a6d2:	fa00 f00e 	lsl.w	r0, r0, lr
 801a6d6:	1a36      	subs	r6, r6, r0
 801a6d8:	f1c5 0007 	rsb	r0, r5, #7
 801a6dc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 801a6e0:	4106      	asrs	r6, r0
 801a6e2:	2e00      	cmp	r6, #0
 801a6e4:	dd3c      	ble.n	801a760 <__kernel_rem_pio2f+0x1cc>
 801a6e6:	f04f 0e00 	mov.w	lr, #0
 801a6ea:	f109 0901 	add.w	r9, r9, #1
 801a6ee:	4670      	mov	r0, lr
 801a6f0:	4574      	cmp	r4, lr
 801a6f2:	dc68      	bgt.n	801a7c6 <__kernel_rem_pio2f+0x232>
 801a6f4:	2d00      	cmp	r5, #0
 801a6f6:	dd03      	ble.n	801a700 <__kernel_rem_pio2f+0x16c>
 801a6f8:	2d01      	cmp	r5, #1
 801a6fa:	d074      	beq.n	801a7e6 <__kernel_rem_pio2f+0x252>
 801a6fc:	2d02      	cmp	r5, #2
 801a6fe:	d07d      	beq.n	801a7fc <__kernel_rem_pio2f+0x268>
 801a700:	2e02      	cmp	r6, #2
 801a702:	d12d      	bne.n	801a760 <__kernel_rem_pio2f+0x1cc>
 801a704:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a708:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a70c:	b340      	cbz	r0, 801a760 <__kernel_rem_pio2f+0x1cc>
 801a70e:	4628      	mov	r0, r5
 801a710:	9306      	str	r3, [sp, #24]
 801a712:	f7ff feb3 	bl	801a47c <scalbnf>
 801a716:	9b06      	ldr	r3, [sp, #24]
 801a718:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a71c:	e020      	b.n	801a760 <__kernel_rem_pio2f+0x1cc>
 801a71e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a722:	3e01      	subs	r6, #1
 801a724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a72c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a730:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a734:	ecac 0a01 	vstmia	ip!, {s0}
 801a738:	ed90 0a00 	vldr	s0, [r0]
 801a73c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a740:	e79c      	b.n	801a67c <__kernel_rem_pio2f+0xe8>
 801a742:	d105      	bne.n	801a750 <__kernel_rem_pio2f+0x1bc>
 801a744:	1e60      	subs	r0, r4, #1
 801a746:	a908      	add	r1, sp, #32
 801a748:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 801a74c:	11f6      	asrs	r6, r6, #7
 801a74e:	e7c8      	b.n	801a6e2 <__kernel_rem_pio2f+0x14e>
 801a750:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801a754:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a75c:	da31      	bge.n	801a7c2 <__kernel_rem_pio2f+0x22e>
 801a75e:	2600      	movs	r6, #0
 801a760:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a768:	f040 8098 	bne.w	801a89c <__kernel_rem_pio2f+0x308>
 801a76c:	1e60      	subs	r0, r4, #1
 801a76e:	2200      	movs	r2, #0
 801a770:	4550      	cmp	r0, sl
 801a772:	da4b      	bge.n	801a80c <__kernel_rem_pio2f+0x278>
 801a774:	2a00      	cmp	r2, #0
 801a776:	d065      	beq.n	801a844 <__kernel_rem_pio2f+0x2b0>
 801a778:	3c01      	subs	r4, #1
 801a77a:	ab08      	add	r3, sp, #32
 801a77c:	3d08      	subs	r5, #8
 801a77e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d0f8      	beq.n	801a778 <__kernel_rem_pio2f+0x1e4>
 801a786:	4628      	mov	r0, r5
 801a788:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801a78c:	f7ff fe76 	bl	801a47c <scalbnf>
 801a790:	1c63      	adds	r3, r4, #1
 801a792:	aa44      	add	r2, sp, #272	@ 0x110
 801a794:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801a894 <__kernel_rem_pio2f+0x300>
 801a798:	0099      	lsls	r1, r3, #2
 801a79a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801a79e:	4623      	mov	r3, r4
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	f280 80a9 	bge.w	801a8f8 <__kernel_rem_pio2f+0x364>
 801a7a6:	4623      	mov	r3, r4
 801a7a8:	2b00      	cmp	r3, #0
 801a7aa:	f2c0 80c7 	blt.w	801a93c <__kernel_rem_pio2f+0x3a8>
 801a7ae:	aa44      	add	r2, sp, #272	@ 0x110
 801a7b0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801a7b4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 801a88c <__kernel_rem_pio2f+0x2f8>
 801a7b8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a7bc:	2000      	movs	r0, #0
 801a7be:	1ae2      	subs	r2, r4, r3
 801a7c0:	e0b1      	b.n	801a926 <__kernel_rem_pio2f+0x392>
 801a7c2:	2602      	movs	r6, #2
 801a7c4:	e78f      	b.n	801a6e6 <__kernel_rem_pio2f+0x152>
 801a7c6:	f852 1b04 	ldr.w	r1, [r2], #4
 801a7ca:	b948      	cbnz	r0, 801a7e0 <__kernel_rem_pio2f+0x24c>
 801a7cc:	b121      	cbz	r1, 801a7d8 <__kernel_rem_pio2f+0x244>
 801a7ce:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801a7d2:	f842 1c04 	str.w	r1, [r2, #-4]
 801a7d6:	2101      	movs	r1, #1
 801a7d8:	f10e 0e01 	add.w	lr, lr, #1
 801a7dc:	4608      	mov	r0, r1
 801a7de:	e787      	b.n	801a6f0 <__kernel_rem_pio2f+0x15c>
 801a7e0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 801a7e4:	e7f5      	b.n	801a7d2 <__kernel_rem_pio2f+0x23e>
 801a7e6:	f104 3cff 	add.w	ip, r4, #4294967295
 801a7ea:	aa08      	add	r2, sp, #32
 801a7ec:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a7f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801a7f4:	a908      	add	r1, sp, #32
 801a7f6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a7fa:	e781      	b.n	801a700 <__kernel_rem_pio2f+0x16c>
 801a7fc:	f104 3cff 	add.w	ip, r4, #4294967295
 801a800:	aa08      	add	r2, sp, #32
 801a802:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a806:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801a80a:	e7f3      	b.n	801a7f4 <__kernel_rem_pio2f+0x260>
 801a80c:	a908      	add	r1, sp, #32
 801a80e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801a812:	3801      	subs	r0, #1
 801a814:	430a      	orrs	r2, r1
 801a816:	e7ab      	b.n	801a770 <__kernel_rem_pio2f+0x1dc>
 801a818:	3201      	adds	r2, #1
 801a81a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a81e:	2e00      	cmp	r6, #0
 801a820:	d0fa      	beq.n	801a818 <__kernel_rem_pio2f+0x284>
 801a822:	9905      	ldr	r1, [sp, #20]
 801a824:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 801a828:	eb0d 0001 	add.w	r0, sp, r1
 801a82c:	18e6      	adds	r6, r4, r3
 801a82e:	a91c      	add	r1, sp, #112	@ 0x70
 801a830:	f104 0c01 	add.w	ip, r4, #1
 801a834:	384c      	subs	r0, #76	@ 0x4c
 801a836:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801a83a:	4422      	add	r2, r4
 801a83c:	4562      	cmp	r2, ip
 801a83e:	da04      	bge.n	801a84a <__kernel_rem_pio2f+0x2b6>
 801a840:	4614      	mov	r4, r2
 801a842:	e70e      	b.n	801a662 <__kernel_rem_pio2f+0xce>
 801a844:	9804      	ldr	r0, [sp, #16]
 801a846:	2201      	movs	r2, #1
 801a848:	e7e7      	b.n	801a81a <__kernel_rem_pio2f+0x286>
 801a84a:	9903      	ldr	r1, [sp, #12]
 801a84c:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a850:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801a854:	9105      	str	r1, [sp, #20]
 801a856:	ee07 1a90 	vmov	s15, r1
 801a85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a85e:	2400      	movs	r4, #0
 801a860:	ece6 7a01 	vstmia	r6!, {s15}
 801a864:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a868:	46b1      	mov	r9, r6
 801a86a:	455c      	cmp	r4, fp
 801a86c:	dd04      	ble.n	801a878 <__kernel_rem_pio2f+0x2e4>
 801a86e:	ece0 7a01 	vstmia	r0!, {s15}
 801a872:	f10c 0c01 	add.w	ip, ip, #1
 801a876:	e7e1      	b.n	801a83c <__kernel_rem_pio2f+0x2a8>
 801a878:	ecfe 6a01 	vldmia	lr!, {s13}
 801a87c:	ed39 7a01 	vldmdb	r9!, {s14}
 801a880:	3401      	adds	r4, #1
 801a882:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a886:	e7f0      	b.n	801a86a <__kernel_rem_pio2f+0x2d6>
 801a888:	0801c618 	.word	0x0801c618
 801a88c:	0801c5ec 	.word	0x0801c5ec
 801a890:	43800000 	.word	0x43800000
 801a894:	3b800000 	.word	0x3b800000
 801a898:	00000000 	.word	0x00000000
 801a89c:	9b02      	ldr	r3, [sp, #8]
 801a89e:	eeb0 0a48 	vmov.f32	s0, s16
 801a8a2:	eba3 0008 	sub.w	r0, r3, r8
 801a8a6:	f7ff fde9 	bl	801a47c <scalbnf>
 801a8aa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 801a890 <__kernel_rem_pio2f+0x2fc>
 801a8ae:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8b6:	db19      	blt.n	801a8ec <__kernel_rem_pio2f+0x358>
 801a8b8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801a894 <__kernel_rem_pio2f+0x300>
 801a8bc:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a8c0:	aa08      	add	r2, sp, #32
 801a8c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a8c6:	3508      	adds	r5, #8
 801a8c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a8cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a8d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a8d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a8d8:	ee10 3a10 	vmov	r3, s0
 801a8dc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a8e0:	ee17 3a90 	vmov	r3, s15
 801a8e4:	3401      	adds	r4, #1
 801a8e6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801a8ea:	e74c      	b.n	801a786 <__kernel_rem_pio2f+0x1f2>
 801a8ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a8f0:	aa08      	add	r2, sp, #32
 801a8f2:	ee10 3a10 	vmov	r3, s0
 801a8f6:	e7f6      	b.n	801a8e6 <__kernel_rem_pio2f+0x352>
 801a8f8:	a808      	add	r0, sp, #32
 801a8fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a8fe:	9001      	str	r0, [sp, #4]
 801a900:	ee07 0a90 	vmov	s15, r0
 801a904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a908:	3b01      	subs	r3, #1
 801a90a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801a90e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801a912:	ed62 7a01 	vstmdb	r2!, {s15}
 801a916:	e743      	b.n	801a7a0 <__kernel_rem_pio2f+0x20c>
 801a918:	ecfc 6a01 	vldmia	ip!, {s13}
 801a91c:	ecb5 7a01 	vldmia	r5!, {s14}
 801a920:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a924:	3001      	adds	r0, #1
 801a926:	4550      	cmp	r0, sl
 801a928:	dc01      	bgt.n	801a92e <__kernel_rem_pio2f+0x39a>
 801a92a:	4282      	cmp	r2, r0
 801a92c:	daf4      	bge.n	801a918 <__kernel_rem_pio2f+0x384>
 801a92e:	a858      	add	r0, sp, #352	@ 0x160
 801a930:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801a934:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 801a938:	3b01      	subs	r3, #1
 801a93a:	e735      	b.n	801a7a8 <__kernel_rem_pio2f+0x214>
 801a93c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a93e:	2b02      	cmp	r3, #2
 801a940:	dc09      	bgt.n	801a956 <__kernel_rem_pio2f+0x3c2>
 801a942:	2b00      	cmp	r3, #0
 801a944:	dc2b      	bgt.n	801a99e <__kernel_rem_pio2f+0x40a>
 801a946:	d044      	beq.n	801a9d2 <__kernel_rem_pio2f+0x43e>
 801a948:	f009 0007 	and.w	r0, r9, #7
 801a94c:	b059      	add	sp, #356	@ 0x164
 801a94e:	ecbd 8b04 	vpop	{d8-d9}
 801a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a956:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801a958:	2b03      	cmp	r3, #3
 801a95a:	d1f5      	bne.n	801a948 <__kernel_rem_pio2f+0x3b4>
 801a95c:	aa30      	add	r2, sp, #192	@ 0xc0
 801a95e:	1f0b      	subs	r3, r1, #4
 801a960:	4413      	add	r3, r2
 801a962:	461a      	mov	r2, r3
 801a964:	4620      	mov	r0, r4
 801a966:	2800      	cmp	r0, #0
 801a968:	f1a2 0204 	sub.w	r2, r2, #4
 801a96c:	dc52      	bgt.n	801aa14 <__kernel_rem_pio2f+0x480>
 801a96e:	4622      	mov	r2, r4
 801a970:	2a01      	cmp	r2, #1
 801a972:	f1a3 0304 	sub.w	r3, r3, #4
 801a976:	dc5d      	bgt.n	801aa34 <__kernel_rem_pio2f+0x4a0>
 801a978:	ab30      	add	r3, sp, #192	@ 0xc0
 801a97a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a97e:	440b      	add	r3, r1
 801a980:	2c01      	cmp	r4, #1
 801a982:	dc67      	bgt.n	801aa54 <__kernel_rem_pio2f+0x4c0>
 801a984:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 801a988:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801a98c:	2e00      	cmp	r6, #0
 801a98e:	d167      	bne.n	801aa60 <__kernel_rem_pio2f+0x4cc>
 801a990:	edc7 6a00 	vstr	s13, [r7]
 801a994:	ed87 7a01 	vstr	s14, [r7, #4]
 801a998:	edc7 7a02 	vstr	s15, [r7, #8]
 801a99c:	e7d4      	b.n	801a948 <__kernel_rem_pio2f+0x3b4>
 801a99e:	ab30      	add	r3, sp, #192	@ 0xc0
 801a9a0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a9a4:	440b      	add	r3, r1
 801a9a6:	4622      	mov	r2, r4
 801a9a8:	2a00      	cmp	r2, #0
 801a9aa:	da24      	bge.n	801a9f6 <__kernel_rem_pio2f+0x462>
 801a9ac:	b34e      	cbz	r6, 801aa02 <__kernel_rem_pio2f+0x46e>
 801a9ae:	eef1 7a47 	vneg.f32	s15, s14
 801a9b2:	edc7 7a00 	vstr	s15, [r7]
 801a9b6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801a9ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a9be:	aa31      	add	r2, sp, #196	@ 0xc4
 801a9c0:	2301      	movs	r3, #1
 801a9c2:	429c      	cmp	r4, r3
 801a9c4:	da20      	bge.n	801aa08 <__kernel_rem_pio2f+0x474>
 801a9c6:	b10e      	cbz	r6, 801a9cc <__kernel_rem_pio2f+0x438>
 801a9c8:	eef1 7a67 	vneg.f32	s15, s15
 801a9cc:	edc7 7a01 	vstr	s15, [r7, #4]
 801a9d0:	e7ba      	b.n	801a948 <__kernel_rem_pio2f+0x3b4>
 801a9d2:	ab30      	add	r3, sp, #192	@ 0xc0
 801a9d4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 801a898 <__kernel_rem_pio2f+0x304>
 801a9d8:	440b      	add	r3, r1
 801a9da:	2c00      	cmp	r4, #0
 801a9dc:	da05      	bge.n	801a9ea <__kernel_rem_pio2f+0x456>
 801a9de:	b10e      	cbz	r6, 801a9e4 <__kernel_rem_pio2f+0x450>
 801a9e0:	eef1 7a67 	vneg.f32	s15, s15
 801a9e4:	edc7 7a00 	vstr	s15, [r7]
 801a9e8:	e7ae      	b.n	801a948 <__kernel_rem_pio2f+0x3b4>
 801a9ea:	ed33 7a01 	vldmdb	r3!, {s14}
 801a9ee:	3c01      	subs	r4, #1
 801a9f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a9f4:	e7f1      	b.n	801a9da <__kernel_rem_pio2f+0x446>
 801a9f6:	ed73 7a01 	vldmdb	r3!, {s15}
 801a9fa:	3a01      	subs	r2, #1
 801a9fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aa00:	e7d2      	b.n	801a9a8 <__kernel_rem_pio2f+0x414>
 801aa02:	eef0 7a47 	vmov.f32	s15, s14
 801aa06:	e7d4      	b.n	801a9b2 <__kernel_rem_pio2f+0x41e>
 801aa08:	ecb2 7a01 	vldmia	r2!, {s14}
 801aa0c:	3301      	adds	r3, #1
 801aa0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa12:	e7d6      	b.n	801a9c2 <__kernel_rem_pio2f+0x42e>
 801aa14:	edd2 7a00 	vldr	s15, [r2]
 801aa18:	edd2 6a01 	vldr	s13, [r2, #4]
 801aa1c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aa20:	3801      	subs	r0, #1
 801aa22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa26:	ed82 7a00 	vstr	s14, [r2]
 801aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa2e:	edc2 7a01 	vstr	s15, [r2, #4]
 801aa32:	e798      	b.n	801a966 <__kernel_rem_pio2f+0x3d2>
 801aa34:	edd3 7a00 	vldr	s15, [r3]
 801aa38:	edd3 6a01 	vldr	s13, [r3, #4]
 801aa3c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801aa40:	3a01      	subs	r2, #1
 801aa42:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801aa46:	ed83 7a00 	vstr	s14, [r3]
 801aa4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aa4e:	edc3 7a01 	vstr	s15, [r3, #4]
 801aa52:	e78d      	b.n	801a970 <__kernel_rem_pio2f+0x3dc>
 801aa54:	ed33 7a01 	vldmdb	r3!, {s14}
 801aa58:	3c01      	subs	r4, #1
 801aa5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aa5e:	e78f      	b.n	801a980 <__kernel_rem_pio2f+0x3ec>
 801aa60:	eef1 6a66 	vneg.f32	s13, s13
 801aa64:	eeb1 7a47 	vneg.f32	s14, s14
 801aa68:	edc7 6a00 	vstr	s13, [r7]
 801aa6c:	ed87 7a01 	vstr	s14, [r7, #4]
 801aa70:	eef1 7a67 	vneg.f32	s15, s15
 801aa74:	e790      	b.n	801a998 <__kernel_rem_pio2f+0x404>
 801aa76:	bf00      	nop

0801aa78 <floorf>:
 801aa78:	ee10 3a10 	vmov	r3, s0
 801aa7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801aa80:	3a7f      	subs	r2, #127	@ 0x7f
 801aa82:	2a16      	cmp	r2, #22
 801aa84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801aa88:	dc2b      	bgt.n	801aae2 <floorf+0x6a>
 801aa8a:	2a00      	cmp	r2, #0
 801aa8c:	da12      	bge.n	801aab4 <floorf+0x3c>
 801aa8e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801aaf4 <floorf+0x7c>
 801aa92:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aa96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aa9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa9e:	dd06      	ble.n	801aaae <floorf+0x36>
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	da24      	bge.n	801aaee <floorf+0x76>
 801aaa4:	2900      	cmp	r1, #0
 801aaa6:	4b14      	ldr	r3, [pc, #80]	@ (801aaf8 <floorf+0x80>)
 801aaa8:	bf08      	it	eq
 801aaaa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801aaae:	ee00 3a10 	vmov	s0, r3
 801aab2:	4770      	bx	lr
 801aab4:	4911      	ldr	r1, [pc, #68]	@ (801aafc <floorf+0x84>)
 801aab6:	4111      	asrs	r1, r2
 801aab8:	420b      	tst	r3, r1
 801aaba:	d0fa      	beq.n	801aab2 <floorf+0x3a>
 801aabc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801aaf4 <floorf+0x7c>
 801aac0:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aac4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aacc:	ddef      	ble.n	801aaae <floorf+0x36>
 801aace:	2b00      	cmp	r3, #0
 801aad0:	bfbe      	ittt	lt
 801aad2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801aad6:	fa40 f202 	asrlt.w	r2, r0, r2
 801aada:	189b      	addlt	r3, r3, r2
 801aadc:	ea23 0301 	bic.w	r3, r3, r1
 801aae0:	e7e5      	b.n	801aaae <floorf+0x36>
 801aae2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801aae6:	d3e4      	bcc.n	801aab2 <floorf+0x3a>
 801aae8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aaec:	4770      	bx	lr
 801aaee:	2300      	movs	r3, #0
 801aaf0:	e7dd      	b.n	801aaae <floorf+0x36>
 801aaf2:	bf00      	nop
 801aaf4:	7149f2ca 	.word	0x7149f2ca
 801aaf8:	bf800000 	.word	0xbf800000
 801aafc:	007fffff 	.word	0x007fffff

0801ab00 <_init>:
 801ab00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab02:	bf00      	nop
 801ab04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab06:	bc08      	pop	{r3}
 801ab08:	469e      	mov	lr, r3
 801ab0a:	4770      	bx	lr

0801ab0c <_fini>:
 801ab0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab0e:	bf00      	nop
 801ab10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab12:	bc08      	pop	{r3}
 801ab14:	469e      	mov	lr, r3
 801ab16:	4770      	bx	lr
