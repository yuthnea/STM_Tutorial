
FreeRTOSTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000181d8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001af0  08018368  08018368  00019368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019e58  08019e58  000206cc  2**0
                  CONTENTS
  4 .ARM          00000008  08019e58  08019e58  0001ae58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019e60  08019e60  000206cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019e60  08019e60  0001ae60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019e64  08019e64  0001ae64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08019e68  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .nzds         00000028  200001d0  0801a038  0001b1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ccmram       000046cc  10000000  0801a060  0001c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009f94  200001f8  200001f8  000211f8  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  2000a18c  2000a18c  000211f8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000206cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00040bd4  00000000  00000000  000206fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00009dbe  00000000  00000000  000612d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023b8  00000000  00000000  0006b090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001a20  00000000  00000000  0006d448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a3b0  00000000  00000000  0006ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000379d6  00000000  00000000  00099218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ed286  00000000  00000000  000d0bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000b8  00000000  00000000  001bde74  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000094f8  00000000  00000000  001bdf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000054  00000000  00000000  001c7424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loc    000015c0  00000000  00000000  001c7478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 00000060  00000000  00000000  001c8a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08018350 	.word	0x08018350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08018350 	.word	0x08018350

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_drsub>:
 80001e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e8:	e002      	b.n	80001f0 <__adddf3>
 80001ea:	bf00      	nop

080001ec <__aeabi_dsub>:
 80001ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f0 <__adddf3>:
 80001f0:	b530      	push	{r4, r5, lr}
 80001f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fa:	ea94 0f05 	teq	r4, r5
 80001fe:	bf08      	it	eq
 8000200:	ea90 0f02 	teqeq	r0, r2
 8000204:	bf1f      	itttt	ne
 8000206:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000212:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000216:	f000 80e2 	beq.w	80003de <__adddf3+0x1ee>
 800021a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000222:	bfb8      	it	lt
 8000224:	426d      	neglt	r5, r5
 8000226:	dd0c      	ble.n	8000242 <__adddf3+0x52>
 8000228:	442c      	add	r4, r5
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	ea82 0000 	eor.w	r0, r2, r0
 8000236:	ea83 0101 	eor.w	r1, r3, r1
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	2d36      	cmp	r5, #54	@ 0x36
 8000244:	bf88      	it	hi
 8000246:	bd30      	pophi	{r4, r5, pc}
 8000248:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800024c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000250:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000254:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x70>
 800025a:	4240      	negs	r0, r0
 800025c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000260:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000264:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000268:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800026c:	d002      	beq.n	8000274 <__adddf3+0x84>
 800026e:	4252      	negs	r2, r2
 8000270:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000274:	ea94 0f05 	teq	r4, r5
 8000278:	f000 80a7 	beq.w	80003ca <__adddf3+0x1da>
 800027c:	f1a4 0401 	sub.w	r4, r4, #1
 8000280:	f1d5 0e20 	rsbs	lr, r5, #32
 8000284:	db0d      	blt.n	80002a2 <__adddf3+0xb2>
 8000286:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028a:	fa22 f205 	lsr.w	r2, r2, r5
 800028e:	1880      	adds	r0, r0, r2
 8000290:	f141 0100 	adc.w	r1, r1, #0
 8000294:	fa03 f20e 	lsl.w	r2, r3, lr
 8000298:	1880      	adds	r0, r0, r2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	4159      	adcs	r1, r3
 80002a0:	e00e      	b.n	80002c0 <__adddf3+0xd0>
 80002a2:	f1a5 0520 	sub.w	r5, r5, #32
 80002a6:	f10e 0e20 	add.w	lr, lr, #32
 80002aa:	2a01      	cmp	r2, #1
 80002ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b0:	bf28      	it	cs
 80002b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	18c0      	adds	r0, r0, r3
 80002bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c4:	d507      	bpl.n	80002d6 <__adddf3+0xe6>
 80002c6:	f04f 0e00 	mov.w	lr, #0
 80002ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002da:	d31b      	bcc.n	8000314 <__adddf3+0x124>
 80002dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e0:	d30c      	bcc.n	80002fc <__adddf3+0x10c>
 80002e2:	0849      	lsrs	r1, r1, #1
 80002e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ec:	f104 0401 	add.w	r4, r4, #1
 80002f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f8:	f080 809a 	bcs.w	8000430 <__adddf3+0x240>
 80002fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000300:	bf08      	it	eq
 8000302:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000306:	f150 0000 	adcs.w	r0, r0, #0
 800030a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030e:	ea41 0105 	orr.w	r1, r1, r5
 8000312:	bd30      	pop	{r4, r5, pc}
 8000314:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000318:	4140      	adcs	r0, r0
 800031a:	eb41 0101 	adc.w	r1, r1, r1
 800031e:	3c01      	subs	r4, #1
 8000320:	bf28      	it	cs
 8000322:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000326:	d2e9      	bcs.n	80002fc <__adddf3+0x10c>
 8000328:	f091 0f00 	teq	r1, #0
 800032c:	bf04      	itt	eq
 800032e:	4601      	moveq	r1, r0
 8000330:	2000      	moveq	r0, #0
 8000332:	fab1 f381 	clz	r3, r1
 8000336:	bf08      	it	eq
 8000338:	3320      	addeq	r3, #32
 800033a:	f1a3 030b 	sub.w	r3, r3, #11
 800033e:	f1b3 0220 	subs.w	r2, r3, #32
 8000342:	da0c      	bge.n	800035e <__adddf3+0x16e>
 8000344:	320c      	adds	r2, #12
 8000346:	dd08      	ble.n	800035a <__adddf3+0x16a>
 8000348:	f102 0c14 	add.w	ip, r2, #20
 800034c:	f1c2 020c 	rsb	r2, r2, #12
 8000350:	fa01 f00c 	lsl.w	r0, r1, ip
 8000354:	fa21 f102 	lsr.w	r1, r1, r2
 8000358:	e00c      	b.n	8000374 <__adddf3+0x184>
 800035a:	f102 0214 	add.w	r2, r2, #20
 800035e:	bfd8      	it	le
 8000360:	f1c2 0c20 	rsble	ip, r2, #32
 8000364:	fa01 f102 	lsl.w	r1, r1, r2
 8000368:	fa20 fc0c 	lsr.w	ip, r0, ip
 800036c:	bfdc      	itt	le
 800036e:	ea41 010c 	orrle.w	r1, r1, ip
 8000372:	4090      	lslle	r0, r2
 8000374:	1ae4      	subs	r4, r4, r3
 8000376:	bfa2      	ittt	ge
 8000378:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800037c:	4329      	orrge	r1, r5
 800037e:	bd30      	popge	{r4, r5, pc}
 8000380:	ea6f 0404 	mvn.w	r4, r4
 8000384:	3c1f      	subs	r4, #31
 8000386:	da1c      	bge.n	80003c2 <__adddf3+0x1d2>
 8000388:	340c      	adds	r4, #12
 800038a:	dc0e      	bgt.n	80003aa <__adddf3+0x1ba>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0220 	rsb	r2, r4, #32
 8000394:	fa20 f004 	lsr.w	r0, r0, r4
 8000398:	fa01 f302 	lsl.w	r3, r1, r2
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	fa21 f304 	lsr.w	r3, r1, r4
 80003a4:	ea45 0103 	orr.w	r1, r5, r3
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	f1c4 040c 	rsb	r4, r4, #12
 80003ae:	f1c4 0220 	rsb	r2, r4, #32
 80003b2:	fa20 f002 	lsr.w	r0, r0, r2
 80003b6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ba:	ea40 0003 	orr.w	r0, r0, r3
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	fa21 f004 	lsr.w	r0, r1, r4
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f094 0f00 	teq	r4, #0
 80003ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003d2:	bf06      	itte	eq
 80003d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d8:	3401      	addeq	r4, #1
 80003da:	3d01      	subne	r5, #1
 80003dc:	e74e      	b.n	800027c <__adddf3+0x8c>
 80003de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e2:	bf18      	it	ne
 80003e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e8:	d029      	beq.n	800043e <__adddf3+0x24e>
 80003ea:	ea94 0f05 	teq	r4, r5
 80003ee:	bf08      	it	eq
 80003f0:	ea90 0f02 	teqeq	r0, r2
 80003f4:	d005      	beq.n	8000402 <__adddf3+0x212>
 80003f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fa:	bf04      	itt	eq
 80003fc:	4619      	moveq	r1, r3
 80003fe:	4610      	moveq	r0, r2
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	ea91 0f03 	teq	r1, r3
 8000406:	bf1e      	ittt	ne
 8000408:	2100      	movne	r1, #0
 800040a:	2000      	movne	r0, #0
 800040c:	bd30      	popne	{r4, r5, pc}
 800040e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000412:	d105      	bne.n	8000420 <__adddf3+0x230>
 8000414:	0040      	lsls	r0, r0, #1
 8000416:	4149      	adcs	r1, r1
 8000418:	bf28      	it	cs
 800041a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000424:	bf3c      	itt	cc
 8000426:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800042a:	bd30      	popcc	{r4, r5, pc}
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000430:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000434:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000438:	f04f 0000 	mov.w	r0, #0
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000442:	bf1a      	itte	ne
 8000444:	4619      	movne	r1, r3
 8000446:	4610      	movne	r0, r2
 8000448:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800044c:	bf1c      	itt	ne
 800044e:	460b      	movne	r3, r1
 8000450:	4602      	movne	r2, r0
 8000452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000456:	bf06      	itte	eq
 8000458:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800045c:	ea91 0f03 	teqeq	r1, r3
 8000460:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	bf00      	nop

08000468 <__aeabi_ui2d>:
 8000468:	f090 0f00 	teq	r0, #0
 800046c:	bf04      	itt	eq
 800046e:	2100      	moveq	r1, #0
 8000470:	4770      	bxeq	lr
 8000472:	b530      	push	{r4, r5, lr}
 8000474:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000478:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800047c:	f04f 0500 	mov.w	r5, #0
 8000480:	f04f 0100 	mov.w	r1, #0
 8000484:	e750      	b.n	8000328 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_i2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a0:	bf48      	it	mi
 80004a2:	4240      	negmi	r0, r0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e73e      	b.n	8000328 <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_f2d>:
 80004ac:	0042      	lsls	r2, r0, #1
 80004ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ba:	bf1f      	itttt	ne
 80004bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c8:	4770      	bxne	lr
 80004ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ce:	bf08      	it	eq
 80004d0:	4770      	bxeq	lr
 80004d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d6:	bf04      	itt	eq
 80004d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ec:	e71c      	b.n	8000328 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aed8 	beq.w	80002d6 <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6bd      	b.n	80002d6 <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__gedf2>:
 8000980:	f04f 3cff 	mov.w	ip, #4294967295
 8000984:	e006      	b.n	8000994 <__cmpdf2+0x4>
 8000986:	bf00      	nop

08000988 <__ledf2>:
 8000988:	f04f 0c01 	mov.w	ip, #1
 800098c:	e002      	b.n	8000994 <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__cmpdf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000998:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	bf18      	it	ne
 80009a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009aa:	d01b      	beq.n	80009e4 <__cmpdf2+0x54>
 80009ac:	b001      	add	sp, #4
 80009ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b2:	bf0c      	ite	eq
 80009b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b8:	ea91 0f03 	teqne	r1, r3
 80009bc:	bf02      	ittt	eq
 80009be:	ea90 0f02 	teqeq	r0, r2
 80009c2:	2000      	moveq	r0, #0
 80009c4:	4770      	bxeq	lr
 80009c6:	f110 0f00 	cmn.w	r0, #0
 80009ca:	ea91 0f03 	teq	r1, r3
 80009ce:	bf58      	it	pl
 80009d0:	4299      	cmppl	r1, r3
 80009d2:	bf08      	it	eq
 80009d4:	4290      	cmpeq	r0, r2
 80009d6:	bf2c      	ite	cs
 80009d8:	17d8      	asrcs	r0, r3, #31
 80009da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009de:	f040 0001 	orr.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	d102      	bne.n	80009f4 <__cmpdf2+0x64>
 80009ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f2:	d107      	bne.n	8000a04 <__cmpdf2+0x74>
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	d1d6      	bne.n	80009ac <__cmpdf2+0x1c>
 80009fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a02:	d0d3      	beq.n	80009ac <__cmpdf2+0x1c>
 8000a04:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_cdrcmple>:
 8000a0c:	4684      	mov	ip, r0
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	468c      	mov	ip, r1
 8000a14:	4619      	mov	r1, r3
 8000a16:	4663      	mov	r3, ip
 8000a18:	e000      	b.n	8000a1c <__aeabi_cdcmpeq>
 8000a1a:	bf00      	nop

08000a1c <__aeabi_cdcmpeq>:
 8000a1c:	b501      	push	{r0, lr}
 8000a1e:	f7ff ffb7 	bl	8000990 <__cmpdf2>
 8000a22:	2800      	cmp	r0, #0
 8000a24:	bf48      	it	mi
 8000a26:	f110 0f00 	cmnmi.w	r0, #0
 8000a2a:	bd01      	pop	{r0, pc}

08000a2c <__aeabi_dcmpeq>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff fff4 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a34:	bf0c      	ite	eq
 8000a36:	2001      	moveq	r0, #1
 8000a38:	2000      	movne	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmplt>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffea 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a48:	bf34      	ite	cc
 8000a4a:	2001      	movcc	r0, #1
 8000a4c:	2000      	movcs	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmple>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffe0 	bl	8000a1c <__aeabi_cdcmpeq>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpge>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffce 	bl	8000a0c <__aeabi_cdrcmple>
 8000a70:	bf94      	ite	ls
 8000a72:	2001      	movls	r0, #1
 8000a74:	2000      	movhi	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpgt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffc4 	bl	8000a0c <__aeabi_cdrcmple>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmpun>:
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__aeabi_dcmpun+0x10>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d10a      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__aeabi_dcmpun+0x20>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d102      	bne.n	8000ab6 <__aeabi_dcmpun+0x26>
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	f04f 0001 	mov.w	r0, #1
 8000aba:	4770      	bx	lr

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_frsub>:
 8000b5c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b60:	e002      	b.n	8000b68 <__addsf3>
 8000b62:	bf00      	nop

08000b64 <__aeabi_fsub>:
 8000b64:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b68 <__addsf3>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	bf1f      	itttt	ne
 8000b6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b70:	ea92 0f03 	teqne	r2, r3
 8000b74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b7c:	d06a      	beq.n	8000c54 <__addsf3+0xec>
 8000b7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b86:	bfc1      	itttt	gt
 8000b88:	18d2      	addgt	r2, r2, r3
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	4048      	eorgt	r0, r1
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	bfb8      	it	lt
 8000b92:	425b      	neglt	r3, r3
 8000b94:	2b19      	cmp	r3, #25
 8000b96:	bf88      	it	hi
 8000b98:	4770      	bxhi	lr
 8000b9a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba6:	bf18      	it	ne
 8000ba8:	4240      	negne	r0, r0
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bb2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb6:	bf18      	it	ne
 8000bb8:	4249      	negne	r1, r1
 8000bba:	ea92 0f03 	teq	r2, r3
 8000bbe:	d03f      	beq.n	8000c40 <__addsf3+0xd8>
 8000bc0:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc4:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc8:	eb10 000c 	adds.w	r0, r0, ip
 8000bcc:	f1c3 0320 	rsb	r3, r3, #32
 8000bd0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd8:	d502      	bpl.n	8000be0 <__addsf3+0x78>
 8000bda:	4249      	negs	r1, r1
 8000bdc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be4:	d313      	bcc.n	8000c0e <__addsf3+0xa6>
 8000be6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bea:	d306      	bcc.n	8000bfa <__addsf3+0x92>
 8000bec:	0840      	lsrs	r0, r0, #1
 8000bee:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf2:	f102 0201 	add.w	r2, r2, #1
 8000bf6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf8:	d251      	bcs.n	8000c9e <__addsf3+0x136>
 8000bfa:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c02:	bf08      	it	eq
 8000c04:	f020 0001 	biceq.w	r0, r0, #1
 8000c08:	ea40 0003 	orr.w	r0, r0, r3
 8000c0c:	4770      	bx	lr
 8000c0e:	0049      	lsls	r1, r1, #1
 8000c10:	eb40 0000 	adc.w	r0, r0, r0
 8000c14:	3a01      	subs	r2, #1
 8000c16:	bf28      	it	cs
 8000c18:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c1c:	d2ed      	bcs.n	8000bfa <__addsf3+0x92>
 8000c1e:	fab0 fc80 	clz	ip, r0
 8000c22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c26:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2e:	bfaa      	itet	ge
 8000c30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c34:	4252      	neglt	r2, r2
 8000c36:	4318      	orrge	r0, r3
 8000c38:	bfbc      	itt	lt
 8000c3a:	40d0      	lsrlt	r0, r2
 8000c3c:	4318      	orrlt	r0, r3
 8000c3e:	4770      	bx	lr
 8000c40:	f092 0f00 	teq	r2, #0
 8000c44:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c48:	bf06      	itte	eq
 8000c4a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4e:	3201      	addeq	r2, #1
 8000c50:	3b01      	subne	r3, #1
 8000c52:	e7b5      	b.n	8000bc0 <__addsf3+0x58>
 8000c54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c5c:	bf18      	it	ne
 8000c5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c62:	d021      	beq.n	8000ca8 <__addsf3+0x140>
 8000c64:	ea92 0f03 	teq	r2, r3
 8000c68:	d004      	beq.n	8000c74 <__addsf3+0x10c>
 8000c6a:	f092 0f00 	teq	r2, #0
 8000c6e:	bf08      	it	eq
 8000c70:	4608      	moveq	r0, r1
 8000c72:	4770      	bx	lr
 8000c74:	ea90 0f01 	teq	r0, r1
 8000c78:	bf1c      	itt	ne
 8000c7a:	2000      	movne	r0, #0
 8000c7c:	4770      	bxne	lr
 8000c7e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c82:	d104      	bne.n	8000c8e <__addsf3+0x126>
 8000c84:	0040      	lsls	r0, r0, #1
 8000c86:	bf28      	it	cs
 8000c88:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c8c:	4770      	bx	lr
 8000c8e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c92:	bf3c      	itt	cc
 8000c94:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c98:	4770      	bxcc	lr
 8000c9a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ca2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca6:	4770      	bx	lr
 8000ca8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cac:	bf16      	itet	ne
 8000cae:	4608      	movne	r0, r1
 8000cb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb4:	4601      	movne	r1, r0
 8000cb6:	0242      	lsls	r2, r0, #9
 8000cb8:	bf06      	itte	eq
 8000cba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cbe:	ea90 0f01 	teqeq	r0, r1
 8000cc2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_ui2f>:
 8000cc8:	f04f 0300 	mov.w	r3, #0
 8000ccc:	e004      	b.n	8000cd8 <__aeabi_i2f+0x8>
 8000cce:	bf00      	nop

08000cd0 <__aeabi_i2f>:
 8000cd0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	bf48      	it	mi
 8000cd6:	4240      	negmi	r0, r0
 8000cd8:	ea5f 0c00 	movs.w	ip, r0
 8000cdc:	bf08      	it	eq
 8000cde:	4770      	bxeq	lr
 8000ce0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce4:	4601      	mov	r1, r0
 8000ce6:	f04f 0000 	mov.w	r0, #0
 8000cea:	e01c      	b.n	8000d26 <__aeabi_l2f+0x2a>

08000cec <__aeabi_ul2f>:
 8000cec:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf0:	bf08      	it	eq
 8000cf2:	4770      	bxeq	lr
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e00a      	b.n	8000d10 <__aeabi_l2f+0x14>
 8000cfa:	bf00      	nop

08000cfc <__aeabi_l2f>:
 8000cfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000d00:	bf08      	it	eq
 8000d02:	4770      	bxeq	lr
 8000d04:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d08:	d502      	bpl.n	8000d10 <__aeabi_l2f+0x14>
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	ea5f 0c01 	movs.w	ip, r1
 8000d14:	bf02      	ittt	eq
 8000d16:	4684      	moveq	ip, r0
 8000d18:	4601      	moveq	r1, r0
 8000d1a:	2000      	moveq	r0, #0
 8000d1c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d20:	bf08      	it	eq
 8000d22:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d26:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d2a:	fabc f28c 	clz	r2, ip
 8000d2e:	3a08      	subs	r2, #8
 8000d30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d34:	db10      	blt.n	8000d58 <__aeabi_l2f+0x5c>
 8000d36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d48:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	f020 0001 	biceq.w	r0, r0, #1
 8000d56:	4770      	bx	lr
 8000d58:	f102 0220 	add.w	r2, r2, #32
 8000d5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d68:	fa21 f202 	lsr.w	r2, r1, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_ldivmod>:
 8000d78:	b97b      	cbnz	r3, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7a:	b972      	cbnz	r2, 8000d9a <__aeabi_ldivmod+0x22>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bfbe      	ittt	lt
 8000d80:	2000      	movlt	r0, #0
 8000d82:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d86:	e006      	blt.n	8000d96 <__aeabi_ldivmod+0x1e>
 8000d88:	bf08      	it	eq
 8000d8a:	2800      	cmpeq	r0, #0
 8000d8c:	bf1c      	itt	ne
 8000d8e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d92:	f04f 30ff 	movne.w	r0, #4294967295
 8000d96:	f000 b9b5 	b.w	8001104 <__aeabi_idiv0>
 8000d9a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da2:	2900      	cmp	r1, #0
 8000da4:	db09      	blt.n	8000dba <__aeabi_ldivmod+0x42>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db1a      	blt.n	8000de0 <__aeabi_ldivmod+0x68>
 8000daa:	f000 f84d 	bl	8000e48 <__udivmoddi4>
 8000dae:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db6:	b004      	add	sp, #16
 8000db8:	4770      	bx	lr
 8000dba:	4240      	negs	r0, r0
 8000dbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	db1b      	blt.n	8000dfc <__aeabi_ldivmod+0x84>
 8000dc4:	f000 f840 	bl	8000e48 <__udivmoddi4>
 8000dc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd0:	b004      	add	sp, #16
 8000dd2:	4240      	negs	r0, r0
 8000dd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd8:	4252      	negs	r2, r2
 8000dda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000dde:	4770      	bx	lr
 8000de0:	4252      	negs	r2, r2
 8000de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000de6:	f000 f82f 	bl	8000e48 <__udivmoddi4>
 8000dea:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000df2:	b004      	add	sp, #16
 8000df4:	4240      	negs	r0, r0
 8000df6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfa:	4770      	bx	lr
 8000dfc:	4252      	negs	r2, r2
 8000dfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e02:	f000 f821 	bl	8000e48 <__udivmoddi4>
 8000e06:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e0e:	b004      	add	sp, #16
 8000e10:	4252      	negs	r2, r2
 8000e12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e16:	4770      	bx	lr

08000e18 <__aeabi_uldivmod>:
 8000e18:	b953      	cbnz	r3, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1a:	b94a      	cbnz	r2, 8000e30 <__aeabi_uldivmod+0x18>
 8000e1c:	2900      	cmp	r1, #0
 8000e1e:	bf08      	it	eq
 8000e20:	2800      	cmpeq	r0, #0
 8000e22:	bf1c      	itt	ne
 8000e24:	f04f 31ff 	movne.w	r1, #4294967295
 8000e28:	f04f 30ff 	movne.w	r0, #4294967295
 8000e2c:	f000 b96a 	b.w	8001104 <__aeabi_idiv0>
 8000e30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e38:	f000 f806 	bl	8000e48 <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4770      	bx	lr

08000e48 <__udivmoddi4>:
 8000e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e4c:	9d08      	ldr	r5, [sp, #32]
 8000e4e:	460c      	mov	r4, r1
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d14e      	bne.n	8000ef2 <__udivmoddi4+0xaa>
 8000e54:	4694      	mov	ip, r2
 8000e56:	458c      	cmp	ip, r1
 8000e58:	4686      	mov	lr, r0
 8000e5a:	fab2 f282 	clz	r2, r2
 8000e5e:	d962      	bls.n	8000f26 <__udivmoddi4+0xde>
 8000e60:	b14a      	cbz	r2, 8000e76 <__udivmoddi4+0x2e>
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	4091      	lsls	r1, r2
 8000e68:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	4319      	orrs	r1, r3
 8000e72:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f f68c 	uxth.w	r6, ip
 8000e7e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e86:	fb07 1114 	mls	r1, r7, r4, r1
 8000e8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e8e:	fb04 f106 	mul.w	r1, r4, r6
 8000e92:	4299      	cmp	r1, r3
 8000e94:	d90a      	bls.n	8000eac <__udivmoddi4+0x64>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e9e:	f080 8112 	bcs.w	80010c6 <__udivmoddi4+0x27e>
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	f240 810f 	bls.w	80010c6 <__udivmoddi4+0x27e>
 8000ea8:	3c02      	subs	r4, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1a59      	subs	r1, r3, r1
 8000eae:	fa1f f38e 	uxth.w	r3, lr
 8000eb2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ebe:	fb00 f606 	mul.w	r6, r0, r6
 8000ec2:	429e      	cmp	r6, r3
 8000ec4:	d90a      	bls.n	8000edc <__udivmoddi4+0x94>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ece:	f080 80fc 	bcs.w	80010ca <__udivmoddi4+0x282>
 8000ed2:	429e      	cmp	r6, r3
 8000ed4:	f240 80f9 	bls.w	80010ca <__udivmoddi4+0x282>
 8000ed8:	4463      	add	r3, ip
 8000eda:	3802      	subs	r0, #2
 8000edc:	1b9b      	subs	r3, r3, r6
 8000ede:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	b11d      	cbz	r5, 8000eee <__udivmoddi4+0xa6>
 8000ee6:	40d3      	lsrs	r3, r2
 8000ee8:	2200      	movs	r2, #0
 8000eea:	e9c5 3200 	strd	r3, r2, [r5]
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d905      	bls.n	8000f02 <__udivmoddi4+0xba>
 8000ef6:	b10d      	cbz	r5, 8000efc <__udivmoddi4+0xb4>
 8000ef8:	e9c5 0100 	strd	r0, r1, [r5]
 8000efc:	2100      	movs	r1, #0
 8000efe:	4608      	mov	r0, r1
 8000f00:	e7f5      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f02:	fab3 f183 	clz	r1, r3
 8000f06:	2900      	cmp	r1, #0
 8000f08:	d146      	bne.n	8000f98 <__udivmoddi4+0x150>
 8000f0a:	42a3      	cmp	r3, r4
 8000f0c:	d302      	bcc.n	8000f14 <__udivmoddi4+0xcc>
 8000f0e:	4290      	cmp	r0, r2
 8000f10:	f0c0 80f0 	bcc.w	80010f4 <__udivmoddi4+0x2ac>
 8000f14:	1a86      	subs	r6, r0, r2
 8000f16:	eb64 0303 	sbc.w	r3, r4, r3
 8000f1a:	2001      	movs	r0, #1
 8000f1c:	2d00      	cmp	r5, #0
 8000f1e:	d0e6      	beq.n	8000eee <__udivmoddi4+0xa6>
 8000f20:	e9c5 6300 	strd	r6, r3, [r5]
 8000f24:	e7e3      	b.n	8000eee <__udivmoddi4+0xa6>
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8090 	bne.w	800104c <__udivmoddi4+0x204>
 8000f2c:	eba1 040c 	sub.w	r4, r1, ip
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa1f f78c 	uxth.w	r7, ip
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f3e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f42:	fb08 4416 	mls	r4, r8, r6, r4
 8000f46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f4a:	fb07 f006 	mul.w	r0, r7, r6
 8000f4e:	4298      	cmp	r0, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x11c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f5a:	d202      	bcs.n	8000f62 <__udivmoddi4+0x11a>
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	f200 80cd 	bhi.w	80010fc <__udivmoddi4+0x2b4>
 8000f62:	4626      	mov	r6, r4
 8000f64:	1a1c      	subs	r4, r3, r0
 8000f66:	fa1f f38e 	uxth.w	r3, lr
 8000f6a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f6e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f76:	fb00 f707 	mul.w	r7, r0, r7
 8000f7a:	429f      	cmp	r7, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x148>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x146>
 8000f88:	429f      	cmp	r7, r3
 8000f8a:	f200 80b0 	bhi.w	80010ee <__udivmoddi4+0x2a6>
 8000f8e:	4620      	mov	r0, r4
 8000f90:	1bdb      	subs	r3, r3, r7
 8000f92:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f96:	e7a5      	b.n	8000ee4 <__udivmoddi4+0x9c>
 8000f98:	f1c1 0620 	rsb	r6, r1, #32
 8000f9c:	408b      	lsls	r3, r1
 8000f9e:	fa22 f706 	lsr.w	r7, r2, r6
 8000fa2:	431f      	orrs	r7, r3
 8000fa4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fa8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fac:	ea43 030c 	orr.w	r3, r3, ip
 8000fb0:	40f4      	lsrs	r4, r6
 8000fb2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fb6:	0c38      	lsrs	r0, r7, #16
 8000fb8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fbc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fc0:	fa1f fc87 	uxth.w	ip, r7
 8000fc4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fc8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fcc:	fb0e f90c 	mul.w	r9, lr, ip
 8000fd0:	45a1      	cmp	r9, r4
 8000fd2:	fa02 f201 	lsl.w	r2, r2, r1
 8000fd6:	d90a      	bls.n	8000fee <__udivmoddi4+0x1a6>
 8000fd8:	193c      	adds	r4, r7, r4
 8000fda:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000fde:	f080 8084 	bcs.w	80010ea <__udivmoddi4+0x2a2>
 8000fe2:	45a1      	cmp	r9, r4
 8000fe4:	f240 8081 	bls.w	80010ea <__udivmoddi4+0x2a2>
 8000fe8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000fec:	443c      	add	r4, r7
 8000fee:	eba4 0409 	sub.w	r4, r4, r9
 8000ff2:	fa1f f983 	uxth.w	r9, r3
 8000ff6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ffa:	fb00 4413 	mls	r4, r0, r3, r4
 8000ffe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001002:	fb03 fc0c 	mul.w	ip, r3, ip
 8001006:	45a4      	cmp	ip, r4
 8001008:	d907      	bls.n	800101a <__udivmoddi4+0x1d2>
 800100a:	193c      	adds	r4, r7, r4
 800100c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001010:	d267      	bcs.n	80010e2 <__udivmoddi4+0x29a>
 8001012:	45a4      	cmp	ip, r4
 8001014:	d965      	bls.n	80010e2 <__udivmoddi4+0x29a>
 8001016:	3b02      	subs	r3, #2
 8001018:	443c      	add	r4, r7
 800101a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800101e:	fba0 9302 	umull	r9, r3, r0, r2
 8001022:	eba4 040c 	sub.w	r4, r4, ip
 8001026:	429c      	cmp	r4, r3
 8001028:	46ce      	mov	lr, r9
 800102a:	469c      	mov	ip, r3
 800102c:	d351      	bcc.n	80010d2 <__udivmoddi4+0x28a>
 800102e:	d04e      	beq.n	80010ce <__udivmoddi4+0x286>
 8001030:	b155      	cbz	r5, 8001048 <__udivmoddi4+0x200>
 8001032:	ebb8 030e 	subs.w	r3, r8, lr
 8001036:	eb64 040c 	sbc.w	r4, r4, ip
 800103a:	fa04 f606 	lsl.w	r6, r4, r6
 800103e:	40cb      	lsrs	r3, r1
 8001040:	431e      	orrs	r6, r3
 8001042:	40cc      	lsrs	r4, r1
 8001044:	e9c5 6400 	strd	r6, r4, [r5]
 8001048:	2100      	movs	r1, #0
 800104a:	e750      	b.n	8000eee <__udivmoddi4+0xa6>
 800104c:	f1c2 0320 	rsb	r3, r2, #32
 8001050:	fa20 f103 	lsr.w	r1, r0, r3
 8001054:	fa0c fc02 	lsl.w	ip, ip, r2
 8001058:	fa24 f303 	lsr.w	r3, r4, r3
 800105c:	4094      	lsls	r4, r2
 800105e:	430c      	orrs	r4, r1
 8001060:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001064:	fa00 fe02 	lsl.w	lr, r0, r2
 8001068:	fa1f f78c 	uxth.w	r7, ip
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3110 	mls	r1, r8, r0, r3
 8001074:	0c23      	lsrs	r3, r4, #16
 8001076:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800107a:	fb00 f107 	mul.w	r1, r0, r7
 800107e:	4299      	cmp	r1, r3
 8001080:	d908      	bls.n	8001094 <__udivmoddi4+0x24c>
 8001082:	eb1c 0303 	adds.w	r3, ip, r3
 8001086:	f100 36ff 	add.w	r6, r0, #4294967295
 800108a:	d22c      	bcs.n	80010e6 <__udivmoddi4+0x29e>
 800108c:	4299      	cmp	r1, r3
 800108e:	d92a      	bls.n	80010e6 <__udivmoddi4+0x29e>
 8001090:	3802      	subs	r0, #2
 8001092:	4463      	add	r3, ip
 8001094:	1a5b      	subs	r3, r3, r1
 8001096:	b2a4      	uxth	r4, r4
 8001098:	fbb3 f1f8 	udiv	r1, r3, r8
 800109c:	fb08 3311 	mls	r3, r8, r1, r3
 80010a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010a4:	fb01 f307 	mul.w	r3, r1, r7
 80010a8:	42a3      	cmp	r3, r4
 80010aa:	d908      	bls.n	80010be <__udivmoddi4+0x276>
 80010ac:	eb1c 0404 	adds.w	r4, ip, r4
 80010b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010b4:	d213      	bcs.n	80010de <__udivmoddi4+0x296>
 80010b6:	42a3      	cmp	r3, r4
 80010b8:	d911      	bls.n	80010de <__udivmoddi4+0x296>
 80010ba:	3902      	subs	r1, #2
 80010bc:	4464      	add	r4, ip
 80010be:	1ae4      	subs	r4, r4, r3
 80010c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010c4:	e739      	b.n	8000f3a <__udivmoddi4+0xf2>
 80010c6:	4604      	mov	r4, r0
 80010c8:	e6f0      	b.n	8000eac <__udivmoddi4+0x64>
 80010ca:	4608      	mov	r0, r1
 80010cc:	e706      	b.n	8000edc <__udivmoddi4+0x94>
 80010ce:	45c8      	cmp	r8, r9
 80010d0:	d2ae      	bcs.n	8001030 <__udivmoddi4+0x1e8>
 80010d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010da:	3801      	subs	r0, #1
 80010dc:	e7a8      	b.n	8001030 <__udivmoddi4+0x1e8>
 80010de:	4631      	mov	r1, r6
 80010e0:	e7ed      	b.n	80010be <__udivmoddi4+0x276>
 80010e2:	4603      	mov	r3, r0
 80010e4:	e799      	b.n	800101a <__udivmoddi4+0x1d2>
 80010e6:	4630      	mov	r0, r6
 80010e8:	e7d4      	b.n	8001094 <__udivmoddi4+0x24c>
 80010ea:	46d6      	mov	lr, sl
 80010ec:	e77f      	b.n	8000fee <__udivmoddi4+0x1a6>
 80010ee:	4463      	add	r3, ip
 80010f0:	3802      	subs	r0, #2
 80010f2:	e74d      	b.n	8000f90 <__udivmoddi4+0x148>
 80010f4:	4606      	mov	r6, r0
 80010f6:	4623      	mov	r3, r4
 80010f8:	4608      	mov	r0, r1
 80010fa:	e70f      	b.n	8000f1c <__udivmoddi4+0xd4>
 80010fc:	3e02      	subs	r6, #2
 80010fe:	4463      	add	r3, ip
 8001100:	e730      	b.n	8000f64 <__udivmoddi4+0x11c>
 8001102:	bf00      	nop

08001104 <__aeabi_idiv0>:
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_InitTick+0x54>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b12      	ldr	r3, [pc, #72]	@ (8001184 <HAL_InitTick+0x58>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001142:	fbb3 f3f1 	udiv	r3, r3, r1
 8001146:	fbb2 f3f3 	udiv	r3, r2, r3
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <HAL_SYSTICK_Config>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e00e      	b.n	8001178 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b0f      	cmp	r3, #15
 800115e:	d80a      	bhi.n	8001176 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001160:	2200      	movs	r2, #0
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f000 f8c8 	bl	80012fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800116c:	4a06      	ldr	r2, [pc, #24]	@ (8001188 <HAL_InitTick+0x5c>)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
 8001174:	e000      	b.n	8001178 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
}
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000000 	.word	0x20000000
 8001184:	20000008 	.word	0x20000008
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000214 	.word	0x20000214

080011a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a8:	4b04      	ldr	r3, [pc, #16]	@ (80011bc <__NVIC_GetPriorityGrouping+0x18>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	0a1b      	lsrs	r3, r3, #8
 80011ae:	f003 0307 	and.w	r3, r3, #7
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	4603      	mov	r3, r0
 80011c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	db0b      	blt.n	80011ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	f003 021f 	and.w	r2, r3, #31
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <__NVIC_EnableIRQ+0x38>)
 80011da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011de:	095b      	lsrs	r3, r3, #5
 80011e0:	2001      	movs	r0, #1
 80011e2:	fa00 f202 	lsl.w	r2, r0, r2
 80011e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	6039      	str	r1, [r7, #0]
 8001206:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	2b00      	cmp	r3, #0
 800120e:	db0a      	blt.n	8001226 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	b2da      	uxtb	r2, r3
 8001214:	490c      	ldr	r1, [pc, #48]	@ (8001248 <__NVIC_SetPriority+0x4c>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	0112      	lsls	r2, r2, #4
 800121c:	b2d2      	uxtb	r2, r2
 800121e:	440b      	add	r3, r1
 8001220:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001224:	e00a      	b.n	800123c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <__NVIC_SetPriority+0x50>)
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	3b04      	subs	r3, #4
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	440b      	add	r3, r1
 800123a:	761a      	strb	r2, [r3, #24]
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100
 800124c:	e000ed00 	.word	0xe000ed00

08001250 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	f1c3 0307 	rsb	r3, r3, #7
 800126a:	2b04      	cmp	r3, #4
 800126c:	bf28      	it	cs
 800126e:	2304      	movcs	r3, #4
 8001270:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	3304      	adds	r3, #4
 8001276:	2b06      	cmp	r3, #6
 8001278:	d902      	bls.n	8001280 <NVIC_EncodePriority+0x30>
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	3b03      	subs	r3, #3
 800127e:	e000      	b.n	8001282 <NVIC_EncodePriority+0x32>
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	43da      	mvns	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	401a      	ands	r2, r3
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001298:	f04f 31ff 	mov.w	r1, #4294967295
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	4313      	orrs	r3, r2
         );
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
	...

080012b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c8:	d301      	bcc.n	80012ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00f      	b.n	80012ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <SysTick_Config+0x40>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d6:	210f      	movs	r1, #15
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295
 80012dc:	f7ff ff8e 	bl	80011fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e0:	4b05      	ldr	r3, [pc, #20]	@ (80012f8 <SysTick_Config+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e6:	4b04      	ldr	r3, [pc, #16]	@ (80012f8 <SysTick_Config+0x40>)
 80012e8:	2207      	movs	r2, #7
 80012ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	e000e010 	.word	0xe000e010

080012fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
 8001308:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130e:	f7ff ff49 	bl	80011a4 <__NVIC_GetPriorityGrouping>
 8001312:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	68b9      	ldr	r1, [r7, #8]
 8001318:	6978      	ldr	r0, [r7, #20]
 800131a:	f7ff ff99 	bl	8001250 <NVIC_EncodePriority>
 800131e:	4602      	mov	r2, r0
 8001320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff68 	bl	80011fc <__NVIC_SetPriority>
}
 800132c:	bf00      	nop
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff3c 	bl	80011c0 <__NVIC_EnableIRQ>
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffad 	bl	80012b8 <SysTick_Config>
 800135e:	4603      	mov	r3, r0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff ff0a 	bl	800118c <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e099      	b.n	80014b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2202      	movs	r2, #2
 8001388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0201 	bic.w	r2, r2, #1
 80013a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a4:	e00f      	b.n	80013c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a6:	f7ff fef1 	bl	800118c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b05      	cmp	r3, #5
 80013b2:	d908      	bls.n	80013c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2220      	movs	r2, #32
 80013b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2203      	movs	r2, #3
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e078      	b.n	80014b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1e8      	bne.n	80013a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	4b38      	ldr	r3, [pc, #224]	@ (80014c0 <HAL_DMA_Init+0x158>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001412:	697a      	ldr	r2, [r7, #20]
 8001414:	4313      	orrs	r3, r2
 8001416:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	2b04      	cmp	r3, #4
 800141e:	d107      	bne.n	8001430 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001428:	4313      	orrs	r3, r2
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4313      	orrs	r3, r2
 800142e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	695b      	ldr	r3, [r3, #20]
 800143e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	f023 0307 	bic.w	r3, r3, #7
 8001446:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	4313      	orrs	r3, r2
 8001450:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001456:	2b04      	cmp	r3, #4
 8001458:	d117      	bne.n	800148a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4313      	orrs	r3, r2
 8001462:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00e      	beq.n	800148a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 fa0b 	bl	8001888 <DMA_CheckFifoParam>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d008      	beq.n	800148a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2240      	movs	r2, #64	@ 0x40
 800147c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001486:	2301      	movs	r3, #1
 8001488:	e016      	b.n	80014b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f9c2 	bl	800181c <DMA_CalcBaseAndBitshift>
 8001498:	4603      	mov	r3, r0
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a0:	223f      	movs	r2, #63	@ 0x3f
 80014a2:	409a      	lsls	r2, r3
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	f010803f 	.word	0xf010803f

080014c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d004      	beq.n	80014e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00c      	b.n	80014fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2205      	movs	r2, #5
 80014e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0201 	bic.w	r2, r2, #1
 80014f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001514:	4b8e      	ldr	r3, [pc, #568]	@ (8001750 <HAL_DMA_IRQHandler+0x248>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a8e      	ldr	r2, [pc, #568]	@ (8001754 <HAL_DMA_IRQHandler+0x24c>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0a9b      	lsrs	r3, r3, #10
 8001520:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001526:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001532:	2208      	movs	r2, #8
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d01a      	beq.n	8001574 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001560:	2208      	movs	r2, #8
 8001562:	409a      	lsls	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	2201      	movs	r2, #1
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d012      	beq.n	80015aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a2:	f043 0202 	orr.w	r2, r3, #2
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	2204      	movs	r2, #4
 80015b0:	409a      	lsls	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4013      	ands	r3, r2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d012      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00b      	beq.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015cc:	2204      	movs	r2, #4
 80015ce:	409a      	lsls	r2, r3
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015d8:	f043 0204 	orr.w	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e4:	2210      	movs	r2, #16
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d043      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d03c      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001602:	2210      	movs	r2, #16
 8001604:	409a      	lsls	r2, r3
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d018      	beq.n	800164a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	2b00      	cmp	r3, #0
 800162c:	d024      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	4798      	blx	r3
 8001636:	e01f      	b.n	8001678 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800163c:	2b00      	cmp	r3, #0
 800163e:	d01b      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
 8001648:	e016      	b.n	8001678 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001654:	2b00      	cmp	r3, #0
 8001656:	d107      	bne.n	8001668 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0208 	bic.w	r2, r2, #8
 8001666:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166c:	2b00      	cmp	r3, #0
 800166e:	d003      	beq.n	8001678 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800167c:	2220      	movs	r2, #32
 800167e:	409a      	lsls	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4013      	ands	r3, r2
 8001684:	2b00      	cmp	r3, #0
 8001686:	f000 808f 	beq.w	80017a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8087 	beq.w	80017a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169e:	2220      	movs	r2, #32
 80016a0:	409a      	lsls	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d136      	bne.n	8001720 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f022 0216 	bic.w	r2, r2, #22
 80016c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	695a      	ldr	r2, [r3, #20]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <HAL_DMA_IRQHandler+0x1da>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f022 0208 	bic.w	r2, r2, #8
 80016f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f6:	223f      	movs	r2, #63	@ 0x3f
 80016f8:	409a      	lsls	r2, r3
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001712:	2b00      	cmp	r3, #0
 8001714:	d07e      	beq.n	8001814 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
        }
        return;
 800171e:	e079      	b.n	8001814 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01d      	beq.n	800176a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10d      	bne.n	8001758 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001740:	2b00      	cmp	r3, #0
 8001742:	d031      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
 800174c:	e02c      	b.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000
 8001754:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800175c:	2b00      	cmp	r3, #0
 800175e:	d023      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
 8001768:	e01e      	b.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d10f      	bne.n	8001798 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0210 	bic.w	r2, r2, #16
 8001786:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800179c:	2b00      	cmp	r3, #0
 800179e:	d003      	beq.n	80017a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d032      	beq.n	8001816 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d022      	beq.n	8001802 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2205      	movs	r2, #5
 80017c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0201 	bic.w	r2, r2, #1
 80017d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	3301      	adds	r3, #1
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d307      	bcc.n	80017f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d1f2      	bne.n	80017d4 <HAL_DMA_IRQHandler+0x2cc>
 80017ee:	e000      	b.n	80017f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80017f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001806:	2b00      	cmp	r3, #0
 8001808:	d005      	beq.n	8001816 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	4798      	blx	r3
 8001812:	e000      	b.n	8001816 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001814:	bf00      	nop
    }
  }
}
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	3b10      	subs	r3, #16
 800182c:	4a14      	ldr	r2, [pc, #80]	@ (8001880 <DMA_CalcBaseAndBitshift+0x64>)
 800182e:	fba2 2303 	umull	r2, r3, r2, r3
 8001832:	091b      	lsrs	r3, r3, #4
 8001834:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001836:	4a13      	ldr	r2, [pc, #76]	@ (8001884 <DMA_CalcBaseAndBitshift+0x68>)
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4413      	add	r3, r2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d909      	bls.n	800185e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001852:	f023 0303 	bic.w	r3, r3, #3
 8001856:	1d1a      	adds	r2, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	659a      	str	r2, [r3, #88]	@ 0x58
 800185c:	e007      	b.n	800186e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001866:	f023 0303 	bic.w	r3, r3, #3
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001872:	4618      	mov	r0, r3
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	aaaaaaab 	.word	0xaaaaaaab
 8001884:	080191dc 	.word	0x080191dc

08001888 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001898:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11f      	bne.n	80018e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d856      	bhi.n	8001956 <DMA_CheckFifoParam+0xce>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <DMA_CheckFifoParam+0x28>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018d3 	.word	0x080018d3
 80018b8:	080018c1 	.word	0x080018c1
 80018bc:	08001957 	.word	0x08001957
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d046      	beq.n	800195a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018d0:	e043      	b.n	800195a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80018da:	d140      	bne.n	800195e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018e0:	e03d      	b.n	800195e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	699b      	ldr	r3, [r3, #24]
 80018e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80018ea:	d121      	bne.n	8001930 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d837      	bhi.n	8001962 <DMA_CheckFifoParam+0xda>
 80018f2:	a201      	add	r2, pc, #4	@ (adr r2, 80018f8 <DMA_CheckFifoParam+0x70>)
 80018f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018f8:	08001909 	.word	0x08001909
 80018fc:	0800190f 	.word	0x0800190f
 8001900:	08001909 	.word	0x08001909
 8001904:	08001921 	.word	0x08001921
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	73fb      	strb	r3, [r7, #15]
      break;
 800190c:	e030      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001912:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d025      	beq.n	8001966 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800191e:	e022      	b.n	8001966 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001924:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001928:	d11f      	bne.n	800196a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800192e:	e01c      	b.n	800196a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d903      	bls.n	800193e <DMA_CheckFifoParam+0xb6>
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	2b03      	cmp	r3, #3
 800193a:	d003      	beq.n	8001944 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800193c:	e018      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
      break;
 8001942:	e015      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001948:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d00e      	beq.n	800196e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	73fb      	strb	r3, [r7, #15]
      break;
 8001954:	e00b      	b.n	800196e <DMA_CheckFifoParam+0xe6>
      break;
 8001956:	bf00      	nop
 8001958:	e00a      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800195a:	bf00      	nop
 800195c:	e008      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800195e:	bf00      	nop
 8001960:	e006      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 8001962:	bf00      	nop
 8001964:	e004      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 8001966:	bf00      	nop
 8001968:	e002      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;   
 800196a:	bf00      	nop
 800196c:	e000      	b.n	8001970 <DMA_CheckFifoParam+0xe8>
      break;
 800196e:	bf00      	nop
    }
  } 
  
  return status; 
 8001970:	7bfb      	ldrb	r3, [r7, #15]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
 800199a:	e16b      	b.n	8001c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800199c:	2201      	movs	r2, #1
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f040 815a 	bne.w	8001c6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d005      	beq.n	80019d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d017      	beq.n	8001a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d123      	bne.n	8001ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	220f      	movs	r2, #15
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f003 0307 	and.w	r3, r3, #7
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	08da      	lsrs	r2, r3, #3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3208      	adds	r2, #8
 8001abe:	69b9      	ldr	r1, [r7, #24]
 8001ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f000 80b4 	beq.w	8001c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	4b60      	ldr	r3, [pc, #384]	@ (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b5d      	ldr	r3, [pc, #372]	@ (8001c8c <HAL_GPIO_Init+0x30c>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b22:	4a5b      	ldr	r2, [pc, #364]	@ (8001c90 <HAL_GPIO_Init+0x310>)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	089b      	lsrs	r3, r3, #2
 8001b28:	3302      	adds	r3, #2
 8001b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	220f      	movs	r2, #15
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4013      	ands	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a52      	ldr	r2, [pc, #328]	@ (8001c94 <HAL_GPIO_Init+0x314>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d02b      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a51      	ldr	r2, [pc, #324]	@ (8001c98 <HAL_GPIO_Init+0x318>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d025      	beq.n	8001ba2 <HAL_GPIO_Init+0x222>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a50      	ldr	r2, [pc, #320]	@ (8001c9c <HAL_GPIO_Init+0x31c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01f      	beq.n	8001b9e <HAL_GPIO_Init+0x21e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca0 <HAL_GPIO_Init+0x320>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d019      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4e      	ldr	r2, [pc, #312]	@ (8001ca4 <HAL_GPIO_Init+0x324>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_GPIO_Init+0x216>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca8 <HAL_GPIO_Init+0x328>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d00d      	beq.n	8001b92 <HAL_GPIO_Init+0x212>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4c      	ldr	r2, [pc, #304]	@ (8001cac <HAL_GPIO_Init+0x32c>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d007      	beq.n	8001b8e <HAL_GPIO_Init+0x20e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb0 <HAL_GPIO_Init+0x330>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d101      	bne.n	8001b8a <HAL_GPIO_Init+0x20a>
 8001b86:	2307      	movs	r3, #7
 8001b88:	e00e      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	e00c      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b8e:	2306      	movs	r3, #6
 8001b90:	e00a      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b92:	2305      	movs	r3, #5
 8001b94:	e008      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b96:	2304      	movs	r3, #4
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e004      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e002      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	f002 0203 	and.w	r2, r2, #3
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	4093      	lsls	r3, r2
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bb8:	4935      	ldr	r1, [pc, #212]	@ (8001c90 <HAL_GPIO_Init+0x310>)
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	3302      	adds	r3, #2
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bea:	4a32      	ldr	r2, [pc, #200]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c14:	4a27      	ldr	r2, [pc, #156]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c68:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_GPIO_Init+0x334>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3301      	adds	r3, #1
 8001c72:	61fb      	str	r3, [r7, #28]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b0f      	cmp	r3, #15
 8001c78:	f67f ae90 	bls.w	800199c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3724      	adds	r7, #36	@ 0x24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40013800 	.word	0x40013800
 8001c94:	40020000 	.word	0x40020000
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020c00 	.word	0x40020c00
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40021400 	.word	0x40021400
 8001cac:	40021800 	.word	0x40021800
 8001cb0:	40021c00 	.word	0x40021c00
 8001cb4:	40013c00 	.word	0x40013c00

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b085      	sub	sp, #20
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cfc:	887a      	ldrh	r2, [r7, #2]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	041a      	lsls	r2, r3, #16
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43d9      	mvns	r1, r3
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	400b      	ands	r3, r1
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	619a      	str	r2, [r3, #24]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
	...

08001d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e12b      	b.n	8001f8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d106      	bne.n	8001d4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f006 fac6 	bl	80082d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2224      	movs	r2, #36	@ 0x24
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0201 	bic.w	r2, r2, #1
 8001d62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d84:	f001 fc64 	bl	8003650 <HAL_RCC_GetPCLK1Freq>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4a81      	ldr	r2, [pc, #516]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d807      	bhi.n	8001da4 <HAL_I2C_Init+0x84>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a80      	ldr	r2, [pc, #512]	@ (8001f98 <HAL_I2C_Init+0x278>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	bf94      	ite	ls
 8001d9c:	2301      	movls	r3, #1
 8001d9e:	2300      	movhi	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	e006      	b.n	8001db2 <HAL_I2C_Init+0x92>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a7d      	ldr	r2, [pc, #500]	@ (8001f9c <HAL_I2C_Init+0x27c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	bf94      	ite	ls
 8001dac:	2301      	movls	r3, #1
 8001dae:	2300      	movhi	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e0e7      	b.n	8001f8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4a78      	ldr	r2, [pc, #480]	@ (8001fa0 <HAL_I2C_Init+0x280>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0c9b      	lsrs	r3, r3, #18
 8001dc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4a6a      	ldr	r2, [pc, #424]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d802      	bhi.n	8001df4 <HAL_I2C_Init+0xd4>
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	3301      	adds	r3, #1
 8001df2:	e009      	b.n	8001e08 <HAL_I2C_Init+0xe8>
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dfa:	fb02 f303 	mul.w	r3, r2, r3
 8001dfe:	4a69      	ldr	r2, [pc, #420]	@ (8001fa4 <HAL_I2C_Init+0x284>)
 8001e00:	fba2 2303 	umull	r2, r3, r2, r3
 8001e04:	099b      	lsrs	r3, r3, #6
 8001e06:	3301      	adds	r3, #1
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001e1a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	495c      	ldr	r1, [pc, #368]	@ (8001f94 <HAL_I2C_Init+0x274>)
 8001e24:	428b      	cmp	r3, r1
 8001e26:	d819      	bhi.n	8001e5c <HAL_I2C_Init+0x13c>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e59      	subs	r1, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e36:	1c59      	adds	r1, r3, #1
 8001e38:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e3c:	400b      	ands	r3, r1
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00a      	beq.n	8001e58 <HAL_I2C_Init+0x138>
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	1e59      	subs	r1, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e50:	3301      	adds	r3, #1
 8001e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e56:	e051      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001e58:	2304      	movs	r3, #4
 8001e5a:	e04f      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d111      	bne.n	8001e88 <HAL_I2C_Init+0x168>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1e58      	subs	r0, r3, #1
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6859      	ldr	r1, [r3, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	440b      	add	r3, r1
 8001e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e012      	b.n	8001eae <HAL_I2C_Init+0x18e>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1e58      	subs	r0, r3, #1
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6859      	ldr	r1, [r3, #4]
 8001e90:	460b      	mov	r3, r1
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	0099      	lsls	r1, r3, #2
 8001e98:	440b      	add	r3, r1
 8001e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf0c      	ite	eq
 8001ea8:	2301      	moveq	r3, #1
 8001eaa:	2300      	movne	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_Init+0x196>
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e022      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10e      	bne.n	8001edc <HAL_I2C_Init+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	1e58      	subs	r0, r3, #1
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6859      	ldr	r1, [r3, #4]
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	440b      	add	r3, r1
 8001ecc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001eda:	e00f      	b.n	8001efc <HAL_I2C_Init+0x1dc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	1e58      	subs	r0, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6859      	ldr	r1, [r3, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	0099      	lsls	r1, r3, #2
 8001eec:	440b      	add	r3, r1
 8001eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	6809      	ldr	r1, [r1, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69da      	ldr	r2, [r3, #28]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001f2a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	6911      	ldr	r1, [r2, #16]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68d2      	ldr	r2, [r2, #12]
 8001f36:	4311      	orrs	r1, r2
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	430b      	orrs	r3, r1
 8001f3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0201 	orr.w	r2, r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	000186a0 	.word	0x000186a0
 8001f98:	001e847f 	.word	0x001e847f
 8001f9c:	003d08ff 	.word	0x003d08ff
 8001fa0:	431bde83 	.word	0x431bde83
 8001fa4:	10624dd3 	.word	0x10624dd3

08001fa8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	60f8      	str	r0, [r7, #12]
 8001fb0:	4608      	mov	r0, r1
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	817b      	strh	r3, [r7, #10]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	813b      	strh	r3, [r7, #8]
 8001fbe:	4613      	mov	r3, r2
 8001fc0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fc2:	f7ff f8e3 	bl	800118c <HAL_GetTick>
 8001fc6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b20      	cmp	r3, #32
 8001fd2:	f040 80d9 	bne.w	8002188 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2319      	movs	r3, #25
 8001fdc:	2201      	movs	r2, #1
 8001fde:	496d      	ldr	r1, [pc, #436]	@ (8002194 <HAL_I2C_Mem_Write+0x1ec>)
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fc8f 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001fec:	2302      	movs	r3, #2
 8001fee:	e0cc      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_I2C_Mem_Write+0x56>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0c5      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	2b01      	cmp	r3, #1
 8002012:	d007      	beq.n	8002024 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f042 0201 	orr.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002032:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2221      	movs	r2, #33	@ 0x21
 8002038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2240      	movs	r2, #64	@ 0x40
 8002040:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	6a3a      	ldr	r2, [r7, #32]
 800204e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002054:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800205a:	b29a      	uxth	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4a4d      	ldr	r2, [pc, #308]	@ (8002198 <HAL_I2C_Mem_Write+0x1f0>)
 8002064:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002066:	88f8      	ldrh	r0, [r7, #6]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	8979      	ldrh	r1, [r7, #10]
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	9301      	str	r3, [sp, #4]
 8002070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4603      	mov	r3, r0
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	f000 fac6 	bl	8002608 <I2C_RequestMemoryWrite>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d052      	beq.n	8002128 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e081      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002086:	697a      	ldr	r2, [r7, #20]
 8002088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fd54 	bl	8002b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	2b04      	cmp	r3, #4
 800209c:	d107      	bne.n	80020ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e06b      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d11b      	bne.n	8002128 <HAL_I2C_Mem_Write+0x180>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d017      	beq.n	8002128 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fc:	781a      	ldrb	r2, [r3, #0]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002112:	3b01      	subs	r3, #1
 8002114:	b29a      	uxth	r2, r3
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211e:	b29b      	uxth	r3, r3
 8002120:	3b01      	subs	r3, #1
 8002122:	b29a      	uxth	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1aa      	bne.n	8002086 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fd47 	bl	8002bc8 <I2C_WaitOnBTFFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00d      	beq.n	800215c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	2b04      	cmp	r3, #4
 8002146:	d107      	bne.n	8002158 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002156:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e016      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800216a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e000      	b.n	800218a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002188:	2302      	movs	r3, #2
  }
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	00100002 	.word	0x00100002
 8002198:	ffff0000 	.word	0xffff0000

0800219c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08c      	sub	sp, #48	@ 0x30
 80021a0:	af02      	add	r7, sp, #8
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	817b      	strh	r3, [r7, #10]
 80021ae:	460b      	mov	r3, r1
 80021b0:	813b      	strh	r3, [r7, #8]
 80021b2:	4613      	mov	r3, r2
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021b6:	f7fe ffe9 	bl	800118c <HAL_GetTick>
 80021ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b20      	cmp	r3, #32
 80021c6:	f040 8218 	bne.w	80025fa <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2319      	movs	r3, #25
 80021d0:	2201      	movs	r2, #1
 80021d2:	497c      	ldr	r1, [pc, #496]	@ (80023c4 <HAL_I2C_Mem_Read+0x228>)
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fb95 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e20b      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Mem_Read+0x56>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e204      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d007      	beq.n	8002218 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002226:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2222      	movs	r2, #34	@ 0x22
 800222c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2240      	movs	r2, #64	@ 0x40
 8002234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002242:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a5c      	ldr	r2, [pc, #368]	@ (80023c8 <HAL_I2C_Mem_Read+0x22c>)
 8002258:	62da      	str	r2, [r3, #44]	@ 0x2c
//    hal_flage = 1;//JH
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800225a:	88f8      	ldrh	r0, [r7, #6]
 800225c:	893a      	ldrh	r2, [r7, #8]
 800225e:	8979      	ldrh	r1, [r7, #10]
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	9301      	str	r3, [sp, #4]
 8002264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	4603      	mov	r3, r0
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 fa62 	bl	8002734 <I2C_RequestMemoryRead>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d004      	beq.n	8002280 <HAL_I2C_Mem_Read+0xe4>
    {
    	hal_flage = 1;//JH
 8002276:	4b55      	ldr	r3, [pc, #340]	@ (80023cc <HAL_I2C_Mem_Read+0x230>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
      return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e1bd      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
//      hal_flage = 1;// Not follow rule can't debug
    }
//    hal_flage = 1;//NJH

    if (hi2c->XferSize == 0U)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002284:	2b00      	cmp	r3, #0
 8002286:	d113      	bne.n	80022b0 <HAL_I2C_Mem_Read+0x114>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002288:	2300      	movs	r3, #0
 800228a:	623b      	str	r3, [r7, #32]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	623b      	str	r3, [r7, #32]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	e191      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d11b      	bne.n	80022f0 <HAL_I2C_Mem_Read+0x154>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022c6:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	61fb      	str	r3, [r7, #28]
 80022dc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e171      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 2U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d11b      	bne.n	8002330 <HAL_I2C_Mem_Read+0x194>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002306:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002316:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002318:	2300      	movs	r3, #0
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	699b      	ldr	r3, [r3, #24]
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	e151      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    }
//    hal_flage = 1;//NJH
    while (hi2c->XferSize > 0U)
 8002346:	e145      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b03      	cmp	r3, #3
 800234e:	f200 80f2 	bhi.w	8002536 <HAL_I2C_Mem_Read+0x39a>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002356:	2b01      	cmp	r3, #1
 8002358:	d123      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x206>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fc7a 	bl	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Read+0x1d2>
          {
            return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e146      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023a0:	e118      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d14f      	bne.n	800244a <HAL_I2C_Mem_Read+0x2ae>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b0:	2200      	movs	r2, #0
 80023b2:	4907      	ldr	r1, [pc, #28]	@ (80023d0 <HAL_I2C_Mem_Read+0x234>)
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f000 faa5 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d009      	beq.n	80023d4 <HAL_I2C_Mem_Read+0x238>
          {
            return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e11b      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
 80023c4:	00100002 	.word	0x00100002
 80023c8:	ffff0000 	.word	0xffff0000
 80023cc:	20000218 	.word	0x20000218
 80023d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29a      	uxth	r2, r3
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243e:	b29b      	uxth	r3, r3
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002448:	e0c4      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	9300      	str	r3, [sp, #0]
 800244e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002450:	2200      	movs	r2, #0
 8002452:	496c      	ldr	r1, [pc, #432]	@ (8002604 <HAL_I2C_Mem_Read+0x468>)
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 fa55 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <HAL_I2C_Mem_Read+0x2c8>
          {
            return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0cb      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002472:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247e:	b2d2      	uxtb	r2, r2
 8002480:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002490:	3b01      	subs	r3, #1
 8002492:	b29a      	uxth	r2, r3
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ac:	2200      	movs	r2, #0
 80024ae:	4955      	ldr	r1, [pc, #340]	@ (8002604 <HAL_I2C_Mem_Read+0x468>)
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f000 fa27 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <HAL_I2C_Mem_Read+0x324>
          {
            return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e09d      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	1c5a      	adds	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	3b01      	subs	r3, #1
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	3b01      	subs	r3, #1
 800252e:	b29a      	uxth	r2, r3
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002534:	e04e      	b.n	80025d4 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002538:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fb8c 	bl	8002c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_I2C_Mem_Read+0x3ae>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e058      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255c:	1c5a      	adds	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002566:	3b01      	subs	r3, #1
 8002568:	b29a      	uxth	r2, r3
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b04      	cmp	r3, #4
 8002588:	d124      	bne.n	80025d4 <HAL_I2C_Mem_Read+0x438>
        {
          if (hi2c->XferSize == 3U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800258e:	2b03      	cmp	r3, #3
 8002590:	d107      	bne.n	80025a2 <HAL_I2C_Mem_Read+0x406>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025be:	3b01      	subs	r3, #1
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f aeb5 	bne.w	8002348 <HAL_I2C_Mem_Read+0x1ac>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
//    hal_flage = 1;//NJH
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
//    hal_flage = 1;//NJH
    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	e000      	b.n	80025fc <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
//	  hal_flage = 1;//NJH
    return HAL_BUSY;
 80025fa:	2302      	movs	r3, #2
  }
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3728      	adds	r7, #40	@ 0x28
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	00010004 	.word	0x00010004

08002608 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af02      	add	r7, sp, #8
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	4608      	mov	r0, r1
 8002612:	4611      	mov	r1, r2
 8002614:	461a      	mov	r2, r3
 8002616:	4603      	mov	r3, r0
 8002618:	817b      	strh	r3, [r7, #10]
 800261a:	460b      	mov	r3, r1
 800261c:	813b      	strh	r3, [r7, #8]
 800261e:	4613      	mov	r3, r2
 8002620:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002630:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	2200      	movs	r2, #0
 800263a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f960 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00d      	beq.n	8002666 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002658:	d103      	bne.n	8002662 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002660:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e05f      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002666:	897b      	ldrh	r3, [r7, #10]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	461a      	mov	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002674:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	492d      	ldr	r1, [pc, #180]	@ (8002730 <I2C_RequestMemoryWrite+0x128>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f9bb 	bl	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e04c      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026a4:	6a39      	ldr	r1, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fa46 	bl	8002b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00d      	beq.n	80026ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d107      	bne.n	80026ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e02b      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026d4:	893b      	ldrh	r3, [r7, #8]
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	e021      	b.n	8002724 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026e0:	893b      	ldrh	r3, [r7, #8]
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f0:	6a39      	ldr	r1, [r7, #32]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fa20 	bl	8002b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00d      	beq.n	800271a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	2b04      	cmp	r3, #4
 8002704:	d107      	bne.n	8002716 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002714:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e005      	b.n	8002726 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800271a:	893b      	ldrh	r3, [r7, #8]
 800271c:	b2da      	uxtb	r2, r3
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3718      	adds	r7, #24
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	00010002 	.word	0x00010002

08002734 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b088      	sub	sp, #32
 8002738:	af02      	add	r7, sp, #8
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	4608      	mov	r0, r1
 800273e:	4611      	mov	r1, r2
 8002740:	461a      	mov	r2, r3
 8002742:	4603      	mov	r3, r0
 8002744:	817b      	strh	r3, [r7, #10]
 8002746:	460b      	mov	r3, r1
 8002748:	813b      	strh	r3, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800275c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800276c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	2200      	movs	r2, #0
 8002776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f8c2 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00d      	beq.n	80027a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002794:	d103      	bne.n	800279e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800279c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e0aa      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027a2:	897b      	ldrh	r3, [r7, #10]
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	461a      	mov	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80027b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	6a3a      	ldr	r2, [r7, #32]
 80027b6:	4952      	ldr	r1, [pc, #328]	@ (8002900 <I2C_RequestMemoryRead+0x1cc>)
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 f91d 	bl	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e097      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027e0:	6a39      	ldr	r1, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f9a8 	bl	8002b38 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e076      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800280a:	88fb      	ldrh	r3, [r7, #6]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d105      	bne.n	800281c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002810:	893b      	ldrh	r3, [r7, #8]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	611a      	str	r2, [r3, #16]
 800281a:	e021      	b.n	8002860 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	b29b      	uxth	r3, r3
 8002822:	b2da      	uxtb	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800282a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800282c:	6a39      	ldr	r1, [r7, #32]
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f982 	bl	8002b38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00d      	beq.n	8002856 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b04      	cmp	r3, #4
 8002840:	d107      	bne.n	8002852 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e050      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002856:	893b      	ldrh	r3, [r7, #8]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002860:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002862:	6a39      	ldr	r1, [r7, #32]
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f967 	bl	8002b38 <I2C_WaitOnTXEFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00d      	beq.n	800288c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002886:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e035      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800289a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 f82b 	bl	8002904 <I2C_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00d      	beq.n	80028d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028c2:	d103      	bne.n	80028cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e013      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80028d0:	897b      	ldrh	r3, [r7, #10]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f043 0301 	orr.w	r3, r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e2:	6a3a      	ldr	r2, [r7, #32]
 80028e4:	4906      	ldr	r1, [pc, #24]	@ (8002900 <I2C_RequestMemoryRead+0x1cc>)
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 f886 	bl	80029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e000      	b.n	80028f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3718      	adds	r7, #24
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	00010002 	.word	0x00010002

08002904 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	4613      	mov	r3, r2
 8002912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002914:	e048      	b.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d044      	beq.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7fe fc35 	bl	800118c <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <I2C_WaitOnFlagUntilTimeout+0x30>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d139      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	0c1b      	lsrs	r3, r3, #16
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d10d      	bne.n	800295a <I2C_WaitOnFlagUntilTimeout+0x56>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	43da      	mvns	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4013      	ands	r3, r2
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	e00c      	b.n	8002974 <I2C_WaitOnFlagUntilTimeout+0x70>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	43da      	mvns	r2, r3
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	4013      	ands	r3, r2
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	bf0c      	ite	eq
 800296c:	2301      	moveq	r3, #1
 800296e:	2300      	movne	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	429a      	cmp	r2, r3
 8002978:	d116      	bne.n	80029a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2220      	movs	r2, #32
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e023      	b.n	80029f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0c1b      	lsrs	r3, r3, #16
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d10d      	bne.n	80029ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4013      	ands	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	e00c      	b.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	43da      	mvns	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	4013      	ands	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	bf0c      	ite	eq
 80029e0:	2301      	moveq	r3, #1
 80029e2:	2300      	movne	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	461a      	mov	r2, r3
 80029e8:	79fb      	ldrb	r3, [r7, #7]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d093      	beq.n	8002916 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
 8002a04:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a06:	e071      	b.n	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a16:	d123      	bne.n	8002a60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e067      	b.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a66:	d041      	beq.n	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a68:	f7fe fb90 	bl	800118c <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d302      	bcc.n	8002a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d136      	bne.n	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	0c1b      	lsrs	r3, r3, #16
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d10c      	bne.n	8002aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	4013      	ands	r3, r2
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	e00b      	b.n	8002aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	43da      	mvns	r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4013      	ands	r3, r2
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	bf14      	ite	ne
 8002ab4:	2301      	movne	r3, #1
 8002ab6:	2300      	moveq	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d016      	beq.n	8002aec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e021      	b.n	8002b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	0c1b      	lsrs	r3, r3, #16
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d10c      	bne.n	8002b10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	43da      	mvns	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4013      	ands	r3, r2
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	e00b      	b.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf14      	ite	ne
 8002b22:	2301      	movne	r3, #1
 8002b24:	2300      	moveq	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f47f af6d 	bne.w	8002a08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b44:	e034      	b.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f8e3 	bl	8002d12 <I2C_IsAcknowledgeFailed>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e034      	b.n	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b5c:	d028      	beq.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	f7fe fb15 	bl	800118c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d302      	bcc.n	8002b74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d11d      	bne.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7e:	2b80      	cmp	r3, #128	@ 0x80
 8002b80:	d016      	beq.n	8002bb0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2220      	movs	r2, #32
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e007      	b.n	8002bc0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	d1c3      	bne.n	8002b46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd4:	e034      	b.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f000 f89b 	bl	8002d12 <I2C_IsAcknowledgeFailed>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e034      	b.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d028      	beq.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bee:	f7fe facd 	bl	800118c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d302      	bcc.n	8002c04 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d11d      	bne.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d016      	beq.n	8002c40 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e007      	b.n	8002c50 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695b      	ldr	r3, [r3, #20]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d1c3      	bne.n	8002bd6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3710      	adds	r7, #16
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c64:	e049      	b.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d119      	bne.n	8002ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f06f 0210 	mvn.w	r2, #16
 8002c7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2220      	movs	r2, #32
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e030      	b.n	8002d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca8:	f7fe fa70 	bl	800118c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d302      	bcc.n	8002cbe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d11d      	bne.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b40      	cmp	r3, #64	@ 0x40
 8002cca:	d016      	beq.n	8002cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f043 0220 	orr.w	r2, r3, #32
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e007      	b.n	8002d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	695b      	ldr	r3, [r3, #20]
 8002d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d04:	2b40      	cmp	r3, #64	@ 0x40
 8002d06:	d1ae      	bne.n	8002c66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d28:	d11b      	bne.n	8002d62 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d32:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e267      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d075      	beq.n	8002e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002d8e:	4b88      	ldr	r3, [pc, #544]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f003 030c 	and.w	r3, r3, #12
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d00c      	beq.n	8002db4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d9a:	4b85      	ldr	r3, [pc, #532]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d112      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002da6:	4b82      	ldr	r3, [pc, #520]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002db2:	d10b      	bne.n	8002dcc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002db4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d05b      	beq.n	8002e78 <HAL_RCC_OscConfig+0x108>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d157      	bne.n	8002e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e242      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd4:	d106      	bne.n	8002de4 <HAL_RCC_OscConfig+0x74>
 8002dd6:	4b76      	ldr	r3, [pc, #472]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a75      	ldr	r2, [pc, #468]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e01d      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x98>
 8002dee:	4b70      	ldr	r3, [pc, #448]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a6f      	ldr	r2, [pc, #444]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b6d      	ldr	r3, [pc, #436]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a6c      	ldr	r2, [pc, #432]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e04:	6013      	str	r3, [r2, #0]
 8002e06:	e00b      	b.n	8002e20 <HAL_RCC_OscConfig+0xb0>
 8002e08:	4b69      	ldr	r3, [pc, #420]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e12:	6013      	str	r3, [r2, #0]
 8002e14:	4b66      	ldr	r3, [pc, #408]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a65      	ldr	r2, [pc, #404]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d013      	beq.n	8002e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e28:	f7fe f9b0 	bl	800118c <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e30:	f7fe f9ac 	bl	800118c <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	@ 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e207      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	e014      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe f99c 	bl	800118c <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e58:	f7fe f998 	bl	800118c <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	@ 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e1f3      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	4b51      	ldr	r3, [pc, #324]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0xe8>
 8002e76:	e000      	b.n	8002e7a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d063      	beq.n	8002f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e92:	4b47      	ldr	r3, [pc, #284]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e9a:	2b08      	cmp	r3, #8
 8002e9c:	d11c      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d116      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eaa:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d005      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e1c7      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	4937      	ldr	r1, [pc, #220]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ed6:	e03a      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d020      	beq.n	8002f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ee0:	4b34      	ldr	r3, [pc, #208]	@ (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7fe f951 	bl	800118c <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	e008      	b.n	8002f00 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002eee:	f7fe f94d 	bl	800118c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e1a8      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	4b2b      	ldr	r3, [pc, #172]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0f0      	beq.n	8002eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4925      	ldr	r1, [pc, #148]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	600b      	str	r3, [r1, #0]
 8002f20:	e015      	b.n	8002f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <HAL_RCC_OscConfig+0x244>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fe f930 	bl	800118c <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f30:	f7fe f92c 	bl	800118c <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e187      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d036      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d016      	beq.n	8002f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f68:	f7fe f910 	bl	800118c <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f70:	f7fe f90c 	bl	800118c <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e167      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	4b0b      	ldr	r3, [pc, #44]	@ (8002fb0 <HAL_RCC_OscConfig+0x240>)
 8002f84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d0f0      	beq.n	8002f70 <HAL_RCC_OscConfig+0x200>
 8002f8e:	e01b      	b.n	8002fc8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f90:	4b09      	ldr	r3, [pc, #36]	@ (8002fb8 <HAL_RCC_OscConfig+0x248>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f96:	f7fe f8f9 	bl	800118c <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f9c:	e00e      	b.n	8002fbc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f9e:	f7fe f8f5 	bl	800118c <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d907      	bls.n	8002fbc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e150      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	42470000 	.word	0x42470000
 8002fb8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbc:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1ea      	bne.n	8002f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8097 	beq.w	8003104 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fda:	4b81      	ldr	r3, [pc, #516]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10f      	bne.n	8003006 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60bb      	str	r3, [r7, #8]
 8002fea:	4b7d      	ldr	r3, [pc, #500]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fee:	4a7c      	ldr	r2, [pc, #496]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ff4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff6:	4b7a      	ldr	r3, [pc, #488]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003002:	2301      	movs	r3, #1
 8003004:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003006:	4b77      	ldr	r3, [pc, #476]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d118      	bne.n	8003044 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003012:	4b74      	ldr	r3, [pc, #464]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a73      	ldr	r2, [pc, #460]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 8003018:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800301c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800301e:	f7fe f8b5 	bl	800118c <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003026:	f7fe f8b1 	bl	800118c <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e10c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	4b6a      	ldr	r3, [pc, #424]	@ (80031e4 <HAL_RCC_OscConfig+0x474>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0f0      	beq.n	8003026 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d106      	bne.n	800305a <HAL_RCC_OscConfig+0x2ea>
 800304c:	4b64      	ldr	r3, [pc, #400]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a63      	ldr	r2, [pc, #396]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
 8003058:	e01c      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d10c      	bne.n	800307c <HAL_RCC_OscConfig+0x30c>
 8003062:	4b5f      	ldr	r3, [pc, #380]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003066:	4a5e      	ldr	r2, [pc, #376]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003068:	f043 0304 	orr.w	r3, r3, #4
 800306c:	6713      	str	r3, [r2, #112]	@ 0x70
 800306e:	4b5c      	ldr	r3, [pc, #368]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003072:	4a5b      	ldr	r2, [pc, #364]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	6713      	str	r3, [r2, #112]	@ 0x70
 800307a:	e00b      	b.n	8003094 <HAL_RCC_OscConfig+0x324>
 800307c:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003080:	4a57      	ldr	r2, [pc, #348]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	6713      	str	r3, [r2, #112]	@ 0x70
 8003088:	4b55      	ldr	r3, [pc, #340]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308c:	4a54      	ldr	r2, [pc, #336]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800308e:	f023 0304 	bic.w	r3, r3, #4
 8003092:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d015      	beq.n	80030c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7fe f876 	bl	800118c <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a2:	e00a      	b.n	80030ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030a4:	f7fe f872 	bl	800118c <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e0cb      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ba:	4b49      	ldr	r3, [pc, #292]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0ee      	beq.n	80030a4 <HAL_RCC_OscConfig+0x334>
 80030c6:	e014      	b.n	80030f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f860 	bl	800118c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d0:	f7fe f85c 	bl	800118c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e0b5      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1ee      	bne.n	80030d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030f2:	7dfb      	ldrb	r3, [r7, #23]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030f8:	4b39      	ldr	r3, [pc, #228]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	4a38      	ldr	r2, [pc, #224]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003102:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b00      	cmp	r3, #0
 800310a:	f000 80a1 	beq.w	8003250 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800310e:	4b34      	ldr	r3, [pc, #208]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b08      	cmp	r3, #8
 8003118:	d05c      	beq.n	80031d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	699b      	ldr	r3, [r3, #24]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d141      	bne.n	80031a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b31      	ldr	r3, [pc, #196]	@ (80031e8 <HAL_RCC_OscConfig+0x478>)
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe f830 	bl	800118c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003130:	f7fe f82c 	bl	800118c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e087      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69da      	ldr	r2, [r3, #28]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a1b      	ldr	r3, [r3, #32]
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	019b      	lsls	r3, r3, #6
 800315e:	431a      	orrs	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	3b01      	subs	r3, #1
 8003168:	041b      	lsls	r3, r3, #16
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	061b      	lsls	r3, r3, #24
 8003172:	491b      	ldr	r1, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x478>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe f805 	bl	800118c <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe f801 	bl	800118c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e05c      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x416>
 80031a4:	e054      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <HAL_RCC_OscConfig+0x478>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fd ffee 	bl	800118c <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fd ffea 	bl	800118c <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e045      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x470>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x444>
 80031d2:	e03d      	b.n	8003250 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e038      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
 80031e0:	40023800 	.word	0x40023800
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031ec:	4b1b      	ldr	r3, [pc, #108]	@ (800325c <HAL_RCC_OscConfig+0x4ec>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d028      	beq.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d121      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003212:	429a      	cmp	r2, r3
 8003214:	d11a      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800321c:	4013      	ands	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003222:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003224:	4293      	cmp	r3, r2
 8003226:	d111      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003232:	085b      	lsrs	r3, r3, #1
 8003234:	3b01      	subs	r3, #1
 8003236:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003246:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003248:	429a      	cmp	r2, r3
 800324a:	d001      	beq.n	8003250 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023800 	.word	0x40023800

08003260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0cc      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003274:	4b68      	ldr	r3, [pc, #416]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	429a      	cmp	r2, r3
 8003280:	d90c      	bls.n	800329c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003282:	4b65      	ldr	r3, [pc, #404]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	683a      	ldr	r2, [r7, #0]
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328a:	4b63      	ldr	r3, [pc, #396]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	429a      	cmp	r2, r3
 8003296:	d001      	beq.n	800329c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0b8      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d020      	beq.n	80032ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b4:	4b59      	ldr	r3, [pc, #356]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	4a58      	ldr	r2, [pc, #352]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032cc:	4b53      	ldr	r3, [pc, #332]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a52      	ldr	r2, [pc, #328]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032d8:	4b50      	ldr	r3, [pc, #320]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	494d      	ldr	r1, [pc, #308]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d044      	beq.n	8003380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d107      	bne.n	800330e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b47      	ldr	r3, [pc, #284]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d119      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e07f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	2b02      	cmp	r3, #2
 8003314:	d003      	beq.n	800331e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800331a:	2b03      	cmp	r3, #3
 800331c:	d107      	bne.n	800332e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331e:	4b3f      	ldr	r3, [pc, #252]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332e:	4b3b      	ldr	r3, [pc, #236]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e067      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333e:	4b37      	ldr	r3, [pc, #220]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f023 0203 	bic.w	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	4934      	ldr	r1, [pc, #208]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003350:	f7fd ff1c 	bl	800118c <HAL_GetTick>
 8003354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003356:	e00a      	b.n	800336e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003358:	f7fd ff18 	bl	800118c <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003366:	4293      	cmp	r3, r2
 8003368:	d901      	bls.n	800336e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e04f      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336e:	4b2b      	ldr	r3, [pc, #172]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 020c 	and.w	r2, r3, #12
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	429a      	cmp	r2, r3
 800337e:	d1eb      	bne.n	8003358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003380:	4b25      	ldr	r3, [pc, #148]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d20c      	bcs.n	80033a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b22      	ldr	r3, [pc, #136]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e032      	b.n	800340e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d008      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b4:	4b19      	ldr	r3, [pc, #100]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	4916      	ldr	r1, [pc, #88]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d009      	beq.n	80033e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d2:	4b12      	ldr	r3, [pc, #72]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	00db      	lsls	r3, r3, #3
 80033e0:	490e      	ldr	r1, [pc, #56]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033e6:	f000 f821 	bl	800342c <HAL_RCC_GetSysClockFreq>
 80033ea:	4602      	mov	r2, r0
 80033ec:	4b0b      	ldr	r3, [pc, #44]	@ (800341c <HAL_RCC_ClockConfig+0x1bc>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	091b      	lsrs	r3, r3, #4
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	490a      	ldr	r1, [pc, #40]	@ (8003420 <HAL_RCC_ClockConfig+0x1c0>)
 80033f8:	5ccb      	ldrb	r3, [r1, r3]
 80033fa:	fa22 f303 	lsr.w	r3, r2, r3
 80033fe:	4a09      	ldr	r2, [pc, #36]	@ (8003424 <HAL_RCC_ClockConfig+0x1c4>)
 8003400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003402:	4b09      	ldr	r3, [pc, #36]	@ (8003428 <HAL_RCC_ClockConfig+0x1c8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7fd fe90 	bl	800112c <HAL_InitTick>

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023c00 	.word	0x40023c00
 800341c:	40023800 	.word	0x40023800
 8003420:	080191c4 	.word	0x080191c4
 8003424:	20000000 	.word	0x20000000
 8003428:	20000004 	.word	0x20000004

0800342c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800342c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003430:	b094      	sub	sp, #80	@ 0x50
 8003432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003438:	2300      	movs	r3, #0
 800343a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003444:	4b79      	ldr	r3, [pc, #484]	@ (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 030c 	and.w	r3, r3, #12
 800344c:	2b08      	cmp	r3, #8
 800344e:	d00d      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x40>
 8003450:	2b08      	cmp	r3, #8
 8003452:	f200 80e1 	bhi.w	8003618 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <HAL_RCC_GetSysClockFreq+0x34>
 800345a:	2b04      	cmp	r3, #4
 800345c:	d003      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x3a>
 800345e:	e0db      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003460:	4b73      	ldr	r3, [pc, #460]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x204>)
 8003462:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003464:	e0db      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003466:	4b73      	ldr	r3, [pc, #460]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x208>)
 8003468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800346a:	e0d8      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b6f      	ldr	r3, [pc, #444]	@ (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003474:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003476:	4b6d      	ldr	r3, [pc, #436]	@ (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d063      	beq.n	800354a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003482:	4b6a      	ldr	r3, [pc, #424]	@ (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	2200      	movs	r2, #0
 800348a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800348c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003494:	633b      	str	r3, [r7, #48]	@ 0x30
 8003496:	2300      	movs	r3, #0
 8003498:	637b      	str	r3, [r7, #52]	@ 0x34
 800349a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800349e:	4622      	mov	r2, r4
 80034a0:	462b      	mov	r3, r5
 80034a2:	f04f 0000 	mov.w	r0, #0
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	0159      	lsls	r1, r3, #5
 80034ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b0:	0150      	lsls	r0, r2, #5
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4621      	mov	r1, r4
 80034b8:	1a51      	subs	r1, r2, r1
 80034ba:	6139      	str	r1, [r7, #16]
 80034bc:	4629      	mov	r1, r5
 80034be:	eb63 0301 	sbc.w	r3, r3, r1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d0:	4659      	mov	r1, fp
 80034d2:	018b      	lsls	r3, r1, #6
 80034d4:	4651      	mov	r1, sl
 80034d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034da:	4651      	mov	r1, sl
 80034dc:	018a      	lsls	r2, r1, #6
 80034de:	4651      	mov	r1, sl
 80034e0:	ebb2 0801 	subs.w	r8, r2, r1
 80034e4:	4659      	mov	r1, fp
 80034e6:	eb63 0901 	sbc.w	r9, r3, r1
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fe:	4690      	mov	r8, r2
 8003500:	4699      	mov	r9, r3
 8003502:	4623      	mov	r3, r4
 8003504:	eb18 0303 	adds.w	r3, r8, r3
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	462b      	mov	r3, r5
 800350c:	eb49 0303 	adc.w	r3, r9, r3
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	f04f 0200 	mov.w	r2, #0
 8003516:	f04f 0300 	mov.w	r3, #0
 800351a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800351e:	4629      	mov	r1, r5
 8003520:	024b      	lsls	r3, r1, #9
 8003522:	4621      	mov	r1, r4
 8003524:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003528:	4621      	mov	r1, r4
 800352a:	024a      	lsls	r2, r1, #9
 800352c:	4610      	mov	r0, r2
 800352e:	4619      	mov	r1, r3
 8003530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003532:	2200      	movs	r2, #0
 8003534:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003536:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003538:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800353c:	f7fd fc6c 	bl	8000e18 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003548:	e058      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b38      	ldr	r3, [pc, #224]	@ (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	2200      	movs	r2, #0
 8003552:	4618      	mov	r0, r3
 8003554:	4611      	mov	r1, r2
 8003556:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800355a:	623b      	str	r3, [r7, #32]
 800355c:	2300      	movs	r3, #0
 800355e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003560:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003564:	4642      	mov	r2, r8
 8003566:	464b      	mov	r3, r9
 8003568:	f04f 0000 	mov.w	r0, #0
 800356c:	f04f 0100 	mov.w	r1, #0
 8003570:	0159      	lsls	r1, r3, #5
 8003572:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003576:	0150      	lsls	r0, r2, #5
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	4641      	mov	r1, r8
 800357e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003582:	4649      	mov	r1, r9
 8003584:	eb63 0b01 	sbc.w	fp, r3, r1
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003594:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003598:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800359c:	ebb2 040a 	subs.w	r4, r2, sl
 80035a0:	eb63 050b 	sbc.w	r5, r3, fp
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	00eb      	lsls	r3, r5, #3
 80035ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035b2:	00e2      	lsls	r2, r4, #3
 80035b4:	4614      	mov	r4, r2
 80035b6:	461d      	mov	r5, r3
 80035b8:	4643      	mov	r3, r8
 80035ba:	18e3      	adds	r3, r4, r3
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	464b      	mov	r3, r9
 80035c0:	eb45 0303 	adc.w	r3, r5, r3
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035d2:	4629      	mov	r1, r5
 80035d4:	028b      	lsls	r3, r1, #10
 80035d6:	4621      	mov	r1, r4
 80035d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035dc:	4621      	mov	r1, r4
 80035de:	028a      	lsls	r2, r1, #10
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e6:	2200      	movs	r2, #0
 80035e8:	61bb      	str	r3, [r7, #24]
 80035ea:	61fa      	str	r2, [r7, #28]
 80035ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035f0:	f7fd fc12 	bl	8000e18 <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4613      	mov	r3, r2
 80035fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_RCC_GetSysClockFreq+0x200>)
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	0c1b      	lsrs	r3, r3, #16
 8003602:	f003 0303 	and.w	r3, r3, #3
 8003606:	3301      	adds	r3, #1
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800360c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800360e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003610:	fbb2 f3f3 	udiv	r3, r2, r3
 8003614:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003616:	e002      	b.n	800361e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b05      	ldr	r3, [pc, #20]	@ (8003630 <HAL_RCC_GetSysClockFreq+0x204>)
 800361a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800361c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800361e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003620:	4618      	mov	r0, r3
 8003622:	3750      	adds	r7, #80	@ 0x50
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	00f42400 	.word	0x00f42400
 8003634:	007a1200 	.word	0x007a1200

08003638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800363c:	4b03      	ldr	r3, [pc, #12]	@ (800364c <HAL_RCC_GetHCLKFreq+0x14>)
 800363e:	681b      	ldr	r3, [r3, #0]
}
 8003640:	4618      	mov	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000000 	.word	0x20000000

08003650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003654:	f7ff fff0 	bl	8003638 <HAL_RCC_GetHCLKFreq>
 8003658:	4602      	mov	r2, r0
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0a9b      	lsrs	r3, r3, #10
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	4903      	ldr	r1, [pc, #12]	@ (8003674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003666:	5ccb      	ldrb	r3, [r1, r3]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800366c:	4618      	mov	r0, r3
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40023800 	.word	0x40023800
 8003674:	080191d4 	.word	0x080191d4

08003678 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e07b      	b.n	8003782 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	2b00      	cmp	r3, #0
 8003690:	d108      	bne.n	80036a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800369a:	d009      	beq.n	80036b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	61da      	str	r2, [r3, #28]
 80036a2:	e005      	b.n	80036b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f005 f91a 	bl	8008904 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036f8:	431a      	orrs	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	431a      	orrs	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003734:	ea42 0103 	orr.w	r1, r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	0c1b      	lsrs	r3, r3, #16
 800374e:	f003 0104 	and.w	r1, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	f003 0210 	and.w	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69da      	ldr	r2, [r3, #28]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003770:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b088      	sub	sp, #32
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379a:	f7fd fcf7 	bl	800118c <HAL_GetTick>
 800379e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80037a0:	88fb      	ldrh	r3, [r7, #6]
 80037a2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d001      	beq.n	80037b4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	e12a      	b.n	8003a0a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0x36>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e122      	b.n	8003a0a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <HAL_SPI_Transmit+0x48>
 80037ce:	2302      	movs	r3, #2
 80037d0:	e11b      	b.n	8003a0a <HAL_SPI_Transmit+0x280>
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2203      	movs	r2, #3
 80037de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	88fa      	ldrh	r2, [r7, #6]
 80037f2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	88fa      	ldrh	r2, [r7, #6]
 80037f8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003820:	d10f      	bne.n	8003842 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003830:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003840:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b40      	cmp	r3, #64	@ 0x40
 800384e:	d007      	beq.n	8003860 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800385e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003868:	d152      	bne.n	8003910 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <HAL_SPI_Transmit+0xee>
 8003872:	8b7b      	ldrh	r3, [r7, #26]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d145      	bne.n	8003904 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	881a      	ldrh	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800389c:	e032      	b.n	8003904 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d112      	bne.n	80038d2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b0:	881a      	ldrh	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038bc:	1c9a      	adds	r2, r3, #2
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	86da      	strh	r2, [r3, #54]	@ 0x36
 80038d0:	e018      	b.n	8003904 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038d2:	f7fd fc5b 	bl	800118c <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d803      	bhi.n	80038ea <HAL_SPI_Transmit+0x160>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e8:	d102      	bne.n	80038f0 <HAL_SPI_Transmit+0x166>
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d109      	bne.n	8003904 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e082      	b.n	8003a0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1c7      	bne.n	800389e <HAL_SPI_Transmit+0x114>
 800390e:	e053      	b.n	80039b8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d002      	beq.n	800391e <HAL_SPI_Transmit+0x194>
 8003918:	8b7b      	ldrh	r3, [r7, #26]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d147      	bne.n	80039ae <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	7812      	ldrb	r2, [r2, #0]
 800392a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	1c5a      	adds	r2, r3, #1
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003944:	e033      	b.n	80039ae <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b02      	cmp	r3, #2
 8003952:	d113      	bne.n	800397c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	7812      	ldrb	r2, [r2, #0]
 8003960:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003966:	1c5a      	adds	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	86da      	strh	r2, [r3, #54]	@ 0x36
 800397a:	e018      	b.n	80039ae <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800397c:	f7fd fc06 	bl	800118c <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d803      	bhi.n	8003994 <HAL_SPI_Transmit+0x20a>
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003992:	d102      	bne.n	800399a <HAL_SPI_Transmit+0x210>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d109      	bne.n	80039ae <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e02d      	b.n	8003a0a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1c6      	bne.n	8003946 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039b8:	69fa      	ldr	r2, [r7, #28]
 80039ba:	6839      	ldr	r1, [r7, #0]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fceb 	bl	8004398 <SPI_EndRxTxTransaction>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	617b      	str	r3, [r7, #20]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	617b      	str	r3, [r7, #20]
 80039ea:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d001      	beq.n	8003a08 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e000      	b.n	8003a0a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b088      	sub	sp, #32
 8003a16:	af02      	add	r7, sp, #8
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d001      	beq.n	8003a32 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e104      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a3a:	d112      	bne.n	8003a62 <HAL_SPI_Receive+0x50>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10e      	bne.n	8003a62 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2204      	movs	r2, #4
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003a4c:	88fa      	ldrh	r2, [r7, #6]
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f8f3 	bl	8003c44 <HAL_SPI_TransmitReceive>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	e0ec      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a62:	f7fd fb93 	bl	800118c <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_SPI_Receive+0x62>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d101      	bne.n	8003a78 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0e1      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d101      	bne.n	8003a86 <HAL_SPI_Receive+0x74>
 8003a82:	2302      	movs	r3, #2
 8003a84:	e0da      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2204      	movs	r2, #4
 8003a92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	88fa      	ldrh	r2, [r7, #6]
 8003aa6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	88fa      	ldrh	r2, [r7, #6]
 8003aac:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2200      	movs	r2, #0
 8003abe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ad4:	d10f      	bne.n	8003af6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003af4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b00:	2b40      	cmp	r3, #64	@ 0x40
 8003b02:	d007      	beq.n	8003b14 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d170      	bne.n	8003bfe <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003b1c:	e035      	b.n	8003b8a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d115      	bne.n	8003b58 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f103 020c 	add.w	r2, r3, #12
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b38:	7812      	ldrb	r2, [r2, #0]
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	b29a      	uxth	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b56:	e018      	b.n	8003b8a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b58:	f7fd fb18 	bl	800118c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d803      	bhi.n	8003b70 <HAL_SPI_Receive+0x15e>
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d102      	bne.n	8003b76 <HAL_SPI_Receive+0x164>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e058      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1c4      	bne.n	8003b1e <HAL_SPI_Receive+0x10c>
 8003b94:	e038      	b.n	8003c08 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d113      	bne.n	8003bcc <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bca:	e018      	b.n	8003bfe <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bcc:	f7fd fade 	bl	800118c <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d803      	bhi.n	8003be4 <HAL_SPI_Receive+0x1d2>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be2:	d102      	bne.n	8003bea <HAL_SPI_Receive+0x1d8>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e01e      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1c6      	bne.n	8003b96 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	6839      	ldr	r1, [r7, #0]
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fb5d 	bl	80042cc <SPI_EndRxTransaction>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	@ 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003c52:	2301      	movs	r3, #1
 8003c54:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c56:	f7fd fa99 	bl	800118c <HAL_GetTick>
 8003c5a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c62:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003c6a:	887b      	ldrh	r3, [r7, #2]
 8003c6c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c6e:	7ffb      	ldrb	r3, [r7, #31]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d00c      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x4a>
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c7a:	d106      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d102      	bne.n	8003c8a <HAL_SPI_TransmitReceive+0x46>
 8003c84:	7ffb      	ldrb	r3, [r7, #31]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d001      	beq.n	8003c8e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e17f      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d005      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x5c>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_SPI_TransmitReceive+0x5c>
 8003c9a:	887b      	ldrh	r3, [r7, #2]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e174      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_SPI_TransmitReceive+0x6e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e16d      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d003      	beq.n	8003cce <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2205      	movs	r2, #5
 8003cca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	887a      	ldrh	r2, [r7, #2]
 8003cde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	887a      	ldrh	r2, [r7, #2]
 8003ce4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	887a      	ldrh	r2, [r7, #2]
 8003cf0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	887a      	ldrh	r2, [r7, #2]
 8003cf6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b40      	cmp	r3, #64	@ 0x40
 8003d10:	d007      	beq.n	8003d22 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d2a:	d17e      	bne.n	8003e2a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <HAL_SPI_TransmitReceive+0xf6>
 8003d34:	8afb      	ldrh	r3, [r7, #22]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d16c      	bne.n	8003e14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	1c9a      	adds	r2, r3, #2
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d5e:	e059      	b.n	8003e14 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d11b      	bne.n	8003da6 <HAL_SPI_TransmitReceive+0x162>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d016      	beq.n	8003da6 <HAL_SPI_TransmitReceive+0x162>
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d113      	bne.n	8003da6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d82:	881a      	ldrh	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d8e:	1c9a      	adds	r2, r3, #2
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003da2:	2300      	movs	r3, #0
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d119      	bne.n	8003de8 <HAL_SPI_TransmitReceive+0x1a4>
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d014      	beq.n	8003de8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc8:	b292      	uxth	r2, r2
 8003dca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	1c9a      	adds	r2, r3, #2
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003de4:	2301      	movs	r3, #1
 8003de6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003de8:	f7fd f9d0 	bl	800118c <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d80d      	bhi.n	8003e14 <HAL_SPI_TransmitReceive+0x1d0>
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d009      	beq.n	8003e14 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0bc      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1a0      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x11c>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d19b      	bne.n	8003d60 <HAL_SPI_TransmitReceive+0x11c>
 8003e28:	e082      	b.n	8003f30 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d002      	beq.n	8003e38 <HAL_SPI_TransmitReceive+0x1f4>
 8003e32:	8afb      	ldrh	r3, [r7, #22]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d171      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	330c      	adds	r3, #12
 8003e42:	7812      	ldrb	r2, [r2, #0]
 8003e44:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e5e:	e05d      	b.n	8003f1c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d11c      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x264>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_SPI_TransmitReceive+0x264>
 8003e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d114      	bne.n	8003ea8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	330c      	adds	r3, #12
 8003e88:	7812      	ldrb	r2, [r2, #0]
 8003e8a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d119      	bne.n	8003eea <HAL_SPI_TransmitReceive+0x2a6>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d014      	beq.n	8003eea <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003eea:	f7fd f94f 	bl	800118c <HAL_GetTick>
 8003eee:	4602      	mov	r2, r0
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d803      	bhi.n	8003f02 <HAL_SPI_TransmitReceive+0x2be>
 8003efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f00:	d102      	bne.n	8003f08 <HAL_SPI_TransmitReceive+0x2c4>
 8003f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d109      	bne.n	8003f1c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e038      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d19c      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x21c>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d197      	bne.n	8003e60 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f30:	6a3a      	ldr	r2, [r7, #32]
 8003f32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fa2f 	bl	8004398 <SPI_EndRxTxTransaction>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2220      	movs	r2, #32
 8003f44:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e01d      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d10a      	bne.n	8003f70 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
  }
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3728      	adds	r7, #40	@ 0x28
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4798      	blx	r3
    return;
 8003fd6:	e0ce      	b.n	8004176 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d009      	beq.n	8003ff6 <HAL_SPI_IRQHandler+0x5e>
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d004      	beq.n	8003ff6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
    return;
 8003ff4:	e0bf      	b.n	8004176 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <HAL_SPI_IRQHandler+0x7e>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004006:	2b00      	cmp	r3, #0
 8004008:	d105      	bne.n	8004016 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 80b0 	beq.w	8004176 <HAL_SPI_IRQHandler+0x1de>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80aa 	beq.w	8004176 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d023      	beq.n	8004074 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b03      	cmp	r3, #3
 8004036:	d011      	beq.n	800405c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403c:	f043 0204 	orr.w	r2, r3, #4
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004044:	2300      	movs	r3, #0
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	617b      	str	r3, [r7, #20]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	e00b      	b.n	8004074 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
        return;
 8004072:	e080      	b.n	8004176 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	f003 0320 	and.w	r3, r3, #32
 800407a:	2b00      	cmp	r3, #0
 800407c:	d014      	beq.n	80040a8 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f043 0208 	orr.w	r2, r3, #8
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d04f      	beq.n	8004174 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040e2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d104      	bne.n	8004100 <HAL_SPI_IRQHandler+0x168>
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d034      	beq.n	800416a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 0203 	bic.w	r2, r2, #3
 800410e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d011      	beq.n	800413c <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411c:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_SPI_IRQHandler+0x1e4>)
 800411e:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004124:	4618      	mov	r0, r3
 8004126:	f7fd f9cd 	bl	80014c4 <HAL_DMA_Abort_IT>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d005      	beq.n	800413c <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004134:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004140:	2b00      	cmp	r3, #0
 8004142:	d016      	beq.n	8004172 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004148:	4a0c      	ldr	r2, [pc, #48]	@ (800417c <HAL_SPI_IRQHandler+0x1e4>)
 800414a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004150:	4618      	mov	r0, r3
 8004152:	f7fd f9b7 	bl	80014c4 <HAL_DMA_Abort_IT>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004160:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004168:	e003      	b.n	8004172 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f808 	bl	8004180 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004170:	e000      	b.n	8004174 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8004172:	bf00      	nop
    return;
 8004174:	bf00      	nop
  }
}
 8004176:	3720      	adds	r7, #32
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	08004195 	.word	0x08004195

08004180 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f7ff ffe6 	bl	8004180 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	4613      	mov	r3, r2
 80041ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041cc:	f7fc ffde 	bl	800118c <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d4:	1a9b      	subs	r3, r3, r2
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	4413      	add	r3, r2
 80041da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80041dc:	f7fc ffd6 	bl	800118c <HAL_GetTick>
 80041e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80041e2:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	015b      	lsls	r3, r3, #5
 80041e8:	0d1b      	lsrs	r3, r3, #20
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041f2:	e054      	b.n	800429e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fa:	d050      	beq.n	800429e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041fc:	f7fc ffc6 	bl	800118c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	429a      	cmp	r2, r3
 800420a:	d902      	bls.n	8004212 <SPI_WaitFlagStateUntilTimeout+0x56>
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d13d      	bne.n	800428e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	685a      	ldr	r2, [r3, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004220:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800422a:	d111      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0x94>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004234:	d004      	beq.n	8004240 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800423e:	d107      	bne.n	8004250 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800424e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004254:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004258:	d10f      	bne.n	800427a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004268:	601a      	str	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004278:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e017      	b.n	80042be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	3b01      	subs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	bf0c      	ite	eq
 80042ae:	2301      	moveq	r3, #1
 80042b0:	2300      	movne	r3, #0
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d19b      	bne.n	80041f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3720      	adds	r7, #32
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000000 	.word	0x20000000

080042cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042e0:	d111      	bne.n	8004306 <SPI_EndRxTransaction+0x3a>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ea:	d004      	beq.n	80042f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f4:	d107      	bne.n	8004306 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004304:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800430e:	d12a      	bne.n	8004366 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004318:	d012      	beq.n	8004340 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2200      	movs	r2, #0
 8004322:	2180      	movs	r1, #128	@ 0x80
 8004324:	68f8      	ldr	r0, [r7, #12]
 8004326:	f7ff ff49 	bl	80041bc <SPI_WaitFlagStateUntilTimeout>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d02d      	beq.n	800438c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004334:	f043 0220 	orr.w	r2, r3, #32
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e026      	b.n	800438e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	2200      	movs	r2, #0
 8004348:	2101      	movs	r1, #1
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f7ff ff36 	bl	80041bc <SPI_WaitFlagStateUntilTimeout>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01a      	beq.n	800438c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800435a:	f043 0220 	orr.w	r2, r3, #32
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e013      	b.n	800438e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2200      	movs	r2, #0
 800436e:	2101      	movs	r1, #1
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f7ff ff23 	bl	80041bc <SPI_WaitFlagStateUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e000      	b.n	800438e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b088      	sub	sp, #32
 800439c:	af02      	add	r7, sp, #8
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2201      	movs	r2, #1
 80043ac:	2102      	movs	r1, #2
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f7ff ff04 	bl	80041bc <SPI_WaitFlagStateUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043be:	f043 0220 	orr.w	r2, r3, #32
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e032      	b.n	8004430 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043ca:	4b1b      	ldr	r3, [pc, #108]	@ (8004438 <SPI_EndRxTxTransaction+0xa0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	@ (800443c <SPI_EndRxTxTransaction+0xa4>)
 80043d0:	fba2 2303 	umull	r2, r3, r2, r3
 80043d4:	0d5b      	lsrs	r3, r3, #21
 80043d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043da:	fb02 f303 	mul.w	r3, r2, r3
 80043de:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043e8:	d112      	bne.n	8004410 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	2180      	movs	r1, #128	@ 0x80
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff fee1 	bl	80041bc <SPI_WaitFlagStateUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d016      	beq.n	800442e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e00f      	b.n	8004430 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	3b01      	subs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004426:	2b80      	cmp	r3, #128	@ 0x80
 8004428:	d0f2      	beq.n	8004410 <SPI_EndRxTxTransaction+0x78>
 800442a:	e000      	b.n	800442e <SPI_EndRxTxTransaction+0x96>
        break;
 800442c:	bf00      	nop
  }

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000000 	.word	0x20000000
 800443c:	165e9f81 	.word	0x165e9f81

08004440 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 0208 	add.w	r2, r3, #8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f103 0208 	add.w	r2, r3, #8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f103 0208 	add.w	r2, r3, #8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
}
 80044d6:	bf00      	nop
 80044d8:	3714      	adds	r7, #20
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr

080044e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80044e2:	b480      	push	{r7}
 80044e4:	b085      	sub	sp, #20
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f8:	d103      	bne.n	8004502 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	e00c      	b.n	800451c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3308      	adds	r3, #8
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	e002      	b.n	8004510 <vListInsert+0x2e>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	60fb      	str	r3, [r7, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d2f6      	bcs.n	800450a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6892      	ldr	r2, [r2, #8]
 800456a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6852      	ldr	r2, [r2, #4]
 8004574:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d103      	bne.n	8004588 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	1e5a      	subs	r2, r3, #1
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d105      	bne.n	80045c8 <xQueueGenericReset+0x20>
 80045bc:	f240 120d 	movw	r2, #269	@ 0x10d
 80045c0:	492a      	ldr	r1, [pc, #168]	@ (800466c <xQueueGenericReset+0xc4>)
 80045c2:	482b      	ldr	r0, [pc, #172]	@ (8004670 <xQueueGenericReset+0xc8>)
 80045c4:	f00c fc04 	bl	8010dd0 <assertFail>

    taskENTER_CRITICAL();
 80045c8:	f002 fc60 	bl	8006e8c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d4:	68f9      	ldr	r1, [r7, #12]
 80045d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	441a      	add	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045f8:	3b01      	subs	r3, #1
 80045fa:	68f9      	ldr	r1, [r7, #12]
 80045fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	441a      	add	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	22ff      	movs	r2, #255	@ 0xff
 800460c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	22ff      	movs	r2, #255	@ 0xff
 8004614:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d114      	bne.n	8004648 <xQueueGenericReset+0xa0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d01a      	beq.n	800465c <xQueueGenericReset+0xb4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3310      	adds	r3, #16
 800462a:	4618      	mov	r0, r3
 800462c:	f001 fc1c 	bl	8005e68 <xTaskRemoveFromEventList>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d012      	beq.n	800465c <xQueueGenericReset+0xb4>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004636:	4b0f      	ldr	r3, [pc, #60]	@ (8004674 <xQueueGenericReset+0xcc>)
 8004638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	e009      	b.n	800465c <xQueueGenericReset+0xb4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3310      	adds	r3, #16
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff fef7 	bl	8004440 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	3324      	adds	r3, #36	@ 0x24
 8004656:	4618      	mov	r0, r3
 8004658:	f7ff fef2 	bl	8004440 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800465c:	f002 fc44 	bl	8006ee8 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004660:	2301      	movs	r3, #1
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	08018368 	.word	0x08018368
 8004670:	0801837c 	.word	0x0801837c
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d105      	bne.n	8004698 <xQueueGenericCreateStatic+0x20>
 800468c:	f44f 72a4 	mov.w	r2, #328	@ 0x148
 8004690:	4929      	ldr	r1, [pc, #164]	@ (8004738 <xQueueGenericCreateStatic+0xc0>)
 8004692:	482a      	ldr	r0, [pc, #168]	@ (800473c <xQueueGenericCreateStatic+0xc4>)
 8004694:	f00c fb9c 	bl	8010dd0 <assertFail>

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue != NULL );
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d105      	bne.n	80046aa <xQueueGenericCreateStatic+0x32>
 800469e:	f44f 72a6 	mov.w	r2, #332	@ 0x14c
 80046a2:	4925      	ldr	r1, [pc, #148]	@ (8004738 <xQueueGenericCreateStatic+0xc0>)
 80046a4:	4826      	ldr	r0, [pc, #152]	@ (8004740 <xQueueGenericCreateStatic+0xc8>)
 80046a6:	f00c fb93 	bl	8010dd0 <assertFail>

        /* A queue storage area should be provided if the item size is not 0, and
         * should not be provided if the item size is 0. */
        configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d002      	beq.n	80046b6 <xQueueGenericCreateStatic+0x3e>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <xQueueGenericCreateStatic+0x42>
 80046b6:	2301      	movs	r3, #1
 80046b8:	e000      	b.n	80046bc <xQueueGenericCreateStatic+0x44>
 80046ba:	2300      	movs	r3, #0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d105      	bne.n	80046cc <xQueueGenericCreateStatic+0x54>
 80046c0:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 80046c4:	491c      	ldr	r1, [pc, #112]	@ (8004738 <xQueueGenericCreateStatic+0xc0>)
 80046c6:	481f      	ldr	r0, [pc, #124]	@ (8004744 <xQueueGenericCreateStatic+0xcc>)
 80046c8:	f00c fb82 	bl	8010dd0 <assertFail>
        configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d102      	bne.n	80046d8 <xQueueGenericCreateStatic+0x60>
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <xQueueGenericCreateStatic+0x64>
 80046d8:	2301      	movs	r3, #1
 80046da:	e000      	b.n	80046de <xQueueGenericCreateStatic+0x66>
 80046dc:	2300      	movs	r3, #0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d105      	bne.n	80046ee <xQueueGenericCreateStatic+0x76>
 80046e2:	f240 1251 	movw	r2, #337	@ 0x151
 80046e6:	4914      	ldr	r1, [pc, #80]	@ (8004738 <xQueueGenericCreateStatic+0xc0>)
 80046e8:	4817      	ldr	r0, [pc, #92]	@ (8004748 <xQueueGenericCreateStatic+0xd0>)
 80046ea:	f00c fb71 	bl	8010dd0 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 80046ee:	2350      	movs	r3, #80	@ 0x50
 80046f0:	613b      	str	r3, [r7, #16]
                configASSERT( xSize == sizeof( Queue_t ) );
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b50      	cmp	r3, #80	@ 0x50
 80046f6:	d005      	beq.n	8004704 <xQueueGenericCreateStatic+0x8c>
 80046f8:	f240 1259 	movw	r2, #345	@ 0x159
 80046fc:	490e      	ldr	r1, [pc, #56]	@ (8004738 <xQueueGenericCreateStatic+0xc0>)
 80046fe:	4813      	ldr	r0, [pc, #76]	@ (800474c <xQueueGenericCreateStatic+0xd4>)
 8004700:	f00c fb66 	bl	8010dd0 <assertFail>
                ( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004704:	693b      	ldr	r3, [r7, #16]
        #endif /* configASSERT_DEFINED */

        /* The address of a statically allocated queue was passed in, use it.
         * The address of a statically allocated storage area was also passed in
         * but is already set. */
        pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	617b      	str	r3, [r7, #20]

        if( pxNewQueue != NULL )
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d00d      	beq.n	800472c <xQueueGenericCreateStatic+0xb4>
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                {
                    /* Queues can be allocated wither statically or dynamically, so
                     * note this queue was allocated statically in case the queue is
                     * later deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004718:	f897 2020 	ldrb.w	r2, [r7, #32]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4613      	mov	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f862 	bl	80047f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800472c:	697b      	ldr	r3, [r7, #20]
    }
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	08018368 	.word	0x08018368
 800473c:	08018384 	.word	0x08018384
 8004740:	080183a8 	.word	0x080183a8
 8004744:	080183c0 	.word	0x080183c0
 8004748:	080183f8 	.word	0x080183f8
 800474c:	08018430 	.word	0x08018430

08004750 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004750:	b580      	push	{r7, lr}
 8004752:	b08a      	sub	sp, #40	@ 0x28
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	4613      	mov	r3, r2
 800475c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d105      	bne.n	8004770 <xQueueGenericCreate+0x20>
 8004764:	f44f 72c3 	mov.w	r2, #390	@ 0x186
 8004768:	491e      	ldr	r1, [pc, #120]	@ (80047e4 <xQueueGenericCreate+0x94>)
 800476a:	481f      	ldr	r0, [pc, #124]	@ (80047e8 <xQueueGenericCreate+0x98>)
 800476c:	f00c fb30 	bl	8010dd0 <assertFail>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <xQueueGenericCreate+0x3e>
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	429a      	cmp	r2, r3
 800478c:	d101      	bne.n	8004792 <xQueueGenericCreate+0x42>
 800478e:	2301      	movs	r3, #1
 8004790:	e000      	b.n	8004794 <xQueueGenericCreate+0x44>
 8004792:	2300      	movs	r3, #0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <xQueueGenericCreate+0x54>
 8004798:	f44f 72c7 	mov.w	r2, #398	@ 0x18e
 800479c:	4911      	ldr	r1, [pc, #68]	@ (80047e4 <xQueueGenericCreate+0x94>)
 800479e:	4813      	ldr	r0, [pc, #76]	@ (80047ec <xQueueGenericCreate+0x9c>)
 80047a0:	f00c fb16 	bl	8010dd0 <assertFail>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	3350      	adds	r3, #80	@ 0x50
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 fc81 	bl	80070b0 <pvPortMalloc>
 80047ae:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d011      	beq.n	80047da <xQueueGenericCreate+0x8a>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	3350      	adds	r3, #80	@ 0x50
 80047be:	617b      	str	r3, [r7, #20]
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047c8:	79fa      	ldrb	r2, [r7, #7]
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 f80b 	bl	80047f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80047da:	69bb      	ldr	r3, [r7, #24]
    }
 80047dc:	4618      	mov	r0, r3
 80047de:	3720      	adds	r7, #32
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	08018368 	.word	0x08018368
 80047e8:	08018384 	.word	0x08018384
 80047ec:	0801844c 	.word	0x0801844c

080047f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
 80047fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e002      	b.n	8004812 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800481e:	2101      	movs	r1, #1
 8004820:	69b8      	ldr	r0, [r7, #24]
 8004822:	f7ff fec1 	bl	80045a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800482e:	bf00      	nop
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8004836:	b580      	push	{r7, lr}
 8004838:	b082      	sub	sp, #8
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00e      	beq.n	8004862 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004856:	2300      	movs	r3, #0
 8004858:	2200      	movs	r2, #0
 800485a:	2100      	movs	r1, #0
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f81f 	bl	80048a0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <xQueueCreateMutexStatic>:

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType,
                                           StaticQueue_t * pxStaticQueue )
    {
 800486a:	b580      	push	{r7, lr}
 800486c:	b088      	sub	sp, #32
 800486e:	af02      	add	r7, sp, #8
 8004870:	4603      	mov	r3, r0
 8004872:	6039      	str	r1, [r7, #0]
 8004874:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004876:	2301      	movs	r3, #1
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]

        /* Prevent compiler warnings about unused parameters if
         * configUSE_TRACE_FACILITY does not equal 1. */
        ( void ) ucQueueType;

        xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	2200      	movs	r2, #0
 8004886:	6939      	ldr	r1, [r7, #16]
 8004888:	6978      	ldr	r0, [r7, #20]
 800488a:	f7ff fef5 	bl	8004678 <xQueueGenericCreateStatic>
 800488e:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7ff ffd0 	bl	8004836 <prvInitialiseMutex>

        return xNewQueue;
 8004896:	68fb      	ldr	r3, [r7, #12]
    }
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	@ 0x28
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
 80048ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80048ae:	2300      	movs	r3, #0
 80048b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d105      	bne.n	80048c8 <xQueueGenericSend+0x28>
 80048bc:	f240 3209 	movw	r2, #777	@ 0x309
 80048c0:	4977      	ldr	r1, [pc, #476]	@ (8004aa0 <xQueueGenericSend+0x200>)
 80048c2:	4878      	ldr	r0, [pc, #480]	@ (8004aa4 <xQueueGenericSend+0x204>)
 80048c4:	f00c fa84 	bl	8010dd0 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <xQueueGenericSend+0x36>
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <xQueueGenericSend+0x3a>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e000      	b.n	80048dc <xQueueGenericSend+0x3c>
 80048da:	2300      	movs	r3, #0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d105      	bne.n	80048ec <xQueueGenericSend+0x4c>
 80048e0:	f240 320a 	movw	r2, #778	@ 0x30a
 80048e4:	496e      	ldr	r1, [pc, #440]	@ (8004aa0 <xQueueGenericSend+0x200>)
 80048e6:	4870      	ldr	r0, [pc, #448]	@ (8004aa8 <xQueueGenericSend+0x208>)
 80048e8:	f00c fa72 	bl	8010dd0 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSend+0x5a>
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <xQueueGenericSend+0x5e>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueGenericSend+0x60>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <xQueueGenericSend+0x70>
 8004904:	f240 320b 	movw	r2, #779	@ 0x30b
 8004908:	4965      	ldr	r1, [pc, #404]	@ (8004aa0 <xQueueGenericSend+0x200>)
 800490a:	4868      	ldr	r0, [pc, #416]	@ (8004aac <xQueueGenericSend+0x20c>)
 800490c:	f00c fa60 	bl	8010dd0 <assertFail>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004910:	f001 fc52 	bl	80061b8 <xTaskGetSchedulerState>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <xQueueGenericSend+0x80>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <xQueueGenericSend+0x84>
 8004920:	2301      	movs	r3, #1
 8004922:	e000      	b.n	8004926 <xQueueGenericSend+0x86>
 8004924:	2300      	movs	r3, #0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <xQueueGenericSend+0x96>
 800492a:	f240 320e 	movw	r2, #782	@ 0x30e
 800492e:	495c      	ldr	r1, [pc, #368]	@ (8004aa0 <xQueueGenericSend+0x200>)
 8004930:	485f      	ldr	r0, [pc, #380]	@ (8004ab0 <xQueueGenericSend+0x210>)
 8004932:	f00c fa4d 	bl	8010dd0 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004936:	f002 faa9 	bl	8006e8c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	429a      	cmp	r2, r3
 8004944:	d302      	bcc.n	800494c <xQueueGenericSend+0xac>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d12f      	bne.n	80049ac <xQueueGenericSend+0x10c>
            {
                traceQUEUE_SEND( pxQueue );
 800494c:	6a3b      	ldr	r3, [r7, #32]
 800494e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004950:	4a58      	ldr	r2, [pc, #352]	@ (8004ab4 <xQueueGenericSend+0x214>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004956:	6013      	str	r3, [r2, #0]
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	68b9      	ldr	r1, [r7, #8]
 800495c:	6a38      	ldr	r0, [r7, #32]
 800495e:	f000 fbdf 	bl	8005120 <prvCopyDataToQueue>
 8004962:	61f8      	str	r0, [r7, #28]

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <xQueueGenericSend+0xee>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	3324      	adds	r3, #36	@ 0x24
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fa79 	bl	8005e68 <xTaskRemoveFromEventList>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d013      	beq.n	80049a4 <xQueueGenericSend+0x104>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800497c:	4b4e      	ldr	r3, [pc, #312]	@ (8004ab8 <xQueueGenericSend+0x218>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
 800498c:	e00a      	b.n	80049a4 <xQueueGenericSend+0x104>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d007      	beq.n	80049a4 <xQueueGenericSend+0x104>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004994:	4b48      	ldr	r3, [pc, #288]	@ (8004ab8 <xQueueGenericSend+0x218>)
 8004996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80049a4:	f002 faa0 	bl	8006ee8 <vPortExitCritical>
                return pdPASS;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e075      	b.n	8004a98 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d109      	bne.n	80049c6 <xQueueGenericSend+0x126>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80049b2:	f002 fa99 	bl	8006ee8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ba:	4a3e      	ldr	r2, [pc, #248]	@ (8004ab4 <xQueueGenericSend+0x214>)
 80049bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80049c0:	6013      	str	r3, [r2, #0]
                    return errQUEUE_FULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e068      	b.n	8004a98 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <xQueueGenericSend+0x13a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 faab 	bl	8005f2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80049da:	f002 fa85 	bl	8006ee8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80049de:	f000 ffd1 	bl	8005984 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80049e2:	f002 fa53 	bl	8006e8c <vPortEnterCritical>
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d103      	bne.n	80049fc <xQueueGenericSend+0x15c>
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d103      	bne.n	8004a12 <xQueueGenericSend+0x172>
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a12:	f002 fa69 	bl	8006ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a16:	1d3a      	adds	r2, r7, #4
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 fa9a 	bl	8005f58 <xTaskCheckForTimeOut>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d12a      	bne.n	8004a80 <xQueueGenericSend+0x1e0>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a2a:	6a38      	ldr	r0, [r7, #32]
 8004a2c:	f000 fc70 	bl	8005310 <prvIsQueueFull>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01e      	beq.n	8004a74 <xQueueGenericSend+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ab4 <xQueueGenericSend+0x214>)
 8004a3c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a40:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	3310      	adds	r3, #16
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f9be 	bl	8005dcc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004a50:	6a38      	ldr	r0, [r7, #32]
 8004a52:	f000 fbf5 	bl	8005240 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004a56:	f000 ffa3 	bl	80059a0 <xTaskResumeAll>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f47f af6a 	bne.w	8004936 <xQueueGenericSend+0x96>
                {
                    portYIELD_WITHIN_API();
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <xQueueGenericSend+0x218>)
 8004a64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	e760      	b.n	8004936 <xQueueGenericSend+0x96>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004a74:	6a38      	ldr	r0, [r7, #32]
 8004a76:	f000 fbe3 	bl	8005240 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004a7a:	f000 ff91 	bl	80059a0 <xTaskResumeAll>
 8004a7e:	e75a      	b.n	8004936 <xQueueGenericSend+0x96>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004a80:	6a38      	ldr	r0, [r7, #32]
 8004a82:	f000 fbdd 	bl	8005240 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004a86:	f000 ff8b 	bl	80059a0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8e:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <xQueueGenericSend+0x214>)
 8004a90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a94:	6013      	str	r3, [r2, #0]
            return errQUEUE_FULL;
 8004a96:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	08018368 	.word	0x08018368
 8004aa4:	0801837c 	.word	0x0801837c
 8004aa8:	0801849c 	.word	0x0801849c
 8004aac:	080184ec 	.word	0x080184ec
 8004ab0:	08018534 	.word	0x08018534
 8004ab4:	e000000c 	.word	0xe000000c
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08c      	sub	sp, #48	@ 0x30
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
 8004ac8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <xQueueGenericSendFromISR+0x24>
 8004ad4:	f240 32dd 	movw	r2, #989	@ 0x3dd
 8004ad8:	4943      	ldr	r1, [pc, #268]	@ (8004be8 <xQueueGenericSendFromISR+0x12c>)
 8004ada:	4844      	ldr	r0, [pc, #272]	@ (8004bec <xQueueGenericSendFromISR+0x130>)
 8004adc:	f00c f978 	bl	8010dd0 <assertFail>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d103      	bne.n	8004aee <xQueueGenericSendFromISR+0x32>
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <xQueueGenericSendFromISR+0x36>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e000      	b.n	8004af4 <xQueueGenericSendFromISR+0x38>
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d105      	bne.n	8004b04 <xQueueGenericSendFromISR+0x48>
 8004af8:	f240 32de 	movw	r2, #990	@ 0x3de
 8004afc:	493a      	ldr	r1, [pc, #232]	@ (8004be8 <xQueueGenericSendFromISR+0x12c>)
 8004afe:	483c      	ldr	r0, [pc, #240]	@ (8004bf0 <xQueueGenericSendFromISR+0x134>)
 8004b00:	f00c f966 	bl	8010dd0 <assertFail>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d103      	bne.n	8004b12 <xQueueGenericSendFromISR+0x56>
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d101      	bne.n	8004b16 <xQueueGenericSendFromISR+0x5a>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <xQueueGenericSendFromISR+0x5c>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <xQueueGenericSendFromISR+0x6c>
 8004b1c:	f240 32df 	movw	r2, #991	@ 0x3df
 8004b20:	4931      	ldr	r1, [pc, #196]	@ (8004be8 <xQueueGenericSendFromISR+0x12c>)
 8004b22:	4834      	ldr	r0, [pc, #208]	@ (8004bf4 <xQueueGenericSendFromISR+0x138>)
 8004b24:	f00c f954 	bl	8010dd0 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b28:	f002 fa88 	bl	800703c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004b2c:	f3ef 8211 	mrs	r2, BASEPRI
 8004b30:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	61ba      	str	r2, [r7, #24]
 8004b42:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004b44:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b46:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <xQueueGenericSendFromISR+0x9e>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d139      	bne.n	8004bce <xQueueGenericSendFromISR+0x112>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	61fb      	str	r3, [r7, #28]
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b70:	f000 fad6 	bl	8005120 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004b74:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d112      	bne.n	8004ba4 <xQueueGenericSendFromISR+0xe8>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <xQueueGenericSendFromISR+0x10c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	3324      	adds	r3, #36	@ 0x24
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f001 f96c 	bl	8005e68 <xTaskRemoveFromEventList>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d018      	beq.n	8004bc8 <xQueueGenericSendFromISR+0x10c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d015      	beq.n	8004bc8 <xQueueGenericSendFromISR+0x10c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e011      	b.n	8004bc8 <xQueueGenericSendFromISR+0x10c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004ba4:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8004ba8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004baa:	d105      	bne.n	8004bb8 <xQueueGenericSendFromISR+0xfc>
 8004bac:	f44f 628d 	mov.w	r2, #1128	@ 0x468
 8004bb0:	490d      	ldr	r1, [pc, #52]	@ (8004be8 <xQueueGenericSendFromISR+0x12c>)
 8004bb2:	4811      	ldr	r0, [pc, #68]	@ (8004bf8 <xQueueGenericSendFromISR+0x13c>)
 8004bb4:	f00c f90c 	bl	8010dd0 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	b25a      	sxtb	r2, r3
 8004bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8004bcc:	e001      	b.n	8004bd2 <xQueueGenericSendFromISR+0x116>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004bdc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3730      	adds	r7, #48	@ 0x30
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	08018368 	.word	0x08018368
 8004bec:	0801837c 	.word	0x0801837c
 8004bf0:	0801849c 	.word	0x0801849c
 8004bf4:	080184ec 	.word	0x080184ec
 8004bf8:	0801858c 	.word	0x0801858c

08004bfc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	623b      	str	r3, [r7, #32]
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d105      	bne.n	8004c1c <xQueueGiveFromISR+0x20>
 8004c10:	f44f 6291 	mov.w	r2, #1160	@ 0x488
 8004c14:	493c      	ldr	r1, [pc, #240]	@ (8004d08 <xQueueGiveFromISR+0x10c>)
 8004c16:	483d      	ldr	r0, [pc, #244]	@ (8004d0c <xQueueGiveFromISR+0x110>)
 8004c18:	f00c f8da 	bl	8010dd0 <assertFail>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d005      	beq.n	8004c30 <xQueueGiveFromISR+0x34>
 8004c24:	f240 428c 	movw	r2, #1164	@ 0x48c
 8004c28:	4937      	ldr	r1, [pc, #220]	@ (8004d08 <xQueueGiveFromISR+0x10c>)
 8004c2a:	4839      	ldr	r0, [pc, #228]	@ (8004d10 <xQueueGiveFromISR+0x114>)
 8004c2c:	f00c f8d0 	bl	8010dd0 <assertFail>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c30:	6a3b      	ldr	r3, [r7, #32]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d103      	bne.n	8004c40 <xQueueGiveFromISR+0x44>
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <xQueueGiveFromISR+0x48>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <xQueueGiveFromISR+0x4a>
 8004c44:	2300      	movs	r3, #0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d105      	bne.n	8004c56 <xQueueGiveFromISR+0x5a>
 8004c4a:	f240 4291 	movw	r2, #1169	@ 0x491
 8004c4e:	492e      	ldr	r1, [pc, #184]	@ (8004d08 <xQueueGiveFromISR+0x10c>)
 8004c50:	4830      	ldr	r0, [pc, #192]	@ (8004d14 <xQueueGiveFromISR+0x118>)
 8004c52:	f00c f8bd 	bl	8010dd0 <assertFail>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c56:	f002 f9f1 	bl	800703c <vPortValidateInterruptPriority>
        __asm volatile
 8004c5a:	f3ef 8211 	mrs	r2, BASEPRI
 8004c5e:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	613a      	str	r2, [r7, #16]
 8004c70:	60fb      	str	r3, [r7, #12]
        return ulOriginalBASEPRI;
 8004c72:	693b      	ldr	r3, [r7, #16]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c74:	61fb      	str	r3, [r7, #28]
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c7a:	61bb      	str	r3, [r7, #24]

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d233      	bcs.n	8004cee <xQueueGiveFromISR+0xf2>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c8c:	75fb      	strb	r3, [r7, #23]
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	639a      	str	r2, [r3, #56]	@ 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9e:	d112      	bne.n	8004cc6 <xQueueGiveFromISR+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01f      	beq.n	8004ce8 <xQueueGiveFromISR+0xec>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	3324      	adds	r3, #36	@ 0x24
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 f8db 	bl	8005e68 <xTaskRemoveFromEventList>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d017      	beq.n	8004ce8 <xQueueGiveFromISR+0xec>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d014      	beq.n	8004ce8 <xQueueGiveFromISR+0xec>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e010      	b.n	8004ce8 <xQueueGiveFromISR+0xec>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004cc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ccc:	d105      	bne.n	8004cda <xQueueGiveFromISR+0xde>
 8004cce:	f44f 62a2 	mov.w	r2, #1296	@ 0x510
 8004cd2:	490d      	ldr	r1, [pc, #52]	@ (8004d08 <xQueueGiveFromISR+0x10c>)
 8004cd4:	4810      	ldr	r0, [pc, #64]	@ (8004d18 <xQueueGiveFromISR+0x11c>)
 8004cd6:	f00c f87b 	bl	8010dd0 <assertFail>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	b25a      	sxtb	r2, r3
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cec:	e001      	b.n	8004cf2 <xQueueGiveFromISR+0xf6>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	60bb      	str	r3, [r7, #8]
        __asm volatile
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f383 8811 	msr	BASEPRI, r3
    }
 8004cfc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3728      	adds	r7, #40	@ 0x28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	08018368 	.word	0x08018368
 8004d0c:	0801837c 	.word	0x0801837c
 8004d10:	080185a8 	.word	0x080185a8
 8004d14:	080185c4 	.word	0x080185c4
 8004d18:	0801858c 	.word	0x0801858c

08004d1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004d30:	6a3b      	ldr	r3, [r7, #32]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d105      	bne.n	8004d42 <xQueueReceive+0x26>
 8004d36:	f240 522c 	movw	r2, #1324	@ 0x52c
 8004d3a:	4962      	ldr	r1, [pc, #392]	@ (8004ec4 <xQueueReceive+0x1a8>)
 8004d3c:	4862      	ldr	r0, [pc, #392]	@ (8004ec8 <xQueueReceive+0x1ac>)
 8004d3e:	f00c f847 	bl	8010dd0 <assertFail>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d103      	bne.n	8004d50 <xQueueReceive+0x34>
 8004d48:	6a3b      	ldr	r3, [r7, #32]
 8004d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <xQueueReceive+0x38>
 8004d50:	2301      	movs	r3, #1
 8004d52:	e000      	b.n	8004d56 <xQueueReceive+0x3a>
 8004d54:	2300      	movs	r3, #0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d105      	bne.n	8004d66 <xQueueReceive+0x4a>
 8004d5a:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 8004d5e:	4959      	ldr	r1, [pc, #356]	@ (8004ec4 <xQueueReceive+0x1a8>)
 8004d60:	485a      	ldr	r0, [pc, #360]	@ (8004ecc <xQueueReceive+0x1b0>)
 8004d62:	f00c f835 	bl	8010dd0 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d66:	f001 fa27 	bl	80061b8 <xTaskGetSchedulerState>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d102      	bne.n	8004d76 <xQueueReceive+0x5a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <xQueueReceive+0x5e>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e000      	b.n	8004d7c <xQueueReceive+0x60>
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d105      	bne.n	8004d8c <xQueueReceive+0x70>
 8004d80:	f240 5235 	movw	r2, #1333	@ 0x535
 8004d84:	494f      	ldr	r1, [pc, #316]	@ (8004ec4 <xQueueReceive+0x1a8>)
 8004d86:	4852      	ldr	r0, [pc, #328]	@ (8004ed0 <xQueueReceive+0x1b4>)
 8004d88:	f00c f822 	bl	8010dd0 <assertFail>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004d8c:	f002 f87e 	bl	8006e8c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d94:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01f      	beq.n	8004ddc <xQueueReceive+0xc0>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	6a38      	ldr	r0, [r7, #32]
 8004da0:	f000 fa28 	bl	80051f4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	6a3b      	ldr	r3, [r7, #32]
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00f      	beq.n	8004dd4 <xQueueReceive+0xb8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	3310      	adds	r3, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 f855 	bl	8005e68 <xTaskRemoveFromEventList>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <xQueueReceive+0xb8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004dc4:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <xQueueReceive+0x1b8>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004dd4:	f002 f888 	bl	8006ee8 <vPortExitCritical>
                return pdPASS;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e06f      	b.n	8004ebc <xQueueReceive+0x1a0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d103      	bne.n	8004dea <xQueueReceive+0xce>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004de2:	f002 f881 	bl	8006ee8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e068      	b.n	8004ebc <xQueueReceive+0x1a0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <xQueueReceive+0xe2>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004df0:	f107 0314 	add.w	r3, r7, #20
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 f899 	bl	8005f2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004dfe:	f002 f873 	bl	8006ee8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004e02:	f000 fdbf 	bl	8005984 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004e06:	f002 f841 	bl	8006e8c <vPortEnterCritical>
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e10:	b25b      	sxtb	r3, r3
 8004e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e16:	d103      	bne.n	8004e20 <xQueueReceive+0x104>
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e20:	6a3b      	ldr	r3, [r7, #32]
 8004e22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e26:	b25b      	sxtb	r3, r3
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d103      	bne.n	8004e36 <xQueueReceive+0x11a>
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e36:	f002 f857 	bl	8006ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e3a:	1d3a      	adds	r2, r7, #4
 8004e3c:	f107 0314 	add.w	r3, r7, #20
 8004e40:	4611      	mov	r1, r2
 8004e42:	4618      	mov	r0, r3
 8004e44:	f001 f888 	bl	8005f58 <xTaskCheckForTimeOut>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d129      	bne.n	8004ea2 <xQueueReceive+0x186>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e4e:	6a38      	ldr	r0, [r7, #32]
 8004e50:	f000 fa48 	bl	80052e4 <prvIsQueueEmpty>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d01d      	beq.n	8004e96 <xQueueReceive+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ed8 <xQueueReceive+0x1bc>)
 8004e60:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8004e64:	6013      	str	r3, [r2, #0]
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	3324      	adds	r3, #36	@ 0x24
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 ffac 	bl	8005dcc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004e74:	6a38      	ldr	r0, [r7, #32]
 8004e76:	f000 f9e3 	bl	8005240 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004e7a:	f000 fd91 	bl	80059a0 <xTaskResumeAll>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d183      	bne.n	8004d8c <xQueueReceive+0x70>
                {
                    portYIELD_WITHIN_API();
 8004e84:	4b13      	ldr	r3, [pc, #76]	@ (8004ed4 <xQueueReceive+0x1b8>)
 8004e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	f3bf 8f6f 	isb	sy
 8004e94:	e77a      	b.n	8004d8c <xQueueReceive+0x70>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004e96:	6a38      	ldr	r0, [r7, #32]
 8004e98:	f000 f9d2 	bl	8005240 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004e9c:	f000 fd80 	bl	80059a0 <xTaskResumeAll>
 8004ea0:	e774      	b.n	8004d8c <xQueueReceive+0x70>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004ea2:	6a38      	ldr	r0, [r7, #32]
 8004ea4:	f000 f9cc 	bl	8005240 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004ea8:	f000 fd7a 	bl	80059a0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004eac:	6a38      	ldr	r0, [r7, #32]
 8004eae:	f000 fa19 	bl	80052e4 <prvIsQueueEmpty>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f43f af69 	beq.w	8004d8c <xQueueReceive+0x70>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004eba:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3728      	adds	r7, #40	@ 0x28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	08018368 	.word	0x08018368
 8004ec8:	0801862c 	.word	0x0801862c
 8004ecc:	08018638 	.word	0x08018638
 8004ed0:	08018534 	.word	0x08018534
 8004ed4:	e000ed04 	.word	0xe000ed04
 8004ed8:	e000000c 	.word	0xe000000c

08004edc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	@ 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	623b      	str	r3, [r7, #32]
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d105      	bne.n	8004f04 <xQueueSemaphoreTake+0x28>
 8004ef8:	f240 52be 	movw	r2, #1470	@ 0x5be
 8004efc:	4975      	ldr	r1, [pc, #468]	@ (80050d4 <xQueueSemaphoreTake+0x1f8>)
 8004efe:	4876      	ldr	r0, [pc, #472]	@ (80050d8 <xQueueSemaphoreTake+0x1fc>)
 8004f00:	f00b ff66 	bl	8010dd0 <assertFail>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <xQueueSemaphoreTake+0x3c>
 8004f0c:	f240 52c2 	movw	r2, #1474	@ 0x5c2
 8004f10:	4970      	ldr	r1, [pc, #448]	@ (80050d4 <xQueueSemaphoreTake+0x1f8>)
 8004f12:	4872      	ldr	r0, [pc, #456]	@ (80050dc <xQueueSemaphoreTake+0x200>)
 8004f14:	f00b ff5c 	bl	8010dd0 <assertFail>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f18:	f001 f94e 	bl	80061b8 <xTaskGetSchedulerState>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <xQueueSemaphoreTake+0x4c>
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <xQueueSemaphoreTake+0x50>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <xQueueSemaphoreTake+0x52>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d105      	bne.n	8004f3e <xQueueSemaphoreTake+0x62>
 8004f32:	f240 52c7 	movw	r2, #1479	@ 0x5c7
 8004f36:	4967      	ldr	r1, [pc, #412]	@ (80050d4 <xQueueSemaphoreTake+0x1f8>)
 8004f38:	4869      	ldr	r0, [pc, #420]	@ (80050e0 <xQueueSemaphoreTake+0x204>)
 8004f3a:	f00b ff49 	bl	8010dd0 <assertFail>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004f3e:	f001 ffa5 	bl	8006e8c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f46:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d024      	beq.n	8004f98 <xQueueSemaphoreTake+0xbc>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d104      	bne.n	8004f68 <xQueueSemaphoreTake+0x8c>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004f5e:	f001 fabf 	bl	80064e0 <pvTaskIncrementMutexHeldCount>
 8004f62:	4602      	mov	r2, r0
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00f      	beq.n	8004f90 <xQueueSemaphoreTake+0xb4>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	3310      	adds	r3, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 ff77 	bl	8005e68 <xTaskRemoveFromEventList>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <xQueueSemaphoreTake+0xb4>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004f80:	4b58      	ldr	r3, [pc, #352]	@ (80050e4 <xQueueSemaphoreTake+0x208>)
 8004f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004f90:	f001 ffaa 	bl	8006ee8 <vPortExitCritical>
                return pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e098      	b.n	80050ca <xQueueSemaphoreTake+0x1ee>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10c      	bne.n	8004fb8 <xQueueSemaphoreTake+0xdc>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <xQueueSemaphoreTake+0xd4>
 8004fa4:	f240 620d 	movw	r2, #1549	@ 0x60d
 8004fa8:	494a      	ldr	r1, [pc, #296]	@ (80050d4 <xQueueSemaphoreTake+0x1f8>)
 8004faa:	484f      	ldr	r0, [pc, #316]	@ (80050e8 <xQueueSemaphoreTake+0x20c>)
 8004fac:	f00b ff10 	bl	8010dd0 <assertFail>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8004fb0:	f001 ff9a 	bl	8006ee8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	e088      	b.n	80050ca <xQueueSemaphoreTake+0x1ee>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <xQueueSemaphoreTake+0xf0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004fbe:	f107 030c 	add.w	r3, r7, #12
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 ffb2 	bl	8005f2c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004fcc:	f001 ff8c 	bl	8006ee8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004fd0:	f000 fcd8 	bl	8005984 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004fd4:	f001 ff5a 	bl	8006e8c <vPortEnterCritical>
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fde:	b25b      	sxtb	r3, r3
 8004fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe4:	d103      	bne.n	8004fee <xQueueSemaphoreTake+0x112>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ff4:	b25b      	sxtb	r3, r3
 8004ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffa:	d103      	bne.n	8005004 <xQueueSemaphoreTake+0x128>
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005004:	f001 ff70 	bl	8006ee8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005008:	463a      	mov	r2, r7
 800500a:	f107 030c 	add.w	r3, r7, #12
 800500e:	4611      	mov	r1, r2
 8005010:	4618      	mov	r0, r3
 8005012:	f000 ffa1 	bl	8005f58 <xTaskCheckForTimeOut>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d138      	bne.n	800508e <xQueueSemaphoreTake+0x1b2>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501c:	69f8      	ldr	r0, [r7, #28]
 800501e:	f000 f961 	bl	80052e4 <prvIsQueueEmpty>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d02c      	beq.n	8005082 <xQueueSemaphoreTake+0x1a6>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502c:	4a2f      	ldr	r2, [pc, #188]	@ (80050ec <xQueueSemaphoreTake+0x210>)
 800502e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8005032:	6013      	str	r3, [r2, #0]

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d109      	bne.n	8005050 <xQueueSemaphoreTake+0x174>
                        {
                            taskENTER_CRITICAL();
 800503c:	f001 ff26 	bl	8006e8c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	4618      	mov	r0, r3
 8005046:	f001 f8d5 	bl	80061f4 <xTaskPriorityInherit>
 800504a:	6238      	str	r0, [r7, #32]
                            }
                            taskEXIT_CRITICAL();
 800504c:	f001 ff4c 	bl	8006ee8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	3324      	adds	r3, #36	@ 0x24
 8005054:	683a      	ldr	r2, [r7, #0]
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f000 feb7 	bl	8005dcc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800505e:	69f8      	ldr	r0, [r7, #28]
 8005060:	f000 f8ee 	bl	8005240 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005064:	f000 fc9c 	bl	80059a0 <xTaskResumeAll>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f47f af67 	bne.w	8004f3e <xQueueSemaphoreTake+0x62>
                {
                    portYIELD_WITHIN_API();
 8005070:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <xQueueSemaphoreTake+0x208>)
 8005072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005076:	601a      	str	r2, [r3, #0]
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	f3bf 8f6f 	isb	sy
 8005080:	e75d      	b.n	8004f3e <xQueueSemaphoreTake+0x62>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8005082:	69f8      	ldr	r0, [r7, #28]
 8005084:	f000 f8dc 	bl	8005240 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005088:	f000 fc8a 	bl	80059a0 <xTaskResumeAll>
 800508c:	e757      	b.n	8004f3e <xQueueSemaphoreTake+0x62>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800508e:	69f8      	ldr	r0, [r7, #28]
 8005090:	f000 f8d6 	bl	8005240 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005094:	f000 fc84 	bl	80059a0 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005098:	69f8      	ldr	r0, [r7, #28]
 800509a:	f000 f923 	bl	80052e4 <prvIsQueueEmpty>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f43f af4c 	beq.w	8004f3e <xQueueSemaphoreTake+0x62>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00d      	beq.n	80050c8 <xQueueSemaphoreTake+0x1ec>
                        {
                            taskENTER_CRITICAL();
 80050ac:	f001 feee 	bl	8006e8c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80050b0:	69f8      	ldr	r0, [r7, #28]
 80050b2:	f000 f81d 	bl	80050f0 <prvGetDisinheritPriorityAfterTimeout>
 80050b6:	6178      	str	r0, [r7, #20]
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	6979      	ldr	r1, [r7, #20]
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 f984 	bl	80063cc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80050c4:	f001 ff10 	bl	8006ee8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80050c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3728      	adds	r7, #40	@ 0x28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	08018368 	.word	0x08018368
 80050d8:	0801862c 	.word	0x0801862c
 80050dc:	080185a8 	.word	0x080185a8
 80050e0:	08018534 	.word	0x08018534
 80050e4:	e000ed04 	.word	0xe000ed04
 80050e8:	0801868c 	.word	0x0801868c
 80050ec:	e000000c 	.word	0xe000000c

080050f0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d006      	beq.n	800510e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1c3 0306 	rsb	r3, r3, #6
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8005112:	68fb      	ldr	r3, [r7, #12]
    }
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10d      	bne.n	800515a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d14d      	bne.n	80051e2 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	4618      	mov	r0, r3
 800514c:	f001 f8c8 	bl	80062e0 <xTaskPriorityDisinherit>
 8005150:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	609a      	str	r2, [r3, #8]
 8005158:	e043      	b.n	80051e2 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d119      	bne.n	8005194 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6858      	ldr	r0, [r3, #4]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005168:	461a      	mov	r2, r3
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	f011 f908 	bl	8016380 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	429a      	cmp	r2, r3
 8005188:	d32b      	bcc.n	80051e2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	605a      	str	r2, [r3, #4]
 8005192:	e026      	b.n	80051e2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68d8      	ldr	r0, [r3, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	461a      	mov	r2, r3
 800519e:	68b9      	ldr	r1, [r7, #8]
 80051a0:	f011 f8ee 	bl	8016380 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ac:	425b      	negs	r3, r3
 80051ae:	441a      	add	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68da      	ldr	r2, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d207      	bcs.n	80051d0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	425b      	negs	r3, r3
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d105      	bne.n	80051e2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	3b01      	subs	r3, #1
 80051e0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80051ea:	697b      	ldr	r3, [r7, #20]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d018      	beq.n	8005238 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	68da      	ldr	r2, [r3, #12]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520e:	441a      	add	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68da      	ldr	r2, [r3, #12]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	429a      	cmp	r2, r3
 800521e:	d303      	bcc.n	8005228 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	68d9      	ldr	r1, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	461a      	mov	r2, r3
 8005232:	6838      	ldr	r0, [r7, #0]
 8005234:	f011 f8a4 	bl	8016380 <memcpy>
    }
}
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005248:	f001 fe20 	bl	8006e8c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005252:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005254:	e011      	b.n	800527a <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525a:	2b00      	cmp	r3, #0
 800525c:	d012      	beq.n	8005284 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3324      	adds	r3, #36	@ 0x24
 8005262:	4618      	mov	r0, r3
 8005264:	f000 fe00 	bl	8005e68 <xTaskRemoveFromEventList>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800526e:	f000 fed5 	bl	800601c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005272:	7bfb      	ldrb	r3, [r7, #15]
 8005274:	3b01      	subs	r3, #1
 8005276:	b2db      	uxtb	r3, r3
 8005278:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800527a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	dce9      	bgt.n	8005256 <prvUnlockQueue+0x16>
 8005282:	e000      	b.n	8005286 <prvUnlockQueue+0x46>
                        break;
 8005284:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	22ff      	movs	r2, #255	@ 0xff
 800528a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800528e:	f001 fe2b 	bl	8006ee8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005292:	f001 fdfb 	bl	8006e8c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800529c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800529e:	e011      	b.n	80052c4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d012      	beq.n	80052ce <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3310      	adds	r3, #16
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fddb 	bl	8005e68 <xTaskRemoveFromEventList>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80052b8:	f000 feb0 	bl	800601c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	3b01      	subs	r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80052c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dce9      	bgt.n	80052a0 <prvUnlockQueue+0x60>
 80052cc:	e000      	b.n	80052d0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80052ce:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	22ff      	movs	r2, #255	@ 0xff
 80052d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80052d8:	f001 fe06 	bl	8006ee8 <vPortExitCritical>
}
 80052dc:	bf00      	nop
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80052ec:	f001 fdce 	bl	8006e8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d102      	bne.n	80052fe <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80052f8:	2301      	movs	r3, #1
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e001      	b.n	8005302 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005302:	f001 fdf1 	bl	8006ee8 <vPortExitCritical>

    return xReturn;
 8005306:	68fb      	ldr	r3, [r7, #12]
}
 8005308:	4618      	mov	r0, r3
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005318:	f001 fdb8 	bl	8006e8c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005324:	429a      	cmp	r2, r3
 8005326:	d102      	bne.n	800532e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005328:	2301      	movs	r3, #1
 800532a:	60fb      	str	r3, [r7, #12]
 800532c:	e001      	b.n	8005332 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005332:	f001 fdd9 	bl	8006ee8 <vPortExitCritical>

    return xReturn;
 8005336:	68fb      	ldr	r3, [r7, #12]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800534a:	2300      	movs	r3, #0
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	e014      	b.n	800537a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005350:	4a0f      	ldr	r2, [pc, #60]	@ (8005390 <vQueueAddToRegistry+0x50>)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800535c:	490c      	ldr	r1, [pc, #48]	@ (8005390 <vQueueAddToRegistry+0x50>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	683a      	ldr	r2, [r7, #0]
 8005362:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005366:	4a0a      	ldr	r2, [pc, #40]	@ (8005390 <vQueueAddToRegistry+0x50>)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005372:	e006      	b.n	8005382 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3301      	adds	r3, #1
 8005378:	60fb      	str	r3, [r7, #12]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b09      	cmp	r3, #9
 800537e:	d9e7      	bls.n	8005350 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005380:	bf00      	nop
 8005382:	bf00      	nop
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	2000021c 	.word	0x2000021c

08005394 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80053a4:	f001 fd72 	bl	8006e8c <vPortEnterCritical>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053ae:	b25b      	sxtb	r3, r3
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b4:	d103      	bne.n	80053be <vQueueWaitForMessageRestricted+0x2a>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053c4:	b25b      	sxtb	r3, r3
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	d103      	bne.n	80053d4 <vQueueWaitForMessageRestricted+0x40>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053d4:	f001 fd88 	bl	8006ee8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3324      	adds	r3, #36	@ 0x24
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fd13 	bl	8005e14 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80053ee:	6978      	ldr	r0, [r7, #20]
 80053f0:	f7ff ff26 	bl	8005240 <prvUnlockQueue>
    }
 80053f4:	bf00      	nop
 80053f6:	3718      	adds	r7, #24
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <xTaskCreateStatic>:
                                    const uint32_t ulStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08c      	sub	sp, #48	@ 0x30
 8005400:	af04      	add	r7, sp, #16
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        TaskHandle_t xReturn;

        configASSERT( puxStackBuffer != NULL );
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	2b00      	cmp	r3, #0
 800540e:	d105      	bne.n	800541c <xTaskCreateStatic+0x20>
 8005410:	f240 2243 	movw	r2, #579	@ 0x243
 8005414:	4920      	ldr	r1, [pc, #128]	@ (8005498 <xTaskCreateStatic+0x9c>)
 8005416:	4821      	ldr	r0, [pc, #132]	@ (800549c <xTaskCreateStatic+0xa0>)
 8005418:	f00b fcda 	bl	8010dd0 <assertFail>
        configASSERT( pxTaskBuffer != NULL );
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	2b00      	cmp	r3, #0
 8005420:	d105      	bne.n	800542e <xTaskCreateStatic+0x32>
 8005422:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8005426:	491c      	ldr	r1, [pc, #112]	@ (8005498 <xTaskCreateStatic+0x9c>)
 8005428:	481d      	ldr	r0, [pc, #116]	@ (80054a0 <xTaskCreateStatic+0xa4>)
 800542a:	f00b fcd1 	bl	8010dd0 <assertFail>
        #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticTask_t equals the size of the real task
                 * structure. */
                volatile size_t xSize = sizeof( StaticTask_t );
 800542e:	2364      	movs	r3, #100	@ 0x64
 8005430:	617b      	str	r3, [r7, #20]
                configASSERT( xSize == sizeof( TCB_t ) );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b64      	cmp	r3, #100	@ 0x64
 8005436:	d005      	beq.n	8005444 <xTaskCreateStatic+0x48>
 8005438:	f44f 7213 	mov.w	r2, #588	@ 0x24c
 800543c:	4916      	ldr	r1, [pc, #88]	@ (8005498 <xTaskCreateStatic+0x9c>)
 800543e:	4819      	ldr	r0, [pc, #100]	@ (80054a4 <xTaskCreateStatic+0xa8>)
 8005440:	f00b fcc6 	bl	8010dd0 <assertFail>
                ( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005444:	697b      	ldr	r3, [r7, #20]
            }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01e      	beq.n	800548a <xTaskCreateStatic+0x8e>
 800544c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544e:	2b00      	cmp	r3, #0
 8005450:	d01b      	beq.n	800548a <xTaskCreateStatic+0x8e>
        {
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	61fb      	str	r3, [r7, #28]
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800545a:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created statically in case the task is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005464:	2300      	movs	r3, #0
 8005466:	9303      	str	r3, [sp, #12]
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	9302      	str	r3, [sp, #8]
 800546c:	f107 0318 	add.w	r3, r7, #24
 8005470:	9301      	str	r3, [sp, #4]
 8005472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f859 	bl	8005534 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005482:	69f8      	ldr	r0, [r7, #28]
 8005484:	f000 f8f4 	bl	8005670 <prvAddNewTaskToReadyList>
 8005488:	e001      	b.n	800548e <xTaskCreateStatic+0x92>
        }
        else
        {
            xReturn = NULL;
 800548a:	2300      	movs	r3, #0
 800548c:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800548e:	69bb      	ldr	r3, [r7, #24]
    }
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	08018738 	.word	0x08018738
 800549c:	0801874c 	.word	0x0801874c
 80054a0:	08018764 	.word	0x08018764
 80054a4:	0801877c 	.word	0x0801877c

080054a8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	@ 0x30
 80054ac:	af04      	add	r7, sp, #16
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	603b      	str	r3, [r7, #0]
 80054b4:	4613      	mov	r3, r2
 80054b6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 fdf7 	bl	80070b0 <pvPortMalloc>
 80054c2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00e      	beq.n	80054e8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80054ca:	2064      	movs	r0, #100	@ 0x64
 80054cc:	f001 fdf0 	bl	80070b0 <pvPortMalloc>
 80054d0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80054d2:	69fb      	ldr	r3, [r7, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	697a      	ldr	r2, [r7, #20]
 80054dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80054de:	e005      	b.n	80054ec <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f001 fead 	bl	8007240 <vPortFree>
 80054e6:	e001      	b.n	80054ec <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d017      	beq.n	8005522 <xTaskCreate+0x7a>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
                {
                    /* Tasks can be created statically or dynamically, so note this
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054fa:	88fa      	ldrh	r2, [r7, #6]
 80054fc:	2300      	movs	r3, #0
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	9302      	str	r3, [sp, #8]
 8005504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005506:	9301      	str	r3, [sp, #4]
 8005508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550a:	9300      	str	r3, [sp, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	68f8      	ldr	r0, [r7, #12]
 8005512:	f000 f80f 	bl	8005534 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005516:	69f8      	ldr	r0, [r7, #28]
 8005518:	f000 f8aa 	bl	8005670 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800551c:	2301      	movs	r3, #1
 800551e:	61bb      	str	r3, [r7, #24]
 8005520:	e002      	b.n	8005528 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005522:	f04f 33ff 	mov.w	r3, #4294967295
 8005526:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005528:	69bb      	ldr	r3, [r7, #24]
    }
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
	...

08005534 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	461a      	mov	r2, r3
 800554c:	21a5      	movs	r1, #165	@ 0xa5
 800554e:	f010 fed1 	bl	80162f4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005554:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800555c:	3b01      	subs	r3, #1
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f023 0307 	bic.w	r3, r3, #7
 800556a:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <prvInitialiseNewTask+0x4e>
 8005576:	f240 3259 	movw	r2, #857	@ 0x359
 800557a:	493b      	ldr	r1, [pc, #236]	@ (8005668 <prvInitialiseNewTask+0x134>)
 800557c:	483b      	ldr	r0, [pc, #236]	@ (800566c <prvInitialiseNewTask+0x138>)
 800557e:	f00b fc27 	bl	8010dd0 <assertFail>

            #if ( configRECORD_STACK_HIGH_ADDRESS == 1 )
                {
                    /* Also record the stack's high address, which may assist
                     * debugging. */
                    pxNewTCB->pxEndOfStack = pxTopOfStack;
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	641a      	str	r2, [r3, #64]	@ 0x40
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d01f      	beq.n	80055ce <prvInitialiseNewTask+0x9a>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800558e:	2300      	movs	r3, #0
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e012      	b.n	80055ba <prvInitialiseNewTask+0x86>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	4413      	add	r3, r2
 800559a:	7819      	ldrb	r1, [r3, #0]
 800559c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	3334      	adds	r3, #52	@ 0x34
 80055a4:	460a      	mov	r2, r1
 80055a6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80055a8:	68ba      	ldr	r2, [r7, #8]
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d006      	beq.n	80055c2 <prvInitialiseNewTask+0x8e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	3301      	adds	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2b09      	cmp	r3, #9
 80055be:	d9e9      	bls.n	8005594 <prvInitialiseNewTask+0x60>
 80055c0:	e000      	b.n	80055c4 <prvInitialiseNewTask+0x90>
            {
                break;
 80055c2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80055c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80055cc:	e003      	b.n	80055d6 <prvInitialiseNewTask+0xa2>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	2200      	movs	r2, #0
 80055d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2b05      	cmp	r3, #5
 80055da:	d901      	bls.n	80055e0 <prvInitialiseNewTask+0xac>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80055dc:	2305      	movs	r3, #5
 80055de:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80055e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80055e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e8:	6a3a      	ldr	r2, [r7, #32]
 80055ea:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2200      	movs	r2, #0
 80055f0:	651a      	str	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	3304      	adds	r3, #4
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe ff42 	bl	8004480 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	3318      	adds	r3, #24
 8005600:	4618      	mov	r0, r3
 8005602:	f7fe ff3d 	bl	8004480 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800560a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	f1c3 0206 	rsb	r2, r3, #6
 8005612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005614:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif /* portCRITICAL_NESTING_IN_TCB */

    #if ( configUSE_APPLICATION_TASK_TAG == 1 )
        {
            pxNewTCB->pxTaskTag = NULL;
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	2200      	movs	r2, #0
 8005620:	655a      	str	r2, [r3, #84]	@ 0x54
        }
    #endif /* configUSE_APPLICATION_TASK_TAG */

    #if ( configGENERATE_RUN_TIME_STATS == 1 )
        {
            pxNewTCB->ulRunTimeCounter = 0UL;
 8005622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005624:	2200      	movs	r2, #0
 8005626:	659a      	str	r2, [r3, #88]	@ 0x58
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	335c      	adds	r3, #92	@ 0x5c
 800562c:	2204      	movs	r2, #4
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f010 fe5f 	bl	80162f4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005638:	3360      	adds	r3, #96	@ 0x60
 800563a:	2201      	movs	r2, #1
 800563c:	2100      	movs	r1, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f010 fe58 	bl	80162f4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005644:	683a      	ldr	r2, [r7, #0]
 8005646:	68f9      	ldr	r1, [r7, #12]
 8005648:	6938      	ldr	r0, [r7, #16]
 800564a:	f001 fb0d 	bl	8006c68 <pxPortInitialiseStack>
 800564e:	4602      	mov	r2, r0
 8005650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005652:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <prvInitialiseNewTask+0x12c>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005660:	bf00      	nop
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	08018738 	.word	0x08018738
 800566c:	08018798 	.word	0x08018798

08005670 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005678:	f001 fc08 	bl	8006e8c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800567c:	4b2c      	ldr	r3, [pc, #176]	@ (8005730 <prvAddNewTaskToReadyList+0xc0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	4a2b      	ldr	r2, [pc, #172]	@ (8005730 <prvAddNewTaskToReadyList+0xc0>)
 8005684:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005686:	4b2b      	ldr	r3, [pc, #172]	@ (8005734 <prvAddNewTaskToReadyList+0xc4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d109      	bne.n	80056a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800568e:	4a29      	ldr	r2, [pc, #164]	@ (8005734 <prvAddNewTaskToReadyList+0xc4>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005694:	4b26      	ldr	r3, [pc, #152]	@ (8005730 <prvAddNewTaskToReadyList+0xc0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b01      	cmp	r3, #1
 800569a:	d110      	bne.n	80056be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800569c:	f000 fcd4 	bl	8006048 <prvInitialiseTaskLists>
 80056a0:	e00d      	b.n	80056be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80056a2:	4b25      	ldr	r3, [pc, #148]	@ (8005738 <prvAddNewTaskToReadyList+0xc8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d109      	bne.n	80056be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80056aa:	4b22      	ldr	r3, [pc, #136]	@ (8005734 <prvAddNewTaskToReadyList+0xc4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d802      	bhi.n	80056be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80056b8:	4a1e      	ldr	r2, [pc, #120]	@ (8005734 <prvAddNewTaskToReadyList+0xc4>)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80056be:	4b1f      	ldr	r3, [pc, #124]	@ (800573c <prvAddNewTaskToReadyList+0xcc>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	4a1d      	ldr	r2, [pc, #116]	@ (800573c <prvAddNewTaskToReadyList+0xcc>)
 80056c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80056c8:	4b1c      	ldr	r3, [pc, #112]	@ (800573c <prvAddNewTaskToReadyList+0xcc>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	2201      	movs	r2, #1
 80056d6:	409a      	lsls	r2, r3
 80056d8:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <prvAddNewTaskToReadyList+0xd0>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4313      	orrs	r3, r2
 80056de:	4a18      	ldr	r2, [pc, #96]	@ (8005740 <prvAddNewTaskToReadyList+0xd0>)
 80056e0:	6013      	str	r3, [r2, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4a15      	ldr	r2, [pc, #84]	@ (8005744 <prvAddNewTaskToReadyList+0xd4>)
 80056f0:	441a      	add	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f7fe fece 	bl	800449a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80056fe:	f001 fbf3 	bl	8006ee8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <prvAddNewTaskToReadyList+0xc8>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00e      	beq.n	8005728 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800570a:	4b0a      	ldr	r3, [pc, #40]	@ (8005734 <prvAddNewTaskToReadyList+0xc4>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005714:	429a      	cmp	r2, r3
 8005716:	d207      	bcs.n	8005728 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005718:	4b0b      	ldr	r3, [pc, #44]	@ (8005748 <prvAddNewTaskToReadyList+0xd8>)
 800571a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005728:	bf00      	nop
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000358 	.word	0x20000358
 8005734:	2000026c 	.word	0x2000026c
 8005738:	20000364 	.word	0x20000364
 800573c:	20000374 	.word	0x20000374
 8005740:	20000360 	.word	0x20000360
 8005744:	20000270 	.word	0x20000270
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vTaskDelayUntil>:

#if ( INCLUDE_vTaskDelayUntil == 1 )

    void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime,
                          const TickType_t xTimeIncrement )
    {
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
        TickType_t xTimeToWake;
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

        configASSERT( pxPreviousWakeTime );
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d105      	bne.n	800576c <vTaskDelayUntil+0x20>
 8005760:	f240 42e2 	movw	r2, #1250	@ 0x4e2
 8005764:	492d      	ldr	r1, [pc, #180]	@ (800581c <vTaskDelayUntil+0xd0>)
 8005766:	482e      	ldr	r0, [pc, #184]	@ (8005820 <vTaskDelayUntil+0xd4>)
 8005768:	f00b fb32 	bl	8010dd0 <assertFail>
        configASSERT( ( xTimeIncrement > 0U ) );
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <vTaskDelayUntil+0x32>
 8005772:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8005776:	4929      	ldr	r1, [pc, #164]	@ (800581c <vTaskDelayUntil+0xd0>)
 8005778:	482a      	ldr	r0, [pc, #168]	@ (8005824 <vTaskDelayUntil+0xd8>)
 800577a:	f00b fb29 	bl	8010dd0 <assertFail>
        configASSERT( uxSchedulerSuspended == 0 );
 800577e:	4b2a      	ldr	r3, [pc, #168]	@ (8005828 <vTaskDelayUntil+0xdc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <vTaskDelayUntil+0x46>
 8005786:	f240 42e4 	movw	r2, #1252	@ 0x4e4
 800578a:	4924      	ldr	r1, [pc, #144]	@ (800581c <vTaskDelayUntil+0xd0>)
 800578c:	4827      	ldr	r0, [pc, #156]	@ (800582c <vTaskDelayUntil+0xe0>)
 800578e:	f00b fb1f 	bl	8010dd0 <assertFail>

        vTaskSuspendAll();
 8005792:	f000 f8f7 	bl	8005984 <vTaskSuspendAll>
        {
            /* Minor optimisation.  The tick count cannot change in this
             * block. */
            const TickType_t xConstTickCount = xTickCount;
 8005796:	4b26      	ldr	r3, [pc, #152]	@ (8005830 <vTaskDelayUntil+0xe4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	613b      	str	r3, [r7, #16]

            /* Generate the tick time at which the task wants to wake. */
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	683a      	ldr	r2, [r7, #0]
 80057a2:	4413      	add	r3, r2
 80057a4:	60fb      	str	r3, [r7, #12]

            if( xConstTickCount < *pxPreviousWakeTime )
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d20b      	bcs.n	80057c8 <vTaskDelayUntil+0x7c>
                /* The tick count has overflowed since this function was
                 * lasted called.  In this case the only time we should ever
                 * actually delay is if the wake time has also  overflowed,
                 * and the wake time is greater than the tick time.  When this
                 * is the case it is as if neither time had overflowed. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d211      	bcs.n	80057de <vTaskDelayUntil+0x92>
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d90d      	bls.n	80057de <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 80057c2:	2301      	movs	r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	e00a      	b.n	80057de <vTaskDelayUntil+0x92>
            else
            {
                /* The tick time has not overflowed.  In this case we will
                 * delay if either the wake time has overflowed, and/or the
                 * tick time is less than the wake time. */
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d303      	bcc.n	80057da <vTaskDelayUntil+0x8e>
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d901      	bls.n	80057de <vTaskDelayUntil+0x92>
                {
                    xShouldDelay = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            /* Update the wake time ready for the next call. */
            *pxPreviousWakeTime = xTimeToWake;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	601a      	str	r2, [r3, #0]

            if( xShouldDelay != pdFALSE )
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d006      	beq.n	80057f8 <vTaskDelayUntil+0xac>
            {
                traceTASK_DELAY_UNTIL( xTimeToWake );

                /* prvAddCurrentTaskToDelayedList() needs the block time, not
                 * the time to wake, so subtract the current tick count. */
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	2100      	movs	r1, #0
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fe88 	bl	8006508 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80057f8:	f000 f8d2 	bl	80059a0 <xTaskResumeAll>
 80057fc:	60b8      	str	r0, [r7, #8]

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d107      	bne.n	8005814 <vTaskDelayUntil+0xc8>
        {
            portYIELD_WITHIN_API();
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <vTaskDelayUntil+0xe8>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005814:	bf00      	nop
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	08018738 	.word	0x08018738
 8005820:	08018820 	.word	0x08018820
 8005824:	08018834 	.word	0x08018834
 8005828:	20000380 	.word	0x20000380
 800582c:	08018804 	.word	0x08018804
 8005830:	2000035c 	.word	0x2000035c
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d012      	beq.n	8005870 <vTaskDelay+0x38>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800584a:	4b11      	ldr	r3, [pc, #68]	@ (8005890 <vTaskDelay+0x58>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <vTaskDelay+0x26>
 8005852:	f44f 62a7 	mov.w	r2, #1336	@ 0x538
 8005856:	490f      	ldr	r1, [pc, #60]	@ (8005894 <vTaskDelay+0x5c>)
 8005858:	480f      	ldr	r0, [pc, #60]	@ (8005898 <vTaskDelay+0x60>)
 800585a:	f00b fab9 	bl	8010dd0 <assertFail>
            vTaskSuspendAll();
 800585e:	f000 f891 	bl	8005984 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fe4f 	bl	8006508 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800586a:	f000 f899 	bl	80059a0 <xTaskResumeAll>
 800586e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <vTaskDelay+0x4e>
        {
            portYIELD_WITHIN_API();
 8005876:	4b09      	ldr	r3, [pc, #36]	@ (800589c <vTaskDelay+0x64>)
 8005878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8005886:	bf00      	nop
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20000380 	.word	0x20000380
 8005894:	08018738 	.word	0x08018738
 8005898:	08018804 	.word	0x08018804
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	@ 0x28
 80058a4:	af04      	add	r7, sp, #16
    BaseType_t xReturn;

    /* Add the idle task at the lowest priority. */
    #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
            uint32_t ulIdleTaskStackSize;

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058ae:	1d3a      	adds	r2, r7, #4
 80058b0:	f107 0108 	add.w	r1, r7, #8
 80058b4:	f107 030c 	add.w	r3, r7, #12
 80058b8:	4618      	mov	r0, r3
 80058ba:	f005 ffdd 	bl	800b878 <vApplicationGetIdleTaskMemory>
            xIdleTaskHandle = xTaskCreateStatic( prvIdleTask,
 80058be:	6879      	ldr	r1, [r7, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	9202      	str	r2, [sp, #8]
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	2300      	movs	r3, #0
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	2300      	movs	r3, #0
 80058ce:	460a      	mov	r2, r1
 80058d0:	4922      	ldr	r1, [pc, #136]	@ (800595c <vTaskStartScheduler+0xbc>)
 80058d2:	4823      	ldr	r0, [pc, #140]	@ (8005960 <vTaskStartScheduler+0xc0>)
 80058d4:	f7ff fd92 	bl	80053fc <xTaskCreateStatic>
 80058d8:	4603      	mov	r3, r0
 80058da:	4a22      	ldr	r2, [pc, #136]	@ (8005964 <vTaskStartScheduler+0xc4>)
 80058dc:	6013      	str	r3, [r2, #0]
                                                 ( void * ) NULL,       /*lint !e961.  The cast is not redundant for all compilers. */
                                                 portPRIVILEGE_BIT,     /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                 pxIdleTaskStackBuffer,
                                                 pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

            if( xIdleTaskHandle != NULL )
 80058de:	4b21      	ldr	r3, [pc, #132]	@ (8005964 <vTaskStartScheduler+0xc4>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <vTaskStartScheduler+0x4c>
            {
                xReturn = pdPASS;
 80058e6:	2301      	movs	r3, #1
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e001      	b.n	80058f0 <vTaskStartScheduler+0x50>
            }
            else
            {
                xReturn = pdFAIL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d102      	bne.n	80058fc <vTaskStartScheduler+0x5c>
            {
                xReturn = xTimerCreateTimerTask();
 80058f6:	f000 fe6d 	bl	80065d4 <xTimerCreateTimerTask>
 80058fa:	6178      	str	r0, [r7, #20]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d11e      	bne.n	8005940 <vTaskStartScheduler+0xa0>
        __asm volatile
 8005902:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	613b      	str	r3, [r7, #16]
    }
 8005914:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005916:	4b14      	ldr	r3, [pc, #80]	@ (8005968 <vTaskStartScheduler+0xc8>)
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800591e:	4b13      	ldr	r3, [pc, #76]	@ (800596c <vTaskStartScheduler+0xcc>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005924:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <vTaskStartScheduler+0xd0>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800592a:	f004 fe05 	bl	800a538 <usecTimerInit>

        traceTASK_SWITCHED_IN();
 800592e:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <vTaskStartScheduler+0xd4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3334      	adds	r3, #52	@ 0x34
 8005934:	4a10      	ldr	r2, [pc, #64]	@ (8005978 <vTaskStartScheduler+0xd8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6013      	str	r3, [r2, #0]

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800593a:	f001 fa1b 	bl	8006d74 <xPortStartScheduler>
    }

    /* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;
}
 800593e:	e009      	b.n	8005954 <vTaskStartScheduler+0xb4>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005946:	d105      	bne.n	8005954 <vTaskStartScheduler+0xb4>
 8005948:	f640 022a 	movw	r2, #2090	@ 0x82a
 800594c:	490b      	ldr	r1, [pc, #44]	@ (800597c <vTaskStartScheduler+0xdc>)
 800594e:	480c      	ldr	r0, [pc, #48]	@ (8005980 <vTaskStartScheduler+0xe0>)
 8005950:	f00b fa3e 	bl	8010dd0 <assertFail>
}
 8005954:	bf00      	nop
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	08018898 	.word	0x08018898
 8005960:	08006035 	.word	0x08006035
 8005964:	2000037c 	.word	0x2000037c
 8005968:	20000378 	.word	0x20000378
 800596c:	20000364 	.word	0x20000364
 8005970:	2000035c 	.word	0x2000035c
 8005974:	2000026c 	.word	0x2000026c
 8005978:	e0000004 	.word	0xe0000004
 800597c:	08018738 	.word	0x08018738
 8005980:	080188a0 	.word	0x080188a0

08005984 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005988:	4b04      	ldr	r3, [pc, #16]	@ (800599c <vTaskSuspendAll+0x18>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3301      	adds	r3, #1
 800598e:	4a03      	ldr	r2, [pc, #12]	@ (800599c <vTaskSuspendAll+0x18>)
 8005990:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005992:	bf00      	nop
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	20000380 	.word	0x20000380

080059a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80059ae:	4b3f      	ldr	r3, [pc, #252]	@ (8005aac <xTaskResumeAll+0x10c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <xTaskResumeAll+0x22>
 80059b6:	f640 0299 	movw	r2, #2201	@ 0x899
 80059ba:	493d      	ldr	r1, [pc, #244]	@ (8005ab0 <xTaskResumeAll+0x110>)
 80059bc:	483d      	ldr	r0, [pc, #244]	@ (8005ab4 <xTaskResumeAll+0x114>)
 80059be:	f00b fa07 	bl	8010dd0 <assertFail>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80059c2:	f001 fa63 	bl	8006e8c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80059c6:	4b39      	ldr	r3, [pc, #228]	@ (8005aac <xTaskResumeAll+0x10c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	4a37      	ldr	r2, [pc, #220]	@ (8005aac <xTaskResumeAll+0x10c>)
 80059ce:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059d0:	4b36      	ldr	r3, [pc, #216]	@ (8005aac <xTaskResumeAll+0x10c>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d161      	bne.n	8005a9c <xTaskResumeAll+0xfc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059d8:	4b37      	ldr	r3, [pc, #220]	@ (8005ab8 <xTaskResumeAll+0x118>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d05d      	beq.n	8005a9c <xTaskResumeAll+0xfc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059e0:	e02e      	b.n	8005a40 <xTaskResumeAll+0xa0>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e2:	4b36      	ldr	r3, [pc, #216]	@ (8005abc <xTaskResumeAll+0x11c>)
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	3318      	adds	r3, #24
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fdb0 	bl	8004554 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3304      	adds	r3, #4
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7fe fdab 	bl	8004554 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	2201      	movs	r2, #1
 8005a04:	409a      	lsls	r2, r3
 8005a06:	4b2e      	ldr	r3, [pc, #184]	@ (8005ac0 <xTaskResumeAll+0x120>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	4a2c      	ldr	r2, [pc, #176]	@ (8005ac0 <xTaskResumeAll+0x120>)
 8005a0e:	6013      	str	r3, [r2, #0]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4a29      	ldr	r2, [pc, #164]	@ (8005ac4 <xTaskResumeAll+0x124>)
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f7fe fd37 	bl	800449a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a30:	4b25      	ldr	r3, [pc, #148]	@ (8005ac8 <xTaskResumeAll+0x128>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <xTaskResumeAll+0xa0>
                    {
                        xYieldPending = pdTRUE;
 8005a3a:	4b24      	ldr	r3, [pc, #144]	@ (8005acc <xTaskResumeAll+0x12c>)
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a40:	4b1e      	ldr	r3, [pc, #120]	@ (8005abc <xTaskResumeAll+0x11c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1cc      	bne.n	80059e2 <xTaskResumeAll+0x42>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <xTaskResumeAll+0xb2>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005a4e:	f000 fb97 	bl	8006180 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a52:	4b1f      	ldr	r3, [pc, #124]	@ (8005ad0 <xTaskResumeAll+0x130>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d010      	beq.n	8005a80 <xTaskResumeAll+0xe0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005a5e:	f000 f84b 	bl	8005af8 <xTaskIncrementTick>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <xTaskResumeAll+0xce>
                            {
                                xYieldPending = pdTRUE;
 8005a68:	4b18      	ldr	r3, [pc, #96]	@ (8005acc <xTaskResumeAll+0x12c>)
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	3b01      	subs	r3, #1
 8005a72:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1f1      	bne.n	8005a5e <xTaskResumeAll+0xbe>

                        xPendedTicks = 0;
 8005a7a:	4b15      	ldr	r3, [pc, #84]	@ (8005ad0 <xTaskResumeAll+0x130>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005a80:	4b12      	ldr	r3, [pc, #72]	@ (8005acc <xTaskResumeAll+0x12c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d009      	beq.n	8005a9c <xTaskResumeAll+0xfc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005a8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <xTaskResumeAll+0x134>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005a9c:	f001 fa24 	bl	8006ee8 <vPortExitCritical>

    return xAlreadyYielded;
 8005aa0:	68bb      	ldr	r3, [r7, #8]
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3710      	adds	r7, #16
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20000380 	.word	0x20000380
 8005ab0:	08018738 	.word	0x08018738
 8005ab4:	080188d4 	.word	0x080188d4
 8005ab8:	20000358 	.word	0x20000358
 8005abc:	20000318 	.word	0x20000318
 8005ac0:	20000360 	.word	0x20000360
 8005ac4:	20000270 	.word	0x20000270
 8005ac8:	2000026c 	.word	0x2000026c
 8005acc:	2000036c 	.word	0x2000036c
 8005ad0:	20000368 	.word	0x20000368
 8005ad4:	e000ed04 	.word	0xe000ed04

08005ad8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8005ade:	4b05      	ldr	r3, [pc, #20]	@ (8005af4 <xTaskGetTickCount+0x1c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8005ae4:	687b      	ldr	r3, [r7, #4]
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2000035c 	.word	0x2000035c

08005af8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]

    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );
 8005b02:	4a4e      	ldr	r2, [pc, #312]	@ (8005c3c <xTaskIncrementTick+0x144>)
 8005b04:	4b4e      	ldr	r3, [pc, #312]	@ (8005c40 <xTaskIncrementTick+0x148>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6013      	str	r3, [r2, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8005c44 <xTaskIncrementTick+0x14c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f040 8089 	bne.w	8005c26 <xTaskIncrementTick+0x12e>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005b14:	4b4a      	ldr	r3, [pc, #296]	@ (8005c40 <xTaskIncrementTick+0x148>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005b1c:	4a48      	ldr	r2, [pc, #288]	@ (8005c40 <xTaskIncrementTick+0x148>)
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d11b      	bne.n	8005b60 <xTaskIncrementTick+0x68>
        {
            taskSWITCH_DELAYED_LISTS();
 8005b28:	4b47      	ldr	r3, [pc, #284]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <xTaskIncrementTick+0x46>
 8005b32:	f640 22ac 	movw	r2, #2732	@ 0xaac
 8005b36:	4945      	ldr	r1, [pc, #276]	@ (8005c4c <xTaskIncrementTick+0x154>)
 8005b38:	4845      	ldr	r0, [pc, #276]	@ (8005c50 <xTaskIncrementTick+0x158>)
 8005b3a:	f00b f949 	bl	8010dd0 <assertFail>
 8005b3e:	4b42      	ldr	r3, [pc, #264]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	60fb      	str	r3, [r7, #12]
 8005b44:	4b43      	ldr	r3, [pc, #268]	@ (8005c54 <xTaskIncrementTick+0x15c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a3f      	ldr	r2, [pc, #252]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4a41      	ldr	r2, [pc, #260]	@ (8005c54 <xTaskIncrementTick+0x15c>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	4b41      	ldr	r3, [pc, #260]	@ (8005c58 <xTaskIncrementTick+0x160>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3301      	adds	r3, #1
 8005b58:	4a3f      	ldr	r2, [pc, #252]	@ (8005c58 <xTaskIncrementTick+0x160>)
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	f000 fb10 	bl	8006180 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005b60:	4b3e      	ldr	r3, [pc, #248]	@ (8005c5c <xTaskIncrementTick+0x164>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d348      	bcc.n	8005bfc <xTaskIncrementTick+0x104>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b6a:	4b37      	ldr	r3, [pc, #220]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <xTaskIncrementTick+0x86>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b74:	4b39      	ldr	r3, [pc, #228]	@ (8005c5c <xTaskIncrementTick+0x164>)
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7a:	601a      	str	r2, [r3, #0]
                    break;
 8005b7c:	e03e      	b.n	8005bfc <xTaskIncrementTick+0x104>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b7e:	4b32      	ldr	r3, [pc, #200]	@ (8005c48 <xTaskIncrementTick+0x150>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d203      	bcs.n	8005b9e <xTaskIncrementTick+0xa6>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005b96:	4a31      	ldr	r2, [pc, #196]	@ (8005c5c <xTaskIncrementTick+0x164>)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b9c:	e02e      	b.n	8005bfc <xTaskIncrementTick+0x104>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fcd6 	bl	8004554 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d004      	beq.n	8005bba <xTaskIncrementTick+0xc2>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	3318      	adds	r3, #24
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f7fe fccd 	bl	8004554 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	409a      	lsls	r2, r3
 8005bc2:	4b27      	ldr	r3, [pc, #156]	@ (8005c60 <xTaskIncrementTick+0x168>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	4a25      	ldr	r2, [pc, #148]	@ (8005c60 <xTaskIncrementTick+0x168>)
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4a22      	ldr	r2, [pc, #136]	@ (8005c64 <xTaskIncrementTick+0x16c>)
 8005bda:	441a      	add	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	3304      	adds	r3, #4
 8005be0:	4619      	mov	r1, r3
 8005be2:	4610      	mov	r0, r2
 8005be4:	f7fe fc59 	bl	800449a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bec:	4b1e      	ldr	r3, [pc, #120]	@ (8005c68 <xTaskIncrementTick+0x170>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d3b9      	bcc.n	8005b6a <xTaskIncrementTick+0x72>
                            {
                                xSwitchRequired = pdTRUE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bfa:	e7b6      	b.n	8005b6a <xTaskIncrementTick+0x72>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c68 <xTaskIncrementTick+0x170>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c02:	4918      	ldr	r1, [pc, #96]	@ (8005c64 <xTaskIncrementTick+0x16c>)
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d901      	bls.n	8005c18 <xTaskIncrementTick+0x120>
                {
                    xSwitchRequired = pdTRUE;
 8005c14:	2301      	movs	r3, #1
 8005c16:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8005c18:	4b14      	ldr	r3, [pc, #80]	@ (8005c6c <xTaskIncrementTick+0x174>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d007      	beq.n	8005c30 <xTaskIncrementTick+0x138>
                {
                    xSwitchRequired = pdTRUE;
 8005c20:	2301      	movs	r3, #1
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	e004      	b.n	8005c30 <xTaskIncrementTick+0x138>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005c26:	4b12      	ldr	r3, [pc, #72]	@ (8005c70 <xTaskIncrementTick+0x178>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	4a10      	ldr	r2, [pc, #64]	@ (8005c70 <xTaskIncrementTick+0x178>)
 8005c2e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005c30:	697b      	ldr	r3, [r7, #20]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	e0000008 	.word	0xe0000008
 8005c40:	2000035c 	.word	0x2000035c
 8005c44:	20000380 	.word	0x20000380
 8005c48:	20000310 	.word	0x20000310
 8005c4c:	08018738 	.word	0x08018738
 8005c50:	08018908 	.word	0x08018908
 8005c54:	20000314 	.word	0x20000314
 8005c58:	20000370 	.word	0x20000370
 8005c5c:	20000378 	.word	0x20000378
 8005c60:	20000360 	.word	0x20000360
 8005c64:	20000270 	.word	0x20000270
 8005c68:	2000026c 	.word	0x2000026c
 8005c6c:	2000036c 	.word	0x2000036c
 8005c70:	20000368 	.word	0x20000368

08005c74 <vTaskSetApplicationTaskTag>:

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

    void vTaskSetApplicationTaskTag( TaskHandle_t xTask,
                                     TaskHookFunction_t pxHookFunction )
    {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
        TCB_t * xTCB;

        /* If xTask is NULL then it is the task hook of the calling task that is
         * getting set. */
        if( xTask == NULL )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <vTaskSetApplicationTaskTag+0x18>
        {
            xTCB = ( TCB_t * ) pxCurrentTCB;
 8005c84:	4b08      	ldr	r3, [pc, #32]	@ (8005ca8 <vTaskSetApplicationTaskTag+0x34>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e001      	b.n	8005c90 <vTaskSetApplicationTaskTag+0x1c>
        }
        else
        {
            xTCB = xTask;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	60fb      	str	r3, [r7, #12]
        }

        /* Save the hook function in the TCB.  A critical section is required as
         * the value can be accessed from an interrupt. */
        taskENTER_CRITICAL();
 8005c90:	f001 f8fc 	bl	8006e8c <vPortEnterCritical>
        {
            xTCB->pxTaskTag = pxHookFunction;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	683a      	ldr	r2, [r7, #0]
 8005c98:	655a      	str	r2, [r3, #84]	@ 0x54
        }
        taskEXIT_CRITICAL();
 8005c9a:	f001 f925 	bl	8006ee8 <vPortExitCritical>
    }
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	2000026c 	.word	0x2000026c

08005cac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005cb2:	4b3c      	ldr	r3, [pc, #240]	@ (8005da4 <vTaskSwitchContext+0xf8>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005cba:	4b3b      	ldr	r3, [pc, #236]	@ (8005da8 <vTaskSwitchContext+0xfc>)
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005cc0:	e06b      	b.n	8005d9a <vTaskSwitchContext+0xee>
        xYieldPending = pdFALSE;
 8005cc2:	4b39      	ldr	r3, [pc, #228]	@ (8005da8 <vTaskSwitchContext+0xfc>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005cc8:	f004 fc6e 	bl	800a5a8 <usecTimestamp>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4b36      	ldr	r3, [pc, #216]	@ (8005dac <vTaskSwitchContext+0x100>)
 8005cd2:	601a      	str	r2, [r3, #0]
                if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005cd4:	4b35      	ldr	r3, [pc, #212]	@ (8005dac <vTaskSwitchContext+0x100>)
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	4b35      	ldr	r3, [pc, #212]	@ (8005db0 <vTaskSwitchContext+0x104>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d909      	bls.n	8005cf4 <vTaskSwitchContext+0x48>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005ce0:	4b32      	ldr	r3, [pc, #200]	@ (8005dac <vTaskSwitchContext+0x100>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	4b32      	ldr	r3, [pc, #200]	@ (8005db0 <vTaskSwitchContext+0x104>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	1ad1      	subs	r1, r2, r3
 8005cea:	4b32      	ldr	r3, [pc, #200]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005cf0:	440a      	add	r2, r1
 8005cf2:	659a      	str	r2, [r3, #88]	@ 0x58
                ulTaskSwitchedInTime = ulTotalRunTime;
 8005cf4:	4b2d      	ldr	r3, [pc, #180]	@ (8005dac <vTaskSwitchContext+0x100>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8005db0 <vTaskSwitchContext+0x104>)
 8005cfa:	6013      	str	r3, [r2, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8005cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	4b2c      	ldr	r3, [pc, #176]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d808      	bhi.n	8005d1e <vTaskSwitchContext+0x72>
 8005d0c:	4b29      	ldr	r3, [pc, #164]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	4b28      	ldr	r3, [pc, #160]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	3334      	adds	r3, #52	@ 0x34
 8005d16:	4619      	mov	r1, r3
 8005d18:	4610      	mov	r0, r2
 8005d1a:	f005 fed7 	bl	800bacc <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <vTaskSwitchContext+0x10c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	fab3 f383 	clz	r3, r3
 8005d2a:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	f1c3 031f 	rsb	r3, r3, #31
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	4921      	ldr	r1, [pc, #132]	@ (8005dbc <vTaskSwitchContext+0x110>)
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	440b      	add	r3, r1
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d105      	bne.n	8005d54 <vTaskSwitchContext+0xa8>
 8005d48:	f640 32e7 	movw	r2, #3047	@ 0xbe7
 8005d4c:	491c      	ldr	r1, [pc, #112]	@ (8005dc0 <vTaskSwitchContext+0x114>)
 8005d4e:	481d      	ldr	r0, [pc, #116]	@ (8005dc4 <vTaskSwitchContext+0x118>)
 8005d50:	f00b f83e 	bl	8010dd0 <assertFail>
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	4a17      	ldr	r2, [pc, #92]	@ (8005dbc <vTaskSwitchContext+0x110>)
 8005d60:	4413      	add	r3, r2
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	3308      	adds	r3, #8
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d104      	bne.n	8005d84 <vTaskSwitchContext+0xd8>
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	685a      	ldr	r2, [r3, #4]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005d8c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8005d8e:	4b09      	ldr	r3, [pc, #36]	@ (8005db4 <vTaskSwitchContext+0x108>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3334      	adds	r3, #52	@ 0x34
 8005d94:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc8 <vTaskSwitchContext+0x11c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6013      	str	r3, [r2, #0]
}
 8005d9a:	bf00      	nop
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	20000380 	.word	0x20000380
 8005da8:	2000036c 	.word	0x2000036c
 8005dac:	20000388 	.word	0x20000388
 8005db0:	20000384 	.word	0x20000384
 8005db4:	2000026c 	.word	0x2000026c
 8005db8:	20000360 	.word	0x20000360
 8005dbc:	20000270 	.word	0x20000270
 8005dc0:	08018738 	.word	0x08018738
 8005dc4:	08018934 	.word	0x08018934
 8005dc8:	e0000004 	.word	0xe0000004

08005dcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <vTaskPlaceOnEventList+0x1c>
 8005ddc:	f640 4201 	movw	r2, #3073	@ 0xc01
 8005de0:	4909      	ldr	r1, [pc, #36]	@ (8005e08 <vTaskPlaceOnEventList+0x3c>)
 8005de2:	480a      	ldr	r0, [pc, #40]	@ (8005e0c <vTaskPlaceOnEventList+0x40>)
 8005de4:	f00a fff4 	bl	8010dd0 <assertFail>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005de8:	4b09      	ldr	r3, [pc, #36]	@ (8005e10 <vTaskPlaceOnEventList+0x44>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3318      	adds	r3, #24
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7fe fb76 	bl	80044e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005df6:	2101      	movs	r1, #1
 8005df8:	6838      	ldr	r0, [r7, #0]
 8005dfa:	f000 fb85 	bl	8006508 <prvAddCurrentTaskToDelayedList>
}
 8005dfe:	bf00      	nop
 8005e00:	3708      	adds	r7, #8
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	08018738 	.word	0x08018738
 8005e0c:	0801897c 	.word	0x0801897c
 8005e10:	2000026c 	.word	0x2000026c

08005e14 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d105      	bne.n	8005e32 <vTaskPlaceOnEventListRestricted+0x1e>
 8005e26:	f44f 6243 	mov.w	r2, #3120	@ 0xc30
 8005e2a:	490c      	ldr	r1, [pc, #48]	@ (8005e5c <vTaskPlaceOnEventListRestricted+0x48>)
 8005e2c:	480c      	ldr	r0, [pc, #48]	@ (8005e60 <vTaskPlaceOnEventListRestricted+0x4c>)
 8005e2e:	f00a ffcf 	bl	8010dd0 <assertFail>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e32:	4b0c      	ldr	r3, [pc, #48]	@ (8005e64 <vTaskPlaceOnEventListRestricted+0x50>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	3318      	adds	r3, #24
 8005e38:	4619      	mov	r1, r3
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7fe fb2d 	bl	800449a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <vTaskPlaceOnEventListRestricted+0x38>
        {
            xTicksToWait = portMAX_DELAY;
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e4c:	6879      	ldr	r1, [r7, #4]
 8005e4e:	68b8      	ldr	r0, [r7, #8]
 8005e50:	f000 fb5a 	bl	8006508 <prvAddCurrentTaskToDelayedList>
    }
 8005e54:	bf00      	nop
 8005e56:	3710      	adds	r7, #16
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}
 8005e5c:	08018738 	.word	0x08018738
 8005e60:	0801897c 	.word	0x0801897c
 8005e64:	2000026c 	.word	0x2000026c

08005e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d105      	bne.n	8005e8a <xTaskRemoveFromEventList+0x22>
 8005e7e:	f44f 6246 	mov.w	r2, #3168	@ 0xc60
 8005e82:	4922      	ldr	r1, [pc, #136]	@ (8005f0c <xTaskRemoveFromEventList+0xa4>)
 8005e84:	4822      	ldr	r0, [pc, #136]	@ (8005f10 <xTaskRemoveFromEventList+0xa8>)
 8005e86:	f00a ffa3 	bl	8010dd0 <assertFail>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fb60 	bl	8004554 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e94:	4b1f      	ldr	r3, [pc, #124]	@ (8005f14 <xTaskRemoveFromEventList+0xac>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11c      	bne.n	8005ed6 <xTaskRemoveFromEventList+0x6e>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe fb57 	bl	8004554 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eaa:	2201      	movs	r2, #1
 8005eac:	409a      	lsls	r2, r3
 8005eae:	4b1a      	ldr	r3, [pc, #104]	@ (8005f18 <xTaskRemoveFromEventList+0xb0>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	4a18      	ldr	r2, [pc, #96]	@ (8005f18 <xTaskRemoveFromEventList+0xb0>)
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <xTaskRemoveFromEventList+0xb4>)
 8005ec6:	441a      	add	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	f7fe fae3 	bl	800449a <vListInsertEnd>
 8005ed4:	e005      	b.n	8005ee2 <xTaskRemoveFromEventList+0x7a>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	3318      	adds	r3, #24
 8005eda:	4619      	mov	r1, r3
 8005edc:	4810      	ldr	r0, [pc, #64]	@ (8005f20 <xTaskRemoveFromEventList+0xb8>)
 8005ede:	f7fe fadc 	bl	800449a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f24 <xTaskRemoveFromEventList+0xbc>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d905      	bls.n	8005efc <xTaskRemoveFromEventList+0x94>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f28 <xTaskRemoveFromEventList+0xc0>)
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	e001      	b.n	8005f00 <xTaskRemoveFromEventList+0x98>
    }
    else
    {
        xReturn = pdFALSE;
 8005efc:	2300      	movs	r3, #0
 8005efe:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8005f00:	68fb      	ldr	r3, [r7, #12]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08018738 	.word	0x08018738
 8005f10:	080189a4 	.word	0x080189a4
 8005f14:	20000380 	.word	0x20000380
 8005f18:	20000360 	.word	0x20000360
 8005f1c:	20000270 	.word	0x20000270
 8005f20:	20000318 	.word	0x20000318
 8005f24:	2000026c 	.word	0x2000026c
 8005f28:	2000036c 	.word	0x2000036c

08005f2c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f34:	4b06      	ldr	r3, [pc, #24]	@ (8005f50 <vTaskInternalSetTimeOutState+0x24>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005f3c:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <vTaskInternalSetTimeOutState+0x28>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	605a      	str	r2, [r3, #4]
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000370 	.word	0x20000370
 8005f54:	2000035c 	.word	0x2000035c

08005f58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <xTaskCheckForTimeOut+0x1c>
 8005f68:	f640 42db 	movw	r2, #3291	@ 0xcdb
 8005f6c:	4926      	ldr	r1, [pc, #152]	@ (8006008 <xTaskCheckForTimeOut+0xb0>)
 8005f6e:	4827      	ldr	r0, [pc, #156]	@ (800600c <xTaskCheckForTimeOut+0xb4>)
 8005f70:	f00a ff2e 	bl	8010dd0 <assertFail>
    configASSERT( pxTicksToWait );
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <xTaskCheckForTimeOut+0x2e>
 8005f7a:	f640 42dc 	movw	r2, #3292	@ 0xcdc
 8005f7e:	4922      	ldr	r1, [pc, #136]	@ (8006008 <xTaskCheckForTimeOut+0xb0>)
 8005f80:	4823      	ldr	r0, [pc, #140]	@ (8006010 <xTaskCheckForTimeOut+0xb8>)
 8005f82:	f00a ff25 	bl	8010dd0 <assertFail>

    taskENTER_CRITICAL();
 8005f86:	f000 ff81 	bl	8006e8c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005f8a:	4b22      	ldr	r3, [pc, #136]	@ (8006014 <xTaskCheckForTimeOut+0xbc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa2:	d102      	bne.n	8005faa <xTaskCheckForTimeOut+0x52>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e026      	b.n	8005ff8 <xTaskCheckForTimeOut+0xa0>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	4b1a      	ldr	r3, [pc, #104]	@ (8006018 <xTaskCheckForTimeOut+0xc0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d00a      	beq.n	8005fcc <xTaskCheckForTimeOut+0x74>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	693a      	ldr	r2, [r7, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d305      	bcc.n	8005fcc <xTaskCheckForTimeOut+0x74>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e015      	b.n	8005ff8 <xTaskCheckForTimeOut+0xa0>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d20b      	bcs.n	8005fee <xTaskCheckForTimeOut+0x96>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad2      	subs	r2, r2, r3
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff ffa2 	bl	8005f2c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	617b      	str	r3, [r7, #20]
 8005fec:	e004      	b.n	8005ff8 <xTaskCheckForTimeOut+0xa0>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8005ff8:	f000 ff76 	bl	8006ee8 <vPortExitCritical>

    return xReturn;
 8005ffc:	697b      	ldr	r3, [r7, #20]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	08018738 	.word	0x08018738
 800600c:	080189d4 	.word	0x080189d4
 8006010:	080189e0 	.word	0x080189e0
 8006014:	2000035c 	.word	0x2000035c
 8006018:	20000370 	.word	0x20000370

0800601c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800601c:	b480      	push	{r7}
 800601e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006020:	4b03      	ldr	r3, [pc, #12]	@ (8006030 <vTaskMissedYield+0x14>)
 8006022:	2201      	movs	r2, #1
 8006024:	601a      	str	r2, [r3, #0]
}
 8006026:	bf00      	nop
 8006028:	46bd      	mov	sp, r7
 800602a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602e:	4770      	bx	lr
 8006030:	2000036c 	.word	0x2000036c

08006034 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800603c:	f000 f844 	bl	80060c8 <prvCheckTasksWaitingTermination>
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 8006040:	f005 fd2e 	bl	800baa0 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8006044:	bf00      	nop
 8006046:	e7f9      	b.n	800603c <prvIdleTask+0x8>

08006048 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800604e:	2300      	movs	r3, #0
 8006050:	607b      	str	r3, [r7, #4]
 8006052:	e00c      	b.n	800606e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	4613      	mov	r3, r2
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	4413      	add	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4a12      	ldr	r2, [pc, #72]	@ (80060a8 <prvInitialiseTaskLists+0x60>)
 8006060:	4413      	add	r3, r2
 8006062:	4618      	mov	r0, r3
 8006064:	f7fe f9ec 	bl	8004440 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	3301      	adds	r3, #1
 800606c:	607b      	str	r3, [r7, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2b05      	cmp	r3, #5
 8006072:	d9ef      	bls.n	8006054 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006074:	480d      	ldr	r0, [pc, #52]	@ (80060ac <prvInitialiseTaskLists+0x64>)
 8006076:	f7fe f9e3 	bl	8004440 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800607a:	480d      	ldr	r0, [pc, #52]	@ (80060b0 <prvInitialiseTaskLists+0x68>)
 800607c:	f7fe f9e0 	bl	8004440 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006080:	480c      	ldr	r0, [pc, #48]	@ (80060b4 <prvInitialiseTaskLists+0x6c>)
 8006082:	f7fe f9dd 	bl	8004440 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006086:	480c      	ldr	r0, [pc, #48]	@ (80060b8 <prvInitialiseTaskLists+0x70>)
 8006088:	f7fe f9da 	bl	8004440 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800608c:	480b      	ldr	r0, [pc, #44]	@ (80060bc <prvInitialiseTaskLists+0x74>)
 800608e:	f7fe f9d7 	bl	8004440 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006092:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <prvInitialiseTaskLists+0x78>)
 8006094:	4a05      	ldr	r2, [pc, #20]	@ (80060ac <prvInitialiseTaskLists+0x64>)
 8006096:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006098:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <prvInitialiseTaskLists+0x7c>)
 800609a:	4a05      	ldr	r2, [pc, #20]	@ (80060b0 <prvInitialiseTaskLists+0x68>)
 800609c:	601a      	str	r2, [r3, #0]
}
 800609e:	bf00      	nop
 80060a0:	3708      	adds	r7, #8
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000270 	.word	0x20000270
 80060ac:	200002e8 	.word	0x200002e8
 80060b0:	200002fc 	.word	0x200002fc
 80060b4:	20000318 	.word	0x20000318
 80060b8:	2000032c 	.word	0x2000032c
 80060bc:	20000344 	.word	0x20000344
 80060c0:	20000310 	.word	0x20000310
 80060c4:	20000314 	.word	0x20000314

080060c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060ce:	e019      	b.n	8006104 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80060d0:	f000 fedc 	bl	8006e8c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060d4:	4b10      	ldr	r3, [pc, #64]	@ (8006118 <prvCheckTasksWaitingTermination+0x50>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fa37 	bl	8004554 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80060e6:	4b0d      	ldr	r3, [pc, #52]	@ (800611c <prvCheckTasksWaitingTermination+0x54>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3b01      	subs	r3, #1
 80060ec:	4a0b      	ldr	r2, [pc, #44]	@ (800611c <prvCheckTasksWaitingTermination+0x54>)
 80060ee:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80060f0:	4b0b      	ldr	r3, [pc, #44]	@ (8006120 <prvCheckTasksWaitingTermination+0x58>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	4a0a      	ldr	r2, [pc, #40]	@ (8006120 <prvCheckTasksWaitingTermination+0x58>)
 80060f8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80060fa:	f000 fef5 	bl	8006ee8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f810 	bl	8006124 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006104:	4b06      	ldr	r3, [pc, #24]	@ (8006120 <prvCheckTasksWaitingTermination+0x58>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e1      	bne.n	80060d0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	2000032c 	.word	0x2000032c
 800611c:	20000358 	.word	0x20000358
 8006120:	20000340 	.word	0x20000340

08006124 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
            {
                /* The task could have been allocated statically or dynamically, so
                 * check what was statically allocated before trying to free the
                 * memory. */
                if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006132:	2b00      	cmp	r3, #0
 8006134:	d108      	bne.n	8006148 <prvDeleteTCB+0x24>
                {
                    /* Both the stack and TCB were allocated dynamically, so both
                     * must be freed. */
                    vPortFree( pxTCB->pxStack );
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800613a:	4618      	mov	r0, r3
 800613c:	f001 f880 	bl	8007240 <vPortFree>
                    vPortFree( pxTCB );
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f001 f87d 	bl	8007240 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006146:	e013      	b.n	8006170 <prvDeleteTCB+0x4c>
                else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800614e:	2b01      	cmp	r3, #1
 8006150:	d103      	bne.n	800615a <prvDeleteTCB+0x36>
                    vPortFree( pxTCB );
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 f874 	bl	8007240 <vPortFree>
    }
 8006158:	e00a      	b.n	8006170 <prvDeleteTCB+0x4c>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8006160:	2b02      	cmp	r3, #2
 8006162:	d005      	beq.n	8006170 <prvDeleteTCB+0x4c>
 8006164:	f640 727a 	movw	r2, #3962	@ 0xf7a
 8006168:	4903      	ldr	r1, [pc, #12]	@ (8006178 <prvDeleteTCB+0x54>)
 800616a:	4804      	ldr	r0, [pc, #16]	@ (800617c <prvDeleteTCB+0x58>)
 800616c:	f00a fe30 	bl	8010dd0 <assertFail>
    }
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	08018738 	.word	0x08018738
 800617c:	080189f0 	.word	0x080189f0

08006180 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <prvResetNextTaskUnblockTime+0x30>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d104      	bne.n	8006198 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800618e:	4b09      	ldr	r3, [pc, #36]	@ (80061b4 <prvResetNextTaskUnblockTime+0x34>)
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006196:	e005      	b.n	80061a4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006198:	4b05      	ldr	r3, [pc, #20]	@ (80061b0 <prvResetNextTaskUnblockTime+0x30>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a04      	ldr	r2, [pc, #16]	@ (80061b4 <prvResetNextTaskUnblockTime+0x34>)
 80061a2:	6013      	str	r3, [r2, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	20000310 	.word	0x20000310
 80061b4:	20000378 	.word	0x20000378

080061b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80061b8:	b480      	push	{r7}
 80061ba:	b083      	sub	sp, #12
 80061bc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80061be:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <xTaskGetSchedulerState+0x34>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80061c6:	2301      	movs	r3, #1
 80061c8:	607b      	str	r3, [r7, #4]
 80061ca:	e008      	b.n	80061de <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061cc:	4b08      	ldr	r3, [pc, #32]	@ (80061f0 <xTaskGetSchedulerState+0x38>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d102      	bne.n	80061da <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80061d4:	2302      	movs	r3, #2
 80061d6:	607b      	str	r3, [r7, #4]
 80061d8:	e001      	b.n	80061de <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80061da:	2300      	movs	r3, #0
 80061dc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80061de:	687b      	ldr	r3, [r7, #4]
    }
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	20000364 	.word	0x20000364
 80061f0:	20000380 	.word	0x20000380

080061f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d05e      	beq.n	80062c8 <xTaskPriorityInherit+0xd4>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800620e:	4b31      	ldr	r3, [pc, #196]	@ (80062d4 <xTaskPriorityInherit+0xe0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	429a      	cmp	r2, r3
 8006216:	d24e      	bcs.n	80062b6 <xTaskPriorityInherit+0xc2>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	2b00      	cmp	r3, #0
 800621e:	db06      	blt.n	800622e <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006220:	4b2c      	ldr	r3, [pc, #176]	@ (80062d4 <xTaskPriorityInherit+0xe0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006226:	f1c3 0206 	rsb	r2, r3, #6
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6959      	ldr	r1, [r3, #20]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	4a26      	ldr	r2, [pc, #152]	@ (80062d8 <xTaskPriorityInherit+0xe4>)
 8006240:	4413      	add	r3, r2
 8006242:	4299      	cmp	r1, r3
 8006244:	d12f      	bne.n	80062a6 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	3304      	adds	r3, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f7fe f982 	bl	8004554 <uxListRemove>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10a      	bne.n	800626c <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	2201      	movs	r2, #1
 800625c:	fa02 f303 	lsl.w	r3, r2, r3
 8006260:	43da      	mvns	r2, r3
 8006262:	4b1e      	ldr	r3, [pc, #120]	@ (80062dc <xTaskPriorityInherit+0xe8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4013      	ands	r3, r2
 8006268:	4a1c      	ldr	r2, [pc, #112]	@ (80062dc <xTaskPriorityInherit+0xe8>)
 800626a:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800626c:	4b19      	ldr	r3, [pc, #100]	@ (80062d4 <xTaskPriorityInherit+0xe0>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627a:	2201      	movs	r2, #1
 800627c:	409a      	lsls	r2, r3
 800627e:	4b17      	ldr	r3, [pc, #92]	@ (80062dc <xTaskPriorityInherit+0xe8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4313      	orrs	r3, r2
 8006284:	4a15      	ldr	r2, [pc, #84]	@ (80062dc <xTaskPriorityInherit+0xe8>)
 8006286:	6013      	str	r3, [r2, #0]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4a10      	ldr	r2, [pc, #64]	@ (80062d8 <xTaskPriorityInherit+0xe4>)
 8006296:	441a      	add	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	3304      	adds	r3, #4
 800629c:	4619      	mov	r1, r3
 800629e:	4610      	mov	r0, r2
 80062a0:	f7fe f8fb 	bl	800449a <vListInsertEnd>
 80062a4:	e004      	b.n	80062b0 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80062a6:	4b0b      	ldr	r3, [pc, #44]	@ (80062d4 <xTaskPriorityInherit+0xe0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80062b0:	2301      	movs	r3, #1
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	e008      	b.n	80062c8 <xTaskPriorityInherit+0xd4>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062ba:	4b06      	ldr	r3, [pc, #24]	@ (80062d4 <xTaskPriorityInherit+0xe0>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d201      	bcs.n	80062c8 <xTaskPriorityInherit+0xd4>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80062c4:	2301      	movs	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80062c8:	68fb      	ldr	r3, [r7, #12]
    }
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	2000026c 	.word	0x2000026c
 80062d8:	20000270 	.word	0x20000270
 80062dc:	20000360 	.word	0x20000360

080062e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d059      	beq.n	80063aa <xTaskPriorityDisinherit+0xca>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80062f6:	4b2f      	ldr	r3, [pc, #188]	@ (80063b4 <xTaskPriorityDisinherit+0xd4>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d005      	beq.n	800630c <xTaskPriorityDisinherit+0x2c>
 8006300:	f241 022d 	movw	r2, #4141	@ 0x102d
 8006304:	492c      	ldr	r1, [pc, #176]	@ (80063b8 <xTaskPriorityDisinherit+0xd8>)
 8006306:	482d      	ldr	r0, [pc, #180]	@ (80063bc <xTaskPriorityDisinherit+0xdc>)
 8006308:	f00a fd62 	bl	8010dd0 <assertFail>
            configASSERT( pxTCB->uxMutexesHeld );
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <xTaskPriorityDisinherit+0x40>
 8006314:	f241 022e 	movw	r2, #4142	@ 0x102e
 8006318:	4927      	ldr	r1, [pc, #156]	@ (80063b8 <xTaskPriorityDisinherit+0xd8>)
 800631a:	4829      	ldr	r0, [pc, #164]	@ (80063c0 <xTaskPriorityDisinherit+0xe0>)
 800631c:	f00a fd58 	bl	8010dd0 <assertFail>
            ( pxTCB->uxMutexesHeld )--;
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006324:	1e5a      	subs	r2, r3, #1
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006332:	429a      	cmp	r2, r3
 8006334:	d039      	beq.n	80063aa <xTaskPriorityDisinherit+0xca>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800633a:	2b00      	cmp	r3, #0
 800633c:	d135      	bne.n	80063aa <xTaskPriorityDisinherit+0xca>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3304      	adds	r3, #4
 8006342:	4618      	mov	r0, r3
 8006344:	f7fe f906 	bl	8004554 <uxListRemove>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xTaskPriorityDisinherit+0x84>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006352:	2201      	movs	r2, #1
 8006354:	fa02 f303 	lsl.w	r3, r2, r3
 8006358:	43da      	mvns	r2, r3
 800635a:	4b1a      	ldr	r3, [pc, #104]	@ (80063c4 <xTaskPriorityDisinherit+0xe4>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4013      	ands	r3, r2
 8006360:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <xTaskPriorityDisinherit+0xe4>)
 8006362:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006370:	f1c3 0206 	rsb	r2, r3, #6
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	4b10      	ldr	r3, [pc, #64]	@ (80063c4 <xTaskPriorityDisinherit+0xe4>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4313      	orrs	r3, r2
 8006386:	4a0f      	ldr	r2, [pc, #60]	@ (80063c4 <xTaskPriorityDisinherit+0xe4>)
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638e:	4613      	mov	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	4413      	add	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4a0c      	ldr	r2, [pc, #48]	@ (80063c8 <xTaskPriorityDisinherit+0xe8>)
 8006398:	441a      	add	r2, r3
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	3304      	adds	r3, #4
 800639e:	4619      	mov	r1, r3
 80063a0:	4610      	mov	r0, r2
 80063a2:	f7fe f87a 	bl	800449a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80063a6:	2301      	movs	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80063aa:	68fb      	ldr	r3, [r7, #12]
    }
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	2000026c 	.word	0x2000026c
 80063b8:	08018738 	.word	0x08018738
 80063bc:	08018a38 	.word	0x08018a38
 80063c0:	08018a50 	.word	0x08018a50
 80063c4:	20000360 	.word	0x20000360
 80063c8:	20000270 	.word	0x20000270

080063cc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b086      	sub	sp, #24
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	613b      	str	r3, [r7, #16]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80063da:	2301      	movs	r3, #1
 80063dc:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d06d      	beq.n	80064c0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 80063ec:	f241 027d 	movw	r2, #4221	@ 0x107d
 80063f0:	4935      	ldr	r1, [pc, #212]	@ (80064c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80063f2:	4836      	ldr	r0, [pc, #216]	@ (80064cc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80063f4:	f00a fcec 	bl	8010dd0 <assertFail>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80063fc:	683a      	ldr	r2, [r7, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d902      	bls.n	8006408 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e002      	b.n	800640e <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800640c:	617b      	str	r3, [r7, #20]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	697a      	ldr	r2, [r7, #20]
 8006414:	429a      	cmp	r2, r3
 8006416:	d053      	beq.n	80064c0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	429a      	cmp	r2, r3
 8006420:	d14e      	bne.n	80064c0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8006422:	4b2b      	ldr	r3, [pc, #172]	@ (80064d0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	429a      	cmp	r2, r3
 800642a:	d105      	bne.n	8006438 <vTaskPriorityDisinheritAfterTimeout+0x6c>
 800642c:	f241 0298 	movw	r2, #4248	@ 0x1098
 8006430:	4925      	ldr	r1, [pc, #148]	@ (80064c8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006432:	4828      	ldr	r0, [pc, #160]	@ (80064d4 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006434:	f00a fccc 	bl	8010dd0 <assertFail>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643c:	60bb      	str	r3, [r7, #8]
                    pxTCB->uxPriority = uxPriorityToUse;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	2b00      	cmp	r3, #0
 800644a:	db04      	blt.n	8006456 <vTaskPriorityDisinheritAfterTimeout+0x8a>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f1c3 0206 	rsb	r2, r3, #6
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6959      	ldr	r1, [r3, #20]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	4a1c      	ldr	r2, [pc, #112]	@ (80064d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006466:	4413      	add	r3, r2
 8006468:	4299      	cmp	r1, r3
 800646a:	d129      	bne.n	80064c0 <vTaskPriorityDisinheritAfterTimeout+0xf4>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	3304      	adds	r3, #4
 8006470:	4618      	mov	r0, r3
 8006472:	f7fe f86f 	bl	8004554 <uxListRemove>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <vTaskPriorityDisinheritAfterTimeout+0xc6>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006480:	2201      	movs	r2, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43da      	mvns	r2, r3
 8006488:	4b14      	ldr	r3, [pc, #80]	@ (80064dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4013      	ands	r3, r2
 800648e:	4a13      	ldr	r2, [pc, #76]	@ (80064dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006490:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006496:	2201      	movs	r2, #1
 8006498:	409a      	lsls	r2, r3
 800649a:	4b10      	ldr	r3, [pc, #64]	@ (80064dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4313      	orrs	r3, r2
 80064a0:	4a0e      	ldr	r2, [pc, #56]	@ (80064dc <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80064a2:	6013      	str	r3, [r2, #0]
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a8:	4613      	mov	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4a09      	ldr	r2, [pc, #36]	@ (80064d8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80064b2:	441a      	add	r2, r3
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	3304      	adds	r3, #4
 80064b8:	4619      	mov	r1, r3
 80064ba:	4610      	mov	r0, r2
 80064bc:	f7fd ffed 	bl	800449a <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80064c0:	bf00      	nop
 80064c2:	3718      	adds	r7, #24
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	08018738 	.word	0x08018738
 80064cc:	08018a50 	.word	0x08018a50
 80064d0:	2000026c 	.word	0x2000026c
 80064d4:	08018a68 	.word	0x08018a68
 80064d8:	20000270 	.word	0x20000270
 80064dc:	20000360 	.word	0x20000360

080064e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80064e0:	b480      	push	{r7}
 80064e2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80064e4:	4b07      	ldr	r3, [pc, #28]	@ (8006504 <pvTaskIncrementMutexHeldCount+0x24>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d004      	beq.n	80064f6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80064ec:	4b05      	ldr	r3, [pc, #20]	@ (8006504 <pvTaskIncrementMutexHeldCount+0x24>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80064f2:	3201      	adds	r2, #1
 80064f4:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        return pxCurrentTCB;
 80064f6:	4b03      	ldr	r3, [pc, #12]	@ (8006504 <pvTaskIncrementMutexHeldCount+0x24>)
 80064f8:	681b      	ldr	r3, [r3, #0]
    }
 80064fa:	4618      	mov	r0, r3
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	2000026c 	.word	0x2000026c

08006508 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006512:	4b29      	ldr	r3, [pc, #164]	@ (80065b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006518:	4b28      	ldr	r3, [pc, #160]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3304      	adds	r3, #4
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f818 	bl	8004554 <uxListRemove>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10b      	bne.n	8006542 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800652a:	4b24      	ldr	r3, [pc, #144]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	2201      	movs	r2, #1
 8006532:	fa02 f303 	lsl.w	r3, r2, r3
 8006536:	43da      	mvns	r2, r3
 8006538:	4b21      	ldr	r3, [pc, #132]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4013      	ands	r3, r2
 800653e:	4a20      	ldr	r2, [pc, #128]	@ (80065c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006540:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006548:	d10a      	bne.n	8006560 <prvAddCurrentTaskToDelayedList+0x58>
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d007      	beq.n	8006560 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006550:	4b1a      	ldr	r3, [pc, #104]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3304      	adds	r3, #4
 8006556:	4619      	mov	r1, r3
 8006558:	481a      	ldr	r0, [pc, #104]	@ (80065c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800655a:	f7fd ff9e 	bl	800449a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800655e:	e026      	b.n	80065ae <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006568:	4b14      	ldr	r3, [pc, #80]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	429a      	cmp	r2, r3
 8006576:	d209      	bcs.n	800658c <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006578:	4b13      	ldr	r3, [pc, #76]	@ (80065c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	4b0f      	ldr	r3, [pc, #60]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	3304      	adds	r3, #4
 8006582:	4619      	mov	r1, r3
 8006584:	4610      	mov	r0, r2
 8006586:	f7fd ffac 	bl	80044e2 <vListInsert>
}
 800658a:	e010      	b.n	80065ae <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800658c:	4b0f      	ldr	r3, [pc, #60]	@ (80065cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	4b0a      	ldr	r3, [pc, #40]	@ (80065bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3304      	adds	r3, #4
 8006596:	4619      	mov	r1, r3
 8006598:	4610      	mov	r0, r2
 800659a:	f7fd ffa2 	bl	80044e2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800659e:	4b0c      	ldr	r3, [pc, #48]	@ (80065d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d202      	bcs.n	80065ae <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 80065a8:	4a09      	ldr	r2, [pc, #36]	@ (80065d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6013      	str	r3, [r2, #0]
}
 80065ae:	bf00      	nop
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	2000035c 	.word	0x2000035c
 80065bc:	2000026c 	.word	0x2000026c
 80065c0:	20000360 	.word	0x20000360
 80065c4:	20000344 	.word	0x20000344
 80065c8:	20000314 	.word	0x20000314
 80065cc:	20000310 	.word	0x20000310
 80065d0:	20000378 	.word	0x20000378

080065d4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80065de:	f000 fb03 	bl	8006be8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80065e2:	4b19      	ldr	r3, [pc, #100]	@ (8006648 <xTimerCreateTimerTask+0x74>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d020      	beq.n	800662c <xTimerCreateTimerTask+0x58>
        {
            #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60bb      	str	r3, [r7, #8]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	607b      	str	r3, [r7, #4]
                    uint32_t ulTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065f2:	463a      	mov	r2, r7
 80065f4:	1d39      	adds	r1, r7, #4
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f005 f956 	bl	800b8ac <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	2301      	movs	r3, #1
 800660c:	9300      	str	r3, [sp, #0]
 800660e:	2300      	movs	r3, #0
 8006610:	460a      	mov	r2, r1
 8006612:	490e      	ldr	r1, [pc, #56]	@ (800664c <xTimerCreateTimerTask+0x78>)
 8006614:	480e      	ldr	r0, [pc, #56]	@ (8006650 <xTimerCreateTimerTask+0x7c>)
 8006616:	f7fe fef1 	bl	80053fc <xTaskCreateStatic>
 800661a:	4603      	mov	r3, r0
 800661c:	4a0d      	ldr	r2, [pc, #52]	@ (8006654 <xTimerCreateTimerTask+0x80>)
 800661e:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8006620:	4b0c      	ldr	r3, [pc, #48]	@ (8006654 <xTimerCreateTimerTask+0x80>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <xTimerCreateTimerTask+0x58>
                    {
                        xReturn = pdPASS;
 8006628:	2301      	movs	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d105      	bne.n	800663e <xTimerCreateTimerTask+0x6a>
 8006632:	f240 120d 	movw	r2, #269	@ 0x10d
 8006636:	4908      	ldr	r1, [pc, #32]	@ (8006658 <xTimerCreateTimerTask+0x84>)
 8006638:	4808      	ldr	r0, [pc, #32]	@ (800665c <xTimerCreateTimerTask+0x88>)
 800663a:	f00a fbc9 	bl	8010dd0 <assertFail>
        return xReturn;
 800663e:	68fb      	ldr	r3, [r7, #12]
    }
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	200003bc 	.word	0x200003bc
 800664c:	08018b98 	.word	0x08018b98
 8006650:	08006791 	.word	0x08006791
 8006654:	200003c0 	.word	0x200003c0
 8006658:	08018ba0 	.word	0x08018ba0
 800665c:	08018bb8 	.word	0x08018bb8

08006660 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006660:	b580      	push	{r7, lr}
 8006662:	b08a      	sub	sp, #40	@ 0x28
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800666e:	2300      	movs	r3, #0
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d105      	bne.n	8006684 <xTimerGenericCommand+0x24>
 8006678:	f44f 72c1 	mov.w	r2, #386	@ 0x182
 800667c:	491b      	ldr	r1, [pc, #108]	@ (80066ec <xTimerGenericCommand+0x8c>)
 800667e:	481c      	ldr	r0, [pc, #112]	@ (80066f0 <xTimerGenericCommand+0x90>)
 8006680:	f00a fba6 	bl	8010dd0 <assertFail>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006684:	4b1b      	ldr	r3, [pc, #108]	@ (80066f4 <xTimerGenericCommand+0x94>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02a      	beq.n	80066e2 <xTimerGenericCommand+0x82>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b05      	cmp	r3, #5
 800669c:	dc18      	bgt.n	80066d0 <xTimerGenericCommand+0x70>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800669e:	f7ff fd8b 	bl	80061b8 <xTaskGetSchedulerState>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d109      	bne.n	80066bc <xTimerGenericCommand+0x5c>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066a8:	4b12      	ldr	r3, [pc, #72]	@ (80066f4 <xTimerGenericCommand+0x94>)
 80066aa:	6818      	ldr	r0, [r3, #0]
 80066ac:	f107 0114 	add.w	r1, r7, #20
 80066b0:	2300      	movs	r3, #0
 80066b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b4:	f7fe f8f4 	bl	80048a0 <xQueueGenericSend>
 80066b8:	6278      	str	r0, [r7, #36]	@ 0x24
 80066ba:	e012      	b.n	80066e2 <xTimerGenericCommand+0x82>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066bc:	4b0d      	ldr	r3, [pc, #52]	@ (80066f4 <xTimerGenericCommand+0x94>)
 80066be:	6818      	ldr	r0, [r3, #0]
 80066c0:	f107 0114 	add.w	r1, r7, #20
 80066c4:	2300      	movs	r3, #0
 80066c6:	2200      	movs	r2, #0
 80066c8:	f7fe f8ea 	bl	80048a0 <xQueueGenericSend>
 80066cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80066ce:	e008      	b.n	80066e2 <xTimerGenericCommand+0x82>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066d0:	4b08      	ldr	r3, [pc, #32]	@ (80066f4 <xTimerGenericCommand+0x94>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	f107 0114 	add.w	r1, r7, #20
 80066d8:	2300      	movs	r3, #0
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	f7fe f9ee 	bl	8004abc <xQueueGenericSendFromISR>
 80066e0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80066e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80066e4:	4618      	mov	r0, r3
 80066e6:	3728      	adds	r7, #40	@ 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	08018ba0 	.word	0x08018ba0
 80066f0:	08018c08 	.word	0x08018c08
 80066f4:	200003bc 	.word	0x200003bc

080066f8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af02      	add	r7, sp, #8
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006702:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <prvProcessExpiredTimer+0x8c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3304      	adds	r3, #4
 8006710:	4618      	mov	r0, r3
 8006712:	f7fd ff1f 	bl	8004554 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800671c:	f003 0304 	and.w	r3, r3, #4
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01e      	beq.n	8006762 <prvProcessExpiredTimer+0x6a>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	18d1      	adds	r1, r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 f8d3 	bl	80068dc <prvInsertTimerInActiveList>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d01b      	beq.n	8006774 <prvProcessExpiredTimer+0x7c>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800673c:	2300      	movs	r3, #0
 800673e:	9300      	str	r3, [sp, #0]
 8006740:	2300      	movs	r3, #0
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	2100      	movs	r1, #0
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f7ff ff8a 	bl	8006660 <xTimerGenericCommand>
 800674c:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10f      	bne.n	8006774 <prvProcessExpiredTimer+0x7c>
 8006754:	f44f 7205 	mov.w	r2, #532	@ 0x214
 8006758:	490b      	ldr	r1, [pc, #44]	@ (8006788 <prvProcessExpiredTimer+0x90>)
 800675a:	480c      	ldr	r0, [pc, #48]	@ (800678c <prvProcessExpiredTimer+0x94>)
 800675c:	f00a fb38 	bl	8010dd0 <assertFail>
 8006760:	e008      	b.n	8006774 <prvProcessExpiredTimer+0x7c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006768:	f023 0301 	bic.w	r3, r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	4798      	blx	r3
    }
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	200003b4 	.word	0x200003b4
 8006788:	08018ba0 	.word	0x08018ba0
 800678c:	08018c30 	.word	0x08018c30

08006790 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006798:	f107 0308 	add.w	r3, r7, #8
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f859 	bl	8006854 <prvGetNextExpireTime>
 80067a2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f805 	bl	80067b8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80067ae:	f000 f8d7 	bl	8006960 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067b2:	bf00      	nop
 80067b4:	e7f0      	b.n	8006798 <prvTimerTask+0x8>
	...

080067b8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80067c2:	f7ff f8df 	bl	8005984 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f866 	bl	800689c <prvSampleTimeNow>
 80067d0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d130      	bne.n	800683a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <prvProcessTimerOrBlockTask+0x3c>
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d806      	bhi.n	80067f4 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80067e6:	f7ff f8db 	bl	80059a0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7ff ff83 	bl	80066f8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80067f2:	e024      	b.n	800683e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d008      	beq.n	800680c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067fa:	4b13      	ldr	r3, [pc, #76]	@ (8006848 <prvProcessTimerOrBlockTask+0x90>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <prvProcessTimerOrBlockTask+0x50>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <prvProcessTimerOrBlockTask+0x52>
 8006808:	2300      	movs	r3, #0
 800680a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800680c:	4b0f      	ldr	r3, [pc, #60]	@ (800684c <prvProcessTimerOrBlockTask+0x94>)
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	4619      	mov	r1, r3
 800681a:	f7fe fdbb 	bl	8005394 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800681e:	f7ff f8bf 	bl	80059a0 <xTaskResumeAll>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10a      	bne.n	800683e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006828:	4b09      	ldr	r3, [pc, #36]	@ (8006850 <prvProcessTimerOrBlockTask+0x98>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
    }
 8006838:	e001      	b.n	800683e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800683a:	f7ff f8b1 	bl	80059a0 <xTaskResumeAll>
    }
 800683e:	bf00      	nop
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	200003b8 	.word	0x200003b8
 800684c:	200003bc 	.word	0x200003bc
 8006850:	e000ed04 	.word	0xe000ed04

08006854 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8006854:	b480      	push	{r7}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800685c:	4b0e      	ldr	r3, [pc, #56]	@ (8006898 <prvGetNextExpireTime+0x44>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <prvGetNextExpireTime+0x16>
 8006866:	2201      	movs	r2, #1
 8006868:	e000      	b.n	800686c <prvGetNextExpireTime+0x18>
 800686a:	2200      	movs	r2, #0
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d105      	bne.n	8006884 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006878:	4b07      	ldr	r3, [pc, #28]	@ (8006898 <prvGetNextExpireTime+0x44>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e001      	b.n	8006888 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8006888:	68fb      	ldr	r3, [r7, #12]
    }
 800688a:	4618      	mov	r0, r3
 800688c:	3714      	adds	r7, #20
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	200003b4 	.word	0x200003b4

0800689c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80068a4:	f7ff f918 	bl	8005ad8 <xTaskGetTickCount>
 80068a8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80068aa:	4b0b      	ldr	r3, [pc, #44]	@ (80068d8 <prvSampleTimeNow+0x3c>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d205      	bcs.n	80068c0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80068b4:	f000 f934 	bl	8006b20 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e002      	b.n	80068c6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80068c6:	4a04      	ldr	r2, [pc, #16]	@ (80068d8 <prvSampleTimeNow+0x3c>)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80068cc:	68fb      	ldr	r3, [r7, #12]
    }
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	200003c4 	.word	0x200003c4

080068dc <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	68fa      	ldr	r2, [r7, #12]
 80068f8:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d812      	bhi.n	8006928 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	1ad2      	subs	r2, r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	429a      	cmp	r2, r3
 800690e:	d302      	bcc.n	8006916 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	e01b      	b.n	800694e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006916:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <prvInsertTimerInActiveList+0x7c>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3304      	adds	r3, #4
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7fd fdde 	bl	80044e2 <vListInsert>
 8006926:	e012      	b.n	800694e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d206      	bcs.n	800693e <prvInsertTimerInActiveList+0x62>
 8006930:	68ba      	ldr	r2, [r7, #8]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006938:	2301      	movs	r3, #1
 800693a:	617b      	str	r3, [r7, #20]
 800693c:	e007      	b.n	800694e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800693e:	4b07      	ldr	r3, [pc, #28]	@ (800695c <prvInsertTimerInActiveList+0x80>)
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	3304      	adds	r3, #4
 8006946:	4619      	mov	r1, r3
 8006948:	4610      	mov	r0, r2
 800694a:	f7fd fdca 	bl	80044e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800694e:	697b      	ldr	r3, [r7, #20]
    }
 8006950:	4618      	mov	r0, r3
 8006952:	3718      	adds	r7, #24
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}
 8006958:	200003b8 	.word	0x200003b8
 800695c:	200003b4 	.word	0x200003b4

08006960 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006960:	b580      	push	{r7, lr}
 8006962:	b08c      	sub	sp, #48	@ 0x30
 8006964:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006966:	e0bf      	b.n	8006ae8 <prvProcessReceivedCommands+0x188>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	da14      	bge.n	8006998 <prvProcessReceivedCommands+0x38>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800696e:	f107 0308 	add.w	r3, r7, #8
 8006972:	3304      	adds	r3, #4
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8006976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <prvProcessReceivedCommands+0x28>
 800697c:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8006980:	4962      	ldr	r1, [pc, #392]	@ (8006b0c <prvProcessReceivedCommands+0x1ac>)
 8006982:	4863      	ldr	r0, [pc, #396]	@ (8006b10 <prvProcessReceivedCommands+0x1b0>)
 8006984:	f00a fa24 	bl	8010dd0 <assertFail>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800698e:	6850      	ldr	r0, [r2, #4]
 8006990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006992:	6892      	ldr	r2, [r2, #8]
 8006994:	4611      	mov	r1, r2
 8006996:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f2c0 80a4 	blt.w	8006ae8 <prvProcessReceivedCommands+0x188>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069a4:	6a3b      	ldr	r3, [r7, #32]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <prvProcessReceivedCommands+0x56>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fd fdcf 	bl	8004554 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b6:	1d3b      	adds	r3, r7, #4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff ff6f 	bl	800689c <prvSampleTimeNow>
 80069be:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b09      	cmp	r3, #9
 80069c4:	f200 808d 	bhi.w	8006ae2 <prvProcessReceivedCommands+0x182>
 80069c8:	a201      	add	r2, pc, #4	@ (adr r2, 80069d0 <prvProcessReceivedCommands+0x70>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	080069f9 	.word	0x080069f9
 80069dc:	08006a65 	.word	0x08006a65
 80069e0:	08006a79 	.word	0x08006a79
 80069e4:	08006ab9 	.word	0x08006ab9
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	080069f9 	.word	0x080069f9
 80069f0:	08006a65 	.word	0x08006a65
 80069f4:	08006a79 	.word	0x08006a79
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	18d1      	adds	r1, r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	69fa      	ldr	r2, [r7, #28]
 8006a16:	6a38      	ldr	r0, [r7, #32]
 8006a18:	f7ff ff60 	bl	80068dc <prvInsertTimerInActiveList>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d061      	beq.n	8006ae6 <prvProcessReceivedCommands+0x186>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	6a38      	ldr	r0, [r7, #32]
 8006a28:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d056      	beq.n	8006ae6 <prvProcessReceivedCommands+0x186>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	441a      	add	r2, r3
 8006a40:	2300      	movs	r3, #0
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	6a38      	ldr	r0, [r7, #32]
 8006a4a:	f7ff fe09 	bl	8006660 <xTimerGenericCommand>
 8006a4e:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d147      	bne.n	8006ae6 <prvProcessReceivedCommands+0x186>
 8006a56:	f240 3236 	movw	r2, #822	@ 0x336
 8006a5a:	492c      	ldr	r1, [pc, #176]	@ (8006b0c <prvProcessReceivedCommands+0x1ac>)
 8006a5c:	482d      	ldr	r0, [pc, #180]	@ (8006b14 <prvProcessReceivedCommands+0x1b4>)
 8006a5e:	f00a f9b7 	bl	8010dd0 <assertFail>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8006a62:	e040      	b.n	8006ae6 <prvProcessReceivedCommands+0x186>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a6a:	f023 0301 	bic.w	r3, r3, #1
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	6a3b      	ldr	r3, [r7, #32]
 8006a72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006a76:	e037      	b.n	8006ae8 <prvProcessReceivedCommands+0x188>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a7e:	f043 0301 	orr.w	r3, r3, #1
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	6a3b      	ldr	r3, [r7, #32]
 8006a8e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d105      	bne.n	8006aa4 <prvProcessReceivedCommands+0x144>
 8006a98:	f240 324f 	movw	r2, #847	@ 0x34f
 8006a9c:	491b      	ldr	r1, [pc, #108]	@ (8006b0c <prvProcessReceivedCommands+0x1ac>)
 8006a9e:	481e      	ldr	r0, [pc, #120]	@ (8006b18 <prvProcessReceivedCommands+0x1b8>)
 8006aa0:	f00a f996 	bl	8010dd0 <assertFail>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	699a      	ldr	r2, [r3, #24]
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	18d1      	adds	r1, r2, r3
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	6a38      	ldr	r0, [r7, #32]
 8006ab2:	f7ff ff13 	bl	80068dc <prvInsertTimerInActiveList>
                        break;
 8006ab6:	e017      	b.n	8006ae8 <prvProcessReceivedCommands+0x188>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <prvProcessReceivedCommands+0x16e>
                                {
                                    vPortFree( pxTimer );
 8006ac6:	6a38      	ldr	r0, [r7, #32]
 8006ac8:	f000 fbba 	bl	8007240 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006acc:	e00c      	b.n	8006ae8 <prvProcessReceivedCommands+0x188>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006ae0:	e002      	b.n	8006ae8 <prvProcessReceivedCommands+0x188>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006ae2:	bf00      	nop
 8006ae4:	e000      	b.n	8006ae8 <prvProcessReceivedCommands+0x188>
                        break;
 8006ae6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8006b1c <prvProcessReceivedCommands+0x1bc>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f107 0108 	add.w	r1, r7, #8
 8006af0:	2200      	movs	r2, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe f912 	bl	8004d1c <xQueueReceive>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f47f af34 	bne.w	8006968 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop
 8006b04:	3728      	adds	r7, #40	@ 0x28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	08018ba0 	.word	0x08018ba0
 8006b10:	08018c38 	.word	0x08018c38
 8006b14:	08018c30 	.word	0x08018c30
 8006b18:	08018c44 	.word	0x08018c44
 8006b1c:	200003bc 	.word	0x200003bc

08006b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b26:	e043      	b.n	8006bb0 <prvSwitchTimerLists+0x90>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b28:	4b2b      	ldr	r3, [pc, #172]	@ (8006bd8 <prvSwitchTimerLists+0xb8>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b32:	4b29      	ldr	r3, [pc, #164]	@ (8006bd8 <prvSwitchTimerLists+0xb8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4618      	mov	r0, r3
 8006b42:	f7fd fd07 	bl	8004554 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d029      	beq.n	8006bb0 <prvSwitchTimerLists+0x90>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	693a      	ldr	r2, [r7, #16]
 8006b62:	4413      	add	r3, r2
 8006b64:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d90e      	bls.n	8006b8c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	68ba      	ldr	r2, [r7, #8]
 8006b72:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7a:	4b17      	ldr	r3, [pc, #92]	@ (8006bd8 <prvSwitchTimerLists+0xb8>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fd fcac 	bl	80044e2 <vListInsert>
 8006b8a:	e011      	b.n	8006bb0 <prvSwitchTimerLists+0x90>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	2100      	movs	r1, #0
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f7ff fd62 	bl	8006660 <xTimerGenericCommand>
 8006b9c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d105      	bne.n	8006bb0 <prvSwitchTimerLists+0x90>
 8006ba4:	f240 32a9 	movw	r2, #937	@ 0x3a9
 8006ba8:	490c      	ldr	r1, [pc, #48]	@ (8006bdc <prvSwitchTimerLists+0xbc>)
 8006baa:	480d      	ldr	r0, [pc, #52]	@ (8006be0 <prvSwitchTimerLists+0xc0>)
 8006bac:	f00a f910 	bl	8010dd0 <assertFail>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bb0:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <prvSwitchTimerLists+0xb8>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1b6      	bne.n	8006b28 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8006bba:	4b07      	ldr	r3, [pc, #28]	@ (8006bd8 <prvSwitchTimerLists+0xb8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006bc0:	4b08      	ldr	r3, [pc, #32]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a04      	ldr	r2, [pc, #16]	@ (8006bd8 <prvSwitchTimerLists+0xb8>)
 8006bc6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8006bc8:	4a06      	ldr	r2, [pc, #24]	@ (8006be4 <prvSwitchTimerLists+0xc4>)
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6013      	str	r3, [r2, #0]
    }
 8006bce:	bf00      	nop
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200003b4 	.word	0x200003b4
 8006bdc:	08018ba0 	.word	0x08018ba0
 8006be0:	08018c30 	.word	0x08018c30
 8006be4:	200003b8 	.word	0x200003b8

08006be8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006bee:	f000 f94d 	bl	8006e8c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006bf2:	4b15      	ldr	r3, [pc, #84]	@ (8006c48 <prvCheckForValidListAndQueue+0x60>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d120      	bne.n	8006c3c <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8006bfa:	4814      	ldr	r0, [pc, #80]	@ (8006c4c <prvCheckForValidListAndQueue+0x64>)
 8006bfc:	f7fd fc20 	bl	8004440 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8006c00:	4813      	ldr	r0, [pc, #76]	@ (8006c50 <prvCheckForValidListAndQueue+0x68>)
 8006c02:	f7fd fc1d 	bl	8004440 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006c06:	4b13      	ldr	r3, [pc, #76]	@ (8006c54 <prvCheckForValidListAndQueue+0x6c>)
 8006c08:	4a10      	ldr	r2, [pc, #64]	@ (8006c4c <prvCheckForValidListAndQueue+0x64>)
 8006c0a:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006c0c:	4b12      	ldr	r3, [pc, #72]	@ (8006c58 <prvCheckForValidListAndQueue+0x70>)
 8006c0e:	4a10      	ldr	r2, [pc, #64]	@ (8006c50 <prvCheckForValidListAndQueue+0x68>)
 8006c10:	601a      	str	r2, [r3, #0]
                        /* The timer queue is allocated statically in case
                         * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                        PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;                                                                          /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
                        PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c12:	2300      	movs	r3, #0
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	4b11      	ldr	r3, [pc, #68]	@ (8006c5c <prvCheckForValidListAndQueue+0x74>)
 8006c18:	4a11      	ldr	r2, [pc, #68]	@ (8006c60 <prvCheckForValidListAndQueue+0x78>)
 8006c1a:	2110      	movs	r1, #16
 8006c1c:	2014      	movs	r0, #20
 8006c1e:	f7fd fd2b 	bl	8004678 <xQueueGenericCreateStatic>
 8006c22:	4603      	mov	r3, r0
 8006c24:	4a08      	ldr	r2, [pc, #32]	@ (8006c48 <prvCheckForValidListAndQueue+0x60>)
 8006c26:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006c28:	4b07      	ldr	r3, [pc, #28]	@ (8006c48 <prvCheckForValidListAndQueue+0x60>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <prvCheckForValidListAndQueue+0x54>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c30:	4b05      	ldr	r3, [pc, #20]	@ (8006c48 <prvCheckForValidListAndQueue+0x60>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	490b      	ldr	r1, [pc, #44]	@ (8006c64 <prvCheckForValidListAndQueue+0x7c>)
 8006c36:	4618      	mov	r0, r3
 8006c38:	f7fe fb82 	bl	8005340 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006c3c:	f000 f954 	bl	8006ee8 <vPortExitCritical>
    }
 8006c40:	bf00      	nop
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	200003bc 	.word	0x200003bc
 8006c4c:	2000038c 	.word	0x2000038c
 8006c50:	200003a0 	.word	0x200003a0
 8006c54:	200003b4 	.word	0x200003b4
 8006c58:	200003b8 	.word	0x200003b8
 8006c5c:	20000508 	.word	0x20000508
 8006c60:	200003c8 	.word	0x200003c8
 8006c64:	08018c6c 	.word	0x08018c6c

08006c68 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3b04      	subs	r3, #4
 8006c78:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	3b04      	subs	r3, #4
 8006c86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	f023 0201 	bic.w	r2, r3, #1
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	3b04      	subs	r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006c98:	4a0c      	ldr	r2, [pc, #48]	@ (8006ccc <pxPortInitialiseStack+0x64>)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	3b14      	subs	r3, #20
 8006ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006ca4:	687a      	ldr	r2, [r7, #4]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	3b04      	subs	r3, #4
 8006cae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f06f 0202 	mvn.w	r2, #2
 8006cb6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3b20      	subs	r3, #32
 8006cbc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr
 8006ccc:	08006cd1 	.word	0x08006cd1

08006cd0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006cda:	4b0e      	ldr	r3, [pc, #56]	@ (8006d14 <prvTaskExitError+0x44>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce2:	d004      	beq.n	8006cee <prvTaskExitError+0x1e>
 8006ce4:	22e5      	movs	r2, #229	@ 0xe5
 8006ce6:	490c      	ldr	r1, [pc, #48]	@ (8006d18 <prvTaskExitError+0x48>)
 8006ce8:	480c      	ldr	r0, [pc, #48]	@ (8006d1c <prvTaskExitError+0x4c>)
 8006cea:	f00a f871 	bl	8010dd0 <assertFail>
        __asm volatile
 8006cee:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	607b      	str	r3, [r7, #4]
    }
 8006d00:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006d02:	bf00      	nop
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0fc      	beq.n	8006d04 <prvTaskExitError+0x34>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006d0a:	bf00      	nop
 8006d0c:	bf00      	nop
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	2000000c 	.word	0x2000000c
 8006d18:	08018c80 	.word	0x08018c80
 8006d1c:	08018cac 	.word	0x08018cac

08006d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006d20:	4b07      	ldr	r3, [pc, #28]	@ (8006d40 <pxCurrentTCBConst2>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	6808      	ldr	r0, [r1, #0]
 8006d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	f380 8809 	msr	PSP, r0
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f04f 0000 	mov.w	r0, #0
 8006d36:	f380 8811 	msr	BASEPRI, r0
 8006d3a:	4770      	bx	lr
 8006d3c:	f3af 8000 	nop.w

08006d40 <pxCurrentTCBConst2>:
 8006d40:	2000026c 	.word	0x2000026c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop

08006d48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006d48:	4808      	ldr	r0, [pc, #32]	@ (8006d6c <prvPortStartFirstTask+0x24>)
 8006d4a:	6800      	ldr	r0, [r0, #0]
 8006d4c:	6800      	ldr	r0, [r0, #0]
 8006d4e:	f380 8808 	msr	MSP, r0
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8814 	msr	CONTROL, r0
 8006d5a:	b662      	cpsie	i
 8006d5c:	b661      	cpsie	f
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	df00      	svc	0
 8006d68:	bf00      	nop
 8006d6a:	0000      	.short	0x0000
 8006d6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop

08006d74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d7a:	4b38      	ldr	r3, [pc, #224]	@ (8006e5c <xPortStartScheduler+0xe8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a38      	ldr	r2, [pc, #224]	@ (8006e60 <xPortStartScheduler+0xec>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d105      	bne.n	8006d90 <xPortStartScheduler+0x1c>
 8006d84:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006d88:	4936      	ldr	r1, [pc, #216]	@ (8006e64 <xPortStartScheduler+0xf0>)
 8006d8a:	4837      	ldr	r0, [pc, #220]	@ (8006e68 <xPortStartScheduler+0xf4>)
 8006d8c:	f00a f820 	bl	8010dd0 <assertFail>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006d90:	4b32      	ldr	r3, [pc, #200]	@ (8006e5c <xPortStartScheduler+0xe8>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a35      	ldr	r2, [pc, #212]	@ (8006e6c <xPortStartScheduler+0xf8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d105      	bne.n	8006da6 <xPortStartScheduler+0x32>
 8006d9a:	f240 122d 	movw	r2, #301	@ 0x12d
 8006d9e:	4931      	ldr	r1, [pc, #196]	@ (8006e64 <xPortStartScheduler+0xf0>)
 8006da0:	4833      	ldr	r0, [pc, #204]	@ (8006e70 <xPortStartScheduler+0xfc>)
 8006da2:	f00a f815 	bl	8010dd0 <assertFail>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006da6:	4b33      	ldr	r3, [pc, #204]	@ (8006e74 <xPortStartScheduler+0x100>)
 8006da8:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	22ff      	movs	r2, #255	@ 0xff
 8006db6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	f003 035f 	and.w	r3, r3, #95	@ 0x5f
 8006dc8:	b2da      	uxtb	r2, r3
 8006dca:	4b2b      	ldr	r3, [pc, #172]	@ (8006e78 <xPortStartScheduler+0x104>)
 8006dcc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006dce:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006dd0:	2207      	movs	r2, #7
 8006dd2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dd4:	e009      	b.n	8006dea <xPortStartScheduler+0x76>
            {
                ulMaxPRIGROUPValue--;
 8006dd6:	4b29      	ldr	r3, [pc, #164]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	4a27      	ldr	r2, [pc, #156]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006dde:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	005b      	lsls	r3, r3, #1
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006dea:	79fb      	ldrb	r3, [r7, #7]
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006df2:	2b80      	cmp	r3, #128	@ 0x80
 8006df4:	d0ef      	beq.n	8006dd6 <xPortStartScheduler+0x62>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006df6:	4b21      	ldr	r3, [pc, #132]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	021b      	lsls	r3, r3, #8
 8006dfc:	4a1f      	ldr	r2, [pc, #124]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006dfe:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e00:	4b1e      	ldr	r3, [pc, #120]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e08:	4a1c      	ldr	r2, [pc, #112]	@ (8006e7c <xPortStartScheduler+0x108>)
 8006e0a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006e14:	4b1a      	ldr	r3, [pc, #104]	@ (8006e80 <xPortStartScheduler+0x10c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a19      	ldr	r2, [pc, #100]	@ (8006e80 <xPortStartScheduler+0x10c>)
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e1e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006e20:	4b17      	ldr	r3, [pc, #92]	@ (8006e80 <xPortStartScheduler+0x10c>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a16      	ldr	r2, [pc, #88]	@ (8006e80 <xPortStartScheduler+0x10c>)
 8006e26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e2a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006e2c:	f000 f8de 	bl	8006fec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006e30:	4b14      	ldr	r3, [pc, #80]	@ (8006e84 <xPortStartScheduler+0x110>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006e36:	f000 f8f5 	bl	8007024 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e3a:	4b13      	ldr	r3, [pc, #76]	@ (8006e88 <xPortStartScheduler+0x114>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a12      	ldr	r2, [pc, #72]	@ (8006e88 <xPortStartScheduler+0x114>)
 8006e40:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e44:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006e46:	f7ff ff7f 	bl	8006d48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006e4a:	f7fe ff2f 	bl	8005cac <vTaskSwitchContext>
    prvTaskExitError();
 8006e4e:	f7ff ff3f 	bl	8006cd0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	e000ed00 	.word	0xe000ed00
 8006e60:	410fc271 	.word	0x410fc271
 8006e64:	08018c80 	.word	0x08018c80
 8006e68:	08018cc8 	.word	0x08018cc8
 8006e6c:	410fc270 	.word	0x410fc270
 8006e70:	08018cec 	.word	0x08018cec
 8006e74:	e000e400 	.word	0xe000e400
 8006e78:	20000558 	.word	0x20000558
 8006e7c:	2000055c 	.word	0x2000055c
 8006e80:	e000ed20 	.word	0xe000ed20
 8006e84:	2000000c 	.word	0x2000000c
 8006e88:	e000ef34 	.word	0xe000ef34

08006e8c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af00      	add	r7, sp, #0
        __asm volatile
 8006e92:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8006e96:	f383 8811 	msr	BASEPRI, r3
 8006e9a:	f3bf 8f6f 	isb	sy
 8006e9e:	f3bf 8f4f 	dsb	sy
 8006ea2:	607b      	str	r3, [r7, #4]
    }
 8006ea4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed8 <vPortEnterCritical+0x4c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	4a0a      	ldr	r2, [pc, #40]	@ (8006ed8 <vPortEnterCritical+0x4c>)
 8006eae:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006eb0:	4b09      	ldr	r3, [pc, #36]	@ (8006ed8 <vPortEnterCritical+0x4c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d10a      	bne.n	8006ece <vPortEnterCritical+0x42>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006eb8:	4b08      	ldr	r3, [pc, #32]	@ (8006edc <vPortEnterCritical+0x50>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d005      	beq.n	8006ece <vPortEnterCritical+0x42>
 8006ec2:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8006ec6:	4906      	ldr	r1, [pc, #24]	@ (8006ee0 <vPortEnterCritical+0x54>)
 8006ec8:	4806      	ldr	r0, [pc, #24]	@ (8006ee4 <vPortEnterCritical+0x58>)
 8006eca:	f009 ff81 	bl	8010dd0 <assertFail>
    }
}
 8006ece:	bf00      	nop
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	2000000c 	.word	0x2000000c
 8006edc:	e000ed04 	.word	0xe000ed04
 8006ee0:	08018c80 	.word	0x08018c80
 8006ee4:	08018d2c 	.word	0x08018d2c

08006ee8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006eee:	4b0e      	ldr	r3, [pc, #56]	@ (8006f28 <vPortExitCritical+0x40>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d105      	bne.n	8006f02 <vPortExitCritical+0x1a>
 8006ef6:	f240 12ab 	movw	r2, #427	@ 0x1ab
 8006efa:	490c      	ldr	r1, [pc, #48]	@ (8006f2c <vPortExitCritical+0x44>)
 8006efc:	480c      	ldr	r0, [pc, #48]	@ (8006f30 <vPortExitCritical+0x48>)
 8006efe:	f009 ff67 	bl	8010dd0 <assertFail>
    uxCriticalNesting--;
 8006f02:	4b09      	ldr	r3, [pc, #36]	@ (8006f28 <vPortExitCritical+0x40>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	4a07      	ldr	r2, [pc, #28]	@ (8006f28 <vPortExitCritical+0x40>)
 8006f0a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006f0c:	4b06      	ldr	r3, [pc, #24]	@ (8006f28 <vPortExitCritical+0x40>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d105      	bne.n	8006f20 <vPortExitCritical+0x38>
 8006f14:	2300      	movs	r3, #0
 8006f16:	607b      	str	r3, [r7, #4]
        __asm volatile
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f383 8811 	msr	BASEPRI, r3
    }
 8006f1e:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006f20:	bf00      	nop
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	2000000c 	.word	0x2000000c
 8006f2c:	08018c80 	.word	0x08018c80
 8006f30:	08018d64 	.word	0x08018d64
	...

08006f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006f40:	f3ef 8009 	mrs	r0, PSP
 8006f44:	f3bf 8f6f 	isb	sy
 8006f48:	4b15      	ldr	r3, [pc, #84]	@ (8006fa0 <pxCurrentTCBConst>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	f01e 0f10 	tst.w	lr, #16
 8006f50:	bf08      	it	eq
 8006f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6010      	str	r0, [r2, #0]
 8006f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006f60:	f04f 005f 	mov.w	r0, #95	@ 0x5f
 8006f64:	f380 8811 	msr	BASEPRI, r0
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
 8006f70:	f7fe fe9c 	bl	8005cac <vTaskSwitchContext>
 8006f74:	f04f 0000 	mov.w	r0, #0
 8006f78:	f380 8811 	msr	BASEPRI, r0
 8006f7c:	bc09      	pop	{r0, r3}
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	6808      	ldr	r0, [r1, #0]
 8006f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f86:	f01e 0f10 	tst.w	lr, #16
 8006f8a:	bf08      	it	eq
 8006f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006f90:	f380 8809 	msr	PSP, r0
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst>:
 8006fa0:	2000026c 	.word	0x2000026c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <tickFreeRTOS>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
        __asm volatile
 8006fae:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	607b      	str	r3, [r7, #4]
    }
 8006fc0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006fc2:	f7fe fd99 	bl	8005af8 <xTaskIncrementTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <tickFreeRTOS+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fcc:	4b06      	ldr	r3, [pc, #24]	@ (8006fe8 <tickFreeRTOS+0x40>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	f383 8811 	msr	BASEPRI, r3
    }
 8006fde:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ff0:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <vPortSetupTimerInterrupt+0x28>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ff6:	4b08      	ldr	r3, [pc, #32]	@ (8007018 <vPortSetupTimerInterrupt+0x2c>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ffc:	4b07      	ldr	r3, [pc, #28]	@ (800701c <vPortSetupTimerInterrupt+0x30>)
 8006ffe:	4a08      	ldr	r2, [pc, #32]	@ (8007020 <vPortSetupTimerInterrupt+0x34>)
 8007000:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007002:	4b04      	ldr	r3, [pc, #16]	@ (8007014 <vPortSetupTimerInterrupt+0x28>)
 8007004:	2207      	movs	r2, #7
 8007006:	601a      	str	r2, [r3, #0]
}
 8007008:	bf00      	nop
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	e000e010 	.word	0xe000e010
 8007018:	e000e018 	.word	0xe000e018
 800701c:	e000e014 	.word	0xe000e014
 8007020:	0002903f 	.word	0x0002903f

08007024 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007024:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007034 <vPortEnableVFP+0x10>
 8007028:	6801      	ldr	r1, [r0, #0]
 800702a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800702e:	6001      	str	r1, [r0, #0]
 8007030:	4770      	bx	lr
 8007032:	0000      	.short	0x0000
 8007034:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007038:	bf00      	nop
 800703a:	bf00      	nop

0800703c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800703c:	b580      	push	{r7, lr}
 800703e:	b082      	sub	sp, #8
 8007040:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007042:	f3ef 8305 	mrs	r3, IPSR
 8007046:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	d90f      	bls.n	800706e <vPortValidateInterruptPriority+0x32>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800704e:	4a11      	ldr	r2, [pc, #68]	@ (8007094 <vPortValidateInterruptPriority+0x58>)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4413      	add	r3, r2
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007058:	4b0f      	ldr	r3, [pc, #60]	@ (8007098 <vPortValidateInterruptPriority+0x5c>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	429a      	cmp	r2, r3
 8007060:	d205      	bcs.n	800706e <vPortValidateInterruptPriority+0x32>
 8007062:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 8007066:	490d      	ldr	r1, [pc, #52]	@ (800709c <vPortValidateInterruptPriority+0x60>)
 8007068:	480d      	ldr	r0, [pc, #52]	@ (80070a0 <vPortValidateInterruptPriority+0x64>)
 800706a:	f009 feb1 	bl	8010dd0 <assertFail>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800706e:	4b0d      	ldr	r3, [pc, #52]	@ (80070a4 <vPortValidateInterruptPriority+0x68>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007076:	4b0c      	ldr	r3, [pc, #48]	@ (80070a8 <vPortValidateInterruptPriority+0x6c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d905      	bls.n	800708a <vPortValidateInterruptPriority+0x4e>
 800707e:	f44f 7243 	mov.w	r2, #780	@ 0x30c
 8007082:	4906      	ldr	r1, [pc, #24]	@ (800709c <vPortValidateInterruptPriority+0x60>)
 8007084:	4809      	ldr	r0, [pc, #36]	@ (80070ac <vPortValidateInterruptPriority+0x70>)
 8007086:	f009 fea3 	bl	8010dd0 <assertFail>
    }
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	e000e3f0 	.word	0xe000e3f0
 8007098:	20000558 	.word	0x20000558
 800709c:	08018c80 	.word	0x08018c80
 80070a0:	08018d78 	.word	0x08018d78
 80070a4:	e000ed0c 	.word	0xe000ed0c
 80070a8:	2000055c 	.word	0x2000055c
 80070ac:	08018da4 	.word	0x08018da4

080070b0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 80070bc:	f7fe fc62 	bl	8005984 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80070c0:	4b55      	ldr	r3, [pc, #340]	@ (8007218 <pvPortMalloc+0x168>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d101      	bne.n	80070cc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80070c8:	f000 f918 	bl	80072fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80070cc:	4b53      	ldr	r3, [pc, #332]	@ (800721c <pvPortMalloc+0x16c>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	f040 8087 	bne.w	80071e8 <pvPortMalloc+0x138>
        {
            /* The wanted size is increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( xWantedSize > 0 )
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d017      	beq.n	8007110 <pvPortMalloc+0x60>
            {
                xWantedSize += xHeapStructSize;
 80070e0:	2208      	movs	r2, #8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4413      	add	r3, r2
 80070e6:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned to the required number
                 * of bytes. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00e      	beq.n	8007110 <pvPortMalloc+0x60>
                {
                    /* Byte alignment required. */
                    xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f023 0307 	bic.w	r3, r3, #7
 80070f8:	3308      	adds	r3, #8
 80070fa:	607b      	str	r3, [r7, #4]
                    configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <pvPortMalloc+0x60>
 8007106:	2297      	movs	r2, #151	@ 0x97
 8007108:	4945      	ldr	r1, [pc, #276]	@ (8007220 <pvPortMalloc+0x170>)
 800710a:	4846      	ldr	r0, [pc, #280]	@ (8007224 <pvPortMalloc+0x174>)
 800710c:	f009 fe60 	bl	8010dd0 <assertFail>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d068      	beq.n	80071e8 <pvPortMalloc+0x138>
 8007116:	4b44      	ldr	r3, [pc, #272]	@ (8007228 <pvPortMalloc+0x178>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	687a      	ldr	r2, [r7, #4]
 800711c:	429a      	cmp	r2, r3
 800711e:	d863      	bhi.n	80071e8 <pvPortMalloc+0x138>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one	of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007120:	4b42      	ldr	r3, [pc, #264]	@ (800722c <pvPortMalloc+0x17c>)
 8007122:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8007124:	4b41      	ldr	r3, [pc, #260]	@ (800722c <pvPortMalloc+0x17c>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800712a:	e004      	b.n	8007136 <pvPortMalloc+0x86>
                {
                    pxPreviousBlock = pxBlock;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d903      	bls.n	8007148 <pvPortMalloc+0x98>
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f1      	bne.n	800712c <pvPortMalloc+0x7c>
                }

                /* If the end marker was reached then a block of adequate size
                 * was	not found. */
                if( pxBlock != pxEnd )
 8007148:	4b33      	ldr	r3, [pc, #204]	@ (8007218 <pvPortMalloc+0x168>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	429a      	cmp	r2, r3
 8007150:	d04a      	beq.n	80071e8 <pvPortMalloc+0x138>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2208      	movs	r2, #8
 8007158:	4413      	add	r3, r2
 800715a:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	685a      	ldr	r2, [r3, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	2308      	movs	r3, #8
 800716e:	005b      	lsls	r3, r3, #1
 8007170:	429a      	cmp	r2, r3
 8007172:	d919      	bls.n	80071a8 <pvPortMalloc+0xf8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007174:	697a      	ldr	r2, [r7, #20]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4413      	add	r3, r2
 800717a:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	2b00      	cmp	r3, #0
 8007184:	d004      	beq.n	8007190 <pvPortMalloc+0xe0>
 8007186:	22c5      	movs	r2, #197	@ 0xc5
 8007188:	4925      	ldr	r1, [pc, #148]	@ (8007220 <pvPortMalloc+0x170>)
 800718a:	4829      	ldr	r0, [pc, #164]	@ (8007230 <pvPortMalloc+0x180>)
 800718c:	f009 fe20 	bl	8010dd0 <assertFail>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	1ad2      	subs	r2, r2, r3
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071a2:	68b8      	ldr	r0, [r7, #8]
 80071a4:	f000 f90c 	bl	80073c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071a8:	4b1f      	ldr	r3, [pc, #124]	@ (8007228 <pvPortMalloc+0x178>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007228 <pvPortMalloc+0x178>)
 80071b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007228 <pvPortMalloc+0x178>)
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007234 <pvPortMalloc+0x184>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d203      	bcs.n	80071ca <pvPortMalloc+0x11a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071c2:	4b19      	ldr	r3, [pc, #100]	@ (8007228 <pvPortMalloc+0x178>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a1b      	ldr	r2, [pc, #108]	@ (8007234 <pvPortMalloc+0x184>)
 80071c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	4b13      	ldr	r3, [pc, #76]	@ (800721c <pvPortMalloc+0x16c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	431a      	orrs	r2, r3
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	2200      	movs	r2, #0
 80071dc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80071de:	4b16      	ldr	r3, [pc, #88]	@ (8007238 <pvPortMalloc+0x188>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3301      	adds	r3, #1
 80071e4:	4a14      	ldr	r2, [pc, #80]	@ (8007238 <pvPortMalloc+0x188>)
 80071e6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80071e8:	f7fe fbda 	bl	80059a0 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <pvPortMalloc+0x146>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
 80071f2:	f004 fc76 	bl	800bae2 <vApplicationMallocFailedHook>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d005      	beq.n	800720c <pvPortMalloc+0x15c>
 8007200:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8007204:	4906      	ldr	r1, [pc, #24]	@ (8007220 <pvPortMalloc+0x170>)
 8007206:	480d      	ldr	r0, [pc, #52]	@ (800723c <pvPortMalloc+0x18c>)
 8007208:	f009 fde2 	bl	8010dd0 <assertFail>
    return pvReturn;
 800720c:	68fb      	ldr	r3, [r7, #12]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	20007a98 	.word	0x20007a98
 800721c:	20007aac 	.word	0x20007aac
 8007220:	08018de8 	.word	0x08018de8
 8007224:	08018e10 	.word	0x08018e10
 8007228:	20007a9c 	.word	0x20007a9c
 800722c:	20007a90 	.word	0x20007a90
 8007230:	08018e40 	.word	0x08018e40
 8007234:	20007aa0 	.word	0x20007aa0
 8007238:	20007aa4 	.word	0x20007aa4
 800723c:	08018e84 	.word	0x08018e84

08007240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d043      	beq.n	80072da <vPortFree+0x9a>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007252:	2308      	movs	r3, #8
 8007254:	425b      	negs	r3, r3
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4413      	add	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	4b1f      	ldr	r3, [pc, #124]	@ (80072e4 <vPortFree+0xa4>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4013      	ands	r3, r2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d105      	bne.n	800727a <vPortFree+0x3a>
 800726e:	f44f 728d 	mov.w	r2, #282	@ 0x11a
 8007272:	491d      	ldr	r1, [pc, #116]	@ (80072e8 <vPortFree+0xa8>)
 8007274:	481d      	ldr	r0, [pc, #116]	@ (80072ec <vPortFree+0xac>)
 8007276:	f009 fdab 	bl	8010dd0 <assertFail>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d005      	beq.n	800728e <vPortFree+0x4e>
 8007282:	f240 121b 	movw	r2, #283	@ 0x11b
 8007286:	4918      	ldr	r1, [pc, #96]	@ (80072e8 <vPortFree+0xa8>)
 8007288:	4819      	ldr	r0, [pc, #100]	@ (80072f0 <vPortFree+0xb0>)
 800728a:	f009 fda1 	bl	8010dd0 <assertFail>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	4b14      	ldr	r3, [pc, #80]	@ (80072e4 <vPortFree+0xa4>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01e      	beq.n	80072da <vPortFree+0x9a>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d11a      	bne.n	80072da <vPortFree+0x9a>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	685a      	ldr	r2, [r3, #4]
 80072a8:	4b0e      	ldr	r3, [pc, #56]	@ (80072e4 <vPortFree+0xa4>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	43db      	mvns	r3, r3
 80072ae:	401a      	ands	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80072b4:	f7fe fb66 	bl	8005984 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	685a      	ldr	r2, [r3, #4]
 80072bc:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <vPortFree+0xb4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4413      	add	r3, r2
 80072c2:	4a0c      	ldr	r2, [pc, #48]	@ (80072f4 <vPortFree+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072c6:	68b8      	ldr	r0, [r7, #8]
 80072c8:	f000 f87a 	bl	80073c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <vPortFree+0xb8>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3301      	adds	r3, #1
 80072d2:	4a09      	ldr	r2, [pc, #36]	@ (80072f8 <vPortFree+0xb8>)
 80072d4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80072d6:	f7fe fb63 	bl	80059a0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	20007aac 	.word	0x20007aac
 80072e8:	08018de8 	.word	0x08018de8
 80072ec:	08018ecc 	.word	0x08018ecc
 80072f0:	08018f00 	.word	0x08018f00
 80072f4:	20007a9c 	.word	0x20007a9c
 80072f8:	20007aa8 	.word	0x20007aa8

080072fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007302:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007306:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007308:	4b27      	ldr	r3, [pc, #156]	@ (80073a8 <prvHeapInit+0xac>)
 800730a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 0307 	and.w	r3, r3, #7
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00c      	beq.n	8007330 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3307      	adds	r3, #7
 800731a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0307 	bic.w	r3, r3, #7
 8007322:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007324:	68ba      	ldr	r2, [r7, #8]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	4a1f      	ldr	r2, [pc, #124]	@ (80073a8 <prvHeapInit+0xac>)
 800732c:	4413      	add	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007334:	4a1d      	ldr	r2, [pc, #116]	@ (80073ac <prvHeapInit+0xb0>)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800733a:	4b1c      	ldr	r3, [pc, #112]	@ (80073ac <prvHeapInit+0xb0>)
 800733c:	2200      	movs	r2, #0
 800733e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4413      	add	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007348:	2208      	movs	r2, #8
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	1a9b      	subs	r3, r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a15      	ldr	r2, [pc, #84]	@ (80073b0 <prvHeapInit+0xb4>)
 800735c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800735e:	4b14      	ldr	r3, [pc, #80]	@ (80073b0 <prvHeapInit+0xb4>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2200      	movs	r2, #0
 8007364:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007366:	4b12      	ldr	r3, [pc, #72]	@ (80073b0 <prvHeapInit+0xb4>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800737c:	4b0c      	ldr	r3, [pc, #48]	@ (80073b0 <prvHeapInit+0xb4>)
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4a0a      	ldr	r2, [pc, #40]	@ (80073b4 <prvHeapInit+0xb8>)
 800738a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	4a09      	ldr	r2, [pc, #36]	@ (80073b8 <prvHeapInit+0xbc>)
 8007392:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007394:	4b09      	ldr	r3, [pc, #36]	@ (80073bc <prvHeapInit+0xc0>)
 8007396:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800739a:	601a      	str	r2, [r3, #0]
}
 800739c:	bf00      	nop
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20000560 	.word	0x20000560
 80073ac:	20007a90 	.word	0x20007a90
 80073b0:	20007a98 	.word	0x20007a98
 80073b4:	20007aa0 	.word	0x20007aa0
 80073b8:	20007a9c 	.word	0x20007a9c
 80073bc:	20007aac 	.word	0x20007aac

080073c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073c8:	4b28      	ldr	r3, [pc, #160]	@ (800746c <prvInsertBlockIntoFreeList+0xac>)
 80073ca:	60fb      	str	r3, [r7, #12]
 80073cc:	e002      	b.n	80073d4 <prvInsertBlockIntoFreeList+0x14>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d8f7      	bhi.n	80073ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	4413      	add	r3, r2
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d108      	bne.n	8007402 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	685a      	ldr	r2, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	441a      	add	r2, r3
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	68ba      	ldr	r2, [r7, #8]
 800740c:	441a      	add	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d118      	bne.n	8007448 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <prvInsertBlockIntoFreeList+0xb0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d00d      	beq.n	800743e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	441a      	add	r2, r3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	601a      	str	r2, [r3, #0]
 800743c:	e008      	b.n	8007450 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800743e:	4b0c      	ldr	r3, [pc, #48]	@ (8007470 <prvInsertBlockIntoFreeList+0xb0>)
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	601a      	str	r2, [r3, #0]
 8007446:	e003      	b.n	8007450 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	429a      	cmp	r2, r3
 8007456:	d002      	beq.n	800745e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800745e:	bf00      	nop
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20007a90 	.word	0x20007a90
 8007470:	20007a98 	.word	0x20007a98

08007474 <main>:
//uint16_t counter = 0;
void SystemClock_Config(void);


int main( void )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0


	SystemClock_Config();
 800747a:	f000 f80f 	bl	800749c <SystemClock_Config>



	int err = platformInit();
 800747e:	f009 fba0 	bl	8010bc2 <platformInit>
 8007482:	6078      	str	r0, [r7, #4]
	if (err != 0) {
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <main+0x1a>
		// The firmware is running on the wrong hardware. Halt
		while (1);
 800748a:	bf00      	nop
 800748c:	e7fd      	b.n	800748a <main+0x16>
	}

	systemLaunch();
 800748e:	f004 fa27 	bl	800b8e0 <systemLaunch>
//	counter +=1;
	vTaskStartScheduler();
 8007492:	f7fe fa05 	bl	80058a0 <vTaskStartScheduler>
//	counter +=1;

    for(;;)
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <main+0x22>
	...

0800749c <SystemClock_Config>:
//			counter +=1;
//		}
    }
}
void SystemClock_Config(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b094      	sub	sp, #80	@ 0x50
 80074a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074a2:	f107 0320 	add.w	r3, r7, #32
 80074a6:	2230      	movs	r2, #48	@ 0x30
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f00e ff22 	bl	80162f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80074b0:	f107 030c 	add.w	r3, r7, #12
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80074c0:	2300      	movs	r3, #0
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	4b28      	ldr	r3, [pc, #160]	@ (8007568 <SystemClock_Config+0xcc>)
 80074c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074c8:	4a27      	ldr	r2, [pc, #156]	@ (8007568 <SystemClock_Config+0xcc>)
 80074ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80074d0:	4b25      	ldr	r3, [pc, #148]	@ (8007568 <SystemClock_Config+0xcc>)
 80074d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074d8:	60bb      	str	r3, [r7, #8]
 80074da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80074dc:	2300      	movs	r3, #0
 80074de:	607b      	str	r3, [r7, #4]
 80074e0:	4b22      	ldr	r3, [pc, #136]	@ (800756c <SystemClock_Config+0xd0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a21      	ldr	r2, [pc, #132]	@ (800756c <SystemClock_Config+0xd0>)
 80074e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	4b1f      	ldr	r3, [pc, #124]	@ (800756c <SystemClock_Config+0xd0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80074f8:	2301      	movs	r3, #1
 80074fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80074fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007500:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007502:	2302      	movs	r3, #2
 8007504:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007506:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800750a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800750c:	2304      	movs	r3, #4
 800750e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007510:	23a8      	movs	r3, #168	@ 0xa8
 8007512:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007514:	2302      	movs	r3, #2
 8007516:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007518:	2304      	movs	r3, #4
 800751a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800751c:	f107 0320 	add.w	r3, r7, #32
 8007520:	4618      	mov	r0, r3
 8007522:	f7fb fc25 	bl	8002d70 <HAL_RCC_OscConfig>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800752c:	f000 f820 	bl	8007570 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007530:	230f      	movs	r3, #15
 8007532:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007534:	2302      	movs	r3, #2
 8007536:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007538:	2300      	movs	r3, #0
 800753a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800753c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8007540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007542:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007546:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	2105      	movs	r1, #5
 800754e:	4618      	mov	r0, r3
 8007550:	f7fb fe86 	bl	8003260 <HAL_RCC_ClockConfig>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800755a:	f000 f809 	bl	8007570 <Error_Handler>
  }
}
 800755e:	bf00      	nop
 8007560:	3750      	adds	r7, #80	@ 0x50
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	40023800 	.word	0x40023800
 800756c:	40007000 	.word	0x40007000

08007570 <Error_Handler>:
void Error_Handler(void)
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007574:	b672      	cpsid	i
}
 8007576:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007578:	bf00      	nop
 800757a:	e7fd      	b.n	8007578 <Error_Handler+0x8>

0800757c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800757c:	480d      	ldr	r0, [pc, #52]	@ (80075b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800757e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007580:	f7f9 fdc2 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007584:	480c      	ldr	r0, [pc, #48]	@ (80075b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007586:	490d      	ldr	r1, [pc, #52]	@ (80075bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007588:	4a0d      	ldr	r2, [pc, #52]	@ (80075c0 <LoopForever+0xe>)
  movs r3, #0
 800758a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800758c:	e002      	b.n	8007594 <LoopCopyDataInit>

0800758e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800758e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007592:	3304      	adds	r3, #4

08007594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007598:	d3f9      	bcc.n	800758e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800759a:	4a0a      	ldr	r2, [pc, #40]	@ (80075c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800759c:	4c0a      	ldr	r4, [pc, #40]	@ (80075c8 <LoopForever+0x16>)
  movs r3, #0
 800759e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80075a0:	e001      	b.n	80075a6 <LoopFillZerobss>

080075a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80075a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80075a4:	3204      	adds	r2, #4

080075a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80075a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80075a8:	d3fb      	bcc.n	80075a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80075aa:	f00e fec5 	bl	8016338 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80075ae:	f7ff ff61 	bl	8007474 <main>

080075b2 <LoopForever>:

LoopForever:
  b LoopForever
 80075b2:	e7fe      	b.n	80075b2 <LoopForever>
  ldr   r0, =_estack
 80075b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80075b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80075bc:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80075c0:	08019e68 	.word	0x08019e68
  ldr r2, =_sbss
 80075c4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80075c8:	2000a18c 	.word	0x2000a18c

080075cc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80075cc:	e7fe      	b.n	80075cc <ADC_IRQHandler>
	...

080075d0 <DMA1_Stream0_IRQHandler>:
{
  xSemaphoreGive(spiMutex);
}

void __attribute__((used)) DMA1_Stream0_IRQHandler(void)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 80075d6:	2300      	movs	r3, #0
 80075d8:	607b      	str	r3, [r7, #4]

	HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80075da:	480c      	ldr	r0, [pc, #48]	@ (800760c <DMA1_Stream0_IRQHandler+0x3c>)
 80075dc:	f7f9 ff94 	bl	8001508 <HAL_DMA_IRQHandler>

	xSemaphoreGiveFromISR(rxComplete, &xHigherPriorityTaskWoken);
 80075e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007610 <DMA1_Stream0_IRQHandler+0x40>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	1d3a      	adds	r2, r7, #4
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fd fb07 	bl	8004bfc <xQueueGiveFromISR>
//	  flate_t = 1;
	if (xHigherPriorityTaskWoken) {
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d007      	beq.n	8007604 <DMA1_Stream0_IRQHandler+0x34>
		portYIELD();
 80075f4:	4b07      	ldr	r3, [pc, #28]	@ (8007614 <DMA1_Stream0_IRQHandler+0x44>)
 80075f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075fa:	601a      	str	r2, [r3, #0]
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	f3bf 8f6f 	isb	sy
	}

}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	20007c40 	.word	0x20007c40
 8007610:	20007ab4 	.word	0x20007ab4
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <DMA1_Stream5_IRQHandler>:

void __attribute__((used)) DMA1_Stream5_IRQHandler(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b082      	sub	sp, #8
 800761c:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	607b      	str	r3, [r7, #4]

	HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8007622:	480c      	ldr	r0, [pc, #48]	@ (8007654 <DMA1_Stream5_IRQHandler+0x3c>)
 8007624:	f7f9 ff70 	bl	8001508 <HAL_DMA_IRQHandler>

	xSemaphoreGiveFromISR(txComplete, &xHigherPriorityTaskWoken);
 8007628:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <DMA1_Stream5_IRQHandler+0x40>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	1d3a      	adds	r2, r7, #4
 800762e:	4611      	mov	r1, r2
 8007630:	4618      	mov	r0, r3
 8007632:	f7fd fae3 	bl	8004bfc <xQueueGiveFromISR>
//	  flate_t += 1; // JUMP TWO TIME
	if (xHigherPriorityTaskWoken) {
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d007      	beq.n	800764c <DMA1_Stream5_IRQHandler+0x34>
		portYIELD();
 800763c:	4b07      	ldr	r3, [pc, #28]	@ (800765c <DMA1_Stream5_IRQHandler+0x44>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	f3bf 8f6f 	isb	sy
	}


}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20007ca0 	.word	0x20007ca0
 8007658:	20007ab0 	.word	0x20007ab0
 800765c:	e000ed04 	.word	0xe000ed04

08007660 <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0

  HAL_SPI_IRQHandler(&hspi3);
 8007664:	4802      	ldr	r0, [pc, #8]	@ (8007670 <SPI3_IRQHandler+0x10>)
 8007666:	f7fc fc97 	bl	8003f98 <HAL_SPI_IRQHandler>

}
 800766a:	bf00      	nop
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20007be8 	.word	0x20007be8

08007674 <zRanger2GetMeasurementAndRestart>:
bool checkRangeID;

NO_DMA_CCM_SAFE_ZERO_INIT static VL53L1_Dev_t dev;

static uint16_t zRanger2GetMeasurementAndRestart(VL53L1_Dev_t *dev)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	@ 0x30
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
    VL53L1_Error status = VL53L1_ERROR_NONE;
 800767c:	2300      	movs	r3, #0
 800767e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    VL53L1_RangingMeasurementData_t rangingData;
    uint8_t dataReady = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
    uint16_t range;

    while (dataReady == 0)
 8007686:	e00b      	b.n	80076a0 <zRanger2GetMeasurementAndRestart+0x2c>
    {
        status = VL53L1_GetMeasurementDataReady(dev, &dataReady);
 8007688:	f107 030f 	add.w	r3, r7, #15
 800768c:	4619      	mov	r1, r3
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f00a fa30 	bl	8011af4 <VL53L1_GetMeasurementDataReady>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        vTaskDelay(M2T(1));
 800769a:	2001      	movs	r0, #1
 800769c:	f7fe f8cc 	bl	8005838 <vTaskDelay>
    while (dataReady == 0)
 80076a0:	7bfb      	ldrb	r3, [r7, #15]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0f0      	beq.n	8007688 <zRanger2GetMeasurementAndRestart+0x14>
    }

    status = VL53L1_GetRangingMeasurementData(dev, &rangingData);
 80076a6:	f107 0310 	add.w	r3, r7, #16
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f00a fbdd 	bl	8011e6c <VL53L1_GetRangingMeasurementData>
 80076b2:	4603      	mov	r3, r0
 80076b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    range = rangingData.RangeMilliMeter;
 80076b8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80076bc:	85bb      	strh	r3, [r7, #44]	@ 0x2c

    VL53L1_StopMeasurement(dev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f00a f9ff 	bl	8011ac2 <VL53L1_StopMeasurement>
    status = VL53L1_StartMeasurement(dev);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f00a f9bd 	bl	8011a44 <VL53L1_StartMeasurement>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    status = status;

    return range;
 80076d0:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	3730      	adds	r7, #48	@ 0x30
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}
	...

080076dc <zRanger2Init>:

void zRanger2Init()
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b082      	sub	sp, #8
 80076e0:	af02      	add	r7, sp, #8
  if (isInit)
 80076e2:	4b1a      	ldr	r3, [pc, #104]	@ (800774c <zRanger2Init+0x70>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d12d      	bne.n	8007746 <zRanger2Init+0x6a>
    return;

  checkRangeID = vl53l1xInit(&dev, &hi2c2);
 80076ea:	4919      	ldr	r1, [pc, #100]	@ (8007750 <zRanger2Init+0x74>)
 80076ec:	4819      	ldr	r0, [pc, #100]	@ (8007754 <zRanger2Init+0x78>)
 80076ee:	f001 fa35 	bl	8008b5c <vl53l1xInit>
 80076f2:	4603      	mov	r3, r0
 80076f4:	461a      	mov	r2, r3
 80076f6:	4b18      	ldr	r3, [pc, #96]	@ (8007758 <zRanger2Init+0x7c>)
 80076f8:	701a      	strb	r2, [r3, #0]


  xTaskCreate(zRanger2Task, ZRANGER2_TASK_NAME, ZRANGER2_TASK_STACKSIZE, NULL, ZRANGER2_TASK_PRI, NULL);
 80076fa:	2300      	movs	r3, #0
 80076fc:	9301      	str	r3, [sp, #4]
 80076fe:	2302      	movs	r3, #2
 8007700:	9300      	str	r3, [sp, #0]
 8007702:	2300      	movs	r3, #0
 8007704:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007708:	4914      	ldr	r1, [pc, #80]	@ (800775c <zRanger2Init+0x80>)
 800770a:	4815      	ldr	r0, [pc, #84]	@ (8007760 <zRanger2Init+0x84>)
 800770c:	f7fd fecc 	bl	80054a8 <xTaskCreate>

  // pre-compute constant in the measurement noise model for kalman
  expCoeff = logf(expStdB / expStdA) / (expPointB - expPointA);
 8007710:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8007764 <zRanger2Init+0x88>
 8007714:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007768 <zRanger2Init+0x8c>
 8007718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800771c:	eeb0 0a67 	vmov.f32	s0, s15
 8007720:	f00e fecc 	bl	80164bc <logf>
 8007724:	eef0 6a40 	vmov.f32	s13, s0
 8007728:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 800772c:	eef0 7a04 	vmov.f32	s15, #4	@ 0x40200000  2.5
 8007730:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007738:	4b0c      	ldr	r3, [pc, #48]	@ (800776c <zRanger2Init+0x90>)
 800773a:	edc3 7a00 	vstr	s15, [r3]

  isInit = true;
 800773e:	4b03      	ldr	r3, [pc, #12]	@ (800774c <zRanger2Init+0x70>)
 8007740:	2201      	movs	r2, #1
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	e000      	b.n	8007748 <zRanger2Init+0x6c>
    return;
 8007746:	bf00      	nop
}
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	20007abe 	.word	0x20007abe
 8007750:	20007b38 	.word	0x20007b38
 8007754:	10000000 	.word	0x10000000
 8007758:	20007ac4 	.word	0x20007ac4
 800775c:	08018f20 	.word	0x08018f20
 8007760:	08007771 	.word	0x08007771
 8007764:	3e4ccccd 	.word	0x3e4ccccd
 8007768:	3b23d70a 	.word	0x3b23d70a
 800776c:	20007ab8 	.word	0x20007ab8

08007770 <zRanger2Task>:

  return true;
}

void zRanger2Task(void* arg)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  TickType_t lastWakeTime;

  systemWaitStart();
 8007778:	f004 f970 	bl	800ba5c <systemWaitStart>

  // Restart sensor
  VL53L1_StopMeasurement(&dev);
 800777c:	4835      	ldr	r0, [pc, #212]	@ (8007854 <zRanger2Task+0xe4>)
 800777e:	f00a f9a0 	bl	8011ac2 <VL53L1_StopMeasurement>
  VL53L1_SetDistanceMode(&dev, VL53L1_DISTANCEMODE_MEDIUM);
 8007782:	2102      	movs	r1, #2
 8007784:	4833      	ldr	r0, [pc, #204]	@ (8007854 <zRanger2Task+0xe4>)
 8007786:	f009 febc 	bl	8011502 <VL53L1_SetDistanceMode>
  VL53L1_SetMeasurementTimingBudgetMicroSeconds(&dev, 25000);
 800778a:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800778e:	4831      	ldr	r0, [pc, #196]	@ (8007854 <zRanger2Task+0xe4>)
 8007790:	f009 ff3e 	bl	8011610 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>

  VL53L1_StartMeasurement(&dev);
 8007794:	482f      	ldr	r0, [pc, #188]	@ (8007854 <zRanger2Task+0xe4>)
 8007796:	f00a f955 	bl	8011a44 <VL53L1_StartMeasurement>

  lastWakeTime = xTaskGetTickCount();
 800779a:	f7fe f99d 	bl	8005ad8 <xTaskGetTickCount>
 800779e:	4603      	mov	r3, r0
 80077a0:	60fb      	str	r3, [r7, #12]

  while (1) {
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 80077a2:	f107 030c 	add.w	r3, r7, #12
 80077a6:	2119      	movs	r1, #25
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fd ffcf 	bl	800574c <vTaskDelayUntil>
    rangeCounter++;
 80077ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007858 <zRanger2Task+0xe8>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3301      	adds	r3, #1
 80077b4:	4a28      	ldr	r2, [pc, #160]	@ (8007858 <zRanger2Task+0xe8>)
 80077b6:	6013      	str	r3, [r2, #0]
    range_last = zRanger2GetMeasurementAndRestart(&dev);
 80077b8:	4826      	ldr	r0, [pc, #152]	@ (8007854 <zRanger2Task+0xe4>)
 80077ba:	f7ff ff5b 	bl	8007674 <zRanger2GetMeasurementAndRestart>
 80077be:	4603      	mov	r3, r0
 80077c0:	461a      	mov	r2, r3
 80077c2:	4b26      	ldr	r3, [pc, #152]	@ (800785c <zRanger2Task+0xec>)
 80077c4:	801a      	strh	r2, [r3, #0]
    rangeSet(rangeDown, range_last / 1000.0f);
 80077c6:	4b25      	ldr	r3, [pc, #148]	@ (800785c <zRanger2Task+0xec>)
 80077c8:	881b      	ldrh	r3, [r3, #0]
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077d2:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8007860 <zRanger2Task+0xf0>
 80077d6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80077da:	eeb0 0a47 	vmov.f32	s0, s14
 80077de:	2005      	movs	r0, #5
 80077e0:	f003 f886 	bl	800a8f0 <rangeSet>

    // check if range is feasible and push into the estimator
    // the sensor should not be able to measure >5 [m], and outliers typically
    // occur as >8 [m] measurements
    if (range_last < RANGE_OUTLIER_LIMIT) {
 80077e4:	4b1d      	ldr	r3, [pc, #116]	@ (800785c <zRanger2Task+0xec>)
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d8d8      	bhi.n	80077a2 <zRanger2Task+0x32>
      float distance = (float)range_last * 0.001f; // Scale from [mm] to [m]
 80077f0:	4b1a      	ldr	r3, [pc, #104]	@ (800785c <zRanger2Task+0xec>)
 80077f2:	881b      	ldrh	r3, [r3, #0]
 80077f4:	ee07 3a90 	vmov	s15, r3
 80077f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007864 <zRanger2Task+0xf4>
 8007800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007804:	edc7 7a05 	vstr	s15, [r7, #20]
      float stdDev = expStdA * (1.0f  + expf( expCoeff * (distance - expPointA)));
 8007808:	eeb0 7a04 	vmov.f32	s14, #4	@ 0x40200000  2.5
 800780c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007810:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007814:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <zRanger2Task+0xf8>)
 8007816:	edd3 7a00 	vldr	s15, [r3]
 800781a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800781e:	eeb0 0a67 	vmov.f32	s0, s15
 8007822:	f00e fe15 	bl	8016450 <expf>
 8007826:	eef0 7a40 	vmov.f32	s15, s0
 800782a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800782e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007832:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800786c <zRanger2Task+0xfc>
 8007836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800783a:	edc7 7a04 	vstr	s15, [r7, #16]
      rangeEnqueueDownRangeInEstimator(distance, stdDev, xTaskGetTickCount());
 800783e:	f7fe f94b 	bl	8005ad8 <xTaskGetTickCount>
 8007842:	4603      	mov	r3, r0
 8007844:	4618      	mov	r0, r3
 8007846:	edd7 0a04 	vldr	s1, [r7, #16]
 800784a:	ed97 0a05 	vldr	s0, [r7, #20]
 800784e:	f003 f873 	bl	800a938 <rangeEnqueueDownRangeInEstimator>
    vTaskDelayUntil(&lastWakeTime, M2T(25));
 8007852:	e7a6      	b.n	80077a2 <zRanger2Task+0x32>
 8007854:	10000000 	.word	0x10000000
 8007858:	20007ac0 	.word	0x20007ac0
 800785c:	20007abc 	.word	0x20007abc
 8007860:	447a0000 	.word	0x447a0000
 8007864:	3a83126f 	.word	0x3a83126f
 8007868:	20007ab8 	.word	0x20007ab8
 800786c:	3b23d70a 	.word	0x3b23d70a

08007870 <bmp280_StartUp>:

static int16_t t2, t3, p2, p3, p4, p5, p6, p7, p8, p9;
static uint16_t t1, p1;
static int32_t t_fine;

static void bmp280_StartUp(){
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8007874:	2200      	movs	r2, #0
 8007876:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800787a:	4807      	ldr	r0, [pc, #28]	@ (8007898 <bmp280_StartUp+0x28>)
 800787c:	f7fa fa1c 	bl	8001cb8 <HAL_GPIO_WritePin>
	vTaskDelay(5);
 8007880:	2005      	movs	r0, #5
 8007882:	f7fd ffd9 	bl	8005838 <vTaskDelay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8007886:	2201      	movs	r2, #1
 8007888:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800788c:	4802      	ldr	r0, [pc, #8]	@ (8007898 <bmp280_StartUp+0x28>)
 800788e:	f7fa fa13 	bl	8001cb8 <HAL_GPIO_WritePin>

}
 8007892:	bf00      	nop
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	40020400 	.word	0x40020400

0800789c <bmp280_WriteReg>:
static void bmp280_WriteReg(uint8_t reg, uint8_t val){
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	4603      	mov	r3, r0
 80078a4:	460a      	mov	r2, r1
 80078a6:	71fb      	strb	r3, [r7, #7]
 80078a8:	4613      	mov	r3, r2
 80078aa:	71bb      	strb	r3, [r7, #6]

	uint8_t buf[2];
	buf[0] = reg;
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	733b      	strb	r3, [r7, #12]
	buf[0] &= ~(1<<7);
 80078b0:	7b3b      	ldrb	r3, [r7, #12]
 80078b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	733b      	strb	r3, [r7, #12]
	buf[1] = val;
 80078ba:	79bb      	ldrb	r3, [r7, #6]
 80078bc:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80078be:	2200      	movs	r2, #0
 80078c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078c4:	4809      	ldr	r0, [pc, #36]	@ (80078ec <bmp280_WriteReg+0x50>)
 80078c6:	f7fa f9f7 	bl	8001cb8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, buf, 2, 100);
 80078ca:	f107 010c 	add.w	r1, r7, #12
 80078ce:	2364      	movs	r3, #100	@ 0x64
 80078d0:	2202      	movs	r2, #2
 80078d2:	4807      	ldr	r0, [pc, #28]	@ (80078f0 <bmp280_WriteReg+0x54>)
 80078d4:	f7fb ff59 	bl	800378a <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 80078d8:	2201      	movs	r2, #1
 80078da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80078de:	4803      	ldr	r0, [pc, #12]	@ (80078ec <bmp280_WriteReg+0x50>)
 80078e0:	f7fa f9ea 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 80078e4:	bf00      	nop
 80078e6:	3710      	adds	r7, #16
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}
 80078ec:	40020400 	.word	0x40020400
 80078f0:	20007b90 	.word	0x20007b90

080078f4 <bmp280_ReadReg>:
void bmp280_ReadReg(uint8_t reg, uint8_t *buffer, uint8_t len){
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
 8007900:	4613      	mov	r3, r2
 8007902:	71bb      	strb	r3, [r7, #6]
	uint8_t buf = reg | 0x80;
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800790a:	b2db      	uxtb	r3, r3
 800790c:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 800790e:	2200      	movs	r2, #0
 8007910:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007914:	480d      	ldr	r0, [pc, #52]	@ (800794c <bmp280_ReadReg+0x58>)
 8007916:	f7fa f9cf 	bl	8001cb8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &buf, 1, 100);
 800791a:	f107 010f 	add.w	r1, r7, #15
 800791e:	2364      	movs	r3, #100	@ 0x64
 8007920:	2201      	movs	r2, #1
 8007922:	480b      	ldr	r0, [pc, #44]	@ (8007950 <bmp280_ReadReg+0x5c>)
 8007924:	f7fb ff31 	bl	800378a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, buffer, len, 100);
 8007928:	79bb      	ldrb	r3, [r7, #6]
 800792a:	b29a      	uxth	r2, r3
 800792c:	2364      	movs	r3, #100	@ 0x64
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	4807      	ldr	r0, [pc, #28]	@ (8007950 <bmp280_ReadReg+0x5c>)
 8007932:	f7fc f86e 	bl	8003a12 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8007936:	2201      	movs	r2, #1
 8007938:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800793c:	4803      	ldr	r0, [pc, #12]	@ (800794c <bmp280_ReadReg+0x58>)
 800793e:	f7fa f9bb 	bl	8001cb8 <HAL_GPIO_WritePin>

}
 8007942:	bf00      	nop
 8007944:	3710      	adds	r7, #16
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	40020400 	.word	0x40020400
 8007950:	20007b90 	.word	0x20007b90

08007954 <bmp280_ReadCalibrateValue>:
static void bmp280_ReadCalibrateValue(){
 8007954:	b580      	push	{r7, lr}
 8007956:	b086      	sub	sp, #24
 8007958:	af00      	add	r7, sp, #0

	uint8_t buf[24];
	bmp280_ReadReg(DIG_T1, buf, 24);
 800795a:	463b      	mov	r3, r7
 800795c:	2218      	movs	r2, #24
 800795e:	4619      	mov	r1, r3
 8007960:	2088      	movs	r0, #136	@ 0x88
 8007962:	f7ff ffc7 	bl	80078f4 <bmp280_ReadReg>

	t1 = buf[1] << 8 | buf[0];
 8007966:	787b      	ldrb	r3, [r7, #1]
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	b21a      	sxth	r2, r3
 800796c:	783b      	ldrb	r3, [r7, #0]
 800796e:	b21b      	sxth	r3, r3
 8007970:	4313      	orrs	r3, r2
 8007972:	b21b      	sxth	r3, r3
 8007974:	b29a      	uxth	r2, r3
 8007976:	4b35      	ldr	r3, [pc, #212]	@ (8007a4c <bmp280_ReadCalibrateValue+0xf8>)
 8007978:	801a      	strh	r2, [r3, #0]
	t2 = buf[3] << 8 | buf[2];
 800797a:	78fb      	ldrb	r3, [r7, #3]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	b21a      	sxth	r2, r3
 8007980:	78bb      	ldrb	r3, [r7, #2]
 8007982:	b21b      	sxth	r3, r3
 8007984:	4313      	orrs	r3, r2
 8007986:	b21a      	sxth	r2, r3
 8007988:	4b31      	ldr	r3, [pc, #196]	@ (8007a50 <bmp280_ReadCalibrateValue+0xfc>)
 800798a:	801a      	strh	r2, [r3, #0]
	t3 = buf[5] << 8 | buf[4];
 800798c:	797b      	ldrb	r3, [r7, #5]
 800798e:	021b      	lsls	r3, r3, #8
 8007990:	b21a      	sxth	r2, r3
 8007992:	793b      	ldrb	r3, [r7, #4]
 8007994:	b21b      	sxth	r3, r3
 8007996:	4313      	orrs	r3, r2
 8007998:	b21a      	sxth	r2, r3
 800799a:	4b2e      	ldr	r3, [pc, #184]	@ (8007a54 <bmp280_ReadCalibrateValue+0x100>)
 800799c:	801a      	strh	r2, [r3, #0]

	p1 = buf[7] << 8 | buf[6];
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	021b      	lsls	r3, r3, #8
 80079a2:	b21a      	sxth	r2, r3
 80079a4:	79bb      	ldrb	r3, [r7, #6]
 80079a6:	b21b      	sxth	r3, r3
 80079a8:	4313      	orrs	r3, r2
 80079aa:	b21b      	sxth	r3, r3
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	4b2a      	ldr	r3, [pc, #168]	@ (8007a58 <bmp280_ReadCalibrateValue+0x104>)
 80079b0:	801a      	strh	r2, [r3, #0]
	p2 = buf[9] << 8 | buf[8];
 80079b2:	7a7b      	ldrb	r3, [r7, #9]
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	b21a      	sxth	r2, r3
 80079b8:	7a3b      	ldrb	r3, [r7, #8]
 80079ba:	b21b      	sxth	r3, r3
 80079bc:	4313      	orrs	r3, r2
 80079be:	b21a      	sxth	r2, r3
 80079c0:	4b26      	ldr	r3, [pc, #152]	@ (8007a5c <bmp280_ReadCalibrateValue+0x108>)
 80079c2:	801a      	strh	r2, [r3, #0]
	p3 = buf[11]<< 8 | buf[10];
 80079c4:	7afb      	ldrb	r3, [r7, #11]
 80079c6:	021b      	lsls	r3, r3, #8
 80079c8:	b21a      	sxth	r2, r3
 80079ca:	7abb      	ldrb	r3, [r7, #10]
 80079cc:	b21b      	sxth	r3, r3
 80079ce:	4313      	orrs	r3, r2
 80079d0:	b21a      	sxth	r2, r3
 80079d2:	4b23      	ldr	r3, [pc, #140]	@ (8007a60 <bmp280_ReadCalibrateValue+0x10c>)
 80079d4:	801a      	strh	r2, [r3, #0]
	p4 = buf[13]<< 8 | buf[12];
 80079d6:	7b7b      	ldrb	r3, [r7, #13]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	b21a      	sxth	r2, r3
 80079dc:	7b3b      	ldrb	r3, [r7, #12]
 80079de:	b21b      	sxth	r3, r3
 80079e0:	4313      	orrs	r3, r2
 80079e2:	b21a      	sxth	r2, r3
 80079e4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a64 <bmp280_ReadCalibrateValue+0x110>)
 80079e6:	801a      	strh	r2, [r3, #0]
	p5 = buf[15]<< 8 | buf[14];
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	021b      	lsls	r3, r3, #8
 80079ec:	b21a      	sxth	r2, r3
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	b21b      	sxth	r3, r3
 80079f2:	4313      	orrs	r3, r2
 80079f4:	b21a      	sxth	r2, r3
 80079f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <bmp280_ReadCalibrateValue+0x114>)
 80079f8:	801a      	strh	r2, [r3, #0]
	p6 = buf[17]<< 8 | buf[16];
 80079fa:	7c7b      	ldrb	r3, [r7, #17]
 80079fc:	021b      	lsls	r3, r3, #8
 80079fe:	b21a      	sxth	r2, r3
 8007a00:	7c3b      	ldrb	r3, [r7, #16]
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	4313      	orrs	r3, r2
 8007a06:	b21a      	sxth	r2, r3
 8007a08:	4b18      	ldr	r3, [pc, #96]	@ (8007a6c <bmp280_ReadCalibrateValue+0x118>)
 8007a0a:	801a      	strh	r2, [r3, #0]
	p7 = buf[19]<< 8 | buf[18];
 8007a0c:	7cfb      	ldrb	r3, [r7, #19]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	b21a      	sxth	r2, r3
 8007a12:	7cbb      	ldrb	r3, [r7, #18]
 8007a14:	b21b      	sxth	r3, r3
 8007a16:	4313      	orrs	r3, r2
 8007a18:	b21a      	sxth	r2, r3
 8007a1a:	4b15      	ldr	r3, [pc, #84]	@ (8007a70 <bmp280_ReadCalibrateValue+0x11c>)
 8007a1c:	801a      	strh	r2, [r3, #0]
	p8 = buf[21]<< 8 | buf[20];
 8007a1e:	7d7b      	ldrb	r3, [r7, #21]
 8007a20:	021b      	lsls	r3, r3, #8
 8007a22:	b21a      	sxth	r2, r3
 8007a24:	7d3b      	ldrb	r3, [r7, #20]
 8007a26:	b21b      	sxth	r3, r3
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	b21a      	sxth	r2, r3
 8007a2c:	4b11      	ldr	r3, [pc, #68]	@ (8007a74 <bmp280_ReadCalibrateValue+0x120>)
 8007a2e:	801a      	strh	r2, [r3, #0]
	p9 = buf[23]<< 8 | buf[22];
 8007a30:	7dfb      	ldrb	r3, [r7, #23]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b21a      	sxth	r2, r3
 8007a36:	7dbb      	ldrb	r3, [r7, #22]
 8007a38:	b21b      	sxth	r3, r3
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	b21a      	sxth	r2, r3
 8007a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a78 <bmp280_ReadCalibrateValue+0x124>)
 8007a40:	801a      	strh	r2, [r3, #0]

}
 8007a42:	bf00      	nop
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20007ada 	.word	0x20007ada
 8007a50:	20007ac6 	.word	0x20007ac6
 8007a54:	20007ac8 	.word	0x20007ac8
 8007a58:	20007adc 	.word	0x20007adc
 8007a5c:	20007aca 	.word	0x20007aca
 8007a60:	20007acc 	.word	0x20007acc
 8007a64:	20007ace 	.word	0x20007ace
 8007a68:	20007ad0 	.word	0x20007ad0
 8007a6c:	20007ad2 	.word	0x20007ad2
 8007a70:	20007ad4 	.word	0x20007ad4
 8007a74:	20007ad6 	.word	0x20007ad6
 8007a78:	20007ad8 	.word	0x20007ad8

08007a7c <bmp280GetTemperature>:
static void bmp280GetTemperature(float* temperature)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b086      	sub	sp, #24
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
	uint8_t temp_buf[3];
	int32_t temp_adc;
	int32_t var1, var2;

	bmp280_ReadReg(BMP280_TEMP_REG_DATA, temp_buf, 3);
 8007a84:	f107 0308 	add.w	r3, r7, #8
 8007a88:	2203      	movs	r2, #3
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	20fa      	movs	r0, #250	@ 0xfa
 8007a8e:	f7ff ff31 	bl	80078f4 <bmp280_ReadReg>
	temp_adc = (temp_buf[0] << 16) | (temp_buf[1] << 8) | temp_buf[2];
 8007a92:	7a3b      	ldrb	r3, [r7, #8]
 8007a94:	041a      	lsls	r2, r3, #16
 8007a96:	7a7b      	ldrb	r3, [r7, #9]
 8007a98:	021b      	lsls	r3, r3, #8
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	7aba      	ldrb	r2, [r7, #10]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]
	temp_adc >>= 4;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	111b      	asrs	r3, r3, #4
 8007aa6:	617b      	str	r3, [r7, #20]

	var1  = ((((temp_adc>>3) - ((int32_t)t1 <<1))) * ((int32_t)t2)) >> 11;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	10da      	asrs	r2, r3, #3
 8007aac:	4b1c      	ldr	r3, [pc, #112]	@ (8007b20 <bmp280GetTemperature+0xa4>)
 8007aae:	881b      	ldrh	r3, [r3, #0]
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	1ad3      	subs	r3, r2, r3
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b24 <bmp280GetTemperature+0xa8>)
 8007ab6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007aba:	fb02 f303 	mul.w	r3, r2, r3
 8007abe:	12db      	asrs	r3, r3, #11
 8007ac0:	613b      	str	r3, [r7, #16]
	var2  = (((((temp_adc >> 4) - ((int32_t) t1)) * ((temp_adc >> 4) - ((int32_t) t1))) >> 12) * ((int32_t) t3)) >> 14;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	111b      	asrs	r3, r3, #4
 8007ac6:	4a16      	ldr	r2, [pc, #88]	@ (8007b20 <bmp280GetTemperature+0xa4>)
 8007ac8:	8812      	ldrh	r2, [r2, #0]
 8007aca:	1a9b      	subs	r3, r3, r2
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	1112      	asrs	r2, r2, #4
 8007ad0:	4913      	ldr	r1, [pc, #76]	@ (8007b20 <bmp280GetTemperature+0xa4>)
 8007ad2:	8809      	ldrh	r1, [r1, #0]
 8007ad4:	1a52      	subs	r2, r2, r1
 8007ad6:	fb02 f303 	mul.w	r3, r2, r3
 8007ada:	131b      	asrs	r3, r3, #12
 8007adc:	4a12      	ldr	r2, [pc, #72]	@ (8007b28 <bmp280GetTemperature+0xac>)
 8007ade:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	139b      	asrs	r3, r3, #14
 8007ae8:	60fb      	str	r3, [r7, #12]

	t_fine = (var1 + var2);
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	4a0e      	ldr	r2, [pc, #56]	@ (8007b2c <bmp280GetTemperature+0xb0>)
 8007af2:	6013      	str	r3, [r2, #0]

	*temperature = (((t_fine * 5) + 128 ) >> 8) /100.0f;
 8007af4:	4b0d      	ldr	r3, [pc, #52]	@ (8007b2c <bmp280GetTemperature+0xb0>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	4613      	mov	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	4413      	add	r3, r2
 8007afe:	3380      	adds	r3, #128	@ 0x80
 8007b00:	121b      	asrs	r3, r3, #8
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b0a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007b30 <bmp280GetTemperature+0xb4>
 8007b0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	edc3 7a00 	vstr	s15, [r3]
}
 8007b18:	bf00      	nop
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}
 8007b20:	20007ada 	.word	0x20007ada
 8007b24:	20007ac6 	.word	0x20007ac6
 8007b28:	20007ac8 	.word	0x20007ac8
 8007b2c:	20007ae0 	.word	0x20007ae0
 8007b30:	42c80000 	.word	0x42c80000

08007b34 <bmp280GetPressure>:
static void bmp280GetPressure(float *pressure)
{
 8007b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b38:	b0ce      	sub	sp, #312	@ 0x138
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	uint8_t pres_buf[3];
	int32_t pres_adc;
	int64_t var1, var2, p;
	float temp;

	bmp280GetTemperature(&temp);
 8007b40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7ff ff99 	bl	8007a7c <bmp280GetTemperature>
	bmp280_ReadReg(BMP280_PRESSURE_REG_DAT, pres_buf, 3);
 8007b4a:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8007b4e:	2203      	movs	r2, #3
 8007b50:	4619      	mov	r1, r3
 8007b52:	20f7      	movs	r0, #247	@ 0xf7
 8007b54:	f7ff fece 	bl	80078f4 <bmp280_ReadReg>

	pres_adc = (pres_buf[0] << 16) | (pres_buf[1] << 8) | pres_buf[2];
 8007b58:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8007b5c:	041a      	lsls	r2, r3, #16
 8007b5e:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8007b62:	021b      	lsls	r3, r3, #8
 8007b64:	431a      	orrs	r2, r3
 8007b66:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
	pres_adc >>= 4;
 8007b70:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007b74:	111b      	asrs	r3, r3, #4
 8007b76:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134

	var1 = ((int64_t)t_fine) - 128000;
 8007b7a:	4baa      	ldr	r3, [pc, #680]	@ (8007e24 <bmp280GetPressure+0x2f0>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	17da      	asrs	r2, r3, #31
 8007b80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b84:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8007b88:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8007b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b94:	4613      	mov	r3, r2
 8007b96:	f143 33ff 	adc.w	r3, r3, #4294967295
 8007b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b9c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007ba0:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t)p6;
 8007ba4:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007ba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bac:	fb03 f102 	mul.w	r1, r3, r2
 8007bb0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007bb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bb8:	fb02 f303 	mul.w	r3, r2, r3
 8007bbc:	18ca      	adds	r2, r1, r3
 8007bbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007bc2:	fba3 4503 	umull	r4, r5, r3, r3
 8007bc6:	1953      	adds	r3, r2, r5
 8007bc8:	461d      	mov	r5, r3
 8007bca:	4b97      	ldr	r3, [pc, #604]	@ (8007e28 <bmp280GetPressure+0x2f4>)
 8007bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bd0:	b21b      	sxth	r3, r3
 8007bd2:	17da      	asrs	r2, r3, #31
 8007bd4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bd8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bdc:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8007be0:	4603      	mov	r3, r0
 8007be2:	fb03 f205 	mul.w	r2, r3, r5
 8007be6:	460b      	mov	r3, r1
 8007be8:	fb04 f303 	mul.w	r3, r4, r3
 8007bec:	4413      	add	r3, r2
 8007bee:	4602      	mov	r2, r0
 8007bf0:	fba4 8902 	umull	r8, r9, r4, r2
 8007bf4:	444b      	add	r3, r9
 8007bf6:	4699      	mov	r9, r3
 8007bf8:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
 8007bfc:	e9c7 8948 	strd	r8, r9, [r7, #288]	@ 0x120
	var2 = var2 + ((var1*(int64_t)p5)<<17);
 8007c00:	4b8a      	ldr	r3, [pc, #552]	@ (8007e2c <bmp280GetPressure+0x2f8>)
 8007c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c06:	b21b      	sxth	r3, r3
 8007c08:	17da      	asrs	r2, r3, #31
 8007c0a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c0e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c16:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8007c1a:	462a      	mov	r2, r5
 8007c1c:	fb02 f203 	mul.w	r2, r2, r3
 8007c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007c24:	4621      	mov	r1, r4
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	441a      	add	r2, r3
 8007c2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007c30:	4621      	mov	r1, r4
 8007c32:	fba3 ab01 	umull	sl, fp, r3, r1
 8007c36:	eb02 030b 	add.w	r3, r2, fp
 8007c3a:	469b      	mov	fp, r3
 8007c3c:	f04f 0000 	mov.w	r0, #0
 8007c40:	f04f 0100 	mov.w	r1, #0
 8007c44:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8007c48:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8007c4c:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8007c50:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007c54:	1814      	adds	r4, r2, r0
 8007c56:	643c      	str	r4, [r7, #64]	@ 0x40
 8007c58:	414b      	adcs	r3, r1
 8007c5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c5c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8007c60:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t)p4)<<35);
 8007c64:	4b72      	ldr	r3, [pc, #456]	@ (8007e30 <bmp280GetPressure+0x2fc>)
 8007c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c6a:	b21b      	sxth	r3, r3
 8007c6c:	17da      	asrs	r2, r3, #31
 8007c6e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c72:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8007c76:	f04f 0000 	mov.w	r0, #0
 8007c7a:	f04f 0100 	mov.w	r1, #0
 8007c7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007c82:	00d9      	lsls	r1, r3, #3
 8007c84:	2000      	movs	r0, #0
 8007c86:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007c8a:	1814      	adds	r4, r2, r0
 8007c8c:	63bc      	str	r4, [r7, #56]	@ 0x38
 8007c8e:	414b      	adcs	r3, r1
 8007c90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c92:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8007c96:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t)p3)>>8) + ((var1 * (int64_t)p2)<<12);
 8007c9a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007c9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007ca2:	fb03 f102 	mul.w	r1, r3, r2
 8007ca6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8007caa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cae:	fb02 f303 	mul.w	r3, r2, r3
 8007cb2:	18ca      	adds	r2, r1, r3
 8007cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007cb8:	fba3 1303 	umull	r1, r3, r3, r3
 8007cbc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cca:	18d3      	adds	r3, r2, r3
 8007ccc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007cd0:	4b58      	ldr	r3, [pc, #352]	@ (8007e34 <bmp280GetPressure+0x300>)
 8007cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	17da      	asrs	r2, r3, #31
 8007cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cde:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ce2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8007cec:	4642      	mov	r2, r8
 8007cee:	fb02 f203 	mul.w	r2, r2, r3
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	fb01 f303 	mul.w	r3, r1, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4641      	mov	r1, r8
 8007d00:	fba2 1201 	umull	r1, r2, r2, r1
 8007d04:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8007d08:	460a      	mov	r2, r1
 8007d0a:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8007d0e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8007d12:	4413      	add	r3, r2
 8007d14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d18:	f04f 0000 	mov.w	r0, #0
 8007d1c:	f04f 0100 	mov.w	r1, #0
 8007d20:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8007d24:	4623      	mov	r3, r4
 8007d26:	0a18      	lsrs	r0, r3, #8
 8007d28:	462b      	mov	r3, r5
 8007d2a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8007d2e:	462b      	mov	r3, r5
 8007d30:	1219      	asrs	r1, r3, #8
 8007d32:	4b41      	ldr	r3, [pc, #260]	@ (8007e38 <bmp280GetPressure+0x304>)
 8007d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d38:	b21b      	sxth	r3, r3
 8007d3a:	17da      	asrs	r2, r3, #31
 8007d3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d40:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d48:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d4c:	464a      	mov	r2, r9
 8007d4e:	fb02 f203 	mul.w	r2, r2, r3
 8007d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8007d56:	4644      	mov	r4, r8
 8007d58:	fb04 f303 	mul.w	r3, r4, r3
 8007d5c:	441a      	add	r2, r3
 8007d5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8007d62:	4644      	mov	r4, r8
 8007d64:	fba3 4304 	umull	r4, r3, r3, r4
 8007d68:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d76:	18d3      	adds	r3, r2, r3
 8007d78:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007d7c:	f04f 0200 	mov.w	r2, #0
 8007d80:	f04f 0300 	mov.w	r3, #0
 8007d84:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8007d88:	464c      	mov	r4, r9
 8007d8a:	0323      	lsls	r3, r4, #12
 8007d8c:	4644      	mov	r4, r8
 8007d8e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8007d92:	4644      	mov	r4, r8
 8007d94:	0322      	lsls	r2, r4, #12
 8007d96:	1884      	adds	r4, r0, r2
 8007d98:	633c      	str	r4, [r7, #48]	@ 0x30
 8007d9a:	eb41 0303 	adc.w	r3, r1, r3
 8007d9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007da0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8007da4:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8007da8:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8007dac:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8007db0:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8007db4:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8007db8:	4b20      	ldr	r3, [pc, #128]	@ (8007e3c <bmp280GetPressure+0x308>)
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007dc4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007dc8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8007dcc:	462b      	mov	r3, r5
 8007dce:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8007dd2:	4642      	mov	r2, r8
 8007dd4:	fb02 f203 	mul.w	r2, r2, r3
 8007dd8:	464b      	mov	r3, r9
 8007dda:	4621      	mov	r1, r4
 8007ddc:	fb01 f303 	mul.w	r3, r1, r3
 8007de0:	4413      	add	r3, r2
 8007de2:	4622      	mov	r2, r4
 8007de4:	4641      	mov	r1, r8
 8007de6:	fba2 1201 	umull	r1, r2, r2, r1
 8007dea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007dee:	460a      	mov	r2, r1
 8007df0:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8007df4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8007df8:	4413      	add	r3, r2
 8007dfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	104a      	asrs	r2, r1, #1
 8007e0e:	4629      	mov	r1, r5
 8007e10:	17cb      	asrs	r3, r1, #31
 8007e12:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if ( var1 == 0 ) return;
 8007e16:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	f000 8165 	beq.w	80080ea <bmp280GetPressure+0x5b6>
 8007e20:	e00e      	b.n	8007e40 <bmp280GetPressure+0x30c>
 8007e22:	bf00      	nop
 8007e24:	20007ae0 	.word	0x20007ae0
 8007e28:	20007ad2 	.word	0x20007ad2
 8007e2c:	20007ad0 	.word	0x20007ad0
 8007e30:	20007ace 	.word	0x20007ace
 8007e34:	20007acc 	.word	0x20007acc
 8007e38:	20007aca 	.word	0x20007aca
 8007e3c:	20007adc 	.word	0x20007adc

	p = 1048576 - pres_adc;
 8007e40:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8007e44:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8007e48:	17da      	asrs	r2, r3, #31
 8007e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e4e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8007e52:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p<<31) - var2)*3125) / var1;
 8007e56:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007e5a:	105b      	asrs	r3, r3, #1
 8007e5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e60:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007e64:	07db      	lsls	r3, r3, #31
 8007e66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e6a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8007e6e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8007e72:	4621      	mov	r1, r4
 8007e74:	1a89      	subs	r1, r1, r2
 8007e76:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8007e7a:	4629      	mov	r1, r5
 8007e7c:	eb61 0303 	sbc.w	r3, r1, r3
 8007e80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e84:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8007e88:	4622      	mov	r2, r4
 8007e8a:	462b      	mov	r3, r5
 8007e8c:	1891      	adds	r1, r2, r2
 8007e8e:	6239      	str	r1, [r7, #32]
 8007e90:	415b      	adcs	r3, r3
 8007e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e94:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e98:	4621      	mov	r1, r4
 8007e9a:	1851      	adds	r1, r2, r1
 8007e9c:	61b9      	str	r1, [r7, #24]
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	414b      	adcs	r3, r1
 8007ea2:	61fb      	str	r3, [r7, #28]
 8007ea4:	f04f 0200 	mov.w	r2, #0
 8007ea8:	f04f 0300 	mov.w	r3, #0
 8007eac:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8007eb0:	4649      	mov	r1, r9
 8007eb2:	018b      	lsls	r3, r1, #6
 8007eb4:	4641      	mov	r1, r8
 8007eb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007eba:	4641      	mov	r1, r8
 8007ebc:	018a      	lsls	r2, r1, #6
 8007ebe:	4641      	mov	r1, r8
 8007ec0:	1889      	adds	r1, r1, r2
 8007ec2:	6139      	str	r1, [r7, #16]
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	eb43 0101 	adc.w	r1, r3, r1
 8007eca:	6179      	str	r1, [r7, #20]
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007ed8:	4649      	mov	r1, r9
 8007eda:	008b      	lsls	r3, r1, #2
 8007edc:	4641      	mov	r1, r8
 8007ede:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ee2:	4641      	mov	r1, r8
 8007ee4:	008a      	lsls	r2, r1, #2
 8007ee6:	4610      	mov	r0, r2
 8007ee8:	4619      	mov	r1, r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	4622      	mov	r2, r4
 8007eee:	189b      	adds	r3, r3, r2
 8007ef0:	60bb      	str	r3, [r7, #8]
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	462a      	mov	r2, r5
 8007ef6:	eb42 0303 	adc.w	r3, r2, r3
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	f04f 0200 	mov.w	r2, #0
 8007f00:	f04f 0300 	mov.w	r3, #0
 8007f04:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8007f08:	4649      	mov	r1, r9
 8007f0a:	008b      	lsls	r3, r1, #2
 8007f0c:	4641      	mov	r1, r8
 8007f0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f12:	4641      	mov	r1, r8
 8007f14:	008a      	lsls	r2, r1, #2
 8007f16:	4610      	mov	r0, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	189b      	adds	r3, r3, r2
 8007f20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f22:	462b      	mov	r3, r5
 8007f24:	460a      	mov	r2, r1
 8007f26:	eb42 0303 	adc.w	r3, r2, r3
 8007f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f2c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8007f30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8007f34:	f7f8 ff20 	bl	8000d78 <__aeabi_ldivmod>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	460b      	mov	r3, r1
 8007f3c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 8007f40:	4b6d      	ldr	r3, [pc, #436]	@ (80080f8 <bmp280GetPressure+0x5c4>)
 8007f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f46:	b21b      	sxth	r3, r3
 8007f48:	17da      	asrs	r2, r3, #31
 8007f4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007f4c:	677a      	str	r2, [r7, #116]	@ 0x74
 8007f4e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8007f52:	f04f 0000 	mov.w	r0, #0
 8007f56:	f04f 0100 	mov.w	r1, #0
 8007f5a:	0b50      	lsrs	r0, r2, #13
 8007f5c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8007f60:	1359      	asrs	r1, r3, #13
 8007f62:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8007f66:	462b      	mov	r3, r5
 8007f68:	fb00 f203 	mul.w	r2, r0, r3
 8007f6c:	4623      	mov	r3, r4
 8007f6e:	fb03 f301 	mul.w	r3, r3, r1
 8007f72:	4413      	add	r3, r2
 8007f74:	4622      	mov	r2, r4
 8007f76:	fba2 1200 	umull	r1, r2, r2, r0
 8007f7a:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8007f7e:	460a      	mov	r2, r1
 8007f80:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8007f84:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007f88:	4413      	add	r3, r2
 8007f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f8e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f04f 0100 	mov.w	r1, #0
 8007f9a:	0b50      	lsrs	r0, r2, #13
 8007f9c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8007fa0:	1359      	asrs	r1, r3, #13
 8007fa2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8007fa6:	462b      	mov	r3, r5
 8007fa8:	fb00 f203 	mul.w	r2, r0, r3
 8007fac:	4623      	mov	r3, r4
 8007fae:	fb03 f301 	mul.w	r3, r3, r1
 8007fb2:	4413      	add	r3, r2
 8007fb4:	4622      	mov	r2, r4
 8007fb6:	fba2 1200 	umull	r1, r2, r2, r0
 8007fba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007fbe:	460a      	mov	r2, r1
 8007fc0:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8007fc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007fc8:	4413      	add	r3, r2
 8007fca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007fce:	f04f 0200 	mov.w	r2, #0
 8007fd2:	f04f 0300 	mov.w	r3, #0
 8007fd6:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8007fda:	4621      	mov	r1, r4
 8007fdc:	0e4a      	lsrs	r2, r1, #25
 8007fde:	4629      	mov	r1, r5
 8007fe0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8007fe4:	4629      	mov	r1, r5
 8007fe6:	164b      	asrs	r3, r1, #25
 8007fe8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = (((int64_t)p8) * p) >> 19;
 8007fec:	4b43      	ldr	r3, [pc, #268]	@ (80080fc <bmp280GetPressure+0x5c8>)
 8007fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	17da      	asrs	r2, r3, #31
 8007ff6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ff8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ffa:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8007ffe:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8008002:	462a      	mov	r2, r5
 8008004:	fb02 f203 	mul.w	r2, r2, r3
 8008008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800800c:	4621      	mov	r1, r4
 800800e:	fb01 f303 	mul.w	r3, r1, r3
 8008012:	4413      	add	r3, r2
 8008014:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008018:	4621      	mov	r1, r4
 800801a:	fba2 1201 	umull	r1, r2, r2, r1
 800801e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008022:	460a      	mov	r2, r1
 8008024:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8008028:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800802c:	4413      	add	r3, r2
 800802e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008032:	f04f 0200 	mov.w	r2, #0
 8008036:	f04f 0300 	mov.w	r3, #0
 800803a:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800803e:	4621      	mov	r1, r4
 8008040:	0cca      	lsrs	r2, r1, #19
 8008042:	4629      	mov	r1, r5
 8008044:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8008048:	4629      	mov	r1, r5
 800804a:	14cb      	asrs	r3, r1, #19
 800804c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 8008050:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8008054:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8008058:	1884      	adds	r4, r0, r2
 800805a:	663c      	str	r4, [r7, #96]	@ 0x60
 800805c:	eb41 0303 	adc.w	r3, r1, r3
 8008060:	667b      	str	r3, [r7, #100]	@ 0x64
 8008062:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8008066:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800806a:	4621      	mov	r1, r4
 800806c:	1889      	adds	r1, r1, r2
 800806e:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008070:	4629      	mov	r1, r5
 8008072:	eb43 0101 	adc.w	r1, r3, r1
 8008076:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8008078:	f04f 0000 	mov.w	r0, #0
 800807c:	f04f 0100 	mov.w	r1, #0
 8008080:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8008084:	4623      	mov	r3, r4
 8008086:	0a18      	lsrs	r0, r3, #8
 8008088:	462b      	mov	r3, r5
 800808a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800808e:	462b      	mov	r3, r5
 8008090:	1219      	asrs	r1, r3, #8
 8008092:	4b1b      	ldr	r3, [pc, #108]	@ (8008100 <bmp280GetPressure+0x5cc>)
 8008094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008098:	b21b      	sxth	r3, r3
 800809a:	17da      	asrs	r2, r3, #31
 800809c:	653b      	str	r3, [r7, #80]	@ 0x50
 800809e:	657a      	str	r2, [r7, #84]	@ 0x54
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	f04f 0300 	mov.w	r3, #0
 80080a8:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80080ac:	464c      	mov	r4, r9
 80080ae:	0123      	lsls	r3, r4, #4
 80080b0:	4644      	mov	r4, r8
 80080b2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80080b6:	4644      	mov	r4, r8
 80080b8:	0122      	lsls	r2, r4, #4
 80080ba:	1884      	adds	r4, r0, r2
 80080bc:	603c      	str	r4, [r7, #0]
 80080be:	eb41 0303 	adc.w	r3, r1, r3
 80080c2:	607b      	str	r3, [r7, #4]
 80080c4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80080c8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	*pressure = (float) p / 256.0f;
 80080cc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 80080d0:	f7f8 fe14 	bl	8000cfc <__aeabi_l2f>
 80080d4:	ee06 0a90 	vmov	s13, r0
 80080d8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8008104 <bmp280GetPressure+0x5d0>
 80080dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80080e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80080e4:	edc3 7a00 	vstr	s15, [r3]
 80080e8:	e000      	b.n	80080ec <bmp280GetPressure+0x5b8>
	if ( var1 == 0 ) return;
 80080ea:	bf00      	nop

}
 80080ec:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80080f0:	46bd      	mov	sp, r7
 80080f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f6:	bf00      	nop
 80080f8:	20007ad8 	.word	0x20007ad8
 80080fc:	20007ad6 	.word	0x20007ad6
 8008100:	20007ad4 	.word	0x20007ad4
 8008104:	43800000 	.word	0x43800000

08008108 <bmp280Init>:
void bmp280Init()
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0

	bmp280_StartUp();
 800810c:	f7ff fbb0 	bl	8007870 <bmp280_StartUp>
	vTaskDelay(5);
 8008110:	2005      	movs	r0, #5
 8008112:	f7fd fb91 	bl	8005838 <vTaskDelay>
	bmp280_ReadCalibrateValue();
 8008116:	f7ff fc1d 	bl	8007954 <bmp280_ReadCalibrateValue>
	vTaskDelay(5);
 800811a:	2005      	movs	r0, #5
 800811c:	f7fd fb8c 	bl	8005838 <vTaskDelay>
	bmp280_WriteReg(BMP280_REG_CTRL, ( (TEMP_18BIT_RES<<5) | (PRES_18BIT_RES<<2) | BMP280_NORMAL_MODE));
 8008120:	216f      	movs	r1, #111	@ 0x6f
 8008122:	20f4      	movs	r0, #244	@ 0xf4
 8008124:	f7ff fbba 	bl	800789c <bmp280_WriteReg>
	isInit = true;
 8008128:	4b02      	ldr	r3, [pc, #8]	@ (8008134 <bmp280Init+0x2c>)
 800812a:	2201      	movs	r2, #1
 800812c:	701a      	strb	r2, [r3, #0]
}
 800812e:	bf00      	nop
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	20007ac5 	.word	0x20007ac5

08008138 <bmp280TestConnection>:
{

	return true;
}
bool bmp280TestConnection()
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
	uint8_t checkID;

	if (!isInit) return false;
 800813e:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <bmp280TestConnection+0x3c>)
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f083 0301 	eor.w	r3, r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <bmp280TestConnection+0x18>
 800814c:	2300      	movs	r3, #0
 800814e:	e00d      	b.n	800816c <bmp280TestConnection+0x34>

	bmp280_StartUp();
 8008150:	f7ff fb8e 	bl	8007870 <bmp280_StartUp>
	bmp280_ReadReg(BMP280_REG_ID, &checkID, 1);
 8008154:	1dfb      	adds	r3, r7, #7
 8008156:	2201      	movs	r2, #1
 8008158:	4619      	mov	r1, r3
 800815a:	20d0      	movs	r0, #208	@ 0xd0
 800815c:	f7ff fbca 	bl	80078f4 <bmp280_ReadReg>

	if ( checkID != 0x58 ) return false;
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b58      	cmp	r3, #88	@ 0x58
 8008164:	d001      	beq.n	800816a <bmp280TestConnection+0x32>
 8008166:	2300      	movs	r3, #0
 8008168:	e000      	b.n	800816c <bmp280TestConnection+0x34>

	return true;
 800816a:	2301      	movs	r3, #1
}
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	20007ac5 	.word	0x20007ac5

08008178 <bmp280GetData>:
void bmp280GetData(float* pressure, float* temperature, float* asl)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b084      	sub	sp, #16
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
	bmp280GetTemperature(temperature);
 8008184:	68b8      	ldr	r0, [r7, #8]
 8008186:	f7ff fc79 	bl	8007a7c <bmp280GetTemperature>
	bmp280GetPressure(pressure);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fcd2 	bl	8007b34 <bmp280GetPressure>
	*asl = bmp280PressureToAltitude(pressure);
 8008190:	68f8      	ldr	r0, [r7, #12]
 8008192:	f000 f809 	bl	80081a8 <bmp280PressureToAltitude>
 8008196:	eef0 7a40 	vmov.f32	s15, s0
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	edc3 7a00 	vstr	s15, [r3]

}
 80081a0:	bf00      	nop
 80081a2:	3710      	adds	r7, #16
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <bmp280PressureToAltitude>:
#define CONST_PF2 44330.0f
#define FIX_TEMP 25         // Fixed Temperature. ASL is a function of pressure and temperature, but as the temperature changes so much (blow a little towards the flie and watch it drop 5 degrees) it corrupts the ASL estimates.
                            // TLDR: Adjusting for temp changes does more harm than good.

float bmp280PressureToAltitude(float* pressure)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
    if (*pressure > 0)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	edd3 7a00 	vldr	s15, [r3]
 80081b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081be:	dd1b      	ble.n	80081f8 <bmp280PressureToAltitude+0x50>
    {
        //return (1.f - pow(*pressure / CONST_SEA_PRESSURE, CONST_PF)) * CONST_PF2;
        //return ((pow((1015.7 / *pressure), CONST_PF) - 1.0) * (25. + 273.15)) / 0.0065;
        return ((powf((1015.7f / *pressure), CONST_PF) - 1.0f) * (FIX_TEMP + 273.15f)) / 0.0065f;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	edd3 7a00 	vldr	s15, [r3]
 80081c6:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800820c <bmp280PressureToAltitude+0x64>
 80081ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ce:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8008210 <bmp280PressureToAltitude+0x68>
 80081d2:	eeb0 0a47 	vmov.f32	s0, s14
 80081d6:	f00e f99f 	bl	8016518 <powf>
 80081da:	eef0 7a40 	vmov.f32	s15, s0
 80081de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8008214 <bmp280PressureToAltitude+0x6c>
 80081ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80081ee:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8008218 <bmp280PressureToAltitude+0x70>
 80081f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80081f6:	e001      	b.n	80081fc <bmp280PressureToAltitude+0x54>
    }
    else
    {
        return 0;
 80081f8:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800821c <bmp280PressureToAltitude+0x74>
    }
}
 80081fc:	eef0 7a47 	vmov.f32	s15, s14
 8008200:	eeb0 0a67 	vmov.f32	s0, s15
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	447deccd 	.word	0x447deccd
 8008210:	3e42d454 	.word	0x3e42d454
 8008214:	43951333 	.word	0x43951333
 8008218:	3bd4fdf4 	.word	0x3bd4fdf4
 800821c:	00000000 	.word	0x00000000

08008220 <I2C1_Init>:
#include "i2c_drv.h"

I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;
void I2C1_Init(void)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	af00      	add	r7, sp, #0

	hi2c1.Instance = I2C1;
 8008224:	4b12      	ldr	r3, [pc, #72]	@ (8008270 <I2C1_Init+0x50>)
 8008226:	4a13      	ldr	r2, [pc, #76]	@ (8008274 <I2C1_Init+0x54>)
 8008228:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800822a:	4b11      	ldr	r3, [pc, #68]	@ (8008270 <I2C1_Init+0x50>)
 800822c:	4a12      	ldr	r2, [pc, #72]	@ (8008278 <I2C1_Init+0x58>)
 800822e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008230:	4b0f      	ldr	r3, [pc, #60]	@ (8008270 <I2C1_Init+0x50>)
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8008236:	4b0e      	ldr	r3, [pc, #56]	@ (8008270 <I2C1_Init+0x50>)
 8008238:	2200      	movs	r2, #0
 800823a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800823c:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <I2C1_Init+0x50>)
 800823e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008242:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008244:	4b0a      	ldr	r3, [pc, #40]	@ (8008270 <I2C1_Init+0x50>)
 8008246:	2200      	movs	r2, #0
 8008248:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800824a:	4b09      	ldr	r3, [pc, #36]	@ (8008270 <I2C1_Init+0x50>)
 800824c:	2200      	movs	r2, #0
 800824e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008250:	4b07      	ldr	r3, [pc, #28]	@ (8008270 <I2C1_Init+0x50>)
 8008252:	2200      	movs	r2, #0
 8008254:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008256:	4b06      	ldr	r3, [pc, #24]	@ (8008270 <I2C1_Init+0x50>)
 8008258:	2200      	movs	r2, #0
 800825a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800825c:	4804      	ldr	r0, [pc, #16]	@ (8008270 <I2C1_Init+0x50>)
 800825e:	f7f9 fd5f 	bl	8001d20 <HAL_I2C_Init>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d001      	beq.n	800826c <I2C1_Init+0x4c>
		Error_Handler();
 8008268:	f7ff f982 	bl	8007570 <Error_Handler>
	}

}
 800826c:	bf00      	nop
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20007ae4 	.word	0x20007ae4
 8008274:	40005400 	.word	0x40005400
 8008278:	00061a80 	.word	0x00061a80

0800827c <I2C2_Init>:
void I2C2_Init(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8008280:	4b12      	ldr	r3, [pc, #72]	@ (80082cc <I2C2_Init+0x50>)
 8008282:	4a13      	ldr	r2, [pc, #76]	@ (80082d0 <I2C2_Init+0x54>)
 8008284:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8008286:	4b11      	ldr	r3, [pc, #68]	@ (80082cc <I2C2_Init+0x50>)
 8008288:	4a12      	ldr	r2, [pc, #72]	@ (80082d4 <I2C2_Init+0x58>)
 800828a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800828c:	4b0f      	ldr	r3, [pc, #60]	@ (80082cc <I2C2_Init+0x50>)
 800828e:	2200      	movs	r2, #0
 8008290:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8008292:	4b0e      	ldr	r3, [pc, #56]	@ (80082cc <I2C2_Init+0x50>)
 8008294:	2200      	movs	r2, #0
 8008296:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008298:	4b0c      	ldr	r3, [pc, #48]	@ (80082cc <I2C2_Init+0x50>)
 800829a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800829e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80082a0:	4b0a      	ldr	r3, [pc, #40]	@ (80082cc <I2C2_Init+0x50>)
 80082a2:	2200      	movs	r2, #0
 80082a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80082a6:	4b09      	ldr	r3, [pc, #36]	@ (80082cc <I2C2_Init+0x50>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80082ac:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <I2C2_Init+0x50>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80082b2:	4b06      	ldr	r3, [pc, #24]	@ (80082cc <I2C2_Init+0x50>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80082b8:	4804      	ldr	r0, [pc, #16]	@ (80082cc <I2C2_Init+0x50>)
 80082ba:	f7f9 fd31 	bl	8001d20 <HAL_I2C_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <I2C2_Init+0x4c>
  {
    Error_Handler();
 80082c4:	f7ff f954 	bl	8007570 <Error_Handler>
  }

}
 80082c8:	bf00      	nop
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20007b38 	.word	0x20007b38
 80082d0:	40005800 	.word	0x40005800
 80082d4:	00061a80 	.word	0x00061a80

080082d8 <HAL_I2C_MspInit>:
void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b08c      	sub	sp, #48	@ 0x30
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082e0:	f107 031c 	add.w	r3, r7, #28
 80082e4:	2200      	movs	r2, #0
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	605a      	str	r2, [r3, #4]
 80082ea:	609a      	str	r2, [r3, #8]
 80082ec:	60da      	str	r2, [r3, #12]
 80082ee:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a32      	ldr	r2, [pc, #200]	@ (80083c0 <HAL_I2C_MspInit+0xe8>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d12b      	bne.n	8008352 <HAL_I2C_MspInit+0x7a>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80082fa:	2300      	movs	r3, #0
 80082fc:	61bb      	str	r3, [r7, #24]
 80082fe:	4b31      	ldr	r3, [pc, #196]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 8008300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008302:	4a30      	ldr	r2, [pc, #192]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 8008304:	f043 0302 	orr.w	r3, r3, #2
 8008308:	6313      	str	r3, [r2, #48]	@ 0x30
 800830a:	4b2e      	ldr	r3, [pc, #184]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 800830c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	61bb      	str	r3, [r7, #24]
 8008314:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008316:	23c0      	movs	r3, #192	@ 0xc0
 8008318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800831a:	2312      	movs	r3, #18
 800831c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831e:	2300      	movs	r3, #0
 8008320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008322:	2303      	movs	r3, #3
 8008324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008326:	2304      	movs	r3, #4
 8008328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800832a:	f107 031c 	add.w	r3, r7, #28
 800832e:	4619      	mov	r1, r3
 8008330:	4825      	ldr	r0, [pc, #148]	@ (80083c8 <HAL_I2C_MspInit+0xf0>)
 8008332:	f7f9 fb25 	bl	8001980 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008336:	2300      	movs	r3, #0
 8008338:	617b      	str	r3, [r7, #20]
 800833a:	4b22      	ldr	r3, [pc, #136]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 800833c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800833e:	4a21      	ldr	r2, [pc, #132]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 8008340:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008344:	6413      	str	r3, [r2, #64]	@ 0x40
 8008346:	4b1f      	ldr	r3, [pc, #124]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 8008348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800834a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	697b      	ldr	r3, [r7, #20]

  }
  if(i2cHandle->Instance==I2C2)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a1d      	ldr	r2, [pc, #116]	@ (80083cc <HAL_I2C_MspInit+0xf4>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d12c      	bne.n	80083b6 <HAL_I2C_MspInit+0xde>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800835c:	2300      	movs	r3, #0
 800835e:	613b      	str	r3, [r7, #16]
 8008360:	4b18      	ldr	r3, [pc, #96]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 8008362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008364:	4a17      	ldr	r2, [pc, #92]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 8008366:	f043 0302 	orr.w	r3, r3, #2
 800836a:	6313      	str	r3, [r2, #48]	@ 0x30
 800836c:	4b15      	ldr	r3, [pc, #84]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	f003 0302 	and.w	r3, r3, #2
 8008374:	613b      	str	r3, [r7, #16]
 8008376:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008378:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800837c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800837e:	2312      	movs	r3, #18
 8008380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008382:	2300      	movs	r3, #0
 8008384:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008386:	2303      	movs	r3, #3
 8008388:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800838a:	2304      	movs	r3, #4
 800838c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800838e:	f107 031c 	add.w	r3, r7, #28
 8008392:	4619      	mov	r1, r3
 8008394:	480c      	ldr	r0, [pc, #48]	@ (80083c8 <HAL_I2C_MspInit+0xf0>)
 8008396:	f7f9 faf3 	bl	8001980 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
 800839e:	4b09      	ldr	r3, [pc, #36]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 80083a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a2:	4a08      	ldr	r2, [pc, #32]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 80083a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80083a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80083aa:	4b06      	ldr	r3, [pc, #24]	@ (80083c4 <HAL_I2C_MspInit+0xec>)
 80083ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]

  }
}
 80083b6:	bf00      	nop
 80083b8:	3730      	adds	r7, #48	@ 0x30
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	bf00      	nop
 80083c0:	40005400 	.word	0x40005400
 80083c4:	40023800 	.word	0x40023800
 80083c8:	40020400 	.word	0x40020400
 80083cc:	40005800 	.word	0x40005800

080083d0 <i2cdevReadReg16>:
#include "i2cdev.h"
#include "stdbool.h"


bool i2cdevReadReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b08a      	sub	sp, #40	@ 0x28
 80083d4:	af04      	add	r7, sp, #16
 80083d6:	60f8      	str	r0, [r7, #12]
 80083d8:	4608      	mov	r0, r1
 80083da:	4611      	mov	r1, r2
 80083dc:	461a      	mov	r2, r3
 80083de:	4603      	mov	r3, r0
 80083e0:	72fb      	strb	r3, [r7, #11]
 80083e2:	460b      	mov	r3, r1
 80083e4:	813b      	strh	r3, [r7, #8]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 80083ea:	7afb      	ldrb	r3, [r7, #11]
 80083ec:	b29b      	uxth	r3, r3
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	b299      	uxth	r1, r3
 80083f2:	893a      	ldrh	r2, [r7, #8]
 80083f4:	2364      	movs	r3, #100	@ 0x64
 80083f6:	9302      	str	r3, [sp, #8]
 80083f8:	88fb      	ldrh	r3, [r7, #6]
 80083fa:	9301      	str	r3, [sp, #4]
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	2310      	movs	r3, #16
 8008402:	4807      	ldr	r0, [pc, #28]	@ (8008420 <i2cdevReadReg16+0x50>)
 8008404:	f7f9 feca 	bl	800219c <HAL_I2C_Mem_Read>
 8008408:	4603      	mov	r3, r0
 800840a:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d101      	bne.n	8008416 <i2cdevReadReg16+0x46>
 8008412:	2301      	movs	r3, #1
 8008414:	e000      	b.n	8008418 <i2cdevReadReg16+0x48>
	else return false;
 8008416:	2300      	movs	r3, #0
}
 8008418:	4618      	mov	r0, r3
 800841a:	3718      	adds	r7, #24
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20007b38 	.word	0x20007b38

08008424 <i2cdevWriteReg16>:
bool i2cdevWriteReg16(I2C_HandleTypeDef *dev, uint8_t devAddress, uint16_t memAddress, uint16_t len, uint8_t *data)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08a      	sub	sp, #40	@ 0x28
 8008428:	af04      	add	r7, sp, #16
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	4608      	mov	r0, r1
 800842e:	4611      	mov	r1, r2
 8008430:	461a      	mov	r2, r3
 8008432:	4603      	mov	r3, r0
 8008434:	72fb      	strb	r3, [r7, #11]
 8008436:	460b      	mov	r3, r1
 8008438:	813b      	strh	r3, [r7, #8]
 800843a:	4613      	mov	r3, r2
 800843c:	80fb      	strh	r3, [r7, #6]
	UNUSED(dev);
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c2, devAddress<<1, memAddress, I2C_MEMADD_SIZE_16BIT, data, len, 100);
 800843e:	7afb      	ldrb	r3, [r7, #11]
 8008440:	b29b      	uxth	r3, r3
 8008442:	005b      	lsls	r3, r3, #1
 8008444:	b299      	uxth	r1, r3
 8008446:	893a      	ldrh	r2, [r7, #8]
 8008448:	2364      	movs	r3, #100	@ 0x64
 800844a:	9302      	str	r3, [sp, #8]
 800844c:	88fb      	ldrh	r3, [r7, #6]
 800844e:	9301      	str	r3, [sp, #4]
 8008450:	6a3b      	ldr	r3, [r7, #32]
 8008452:	9300      	str	r3, [sp, #0]
 8008454:	2310      	movs	r3, #16
 8008456:	4807      	ldr	r0, [pc, #28]	@ (8008474 <i2cdevWriteReg16+0x50>)
 8008458:	f7f9 fda6 	bl	8001fa8 <HAL_I2C_Mem_Write>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]

	if ( status == HAL_OK) return true;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <i2cdevWriteReg16+0x46>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <i2cdevWriteReg16+0x48>
	else return false;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3718      	adds	r7, #24
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20007b38 	.word	0x20007b38

08008478 <ledInit>:

static bool isInit;


void ledInit()
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b086      	sub	sp, #24
 800847c:	af00      	add	r7, sp, #0

	if (isInit)
 800847e:	4b1a      	ldr	r3, [pc, #104]	@ (80084e8 <ledInit+0x70>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d12c      	bne.n	80084e0 <ledInit+0x68>
		return;
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008486:	1d3b      	adds	r3, r7, #4
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	605a      	str	r2, [r3, #4]
 800848e:	609a      	str	r2, [r3, #8]
 8008490:	60da      	str	r2, [r3, #12]
 8008492:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
 8008498:	4b14      	ldr	r3, [pc, #80]	@ (80084ec <ledInit+0x74>)
 800849a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849c:	4a13      	ldr	r2, [pc, #76]	@ (80084ec <ledInit+0x74>)
 800849e:	f043 0304 	orr.w	r3, r3, #4
 80084a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80084a4:	4b11      	ldr	r3, [pc, #68]	@ (80084ec <ledInit+0x74>)
 80084a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a8:	f003 0304 	and.w	r3, r3, #4
 80084ac:	603b      	str	r3, [r7, #0]
 80084ae:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80084b0:	2200      	movs	r2, #0
 80084b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80084b6:	480e      	ldr	r0, [pc, #56]	@ (80084f0 <ledInit+0x78>)
 80084b8:	f7f9 fbfe 	bl	8001cb8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LED_PIN;
 80084bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80084c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084c2:	2301      	movs	r3, #1
 80084c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 80084ce:	1d3b      	adds	r3, r7, #4
 80084d0:	4619      	mov	r1, r3
 80084d2:	4807      	ldr	r0, [pc, #28]	@ (80084f0 <ledInit+0x78>)
 80084d4:	f7f9 fa54 	bl	8001980 <HAL_GPIO_Init>

	isInit = true;
 80084d8:	4b03      	ldr	r3, [pc, #12]	@ (80084e8 <ledInit+0x70>)
 80084da:	2201      	movs	r2, #1
 80084dc:	701a      	strb	r2, [r3, #0]
 80084de:	e000      	b.n	80084e2 <ledInit+0x6a>
		return;
 80084e0:	bf00      	nop
}
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20007b8c 	.word	0x20007b8c
 80084ec:	40023800 	.word	0x40023800
 80084f0:	40020800 	.word	0x40020800

080084f4 <ledSet>:


void ledSet(bool value)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	4603      	mov	r3, r0
 80084fc:	71fb      	strb	r3, [r7, #7]
	if ( value == 0 ) HAL_GPIO_WritePin(LED_PORT, LED_PIN, 0);
 80084fe:	79fb      	ldrb	r3, [r7, #7]
 8008500:	f083 0301 	eor.w	r3, r3, #1
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d006      	beq.n	8008518 <ledSet+0x24>
 800850a:	2200      	movs	r2, #0
 800850c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008510:	4806      	ldr	r0, [pc, #24]	@ (800852c <ledSet+0x38>)
 8008512:	f7f9 fbd1 	bl	8001cb8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);

}
 8008516:	e005      	b.n	8008524 <ledSet+0x30>
	else HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);
 8008518:	2201      	movs	r2, #1
 800851a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800851e:	4803      	ldr	r0, [pc, #12]	@ (800852c <ledSet+0x38>)
 8008520:	f7f9 fbca 	bl	8001cb8 <HAL_GPIO_WritePin>
}
 8008524:	bf00      	nop
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	40020800 	.word	0x40020800

08008530 <mpu6500TestConnection>:
#include "mpu6500.h"
#include "i2c_drv.h"

uint8_t walk = 0;

bool mpu6500TestConnection() {
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af04      	add	r7, sp, #16
	uint8_t mpuID;
//	walk = 1;//JH
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, WHO_AM_I_REG, 1, &mpuID, 1, 100);
 8008536:	2364      	movs	r3, #100	@ 0x64
 8008538:	9302      	str	r3, [sp, #8]
 800853a:	2301      	movs	r3, #1
 800853c:	9301      	str	r3, [sp, #4]
 800853e:	1dfb      	adds	r3, r7, #7
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	2301      	movs	r3, #1
 8008544:	2275      	movs	r2, #117	@ 0x75
 8008546:	21d0      	movs	r1, #208	@ 0xd0
 8008548:	4806      	ldr	r0, [pc, #24]	@ (8008564 <mpu6500TestConnection+0x34>)
 800854a:	f7f9 fe27 	bl	800219c <HAL_I2C_Mem_Read>
//	walk =1;//NJH
	if (mpuID != 0x75)
 800854e:	79fb      	ldrb	r3, [r7, #7]
 8008550:	2b75      	cmp	r3, #117	@ 0x75
 8008552:	d001      	beq.n	8008558 <mpu6500TestConnection+0x28>
		return false;
 8008554:	2300      	movs	r3, #0
 8008556:	e000      	b.n	800855a <mpu6500TestConnection+0x2a>
//	walk = 1;//NJH
	return true;
 8008558:	2301      	movs	r3, #1
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20007ae4 	.word	0x20007ae4

08008568 <mpu6500SelfTest>:
		//                string, (double)low, (double)high, (double)value);
		return false;
	}
	return true;
}
bool mpu6500SelfTest() {
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
	return true;
 800856c:	2301      	movs	r3, #1
}
 800856e:	4618      	mov	r0, r3
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <mpu6500Init>:
void mpu6500Init(void) {
 8008578:	b580      	push	{r7, lr}
 800857a:	b086      	sub	sp, #24
 800857c:	af04      	add	r7, sp, #16
	uint8_t data;
	data = 0x00;
 800857e:	2300      	movs	r3, #0
 8008580:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, PWR_MGMT_1_REG, 1, &data, 1,
 8008582:	2364      	movs	r3, #100	@ 0x64
 8008584:	9302      	str	r3, [sp, #8]
 8008586:	2301      	movs	r3, #1
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	1dfb      	adds	r3, r7, #7
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	2301      	movs	r3, #1
 8008590:	226b      	movs	r2, #107	@ 0x6b
 8008592:	21d0      	movs	r1, #208	@ 0xd0
 8008594:	482d      	ldr	r0, [pc, #180]	@ (800864c <mpu6500Init+0xd4>)
 8008596:	f7f9 fd07 	bl	8001fa8 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(500);
 800859a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800859e:	f7fd f94b 	bl	8005838 <vTaskDelay>
	// Set ACCEL to +-16g, GYRO to +-2000dps
	data = 0x18;
 80085a2:	2318      	movs	r3, #24
 80085a4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, GYRO_CONFIG_REG, 1, &data, 1,
 80085a6:	2364      	movs	r3, #100	@ 0x64
 80085a8:	9302      	str	r3, [sp, #8]
 80085aa:	2301      	movs	r3, #1
 80085ac:	9301      	str	r3, [sp, #4]
 80085ae:	1dfb      	adds	r3, r7, #7
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	2301      	movs	r3, #1
 80085b4:	221b      	movs	r2, #27
 80085b6:	21d0      	movs	r1, #208	@ 0xd0
 80085b8:	4824      	ldr	r0, [pc, #144]	@ (800864c <mpu6500Init+0xd4>)
 80085ba:	f7f9 fcf5 	bl	8001fa8 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 80085be:	200a      	movs	r0, #10
 80085c0:	f7fd f93a 	bl	8005838 <vTaskDelay>
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_REG, 1, &data, 1,
 80085c4:	2364      	movs	r3, #100	@ 0x64
 80085c6:	9302      	str	r3, [sp, #8]
 80085c8:	2301      	movs	r3, #1
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	1dfb      	adds	r3, r7, #7
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	2301      	movs	r3, #1
 80085d2:	221c      	movs	r2, #28
 80085d4:	21d0      	movs	r1, #208	@ 0xd0
 80085d6:	481d      	ldr	r0, [pc, #116]	@ (800864c <mpu6500Init+0xd4>)
 80085d8:	f7f9 fce6 	bl	8001fa8 <HAL_I2C_Mem_Write>
			100);
	vTaskDelay(10);
 80085dc:	200a      	movs	r0, #10
 80085de:	f7fd f92b 	bl	8005838 <vTaskDelay>
	// Set sampling rate to 1khz
	data = 0x07;
 80085e2:	2307      	movs	r3, #7
 80085e4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, SMPLRT_DIV_REG, 1, &data, 1,
 80085e6:	2364      	movs	r3, #100	@ 0x64
 80085e8:	9302      	str	r3, [sp, #8]
 80085ea:	2301      	movs	r3, #1
 80085ec:	9301      	str	r3, [sp, #4]
 80085ee:	1dfb      	adds	r3, r7, #7
 80085f0:	9300      	str	r3, [sp, #0]
 80085f2:	2301      	movs	r3, #1
 80085f4:	2219      	movs	r2, #25
 80085f6:	21d0      	movs	r1, #208	@ 0xd0
 80085f8:	4814      	ldr	r0, [pc, #80]	@ (800864c <mpu6500Init+0xd4>)
 80085fa:	f7f9 fcd5 	bl	8001fa8 <HAL_I2C_Mem_Write>
			100);

	vTaskDelay(10);
 80085fe:	200a      	movs	r0, #10
 8008600:	f7fd f91a 	bl	8005838 <vTaskDelay>
	// Set GYRO to 41hz bandwidth
	data = 0x03;
 8008604:	2303      	movs	r3, #3
 8008606:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, CONFIG_REG, 1, &data, 1, 100);
 8008608:	2364      	movs	r3, #100	@ 0x64
 800860a:	9302      	str	r3, [sp, #8]
 800860c:	2301      	movs	r3, #1
 800860e:	9301      	str	r3, [sp, #4]
 8008610:	1dfb      	adds	r3, r7, #7
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	2301      	movs	r3, #1
 8008616:	221a      	movs	r2, #26
 8008618:	21d0      	movs	r1, #208	@ 0xd0
 800861a:	480c      	ldr	r0, [pc, #48]	@ (800864c <mpu6500Init+0xd4>)
 800861c:	f7f9 fcc4 	bl	8001fa8 <HAL_I2C_Mem_Write>

	// Enable data ready interrupt to propagate to interrupt pin
	vTaskDelay(10);
 8008620:	200a      	movs	r0, #10
 8008622:	f7fd f909 	bl	8005838 <vTaskDelay>
	data = 0x01;
 8008626:	2301      	movs	r3, #1
 8008628:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, INT_ENABLE_REG, 1, &data, 1,
 800862a:	2364      	movs	r3, #100	@ 0x64
 800862c:	9302      	str	r3, [sp, #8]
 800862e:	2301      	movs	r3, #1
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	1dfb      	adds	r3, r7, #7
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2301      	movs	r3, #1
 8008638:	2238      	movs	r2, #56	@ 0x38
 800863a:	21d0      	movs	r1, #208	@ 0xd0
 800863c:	4803      	ldr	r0, [pc, #12]	@ (800864c <mpu6500Init+0xd4>)
 800863e:	f7f9 fcb3 	bl	8001fa8 <HAL_I2C_Mem_Write>
			100);
}
 8008642:	bf00      	nop
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20007ae4 	.word	0x20007ae4

08008650 <mpu6500SetAccelDLPF>:

void mpu6500SetAccelDLPF(uint8_t range) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af04      	add	r7, sp, #16
 8008656:	4603      	mov	r3, r0
 8008658:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, MPU6500_ADDRESS, ACCEL_CONFIG_2_REG, 1, &range, 1,
 800865a:	2364      	movs	r3, #100	@ 0x64
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	2301      	movs	r3, #1
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	1dfb      	adds	r3, r7, #7
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	2301      	movs	r3, #1
 8008668:	221d      	movs	r2, #29
 800866a:	21d0      	movs	r1, #208	@ 0xd0
 800866c:	4803      	ldr	r0, [pc, #12]	@ (800867c <mpu6500SetAccelDLPF+0x2c>)
 800866e:	f7f9 fc9b 	bl	8001fa8 <HAL_I2C_Mem_Write>
			100);
}
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20007ae4 	.word	0x20007ae4

08008680 <mpu6500GetAccelGyroData>:
void mpu6500GetAccelGyroData(mpu6500_t *mpu6500TypeDef) {
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af04      	add	r7, sp, #16
 8008686:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
			mpu6500TypeDef->buf, sizeof(mpu6500_t), 100);
 8008688:	687b      	ldr	r3, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1,
 800868a:	2264      	movs	r2, #100	@ 0x64
 800868c:	9202      	str	r2, [sp, #8]
 800868e:	220e      	movs	r2, #14
 8008690:	9201      	str	r2, [sp, #4]
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	2301      	movs	r3, #1
 8008696:	223b      	movs	r2, #59	@ 0x3b
 8008698:	21d0      	movs	r1, #208	@ 0xd0
 800869a:	4803      	ldr	r0, [pc, #12]	@ (80086a8 <mpu6500GetAccelGyroData+0x28>)
 800869c:	f7f9 fd7e 	bl	800219c <HAL_I2C_Mem_Read>
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20007ae4 	.word	0x20007ae4

080086ac <mpu6500GetMotion6>:
void mpu6500GetMotion6(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx,
		int16_t *gy, int16_t *gz) {
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	@ 0x30
 80086b0:	af04      	add	r7, sp, #16
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
	uint8_t buf[14];
	HAL_I2C_Mem_Read(&hi2c1, MPU6500_ADDRESS, ACCEL_XOUT_H_REG, 1, buf, 14,
 80086ba:	2364      	movs	r3, #100	@ 0x64
 80086bc:	9302      	str	r3, [sp, #8]
 80086be:	230e      	movs	r3, #14
 80086c0:	9301      	str	r3, [sp, #4]
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2301      	movs	r3, #1
 80086ca:	223b      	movs	r2, #59	@ 0x3b
 80086cc:	21d0      	movs	r1, #208	@ 0xd0
 80086ce:	481e      	ldr	r0, [pc, #120]	@ (8008748 <mpu6500GetMotion6+0x9c>)
 80086d0:	f7f9 fd64 	bl	800219c <HAL_I2C_Mem_Read>
			100);
	*ax = (((int16_t) buf[0]) << 8) | buf[1];
 80086d4:	7c3b      	ldrb	r3, [r7, #16]
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	b21a      	sxth	r2, r3
 80086da:	7c7b      	ldrb	r3, [r7, #17]
 80086dc:	b21b      	sxth	r3, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	b21a      	sxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	801a      	strh	r2, [r3, #0]
	*ay = (((int16_t) buf[2]) << 8) | buf[3];
 80086e6:	7cbb      	ldrb	r3, [r7, #18]
 80086e8:	021b      	lsls	r3, r3, #8
 80086ea:	b21a      	sxth	r2, r3
 80086ec:	7cfb      	ldrb	r3, [r7, #19]
 80086ee:	b21b      	sxth	r3, r3
 80086f0:	4313      	orrs	r3, r2
 80086f2:	b21a      	sxth	r2, r3
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	801a      	strh	r2, [r3, #0]
	*az = (((int16_t) buf[4]) << 8) | buf[5];
 80086f8:	7d3b      	ldrb	r3, [r7, #20]
 80086fa:	021b      	lsls	r3, r3, #8
 80086fc:	b21a      	sxth	r2, r3
 80086fe:	7d7b      	ldrb	r3, [r7, #21]
 8008700:	b21b      	sxth	r3, r3
 8008702:	4313      	orrs	r3, r2
 8008704:	b21a      	sxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	801a      	strh	r2, [r3, #0]
	*gx = (((int16_t) buf[8]) << 8) | buf[9];
 800870a:	7e3b      	ldrb	r3, [r7, #24]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	b21a      	sxth	r2, r3
 8008710:	7e7b      	ldrb	r3, [r7, #25]
 8008712:	b21b      	sxth	r3, r3
 8008714:	4313      	orrs	r3, r2
 8008716:	b21a      	sxth	r2, r3
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	801a      	strh	r2, [r3, #0]
	*gy = (((int16_t) buf[10]) << 8) | buf[11];
 800871c:	7ebb      	ldrb	r3, [r7, #26]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	b21a      	sxth	r2, r3
 8008722:	7efb      	ldrb	r3, [r7, #27]
 8008724:	b21b      	sxth	r3, r3
 8008726:	4313      	orrs	r3, r2
 8008728:	b21a      	sxth	r2, r3
 800872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872c:	801a      	strh	r2, [r3, #0]
	*gz = (((int16_t) buf[12]) << 8) | buf[13];
 800872e:	7f3b      	ldrb	r3, [r7, #28]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	b21a      	sxth	r2, r3
 8008734:	7f7b      	ldrb	r3, [r7, #29]
 8008736:	b21b      	sxth	r3, r3
 8008738:	4313      	orrs	r3, r2
 800873a:	b21a      	sxth	r2, r3
 800873c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873e:	801a      	strh	r2, [r3, #0]
}
 8008740:	bf00      	nop
 8008742:	3720      	adds	r7, #32
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20007ae4 	.word	0x20007ae4

0800874c <nvicInit>:
#include "stdint.h"

#define DONT_DISCARD __attribute__((used))

void nvicInit(void)
{
 800874c:	b480      	push	{r7}
 800874e:	af00      	add	r7, sp, #0
//  NVIC_PriorityGroupConfig((uint32_t)0x300);
}
 8008750:	bf00      	nop
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <SysTick_Handler>:
 * @brief  This function handles SysTick Handler.
 */
extern void tickFreeRTOS(void);

void DONT_DISCARD SysTick_Handler(void)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	af00      	add	r7, sp, #0
    tickFreeRTOS();
 800875e:	f7fe fc23 	bl	8006fa8 <tickFreeRTOS>
}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}

08008766 <NMI_Handler>:

/**
  * @brief  This function handles NMI exception.
  */
void DONT_DISCARD NMI_Handler(void)
{
 8008766:	b480      	push	{r7}
 8008768:	af00      	add	r7, sp, #0
}
 800876a:	bf00      	nop
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HardFault_Handler>:

/**
 * @brief  This function handles Hard Fault exception.
 */
void DONT_DISCARD HardFault_Handler(void)
{
 8008774:	b480      	push	{r7}
 8008776:	af00      	add	r7, sp, #0
  //To test this application, you can use this snippet anywhere:
  // //Let's crash the MCU!
  // asm (" MOVS r0, #1 \n"
  // " LDM r0,{r1-r2} \n"
  // " BX LR; \n");
  asm( "TST LR, #4 \n"
 8008778:	f01e 0f04 	tst.w	lr, #4
 800877c:	bf0c      	ite	eq
 800877e:	f3ef 8008 	mrseq	r0, MSP
 8008782:	f3ef 8009 	mrsne	r0, PSP
 8008786:	f000 b805 	b.w	8008794 <printHardFault>
  "ITE EQ \n"
  "MRSEQ R0, MSP \n"
  "MRSNE R0, PSP \n"
  "B printHardFault");
}
 800878a:	bf00      	nop
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <printHardFault>:

void DONT_DISCARD printHardFault(uint32_t* hardfaultArgs)
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
//    stacked_r3,
//    stacked_r12,
//    stacked_lr,
//    stacked_pc,
//    stacked_psr);
  while (1)
 800879c:	bf00      	nop
 800879e:	e7fd      	b.n	800879c <printHardFault+0x8>

080087a0 <BusFault_Handler>:

/**
 * @brief  This function handles Bus Fault exception.
 */
void DONT_DISCARD BusFault_Handler(void)
{
 80087a0:	b480      	push	{r7}
 80087a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("BusFault");
  while (1)
 80087a4:	bf00      	nop
 80087a6:	e7fd      	b.n	80087a4 <BusFault_Handler+0x4>

080087a8 <UsageFault_Handler>:

/**
 * @brief  This function handles Usage Fault exception.
 */
void DONT_DISCARD UsageFault_Handler(void)
{
 80087a8:	b480      	push	{r7}
 80087aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
//  motorsStop();
//  ledShowFaultPattern();
//
//  storeAssertTextData("UsageFault");
  while (1)
 80087ac:	bf00      	nop
 80087ae:	e7fd      	b.n	80087ac <UsageFault_Handler+0x4>

080087b0 <DebugMon_Handler>:

/**
 * @brief  This function handles Debug Monitor exception.
 */
void DONT_DISCARD DebugMon_Handler(void)
{
 80087b0:	b480      	push	{r7}
 80087b2:	af00      	add	r7, sp, #0
}
 80087b4:	bf00      	nop
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
	...

080087c0 <spi1_init>:

SPI_HandleTypeDef hspi1;


void spi1_init(void)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80087c4:	4b17      	ldr	r3, [pc, #92]	@ (8008824 <spi1_init+0x64>)
 80087c6:	4a18      	ldr	r2, [pc, #96]	@ (8008828 <spi1_init+0x68>)
 80087c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80087ca:	4b16      	ldr	r3, [pc, #88]	@ (8008824 <spi1_init+0x64>)
 80087cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80087d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80087d2:	4b14      	ldr	r3, [pc, #80]	@ (8008824 <spi1_init+0x64>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80087d8:	4b12      	ldr	r3, [pc, #72]	@ (8008824 <spi1_init+0x64>)
 80087da:	2200      	movs	r2, #0
 80087dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80087de:	4b11      	ldr	r3, [pc, #68]	@ (8008824 <spi1_init+0x64>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80087e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008824 <spi1_init+0x64>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80087ea:	4b0e      	ldr	r3, [pc, #56]	@ (8008824 <spi1_init+0x64>)
 80087ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80087f2:	4b0c      	ldr	r3, [pc, #48]	@ (8008824 <spi1_init+0x64>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80087f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008824 <spi1_init+0x64>)
 80087fa:	2200      	movs	r2, #0
 80087fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80087fe:	4b09      	ldr	r3, [pc, #36]	@ (8008824 <spi1_init+0x64>)
 8008800:	2200      	movs	r2, #0
 8008802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008804:	4b07      	ldr	r3, [pc, #28]	@ (8008824 <spi1_init+0x64>)
 8008806:	2200      	movs	r2, #0
 8008808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800880a:	4b06      	ldr	r3, [pc, #24]	@ (8008824 <spi1_init+0x64>)
 800880c:	220a      	movs	r2, #10
 800880e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008810:	4804      	ldr	r0, [pc, #16]	@ (8008824 <spi1_init+0x64>)
 8008812:	f7fa ff31 	bl	8003678 <HAL_SPI_Init>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <spi1_init+0x60>
  {
    Error_Handler();
 800881c:	f7fe fea8 	bl	8007570 <Error_Handler>
  }

}
 8008820:	bf00      	nop
 8008822:	bd80      	pop	{r7, pc}
 8008824:	20007d00 	.word	0x20007d00
 8008828:	40013000 	.word	0x40013000

0800882c <SPI2_Init>:


void SPI2_Init(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
	hspi2.Instance = SPI2;
 8008830:	4b17      	ldr	r3, [pc, #92]	@ (8008890 <SPI2_Init+0x64>)
 8008832:	4a18      	ldr	r2, [pc, #96]	@ (8008894 <SPI2_Init+0x68>)
 8008834:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8008836:	4b16      	ldr	r3, [pc, #88]	@ (8008890 <SPI2_Init+0x64>)
 8008838:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800883c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800883e:	4b14      	ldr	r3, [pc, #80]	@ (8008890 <SPI2_Init+0x64>)
 8008840:	2200      	movs	r2, #0
 8008842:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008844:	4b12      	ldr	r3, [pc, #72]	@ (8008890 <SPI2_Init+0x64>)
 8008846:	2200      	movs	r2, #0
 8008848:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800884a:	4b11      	ldr	r3, [pc, #68]	@ (8008890 <SPI2_Init+0x64>)
 800884c:	2200      	movs	r2, #0
 800884e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008850:	4b0f      	ldr	r3, [pc, #60]	@ (8008890 <SPI2_Init+0x64>)
 8008852:	2200      	movs	r2, #0
 8008854:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8008856:	4b0e      	ldr	r3, [pc, #56]	@ (8008890 <SPI2_Init+0x64>)
 8008858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800885c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800885e:	4b0c      	ldr	r3, [pc, #48]	@ (8008890 <SPI2_Init+0x64>)
 8008860:	2218      	movs	r2, #24
 8008862:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008864:	4b0a      	ldr	r3, [pc, #40]	@ (8008890 <SPI2_Init+0x64>)
 8008866:	2200      	movs	r2, #0
 8008868:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800886a:	4b09      	ldr	r3, [pc, #36]	@ (8008890 <SPI2_Init+0x64>)
 800886c:	2200      	movs	r2, #0
 800886e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008870:	4b07      	ldr	r3, [pc, #28]	@ (8008890 <SPI2_Init+0x64>)
 8008872:	2200      	movs	r2, #0
 8008874:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi2.Init.CRCPolynomial = 10;
 8008876:	4b06      	ldr	r3, [pc, #24]	@ (8008890 <SPI2_Init+0x64>)
 8008878:	220a      	movs	r2, #10
 800887a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800887c:	4804      	ldr	r0, [pc, #16]	@ (8008890 <SPI2_Init+0x64>)
 800887e:	f7fa fefb 	bl	8003678 <HAL_SPI_Init>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <SPI2_Init+0x60>
		Error_Handler();
 8008888:	f7fe fe72 	bl	8007570 <Error_Handler>
	}
}
 800888c:	bf00      	nop
 800888e:	bd80      	pop	{r7, pc}
 8008890:	20007b90 	.word	0x20007b90
 8008894:	40003800 	.word	0x40003800

08008898 <SPI3_Init>:
void SPI3_Init(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0

	hspi3.Instance = SPI3;
 800889c:	4b17      	ldr	r3, [pc, #92]	@ (80088fc <SPI3_Init+0x64>)
 800889e:	4a18      	ldr	r2, [pc, #96]	@ (8008900 <SPI3_Init+0x68>)
 80088a0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80088a2:	4b16      	ldr	r3, [pc, #88]	@ (80088fc <SPI3_Init+0x64>)
 80088a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80088a8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80088aa:	4b14      	ldr	r3, [pc, #80]	@ (80088fc <SPI3_Init+0x64>)
 80088ac:	2200      	movs	r2, #0
 80088ae:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80088b0:	4b12      	ldr	r3, [pc, #72]	@ (80088fc <SPI3_Init+0x64>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80088b6:	4b11      	ldr	r3, [pc, #68]	@ (80088fc <SPI3_Init+0x64>)
 80088b8:	2200      	movs	r2, #0
 80088ba:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80088bc:	4b0f      	ldr	r3, [pc, #60]	@ (80088fc <SPI3_Init+0x64>)
 80088be:	2200      	movs	r2, #0
 80088c0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80088c2:	4b0e      	ldr	r3, [pc, #56]	@ (80088fc <SPI3_Init+0x64>)
 80088c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80088c8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80088ca:	4b0c      	ldr	r3, [pc, #48]	@ (80088fc <SPI3_Init+0x64>)
 80088cc:	2220      	movs	r2, #32
 80088ce:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80088d0:	4b0a      	ldr	r3, [pc, #40]	@ (80088fc <SPI3_Init+0x64>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80088d6:	4b09      	ldr	r3, [pc, #36]	@ (80088fc <SPI3_Init+0x64>)
 80088d8:	2200      	movs	r2, #0
 80088da:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80088dc:	4b07      	ldr	r3, [pc, #28]	@ (80088fc <SPI3_Init+0x64>)
 80088de:	2200      	movs	r2, #0
 80088e0:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 10;
 80088e2:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <SPI3_Init+0x64>)
 80088e4:	220a      	movs	r2, #10
 80088e6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80088e8:	4804      	ldr	r0, [pc, #16]	@ (80088fc <SPI3_Init+0x64>)
 80088ea:	f7fa fec5 	bl	8003678 <HAL_SPI_Init>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SPI3_Init+0x60>
		Error_Handler();
 80088f4:	f7fe fe3c 	bl	8007570 <Error_Handler>
	}


}
 80088f8:	bf00      	nop
 80088fa:	bd80      	pop	{r7, pc}
 80088fc:	20007be8 	.word	0x20007be8
 8008900:	40003c00 	.word	0x40003c00

08008904 <HAL_SPI_MspInit>:
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b08e      	sub	sp, #56	@ 0x38
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800890c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008910:	2200      	movs	r2, #0
 8008912:	601a      	str	r2, [r3, #0]
 8008914:	605a      	str	r2, [r3, #4]
 8008916:	609a      	str	r2, [r3, #8]
 8008918:	60da      	str	r2, [r3, #12]
 800891a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a84      	ldr	r2, [pc, #528]	@ (8008b34 <HAL_SPI_MspInit+0x230>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d12b      	bne.n	800897e <HAL_SPI_MspInit+0x7a>
  {
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008926:	2300      	movs	r3, #0
 8008928:	623b      	str	r3, [r7, #32]
 800892a:	4b83      	ldr	r3, [pc, #524]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 800892c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892e:	4a82      	ldr	r2, [pc, #520]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008930:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008934:	6453      	str	r3, [r2, #68]	@ 0x44
 8008936:	4b80      	ldr	r3, [pc, #512]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800893a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800893e:	623b      	str	r3, [r7, #32]
 8008940:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
 8008946:	4b7c      	ldr	r3, [pc, #496]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800894a:	4a7b      	ldr	r2, [pc, #492]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 800894c:	f043 0301 	orr.w	r3, r3, #1
 8008950:	6313      	str	r3, [r2, #48]	@ 0x30
 8008952:	4b79      	ldr	r3, [pc, #484]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800895e:	23e0      	movs	r3, #224	@ 0xe0
 8008960:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008962:	2302      	movs	r3, #2
 8008964:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008966:	2300      	movs	r3, #0
 8008968:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800896a:	2303      	movs	r3, #3
 800896c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800896e:	2305      	movs	r3, #5
 8008970:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008972:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008976:	4619      	mov	r1, r3
 8008978:	4870      	ldr	r0, [pc, #448]	@ (8008b3c <HAL_SPI_MspInit+0x238>)
 800897a:	f7f9 f801 	bl	8001980 <HAL_GPIO_Init>
  }

  if(spiHandle->Instance==SPI2)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a6f      	ldr	r2, [pc, #444]	@ (8008b40 <HAL_SPI_MspInit+0x23c>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d13b      	bne.n	8008a00 <HAL_SPI_MspInit+0xfc>
  {

    __HAL_RCC_SPI2_CLK_ENABLE();
 8008988:	2300      	movs	r3, #0
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 800898e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008990:	4a69      	ldr	r2, [pc, #420]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008996:	6413      	str	r3, [r2, #64]	@ 0x40
 8008998:	4b67      	ldr	r3, [pc, #412]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 800899a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089a0:	61bb      	str	r3, [r7, #24]
 80089a2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089a4:	2300      	movs	r3, #0
 80089a6:	617b      	str	r3, [r7, #20]
 80089a8:	4b63      	ldr	r3, [pc, #396]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 80089aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ac:	4a62      	ldr	r2, [pc, #392]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 80089ae:	f043 0302 	orr.w	r3, r3, #2
 80089b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80089b4:	4b60      	ldr	r3, [pc, #384]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 80089b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b8:	f003 0302 	and.w	r3, r3, #2
 80089bc:	617b      	str	r3, [r7, #20]
 80089be:	697b      	ldr	r3, [r7, #20]

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80089c0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80089c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089c6:	2302      	movs	r3, #2
 80089c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ca:	2300      	movs	r3, #0
 80089cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089ce:	2303      	movs	r3, #3
 80089d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80089d2:	2305      	movs	r3, #5
 80089d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089da:	4619      	mov	r1, r3
 80089dc:	4859      	ldr	r0, [pc, #356]	@ (8008b44 <HAL_SPI_MspInit+0x240>)
 80089de:	f7f8 ffcf 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80089e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089e8:	2301      	movs	r3, #1
 80089ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ec:	2300      	movs	r3, #0
 80089ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80089f0:	2301      	movs	r3, #1
 80089f2:	633b      	str	r3, [r7, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089f8:	4619      	mov	r1, r3
 80089fa:	4852      	ldr	r0, [pc, #328]	@ (8008b44 <HAL_SPI_MspInit+0x240>)
 80089fc:	f7f8 ffc0 	bl	8001980 <HAL_GPIO_Init>

  }
  if(spiHandle->Instance==SPI3)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a50      	ldr	r2, [pc, #320]	@ (8008b48 <HAL_SPI_MspInit+0x244>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	f040 8090 	bne.w	8008b2c <HAL_SPI_MspInit+0x228>
  {
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	4b49      	ldr	r3, [pc, #292]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a14:	4a48      	ldr	r2, [pc, #288]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008a16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8008a1c:	4b46      	ldr	r3, [pc, #280]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a24:	613b      	str	r3, [r7, #16]
 8008a26:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60fb      	str	r3, [r7, #12]
 8008a2c:	4b42      	ldr	r3, [pc, #264]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a30:	4a41      	ldr	r2, [pc, #260]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008a32:	f043 0302 	orr.w	r3, r3, #2
 8008a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8008a38:	4b3f      	ldr	r3, [pc, #252]	@ (8008b38 <HAL_SPI_MspInit+0x234>)
 8008a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a3c:	f003 0302 	and.w	r3, r3, #2
 8008a40:	60fb      	str	r3, [r7, #12]
 8008a42:	68fb      	ldr	r3, [r7, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8008a44:	2338      	movs	r3, #56	@ 0x38
 8008a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a50:	2303      	movs	r3, #3
 8008a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008a54:	2306      	movs	r3, #6
 8008a56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4839      	ldr	r0, [pc, #228]	@ (8008b44 <HAL_SPI_MspInit+0x240>)
 8008a60:	f7f8 ff8e 	bl	8001980 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8008a64:	4b39      	ldr	r3, [pc, #228]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a66:	4a3a      	ldr	r2, [pc, #232]	@ (8008b50 <HAL_SPI_MspInit+0x24c>)
 8008a68:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8008a6a:	4b38      	ldr	r3, [pc, #224]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a70:	4b36      	ldr	r3, [pc, #216]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a72:	2200      	movs	r2, #0
 8008a74:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a76:	4b35      	ldr	r3, [pc, #212]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008a7c:	4b33      	ldr	r3, [pc, #204]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008a82:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008a84:	4b31      	ldr	r3, [pc, #196]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008a8a:	4b30      	ldr	r3, [pc, #192]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8008a90:	4b2e      	ldr	r3, [pc, #184]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8008a96:	4b2d      	ldr	r3, [pc, #180]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008a98:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008a9c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8008aa4:	4829      	ldr	r0, [pc, #164]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008aa6:	f7f8 fc5f 	bl	8001368 <HAL_DMA_Init>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d001      	beq.n	8008ab4 <HAL_SPI_MspInit+0x1b0>
    {
      Error_Handler();
 8008ab0:	f7fe fd5e 	bl	8007570 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a25      	ldr	r2, [pc, #148]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8008aba:	4a24      	ldr	r2, [pc, #144]	@ (8008b4c <HAL_SPI_MspInit+0x248>)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6393      	str	r3, [r2, #56]	@ 0x38

    hdma_spi3_tx.Instance = DMA1_Stream5;
 8008ac0:	4b24      	ldr	r3, [pc, #144]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ac2:	4a25      	ldr	r2, [pc, #148]	@ (8008b58 <HAL_SPI_MspInit+0x254>)
 8008ac4:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8008ac6:	4b23      	ldr	r3, [pc, #140]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008acc:	4b21      	ldr	r3, [pc, #132]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ace:	2240      	movs	r2, #64	@ 0x40
 8008ad0:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ad2:	4b20      	ldr	r3, [pc, #128]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ad8:	4b1e      	ldr	r3, [pc, #120]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ada:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008ade:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8008aec:	4b19      	ldr	r3, [pc, #100]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8008af2:	4b18      	ldr	r3, [pc, #96]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008af4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8008af8:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008afa:	4b16      	ldr	r3, [pc, #88]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8008b00:	4814      	ldr	r0, [pc, #80]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008b02:	f7f8 fc31 	bl	8001368 <HAL_DMA_Init>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <HAL_SPI_MspInit+0x20c>
    {
      Error_Handler();
 8008b0c:	f7fe fd30 	bl	8007570 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a10      	ldr	r2, [pc, #64]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008b14:	649a      	str	r2, [r3, #72]	@ 0x48
 8008b16:	4a0f      	ldr	r2, [pc, #60]	@ (8008b54 <HAL_SPI_MspInit+0x250>)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6393      	str	r3, [r2, #56]	@ 0x38

    HAL_NVIC_SetPriority(SPI3_IRQn, 7, 0);
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2107      	movs	r1, #7
 8008b20:	2033      	movs	r0, #51	@ 0x33
 8008b22:	f7f8 fbeb 	bl	80012fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8008b26:	2033      	movs	r0, #51	@ 0x33
 8008b28:	f7f8 fc04 	bl	8001334 <HAL_NVIC_EnableIRQ>

  }
}
 8008b2c:	bf00      	nop
 8008b2e:	3738      	adds	r7, #56	@ 0x38
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	40013000 	.word	0x40013000
 8008b38:	40023800 	.word	0x40023800
 8008b3c:	40020000 	.word	0x40020000
 8008b40:	40003800 	.word	0x40003800
 8008b44:	40020400 	.word	0x40020400
 8008b48:	40003c00 	.word	0x40003c00
 8008b4c:	20007c40 	.word	0x20007c40
 8008b50:	40026010 	.word	0x40026010
 8008b54:	20007ca0 	.word	0x20007ca0
 8008b58:	40026088 	.word	0x40026088

08008b5c <vl53l1xInit>:
// Set the start address 1 step after the VL53L0 dynamic addresses
static int nextI2CAddress = VL53L1X_DEFAULT_ADDRESS+1;


bool vl53l1xInit(VL53L1_Dev_t *pdev, I2C_HandleTypeDef *I2Cx)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]

  pdev->I2Cx = I2Cx;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	683a      	ldr	r2, [r7, #0]
 8008b6e:	f8c3 239c 	str.w	r2, [r3, #924]	@ 0x39c
  pdev->devAddr = VL53L1X_DEFAULT_ADDRESS;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2229      	movs	r2, #41	@ 0x29
 8008b76:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398

  /* Move initialized sensor to a new I2C address */
  int newAddress;

  taskENTER_CRITICAL();
 8008b7a:	f7fe f987 	bl	8006e8c <vPortEnterCritical>
  newAddress = nextI2CAddress++;
 8008b7e:	4b13      	ldr	r3, [pc, #76]	@ (8008bcc <vl53l1xInit+0x70>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	4911      	ldr	r1, [pc, #68]	@ (8008bcc <vl53l1xInit+0x70>)
 8008b86:	600a      	str	r2, [r1, #0]
 8008b88:	60bb      	str	r3, [r7, #8]
  taskEXIT_CRITICAL();
 8008b8a:	f7fe f9ad 	bl	8006ee8 <vPortExitCritical>

  vl53l1xSetI2CAddress(pdev, newAddress);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	4619      	mov	r1, r3
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 f81b 	bl	8008bd0 <vl53l1xSetI2CAddress>

  status = VL53L1_DataInit(pdev);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f008 fb03 	bl	80111a6 <VL53L1_DataInit>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]

  if (status == VL53L1_ERROR_NONE)
 8008ba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <vl53l1xInit+0x5a>
  {
    status = VL53L1_StaticInit(pdev);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f008 fb69 	bl	8011284 <VL53L1_StaticInit>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  }

  return status == VL53L1_ERROR_NONE;
 8008bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bf0c      	ite	eq
 8008bbe:	2301      	moveq	r3, #1
 8008bc0:	2300      	movne	r3, #0
 8008bc2:	b2db      	uxtb	r3, r3
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	20000010 	.word	0x20000010

08008bd0 <vl53l1xSetI2CAddress>:
 * Any subsequent communication will be on the new address
 * The address passed is the 7bit I2C address from LSB (ie. without the
 * read/write bit)
 */
VL53L1_Error vl53l1xSetI2CAddress(VL53L1_Dev_t* pdev, uint8_t address)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b084      	sub	sp, #16
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  VL53L1_Error status = VL53L1_ERROR_NONE;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	73fb      	strb	r3, [r7, #15]

  status = VL53L1_SetDeviceAddress(pdev, address);
 8008be0:	78fb      	ldrb	r3, [r7, #3]
 8008be2:	4619      	mov	r1, r3
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f008 fac8 	bl	801117a <VL53L1_SetDeviceAddress>
 8008bea:	4603      	mov	r3, r0
 8008bec:	73fb      	strb	r3, [r7, #15]
  pdev->devAddr = address;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	78fa      	ldrb	r2, [r7, #3]
 8008bf2:	f883 2398 	strb.w	r2, [r3, #920]	@ 0x398
  return  status;
 8008bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}

08008c02 <VL53L1_WriteMulti>:
VL53L1_Error VL53L1_WriteMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 8008c02:	b590      	push	{r4, r7, lr}
 8008c04:	b089      	sub	sp, #36	@ 0x24
 8008c06:	af02      	add	r7, sp, #8
 8008c08:	60f8      	str	r0, [r7, #12]
 8008c0a:	607a      	str	r2, [r7, #4]
 8008c0c:	603b      	str	r3, [r7, #0]
 8008c0e:	460b      	mov	r3, r1
 8008c10:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	b29c      	uxth	r4, r3
 8008c26:	897a      	ldrh	r2, [r7, #10]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	4623      	mov	r3, r4
 8008c2e:	f7ff fbf9 	bl	8008424 <i2cdevWriteReg16>
 8008c32:	4603      	mov	r3, r0
 8008c34:	f083 0301 	eor.w	r3, r3, #1
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d001      	beq.n	8008c42 <VL53L1_WriteMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c3e:	23f3      	movs	r3, #243	@ 0xf3
 8008c40:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 8008c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	371c      	adds	r7, #28
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd90      	pop	{r4, r7, pc}

08008c4e <VL53L1_ReadMulti>:
VL53L1_Error VL53L1_ReadMulti(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata,
	uint32_t      count)
{
 8008c4e:	b590      	push	{r4, r7, lr}
 8008c50:	b089      	sub	sp, #36	@ 0x24
 8008c52:	af02      	add	r7, sp, #8
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	607a      	str	r2, [r7, #4]
 8008c58:	603b      	str	r3, [r7, #0]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	75fb      	strb	r3, [r7, #23]

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, count, pdata))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	b29c      	uxth	r4, r3
 8008c72:	897a      	ldrh	r2, [r7, #10]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	9300      	str	r3, [sp, #0]
 8008c78:	4623      	mov	r3, r4
 8008c7a:	f7ff fba9 	bl	80083d0 <i2cdevReadReg16>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	f083 0301 	eor.w	r3, r3, #1
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <VL53L1_ReadMulti+0x40>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008c8a:	23f3      	movs	r3, #243	@ 0xf3
 8008c8c:	75fb      	strb	r3, [r7, #23]
  }

	return status;
 8008c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	371c      	adds	r7, #28
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd90      	pop	{r4, r7, pc}

08008c9a <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t       data)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b086      	sub	sp, #24
 8008c9e:	af02      	add	r7, sp, #8
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	807b      	strh	r3, [r7, #2]
 8008ca6:	4613      	mov	r3, r2
 8008ca8:	707b      	strb	r3, [r7, #1]
	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]

	if (!i2cdevWriteReg16(pdev->I2Cx, pdev->devAddr, index, 1, &data))
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 8008cba:	887a      	ldrh	r2, [r7, #2]
 8008cbc:	1c7b      	adds	r3, r7, #1
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f7ff fbaf 	bl	8008424 <i2cdevWriteReg16>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	f083 0301 	eor.w	r3, r3, #1
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <VL53L1_WrByte+0x3c>
	{
	  status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008cd2:	23f3      	movs	r3, #243	@ 0xf3
 8008cd4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8008cd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
	...

08008ce4 <VL53L1_RdByte>:

VL53L1_Error VL53L1_RdByte(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint8_t      *pdata)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af02      	add	r7, sp, #8
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	460b      	mov	r3, r1
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]
  static uint8_t r8data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 1, &r8data))
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 8008d02:	897a      	ldrh	r2, [r7, #10]
 8008d04:	4b0b      	ldr	r3, [pc, #44]	@ (8008d34 <VL53L1_RdByte+0x50>)
 8008d06:	9300      	str	r3, [sp, #0]
 8008d08:	2301      	movs	r3, #1
 8008d0a:	f7ff fb61 	bl	80083d0 <i2cdevReadReg16>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f083 0301 	eor.w	r3, r3, #1
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <VL53L1_RdByte+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d1a:	23f3      	movs	r3, #243	@ 0xf3
 8008d1c:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r8data;
 8008d1e:	4b05      	ldr	r3, [pc, #20]	@ (8008d34 <VL53L1_RdByte+0x50>)
 8008d20:	781a      	ldrb	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	701a      	strb	r2, [r3, #0]

  return status;
 8008d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20007d58 	.word	0x20007d58

08008d38 <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(
	VL53L1_Dev_t *pdev,
	uint16_t      index,
	uint16_t     *pdata)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b088      	sub	sp, #32
 8008d3c:	af02      	add	r7, sp, #8
 8008d3e:	60f8      	str	r0, [r7, #12]
 8008d40:	460b      	mov	r3, r1
 8008d42:	607a      	str	r2, [r7, #4]
 8008d44:	817b      	strh	r3, [r7, #10]
  VL53L1_Error status         = VL53L1_ERROR_NONE;
 8008d46:	2300      	movs	r3, #0
 8008d48:	75fb      	strb	r3, [r7, #23]
  static uint16_t r16data;

  if (!i2cdevReadReg16(pdev->I2Cx, pdev->devAddr, index, 2, (uint8_t *)&r16data))
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 039c 	ldr.w	r0, [r3, #924]	@ 0x39c
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f893 1398 	ldrb.w	r1, [r3, #920]	@ 0x398
 8008d56:	897a      	ldrh	r2, [r7, #10]
 8008d58:	4b0b      	ldr	r3, [pc, #44]	@ (8008d88 <VL53L1_RdWord+0x50>)
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	f7ff fb37 	bl	80083d0 <i2cdevReadReg16>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f083 0301 	eor.w	r3, r3, #1
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <VL53L1_RdWord+0x3a>
  {
    status = VL53L1_ERROR_CONTROL_INTERFACE;
 8008d6e:	23f3      	movs	r3, #243	@ 0xf3
 8008d70:	75fb      	strb	r3, [r7, #23]
  }
  *pdata = r16data;
 8008d72:	4b05      	ldr	r3, [pc, #20]	@ (8008d88 <VL53L1_RdWord+0x50>)
 8008d74:	881a      	ldrh	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	801a      	strh	r2, [r3, #0]
  
  return status;
 8008d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
 8008d86:	bf00      	nop
 8008d88:	20007d5a 	.word	0x20007d5a

08008d8c <led_task_test>:
#include <stdlib.h>

uint32_t counter_led_task = 0;


static void led_task_test(void *param){
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
//	systemWaitStart();
//	uint64_t lastTime  = usecTimestamp();
// Open made code belove not work

	while(1){
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8008d94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8008d98:	4803      	ldr	r0, [pc, #12]	@ (8008da8 <led_task_test+0x1c>)
 8008d9a:	f7f8 ffa6 	bl	8001cea <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8008d9e:	2064      	movs	r0, #100	@ 0x64
 8008da0:	f7fc fd4a 	bl	8005838 <vTaskDelay>
		HAL_GPIO_TogglePin(LED_PORT, LED_PIN);
 8008da4:	bf00      	nop
 8008da6:	e7f5      	b.n	8008d94 <led_task_test+0x8>
 8008da8:	40020800 	.word	0x40020800

08008dac <ledblink_test>:
	}
}
void ledblink_test(){
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b082      	sub	sp, #8
 8008db0:	af02      	add	r7, sp, #8
	xTaskCreate(led_task_test, LED_TASK_NAME, LED_TASK_STACKSIZE, NULL, LED_TASK_PRI_TEST, NULL);
 8008db2:	2300      	movs	r3, #0
 8008db4:	9301      	str	r3, [sp, #4]
 8008db6:	2303      	movs	r3, #3
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2296      	movs	r2, #150	@ 0x96
 8008dbe:	4903      	ldr	r1, [pc, #12]	@ (8008dcc <ledblink_test+0x20>)
 8008dc0:	4803      	ldr	r0, [pc, #12]	@ (8008dd0 <ledblink_test+0x24>)
 8008dc2:	f7fc fb71 	bl	80054a8 <xTaskCreate>
}
 8008dc6:	bf00      	nop
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}
 8008dcc:	08018f2c 	.word	0x08018f2c
 8008dd0:	08008d8d 	.word	0x08008d8d

08008dd4 <nullFunction>:
  void (*dataAvailableCallback)(void);
} sensorsImplementation_t;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
static void nullFunction(void) {}
 8008dd4:	b480      	push	{r7}
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	bf00      	nop
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
	...

08008de4 <sensorsInit>:

static const sensorsImplementation_t* activeImplementation;
static bool isInit = false;
static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation);

void sensorsInit(void) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
  if (isInit) {
 8008dea:	4b0d      	ldr	r3, [pc, #52]	@ (8008e20 <sensorsInit+0x3c>)
 8008dec:	781b      	ldrb	r3, [r3, #0]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d112      	bne.n	8008e18 <sensorsInit+0x34>
    return;
  }

#ifndef SENSORS_FORCE
  SensorImplementation_t sensorImplementation = platformConfigGetSensorImplementation();
 8008df2:	f007 ff87 	bl	8010d04 <platformConfigGetSensorImplementation>
 8008df6:	4603      	mov	r3, r0
 8008df8:	71fb      	strb	r3, [r7, #7]
  SensorImplementation_t sensorImplementation = SENSORS_FORCE;
  DEBUG_PRINT("Forcing sensors to " xstr(SENSORS_FORCE) "\n");
#endif
//run = 1;//JH

  activeImplementation = findImplementation(sensorImplementation);
 8008dfa:	79fb      	ldrb	r3, [r7, #7]
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f000 f879 	bl	8008ef4 <findImplementation>
 8008e02:	4603      	mov	r3, r0
 8008e04:	4a07      	ldr	r2, [pc, #28]	@ (8008e24 <sensorsInit+0x40>)
 8008e06:	6013      	str	r3, [r2, #0]
//  run = 1;//JH

  activeImplementation->init();
 8008e08:	4b06      	ldr	r3, [pc, #24]	@ (8008e24 <sensorsInit+0x40>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	4798      	blx	r3
//  run = 1; // NJH

  isInit = true;
 8008e10:	4b03      	ldr	r3, [pc, #12]	@ (8008e20 <sensorsInit+0x3c>)
 8008e12:	2201      	movs	r2, #1
 8008e14:	701a      	strb	r2, [r3, #0]
 8008e16:	e000      	b.n	8008e1a <sensorsInit+0x36>
    return;
 8008e18:	bf00      	nop
}
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	20007d60 	.word	0x20007d60
 8008e24:	20007d5c 	.word	0x20007d5c

08008e28 <sensorsAreCalibrated>:
bool sensorsTest(void) {
  return activeImplementation->test();
}

bool sensorsAreCalibrated(void) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	af00      	add	r7, sp, #0
  return activeImplementation->areCalibrated();
 8008e2c:	4b03      	ldr	r3, [pc, #12]	@ (8008e3c <sensorsAreCalibrated+0x14>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	4798      	blx	r3
 8008e34:	4603      	mov	r3, r0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20007d5c 	.word	0x20007d5c

08008e40 <sensorsAcquire>:

bool sensorsManufacturingTest(void){
  return activeImplementation->manufacturingTest;
}

void sensorsAcquire(sensorData_t *sensors) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  activeImplementation->acquire(sensors);
 8008e48:	4b04      	ldr	r3, [pc, #16]	@ (8008e5c <sensorsAcquire+0x1c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	695b      	ldr	r3, [r3, #20]
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
}
 8008e52:	bf00      	nop
 8008e54:	3708      	adds	r7, #8
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20007d5c 	.word	0x20007d5c

08008e60 <sensorsWaitDataReady>:

void sensorsWaitDataReady(void) {
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  activeImplementation->waitDataReady();
 8008e64:	4b02      	ldr	r3, [pc, #8]	@ (8008e70 <sensorsWaitDataReady+0x10>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	4798      	blx	r3
}
 8008e6c:	bf00      	nop
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	20007d5c 	.word	0x20007d5c

08008e74 <sensorsReadGyro>:

bool sensorsReadGyro(Axis3f *gyro) {
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b082      	sub	sp, #8
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  return activeImplementation->readGyro(gyro);
 8008e7c:	4b04      	ldr	r3, [pc, #16]	@ (8008e90 <sensorsReadGyro+0x1c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	69db      	ldr	r3, [r3, #28]
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
 8008e86:	4603      	mov	r3, r0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20007d5c 	.word	0x20007d5c

08008e94 <sensorsReadAcc>:

bool sensorsReadAcc(Axis3f *acc) {
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  return activeImplementation->readAcc(acc);
 8008e9c:	4b04      	ldr	r3, [pc, #16]	@ (8008eb0 <sensorsReadAcc+0x1c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6a1b      	ldr	r3, [r3, #32]
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	4798      	blx	r3
 8008ea6:	4603      	mov	r3, r0
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3708      	adds	r7, #8
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}
 8008eb0:	20007d5c 	.word	0x20007d5c

08008eb4 <sensorsReadMag>:

bool sensorsReadMag(Axis3f *mag) {
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  return activeImplementation->readMag(mag);
 8008ebc:	4b04      	ldr	r3, [pc, #16]	@ (8008ed0 <sensorsReadMag+0x1c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	4798      	blx	r3
 8008ec6:	4603      	mov	r3, r0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3708      	adds	r7, #8
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	20007d5c 	.word	0x20007d5c

08008ed4 <sensorsReadBaro>:

bool sensorsReadBaro(baro_t *baro) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  return activeImplementation->readBaro(baro);
 8008edc:	4b04      	ldr	r3, [pc, #16]	@ (8008ef0 <sensorsReadBaro+0x1c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	4798      	blx	r3
 8008ee6:	4603      	mov	r3, r0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20007d5c 	.word	0x20007d5c

08008ef4 <findImplementation>:

void __attribute__((used)) EXTI1_Callback(void) {
  activeImplementation->dataAvailableCallback();
}

static const sensorsImplementation_t* findImplementation(SensorImplementation_t implementation) {
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	4603      	mov	r3, r0
 8008efc:	71fb      	strb	r3, [r7, #7]
  const sensorsImplementation_t* result = 0;
 8008efe:	2300      	movs	r3, #0
 8008f00:	60fb      	str	r3, [r7, #12]

  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 8008f02:	2300      	movs	r3, #0
 8008f04:	60bb      	str	r3, [r7, #8]
 8008f06:	e014      	b.n	8008f32 <findImplementation+0x3e>
    if (sensorImplementations[i].implements == implementation) {
 8008f08:	4a0f      	ldr	r2, [pc, #60]	@ (8008f48 <findImplementation+0x54>)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	2134      	movs	r1, #52	@ 0x34
 8008f0e:	fb01 f303 	mul.w	r3, r1, r3
 8008f12:	4413      	add	r3, r2
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	79fa      	ldrb	r2, [r7, #7]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d107      	bne.n	8008f2c <findImplementation+0x38>
      result = &sensorImplementations[i];
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2234      	movs	r2, #52	@ 0x34
 8008f20:	fb02 f303 	mul.w	r3, r2, r3
 8008f24:	4a08      	ldr	r2, [pc, #32]	@ (8008f48 <findImplementation+0x54>)
 8008f26:	4413      	add	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]
      break;
 8008f2a:	e005      	b.n	8008f38 <findImplementation+0x44>
  for (int i = 0; i < SensorImplementation_COUNT; i++) {
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	60bb      	str	r3, [r7, #8]
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	dde7      	ble.n	8008f08 <findImplementation+0x14>
    }
  }

  return result;
 8008f38:	68fb      	ldr	r3, [r7, #12]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	080191e4 	.word	0x080191e4

08008f4c <sensorsMpu6500Bmp280ReadGyro>:

STATIC_MEM_TASK_ALLOC(sensorsTask, SENSORS_TASK_STACKSIZE);


bool sensorsMpu6500Bmp280ReadGyro(Axis3f *gyro)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(gyroDataQueue, gyro, 0));
 8008f54:	4b08      	ldr	r3, [pc, #32]	@ (8008f78 <sensorsMpu6500Bmp280ReadGyro+0x2c>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7fb fedd 	bl	8004d1c <xQueueReceive>
 8008f62:	4603      	mov	r3, r0
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	bf0c      	ite	eq
 8008f68:	2301      	moveq	r3, #1
 8008f6a:	2300      	movne	r3, #0
 8008f6c:	b2db      	uxtb	r3, r3
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3708      	adds	r7, #8
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	20007d68 	.word	0x20007d68

08008f7c <sensorsMpu6500Bmp280ReadAcc>:
bool sensorsMpu6500Bmp280ReadAcc(Axis3f *acc)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(accelerometerDataQueue, acc, 0));
 8008f84:	4b08      	ldr	r3, [pc, #32]	@ (8008fa8 <sensorsMpu6500Bmp280ReadAcc+0x2c>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fb fec5 	bl	8004d1c <xQueueReceive>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	bf0c      	ite	eq
 8008f98:	2301      	moveq	r3, #1
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	b2db      	uxtb	r3, r3
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	20007d64 	.word	0x20007d64

08008fac <sensorsMpu6500Bmp280ReadMag>:
bool sensorsMpu6500Bmp280ReadMag(Axis3f *mag)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(magnetometerDataQueue, mag, 0));
 8008fb4:	4b08      	ldr	r3, [pc, #32]	@ (8008fd8 <sensorsMpu6500Bmp280ReadMag+0x2c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	6879      	ldr	r1, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fb fead 	bl	8004d1c <xQueueReceive>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	bf0c      	ite	eq
 8008fc8:	2301      	moveq	r3, #1
 8008fca:	2300      	movne	r3, #0
 8008fcc:	b2db      	uxtb	r3, r3
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20007d6c 	.word	0x20007d6c

08008fdc <sensorsMpu6500Bmp280ReadBaro>:
bool sensorsMpu6500Bmp280ReadBaro(baro_t *baro)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
	return (pdTRUE == xQueueReceive(barometerDataQueue, baro, 0));
 8008fe4:	4b08      	ldr	r3, [pc, #32]	@ (8009008 <sensorsMpu6500Bmp280ReadBaro+0x2c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7fb fe95 	bl	8004d1c <xQueueReceive>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	bf0c      	ite	eq
 8008ff8:	2301      	moveq	r3, #1
 8008ffa:	2300      	movne	r3, #0
 8008ffc:	b2db      	uxtb	r3, r3
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3708      	adds	r7, #8
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	20007d70 	.word	0x20007d70

0800900c <sensorsMpu6500Bmp280Acquire>:
void sensorsMpu6500Bmp280Acquire(sensorData_t *sensors)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	sensorsReadGyro(&sensors->gyro);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	330c      	adds	r3, #12
 8009018:	4618      	mov	r0, r3
 800901a:	f7ff ff2b 	bl	8008e74 <sensorsReadGyro>
	sensorsReadAcc(&sensors->acc);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4618      	mov	r0, r3
 8009022:	f7ff ff37 	bl	8008e94 <sensorsReadAcc>
	sensorsReadMag(&sensors->mag);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	3318      	adds	r3, #24
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff ff42 	bl	8008eb4 <sensorsReadMag>
	sensorsReadBaro(&sensors->baro);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3324      	adds	r3, #36	@ 0x24
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff ff4d 	bl	8008ed4 <sensorsReadBaro>
	sensors->interruptTimestamp = sensorData.interruptTimestamp;
 800903a:	4b05      	ldr	r3, [pc, #20]	@ (8009050 <sensorsMpu6500Bmp280Acquire+0x44>)
 800903c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
}
 8009046:	bf00      	nop
 8009048:	3708      	adds	r7, #8
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	20007e20 	.word	0x20007e20

08009054 <sensorsMpu6500Bmp280AreCalibrated>:
bool sensorsMpu6500Bmp280AreCalibrated(void)
{
 8009054:	b480      	push	{r7}
 8009056:	af00      	add	r7, sp, #0
	return gyroBiasFound;
 8009058:	4b03      	ldr	r3, [pc, #12]	@ (8009068 <sensorsMpu6500Bmp280AreCalibrated+0x14>)
 800905a:	781b      	ldrb	r3, [r3, #0]
}
 800905c:	4618      	mov	r0, r3
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	20007e88 	.word	0x20007e88

0800906c <sensorsTask>:

static void sensorsTask(void *param)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b08e      	sub	sp, #56	@ 0x38
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	measurement_t measurement;
	vTaskDelay(10);
 8009074:	200a      	movs	r0, #10
 8009076:	f7fc fbdf 	bl	8005838 <vTaskDelay>

	systemWaitStart();
 800907a:	f002 fcef 	bl	800ba5c <systemWaitStart>

	while (1) {


	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 800907e:	4b45      	ldr	r3, [pc, #276]	@ (8009194 <sensorsTask+0x128>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f04f 31ff 	mov.w	r1, #4294967295
 8009086:	4618      	mov	r0, r3
 8009088:	f7fb ff28 	bl	8004edc <xQueueSemaphoreTake>
 800908c:	4603      	mov	r3, r0
 800908e:	2b01      	cmp	r3, #1
 8009090:	d1f5      	bne.n	800907e <sensorsTask+0x12>
	    {
	    	sensorData.interruptTimestamp = imuIntTimestamp;
 8009092:	4b41      	ldr	r3, [pc, #260]	@ (8009198 <sensorsTask+0x12c>)
 8009094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009098:	4940      	ldr	r1, [pc, #256]	@ (800919c <sensorsTask+0x130>)
 800909a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

	    	sysCounter++;
 800909e:	4b40      	ldr	r3, [pc, #256]	@ (80091a0 <sensorsTask+0x134>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	3301      	adds	r3, #1
 80090a4:	4a3e      	ldr	r2, [pc, #248]	@ (80091a0 <sensorsTask+0x134>)
 80090a6:	6013      	str	r3, [r2, #0]
	    	mpu6500GetAccelGyroData(&imu);
 80090a8:	483e      	ldr	r0, [pc, #248]	@ (80091a4 <sensorsTask+0x138>)
 80090aa:	f7ff fae9 	bl	8008680 <mpu6500GetAccelGyroData>
	    	processAccGyroMeasurements();
 80090ae:	f000 f8a7 	bl	8009200 <processAccGyroMeasurements>
	    	if (isBarometerPresent)
 80090b2:	4b3d      	ldr	r3, [pc, #244]	@ (80091a8 <sensorsTask+0x13c>)
 80090b4:	781b      	ldrb	r3, [r3, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <sensorsTask+0x52>
	    	{
	    		processBarometerMeasurements();
 80090ba:	f000 f9b1 	bl	8009420 <processBarometerMeasurements>

	    	}

	        measurement.type = MeasurementTypeAcceleration;
 80090be:	230a      	movs	r3, #10
 80090c0:	723b      	strb	r3, [r7, #8]
	        measurement.data.acceleration.acc = sensorData.acc;
 80090c2:	4a36      	ldr	r2, [pc, #216]	@ (800919c <sensorsTask+0x130>)
 80090c4:	f107 030c 	add.w	r3, r7, #12
 80090c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80090ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        ax = sensorData.acc.x;
 80090ce:	4b33      	ldr	r3, [pc, #204]	@ (800919c <sensorsTask+0x130>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a36      	ldr	r2, [pc, #216]	@ (80091ac <sensorsTask+0x140>)
 80090d4:	6013      	str	r3, [r2, #0]
	        ay = sensorData.acc.y;
 80090d6:	4b31      	ldr	r3, [pc, #196]	@ (800919c <sensorsTask+0x130>)
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	4a35      	ldr	r2, [pc, #212]	@ (80091b0 <sensorsTask+0x144>)
 80090dc:	6013      	str	r3, [r2, #0]
	        az = sensorData.acc.z;
 80090de:	4b2f      	ldr	r3, [pc, #188]	@ (800919c <sensorsTask+0x130>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	4a34      	ldr	r2, [pc, #208]	@ (80091b4 <sensorsTask+0x148>)
 80090e4:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 80090e6:	f107 0308 	add.w	r3, r7, #8
 80090ea:	4618      	mov	r0, r3
 80090ec:	f002 fe12 	bl	800bd14 <estimatorEnqueue>
	        xQueueOverwrite(accelerometerDataQueue, &sensorData.acc);
 80090f0:	4b31      	ldr	r3, [pc, #196]	@ (80091b8 <sensorsTask+0x14c>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	2302      	movs	r3, #2
 80090f6:	2200      	movs	r2, #0
 80090f8:	4928      	ldr	r1, [pc, #160]	@ (800919c <sensorsTask+0x130>)
 80090fa:	f7fb fbd1 	bl	80048a0 <xQueueGenericSend>

	        measurement.type = MeasurementTypeGyroscope;
 80090fe:	2309      	movs	r3, #9
 8009100:	723b      	strb	r3, [r7, #8]
	        measurement.data.gyroscope.gyro = sensorData.gyro;
 8009102:	4a26      	ldr	r2, [pc, #152]	@ (800919c <sensorsTask+0x130>)
 8009104:	f107 030c 	add.w	r3, r7, #12
 8009108:	320c      	adds	r2, #12
 800910a:	ca07      	ldmia	r2, {r0, r1, r2}
 800910c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	        gx = sensorData.gyro.x;
 8009110:	4b22      	ldr	r3, [pc, #136]	@ (800919c <sensorsTask+0x130>)
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	4a29      	ldr	r2, [pc, #164]	@ (80091bc <sensorsTask+0x150>)
 8009116:	6013      	str	r3, [r2, #0]
	        gy = sensorData.gyro.y;
 8009118:	4b20      	ldr	r3, [pc, #128]	@ (800919c <sensorsTask+0x130>)
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	4a28      	ldr	r2, [pc, #160]	@ (80091c0 <sensorsTask+0x154>)
 800911e:	6013      	str	r3, [r2, #0]
	        gz = sensorData.gyro.z;
 8009120:	4b1e      	ldr	r3, [pc, #120]	@ (800919c <sensorsTask+0x130>)
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	4a27      	ldr	r2, [pc, #156]	@ (80091c4 <sensorsTask+0x158>)
 8009126:	6013      	str	r3, [r2, #0]
	        estimatorEnqueue(&measurement);
 8009128:	f107 0308 	add.w	r3, r7, #8
 800912c:	4618      	mov	r0, r3
 800912e:	f002 fdf1 	bl	800bd14 <estimatorEnqueue>
	        xQueueOverwrite(gyroDataQueue, &sensorData.gyro);
 8009132:	4b25      	ldr	r3, [pc, #148]	@ (80091c8 <sensorsTask+0x15c>)
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	2302      	movs	r3, #2
 8009138:	2200      	movs	r2, #0
 800913a:	4924      	ldr	r1, [pc, #144]	@ (80091cc <sensorsTask+0x160>)
 800913c:	f7fb fbb0 	bl	80048a0 <xQueueGenericSend>

			if (isBarometerPresent) {
 8009140:	4b19      	ldr	r3, [pc, #100]	@ (80091a8 <sensorsTask+0x13c>)
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d01c      	beq.n	8009182 <sensorsTask+0x116>
				measurement.type = MeasurementTypeBarometer;
 8009148:	230b      	movs	r3, #11
 800914a:	723b      	strb	r3, [r7, #8]
				measurement.data.barometer.baro = sensorData.baro;
 800914c:	4a13      	ldr	r2, [pc, #76]	@ (800919c <sensorsTask+0x130>)
 800914e:	f107 030c 	add.w	r3, r7, #12
 8009152:	3224      	adds	r2, #36	@ 0x24
 8009154:	ca07      	ldmia	r2, {r0, r1, r2}
 8009156:	e883 0007 	stmia.w	r3, {r0, r1, r2}
				press = sensorData.baro.pressure;
 800915a:	4b10      	ldr	r3, [pc, #64]	@ (800919c <sensorsTask+0x130>)
 800915c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800915e:	4a1c      	ldr	r2, [pc, #112]	@ (80091d0 <sensorsTask+0x164>)
 8009160:	6013      	str	r3, [r2, #0]
				asl = sensorData.baro.asl;
 8009162:	4b0e      	ldr	r3, [pc, #56]	@ (800919c <sensorsTask+0x130>)
 8009164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009166:	4a1b      	ldr	r2, [pc, #108]	@ (80091d4 <sensorsTask+0x168>)
 8009168:	6013      	str	r3, [r2, #0]
				estimatorEnqueue(&measurement);
 800916a:	f107 0308 	add.w	r3, r7, #8
 800916e:	4618      	mov	r0, r3
 8009170:	f002 fdd0 	bl	800bd14 <estimatorEnqueue>
				xQueueOverwrite(barometerDataQueue, &sensorData.baro);
 8009174:	4b18      	ldr	r3, [pc, #96]	@ (80091d8 <sensorsTask+0x16c>)
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	2302      	movs	r3, #2
 800917a:	2200      	movs	r2, #0
 800917c:	4917      	ldr	r1, [pc, #92]	@ (80091dc <sensorsTask+0x170>)
 800917e:	f7fb fb8f 	bl	80048a0 <xQueueGenericSend>
			}

	    	xSemaphoreGive(dataReady);
 8009182:	4b17      	ldr	r3, [pc, #92]	@ (80091e0 <sensorsTask+0x174>)
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	2300      	movs	r3, #0
 8009188:	2200      	movs	r2, #0
 800918a:	2100      	movs	r1, #0
 800918c:	f7fb fb88 	bl	80048a0 <xQueueGenericSend>
	    if (pdTRUE == xSemaphoreTake(sensorsDataReady, portMAX_DELAY))
 8009190:	e775      	b.n	800907e <sensorsTask+0x12>
 8009192:	bf00      	nop
 8009194:	20007d74 	.word	0x20007d74
 8009198:	20007e58 	.word	0x20007e58
 800919c:	20007e20 	.word	0x20007e20
 80091a0:	20007f7c 	.word	0x20007f7c
 80091a4:	20007f6c 	.word	0x20007f6c
 80091a8:	20007f38 	.word	0x20007f38
 80091ac:	20007f94 	.word	0x20007f94
 80091b0:	20007f98 	.word	0x20007f98
 80091b4:	20007f9c 	.word	0x20007f9c
 80091b8:	20007d64 	.word	0x20007d64
 80091bc:	20007f88 	.word	0x20007f88
 80091c0:	20007f8c 	.word	0x20007f8c
 80091c4:	20007f90 	.word	0x20007f90
 80091c8:	20007d68 	.word	0x20007d68
 80091cc:	20007e2c 	.word	0x20007e2c
 80091d0:	20007f80 	.word	0x20007f80
 80091d4:	20007f84 	.word	0x20007f84
 80091d8:	20007d70 	.word	0x20007d70
 80091dc:	20007e44 	.word	0x20007e44
 80091e0:	20007dc8 	.word	0x20007dc8

080091e4 <sensorsMpu6500Bmp280WaitDataReady>:
	    }
	}

}
void sensorsMpu6500Bmp280WaitDataReady(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	af00      	add	r7, sp, #0
	xSemaphoreTake(dataReady, portMAX_DELAY);
 80091e8:	4b04      	ldr	r3, [pc, #16]	@ (80091fc <sensorsMpu6500Bmp280WaitDataReady+0x18>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f04f 31ff 	mov.w	r1, #4294967295
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fb fe73 	bl	8004edc <xQueueSemaphoreTake>
}
 80091f6:	bf00      	nop
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	20007dc8 	.word	0x20007dc8

08009200 <processAccGyroMeasurements>:
void processAccGyroMeasurements()
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
	Axis3f gyroScaledIMU;
	Axis3f accScaledIMU;
//	Axis3f accScaled;
	accelRaw.x = ((int16_t) imu.buf[0] << 8 | imu.buf[1]);
 8009206:	4b79      	ldr	r3, [pc, #484]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	021b      	lsls	r3, r3, #8
 800920c:	b21a      	sxth	r2, r3
 800920e:	4b77      	ldr	r3, [pc, #476]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009210:	785b      	ldrb	r3, [r3, #1]
 8009212:	b21b      	sxth	r3, r3
 8009214:	4313      	orrs	r3, r2
 8009216:	b21a      	sxth	r2, r3
 8009218:	4b75      	ldr	r3, [pc, #468]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 800921a:	801a      	strh	r2, [r3, #0]
	accelRaw.y = ((int16_t) imu.buf[2] << 8 | imu.buf[3]);
 800921c:	4b73      	ldr	r3, [pc, #460]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 800921e:	789b      	ldrb	r3, [r3, #2]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	b21a      	sxth	r2, r3
 8009224:	4b71      	ldr	r3, [pc, #452]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009226:	78db      	ldrb	r3, [r3, #3]
 8009228:	b21b      	sxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b21a      	sxth	r2, r3
 800922e:	4b70      	ldr	r3, [pc, #448]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 8009230:	805a      	strh	r2, [r3, #2]
	accelRaw.z = ((int16_t) imu.buf[4] << 8 | imu.buf[5]);
 8009232:	4b6e      	ldr	r3, [pc, #440]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	021b      	lsls	r3, r3, #8
 8009238:	b21a      	sxth	r2, r3
 800923a:	4b6c      	ldr	r3, [pc, #432]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 800923c:	795b      	ldrb	r3, [r3, #5]
 800923e:	b21b      	sxth	r3, r3
 8009240:	4313      	orrs	r3, r2
 8009242:	b21a      	sxth	r2, r3
 8009244:	4b6a      	ldr	r3, [pc, #424]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 8009246:	809a      	strh	r2, [r3, #4]
	gyroRaw.x = ((int16_t) imu.buf[8] << 8 | imu.buf[9]);
 8009248:	4b68      	ldr	r3, [pc, #416]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 800924a:	7a1b      	ldrb	r3, [r3, #8]
 800924c:	021b      	lsls	r3, r3, #8
 800924e:	b21a      	sxth	r2, r3
 8009250:	4b66      	ldr	r3, [pc, #408]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009252:	7a5b      	ldrb	r3, [r3, #9]
 8009254:	b21b      	sxth	r3, r3
 8009256:	4313      	orrs	r3, r2
 8009258:	b21a      	sxth	r2, r3
 800925a:	4b66      	ldr	r3, [pc, #408]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 800925c:	801a      	strh	r2, [r3, #0]
	gyroRaw.y = ((int16_t) imu.buf[10] << 8 | imu.buf[11]);
 800925e:	4b63      	ldr	r3, [pc, #396]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009260:	7a9b      	ldrb	r3, [r3, #10]
 8009262:	021b      	lsls	r3, r3, #8
 8009264:	b21a      	sxth	r2, r3
 8009266:	4b61      	ldr	r3, [pc, #388]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009268:	7adb      	ldrb	r3, [r3, #11]
 800926a:	b21b      	sxth	r3, r3
 800926c:	4313      	orrs	r3, r2
 800926e:	b21a      	sxth	r2, r3
 8009270:	4b60      	ldr	r3, [pc, #384]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 8009272:	805a      	strh	r2, [r3, #2]
	gyroRaw.z = ((int16_t) imu.buf[12] << 8 | imu.buf[13]);
 8009274:	4b5d      	ldr	r3, [pc, #372]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 8009276:	7b1b      	ldrb	r3, [r3, #12]
 8009278:	021b      	lsls	r3, r3, #8
 800927a:	b21a      	sxth	r2, r3
 800927c:	4b5b      	ldr	r3, [pc, #364]	@ (80093ec <processAccGyroMeasurements+0x1ec>)
 800927e:	7b5b      	ldrb	r3, [r3, #13]
 8009280:	b21b      	sxth	r3, r3
 8009282:	4313      	orrs	r3, r2
 8009284:	b21a      	sxth	r2, r3
 8009286:	4b5b      	ldr	r3, [pc, #364]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 8009288:	809a      	strh	r2, [r3, #4]

	gyroBiasFound = processGyroBias(gyroRaw.x, gyroRaw.y, gyroRaw.z, &gyroBias);
 800928a:	4b5a      	ldr	r3, [pc, #360]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 800928c:	f9b3 0000 	ldrsh.w	r0, [r3]
 8009290:	4b58      	ldr	r3, [pc, #352]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 8009292:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8009296:	4b57      	ldr	r3, [pc, #348]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 8009298:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800929c:	4b56      	ldr	r3, [pc, #344]	@ (80093f8 <processAccGyroMeasurements+0x1f8>)
 800929e:	f000 fb53 	bl	8009948 <processGyroBias>
 80092a2:	4603      	mov	r3, r0
 80092a4:	461a      	mov	r2, r3
 80092a6:	4b55      	ldr	r3, [pc, #340]	@ (80093fc <processAccGyroMeasurements+0x1fc>)
 80092a8:	701a      	strb	r2, [r3, #0]

	if (gyroBiasFound) {
 80092aa:	4b54      	ldr	r3, [pc, #336]	@ (80093fc <processAccGyroMeasurements+0x1fc>)
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00b      	beq.n	80092ca <processAccGyroMeasurements+0xca>
		processAccScale(accelRaw.x, accelRaw.y, accelRaw.z);
 80092b2:	4b4f      	ldr	r3, [pc, #316]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 80092b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092b8:	4a4d      	ldr	r2, [pc, #308]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 80092ba:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 80092be:	4a4c      	ldr	r2, [pc, #304]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 80092c0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fa4d 	bl	8009764 <processAccScale>
	}

	gyroScaledIMU.x = -(gyroRaw.x - gyroBias.x) * SENSORS_DEG_PER_LSB_CFG;
 80092ca:	4b4a      	ldr	r3, [pc, #296]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 80092cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80092d0:	ee07 3a90 	vmov	s15, r3
 80092d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092d8:	4b47      	ldr	r3, [pc, #284]	@ (80093f8 <processAccGyroMeasurements+0x1f8>)
 80092da:	edd3 7a00 	vldr	s15, [r3]
 80092de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80092e2:	eef1 7a67 	vneg.f32	s15, s15
 80092e6:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8009400 <processAccGyroMeasurements+0x200>
 80092ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092ee:	edc7 7a03 	vstr	s15, [r7, #12]
	gyroScaledIMU.y = (gyroRaw.y - gyroBias.y) * SENSORS_DEG_PER_LSB_CFG;
 80092f2:	4b40      	ldr	r3, [pc, #256]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 80092f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80092f8:	ee07 3a90 	vmov	s15, r3
 80092fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009300:	4b3d      	ldr	r3, [pc, #244]	@ (80093f8 <processAccGyroMeasurements+0x1f8>)
 8009302:	edd3 7a01 	vldr	s15, [r3, #4]
 8009306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800930a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8009400 <processAccGyroMeasurements+0x200>
 800930e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009312:	edc7 7a04 	vstr	s15, [r7, #16]
	gyroScaledIMU.z = (gyroRaw.z - gyroBias.z) * SENSORS_DEG_PER_LSB_CFG;
 8009316:	4b37      	ldr	r3, [pc, #220]	@ (80093f4 <processAccGyroMeasurements+0x1f4>)
 8009318:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800931c:	ee07 3a90 	vmov	s15, r3
 8009320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009324:	4b34      	ldr	r3, [pc, #208]	@ (80093f8 <processAccGyroMeasurements+0x1f8>)
 8009326:	edd3 7a02 	vldr	s15, [r3, #8]
 800932a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800932e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009400 <processAccGyroMeasurements+0x200>
 8009332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009336:	edc7 7a05 	vstr	s15, [r7, #20]
	sensorsAlignToAirframe(&gyroScaledIMU, &sensorData.gyro);
 800933a:	f107 030c 	add.w	r3, r7, #12
 800933e:	4931      	ldr	r1, [pc, #196]	@ (8009404 <processAccGyroMeasurements+0x204>)
 8009340:	4618      	mov	r0, r3
 8009342:	f000 fe6f 	bl	800a024 <sensorsAlignToAirframe>
	applyAxis3fLpf((lpf2pData*) (&gyroLpf), &sensorData.gyro);
 8009346:	492f      	ldr	r1, [pc, #188]	@ (8009404 <processAccGyroMeasurements+0x204>)
 8009348:	482f      	ldr	r0, [pc, #188]	@ (8009408 <processAccGyroMeasurements+0x208>)
 800934a:	f001 f845 	bl	800a3d8 <applyAxis3fLpf>

	accScaledIMU.x = -(accelRaw.x - accBias.x) * SENSORS_G_PER_LSB_CFG / accScale;
 800934e:	4b28      	ldr	r3, [pc, #160]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 8009350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009354:	ee07 3a90 	vmov	s15, r3
 8009358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800935c:	4b2b      	ldr	r3, [pc, #172]	@ (800940c <processAccGyroMeasurements+0x20c>)
 800935e:	edd3 7a00 	vldr	s15, [r3]
 8009362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009366:	eef1 7a67 	vneg.f32	s15, s15
 800936a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8009410 <processAccGyroMeasurements+0x210>
 800936e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8009372:	4b28      	ldr	r3, [pc, #160]	@ (8009414 <processAccGyroMeasurements+0x214>)
 8009374:	ed93 7a00 	vldr	s14, [r3]
 8009378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800937c:	edc7 7a00 	vstr	s15, [r7]
	accScaledIMU.y = (accelRaw.y - accBias.y) * SENSORS_G_PER_LSB_CFG / accScale;
 8009380:	4b1b      	ldr	r3, [pc, #108]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 8009382:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8009386:	ee07 3a90 	vmov	s15, r3
 800938a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800938e:	4b1f      	ldr	r3, [pc, #124]	@ (800940c <processAccGyroMeasurements+0x20c>)
 8009390:	edd3 7a01 	vldr	s15, [r3, #4]
 8009394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009398:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8009410 <processAccGyroMeasurements+0x210>
 800939c:	ee67 6a87 	vmul.f32	s13, s15, s14
 80093a0:	4b1c      	ldr	r3, [pc, #112]	@ (8009414 <processAccGyroMeasurements+0x214>)
 80093a2:	ed93 7a00 	vldr	s14, [r3]
 80093a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093aa:	edc7 7a01 	vstr	s15, [r7, #4]
	accScaledIMU.z = (accelRaw.z) * SENSORS_G_PER_LSB_CFG / accScale;
 80093ae:	4b10      	ldr	r3, [pc, #64]	@ (80093f0 <processAccGyroMeasurements+0x1f0>)
 80093b0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80093b4:	ee07 3a90 	vmov	s15, r3
 80093b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093bc:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009410 <processAccGyroMeasurements+0x210>
 80093c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80093c4:	4b13      	ldr	r3, [pc, #76]	@ (8009414 <processAccGyroMeasurements+0x214>)
 80093c6:	ed93 7a00 	vldr	s14, [r3]
 80093ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80093ce:	edc7 7a02 	vstr	s15, [r7, #8]
	sensorsAlignToAirframe(&accScaledIMU, &sensorData.acc);
 80093d2:	463b      	mov	r3, r7
 80093d4:	4910      	ldr	r1, [pc, #64]	@ (8009418 <processAccGyroMeasurements+0x218>)
 80093d6:	4618      	mov	r0, r3
 80093d8:	f000 fe24 	bl	800a024 <sensorsAlignToAirframe>
//	sensorsAccAlignToGravity(&accScaled, &sensorData.acc);
	applyAxis3fLpf((lpf2pData*) (&accLpf), &sensorData.acc);
 80093dc:	490e      	ldr	r1, [pc, #56]	@ (8009418 <processAccGyroMeasurements+0x218>)
 80093de:	480f      	ldr	r0, [pc, #60]	@ (800941c <processAccGyroMeasurements+0x21c>)
 80093e0:	f000 fffa 	bl	800a3d8 <applyAxis3fLpf>


}
 80093e4:	bf00      	nop
 80093e6:	3718      	adds	r7, #24
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	20007f6c 	.word	0x20007f6c
 80093f0:	20007e68 	.word	0x20007e68
 80093f4:	20007e60 	.word	0x20007e60
 80093f8:	20007e70 	.word	0x20007e70
 80093fc:	20007e88 	.word	0x20007e88
 8009400:	3d7a0000 	.word	0x3d7a0000
 8009404:	20007e2c 	.word	0x20007e2c
 8009408:	20007ee4 	.word	0x20007ee4
 800940c:	20007e7c 	.word	0x20007e7c
 8009410:	3a000000 	.word	0x3a000000
 8009414:	20000014 	.word	0x20000014
 8009418:	20007e20 	.word	0x20007e20
 800941c:	20007e90 	.word	0x20007e90

08009420 <processBarometerMeasurements>:
static void processBarometerMeasurements()
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b084      	sub	sp, #16
 8009424:	af00      	add	r7, sp, #0
	float pressure, temperature,asl;
	bmp280GetData(&pressure, &temperature, &asl);
 8009426:	1d3a      	adds	r2, r7, #4
 8009428:	f107 0108 	add.w	r1, r7, #8
 800942c:	f107 030c 	add.w	r3, r7, #12
 8009430:	4618      	mov	r0, r3
 8009432:	f7fe fea1 	bl	8008178 <bmp280GetData>

	sensorData.baro.pressure = pressure / 100.0f;
 8009436:	ed97 7a03 	vldr	s14, [r7, #12]
 800943a:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8009468 <processBarometerMeasurements+0x48>
 800943e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009442:	4b0a      	ldr	r3, [pc, #40]	@ (800946c <processBarometerMeasurements+0x4c>)
 8009444:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	sensorData.baro.temperature = temperature;
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4a08      	ldr	r2, [pc, #32]	@ (800946c <processBarometerMeasurements+0x4c>)
 800944c:	6293      	str	r3, [r2, #40]	@ 0x28
	sensorData.baro.asl = bmp280PressureToAltitude(&sensorData.baro.pressure);
 800944e:	4808      	ldr	r0, [pc, #32]	@ (8009470 <processBarometerMeasurements+0x50>)
 8009450:	f7fe feaa 	bl	80081a8 <bmp280PressureToAltitude>
 8009454:	eef0 7a40 	vmov.f32	s15, s0
 8009458:	4b04      	ldr	r3, [pc, #16]	@ (800946c <processBarometerMeasurements+0x4c>)
 800945a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	42c80000 	.word	0x42c80000
 800946c:	20007e20 	.word	0x20007e20
 8009470:	20007e44 	.word	0x20007e44

08009474 <sensorsDeviceInit>:
static void sensorsDeviceInit(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b082      	sub	sp, #8
 8009478:	af00      	add	r7, sp, #0
	isMagnetometerPresent = false;
 800947a:	4b2f      	ldr	r3, [pc, #188]	@ (8009538 <sensorsDeviceInit+0xc4>)
 800947c:	2200      	movs	r2, #0
 800947e:	701a      	strb	r2, [r3, #0]
	isBarometerPresent = false;
 8009480:	4b2e      	ldr	r3, [pc, #184]	@ (800953c <sensorsDeviceInit+0xc8>)
 8009482:	2200      	movs	r2, #0
 8009484:	701a      	strb	r2, [r3, #0]
	TickType_t xStartTime = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	603b      	str	r3, [r7, #0]
	vTaskDelayUntil(&xStartTime, T2M(1000));
 800948a:	463b      	mov	r3, r7
 800948c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009490:	4618      	mov	r0, r3
 8009492:	f7fc f95b 	bl	800574c <vTaskDelayUntil>
//	stand = 1;// JH

	if ( mpu6500TestConnection() == false ){
 8009496:	f7ff f84b 	bl	8008530 <mpu6500TestConnection>
 800949a:	4603      	mov	r3, r0
 800949c:	f083 0301 	eor.w	r3, r3, #1
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d001      	beq.n	80094aa <sensorsDeviceInit+0x36>
//		stand = 1;//NJH
		while(1);
 80094a6:	bf00      	nop
 80094a8:	e7fd      	b.n	80094a6 <sensorsDeviceInit+0x32>
	}
	vTaskDelay(100);
 80094aa:	2064      	movs	r0, #100	@ 0x64
 80094ac:	f7fc f9c4 	bl	8005838 <vTaskDelay>
//	stand = 1;// NJH
	mpu6500Init();
 80094b0:	f7ff f862 	bl	8008578 <mpu6500Init>
//	stand = 1;// NJH

	vTaskDelay(100);
 80094b4:	2064      	movs	r0, #100	@ 0x64
 80094b6:	f7fc f9bf 	bl	8005838 <vTaskDelay>
	for (uint8_t i = 0; i < 3; i++) {
 80094ba:	2300      	movs	r3, #0
 80094bc:	71fb      	strb	r3, [r7, #7]
 80094be:	e01e      	b.n	80094fe <sensorsDeviceInit+0x8a>
		lpf2pInit(&gyroLpf[i], 1000, GYRO_LPF_CUTOFF_FREQ);
 80094c0:	79fa      	ldrb	r2, [r7, #7]
 80094c2:	4613      	mov	r3, r2
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	1a9b      	subs	r3, r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4a1d      	ldr	r2, [pc, #116]	@ (8009540 <sensorsDeviceInit+0xcc>)
 80094cc:	4413      	add	r3, r2
 80094ce:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8009544 <sensorsDeviceInit+0xd0>
 80094d2:	ed9f 0a1d 	vldr	s0, [pc, #116]	@ 8009548 <sensorsDeviceInit+0xd4>
 80094d6:	4618      	mov	r0, r3
 80094d8:	f007 fcb4 	bl	8010e44 <lpf2pInit>
		lpf2pInit(&accLpf[i], 1000, ACCEL_LPF_CUTOFF_FREQ);
 80094dc:	79fa      	ldrb	r2, [r7, #7]
 80094de:	4613      	mov	r3, r2
 80094e0:	00db      	lsls	r3, r3, #3
 80094e2:	1a9b      	subs	r3, r3, r2
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	4a19      	ldr	r2, [pc, #100]	@ (800954c <sensorsDeviceInit+0xd8>)
 80094e8:	4413      	add	r3, r2
 80094ea:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 80094ee:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8009548 <sensorsDeviceInit+0xd4>
 80094f2:	4618      	mov	r0, r3
 80094f4:	f007 fca6 	bl	8010e44 <lpf2pInit>
	for (uint8_t i = 0; i < 3; i++) {
 80094f8:	79fb      	ldrb	r3, [r7, #7]
 80094fa:	3301      	adds	r3, #1
 80094fc:	71fb      	strb	r3, [r7, #7]
 80094fe:	79fb      	ldrb	r3, [r7, #7]
 8009500:	2b02      	cmp	r3, #2
 8009502:	d9dd      	bls.n	80094c0 <sensorsDeviceInit+0x4c>
	}

	vTaskDelay(10);
 8009504:	200a      	movs	r0, #10
 8009506:	f7fc f997 	bl	8005838 <vTaskDelay>
	bmp280Init();
 800950a:	f7fe fdfd 	bl	8008108 <bmp280Init>
	if (bmp280TestConnection() == true){
 800950e:	f7fe fe13 	bl	8008138 <bmp280TestConnection>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d003      	beq.n	8009520 <sensorsDeviceInit+0xac>
		isBarometerPresent = true;
 8009518:	4b08      	ldr	r3, [pc, #32]	@ (800953c <sensorsDeviceInit+0xc8>)
 800951a:	2201      	movs	r2, #1
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	e004      	b.n	800952a <sensorsDeviceInit+0xb6>
	}
	else{
		isBarometerPresent = false;
 8009520:	4b06      	ldr	r3, [pc, #24]	@ (800953c <sensorsDeviceInit+0xc8>)
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
		while(1);
 8009526:	bf00      	nop
 8009528:	e7fd      	b.n	8009526 <sensorsDeviceInit+0xb2>
	}
	vTaskDelay(10);
 800952a:	200a      	movs	r0, #10
 800952c:	f7fc f984 	bl	8005838 <vTaskDelay>

}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20007f39 	.word	0x20007f39
 800953c:	20007f38 	.word	0x20007f38
 8009540:	20007ee4 	.word	0x20007ee4
 8009544:	42a00000 	.word	0x42a00000
 8009548:	447a0000 	.word	0x447a0000
 800954c:	20007e90 	.word	0x20007e90

08009550 <sensorsTaskInit>:
static void sensorsTaskInit(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af04      	add	r7, sp, #16
	accelerometerDataQueue = STATIC_MEM_QUEUE_CREATE(accelerometerDataQueue);
 8009556:	2301      	movs	r3, #1
 8009558:	4618      	mov	r0, r3
 800955a:	230c      	movs	r3, #12
 800955c:	4619      	mov	r1, r3
 800955e:	2300      	movs	r3, #0
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	4b1f      	ldr	r3, [pc, #124]	@ (80095e0 <sensorsTaskInit+0x90>)
 8009564:	4a1f      	ldr	r2, [pc, #124]	@ (80095e4 <sensorsTaskInit+0x94>)
 8009566:	f7fb f887 	bl	8004678 <xQueueGenericCreateStatic>
 800956a:	4603      	mov	r3, r0
 800956c:	4a1e      	ldr	r2, [pc, #120]	@ (80095e8 <sensorsTaskInit+0x98>)
 800956e:	6013      	str	r3, [r2, #0]
	gyroDataQueue = STATIC_MEM_QUEUE_CREATE(gyroDataQueue);
 8009570:	2301      	movs	r3, #1
 8009572:	4618      	mov	r0, r3
 8009574:	230c      	movs	r3, #12
 8009576:	4619      	mov	r1, r3
 8009578:	2300      	movs	r3, #0
 800957a:	9300      	str	r3, [sp, #0]
 800957c:	4b1b      	ldr	r3, [pc, #108]	@ (80095ec <sensorsTaskInit+0x9c>)
 800957e:	4a1c      	ldr	r2, [pc, #112]	@ (80095f0 <sensorsTaskInit+0xa0>)
 8009580:	f7fb f87a 	bl	8004678 <xQueueGenericCreateStatic>
 8009584:	4603      	mov	r3, r0
 8009586:	4a1b      	ldr	r2, [pc, #108]	@ (80095f4 <sensorsTaskInit+0xa4>)
 8009588:	6013      	str	r3, [r2, #0]
	magnetometerDataQueue = STATIC_MEM_QUEUE_CREATE(magnetometerDataQueue);
 800958a:	2301      	movs	r3, #1
 800958c:	4618      	mov	r0, r3
 800958e:	230c      	movs	r3, #12
 8009590:	4619      	mov	r1, r3
 8009592:	2300      	movs	r3, #0
 8009594:	9300      	str	r3, [sp, #0]
 8009596:	4b18      	ldr	r3, [pc, #96]	@ (80095f8 <sensorsTaskInit+0xa8>)
 8009598:	4a18      	ldr	r2, [pc, #96]	@ (80095fc <sensorsTaskInit+0xac>)
 800959a:	f7fb f86d 	bl	8004678 <xQueueGenericCreateStatic>
 800959e:	4603      	mov	r3, r0
 80095a0:	4a17      	ldr	r2, [pc, #92]	@ (8009600 <sensorsTaskInit+0xb0>)
 80095a2:	6013      	str	r3, [r2, #0]
	barometerDataQueue = STATIC_MEM_QUEUE_CREATE(barometerDataQueue);
 80095a4:	2301      	movs	r3, #1
 80095a6:	4618      	mov	r0, r3
 80095a8:	230c      	movs	r3, #12
 80095aa:	4619      	mov	r1, r3
 80095ac:	2300      	movs	r3, #0
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	4b14      	ldr	r3, [pc, #80]	@ (8009604 <sensorsTaskInit+0xb4>)
 80095b2:	4a15      	ldr	r2, [pc, #84]	@ (8009608 <sensorsTaskInit+0xb8>)
 80095b4:	f7fb f860 	bl	8004678 <xQueueGenericCreateStatic>
 80095b8:	4603      	mov	r3, r0
 80095ba:	4a14      	ldr	r2, [pc, #80]	@ (800960c <sensorsTaskInit+0xbc>)
 80095bc:	6013      	str	r3, [r2, #0]

	STATIC_MEM_TASK_CREATE(sensorsTask, sensorsTask, SENSORS_TASK_NAME, NULL, SENSORS_TASK_PRI);
 80095be:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 80095c2:	461a      	mov	r2, r3
 80095c4:	4b12      	ldr	r3, [pc, #72]	@ (8009610 <sensorsTaskInit+0xc0>)
 80095c6:	9302      	str	r3, [sp, #8]
 80095c8:	4b12      	ldr	r3, [pc, #72]	@ (8009614 <sensorsTaskInit+0xc4>)
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	2304      	movs	r3, #4
 80095ce:	9300      	str	r3, [sp, #0]
 80095d0:	2300      	movs	r3, #0
 80095d2:	4911      	ldr	r1, [pc, #68]	@ (8009618 <sensorsTaskInit+0xc8>)
 80095d4:	4811      	ldr	r0, [pc, #68]	@ (800961c <sensorsTaskInit+0xcc>)
 80095d6:	f7fb ff11 	bl	80053fc <xTaskCreateStatic>

}
 80095da:	bf00      	nop
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}
 80095e0:	100003b0 	.word	0x100003b0
 80095e4:	100003a4 	.word	0x100003a4
 80095e8:	20007d64 	.word	0x20007d64
 80095ec:	1000040c 	.word	0x1000040c
 80095f0:	10000400 	.word	0x10000400
 80095f4:	20007d68 	.word	0x20007d68
 80095f8:	10000468 	.word	0x10000468
 80095fc:	1000045c 	.word	0x1000045c
 8009600:	20007d6c 	.word	0x20007d6c
 8009604:	100004c4 	.word	0x100004c4
 8009608:	100004b8 	.word	0x100004b8
 800960c:	20007d70 	.word	0x20007d70
 8009610:	10001d40 	.word	0x10001d40
 8009614:	20007fa0 	.word	0x20007fa0
 8009618:	08018f38 	.word	0x08018f38
 800961c:	0800906d 	.word	0x0800906d

08009620 <sensorsInterruptInit>:

static void sensorsInterruptInit(void)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af02      	add	r7, sp, #8
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009626:	1d3b      	adds	r3, r7, #4
 8009628:	2200      	movs	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
 800962c:	605a      	str	r2, [r3, #4]
 800962e:	609a      	str	r2, [r3, #8]
 8009630:	60da      	str	r2, [r3, #12]
 8009632:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8009634:	2300      	movs	r3, #0
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	4b1c      	ldr	r3, [pc, #112]	@ (80096ac <sensorsInterruptInit+0x8c>)
 800963a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800963c:	4a1b      	ldr	r2, [pc, #108]	@ (80096ac <sensorsInterruptInit+0x8c>)
 800963e:	f043 0301 	orr.w	r3, r3, #1
 8009642:	6313      	str	r3, [r2, #48]	@ 0x30
 8009644:	4b19      	ldr	r3, [pc, #100]	@ (80096ac <sensorsInterruptInit+0x8c>)
 8009646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	603b      	str	r3, [r7, #0]
 800964e:	683b      	ldr	r3, [r7, #0]

	sensorsDataReady = xSemaphoreCreateBinaryStatic(&sensorsDataReadyBuffer);
 8009650:	2303      	movs	r3, #3
 8009652:	9300      	str	r3, [sp, #0]
 8009654:	4b16      	ldr	r3, [pc, #88]	@ (80096b0 <sensorsInterruptInit+0x90>)
 8009656:	2200      	movs	r2, #0
 8009658:	2100      	movs	r1, #0
 800965a:	2001      	movs	r0, #1
 800965c:	f7fb f80c 	bl	8004678 <xQueueGenericCreateStatic>
 8009660:	4603      	mov	r3, r0
 8009662:	4a14      	ldr	r2, [pc, #80]	@ (80096b4 <sensorsInterruptInit+0x94>)
 8009664:	6013      	str	r3, [r2, #0]
	dataReady = xSemaphoreCreateBinaryStatic(&dataReadyBuffer);
 8009666:	2303      	movs	r3, #3
 8009668:	9300      	str	r3, [sp, #0]
 800966a:	4b13      	ldr	r3, [pc, #76]	@ (80096b8 <sensorsInterruptInit+0x98>)
 800966c:	2200      	movs	r2, #0
 800966e:	2100      	movs	r1, #0
 8009670:	2001      	movs	r0, #1
 8009672:	f7fb f801 	bl	8004678 <xQueueGenericCreateStatic>
 8009676:	4603      	mov	r3, r0
 8009678:	4a10      	ldr	r2, [pc, #64]	@ (80096bc <sensorsInterruptInit+0x9c>)
 800967a:	6013      	str	r3, [r2, #0]


	GPIO_InitStruct.Pin = GPIO_PIN_1;
 800967c:	2302      	movs	r3, #2
 800967e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009680:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8009684:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009686:	2301      	movs	r3, #1
 8009688:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800968a:	1d3b      	adds	r3, r7, #4
 800968c:	4619      	mov	r1, r3
 800968e:	480c      	ldr	r0, [pc, #48]	@ (80096c0 <sensorsInterruptInit+0xa0>)
 8009690:	f7f8 f976 	bl	8001980 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI1_IRQn, 7, 0);
 8009694:	2200      	movs	r2, #0
 8009696:	2107      	movs	r1, #7
 8009698:	2007      	movs	r0, #7
 800969a:	f7f7 fe2f 	bl	80012fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800969e:	2007      	movs	r0, #7
 80096a0:	f7f7 fe48 	bl	8001334 <HAL_NVIC_EnableIRQ>
}
 80096a4:	bf00      	nop
 80096a6:	3718      	adds	r7, #24
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}
 80096ac:	40023800 	.word	0x40023800
 80096b0:	20007d78 	.word	0x20007d78
 80096b4:	20007d74 	.word	0x20007d74
 80096b8:	20007dcc 	.word	0x20007dcc
 80096bc:	20007dc8 	.word	0x20007dc8
 80096c0:	40020000 	.word	0x40020000

080096c4 <sensorsMpu6500Bmp280Init>:

void sensorsMpu6500Bmp280Init(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
	if (isInit) {
 80096c8:	4b09      	ldr	r3, [pc, #36]	@ (80096f0 <sensorsMpu6500Bmp280Init+0x2c>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d10c      	bne.n	80096ea <sensorsMpu6500Bmp280Init+0x26>
		return;
	}
	sensorsBiasObjInit(&gyroBiasRunning);
 80096d0:	4808      	ldr	r0, [pc, #32]	@ (80096f4 <sensorsMpu6500Bmp280Init+0x30>)
 80096d2:	f000 f96d 	bl	80099b0 <sensorsBiasObjInit>
//	stand = 1;//JH

	sensorsDeviceInit();
 80096d6:	f7ff fecd 	bl	8009474 <sensorsDeviceInit>
//	stand = 1;//NJH

	sensorsInterruptInit();
 80096da:	f7ff ffa1 	bl	8009620 <sensorsInterruptInit>
	sensorsTaskInit();
 80096de:	f7ff ff37 	bl	8009550 <sensorsTaskInit>

	isInit = true;
 80096e2:	4b03      	ldr	r3, [pc, #12]	@ (80096f0 <sensorsMpu6500Bmp280Init+0x2c>)
 80096e4:	2201      	movs	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e000      	b.n	80096ec <sensorsMpu6500Bmp280Init+0x28>
		return;
 80096ea:	bf00      	nop
}
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20007e1c 	.word	0x20007e1c
 80096f4:	10000514 	.word	0x10000514

080096f8 <sensorsMpu6500Bmp280Test>:
bool sensorsMpu6500Bmp280Test(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
	  bool testStatus = true;
 80096fe:	2301      	movs	r3, #1
 8009700:	71fb      	strb	r3, [r7, #7]

	  if (!isInit)
 8009702:	4b16      	ldr	r3, [pc, #88]	@ (800975c <sensorsMpu6500Bmp280Test+0x64>)
 8009704:	781b      	ldrb	r3, [r3, #0]
 8009706:	f083 0301 	eor.w	r3, r3, #1
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <sensorsMpu6500Bmp280Test+0x1c>
	  {
	    testStatus = false;
 8009710:	2300      	movs	r3, #0
 8009712:	71fb      	strb	r3, [r7, #7]
	  }

	  // Try for 3 seconds so the quad has stabilized enough to pass the test
	  for (int i = 0; i < 300; i++)
 8009714:	2300      	movs	r3, #0
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	e00e      	b.n	8009738 <sensorsMpu6500Bmp280Test+0x40>
	  {
	    if(mpu6500SelfTest() == true)
 800971a:	f7fe ff25 	bl	8008568 <mpu6500SelfTest>
 800971e:	4603      	mov	r3, r0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d003      	beq.n	800972c <sensorsMpu6500Bmp280Test+0x34>
	    {
	    	isMpu6500TestPassed = true;
 8009724:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <sensorsMpu6500Bmp280Test+0x68>)
 8009726:	2201      	movs	r2, #1
 8009728:	701a      	strb	r2, [r3, #0]
	      break;
 800972a:	e009      	b.n	8009740 <sensorsMpu6500Bmp280Test+0x48>
	    }
	    else
	    {
	      vTaskDelay(M2T(10));
 800972c:	200a      	movs	r0, #10
 800972e:	f7fc f883 	bl	8005838 <vTaskDelay>
	  for (int i = 0; i < 300; i++)
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	3301      	adds	r3, #1
 8009736:	603b      	str	r3, [r7, #0]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800973e:	dbec      	blt.n	800971a <sensorsMpu6500Bmp280Test+0x22>
	    }
	  }
	  testStatus &= isMpu6500TestPassed;
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	4a07      	ldr	r2, [pc, #28]	@ (8009760 <sensorsMpu6500Bmp280Test+0x68>)
 8009744:	7812      	ldrb	r2, [r2, #0]
 8009746:	4013      	ands	r3, r2
 8009748:	2b00      	cmp	r3, #0
 800974a:	bf14      	ite	ne
 800974c:	2301      	movne	r3, #1
 800974e:	2300      	moveq	r3, #0
 8009750:	71fb      	strb	r3, [r7, #7]
	    isLPS25HTestPassed = lps25hSelfTest();
	    testStatus = isLPS25HTestPassed;
	  }
	#endif

	  return true;
 8009752:	2301      	movs	r3, #1
//	  return testStatus;
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	20007e1c 	.word	0x20007e1c
 8009760:	20007f3a 	.word	0x20007f3a

08009764 <processAccScale>:

static bool processAccScale(int16_t ax, int16_t ay, int16_t az)
{
 8009764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009768:	ed2d 8b02 	vpush	{d8}
 800976c:	b088      	sub	sp, #32
 800976e:	af00      	add	r7, sp, #0
 8009770:	4603      	mov	r3, r0
 8009772:	83fb      	strh	r3, [r7, #30]
 8009774:	460b      	mov	r3, r1
 8009776:	83bb      	strh	r3, [r7, #28]
 8009778:	4613      	mov	r3, r2
 800977a:	837b      	strh	r3, [r7, #26]
  static bool accBiasFound = false;
  static uint32_t accScaleSumCount = 0;
  static int64_t accSum[GYRO_NBR_OF_AXES] = {0};


  if (!accBiasFound)
 800977c:	4b6a      	ldr	r3, [pc, #424]	@ (8009928 <processAccScale+0x1c4>)
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	f083 0301 	eor.w	r3, r3, #1
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 80c5 	beq.w	8009916 <processAccScale+0x1b2>
  {
    accScaleSum += sqrtf(powf(ax * SENSORS_G_PER_LSB_CFG, 2) + powf(ay * SENSORS_G_PER_LSB_CFG, 2) + powf(az * SENSORS_G_PER_LSB_CFG, 2));
 800978c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009790:	ee07 3a90 	vmov	s15, r3
 8009794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009798:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 800992c <processAccScale+0x1c8>
 800979c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097a0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80097a4:	eeb0 0a67 	vmov.f32	s0, s15
 80097a8:	f00c feb6 	bl	8016518 <powf>
 80097ac:	eeb0 8a40 	vmov.f32	s16, s0
 80097b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80097b4:	ee07 3a90 	vmov	s15, r3
 80097b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097bc:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800992c <processAccScale+0x1c8>
 80097c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097c4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80097c8:	eeb0 0a67 	vmov.f32	s0, s15
 80097cc:	f00c fea4 	bl	8016518 <powf>
 80097d0:	eef0 7a40 	vmov.f32	s15, s0
 80097d4:	ee38 8a27 	vadd.f32	s16, s16, s15
 80097d8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80097dc:	ee07 3a90 	vmov	s15, r3
 80097e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097e4:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 800992c <processAccScale+0x1c8>
 80097e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80097ec:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80097f0:	eeb0 0a67 	vmov.f32	s0, s15
 80097f4:	f00c fe90 	bl	8016518 <powf>
 80097f8:	eef0 7a40 	vmov.f32	s15, s0
 80097fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8009800:	eeb0 0a67 	vmov.f32	s0, s15
 8009804:	f00c fee0 	bl	80165c8 <sqrtf>
 8009808:	eeb0 7a40 	vmov.f32	s14, s0
 800980c:	4b48      	ldr	r3, [pc, #288]	@ (8009930 <processAccScale+0x1cc>)
 800980e:	edd3 7a00 	vldr	s15, [r3]
 8009812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009816:	4b46      	ldr	r3, [pc, #280]	@ (8009930 <processAccScale+0x1cc>)
 8009818:	edc3 7a00 	vstr	s15, [r3]
    accScaleSumCount++;
 800981c:	4b45      	ldr	r3, [pc, #276]	@ (8009934 <processAccScale+0x1d0>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	3301      	adds	r3, #1
 8009822:	4a44      	ldr	r2, [pc, #272]	@ (8009934 <processAccScale+0x1d0>)
 8009824:	6013      	str	r3, [r2, #0]
    accSum[0] += ax;
 8009826:	4b44      	ldr	r3, [pc, #272]	@ (8009938 <processAccScale+0x1d4>)
 8009828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8009830:	17c8      	asrs	r0, r1, #31
 8009832:	468a      	mov	sl, r1
 8009834:	4683      	mov	fp, r0
 8009836:	eb12 010a 	adds.w	r1, r2, sl
 800983a:	6139      	str	r1, [r7, #16]
 800983c:	eb43 030b 	adc.w	r3, r3, fp
 8009840:	617b      	str	r3, [r7, #20]
 8009842:	4b3d      	ldr	r3, [pc, #244]	@ (8009938 <processAccScale+0x1d4>)
 8009844:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009848:	e9c3 1200 	strd	r1, r2, [r3]
    accSum[1] += ay;
 800984c:	4b3a      	ldr	r3, [pc, #232]	@ (8009938 <processAccScale+0x1d4>)
 800984e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8009852:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8009856:	17c8      	asrs	r0, r1, #31
 8009858:	4688      	mov	r8, r1
 800985a:	4681      	mov	r9, r0
 800985c:	eb12 0108 	adds.w	r1, r2, r8
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	eb43 0309 	adc.w	r3, r3, r9
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	4b33      	ldr	r3, [pc, #204]	@ (8009938 <processAccScale+0x1d4>)
 800986a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800986e:	e9c3 1202 	strd	r1, r2, [r3, #8]
    accSum[2] += az;
 8009872:	4b31      	ldr	r3, [pc, #196]	@ (8009938 <processAccScale+0x1d4>)
 8009874:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009878:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800987c:	17c8      	asrs	r0, r1, #31
 800987e:	460c      	mov	r4, r1
 8009880:	4605      	mov	r5, r0
 8009882:	1911      	adds	r1, r2, r4
 8009884:	6039      	str	r1, [r7, #0]
 8009886:	416b      	adcs	r3, r5
 8009888:	607b      	str	r3, [r7, #4]
 800988a:	4b2b      	ldr	r3, [pc, #172]	@ (8009938 <processAccScale+0x1d4>)
 800988c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009890:	e9c3 1204 	strd	r1, r2, [r3, #16]

    if (accScaleSumCount == SENSORS_ACC_SCALE_SAMPLES)
 8009894:	4b27      	ldr	r3, [pc, #156]	@ (8009934 <processAccScale+0x1d0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2bc8      	cmp	r3, #200	@ 0xc8
 800989a:	d13c      	bne.n	8009916 <processAccScale+0x1b2>
    {
      accScale = accScaleSum / SENSORS_ACC_SCALE_SAMPLES;
 800989c:	4b24      	ldr	r3, [pc, #144]	@ (8009930 <processAccScale+0x1cc>)
 800989e:	ed93 7a00 	vldr	s14, [r3]
 80098a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800993c <processAccScale+0x1d8>
 80098a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80098aa:	4b25      	ldr	r3, [pc, #148]	@ (8009940 <processAccScale+0x1dc>)
 80098ac:	edc3 7a00 	vstr	s15, [r3]
      accBias.x = (float) accSum[0] / SENSORS_ACC_SCALE_SAMPLES;
 80098b0:	4b21      	ldr	r3, [pc, #132]	@ (8009938 <processAccScale+0x1d4>)
 80098b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	f7f7 fa1f 	bl	8000cfc <__aeabi_l2f>
 80098be:	ee06 0a90 	vmov	s13, r0
 80098c2:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800993c <processAccScale+0x1d8>
 80098c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009944 <processAccScale+0x1e0>)
 80098cc:	edc3 7a00 	vstr	s15, [r3]
      accBias.y = (float) accSum[1] / SENSORS_ACC_SCALE_SAMPLES;
 80098d0:	4b19      	ldr	r3, [pc, #100]	@ (8009938 <processAccScale+0x1d4>)
 80098d2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80098d6:	4610      	mov	r0, r2
 80098d8:	4619      	mov	r1, r3
 80098da:	f7f7 fa0f 	bl	8000cfc <__aeabi_l2f>
 80098de:	ee06 0a90 	vmov	s13, r0
 80098e2:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 800993c <processAccScale+0x1d8>
 80098e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ea:	4b16      	ldr	r3, [pc, #88]	@ (8009944 <processAccScale+0x1e0>)
 80098ec:	edc3 7a01 	vstr	s15, [r3, #4]
      accBias.z = (float) accSum[2] / SENSORS_ACC_SCALE_SAMPLES;
 80098f0:	4b11      	ldr	r3, [pc, #68]	@ (8009938 <processAccScale+0x1d4>)
 80098f2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80098f6:	4610      	mov	r0, r2
 80098f8:	4619      	mov	r1, r3
 80098fa:	f7f7 f9ff 	bl	8000cfc <__aeabi_l2f>
 80098fe:	ee06 0a90 	vmov	s13, r0
 8009902:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800993c <processAccScale+0x1d8>
 8009906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800990a:	4b0e      	ldr	r3, [pc, #56]	@ (8009944 <processAccScale+0x1e0>)
 800990c:	edc3 7a02 	vstr	s15, [r3, #8]
      accBiasFound = true;
 8009910:	4b05      	ldr	r3, [pc, #20]	@ (8009928 <processAccScale+0x1c4>)
 8009912:	2201      	movs	r2, #1
 8009914:	701a      	strb	r2, [r3, #0]
    }
  }

  return accBiasFound;
 8009916:	4b04      	ldr	r3, [pc, #16]	@ (8009928 <processAccScale+0x1c4>)
 8009918:	781b      	ldrb	r3, [r3, #0]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3720      	adds	r7, #32
 800991e:	46bd      	mov	sp, r7
 8009920:	ecbd 8b02 	vpop	{d8}
 8009924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009928:	20008450 	.word	0x20008450
 800992c:	3a000000 	.word	0x3a000000
 8009930:	20007e8c 	.word	0x20007e8c
 8009934:	20008454 	.word	0x20008454
 8009938:	20008458 	.word	0x20008458
 800993c:	43480000 	.word	0x43480000
 8009940:	20000014 	.word	0x20000014
 8009944:	20007e7c 	.word	0x20007e7c

08009948 <processGyroBias>:
static bool processGyroBias(int16_t gx, int16_t gy, int16_t gz,  Axis3f *gyroBiasOut)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	607b      	str	r3, [r7, #4]
 8009950:	4603      	mov	r3, r0
 8009952:	81fb      	strh	r3, [r7, #14]
 8009954:	460b      	mov	r3, r1
 8009956:	81bb      	strh	r3, [r7, #12]
 8009958:	4613      	mov	r3, r2
 800995a:	817b      	strh	r3, [r7, #10]
	sensorsAddBiasValue(&gyroBiasRunning, gx, gy, gz);
 800995c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009960:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8009964:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8009968:	4810      	ldr	r0, [pc, #64]	@ (80099ac <processGyroBias+0x64>)
 800996a:	f000 f9e3 	bl	8009d34 <sensorsAddBiasValue>

	if (!gyroBiasRunning.isBiasValueFound)
 800996e:	4b0f      	ldr	r3, [pc, #60]	@ (80099ac <processGyroBias+0x64>)
 8009970:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009974:	f083 0301 	eor.w	r3, r3, #1
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <processGyroBias+0x3c>
	{
		sensorsFindBiasValue(&gyroBiasRunning);
 800997e:	480b      	ldr	r0, [pc, #44]	@ (80099ac <processGyroBias+0x64>)
 8009980:	f000 fa0e 	bl	8009da0 <sensorsFindBiasValue>
	}

	gyroBiasOut->x = gyroBiasRunning.bias.x;
 8009984:	4b09      	ldr	r3, [pc, #36]	@ (80099ac <processGyroBias+0x64>)
 8009986:	681a      	ldr	r2, [r3, #0]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
	gyroBiasOut->y = gyroBiasRunning.bias.y;
 800998c:	4b07      	ldr	r3, [pc, #28]	@ (80099ac <processGyroBias+0x64>)
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]
	gyroBiasOut->z = gyroBiasRunning.bias.z;
 8009994:	4b05      	ldr	r3, [pc, #20]	@ (80099ac <processGyroBias+0x64>)
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	609a      	str	r2, [r3, #8]

	return gyroBiasRunning.isBiasValueFound;
 800999c:	4b03      	ldr	r3, [pc, #12]	@ (80099ac <processGyroBias+0x64>)
 800999e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3710      	adds	r7, #16
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	10000514 	.word	0x10000514

080099b0 <sensorsBiasObjInit>:
static void sensorsBiasObjInit(BiasObj* bias)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b083      	sub	sp, #12
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  bias->isBufferFilled = false;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  bias->bufHead = bias->buffer;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
	...

080099d8 <sensorsCalculateVarianceAndMean>:

static void sensorsCalculateVarianceAndMean(BiasObj* bias, Axis3f* varOut, Axis3f* meanOut)
{
 80099d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099dc:	b0ac      	sub	sp, #176	@ 0xb0
 80099de:	af00      	add	r7, sp, #0
 80099e0:	6778      	str	r0, [r7, #116]	@ 0x74
 80099e2:	6739      	str	r1, [r7, #112]	@ 0x70
 80099e4:	66fa      	str	r2, [r7, #108]	@ 0x6c
  uint32_t i;
  int64_t sum[GYRO_NBR_OF_AXES] = {0};
 80099e6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80099ea:	2300      	movs	r3, #0
 80099ec:	6013      	str	r3, [r2, #0]
 80099ee:	6053      	str	r3, [r2, #4]
 80099f0:	6093      	str	r3, [r2, #8]
 80099f2:	60d3      	str	r3, [r2, #12]
 80099f4:	6113      	str	r3, [r2, #16]
 80099f6:	6153      	str	r3, [r2, #20]
  int64_t sumSq[GYRO_NBR_OF_AXES] = {0};
 80099f8:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80099fc:	2300      	movs	r3, #0
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	6053      	str	r3, [r2, #4]
 8009a02:	6093      	str	r3, [r2, #8]
 8009a04:	60d3      	str	r3, [r2, #12]
 8009a06:	6113      	str	r3, [r2, #16]
 8009a08:	6153      	str	r3, [r2, #20]

  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009a10:	e0d8      	b.n	8009bc4 <sensorsCalculateVarianceAndMean+0x1ec>
  {
		sum[0] += bias->buffer[i].x;
 8009a12:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8009a16:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009a18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	005b      	lsls	r3, r3, #1
 8009a20:	4413      	add	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4423      	add	r3, r4
 8009a26:	332c      	adds	r3, #44	@ 0x2c
 8009a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a2c:	b21b      	sxth	r3, r3
 8009a2e:	17da      	asrs	r2, r3, #31
 8009a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a32:	667a      	str	r2, [r7, #100]	@ 0x64
 8009a34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8009a38:	4623      	mov	r3, r4
 8009a3a:	18c3      	adds	r3, r0, r3
 8009a3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a3e:	462b      	mov	r3, r5
 8009a40:	eb41 0303 	adc.w	r3, r1, r3
 8009a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009a46:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8009a4a:	e9c7 3424 	strd	r3, r4, [r7, #144]	@ 0x90
		sum[1] += bias->buffer[i].y;
 8009a4e:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a52:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009a54:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a58:	4613      	mov	r3, r2
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	4413      	add	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	4423      	add	r3, r4
 8009a62:	332e      	adds	r3, #46	@ 0x2e
 8009a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009a68:	b21b      	sxth	r3, r3
 8009a6a:	17da      	asrs	r2, r3, #31
 8009a6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a6e:	657a      	str	r2, [r7, #84]	@ 0x54
 8009a70:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8009a74:	4623      	mov	r3, r4
 8009a76:	18c3      	adds	r3, r0, r3
 8009a78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a7a:	462b      	mov	r3, r5
 8009a7c:	eb41 0303 	adc.w	r3, r1, r3
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8009a86:	e9c7 3426 	strd	r3, r4, [r7, #152]	@ 0x98
		sum[2] += bias->buffer[i].z;
 8009a8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8009a8e:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009a90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009a94:	4613      	mov	r3, r2
 8009a96:	005b      	lsls	r3, r3, #1
 8009a98:	4413      	add	r3, r2
 8009a9a:	005b      	lsls	r3, r3, #1
 8009a9c:	4423      	add	r3, r4
 8009a9e:	3330      	adds	r3, #48	@ 0x30
 8009aa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009aa4:	b21b      	sxth	r3, r3
 8009aa6:	17da      	asrs	r2, r3, #31
 8009aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aaa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009aac:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8009ab0:	4623      	mov	r3, r4
 8009ab2:	18c3      	adds	r3, r0, r3
 8009ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	eb41 0303 	adc.w	r3, r1, r3
 8009abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009abe:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8009ac2:	e9c7 3428 	strd	r3, r4, [r7, #160]	@ 0xa0
		sumSq[0] += bias->buffer[i].x * bias->buffer[i].x;
 8009ac6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8009aca:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009acc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	4413      	add	r3, r2
 8009ad6:	005b      	lsls	r3, r3, #1
 8009ad8:	4423      	add	r3, r4
 8009ada:	332c      	adds	r3, #44	@ 0x2c
 8009adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ae0:	461d      	mov	r5, r3
 8009ae2:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009ae8:	4613      	mov	r3, r2
 8009aea:	005b      	lsls	r3, r3, #1
 8009aec:	4413      	add	r3, r2
 8009aee:	005b      	lsls	r3, r3, #1
 8009af0:	4423      	add	r3, r4
 8009af2:	332c      	adds	r3, #44	@ 0x2c
 8009af4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009af8:	fb05 f303 	mul.w	r3, r5, r3
 8009afc:	17da      	asrs	r2, r3, #31
 8009afe:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b00:	637a      	str	r2, [r7, #52]	@ 0x34
 8009b02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009b06:	4623      	mov	r3, r4
 8009b08:	18c3      	adds	r3, r0, r3
 8009b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b0c:	462b      	mov	r3, r5
 8009b0e:	eb41 0303 	adc.w	r3, r1, r3
 8009b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b14:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009b18:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
		sumSq[1] += bias->buffer[i].y * bias->buffer[i].y;
 8009b1c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b20:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009b22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b26:	4613      	mov	r3, r2
 8009b28:	005b      	lsls	r3, r3, #1
 8009b2a:	4413      	add	r3, r2
 8009b2c:	005b      	lsls	r3, r3, #1
 8009b2e:	4423      	add	r3, r4
 8009b30:	332e      	adds	r3, #46	@ 0x2e
 8009b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b36:	461d      	mov	r5, r3
 8009b38:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009b3a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b3e:	4613      	mov	r3, r2
 8009b40:	005b      	lsls	r3, r3, #1
 8009b42:	4413      	add	r3, r2
 8009b44:	005b      	lsls	r3, r3, #1
 8009b46:	4423      	add	r3, r4
 8009b48:	332e      	adds	r3, #46	@ 0x2e
 8009b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b4e:	fb05 f303 	mul.w	r3, r5, r3
 8009b52:	17da      	asrs	r2, r3, #31
 8009b54:	623b      	str	r3, [r7, #32]
 8009b56:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b58:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8009b5c:	4623      	mov	r3, r4
 8009b5e:	18c3      	adds	r3, r0, r3
 8009b60:	61bb      	str	r3, [r7, #24]
 8009b62:	462b      	mov	r3, r5
 8009b64:	eb41 0303 	adc.w	r3, r1, r3
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009b6e:	e9c7 3420 	strd	r3, r4, [r7, #128]	@ 0x80
		sumSq[2] += bias->buffer[i].z * bias->buffer[i].z;
 8009b72:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8009b76:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009b78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b7c:	4613      	mov	r3, r2
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	4413      	add	r3, r2
 8009b82:	005b      	lsls	r3, r3, #1
 8009b84:	4423      	add	r3, r4
 8009b86:	3330      	adds	r3, #48	@ 0x30
 8009b88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009b8c:	461d      	mov	r5, r3
 8009b8e:	6f7c      	ldr	r4, [r7, #116]	@ 0x74
 8009b90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009b94:	4613      	mov	r3, r2
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	4413      	add	r3, r2
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	4423      	add	r3, r4
 8009b9e:	3330      	adds	r3, #48	@ 0x30
 8009ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009ba4:	fb05 f303 	mul.w	r3, r5, r3
 8009ba8:	17da      	asrs	r2, r3, #31
 8009baa:	4698      	mov	r8, r3
 8009bac:	4691      	mov	r9, r2
 8009bae:	eb10 0a08 	adds.w	sl, r0, r8
 8009bb2:	eb41 0b09 	adc.w	fp, r1, r9
 8009bb6:	e9c7 ab22 	strd	sl, fp, [r7, #136]	@ 0x88
  for (i = 0; i < SENSORS_NBR_OF_BIAS_SAMPLES; i++)
 8009bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bcc:	f4ff af21 	bcc.w	8009a12 <sensorsCalculateVarianceAndMean+0x3a>

  }



  meanOut->x = (float) sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
 8009bd0:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8009bd4:	4610      	mov	r0, r2
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	f7f7 f890 	bl	8000cfc <__aeabi_l2f>
 8009bdc:	ee06 0a90 	vmov	s13, r0
 8009be0:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 8009d30 <sensorsCalculateVarianceAndMean+0x358>
 8009be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009be8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009bea:	edc3 7a00 	vstr	s15, [r3]
  meanOut->y = (float) sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
 8009bee:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8009bf2:	4610      	mov	r0, r2
 8009bf4:	4619      	mov	r1, r3
 8009bf6:	f7f7 f881 	bl	8000cfc <__aeabi_l2f>
 8009bfa:	ee06 0a90 	vmov	s13, r0
 8009bfe:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8009d30 <sensorsCalculateVarianceAndMean+0x358>
 8009c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c08:	edc3 7a01 	vstr	s15, [r3, #4]
  meanOut->z = (float) sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
 8009c0c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8009c10:	4610      	mov	r0, r2
 8009c12:	4619      	mov	r1, r3
 8009c14:	f7f7 f872 	bl	8000cfc <__aeabi_l2f>
 8009c18:	ee06 0a90 	vmov	s13, r0
 8009c1c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8009d30 <sensorsCalculateVarianceAndMean+0x358>
 8009c20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c26:	edc3 7a02 	vstr	s15, [r3, #8]

  varOut->x = sumSq[0] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->x * meanOut->x;
 8009c2a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	da08      	bge.n	8009c44 <sensorsCalculateVarianceAndMean+0x26c>
 8009c32:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009c36:	1851      	adds	r1, r2, r1
 8009c38:	6139      	str	r1, [r7, #16]
 8009c3a:	f143 0300 	adc.w	r3, r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f04f 0100 	mov.w	r1, #0
 8009c4c:	0a90      	lsrs	r0, r2, #10
 8009c4e:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8009c52:	1299      	asrs	r1, r3, #10
 8009c54:	4602      	mov	r2, r0
 8009c56:	460b      	mov	r3, r1
 8009c58:	4610      	mov	r0, r2
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	f7f7 f84e 	bl	8000cfc <__aeabi_l2f>
 8009c60:	ee06 0a90 	vmov	s13, r0
 8009c64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c66:	ed93 7a00 	vldr	s14, [r3]
 8009c6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c6c:	edd3 7a00 	vldr	s15, [r3]
 8009c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c74:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009c78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c7a:	edc3 7a00 	vstr	s15, [r3]
  varOut->y = sumSq[1] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->y * meanOut->y;
 8009c7e:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	da08      	bge.n	8009c98 <sensorsCalculateVarianceAndMean+0x2c0>
 8009c86:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009c8a:	1851      	adds	r1, r2, r1
 8009c8c:	60b9      	str	r1, [r7, #8]
 8009c8e:	f143 0300 	adc.w	r3, r3, #0
 8009c92:	60fb      	str	r3, [r7, #12]
 8009c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c98:	f04f 0000 	mov.w	r0, #0
 8009c9c:	f04f 0100 	mov.w	r1, #0
 8009ca0:	0a90      	lsrs	r0, r2, #10
 8009ca2:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8009ca6:	1299      	asrs	r1, r3, #10
 8009ca8:	4602      	mov	r2, r0
 8009caa:	460b      	mov	r3, r1
 8009cac:	4610      	mov	r0, r2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	f7f7 f824 	bl	8000cfc <__aeabi_l2f>
 8009cb4:	ee06 0a90 	vmov	s13, r0
 8009cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cba:	ed93 7a01 	vldr	s14, [r3, #4]
 8009cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8009cc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009ccc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cce:	edc3 7a01 	vstr	s15, [r3, #4]
  varOut->z = sumSq[2] / SENSORS_NBR_OF_BIAS_SAMPLES - meanOut->z * meanOut->z;
 8009cd2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	da08      	bge.n	8009cec <sensorsCalculateVarianceAndMean+0x314>
 8009cda:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009cde:	1851      	adds	r1, r2, r1
 8009ce0:	6039      	str	r1, [r7, #0]
 8009ce2:	f143 0300 	adc.w	r3, r3, #0
 8009ce6:	607b      	str	r3, [r7, #4]
 8009ce8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cec:	f04f 0000 	mov.w	r0, #0
 8009cf0:	f04f 0100 	mov.w	r1, #0
 8009cf4:	0a90      	lsrs	r0, r2, #10
 8009cf6:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8009cfa:	1299      	asrs	r1, r3, #10
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4610      	mov	r0, r2
 8009d02:	4619      	mov	r1, r3
 8009d04:	f7f6 fffa 	bl	8000cfc <__aeabi_l2f>
 8009d08:	ee06 0a90 	vmov	s13, r0
 8009d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009d12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d14:	edd3 7a02 	vldr	s15, [r3, #8]
 8009d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8009d20:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009d22:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8009d26:	bf00      	nop
 8009d28:	37b0      	adds	r7, #176	@ 0xb0
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d30:	44800000 	.word	0x44800000

08009d34 <sensorsAddBiasValue>:
  meanOut->x = sum[0] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->y = sum[1] / SENSORS_NBR_OF_BIAS_SAMPLES;
  meanOut->z = sum[2] / SENSORS_NBR_OF_BIAS_SAMPLES;
}
static void sensorsAddBiasValue(BiasObj* bias, int16_t x, int16_t y, int16_t z)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	4608      	mov	r0, r1
 8009d3e:	4611      	mov	r1, r2
 8009d40:	461a      	mov	r2, r3
 8009d42:	4603      	mov	r3, r0
 8009d44:	817b      	strh	r3, [r7, #10]
 8009d46:	460b      	mov	r3, r1
 8009d48:	813b      	strh	r3, [r7, #8]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	80fb      	strh	r3, [r7, #6]
  bias->bufHead->x = x;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d52:	897a      	ldrh	r2, [r7, #10]
 8009d54:	801a      	strh	r2, [r3, #0]
  bias->bufHead->y = y;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d5a:	893a      	ldrh	r2, [r7, #8]
 8009d5c:	805a      	strh	r2, [r3, #2]
  bias->bufHead->z = z;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d62:	88fa      	ldrh	r2, [r7, #6]
 8009d64:	809a      	strh	r2, [r3, #4]
  bias->bufHead++;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d6a:	1d9a      	adds	r2, r3, #6
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (bias->bufHead >= &bias->buffer[SENSORS_NBR_OF_BIAS_SAMPLES])
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f503 53c1 	add.w	r3, r3, #6176	@ 0x1820
 8009d7a:	330c      	adds	r3, #12
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d308      	bcc.n	8009d92 <sensorsAddBiasValue+0x5e>
  {
    bias->bufHead = bias->buffer;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	629a      	str	r2, [r3, #40]	@ 0x28
    bias->isBufferFilled = true;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  }
}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
	...

08009da0 <sensorsFindBiasValue>:
static bool sensorsFindBiasValue(BiasObj* bias)
{
 8009da0:	b590      	push	{r4, r7, lr}
 8009da2:	b085      	sub	sp, #20
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  static int32_t varianceSampleTime;
  bool foundBias = false;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]

  if (bias->isBufferFilled)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d047      	beq.n	8009e46 <sensorsFindBiasValue+0xa6>
  {
    sensorsCalculateVarianceAndMean(bias, &bias->variance, &bias->mean);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f103 010c 	add.w	r1, r3, #12
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3318      	adds	r3, #24
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f7ff fe08 	bl	80099d8 <sensorsCalculateVarianceAndMean>

    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	edd3 7a03 	vldr	s15, [r3, #12]
 8009dce:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8009e50 <sensorsFindBiasValue+0xb0>
 8009dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dda:	d534      	bpl.n	8009e46 <sensorsFindBiasValue+0xa6>
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	edd3 7a04 	vldr	s15, [r3, #16]
    if (bias->variance.x < GYRO_VARIANCE_THRESHOLD_X &&
 8009de2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8009e50 <sensorsFindBiasValue+0xb0>
 8009de6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dee:	d52a      	bpl.n	8009e46 <sensorsFindBiasValue+0xa6>
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	edd3 7a05 	vldr	s15, [r3, #20]
        bias->variance.y < GYRO_VARIANCE_THRESHOLD_Y &&
 8009df6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8009e50 <sensorsFindBiasValue+0xb0>
 8009dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e02:	d520      	bpl.n	8009e46 <sensorsFindBiasValue+0xa6>
        (varianceSampleTime + GYRO_MIN_BIAS_TIMEOUT_MS < xTaskGetTickCount()))
 8009e04:	4b13      	ldr	r3, [pc, #76]	@ (8009e54 <sensorsFindBiasValue+0xb4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f503 747a 	add.w	r4, r3, #1000	@ 0x3e8
 8009e0c:	f7fb fe64 	bl	8005ad8 <xTaskGetTickCount>
 8009e10:	4603      	mov	r3, r0
        bias->variance.z < GYRO_VARIANCE_THRESHOLD_Z &&
 8009e12:	429c      	cmp	r4, r3
 8009e14:	d217      	bcs.n	8009e46 <sensorsFindBiasValue+0xa6>
    {
      varianceSampleTime = xTaskGetTickCount();
 8009e16:	f7fb fe5f 	bl	8005ad8 <xTaskGetTickCount>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009e54 <sensorsFindBiasValue+0xb4>)
 8009e20:	601a      	str	r2, [r3, #0]
      bias->bias.x = bias->mean.x;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	699a      	ldr	r2, [r3, #24]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	601a      	str	r2, [r3, #0]
      bias->bias.y = bias->mean.y;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	69da      	ldr	r2, [r3, #28]
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	605a      	str	r2, [r3, #4]
      bias->bias.z = bias->mean.z;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	6a1a      	ldr	r2, [r3, #32]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	609a      	str	r2, [r3, #8]
      foundBias = true;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	73fb      	strb	r3, [r7, #15]
      bias->isBiasValueFound = true;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    }
  }

  return foundBias;
 8009e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd90      	pop	{r4, r7, pc}
 8009e50:	42480000 	.word	0x42480000
 8009e54:	20008470 	.word	0x20008470

08009e58 <sensorsMpu6500Bmp280ManufacturingTest>:

bool sensorsMpu6500Bmp280ManufacturingTest(void)
{
 8009e58:	b590      	push	{r4, r7, lr}
 8009e5a:	ed2d 8b02 	vpush	{d8}
 8009e5e:	b08f      	sub	sp, #60	@ 0x3c
 8009e60:	af02      	add	r7, sp, #8
	bool testStatus = false;
 8009e62:	2300      	movs	r3, #0
 8009e64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	Axis3i16 g;
	Axis3i16 a;
	Axis3f acc;  // Accelerometer axis data in mG
	float pitch, roll;
	uint32_t startTick = xTaskGetTickCount();
 8009e68:	f7fb fe36 	bl	8005ad8 <xTaskGetTickCount>
 8009e6c:	62b8      	str	r0, [r7, #40]	@ 0x28

	testStatus = mpu6500SelfTest();
 8009e6e:	f7fe fb7b 	bl	8008568 <mpu6500SelfTest>
 8009e72:	4603      	mov	r3, r0
 8009e74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (testStatus)
 8009e78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f000 80bc 	beq.w	8009ffa <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
	{
		sensorsBiasObjInit(&gyroBiasRunning);
 8009e82:	4862      	ldr	r0, [pc, #392]	@ (800a00c <sensorsMpu6500Bmp280ManufacturingTest+0x1b4>)
 8009e84:	f7ff fd94 	bl	80099b0 <sensorsBiasObjInit>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 8009e88:	e024      	b.n	8009ed4 <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
		{
			mpu6500GetMotion6(&a.y, &a.x, &a.z, &g.y, &g.x, &g.z);
 8009e8a:	f107 0318 	add.w	r3, r7, #24
 8009e8e:	1c9c      	adds	r4, r3, #2
 8009e90:	f107 0310 	add.w	r3, r7, #16
 8009e94:	1d1a      	adds	r2, r3, #4
 8009e96:	f107 0110 	add.w	r1, r7, #16
 8009e9a:	f107 0310 	add.w	r3, r7, #16
 8009e9e:	1c98      	adds	r0, r3, #2
 8009ea0:	f107 0318 	add.w	r3, r7, #24
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	f107 0318 	add.w	r3, r7, #24
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	4623      	mov	r3, r4
 8009eb0:	f7fe fbfc 	bl	80086ac <mpu6500GetMotion6>
			if (processGyroBias(g.x, g.y, g.z, &gyroBias))
 8009eb4:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8009eb8:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 8009ebc:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8009ec0:	4b53      	ldr	r3, [pc, #332]	@ (800a010 <sensorsMpu6500Bmp280ManufacturingTest+0x1b8>)
 8009ec2:	f7ff fd41 	bl	8009948 <processGyroBias>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d003      	beq.n	8009ed4 <sensorsMpu6500Bmp280ManufacturingTest+0x7c>
			{
				gyroBiasFound = true;
 8009ecc:	4b51      	ldr	r3, [pc, #324]	@ (800a014 <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 8009ece:	2201      	movs	r2, #1
 8009ed0:	701a      	strb	r2, [r3, #0]
				break;
 8009ed2:	e007      	b.n	8009ee4 <sensorsMpu6500Bmp280ManufacturingTest+0x8c>
		while (xTaskGetTickCount() - startTick < SENSORS_VARIANCE_MAN_TEST_TIMEOUT)
 8009ed4:	f7fb fe00 	bl	8005ad8 <xTaskGetTickCount>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8009ee2:	d3d2      	bcc.n	8009e8a <sensorsMpu6500Bmp280ManufacturingTest+0x32>
			}
		}

		if (gyroBiasFound) {
 8009ee4:	4b4b      	ldr	r3, [pc, #300]	@ (800a014 <sensorsMpu6500Bmp280ManufacturingTest+0x1bc>)
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f000 8083 	beq.w	8009ff4 <sensorsMpu6500Bmp280ManufacturingTest+0x19c>
			acc.x = -(a.x) * SENSORS_G_PER_LSB_CFG;
 8009eee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009ef2:	425b      	negs	r3, r3
 8009ef4:	ee07 3a90 	vmov	s15, r3
 8009ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009efc:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800a018 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 8009f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f04:	edc7 7a01 	vstr	s15, [r7, #4]
			acc.y = (a.y) * SENSORS_G_PER_LSB_CFG;
 8009f08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009f0c:	ee07 3a90 	vmov	s15, r3
 8009f10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f14:	ed9f 7a40 	vldr	s14, [pc, #256]	@ 800a018 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 8009f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f1c:	edc7 7a02 	vstr	s15, [r7, #8]
			acc.z = (a.z) * SENSORS_G_PER_LSB_CFG;
 8009f20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009f24:	ee07 3a90 	vmov	s15, r3
 8009f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f2c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a018 <sensorsMpu6500Bmp280ManufacturingTest+0x1c0>
 8009f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f34:	edc7 7a03 	vstr	s15, [r7, #12]

			// Calculate pitch and roll based on accelerometer. Board must be level
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 8009f38:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f3c:	eeb1 8a67 	vneg.f32	s16, s15
 8009f40:	ed97 7a02 	vldr	s14, [r7, #8]
 8009f44:	edd7 7a02 	vldr	s15, [r7, #8]
 8009f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009f4c:	edd7 6a03 	vldr	s13, [r7, #12]
 8009f50:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009f58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f60:	f00c fb32 	bl	80165c8 <sqrtf>
 8009f64:	eeb0 7a40 	vmov.f32	s14, s0
 8009f68:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8009f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f70:	f00c fbda 	bl	8016728 <tanf>
 8009f74:	eef0 7a40 	vmov.f32	s15, s0
					* 180/(float) M_PI;
 8009f78:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800a01c <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 8009f7c:	ee27 7a87 	vmul.f32	s14, s15, s14
			pitch = tanf(-acc.x / (sqrtf(acc.y * acc.y + acc.z * acc.z)))
 8009f80:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a020 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 8009f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009f88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
			roll = tanf(acc.y / acc.z) * 180 / (float) M_PI;
 8009f8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8009f94:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8009f98:	eeb0 0a66 	vmov.f32	s0, s13
 8009f9c:	f00c fbc4 	bl	8016728 <tanf>
 8009fa0:	eef0 7a40 	vmov.f32	s15, s0
 8009fa4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800a01c <sensorsMpu6500Bmp280ManufacturingTest+0x1c4>
 8009fa8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009fac:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800a020 <sensorsMpu6500Bmp280ManufacturingTest+0x1c8>
 8009fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fb4:	edc7 7a08 	vstr	s15, [r7, #32]

			if ((fabsf(roll) < SENSORS_MAN_TEST_LEVEL_MAX) && (fabsf(pitch) < SENSORS_MAN_TEST_LEVEL_MAX))
 8009fb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8009fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8009fc0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fcc:	d50e      	bpl.n	8009fec <sensorsMpu6500Bmp280ManufacturingTest+0x194>
 8009fce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009fd2:	eef0 7ae7 	vabs.f32	s15, s15
 8009fd6:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8009fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fe2:	d503      	bpl.n	8009fec <sensorsMpu6500Bmp280ManufacturingTest+0x194>
			{
				testStatus = true;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009fea:	e006      	b.n	8009ffa <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
			else
			{
				testStatus = false;
 8009fec:	2300      	movs	r3, #0
 8009fee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009ff2:	e002      	b.n	8009ffa <sensorsMpu6500Bmp280ManufacturingTest+0x1a2>
			}
		} else {

			testStatus = false;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
	}

	return testStatus;
 8009ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f

}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3734      	adds	r7, #52	@ 0x34
 800a002:	46bd      	mov	sp, r7
 800a004:	ecbd 8b02 	vpop	{d8}
 800a008:	bd90      	pop	{r4, r7, pc}
 800a00a:	bf00      	nop
 800a00c:	10000514 	.word	0x10000514
 800a010:	20007e70 	.word	0x20007e70
 800a014:	20007e88 	.word	0x20007e88
 800a018:	3a000000 	.word	0x3a000000
 800a01c:	43340000 	.word	0x43340000
 800a020:	40490fdb 	.word	0x40490fdb

0800a024 <sensorsAlignToAirframe>:
	}

}

static void sensorsAlignToAirframe(Axis3f* in, Axis3f* out)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b082      	sub	sp, #8
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
  // IMU alignment
  static float sphi, cphi, stheta, ctheta, spsi, cpsi;

  sphi   = sinf(imuPhi * (float) M_PI / 180);
 800a02e:	4bba      	ldr	r3, [pc, #744]	@ (800a318 <sensorsAlignToAirframe+0x2f4>)
 800a030:	edd3 7a00 	vldr	s15, [r3]
 800a034:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 800a31c <sensorsAlignToAirframe+0x2f8>
 800a038:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a03c:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 800a320 <sensorsAlignToAirframe+0x2fc>
 800a040:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a044:	eeb0 0a47 	vmov.f32	s0, s14
 800a048:	f00c fb28 	bl	801669c <sinf>
 800a04c:	eef0 7a40 	vmov.f32	s15, s0
 800a050:	4bb4      	ldr	r3, [pc, #720]	@ (800a324 <sensorsAlignToAirframe+0x300>)
 800a052:	edc3 7a00 	vstr	s15, [r3]
  cphi   = cosf(imuPhi * (float) M_PI / 180);
 800a056:	4bb0      	ldr	r3, [pc, #704]	@ (800a318 <sensorsAlignToAirframe+0x2f4>)
 800a058:	edd3 7a00 	vldr	s15, [r3]
 800a05c:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 800a31c <sensorsAlignToAirframe+0x2f8>
 800a060:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a064:	eddf 6aae 	vldr	s13, [pc, #696]	@ 800a320 <sensorsAlignToAirframe+0x2fc>
 800a068:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a06c:	eeb0 0a47 	vmov.f32	s0, s14
 800a070:	f00c fac8 	bl	8016604 <cosf>
 800a074:	eef0 7a40 	vmov.f32	s15, s0
 800a078:	4bab      	ldr	r3, [pc, #684]	@ (800a328 <sensorsAlignToAirframe+0x304>)
 800a07a:	edc3 7a00 	vstr	s15, [r3]
  stheta = sinf(imuTheta * (float) M_PI / 180);
 800a07e:	4bab      	ldr	r3, [pc, #684]	@ (800a32c <sensorsAlignToAirframe+0x308>)
 800a080:	edd3 7a00 	vldr	s15, [r3]
 800a084:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 800a31c <sensorsAlignToAirframe+0x2f8>
 800a088:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a08c:	eddf 6aa4 	vldr	s13, [pc, #656]	@ 800a320 <sensorsAlignToAirframe+0x2fc>
 800a090:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a094:	eeb0 0a47 	vmov.f32	s0, s14
 800a098:	f00c fb00 	bl	801669c <sinf>
 800a09c:	eef0 7a40 	vmov.f32	s15, s0
 800a0a0:	4ba3      	ldr	r3, [pc, #652]	@ (800a330 <sensorsAlignToAirframe+0x30c>)
 800a0a2:	edc3 7a00 	vstr	s15, [r3]
  ctheta = cosf(imuTheta * (float) M_PI / 180);
 800a0a6:	4ba1      	ldr	r3, [pc, #644]	@ (800a32c <sensorsAlignToAirframe+0x308>)
 800a0a8:	edd3 7a00 	vldr	s15, [r3]
 800a0ac:	ed9f 7a9b 	vldr	s14, [pc, #620]	@ 800a31c <sensorsAlignToAirframe+0x2f8>
 800a0b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0b4:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800a320 <sensorsAlignToAirframe+0x2fc>
 800a0b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0bc:	eeb0 0a47 	vmov.f32	s0, s14
 800a0c0:	f00c faa0 	bl	8016604 <cosf>
 800a0c4:	eef0 7a40 	vmov.f32	s15, s0
 800a0c8:	4b9a      	ldr	r3, [pc, #616]	@ (800a334 <sensorsAlignToAirframe+0x310>)
 800a0ca:	edc3 7a00 	vstr	s15, [r3]
  spsi   = sinf(imuPsi * (float) M_PI / 180);
 800a0ce:	4b9a      	ldr	r3, [pc, #616]	@ (800a338 <sensorsAlignToAirframe+0x314>)
 800a0d0:	edd3 7a00 	vldr	s15, [r3]
 800a0d4:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 800a31c <sensorsAlignToAirframe+0x2f8>
 800a0d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a0dc:	eddf 6a90 	vldr	s13, [pc, #576]	@ 800a320 <sensorsAlignToAirframe+0x2fc>
 800a0e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0e4:	eeb0 0a47 	vmov.f32	s0, s14
 800a0e8:	f00c fad8 	bl	801669c <sinf>
 800a0ec:	eef0 7a40 	vmov.f32	s15, s0
 800a0f0:	4b92      	ldr	r3, [pc, #584]	@ (800a33c <sensorsAlignToAirframe+0x318>)
 800a0f2:	edc3 7a00 	vstr	s15, [r3]
  cpsi   = cosf(imuPsi * (float) M_PI / 180);
 800a0f6:	4b90      	ldr	r3, [pc, #576]	@ (800a338 <sensorsAlignToAirframe+0x314>)
 800a0f8:	edd3 7a00 	vldr	s15, [r3]
 800a0fc:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 800a31c <sensorsAlignToAirframe+0x2f8>
 800a100:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a104:	eddf 6a86 	vldr	s13, [pc, #536]	@ 800a320 <sensorsAlignToAirframe+0x2fc>
 800a108:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a10c:	eeb0 0a47 	vmov.f32	s0, s14
 800a110:	f00c fa78 	bl	8016604 <cosf>
 800a114:	eef0 7a40 	vmov.f32	s15, s0
 800a118:	4b89      	ldr	r3, [pc, #548]	@ (800a340 <sensorsAlignToAirframe+0x31c>)
 800a11a:	edc3 7a00 	vstr	s15, [r3]

  // tait-bryan passive rotation in order: yaw, psi (1) -> pitch, theta (2) ->  roll, phi (3) [https://en.wikipedia.org/wiki/Euler_angles#cite_note-3]
  // mathematically R = R_x(phi)^T . R_y(theta)^T . R_z(psi)^T  [http://eecs.qmul.ac.uk/~gslabaugh/publications/euler.pdf]
  // transpose because it's a passive rotation not active [https://en.wikipedia.org/wiki/Active_and_passive_transformation]
  R[0][0] = ctheta * cpsi;
 800a11e:	4b85      	ldr	r3, [pc, #532]	@ (800a334 <sensorsAlignToAirframe+0x310>)
 800a120:	ed93 7a00 	vldr	s14, [r3]
 800a124:	4b86      	ldr	r3, [pc, #536]	@ (800a340 <sensorsAlignToAirframe+0x31c>)
 800a126:	edd3 7a00 	vldr	s15, [r3]
 800a12a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a12e:	4b85      	ldr	r3, [pc, #532]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a130:	edc3 7a00 	vstr	s15, [r3]
  R[0][1] = ctheta * spsi;
 800a134:	4b7f      	ldr	r3, [pc, #508]	@ (800a334 <sensorsAlignToAirframe+0x310>)
 800a136:	ed93 7a00 	vldr	s14, [r3]
 800a13a:	4b80      	ldr	r3, [pc, #512]	@ (800a33c <sensorsAlignToAirframe+0x318>)
 800a13c:	edd3 7a00 	vldr	s15, [r3]
 800a140:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a144:	4b7f      	ldr	r3, [pc, #508]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a146:	edc3 7a01 	vstr	s15, [r3, #4]
  R[0][2] = -stheta;
 800a14a:	4b79      	ldr	r3, [pc, #484]	@ (800a330 <sensorsAlignToAirframe+0x30c>)
 800a14c:	edd3 7a00 	vldr	s15, [r3]
 800a150:	eef1 7a67 	vneg.f32	s15, s15
 800a154:	4b7b      	ldr	r3, [pc, #492]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a156:	edc3 7a02 	vstr	s15, [r3, #8]
  R[1][0] = sphi * stheta * cpsi - cphi * spsi;
 800a15a:	4b72      	ldr	r3, [pc, #456]	@ (800a324 <sensorsAlignToAirframe+0x300>)
 800a15c:	ed93 7a00 	vldr	s14, [r3]
 800a160:	4b73      	ldr	r3, [pc, #460]	@ (800a330 <sensorsAlignToAirframe+0x30c>)
 800a162:	edd3 7a00 	vldr	s15, [r3]
 800a166:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a16a:	4b75      	ldr	r3, [pc, #468]	@ (800a340 <sensorsAlignToAirframe+0x31c>)
 800a16c:	edd3 7a00 	vldr	s15, [r3]
 800a170:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a174:	4b6c      	ldr	r3, [pc, #432]	@ (800a328 <sensorsAlignToAirframe+0x304>)
 800a176:	edd3 6a00 	vldr	s13, [r3]
 800a17a:	4b70      	ldr	r3, [pc, #448]	@ (800a33c <sensorsAlignToAirframe+0x318>)
 800a17c:	edd3 7a00 	vldr	s15, [r3]
 800a180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a188:	4b6e      	ldr	r3, [pc, #440]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a18a:	edc3 7a03 	vstr	s15, [r3, #12]
  R[1][1] = sphi * stheta * spsi + cphi * cpsi;
 800a18e:	4b65      	ldr	r3, [pc, #404]	@ (800a324 <sensorsAlignToAirframe+0x300>)
 800a190:	ed93 7a00 	vldr	s14, [r3]
 800a194:	4b66      	ldr	r3, [pc, #408]	@ (800a330 <sensorsAlignToAirframe+0x30c>)
 800a196:	edd3 7a00 	vldr	s15, [r3]
 800a19a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a19e:	4b67      	ldr	r3, [pc, #412]	@ (800a33c <sensorsAlignToAirframe+0x318>)
 800a1a0:	edd3 7a00 	vldr	s15, [r3]
 800a1a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1a8:	4b5f      	ldr	r3, [pc, #380]	@ (800a328 <sensorsAlignToAirframe+0x304>)
 800a1aa:	edd3 6a00 	vldr	s13, [r3]
 800a1ae:	4b64      	ldr	r3, [pc, #400]	@ (800a340 <sensorsAlignToAirframe+0x31c>)
 800a1b0:	edd3 7a00 	vldr	s15, [r3]
 800a1b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a1b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1bc:	4b61      	ldr	r3, [pc, #388]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a1be:	edc3 7a04 	vstr	s15, [r3, #16]
  R[1][2] = sphi * ctheta;
 800a1c2:	4b58      	ldr	r3, [pc, #352]	@ (800a324 <sensorsAlignToAirframe+0x300>)
 800a1c4:	ed93 7a00 	vldr	s14, [r3]
 800a1c8:	4b5a      	ldr	r3, [pc, #360]	@ (800a334 <sensorsAlignToAirframe+0x310>)
 800a1ca:	edd3 7a00 	vldr	s15, [r3]
 800a1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a1d2:	4b5c      	ldr	r3, [pc, #368]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a1d4:	edc3 7a05 	vstr	s15, [r3, #20]
  R[2][0] = cphi * stheta * cpsi + sphi * spsi;
 800a1d8:	4b53      	ldr	r3, [pc, #332]	@ (800a328 <sensorsAlignToAirframe+0x304>)
 800a1da:	ed93 7a00 	vldr	s14, [r3]
 800a1de:	4b54      	ldr	r3, [pc, #336]	@ (800a330 <sensorsAlignToAirframe+0x30c>)
 800a1e0:	edd3 7a00 	vldr	s15, [r3]
 800a1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1e8:	4b55      	ldr	r3, [pc, #340]	@ (800a340 <sensorsAlignToAirframe+0x31c>)
 800a1ea:	edd3 7a00 	vldr	s15, [r3]
 800a1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1f2:	4b4c      	ldr	r3, [pc, #304]	@ (800a324 <sensorsAlignToAirframe+0x300>)
 800a1f4:	edd3 6a00 	vldr	s13, [r3]
 800a1f8:	4b50      	ldr	r3, [pc, #320]	@ (800a33c <sensorsAlignToAirframe+0x318>)
 800a1fa:	edd3 7a00 	vldr	s15, [r3]
 800a1fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a202:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a206:	4b4f      	ldr	r3, [pc, #316]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a208:	edc3 7a06 	vstr	s15, [r3, #24]
  R[2][1] = cphi * stheta * spsi - sphi * cpsi;
 800a20c:	4b46      	ldr	r3, [pc, #280]	@ (800a328 <sensorsAlignToAirframe+0x304>)
 800a20e:	ed93 7a00 	vldr	s14, [r3]
 800a212:	4b47      	ldr	r3, [pc, #284]	@ (800a330 <sensorsAlignToAirframe+0x30c>)
 800a214:	edd3 7a00 	vldr	s15, [r3]
 800a218:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a21c:	4b47      	ldr	r3, [pc, #284]	@ (800a33c <sensorsAlignToAirframe+0x318>)
 800a21e:	edd3 7a00 	vldr	s15, [r3]
 800a222:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a226:	4b3f      	ldr	r3, [pc, #252]	@ (800a324 <sensorsAlignToAirframe+0x300>)
 800a228:	edd3 6a00 	vldr	s13, [r3]
 800a22c:	4b44      	ldr	r3, [pc, #272]	@ (800a340 <sensorsAlignToAirframe+0x31c>)
 800a22e:	edd3 7a00 	vldr	s15, [r3]
 800a232:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a236:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a23a:	4b42      	ldr	r3, [pc, #264]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a23c:	edc3 7a07 	vstr	s15, [r3, #28]
  R[2][2] = cphi * ctheta;
 800a240:	4b39      	ldr	r3, [pc, #228]	@ (800a328 <sensorsAlignToAirframe+0x304>)
 800a242:	ed93 7a00 	vldr	s14, [r3]
 800a246:	4b3b      	ldr	r3, [pc, #236]	@ (800a334 <sensorsAlignToAirframe+0x310>)
 800a248:	edd3 7a00 	vldr	s15, [r3]
 800a24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a250:	4b3c      	ldr	r3, [pc, #240]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a252:	edc3 7a08 	vstr	s15, [r3, #32]

  out->x = in->x*R[0][0] + in->y*R[0][1] + in->z*R[0][2];
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	ed93 7a00 	vldr	s14, [r3]
 800a25c:	4b39      	ldr	r3, [pc, #228]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a25e:	edd3 7a00 	vldr	s15, [r3]
 800a262:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	edd3 6a01 	vldr	s13, [r3, #4]
 800a26c:	4b35      	ldr	r3, [pc, #212]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a26e:	edd3 7a01 	vldr	s15, [r3, #4]
 800a272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	edd3 6a02 	vldr	s13, [r3, #8]
 800a280:	4b30      	ldr	r3, [pc, #192]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a282:	edd3 7a02 	vldr	s15, [r3, #8]
 800a286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a28a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	edc3 7a00 	vstr	s15, [r3]
  out->y = in->x*R[1][0] + in->y*R[1][1] + in->z*R[1][2];
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	ed93 7a00 	vldr	s14, [r3]
 800a29a:	4b2a      	ldr	r3, [pc, #168]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a29c:	edd3 7a03 	vldr	s15, [r3, #12]
 800a2a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	edd3 6a01 	vldr	s13, [r3, #4]
 800a2aa:	4b26      	ldr	r3, [pc, #152]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a2ac:	edd3 7a04 	vldr	s15, [r3, #16]
 800a2b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	edd3 6a02 	vldr	s13, [r3, #8]
 800a2be:	4b21      	ldr	r3, [pc, #132]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a2c0:	edd3 7a05 	vldr	s15, [r3, #20]
 800a2c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = in->x*R[2][0] + in->y*R[2][1] + in->z*R[2][2];
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	ed93 7a00 	vldr	s14, [r3]
 800a2d8:	4b1a      	ldr	r3, [pc, #104]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a2da:	edd3 7a06 	vldr	s15, [r3, #24]
 800a2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	edd3 6a01 	vldr	s13, [r3, #4]
 800a2e8:	4b16      	ldr	r3, [pc, #88]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a2ea:	edd3 7a07 	vldr	s15, [r3, #28]
 800a2ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a2f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	edd3 6a02 	vldr	s13, [r3, #8]
 800a2fc:	4b11      	ldr	r3, [pc, #68]	@ (800a344 <sensorsAlignToAirframe+0x320>)
 800a2fe:	edd3 7a08 	vldr	s15, [r3, #32]
 800a302:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	20007f3c 	.word	0x20007f3c
 800a31c:	40490fdb 	.word	0x40490fdb
 800a320:	43340000 	.word	0x43340000
 800a324:	20008474 	.word	0x20008474
 800a328:	20008478 	.word	0x20008478
 800a32c:	20007f40 	.word	0x20007f40
 800a330:	2000847c 	.word	0x2000847c
 800a334:	20008480 	.word	0x20008480
 800a338:	20007f44 	.word	0x20007f44
 800a33c:	20008484 	.word	0x20008484
 800a340:	20008488 	.word	0x20008488
 800a344:	20007f48 	.word	0x20007f48

0800a348 <sensorsMpu6500Bmp280SetAccMode>:
//  out->x = ry.x;
//  out->y = ry.y;
//  out->z = ry.z;
//}
void sensorsMpu6500Bmp280SetAccMode(accModes accMode)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4603      	mov	r3, r0
 800a350:	71fb      	strb	r3, [r7, #7]
  switch (accMode)
 800a352:	79fb      	ldrb	r3, [r7, #7]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d11a      	bne.n	800a38e <sensorsMpu6500Bmp280SetAccMode+0x46>
  {
    case ACC_MODE_PROPTEST:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_460);
 800a358:	2000      	movs	r0, #0
 800a35a:	f7fe f979 	bl	8008650 <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800a35e:	2300      	movs	r3, #0
 800a360:	73fb      	strb	r3, [r7, #15]
 800a362:	e010      	b.n	800a386 <sensorsMpu6500Bmp280SetAccMode+0x3e>
      {
        lpf2pInit(&accLpf[i],  1000, 500);
 800a364:	7bfa      	ldrb	r2, [r7, #15]
 800a366:	4613      	mov	r3, r2
 800a368:	00db      	lsls	r3, r3, #3
 800a36a:	1a9b      	subs	r3, r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4a17      	ldr	r2, [pc, #92]	@ (800a3cc <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800a370:	4413      	add	r3, r2
 800a372:	eddf 0a17 	vldr	s1, [pc, #92]	@ 800a3d0 <sensorsMpu6500Bmp280SetAccMode+0x88>
 800a376:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800a3d4 <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800a37a:	4618      	mov	r0, r3
 800a37c:	f006 fd62 	bl	8010e44 <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800a380:	7bfb      	ldrb	r3, [r7, #15]
 800a382:	3301      	adds	r3, #1
 800a384:	73fb      	strb	r3, [r7, #15]
 800a386:	7bfb      	ldrb	r3, [r7, #15]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d9eb      	bls.n	800a364 <sensorsMpu6500Bmp280SetAccMode+0x1c>
      }
      break;
 800a38c:	e01a      	b.n	800a3c4 <sensorsMpu6500Bmp280SetAccMode+0x7c>
    case ACC_MODE_FLIGHT:
    default:
    	mpu6500SetAccelDLPF(MPU6500_ACCEL_DLPF_BW_44);
 800a38e:	2003      	movs	r0, #3
 800a390:	f7fe f95e 	bl	8008650 <mpu6500SetAccelDLPF>
      for (uint8_t i = 0; i < 3; i++)
 800a394:	2300      	movs	r3, #0
 800a396:	73bb      	strb	r3, [r7, #14]
 800a398:	e010      	b.n	800a3bc <sensorsMpu6500Bmp280SetAccMode+0x74>
      {
        lpf2pInit(&accLpf[i],  1000, ACCEL_LPF_CUTOFF_FREQ);
 800a39a:	7bba      	ldrb	r2, [r7, #14]
 800a39c:	4613      	mov	r3, r2
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	1a9b      	subs	r3, r3, r2
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	4a09      	ldr	r2, [pc, #36]	@ (800a3cc <sensorsMpu6500Bmp280SetAccMode+0x84>)
 800a3a6:	4413      	add	r3, r2
 800a3a8:	eef3 0a0e 	vmov.f32	s1, #62	@ 0x41f00000  30.0
 800a3ac:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800a3d4 <sensorsMpu6500Bmp280SetAccMode+0x8c>
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f006 fd47 	bl	8010e44 <lpf2pInit>
      for (uint8_t i = 0; i < 3; i++)
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	73bb      	strb	r3, [r7, #14]
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	2b02      	cmp	r3, #2
 800a3c0:	d9eb      	bls.n	800a39a <sensorsMpu6500Bmp280SetAccMode+0x52>
      }
      break;
 800a3c2:	bf00      	nop
  }
}
 800a3c4:	bf00      	nop
 800a3c6:	3710      	adds	r7, #16
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	20007e90 	.word	0x20007e90
 800a3d0:	43fa0000 	.word	0x43fa0000
 800a3d4:	447a0000 	.word	0x447a0000

0800a3d8 <applyAxis3fLpf>:
static void applyAxis3fLpf(lpf2pData *data, Axis3f* in)
{
 800a3d8:	b590      	push	{r4, r7, lr}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  for (uint8_t i = 0; i < 3; i++) {
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	73fb      	strb	r3, [r7, #15]
 800a3e6:	e01d      	b.n	800a424 <applyAxis3fLpf+0x4c>
    in->axis[i] = lpf2pApply(&data[i], in->axis[i]);
 800a3e8:	7bfa      	ldrb	r2, [r7, #15]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	1a9b      	subs	r3, r3, r2
 800a3f0:	009b      	lsls	r3, r3, #2
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	1899      	adds	r1, r3, r2
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4413      	add	r3, r2
 800a400:	edd3 7a00 	vldr	s15, [r3]
 800a404:	7bfc      	ldrb	r4, [r7, #15]
 800a406:	eeb0 0a67 	vmov.f32	s0, s15
 800a40a:	4608      	mov	r0, r1
 800a40c:	f006 fdb6 	bl	8010f7c <lpf2pApply>
 800a410:	eef0 7a40 	vmov.f32	s15, s0
 800a414:	683a      	ldr	r2, [r7, #0]
 800a416:	00a3      	lsls	r3, r4, #2
 800a418:	4413      	add	r3, r2
 800a41a:	edc3 7a00 	vstr	s15, [r3]
  for (uint8_t i = 0; i < 3; i++) {
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
 800a420:	3301      	adds	r3, #1
 800a422:	73fb      	strb	r3, [r7, #15]
 800a424:	7bfb      	ldrb	r3, [r7, #15]
 800a426:	2b02      	cmp	r3, #2
 800a428:	d9de      	bls.n	800a3e8 <applyAxis3fLpf+0x10>
  }
}
 800a42a:	bf00      	nop
 800a42c:	bf00      	nop
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	bd90      	pop	{r4, r7, pc}

0800a434 <EXTI1_IRQHandler>:
	return testStatus;

}

void __attribute__((used)) EXTI1_IRQHandler(void)
{
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0

	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800a43a:	2300      	movs	r3, #0
 800a43c:	607b      	str	r3, [r7, #4]
	imuIntTimestamp = usecTimestamp();
 800a43e:	f000 f8b3 	bl	800a5a8 <usecTimestamp>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	4913      	ldr	r1, [pc, #76]	@ (800a494 <EXTI1_IRQHandler+0x60>)
 800a448:	e9c1 2300 	strd	r2, r3, [r1]
    // Check if EXTI line 1 triggered the interrupt
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 800a44c:	4b12      	ldr	r3, [pc, #72]	@ (800a498 <EXTI1_IRQHandler+0x64>)
 800a44e:	695b      	ldr	r3, [r3, #20]
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <EXTI1_IRQHandler+0x38>
    {
        // Clear the interrupt flag
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 800a458:	4b0f      	ldr	r3, [pc, #60]	@ (800a498 <EXTI1_IRQHandler+0x64>)
 800a45a:	2202      	movs	r2, #2
 800a45c:	615a      	str	r2, [r3, #20]
    	xSemaphoreGiveFromISR(sensorsDataReady, &xHigherPriorityTaskWoken);
 800a45e:	4b0f      	ldr	r3, [pc, #60]	@ (800a49c <EXTI1_IRQHandler+0x68>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	1d3a      	adds	r2, r7, #4
 800a464:	4611      	mov	r1, r2
 800a466:	4618      	mov	r0, r3
 800a468:	f7fa fbc8 	bl	8004bfc <xQueueGiveFromISR>
    }

	intCounter++;
 800a46c:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a0 <EXTI1_IRQHandler+0x6c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3301      	adds	r3, #1
 800a472:	4a0b      	ldr	r2, [pc, #44]	@ (800a4a0 <EXTI1_IRQHandler+0x6c>)
 800a474:	6013      	str	r3, [r2, #0]
	if (xHigherPriorityTaskWoken) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d007      	beq.n	800a48c <EXTI1_IRQHandler+0x58>
		portYIELD();
 800a47c:	4b09      	ldr	r3, [pc, #36]	@ (800a4a4 <EXTI1_IRQHandler+0x70>)
 800a47e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a482:	601a      	str	r2, [r3, #0]
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	f3bf 8f6f 	isb	sy
	}

}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	20008490 	.word	0x20008490
 800a498:	40013c00 	.word	0x40013c00
 800a49c:	2000848c 	.word	0x2000848c
 800a4a0:	20008498 	.word	0x20008498
 800a4a4:	e000ed04 	.word	0xe000ed04

0800a4a8 <__NVIC_EnableIRQ>:
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b083      	sub	sp, #12
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	db0b      	blt.n	800a4d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4ba:	79fb      	ldrb	r3, [r7, #7]
 800a4bc:	f003 021f 	and.w	r2, r3, #31
 800a4c0:	4907      	ldr	r1, [pc, #28]	@ (800a4e0 <__NVIC_EnableIRQ+0x38>)
 800a4c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c6:	095b      	lsrs	r3, r3, #5
 800a4c8:	2001      	movs	r0, #1
 800a4ca:	fa00 f202 	lsl.w	r2, r0, r2
 800a4ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr
 800a4de:	bf00      	nop
 800a4e0:	e000e100 	.word	0xe000e100

0800a4e4 <__NVIC_SetPriority>:
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	4603      	mov	r3, r0
 800a4ec:	6039      	str	r1, [r7, #0]
 800a4ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	db0a      	blt.n	800a50e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	b2da      	uxtb	r2, r3
 800a4fc:	490c      	ldr	r1, [pc, #48]	@ (800a530 <__NVIC_SetPriority+0x4c>)
 800a4fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a502:	0112      	lsls	r2, r2, #4
 800a504:	b2d2      	uxtb	r2, r2
 800a506:	440b      	add	r3, r1
 800a508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a50c:	e00a      	b.n	800a524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	b2da      	uxtb	r2, r3
 800a512:	4908      	ldr	r1, [pc, #32]	@ (800a534 <__NVIC_SetPriority+0x50>)
 800a514:	79fb      	ldrb	r3, [r7, #7]
 800a516:	f003 030f 	and.w	r3, r3, #15
 800a51a:	3b04      	subs	r3, #4
 800a51c:	0112      	lsls	r2, r2, #4
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	440b      	add	r3, r1
 800a522:	761a      	strb	r2, [r3, #24]
}
 800a524:	bf00      	nop
 800a526:	370c      	adds	r7, #12
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	e000e100 	.word	0xe000e100
 800a534:	e000ed00 	.word	0xe000ed00

0800a538 <usecTimerInit>:
static bool isInit = false;

static uint32_t usecTimerHighCount;

void usecTimerInit(void)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	af00      	add	r7, sp, #0
  if (isInit) {
 800a53c:	4b16      	ldr	r3, [pc, #88]	@ (800a598 <usecTimerInit+0x60>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d126      	bne.n	800a592 <usecTimerInit+0x5a>
    return;
  }

  usecTimerHighCount = 0;
 800a544:	4b15      	ldr	r3, [pc, #84]	@ (800a59c <usecTimerInit+0x64>)
 800a546:	2200      	movs	r2, #0
 800a548:	601a      	str	r2, [r3, #0]

  // 1. Enable the clock for TIM7
  RCC->APB1ENR |= RCC_APB1ENR_TIM7EN;
 800a54a:	4b15      	ldr	r3, [pc, #84]	@ (800a5a0 <usecTimerInit+0x68>)
 800a54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a54e:	4a14      	ldr	r2, [pc, #80]	@ (800a5a0 <usecTimerInit+0x68>)
 800a550:	f043 0320 	orr.w	r3, r3, #32
 800a554:	6413      	str	r3, [r2, #64]	@ 0x40

  // 2. Set the prescaler value
  // Assuming the APB1 clock is 42 MHz (84 MHz/2) and you want a 1 kHz timer clock (1 ms per tick)
  TIM7->PSC = 41;  // Prescaler = 42000 - 1
 800a556:	4b13      	ldr	r3, [pc, #76]	@ (800a5a4 <usecTimerInit+0x6c>)
 800a558:	2229      	movs	r2, #41	@ 0x29
 800a55a:	629a      	str	r2, [r3, #40]	@ 0x28

  // 3. Set the auto-reload value
  TIM7->ARR = 999;  // 1000 ticks -> 1 second (1 ms per tick)
 800a55c:	4b11      	ldr	r3, [pc, #68]	@ (800a5a4 <usecTimerInit+0x6c>)
 800a55e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a562:	62da      	str	r2, [r3, #44]	@ 0x2c

  // 4. Enable the update interrupt (UIE)
  TIM7->DIER |= TIM_DIER_UIE;
 800a564:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a4 <usecTimerInit+0x6c>)
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	4a0e      	ldr	r2, [pc, #56]	@ (800a5a4 <usecTimerInit+0x6c>)
 800a56a:	f043 0301 	orr.w	r3, r3, #1
 800a56e:	60d3      	str	r3, [r2, #12]

  // 5. Enable the counter
  TIM7->CR1 |= TIM_CR1_CEN;
 800a570:	4b0c      	ldr	r3, [pc, #48]	@ (800a5a4 <usecTimerInit+0x6c>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a0b      	ldr	r2, [pc, #44]	@ (800a5a4 <usecTimerInit+0x6c>)
 800a576:	f043 0301 	orr.w	r3, r3, #1
 800a57a:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(TIM7_IRQn, 3);
 800a57c:	2103      	movs	r1, #3
 800a57e:	2037      	movs	r0, #55	@ 0x37
 800a580:	f7ff ffb0 	bl	800a4e4 <__NVIC_SetPriority>
  // 6. Enable TIM7 interrupt in NVIC
  NVIC_EnableIRQ(TIM7_IRQn);
 800a584:	2037      	movs	r0, #55	@ 0x37
 800a586:	f7ff ff8f 	bl	800a4a8 <__NVIC_EnableIRQ>
  isInit = true;
 800a58a:	4b03      	ldr	r3, [pc, #12]	@ (800a598 <usecTimerInit+0x60>)
 800a58c:	2201      	movs	r2, #1
 800a58e:	701a      	strb	r2, [r3, #0]
 800a590:	e000      	b.n	800a594 <usecTimerInit+0x5c>
    return;
 800a592:	bf00      	nop
}
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	2000849c 	.word	0x2000849c
 800a59c:	200084a0 	.word	0x200084a0
 800a5a0:	40023800 	.word	0x40023800
 800a5a4:	40001400 	.word	0x40001400

0800a5a8 <usecTimestamp>:

  TIM7->CNT = 0;
}

uint64_t usecTimestamp(void)
{
 800a5a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5ac:	b08c      	sub	sp, #48	@ 0x30
 800a5ae:	af00      	add	r7, sp, #0
  IF_DEBUG_ASSERT(isInit);
 800a5b0:	4b2b      	ldr	r3, [pc, #172]	@ (800a660 <usecTimestamp+0xb8>)
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d104      	bne.n	800a5c2 <usecTimestamp+0x1a>
 800a5b8:	224e      	movs	r2, #78	@ 0x4e
 800a5ba:	492a      	ldr	r1, [pc, #168]	@ (800a664 <usecTimestamp+0xbc>)
 800a5bc:	482a      	ldr	r0, [pc, #168]	@ (800a668 <usecTimestamp+0xc0>)
 800a5be:	f006 fc07 	bl	8010dd0 <assertFail>

  uint32_t high0;
  __atomic_load(&usecTimerHighCount, &high0, __ATOMIC_SEQ_CST);
 800a5c2:	4b2a      	ldr	r3, [pc, #168]	@ (800a66c <usecTimestamp+0xc4>)
 800a5c4:	f3bf 8f5b 	dmb	ish
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f3bf 8f5b 	dmb	ish
 800a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t low = TIM7->CNT;
 800a5d0:	4b27      	ldr	r3, [pc, #156]	@ (800a670 <usecTimestamp+0xc8>)
 800a5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t high;
  __atomic_load(&usecTimerHighCount, &high, __ATOMIC_SEQ_CST);
 800a5d6:	4b25      	ldr	r3, [pc, #148]	@ (800a66c <usecTimestamp+0xc4>)
 800a5d8:	f3bf 8f5b 	dmb	ish
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f3bf 8f5b 	dmb	ish
 800a5e2:	627b      	str	r3, [r7, #36]	@ 0x24

  // There was no increment in between
  if (high == high0)
 800a5e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d118      	bne.n	800a61e <usecTimestamp+0x76>
  {
    return (((uint64_t)high) << 16) + low;
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	61bb      	str	r3, [r7, #24]
 800a5f2:	61fa      	str	r2, [r7, #28]
 800a5f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a5fe:	460b      	mov	r3, r1
 800a600:	ea4f 4a03 	mov.w	sl, r3, lsl #16
 800a604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a606:	2200      	movs	r2, #0
 800a608:	613b      	str	r3, [r7, #16]
 800a60a:	617a      	str	r2, [r7, #20]
 800a60c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a610:	460b      	mov	r3, r1
 800a612:	eb1a 0403 	adds.w	r4, sl, r3
 800a616:	4613      	mov	r3, r2
 800a618:	eb4b 0503 	adc.w	r5, fp, r3
 800a61c:	e018      	b.n	800a650 <usecTimestamp+0xa8>
  }
  // There was an increment, but we don't expect another one soon
  return (((uint64_t)high) << 16) + TIM7->CNT;
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	2200      	movs	r2, #0
 800a622:	60bb      	str	r3, [r7, #8]
 800a624:	60fa      	str	r2, [r7, #12]
 800a626:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a62a:	460b      	mov	r3, r1
 800a62c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800a630:	460b      	mov	r3, r1
 800a632:	ea4f 4803 	mov.w	r8, r3, lsl #16
 800a636:	4b0e      	ldr	r3, [pc, #56]	@ (800a670 <usecTimestamp+0xc8>)
 800a638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63a:	2200      	movs	r2, #0
 800a63c:	603b      	str	r3, [r7, #0]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a644:	460b      	mov	r3, r1
 800a646:	eb18 0403 	adds.w	r4, r8, r3
 800a64a:	4613      	mov	r3, r2
 800a64c:	eb49 0503 	adc.w	r5, r9, r3
}
 800a650:	4622      	mov	r2, r4
 800a652:	462b      	mov	r3, r5
 800a654:	4610      	mov	r0, r2
 800a656:	4619      	mov	r1, r3
 800a658:	3730      	adds	r7, #48	@ 0x30
 800a65a:	46bd      	mov	sp, r7
 800a65c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a660:	2000849c 	.word	0x2000849c
 800a664:	08018f40 	.word	0x08018f40
 800a668:	08018f58 	.word	0x08018f58
 800a66c:	200084a0 	.word	0x200084a0
 800a670:	40001400 	.word	0x40001400

0800a674 <TIM7_IRQHandler>:

void TIM7_IRQHandler(void)
{
 800a674:	b480      	push	{r7}
 800a676:	af00      	add	r7, sp, #0

    if (TIM7->SR & TIM_SR_UIF) {
 800a678:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b4 <TIM7_IRQHandler+0x40>)
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	2b00      	cmp	r3, #0
 800a682:	d005      	beq.n	800a690 <TIM7_IRQHandler+0x1c>
        // Clear the update interrupt flag
        TIM7->SR &= ~TIM_SR_UIF;
 800a684:	4b0b      	ldr	r3, [pc, #44]	@ (800a6b4 <TIM7_IRQHandler+0x40>)
 800a686:	691b      	ldr	r3, [r3, #16]
 800a688:	4a0a      	ldr	r2, [pc, #40]	@ (800a6b4 <TIM7_IRQHandler+0x40>)
 800a68a:	f023 0301 	bic.w	r3, r3, #1
 800a68e:	6113      	str	r3, [r2, #16]
    }

  __sync_fetch_and_add(&usecTimerHighCount, 1);
 800a690:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <TIM7_IRQHandler+0x44>)
 800a692:	f3bf 8f5b 	dmb	ish
 800a696:	e853 1f00 	ldrex	r1, [r3]
 800a69a:	f101 0101 	add.w	r1, r1, #1
 800a69e:	e843 1200 	strex	r2, r1, [r3]
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	d1f7      	bne.n	800a696 <TIM7_IRQHandler+0x22>
 800a6a6:	f3bf 8f5b 	dmb	ish
}
 800a6aa:	bf00      	nop
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	40001400 	.word	0x40001400
 800a6b8:	200084a0 	.word	0x200084a0

0800a6bc <axis3fSubSamplerInit>:
 */

#include <string.h>
#include "axis3fSubSampler.h"

void axis3fSubSamplerInit(Axis3fSubSampler_t* this, const float conversionFactor) {
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b082      	sub	sp, #8
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	ed87 0a00 	vstr	s0, [r7]
  memset(this, 0, sizeof(Axis3fSubSampler_t));
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	2100      	movs	r1, #0
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f00b fe11 	bl	80162f4 <memset>
  this->conversionFactor = conversionFactor;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	683a      	ldr	r2, [r7, #0]
 800a6d6:	611a      	str	r2, [r3, #16]
}
 800a6d8:	bf00      	nop
 800a6da:	3708      	adds	r7, #8
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <axis3fSubSamplerAccumulate>:

void axis3fSubSamplerAccumulate(Axis3fSubSampler_t* this, const Axis3f* sample) {
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
 800a6e8:	6039      	str	r1, [r7, #0]
  this->sum.x += sample->x;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	ed93 7a00 	vldr	s14, [r3]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	edd3 7a00 	vldr	s15, [r3]
 800a6f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	edc3 7a00 	vstr	s15, [r3]
  this->sum.y += sample->y;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	ed93 7a01 	vldr	s14, [r3, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	edd3 7a01 	vldr	s15, [r3, #4]
 800a70c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	edc3 7a01 	vstr	s15, [r3, #4]
  this->sum.z += sample->z;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	ed93 7a02 	vldr	s14, [r3, #8]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	edd3 7a02 	vldr	s15, [r3, #8]
 800a722:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	edc3 7a02 	vstr	s15, [r3, #8]

  this->count++;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	1c5a      	adds	r2, r3, #1
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	60da      	str	r2, [r3, #12]
}
 800a736:	bf00      	nop
 800a738:	370c      	adds	r7, #12
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr

0800a742 <axis3fSubSamplerFinalize>:

Axis3f* axis3fSubSamplerFinalize(Axis3fSubSampler_t* this) {
 800a742:	b480      	push	{r7}
 800a744:	b087      	sub	sp, #28
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
  if (this->count > 0) {
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	68db      	ldr	r3, [r3, #12]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d041      	beq.n	800a7d6 <axis3fSubSamplerFinalize+0x94>
    this->subSample.x = this->sum.x * this->conversionFactor / this->count;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	ed93 7a00 	vldr	s14, [r3]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	edd3 7a04 	vldr	s15, [r3, #16]
 800a75e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	68db      	ldr	r3, [r3, #12]
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a76e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	edc3 7a05 	vstr	s15, [r3, #20]
    this->subSample.y = this->sum.y * this->conversionFactor / this->count;
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	ed93 7a01 	vldr	s14, [r3, #4]
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	edd3 7a04 	vldr	s15, [r3, #16]
 800a784:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68db      	ldr	r3, [r3, #12]
 800a78c:	ee07 3a90 	vmov	s15, r3
 800a790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	edc3 7a06 	vstr	s15, [r3, #24]
    this->subSample.z = this->sum.z * this->conversionFactor / this->count;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	edd3 7a04 	vldr	s15, [r3, #16]
 800a7aa:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a7ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	edc3 7a07 	vstr	s15, [r3, #28]

    // Reset
    this->count = 0;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	60da      	str	r2, [r3, #12]
    this->sum = (Axis3f){.axis={0}};
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	6053      	str	r3, [r2, #4]
 800a7d4:	6093      	str	r3, [r2, #8]
  }

  return &this->subSample;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3314      	adds	r3, #20
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	371c      	adds	r7, #28
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
	...

0800a7e8 <kalmanSupervisorIsStateWithinBounds>:

// The bounds on states, these shouldn't be hit...
float maxPosition = 100; //meters
float maxVelocity = 10; //meters per second

bool kalmanSupervisorIsStateWithinBounds(const kalmanCoreData_t* this) {
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  for (int i = 0; i < 3; i++) {
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]
 800a7f4:	e058      	b.n	800a8a8 <kalmanSupervisorIsStateWithinBounds+0xc0>
    if (maxPosition > 0.0f) {
 800a7f6:	4b31      	ldr	r3, [pc, #196]	@ (800a8bc <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800a7f8:	edd3 7a00 	vldr	s15, [r3]
 800a7fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a804:	dd21      	ble.n	800a84a <kalmanSupervisorIsStateWithinBounds+0x62>
      if (this->S[KC_STATE_X + i] > maxPosition) {
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	009b      	lsls	r3, r3, #2
 800a80c:	4413      	add	r3, r2
 800a80e:	ed93 7a00 	vldr	s14, [r3]
 800a812:	4b2a      	ldr	r3, [pc, #168]	@ (800a8bc <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800a814:	edd3 7a00 	vldr	s15, [r3]
 800a818:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a820:	dd01      	ble.n	800a826 <kalmanSupervisorIsStateWithinBounds+0x3e>
        return false;
 800a822:	2300      	movs	r3, #0
 800a824:	e044      	b.n	800a8b0 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_X + i] < -maxPosition) {
 800a826:	687a      	ldr	r2, [r7, #4]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	4413      	add	r3, r2
 800a82e:	ed93 7a00 	vldr	s14, [r3]
 800a832:	4b22      	ldr	r3, [pc, #136]	@ (800a8bc <kalmanSupervisorIsStateWithinBounds+0xd4>)
 800a834:	edd3 7a00 	vldr	s15, [r3]
 800a838:	eef1 7a67 	vneg.f32	s15, s15
 800a83c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a844:	d501      	bpl.n	800a84a <kalmanSupervisorIsStateWithinBounds+0x62>
        return false;
 800a846:	2300      	movs	r3, #0
 800a848:	e032      	b.n	800a8b0 <kalmanSupervisorIsStateWithinBounds+0xc8>
      }
    }

    if (maxVelocity > 0.0f) {
 800a84a:	4b1d      	ldr	r3, [pc, #116]	@ (800a8c0 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800a84c:	edd3 7a00 	vldr	s15, [r3]
 800a850:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a858:	dd23      	ble.n	800a8a2 <kalmanSupervisorIsStateWithinBounds+0xba>
      if (this->S[KC_STATE_PX + i] > maxVelocity) {
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	3303      	adds	r3, #3
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4413      	add	r3, r2
 800a864:	ed93 7a00 	vldr	s14, [r3]
 800a868:	4b15      	ldr	r3, [pc, #84]	@ (800a8c0 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800a86a:	edd3 7a00 	vldr	s15, [r3]
 800a86e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a876:	dd01      	ble.n	800a87c <kalmanSupervisorIsStateWithinBounds+0x94>
        return false;
 800a878:	2300      	movs	r3, #0
 800a87a:	e019      	b.n	800a8b0 <kalmanSupervisorIsStateWithinBounds+0xc8>
      } else if (this->S[KC_STATE_PX + i] < -maxVelocity) {
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	3303      	adds	r3, #3
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	009b      	lsls	r3, r3, #2
 800a884:	4413      	add	r3, r2
 800a886:	ed93 7a00 	vldr	s14, [r3]
 800a88a:	4b0d      	ldr	r3, [pc, #52]	@ (800a8c0 <kalmanSupervisorIsStateWithinBounds+0xd8>)
 800a88c:	edd3 7a00 	vldr	s15, [r3]
 800a890:	eef1 7a67 	vneg.f32	s15, s15
 800a894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89c:	d501      	bpl.n	800a8a2 <kalmanSupervisorIsStateWithinBounds+0xba>
        return false;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e006      	b.n	800a8b0 <kalmanSupervisorIsStateWithinBounds+0xc8>
  for (int i = 0; i < 3; i++) {
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	dda3      	ble.n	800a7f6 <kalmanSupervisorIsStateWithinBounds+0xe>
      }
    }
  }

  return true;
 800a8ae:	2301      	movs	r3, #1
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	20000018 	.word	0x20000018
 800a8c0:	2000001c 	.word	0x2000001c

0800a8c4 <estimatorEnqueueTOF>:
  m.data.distance = *distance;
  estimatorEnqueue(&m);
}

static inline void estimatorEnqueueTOF(const tofMeasurement_t *tof)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b08e      	sub	sp, #56	@ 0x38
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  measurement_t m;
  m.type = MeasurementTypeTOF;
 800a8cc:	2304      	movs	r3, #4
 800a8ce:	723b      	strb	r3, [r7, #8]
  m.data.tof = *tof;
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	f107 030c 	add.w	r3, r7, #12
 800a8d6:	ca07      	ldmia	r2, {r0, r1, r2}
 800a8d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  estimatorEnqueue(&m);
 800a8dc:	f107 0308 	add.w	r3, r7, #8
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f001 fa17 	bl	800bd14 <estimatorEnqueue>
}
 800a8e6:	bf00      	nop
 800a8e8:	3738      	adds	r7, #56	@ 0x38
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
	...

0800a8f0 <rangeSet>:
#include "estimator.h"

static uint16_t ranges[RANGE_T_END] = {0,};

void rangeSet(rangeDirection_t direction, float range_m)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	ed87 0a00 	vstr	s0, [r7]
 800a8fc:	71fb      	strb	r3, [r7, #7]
  if (direction > (RANGE_T_END-1)) return;
 800a8fe:	79fb      	ldrb	r3, [r7, #7]
 800a900:	2b05      	cmp	r3, #5
 800a902:	d80f      	bhi.n	800a924 <rangeSet+0x34>

  ranges[direction] = range_m * 1000;
 800a904:	edd7 7a00 	vldr	s15, [r7]
 800a908:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800a930 <rangeSet+0x40>
 800a90c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a910:	79fb      	ldrb	r3, [r7, #7]
 800a912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a916:	ee17 2a90 	vmov	r2, s15
 800a91a:	b291      	uxth	r1, r2
 800a91c:	4a05      	ldr	r2, [pc, #20]	@ (800a934 <rangeSet+0x44>)
 800a91e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800a922:	e000      	b.n	800a926 <rangeSet+0x36>
  if (direction > (RANGE_T_END-1)) return;
 800a924:	bf00      	nop
}
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	447a0000 	.word	0x447a0000
 800a934:	200084a4 	.word	0x200084a4

0800a938 <rangeEnqueueDownRangeInEstimator>:
    if (direction > (RANGE_T_END-1)) return 0;

  return ranges[direction];
}

void rangeEnqueueDownRangeInEstimator(float distance, float stdDev, uint32_t timeStamp) {
 800a938:	b580      	push	{r7, lr}
 800a93a:	b088      	sub	sp, #32
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a942:	edc7 0a02 	vstr	s1, [r7, #8]
 800a946:	6078      	str	r0, [r7, #4]
  tofMeasurement_t tofData;
  tofData.timestamp = timeStamp;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	617b      	str	r3, [r7, #20]
  tofData.distance = distance;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	61bb      	str	r3, [r7, #24]
  tofData.stdDev = stdDev;
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	61fb      	str	r3, [r7, #28]
  estimatorEnqueueTOF(&tofData);
 800a954:	f107 0314 	add.w	r3, r7, #20
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff ffb3 	bl	800a8c4 <estimatorEnqueueTOF>
}
 800a95e:	bf00      	nop
 800a960:	3720      	adds	r7, #32
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
	...

0800a968 <sensfusion6Init>:

// TODO: Make math util file
static float invSqrt(float x);

void sensfusion6Init()
{
 800a968:	b480      	push	{r7}
 800a96a:	af00      	add	r7, sp, #0
  if(isInit)
 800a96c:	4b06      	ldr	r3, [pc, #24]	@ (800a988 <sensfusion6Init+0x20>)
 800a96e:	781b      	ldrb	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d103      	bne.n	800a97c <sensfusion6Init+0x14>
    return;

  isInit = true;
 800a974:	4b04      	ldr	r3, [pc, #16]	@ (800a988 <sensfusion6Init+0x20>)
 800a976:	2201      	movs	r2, #1
 800a978:	701a      	strb	r2, [r3, #0]
 800a97a:	e000      	b.n	800a97e <sensfusion6Init+0x16>
    return;
 800a97c:	bf00      	nop
}
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	200084d4 	.word	0x200084d4

0800a98c <sensfusion6Test>:

bool sensfusion6Test(void)
{
 800a98c:	b480      	push	{r7}
 800a98e:	af00      	add	r7, sp, #0
  return isInit;
 800a990:	4b03      	ldr	r3, [pc, #12]	@ (800a9a0 <sensfusion6Test+0x14>)
 800a992:	781b      	ldrb	r3, [r3, #0]
}
 800a994:	4618      	mov	r0, r3
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr
 800a99e:	bf00      	nop
 800a9a0:	200084d4 	.word	0x200084d4

0800a9a4 <sensfusion6UpdateQ>:

void sensfusion6UpdateQ(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	ed87 0a07 	vstr	s0, [r7, #28]
 800a9ae:	edc7 0a06 	vstr	s1, [r7, #24]
 800a9b2:	ed87 1a05 	vstr	s2, [r7, #20]
 800a9b6:	edc7 1a04 	vstr	s3, [r7, #16]
 800a9ba:	ed87 2a03 	vstr	s4, [r7, #12]
 800a9be:	edc7 2a02 	vstr	s5, [r7, #8]
 800a9c2:	ed87 3a01 	vstr	s6, [r7, #4]
  sensfusion6UpdateQImpl(gx, gy, gz, ax, ay, az, dt);
 800a9c6:	ed97 3a01 	vldr	s6, [r7, #4]
 800a9ca:	edd7 2a02 	vldr	s5, [r7, #8]
 800a9ce:	ed97 2a03 	vldr	s4, [r7, #12]
 800a9d2:	edd7 1a04 	vldr	s3, [r7, #16]
 800a9d6:	ed97 1a05 	vldr	s2, [r7, #20]
 800a9da:	edd7 0a06 	vldr	s1, [r7, #24]
 800a9de:	ed97 0a07 	vldr	s0, [r7, #28]
 800a9e2:	f000 f82b 	bl	800aa3c <sensfusion6UpdateQImpl>
  estimatedGravityDirection(&gravX, &gravY, &gravZ);
 800a9e6:	4a10      	ldr	r2, [pc, #64]	@ (800aa28 <sensfusion6UpdateQ+0x84>)
 800a9e8:	4910      	ldr	r1, [pc, #64]	@ (800aa2c <sensfusion6UpdateQ+0x88>)
 800a9ea:	4811      	ldr	r0, [pc, #68]	@ (800aa30 <sensfusion6UpdateQ+0x8c>)
 800a9ec:	f000 fc1c 	bl	800b228 <estimatedGravityDirection>

  if (!isCalibrated) {
 800a9f0:	4b10      	ldr	r3, [pc, #64]	@ (800aa34 <sensfusion6UpdateQ+0x90>)
 800a9f2:	781b      	ldrb	r3, [r3, #0]
 800a9f4:	f083 0301 	eor.w	r3, r3, #1
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00f      	beq.n	800aa1e <sensfusion6UpdateQ+0x7a>
    baseZacc = sensfusion6GetAccZ(ax, ay, az);
 800a9fe:	ed97 1a02 	vldr	s2, [r7, #8]
 800aa02:	edd7 0a03 	vldr	s1, [r7, #12]
 800aa06:	ed97 0a04 	vldr	s0, [r7, #16]
 800aa0a:	f000 fbdd 	bl	800b1c8 <sensfusion6GetAccZ>
 800aa0e:	eef0 7a40 	vmov.f32	s15, s0
 800aa12:	4b09      	ldr	r3, [pc, #36]	@ (800aa38 <sensfusion6UpdateQ+0x94>)
 800aa14:	edc3 7a00 	vstr	s15, [r3]
    isCalibrated = true;
 800aa18:	4b06      	ldr	r3, [pc, #24]	@ (800aa34 <sensfusion6UpdateQ+0x90>)
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	701a      	strb	r2, [r3, #0]
  }
}
 800aa1e:	bf00      	nop
 800aa20:	3720      	adds	r7, #32
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	200084d0 	.word	0x200084d0
 800aa2c:	200084cc 	.word	0x200084cc
 800aa30:	200084c8 	.word	0x200084c8
 800aa34:	200084d5 	.word	0x200084d5
 800aa38:	2000002c 	.word	0x2000002c

0800aa3c <sensfusion6UpdateQImpl>:
//
// Date     Author      Notes
// 29/09/2011 SOH Madgwick    Initial release
// 02/10/2011 SOH Madgwick  Optimised for reduced CPU load
static void sensfusion6UpdateQImpl(float gx, float gy, float gz, float ax, float ay, float az, float dt)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b092      	sub	sp, #72	@ 0x48
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	ed87 0a07 	vstr	s0, [r7, #28]
 800aa46:	edc7 0a06 	vstr	s1, [r7, #24]
 800aa4a:	ed87 1a05 	vstr	s2, [r7, #20]
 800aa4e:	edc7 1a04 	vstr	s3, [r7, #16]
 800aa52:	ed87 2a03 	vstr	s4, [r7, #12]
 800aa56:	edc7 2a02 	vstr	s5, [r7, #8]
 800aa5a:	ed87 3a01 	vstr	s6, [r7, #4]
  float recipNorm;
  float halfvx, halfvy, halfvz;
  float halfex, halfey, halfez;
  float qa, qb, qc;

  gx = gx * M_PI_F / 180;
 800aa5e:	edd7 7a07 	vldr	s15, [r7, #28]
 800aa62:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800acc8 <sensfusion6UpdateQImpl+0x28c>
 800aa66:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa6a:	eddf 6a98 	vldr	s13, [pc, #608]	@ 800accc <sensfusion6UpdateQImpl+0x290>
 800aa6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa72:	edc7 7a07 	vstr	s15, [r7, #28]
  gy = gy * M_PI_F / 180;
 800aa76:	edd7 7a06 	vldr	s15, [r7, #24]
 800aa7a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 800acc8 <sensfusion6UpdateQImpl+0x28c>
 800aa7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa82:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800accc <sensfusion6UpdateQImpl+0x290>
 800aa86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aa8a:	edc7 7a06 	vstr	s15, [r7, #24]
  gz = gz * M_PI_F / 180;
 800aa8e:	edd7 7a05 	vldr	s15, [r7, #20]
 800aa92:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 800acc8 <sensfusion6UpdateQImpl+0x28c>
 800aa96:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aa9a:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 800accc <sensfusion6UpdateQImpl+0x290>
 800aa9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800aaa2:	edc7 7a05 	vstr	s15, [r7, #20]

  // Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
  if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f)))
 800aaa6:	edd7 7a04 	vldr	s15, [r7, #16]
 800aaaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aab2:	d10e      	bne.n	800aad2 <sensfusion6UpdateQImpl+0x96>
 800aab4:	edd7 7a03 	vldr	s15, [r7, #12]
 800aab8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aabc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac0:	d107      	bne.n	800aad2 <sensfusion6UpdateQImpl+0x96>
 800aac2:	edd7 7a02 	vldr	s15, [r7, #8]
 800aac6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800aaca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aace:	f000 8142 	beq.w	800ad56 <sensfusion6UpdateQImpl+0x31a>
  {
    // Normalise accelerometer measurement
    recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800aad2:	edd7 7a04 	vldr	s15, [r7, #16]
 800aad6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800aada:	edd7 7a03 	vldr	s15, [r7, #12]
 800aade:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aae2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aae6:	edd7 7a02 	vldr	s15, [r7, #8]
 800aaea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aaee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaf2:	eeb0 0a67 	vmov.f32	s0, s15
 800aaf6:	f000 fb2b 	bl	800b150 <invSqrt>
 800aafa:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    ax *= recipNorm;
 800aafe:	ed97 7a04 	vldr	s14, [r7, #16]
 800ab02:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ab06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0a:	edc7 7a04 	vstr	s15, [r7, #16]
    ay *= recipNorm;
 800ab0e:	ed97 7a03 	vldr	s14, [r7, #12]
 800ab12:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a03 	vstr	s15, [r7, #12]
    az *= recipNorm;
 800ab1e:	ed97 7a02 	vldr	s14, [r7, #8]
 800ab22:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800ab26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab2a:	edc7 7a02 	vstr	s15, [r7, #8]

    // Estimated direction of gravity and vector perpendicular to magnetic flux
    halfvx = qx * qz - qw * qy;
 800ab2e:	4b68      	ldr	r3, [pc, #416]	@ (800acd0 <sensfusion6UpdateQImpl+0x294>)
 800ab30:	ed93 7a00 	vldr	s14, [r3]
 800ab34:	4b67      	ldr	r3, [pc, #412]	@ (800acd4 <sensfusion6UpdateQImpl+0x298>)
 800ab36:	edd3 7a00 	vldr	s15, [r3]
 800ab3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab3e:	4b66      	ldr	r3, [pc, #408]	@ (800acd8 <sensfusion6UpdateQImpl+0x29c>)
 800ab40:	edd3 6a00 	vldr	s13, [r3]
 800ab44:	4b65      	ldr	r3, [pc, #404]	@ (800acdc <sensfusion6UpdateQImpl+0x2a0>)
 800ab46:	edd3 7a00 	vldr	s15, [r3]
 800ab4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab52:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    halfvy = qw * qx + qy * qz;
 800ab56:	4b60      	ldr	r3, [pc, #384]	@ (800acd8 <sensfusion6UpdateQImpl+0x29c>)
 800ab58:	ed93 7a00 	vldr	s14, [r3]
 800ab5c:	4b5c      	ldr	r3, [pc, #368]	@ (800acd0 <sensfusion6UpdateQImpl+0x294>)
 800ab5e:	edd3 7a00 	vldr	s15, [r3]
 800ab62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab66:	4b5d      	ldr	r3, [pc, #372]	@ (800acdc <sensfusion6UpdateQImpl+0x2a0>)
 800ab68:	edd3 6a00 	vldr	s13, [r3]
 800ab6c:	4b59      	ldr	r3, [pc, #356]	@ (800acd4 <sensfusion6UpdateQImpl+0x298>)
 800ab6e:	edd3 7a00 	vldr	s15, [r3]
 800ab72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ab76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab7a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    halfvz = qw * qw - 0.5f + qz * qz;
 800ab7e:	4b56      	ldr	r3, [pc, #344]	@ (800acd8 <sensfusion6UpdateQImpl+0x29c>)
 800ab80:	ed93 7a00 	vldr	s14, [r3]
 800ab84:	4b54      	ldr	r3, [pc, #336]	@ (800acd8 <sensfusion6UpdateQImpl+0x29c>)
 800ab86:	edd3 7a00 	vldr	s15, [r3]
 800ab8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ab92:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ab96:	4b4f      	ldr	r3, [pc, #316]	@ (800acd4 <sensfusion6UpdateQImpl+0x298>)
 800ab98:	edd3 6a00 	vldr	s13, [r3]
 800ab9c:	4b4d      	ldr	r3, [pc, #308]	@ (800acd4 <sensfusion6UpdateQImpl+0x298>)
 800ab9e:	edd3 7a00 	vldr	s15, [r3]
 800aba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abaa:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Error is sum of cross product between estimated and measured direction of gravity
    halfex = (ay * halfvz - az * halfvy);
 800abae:	ed97 7a03 	vldr	s14, [r7, #12]
 800abb2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800abb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abba:	edd7 6a02 	vldr	s13, [r7, #8]
 800abbe:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800abc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abca:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    halfey = (az * halfvx - ax * halfvz);
 800abce:	ed97 7a02 	vldr	s14, [r7, #8]
 800abd2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800abd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abda:	edd7 6a04 	vldr	s13, [r7, #16]
 800abde:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800abe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800abe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abea:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    halfez = (ax * halfvy - ay * halfvx);
 800abee:	ed97 7a04 	vldr	s14, [r7, #16]
 800abf2:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800abf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abfa:	edd7 6a03 	vldr	s13, [r7, #12]
 800abfe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ac02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ac06:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac0a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Compute and apply integral feedback if enabled
    if(twoKi > 0.0f)
 800ac0e:	4b34      	ldr	r3, [pc, #208]	@ (800ace0 <sensfusion6UpdateQImpl+0x2a4>)
 800ac10:	edd3 7a00 	vldr	s15, [r3]
 800ac14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ac18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac1c:	dd68      	ble.n	800acf0 <sensfusion6UpdateQImpl+0x2b4>
    {
      integralFBx += twoKi * halfex * dt;  // integral error scaled by Ki
 800ac1e:	4b30      	ldr	r3, [pc, #192]	@ (800ace0 <sensfusion6UpdateQImpl+0x2a4>)
 800ac20:	ed93 7a00 	vldr	s14, [r3]
 800ac24:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ac28:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac2c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac34:	4b2b      	ldr	r3, [pc, #172]	@ (800ace4 <sensfusion6UpdateQImpl+0x2a8>)
 800ac36:	edd3 7a00 	vldr	s15, [r3]
 800ac3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac3e:	4b29      	ldr	r3, [pc, #164]	@ (800ace4 <sensfusion6UpdateQImpl+0x2a8>)
 800ac40:	edc3 7a00 	vstr	s15, [r3]
      integralFBy += twoKi * halfey * dt;
 800ac44:	4b26      	ldr	r3, [pc, #152]	@ (800ace0 <sensfusion6UpdateQImpl+0x2a4>)
 800ac46:	ed93 7a00 	vldr	s14, [r3]
 800ac4a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ac4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac52:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac5a:	4b23      	ldr	r3, [pc, #140]	@ (800ace8 <sensfusion6UpdateQImpl+0x2ac>)
 800ac5c:	edd3 7a00 	vldr	s15, [r3]
 800ac60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac64:	4b20      	ldr	r3, [pc, #128]	@ (800ace8 <sensfusion6UpdateQImpl+0x2ac>)
 800ac66:	edc3 7a00 	vstr	s15, [r3]
      integralFBz += twoKi * halfez * dt;
 800ac6a:	4b1d      	ldr	r3, [pc, #116]	@ (800ace0 <sensfusion6UpdateQImpl+0x2a4>)
 800ac6c:	ed93 7a00 	vldr	s14, [r3]
 800ac70:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ac74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac78:	edd7 7a01 	vldr	s15, [r7, #4]
 800ac7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac80:	4b1a      	ldr	r3, [pc, #104]	@ (800acec <sensfusion6UpdateQImpl+0x2b0>)
 800ac82:	edd3 7a00 	vldr	s15, [r3]
 800ac86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac8a:	4b18      	ldr	r3, [pc, #96]	@ (800acec <sensfusion6UpdateQImpl+0x2b0>)
 800ac8c:	edc3 7a00 	vstr	s15, [r3]
      gx += integralFBx;  // apply integral feedback
 800ac90:	4b14      	ldr	r3, [pc, #80]	@ (800ace4 <sensfusion6UpdateQImpl+0x2a8>)
 800ac92:	edd3 7a00 	vldr	s15, [r3]
 800ac96:	ed97 7a07 	vldr	s14, [r7, #28]
 800ac9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
      gy += integralFBy;
 800aca2:	4b11      	ldr	r3, [pc, #68]	@ (800ace8 <sensfusion6UpdateQImpl+0x2ac>)
 800aca4:	edd3 7a00 	vldr	s15, [r3]
 800aca8:	ed97 7a06 	vldr	s14, [r7, #24]
 800acac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acb0:	edc7 7a06 	vstr	s15, [r7, #24]
      gz += integralFBz;
 800acb4:	4b0d      	ldr	r3, [pc, #52]	@ (800acec <sensfusion6UpdateQImpl+0x2b0>)
 800acb6:	edd3 7a00 	vldr	s15, [r3]
 800acba:	ed97 7a05 	vldr	s14, [r7, #20]
 800acbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800acc2:	edc7 7a05 	vstr	s15, [r7, #20]
 800acc6:	e01f      	b.n	800ad08 <sensfusion6UpdateQImpl+0x2cc>
 800acc8:	40490fdb 	.word	0x40490fdb
 800accc:	43340000 	.word	0x43340000
 800acd0:	200084bc 	.word	0x200084bc
 800acd4:	200084c4 	.word	0x200084c4
 800acd8:	20000028 	.word	0x20000028
 800acdc:	200084c0 	.word	0x200084c0
 800ace0:	20000024 	.word	0x20000024
 800ace4:	200084b0 	.word	0x200084b0
 800ace8:	200084b4 	.word	0x200084b4
 800acec:	200084b8 	.word	0x200084b8
    }
    else
    {
      integralFBx = 0.0f; // prevent integral windup
 800acf0:	4b9a      	ldr	r3, [pc, #616]	@ (800af5c <sensfusion6UpdateQImpl+0x520>)
 800acf2:	f04f 0200 	mov.w	r2, #0
 800acf6:	601a      	str	r2, [r3, #0]
      integralFBy = 0.0f;
 800acf8:	4b99      	ldr	r3, [pc, #612]	@ (800af60 <sensfusion6UpdateQImpl+0x524>)
 800acfa:	f04f 0200 	mov.w	r2, #0
 800acfe:	601a      	str	r2, [r3, #0]
      integralFBz = 0.0f;
 800ad00:	4b98      	ldr	r3, [pc, #608]	@ (800af64 <sensfusion6UpdateQImpl+0x528>)
 800ad02:	f04f 0200 	mov.w	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]
    }

    // Apply proportional feedback
    gx += twoKp * halfex;
 800ad08:	4b97      	ldr	r3, [pc, #604]	@ (800af68 <sensfusion6UpdateQImpl+0x52c>)
 800ad0a:	ed93 7a00 	vldr	s14, [r3]
 800ad0e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800ad12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad16:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad1e:	edc7 7a07 	vstr	s15, [r7, #28]
    gy += twoKp * halfey;
 800ad22:	4b91      	ldr	r3, [pc, #580]	@ (800af68 <sensfusion6UpdateQImpl+0x52c>)
 800ad24:	ed93 7a00 	vldr	s14, [r3]
 800ad28:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800ad2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad30:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad34:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad38:	edc7 7a06 	vstr	s15, [r7, #24]
    gz += twoKp * halfez;
 800ad3c:	4b8a      	ldr	r3, [pc, #552]	@ (800af68 <sensfusion6UpdateQImpl+0x52c>)
 800ad3e:	ed93 7a00 	vldr	s14, [r3]
 800ad42:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ad46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad4a:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad52:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  // Integrate rate of change of quaternion
  gx *= (0.5f * dt);   // pre-multiply common factors
 800ad56:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad5a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ad5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad62:	ed97 7a07 	vldr	s14, [r7, #28]
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
  gy *= (0.5f * dt);
 800ad6e:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad72:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ad76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad7a:	ed97 7a06 	vldr	s14, [r7, #24]
 800ad7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad82:	edc7 7a06 	vstr	s15, [r7, #24]
  gz *= (0.5f * dt);
 800ad86:	edd7 7a01 	vldr	s15, [r7, #4]
 800ad8a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ad8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ad92:	ed97 7a05 	vldr	s14, [r7, #20]
 800ad96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9a:	edc7 7a05 	vstr	s15, [r7, #20]
  qa = qw;
 800ad9e:	4b73      	ldr	r3, [pc, #460]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	62bb      	str	r3, [r7, #40]	@ 0x28
  qb = qx;
 800ada4:	4b72      	ldr	r3, [pc, #456]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	627b      	str	r3, [r7, #36]	@ 0x24
  qc = qy;
 800adaa:	4b72      	ldr	r3, [pc, #456]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	623b      	str	r3, [r7, #32]
  qw += (-qb * gx - qc * gy - qz * gz);
 800adb0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800adb4:	eeb1 7a67 	vneg.f32	s14, s15
 800adb8:	edd7 7a07 	vldr	s15, [r7, #28]
 800adbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adc0:	edd7 6a08 	vldr	s13, [r7, #32]
 800adc4:	edd7 7a06 	vldr	s15, [r7, #24]
 800adc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800add0:	4b69      	ldr	r3, [pc, #420]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800add2:	edd3 6a00 	vldr	s13, [r3]
 800add6:	edd7 7a05 	vldr	s15, [r7, #20]
 800adda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800adde:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ade2:	4b62      	ldr	r3, [pc, #392]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800ade4:	edd3 7a00 	vldr	s15, [r3]
 800ade8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adec:	4b5f      	ldr	r3, [pc, #380]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800adee:	edc3 7a00 	vstr	s15, [r3]
  qx += (qa * gx + qc * gz - qz * gy);
 800adf2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800adf6:	edd7 7a07 	vldr	s15, [r7, #28]
 800adfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800adfe:	edd7 6a08 	vldr	s13, [r7, #32]
 800ae02:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae0e:	4b5a      	ldr	r3, [pc, #360]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800ae10:	edd3 6a00 	vldr	s13, [r3]
 800ae14:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae20:	4b53      	ldr	r3, [pc, #332]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800ae22:	edd3 7a00 	vldr	s15, [r3]
 800ae26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae2a:	4b51      	ldr	r3, [pc, #324]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800ae2c:	edc3 7a00 	vstr	s15, [r3]
  qy += (qa * gy - qb * gz + qz * gx);
 800ae30:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ae34:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae3c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ae40:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae48:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae4c:	4b4a      	ldr	r3, [pc, #296]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800ae4e:	edd3 6a00 	vldr	s13, [r3]
 800ae52:	edd7 7a07 	vldr	s15, [r7, #28]
 800ae56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae5e:	4b45      	ldr	r3, [pc, #276]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800ae60:	edd3 7a00 	vldr	s15, [r3]
 800ae64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae68:	4b42      	ldr	r3, [pc, #264]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800ae6a:	edc3 7a00 	vstr	s15, [r3]
  qz += (qa * gz + qb * gy - qc * gx);
 800ae6e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ae72:	edd7 7a05 	vldr	s15, [r7, #20]
 800ae76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae7a:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800ae7e:	edd7 7a06 	vldr	s15, [r7, #24]
 800ae82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae86:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae8a:	edd7 6a08 	vldr	s13, [r7, #32]
 800ae8e:	edd7 7a07 	vldr	s15, [r7, #28]
 800ae92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ae96:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae9a:	4b37      	ldr	r3, [pc, #220]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800ae9c:	edd3 7a00 	vldr	s15, [r3]
 800aea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aea4:	4b34      	ldr	r3, [pc, #208]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800aea6:	edc3 7a00 	vstr	s15, [r3]

  // Normalise quaternion
  recipNorm = invSqrt(qw * qw + qx * qx + qy * qy + qz * qz);
 800aeaa:	4b30      	ldr	r3, [pc, #192]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800aeac:	ed93 7a00 	vldr	s14, [r3]
 800aeb0:	4b2e      	ldr	r3, [pc, #184]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800aeb2:	edd3 7a00 	vldr	s15, [r3]
 800aeb6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aeba:	4b2d      	ldr	r3, [pc, #180]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800aebc:	edd3 6a00 	vldr	s13, [r3]
 800aec0:	4b2b      	ldr	r3, [pc, #172]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800aec2:	edd3 7a00 	vldr	s15, [r3]
 800aec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aeca:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aece:	4b29      	ldr	r3, [pc, #164]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800aed0:	edd3 6a00 	vldr	s13, [r3]
 800aed4:	4b27      	ldr	r3, [pc, #156]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800aed6:	edd3 7a00 	vldr	s15, [r3]
 800aeda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aede:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aee2:	4b25      	ldr	r3, [pc, #148]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800aee4:	edd3 6a00 	vldr	s13, [r3]
 800aee8:	4b23      	ldr	r3, [pc, #140]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800aeea:	edd3 7a00 	vldr	s15, [r3]
 800aeee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800aef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aef6:	eeb0 0a67 	vmov.f32	s0, s15
 800aefa:	f000 f929 	bl	800b150 <invSqrt>
 800aefe:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
  qw *= recipNorm;
 800af02:	4b1a      	ldr	r3, [pc, #104]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800af04:	ed93 7a00 	vldr	s14, [r3]
 800af08:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800af0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af10:	4b16      	ldr	r3, [pc, #88]	@ (800af6c <sensfusion6UpdateQImpl+0x530>)
 800af12:	edc3 7a00 	vstr	s15, [r3]
  qx *= recipNorm;
 800af16:	4b16      	ldr	r3, [pc, #88]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800af18:	ed93 7a00 	vldr	s14, [r3]
 800af1c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800af20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af24:	4b12      	ldr	r3, [pc, #72]	@ (800af70 <sensfusion6UpdateQImpl+0x534>)
 800af26:	edc3 7a00 	vstr	s15, [r3]
  qy *= recipNorm;
 800af2a:	4b12      	ldr	r3, [pc, #72]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800af2c:	ed93 7a00 	vldr	s14, [r3]
 800af30:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800af34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af38:	4b0e      	ldr	r3, [pc, #56]	@ (800af74 <sensfusion6UpdateQImpl+0x538>)
 800af3a:	edc3 7a00 	vstr	s15, [r3]
  qz *= recipNorm;
 800af3e:	4b0e      	ldr	r3, [pc, #56]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800af40:	ed93 7a00 	vldr	s14, [r3]
 800af44:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800af48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4c:	4b0a      	ldr	r3, [pc, #40]	@ (800af78 <sensfusion6UpdateQImpl+0x53c>)
 800af4e:	edc3 7a00 	vstr	s15, [r3]
}
 800af52:	bf00      	nop
 800af54:	3748      	adds	r7, #72	@ 0x48
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	200084b0 	.word	0x200084b0
 800af60:	200084b4 	.word	0x200084b4
 800af64:	200084b8 	.word	0x200084b8
 800af68:	20000020 	.word	0x20000020
 800af6c:	20000028 	.word	0x20000028
 800af70:	200084bc 	.word	0x200084bc
 800af74:	200084c0 	.word	0x200084c0
 800af78:	200084c4 	.word	0x200084c4

0800af7c <sensfusion6GetQuaternion>:
#endif

void sensfusion6GetQuaternion(float* q_x, float* q_y, float* q_z, float* q_w)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b085      	sub	sp, #20
 800af80:	af00      	add	r7, sp, #0
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	607a      	str	r2, [r7, #4]
 800af88:	603b      	str	r3, [r7, #0]
  *q_x = qx;
 800af8a:	4b0b      	ldr	r3, [pc, #44]	@ (800afb8 <sensfusion6GetQuaternion+0x3c>)
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	601a      	str	r2, [r3, #0]
  *q_y = qy;
 800af92:	4b0a      	ldr	r3, [pc, #40]	@ (800afbc <sensfusion6GetQuaternion+0x40>)
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	601a      	str	r2, [r3, #0]
  *q_z = qz;
 800af9a:	4b09      	ldr	r3, [pc, #36]	@ (800afc0 <sensfusion6GetQuaternion+0x44>)
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	601a      	str	r2, [r3, #0]
  *q_w = qw;
 800afa2:	4b08      	ldr	r3, [pc, #32]	@ (800afc4 <sensfusion6GetQuaternion+0x48>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	601a      	str	r2, [r3, #0]
}
 800afaa:	bf00      	nop
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
 800afb6:	bf00      	nop
 800afb8:	200084bc 	.word	0x200084bc
 800afbc:	200084c0 	.word	0x200084c0
 800afc0:	200084c4 	.word	0x200084c4
 800afc4:	20000028 	.word	0x20000028

0800afc8 <sensfusion6GetEulerRPY>:

void sensfusion6GetEulerRPY(float* roll, float* pitch, float* yaw)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af00      	add	r7, sp, #0
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	607a      	str	r2, [r7, #4]
  float gx = gravX;
 800afd4:	4b44      	ldr	r3, [pc, #272]	@ (800b0e8 <sensfusion6GetEulerRPY+0x120>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	61fb      	str	r3, [r7, #28]
  float gy = gravY;
 800afda:	4b44      	ldr	r3, [pc, #272]	@ (800b0ec <sensfusion6GetEulerRPY+0x124>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	61bb      	str	r3, [r7, #24]
  float gz = gravZ;
 800afe0:	4b43      	ldr	r3, [pc, #268]	@ (800b0f0 <sensfusion6GetEulerRPY+0x128>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	617b      	str	r3, [r7, #20]

  if (gx>1) gx=1;
 800afe6:	edd7 7a07 	vldr	s15, [r7, #28]
 800afea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800afee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff6:	dd02      	ble.n	800affe <sensfusion6GetEulerRPY+0x36>
 800aff8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800affc:	61fb      	str	r3, [r7, #28]
  if (gx<-1) gx=-1;
 800affe:	edd7 7a07 	vldr	s15, [r7, #28]
 800b002:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800b006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b00a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00e:	d501      	bpl.n	800b014 <sensfusion6GetEulerRPY+0x4c>
 800b010:	4b38      	ldr	r3, [pc, #224]	@ (800b0f4 <sensfusion6GetEulerRPY+0x12c>)
 800b012:	61fb      	str	r3, [r7, #28]

  *yaw = -atan2f(2*(qw*qz + qx*qy), (+1.0f - 2.0f * (qy*qy + qz*qz))) * 180 / M_PI_F;
 800b014:	4b38      	ldr	r3, [pc, #224]	@ (800b0f8 <sensfusion6GetEulerRPY+0x130>)
 800b016:	ed93 7a00 	vldr	s14, [r3]
 800b01a:	4b38      	ldr	r3, [pc, #224]	@ (800b0fc <sensfusion6GetEulerRPY+0x134>)
 800b01c:	edd3 7a00 	vldr	s15, [r3]
 800b020:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b024:	4b36      	ldr	r3, [pc, #216]	@ (800b100 <sensfusion6GetEulerRPY+0x138>)
 800b026:	edd3 6a00 	vldr	s13, [r3]
 800b02a:	4b36      	ldr	r3, [pc, #216]	@ (800b104 <sensfusion6GetEulerRPY+0x13c>)
 800b02c:	edd3 7a00 	vldr	s15, [r3]
 800b030:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b034:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b038:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800b03c:	4b31      	ldr	r3, [pc, #196]	@ (800b104 <sensfusion6GetEulerRPY+0x13c>)
 800b03e:	ed93 7a00 	vldr	s14, [r3]
 800b042:	4b30      	ldr	r3, [pc, #192]	@ (800b104 <sensfusion6GetEulerRPY+0x13c>)
 800b044:	edd3 7a00 	vldr	s15, [r3]
 800b048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b04c:	4b2b      	ldr	r3, [pc, #172]	@ (800b0fc <sensfusion6GetEulerRPY+0x134>)
 800b04e:	edd3 6a00 	vldr	s13, [r3]
 800b052:	4b2a      	ldr	r3, [pc, #168]	@ (800b0fc <sensfusion6GetEulerRPY+0x134>)
 800b054:	edd3 7a00 	vldr	s15, [r3]
 800b058:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b05c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b064:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b06c:	eef0 0a67 	vmov.f32	s1, s15
 800b070:	eeb0 0a46 	vmov.f32	s0, s12
 800b074:	f00b f9ea 	bl	801644c <atan2f>
 800b078:	eef0 7a40 	vmov.f32	s15, s0
 800b07c:	eef1 7a67 	vneg.f32	s15, s15
 800b080:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800b108 <sensfusion6GetEulerRPY+0x140>
 800b084:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b088:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800b10c <sensfusion6GetEulerRPY+0x144>
 800b08c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	edc3 7a00 	vstr	s15, [r3]
  *pitch = asinf(gx) * 180 / M_PI_F; //Pitch seems to be inverted
 800b096:	ed97 0a07 	vldr	s0, [r7, #28]
 800b09a:	f00b f9ab 	bl	80163f4 <asinf>
 800b09e:	eef0 7a40 	vmov.f32	s15, s0
 800b0a2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800b108 <sensfusion6GetEulerRPY+0x140>
 800b0a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0aa:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800b10c <sensfusion6GetEulerRPY+0x144>
 800b0ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	edc3 7a00 	vstr	s15, [r3]
  *roll = atan2f(gy, gz) * 180 / M_PI_F;
 800b0b8:	edd7 0a05 	vldr	s1, [r7, #20]
 800b0bc:	ed97 0a06 	vldr	s0, [r7, #24]
 800b0c0:	f00b f9c4 	bl	801644c <atan2f>
 800b0c4:	eef0 7a40 	vmov.f32	s15, s0
 800b0c8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800b108 <sensfusion6GetEulerRPY+0x140>
 800b0cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0d0:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b10c <sensfusion6GetEulerRPY+0x144>
 800b0d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	edc3 7a00 	vstr	s15, [r3]
}
 800b0de:	bf00      	nop
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	200084c8 	.word	0x200084c8
 800b0ec:	200084cc 	.word	0x200084cc
 800b0f0:	200084d0 	.word	0x200084d0
 800b0f4:	bf800000 	.word	0xbf800000
 800b0f8:	20000028 	.word	0x20000028
 800b0fc:	200084c4 	.word	0x200084c4
 800b100:	200084bc 	.word	0x200084bc
 800b104:	200084c0 	.word	0x200084c0
 800b108:	43340000 	.word	0x43340000
 800b10c:	40490fdb 	.word	0x40490fdb

0800b110 <sensfusion6GetAccZWithoutGravity>:

float sensfusion6GetAccZWithoutGravity(const float ax, const float ay, const float az)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	ed87 0a03 	vstr	s0, [r7, #12]
 800b11a:	edc7 0a02 	vstr	s1, [r7, #8]
 800b11e:	ed87 1a01 	vstr	s2, [r7, #4]
  return sensfusion6GetAccZ(ax, ay, az) - baseZacc;
 800b122:	ed97 1a01 	vldr	s2, [r7, #4]
 800b126:	edd7 0a02 	vldr	s1, [r7, #8]
 800b12a:	ed97 0a03 	vldr	s0, [r7, #12]
 800b12e:	f000 f84b 	bl	800b1c8 <sensfusion6GetAccZ>
 800b132:	eeb0 7a40 	vmov.f32	s14, s0
 800b136:	4b05      	ldr	r3, [pc, #20]	@ (800b14c <sensfusion6GetAccZWithoutGravity+0x3c>)
 800b138:	edd3 7a00 	vldr	s15, [r3]
 800b13c:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800b140:	eeb0 0a67 	vmov.f32	s0, s15
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	2000002c 	.word	0x2000002c

0800b150 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root
float invSqrt(float x)
{
 800b150:	b480      	push	{r7}
 800b152:	b087      	sub	sp, #28
 800b154:	af00      	add	r7, sp, #0
 800b156:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 800b15a:	edd7 7a01 	vldr	s15, [r7, #4]
 800b15e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b162:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b166:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	613b      	str	r3, [r7, #16]
  long i = *(long*)&y;
 800b16e:	f107 0310 	add.w	r3, r7, #16
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i>>1);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	105a      	asrs	r2, r3, #1
 800b17a:	4b12      	ldr	r3, [pc, #72]	@ (800b1c4 <invSqrt+0x74>)
 800b17c:	1a9b      	subs	r3, r3, r2
 800b17e:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;
 800b180:	f107 030c 	add.w	r3, r7, #12
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));
 800b188:	ed97 7a04 	vldr	s14, [r7, #16]
 800b18c:	edd7 7a05 	vldr	s15, [r7, #20]
 800b190:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b194:	edd7 7a04 	vldr	s15, [r7, #16]
 800b198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b19c:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 800b1a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b1a4:	edd7 7a04 	vldr	s15, [r7, #16]
 800b1a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ac:	edc7 7a04 	vstr	s15, [r7, #16]
  return y;
 800b1b0:	693b      	ldr	r3, [r7, #16]
 800b1b2:	ee07 3a90 	vmov	s15, r3
}
 800b1b6:	eeb0 0a67 	vmov.f32	s0, s15
 800b1ba:	371c      	adds	r7, #28
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	5f3759df 	.word	0x5f3759df

0800b1c8 <sensfusion6GetAccZ>:

static float sensfusion6GetAccZ(const float ax, const float ay, const float az)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	ed87 0a03 	vstr	s0, [r7, #12]
 800b1d2:	edc7 0a02 	vstr	s1, [r7, #8]
 800b1d6:	ed87 1a01 	vstr	s2, [r7, #4]
  // return vertical acceleration
  // (A dot G) / |G|,  (|G| = 1) -> (A dot G)
  return (ax * gravX + ay * gravY + az * gravZ);
 800b1da:	4b10      	ldr	r3, [pc, #64]	@ (800b21c <sensfusion6GetAccZ+0x54>)
 800b1dc:	ed93 7a00 	vldr	s14, [r3]
 800b1e0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b1e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800b220 <sensfusion6GetAccZ+0x58>)
 800b1ea:	edd3 6a00 	vldr	s13, [r3]
 800b1ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800b1f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b1f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b1fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b224 <sensfusion6GetAccZ+0x5c>)
 800b1fc:	edd3 6a00 	vldr	s13, [r3]
 800b200:	edd7 7a01 	vldr	s15, [r7, #4]
 800b204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b208:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800b20c:	eeb0 0a67 	vmov.f32	s0, s15
 800b210:	3714      	adds	r7, #20
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	200084c8 	.word	0x200084c8
 800b220:	200084cc 	.word	0x200084cc
 800b224:	200084d0 	.word	0x200084d0

0800b228 <estimatedGravityDirection>:

static void estimatedGravityDirection(float* gx, float* gy, float* gz)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	607a      	str	r2, [r7, #4]
  *gx = 2 * (qx * qz - qw * qy);
 800b234:	4b2e      	ldr	r3, [pc, #184]	@ (800b2f0 <estimatedGravityDirection+0xc8>)
 800b236:	ed93 7a00 	vldr	s14, [r3]
 800b23a:	4b2e      	ldr	r3, [pc, #184]	@ (800b2f4 <estimatedGravityDirection+0xcc>)
 800b23c:	edd3 7a00 	vldr	s15, [r3]
 800b240:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b244:	4b2c      	ldr	r3, [pc, #176]	@ (800b2f8 <estimatedGravityDirection+0xd0>)
 800b246:	edd3 6a00 	vldr	s13, [r3]
 800b24a:	4b2c      	ldr	r3, [pc, #176]	@ (800b2fc <estimatedGravityDirection+0xd4>)
 800b24c:	edd3 7a00 	vldr	s15, [r3]
 800b250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b254:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b258:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	edc3 7a00 	vstr	s15, [r3]
  *gy = 2 * (qw * qx + qy * qz);
 800b262:	4b25      	ldr	r3, [pc, #148]	@ (800b2f8 <estimatedGravityDirection+0xd0>)
 800b264:	ed93 7a00 	vldr	s14, [r3]
 800b268:	4b21      	ldr	r3, [pc, #132]	@ (800b2f0 <estimatedGravityDirection+0xc8>)
 800b26a:	edd3 7a00 	vldr	s15, [r3]
 800b26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b272:	4b22      	ldr	r3, [pc, #136]	@ (800b2fc <estimatedGravityDirection+0xd4>)
 800b274:	edd3 6a00 	vldr	s13, [r3]
 800b278:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f4 <estimatedGravityDirection+0xcc>)
 800b27a:	edd3 7a00 	vldr	s15, [r3]
 800b27e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b282:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b286:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	edc3 7a00 	vstr	s15, [r3]
  *gz = qw * qw - qx * qx - qy * qy + qz * qz;
 800b290:	4b19      	ldr	r3, [pc, #100]	@ (800b2f8 <estimatedGravityDirection+0xd0>)
 800b292:	ed93 7a00 	vldr	s14, [r3]
 800b296:	4b18      	ldr	r3, [pc, #96]	@ (800b2f8 <estimatedGravityDirection+0xd0>)
 800b298:	edd3 7a00 	vldr	s15, [r3]
 800b29c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2a0:	4b13      	ldr	r3, [pc, #76]	@ (800b2f0 <estimatedGravityDirection+0xc8>)
 800b2a2:	edd3 6a00 	vldr	s13, [r3]
 800b2a6:	4b12      	ldr	r3, [pc, #72]	@ (800b2f0 <estimatedGravityDirection+0xc8>)
 800b2a8:	edd3 7a00 	vldr	s15, [r3]
 800b2ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b2b4:	4b11      	ldr	r3, [pc, #68]	@ (800b2fc <estimatedGravityDirection+0xd4>)
 800b2b6:	edd3 6a00 	vldr	s13, [r3]
 800b2ba:	4b10      	ldr	r3, [pc, #64]	@ (800b2fc <estimatedGravityDirection+0xd4>)
 800b2bc:	edd3 7a00 	vldr	s15, [r3]
 800b2c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b2c8:	4b0a      	ldr	r3, [pc, #40]	@ (800b2f4 <estimatedGravityDirection+0xcc>)
 800b2ca:	edd3 6a00 	vldr	s13, [r3]
 800b2ce:	4b09      	ldr	r3, [pc, #36]	@ (800b2f4 <estimatedGravityDirection+0xcc>)
 800b2d0:	edd3 7a00 	vldr	s15, [r3]
 800b2d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	edc3 7a00 	vstr	s15, [r3]
}
 800b2e2:	bf00      	nop
 800b2e4:	3714      	adds	r7, #20
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	200084bc 	.word	0x200084bc
 800b2f4:	200084c4 	.word	0x200084c4
 800b2f8:	20000028 	.word	0x20000028
 800b2fc:	200084c0 	.word	0x200084c0

0800b300 <quatcompress>:
#include <stdint.h>
#include <math.h>

// assumes input quaternion is normalized. will fail if not.
static inline uint32_t quatcompress(float const q[4])
{
 800b300:	b480      	push	{r7}
 800b302:	b08b      	sub	sp, #44	@ 0x2c
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
	// we send the values of the quaternion's smallest 3 elements.
	unsigned i_largest = 0;
 800b308:	2300      	movs	r3, #0
 800b30a:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800b30c:	2301      	movs	r3, #1
 800b30e:	623b      	str	r3, [r7, #32]
 800b310:	e019      	b.n	800b346 <quatcompress+0x46>
		if (fabsf(q[i]) > fabsf(q[i_largest])) {
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	4413      	add	r3, r2
 800b31a:	edd3 7a00 	vldr	s15, [r3]
 800b31e:	eeb0 7ae7 	vabs.f32	s14, s15
 800b322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	687a      	ldr	r2, [r7, #4]
 800b328:	4413      	add	r3, r2
 800b32a:	edd3 7a00 	vldr	s15, [r3]
 800b32e:	eef0 7ae7 	vabs.f32	s15, s15
 800b332:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b33a:	dd01      	ble.n	800b340 <quatcompress+0x40>
			i_largest = i;
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	627b      	str	r3, [r7, #36]	@ 0x24
	for (unsigned i = 1; i < 4; ++i) {
 800b340:	6a3b      	ldr	r3, [r7, #32]
 800b342:	3301      	adds	r3, #1
 800b344:	623b      	str	r3, [r7, #32]
 800b346:	6a3b      	ldr	r3, [r7, #32]
 800b348:	2b03      	cmp	r3, #3
 800b34a:	d9e2      	bls.n	800b312 <quatcompress+0x12>
	}

	// since -q represents the same rotation as q,
	// transform the quaternion so the largest element is positive.
	// this avoids having to send its sign bit.
	unsigned negate = q[i_largest] < 0;
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	4413      	add	r3, r2
 800b354:	edd3 7a00 	vldr	s15, [r3]
 800b358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b360:	bf4c      	ite	mi
 800b362:	2301      	movmi	r3, #1
 800b364:	2300      	movpl	r3, #0
 800b366:	b2db      	uxtb	r3, r3
 800b368:	617b      	str	r3, [r7, #20]

	// 1/sqrt(2) is the largest possible value 
	// of the second-largest element in a unit quaternion.

	// do compression using sign bit and 9-bit precision per element.
	uint32_t comp = i_largest;
 800b36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b36c:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800b36e:	2300      	movs	r3, #0
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	e039      	b.n	800b3e8 <quatcompress+0xe8>
		if (i != i_largest) {
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b378:	429a      	cmp	r2, r3
 800b37a:	d032      	beq.n	800b3e2 <quatcompress+0xe2>
			unsigned negbit = (q[i] < 0) ^ negate;
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	009b      	lsls	r3, r3, #2
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	4413      	add	r3, r2
 800b384:	edd3 7a00 	vldr	s15, [r3]
 800b388:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b390:	bf4c      	ite	mi
 800b392:	2301      	movmi	r3, #1
 800b394:	2300      	movpl	r3, #0
 800b396:	b2db      	uxtb	r3, r3
 800b398:	461a      	mov	r2, r3
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	4053      	eors	r3, r2
 800b39e:	613b      	str	r3, [r7, #16]
			unsigned mag = ((1 << 9) - 1) * (fabsf(q[i]) / (float)M_SQRT1_2) + 0.5f;
 800b3a0:	69bb      	ldr	r3, [r7, #24]
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	edd3 7a00 	vldr	s15, [r3]
 800b3ac:	eeb0 7ae7 	vabs.f32	s14, s15
 800b3b0:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800b3fc <quatcompress+0xfc>
 800b3b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b3b8:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800b400 <quatcompress+0x100>
 800b3bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3c0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800b3c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b3c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3cc:	ee17 3a90 	vmov	r3, s15
 800b3d0:	60fb      	str	r3, [r7, #12]
			comp = (comp << 10) | (negbit << 9) | mag;
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	029a      	lsls	r2, r3, #10
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	025b      	lsls	r3, r3, #9
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	61fb      	str	r3, [r7, #28]
	for (unsigned i = 0; i < 4; ++i) {
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d9c2      	bls.n	800b374 <quatcompress+0x74>
		}
	}

	return comp;
 800b3ee:	69fb      	ldr	r3, [r7, #28]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	372c      	adds	r7, #44	@ 0x2c
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	3f3504f3 	.word	0x3f3504f3
 800b400:	43ff8000 	.word	0x43ff8000

0800b404 <calcSensorToOutputLatency>:
STATIC_MEM_TASK_ALLOC(stabilizerTask, STABILIZER_TASK_STACKSIZE);

static void stabilizerTask(void* param);

static void calcSensorToOutputLatency(const sensorData_t *sensorData)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint64_t outTimestamp = usecTimestamp();
 800b40c:	f7ff f8cc 	bl	800a5a8 <usecTimestamp>
 800b410:	e9c7 0102 	strd	r0, r1, [r7, #8]
  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;
 800b414:	68b9      	ldr	r1, [r7, #8]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800b41c:	4613      	mov	r3, r2
 800b41e:	1acb      	subs	r3, r1, r3
 800b420:	4a02      	ldr	r2, [pc, #8]	@ (800b42c <calcSensorToOutputLatency+0x28>)
 800b422:	6013      	str	r3, [r2, #0]
}
 800b424:	bf00      	nop
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	200084d8 	.word	0x200084d8

0800b430 <compressState>:

static void compressState()
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
  stateCompressed.x = state.position.x * 1000.0f;
 800b436:	4b6a      	ldr	r3, [pc, #424]	@ (800b5e0 <compressState+0x1b0>)
 800b438:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800b43c:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 800b5e4 <compressState+0x1b4>
 800b440:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b448:	ee17 3a90 	vmov	r3, s15
 800b44c:	b21a      	sxth	r2, r3
 800b44e:	4b66      	ldr	r3, [pc, #408]	@ (800b5e8 <compressState+0x1b8>)
 800b450:	801a      	strh	r2, [r3, #0]
  stateCompressed.y = state.position.y * 1000.0f;
 800b452:	4b63      	ldr	r3, [pc, #396]	@ (800b5e0 <compressState+0x1b0>)
 800b454:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800b458:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800b5e4 <compressState+0x1b4>
 800b45c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b464:	ee17 3a90 	vmov	r3, s15
 800b468:	b21a      	sxth	r2, r3
 800b46a:	4b5f      	ldr	r3, [pc, #380]	@ (800b5e8 <compressState+0x1b8>)
 800b46c:	805a      	strh	r2, [r3, #2]
  stateCompressed.z = state.position.z * 1000.0f;
 800b46e:	4b5c      	ldr	r3, [pc, #368]	@ (800b5e0 <compressState+0x1b0>)
 800b470:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800b474:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 800b5e4 <compressState+0x1b4>
 800b478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b47c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b480:	ee17 3a90 	vmov	r3, s15
 800b484:	b21a      	sxth	r2, r3
 800b486:	4b58      	ldr	r3, [pc, #352]	@ (800b5e8 <compressState+0x1b8>)
 800b488:	809a      	strh	r2, [r3, #4]

  stateCompressed.vx = state.velocity.x * 1000.0f;
 800b48a:	4b55      	ldr	r3, [pc, #340]	@ (800b5e0 <compressState+0x1b0>)
 800b48c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800b490:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800b5e4 <compressState+0x1b4>
 800b494:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b49c:	ee17 3a90 	vmov	r3, s15
 800b4a0:	b21a      	sxth	r2, r3
 800b4a2:	4b51      	ldr	r3, [pc, #324]	@ (800b5e8 <compressState+0x1b8>)
 800b4a4:	80da      	strh	r2, [r3, #6]
  stateCompressed.vy = state.velocity.y * 1000.0f;
 800b4a6:	4b4e      	ldr	r3, [pc, #312]	@ (800b5e0 <compressState+0x1b0>)
 800b4a8:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800b4ac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800b5e4 <compressState+0x1b4>
 800b4b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4b8:	ee17 3a90 	vmov	r3, s15
 800b4bc:	b21a      	sxth	r2, r3
 800b4be:	4b4a      	ldr	r3, [pc, #296]	@ (800b5e8 <compressState+0x1b8>)
 800b4c0:	811a      	strh	r2, [r3, #8]
  stateCompressed.vz = state.velocity.z * 1000.0f;
 800b4c2:	4b47      	ldr	r3, [pc, #284]	@ (800b5e0 <compressState+0x1b0>)
 800b4c4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800b4c8:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 800b5e4 <compressState+0x1b4>
 800b4cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4d4:	ee17 3a90 	vmov	r3, s15
 800b4d8:	b21a      	sxth	r2, r3
 800b4da:	4b43      	ldr	r3, [pc, #268]	@ (800b5e8 <compressState+0x1b8>)
 800b4dc:	815a      	strh	r2, [r3, #10]

  stateCompressed.ax = state.acc.x * 9.81f * 1000.0f;
 800b4de:	4b40      	ldr	r3, [pc, #256]	@ (800b5e0 <compressState+0x1b0>)
 800b4e0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800b4e4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800b5ec <compressState+0x1bc>
 800b4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4ec:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 800b5e4 <compressState+0x1b4>
 800b4f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b4f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b4f8:	ee17 3a90 	vmov	r3, s15
 800b4fc:	b21a      	sxth	r2, r3
 800b4fe:	4b3a      	ldr	r3, [pc, #232]	@ (800b5e8 <compressState+0x1b8>)
 800b500:	819a      	strh	r2, [r3, #12]
  stateCompressed.ay = state.acc.y * 9.81f * 1000.0f;
 800b502:	4b37      	ldr	r3, [pc, #220]	@ (800b5e0 <compressState+0x1b0>)
 800b504:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800b508:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800b5ec <compressState+0x1bc>
 800b50c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b510:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800b5e4 <compressState+0x1b4>
 800b514:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b51c:	ee17 3a90 	vmov	r3, s15
 800b520:	b21a      	sxth	r2, r3
 800b522:	4b31      	ldr	r3, [pc, #196]	@ (800b5e8 <compressState+0x1b8>)
 800b524:	81da      	strh	r2, [r3, #14]
  stateCompressed.az = (state.acc.z + 1) * 9.81f * 1000.0f;
 800b526:	4b2e      	ldr	r3, [pc, #184]	@ (800b5e0 <compressState+0x1b0>)
 800b528:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800b52c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b530:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b534:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800b5ec <compressState+0x1bc>
 800b538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b53c:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800b5e4 <compressState+0x1b4>
 800b540:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b544:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b548:	ee17 3a90 	vmov	r3, s15
 800b54c:	b21a      	sxth	r2, r3
 800b54e:	4b26      	ldr	r3, [pc, #152]	@ (800b5e8 <compressState+0x1b8>)
 800b550:	821a      	strh	r2, [r3, #16]

  float const q[4] = {
    state.attitudeQuaternion.x,
 800b552:	4b23      	ldr	r3, [pc, #140]	@ (800b5e0 <compressState+0x1b0>)
 800b554:	691b      	ldr	r3, [r3, #16]
  float const q[4] = {
 800b556:	607b      	str	r3, [r7, #4]
    state.attitudeQuaternion.y,
 800b558:	4b21      	ldr	r3, [pc, #132]	@ (800b5e0 <compressState+0x1b0>)
 800b55a:	695b      	ldr	r3, [r3, #20]
  float const q[4] = {
 800b55c:	60bb      	str	r3, [r7, #8]
    state.attitudeQuaternion.z,
 800b55e:	4b20      	ldr	r3, [pc, #128]	@ (800b5e0 <compressState+0x1b0>)
 800b560:	699b      	ldr	r3, [r3, #24]
  float const q[4] = {
 800b562:	60fb      	str	r3, [r7, #12]
    state.attitudeQuaternion.w};
 800b564:	4b1e      	ldr	r3, [pc, #120]	@ (800b5e0 <compressState+0x1b0>)
 800b566:	69db      	ldr	r3, [r3, #28]
  float const q[4] = {
 800b568:	613b      	str	r3, [r7, #16]
  stateCompressed.quat = quatcompress(q);
 800b56a:	1d3b      	adds	r3, r7, #4
 800b56c:	4618      	mov	r0, r3
 800b56e:	f7ff fec7 	bl	800b300 <quatcompress>
 800b572:	4603      	mov	r3, r0
 800b574:	461a      	mov	r2, r3
 800b576:	4b1c      	ldr	r3, [pc, #112]	@ (800b5e8 <compressState+0x1b8>)
 800b578:	615a      	str	r2, [r3, #20]

  float const deg2millirad = ((float)M_PI * 1000.0f) / 180.0f;
 800b57a:	4b1d      	ldr	r3, [pc, #116]	@ (800b5f0 <compressState+0x1c0>)
 800b57c:	617b      	str	r3, [r7, #20]
  stateCompressed.rateRoll = sensorData.gyro.x * deg2millirad;
 800b57e:	4b1d      	ldr	r3, [pc, #116]	@ (800b5f4 <compressState+0x1c4>)
 800b580:	ed93 7a03 	vldr	s14, [r3, #12]
 800b584:	edd7 7a05 	vldr	s15, [r7, #20]
 800b588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b590:	ee17 3a90 	vmov	r3, s15
 800b594:	b21a      	sxth	r2, r3
 800b596:	4b14      	ldr	r3, [pc, #80]	@ (800b5e8 <compressState+0x1b8>)
 800b598:	831a      	strh	r2, [r3, #24]
  stateCompressed.ratePitch = -sensorData.gyro.y * deg2millirad;
 800b59a:	4b16      	ldr	r3, [pc, #88]	@ (800b5f4 <compressState+0x1c4>)
 800b59c:	edd3 7a04 	vldr	s15, [r3, #16]
 800b5a0:	eeb1 7a67 	vneg.f32	s14, s15
 800b5a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5b0:	ee17 3a90 	vmov	r3, s15
 800b5b4:	b21a      	sxth	r2, r3
 800b5b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b5e8 <compressState+0x1b8>)
 800b5b8:	835a      	strh	r2, [r3, #26]
  stateCompressed.rateYaw = sensorData.gyro.z * deg2millirad;
 800b5ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b5f4 <compressState+0x1c4>)
 800b5bc:	ed93 7a05 	vldr	s14, [r3, #20]
 800b5c0:	edd7 7a05 	vldr	s15, [r7, #20]
 800b5c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5cc:	ee17 3a90 	vmov	r3, s15
 800b5d0:	b21a      	sxth	r2, r3
 800b5d2:	4b05      	ldr	r3, [pc, #20]	@ (800b5e8 <compressState+0x1b8>)
 800b5d4:	839a      	strh	r2, [r3, #28]
}
 800b5d6:	bf00      	nop
 800b5d8:	3718      	adds	r7, #24
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	bd80      	pop	{r7, pc}
 800b5de:	bf00      	nop
 800b5e0:	20008588 	.word	0x20008588
 800b5e4:	447a0000 	.word	0x447a0000
 800b5e8:	200085f8 	.word	0x200085f8
 800b5ec:	411cf5c3 	.word	0x411cf5c3
 800b5f0:	418ba058 	.word	0x418ba058
 800b5f4:	20008550 	.word	0x20008550

0800b5f8 <compressSetpoint>:

static void compressSetpoint()
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0
  setpointCompressed.x = setpoint.position.x * 1000.0f;
 800b5fc:	4b41      	ldr	r3, [pc, #260]	@ (800b704 <compressSetpoint+0x10c>)
 800b5fe:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800b602:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 800b708 <compressSetpoint+0x110>
 800b606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b60a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b60e:	ee17 3a90 	vmov	r3, s15
 800b612:	b21a      	sxth	r2, r3
 800b614:	4b3d      	ldr	r3, [pc, #244]	@ (800b70c <compressSetpoint+0x114>)
 800b616:	801a      	strh	r2, [r3, #0]
  setpointCompressed.y = setpoint.position.y * 1000.0f;
 800b618:	4b3a      	ldr	r3, [pc, #232]	@ (800b704 <compressSetpoint+0x10c>)
 800b61a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800b61e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b708 <compressSetpoint+0x110>
 800b622:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b62a:	ee17 3a90 	vmov	r3, s15
 800b62e:	b21a      	sxth	r2, r3
 800b630:	4b36      	ldr	r3, [pc, #216]	@ (800b70c <compressSetpoint+0x114>)
 800b632:	805a      	strh	r2, [r3, #2]
  setpointCompressed.z = setpoint.position.z * 1000.0f;
 800b634:	4b33      	ldr	r3, [pc, #204]	@ (800b704 <compressSetpoint+0x10c>)
 800b636:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800b63a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800b708 <compressSetpoint+0x110>
 800b63e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b646:	ee17 3a90 	vmov	r3, s15
 800b64a:	b21a      	sxth	r2, r3
 800b64c:	4b2f      	ldr	r3, [pc, #188]	@ (800b70c <compressSetpoint+0x114>)
 800b64e:	809a      	strh	r2, [r3, #4]

  setpointCompressed.vx = setpoint.velocity.x * 1000.0f;
 800b650:	4b2c      	ldr	r3, [pc, #176]	@ (800b704 <compressSetpoint+0x10c>)
 800b652:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800b656:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800b708 <compressSetpoint+0x110>
 800b65a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b65e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b662:	ee17 3a90 	vmov	r3, s15
 800b666:	b21a      	sxth	r2, r3
 800b668:	4b28      	ldr	r3, [pc, #160]	@ (800b70c <compressSetpoint+0x114>)
 800b66a:	80da      	strh	r2, [r3, #6]
  setpointCompressed.vy = setpoint.velocity.y * 1000.0f;
 800b66c:	4b25      	ldr	r3, [pc, #148]	@ (800b704 <compressSetpoint+0x10c>)
 800b66e:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800b672:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 800b708 <compressSetpoint+0x110>
 800b676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b67a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b67e:	ee17 3a90 	vmov	r3, s15
 800b682:	b21a      	sxth	r2, r3
 800b684:	4b21      	ldr	r3, [pc, #132]	@ (800b70c <compressSetpoint+0x114>)
 800b686:	811a      	strh	r2, [r3, #8]
  setpointCompressed.vz = setpoint.velocity.z * 1000.0f;
 800b688:	4b1e      	ldr	r3, [pc, #120]	@ (800b704 <compressSetpoint+0x10c>)
 800b68a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800b68e:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800b708 <compressSetpoint+0x110>
 800b692:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b696:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b69a:	ee17 3a90 	vmov	r3, s15
 800b69e:	b21a      	sxth	r2, r3
 800b6a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b70c <compressSetpoint+0x114>)
 800b6a2:	815a      	strh	r2, [r3, #10]

  setpointCompressed.ax = setpoint.acceleration.x * 1000.0f;
 800b6a4:	4b17      	ldr	r3, [pc, #92]	@ (800b704 <compressSetpoint+0x10c>)
 800b6a6:	edd3 7a17 	vldr	s15, [r3, #92]	@ 0x5c
 800b6aa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800b708 <compressSetpoint+0x110>
 800b6ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6b6:	ee17 3a90 	vmov	r3, s15
 800b6ba:	b21a      	sxth	r2, r3
 800b6bc:	4b13      	ldr	r3, [pc, #76]	@ (800b70c <compressSetpoint+0x114>)
 800b6be:	819a      	strh	r2, [r3, #12]
  setpointCompressed.ay = setpoint.acceleration.y * 1000.0f;
 800b6c0:	4b10      	ldr	r3, [pc, #64]	@ (800b704 <compressSetpoint+0x10c>)
 800b6c2:	edd3 7a18 	vldr	s15, [r3, #96]	@ 0x60
 800b6c6:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800b708 <compressSetpoint+0x110>
 800b6ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6d2:	ee17 3a90 	vmov	r3, s15
 800b6d6:	b21a      	sxth	r2, r3
 800b6d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b70c <compressSetpoint+0x114>)
 800b6da:	81da      	strh	r2, [r3, #14]
  setpointCompressed.az = setpoint.acceleration.z * 1000.0f;
 800b6dc:	4b09      	ldr	r3, [pc, #36]	@ (800b704 <compressSetpoint+0x10c>)
 800b6de:	edd3 7a19 	vldr	s15, [r3, #100]	@ 0x64
 800b6e2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800b708 <compressSetpoint+0x110>
 800b6e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b6ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b6ee:	ee17 3a90 	vmov	r3, s15
 800b6f2:	b21a      	sxth	r2, r3
 800b6f4:	4b05      	ldr	r3, [pc, #20]	@ (800b70c <compressSetpoint+0x114>)
 800b6f6:	821a      	strh	r2, [r3, #16]
}
 800b6f8:	bf00      	nop
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	200084dc 	.word	0x200084dc
 800b708:	447a0000 	.word	0x447a0000
 800b70c:	20008618 	.word	0x20008618

0800b710 <stabilizerInit>:

void stabilizerInit(StateEstimatorType estimator)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af04      	add	r7, sp, #16
 800b716:	4603      	mov	r3, r0
 800b718:	71fb      	strb	r3, [r7, #7]
  if(isInit)
 800b71a:	4b13      	ldr	r3, [pc, #76]	@ (800b768 <stabilizerInit+0x58>)
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d11d      	bne.n	800b75e <stabilizerInit+0x4e>
    return;
//  skip = 1;//JH

  sensorsInit();
 800b722:	f7fd fb5f 	bl	8008de4 <sensorsInit>
//  skip = 1;// NJH

  stateEstimatorInit(estimator);
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 fa2b 	bl	800bb84 <stateEstimatorInit>

//  controllerInit(ControllerTypeAutoSelect);
//  powerDistributionInit();
//  motorsInit(platformConfigGetMotorMapping());
//  collisionAvoidanceInit();
  estimatorType = stateEstimatorGetType();
 800b72e:	f000 fa75 	bl	800bc1c <stateEstimatorGetType>
 800b732:	4603      	mov	r3, r0
 800b734:	461a      	mov	r2, r3
 800b736:	4b0d      	ldr	r3, [pc, #52]	@ (800b76c <stabilizerInit+0x5c>)
 800b738:	701a      	strb	r2, [r3, #0]
//  skip = 1;
//  controllerType = controllerGetType();

  STATIC_MEM_TASK_CREATE(stabilizerTask, stabilizerTask, STABILIZER_TASK_NAME, NULL, STABILIZER_TASK_PRI);
 800b73a:	f44f 73e1 	mov.w	r3, #450	@ 0x1c2
 800b73e:	461a      	mov	r2, r3
 800b740:	4b0b      	ldr	r3, [pc, #44]	@ (800b770 <stabilizerInit+0x60>)
 800b742:	9302      	str	r3, [sp, #8]
 800b744:	4b0b      	ldr	r3, [pc, #44]	@ (800b774 <stabilizerInit+0x64>)
 800b746:	9301      	str	r3, [sp, #4]
 800b748:	2305      	movs	r3, #5
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	2300      	movs	r3, #0
 800b74e:	490a      	ldr	r1, [pc, #40]	@ (800b778 <stabilizerInit+0x68>)
 800b750:	480a      	ldr	r0, [pc, #40]	@ (800b77c <stabilizerInit+0x6c>)
 800b752:	f7f9 fe53 	bl	80053fc <xTaskCreateStatic>

  isInit = true;
 800b756:	4b04      	ldr	r3, [pc, #16]	@ (800b768 <stabilizerInit+0x58>)
 800b758:	2201      	movs	r2, #1
 800b75a:	701a      	strb	r2, [r3, #0]
 800b75c:	e000      	b.n	800b760 <stabilizerInit+0x50>
    return;
 800b75e:	bf00      	nop
}
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	200084d6 	.word	0x200084d6
 800b76c:	200085d8 	.word	0x200085d8
 800b770:	10001da4 	.word	0x10001da4
 800b774:	2000862c 	.word	0x2000862c
 800b778:	08018f60 	.word	0x08018f60
 800b77c:	0800b7e1 	.word	0x0800b7e1

0800b780 <stabilizerTest>:

bool stabilizerTest(void)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
  bool pass = true;
 800b786:	2301      	movs	r3, #1
 800b788:	71fb      	strb	r3, [r7, #7]

//  pass &= sensorsTest();
  pass &= stateEstimatorTest();
 800b78a:	f000 fa91 	bl	800bcb0 <stateEstimatorTest>
 800b78e:	4603      	mov	r3, r0
 800b790:	461a      	mov	r2, r3
 800b792:	79fb      	ldrb	r3, [r7, #7]
 800b794:	4013      	ands	r3, r2
 800b796:	2b00      	cmp	r3, #0
 800b798:	bf14      	ite	ne
 800b79a:	2301      	movne	r3, #1
 800b79c:	2300      	moveq	r3, #0
 800b79e:	71fb      	strb	r3, [r7, #7]
//  pass &= controllerTest();
//  pass &= powerDistributionTest();
//  pass &= motorsTest();
//  pass &= collisionAvoidanceTest();

  return pass;
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
	...

0800b7ac <updateStateEstimatorAndControllerTypes>:
//  motorsSetRatio(MOTOR_M2, motorPwm->motors.m2);
//  motorsSetRatio(MOTOR_M3, motorPwm->motors.m3);
//  motorsSetRatio(MOTOR_M4, motorPwm->motors.m4);
//}

static void updateStateEstimatorAndControllerTypes() {
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	af00      	add	r7, sp, #0
  if (stateEstimatorGetType() != estimatorType) {
 800b7b0:	f000 fa34 	bl	800bc1c <stateEstimatorGetType>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	4b08      	ldr	r3, [pc, #32]	@ (800b7dc <updateStateEstimatorAndControllerTypes+0x30>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d00a      	beq.n	800b7d6 <updateStateEstimatorAndControllerTypes+0x2a>
    stateEstimatorSwitchTo(estimatorType);
 800b7c0:	4b06      	ldr	r3, [pc, #24]	@ (800b7dc <updateStateEstimatorAndControllerTypes+0x30>)
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f000 f9fd 	bl	800bbc4 <stateEstimatorSwitchTo>
    estimatorType = stateEstimatorGetType();
 800b7ca:	f000 fa27 	bl	800bc1c <stateEstimatorGetType>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	461a      	mov	r2, r3
 800b7d2:	4b02      	ldr	r3, [pc, #8]	@ (800b7dc <updateStateEstimatorAndControllerTypes+0x30>)
 800b7d4:	701a      	strb	r2, [r3, #0]

//  if (controllerGetType() != controllerType) {
//    controllerInit(controllerType);
//    controllerType = controllerGetType();
//  }
}
 800b7d6:	bf00      	nop
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	200085d8 	.word	0x200085d8

0800b7e0 <stabilizerTask>:
/* The stabilizer loop runs at 1kHz. It is the
 * responsibility of the different functions to run slower by skipping call
 * (ie. returning without modifying the output structure).
 */
static void stabilizerTask(void* param)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b086      	sub	sp, #24
 800b7e4:	af02      	add	r7, sp, #8
 800b7e6:	6078      	str	r0, [r7, #4]
  stabilizerStep_t stabilizerStep;
  uint32_t lastWakeTime;
  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);
 800b7e8:	2103      	movs	r1, #3
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	f7fa fa42 	bl	8005c74 <vTaskSetApplicationTaskTag>

  //Wait for the system to be fully started to start stabilization loop
  systemWaitStart();
 800b7f0:	f000 f934 	bl	800ba5c <systemWaitStart>

//  DEBUG_PRINT("Wait for sensor calibration...\n");

  // Wait for sensors to be calibrated
  lastWakeTime = xTaskGetTickCount();
 800b7f4:	f7fa f970 	bl	8005ad8 <xTaskGetTickCount>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	60bb      	str	r3, [r7, #8]
  while(!sensorsAreCalibrated()) {
 800b7fc:	e005      	b.n	800b80a <stabilizerTask+0x2a>
    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));
 800b7fe:	f107 0308 	add.w	r3, r7, #8
 800b802:	2101      	movs	r1, #1
 800b804:	4618      	mov	r0, r3
 800b806:	f7f9 ffa1 	bl	800574c <vTaskDelayUntil>
  while(!sensorsAreCalibrated()) {
 800b80a:	f7fd fb0d 	bl	8008e28 <sensorsAreCalibrated>
 800b80e:	4603      	mov	r3, r0
 800b810:	f083 0301 	eor.w	r3, r3, #1
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1f1      	bne.n	800b7fe <stabilizerTask+0x1e>
  }
  // Initialize stabilizerStep to something else than 0
  stabilizerStep = 1;
 800b81a:	2301      	movs	r3, #1
 800b81c:	60fb      	str	r3, [r7, #12]


//  DEBUG_PRINT("Starting stabilizer loop\n");
  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997, 1003, 1);
 800b81e:	f7fa f95b 	bl	8005ad8 <xTaskGetTickCount>
 800b822:	4601      	mov	r1, r0
 800b824:	2301      	movs	r3, #1
 800b826:	9301      	str	r3, [sp, #4]
 800b828:	f240 33eb 	movw	r3, #1003	@ 0x3eb
 800b82c:	9300      	str	r3, [sp, #0]
 800b82e:	f240 33e5 	movw	r3, #997	@ 0x3e5
 800b832:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b836:	480d      	ldr	r0, [pc, #52]	@ (800b86c <stabilizerTask+0x8c>)
 800b838:	f005 fc3b 	bl	80110b2 <rateSupervisorInit>

  while(1) {
    // The sensor should unlock at 1kHz
    sensorsWaitDataReady();
 800b83c:	f7fd fb10 	bl	8008e60 <sensorsWaitDataReady>

    // update sensorData struct (for logging variables)
    sensorsAcquire(&sensorData);
 800b840:	480b      	ldr	r0, [pc, #44]	@ (800b870 <stabilizerTask+0x90>)
 800b842:	f7fd fafd 	bl	8008e40 <sensorsAcquire>

//    if (healthShallWeRunTest()) {
//      healthRunTests(&sensorData);
//    }
//    else {
      updateStateEstimatorAndControllerTypes();
 800b846:	f7ff ffb1 	bl	800b7ac <updateStateEstimatorAndControllerTypes>

      stateEstimator(&state, stabilizerStep);
 800b84a:	68f9      	ldr	r1, [r7, #12]
 800b84c:	4809      	ldr	r0, [pc, #36]	@ (800b874 <stabilizerTask+0x94>)
 800b84e:	f000 fa45 	bl	800bcdc <stateEstimator>
//      } else {
//        motorsStop();
//      }

      // Compute compressed log formats
      compressState();
 800b852:	f7ff fded 	bl	800b430 <compressState>
      compressSetpoint();
 800b856:	f7ff fecf 	bl	800b5f8 <compressSetpoint>
          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer
          && RATE_DO_EXECUTE(usddeckFrequency(), stabilizerStep)) {
        usddeckTriggerLogging();
      }
#endif
      calcSensorToOutputLatency(&sensorData);
 800b85a:	4805      	ldr	r0, [pc, #20]	@ (800b870 <stabilizerTask+0x90>)
 800b85c:	f7ff fdd2 	bl	800b404 <calcSensorToOutputLatency>
      stabilizerStep++;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	3301      	adds	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
    sensorsWaitDataReady();
 800b866:	bf00      	nop
 800b868:	e7e8      	b.n	800b83c <stabilizerTask+0x5c>
 800b86a:	bf00      	nop
 800b86c:	200085dc 	.word	0x200085dc
 800b870:	20008550 	.word	0x20008550
 800b874:	20008588 	.word	0x20008588

0800b878 <vApplicationGetIdleTaskMemory>:
 * used by the Idle task.
 */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xIdleTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

  *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4a07      	ldr	r2, [pc, #28]	@ (800b8a4 <vApplicationGetIdleTaskMemory+0x2c>)
 800b888:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = uxIdleTaskStack;
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	4a06      	ldr	r2, [pc, #24]	@ (800b8a8 <vApplicationGetIdleTaskMemory+0x30>)
 800b88e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2296      	movs	r2, #150	@ 0x96
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	bf00      	nop
 800b898:	3714      	adds	r7, #20
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr
 800b8a2:	bf00      	nop
 800b8a4:	10001e08 	.word	0x10001e08
 800b8a8:	10001e6c 	.word	0x10001e6c

0800b8ac <vApplicationGetTimerTaskMemory>:
 * to provide the memory that is used by the Timer service task.
 */
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer,
                                     StackType_t **ppxTimerTaskStackBuffer,
                                     uint32_t *pulTimerTaskStackSize )
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
  NO_DMA_CCM_SAFE_ZERO_INIT static StaticTask_t xTimerTaskTCB;
  NO_DMA_CCM_SAFE_ZERO_INIT static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

  *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4a07      	ldr	r2, [pc, #28]	@ (800b8d8 <vApplicationGetTimerTaskMemory+0x2c>)
 800b8bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = uxTimerTaskStack;
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	4a06      	ldr	r2, [pc, #24]	@ (800b8dc <vApplicationGetTimerTaskMemory+0x30>)
 800b8c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800b8ca:	601a      	str	r2, [r3, #0]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	100020c4 	.word	0x100020c4
 800b8dc:	10002128 	.word	0x10002128

0800b8e0 <systemLaunch>:

static void systemTask(void *arg);


void systemLaunch(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af04      	add	r7, sp, #16
  STATIC_MEM_TASK_CREATE(systemTask, systemTask, SYSTEM_TASK_NAME, NULL, SYSTEM_TASK_PRI);
 800b8e6:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b06      	ldr	r3, [pc, #24]	@ (800b908 <systemLaunch+0x28>)
 800b8ee:	9302      	str	r3, [sp, #8]
 800b8f0:	4b06      	ldr	r3, [pc, #24]	@ (800b90c <systemLaunch+0x2c>)
 800b8f2:	9301      	str	r3, [sp, #4]
 800b8f4:	2302      	movs	r3, #2
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4905      	ldr	r1, [pc, #20]	@ (800b910 <systemLaunch+0x30>)
 800b8fc:	4805      	ldr	r0, [pc, #20]	@ (800b914 <systemLaunch+0x34>)
 800b8fe:	f7f9 fd7d 	bl	80053fc <xTaskCreateStatic>
}
 800b902:	bf00      	nop
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	10002a88 	.word	0x10002a88
 800b90c:	20008d3c 	.word	0x20008d3c
 800b910:	08018f6c 	.word	0x08018f6c
 800b914:	0800b98d 	.word	0x0800b98d

0800b918 <systemInit>:
void systemInit(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0

	if (isInit) return;
 800b91c:	4b0c      	ldr	r3, [pc, #48]	@ (800b950 <systemInit+0x38>)
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d113      	bne.n	800b94c <systemInit+0x34>

	canStartMutex = xSemaphoreCreateMutexStatic(&canStartMutexBuffer);
 800b924:	490b      	ldr	r1, [pc, #44]	@ (800b954 <systemInit+0x3c>)
 800b926:	2001      	movs	r0, #1
 800b928:	f7f8 ff9f 	bl	800486a <xQueueCreateMutexStatic>
 800b92c:	4603      	mov	r3, r0
 800b92e:	4a0a      	ldr	r2, [pc, #40]	@ (800b958 <systemInit+0x40>)
 800b930:	6013      	str	r3, [r2, #0]
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800b932:	4b09      	ldr	r3, [pc, #36]	@ (800b958 <systemInit+0x40>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f04f 31ff 	mov.w	r1, #4294967295
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7f9 face 	bl	8004edc <xQueueSemaphoreTake>

	workerInit();
 800b940:	f000 f8d4 	bl	800baec <workerInit>

	isInit = true;
 800b944:	4b02      	ldr	r3, [pc, #8]	@ (800b950 <systemInit+0x38>)
 800b946:	2201      	movs	r2, #1
 800b948:	701a      	strb	r2, [r3, #0]
 800b94a:	e000      	b.n	800b94e <systemInit+0x36>
	if (isInit) return;
 800b94c:	bf00      	nop
}
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	20008d38 	.word	0x20008d38
 800b954:	200091f0 	.word	0x200091f0
 800b958:	200091ec 	.word	0x200091ec

0800b95c <systemTest>:
bool systemTest(void)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
	bool pass=isInit;
 800b962:	4b09      	ldr	r3, [pc, #36]	@ (800b988 <systemTest+0x2c>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	71fb      	strb	r3, [r7, #7]
	pass &= workerTest();
 800b968:	f000 f8de 	bl	800bb28 <workerTest>
 800b96c:	4603      	mov	r3, r0
 800b96e:	461a      	mov	r2, r3
 800b970:	79fb      	ldrb	r3, [r7, #7]
 800b972:	4013      	ands	r3, r2
 800b974:	2b00      	cmp	r3, #0
 800b976:	bf14      	ite	ne
 800b978:	2301      	movne	r3, #1
 800b97a:	2300      	moveq	r3, #0
 800b97c:	71fb      	strb	r3, [r7, #7]

	return pass;
 800b97e:	79fb      	ldrb	r3, [r7, #7]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3708      	adds	r7, #8
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20008d38 	.word	0x20008d38

0800b98c <systemTask>:
void systemTask(void *arg) {
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
	bool pass = true;
 800b994:	2301      	movs	r3, #1
 800b996:	73fb      	strb	r3, [r7, #15]
//	counter += 1; // JUMP HERE
	ledInit();
 800b998:	f7fc fd6e 	bl	8008478 <ledInit>
//		if (i % 10 == 0){
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//		}
//		vTaskDelay(1);
//	}
	usecTimerInit();
 800b99c:	f7fe fdcc 	bl	800a538 <usecTimerInit>
	I2C1_Init();
 800b9a0:	f7fc fc3e 	bl	8008220 <I2C1_Init>
	I2C2_Init();
 800b9a4:	f7fc fc6a 	bl	800827c <I2C2_Init>

	SPI2_Init();
 800b9a8:	f7fc ff40 	bl	800882c <SPI2_Init>
	SPI3_Init();
 800b9ac:	f7fc ff74 	bl	8008898 <SPI3_Init>
	spi1_init();
 800b9b0:	f7fc ff06 	bl	80087c0 <spi1_init>
//	MX_UART4_Init();
//	MX_USART1_UART_Init();
//	MX_USART2_UART_Init();
//	MX_USART3_UART_Init();

	systemInit();
 800b9b4:	f7ff ffb0 	bl	800b918 <systemInit>
//	counter +=1 ; // JUMP HERE

	StateEstimatorType estimator = StateEstimatorTypeAutoSelect;
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	73bb      	strb	r3, [r7, #14]
	//Macro-Work when we defind its
#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 1;
	estimatorKalmanTaskInit();
 800b9bc:	f000 faea 	bl	800bf94 <estimatorKalmanTaskInit>
	counter = 2;
 800b9c0:	4b1e      	ldr	r3, [pc, #120]	@ (800ba3c <systemTask+0xb0>)
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	601a      	str	r2, [r3, #0]
	//JH
#endif
	zRanger2Init();
 800b9c6:	f7fb fe89 	bl	80076dc <zRanger2Init>
	//Test LED
	ledblink_test();
 800b9ca:	f7fd f9ef 	bl	8008dac <ledblink_test>
//	counter +=1; // Not JUMP HERE
//	flowTofInit();
//	tofInit();

//	estimator = deckGetRequiredEstimator();
	stabilizerInit(estimator);
 800b9ce:	7bbb      	ldrb	r3, [r7, #14]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff fe9d 	bl	800b710 <stabilizerInit>
//	counter +=1 ;// NJH
	if (systemTest() == false) {
 800b9d6:	f7ff ffc1 	bl	800b95c <systemTest>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	f083 0301 	eor.w	r3, r3, #1
 800b9e0:	b2db      	uxtb	r3, r3
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d001      	beq.n	800b9ea <systemTask+0x5e>
		pass = false;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	73fb      	strb	r3, [r7, #15]
	}

	if ( stabilizerTest() == false )
 800b9ea:	f7ff fec9 	bl	800b780 <stabilizerTest>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f083 0301 	eor.w	r3, r3, #1
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d001      	beq.n	800b9fe <systemTask+0x72>
	{
		pass = false;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	73fb      	strb	r3, [r7, #15]
	}

#ifdef CONFIG_ESTIMATOR_KALMAN_ENABLE_TEST
//	counter = 3;
	//NJH
if (estimatorKalmanTaskTest() == false) {
 800b9fe:	f000 fb11 	bl	800c024 <estimatorKalmanTaskTest>
 800ba02:	4603      	mov	r3, r0
 800ba04:	f083 0301 	eor.w	r3, r3, #1
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <systemTask+0x86>
//	counter = 1;
	//NJH
  pass = false;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	73fb      	strb	r3, [r7, #15]
}
#endif

	vTaskDelay(100);
 800ba12:	2064      	movs	r0, #100	@ 0x64
 800ba14:	f7f9 ff10 	bl	8005838 <vTaskDelay>
	ledSet(1);
 800ba18:	2001      	movs	r0, #1
 800ba1a:	f7fc fd6b 	bl	80084f4 <ledSet>
	if (pass) {
 800ba1e:	7bfb      	ldrb	r3, [r7, #15]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <systemTask+0x9c>
		systemStart();
 800ba24:	f000 f80c 	bl	800ba40 <systemStart>
	}
	vTaskDelay(100);
 800ba28:	2064      	movs	r0, #100	@ 0x64
 800ba2a:	f7f9 ff05 	bl	8005838 <vTaskDelay>
	workerLoop();
 800ba2e:	f000 f88b 	bl	800bb48 <workerLoop>
	while(1)
	{

		vTaskDelay(1000);
 800ba32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800ba36:	f7f9 feff 	bl	8005838 <vTaskDelay>
 800ba3a:	e7fa      	b.n	800ba32 <systemTask+0xa6>
 800ba3c:	20008d34 	.word	0x20008d34

0800ba40 <systemStart>:
	}
}
void systemStart()
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	af00      	add	r7, sp, #0
	xSemaphoreGive(canStartMutex);
 800ba44:	4b04      	ldr	r3, [pc, #16]	@ (800ba58 <systemStart+0x18>)
 800ba46:	6818      	ldr	r0, [r3, #0]
 800ba48:	2300      	movs	r3, #0
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	f7f8 ff27 	bl	80048a0 <xQueueGenericSend>
}
 800ba52:	bf00      	nop
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	200091ec 	.word	0x200091ec

0800ba5c <systemWaitStart>:
void systemWaitStart(void)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	af00      	add	r7, sp, #0
//	flage = 2;
	while (!isInit) vTaskDelay(2);
 800ba60:	e002      	b.n	800ba68 <systemWaitStart+0xc>
 800ba62:	2002      	movs	r0, #2
 800ba64:	f7f9 fee8 	bl	8005838 <vTaskDelay>
 800ba68:	4b0b      	ldr	r3, [pc, #44]	@ (800ba98 <systemWaitStart+0x3c>)
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	f083 0301 	eor.w	r3, r3, #1
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f5      	bne.n	800ba62 <systemWaitStart+0x6>
//	flage = 2; // nan JUMP HERE
	xSemaphoreTake(canStartMutex, portMAX_DELAY);
 800ba76:	4b09      	ldr	r3, [pc, #36]	@ (800ba9c <systemWaitStart+0x40>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f04f 31ff 	mov.w	r1, #4294967295
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f7f9 fa2c 	bl	8004edc <xQueueSemaphoreTake>
	xSemaphoreGive(canStartMutex);
 800ba84:	4b05      	ldr	r3, [pc, #20]	@ (800ba9c <systemWaitStart+0x40>)
 800ba86:	6818      	ldr	r0, [r3, #0]
 800ba88:	2300      	movs	r3, #0
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	f7f8 ff07 	bl	80048a0 <xQueueGenericSend>
}
 800ba92:	bf00      	nop
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20008d38 	.word	0x20008d38
 800ba9c:	200091ec 	.word	0x200091ec

0800baa0 <vApplicationIdleHook>:


void vApplicationIdleHook(void) {
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0

	static uint32_t tickOfLatestWatchdogReset = M2T(0);

	portTickType tickCount = xTaskGetTickCount();
 800baa6:	f7fa f817 	bl	8005ad8 <xTaskGetTickCount>
 800baaa:	6078      	str	r0, [r7, #4]

	if (tickCount - tickOfLatestWatchdogReset > M2T(80)) {
 800baac:	4b06      	ldr	r3, [pc, #24]	@ (800bac8 <vApplicationIdleHook+0x28>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	687a      	ldr	r2, [r7, #4]
 800bab2:	1ad3      	subs	r3, r2, r3
 800bab4:	2b50      	cmp	r3, #80	@ 0x50
 800bab6:	d902      	bls.n	800babe <vApplicationIdleHook+0x1e>
		tickOfLatestWatchdogReset = tickCount;
 800bab8:	4a03      	ldr	r2, [pc, #12]	@ (800bac8 <vApplicationIdleHook+0x28>)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6013      	str	r3, [r2, #0]
//		watchdogReset();
	}

}
 800babe:	bf00      	nop
 800bac0:	3708      	adds	r7, #8
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop
 800bac8:	20009240 	.word	0x20009240

0800bacc <vApplicationStackOverflowHook>:

#if ( configCHECK_FOR_STACK_OVERFLOW > 0 )

    void vApplicationStackOverflowHook( TaskHandle_t xTask,
                                        char * pcTaskName )
    {
 800bacc:	b480      	push	{r7}
 800bace:	b083      	sub	sp, #12
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
        /* Check pcTaskName for the name of the offending task,
         * or pxCurrentTCB if pcTaskName has itself been corrupted. */
        ( void ) xTask;
        ( void ) pcTaskName;
    }
 800bad6:	bf00      	nop
 800bad8:	370c      	adds	r7, #12
 800bada:	46bd      	mov	sp, r7
 800badc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae0:	4770      	bx	lr

0800bae2 <vApplicationMallocFailedHook>:

#endif /* #if ( configCHECK_FOR_STACK_OVERFLOW > 0 ) */

void vApplicationMallocFailedHook( void ){
 800bae2:	b480      	push	{r7}
 800bae4:	af00      	add	r7, sp, #0
	while(1);
 800bae6:	bf00      	nop
 800bae8:	e7fd      	b.n	800bae6 <vApplicationMallocFailedHook+0x4>
	...

0800baec <workerInit>:
static xQueueHandle workerQueue;

STATIC_MEM_QUEUE_ALLOC(workerQueue, WORKER_QUEUE_LENGTH, sizeof(struct worker_work));

void workerInit()
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af02      	add	r7, sp, #8
  if (workerQueue)
 800baf2:	4b0a      	ldr	r3, [pc, #40]	@ (800bb1c <workerInit+0x30>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10d      	bne.n	800bb16 <workerInit+0x2a>
    return;

  workerQueue = STATIC_MEM_QUEUE_CREATE(workerQueue);
 800bafa:	2305      	movs	r3, #5
 800bafc:	4618      	mov	r0, r3
 800bafe:	2308      	movs	r3, #8
 800bb00:	4619      	mov	r1, r3
 800bb02:	2300      	movs	r3, #0
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4b06      	ldr	r3, [pc, #24]	@ (800bb20 <workerInit+0x34>)
 800bb08:	4a06      	ldr	r2, [pc, #24]	@ (800bb24 <workerInit+0x38>)
 800bb0a:	f7f8 fdb5 	bl	8004678 <xQueueGenericCreateStatic>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4a02      	ldr	r2, [pc, #8]	@ (800bb1c <workerInit+0x30>)
 800bb12:	6013      	str	r3, [r2, #0]
 800bb14:	e000      	b.n	800bb18 <workerInit+0x2c>
    return;
 800bb16:	bf00      	nop

}
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	20009244 	.word	0x20009244
 800bb20:	10002b14 	.word	0x10002b14
 800bb24:	10002aec 	.word	0x10002aec

0800bb28 <workerTest>:

bool workerTest()
{
 800bb28:	b480      	push	{r7}
 800bb2a:	af00      	add	r7, sp, #0
  return (workerQueue != NULL);
 800bb2c:	4b05      	ldr	r3, [pc, #20]	@ (800bb44 <workerTest+0x1c>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	bf14      	ite	ne
 800bb34:	2301      	movne	r3, #1
 800bb36:	2300      	moveq	r3, #0
 800bb38:	b2db      	uxtb	r3, r3
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb42:	4770      	bx	lr
 800bb44:	20009244 	.word	0x20009244

0800bb48 <workerLoop>:

void workerLoop()
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b082      	sub	sp, #8
 800bb4c:	af00      	add	r7, sp, #0
  struct worker_work work;

  if (!workerQueue)
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	@ (800bb80 <workerLoop+0x38>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d00f      	beq.n	800bb76 <workerLoop+0x2e>
    return;

  while (1)
  {
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800bb56:	4b0a      	ldr	r3, [pc, #40]	@ (800bb80 <workerLoop+0x38>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4639      	mov	r1, r7
 800bb5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb60:	4618      	mov	r0, r3
 800bb62:	f7f9 f8db 	bl	8004d1c <xQueueReceive>

    if (work.function)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d0f4      	beq.n	800bb56 <workerLoop+0xe>
      work.function(work.arg);
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	4610      	mov	r0, r2
 800bb72:	4798      	blx	r3
    xQueueReceive(workerQueue, &work, portMAX_DELAY);
 800bb74:	e7ef      	b.n	800bb56 <workerLoop+0xe>
    return;
 800bb76:	bf00      	nop
  }
}
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	20009244 	.word	0x20009244

0800bb84 <stateEstimatorInit>:
        .name = "OutOfTree",
    },
#endif
};

void stateEstimatorInit(StateEstimatorType estimator) {
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af02      	add	r7, sp, #8
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	71fb      	strb	r3, [r7, #7]
  measurementsQueue = STATIC_MEM_QUEUE_CREATE(measurementsQueue);
 800bb8e:	2314      	movs	r3, #20
 800bb90:	4618      	mov	r0, r3
 800bb92:	2330      	movs	r3, #48	@ 0x30
 800bb94:	4619      	mov	r1, r3
 800bb96:	2300      	movs	r3, #0
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	4b07      	ldr	r3, [pc, #28]	@ (800bbb8 <stateEstimatorInit+0x34>)
 800bb9c:	4a07      	ldr	r2, [pc, #28]	@ (800bbbc <stateEstimatorInit+0x38>)
 800bb9e:	f7f8 fd6b 	bl	8004678 <xQueueGenericCreateStatic>
 800bba2:	4603      	mov	r3, r0
 800bba4:	4a06      	ldr	r2, [pc, #24]	@ (800bbc0 <stateEstimatorInit+0x3c>)
 800bba6:	6013      	str	r3, [r2, #0]
  stateEstimatorSwitchTo(estimator);
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 f80a 	bl	800bbc4 <stateEstimatorSwitchTo>
}
 800bbb0:	bf00      	nop
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}
 800bbb8:	10002f24 	.word	0x10002f24
 800bbbc:	10002b64 	.word	0x10002b64
 800bbc0:	2000924c 	.word	0x2000924c

0800bbc4 <stateEstimatorSwitchTo>:

void stateEstimatorSwitchTo(StateEstimatorType estimator) {
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b084      	sub	sp, #16
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	4603      	mov	r3, r0
 800bbcc:	71fb      	strb	r3, [r7, #7]
  if (estimator < 0 || estimator >= StateEstimatorType_COUNT) {
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d81c      	bhi.n	800bc0e <stateEstimatorSwitchTo+0x4a>
    return;
  }

  StateEstimatorType newEstimator = estimator;
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	73fb      	strb	r3, [r7, #15]

  if (StateEstimatorTypeAutoSelect == newEstimator) {
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d101      	bne.n	800bbe2 <stateEstimatorSwitchTo+0x1e>
    newEstimator = DEFAULT_ESTIMATOR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	73fb      	strb	r3, [r7, #15]
    #define ESTIMATOR StateEstimatorTypeComplementary
  #else
    #define ESTIMATOR StateEstimatorTypeAutoSelect
  #endif

  StateEstimatorType forcedEstimator = ESTIMATOR;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	73bb      	strb	r3, [r7, #14]
  if (forcedEstimator != StateEstimatorTypeAutoSelect) {
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d001      	beq.n	800bbf0 <stateEstimatorSwitchTo+0x2c>
//    DEBUG_PRINT("Estimator type forced\n");
    newEstimator = forcedEstimator;
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	73fb      	strb	r3, [r7, #15]
  }

  initEstimator(newEstimator);
 800bbf0:	7bfb      	ldrb	r3, [r7, #15]
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 f81e 	bl	800bc34 <initEstimator>
  StateEstimatorType previousEstimator = currentEstimator;
 800bbf8:	4b07      	ldr	r3, [pc, #28]	@ (800bc18 <stateEstimatorSwitchTo+0x54>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	737b      	strb	r3, [r7, #13]
  currentEstimator = newEstimator;
 800bbfe:	4a06      	ldr	r2, [pc, #24]	@ (800bc18 <stateEstimatorSwitchTo+0x54>)
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
 800bc02:	7013      	strb	r3, [r2, #0]
  deinitEstimator(previousEstimator);
 800bc04:	7b7b      	ldrb	r3, [r7, #13]
 800bc06:	4618      	mov	r0, r3
 800bc08:	f000 f832 	bl	800bc70 <deinitEstimator>
 800bc0c:	e000      	b.n	800bc10 <stateEstimatorSwitchTo+0x4c>
    return;
 800bc0e:	bf00      	nop

//  DEBUG_PRINT("Using %s (%d) estimator\n", stateEstimatorGetName(), currentEstimator);
}
 800bc10:	3710      	adds	r7, #16
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20009248 	.word	0x20009248

0800bc1c <stateEstimatorGetType>:

StateEstimatorType stateEstimatorGetType(void) {
 800bc1c:	b480      	push	{r7}
 800bc1e:	af00      	add	r7, sp, #0
  return currentEstimator;
 800bc20:	4b03      	ldr	r3, [pc, #12]	@ (800bc30 <stateEstimatorGetType+0x14>)
 800bc22:	781b      	ldrb	r3, [r3, #0]
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	20009248 	.word	0x20009248

0800bc34 <initEstimator>:

static void initEstimator(const StateEstimatorType estimator) {
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b082      	sub	sp, #8
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].init) {
 800bc3e:	79fa      	ldrb	r2, [r7, #7]
 800bc40:	490a      	ldr	r1, [pc, #40]	@ (800bc6c <initEstimator+0x38>)
 800bc42:	4613      	mov	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	440b      	add	r3, r1
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d008      	beq.n	800bc64 <initEstimator+0x30>
    estimatorFunctions[estimator].init();
 800bc52:	79fa      	ldrb	r2, [r7, #7]
 800bc54:	4905      	ldr	r1, [pc, #20]	@ (800bc6c <initEstimator+0x38>)
 800bc56:	4613      	mov	r3, r2
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	4413      	add	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	440b      	add	r3, r1
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4798      	blx	r3
  }
}
 800bc64:	bf00      	nop
 800bc66:	3708      	adds	r7, #8
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	20000030 	.word	0x20000030

0800bc70 <deinitEstimator>:

static void deinitEstimator(const StateEstimatorType estimator) {
 800bc70:	b580      	push	{r7, lr}
 800bc72:	b082      	sub	sp, #8
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	4603      	mov	r3, r0
 800bc78:	71fb      	strb	r3, [r7, #7]
  if (estimatorFunctions[estimator].deinit) {
 800bc7a:	79fa      	ldrb	r2, [r7, #7]
 800bc7c:	490b      	ldr	r1, [pc, #44]	@ (800bcac <deinitEstimator+0x3c>)
 800bc7e:	4613      	mov	r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	4413      	add	r3, r2
 800bc84:	009b      	lsls	r3, r3, #2
 800bc86:	440b      	add	r3, r1
 800bc88:	3304      	adds	r3, #4
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d009      	beq.n	800bca4 <deinitEstimator+0x34>
    estimatorFunctions[estimator].deinit();
 800bc90:	79fa      	ldrb	r2, [r7, #7]
 800bc92:	4906      	ldr	r1, [pc, #24]	@ (800bcac <deinitEstimator+0x3c>)
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	440b      	add	r3, r1
 800bc9e:	3304      	adds	r3, #4
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4798      	blx	r3
  }
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	20000030 	.word	0x20000030

0800bcb0 <stateEstimatorTest>:

bool stateEstimatorTest(void) {
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  return estimatorFunctions[currentEstimator].test();
 800bcb4:	4b07      	ldr	r3, [pc, #28]	@ (800bcd4 <stateEstimatorTest+0x24>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	4619      	mov	r1, r3
 800bcba:	4a07      	ldr	r2, [pc, #28]	@ (800bcd8 <stateEstimatorTest+0x28>)
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	440b      	add	r3, r1
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	4413      	add	r3, r2
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4798      	blx	r3
 800bccc:	4603      	mov	r3, r0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	bd80      	pop	{r7, pc}
 800bcd2:	bf00      	nop
 800bcd4:	20009248 	.word	0x20009248
 800bcd8:	20000030 	.word	0x20000030

0800bcdc <stateEstimator>:

void stateEstimator(state_t *state, const stabilizerStep_t tick) {
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  estimatorFunctions[currentEstimator].update(state, tick);
 800bce6:	4b09      	ldr	r3, [pc, #36]	@ (800bd0c <stateEstimator+0x30>)
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	4619      	mov	r1, r3
 800bcec:	4a08      	ldr	r2, [pc, #32]	@ (800bd10 <stateEstimator+0x34>)
 800bcee:	460b      	mov	r3, r1
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	440b      	add	r3, r1
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	330c      	adds	r3, #12
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	4798      	blx	r3
}
 800bd02:	bf00      	nop
 800bd04:	3708      	adds	r7, #8
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	20009248 	.word	0x20009248
 800bd10:	20000030 	.word	0x20000030

0800bd14 <estimatorEnqueue>:
const char* stateEstimatorGetName() {
  return estimatorFunctions[currentEstimator].name;
}


void estimatorEnqueue(const measurement_t *measurement) {
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  if (!measurementsQueue) {
 800bd1c:	4b19      	ldr	r3, [pc, #100]	@ (800bd84 <estimatorEnqueue+0x70>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d02b      	beq.n	800bd7c <estimatorEnqueue+0x68>
    return;
  }

  portBASE_TYPE result;
  bool isInInterrupt = (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 800bd24:	4b18      	ldr	r3, [pc, #96]	@ (800bd88 <estimatorEnqueue+0x74>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	bf14      	ite	ne
 800bd30:	2301      	movne	r3, #1
 800bd32:	2300      	moveq	r3, #0
 800bd34:	75fb      	strb	r3, [r7, #23]
  if (isInInterrupt) {
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d016      	beq.n	800bd6a <estimatorEnqueue+0x56>
    portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	60fb      	str	r3, [r7, #12]
    result = xQueueSendFromISR(measurementsQueue, measurement, &xHigherPriorityTaskWoken);
 800bd40:	4b10      	ldr	r3, [pc, #64]	@ (800bd84 <estimatorEnqueue+0x70>)
 800bd42:	6818      	ldr	r0, [r3, #0]
 800bd44:	f107 020c 	add.w	r2, r7, #12
 800bd48:	2300      	movs	r3, #0
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	f7f8 feb6 	bl	8004abc <xQueueGenericSendFromISR>
 800bd50:	6138      	str	r0, [r7, #16]
    if (xHigherPriorityTaskWoken == pdTRUE) {
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d112      	bne.n	800bd7e <estimatorEnqueue+0x6a>
      portYIELD();
 800bd58:	4b0c      	ldr	r3, [pc, #48]	@ (800bd8c <estimatorEnqueue+0x78>)
 800bd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	f3bf 8f6f 	isb	sy
 800bd68:	e009      	b.n	800bd7e <estimatorEnqueue+0x6a>
    }
  } else {
    result = xQueueSend(measurementsQueue, measurement, 0);
 800bd6a:	4b06      	ldr	r3, [pc, #24]	@ (800bd84 <estimatorEnqueue+0x70>)
 800bd6c:	6818      	ldr	r0, [r3, #0]
 800bd6e:	2300      	movs	r3, #0
 800bd70:	2200      	movs	r2, #0
 800bd72:	6879      	ldr	r1, [r7, #4]
 800bd74:	f7f8 fd94 	bl	80048a0 <xQueueGenericSend>
 800bd78:	6138      	str	r0, [r7, #16]
 800bd7a:	e000      	b.n	800bd7e <estimatorEnqueue+0x6a>
    return;
 800bd7c:	bf00      	nop
//    STATS_CNT_RATE_EVENT(&measurementAppendedCounter);
  } else {
//    STATS_CNT_RATE_EVENT(&measurementNotAppendedCounter);
  }

}
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	2000924c 	.word	0x2000924c
 800bd88:	e000ed00 	.word	0xe000ed00
 800bd8c:	e000ed04 	.word	0xe000ed04

0800bd90 <estimatorDequeue>:

bool estimatorDequeue(measurement_t *measurement) {
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  return pdTRUE == xQueueReceive(measurementsQueue, measurement, 0);
 800bd98:	4b08      	ldr	r3, [pc, #32]	@ (800bdbc <estimatorDequeue+0x2c>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	4618      	mov	r0, r3
 800bda2:	f7f8 ffbb 	bl	8004d1c <xQueueReceive>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	bf0c      	ite	eq
 800bdac:	2301      	moveq	r3, #1
 800bdae:	2300      	movne	r3, #0
 800bdb0:	b2db      	uxtb	r3, r3
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	2000924c 	.word	0x2000924c

0800bdc0 <estimatorComplementaryInit>:
#define POS_UPDATE_RATE RATE_100_HZ
#define POS_UPDATE_DT 1.0/POS_UPDATE_RATE


void estimatorComplementaryInit(void)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	af00      	add	r7, sp, #0
  sensfusion6Init();
 800bdc4:	f7fe fdd0 	bl	800a968 <sensfusion6Init>
}
 800bdc8:	bf00      	nop
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <estimatorComplementaryTest>:

bool estimatorComplementaryTest(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
  bool pass = true;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	71fb      	strb	r3, [r7, #7]

  pass &= sensfusion6Test();
 800bdd6:	f7fe fdd9 	bl	800a98c <sensfusion6Test>
 800bdda:	4603      	mov	r3, r0
 800bddc:	461a      	mov	r2, r3
 800bdde:	79fb      	ldrb	r3, [r7, #7]
 800bde0:	4013      	ands	r3, r2
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	bf14      	ite	ne
 800bde6:	2301      	movne	r3, #1
 800bde8:	2300      	moveq	r3, #0
 800bdea:	71fb      	strb	r3, [r7, #7]

  return pass;
 800bdec:	79fb      	ldrb	r3, [r7, #7]
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <estimatorComplementary>:

void estimatorComplementary(state_t *state, const stabilizerStep_t stabilizerStep)
{
 800bdf8:	b590      	push	{r4, r7, lr}
 800bdfa:	b08f      	sub	sp, #60	@ 0x3c
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800be02:	e03c      	b.n	800be7e <estimatorComplementary+0x86>
    switch (m.type)
 800be04:	7a3b      	ldrb	r3, [r7, #8]
 800be06:	3b04      	subs	r3, #4
 800be08:	2b07      	cmp	r3, #7
 800be0a:	d837      	bhi.n	800be7c <estimatorComplementary+0x84>
 800be0c:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <estimatorComplementary+0x1c>)
 800be0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be12:	bf00      	nop
 800be14:	0800be6b 	.word	0x0800be6b
 800be18:	0800be7d 	.word	0x0800be7d
 800be1c:	0800be7d 	.word	0x0800be7d
 800be20:	0800be7d 	.word	0x0800be7d
 800be24:	0800be7d 	.word	0x0800be7d
 800be28:	0800be35 	.word	0x0800be35
 800be2c:	0800be47 	.word	0x0800be47
 800be30:	0800be59 	.word	0x0800be59
    {
    case MeasurementTypeGyroscope:
      gyro = m.data.gyroscope.gyro;
 800be34:	4b50      	ldr	r3, [pc, #320]	@ (800bf78 <estimatorComplementary+0x180>)
 800be36:	461c      	mov	r4, r3
 800be38:	f107 030c 	add.w	r3, r7, #12
 800be3c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be40:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800be44:	e01b      	b.n	800be7e <estimatorComplementary+0x86>
    case MeasurementTypeAcceleration:
      acc = m.data.acceleration.acc;
 800be46:	4b4d      	ldr	r3, [pc, #308]	@ (800bf7c <estimatorComplementary+0x184>)
 800be48:	461c      	mov	r4, r3
 800be4a:	f107 030c 	add.w	r3, r7, #12
 800be4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800be56:	e012      	b.n	800be7e <estimatorComplementary+0x86>
    case MeasurementTypeBarometer:
      baro = m.data.barometer.baro;
 800be58:	4b49      	ldr	r3, [pc, #292]	@ (800bf80 <estimatorComplementary+0x188>)
 800be5a:	461c      	mov	r4, r3
 800be5c:	f107 030c 	add.w	r3, r7, #12
 800be60:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800be68:	e009      	b.n	800be7e <estimatorComplementary+0x86>
    case MeasurementTypeTOF:
      tof = m.data.tof;
 800be6a:	4b46      	ldr	r3, [pc, #280]	@ (800bf84 <estimatorComplementary+0x18c>)
 800be6c:	461c      	mov	r4, r3
 800be6e:	f107 030c 	add.w	r3, r7, #12
 800be72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
      break;
 800be7a:	e000      	b.n	800be7e <estimatorComplementary+0x86>
    default:
      break;
 800be7c:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800be7e:	f107 0308 	add.w	r3, r7, #8
 800be82:	4618      	mov	r0, r3
 800be84:	f7ff ff84 	bl	800bd90 <estimatorDequeue>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d1ba      	bne.n	800be04 <estimatorComplementary+0xc>
    }
  }

  // Update filter
  if (RATE_DO_EXECUTE(ATTITUDE_UPDATE_RATE, stabilizerStep)) {
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	f003 0303 	and.w	r3, r3, #3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d157      	bne.n	800bf48 <estimatorComplementary+0x150>
    sensfusion6UpdateQ(gyro.x, gyro.y, gyro.z,
 800be98:	4b37      	ldr	r3, [pc, #220]	@ (800bf78 <estimatorComplementary+0x180>)
 800be9a:	edd3 7a00 	vldr	s15, [r3]
 800be9e:	4b36      	ldr	r3, [pc, #216]	@ (800bf78 <estimatorComplementary+0x180>)
 800bea0:	ed93 7a01 	vldr	s14, [r3, #4]
 800bea4:	4b34      	ldr	r3, [pc, #208]	@ (800bf78 <estimatorComplementary+0x180>)
 800bea6:	edd3 6a02 	vldr	s13, [r3, #8]
 800beaa:	4b34      	ldr	r3, [pc, #208]	@ (800bf7c <estimatorComplementary+0x184>)
 800beac:	ed93 6a00 	vldr	s12, [r3]
 800beb0:	4b32      	ldr	r3, [pc, #200]	@ (800bf7c <estimatorComplementary+0x184>)
 800beb2:	edd3 5a01 	vldr	s11, [r3, #4]
 800beb6:	4b31      	ldr	r3, [pc, #196]	@ (800bf7c <estimatorComplementary+0x184>)
 800beb8:	ed93 5a02 	vldr	s10, [r3, #8]
 800bebc:	ed9f 3a32 	vldr	s6, [pc, #200]	@ 800bf88 <estimatorComplementary+0x190>
 800bec0:	eef0 2a45 	vmov.f32	s5, s10
 800bec4:	eeb0 2a65 	vmov.f32	s4, s11
 800bec8:	eef0 1a46 	vmov.f32	s3, s12
 800becc:	eeb0 1a66 	vmov.f32	s2, s13
 800bed0:	eef0 0a47 	vmov.f32	s1, s14
 800bed4:	eeb0 0a67 	vmov.f32	s0, s15
 800bed8:	f7fe fd64 	bl	800a9a4 <sensfusion6UpdateQ>
                        acc.x, acc.y, acc.z,
                        ATTITUDE_UPDATE_DT);

    // Save attitude, adjusted for the legacy CF2 body coordinate system
    sensfusion6GetEulerRPY(&state->attitude.roll, &state->attitude.pitch, &state->attitude.yaw);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	1d18      	adds	r0, r3, #4
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f103 0108 	add.w	r1, r3, #8
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	330c      	adds	r3, #12
 800beea:	461a      	mov	r2, r3
 800beec:	f7ff f86c 	bl	800afc8 <sensfusion6GetEulerRPY>

    // Save quaternion, hopefully one day this could be used in a better controller.
    // Note that this is not adjusted for the legacy coordinate system
    sensfusion6GetQuaternion(
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f103 0010 	add.w	r0, r3, #16
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f103 0114 	add.w	r1, r3, #20
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f103 0218 	add.w	r2, r3, #24
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	331c      	adds	r3, #28
 800bf06:	f7ff f839 	bl	800af7c <sensfusion6GetQuaternion>
      &state->attitudeQuaternion.x,
      &state->attitudeQuaternion.y,
      &state->attitudeQuaternion.z,
      &state->attitudeQuaternion.w);

    state->acc.z = sensfusion6GetAccZWithoutGravity(acc.x,
 800bf0a:	4b1c      	ldr	r3, [pc, #112]	@ (800bf7c <estimatorComplementary+0x184>)
 800bf0c:	edd3 7a00 	vldr	s15, [r3]
 800bf10:	4b1a      	ldr	r3, [pc, #104]	@ (800bf7c <estimatorComplementary+0x184>)
 800bf12:	ed93 7a01 	vldr	s14, [r3, #4]
 800bf16:	4b19      	ldr	r3, [pc, #100]	@ (800bf7c <estimatorComplementary+0x184>)
 800bf18:	edd3 6a02 	vldr	s13, [r3, #8]
 800bf1c:	eeb0 1a66 	vmov.f32	s2, s13
 800bf20:	eef0 0a47 	vmov.f32	s1, s14
 800bf24:	eeb0 0a67 	vmov.f32	s0, s15
 800bf28:	f7ff f8f2 	bl	800b110 <sensfusion6GetAccZWithoutGravity>
 800bf2c:	eef0 7a40 	vmov.f32	s15, s0
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
                                                    acc.y,
                                                    acc.z);

    positionUpdateVelocity(state->acc.z, ATTITUDE_UPDATE_DT);
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800bf3c:	eddf 0a12 	vldr	s1, [pc, #72]	@ 800bf88 <estimatorComplementary+0x190>
 800bf40:	eeb0 0a67 	vmov.f32	s0, s15
 800bf44:	f000 fa06 	bl	800c354 <positionUpdateVelocity>
  }

  if (RATE_DO_EXECUTE(POS_UPDATE_RATE, stabilizerStep)) {
 800bf48:	6839      	ldr	r1, [r7, #0]
 800bf4a:	4b10      	ldr	r3, [pc, #64]	@ (800bf8c <estimatorComplementary+0x194>)
 800bf4c:	fba3 2301 	umull	r2, r3, r3, r1
 800bf50:	08da      	lsrs	r2, r3, #3
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	1aca      	subs	r2, r1, r3
 800bf5c:	2a00      	cmp	r2, #0
 800bf5e:	d107      	bne.n	800bf70 <estimatorComplementary+0x178>
    positionEstimate(state, &baro, &tof, POS_UPDATE_DT, stabilizerStep);
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800bf90 <estimatorComplementary+0x198>
 800bf66:	4a07      	ldr	r2, [pc, #28]	@ (800bf84 <estimatorComplementary+0x18c>)
 800bf68:	4905      	ldr	r1, [pc, #20]	@ (800bf80 <estimatorComplementary+0x188>)
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f000 f9d8 	bl	800c320 <positionEstimate>
  }
}
 800bf70:	bf00      	nop
 800bf72:	373c      	adds	r7, #60	@ 0x3c
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd90      	pop	{r4, r7, pc}
 800bf78:	20009250 	.word	0x20009250
 800bf7c:	2000925c 	.word	0x2000925c
 800bf80:	20009268 	.word	0x20009268
 800bf84:	20009274 	.word	0x20009274
 800bf88:	3b83126f 	.word	0x3b83126f
 800bf8c:	cccccccd 	.word	0xcccccccd
 800bf90:	3c23d70a 	.word	0x3c23d70a

0800bf94 <estimatorKalmanTaskInit>:
STATIC_MEM_TASK_ALLOC_STACK_NO_DMA_CCM_SAFE(kalmanTask, KALMAN_TASK_STACKSIZE);

// --------------------------------------------------

// Called one time during system startup
void estimatorKalmanTaskInit() {
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b084      	sub	sp, #16
 800bf98:	af04      	add	r7, sp, #16
  kalmanCoreDefaultParams(&coreParams);
 800bf9a:	4817      	ldr	r0, [pc, #92]	@ (800bff8 <estimatorKalmanTaskInit+0x64>)
 800bf9c:	f000 fb98 	bl	800c6d0 <kalmanCoreDefaultParams>

  // Created in the 'empty' state, meaning the semaphore must first be given, that is it will block in the task
  // until released by the stabilizer loop
  runTaskSemaphore = xSemaphoreCreateBinary();
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	2100      	movs	r1, #0
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	f7f8 fbd3 	bl	8004750 <xQueueGenericCreate>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	4a13      	ldr	r2, [pc, #76]	@ (800bffc <estimatorKalmanTaskInit+0x68>)
 800bfae:	6013      	str	r3, [r2, #0]
  ASSERT(runTaskSemaphore);
 800bfb0:	4b12      	ldr	r3, [pc, #72]	@ (800bffc <estimatorKalmanTaskInit+0x68>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d104      	bne.n	800bfc2 <estimatorKalmanTaskInit+0x2e>
 800bfb8:	22b8      	movs	r2, #184	@ 0xb8
 800bfba:	4911      	ldr	r1, [pc, #68]	@ (800c000 <estimatorKalmanTaskInit+0x6c>)
 800bfbc:	4811      	ldr	r0, [pc, #68]	@ (800c004 <estimatorKalmanTaskInit+0x70>)
 800bfbe:	f004 ff07 	bl	8010dd0 <assertFail>

  dataMutex = xSemaphoreCreateMutexStatic(&dataMutexBuffer);
 800bfc2:	4911      	ldr	r1, [pc, #68]	@ (800c008 <estimatorKalmanTaskInit+0x74>)
 800bfc4:	2001      	movs	r0, #1
 800bfc6:	f7f8 fc50 	bl	800486a <xQueueCreateMutexStatic>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	4a0f      	ldr	r2, [pc, #60]	@ (800c00c <estimatorKalmanTaskInit+0x78>)
 800bfce:	6013      	str	r3, [r2, #0]

  STATIC_MEM_TASK_CREATE(kalmanTask, kalmanTask, KALMAN_TASK_NAME, NULL, KALMAN_TASK_PRI);
 800bfd0:	f44f 7316 	mov.w	r3, #600	@ 0x258
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	4b0e      	ldr	r3, [pc, #56]	@ (800c010 <estimatorKalmanTaskInit+0x7c>)
 800bfd8:	9302      	str	r3, [sp, #8]
 800bfda:	4b0e      	ldr	r3, [pc, #56]	@ (800c014 <estimatorKalmanTaskInit+0x80>)
 800bfdc:	9301      	str	r3, [sp, #4]
 800bfde:	2302      	movs	r3, #2
 800bfe0:	9300      	str	r3, [sp, #0]
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	490c      	ldr	r1, [pc, #48]	@ (800c018 <estimatorKalmanTaskInit+0x84>)
 800bfe6:	480d      	ldr	r0, [pc, #52]	@ (800c01c <estimatorKalmanTaskInit+0x88>)
 800bfe8:	f7f9 fa08 	bl	80053fc <xTaskCreateStatic>

  isInit = true;
 800bfec:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <estimatorKalmanTaskInit+0x8c>)
 800bfee:	2201      	movs	r2, #1
 800bff0:	701a      	strb	r2, [r3, #0]
}
 800bff2:	bf00      	nop
 800bff4:	46bd      	mov	sp, r7
 800bff6:	bd80      	pop	{r7, pc}
 800bff8:	20009338 	.word	0x20009338
 800bffc:	20009280 	.word	0x20009280
 800c000:	08018f8c 	.word	0x08018f8c
 800c004:	08018fb8 	.word	0x08018fb8
 800c008:	20009288 	.word	0x20009288
 800c00c:	20009284 	.word	0x20009284
 800c010:	10003a98 	.word	0x10003a98
 800c014:	10003138 	.word	0x10003138
 800c018:	08018fcc 	.word	0x08018fcc
 800c01c:	0800c03d 	.word	0x0800c03d
 800c020:	200092da 	.word	0x200092da

0800c024 <estimatorKalmanTaskTest>:

bool estimatorKalmanTaskTest() {
 800c024:	b480      	push	{r7}
 800c026:	af00      	add	r7, sp, #0
  return isInit;
 800c028:	4b03      	ldr	r3, [pc, #12]	@ (800c038 <estimatorKalmanTaskTest+0x14>)
 800c02a:	781b      	ldrb	r3, [r3, #0]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	46bd      	mov	sp, r7
 800c030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c034:	4770      	bx	lr
 800c036:	bf00      	nop
 800c038:	200092da 	.word	0x200092da

0800c03c <kalmanTask>:

static void kalmanTask(void* parameters) {
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af02      	add	r7, sp, #8
 800c042:	6078      	str	r0, [r7, #4]
  systemWaitStart();
 800c044:	f7ff fd0a 	bl	800ba5c <systemWaitStart>
  flage_hit = 1;
 800c048:	4b38      	ldr	r3, [pc, #224]	@ (800c12c <kalmanTask+0xf0>)
 800c04a:	2201      	movs	r2, #1
 800c04c:	701a      	strb	r2, [r3, #0]

  uint32_t nowMs = T2M(xTaskGetTickCount());
 800c04e:	f7f9 fd43 	bl	8005ad8 <xTaskGetTickCount>
 800c052:	6138      	str	r0, [r7, #16]
  uint32_t nextPredictionMs = nowMs;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	617b      	str	r3, [r7, #20]

//  rateSupervisorInit(&rateSupervisorContext, nowMs, ONE_SECOND, PREDICT_RATE - 1, PREDICT_RATE + 1, 1);

  while (true) {
    xSemaphoreTake(runTaskSemaphore, portMAX_DELAY);
 800c058:	4b35      	ldr	r3, [pc, #212]	@ (800c130 <kalmanTask+0xf4>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f04f 31ff 	mov.w	r1, #4294967295
 800c060:	4618      	mov	r0, r3
 800c062:	f7f8 ff3b 	bl	8004edc <xQueueSemaphoreTake>
    nowMs = T2M(xTaskGetTickCount()); // would be nice if this had a precision higher than 1ms...
 800c066:	f7f9 fd37 	bl	8005ad8 <xTaskGetTickCount>
 800c06a:	6138      	str	r0, [r7, #16]

    if (resetEstimation) {
 800c06c:	4b31      	ldr	r3, [pc, #196]	@ (800c134 <kalmanTask+0xf8>)
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d004      	beq.n	800c07e <kalmanTask+0x42>
      estimatorKalmanInit();
 800c074:	f000 f92e 	bl	800c2d4 <estimatorKalmanInit>
      resetEstimation = false;
 800c078:	4b2e      	ldr	r3, [pc, #184]	@ (800c134 <kalmanTask+0xf8>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	701a      	strb	r2, [r3, #0]
    }
    flage_hit = 2;
 800c07e:	4b2b      	ldr	r3, [pc, #172]	@ (800c12c <kalmanTask+0xf0>)
 800c080:	2202      	movs	r2, #2
 800c082:	701a      	strb	r2, [r3, #0]

//    bool quadIsFlying = supervisorIsFlying();
    bool quadIsFlying = true;
 800c084:	2301      	movs	r3, #1
 800c086:	73fb      	strb	r3, [r7, #15]
  #ifdef KALMAN_DECOUPLE_XY
    kalmanCoreDecoupleXY(&coreData);
  #endif

    // Run the system dynamics to predict the state forward.
    if (nowMs >= nextPredictionMs) {
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d315      	bcc.n	800c0bc <kalmanTask+0x80>
      axis3fSubSamplerFinalize(&accSubSampler);
 800c090:	4829      	ldr	r0, [pc, #164]	@ (800c138 <kalmanTask+0xfc>)
 800c092:	f7fe fb56 	bl	800a742 <axis3fSubSamplerFinalize>
      axis3fSubSamplerFinalize(&gyroSubSampler);
 800c096:	4829      	ldr	r0, [pc, #164]	@ (800c13c <kalmanTask+0x100>)
 800c098:	f7fe fb53 	bl	800a742 <axis3fSubSamplerFinalize>

      kalmanCorePredict(&coreData, &accSubSampler.subSample, &gyroSubSampler.subSample, nowMs, quadIsFlying);
 800c09c:	7bfb      	ldrb	r3, [r7, #15]
 800c09e:	9300      	str	r3, [sp, #0]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	4a27      	ldr	r2, [pc, #156]	@ (800c140 <kalmanTask+0x104>)
 800c0a4:	4927      	ldr	r1, [pc, #156]	@ (800c144 <kalmanTask+0x108>)
 800c0a6:	4828      	ldr	r0, [pc, #160]	@ (800c148 <kalmanTask+0x10c>)
 800c0a8:	f002 f826 	bl	800e0f8 <kalmanCorePredict>
      nextPredictionMs = nowMs + PREDICTION_UPDATE_INTERVAL_MS;
 800c0ac:	2214      	movs	r2, #20
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]

//      STATS_CNT_RATE_EVENT(&predictionCounter);

      if (!rateSupervisorValidate(&rateSupervisorContext, nowMs)) {
 800c0b4:	6939      	ldr	r1, [r7, #16]
 800c0b6:	4825      	ldr	r0, [pc, #148]	@ (800c14c <kalmanTask+0x110>)
 800c0b8:	f005 f81f 	bl	80110fa <rateSupervisorValidate>
//        DEBUG_PRINT("WARNING: Kalman prediction rate off (%lu)\n", rateSupervisorLatestCount(&rateSupervisorContext));
      }
    }

    // Add process noise every loop, rather than every prediction
    kalmanCoreAddProcessNoise(&coreData, &coreParams, nowMs);
 800c0bc:	693a      	ldr	r2, [r7, #16]
 800c0be:	4924      	ldr	r1, [pc, #144]	@ (800c150 <kalmanTask+0x114>)
 800c0c0:	4821      	ldr	r0, [pc, #132]	@ (800c148 <kalmanTask+0x10c>)
 800c0c2:	f002 fa4b 	bl	800e55c <kalmanCoreAddProcessNoise>

    updateQueuedMeasurements(nowMs, quadIsFlying);
 800c0c6:	7bfb      	ldrb	r3, [r7, #15]
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	6938      	ldr	r0, [r7, #16]
 800c0cc:	f000 f84a 	bl	800c164 <updateQueuedMeasurements>

    if (kalmanCoreFinalize(&coreData))
 800c0d0:	481d      	ldr	r0, [pc, #116]	@ (800c148 <kalmanTask+0x10c>)
 800c0d2:	f002 fa71 	bl	800e5b8 <kalmanCoreFinalize>
    {
//      STATS_CNT_RATE_EVENT(&finalizeCounter);
    }

    if (! kalmanSupervisorIsStateWithinBounds(&coreData)) {
 800c0d6:	481c      	ldr	r0, [pc, #112]	@ (800c148 <kalmanTask+0x10c>)
 800c0d8:	f7fe fb86 	bl	800a7e8 <kalmanSupervisorIsStateWithinBounds>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	f083 0301 	eor.w	r3, r3, #1
 800c0e2:	b2db      	uxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00c      	beq.n	800c102 <kalmanTask+0xc6>
      resetEstimation = true;
 800c0e8:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <kalmanTask+0xf8>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	701a      	strb	r2, [r3, #0]

      if (nowMs > warningBlockTimeMs) {
 800c0ee:	4b19      	ldr	r3, [pc, #100]	@ (800c154 <kalmanTask+0x118>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d904      	bls.n	800c102 <kalmanTask+0xc6>
        warningBlockTimeMs = nowMs + WARNING_HOLD_BACK_TIME_MS;
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800c0fe:	4a15      	ldr	r2, [pc, #84]	@ (800c154 <kalmanTask+0x118>)
 800c100:	6013      	str	r3, [r2, #0]

    /**
     * Finally, the internal state is externalized.
     * This is done every round, since the external state includes some sensor data
     */
    xSemaphoreTake(dataMutex, portMAX_DELAY);
 800c102:	4b15      	ldr	r3, [pc, #84]	@ (800c158 <kalmanTask+0x11c>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f04f 31ff 	mov.w	r1, #4294967295
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7f8 fee6 	bl	8004edc <xQueueSemaphoreTake>
    kalmanCoreExternalizeState(&coreData, &taskEstimatorState, &accLatest);
 800c110:	4a12      	ldr	r2, [pc, #72]	@ (800c15c <kalmanTask+0x120>)
 800c112:	4913      	ldr	r1, [pc, #76]	@ (800c160 <kalmanTask+0x124>)
 800c114:	480c      	ldr	r0, [pc, #48]	@ (800c148 <kalmanTask+0x10c>)
 800c116:	f002 ff05 	bl	800ef24 <kalmanCoreExternalizeState>
    xSemaphoreGive(dataMutex);
 800c11a:	4b0f      	ldr	r3, [pc, #60]	@ (800c158 <kalmanTask+0x11c>)
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	2300      	movs	r3, #0
 800c120:	2200      	movs	r2, #0
 800c122:	2100      	movs	r1, #0
 800c124:	f7f8 fbbc 	bl	80048a0 <xQueueGenericSend>
  while (true) {
 800c128:	e796      	b.n	800c058 <kalmanTask+0x1c>
 800c12a:	bf00      	nop
 800c12c:	200092d9 	.word	0x200092d9
 800c130:	20009280 	.word	0x20009280
 800c134:	20009334 	.word	0x20009334
 800c138:	200092dc 	.word	0x200092dc
 800c13c:	200092fc 	.word	0x200092fc
 800c140:	20009310 	.word	0x20009310
 800c144:	200092f0 	.word	0x200092f0
 800c148:	10002f74 	.word	0x10002f74
 800c14c:	200093cc 	.word	0x200093cc
 800c150:	20009338 	.word	0x20009338
 800c154:	200093e8 	.word	0x200093e8
 800c158:	20009284 	.word	0x20009284
 800c15c:	2000931c 	.word	0x2000931c
 800c160:	2000937c 	.word	0x2000937c

0800c164 <updateQueuedMeasurements>:
  xSemaphoreGive(dataMutex);

  xSemaphoreGive(runTaskSemaphore);
}

static void updateQueuedMeasurements(const uint32_t nowMs, const bool quadIsFlying) {
 800c164:	b590      	push	{r4, r7, lr}
 800c166:	b08f      	sub	sp, #60	@ 0x3c
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	70fb      	strb	r3, [r7, #3]
   * we therefore consume all measurements since the last loop, rather than accumulating
   */

  // Pull the latest sensors values of interest; discard the rest
  measurement_t m;
  while (estimatorDequeue(&m)) {
 800c170:	e094      	b.n	800c29c <updateQueuedMeasurements+0x138>
    switch (m.type) {
 800c172:	7a3b      	ldrb	r3, [r7, #8]
 800c174:	2b0b      	cmp	r3, #11
 800c176:	f200 808e 	bhi.w	800c296 <updateQueuedMeasurements+0x132>
 800c17a:	a201      	add	r2, pc, #4	@ (adr r2, 800c180 <updateQueuedMeasurements+0x1c>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c297 	.word	0x0800c297
 800c184:	0800c1b1 	.word	0x0800c1b1
 800c188:	0800c1c1 	.word	0x0800c1c1
 800c18c:	0800c1d1 	.word	0x0800c1d1
 800c190:	0800c1f9 	.word	0x0800c1f9
 800c194:	0800c209 	.word	0x0800c209
 800c198:	0800c219 	.word	0x0800c219
 800c19c:	0800c22b 	.word	0x0800c22b
 800c1a0:	0800c297 	.word	0x0800c297
 800c1a4:	0800c23b 	.word	0x0800c23b
 800c1a8:	0800c25b 	.word	0x0800c25b
 800c1ac:	0800c27b 	.word	0x0800c27b
          // standard KF update
//          kalmanCoreUpdateWithTdoa(&coreData, &m.data.tdoa, nowMs, &outlierFilterTdoaState);
        }
        break;
      case MeasurementTypePosition:
        kalmanCoreUpdateWithPosition(&coreData, &m.data.position);
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	3304      	adds	r3, #4
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	483f      	ldr	r0, [pc, #252]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c1ba:	f004 fc07 	bl	80109cc <kalmanCoreUpdateWithPosition>
        break;
 800c1be:	e06d      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypePose:
        kalmanCoreUpdateWithPose(&coreData, &m.data.pose);
 800c1c0:	f107 0308 	add.w	r3, r7, #8
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	483b      	ldr	r0, [pc, #236]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c1ca:	f004 fa87 	bl	80106dc <kalmanCoreUpdateWithPose>
        break;
 800c1ce:	e065      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeDistance:
        if(robustTwr){
 800c1d0:	4b3a      	ldr	r3, [pc, #232]	@ (800c2bc <updateQueuedMeasurements+0x158>)
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d007      	beq.n	800c1e8 <updateQueuedMeasurements+0x84>
            // robust KF update with UWB TWR measurements
            kalmanCoreRobustUpdateWithDistance(&coreData, &m.data.distance);
 800c1d8:	f107 0308 	add.w	r3, r7, #8
 800c1dc:	3304      	adds	r3, #4
 800c1de:	4619      	mov	r1, r3
 800c1e0:	4835      	ldr	r0, [pc, #212]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c1e2:	f003 fb5b 	bl	800f89c <kalmanCoreRobustUpdateWithDistance>
        }else{
            // standard KF update
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
        }
        break;
 800c1e6:	e059      	b.n	800c29c <updateQueuedMeasurements+0x138>
            kalmanCoreUpdateWithDistance(&coreData, &m.data.distance);
 800c1e8:	f107 0308 	add.w	r3, r7, #8
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	4831      	ldr	r0, [pc, #196]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c1f2:	f003 f8c5 	bl	800f380 <kalmanCoreUpdateWithDistance>
        break;
 800c1f6:	e051      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeTOF:
        kalmanCoreUpdateWithTof(&coreData, &m.data.tof);
 800c1f8:	f107 0308 	add.w	r3, r7, #8
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	482d      	ldr	r0, [pc, #180]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c202:	f004 fc29 	bl	8010a58 <kalmanCoreUpdateWithTof>
        break;
 800c206:	e049      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeAbsoluteHeight:
        kalmanCoreUpdateWithAbsoluteHeight(&coreData, &m.data.height);
 800c208:	f107 0308 	add.w	r3, r7, #8
 800c20c:	3304      	adds	r3, #4
 800c20e:	4619      	mov	r1, r3
 800c210:	4829      	ldr	r0, [pc, #164]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c212:	f003 f849 	bl	800f2a8 <kalmanCoreUpdateWithAbsoluteHeight>
        break;
 800c216:	e041      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeFlow:
        kalmanCoreUpdateWithFlow(&coreData, &m.data.flow, &gyroLatest);
 800c218:	f107 0308 	add.w	r3, r7, #8
 800c21c:	3304      	adds	r3, #4
 800c21e:	4a28      	ldr	r2, [pc, #160]	@ (800c2c0 <updateQueuedMeasurements+0x15c>)
 800c220:	4619      	mov	r1, r3
 800c222:	4825      	ldr	r0, [pc, #148]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c224:	f003 feee 	bl	8010004 <kalmanCoreUpdateWithFlow>
        break;
 800c228:	e038      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeYawError:
        kalmanCoreUpdateWithYawError(&coreData, &m.data.yawError);
 800c22a:	f107 0308 	add.w	r3, r7, #8
 800c22e:	3304      	adds	r3, #4
 800c230:	4619      	mov	r1, r3
 800c232:	4821      	ldr	r0, [pc, #132]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c234:	f004 fc96 	bl	8010b64 <kalmanCoreUpdateWithYawError>
        break;
 800c238:	e030      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeSweepAngle:
//        kalmanCoreUpdateWithSweepAngles(&coreData, &m.data.sweepAngle, nowMs, &sweepOutlierFilterState);
        break;
      case MeasurementTypeGyroscope:
        axis3fSubSamplerAccumulate(&gyroSubSampler, &m.data.gyroscope.gyro);
 800c23a:	f107 0308 	add.w	r3, r7, #8
 800c23e:	3304      	adds	r3, #4
 800c240:	4619      	mov	r1, r3
 800c242:	4820      	ldr	r0, [pc, #128]	@ (800c2c4 <updateQueuedMeasurements+0x160>)
 800c244:	f7fe fa4c 	bl	800a6e0 <axis3fSubSamplerAccumulate>
        gyroLatest = m.data.gyroscope.gyro;
 800c248:	4b1d      	ldr	r3, [pc, #116]	@ (800c2c0 <updateQueuedMeasurements+0x15c>)
 800c24a:	461c      	mov	r4, r3
 800c24c:	f107 030c 	add.w	r3, r7, #12
 800c250:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c254:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800c258:	e020      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeAcceleration:
        axis3fSubSamplerAccumulate(&accSubSampler, &m.data.acceleration.acc);
 800c25a:	f107 0308 	add.w	r3, r7, #8
 800c25e:	3304      	adds	r3, #4
 800c260:	4619      	mov	r1, r3
 800c262:	4819      	ldr	r0, [pc, #100]	@ (800c2c8 <updateQueuedMeasurements+0x164>)
 800c264:	f7fe fa3c 	bl	800a6e0 <axis3fSubSamplerAccumulate>
        accLatest = m.data.acceleration.acc;
 800c268:	4b18      	ldr	r3, [pc, #96]	@ (800c2cc <updateQueuedMeasurements+0x168>)
 800c26a:	461c      	mov	r4, r3
 800c26c:	f107 030c 	add.w	r3, r7, #12
 800c270:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c274:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        break;
 800c278:	e010      	b.n	800c29c <updateQueuedMeasurements+0x138>
      case MeasurementTypeBarometer:
        if (useBaroUpdate) {
 800c27a:	2301      	movs	r3, #1
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d00c      	beq.n	800c29a <updateQueuedMeasurements+0x136>
          kalmanCoreUpdateWithBaro(&coreData, &coreParams, m.data.barometer.baro.asl, quadIsFlying);
 800c280:	edd7 7a05 	vldr	s15, [r7, #20]
 800c284:	78fb      	ldrb	r3, [r7, #3]
 800c286:	461a      	mov	r2, r3
 800c288:	eeb0 0a67 	vmov.f32	s0, s15
 800c28c:	4910      	ldr	r1, [pc, #64]	@ (800c2d0 <updateQueuedMeasurements+0x16c>)
 800c28e:	480a      	ldr	r0, [pc, #40]	@ (800c2b8 <updateQueuedMeasurements+0x154>)
 800c290:	f000 ffba 	bl	800d208 <kalmanCoreUpdateWithBaro>
        }
        break;
 800c294:	e001      	b.n	800c29a <updateQueuedMeasurements+0x136>
      default:
        break;
 800c296:	bf00      	nop
 800c298:	e000      	b.n	800c29c <updateQueuedMeasurements+0x138>
        break;
 800c29a:	bf00      	nop
  while (estimatorDequeue(&m)) {
 800c29c:	f107 0308 	add.w	r3, r7, #8
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fd75 	bl	800bd90 <estimatorDequeue>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f47f af62 	bne.w	800c172 <updateQueuedMeasurements+0xe>
    }
  }
}
 800c2ae:	bf00      	nop
 800c2b0:	bf00      	nop
 800c2b2:	373c      	adds	r7, #60	@ 0x3c
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd90      	pop	{r4, r7, pc}
 800c2b8:	10002f74 	.word	0x10002f74
 800c2bc:	200092d8 	.word	0x200092d8
 800c2c0:	20009328 	.word	0x20009328
 800c2c4:	200092fc 	.word	0x200092fc
 800c2c8:	200092dc 	.word	0x200092dc
 800c2cc:	2000931c 	.word	0x2000931c
 800c2d0:	20009338 	.word	0x20009338

0800c2d4 <estimatorKalmanInit>:

// Called when this estimator is activated
void estimatorKalmanInit(void)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
  axis3fSubSamplerInit(&accSubSampler, GRAVITY_MAGNITUDE);
 800c2da:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 800c308 <estimatorKalmanInit+0x34>
 800c2de:	480b      	ldr	r0, [pc, #44]	@ (800c30c <estimatorKalmanInit+0x38>)
 800c2e0:	f7fe f9ec 	bl	800a6bc <axis3fSubSamplerInit>
  axis3fSubSamplerInit(&gyroSubSampler, DEG_TO_RAD);
 800c2e4:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 800c310 <estimatorKalmanInit+0x3c>
 800c2e8:	480a      	ldr	r0, [pc, #40]	@ (800c314 <estimatorKalmanInit+0x40>)
 800c2ea:	f7fe f9e7 	bl	800a6bc <axis3fSubSamplerInit>


  uint32_t nowMs = T2M(xTaskGetTickCount());
 800c2ee:	f7f9 fbf3 	bl	8005ad8 <xTaskGetTickCount>
 800c2f2:	6078      	str	r0, [r7, #4]
  kalmanCoreInit(&coreData, &coreParams, nowMs);
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	4908      	ldr	r1, [pc, #32]	@ (800c318 <estimatorKalmanInit+0x44>)
 800c2f8:	4808      	ldr	r0, [pc, #32]	@ (800c31c <estimatorKalmanInit+0x48>)
 800c2fa:	f000 fa37 	bl	800c76c <kalmanCoreInit>
}
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	411cf5c3 	.word	0x411cf5c3
 800c30c:	200092dc 	.word	0x200092dc
 800c310:	3c8efa35 	.word	0x3c8efa35
 800c314:	200092fc 	.word	0x200092fc
 800c318:	20009338 	.word	0x20009338
 800c31c:	10002f74 	.word	0x10002f74

0800c320 <positionEstimate>:
};

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state);
static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state);

void positionEstimate(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep) {
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af02      	add	r7, sp, #8
 800c326:	6178      	str	r0, [r7, #20]
 800c328:	6139      	str	r1, [r7, #16]
 800c32a:	60fa      	str	r2, [r7, #12]
 800c32c:	ed87 0a02 	vstr	s0, [r7, #8]
 800c330:	607b      	str	r3, [r7, #4]
  positionEstimateInternal(estimate, baro, tofMeasurement, dt, stabilizerStep, &state);
 800c332:	4b07      	ldr	r3, [pc, #28]	@ (800c350 <positionEstimate+0x30>)
 800c334:	9300      	str	r3, [sp, #0]
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	ed97 0a02 	vldr	s0, [r7, #8]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	6939      	ldr	r1, [r7, #16]
 800c340:	6978      	ldr	r0, [r7, #20]
 800c342:	f000 f81b 	bl	800c37c <positionEstimateInternal>
}
 800c346:	bf00      	nop
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	20000058 	.word	0x20000058

0800c354 <positionUpdateVelocity>:

void positionUpdateVelocity(float accWZ, float dt) {
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	ed87 0a01 	vstr	s0, [r7, #4]
 800c35e:	edc7 0a00 	vstr	s1, [r7]
  positionUpdateVelocityInternal(accWZ, dt, &state);
 800c362:	4805      	ldr	r0, [pc, #20]	@ (800c378 <positionUpdateVelocity+0x24>)
 800c364:	edd7 0a00 	vldr	s1, [r7]
 800c368:	ed97 0a01 	vldr	s0, [r7, #4]
 800c36c:	f000 f8b2 	bl	800c4d4 <positionUpdateVelocityInternal>
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20000058 	.word	0x20000058

0800c37c <positionEstimateInternal>:

static void positionEstimateInternal(state_t* estimate, const baro_t* baro, const tofMeasurement_t* tofMeasurement, float dt, stabilizerStep_t stabilizerStep, struct selfState_s* state) {
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	@ 0x28
 800c380:	af00      	add	r7, sp, #0
 800c382:	6178      	str	r0, [r7, #20]
 800c384:	6139      	str	r1, [r7, #16]
 800c386:	60fa      	str	r2, [r7, #12]
 800c388:	ed87 0a02 	vstr	s0, [r7, #8]
 800c38c:	607b      	str	r3, [r7, #4]
  float filteredZ;
  static float prev_estimatedZ = 0;
  static bool surfaceFollowingMode = false;

  const uint32_t MAX_SAMPLE_AGE = M2T(50);
 800c38e:	2332      	movs	r3, #50	@ 0x32
 800c390:	623b      	str	r3, [r7, #32]

  uint32_t now = xTaskGetTickCount();
 800c392:	f7f9 fba1 	bl	8005ad8 <xTaskGetTickCount>
 800c396:	61f8      	str	r0, [r7, #28]
//  bool isSampleUseful = ((now - tofMeasurement->timestamp) <= MAX_SAMPLE_AGE);
  bool isSampleUseful  =  false;
 800c398:	2300      	movs	r3, #0
 800c39a:	76fb      	strb	r3, [r7, #27]
  if (isSampleUseful) {
 800c39c:	7efb      	ldrb	r3, [r7, #27]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d002      	beq.n	800c3a8 <positionEstimateInternal+0x2c>
    surfaceFollowingMode = true;
 800c3a2:	4b4a      	ldr	r3, [pc, #296]	@ (800c4cc <positionEstimateInternal+0x150>)
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	701a      	strb	r2, [r3, #0]
  }

  if (surfaceFollowingMode) {
 800c3a8:	4b48      	ldr	r3, [pc, #288]	@ (800c4cc <positionEstimateInternal+0x150>)
 800c3aa:	781b      	ldrb	r3, [r3, #0]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d02e      	beq.n	800c40e <positionEstimateInternal+0x92>
    if (isSampleUseful) {
 800c3b0:	7efb      	ldrb	r3, [r7, #27]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d062      	beq.n	800c47c <positionEstimateInternal+0x100>
      // IIR filter zrange
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b8:	ed93 7a02 	vldr	s14, [r3, #8]
 800c3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3be:	edd3 7a00 	vldr	s15, [r3]
 800c3c2:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaZrange) * tofMeasurement->distance;
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3c8:	edd3 7a02 	vldr	s15, [r3, #8]
 800c3cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c3d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3da:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaZrange       ) * state->estimatedZ +
 800c3de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      // Use zrange as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800c3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e8:	ed93 7a04 	vldr	s14, [r3, #16]
 800c3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ee:	edd3 7a01 	vldr	s15, [r3, #4]
 800c3f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800c3fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c3fe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c402:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	edc3 7a00 	vstr	s15, [r3]
 800c40c:	e036      	b.n	800c47c <positionEstimateInternal+0x100>
    }
  } else {
    // FIXME: A bit of an hack to init IIR filter
    if (state->estimatedZ == 0.0f) {
 800c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c410:	edd3 7a00 	vldr	s15, [r3]
 800c414:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41c:	d103      	bne.n	800c426 <positionEstimateInternal+0xaa>
      filteredZ = baro->asl;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	627b      	str	r3, [r7, #36]	@ 0x24
 800c424:	e017      	b.n	800c456 <positionEstimateInternal+0xda>
    } else {
      // IIR filter asl
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800c426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c428:	ed93 7a03 	vldr	s14, [r3, #12]
 800c42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c42e:	edd3 7a00 	vldr	s15, [r3]
 800c432:	ee27 7a27 	vmul.f32	s14, s14, s15
                  (1.0f - state->estAlphaAsl) * baro->asl;
 800c436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c438:	edd3 7a03 	vldr	s15, [r3, #12]
 800c43c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c440:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	edd3 7a02 	vldr	s15, [r3, #8]
 800c44a:	ee66 7aa7 	vmul.f32	s15, s13, s15
      filteredZ = (state->estAlphaAsl       ) * state->estimatedZ +
 800c44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c452:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    }
    #if CONFIG_CONTROLLER_PID_IMPROVED_BARO_Z_HOLD
      state->estimatedZ = filteredZ;
    #else
      // Use asl as base and add velocity changes.
      state->estimatedZ = filteredZ + (state->velocityFactor * state->velocityZ * dt);
 800c456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c458:	ed93 7a04 	vldr	s14, [r3, #16]
 800c45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c45e:	edd3 7a01 	vldr	s15, [r3, #4]
 800c462:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c466:	edd7 7a02 	vldr	s15, [r7, #8]
 800c46a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c46e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800c472:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c478:	edc3 7a00 	vstr	s15, [r3]
    #endif
  }

  estimate->position.x = 0.0f;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	625a      	str	r2, [r3, #36]	@ 0x24
  estimate->position.y = 0.0f;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	f04f 0200 	mov.w	r2, #0
 800c48a:	629a      	str	r2, [r3, #40]	@ 0x28
  estimate->position.z = state->estimatedZ;
 800c48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	62da      	str	r2, [r3, #44]	@ 0x2c
  estimate->velocity.z = (state->estimatedZ - prev_estimatedZ) / dt;
 800c494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c496:	ed93 7a00 	vldr	s14, [r3]
 800c49a:	4b0d      	ldr	r3, [pc, #52]	@ (800c4d0 <positionEstimateInternal+0x154>)
 800c49c:	edd3 7a00 	vldr	s15, [r3]
 800c4a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 800c4a4:	ed97 7a02 	vldr	s14, [r7, #8]
 800c4a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c4ac:	697b      	ldr	r3, [r7, #20]
 800c4ae:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  state->estimatedVZ = estimate->velocity.z;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b8:	61da      	str	r2, [r3, #28]
  prev_estimatedZ = state->estimatedZ;
 800c4ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4a04      	ldr	r2, [pc, #16]	@ (800c4d0 <positionEstimateInternal+0x154>)
 800c4c0:	6013      	str	r3, [r2, #0]
}
 800c4c2:	bf00      	nop
 800c4c4:	3728      	adds	r7, #40	@ 0x28
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	200093ec 	.word	0x200093ec
 800c4d0:	200093f0 	.word	0x200093f0

0800c4d4 <positionUpdateVelocityInternal>:

static void positionUpdateVelocityInternal(float accWZ, float dt, struct selfState_s* state) {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	ed87 0a03 	vstr	s0, [r7, #12]
 800c4de:	edc7 0a02 	vstr	s1, [r7, #8]
 800c4e2:	6078      	str	r0, [r7, #4]
  state->velocityZ += deadband(accWZ, state->vAccDeadband) * dt * G;
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	edd3 7a05 	vldr	s15, [r3, #20]
 800c4ea:	eef0 0a67 	vmov.f32	s1, s15
 800c4ee:	ed97 0a03 	vldr	s0, [r7, #12]
 800c4f2:	f004 fd9f 	bl	8011034 <deadband>
 800c4f6:	eeb0 7a40 	vmov.f32	s14, s0
 800c4fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800c4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c502:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800c538 <positionUpdateVelocityInternal+0x64>
 800c506:	ee27 7a87 	vmul.f32	s14, s15, s14
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	edd3 7a01 	vldr	s15, [r3, #4]
 800c510:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	edc3 7a01 	vstr	s15, [r3, #4]
  state->velocityZ *= state->velZAlpha;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	edd3 7a06 	vldr	s15, [r3, #24]
 800c526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 800c530:	bf00      	nop
 800c532:	3710      	adds	r7, #16
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	411cf5c3 	.word	0x411cf5c3

0800c53c <assert_aligned_4_bytes>:
    __typeof__(b) _b = (b); \
    _a > _b ? _a : _b;      \
  })

// Matrix data must be aligned on 4 byte bundaries
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b084      	sub	sp, #16
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f003 0303 	and.w	r3, r3, #3
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <assert_aligned_4_bytes+0x22>
 800c554:	2239      	movs	r2, #57	@ 0x39
 800c556:	4904      	ldr	r1, [pc, #16]	@ (800c568 <assert_aligned_4_bytes+0x2c>)
 800c558:	4804      	ldr	r0, [pc, #16]	@ (800c56c <assert_aligned_4_bytes+0x30>)
 800c55a:	f004 fc39 	bl	8010dd0 <assertFail>
}
 800c55e:	bf00      	nop
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	08018fd4 	.word	0x08018fd4
 800c56c:	08019014 	.word	0x08019014

0800c570 <mat_trans>:

static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff ffde 	bl	800c53c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800c580:	6838      	ldr	r0, [r7, #0]
 800c582:	f7ff ffdb 	bl	800c53c <assert_aligned_4_bytes>

  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800c586:	6839      	ldr	r1, [r7, #0]
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f009 fbcf 	bl	8015d2c <arm_mat_trans_f32>
 800c58e:	4603      	mov	r3, r0
 800c590:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800c592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d004      	beq.n	800c5a4 <mat_trans+0x34>
 800c59a:	2241      	movs	r2, #65	@ 0x41
 800c59c:	4903      	ldr	r1, [pc, #12]	@ (800c5ac <mat_trans+0x3c>)
 800c59e:	4804      	ldr	r0, [pc, #16]	@ (800c5b0 <mat_trans+0x40>)
 800c5a0:	f004 fc16 	bl	8010dd0 <assertFail>
}
 800c5a4:	bf00      	nop
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	08018fd4 	.word	0x08018fd4
 800c5b0:	0801902c 	.word	0x0801902c

0800c5b4 <mat_mult>:

  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
  ASSERT(ARM_MATH_SUCCESS == result);
}

static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b086      	sub	sp, #24
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f7ff ffbb 	bl	800c53c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800c5c6:	68b8      	ldr	r0, [r7, #8]
 800c5c8:	f7ff ffb8 	bl	800c53c <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f7ff ffb5 	bl	800c53c <assert_aligned_4_bytes>

  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800c5d2:	687a      	ldr	r2, [r7, #4]
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	68f8      	ldr	r0, [r7, #12]
 800c5d8:	f009 fc56 	bl	8015e88 <arm_mat_mult_f32>
 800c5dc:	4603      	mov	r3, r0
 800c5de:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800c5e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <mat_mult+0x3e>
 800c5e8:	2252      	movs	r2, #82	@ 0x52
 800c5ea:	4904      	ldr	r1, [pc, #16]	@ (800c5fc <mat_mult+0x48>)
 800c5ec:	4804      	ldr	r0, [pc, #16]	@ (800c600 <mat_mult+0x4c>)
 800c5ee:	f004 fbef 	bl	8010dd0 <assertFail>
}
 800c5f2:	bf00      	nop
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	08018fd4 	.word	0x08018fd4
 800c600:	0801902c 	.word	0x0801902c

0800c604 <arm_sqrt>:

static inline float arm_sqrt(float32_t in) {
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800c60e:	f04f 0300 	mov.w	r3, #0
 800c612:	60bb      	str	r3, [r7, #8]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	613b      	str	r3, [r7, #16]
 800c618:	f107 0308 	add.w	r3, r7, #8
 800c61c:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800c61e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c62a:	db0a      	blt.n	800c642 <arm_sqrt+0x3e>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800c62c:	ed97 0a04 	vldr	s0, [r7, #16]
 800c630:	f009 ffca 	bl	80165c8 <sqrtf>
 800c634:	eef0 7a40 	vmov.f32	s15, s0
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800c63e:	2300      	movs	r3, #0
 800c640:	e005      	b.n	800c64e <arm_sqrt+0x4a>
    }
    else
    {
      *pOut = 0.0f;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	f04f 0200 	mov.w	r2, #0
 800c648:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800c64a:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 800c64e:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800c650:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d004      	beq.n	800c662 <arm_sqrt+0x5e>
 800c658:	2258      	movs	r2, #88	@ 0x58
 800c65a:	4906      	ldr	r1, [pc, #24]	@ (800c674 <arm_sqrt+0x70>)
 800c65c:	4806      	ldr	r0, [pc, #24]	@ (800c678 <arm_sqrt+0x74>)
 800c65e:	f004 fbb7 	bl	8010dd0 <assertFail>
  return pOut;
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	ee07 3a90 	vmov	s15, r3
}
 800c668:	eeb0 0a67 	vmov.f32	s0, s15
 800c66c:	3718      	adds	r7, #24
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	08018fd4 	.word	0x08018fd4
 800c678:	0801902c 	.word	0x0801902c

0800c67c <mat_scale>:
  }

  return a;
}

static inline void mat_scale(const arm_matrix_instance_f32 * pSrcA, float32_t scale, arm_matrix_instance_f32 * pDst) {
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	ed87 0a02 	vstr	s0, [r7, #8]
 800c688:	6079      	str	r1, [r7, #4]
  arm_status result = arm_mat_scale_f32(pSrcA, scale, pDst);
 800c68a:	6879      	ldr	r1, [r7, #4]
 800c68c:	ed97 0a02 	vldr	s0, [r7, #8]
 800c690:	68f8      	ldr	r0, [r7, #12]
 800c692:	f009 fba7 	bl	8015de4 <arm_mat_scale_f32>
 800c696:	4603      	mov	r3, r0
 800c698:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800c69a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d004      	beq.n	800c6ac <mat_scale+0x30>
 800c6a2:	2272      	movs	r2, #114	@ 0x72
 800c6a4:	4903      	ldr	r1, [pc, #12]	@ (800c6b4 <mat_scale+0x38>)
 800c6a6:	4804      	ldr	r0, [pc, #16]	@ (800c6b8 <mat_scale+0x3c>)
 800c6a8:	f004 fb92 	bl	8010dd0 <assertFail>
}
 800c6ac:	bf00      	nop
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}
 800c6b4:	08018fd4 	.word	0x08018fd4
 800c6b8:	0801902c 	.word	0x0801902c

0800c6bc <assertStateNotNaN>:
    }
  }
}
#else
static void assertStateNotNaN(const kalmanCoreData_t* this)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  return;
 800c6c4:	bf00      	nop
}
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <kalmanCoreDefaultParams>:

// Small number epsilon, to prevent dividing by zero
#define EPS (1e-6f)

void kalmanCoreDefaultParams(kalmanCoreParams_t* params)
{
 800c6d0:	b480      	push	{r7}
 800c6d2:	b083      	sub	sp, #12
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  // Initial variances, uncertain of position, but know we're stationary and roughly flat
  params->stdDevInitialPosition_xy = 100;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a21      	ldr	r2, [pc, #132]	@ (800c760 <kalmanCoreDefaultParams+0x90>)
 800c6dc:	601a      	str	r2, [r3, #0]
  params->stdDevInitialPosition_z = 1;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c6e4:	605a      	str	r2, [r3, #4]
  params->stdDevInitialVelocity = 0.01;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1e      	ldr	r2, [pc, #120]	@ (800c764 <kalmanCoreDefaultParams+0x94>)
 800c6ea:	609a      	str	r2, [r3, #8]
  params->stdDevInitialAttitude_rollpitch = 0.01;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	4a1d      	ldr	r2, [pc, #116]	@ (800c764 <kalmanCoreDefaultParams+0x94>)
 800c6f0:	60da      	str	r2, [r3, #12]
  params->stdDevInitialAttitude_yaw = 0.01;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a1b      	ldr	r2, [pc, #108]	@ (800c764 <kalmanCoreDefaultParams+0x94>)
 800c6f6:	611a      	str	r2, [r3, #16]

  params->procNoiseAcc_xy = 0.5f;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800c6fe:	615a      	str	r2, [r3, #20]
  params->procNoiseAcc_z = 1.0f;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800c706:	619a      	str	r2, [r3, #24]
  params->procNoiseVel = 0;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f04f 0200 	mov.w	r2, #0
 800c70e:	61da      	str	r2, [r3, #28]
  params->procNoisePos = 0;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f04f 0200 	mov.w	r2, #0
 800c716:	621a      	str	r2, [r3, #32]
  params->procNoiseAtt = 0;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f04f 0200 	mov.w	r2, #0
 800c71e:	625a      	str	r2, [r3, #36]	@ 0x24
  params->measNoiseBaro = 2.0f;           // meters
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800c726:	629a      	str	r2, [r3, #40]	@ 0x28
  params->measNoiseGyro_rollpitch = 0.1f; // radians per second
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a0f      	ldr	r2, [pc, #60]	@ (800c768 <kalmanCoreDefaultParams+0x98>)
 800c72c:	62da      	str	r2, [r3, #44]	@ 0x2c
  params->measNoiseGyro_yaw = 0.1f;       // radians per second
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	4a0d      	ldr	r2, [pc, #52]	@ (800c768 <kalmanCoreDefaultParams+0x98>)
 800c732:	631a      	str	r2, [r3, #48]	@ 0x30

  params->initialX = 0.0;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f04f 0200 	mov.w	r2, #0
 800c73a:	635a      	str	r2, [r3, #52]	@ 0x34
  params->initialY = 0.0;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f04f 0200 	mov.w	r2, #0
 800c742:	639a      	str	r2, [r3, #56]	@ 0x38
  params->initialZ = 0.0;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f04f 0200 	mov.w	r2, #0
 800c74a:	63da      	str	r2, [r3, #60]	@ 0x3c
  // Initial yaw of the Crazyflie in radians.
  // 0 --- facing positive X
  // PI / 2 --- facing positive Y
  // PI --- facing negative X
  // 3 * PI / 2 --- facing negative Y
  params->initialYaw = 0.0;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f04f 0200 	mov.w	r2, #0
 800c752:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800c754:	bf00      	nop
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	42c80000 	.word	0x42c80000
 800c764:	3c23d70a 	.word	0x3c23d70a
 800c768:	3dcccccd 	.word	0x3dcccccd

0800c76c <kalmanCoreInit>:

void kalmanCoreInit(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08a      	sub	sp, #40	@ 0x28
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  // Reset all data to 0 (like upon system reset)
  memset(this, 0, sizeof(kalmanCoreData_t));
 800c778:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 800c77c:	2100      	movs	r1, #0
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f009 fdb8 	bl	80162f4 <memset>

  this->S[KC_STATE_X] = params->initialX;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	601a      	str	r2, [r3, #0]
  this->S[KC_STATE_Y] = params->initialY;
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	605a      	str	r2, [r3, #4]
  this->S[KC_STATE_Z] = params->initialZ;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	609a      	str	r2, [r3, #8]
//  this->S[KC_STATE_D0] = 0;
//  this->S[KC_STATE_D1] = 0;
//  this->S[KC_STATE_D2] = 0;

  // reset the attitude quaternion
  this->initialQuaternion[0] = arm_cos_f32(params->initialYaw / 2);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800c7a2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c7a6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c7aa:	eeb0 0a47 	vmov.f32	s0, s14
 800c7ae:	f009 fd57 	bl	8016260 <arm_cos_f32>
 800c7b2:	eef0 7a40 	vmov.f32	s15, s0
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	edc3 7a6a 	vstr	s15, [r3, #424]	@ 0x1a8
  this->initialQuaternion[1] = 0.0;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f04f 0200 	mov.w	r2, #0
 800c7c2:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
  this->initialQuaternion[2] = 0.0;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f04f 0200 	mov.w	r2, #0
 800c7cc:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
  this->initialQuaternion[3] = arm_sin_f32(params->initialYaw / 2);
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800c7d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c7da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c7de:	eeb0 0a47 	vmov.f32	s0, s14
 800c7e2:	f009 fcf7 	bl	80161d4 <arm_sin_f32>
 800c7e6:	eef0 7a40 	vmov.f32	s15, s0
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	edc3 7a6d 	vstr	s15, [r3, #436]	@ 0x1b4
  for (int i = 0; i < 4; i++) { this->q[i] = this->initialQuaternion[i]; }
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c7f4:	e00f      	b.n	800c816 <kalmanCoreInit+0xaa>
 800c7f6:	68fa      	ldr	r2, [r7, #12]
 800c7f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7fa:	336a      	adds	r3, #106	@ 0x6a
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	4413      	add	r3, r2
 800c800:	681a      	ldr	r2, [r3, #0]
 800c802:	68f9      	ldr	r1, [r7, #12]
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	3308      	adds	r3, #8
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	440b      	add	r3, r1
 800c80c:	3304      	adds	r3, #4
 800c80e:	601a      	str	r2, [r3, #0]
 800c810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c812:	3301      	adds	r3, #1
 800c814:	627b      	str	r3, [r7, #36]	@ 0x24
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	2b03      	cmp	r3, #3
 800c81a:	ddec      	ble.n	800c7f6 <kalmanCoreInit+0x8a>

  // then set the initial rotation matrix to the identity. This only affects
  // the first prediction step, since in the finalization, after shifting
  // attitude errors into the attitude state, the rotation matrix is updated.
  for(int i=0; i<3; i++) { for(int j=0; j<3; j++) { this->R[i][j] = i==j ? 1 : 0; }}
 800c81c:	2300      	movs	r3, #0
 800c81e:	623b      	str	r3, [r7, #32]
 800c820:	e020      	b.n	800c864 <kalmanCoreInit+0xf8>
 800c822:	2300      	movs	r3, #0
 800c824:	61fb      	str	r3, [r7, #28]
 800c826:	e017      	b.n	800c858 <kalmanCoreInit+0xec>
 800c828:	6a3a      	ldr	r2, [r7, #32]
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d102      	bne.n	800c836 <kalmanCoreInit+0xca>
 800c830:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800c834:	e001      	b.n	800c83a <kalmanCoreInit+0xce>
 800c836:	f04f 0100 	mov.w	r1, #0
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	6a3a      	ldr	r2, [r7, #32]
 800c83e:	4613      	mov	r3, r2
 800c840:	005b      	lsls	r3, r3, #1
 800c842:	4413      	add	r3, r2
 800c844:	69fa      	ldr	r2, [r7, #28]
 800c846:	4413      	add	r3, r2
 800c848:	330c      	adds	r3, #12
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4403      	add	r3, r0
 800c84e:	3304      	adds	r3, #4
 800c850:	6019      	str	r1, [r3, #0]
 800c852:	69fb      	ldr	r3, [r7, #28]
 800c854:	3301      	adds	r3, #1
 800c856:	61fb      	str	r3, [r7, #28]
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	2b02      	cmp	r3, #2
 800c85c:	dde4      	ble.n	800c828 <kalmanCoreInit+0xbc>
 800c85e:	6a3b      	ldr	r3, [r7, #32]
 800c860:	3301      	adds	r3, #1
 800c862:	623b      	str	r3, [r7, #32]
 800c864:	6a3b      	ldr	r3, [r7, #32]
 800c866:	2b02      	cmp	r3, #2
 800c868:	dddb      	ble.n	800c822 <kalmanCoreInit+0xb6>

  for (int i=0; i< KC_STATE_DIM; i++) {
 800c86a:	2300      	movs	r3, #0
 800c86c:	61bb      	str	r3, [r7, #24]
 800c86e:	e018      	b.n	800c8a2 <kalmanCoreInit+0x136>
    for (int j=0; j < KC_STATE_DIM; j++) {
 800c870:	2300      	movs	r3, #0
 800c872:	617b      	str	r3, [r7, #20]
 800c874:	e00f      	b.n	800c896 <kalmanCoreInit+0x12a>
      this->P[i][j] = 0; // set covariances to zero (diagonals will be changed from zero in the next section)
 800c876:	68f9      	ldr	r1, [r7, #12]
 800c878:	69ba      	ldr	r2, [r7, #24]
 800c87a:	4613      	mov	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	4413      	add	r3, r2
 800c880:	697a      	ldr	r2, [r7, #20]
 800c882:	4413      	add	r3, r2
 800c884:	3316      	adds	r3, #22
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	440b      	add	r3, r1
 800c88a:	f04f 0200 	mov.w	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
    for (int j=0; j < KC_STATE_DIM; j++) {
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	3301      	adds	r3, #1
 800c894:	617b      	str	r3, [r7, #20]
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2b08      	cmp	r3, #8
 800c89a:	ddec      	ble.n	800c876 <kalmanCoreInit+0x10a>
  for (int i=0; i< KC_STATE_DIM; i++) {
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	61bb      	str	r3, [r7, #24]
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	2b08      	cmp	r3, #8
 800c8a6:	dde3      	ble.n	800c870 <kalmanCoreInit+0x104>
    }
  }

  // initialize state variances
  this->P[KC_STATE_X][KC_STATE_X]  = powf(params->stdDevInitialPosition_xy, 2);
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	edd3 7a00 	vldr	s15, [r3]
 800c8ae:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c8b2:	eeb0 0a67 	vmov.f32	s0, s15
 800c8b6:	f009 fe2f 	bl	8016518 <powf>
 800c8ba:	eef0 7a40 	vmov.f32	s15, s0
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y]  = powf(params->stdDevInitialPosition_xy, 2);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	edd3 7a00 	vldr	s15, [r3]
 800c8ca:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c8ce:	eeb0 0a67 	vmov.f32	s0, s15
 800c8d2:	f009 fe21 	bl	8016518 <powf>
 800c8d6:	eef0 7a40 	vmov.f32	s15, s0
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z]  = powf(params->stdDevInitialPosition_z, 2);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	edd3 7a01 	vldr	s15, [r3, #4]
 800c8e6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c8ea:	eeb0 0a67 	vmov.f32	s0, s15
 800c8ee:	f009 fe13 	bl	8016518 <powf>
 800c8f2:	eef0 7a40 	vmov.f32	s15, s0
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] = powf(params->stdDevInitialVelocity, 2);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	edd3 7a02 	vldr	s15, [r3, #8]
 800c902:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c906:	eeb0 0a67 	vmov.f32	s0, s15
 800c90a:	f009 fe05 	bl	8016518 <powf>
 800c90e:	eef0 7a40 	vmov.f32	s15, s0
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] = powf(params->stdDevInitialVelocity, 2);
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	edd3 7a02 	vldr	s15, [r3, #8]
 800c91e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c922:	eeb0 0a67 	vmov.f32	s0, s15
 800c926:	f009 fdf7 	bl	8016518 <powf>
 800c92a:	eef0 7a40 	vmov.f32	s15, s0
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] = powf(params->stdDevInitialVelocity, 2);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	edd3 7a02 	vldr	s15, [r3, #8]
 800c93a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c93e:	eeb0 0a67 	vmov.f32	s0, s15
 800c942:	f009 fde9 	bl	8016518 <powf>
 800c946:	eef0 7a40 	vmov.f32	s15, s0
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	edd3 7a03 	vldr	s15, [r3, #12]
 800c956:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c95a:	eeb0 0a67 	vmov.f32	s0, s15
 800c95e:	f009 fddb 	bl	8016518 <powf>
 800c962:	eef0 7a40 	vmov.f32	s15, s0
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] = powf(params->stdDevInitialAttitude_rollpitch, 2);
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	edd3 7a03 	vldr	s15, [r3, #12]
 800c972:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c976:	eeb0 0a67 	vmov.f32	s0, s15
 800c97a:	f009 fdcd 	bl	8016518 <powf>
 800c97e:	eef0 7a40 	vmov.f32	s15, s0
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] = powf(params->stdDevInitialAttitude_yaw, 2);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	edd3 7a04 	vldr	s15, [r3, #16]
 800c98e:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800c992:	eeb0 0a67 	vmov.f32	s0, s15
 800c996:	f009 fdbf 	bl	8016518 <powf>
 800c99a:	eef0 7a40 	vmov.f32	s15, s0
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  this->Pm.numRows = KC_STATE_DIM;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2209      	movs	r2, #9
 800c9a8:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c
  this->Pm.numCols = KC_STATE_DIM;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2209      	movs	r2, #9
 800c9b0:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
  this->Pm.pData = (float*)this->P;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f103 0258 	add.w	r2, r3, #88	@ 0x58
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0

  this->baroReferenceHeight = 0.0;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f04f 0200 	mov.w	r2, #0
 800c9c6:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  this->isUpdated = false;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  this->lastPredictionMs = nowMs;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
  this->lastProcessNoiseUpdateMs = nowMs;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 800c9e2:	bf00      	nop
 800c9e4:	3728      	adds	r7, #40	@ 0x28
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	0000      	movs	r0, r0
 800c9ec:	0000      	movs	r0, r0
	...

0800c9f0 <kalmanCoreScalarUpdate>:

void kalmanCoreScalarUpdate(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, float error, float stdMeasNoise)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b090      	sub	sp, #64	@ 0x40
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	ed87 0a01 	vstr	s0, [r7, #4]
 800c9fe:	edc7 0a00 	vstr	s1, [r7]
  static arm_matrix_instance_f32 HTm = {KC_STATE_DIM, 1, HTd};

  NO_DMA_CCM_SAFE_ZERO_INIT __attribute__((aligned(4))) static float PHTd[KC_STATE_DIM * 1];
  static arm_matrix_instance_f32 PHTm = {KC_STATE_DIM, 1, PHTd};

  ASSERT(Hm->numRows == 1);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	881b      	ldrh	r3, [r3, #0]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d004      	beq.n	800ca14 <kalmanCoreScalarUpdate+0x24>
 800ca0a:	22e8      	movs	r2, #232	@ 0xe8
 800ca0c:	49ac      	ldr	r1, [pc, #688]	@ (800ccc0 <kalmanCoreScalarUpdate+0x2d0>)
 800ca0e:	48ad      	ldr	r0, [pc, #692]	@ (800ccc4 <kalmanCoreScalarUpdate+0x2d4>)
 800ca10:	f004 f9de 	bl	8010dd0 <assertFail>
  ASSERT(Hm->numCols == KC_STATE_DIM);
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	885b      	ldrh	r3, [r3, #2]
 800ca18:	2b09      	cmp	r3, #9
 800ca1a:	d004      	beq.n	800ca26 <kalmanCoreScalarUpdate+0x36>
 800ca1c:	22e9      	movs	r2, #233	@ 0xe9
 800ca1e:	49a8      	ldr	r1, [pc, #672]	@ (800ccc0 <kalmanCoreScalarUpdate+0x2d0>)
 800ca20:	48a9      	ldr	r0, [pc, #676]	@ (800ccc8 <kalmanCoreScalarUpdate+0x2d8>)
 800ca22:	f004 f9d5 	bl	8010dd0 <assertFail>

  // ====== INNOVATION COVARIANCE ======

  mat_trans(Hm, &HTm);
 800ca26:	49a9      	ldr	r1, [pc, #676]	@ (800cccc <kalmanCoreScalarUpdate+0x2dc>)
 800ca28:	68b8      	ldr	r0, [r7, #8]
 800ca2a:	f7ff fda1 	bl	800c570 <mat_trans>
  mat_mult(&this->Pm, &HTm, &PHTm); // PH'
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800ca34:	4aa6      	ldr	r2, [pc, #664]	@ (800ccd0 <kalmanCoreScalarUpdate+0x2e0>)
 800ca36:	49a5      	ldr	r1, [pc, #660]	@ (800cccc <kalmanCoreScalarUpdate+0x2dc>)
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f7ff fdbb 	bl	800c5b4 <mat_mult>
  float R = stdMeasNoise*stdMeasNoise;
 800ca3e:	edd7 7a00 	vldr	s15, [r7]
 800ca42:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ca46:	edc7 7a08 	vstr	s15, [r7, #32]
  double HPHR = R; // HPH' + R
 800ca4a:	6a38      	ldr	r0, [r7, #32]
 800ca4c:	f7f3 fd2e 	bl	80004ac <__aeabi_f2d>
 800ca50:	4602      	mov	r2, r0
 800ca52:	460b      	mov	r3, r1
 800ca54:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800ca58:	2300      	movs	r3, #0
 800ca5a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca5c:	e01f      	b.n	800ca9e <kalmanCoreScalarUpdate+0xae>
    HPHR += Hm->pData[i]*PHTd[i]; // this obviously only works if the update is scalar (as in this function)
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	ed93 7a00 	vldr	s14, [r3]
 800ca6c:	4a99      	ldr	r2, [pc, #612]	@ (800ccd4 <kalmanCoreScalarUpdate+0x2e4>)
 800ca6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca70:	009b      	lsls	r3, r3, #2
 800ca72:	4413      	add	r3, r2
 800ca74:	edd3 7a00 	vldr	s15, [r3]
 800ca78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7c:	ee17 0a90 	vmov	r0, s15
 800ca80:	f7f3 fd14 	bl	80004ac <__aeabi_f2d>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800ca8c:	f7f3 fbb0 	bl	80001f0 <__adddf3>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
  for (int i=0; i<KC_STATE_DIM; i++) { // Add the element of HPH' to the above
 800ca98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ca9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800caa0:	2b08      	cmp	r3, #8
 800caa2:	dddc      	ble.n	800ca5e <kalmanCoreScalarUpdate+0x6e>

  }
  ASSERT(!isnan(HPHR));
 800caa4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800caa8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 800caac:	f7f3 fff0 	bl	8000a90 <__aeabi_dcmpun>
 800cab0:	4603      	mov	r3, r0
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d004      	beq.n	800cac0 <kalmanCoreScalarUpdate+0xd0>
 800cab6:	22f6      	movs	r2, #246	@ 0xf6
 800cab8:	4981      	ldr	r1, [pc, #516]	@ (800ccc0 <kalmanCoreScalarUpdate+0x2d0>)
 800caba:	4887      	ldr	r0, [pc, #540]	@ (800ccd8 <kalmanCoreScalarUpdate+0x2e8>)
 800cabc:	f004 f988 	bl	8010dd0 <assertFail>

  // ====== MEASUREMENT UPDATE ======
  // Calculate the Kalman gain and perform the state update
  for (int i=0; i<KC_STATE_DIM; i++) {
 800cac0:	2300      	movs	r3, #0
 800cac2:	633b      	str	r3, [r7, #48]	@ 0x30
 800cac4:	e032      	b.n	800cb2c <kalmanCoreScalarUpdate+0x13c>
    K[i] = PHTd[i]/HPHR; // kalman gain = (PH' (HPH' + R )^-1)
 800cac6:	4a83      	ldr	r2, [pc, #524]	@ (800ccd4 <kalmanCoreScalarUpdate+0x2e4>)
 800cac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caca:	009b      	lsls	r3, r3, #2
 800cacc:	4413      	add	r3, r2
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f3 fceb 	bl	80004ac <__aeabi_f2d>
 800cad6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cada:	f7f3 fe69 	bl	80007b0 <__aeabi_ddiv>
 800cade:	4602      	mov	r2, r0
 800cae0:	460b      	mov	r3, r1
 800cae2:	4610      	mov	r0, r2
 800cae4:	4619      	mov	r1, r3
 800cae6:	f7f3 ffe9 	bl	8000abc <__aeabi_d2f>
 800caea:	4602      	mov	r2, r0
 800caec:	497b      	ldr	r1, [pc, #492]	@ (800ccdc <kalmanCoreScalarUpdate+0x2ec>)
 800caee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	440b      	add	r3, r1
 800caf4:	601a      	str	r2, [r3, #0]
    this->S[i] = this->S[i] + K[i] * error; // state update
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	ed93 7a00 	vldr	s14, [r3]
 800cb02:	4a76      	ldr	r2, [pc, #472]	@ (800ccdc <kalmanCoreScalarUpdate+0x2ec>)
 800cb04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4413      	add	r3, r2
 800cb0a:	edd3 6a00 	vldr	s13, [r3]
 800cb0e:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cb16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	edc3 7a00 	vstr	s15, [r3]
  for (int i=0; i<KC_STATE_DIM; i++) {
 800cb26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb28:	3301      	adds	r3, #1
 800cb2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb2e:	2b08      	cmp	r3, #8
 800cb30:	ddc9      	ble.n	800cac6 <kalmanCoreScalarUpdate+0xd6>
  }
  assertStateNotNaN(this);
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f7ff fdc2 	bl	800c6bc <assertStateNotNaN>

  // ====== COVARIANCE UPDATE ======
  mat_mult(&Km, Hm, &tmpNN1m); // KH
 800cb38:	4a69      	ldr	r2, [pc, #420]	@ (800cce0 <kalmanCoreScalarUpdate+0x2f0>)
 800cb3a:	68b9      	ldr	r1, [r7, #8]
 800cb3c:	4869      	ldr	r0, [pc, #420]	@ (800cce4 <kalmanCoreScalarUpdate+0x2f4>)
 800cb3e:	f7ff fd39 	bl	800c5b4 <mat_mult>
  for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[KC_STATE_DIM*i+i] -= 1; } // KH - I
 800cb42:	2300      	movs	r3, #0
 800cb44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb46:	e01a      	b.n	800cb7e <kalmanCoreScalarUpdate+0x18e>
 800cb48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb4a:	4613      	mov	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	4413      	add	r3, r2
 800cb50:	005b      	lsls	r3, r3, #1
 800cb52:	4a65      	ldr	r2, [pc, #404]	@ (800cce8 <kalmanCoreScalarUpdate+0x2f8>)
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	edd3 7a00 	vldr	s15, [r3]
 800cb5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb5e:	4613      	mov	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	4413      	add	r3, r2
 800cb64:	005b      	lsls	r3, r3, #1
 800cb66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800cb6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cb6e:	4a5e      	ldr	r2, [pc, #376]	@ (800cce8 <kalmanCoreScalarUpdate+0x2f8>)
 800cb70:	009b      	lsls	r3, r3, #2
 800cb72:	4413      	add	r3, r2
 800cb74:	edc3 7a00 	vstr	s15, [r3]
 800cb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb80:	2b08      	cmp	r3, #8
 800cb82:	dde1      	ble.n	800cb48 <kalmanCoreScalarUpdate+0x158>
  mat_trans(&tmpNN1m, &tmpNN2m); // (KH - I)'
 800cb84:	4959      	ldr	r1, [pc, #356]	@ (800ccec <kalmanCoreScalarUpdate+0x2fc>)
 800cb86:	4856      	ldr	r0, [pc, #344]	@ (800cce0 <kalmanCoreScalarUpdate+0x2f0>)
 800cb88:	f7ff fcf2 	bl	800c570 <mat_trans>
  mat_mult(&tmpNN1m, &this->Pm, &tmpNN3m); // (KH - I)*P
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800cb92:	4a57      	ldr	r2, [pc, #348]	@ (800ccf0 <kalmanCoreScalarUpdate+0x300>)
 800cb94:	4619      	mov	r1, r3
 800cb96:	4852      	ldr	r0, [pc, #328]	@ (800cce0 <kalmanCoreScalarUpdate+0x2f0>)
 800cb98:	f7ff fd0c 	bl	800c5b4 <mat_mult>
  mat_mult(&tmpNN3m, &tmpNN2m, &this->Pm); // (KH - I)*P*(KH - I)'
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800cba2:	461a      	mov	r2, r3
 800cba4:	4951      	ldr	r1, [pc, #324]	@ (800ccec <kalmanCoreScalarUpdate+0x2fc>)
 800cba6:	4852      	ldr	r0, [pc, #328]	@ (800ccf0 <kalmanCoreScalarUpdate+0x300>)
 800cba8:	f7ff fd04 	bl	800c5b4 <mat_mult>
  assertStateNotNaN(this);
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fd85 	bl	800c6bc <assertStateNotNaN>
  // add the measurement variance and ensure boundedness and symmetry
  // TODO: Why would it hit these bounds? Needs to be investigated.
  for (int i=0; i<KC_STATE_DIM; i++) {
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cbb6:	e101      	b.n	800cdbc <kalmanCoreScalarUpdate+0x3cc>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800cbb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbba:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbbc:	e0f7      	b.n	800cdae <kalmanCoreScalarUpdate+0x3be>
      double v = K[i] * R * K[j];
 800cbbe:	4a47      	ldr	r2, [pc, #284]	@ (800ccdc <kalmanCoreScalarUpdate+0x2ec>)
 800cbc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	ed93 7a00 	vldr	s14, [r3]
 800cbca:	edd7 7a08 	vldr	s15, [r7, #32]
 800cbce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbd2:	4a42      	ldr	r2, [pc, #264]	@ (800ccdc <kalmanCoreScalarUpdate+0x2ec>)
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd6:	009b      	lsls	r3, r3, #2
 800cbd8:	4413      	add	r3, r2
 800cbda:	edd3 7a00 	vldr	s15, [r3]
 800cbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbe2:	ee17 0a90 	vmov	r0, s15
 800cbe6:	f7f3 fc61 	bl	80004ac <__aeabi_f2d>
 800cbea:	4602      	mov	r2, r0
 800cbec:	460b      	mov	r3, r1
 800cbee:	e9c7 2306 	strd	r2, r3, [r7, #24]
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i] + v; // add measurement noise
 800cbf2:	68f9      	ldr	r1, [r7, #12]
 800cbf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cbf6:	4613      	mov	r3, r2
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	4413      	add	r3, r2
 800cbfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbfe:	4413      	add	r3, r2
 800cc00:	3316      	adds	r3, #22
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	440b      	add	r3, r1
 800cc06:	edd3 7a00 	vldr	s15, [r3]
 800cc0a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800cc0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cc12:	68f9      	ldr	r1, [r7, #12]
 800cc14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc16:	4613      	mov	r3, r2
 800cc18:	00db      	lsls	r3, r3, #3
 800cc1a:	4413      	add	r3, r2
 800cc1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc1e:	4413      	add	r3, r2
 800cc20:	3316      	adds	r3, #22
 800cc22:	009b      	lsls	r3, r3, #2
 800cc24:	440b      	add	r3, r1
 800cc26:	edd3 7a00 	vldr	s15, [r3]
 800cc2a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800cc2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cc32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cc36:	ee17 0a90 	vmov	r0, s15
 800cc3a:	f7f3 fc37 	bl	80004ac <__aeabi_f2d>
 800cc3e:	4602      	mov	r2, r0
 800cc40:	460b      	mov	r3, r1
 800cc42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800cc46:	f7f3 fad3 	bl	80001f0 <__adddf3>
 800cc4a:	4602      	mov	r2, r0
 800cc4c:	460b      	mov	r3, r1
 800cc4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800cc52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc56:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cc5a:	f7f3 ff19 	bl	8000a90 <__aeabi_dcmpun>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d109      	bne.n	800cc78 <kalmanCoreScalarUpdate+0x288>
 800cc64:	f04f 0200 	mov.w	r2, #0
 800cc68:	4b22      	ldr	r3, [pc, #136]	@ (800ccf4 <kalmanCoreScalarUpdate+0x304>)
 800cc6a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cc6e:	f7f3 ff05 	bl	8000a7c <__aeabi_dcmpgt>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d041      	beq.n	800ccfc <kalmanCoreScalarUpdate+0x30c>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800cc78:	68f9      	ldr	r1, [r7, #12]
 800cc7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	4413      	add	r3, r2
 800cc82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc84:	4413      	add	r3, r2
 800cc86:	3316      	adds	r3, #22
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	440b      	add	r3, r1
 800cc8c:	4a1a      	ldr	r2, [pc, #104]	@ (800ccf8 <kalmanCoreScalarUpdate+0x308>)
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	68f9      	ldr	r1, [r7, #12]
 800cc92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc94:	4613      	mov	r3, r2
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	4413      	add	r3, r2
 800cc9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc9c:	4413      	add	r3, r2
 800cc9e:	3316      	adds	r3, #22
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	440b      	add	r3, r1
 800cca4:	6819      	ldr	r1, [r3, #0]
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccaa:	4613      	mov	r3, r2
 800ccac:	00db      	lsls	r3, r3, #3
 800ccae:	4413      	add	r3, r2
 800ccb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccb2:	4413      	add	r3, r2
 800ccb4:	3316      	adds	r3, #22
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4403      	add	r3, r0
 800ccba:	6019      	str	r1, [r3, #0]
 800ccbc:	e074      	b.n	800cda8 <kalmanCoreScalarUpdate+0x3b8>
 800ccbe:	bf00      	nop
 800ccc0:	08019048 	.word	0x08019048
 800ccc4:	08019074 	.word	0x08019074
 800ccc8:	08019088 	.word	0x08019088
 800cccc:	20000078 	.word	0x20000078
 800ccd0:	20000080 	.word	0x20000080
 800ccd4:	10003f10 	.word	0x10003f10
 800ccd8:	080190a4 	.word	0x080190a4
 800ccdc:	10003afc 	.word	0x10003afc
 800cce0:	20000090 	.word	0x20000090
 800cce4:	20000088 	.word	0x20000088
 800cce8:	10003b20 	.word	0x10003b20
 800ccec:	20000098 	.word	0x20000098
 800ccf0:	200000a0 	.word	0x200000a0
 800ccf4:	40590000 	.word	0x40590000
 800ccf8:	42c80000 	.word	0x42c80000
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800ccfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d12c      	bne.n	800cd5e <kalmanCoreScalarUpdate+0x36e>
 800cd04:	a337      	add	r3, pc, #220	@ (adr r3, 800cde4 <kalmanCoreScalarUpdate+0x3f4>)
 800cd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd0a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd0e:	f7f3 fe97 	bl	8000a40 <__aeabi_dcmplt>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d022      	beq.n	800cd5e <kalmanCoreScalarUpdate+0x36e>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800cd18:	68f9      	ldr	r1, [r7, #12]
 800cd1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	00db      	lsls	r3, r3, #3
 800cd20:	4413      	add	r3, r2
 800cd22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd24:	4413      	add	r3, r2
 800cd26:	3316      	adds	r3, #22
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	440b      	add	r3, r1
 800cd2c:	4a2c      	ldr	r2, [pc, #176]	@ (800cde0 <kalmanCoreScalarUpdate+0x3f0>)
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	68f9      	ldr	r1, [r7, #12]
 800cd32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd34:	4613      	mov	r3, r2
 800cd36:	00db      	lsls	r3, r3, #3
 800cd38:	4413      	add	r3, r2
 800cd3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd3c:	4413      	add	r3, r2
 800cd3e:	3316      	adds	r3, #22
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	440b      	add	r3, r1
 800cd44:	6819      	ldr	r1, [r3, #0]
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd4a:	4613      	mov	r3, r2
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	4413      	add	r3, r2
 800cd50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd52:	4413      	add	r3, r2
 800cd54:	3316      	adds	r3, #22
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4403      	add	r3, r0
 800cd5a:	6019      	str	r1, [r3, #0]
 800cd5c:	e024      	b.n	800cda8 <kalmanCoreScalarUpdate+0x3b8>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800cd5e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800cd62:	f7f3 feab 	bl	8000abc <__aeabi_d2f>
 800cd66:	68f9      	ldr	r1, [r7, #12]
 800cd68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd6a:	4613      	mov	r3, r2
 800cd6c:	00db      	lsls	r3, r3, #3
 800cd6e:	4413      	add	r3, r2
 800cd70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd72:	4413      	add	r3, r2
 800cd74:	3316      	adds	r3, #22
 800cd76:	009b      	lsls	r3, r3, #2
 800cd78:	440b      	add	r3, r1
 800cd7a:	6018      	str	r0, [r3, #0]
 800cd7c:	68f9      	ldr	r1, [r7, #12]
 800cd7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd80:	4613      	mov	r3, r2
 800cd82:	00db      	lsls	r3, r3, #3
 800cd84:	4413      	add	r3, r2
 800cd86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd88:	4413      	add	r3, r2
 800cd8a:	3316      	adds	r3, #22
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	440b      	add	r3, r1
 800cd90:	6819      	ldr	r1, [r3, #0]
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd96:	4613      	mov	r3, r2
 800cd98:	00db      	lsls	r3, r3, #3
 800cd9a:	4413      	add	r3, r2
 800cd9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd9e:	4413      	add	r3, r2
 800cda0:	3316      	adds	r3, #22
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4403      	add	r3, r0
 800cda6:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800cda8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdaa:	3301      	adds	r3, #1
 800cdac:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb0:	2b08      	cmp	r3, #8
 800cdb2:	f77f af04 	ble.w	800cbbe <kalmanCoreScalarUpdate+0x1ce>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800cdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdb8:	3301      	adds	r3, #1
 800cdba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cdbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdbe:	2b08      	cmp	r3, #8
 800cdc0:	f77f aefa 	ble.w	800cbb8 <kalmanCoreScalarUpdate+0x1c8>
      }
    }
  }

  assertStateNotNaN(this);
 800cdc4:	68f8      	ldr	r0, [r7, #12]
 800cdc6:	f7ff fc79 	bl	800c6bc <assertStateNotNaN>

  this->isUpdated = true;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800cdd2:	bf00      	nop
 800cdd4:	3740      	adds	r7, #64	@ 0x40
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w
 800cde0:	358637bd 	.word	0x358637bd
 800cde4:	a0000000 	.word	0xa0000000
 800cde8:	3eb0c6f7 	.word	0x3eb0c6f7
 800cdec:	00000000 	.word	0x00000000

0800cdf0 <kalmanCoreUpdateWithPKE>:

void kalmanCoreUpdateWithPKE(kalmanCoreData_t* this, arm_matrix_instance_f32 *Hm, arm_matrix_instance_f32 *Km, arm_matrix_instance_f32 *P_w_m, float error)
{
 800cdf0:	b590      	push	{r4, r7, lr}
 800cdf2:	f5ad 7d31 	sub.w	sp, sp, #708	@ 0x2c4
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	f507 7430 	add.w	r4, r7, #704	@ 0x2c0
 800cdfc:	f5a4 742b 	sub.w	r4, r4, #684	@ 0x2ac
 800ce00:	6020      	str	r0, [r4, #0]
 800ce02:	f507 7030 	add.w	r0, r7, #704	@ 0x2c0
 800ce06:	f5a0 702c 	sub.w	r0, r0, #688	@ 0x2b0
 800ce0a:	6001      	str	r1, [r0, #0]
 800ce0c:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 800ce10:	f5a1 712d 	sub.w	r1, r1, #692	@ 0x2b4
 800ce14:	600a      	str	r2, [r1, #0]
 800ce16:	f507 7230 	add.w	r2, r7, #704	@ 0x2c0
 800ce1a:	f5a2 722e 	sub.w	r2, r2, #696	@ 0x2b8
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ce24:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800ce28:	ed83 0a00 	vstr	s0, [r3]
    // kalman filter update with weighted covariance matrix P_w_m, kalman gain Km, and innovation error
    // Temporary matrices for the covariance updates
    static double tmpNN1d[KC_STATE_DIM][KC_STATE_DIM];
    static arm_matrix_instance_f32 tmpNN1m = {KC_STATE_DIM, KC_STATE_DIM, (float *)tmpNN1d};
    for (int i=0; i<KC_STATE_DIM; i++){
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800ce32:	e030      	b.n	800ce96 <kalmanCoreUpdateWithPKE+0xa6>
        this->S[i] = this->S[i] + Km->pData[i] * error;
 800ce34:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ce38:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	ed93 7a00 	vldr	s14, [r3]
 800ce4a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ce4e:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	685a      	ldr	r2, [r3, #4]
 800ce56:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	edd3 6a00 	vldr	s13, [r3]
 800ce62:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ce66:	f5a3 732f 	sub.w	r3, r3, #700	@ 0x2bc
 800ce6a:	edd3 7a00 	vldr	s15, [r3]
 800ce6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce76:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ce7a:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800ce7e:	681a      	ldr	r2, [r3, #0]
 800ce80:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<KC_STATE_DIM; i++){
 800ce8c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800ce90:	3301      	adds	r3, #1
 800ce92:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 800ce96:	f8d7 32bc 	ldr.w	r3, [r7, #700]	@ 0x2bc
 800ce9a:	2b08      	cmp	r3, #8
 800ce9c:	ddca      	ble.n	800ce34 <kalmanCoreUpdateWithPKE+0x44>
    }
    // ====== COVARIANCE UPDATE ====== //
    mat_mult(Km, Hm, &tmpNN1m);                 // KH,  the Kalman Gain and H are the updated Kalman Gain and H
 800ce9e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cea2:	f5a3 712c 	sub.w	r1, r3, #688	@ 0x2b0
 800cea6:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800ceaa:	f5a3 732d 	sub.w	r3, r3, #692	@ 0x2b4
 800ceae:	4ad0      	ldr	r2, [pc, #832]	@ (800d1f0 <kalmanCoreUpdateWithPKE+0x400>)
 800ceb0:	6809      	ldr	r1, [r1, #0]
 800ceb2:	6818      	ldr	r0, [r3, #0]
 800ceb4:	f7ff fb7e 	bl	800c5b4 <mat_mult>
    mat_scale(&tmpNN1m, -1.0f, &tmpNN1m);       //  I-KH
 800ceb8:	49cd      	ldr	r1, [pc, #820]	@ (800d1f0 <kalmanCoreUpdateWithPKE+0x400>)
 800ceba:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800cebe:	48cc      	ldr	r0, [pc, #816]	@ (800d1f0 <kalmanCoreUpdateWithPKE+0x400>)
 800cec0:	f7ff fbdc 	bl	800c67c <mat_scale>
    for (int i=0; i<KC_STATE_DIM; i++) { tmpNN1d[i][i] = 1.0f + tmpNN1d[i][i]; }
 800cec4:	2300      	movs	r3, #0
 800cec6:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800ceca:	e021      	b.n	800cf10 <kalmanCoreUpdateWithPKE+0x120>
 800cecc:	49c9      	ldr	r1, [pc, #804]	@ (800d1f4 <kalmanCoreUpdateWithPKE+0x404>)
 800cece:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800ced2:	4613      	mov	r3, r2
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	4413      	add	r3, r2
 800ced8:	011b      	lsls	r3, r3, #4
 800ceda:	440b      	add	r3, r1
 800cedc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cee0:	f04f 0200 	mov.w	r2, #0
 800cee4:	4bc4      	ldr	r3, [pc, #784]	@ (800d1f8 <kalmanCoreUpdateWithPKE+0x408>)
 800cee6:	f7f3 f983 	bl	80001f0 <__adddf3>
 800ceea:	4602      	mov	r2, r0
 800ceec:	460b      	mov	r3, r1
 800ceee:	4610      	mov	r0, r2
 800cef0:	4619      	mov	r1, r3
 800cef2:	4cc0      	ldr	r4, [pc, #768]	@ (800d1f4 <kalmanCoreUpdateWithPKE+0x404>)
 800cef4:	f8d7 22b8 	ldr.w	r2, [r7, #696]	@ 0x2b8
 800cef8:	4613      	mov	r3, r2
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	4413      	add	r3, r2
 800cefe:	011b      	lsls	r3, r3, #4
 800cf00:	4423      	add	r3, r4
 800cf02:	e9c3 0100 	strd	r0, r1, [r3]
 800cf06:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800cf0a:	3301      	adds	r3, #1
 800cf0c:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 800cf10:	f8d7 32b8 	ldr.w	r3, [r7, #696]	@ 0x2b8
 800cf14:	2b08      	cmp	r3, #8
 800cf16:	ddd9      	ble.n	800cecc <kalmanCoreUpdateWithPKE+0xdc>
    double Ppo[KC_STATE_DIM][KC_STATE_DIM]={0};
 800cf18:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf1c:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 800cf20:	4618      	mov	r0, r3
 800cf22:	f44f 7322 	mov.w	r3, #648	@ 0x288
 800cf26:	461a      	mov	r2, r3
 800cf28:	2100      	movs	r1, #0
 800cf2a:	f009 f9e3 	bl	80162f4 <memset>
    arm_matrix_instance_f32 Ppom = {KC_STATE_DIM, KC_STATE_DIM, (float *)Ppo};
 800cf2e:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf32:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800cf36:	2209      	movs	r2, #9
 800cf38:	801a      	strh	r2, [r3, #0]
 800cf3a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf3e:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800cf42:	2209      	movs	r2, #9
 800cf44:	805a      	strh	r2, [r3, #2]
 800cf46:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf4a:	f5a3 732a 	sub.w	r3, r3, #680	@ 0x2a8
 800cf4e:	f107 0220 	add.w	r2, r7, #32
 800cf52:	605a      	str	r2, [r3, #4]
    mat_mult(&tmpNN1m, P_w_m, &Ppom);          // Pm = (I-KH)*P_w_m
 800cf54:	f107 0218 	add.w	r2, r7, #24
 800cf58:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf5c:	f5a3 732e 	sub.w	r3, r3, #696	@ 0x2b8
 800cf60:	6819      	ldr	r1, [r3, #0]
 800cf62:	48a3      	ldr	r0, [pc, #652]	@ (800d1f0 <kalmanCoreUpdateWithPKE+0x400>)
 800cf64:	f7ff fb26 	bl	800c5b4 <mat_mult>
    memcpy(this->P, Ppo, sizeof(this->P));
 800cf68:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf6c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	3358      	adds	r3, #88	@ 0x58
 800cf74:	f107 0120 	add.w	r1, r7, #32
 800cf78:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	f009 f9ff 	bl	8016380 <memcpy>

    assertStateNotNaN(this);
 800cf82:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cf86:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800cf8a:	6818      	ldr	r0, [r3, #0]
 800cf8c:	f7ff fb96 	bl	800c6bc <assertStateNotNaN>

    for (int i=0; i<KC_STATE_DIM; i++) {
 800cf90:	2300      	movs	r3, #0
 800cf92:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800cf96:	e10d      	b.n	800d1b4 <kalmanCoreUpdateWithPKE+0x3c4>
        for (int j=i; j<KC_STATE_DIM; j++) {
 800cf98:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800cf9c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800cfa0:	e0fe      	b.n	800d1a0 <kalmanCoreUpdateWithPKE+0x3b0>
        double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800cfa2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cfa6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800cfaa:	6819      	ldr	r1, [r3, #0]
 800cfac:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	00db      	lsls	r3, r3, #3
 800cfb4:	4413      	add	r3, r2
 800cfb6:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800cfba:	4413      	add	r3, r2
 800cfbc:	3316      	adds	r3, #22
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	440b      	add	r3, r1
 800cfc2:	edd3 7a00 	vldr	s15, [r3]
 800cfc6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800cfca:	ee27 7a87 	vmul.f32	s14, s15, s14
 800cfce:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800cfd2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800cfd6:	6819      	ldr	r1, [r3, #0]
 800cfd8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800cfdc:	4613      	mov	r3, r2
 800cfde:	00db      	lsls	r3, r3, #3
 800cfe0:	4413      	add	r3, r2
 800cfe2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800cfe6:	4413      	add	r3, r2
 800cfe8:	3316      	adds	r3, #22
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	440b      	add	r3, r1
 800cfee:	edd3 7a00 	vldr	s15, [r3]
 800cff2:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800cff6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800cffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cffe:	ee17 0a90 	vmov	r0, s15
 800d002:	f7f3 fa53 	bl	80004ac <__aeabi_f2d>
 800d006:	4602      	mov	r2, r0
 800d008:	460b      	mov	r3, r1
 800d00a:	e9c7 23aa 	strd	r2, r3, [r7, #680]	@ 0x2a8
        if (isnan(p) || p > MAX_COVARIANCE) {
 800d00e:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 800d012:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800d016:	f7f3 fd3b 	bl	8000a90 <__aeabi_dcmpun>
 800d01a:	4603      	mov	r3, r0
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d109      	bne.n	800d034 <kalmanCoreUpdateWithPKE+0x244>
 800d020:	f04f 0200 	mov.w	r2, #0
 800d024:	4b75      	ldr	r3, [pc, #468]	@ (800d1fc <kalmanCoreUpdateWithPKE+0x40c>)
 800d026:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800d02a:	f7f3 fd27 	bl	8000a7c <__aeabi_dcmpgt>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d034      	beq.n	800d09e <kalmanCoreUpdateWithPKE+0x2ae>
            this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800d034:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d038:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d03c:	6819      	ldr	r1, [r3, #0]
 800d03e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d042:	4613      	mov	r3, r2
 800d044:	00db      	lsls	r3, r3, #3
 800d046:	4413      	add	r3, r2
 800d048:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d04c:	4413      	add	r3, r2
 800d04e:	3316      	adds	r3, #22
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	440b      	add	r3, r1
 800d054:	4a6a      	ldr	r2, [pc, #424]	@ (800d200 <kalmanCoreUpdateWithPKE+0x410>)
 800d056:	601a      	str	r2, [r3, #0]
 800d058:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d05c:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d060:	6819      	ldr	r1, [r3, #0]
 800d062:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d066:	4613      	mov	r3, r2
 800d068:	00db      	lsls	r3, r3, #3
 800d06a:	4413      	add	r3, r2
 800d06c:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d070:	4413      	add	r3, r2
 800d072:	3316      	adds	r3, #22
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	440b      	add	r3, r1
 800d078:	6819      	ldr	r1, [r3, #0]
 800d07a:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d07e:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d082:	6818      	ldr	r0, [r3, #0]
 800d084:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d088:	4613      	mov	r3, r2
 800d08a:	00db      	lsls	r3, r3, #3
 800d08c:	4413      	add	r3, r2
 800d08e:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d092:	4413      	add	r3, r2
 800d094:	3316      	adds	r3, #22
 800d096:	009b      	lsls	r3, r3, #2
 800d098:	4403      	add	r3, r0
 800d09a:	6019      	str	r1, [r3, #0]
 800d09c:	e07b      	b.n	800d196 <kalmanCoreUpdateWithPKE+0x3a6>
        } else if ( i==j && p < MIN_COVARIANCE ) {
 800d09e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d0a2:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d13e      	bne.n	800d128 <kalmanCoreUpdateWithPKE+0x338>
 800d0aa:	a34f      	add	r3, pc, #316	@ (adr r3, 800d1e8 <kalmanCoreUpdateWithPKE+0x3f8>)
 800d0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b0:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800d0b4:	f7f3 fcc4 	bl	8000a40 <__aeabi_dcmplt>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d034      	beq.n	800d128 <kalmanCoreUpdateWithPKE+0x338>
            this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800d0be:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d0c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d0c6:	6819      	ldr	r1, [r3, #0]
 800d0c8:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d0cc:	4613      	mov	r3, r2
 800d0ce:	00db      	lsls	r3, r3, #3
 800d0d0:	4413      	add	r3, r2
 800d0d2:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d0d6:	4413      	add	r3, r2
 800d0d8:	3316      	adds	r3, #22
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	440b      	add	r3, r1
 800d0de:	4a49      	ldr	r2, [pc, #292]	@ (800d204 <kalmanCoreUpdateWithPKE+0x414>)
 800d0e0:	601a      	str	r2, [r3, #0]
 800d0e2:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d0e6:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d0ea:	6819      	ldr	r1, [r3, #0]
 800d0ec:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d0f0:	4613      	mov	r3, r2
 800d0f2:	00db      	lsls	r3, r3, #3
 800d0f4:	4413      	add	r3, r2
 800d0f6:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d0fa:	4413      	add	r3, r2
 800d0fc:	3316      	adds	r3, #22
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	440b      	add	r3, r1
 800d102:	6819      	ldr	r1, [r3, #0]
 800d104:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d108:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d10c:	6818      	ldr	r0, [r3, #0]
 800d10e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d112:	4613      	mov	r3, r2
 800d114:	00db      	lsls	r3, r3, #3
 800d116:	4413      	add	r3, r2
 800d118:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d11c:	4413      	add	r3, r2
 800d11e:	3316      	adds	r3, #22
 800d120:	009b      	lsls	r3, r3, #2
 800d122:	4403      	add	r3, r0
 800d124:	6019      	str	r1, [r3, #0]
 800d126:	e036      	b.n	800d196 <kalmanCoreUpdateWithPKE+0x3a6>
        } else {
            this->P[i][j] = this->P[j][i] = p;
 800d128:	e9d7 01aa 	ldrd	r0, r1, [r7, #680]	@ 0x2a8
 800d12c:	f7f3 fcc6 	bl	8000abc <__aeabi_d2f>
 800d130:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d134:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d138:	6819      	ldr	r1, [r3, #0]
 800d13a:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d13e:	4613      	mov	r3, r2
 800d140:	00db      	lsls	r3, r3, #3
 800d142:	4413      	add	r3, r2
 800d144:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d148:	4413      	add	r3, r2
 800d14a:	3316      	adds	r3, #22
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	440b      	add	r3, r1
 800d150:	6018      	str	r0, [r3, #0]
 800d152:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d156:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d15a:	6819      	ldr	r1, [r3, #0]
 800d15c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d160:	4613      	mov	r3, r2
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	4413      	add	r3, r2
 800d166:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d16a:	4413      	add	r3, r2
 800d16c:	3316      	adds	r3, #22
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	440b      	add	r3, r1
 800d172:	6819      	ldr	r1, [r3, #0]
 800d174:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d178:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d17c:	6818      	ldr	r0, [r3, #0]
 800d17e:	f8d7 22b4 	ldr.w	r2, [r7, #692]	@ 0x2b4
 800d182:	4613      	mov	r3, r2
 800d184:	00db      	lsls	r3, r3, #3
 800d186:	4413      	add	r3, r2
 800d188:	f8d7 22b0 	ldr.w	r2, [r7, #688]	@ 0x2b0
 800d18c:	4413      	add	r3, r2
 800d18e:	3316      	adds	r3, #22
 800d190:	009b      	lsls	r3, r3, #2
 800d192:	4403      	add	r3, r0
 800d194:	6019      	str	r1, [r3, #0]
        for (int j=i; j<KC_STATE_DIM; j++) {
 800d196:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800d19a:	3301      	adds	r3, #1
 800d19c:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 800d1a0:	f8d7 32b0 	ldr.w	r3, [r7, #688]	@ 0x2b0
 800d1a4:	2b08      	cmp	r3, #8
 800d1a6:	f77f aefc 	ble.w	800cfa2 <kalmanCoreUpdateWithPKE+0x1b2>
    for (int i=0; i<KC_STATE_DIM; i++) {
 800d1aa:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800d1ae:	3301      	adds	r3, #1
 800d1b0:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 800d1b4:	f8d7 32b4 	ldr.w	r3, [r7, #692]	@ 0x2b4
 800d1b8:	2b08      	cmp	r3, #8
 800d1ba:	f77f aeed 	ble.w	800cf98 <kalmanCoreUpdateWithPKE+0x1a8>
            }
        }
    }
    assertStateNotNaN(this);
 800d1be:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d1c2:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d1c6:	6818      	ldr	r0, [r3, #0]
 800d1c8:	f7ff fa78 	bl	800c6bc <assertStateNotNaN>

    this->isUpdated = true;
 800d1cc:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 800d1d0:	f5a3 732b 	sub.w	r3, r3, #684	@ 0x2ac
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800d1dc:	bf00      	nop
 800d1de:	f507 7731 	add.w	r7, r7, #708	@ 0x2c4
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	bd90      	pop	{r4, r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	a0000000 	.word	0xa0000000
 800d1ec:	3eb0c6f7 	.word	0x3eb0c6f7
 800d1f0:	200000a8 	.word	0x200000a8
 800d1f4:	20009400 	.word	0x20009400
 800d1f8:	3ff00000 	.word	0x3ff00000
 800d1fc:	40590000 	.word	0x40590000
 800d200:	42c80000 	.word	0x42c80000
 800d204:	358637bd 	.word	0x358637bd

0800d208 <kalmanCoreUpdateWithBaro>:

void kalmanCoreUpdateWithBaro(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float baroAsl, bool quadIsFlying)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b090      	sub	sp, #64	@ 0x40
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	ed87 0a01 	vstr	s0, [r7, #4]
 800d216:	4613      	mov	r3, r2
 800d218:	70fb      	strb	r3, [r7, #3]
  float h[KC_STATE_DIM] = {0};
 800d21a:	f107 0318 	add.w	r3, r7, #24
 800d21e:	2224      	movs	r2, #36	@ 0x24
 800d220:	2100      	movs	r1, #0
 800d222:	4618      	mov	r0, r3
 800d224:	f009 f866 	bl	80162f4 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800d228:	2301      	movs	r3, #1
 800d22a:	823b      	strh	r3, [r7, #16]
 800d22c:	2309      	movs	r3, #9
 800d22e:	827b      	strh	r3, [r7, #18]
 800d230:	f107 0318 	add.w	r3, r7, #24
 800d234:	617b      	str	r3, [r7, #20]

  h[KC_STATE_Z] = 1;
 800d236:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800d23a:	623b      	str	r3, [r7, #32]

  if (!quadIsFlying || this->baroReferenceHeight < 1) {
 800d23c:	78fb      	ldrb	r3, [r7, #3]
 800d23e:	f083 0301 	eor.w	r3, r3, #1
 800d242:	b2db      	uxtb	r3, r3
 800d244:	2b00      	cmp	r3, #0
 800d246:	d109      	bne.n	800d25c <kalmanCoreUpdateWithBaro+0x54>
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800d24e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d252:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25a:	d503      	bpl.n	800d264 <kalmanCoreUpdateWithBaro+0x5c>
    //TODO: maybe we could track the zero height as a state. Would be especially useful if UWB anchors had barometers.
    this->baroReferenceHeight = baroAsl;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	687a      	ldr	r2, [r7, #4]
 800d260:	f8c3 21a4 	str.w	r2, [r3, #420]	@ 0x1a4

  }

  float meas = (baroAsl - this->baroReferenceHeight);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	edd3 7a69 	vldr	s15, [r3, #420]	@ 0x1a4
 800d26a:	ed97 7a01 	vldr	s14, [r7, #4]
 800d26e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d272:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  kalmanCoreScalarUpdate(this, &H, meas - this->S[KC_STATE_Z], params->measNoiseBaro);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	edd3 7a02 	vldr	s15, [r3, #8]
 800d27c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800d280:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d284:	68bb      	ldr	r3, [r7, #8]
 800d286:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800d28a:	f107 0310 	add.w	r3, r7, #16
 800d28e:	eef0 0a47 	vmov.f32	s1, s14
 800d292:	eeb0 0a67 	vmov.f32	s0, s15
 800d296:	4619      	mov	r1, r3
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f7ff fba9 	bl	800c9f0 <kalmanCoreScalarUpdate>
}
 800d29e:	bf00      	nop
 800d2a0:	3740      	adds	r7, #64	@ 0x40
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	bd80      	pop	{r7, pc}
	...

0800d2a8 <predictDt>:

static void predictDt(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, float dt, bool quadIsFlying)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b0a2      	sub	sp, #136	@ 0x88
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6178      	str	r0, [r7, #20]
 800d2b0:	6139      	str	r1, [r7, #16]
 800d2b2:	60fa      	str	r2, [r7, #12]
 800d2b4:	ed87 0a02 	vstr	s0, [r7, #8]
 800d2b8:	71fb      	strb	r3, [r7, #7]
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN1m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN1d};

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static __attribute__((aligned(4))) arm_matrix_instance_f32 tmpNN2m = { KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  float dt2 = dt*dt;
 800d2ba:	edd7 7a02 	vldr	s15, [r7, #8]
 800d2be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d2c2:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

  // ====== DYNAMICS LINEARIZATION ======
  // Initialize as the identity
  A[KC_STATE_X][KC_STATE_X] = 1;
 800d2c6:	4bd2      	ldr	r3, [pc, #840]	@ (800d610 <predictDt+0x368>)
 800d2c8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d2cc:	601a      	str	r2, [r3, #0]
  A[KC_STATE_Y][KC_STATE_Y] = 1;
 800d2ce:	4bd0      	ldr	r3, [pc, #832]	@ (800d610 <predictDt+0x368>)
 800d2d0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d2d4:	629a      	str	r2, [r3, #40]	@ 0x28
  A[KC_STATE_Z][KC_STATE_Z] = 1;
 800d2d6:	4bce      	ldr	r3, [pc, #824]	@ (800d610 <predictDt+0x368>)
 800d2d8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d2dc:	651a      	str	r2, [r3, #80]	@ 0x50

  A[KC_STATE_PX][KC_STATE_PX] = 1;
 800d2de:	4bcc      	ldr	r3, [pc, #816]	@ (800d610 <predictDt+0x368>)
 800d2e0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d2e4:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PY] = 1;
 800d2e6:	4bca      	ldr	r3, [pc, #808]	@ (800d610 <predictDt+0x368>)
 800d2e8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d2ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 800d2f0:	4bc7      	ldr	r3, [pc, #796]	@ (800d610 <predictDt+0x368>)
 800d2f2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d2f6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  A[KC_STATE_D0][KC_STATE_D0] = 1;
 800d2fa:	4bc5      	ldr	r3, [pc, #788]	@ (800d610 <predictDt+0x368>)
 800d2fc:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d300:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
  A[KC_STATE_D1][KC_STATE_D1] = 1;
 800d304:	4bc2      	ldr	r3, [pc, #776]	@ (800d610 <predictDt+0x368>)
 800d306:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d30a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
  A[KC_STATE_D2][KC_STATE_D2] = 1;
 800d30e:	4bc0      	ldr	r3, [pc, #768]	@ (800d610 <predictDt+0x368>)
 800d310:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d314:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140

  // position from body-frame velocity
  A[KC_STATE_X][KC_STATE_PX] = this->R[0][0]*dt;
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800d31e:	edd7 7a02 	vldr	s15, [r7, #8]
 800d322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d326:	4bba      	ldr	r3, [pc, #744]	@ (800d610 <predictDt+0x368>)
 800d328:	edc3 7a03 	vstr	s15, [r3, #12]
  A[KC_STATE_Y][KC_STATE_PX] = this->R[1][0]*dt;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800d332:	edd7 7a02 	vldr	s15, [r7, #8]
 800d336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d33a:	4bb5      	ldr	r3, [pc, #724]	@ (800d610 <predictDt+0x368>)
 800d33c:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  A[KC_STATE_Z][KC_STATE_PX] = this->R[2][0]*dt;
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800d346:	edd7 7a02 	vldr	s15, [r7, #8]
 800d34a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d34e:	4bb0      	ldr	r3, [pc, #704]	@ (800d610 <predictDt+0x368>)
 800d350:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  A[KC_STATE_X][KC_STATE_PY] = this->R[0][1]*dt;
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800d35a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d35e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d362:	4bab      	ldr	r3, [pc, #684]	@ (800d610 <predictDt+0x368>)
 800d364:	edc3 7a04 	vstr	s15, [r3, #16]
  A[KC_STATE_Y][KC_STATE_PY] = this->R[1][1]*dt;
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800d36e:	edd7 7a02 	vldr	s15, [r7, #8]
 800d372:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d376:	4ba6      	ldr	r3, [pc, #664]	@ (800d610 <predictDt+0x368>)
 800d378:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  A[KC_STATE_Z][KC_STATE_PY] = this->R[2][1]*dt;
 800d37c:	697b      	ldr	r3, [r7, #20]
 800d37e:	ed93 7a14 	vldr	s14, [r3, #80]	@ 0x50
 800d382:	edd7 7a02 	vldr	s15, [r7, #8]
 800d386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d38a:	4ba1      	ldr	r3, [pc, #644]	@ (800d610 <predictDt+0x368>)
 800d38c:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58

  A[KC_STATE_X][KC_STATE_PZ] = this->R[0][2]*dt;
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800d396:	edd7 7a02 	vldr	s15, [r7, #8]
 800d39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d39e:	4b9c      	ldr	r3, [pc, #624]	@ (800d610 <predictDt+0x368>)
 800d3a0:	edc3 7a05 	vstr	s15, [r3, #20]
  A[KC_STATE_Y][KC_STATE_PZ] = this->R[1][2]*dt;
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800d3aa:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3b2:	4b97      	ldr	r3, [pc, #604]	@ (800d610 <predictDt+0x368>)
 800d3b4:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  A[KC_STATE_Z][KC_STATE_PZ] = this->R[2][2]*dt;
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	ed93 7a15 	vldr	s14, [r3, #84]	@ 0x54
 800d3be:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3c6:	4b92      	ldr	r3, [pc, #584]	@ (800d610 <predictDt+0x368>)
 800d3c8:	edc3 7a17 	vstr	s15, [r3, #92]	@ 0x5c

  // position from attitude error
  A[KC_STATE_X][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[0][2] - this->S[KC_STATE_PZ]*this->R[0][1])*dt;
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	ed93 7a04 	vldr	s14, [r3, #16]
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d3d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	edd3 6a05 	vldr	s13, [r3, #20]
 800d3e2:	697b      	ldr	r3, [r7, #20]
 800d3e4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d3e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d3ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d3f0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d3f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3f8:	4b85      	ldr	r3, [pc, #532]	@ (800d610 <predictDt+0x368>)
 800d3fa:	edc3 7a06 	vstr	s15, [r3, #24]
  A[KC_STATE_Y][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[1][2] - this->S[KC_STATE_PZ]*this->R[1][1])*dt;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	ed93 7a04 	vldr	s14, [r3, #16]
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800d40a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	edd3 6a05 	vldr	s13, [r3, #20]
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800d41a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d41e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d422:	edd7 7a02 	vldr	s15, [r7, #8]
 800d426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d42a:	4b79      	ldr	r3, [pc, #484]	@ (800d610 <predictDt+0x368>)
 800d42c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
  A[KC_STATE_Z][KC_STATE_D0] = (this->S[KC_STATE_PY]*this->R[2][2] - this->S[KC_STATE_PZ]*this->R[2][1])*dt;
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	ed93 7a04 	vldr	s14, [r3, #16]
 800d436:	697b      	ldr	r3, [r7, #20]
 800d438:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d43c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	edd3 6a05 	vldr	s13, [r3, #20]
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d44c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d450:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d454:	edd7 7a02 	vldr	s15, [r7, #8]
 800d458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d45c:	4b6c      	ldr	r3, [pc, #432]	@ (800d610 <predictDt+0x368>)
 800d45e:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60

  A[KC_STATE_X][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[0][2] + this->S[KC_STATE_PZ]*this->R[0][0])*dt;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	edd3 7a03 	vldr	s15, [r3, #12]
 800d468:	eeb1 7a67 	vneg.f32	s14, s15
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 800d472:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	edd3 6a05 	vldr	s13, [r3, #20]
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d48a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d48e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d492:	4b5f      	ldr	r3, [pc, #380]	@ (800d610 <predictDt+0x368>)
 800d494:	edc3 7a07 	vstr	s15, [r3, #28]
  A[KC_STATE_Y][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[1][2] + this->S[KC_STATE_PZ]*this->R[1][0])*dt;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	edd3 7a03 	vldr	s15, [r3, #12]
 800d49e:	eeb1 7a67 	vneg.f32	s14, s15
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800d4a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	edd3 6a05 	vldr	s13, [r3, #20]
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800d4b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d4c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d4c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4c8:	4b51      	ldr	r3, [pc, #324]	@ (800d610 <predictDt+0x368>)
 800d4ca:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  A[KC_STATE_Z][KC_STATE_D1] = (- this->S[KC_STATE_PX]*this->R[2][2] + this->S[KC_STATE_PZ]*this->R[2][0])*dt;
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	edd3 7a03 	vldr	s15, [r3, #12]
 800d4d4:	eeb1 7a67 	vneg.f32	s14, s15
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d4de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	edd3 6a05 	vldr	s13, [r3, #20]
 800d4e8:	697b      	ldr	r3, [r7, #20]
 800d4ea:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d4ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d4f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d4f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d4fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4fe:	4b44      	ldr	r3, [pc, #272]	@ (800d610 <predictDt+0x368>)
 800d500:	edc3 7a19 	vstr	s15, [r3, #100]	@ 0x64

  A[KC_STATE_X][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[0][1] - this->S[KC_STATE_PY]*this->R[0][0])*dt;
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	ed93 7a03 	vldr	s14, [r3, #12]
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800d510:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	edd3 6a04 	vldr	s13, [r3, #16]
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800d520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d524:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d528:	edd7 7a02 	vldr	s15, [r7, #8]
 800d52c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d530:	4b37      	ldr	r3, [pc, #220]	@ (800d610 <predictDt+0x368>)
 800d532:	edc3 7a08 	vstr	s15, [r3, #32]
  A[KC_STATE_Y][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[1][1] - this->S[KC_STATE_PY]*this->R[1][0])*dt;
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	ed93 7a03 	vldr	s14, [r3, #12]
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 800d542:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	edd3 6a04 	vldr	s13, [r3, #16]
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800d552:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d556:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d55a:	edd7 7a02 	vldr	s15, [r7, #8]
 800d55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d562:	4b2b      	ldr	r3, [pc, #172]	@ (800d610 <predictDt+0x368>)
 800d564:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  A[KC_STATE_Z][KC_STATE_D2] = (this->S[KC_STATE_PX]*this->R[2][1] - this->S[KC_STATE_PY]*this->R[2][0])*dt;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	ed93 7a03 	vldr	s14, [r3, #12]
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	edd3 6a04 	vldr	s13, [r3, #16]
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d584:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d588:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d58c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d590:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d594:	4b1e      	ldr	r3, [pc, #120]	@ (800d610 <predictDt+0x368>)
 800d596:	edc3 7a1a 	vstr	s15, [r3, #104]	@ 0x68

  // body-frame velocity from body-frame velocity
  A[KC_STATE_PX][KC_STATE_PX] = 1; //drag negligible
 800d59a:	4b1d      	ldr	r3, [pc, #116]	@ (800d610 <predictDt+0x368>)
 800d59c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d5a0:	679a      	str	r2, [r3, #120]	@ 0x78
  A[KC_STATE_PY][KC_STATE_PX] =-gyro->z*dt;
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	edd3 7a02 	vldr	s15, [r3, #8]
 800d5a8:	eeb1 7a67 	vneg.f32	s14, s15
 800d5ac:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b4:	4b16      	ldr	r3, [pc, #88]	@ (800d610 <predictDt+0x368>)
 800d5b6:	edc3 7a27 	vstr	s15, [r3, #156]	@ 0x9c
  A[KC_STATE_PZ][KC_STATE_PX] = gyro->y*dt;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	ed93 7a01 	vldr	s14, [r3, #4]
 800d5c0:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5c8:	4b11      	ldr	r3, [pc, #68]	@ (800d610 <predictDt+0x368>)
 800d5ca:	edc3 7a30 	vstr	s15, [r3, #192]	@ 0xc0

  A[KC_STATE_PX][KC_STATE_PY] = gyro->z*dt;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	ed93 7a02 	vldr	s14, [r3, #8]
 800d5d4:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d610 <predictDt+0x368>)
 800d5de:	edc3 7a1f 	vstr	s15, [r3, #124]	@ 0x7c
  A[KC_STATE_PY][KC_STATE_PY] = 1; //drag negligible
 800d5e2:	4b0b      	ldr	r3, [pc, #44]	@ (800d610 <predictDt+0x368>)
 800d5e4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d5e8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  A[KC_STATE_PZ][KC_STATE_PY] =-gyro->x*dt;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	edd3 7a00 	vldr	s15, [r3]
 800d5f2:	eeb1 7a67 	vneg.f32	s14, s15
 800d5f6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d5fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5fe:	4b04      	ldr	r3, [pc, #16]	@ (800d610 <predictDt+0x368>)
 800d600:	edc3 7a31 	vstr	s15, [r3, #196]	@ 0xc4

  A[KC_STATE_PX][KC_STATE_PZ] =-gyro->y*dt;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	edd3 7a01 	vldr	s15, [r3, #4]
 800d60a:	eeb1 7a67 	vneg.f32	s14, s15
 800d60e:	e001      	b.n	800d614 <predictDt+0x36c>
 800d610:	10003f34 	.word	0x10003f34
 800d614:	edd7 7a02 	vldr	s15, [r7, #8]
 800d618:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d61c:	4bb2      	ldr	r3, [pc, #712]	@ (800d8e8 <predictDt+0x640>)
 800d61e:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  A[KC_STATE_PY][KC_STATE_PZ] = gyro->x*dt;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	ed93 7a00 	vldr	s14, [r3]
 800d628:	edd7 7a02 	vldr	s15, [r7, #8]
 800d62c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d630:	4bad      	ldr	r3, [pc, #692]	@ (800d8e8 <predictDt+0x640>)
 800d632:	edc3 7a29 	vstr	s15, [r3, #164]	@ 0xa4
  A[KC_STATE_PZ][KC_STATE_PZ] = 1; //drag negligible
 800d636:	4bac      	ldr	r3, [pc, #688]	@ (800d8e8 <predictDt+0x640>)
 800d638:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800d63c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

  // body-frame velocity from attitude error
  A[KC_STATE_PX][KC_STATE_D0] =  0;
 800d640:	4ba9      	ldr	r3, [pc, #676]	@ (800d8e8 <predictDt+0x640>)
 800d642:	f04f 0200 	mov.w	r2, #0
 800d646:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  A[KC_STATE_PY][KC_STATE_D0] = -GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d650:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800d8ec <predictDt+0x644>
 800d654:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d658:	edd7 7a02 	vldr	s15, [r7, #8]
 800d65c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d660:	4ba1      	ldr	r3, [pc, #644]	@ (800d8e8 <predictDt+0x640>)
 800d662:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8
  A[KC_STATE_PZ][KC_STATE_D0] =  GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d66c:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 800d8fc <predictDt+0x654>
 800d670:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d674:	edd7 7a02 	vldr	s15, [r7, #8]
 800d678:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d67c:	4b9a      	ldr	r3, [pc, #616]	@ (800d8e8 <predictDt+0x640>)
 800d67e:	edc3 7a33 	vstr	s15, [r3, #204]	@ 0xcc

  A[KC_STATE_PX][KC_STATE_D1] =  GRAVITY_MAGNITUDE*this->R[2][2]*dt;
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800d688:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 800d8fc <predictDt+0x654>
 800d68c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d690:	edd7 7a02 	vldr	s15, [r7, #8]
 800d694:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d698:	4b93      	ldr	r3, [pc, #588]	@ (800d8e8 <predictDt+0x640>)
 800d69a:	edc3 7a22 	vstr	s15, [r3, #136]	@ 0x88
  A[KC_STATE_PY][KC_STATE_D1] =  0;
 800d69e:	4b92      	ldr	r3, [pc, #584]	@ (800d8e8 <predictDt+0x640>)
 800d6a0:	f04f 0200 	mov.w	r2, #0
 800d6a4:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  A[KC_STATE_PZ][KC_STATE_D1] = -GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d6ae:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 800d8ec <predictDt+0x644>
 800d6b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d6b6:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6be:	4b8a      	ldr	r3, [pc, #552]	@ (800d8e8 <predictDt+0x640>)
 800d6c0:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0

  A[KC_STATE_PX][KC_STATE_D2] = -GRAVITY_MAGNITUDE*this->R[2][1]*dt;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800d6ca:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 800d8ec <predictDt+0x644>
 800d6ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d6d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6da:	4b83      	ldr	r3, [pc, #524]	@ (800d8e8 <predictDt+0x640>)
 800d6dc:	edc3 7a23 	vstr	s15, [r3, #140]	@ 0x8c
  A[KC_STATE_PY][KC_STATE_D2] =  GRAVITY_MAGNITUDE*this->R[2][0]*dt;
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800d6e6:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 800d8fc <predictDt+0x654>
 800d6ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 800d6ee:	edd7 7a02 	vldr	s15, [r7, #8]
 800d6f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f6:	4b7c      	ldr	r3, [pc, #496]	@ (800d8e8 <predictDt+0x640>)
 800d6f8:	edc3 7a2c 	vstr	s15, [r3, #176]	@ 0xb0
  A[KC_STATE_PZ][KC_STATE_D2] =  0;
 800d6fc:	4b7a      	ldr	r3, [pc, #488]	@ (800d8e8 <predictDt+0x640>)
 800d6fe:	f04f 0200 	mov.w	r2, #0
 800d702:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
   * d = [0,0,0] at the beginning of each prediction step and that gyro.x is constant over the sampling period
   *
   * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
   * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
   */
  float d0 = gyro->x*dt/2;
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	ed93 7a00 	vldr	s14, [r3]
 800d70c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d710:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d714:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d71c:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float d1 = gyro->y*dt/2;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	ed93 7a01 	vldr	s14, [r3, #4]
 800d726:	edd7 7a02 	vldr	s15, [r7, #8]
 800d72a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d72e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d736:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float d2 = gyro->z*dt/2;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	ed93 7a02 	vldr	s14, [r3, #8]
 800d740:	edd7 7a02 	vldr	s15, [r7, #8]
 800d744:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d748:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d74c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d750:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 800d754:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d758:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d75c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d760:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d764:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d768:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d76c:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d770:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d774:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d778:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d77c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d780:	4b59      	ldr	r3, [pc, #356]	@ (800d8e8 <predictDt+0x640>)
 800d782:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
  A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800d786:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d78a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d78e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d792:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d796:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d79a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d79e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7a2:	4b51      	ldr	r3, [pc, #324]	@ (800d8e8 <predictDt+0x640>)
 800d7a4:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
  A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 800d7a8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d7ac:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d7b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d7b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d7bc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d7c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7c4:	4b48      	ldr	r3, [pc, #288]	@ (800d8e8 <predictDt+0x640>)
 800d7c6:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

  A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 800d7ca:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d7ce:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d7d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d7da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d7de:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d7e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7e6:	4b40      	ldr	r3, [pc, #256]	@ (800d8e8 <predictDt+0x640>)
 800d7e8:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
  A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 800d7ec:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d7f0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d7f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d7f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d800:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d804:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d808:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d80c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d810:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d814:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d818:	4b33      	ldr	r3, [pc, #204]	@ (800d8e8 <predictDt+0x640>)
 800d81a:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
  A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 800d81e:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800d822:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d82a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d82e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d832:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d83a:	4b2b      	ldr	r3, [pc, #172]	@ (800d8e8 <predictDt+0x640>)
 800d83c:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

  A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 800d840:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800d844:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d84c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d850:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d854:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d85c:	4b22      	ldr	r3, [pc, #136]	@ (800d8e8 <predictDt+0x640>)
 800d85e:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
  A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 800d862:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800d866:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800d86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d86e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d872:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d876:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d87a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d87e:	4b1a      	ldr	r3, [pc, #104]	@ (800d8e8 <predictDt+0x640>)
 800d880:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
  A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 800d884:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 800d888:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800d88c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800d890:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d894:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d89c:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800d8a0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d8a4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d8a8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d8ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d8b0:	4b0d      	ldr	r3, [pc, #52]	@ (800d8e8 <predictDt+0x640>)
 800d8b2:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140


  // ====== COVARIANCE UPDATE ======
  mat_mult(&Am, &this->Pm, &tmpNN1m); // A P
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800d8bc:	4a0c      	ldr	r2, [pc, #48]	@ (800d8f0 <predictDt+0x648>)
 800d8be:	4619      	mov	r1, r3
 800d8c0:	480c      	ldr	r0, [pc, #48]	@ (800d8f4 <predictDt+0x64c>)
 800d8c2:	f7fe fe77 	bl	800c5b4 <mat_mult>
  mat_trans(&Am, &tmpNN2m); // A'
 800d8c6:	490c      	ldr	r1, [pc, #48]	@ (800d8f8 <predictDt+0x650>)
 800d8c8:	480a      	ldr	r0, [pc, #40]	@ (800d8f4 <predictDt+0x64c>)
 800d8ca:	f7fe fe51 	bl	800c570 <mat_trans>
  mat_mult(&tmpNN1m, &tmpNN2m, &this->Pm); // A P A'
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	4908      	ldr	r1, [pc, #32]	@ (800d8f8 <predictDt+0x650>)
 800d8d8:	4805      	ldr	r0, [pc, #20]	@ (800d8f0 <predictDt+0x648>)
 800d8da:	f7fe fe6b 	bl	800c5b4 <mat_mult>

  float dx, dy, dz;
  float tmpSPX, tmpSPY, tmpSPZ;
  float zacc;

  if (quadIsFlying) // only acceleration in z direction
 800d8de:	79fb      	ldrb	r3, [r7, #7]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 8125 	beq.w	800db30 <predictDt+0x888>
 800d8e6:	e00b      	b.n	800d900 <predictDt+0x658>
 800d8e8:	10003f34 	.word	0x10003f34
 800d8ec:	c11cf5c3 	.word	0xc11cf5c3
 800d8f0:	200000b8 	.word	0x200000b8
 800d8f4:	200000b0 	.word	0x200000b0
 800d8f8:	200000c0 	.word	0x200000c0
 800d8fc:	411cf5c3 	.word	0x411cf5c3
  {
    // Use accelerometer and not commanded thrust, as this has proper physical units
    zacc = acc->z;
 800d900:	693b      	ldr	r3, [r7, #16]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	edd3 7a03 	vldr	s15, [r3, #12]
 800d90c:	ed97 7a02 	vldr	s14, [r7, #8]
 800d910:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d914:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	edd3 7a04 	vldr	s15, [r3, #16]
 800d91e:	ed97 7a02 	vldr	s14, [r7, #8]
 800d922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d926:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + zacc * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	ed93 7a05 	vldr	s14, [r3, #20]
 800d930:	edd7 7a02 	vldr	s15, [r7, #8]
 800d934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d938:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800d93c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800d940:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d944:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800d948:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800d94c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d950:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 800d954:	697b      	ldr	r3, [r7, #20]
 800d956:	ed93 7a00 	vldr	s14, [r3]
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800d960:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d964:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800d96e:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800d972:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d976:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800d980:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800d984:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d988:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d98c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d990:	697b      	ldr	r3, [r7, #20]
 800d992:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	ed93 7a01 	vldr	s14, [r3, #4]
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800d9a2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d9a6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800d9b0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800d9b4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d9b8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 800d9c2:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800d9c6:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d9ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	ed93 7a02 	vldr	s14, [r3, #8]
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 800d9e4:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800d9e8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800d9ec:	697b      	ldr	r3, [r7, #20]
 800d9ee:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 800d9f2:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800d9f6:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d9fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 800da04:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800da08:	ee66 7a27 	vmul.f32	s15, s12, s15
 800da0c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800da10:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800da14:	ed1f 6a47 	vldr	s12, [pc, #-284]	@ 800d8fc <predictDt+0x654>
 800da18:	ee27 6a86 	vmul.f32	s12, s15, s12
 800da1c:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800da20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800da28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da2c:	697b      	ldr	r3, [r7, #20]
 800da2e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	68db      	ldr	r3, [r3, #12]
 800da36:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 800da38:	697b      	ldr	r3, [r7, #20]
 800da3a:	691b      	ldr	r3, [r3, #16]
 800da3c:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	695b      	ldr	r3, [r3, #20]
 800da42:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	ed93 7a03 	vldr	s14, [r3, #12]
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	edd3 6a02 	vldr	s13, [r3, #8]
 800da50:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800da54:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	ed93 6a01 	vldr	s12, [r3, #4]
 800da5e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800da62:	ee66 7a27 	vmul.f32	s15, s12, s15
 800da66:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800da70:	ed1f 6a5e 	vldr	s12, [pc, #-376]	@ 800d8fc <predictDt+0x654>
 800da74:	ee67 7a86 	vmul.f32	s15, s15, s12
 800da78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800da7c:	edd7 7a02 	vldr	s15, [r7, #8]
 800da80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (-gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	ed93 7a04 	vldr	s14, [r3, #16]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	edd3 7a02 	vldr	s15, [r3, #8]
 800da9a:	eef1 6a67 	vneg.f32	s13, s15
 800da9e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800daa2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	ed93 6a00 	vldr	s12, [r3]
 800daac:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800dab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dab4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800dabe:	ed1f 6a71 	vldr	s12, [pc, #-452]	@ 800d8fc <predictDt+0x654>
 800dac2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dac6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800daca:	edd7 7a02 	vldr	s15, [r7, #8]
 800dace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (zacc + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	ed93 7a05 	vldr	s14, [r3, #20]
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	edd3 6a01 	vldr	s13, [r3, #4]
 800dae8:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800daec:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800daf0:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800daf4:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	ed93 6a00 	vldr	s12, [r3]
 800dafe:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800db02:	ee66 7a27 	vmul.f32	s15, s12, s15
 800db06:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800db10:	ed1f 6a86 	vldr	s12, [pc, #-536]	@ 800d8fc <predictDt+0x654>
 800db14:	ee67 7a86 	vmul.f32	s15, s15, s12
 800db18:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800db1c:	edd7 7a02 	vldr	s15, [r7, #8]
 800db20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db28:	697b      	ldr	r3, [r7, #20]
 800db2a:	edc3 7a05 	vstr	s15, [r3, #20]
 800db2e:	e137      	b.n	800dda0 <predictDt+0xaf8>
  }
  else // Acceleration can be in any direction, as measured by the accelerometer. This occurs, eg. in freefall or while being carried.
  {
    // position updates in the body frame (will be rotated to inertial frame)
    dx = this->S[KC_STATE_PX] * dt + acc->x * dt2 / 2.0f;
 800db30:	697b      	ldr	r3, [r7, #20]
 800db32:	ed93 7a03 	vldr	s14, [r3, #12]
 800db36:	edd7 7a02 	vldr	s15, [r7, #8]
 800db3a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	edd3 6a00 	vldr	s13, [r3]
 800db44:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800db48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800db4c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800db50:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800db54:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db58:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    dy = this->S[KC_STATE_PY] * dt + acc->y * dt2 / 2.0f;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	ed93 7a04 	vldr	s14, [r3, #16]
 800db62:	edd7 7a02 	vldr	s15, [r7, #8]
 800db66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	edd3 6a01 	vldr	s13, [r3, #4]
 800db70:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800db74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800db78:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800db7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800db80:	ee77 7a27 	vadd.f32	s15, s14, s15
 800db84:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    dz = this->S[KC_STATE_PZ] * dt + acc->z * dt2 / 2.0f; // thrust can only be produced in the body's Z direction
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	ed93 7a05 	vldr	s14, [r3, #20]
 800db8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800db92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db96:	693b      	ldr	r3, [r7, #16]
 800db98:	edd3 6a02 	vldr	s13, [r3, #8]
 800db9c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800dba0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dba4:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800dba8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800dbac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbb0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c

    // position update
    this->S[KC_STATE_X] += this->R[0][0] * dx + this->R[0][1] * dy + this->R[0][2] * dz;
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	ed93 7a00 	vldr	s14, [r3]
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800dbc0:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800dbc4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	ed93 6a0e 	vldr	s12, [r3, #56]	@ 0x38
 800dbce:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800dbd2:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dbd6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	ed93 6a0f 	vldr	s12, [r3, #60]	@ 0x3c
 800dbe0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800dbe4:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dbe8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	edc3 7a00 	vstr	s15, [r3]
    this->S[KC_STATE_Y] += this->R[1][0] * dx + this->R[1][1] * dy + this->R[1][2] * dz;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	ed93 7a01 	vldr	s14, [r3, #4]
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 800dc02:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800dc06:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800dc10:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800dc14:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc18:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 800dc22:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800dc26:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	edc3 7a01 	vstr	s15, [r3, #4]
    this->S[KC_STATE_Z] += this->R[2][0] * dx + this->R[2][1] * dy + this->R[2][2] * dz - GRAVITY_MAGNITUDE * dt2 / 2.0f;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	ed93 7a02 	vldr	s14, [r3, #8]
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	edd3 6a13 	vldr	s13, [r3, #76]	@ 0x4c
 800dc44:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800dc48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	ed93 6a14 	vldr	s12, [r3, #80]	@ 0x50
 800dc52:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800dc56:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 800dc64:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 800dc68:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dc6c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dc70:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800dc74:	ed9f 6ae1 	vldr	s12, [pc, #900]	@ 800dffc <predictDt+0xd54>
 800dc78:	ee27 6a86 	vmul.f32	s12, s15, s12
 800dc7c:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 800dc80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc84:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800dc88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc8c:	697b      	ldr	r3, [r7, #20]
 800dc8e:	edc3 7a02 	vstr	s15, [r3, #8]

    // keep previous time step's state for the update
    tmpSPX = this->S[KC_STATE_PX];
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	65bb      	str	r3, [r7, #88]	@ 0x58
    tmpSPY = this->S[KC_STATE_PY];
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	691b      	ldr	r3, [r3, #16]
 800dc9c:	657b      	str	r3, [r7, #84]	@ 0x54
    tmpSPZ = this->S[KC_STATE_PZ];
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	653b      	str	r3, [r7, #80]	@ 0x50

    // body-velocity update: accelerometers - gyros cross velocity - gravity in body frame
    this->S[KC_STATE_PX] += dt * (acc->x + gyro->z * tmpSPY - gyro->y * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][0]);
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	ed93 7a03 	vldr	s14, [r3, #12]
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	edd3 6a00 	vldr	s13, [r3]
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	ed93 6a02 	vldr	s12, [r3, #8]
 800dcb6:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800dcba:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dcbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	ed93 6a01 	vldr	s12, [r3, #4]
 800dcc8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800dccc:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dcd0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 800dcda:	ed9f 6ac8 	vldr	s12, [pc, #800]	@ 800dffc <predictDt+0xd54>
 800dcde:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dce2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dce6:	edd7 7a02 	vldr	s15, [r7, #8]
 800dcea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dcee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	edc3 7a03 	vstr	s15, [r3, #12]
    this->S[KC_STATE_PY] += dt * (acc->y - gyro->z * tmpSPX + gyro->x * tmpSPZ - GRAVITY_MAGNITUDE * this->R[2][1]);
 800dcf8:	697b      	ldr	r3, [r7, #20]
 800dcfa:	ed93 7a04 	vldr	s14, [r3, #16]
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	edd3 6a01 	vldr	s13, [r3, #4]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	ed93 6a02 	vldr	s12, [r3, #8]
 800dd0a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800dd0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dd12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	ed93 6a00 	vldr	s12, [r3]
 800dd1c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800dd20:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dd24:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 800dd2e:	ed9f 6ab3 	vldr	s12, [pc, #716]	@ 800dffc <predictDt+0xd54>
 800dd32:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dd36:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dd3a:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	edc3 7a04 	vstr	s15, [r3, #16]
    this->S[KC_STATE_PZ] += dt * (acc->z + gyro->y * tmpSPX - gyro->x * tmpSPY - GRAVITY_MAGNITUDE * this->R[2][2]);
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	ed93 7a05 	vldr	s14, [r3, #20]
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	edd3 6a02 	vldr	s13, [r3, #8]
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	ed93 6a01 	vldr	s12, [r3, #4]
 800dd5e:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800dd62:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dd66:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	ed93 6a00 	vldr	s12, [r3]
 800dd70:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800dd74:	ee66 7a27 	vmul.f32	s15, s12, s15
 800dd78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dd7c:	697b      	ldr	r3, [r7, #20]
 800dd7e:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 800dd82:	ed9f 6a9e 	vldr	s12, [pc, #632]	@ 800dffc <predictDt+0xd54>
 800dd86:	ee67 7a86 	vmul.f32	s15, s15, s12
 800dd8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800dd8e:	edd7 7a02 	vldr	s15, [r7, #8]
 800dd92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dd96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	edc3 7a05 	vstr	s15, [r3, #20]
  }

  // attitude update (rotate by gyroscope), we do this in quaternions
  // this is the gyroscope angular velocity integrated over the sample period
  float dtwx = dt*gyro->x;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	edd3 7a00 	vldr	s15, [r3]
 800dda6:	ed97 7a02 	vldr	s14, [r7, #8]
 800ddaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddae:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  float dtwy = dt*gyro->y;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	edd3 7a01 	vldr	s15, [r3, #4]
 800ddb8:	ed97 7a02 	vldr	s14, [r7, #8]
 800ddbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddc0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dtwz = dt*gyro->z;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	edd3 7a02 	vldr	s15, [r3, #8]
 800ddca:	ed97 7a02 	vldr	s14, [r7, #8]
 800ddce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddd2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

  // compute the quaternion values in [w,x,y,z] order
  float angle = arm_sqrt(dtwx*dtwx + dtwy*dtwy + dtwz*dtwz) + EPS;
 800ddd6:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800ddda:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ddde:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800dde2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dde6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ddea:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800ddee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ddf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ddf6:	eeb0 0a67 	vmov.f32	s0, s15
 800ddfa:	f7fe fc03 	bl	800c604 <arm_sqrt>
 800ddfe:	eef0 7a40 	vmov.f32	s15, s0
 800de02:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 800e008 <predictDt+0xd60>
 800de06:	ee77 7a87 	vadd.f32	s15, s15, s14
 800de0a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  float ca = arm_cos_f32(angle/2.0f);
 800de0e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800de12:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800de16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800de1a:	eeb0 0a47 	vmov.f32	s0, s14
 800de1e:	f008 fa1f 	bl	8016260 <arm_cos_f32>
 800de22:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38
  float sa = arm_sin_f32(angle/2.0f);
 800de26:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800de2a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800de2e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800de32:	eeb0 0a47 	vmov.f32	s0, s14
 800de36:	f008 f9cd 	bl	80161d4 <arm_sin_f32>
 800de3a:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  float dq[4] = {ca , sa*dtwx/angle , sa*dtwy/angle , sa*dtwz/angle};
 800de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de40:	61fb      	str	r3, [r7, #28]
 800de42:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800de46:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800de4a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800de4e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800de52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de56:	edc7 7a08 	vstr	s15, [r7, #32]
 800de5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800de5e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800de62:	ee67 6a27 	vmul.f32	s13, s14, s15
 800de66:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800de6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
 800de72:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800de76:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800de7a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800de7e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800de82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800de86:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
  float tmpq1;
  float tmpq2;
  float tmpq3;

  // rotate the quad's attitude by the delta quaternion vector computed above
  tmpq0 = dq[0]*this->q[0] - dq[1]*this->q[1] - dq[2]*this->q[2] - dq[3]*this->q[3];
 800de8a:	ed97 7a07 	vldr	s14, [r7, #28]
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800de94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de98:	edd7 6a08 	vldr	s13, [r7, #32]
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800dea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800deaa:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800deb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800debc:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800dec0:	697b      	ldr	r3, [r7, #20]
 800dec2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800dec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dece:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  tmpq1 = dq[1]*this->q[0] + dq[0]*this->q[1] + dq[3]*this->q[2] - dq[2]*this->q[3];
 800ded2:	ed97 7a08 	vldr	s14, [r7, #32]
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800dedc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dee0:	edd7 6a07 	vldr	s13, [r7, #28]
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800deea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800deee:	ee37 7a27 	vadd.f32	s14, s14, s15
 800def2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800defc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df00:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df04:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800df0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df16:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  tmpq2 = dq[2]*this->q[0] - dq[3]*this->q[1] + dq[0]*this->q[2] + dq[1]*this->q[3];
 800df1a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800df24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df28:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800df32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800df44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df4c:	edd7 6a08 	vldr	s13, [r7, #32]
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800df56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df5e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  tmpq3 = dq[3]*this->q[0] + dq[2]*this->q[1] - dq[1]*this->q[2] + dq[0]*this->q[3];
 800df62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800df6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df70:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800df7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800df82:	edd7 6a08 	vldr	s13, [r7, #32]
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800df8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800df90:	ee37 7a67 	vsub.f32	s14, s14, s15
 800df94:	edd7 6a07 	vldr	s13, [r7, #28]
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800df9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dfa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfa6:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

  if (! quadIsFlying) {
 800dfaa:	79fb      	ldrb	r3, [r7, #7]
 800dfac:	f083 0301 	eor.w	r3, r3, #1
 800dfb0:	b2db      	uxtb	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d04e      	beq.n	800e054 <predictDt+0xdac>
    float keep = 1.0f - ROLLPITCH_ZERO_REVERSION;
 800dfb6:	4b12      	ldr	r3, [pc, #72]	@ (800e000 <predictDt+0xd58>)
 800dfb8:	633b      	str	r3, [r7, #48]	@ 0x30

    tmpq0 = keep * tmpq0 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[0];
 800dfba:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800dfbe:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800dfc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	edd3 7a6a 	vldr	s15, [r3, #424]	@ 0x1a8
 800dfcc:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 800e004 <predictDt+0xd5c>
 800dfd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dfd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dfd8:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
    tmpq1 = keep * tmpq1 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[1];
 800dfdc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800dfe0:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800dfe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	edd3 7a6b 	vldr	s15, [r3, #428]	@ 0x1ac
 800dfee:	eddf 6a05 	vldr	s13, [pc, #20]	@ 800e004 <predictDt+0xd5c>
 800dff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800dff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dffa:	e007      	b.n	800e00c <predictDt+0xd64>
 800dffc:	411cf5c3 	.word	0x411cf5c3
 800e000:	3f7fbe77 	.word	0x3f7fbe77
 800e004:	3a83126f 	.word	0x3a83126f
 800e008:	358637bd 	.word	0x358637bd
 800e00c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    tmpq2 = keep * tmpq2 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[2];
 800e010:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800e014:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800e018:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e01c:	697b      	ldr	r3, [r7, #20]
 800e01e:	edd3 7a6c 	vldr	s15, [r3, #432]	@ 0x1b0
 800e022:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 800e004 <predictDt+0xd5c>
 800e026:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e02e:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
    tmpq3 = keep * tmpq3 + ROLLPITCH_ZERO_REVERSION * this->initialQuaternion[3];
 800e032:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800e036:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800e03a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	edd3 7a6d 	vldr	s15, [r3, #436]	@ 0x1b4
 800e044:	ed5f 6a11 	vldr	s13, [pc, #-68]	@ 800e004 <predictDt+0xd5c>
 800e048:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e04c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e050:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  }

  // normalize and store the result
  float norm = arm_sqrt(tmpq0*tmpq0 + tmpq1*tmpq1 + tmpq2*tmpq2 + tmpq3*tmpq3) + EPS;
 800e054:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800e058:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e05c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800e060:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e064:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e068:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800e06c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e070:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e074:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 800e078:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e07c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e080:	eeb0 0a67 	vmov.f32	s0, s15
 800e084:	f7fe fabe 	bl	800c604 <arm_sqrt>
 800e088:	eef0 7a40 	vmov.f32	s15, s0
 800e08c:	ed1f 7a22 	vldr	s14, [pc, #-136]	@ 800e008 <predictDt+0xd60>
 800e090:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e094:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
  this->q[0] = tmpq0/norm; this->q[1] = tmpq1/norm; this->q[2] = tmpq2/norm; this->q[3] = tmpq3/norm;
 800e098:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 800e09c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e0a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
 800e0aa:	edd7 6a20 	vldr	s13, [r7, #128]	@ 0x80
 800e0ae:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e0b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
 800e0bc:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 800e0c0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
 800e0ce:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 800e0d2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e0d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  assertStateNotNaN(this);
 800e0e0:	6978      	ldr	r0, [r7, #20]
 800e0e2:	f7fe faeb 	bl	800c6bc <assertStateNotNaN>

  this->isUpdated = true;
 800e0e6:	697b      	ldr	r3, [r7, #20]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
}
 800e0ee:	bf00      	nop
 800e0f0:	3788      	adds	r7, #136	@ 0x88
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}
 800e0f6:	bf00      	nop

0800e0f8 <kalmanCorePredict>:

void kalmanCorePredict(kalmanCoreData_t* this, Axis3f *acc, Axis3f *gyro, const uint32_t nowMs, bool quadIsFlying) {
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b086      	sub	sp, #24
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
 800e104:	603b      	str	r3, [r7, #0]
  float dt = (nowMs - this->lastPredictionMs) / 1000.0f;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800e10c:	683a      	ldr	r2, [r7, #0]
 800e10e:	1ad3      	subs	r3, r2, r3
 800e110:	ee07 3a90 	vmov	s15, r3
 800e114:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e118:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800e148 <kalmanCorePredict+0x50>
 800e11c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e120:	edc7 7a05 	vstr	s15, [r7, #20]
  predictDt(this, acc, gyro, dt, quadIsFlying);
 800e124:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e128:	ed97 0a05 	vldr	s0, [r7, #20]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	68b9      	ldr	r1, [r7, #8]
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f7ff f8b9 	bl	800d2a8 <predictDt>
  this->lastPredictionMs = nowMs;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	683a      	ldr	r2, [r7, #0]
 800e13a:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
}
 800e13e:	bf00      	nop
 800e140:	3718      	adds	r7, #24
 800e142:	46bd      	mov	sp, r7
 800e144:	bd80      	pop	{r7, pc}
 800e146:	bf00      	nop
 800e148:	447a0000 	.word	0x447a0000
 800e14c:	00000000 	.word	0x00000000

0800e150 <addProcessNoiseDt>:


static void addProcessNoiseDt(kalmanCoreData_t *this, const kalmanCoreParams_t *params, float dt)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	ed87 0a01 	vstr	s0, [r7, #4]
  this->P[KC_STATE_X][KC_STATE_X] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	ed93 7a05 	vldr	s14, [r3, #20]
 800e164:	edd7 7a01 	vldr	s15, [r7, #4]
 800e168:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e16c:	edd7 7a01 	vldr	s15, [r7, #4]
 800e170:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	edd3 6a07 	vldr	s13, [r3, #28]
 800e17a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e17e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e182:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	edd3 7a08 	vldr	s15, [r3, #32]
 800e18c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e190:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e194:	eeb0 0a67 	vmov.f32	s0, s15
 800e198:	f008 f9be 	bl	8016518 <powf>
 800e19c:	eeb0 7a40 	vmov.f32	s14, s0
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 800e1a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
  this->P[KC_STATE_Y][KC_STATE_Y] += powf(params->procNoiseAcc_xy*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	ed93 7a05 	vldr	s14, [r3, #20]
 800e1b6:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1be:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	edd3 6a07 	vldr	s13, [r3, #28]
 800e1cc:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e1d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	edd3 7a08 	vldr	s15, [r3, #32]
 800e1de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1e2:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e1e6:	eeb0 0a67 	vmov.f32	s0, s15
 800e1ea:	f008 f995 	bl	8016518 <powf>
 800e1ee:	eeb0 7a40 	vmov.f32	s14, s0
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	edd3 7a20 	vldr	s15, [r3, #128]	@ 0x80
 800e1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	edc3 7a20 	vstr	s15, [r3, #128]	@ 0x80
  this->P[KC_STATE_Z][KC_STATE_Z] += powf(params->procNoiseAcc_z*dt*dt + params->procNoiseVel*dt + params->procNoisePos, 2);  // add process noise on position
 800e202:	68bb      	ldr	r3, [r7, #8]
 800e204:	ed93 7a06 	vldr	s14, [r3, #24]
 800e208:	edd7 7a01 	vldr	s15, [r7, #4]
 800e20c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e210:	edd7 7a01 	vldr	s15, [r7, #4]
 800e214:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	edd3 6a07 	vldr	s13, [r3, #28]
 800e21e:	edd7 7a01 	vldr	s15, [r7, #4]
 800e222:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e226:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	edd3 7a08 	vldr	s15, [r3, #32]
 800e230:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e234:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e238:	eeb0 0a67 	vmov.f32	s0, s15
 800e23c:	f008 f96c 	bl	8016518 <powf>
 800e240:	eeb0 7a40 	vmov.f32	s14, s0
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	edd3 7a2a 	vldr	s15, [r3, #168]	@ 0xa8
 800e24a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	edc3 7a2a 	vstr	s15, [r3, #168]	@ 0xa8

  this->P[KC_STATE_PX][KC_STATE_PX] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 800e254:	68bb      	ldr	r3, [r7, #8]
 800e256:	ed93 7a05 	vldr	s14, [r3, #20]
 800e25a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e25e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	edd3 7a07 	vldr	s15, [r3, #28]
 800e268:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e26c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e270:	eeb0 0a67 	vmov.f32	s0, s15
 800e274:	f008 f950 	bl	8016518 <powf>
 800e278:	eeb0 7a40 	vmov.f32	s14, s0
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	edd3 7a34 	vldr	s15, [r3, #208]	@ 0xd0
 800e282:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	edc3 7a34 	vstr	s15, [r3, #208]	@ 0xd0
  this->P[KC_STATE_PY][KC_STATE_PY] += powf(params->procNoiseAcc_xy*dt + params->procNoiseVel, 2); // add process noise on velocity
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	ed93 7a05 	vldr	s14, [r3, #20]
 800e292:	edd7 7a01 	vldr	s15, [r7, #4]
 800e296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	edd3 7a07 	vldr	s15, [r3, #28]
 800e2a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2a4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e2a8:	eeb0 0a67 	vmov.f32	s0, s15
 800e2ac:	f008 f934 	bl	8016518 <powf>
 800e2b0:	eeb0 7a40 	vmov.f32	s14, s0
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	edd3 7a3e 	vldr	s15, [r3, #248]	@ 0xf8
 800e2ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
  this->P[KC_STATE_PZ][KC_STATE_PZ] += powf(params->procNoiseAcc_z*dt + params->procNoiseVel, 2); // add process noise on velocity
 800e2c4:	68bb      	ldr	r3, [r7, #8]
 800e2c6:	ed93 7a06 	vldr	s14, [r3, #24]
 800e2ca:	edd7 7a01 	vldr	s15, [r7, #4]
 800e2ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	edd3 7a07 	vldr	s15, [r3, #28]
 800e2d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2dc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e2e0:	eeb0 0a67 	vmov.f32	s0, s15
 800e2e4:	f008 f918 	bl	8016518 <powf>
 800e2e8:	eeb0 7a40 	vmov.f32	s14, s0
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 800e2f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	edc3 7a48 	vstr	s15, [r3, #288]	@ 0x120

  this->P[KC_STATE_D0][KC_STATE_D0] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 800e2fc:	68bb      	ldr	r3, [r7, #8]
 800e2fe:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800e302:	edd7 7a01 	vldr	s15, [r7, #4]
 800e306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e310:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e314:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e318:	eeb0 0a67 	vmov.f32	s0, s15
 800e31c:	f008 f8fc 	bl	8016518 <powf>
 800e320:	eeb0 7a40 	vmov.f32	s14, s0
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	edd3 7a52 	vldr	s15, [r3, #328]	@ 0x148
 800e32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	edc3 7a52 	vstr	s15, [r3, #328]	@ 0x148
  this->P[KC_STATE_D1][KC_STATE_D1] += powf(params->measNoiseGyro_rollpitch * dt + params->procNoiseAtt, 2);
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800e33a:	edd7 7a01 	vldr	s15, [r7, #4]
 800e33e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e34c:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e350:	eeb0 0a67 	vmov.f32	s0, s15
 800e354:	f008 f8e0 	bl	8016518 <powf>
 800e358:	eeb0 7a40 	vmov.f32	s14, s0
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	edd3 7a5c 	vldr	s15, [r3, #368]	@ 0x170
 800e362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	edc3 7a5c 	vstr	s15, [r3, #368]	@ 0x170
  this->P[KC_STATE_D2][KC_STATE_D2] += powf(params->measNoiseGyro_yaw * dt + params->procNoiseAtt, 2);
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 800e372:	edd7 7a01 	vldr	s15, [r7, #4]
 800e376:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e380:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e384:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800e388:	eeb0 0a67 	vmov.f32	s0, s15
 800e38c:	f008 f8c4 	bl	8016518 <powf>
 800e390:	eeb0 7a40 	vmov.f32	s14, s0
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	edd3 7a66 	vldr	s15, [r3, #408]	@ 0x198
 800e39a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	edc3 7a66 	vstr	s15, [r3, #408]	@ 0x198

  for (int i=0; i<KC_STATE_DIM; i++) {
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	61fb      	str	r3, [r7, #28]
 800e3a8:	e0c2      	b.n	800e530 <addProcessNoiseDt+0x3e0>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	61bb      	str	r3, [r7, #24]
 800e3ae:	e0b8      	b.n	800e522 <addProcessNoiseDt+0x3d2>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800e3b0:	68f9      	ldr	r1, [r7, #12]
 800e3b2:	69fa      	ldr	r2, [r7, #28]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	00db      	lsls	r3, r3, #3
 800e3b8:	4413      	add	r3, r2
 800e3ba:	69ba      	ldr	r2, [r7, #24]
 800e3bc:	4413      	add	r3, r2
 800e3be:	3316      	adds	r3, #22
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	440b      	add	r3, r1
 800e3c4:	edd3 7a00 	vldr	s15, [r3]
 800e3c8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800e3cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e3d0:	68f9      	ldr	r1, [r7, #12]
 800e3d2:	69ba      	ldr	r2, [r7, #24]
 800e3d4:	4613      	mov	r3, r2
 800e3d6:	00db      	lsls	r3, r3, #3
 800e3d8:	4413      	add	r3, r2
 800e3da:	69fa      	ldr	r2, [r7, #28]
 800e3dc:	4413      	add	r3, r2
 800e3de:	3316      	adds	r3, #22
 800e3e0:	009b      	lsls	r3, r3, #2
 800e3e2:	440b      	add	r3, r1
 800e3e4:	edd3 7a00 	vldr	s15, [r3]
 800e3e8:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800e3ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e3f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3f4:	ee17 0a90 	vmov	r0, s15
 800e3f8:	f7f2 f858 	bl	80004ac <__aeabi_f2d>
 800e3fc:	4602      	mov	r2, r0
 800e3fe:	460b      	mov	r3, r1
 800e400:	e9c7 2304 	strd	r2, r3, [r7, #16]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800e404:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e408:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e40c:	f7f2 fb40 	bl	8000a90 <__aeabi_dcmpun>
 800e410:	4603      	mov	r3, r0
 800e412:	2b00      	cmp	r3, #0
 800e414:	d109      	bne.n	800e42a <addProcessNoiseDt+0x2da>
 800e416:	f04f 0200 	mov.w	r2, #0
 800e41a:	4b4d      	ldr	r3, [pc, #308]	@ (800e550 <addProcessNoiseDt+0x400>)
 800e41c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e420:	f7f2 fb2c 	bl	8000a7c <__aeabi_dcmpgt>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d022      	beq.n	800e470 <addProcessNoiseDt+0x320>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800e42a:	68f9      	ldr	r1, [r7, #12]
 800e42c:	69ba      	ldr	r2, [r7, #24]
 800e42e:	4613      	mov	r3, r2
 800e430:	00db      	lsls	r3, r3, #3
 800e432:	4413      	add	r3, r2
 800e434:	69fa      	ldr	r2, [r7, #28]
 800e436:	4413      	add	r3, r2
 800e438:	3316      	adds	r3, #22
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	440b      	add	r3, r1
 800e43e:	4a45      	ldr	r2, [pc, #276]	@ (800e554 <addProcessNoiseDt+0x404>)
 800e440:	601a      	str	r2, [r3, #0]
 800e442:	68f9      	ldr	r1, [r7, #12]
 800e444:	69ba      	ldr	r2, [r7, #24]
 800e446:	4613      	mov	r3, r2
 800e448:	00db      	lsls	r3, r3, #3
 800e44a:	4413      	add	r3, r2
 800e44c:	69fa      	ldr	r2, [r7, #28]
 800e44e:	4413      	add	r3, r2
 800e450:	3316      	adds	r3, #22
 800e452:	009b      	lsls	r3, r3, #2
 800e454:	440b      	add	r3, r1
 800e456:	6819      	ldr	r1, [r3, #0]
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	69fa      	ldr	r2, [r7, #28]
 800e45c:	4613      	mov	r3, r2
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	4413      	add	r3, r2
 800e462:	69ba      	ldr	r2, [r7, #24]
 800e464:	4413      	add	r3, r2
 800e466:	3316      	adds	r3, #22
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	4403      	add	r3, r0
 800e46c:	6019      	str	r1, [r3, #0]
 800e46e:	e055      	b.n	800e51c <addProcessNoiseDt+0x3cc>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800e470:	69fa      	ldr	r2, [r7, #28]
 800e472:	69bb      	ldr	r3, [r7, #24]
 800e474:	429a      	cmp	r2, r3
 800e476:	d12c      	bne.n	800e4d2 <addProcessNoiseDt+0x382>
 800e478:	a333      	add	r3, pc, #204	@ (adr r3, 800e548 <addProcessNoiseDt+0x3f8>)
 800e47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e47e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e482:	f7f2 fadd 	bl	8000a40 <__aeabi_dcmplt>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d022      	beq.n	800e4d2 <addProcessNoiseDt+0x382>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800e48c:	68f9      	ldr	r1, [r7, #12]
 800e48e:	69ba      	ldr	r2, [r7, #24]
 800e490:	4613      	mov	r3, r2
 800e492:	00db      	lsls	r3, r3, #3
 800e494:	4413      	add	r3, r2
 800e496:	69fa      	ldr	r2, [r7, #28]
 800e498:	4413      	add	r3, r2
 800e49a:	3316      	adds	r3, #22
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	440b      	add	r3, r1
 800e4a0:	4a2d      	ldr	r2, [pc, #180]	@ (800e558 <addProcessNoiseDt+0x408>)
 800e4a2:	601a      	str	r2, [r3, #0]
 800e4a4:	68f9      	ldr	r1, [r7, #12]
 800e4a6:	69ba      	ldr	r2, [r7, #24]
 800e4a8:	4613      	mov	r3, r2
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	4413      	add	r3, r2
 800e4ae:	69fa      	ldr	r2, [r7, #28]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	3316      	adds	r3, #22
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	440b      	add	r3, r1
 800e4b8:	6819      	ldr	r1, [r3, #0]
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	69fa      	ldr	r2, [r7, #28]
 800e4be:	4613      	mov	r3, r2
 800e4c0:	00db      	lsls	r3, r3, #3
 800e4c2:	4413      	add	r3, r2
 800e4c4:	69ba      	ldr	r2, [r7, #24]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	3316      	adds	r3, #22
 800e4ca:	009b      	lsls	r3, r3, #2
 800e4cc:	4403      	add	r3, r0
 800e4ce:	6019      	str	r1, [r3, #0]
 800e4d0:	e024      	b.n	800e51c <addProcessNoiseDt+0x3cc>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800e4d2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e4d6:	f7f2 faf1 	bl	8000abc <__aeabi_d2f>
 800e4da:	68f9      	ldr	r1, [r7, #12]
 800e4dc:	69ba      	ldr	r2, [r7, #24]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	00db      	lsls	r3, r3, #3
 800e4e2:	4413      	add	r3, r2
 800e4e4:	69fa      	ldr	r2, [r7, #28]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	3316      	adds	r3, #22
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	440b      	add	r3, r1
 800e4ee:	6018      	str	r0, [r3, #0]
 800e4f0:	68f9      	ldr	r1, [r7, #12]
 800e4f2:	69ba      	ldr	r2, [r7, #24]
 800e4f4:	4613      	mov	r3, r2
 800e4f6:	00db      	lsls	r3, r3, #3
 800e4f8:	4413      	add	r3, r2
 800e4fa:	69fa      	ldr	r2, [r7, #28]
 800e4fc:	4413      	add	r3, r2
 800e4fe:	3316      	adds	r3, #22
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	440b      	add	r3, r1
 800e504:	6819      	ldr	r1, [r3, #0]
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	69fa      	ldr	r2, [r7, #28]
 800e50a:	4613      	mov	r3, r2
 800e50c:	00db      	lsls	r3, r3, #3
 800e50e:	4413      	add	r3, r2
 800e510:	69ba      	ldr	r2, [r7, #24]
 800e512:	4413      	add	r3, r2
 800e514:	3316      	adds	r3, #22
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4403      	add	r3, r0
 800e51a:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800e51c:	69bb      	ldr	r3, [r7, #24]
 800e51e:	3301      	adds	r3, #1
 800e520:	61bb      	str	r3, [r7, #24]
 800e522:	69bb      	ldr	r3, [r7, #24]
 800e524:	2b08      	cmp	r3, #8
 800e526:	f77f af43 	ble.w	800e3b0 <addProcessNoiseDt+0x260>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	3301      	adds	r3, #1
 800e52e:	61fb      	str	r3, [r7, #28]
 800e530:	69fb      	ldr	r3, [r7, #28]
 800e532:	2b08      	cmp	r3, #8
 800e534:	f77f af39 	ble.w	800e3aa <addProcessNoiseDt+0x25a>
      }
    }
  }

  assertStateNotNaN(this);
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f7fe f8bf 	bl	800c6bc <assertStateNotNaN>
}
 800e53e:	bf00      	nop
 800e540:	3720      	adds	r7, #32
 800e542:	46bd      	mov	sp, r7
 800e544:	bd80      	pop	{r7, pc}
 800e546:	bf00      	nop
 800e548:	a0000000 	.word	0xa0000000
 800e54c:	3eb0c6f7 	.word	0x3eb0c6f7
 800e550:	40590000 	.word	0x40590000
 800e554:	42c80000 	.word	0x42c80000
 800e558:	358637bd 	.word	0x358637bd

0800e55c <kalmanCoreAddProcessNoise>:

void kalmanCoreAddProcessNoise(kalmanCoreData_t *this, const kalmanCoreParams_t *params, const uint32_t nowMs) {
 800e55c:	b580      	push	{r7, lr}
 800e55e:	b086      	sub	sp, #24
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	60b9      	str	r1, [r7, #8]
 800e566:	607a      	str	r2, [r7, #4]
  float dt = (nowMs - this->lastProcessNoiseUpdateMs) / 1000.0f;
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800e56e:	687a      	ldr	r2, [r7, #4]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	ee07 3a90 	vmov	s15, r3
 800e576:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e57a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800e5b4 <kalmanCoreAddProcessNoise+0x58>
 800e57e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e582:	edc7 7a05 	vstr	s15, [r7, #20]
  if (dt > 0.0f) {
 800e586:	edd7 7a05 	vldr	s15, [r7, #20]
 800e58a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e592:	dc00      	bgt.n	800e596 <kalmanCoreAddProcessNoise+0x3a>
    addProcessNoiseDt(this, params, dt);
    this->lastProcessNoiseUpdateMs = nowMs;
  }
}
 800e594:	e009      	b.n	800e5aa <kalmanCoreAddProcessNoise+0x4e>
    addProcessNoiseDt(this, params, dt);
 800e596:	ed97 0a05 	vldr	s0, [r7, #20]
 800e59a:	68b9      	ldr	r1, [r7, #8]
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff fdd7 	bl	800e150 <addProcessNoiseDt>
    this->lastProcessNoiseUpdateMs = nowMs;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	687a      	ldr	r2, [r7, #4]
 800e5a6:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
}
 800e5aa:	bf00      	nop
 800e5ac:	3718      	adds	r7, #24
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop
 800e5b4:	447a0000 	.word	0x447a0000

0800e5b8 <kalmanCoreFinalize>:
float v0;
float v1;
float v2;
bool kalmanCoreFinalize(kalmanCoreData_t* this)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b096      	sub	sp, #88	@ 0x58
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  // Only finalize if data is updated
  if (! this->isUpdated) {
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800e5c6:	f083 0301 	eor.w	r3, r3, #1
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d002      	beq.n	800e5d6 <kalmanCoreFinalize+0x1e>
    return false;
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f000 bc98 	b.w	800ef06 <kalmanCoreFinalize+0x94e>

  NO_DMA_CCM_SAFE_ZERO_INIT static float tmpNN2d[KC_STATE_DIM * KC_STATE_DIM];
  static arm_matrix_instance_f32 tmpNN2m = {KC_STATE_DIM, KC_STATE_DIM, tmpNN2d};

  // Incorporate the attitude error (Kalman filter state) with the attitude
  v0 = this->S[KC_STATE_D0];
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	699b      	ldr	r3, [r3, #24]
 800e5da:	4ade      	ldr	r2, [pc, #888]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e5dc:	6013      	str	r3, [r2, #0]
  v1 = this->S[KC_STATE_D1];
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	69db      	ldr	r3, [r3, #28]
 800e5e2:	4add      	ldr	r2, [pc, #884]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e5e4:	6013      	str	r3, [r2, #0]
  v2 = this->S[KC_STATE_D2];
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a1b      	ldr	r3, [r3, #32]
 800e5ea:	4adc      	ldr	r2, [pc, #880]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e5ec:	6013      	str	r3, [r2, #0]

  // Move attitude error into attitude if any of the angle errors are large enough
  if ((fabsf(v0) > 0.1e-3f || fabsf(v1) > 0.1e-3f || fabsf(v2) > 0.1e-3f) && (fabsf(v0) < 10 && fabsf(v1) < 10 && fabsf(v2) < 10))
 800e5ee:	4bd9      	ldr	r3, [pc, #868]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e5f0:	edd3 7a00 	vldr	s15, [r3]
 800e5f4:	eef0 7ae7 	vabs.f32	s15, s15
 800e5f8:	ed9f 7ad9 	vldr	s14, [pc, #868]	@ 800e960 <kalmanCoreFinalize+0x3a8>
 800e5fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e604:	dc18      	bgt.n	800e638 <kalmanCoreFinalize+0x80>
 800e606:	4bd4      	ldr	r3, [pc, #848]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e608:	edd3 7a00 	vldr	s15, [r3]
 800e60c:	eef0 7ae7 	vabs.f32	s15, s15
 800e610:	ed9f 7ad3 	vldr	s14, [pc, #844]	@ 800e960 <kalmanCoreFinalize+0x3a8>
 800e614:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61c:	dc0c      	bgt.n	800e638 <kalmanCoreFinalize+0x80>
 800e61e:	4bcf      	ldr	r3, [pc, #828]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e620:	edd3 7a00 	vldr	s15, [r3]
 800e624:	eef0 7ae7 	vabs.f32	s15, s15
 800e628:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 800e960 <kalmanCoreFinalize+0x3a8>
 800e62c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e634:	f340 8278 	ble.w	800eb28 <kalmanCoreFinalize+0x570>
 800e638:	4bc6      	ldr	r3, [pc, #792]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e63a:	edd3 7a00 	vldr	s15, [r3]
 800e63e:	eef0 7ae7 	vabs.f32	s15, s15
 800e642:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64e:	f140 826b 	bpl.w	800eb28 <kalmanCoreFinalize+0x570>
 800e652:	4bc1      	ldr	r3, [pc, #772]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e654:	edd3 7a00 	vldr	s15, [r3]
 800e658:	eef0 7ae7 	vabs.f32	s15, s15
 800e65c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e660:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e668:	f140 825e 	bpl.w	800eb28 <kalmanCoreFinalize+0x570>
 800e66c:	4bbb      	ldr	r3, [pc, #748]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e66e:	edd3 7a00 	vldr	s15, [r3]
 800e672:	eef0 7ae7 	vabs.f32	s15, s15
 800e676:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800e67a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e67e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e682:	f140 8251 	bpl.w	800eb28 <kalmanCoreFinalize+0x570>
  {
    float angle = arm_sqrt(v0*v0 + v1*v1 + v2*v2) + EPS;
 800e686:	4bb3      	ldr	r3, [pc, #716]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e688:	ed93 7a00 	vldr	s14, [r3]
 800e68c:	4bb1      	ldr	r3, [pc, #708]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e68e:	edd3 7a00 	vldr	s15, [r3]
 800e692:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e696:	4bb0      	ldr	r3, [pc, #704]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e698:	edd3 6a00 	vldr	s13, [r3]
 800e69c:	4bae      	ldr	r3, [pc, #696]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e69e:	edd3 7a00 	vldr	s15, [r3]
 800e6a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e6aa:	4bac      	ldr	r3, [pc, #688]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e6ac:	edd3 6a00 	vldr	s13, [r3]
 800e6b0:	4baa      	ldr	r3, [pc, #680]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e6b2:	edd3 7a00 	vldr	s15, [r3]
 800e6b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6be:	eeb0 0a67 	vmov.f32	s0, s15
 800e6c2:	f7fd ff9f 	bl	800c604 <arm_sqrt>
 800e6c6:	eef0 7a40 	vmov.f32	s15, s0
 800e6ca:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 800e964 <kalmanCoreFinalize+0x3ac>
 800e6ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e6d2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    float ca = arm_cos_f32(angle / 2.0f);
 800e6d6:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e6da:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e6de:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e6e2:	eeb0 0a47 	vmov.f32	s0, s14
 800e6e6:	f007 fdbb 	bl	8016260 <arm_cos_f32>
 800e6ea:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
    float sa = arm_sin_f32(angle / 2.0f);
 800e6ee:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800e6f2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e6f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e6fa:	eeb0 0a47 	vmov.f32	s0, s14
 800e6fe:	f007 fd69 	bl	80161d4 <arm_sin_f32>
 800e702:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    float dq[4] = {ca, sa * v0 / angle, sa * v1 / angle, sa * v2 / angle};
 800e706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e708:	60bb      	str	r3, [r7, #8]
 800e70a:	4b92      	ldr	r3, [pc, #584]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e70c:	ed93 7a00 	vldr	s14, [r3]
 800e710:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e714:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e718:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800e71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e720:	edc7 7a03 	vstr	s15, [r7, #12]
 800e724:	4b8c      	ldr	r3, [pc, #560]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e726:	ed93 7a00 	vldr	s14, [r3]
 800e72a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e72e:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e732:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800e736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e73a:	edc7 7a04 	vstr	s15, [r7, #16]
 800e73e:	4b87      	ldr	r3, [pc, #540]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e740:	ed93 7a00 	vldr	s14, [r3]
 800e744:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800e748:	ee67 6a27 	vmul.f32	s13, s14, s15
 800e74c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800e750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e754:	edc7 7a05 	vstr	s15, [r7, #20]

    // rotate the quad's attitude by the delta quaternion vector computed above
    float tmpq0 = dq[0] * this->q[0] - dq[1] * this->q[1] - dq[2] * this->q[2] - dq[3] * this->q[3];
 800e758:	ed97 7a02 	vldr	s14, [r7, #8]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e762:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e766:	edd7 6a03 	vldr	s13, [r7, #12]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e774:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e778:	edd7 6a04 	vldr	s13, [r7, #16]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e782:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e786:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e78a:	edd7 6a05 	vldr	s13, [r7, #20]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800e794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e79c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    float tmpq1 = dq[1] * this->q[0] + dq[0] * this->q[1] + dq[3] * this->q[2] - dq[2] * this->q[3];
 800e7a0:	ed97 7a03 	vldr	s14, [r7, #12]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7ae:	edd7 6a02 	vldr	s13, [r7, #8]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e7b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7c0:	edd7 6a05 	vldr	s13, [r7, #20]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e7ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e7d2:	edd7 6a04 	vldr	s13, [r7, #16]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800e7dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e7e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e7e4:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float tmpq2 = dq[2] * this->q[0] - dq[3] * this->q[1] + dq[0] * this->q[2] + dq[1] * this->q[3];
 800e7e8:	ed97 7a04 	vldr	s14, [r7, #16]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e7f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e7f6:	edd7 6a05 	vldr	s13, [r7, #20]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e800:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e804:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e808:	edd7 6a02 	vldr	s13, [r7, #8]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e81a:	edd7 6a03 	vldr	s13, [r7, #12]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800e824:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e82c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float tmpq3 = dq[3] * this->q[0] + dq[2] * this->q[1] - dq[1] * this->q[2] + dq[0] * this->q[3];
 800e830:	ed97 7a05 	vldr	s14, [r7, #20]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800e83a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e83e:	edd7 6a04 	vldr	s13, [r7, #16]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800e848:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e84c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e850:	edd7 6a03 	vldr	s13, [r7, #12]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800e85a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e85e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e862:	edd7 6a02 	vldr	s13, [r7, #8]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800e86c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e870:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e874:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    // normalize and store the result
    float norm = arm_sqrt(tmpq0 * tmpq0 + tmpq1 * tmpq1 + tmpq2 * tmpq2 + tmpq3 * tmpq3) + EPS;
 800e878:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800e87c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e880:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800e884:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e88c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800e890:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e894:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e898:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800e89c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e8a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e8a4:	eeb0 0a67 	vmov.f32	s0, s15
 800e8a8:	f7fd feac 	bl	800c604 <arm_sqrt>
 800e8ac:	eef0 7a40 	vmov.f32	s15, s0
 800e8b0:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800e964 <kalmanCoreFinalize+0x3ac>
 800e8b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e8b8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    this->q[0] = tmpq0 / norm;
 800e8bc:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800e8c0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800e8c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    this->q[1] = tmpq1 / norm;
 800e8ce:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800e8d2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800e8d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    this->q[2] = tmpq2 / norm;
 800e8e0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800e8e4:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800e8e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    this->q[3] = tmpq3 / norm;
 800e8f2:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800e8f6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800e8fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
     *
     * As derived in "Covariance Correction Step for Kalman Filtering with an Attitude"
     * http://arc.aiaa.org/doi/abs/10.2514/1.G000848
     */

    float d0 = v0/2; // the attitude error vector (v0,v1,v2) is small,
 800e904:	4b13      	ldr	r3, [pc, #76]	@ (800e954 <kalmanCoreFinalize+0x39c>)
 800e906:	ed93 7a00 	vldr	s14, [r3]
 800e90a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e90e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e912:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float d1 = v1/2; // so we use a first order approximation to d0 = tan(|v0|/2)*v0/|v0|
 800e916:	4b10      	ldr	r3, [pc, #64]	@ (800e958 <kalmanCoreFinalize+0x3a0>)
 800e918:	ed93 7a00 	vldr	s14, [r3]
 800e91c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e924:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    float d2 = v2/2;
 800e928:	4b0c      	ldr	r3, [pc, #48]	@ (800e95c <kalmanCoreFinalize+0x3a4>)
 800e92a:	ed93 7a00 	vldr	s14, [r3]
 800e92e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e936:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    A[KC_STATE_X][KC_STATE_X] = 1;
 800e93a:	4b0b      	ldr	r3, [pc, #44]	@ (800e968 <kalmanCoreFinalize+0x3b0>)
 800e93c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e940:	601a      	str	r2, [r3, #0]
    A[KC_STATE_Y][KC_STATE_Y] = 1;
 800e942:	4b09      	ldr	r3, [pc, #36]	@ (800e968 <kalmanCoreFinalize+0x3b0>)
 800e944:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e948:	629a      	str	r2, [r3, #40]	@ 0x28
    A[KC_STATE_Z][KC_STATE_Z] = 1;
 800e94a:	4b07      	ldr	r3, [pc, #28]	@ (800e968 <kalmanCoreFinalize+0x3b0>)
 800e94c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e950:	e00c      	b.n	800e96c <kalmanCoreFinalize+0x3b4>
 800e952:	bf00      	nop
 800e954:	200093f4 	.word	0x200093f4
 800e958:	200093f8 	.word	0x200093f8
 800e95c:	200093fc 	.word	0x200093fc
 800e960:	38d1b717 	.word	0x38d1b717
 800e964:	358637bd 	.word	0x358637bd
 800e968:	10004300 	.word	0x10004300
 800e96c:	651a      	str	r2, [r3, #80]	@ 0x50

    A[KC_STATE_PX][KC_STATE_PX] = 1;
 800e96e:	4b6a      	ldr	r3, [pc, #424]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800e970:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e974:	679a      	str	r2, [r3, #120]	@ 0x78
    A[KC_STATE_PY][KC_STATE_PY] = 1;
 800e976:	4b68      	ldr	r3, [pc, #416]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800e978:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e97c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    A[KC_STATE_PZ][KC_STATE_PZ] = 1;
 800e980:	4b65      	ldr	r3, [pc, #404]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800e982:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800e986:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

    A[KC_STATE_D0][KC_STATE_D0] =  1 - d1*d1/2 - d2*d2/2;
 800e98a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e98e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800e992:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e996:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e99a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e99e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800e9a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e9a6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800e9aa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800e9ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800e9b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9b6:	4b58      	ldr	r3, [pc, #352]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800e9b8:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
    A[KC_STATE_D0][KC_STATE_D1] =  d2 + d0*d1/2;
 800e9bc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e9c0:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e9c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9c8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e9cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e9d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e9d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9d8:	4b4f      	ldr	r3, [pc, #316]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800e9da:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    A[KC_STATE_D0][KC_STATE_D2] = -d1 + d0*d2/2;
 800e9de:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800e9e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800e9e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e9ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800e9ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800e9f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800e9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9fa:	4b47      	ldr	r3, [pc, #284]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800e9fc:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8

    A[KC_STATE_D1][KC_STATE_D0] = -d2 + d0*d1/2;
 800ea00:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ea04:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ea08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea0c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ea10:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ea14:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ea18:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea1c:	4b3e      	ldr	r3, [pc, #248]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800ea1e:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
    A[KC_STATE_D1][KC_STATE_D1] =  1 - d0*d0/2 - d2*d2/2;
 800ea22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ea26:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800ea2a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ea2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ea32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ea36:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ea3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ea3e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ea42:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800ea46:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800ea4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ea4e:	4b32      	ldr	r3, [pc, #200]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800ea50:	edc3 7a46 	vstr	s15, [r3, #280]	@ 0x118
    A[KC_STATE_D1][KC_STATE_D2] =  d0 + d1*d2/2;
 800ea54:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ea58:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ea5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ea64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ea68:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800ea6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea70:	4b29      	ldr	r3, [pc, #164]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800ea72:	edc3 7a47 	vstr	s15, [r3, #284]	@ 0x11c

    A[KC_STATE_D2][KC_STATE_D0] =  d1 + d0*d2/2;
 800ea76:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800ea7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800ea7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ea82:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800ea86:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ea8a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ea8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ea92:	4b21      	ldr	r3, [pc, #132]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800ea94:	edc3 7a4e 	vstr	s15, [r3, #312]	@ 0x138
    A[KC_STATE_D2][KC_STATE_D1] = -d0 + d1*d2/2;
 800ea98:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800ea9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800eaa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eaa4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eaa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800eaac:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800eab0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eab4:	4b18      	ldr	r3, [pc, #96]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800eab6:	edc3 7a4f 	vstr	s15, [r3, #316]	@ 0x13c
    A[KC_STATE_D2][KC_STATE_D2] = 1 - d0*d0/2 - d1*d1/2;
 800eaba:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800eabe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800eac2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800eac6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800eaca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800eace:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ead2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800ead6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800eada:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800eade:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800eae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eae6:	4b0c      	ldr	r3, [pc, #48]	@ (800eb18 <kalmanCoreFinalize+0x560>)
 800eae8:	edc3 7a50 	vstr	s15, [r3, #320]	@ 0x140

    mat_trans(&Am, &tmpNN1m); // A'
 800eaec:	490b      	ldr	r1, [pc, #44]	@ (800eb1c <kalmanCoreFinalize+0x564>)
 800eaee:	480c      	ldr	r0, [pc, #48]	@ (800eb20 <kalmanCoreFinalize+0x568>)
 800eaf0:	f7fd fd3e 	bl	800c570 <mat_trans>
    mat_mult(&Am, &this->Pm, &tmpNN2m); // AP
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800eafa:	4a0a      	ldr	r2, [pc, #40]	@ (800eb24 <kalmanCoreFinalize+0x56c>)
 800eafc:	4619      	mov	r1, r3
 800eafe:	4808      	ldr	r0, [pc, #32]	@ (800eb20 <kalmanCoreFinalize+0x568>)
 800eb00:	f7fd fd58 	bl	800c5b4 <mat_mult>
    mat_mult(&tmpNN2m, &tmpNN1m, &this->Pm); //APA'
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	4903      	ldr	r1, [pc, #12]	@ (800eb1c <kalmanCoreFinalize+0x564>)
 800eb0e:	4805      	ldr	r0, [pc, #20]	@ (800eb24 <kalmanCoreFinalize+0x56c>)
 800eb10:	f7fd fd50 	bl	800c5b4 <mat_mult>
 800eb14:	e008      	b.n	800eb28 <kalmanCoreFinalize+0x570>
 800eb16:	bf00      	nop
 800eb18:	10004300 	.word	0x10004300
 800eb1c:	200000d0 	.word	0x200000d0
 800eb20:	200000c8 	.word	0x200000c8
 800eb24:	200000d8 	.word	0x200000d8
  }

  // convert the new attitude to a rotation matrix, such that we can rotate body-frame velocity and acc
  this->R[0][0] = this->q[0] * this->q[0] + this->q[1] * this->q[1] - this->q[2] * this->q[2] - this->q[3] * this->q[3];
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eb34:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800eb44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb48:	ee37 7a27 	vadd.f32	s14, s14, s15
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800eb58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800eb6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
  this->R[0][1] = 2 * this->q[1] * this->q[2] - 2 * this->q[0] * this->q[3];
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800eb80:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800eb8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800eb94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800eb9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
  this->R[0][2] = 2 * this->q[1] * this->q[3] + 2 * this->q[0] * this->q[2];
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ebb2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ebbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ebc6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ebd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ebd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  this->R[1][0] = 2 * this->q[1] * this->q[2] + 2 * this->q[0] * this->q[3];
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ebe4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ebee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ebf8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ec02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
  this->R[1][1] = this->q[0] * this->q[0] - this->q[1] * this->q[1] + this->q[2] * this->q[2] - this->q[3] * this->q[3];
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ec1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ec2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ec40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec44:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ec54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
  this->R[1][2] = 2 * this->q[2] * this->q[3] - 2 * this->q[0] * this->q[1];
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ec68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ec72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ec7c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ec86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48

  this->R[2][0] = 2 * this->q[1] * this->q[3] - 2 * this->q[0] * this->q[2];
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ec9a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800eca4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ecae:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ecb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  this->R[2][1] = 2 * this->q[2] * this->q[3] + 2 * this->q[0] * this->q[1];
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800eccc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ecd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ece0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ecea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
  this->R[2][2] = this->q[0] * this->q[0] - this->q[1] * this->q[1] - this->q[2] * this->q[2] + this->q[3] * this->q[3];
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800ed04:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800ed14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed18:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800ed28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800ed3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	edc3 7a15 	vstr	s15, [r3, #84]	@ 0x54

  // reset the attitude error
  this->S[KC_STATE_D0] = 0;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f04f 0200 	mov.w	r2, #0
 800ed50:	619a      	str	r2, [r3, #24]
  this->S[KC_STATE_D1] = 0;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	f04f 0200 	mov.w	r2, #0
 800ed58:	61da      	str	r2, [r3, #28]
  this->S[KC_STATE_D2] = 0;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f04f 0200 	mov.w	r2, #0
 800ed60:	621a      	str	r2, [r3, #32]

  // enforce symmetry of the covariance matrix, and ensure the values stay bounded
  for (int i=0; i<KC_STATE_DIM; i++) {
 800ed62:	2300      	movs	r3, #0
 800ed64:	657b      	str	r3, [r7, #84]	@ 0x54
 800ed66:	e0c2      	b.n	800eeee <kalmanCoreFinalize+0x936>
    for (int j=i; j<KC_STATE_DIM; j++) {
 800ed68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ed6c:	e0b8      	b.n	800eee0 <kalmanCoreFinalize+0x928>
      double p = 0.5f*this->P[i][j] + 0.5f*this->P[j][i];
 800ed6e:	6879      	ldr	r1, [r7, #4]
 800ed70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed72:	4613      	mov	r3, r2
 800ed74:	00db      	lsls	r3, r3, #3
 800ed76:	4413      	add	r3, r2
 800ed78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed7a:	4413      	add	r3, r2
 800ed7c:	3316      	adds	r3, #22
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	440b      	add	r3, r1
 800ed82:	edd3 7a00 	vldr	s15, [r3]
 800ed86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800ed8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ed8e:	6879      	ldr	r1, [r7, #4]
 800ed90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ed92:	4613      	mov	r3, r2
 800ed94:	00db      	lsls	r3, r3, #3
 800ed96:	4413      	add	r3, r2
 800ed98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ed9a:	4413      	add	r3, r2
 800ed9c:	3316      	adds	r3, #22
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	440b      	add	r3, r1
 800eda2:	edd3 7a00 	vldr	s15, [r3]
 800eda6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800edaa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800edae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edb2:	ee17 0a90 	vmov	r0, s15
 800edb6:	f7f1 fb79 	bl	80004ac <__aeabi_f2d>
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	e9c7 2306 	strd	r2, r3, [r7, #24]
      if (isnan(p) || p > MAX_COVARIANCE) {
 800edc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800edc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edca:	f7f1 fe61 	bl	8000a90 <__aeabi_dcmpun>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d109      	bne.n	800ede8 <kalmanCoreFinalize+0x830>
 800edd4:	f04f 0200 	mov.w	r2, #0
 800edd8:	4b4f      	ldr	r3, [pc, #316]	@ (800ef18 <kalmanCoreFinalize+0x960>)
 800edda:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800edde:	f7f1 fe4d 	bl	8000a7c <__aeabi_dcmpgt>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d022      	beq.n	800ee2e <kalmanCoreFinalize+0x876>
        this->P[i][j] = this->P[j][i] = MAX_COVARIANCE;
 800ede8:	6879      	ldr	r1, [r7, #4]
 800edea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800edec:	4613      	mov	r3, r2
 800edee:	00db      	lsls	r3, r3, #3
 800edf0:	4413      	add	r3, r2
 800edf2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800edf4:	4413      	add	r3, r2
 800edf6:	3316      	adds	r3, #22
 800edf8:	009b      	lsls	r3, r3, #2
 800edfa:	440b      	add	r3, r1
 800edfc:	4a47      	ldr	r2, [pc, #284]	@ (800ef1c <kalmanCoreFinalize+0x964>)
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	6879      	ldr	r1, [r7, #4]
 800ee02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee04:	4613      	mov	r3, r2
 800ee06:	00db      	lsls	r3, r3, #3
 800ee08:	4413      	add	r3, r2
 800ee0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee0c:	4413      	add	r3, r2
 800ee0e:	3316      	adds	r3, #22
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	440b      	add	r3, r1
 800ee14:	6819      	ldr	r1, [r3, #0]
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	4413      	add	r3, r2
 800ee20:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee22:	4413      	add	r3, r2
 800ee24:	3316      	adds	r3, #22
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4403      	add	r3, r0
 800ee2a:	6019      	str	r1, [r3, #0]
 800ee2c:	e055      	b.n	800eeda <kalmanCoreFinalize+0x922>
      } else if ( i==j && p < MIN_COVARIANCE ) {
 800ee2e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d12c      	bne.n	800ee90 <kalmanCoreFinalize+0x8d8>
 800ee36:	a336      	add	r3, pc, #216	@ (adr r3, 800ef10 <kalmanCoreFinalize+0x958>)
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ee40:	f7f1 fdfe 	bl	8000a40 <__aeabi_dcmplt>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d022      	beq.n	800ee90 <kalmanCoreFinalize+0x8d8>
        this->P[i][j] = this->P[j][i] = MIN_COVARIANCE;
 800ee4a:	6879      	ldr	r1, [r7, #4]
 800ee4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee4e:	4613      	mov	r3, r2
 800ee50:	00db      	lsls	r3, r3, #3
 800ee52:	4413      	add	r3, r2
 800ee54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee56:	4413      	add	r3, r2
 800ee58:	3316      	adds	r3, #22
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	440b      	add	r3, r1
 800ee5e:	4a30      	ldr	r2, [pc, #192]	@ (800ef20 <kalmanCoreFinalize+0x968>)
 800ee60:	601a      	str	r2, [r3, #0]
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee66:	4613      	mov	r3, r2
 800ee68:	00db      	lsls	r3, r3, #3
 800ee6a:	4413      	add	r3, r2
 800ee6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee6e:	4413      	add	r3, r2
 800ee70:	3316      	adds	r3, #22
 800ee72:	009b      	lsls	r3, r3, #2
 800ee74:	440b      	add	r3, r1
 800ee76:	6819      	ldr	r1, [r3, #0]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	00db      	lsls	r3, r3, #3
 800ee80:	4413      	add	r3, r2
 800ee82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee84:	4413      	add	r3, r2
 800ee86:	3316      	adds	r3, #22
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4403      	add	r3, r0
 800ee8c:	6019      	str	r1, [r3, #0]
 800ee8e:	e024      	b.n	800eeda <kalmanCoreFinalize+0x922>
      } else {
        this->P[i][j] = this->P[j][i] = p;
 800ee90:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ee94:	f7f1 fe12 	bl	8000abc <__aeabi_d2f>
 800ee98:	6879      	ldr	r1, [r7, #4]
 800ee9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ee9c:	4613      	mov	r3, r2
 800ee9e:	00db      	lsls	r3, r3, #3
 800eea0:	4413      	add	r3, r2
 800eea2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eea4:	4413      	add	r3, r2
 800eea6:	3316      	adds	r3, #22
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	440b      	add	r3, r1
 800eeac:	6018      	str	r0, [r3, #0]
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eeb2:	4613      	mov	r3, r2
 800eeb4:	00db      	lsls	r3, r3, #3
 800eeb6:	4413      	add	r3, r2
 800eeb8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eeba:	4413      	add	r3, r2
 800eebc:	3316      	adds	r3, #22
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	440b      	add	r3, r1
 800eec2:	6819      	ldr	r1, [r3, #0]
 800eec4:	6878      	ldr	r0, [r7, #4]
 800eec6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800eec8:	4613      	mov	r3, r2
 800eeca:	00db      	lsls	r3, r3, #3
 800eecc:	4413      	add	r3, r2
 800eece:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800eed0:	4413      	add	r3, r2
 800eed2:	3316      	adds	r3, #22
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	4403      	add	r3, r0
 800eed8:	6019      	str	r1, [r3, #0]
    for (int j=i; j<KC_STATE_DIM; j++) {
 800eeda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eedc:	3301      	adds	r3, #1
 800eede:	653b      	str	r3, [r7, #80]	@ 0x50
 800eee0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800eee2:	2b08      	cmp	r3, #8
 800eee4:	f77f af43 	ble.w	800ed6e <kalmanCoreFinalize+0x7b6>
  for (int i=0; i<KC_STATE_DIM; i++) {
 800eee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eeea:	3301      	adds	r3, #1
 800eeec:	657b      	str	r3, [r7, #84]	@ 0x54
 800eeee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eef0:	2b08      	cmp	r3, #8
 800eef2:	f77f af39 	ble.w	800ed68 <kalmanCoreFinalize+0x7b0>
      }
    }
  }

  assertStateNotNaN(this);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7fd fbe0 	bl	800c6bc <assertStateNotNaN>

  this->isUpdated = false;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2200      	movs	r2, #0
 800ef00:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
  return true;
 800ef04:	2301      	movs	r3, #1
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3758      	adds	r7, #88	@ 0x58
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	a0000000 	.word	0xa0000000
 800ef14:	3eb0c6f7 	.word	0x3eb0c6f7
 800ef18:	40590000 	.word	0x40590000
 800ef1c:	42c80000 	.word	0x42c80000
 800ef20:	358637bd 	.word	0x358637bd

0800ef24 <kalmanCoreExternalizeState>:

void kalmanCoreExternalizeState(const kalmanCoreData_t* this, state_t *state, const Axis3f *acc)
{
 800ef24:	b590      	push	{r4, r7, lr}
 800ef26:	b09d      	sub	sp, #116	@ 0x74
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
  // position state is already in world frame
  state->position = (point_t){
      .x = this->S[KC_STATE_X],
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681c      	ldr	r4, [r3, #0]
      .y = this->S[KC_STATE_Y],
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	6858      	ldr	r0, [r3, #4]
      .z = this->S[KC_STATE_Z]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6899      	ldr	r1, [r3, #8]
  state->position = (point_t){
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	3320      	adds	r3, #32
 800ef40:	2200      	movs	r2, #0
 800ef42:	601a      	str	r2, [r3, #0]
 800ef44:	605a      	str	r2, [r3, #4]
 800ef46:	609a      	str	r2, [r3, #8]
 800ef48:	60da      	str	r2, [r3, #12]
 800ef4a:	68bb      	ldr	r3, [r7, #8]
 800ef4c:	625c      	str	r4, [r3, #36]	@ 0x24
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	6298      	str	r0, [r3, #40]	@ 0x28
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	62d9      	str	r1, [r3, #44]	@ 0x2c
  };

  // velocity is in body frame and needs to be rotated to world frame
  state->velocity = (velocity_t){
      .x = this->R[0][0]*this->S[KC_STATE_PX] + this->R[0][1]*this->S[KC_STATE_PY] + this->R[0][2]*this->S[KC_STATE_PZ],
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	edd3 7a03 	vldr	s15, [r3, #12]
 800ef62:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	edd3 7a04 	vldr	s15, [r3, #16]
 800ef72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef76:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ef8a:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*this->S[KC_STATE_PX] + this->R[1][1]*this->S[KC_STATE_PY] + this->R[1][2]*this->S[KC_STATE_PZ],
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	edd3 7a03 	vldr	s15, [r3, #12]
 800ef9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	edd3 7a04 	vldr	s15, [r3, #16]
 800efaa:	ee66 7a27 	vmul.f32	s15, s12, s15
 800efae:	ee37 7a27 	vadd.f32	s14, s14, s15
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	edd3 7a05 	vldr	s15, [r3, #20]
 800efbe:	ee66 7a27 	vmul.f32	s15, s12, s15
 800efc2:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*this->S[KC_STATE_PX] + this->R[2][1]*this->S[KC_STATE_PY] + this->R[2][2]*this->S[KC_STATE_PZ]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	edd3 7a03 	vldr	s15, [r3, #12]
 800efd2:	ee26 6a27 	vmul.f32	s12, s12, s15
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	edd3 7a04 	vldr	s15, [r3, #16]
 800efe2:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800efe6:	ee36 6a27 	vadd.f32	s12, s12, s15
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	edd3 7a05 	vldr	s15, [r3, #20]
 800eff6:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800effa:	ee76 7a27 	vadd.f32	s15, s12, s15
  state->velocity = (velocity_t){
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	3330      	adds	r3, #48	@ 0x30
 800f002:	2200      	movs	r2, #0
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	605a      	str	r2, [r3, #4]
 800f008:	609a      	str	r2, [r3, #8]
 800f00a:	60da      	str	r2, [r3, #12]
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	edc3 6a0d 	vstr	s13, [r3, #52]	@ 0x34
 800f012:	68bb      	ldr	r3, [r7, #8]
 800f014:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

  // Accelerometer measurements are in the body frame and need to be rotated to world frame.
  // Furthermore, the legacy code requires acc.z to be acceleration without gravity.
  // Finally, note that these accelerations are in Gs, and not in m/s^2, hence - 1 for removing gravity
  state->acc = (acc_t){
      .x = this->R[0][0]*acc->x + this->R[0][1]*acc->y + this->R[0][2]*acc->z,
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	edd3 7a00 	vldr	s15, [r3]
 800f02a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	edd3 6a0e 	vldr	s13, [r3, #56]	@ 0x38
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	edd3 7a01 	vldr	s15, [r3, #4]
 800f03a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f03e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	edd3 7a02 	vldr	s15, [r3, #8]
 800f04e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f052:	ee77 6a27 	vadd.f32	s13, s14, s15
      .y = this->R[1][0]*acc->x + this->R[1][1]*acc->y + this->R[1][2]*acc->z,
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	edd3 7a00 	vldr	s15, [r3]
 800f062:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	ed93 6a11 	vldr	s12, [r3, #68]	@ 0x44
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	edd3 7a01 	vldr	s15, [r3, #4]
 800f072:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f076:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	ed93 6a12 	vldr	s12, [r3, #72]	@ 0x48
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	edd3 7a02 	vldr	s15, [r3, #8]
 800f086:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f08a:	ee37 7a27 	vadd.f32	s14, s14, s15
      .z = this->R[2][0]*acc->x + this->R[2][1]*acc->y + this->R[2][2]*acc->z - 1
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	ed93 6a13 	vldr	s12, [r3, #76]	@ 0x4c
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	edd3 7a00 	vldr	s15, [r3]
 800f09a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	edd3 5a14 	vldr	s11, [r3, #80]	@ 0x50
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f0aa:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800f0ae:	ee36 6a27 	vadd.f32	s12, s12, s15
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	edd3 5a15 	vldr	s11, [r3, #84]	@ 0x54
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	edd3 7a02 	vldr	s15, [r3, #8]
 800f0be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800f0c2:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f0c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800f0ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
  state->acc = (acc_t){
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	3340      	adds	r3, #64	@ 0x40
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	605a      	str	r2, [r3, #4]
 800f0d8:	609a      	str	r2, [r3, #8]
 800f0da:	60da      	str	r2, [r3, #12]
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	edc3 6a11 	vstr	s13, [r3, #68]	@ 0x44
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	ed83 7a12 	vstr	s14, [r3, #72]	@ 0x48
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
  };

  // convert the new attitude into Euler YPR
  float yaw = atan2f(2*(this->q[1]*this->q[2]+this->q[0]*this->q[3]) , this->q[0]*this->q[0] + this->q[1]*this->q[1] - this->q[2]*this->q[2] - this->q[3]*this->q[3]);
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f0fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f10a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f10e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f112:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f122:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f132:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f146:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f14a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f15a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f162:	eef0 0a67 	vmov.f32	s1, s15
 800f166:	eeb0 0a46 	vmov.f32	s0, s12
 800f16a:	f007 f96f 	bl	801644c <atan2f>
 800f16e:	ed87 0a1b 	vstr	s0, [r7, #108]	@ 0x6c
  float pitch = asinf(-2*(this->q[1]*this->q[3] - this->q[0]*this->q[2]));
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f17e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f18e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f192:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f196:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800f19a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f19e:	eeb0 0a67 	vmov.f32	s0, s15
 800f1a2:	f007 f927 	bl	80163f4 <asinf>
 800f1a6:	ed87 0a1a 	vstr	s0, [r7, #104]	@ 0x68
  float roll = atan2f(2*(this->q[2]*this->q[3]+this->q[0]*this->q[1]) , this->q[0]*this->q[0] - this->q[1]*this->q[1] - this->q[2]*this->q[2] + this->q[3]*this->q[3]);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f1b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f1c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1ce:	ee37 6aa7 	vadd.f32	s12, s15, s15
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800f1de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800f1ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f1f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800f202:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800f216:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f21a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f21e:	eef0 0a67 	vmov.f32	s1, s15
 800f222:	eeb0 0a46 	vmov.f32	s0, s12
 800f226:	f007 f911 	bl	801644c <atan2f>
 800f22a:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64

  // Save attitude, adjusted for the legacy CF2 body coordinate system
  state->attitude = (attitude_t){
      .roll = roll*RAD_TO_DEG,
 800f22e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800f232:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800f2a4 <kalmanCoreExternalizeState+0x380>
 800f236:	ee67 6a87 	vmul.f32	s13, s15, s14
      .pitch = -pitch*RAD_TO_DEG,
 800f23a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800f23e:	eef1 7a67 	vneg.f32	s15, s15
 800f242:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f2a4 <kalmanCoreExternalizeState+0x380>
 800f246:	ee27 7a87 	vmul.f32	s14, s15, s14
      .yaw = yaw*RAD_TO_DEG
 800f24a:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 800f24e:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f2a4 <kalmanCoreExternalizeState+0x380>
 800f252:	ee67 7a86 	vmul.f32	s15, s15, s12
  state->attitude = (attitude_t){
 800f256:	68bb      	ldr	r3, [r7, #8]
 800f258:	461a      	mov	r2, r3
 800f25a:	2300      	movs	r3, #0
 800f25c:	6013      	str	r3, [r2, #0]
 800f25e:	6053      	str	r3, [r2, #4]
 800f260:	6093      	str	r3, [r2, #8]
 800f262:	60d3      	str	r3, [r2, #12]
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	edc3 6a01 	vstr	s13, [r3, #4]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	ed83 7a02 	vstr	s14, [r3, #8]
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	edc3 7a03 	vstr	s15, [r3, #12]

  // Save quaternion, hopefully one day this could be used in a better controller.
  // Note that this is not adjusted for the legacy coordinate system
  state->attitudeQuaternion = (quaternion_t){
      .w = this->q[0],
      .x = this->q[1],
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
      .y = this->q[2],
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
      .z = this->q[3]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6b19      	ldr	r1, [r3, #48]	@ 0x30
      .w = this->q[0],
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
  state->attitudeQuaternion = (quaternion_t){
 800f286:	68bb      	ldr	r3, [r7, #8]
 800f288:	611c      	str	r4, [r3, #16]
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	6158      	str	r0, [r3, #20]
 800f28e:	68bb      	ldr	r3, [r7, #8]
 800f290:	6199      	str	r1, [r3, #24]
 800f292:	68bb      	ldr	r3, [r7, #8]
 800f294:	61da      	str	r2, [r3, #28]
  };

  assertStateNotNaN(this);
 800f296:	68f8      	ldr	r0, [r7, #12]
 800f298:	f7fd fa10 	bl	800c6bc <assertStateNotNaN>
}
 800f29c:	bf00      	nop
 800f29e:	3774      	adds	r7, #116	@ 0x74
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd90      	pop	{r4, r7, pc}
 800f2a4:	42652ee0 	.word	0x42652ee0

0800f2a8 <kalmanCoreUpdateWithAbsoluteHeight>:
 */

#include "mm_absolute_height.h"

// Measurement model where the measurement is the absolute height
void kalmanCoreUpdateWithAbsoluteHeight(kalmanCoreData_t* this, heightMeasurement_t* height) {
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b08e      	sub	sp, #56	@ 0x38
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6039      	str	r1, [r7, #0]
  float h[KC_STATE_DIM] = {0};
 800f2b2:	f107 0314 	add.w	r3, r7, #20
 800f2b6:	2224      	movs	r2, #36	@ 0x24
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f007 f81a 	bl	80162f4 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800f2c0:	2301      	movs	r3, #1
 800f2c2:	81bb      	strh	r3, [r7, #12]
 800f2c4:	2309      	movs	r3, #9
 800f2c6:	81fb      	strh	r3, [r7, #14]
 800f2c8:	f107 0314 	add.w	r3, r7, #20
 800f2cc:	613b      	str	r3, [r7, #16]
  h[KC_STATE_Z] = 1;
 800f2ce:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f2d2:	61fb      	str	r3, [r7, #28]
  kalmanCoreScalarUpdate(this, &H, height->height - this->S[KC_STATE_Z], height->stdDev);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	edd3 7a02 	vldr	s15, [r3, #8]
 800f2e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	ed93 7a02 	vldr	s14, [r3, #8]
 800f2ea:	f107 030c 	add.w	r3, r7, #12
 800f2ee:	eef0 0a47 	vmov.f32	s1, s14
 800f2f2:	eeb0 0a67 	vmov.f32	s0, s15
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7fd fb79 	bl	800c9f0 <kalmanCoreScalarUpdate>
}
 800f2fe:	bf00      	nop
 800f300:	3738      	adds	r7, #56	@ 0x38
 800f302:	46bd      	mov	sp, r7
 800f304:	bd80      	pop	{r7, pc}
	...

0800f308 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 800f308:	b580      	push	{r7, lr}
 800f30a:	b086      	sub	sp, #24
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800f312:	f04f 0300 	mov.w	r3, #0
 800f316:	60bb      	str	r3, [r7, #8]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	613b      	str	r3, [r7, #16]
 800f31c:	f107 0308 	add.w	r3, r7, #8
 800f320:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800f322:	edd7 7a04 	vldr	s15, [r7, #16]
 800f326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f32e:	db0a      	blt.n	800f346 <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 800f330:	ed97 0a04 	vldr	s0, [r7, #16]
 800f334:	f007 f948 	bl	80165c8 <sqrtf>
 800f338:	eef0 7a40 	vmov.f32	s15, s0
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800f342:	2300      	movs	r3, #0
 800f344:	e005      	b.n	800f352 <arm_sqrt+0x4a>
      *pOut = 0.0f;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f04f 0200 	mov.w	r2, #0
 800f34c:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f34e:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 800f352:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f354:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d004      	beq.n	800f366 <arm_sqrt+0x5e>
 800f35c:	2258      	movs	r2, #88	@ 0x58
 800f35e:	4906      	ldr	r1, [pc, #24]	@ (800f378 <arm_sqrt+0x70>)
 800f360:	4806      	ldr	r0, [pc, #24]	@ (800f37c <arm_sqrt+0x74>)
 800f362:	f001 fd35 	bl	8010dd0 <assertFail>
  return pOut;
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	ee07 3a90 	vmov	s15, r3
}
 800f36c:	eeb0 0a67 	vmov.f32	s0, s15
 800f370:	3718      	adds	r7, #24
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
 800f376:	bf00      	nop
 800f378:	080190b4 	.word	0x080190b4
 800f37c:	080190f4 	.word	0x080190f4

0800f380 <kalmanCoreUpdateWithDistance>:
 */

#include "mm_distance.h"

// Measurement model where the measurement is the distance to a known point in space
void kalmanCoreUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t* d) {
 800f380:	b580      	push	{r7, lr}
 800f382:	ed2d 8b02 	vpush	{d8}
 800f386:	b092      	sub	sp, #72	@ 0x48
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  // a measurement of distance to point (x, y, z)
  float h[KC_STATE_DIM] = {0};
 800f38e:	f107 0310 	add.w	r3, r7, #16
 800f392:	2224      	movs	r2, #36	@ 0x24
 800f394:	2100      	movs	r1, #0
 800f396:	4618      	mov	r0, r3
 800f398:	f006 ffac 	bl	80162f4 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 800f39c:	2301      	movs	r3, #1
 800f39e:	813b      	strh	r3, [r7, #8]
 800f3a0:	2309      	movs	r3, #9
 800f3a2:	817b      	strh	r3, [r7, #10]
 800f3a4:	f107 0310 	add.w	r3, r7, #16
 800f3a8:	60fb      	str	r3, [r7, #12]

  float dx = this->S[KC_STATE_X] - d->x;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	ed93 7a00 	vldr	s14, [r3]
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	edd3 7a00 	vldr	s15, [r3]
 800f3b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3ba:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  float dy = this->S[KC_STATE_Y] - d->y;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	ed93 7a01 	vldr	s14, [r3, #4]
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f3ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3ce:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  float dz = this->S[KC_STATE_Z] - d->z;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	ed93 7a02 	vldr	s14, [r3, #8]
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	edd3 7a02 	vldr	s15, [r3, #8]
 800f3de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3e2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

  float measuredDistance = d->distance;
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	691b      	ldr	r3, [r3, #16]
 800f3ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800f3ec:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f3f0:	ed97 0a11 	vldr	s0, [r7, #68]	@ 0x44
 800f3f4:	f007 f890 	bl	8016518 <powf>
 800f3f8:	eeb0 8a40 	vmov.f32	s16, s0
 800f3fc:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f400:	ed97 0a10 	vldr	s0, [r7, #64]	@ 0x40
 800f404:	f007 f888 	bl	8016518 <powf>
 800f408:	eef0 7a40 	vmov.f32	s15, s0
 800f40c:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f410:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f414:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 800f418:	f007 f87e 	bl	8016518 <powf>
 800f41c:	eef0 7a40 	vmov.f32	s15, s0
 800f420:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f424:	eeb0 0a67 	vmov.f32	s0, s15
 800f428:	f7ff ff6e 	bl	800f308 <arm_sqrt>
 800f42c:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
  if (predictedDistance != 0.0f) {
 800f430:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f434:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	d018      	beq.n	800f470 <kalmanCoreUpdateWithDistance+0xf0>
    // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
    h[KC_STATE_X] = dx/predictedDistance;
 800f43e:	edd7 6a11 	vldr	s13, [r7, #68]	@ 0x44
 800f442:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f44a:	edc7 7a04 	vstr	s15, [r7, #16]
    h[KC_STATE_Y] = dy/predictedDistance;
 800f44e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 800f452:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f456:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f45a:	edc7 7a05 	vstr	s15, [r7, #20]
    h[KC_STATE_Z] = dz/predictedDistance;
 800f45e:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 800f462:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 800f466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f46a:	edc7 7a06 	vstr	s15, [r7, #24]
 800f46e:	e008      	b.n	800f482 <kalmanCoreUpdateWithDistance+0x102>
  } else {
    // Avoid divide by zero
    h[KC_STATE_X] = 1.0f;
 800f470:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f474:	613b      	str	r3, [r7, #16]
    h[KC_STATE_Y] = 0.0f;
 800f476:	f04f 0300 	mov.w	r3, #0
 800f47a:	617b      	str	r3, [r7, #20]
    h[KC_STATE_Z] = 0.0f;
 800f47c:	f04f 0300 	mov.w	r3, #0
 800f480:	61bb      	str	r3, [r7, #24]
  }

  kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, d->stdDev);
 800f482:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800f486:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800f48a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	ed93 7a05 	vldr	s14, [r3, #20]
 800f494:	f107 0308 	add.w	r3, r7, #8
 800f498:	eef0 0a47 	vmov.f32	s1, s14
 800f49c:	eeb0 0a67 	vmov.f32	s0, s15
 800f4a0:	4619      	mov	r1, r3
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	f7fd faa4 	bl	800c9f0 <kalmanCoreScalarUpdate>
}
 800f4a8:	bf00      	nop
 800f4aa:	3748      	adds	r7, #72	@ 0x48
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	ecbd 8b02 	vpop	{d8}
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <assert_aligned_4_bytes>:
static inline void assert_aligned_4_bytes(const arm_matrix_instance_f32* matrix) {
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
  const uint32_t address = (uint32_t)matrix->pData;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	60fb      	str	r3, [r7, #12]
  ASSERT((address & 0x3) == 0);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	f003 0303 	and.w	r3, r3, #3
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d004      	beq.n	800f4d6 <assert_aligned_4_bytes+0x22>
 800f4cc:	2239      	movs	r2, #57	@ 0x39
 800f4ce:	4904      	ldr	r1, [pc, #16]	@ (800f4e0 <assert_aligned_4_bytes+0x2c>)
 800f4d0:	4804      	ldr	r0, [pc, #16]	@ (800f4e4 <assert_aligned_4_bytes+0x30>)
 800f4d2:	f001 fc7d 	bl	8010dd0 <assertFail>
}
 800f4d6:	bf00      	nop
 800f4d8:	3710      	adds	r7, #16
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	bd80      	pop	{r7, pc}
 800f4de:	bf00      	nop
 800f4e0:	08019110 	.word	0x08019110
 800f4e4:	08019150 	.word	0x08019150

0800f4e8 <mat_trans>:
static inline void mat_trans(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	6078      	str	r0, [r7, #4]
 800f4f0:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f7ff ffde 	bl	800f4b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800f4f8:	6838      	ldr	r0, [r7, #0]
 800f4fa:	f7ff ffdb 	bl	800f4b4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_trans_f32(pSrc, pDst);
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f006 fc13 	bl	8015d2c <arm_mat_trans_f32>
 800f506:	4603      	mov	r3, r0
 800f508:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f50a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d004      	beq.n	800f51c <mat_trans+0x34>
 800f512:	2241      	movs	r2, #65	@ 0x41
 800f514:	4903      	ldr	r1, [pc, #12]	@ (800f524 <mat_trans+0x3c>)
 800f516:	4804      	ldr	r0, [pc, #16]	@ (800f528 <mat_trans+0x40>)
 800f518:	f001 fc5a 	bl	8010dd0 <assertFail>
}
 800f51c:	bf00      	nop
 800f51e:	3710      	adds	r7, #16
 800f520:	46bd      	mov	sp, r7
 800f522:	bd80      	pop	{r7, pc}
 800f524:	08019110 	.word	0x08019110
 800f528:	08019168 	.word	0x08019168

0800f52c <mat_inv>:
static inline void mat_inv(const arm_matrix_instance_f32 * pSrc, arm_matrix_instance_f32 * pDst) {
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  assert_aligned_4_bytes(pSrc);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7ff ffbc 	bl	800f4b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800f53c:	6838      	ldr	r0, [r7, #0]
 800f53e:	f7ff ffb9 	bl	800f4b4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_inverse_f32(pSrc, pDst);
 800f542:	6839      	ldr	r1, [r7, #0]
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f006 fd3f 	bl	8015fc8 <arm_mat_inverse_f32>
 800f54a:	4603      	mov	r3, r0
 800f54c:	73fb      	strb	r3, [r7, #15]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f54e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d004      	beq.n	800f560 <mat_inv+0x34>
 800f556:	2249      	movs	r2, #73	@ 0x49
 800f558:	4903      	ldr	r1, [pc, #12]	@ (800f568 <mat_inv+0x3c>)
 800f55a:	4804      	ldr	r0, [pc, #16]	@ (800f56c <mat_inv+0x40>)
 800f55c:	f001 fc38 	bl	8010dd0 <assertFail>
}
 800f560:	bf00      	nop
 800f562:	3710      	adds	r7, #16
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	08019110 	.word	0x08019110
 800f56c:	08019168 	.word	0x08019168

0800f570 <mat_mult>:
static inline void mat_mult(const arm_matrix_instance_f32 * pSrcA, const arm_matrix_instance_f32 * pSrcB, arm_matrix_instance_f32 * pDst) {
 800f570:	b580      	push	{r7, lr}
 800f572:	b086      	sub	sp, #24
 800f574:	af00      	add	r7, sp, #0
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	607a      	str	r2, [r7, #4]
  assert_aligned_4_bytes(pSrcA);
 800f57c:	68f8      	ldr	r0, [r7, #12]
 800f57e:	f7ff ff99 	bl	800f4b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pSrcB);
 800f582:	68b8      	ldr	r0, [r7, #8]
 800f584:	f7ff ff96 	bl	800f4b4 <assert_aligned_4_bytes>
  assert_aligned_4_bytes(pDst);
 800f588:	6878      	ldr	r0, [r7, #4]
 800f58a:	f7ff ff93 	bl	800f4b4 <assert_aligned_4_bytes>
  arm_status result = arm_mat_mult_f32(pSrcA, pSrcB, pDst);
 800f58e:	687a      	ldr	r2, [r7, #4]
 800f590:	68b9      	ldr	r1, [r7, #8]
 800f592:	68f8      	ldr	r0, [r7, #12]
 800f594:	f006 fc78 	bl	8015e88 <arm_mat_mult_f32>
 800f598:	4603      	mov	r3, r0
 800f59a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f59c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d004      	beq.n	800f5ae <mat_mult+0x3e>
 800f5a4:	2252      	movs	r2, #82	@ 0x52
 800f5a6:	4904      	ldr	r1, [pc, #16]	@ (800f5b8 <mat_mult+0x48>)
 800f5a8:	4804      	ldr	r0, [pc, #16]	@ (800f5bc <mat_mult+0x4c>)
 800f5aa:	f001 fc11 	bl	8010dd0 <assertFail>
}
 800f5ae:	bf00      	nop
 800f5b0:	3718      	adds	r7, #24
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bd80      	pop	{r7, pc}
 800f5b6:	bf00      	nop
 800f5b8:	08019110 	.word	0x08019110
 800f5bc:	08019168 	.word	0x08019168

0800f5c0 <arm_sqrt>:
static inline float arm_sqrt(float32_t in) {
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b086      	sub	sp, #24
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float pOut = 0;
 800f5ca:	f04f 0300 	mov.w	r3, #0
 800f5ce:	60bb      	str	r3, [r7, #8]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	613b      	str	r3, [r7, #16]
 800f5d4:	f107 0308 	add.w	r3, r7, #8
 800f5d8:	60fb      	str	r3, [r7, #12]
    if (in >= 0.0f)
 800f5da:	edd7 7a04 	vldr	s15, [r7, #16]
 800f5de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f5e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e6:	db0a      	blt.n	800f5fe <arm_sqrt+0x3e>
      *pOut = sqrtf(in);
 800f5e8:	ed97 0a04 	vldr	s0, [r7, #16]
 800f5ec:	f006 ffec 	bl	80165c8 <sqrtf>
 800f5f0:	eef0 7a40 	vmov.f32	s15, s0
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	e005      	b.n	800f60a <arm_sqrt+0x4a>
      *pOut = 0.0f;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	f04f 0200 	mov.w	r2, #0
 800f604:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800f606:	f04f 33ff 	mov.w	r3, #4294967295
  arm_status result = arm_sqrt_f32(in, &pOut);
 800f60a:	75fb      	strb	r3, [r7, #23]
  ASSERT(ARM_MATH_SUCCESS == result);
 800f60c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d004      	beq.n	800f61e <arm_sqrt+0x5e>
 800f614:	2258      	movs	r2, #88	@ 0x58
 800f616:	4906      	ldr	r1, [pc, #24]	@ (800f630 <arm_sqrt+0x70>)
 800f618:	4806      	ldr	r0, [pc, #24]	@ (800f634 <arm_sqrt+0x74>)
 800f61a:	f001 fbd9 	bl	8010dd0 <assertFail>
  return pOut;
 800f61e:	68bb      	ldr	r3, [r7, #8]
 800f620:	ee07 3a90 	vmov	s15, r3
}
 800f624:	eeb0 0a67 	vmov.f32	s0, s15
 800f628:	3718      	adds	r7, #24
 800f62a:	46bd      	mov	sp, r7
 800f62c:	bd80      	pop	{r7, pc}
 800f62e:	bf00      	nop
 800f630:	08019110 	.word	0x08019110
 800f634:	08019168 	.word	0x08019168

0800f638 <Cholesky_Decomposition>:
#define UPPER_BOUND (100)
#define LOWER_BOUND (-100)

// Cholesky Decomposition for a nxn psd matrix (from scratch)
// Reference: https://www.geeksforgeeks.org/cholesky-decomposition-matrix-decomposition/
static void Cholesky_Decomposition(int n, float matrix[n][n],  float lower[n][n]){
 800f638:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f63c:	b08d      	sub	sp, #52	@ 0x34
 800f63e:	af00      	add	r7, sp, #0
 800f640:	60f8      	str	r0, [r7, #12]
 800f642:	60b9      	str	r1, [r7, #8]
 800f644:	607a      	str	r2, [r7, #4]
 800f646:	68fa      	ldr	r2, [r7, #12]
 800f648:	603a      	str	r2, [r7, #0]
 800f64a:	1e53      	subs	r3, r2, #1
 800f64c:	61bb      	str	r3, [r7, #24]
 800f64e:	2300      	movs	r3, #0
 800f650:	4690      	mov	r8, r2
 800f652:	4699      	mov	r9, r3
 800f654:	f04f 0200 	mov.w	r2, #0
 800f658:	f04f 0300 	mov.w	r3, #0
 800f65c:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800f660:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 800f664:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800f668:	68fe      	ldr	r6, [r7, #12]
 800f66a:	1e73      	subs	r3, r6, #1
 800f66c:	617b      	str	r3, [r7, #20]
 800f66e:	4632      	mov	r2, r6
 800f670:	2300      	movs	r3, #0
 800f672:	4614      	mov	r4, r2
 800f674:	461d      	mov	r5, r3
 800f676:	f04f 0200 	mov.w	r2, #0
 800f67a:	f04f 0300 	mov.w	r3, #0
 800f67e:	016b      	lsls	r3, r5, #5
 800f680:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800f684:	0162      	lsls	r2, r4, #5
    // Decomposing a matrix into Lower Triangular 
    for (int i = 0; i < n; i++) { 
 800f686:	2300      	movs	r3, #0
 800f688:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f68a:	e0af      	b.n	800f7ec <Cholesky_Decomposition+0x1b4>
        for (int j = 0; j <= i; j++) { 
 800f68c:	2300      	movs	r3, #0
 800f68e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f690:	e0a4      	b.n	800f7dc <Cholesky_Decomposition+0x1a4>
            float sum = 0.0; 
 800f692:	f04f 0300 	mov.w	r3, #0
 800f696:	627b      	str	r3, [r7, #36]	@ 0x24
            if (j == i) // summation for diagnols 
 800f698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f69a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f69c:	429a      	cmp	r2, r3
 800f69e:	d146      	bne.n	800f72e <Cholesky_Decomposition+0xf6>
            { 
                for (int k = 0; k < j; k++) 
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	623b      	str	r3, [r7, #32]
 800f6a4:	e01c      	b.n	800f6e0 <Cholesky_Decomposition+0xa8>
                    sum += powf(lower[j][k], 2); 
 800f6a6:	4632      	mov	r2, r6
 800f6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6aa:	fb02 f303 	mul.w	r3, r2, r3
 800f6ae:	009b      	lsls	r3, r3, #2
 800f6b0:	687a      	ldr	r2, [r7, #4]
 800f6b2:	441a      	add	r2, r3
 800f6b4:	6a3b      	ldr	r3, [r7, #32]
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	4413      	add	r3, r2
 800f6ba:	edd3 7a00 	vldr	s15, [r3]
 800f6be:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f6c2:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c6:	f006 ff27 	bl	8016518 <powf>
 800f6ca:	eeb0 7a40 	vmov.f32	s14, s0
 800f6ce:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f6d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f6d6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 800f6da:	6a3b      	ldr	r3, [r7, #32]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	623b      	str	r3, [r7, #32]
 800f6e0:	6a3a      	ldr	r2, [r7, #32]
 800f6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6e4:	429a      	cmp	r2, r3
 800f6e6:	dbde      	blt.n	800f6a6 <Cholesky_Decomposition+0x6e>
                lower[j][j] = sqrtf(matrix[j][j] - sum); 
 800f6e8:	683a      	ldr	r2, [r7, #0]
 800f6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ec:	fb02 f303 	mul.w	r3, r2, r3
 800f6f0:	009b      	lsls	r3, r3, #2
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	441a      	add	r2, r3
 800f6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4413      	add	r3, r2
 800f6fc:	ed93 7a00 	vldr	s14, [r3]
 800f700:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f704:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f708:	4632      	mov	r2, r6
 800f70a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f70c:	fb02 f303 	mul.w	r3, r2, r3
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	687a      	ldr	r2, [r7, #4]
 800f714:	18d4      	adds	r4, r2, r3
 800f716:	eeb0 0a67 	vmov.f32	s0, s15
 800f71a:	f006 ff55 	bl	80165c8 <sqrtf>
 800f71e:	eef0 7a40 	vmov.f32	s15, s0
 800f722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4423      	add	r3, r4
 800f728:	edc3 7a00 	vstr	s15, [r3]
 800f72c:	e053      	b.n	800f7d6 <Cholesky_Decomposition+0x19e>
            } else { 
                for (int k = 0; k < j; k++) 
 800f72e:	2300      	movs	r3, #0
 800f730:	61fb      	str	r3, [r7, #28]
 800f732:	e022      	b.n	800f77a <Cholesky_Decomposition+0x142>
                    sum += (lower[i][k] * lower[j][k]); 
 800f734:	4632      	mov	r2, r6
 800f736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f738:	fb02 f303 	mul.w	r3, r2, r3
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	441a      	add	r2, r3
 800f742:	69fb      	ldr	r3, [r7, #28]
 800f744:	009b      	lsls	r3, r3, #2
 800f746:	4413      	add	r3, r2
 800f748:	ed93 7a00 	vldr	s14, [r3]
 800f74c:	4632      	mov	r2, r6
 800f74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f750:	fb02 f303 	mul.w	r3, r2, r3
 800f754:	009b      	lsls	r3, r3, #2
 800f756:	687a      	ldr	r2, [r7, #4]
 800f758:	441a      	add	r2, r3
 800f75a:	69fb      	ldr	r3, [r7, #28]
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	edd3 7a00 	vldr	s15, [r3]
 800f764:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f768:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800f76c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f770:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                for (int k = 0; k < j; k++) 
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	3301      	adds	r3, #1
 800f778:	61fb      	str	r3, [r7, #28]
 800f77a:	69fa      	ldr	r2, [r7, #28]
 800f77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f77e:	429a      	cmp	r2, r3
 800f780:	dbd8      	blt.n	800f734 <Cholesky_Decomposition+0xfc>
                lower[i][j] = (matrix[i][j] - sum) / lower[j][j]; 
 800f782:	683a      	ldr	r2, [r7, #0]
 800f784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f786:	fb02 f303 	mul.w	r3, r2, r3
 800f78a:	009b      	lsls	r3, r3, #2
 800f78c:	68ba      	ldr	r2, [r7, #8]
 800f78e:	441a      	add	r2, r3
 800f790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	4413      	add	r3, r2
 800f796:	ed93 7a00 	vldr	s14, [r3]
 800f79a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800f79e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f7a2:	4632      	mov	r2, r6
 800f7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7a6:	fb02 f303 	mul.w	r3, r2, r3
 800f7aa:	009b      	lsls	r3, r3, #2
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	441a      	add	r2, r3
 800f7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7b2:	009b      	lsls	r3, r3, #2
 800f7b4:	4413      	add	r3, r2
 800f7b6:	ed93 7a00 	vldr	s14, [r3]
 800f7ba:	4632      	mov	r2, r6
 800f7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7be:	fb02 f303 	mul.w	r3, r2, r3
 800f7c2:	009b      	lsls	r3, r3, #2
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	441a      	add	r2, r3
 800f7c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	4413      	add	r3, r2
 800f7d2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j <= i; j++) { 
 800f7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7d8:	3301      	adds	r3, #1
 800f7da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f7dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	f77f af56 	ble.w	800f692 <Cholesky_Decomposition+0x5a>
    for (int i = 0; i < n; i++) { 
 800f7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7e8:	3301      	adds	r3, #1
 800f7ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f7ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	f6ff af4b 	blt.w	800f68c <Cholesky_Decomposition+0x54>
            } 
        } 
    }
} 
 800f7f6:	bf00      	nop
 800f7f8:	bf00      	nop
 800f7fa:	3734      	adds	r7, #52	@ 0x34
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800f802 <GM_UWB>:
 * For a given measurement error e, decreasing the sigma of the GM weight function will set a
 * smaller weight to this error e. Then, the variance of this measurement will increase, indicating 
 * a large measurement uncertainty. 
 * Intuitively, a small sigma means you trust the measurements more.
*/
static void GM_UWB(float e, float * GM_e){
 800f802:	b480      	push	{r7}
 800f804:	b085      	sub	sp, #20
 800f806:	af00      	add	r7, sp, #0
 800f808:	ed87 0a01 	vstr	s0, [r7, #4]
 800f80c:	6038      	str	r0, [r7, #0]
    float sigma = 1.5;                        
 800f80e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800f812:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800f814:	edd7 7a01 	vldr	s15, [r7, #4]
 800f818:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f81c:	ed97 7a03 	vldr	s14, [r7, #12]
 800f820:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f824:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800f828:	edd7 7a03 	vldr	s15, [r7, #12]
 800f82c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f830:	edd7 7a02 	vldr	s15, [r7, #8]
 800f834:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	edc3 7a00 	vstr	s15, [r3]
}
 800f842:	bf00      	nop
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84c:	4770      	bx	lr

0800f84e <GM_state>:

static void GM_state(float e, float * GM_e){
 800f84e:	b480      	push	{r7}
 800f850:	b085      	sub	sp, #20
 800f852:	af00      	add	r7, sp, #0
 800f854:	ed87 0a01 	vstr	s0, [r7, #4]
 800f858:	6038      	str	r0, [r7, #0]
    float sigma = 2.0;                       
 800f85a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f85e:	60fb      	str	r3, [r7, #12]
    float GM_dn = sigma + e*e;
 800f860:	edd7 7a01 	vldr	s15, [r7, #4]
 800f864:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800f868:	ed97 7a03 	vldr	s14, [r7, #12]
 800f86c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f870:	edc7 7a02 	vstr	s15, [r7, #8]
    *GM_e = (sigma * sigma)/(GM_dn * GM_dn);
 800f874:	edd7 7a03 	vldr	s15, [r7, #12]
 800f878:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800f87c:	edd7 7a02 	vldr	s15, [r7, #8]
 800f880:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800f884:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	edc3 7a00 	vstr	s15, [r3]
}
 800f88e:	bf00      	nop
 800f890:	3714      	adds	r7, #20
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr
	...

0800f89c <kalmanCoreRobustUpdateWithDistance>:

// robsut update function
void kalmanCoreRobustUpdateWithDistance(kalmanCoreData_t* this, distanceMeasurement_t *d)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	ed2d 8b02 	vpush	{d8}
 800f8a2:	b0f8      	sub	sp, #480	@ 0x1e0
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f8aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800f8ae:	6018      	str	r0, [r3, #0]
 800f8b0:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f8b4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f8b8:	6019      	str	r1, [r3, #0]
    float dx = this->S[KC_STATE_X] - d->x;
 800f8ba:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f8be:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	ed93 7a00 	vldr	s14, [r3]
 800f8c8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f8cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	edd3 7a00 	vldr	s15, [r3]
 800f8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8da:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
    float dy = this->S[KC_STATE_Y] - d->y;
 800f8de:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f8e2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	ed93 7a01 	vldr	s14, [r3, #4]
 800f8ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f8f0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	edd3 7a01 	vldr	s15, [r3, #4]
 800f8fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8fe:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
    float dz = this->S[KC_STATE_Z] - d->z;
 800f902:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f906:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	ed93 7a02 	vldr	s14, [r3, #8]
 800f910:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f914:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	edd3 7a02 	vldr	s15, [r3, #8]
 800f91e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f922:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8
    float measuredDistance = d->distance;
 800f926:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f92a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	691b      	ldr	r3, [r3, #16]
 800f932:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    float predictedDistance = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800f936:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f93a:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 800f93e:	f006 fdeb 	bl	8016518 <powf>
 800f942:	eeb0 8a40 	vmov.f32	s16, s0
 800f946:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f94a:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 800f94e:	f006 fde3 	bl	8016518 <powf>
 800f952:	eef0 7a40 	vmov.f32	s15, s0
 800f956:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f95a:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800f95e:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 800f962:	f006 fdd9 	bl	8016518 <powf>
 800f966:	eef0 7a40 	vmov.f32	s15, s0
 800f96a:	ee78 7a27 	vadd.f32	s15, s16, s15
 800f96e:	eeb0 0a67 	vmov.f32	s0, s15
 800f972:	f7ff fe25 	bl	800f5c0 <arm_sqrt>
 800f976:	ed87 0a68 	vstr	s0, [r7, #416]	@ 0x1a0
    // innovation term based on x_check
    float error_check = measuredDistance - predictedDistance;    // innovation term based on prior state
 800f97a:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 800f97e:	edd7 7a68 	vldr	s15, [r7, #416]	@ 0x1a0
 800f982:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f986:	edc7 7a67 	vstr	s15, [r7, #412]	@ 0x19c
    static float P_chol[KC_STATE_DIM][KC_STATE_DIM]; 
    static arm_matrix_instance_f32 Pc_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)P_chol};
    static float Pc_tran[KC_STATE_DIM][KC_STATE_DIM];        
    static arm_matrix_instance_f32 Pc_tran_m = {KC_STATE_DIM, KC_STATE_DIM, (float *)Pc_tran};

    float h[KC_STATE_DIM] = {0};
 800f98a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800f98e:	2224      	movs	r2, #36	@ 0x24
 800f990:	2100      	movs	r1, #0
 800f992:	4618      	mov	r0, r3
 800f994:	f006 fcae 	bl	80162f4 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};    
 800f998:	2301      	movs	r3, #1
 800f99a:	f8a7 3154 	strh.w	r3, [r7, #340]	@ 0x154
 800f99e:	2309      	movs	r3, #9
 800f9a0:	f8a7 3156 	strh.w	r3, [r7, #342]	@ 0x156
 800f9a4:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 800f9a8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
    // x_err comes from the KF update is the state of error state Kalman filter, set to be zero initially
    static float x_err[KC_STATE_DIM] = {0.0};          
    static arm_matrix_instance_f32 x_errm = {KC_STATE_DIM, 1, x_err};
    static float X_state[KC_STATE_DIM] = {0.0};
    float P_iter[KC_STATE_DIM][KC_STATE_DIM];
    memcpy(P_iter, this->P, sizeof(P_iter));
 800f9ac:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f9b0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800f9ba:	f107 0310 	add.w	r3, r7, #16
 800f9be:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f006 fcdc 	bl	8016380 <memcpy>

    float R_iter = d->stdDev * d->stdDev;                     // measurement covariance
 800f9c8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f9cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	ed93 7a05 	vldr	s14, [r3, #20]
 800f9d6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f9da:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	edd3 7a05 	vldr	s15, [r3, #20]
 800f9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9e8:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
    memcpy(X_state, this->S, sizeof(X_state));
 800f9ec:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f9f0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	2224      	movs	r2, #36	@ 0x24
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	48cf      	ldr	r0, [pc, #828]	@ (800fd38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800f9fc:	f006 fcc0 	bl	8016380 <memcpy>

    // ---------------------- Start iteration ----------------------- //
    for (int iter = 0; iter < MAX_ITER; iter++){
 800fa00:	2300      	movs	r3, #0
 800fa02:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800fa06:	e2c3      	b.n	800ff90 <kalmanCoreRobustUpdateWithDistance+0x6f4>
        // cholesky decomposition for the prior covariance matrix 
        Cholesky_Decomposition(KC_STATE_DIM, P_iter, P_chol);          // P_chol is a lower triangular matrix
 800fa08:	f107 0310 	add.w	r3, r7, #16
 800fa0c:	4acb      	ldr	r2, [pc, #812]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fa0e:	4619      	mov	r1, r3
 800fa10:	2009      	movs	r0, #9
 800fa12:	f7ff fe11 	bl	800f638 <Cholesky_Decomposition>
        mat_trans(&Pc_m, &Pc_tran_m);
 800fa16:	49ca      	ldr	r1, [pc, #808]	@ (800fd40 <kalmanCoreRobustUpdateWithDistance+0x4a4>)
 800fa18:	48ca      	ldr	r0, [pc, #808]	@ (800fd44 <kalmanCoreRobustUpdateWithDistance+0x4a8>)
 800fa1a:	f7ff fd65 	bl	800f4e8 <mat_trans>

        // decomposition for measurement covariance (scalar case)
        float R_chol = sqrtf(R_iter);       
 800fa1e:	ed97 0a77 	vldr	s0, [r7, #476]	@ 0x1dc
 800fa22:	f006 fdd1 	bl	80165c8 <sqrtf>
 800fa26:	ed87 0a66 	vstr	s0, [r7, #408]	@ 0x198
        // construct H matrix
        // X_state updates in each iteration
        float x_iter = X_state[KC_STATE_X],  y_iter = X_state[KC_STATE_Y], z_iter = X_state[KC_STATE_Z];   
 800fa2a:	4bc3      	ldr	r3, [pc, #780]	@ (800fd38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 800fa32:	4bc1      	ldr	r3, [pc, #772]	@ (800fd38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800fa34:	685b      	ldr	r3, [r3, #4]
 800fa36:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800fa3a:	4bbf      	ldr	r3, [pc, #764]	@ (800fd38 <kalmanCoreRobustUpdateWithDistance+0x49c>)
 800fa3c:	689b      	ldr	r3, [r3, #8]
 800fa3e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        dx = x_iter - d->x;  dy = y_iter - d->y;   dz = z_iter - d->z;
 800fa42:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800fa46:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	edd3 7a00 	vldr	s15, [r3]
 800fa50:	ed97 7a65 	vldr	s14, [r7, #404]	@ 0x194
 800fa54:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa58:	edc7 7a6c 	vstr	s15, [r7, #432]	@ 0x1b0
 800fa5c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800fa60:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa6a:	ed97 7a64 	vldr	s14, [r7, #400]	@ 0x190
 800fa6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa72:	edc7 7a6b 	vstr	s15, [r7, #428]	@ 0x1ac
 800fa76:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800fa7a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	edd3 7a02 	vldr	s15, [r3, #8]
 800fa84:	ed97 7a63 	vldr	s14, [r7, #396]	@ 0x18c
 800fa88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fa8c:	edc7 7a6a 	vstr	s15, [r7, #424]	@ 0x1a8

        float predicted_iter = arm_sqrt(powf(dx, 2) + powf(dy, 2) + powf(dz, 2));
 800fa90:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800fa94:	ed97 0a6c 	vldr	s0, [r7, #432]	@ 0x1b0
 800fa98:	f006 fd3e 	bl	8016518 <powf>
 800fa9c:	eeb0 8a40 	vmov.f32	s16, s0
 800faa0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800faa4:	ed97 0a6b 	vldr	s0, [r7, #428]	@ 0x1ac
 800faa8:	f006 fd36 	bl	8016518 <powf>
 800faac:	eef0 7a40 	vmov.f32	s15, s0
 800fab0:	ee38 8a27 	vadd.f32	s16, s16, s15
 800fab4:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 800fab8:	ed97 0a6a 	vldr	s0, [r7, #424]	@ 0x1a8
 800fabc:	f006 fd2c 	bl	8016518 <powf>
 800fac0:	eef0 7a40 	vmov.f32	s15, s0
 800fac4:	ee78 7a27 	vadd.f32	s15, s16, s15
 800fac8:	eeb0 0a67 	vmov.f32	s0, s15
 800facc:	f7ff fd78 	bl	800f5c0 <arm_sqrt>
 800fad0:	ed87 0a62 	vstr	s0, [r7, #392]	@ 0x188
        // innovation term based on x_check
        float error_iter = measuredDistance - predicted_iter; 
 800fad4:	ed97 7a69 	vldr	s14, [r7, #420]	@ 0x1a4
 800fad8:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800fadc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fae0:	edc7 7a61 	vstr	s15, [r7, #388]	@ 0x184

        float e_y = error_iter;
 800fae4:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800fae8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4

        if (predicted_iter != 0.0f) {
 800faec:	edd7 7a62 	vldr	s15, [r7, #392]	@ 0x188
 800faf0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800faf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf8:	d018      	beq.n	800fb2c <kalmanCoreRobustUpdateWithDistance+0x290>
            // The measurement is: z = sqrt(dx^2 + dy^2 + dz^2). The derivative dz/dX gives h.
            h[KC_STATE_X] = dx/predicted_iter;
 800fafa:	edd7 6a6c 	vldr	s13, [r7, #432]	@ 0x1b0
 800fafe:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 800fb02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb06:	edc7 7a57 	vstr	s15, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = dy/predicted_iter;
 800fb0a:	edd7 6a6b 	vldr	s13, [r7, #428]	@ 0x1ac
 800fb0e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 800fb12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb16:	edc7 7a58 	vstr	s15, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = dz/predicted_iter;
 800fb1a:	edd7 6a6a 	vldr	s13, [r7, #424]	@ 0x1a8
 800fb1e:	ed97 7a62 	vldr	s14, [r7, #392]	@ 0x188
 800fb22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb26:	edc7 7a59 	vstr	s15, [r7, #356]	@ 0x164
 800fb2a:	e00b      	b.n	800fb44 <kalmanCoreRobustUpdateWithDistance+0x2a8>

        } else {
            // Avoid divide by zero
            h[KC_STATE_X] = 1.0f;
 800fb2c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800fb30:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
            h[KC_STATE_Y] = 0.0f;
 800fb34:	f04f 0300 	mov.w	r3, #0
 800fb38:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
            h[KC_STATE_Z] = 0.0f;
 800fb3c:	f04f 0300 	mov.w	r3, #0
 800fb40:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
        }
        // check the measurement noise
        if (fabsf(R_chol - 0.0f) < 0.0001f){
 800fb44:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 800fb48:	eef0 7ae7 	vabs.f32	s15, s15
 800fb4c:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 800fd48 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 800fb50:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb58:	d508      	bpl.n	800fb6c <kalmanCoreRobustUpdateWithDistance+0x2d0>
            e_y = error_iter / 0.0001f;
 800fb5a:	ed97 7a61 	vldr	s14, [r7, #388]	@ 0x184
 800fb5e:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 800fd48 <kalmanCoreRobustUpdateWithDistance+0x4ac>
 800fb62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fb66:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
 800fb6a:	e007      	b.n	800fb7c <kalmanCoreRobustUpdateWithDistance+0x2e0>
        }
        else{ 
            e_y = error_iter / R_chol;
 800fb6c:	edd7 6a61 	vldr	s13, [r7, #388]	@ 0x184
 800fb70:	ed97 7a66 	vldr	s14, [r7, #408]	@ 0x198
 800fb74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fb78:	edc7 7a75 	vstr	s15, [r7, #468]	@ 0x1d4
        }
        // Make sure P_chol, lower trangular matrix, is numerically stable              
        for (int col=0; col<KC_STATE_DIM; col++) {
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800fb82:	e095      	b.n	800fcb0 <kalmanCoreRobustUpdateWithDistance+0x414>
            for (int row=col; row<KC_STATE_DIM; row++) {
 800fb84:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800fb88:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800fb8c:	e086      	b.n	800fc9c <kalmanCoreRobustUpdateWithDistance+0x400>
                if (isnan(P_chol[row][col]) || P_chol[row][col] > UPPER_BOUND) {
 800fb8e:	496b      	ldr	r1, [pc, #428]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fb90:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fb94:	4613      	mov	r3, r2
 800fb96:	00db      	lsls	r3, r3, #3
 800fb98:	4413      	add	r3, r2
 800fb9a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fb9e:	4413      	add	r3, r2
 800fba0:	009b      	lsls	r3, r3, #2
 800fba2:	440b      	add	r3, r1
 800fba4:	edd3 7a00 	vldr	s15, [r3]
 800fba8:	eef4 7a67 	vcmp.f32	s15, s15
 800fbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbb0:	d613      	bvs.n	800fbda <kalmanCoreRobustUpdateWithDistance+0x33e>
 800fbb2:	4962      	ldr	r1, [pc, #392]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fbb4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fbb8:	4613      	mov	r3, r2
 800fbba:	00db      	lsls	r3, r3, #3
 800fbbc:	4413      	add	r3, r2
 800fbbe:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fbc2:	4413      	add	r3, r2
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	440b      	add	r3, r1
 800fbc8:	edd3 7a00 	vldr	s15, [r3]
 800fbcc:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 800fd4c <kalmanCoreRobustUpdateWithDistance+0x4b0>
 800fbd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbd8:	dd0d      	ble.n	800fbf6 <kalmanCoreRobustUpdateWithDistance+0x35a>
                    P_chol[row][col] = UPPER_BOUND;
 800fbda:	4958      	ldr	r1, [pc, #352]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fbdc:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	00db      	lsls	r3, r3, #3
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fbea:	4413      	add	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	440b      	add	r3, r1
 800fbf0:	4a57      	ldr	r2, [pc, #348]	@ (800fd50 <kalmanCoreRobustUpdateWithDistance+0x4b4>)
 800fbf2:	601a      	str	r2, [r3, #0]
 800fbf4:	e04d      	b.n	800fc92 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row!=col && P_chol[row][col] < LOWER_BOUND){
 800fbf6:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fbfa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	d021      	beq.n	800fc46 <kalmanCoreRobustUpdateWithDistance+0x3aa>
 800fc02:	494e      	ldr	r1, [pc, #312]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fc04:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fc08:	4613      	mov	r3, r2
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	4413      	add	r3, r2
 800fc0e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fc12:	4413      	add	r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	440b      	add	r3, r1
 800fc18:	edd3 7a00 	vldr	s15, [r3]
 800fc1c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800fd54 <kalmanCoreRobustUpdateWithDistance+0x4b8>
 800fc20:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc28:	d50d      	bpl.n	800fc46 <kalmanCoreRobustUpdateWithDistance+0x3aa>
                    P_chol[row][col] = LOWER_BOUND;
 800fc2a:	4944      	ldr	r1, [pc, #272]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fc2c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fc30:	4613      	mov	r3, r2
 800fc32:	00db      	lsls	r3, r3, #3
 800fc34:	4413      	add	r3, r2
 800fc36:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fc3a:	4413      	add	r3, r2
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	440b      	add	r3, r1
 800fc40:	4a45      	ldr	r2, [pc, #276]	@ (800fd58 <kalmanCoreRobustUpdateWithDistance+0x4bc>)
 800fc42:	601a      	str	r2, [r3, #0]
 800fc44:	e025      	b.n	800fc92 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                } else if(row==col && P_chol[row][col]<0.0f){
 800fc46:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fc4a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800fc4e:	429a      	cmp	r2, r3
 800fc50:	d11f      	bne.n	800fc92 <kalmanCoreRobustUpdateWithDistance+0x3f6>
 800fc52:	493a      	ldr	r1, [pc, #232]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fc54:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fc58:	4613      	mov	r3, r2
 800fc5a:	00db      	lsls	r3, r3, #3
 800fc5c:	4413      	add	r3, r2
 800fc5e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fc62:	4413      	add	r3, r2
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	440b      	add	r3, r1
 800fc68:	edd3 7a00 	vldr	s15, [r3]
 800fc6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc74:	d50d      	bpl.n	800fc92 <kalmanCoreRobustUpdateWithDistance+0x3f6>
                    P_chol[row][col] = 0.0f;
 800fc76:	4931      	ldr	r1, [pc, #196]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fc78:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 800fc7c:	4613      	mov	r3, r2
 800fc7e:	00db      	lsls	r3, r3, #3
 800fc80:	4413      	add	r3, r2
 800fc82:	f8d7 21d0 	ldr.w	r2, [r7, #464]	@ 0x1d0
 800fc86:	4413      	add	r3, r2
 800fc88:	009b      	lsls	r3, r3, #2
 800fc8a:	440b      	add	r3, r1
 800fc8c:	f04f 0200 	mov.w	r2, #0
 800fc90:	601a      	str	r2, [r3, #0]
            for (int row=col; row<KC_STATE_DIM; row++) {
 800fc92:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800fc96:	3301      	adds	r3, #1
 800fc98:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 800fc9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800fca0:	2b08      	cmp	r3, #8
 800fca2:	f77f af74 	ble.w	800fb8e <kalmanCoreRobustUpdateWithDistance+0x2f2>
        for (int col=0; col<KC_STATE_DIM; col++) {
 800fca6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800fcaa:	3301      	adds	r3, #1
 800fcac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800fcb0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800fcb4:	2b08      	cmp	r3, #8
 800fcb6:	f77f af65 	ble.w	800fb84 <kalmanCoreRobustUpdateWithDistance+0x2e8>
                } 
            }
        }
        // Matrix inversion is numerically sensitive.
        // Add small values on the diagonal of P_chol to avoid numerical problems.
        float dummy_value = 1e-9f;
 800fcba:	4b28      	ldr	r3, [pc, #160]	@ (800fd5c <kalmanCoreRobustUpdateWithDistance+0x4c0>)
 800fcbc:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
        for (int k=0; k<KC_STATE_DIM; k++){
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800fcc6:	e01c      	b.n	800fd02 <kalmanCoreRobustUpdateWithDistance+0x466>
            P_chol[k][k] = P_chol[k][k] + dummy_value;
 800fcc8:	491c      	ldr	r1, [pc, #112]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fcca:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	00db      	lsls	r3, r3, #3
 800fcd6:	440b      	add	r3, r1
 800fcd8:	ed93 7a00 	vldr	s14, [r3]
 800fcdc:	edd7 7a60 	vldr	s15, [r7, #384]	@ 0x180
 800fce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fce4:	4915      	ldr	r1, [pc, #84]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fce6:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 800fcea:	4613      	mov	r3, r2
 800fcec:	009b      	lsls	r3, r3, #2
 800fcee:	4413      	add	r3, r2
 800fcf0:	00db      	lsls	r3, r3, #3
 800fcf2:	440b      	add	r3, r1
 800fcf4:	edc3 7a00 	vstr	s15, [r3]
        for (int k=0; k<KC_STATE_DIM; k++){
 800fcf8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800fd02:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800fd06:	2b08      	cmp	r3, #8
 800fd08:	ddde      	ble.n	800fcc8 <kalmanCoreRobustUpdateWithDistance+0x42c>
        }
        // keep P_chol
        memcpy(tmp1, P_chol, sizeof(tmp1));
 800fd0a:	4a15      	ldr	r2, [pc, #84]	@ (800fd60 <kalmanCoreRobustUpdateWithDistance+0x4c4>)
 800fd0c:	4b0b      	ldr	r3, [pc, #44]	@ (800fd3c <kalmanCoreRobustUpdateWithDistance+0x4a0>)
 800fd0e:	4610      	mov	r0, r2
 800fd10:	4619      	mov	r1, r3
 800fd12:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800fd16:	461a      	mov	r2, r3
 800fd18:	f006 fb32 	bl	8016380 <memcpy>
        mat_inv(&tmp1m, &Pc_inv_m);                            // Pc_inv_m = inv(Pc_m) = inv(P_chol)
 800fd1c:	4911      	ldr	r1, [pc, #68]	@ (800fd64 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 800fd1e:	4812      	ldr	r0, [pc, #72]	@ (800fd68 <kalmanCoreRobustUpdateWithDistance+0x4cc>)
 800fd20:	f7ff fc04 	bl	800f52c <mat_inv>
        mat_mult(&Pc_inv_m, &x_errm, &e_x_m);                  // e_x_m = Pc_inv_m.dot(x_errm) 
 800fd24:	4a11      	ldr	r2, [pc, #68]	@ (800fd6c <kalmanCoreRobustUpdateWithDistance+0x4d0>)
 800fd26:	4912      	ldr	r1, [pc, #72]	@ (800fd70 <kalmanCoreRobustUpdateWithDistance+0x4d4>)
 800fd28:	480e      	ldr	r0, [pc, #56]	@ (800fd64 <kalmanCoreRobustUpdateWithDistance+0x4c8>)
 800fd2a:	f7ff fc21 	bl	800f570 <mat_mult>

        // compute w_x, w_y --> weighting matrix
        // Since w_x is diagnal matrix, directly compute the inverse
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800fd2e:	2300      	movs	r3, #0
 800fd30:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800fd34:	e04f      	b.n	800fdd6 <kalmanCoreRobustUpdateWithDistance+0x53a>
 800fd36:	bf00      	nop
 800fd38:	20009688 	.word	0x20009688
 800fd3c:	200096ac 	.word	0x200096ac
 800fd40:	200000e8 	.word	0x200000e8
 800fd44:	200000e0 	.word	0x200000e0
 800fd48:	38d1b717 	.word	0x38d1b717
 800fd4c:	42c80000 	.word	0x42c80000
 800fd50:	42c80000 	.word	0x42c80000
 800fd54:	c2c80000 	.word	0xc2c80000
 800fd58:	c2c80000 	.word	0xc2c80000
 800fd5c:	3089705f 	.word	0x3089705f
 800fd60:	200097f0 	.word	0x200097f0
 800fd64:	200000f8 	.word	0x200000f8
 800fd68:	200000f0 	.word	0x200000f0
 800fd6c:	20000108 	.word	0x20000108
 800fd70:	20000100 	.word	0x20000100
            GM_state(e_x[state_k], &wx_inv[state_k][state_k]);
 800fd74:	4a93      	ldr	r2, [pc, #588]	@ (800ffc4 <kalmanCoreRobustUpdateWithDistance+0x728>)
 800fd76:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800fd7a:	009b      	lsls	r3, r3, #2
 800fd7c:	4413      	add	r3, r2
 800fd7e:	edd3 7a00 	vldr	s15, [r3]
 800fd82:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800fd86:	4613      	mov	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	00db      	lsls	r3, r3, #3
 800fd8e:	4a8e      	ldr	r2, [pc, #568]	@ (800ffc8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800fd90:	4413      	add	r3, r2
 800fd92:	4618      	mov	r0, r3
 800fd94:	eeb0 0a67 	vmov.f32	s0, s15
 800fd98:	f7ff fd59 	bl	800f84e <GM_state>
            wx_inv[state_k][state_k] = (float)1.0 / wx_inv[state_k][state_k];
 800fd9c:	498a      	ldr	r1, [pc, #552]	@ (800ffc8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800fd9e:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800fda2:	4613      	mov	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	4413      	add	r3, r2
 800fda8:	00db      	lsls	r3, r3, #3
 800fdaa:	440b      	add	r3, r1
 800fdac:	ed93 7a00 	vldr	s14, [r3]
 800fdb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fdb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fdb8:	4983      	ldr	r1, [pc, #524]	@ (800ffc8 <kalmanCoreRobustUpdateWithDistance+0x72c>)
 800fdba:	f8d7 21c4 	ldr.w	r2, [r7, #452]	@ 0x1c4
 800fdbe:	4613      	mov	r3, r2
 800fdc0:	009b      	lsls	r3, r3, #2
 800fdc2:	4413      	add	r3, r2
 800fdc4:	00db      	lsls	r3, r3, #3
 800fdc6:	440b      	add	r3, r1
 800fdc8:	edc3 7a00 	vstr	s15, [r3]
        for (int state_k = 0; state_k < KC_STATE_DIM; state_k++){
 800fdcc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800fdd6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800fdda:	2b08      	cmp	r3, #8
 800fddc:	ddca      	ble.n	800fd74 <kalmanCoreRobustUpdateWithDistance+0x4d8>
        }

        // rescale covariance matrix P 
        mat_mult(&Pc_m, &wx_invm, &Pc_w_invm);           // Pc_w_invm = P_chol.dot(linalg.inv(w_x))
 800fdde:	4a7b      	ldr	r2, [pc, #492]	@ (800ffcc <kalmanCoreRobustUpdateWithDistance+0x730>)
 800fde0:	497b      	ldr	r1, [pc, #492]	@ (800ffd0 <kalmanCoreRobustUpdateWithDistance+0x734>)
 800fde2:	487c      	ldr	r0, [pc, #496]	@ (800ffd4 <kalmanCoreRobustUpdateWithDistance+0x738>)
 800fde4:	f7ff fbc4 	bl	800f570 <mat_mult>
        mat_mult(&Pc_w_invm, &Pc_tran_m, &P_w_m);        // P_w_m = Pc_w_invm.dot(Pc_tran_m) = P_chol.dot(linalg.inv(w_x)).dot(P_chol.T)
 800fde8:	4a7b      	ldr	r2, [pc, #492]	@ (800ffd8 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800fdea:	497c      	ldr	r1, [pc, #496]	@ (800ffdc <kalmanCoreRobustUpdateWithDistance+0x740>)
 800fdec:	4877      	ldr	r0, [pc, #476]	@ (800ffcc <kalmanCoreRobustUpdateWithDistance+0x730>)
 800fdee:	f7ff fbbf 	bl	800f570 <mat_mult>

        // rescale R matrix                 
        float w_y=0.0;      float R_w = 0.0f;
 800fdf2:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800fdf6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800fdfa:	f04f 0200 	mov.w	r2, #0
 800fdfe:	601a      	str	r2, [r3, #0]
 800fe00:	f04f 0300 	mov.w	r3, #0
 800fe04:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
        GM_UWB(e_y, &w_y);                              // compute the weighted measurement error: w_y
 800fe08:	f107 030c 	add.w	r3, r7, #12
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	ed97 0a75 	vldr	s0, [r7, #468]	@ 0x1d4
 800fe12:	f7ff fcf6 	bl	800f802 <GM_UWB>
        if (fabsf(w_y - 0.0f) < 0.0001f){
 800fe16:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800fe1a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800fe1e:	edd3 7a00 	vldr	s15, [r3]
 800fe22:	eef0 7ae7 	vabs.f32	s15, s15
 800fe26:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 800ffe0 <kalmanCoreRobustUpdateWithDistance+0x744>
 800fe2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe32:	d50a      	bpl.n	800fe4a <kalmanCoreRobustUpdateWithDistance+0x5ae>
            R_w = (R_chol * R_chol) / 0.0001f;
 800fe34:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 800fe38:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800fe3c:	eddf 6a68 	vldr	s13, [pc, #416]	@ 800ffe0 <kalmanCoreRobustUpdateWithDistance+0x744>
 800fe40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe44:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
 800fe48:	e00d      	b.n	800fe66 <kalmanCoreRobustUpdateWithDistance+0x5ca>
        }
        else{
            R_w = (R_chol * R_chol) / w_y;
 800fe4a:	edd7 7a66 	vldr	s15, [r7, #408]	@ 0x198
 800fe4e:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fe52:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800fe56:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800fe5a:	ed93 7a00 	vldr	s14, [r3]
 800fe5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fe62:	edc7 7a70 	vstr	s15, [r7, #448]	@ 0x1c0
        }
        // ====== INNOVATION COVARIANCE ====== //

        mat_trans(&H, &HTm);
 800fe66:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 800fe6a:	495e      	ldr	r1, [pc, #376]	@ (800ffe4 <kalmanCoreRobustUpdateWithDistance+0x748>)
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7ff fb3b 	bl	800f4e8 <mat_trans>
        mat_mult(&P_w_m, &HTm, &PHTm);        // PHTm = P_w.dot(H.T). The P is the updated P_w 
 800fe72:	4a5d      	ldr	r2, [pc, #372]	@ (800ffe8 <kalmanCoreRobustUpdateWithDistance+0x74c>)
 800fe74:	495b      	ldr	r1, [pc, #364]	@ (800ffe4 <kalmanCoreRobustUpdateWithDistance+0x748>)
 800fe76:	4858      	ldr	r0, [pc, #352]	@ (800ffd8 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800fe78:	f7ff fb7a 	bl	800f570 <mat_mult>

        float HPHR = R_w;                     // HPH' + R.            The R is the updated R_w 
 800fe7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800fe80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 800fe84:	2300      	movs	r3, #0
 800fe86:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800fe8a:	e01c      	b.n	800fec6 <kalmanCoreRobustUpdateWithDistance+0x62a>
            HPHR += h[i]*PHTd[i];             // this only works if the update is scalar (as in this function)
 800fe8c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800fe90:	009b      	lsls	r3, r3, #2
 800fe92:	f503 73f0 	add.w	r3, r3, #480	@ 0x1e0
 800fe96:	443b      	add	r3, r7
 800fe98:	3b84      	subs	r3, #132	@ 0x84
 800fe9a:	ed93 7a00 	vldr	s14, [r3]
 800fe9e:	4a53      	ldr	r2, [pc, #332]	@ (800ffec <kalmanCoreRobustUpdateWithDistance+0x750>)
 800fea0:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	4413      	add	r3, r2
 800fea8:	edd3 7a00 	vldr	s15, [r3]
 800feac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800feb0:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 800feb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800feb8:	edc7 7a6f 	vstr	s15, [r7, #444]	@ 0x1bc
        for (int i=0; i<KC_STATE_DIM; i++) {  // Add the element of HPH' to the above
 800febc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800fec0:	3301      	adds	r3, #1
 800fec2:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
 800fec6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 800feca:	2b08      	cmp	r3, #8
 800fecc:	ddde      	ble.n	800fe8c <kalmanCoreRobustUpdateWithDistance+0x5f0>
        }
        // ====== MEASUREMENT UPDATE ======
        // Calculate the Kalman gain and perform the state update
        for (int i=0; i<KC_STATE_DIM; i++) {
 800fece:	2300      	movs	r3, #0
 800fed0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800fed4:	e043      	b.n	800ff5e <kalmanCoreRobustUpdateWithDistance+0x6c2>
            Kw[i] = PHTd[i]/HPHR;                     // rescaled kalman gain = (PH' (HPH' + R )^-1) with the updated P_w and R_w
 800fed6:	4a45      	ldr	r2, [pc, #276]	@ (800ffec <kalmanCoreRobustUpdateWithDistance+0x750>)
 800fed8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	4413      	add	r3, r2
 800fee0:	edd3 6a00 	vldr	s13, [r3]
 800fee4:	ed97 7a6f 	vldr	s14, [r7, #444]	@ 0x1bc
 800fee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800feec:	4a40      	ldr	r2, [pc, #256]	@ (800fff0 <kalmanCoreRobustUpdateWithDistance+0x754>)
 800feee:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800fef2:	009b      	lsls	r3, r3, #2
 800fef4:	4413      	add	r3, r2
 800fef6:	edc3 7a00 	vstr	s15, [r3]
            //[Note]: The error_check here is the innovation term based on x_check, which doesn't change during iterations.
            x_err[i] = Kw[i] * error_check;           // error state for next iteration
 800fefa:	4a3d      	ldr	r2, [pc, #244]	@ (800fff0 <kalmanCoreRobustUpdateWithDistance+0x754>)
 800fefc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	4413      	add	r3, r2
 800ff04:	ed93 7a00 	vldr	s14, [r3]
 800ff08:	edd7 7a67 	vldr	s15, [r7, #412]	@ 0x19c
 800ff0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff10:	4a38      	ldr	r2, [pc, #224]	@ (800fff4 <kalmanCoreRobustUpdateWithDistance+0x758>)
 800ff12:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	4413      	add	r3, r2
 800ff1a:	edc3 7a00 	vstr	s15, [r3]
            X_state[i] = this->S[i] + x_err[i];       // convert to nominal state
 800ff1e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ff22:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800ff26:	681a      	ldr	r2, [r3, #0]
 800ff28:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4413      	add	r3, r2
 800ff30:	ed93 7a00 	vldr	s14, [r3]
 800ff34:	4a2f      	ldr	r2, [pc, #188]	@ (800fff4 <kalmanCoreRobustUpdateWithDistance+0x758>)
 800ff36:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff3a:	009b      	lsls	r3, r3, #2
 800ff3c:	4413      	add	r3, r2
 800ff3e:	edd3 7a00 	vldr	s15, [r3]
 800ff42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ff46:	4a2c      	ldr	r2, [pc, #176]	@ (800fff8 <kalmanCoreRobustUpdateWithDistance+0x75c>)
 800ff48:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff4c:	009b      	lsls	r3, r3, #2
 800ff4e:	4413      	add	r3, r2
 800ff50:	edc3 7a00 	vstr	s15, [r3]
        for (int i=0; i<KC_STATE_DIM; i++) {
 800ff54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff58:	3301      	adds	r3, #1
 800ff5a:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 800ff5e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800ff62:	2b08      	cmp	r3, #8
 800ff64:	ddb7      	ble.n	800fed6 <kalmanCoreRobustUpdateWithDistance+0x63a>
        }
        // update P_iter matrix and R matrix for next iteration
        memcpy(P_iter, P_w, sizeof(P_iter));
 800ff66:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ff6a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800ff6e:	4a23      	ldr	r2, [pc, #140]	@ (800fffc <kalmanCoreRobustUpdateWithDistance+0x760>)
 800ff70:	4618      	mov	r0, r3
 800ff72:	4611      	mov	r1, r2
 800ff74:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800ff78:	461a      	mov	r2, r3
 800ff7a:	f006 fa01 	bl	8016380 <memcpy>
        R_iter = R_w;
 800ff7e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800ff82:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
    for (int iter = 0; iter < MAX_ITER; iter++){
 800ff86:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800ff8a:	3301      	adds	r3, #1
 800ff8c:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800ff90:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 800ff94:	2b01      	cmp	r3, #1
 800ff96:	f77f ad37 	ble.w	800fa08 <kalmanCoreRobustUpdateWithDistance+0x16c>
    }


    // After n iterations, we obtain the rescaled (1) P = P_iter, (2) R = R_iter, (3) Kw.
    // Call the kalman update function with weighted P, weighted K, h, and error_check
    kalmanCoreUpdateWithPKE(this, &H, &Kwm, &P_w_m, error_check);
 800ff9a:	f507 71aa 	add.w	r1, r7, #340	@ 0x154
 800ff9e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800ffa2:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 800ffa6:	ed97 0a67 	vldr	s0, [r7, #412]	@ 0x19c
 800ffaa:	4b0b      	ldr	r3, [pc, #44]	@ (800ffd8 <kalmanCoreRobustUpdateWithDistance+0x73c>)
 800ffac:	4a14      	ldr	r2, [pc, #80]	@ (8010000 <kalmanCoreRobustUpdateWithDistance+0x764>)
 800ffae:	6800      	ldr	r0, [r0, #0]
 800ffb0:	f7fc ff1e 	bl	800cdf0 <kalmanCoreUpdateWithPKE>

}  
 800ffb4:	bf00      	nop
 800ffb6:	f507 77f0 	add.w	r7, r7, #480	@ 0x1e0
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	ecbd 8b02 	vpop	{d8}
 800ffc0:	bd80      	pop	{r7, pc}
 800ffc2:	bf00      	nop
 800ffc4:	20009934 	.word	0x20009934
 800ffc8:	20009958 	.word	0x20009958
 800ffcc:	20000118 	.word	0x20000118
 800ffd0:	20000110 	.word	0x20000110
 800ffd4:	200000e0 	.word	0x200000e0
 800ffd8:	20000120 	.word	0x20000120
 800ffdc:	200000e8 	.word	0x200000e8
 800ffe0:	38d1b717 	.word	0x38d1b717
 800ffe4:	20000128 	.word	0x20000128
 800ffe8:	20000130 	.word	0x20000130
 800ffec:	20009a9c 	.word	0x20009a9c
 800fff0:	20009ac0 	.word	0x20009ac0
 800fff4:	20009ae4 	.word	0x20009ae4
 800fff8:	20009688 	.word	0x20009688
 800fffc:	20009b08 	.word	0x20009b08
 8010000:	20000138 	.word	0x20000138

08010004 <kalmanCoreUpdateWithFlow>:
static float predictedNY;
static float measuredNX;
static float measuredNY;

void kalmanCoreUpdateWithFlow(kalmanCoreData_t* this, const flowMeasurement_t *flow, const Axis3f *gyro)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b0a2      	sub	sp, #136	@ 0x88
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
  // Inclusion of flow measurements in the EKF done by two scalar updates

  // ~~~ Camera constants ~~~
  // The angle of aperture is guessed from the raw data register and thankfully look to be symmetric
  float Npix = 35.0;                      // [pixels] (same in x and y)
 8010010:	4ba2      	ldr	r3, [pc, #648]	@ (801029c <kalmanCoreUpdateWithFlow+0x298>)
 8010012:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  //float thetapix = DEG_TO_RAD * 4.0f;     // [rad]    (same in x and y)
  float thetapix = 0.71674f;// 2*sin(42/2); 42degree is the agnle of aperture, here we computed the corresponding ground length
 8010016:	4ba2      	ldr	r3, [pc, #648]	@ (80102a0 <kalmanCoreUpdateWithFlow+0x29c>)
 8010018:	67fb      	str	r3, [r7, #124]	@ 0x7c
  //~~~ Body rates ~~~
  // TODO check if this is feasible or if some filtering has to be done
  float omegax_b = gyro->x * DEG_TO_RAD;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	edd3 7a00 	vldr	s15, [r3]
 8010020:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 80102a4 <kalmanCoreUpdateWithFlow+0x2a0>
 8010024:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010028:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float omegay_b = gyro->y * DEG_TO_RAD;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	edd3 7a01 	vldr	s15, [r3, #4]
 8010032:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 80102a4 <kalmanCoreUpdateWithFlow+0x2a0>
 8010036:	ee67 7a87 	vmul.f32	s15, s15, s14
 801003a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  // Modification 1
  //dx_g = R[0][0] * S[KC_STATE_PX] + R[0][1] * S[KC_STATE_PY] + R[0][2] * S[KC_STATE_PZ];
  //dy_g = R[1][0] * S[KC_STATE_PX] + R[1][1] * S[KC_STATE_PY] + R[1][2] * S[KC_STATE_PZ];


  float dx_g = this->S[KC_STATE_PX];
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	673b      	str	r3, [r7, #112]	@ 0x70
  float dy_g = this->S[KC_STATE_PY];
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float z_g = 0.0;
 801004a:	f04f 0300 	mov.w	r3, #0
 801004e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  // Saturate elevation in prediction and correction to avoid singularities
  if ( this->S[KC_STATE_Z] < 0.1f ) {
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	edd3 7a02 	vldr	s15, [r3, #8]
 8010058:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80102a8 <kalmanCoreUpdateWithFlow+0x2a4>
 801005c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010064:	d503      	bpl.n	801006e <kalmanCoreUpdateWithFlow+0x6a>
      z_g = 0.1;
 8010066:	4b91      	ldr	r3, [pc, #580]	@ (80102ac <kalmanCoreUpdateWithFlow+0x2a8>)
 8010068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801006c:	e003      	b.n	8010076 <kalmanCoreUpdateWithFlow+0x72>
  } else {
      z_g = this->S[KC_STATE_Z];
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  }

  // ~~~ X velocity prediction and update ~~~
  // predicts the number of accumulated pixels in the x-direction
  float hx[KC_STATE_DIM] = {0};
 8010076:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801007a:	2224      	movs	r2, #36	@ 0x24
 801007c:	2100      	movs	r1, #0
 801007e:	4618      	mov	r0, r3
 8010080:	f006 f938 	bl	80162f4 <memset>
  arm_matrix_instance_f32 Hx = {1, KC_STATE_DIM, hx};
 8010084:	2301      	movs	r3, #1
 8010086:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 801008a:	2309      	movs	r3, #9
 801008c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8010090:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8010094:	647b      	str	r3, [r7, #68]	@ 0x44
  predictedNX = (flow->dt * Npix / thetapix ) * ((dx_g * this->R[2][2] / z_g) - omegay_b);
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	ed93 7a05 	vldr	s14, [r3, #20]
 801009c:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80100a0:	ee67 6a27 	vmul.f32	s13, s14, s15
 80100a4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80100a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80100b2:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80100b6:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80100ba:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80100be:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80100c2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80100c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80100ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80100ce:	4b78      	ldr	r3, [pc, #480]	@ (80102b0 <kalmanCoreUpdateWithFlow+0x2ac>)
 80100d0:	edc3 7a00 	vstr	s15, [r3]
  measuredNX = flow->dpixelx*FLOW_RESOLUTION;
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80100da:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 80102a8 <kalmanCoreUpdateWithFlow+0x2a4>
 80100de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80100e2:	4b74      	ldr	r3, [pc, #464]	@ (80102b4 <kalmanCoreUpdateWithFlow+0x2b0>)
 80100e4:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dx (and z?)
  hx[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dx_g) / (-z_g * z_g));
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	ed93 7a05 	vldr	s14, [r3, #20]
 80100ee:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80100f2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80100f6:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80100fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8010104:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8010108:	ee26 6aa7 	vmul.f32	s12, s13, s15
 801010c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010110:	eef1 6a67 	vneg.f32	s13, s15
 8010114:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010118:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801011c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010124:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
  hx[KC_STATE_PX] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	ed93 7a05 	vldr	s14, [r3, #20]
 801012e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8010132:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010136:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 801013a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8010144:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8010148:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801014c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010150:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

  //First update
  kalmanCoreScalarUpdate(this, &Hx, (measuredNX-predictedNX), flow->stdDevX*FLOW_RESOLUTION);
 8010154:	4b57      	ldr	r3, [pc, #348]	@ (80102b4 <kalmanCoreUpdateWithFlow+0x2b0>)
 8010156:	ed93 7a00 	vldr	s14, [r3]
 801015a:	4b55      	ldr	r3, [pc, #340]	@ (80102b0 <kalmanCoreUpdateWithFlow+0x2ac>)
 801015c:	edd3 7a00 	vldr	s15, [r3]
 8010160:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	edd3 7a03 	vldr	s15, [r3, #12]
 801016a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80102a8 <kalmanCoreUpdateWithFlow+0x2a4>
 801016e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010172:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8010176:	eef0 0a67 	vmov.f32	s1, s15
 801017a:	eeb0 0a47 	vmov.f32	s0, s14
 801017e:	4619      	mov	r1, r3
 8010180:	68f8      	ldr	r0, [r7, #12]
 8010182:	f7fc fc35 	bl	800c9f0 <kalmanCoreScalarUpdate>

  // ~~~ Y velocity prediction and update ~~~
  float hy[KC_STATE_DIM] = {0};
 8010186:	f107 031c 	add.w	r3, r7, #28
 801018a:	2224      	movs	r2, #36	@ 0x24
 801018c:	2100      	movs	r1, #0
 801018e:	4618      	mov	r0, r3
 8010190:	f006 f8b0 	bl	80162f4 <memset>
  arm_matrix_instance_f32 Hy = {1, KC_STATE_DIM, hy};
 8010194:	2301      	movs	r3, #1
 8010196:	82bb      	strh	r3, [r7, #20]
 8010198:	2309      	movs	r3, #9
 801019a:	82fb      	strh	r3, [r7, #22]
 801019c:	f107 031c 	add.w	r3, r7, #28
 80101a0:	61bb      	str	r3, [r7, #24]
  predictedNY = (flow->dt * Npix / thetapix ) * ((dy_g * this->R[2][2] / z_g) + omegax_b);
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80101a8:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80101ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80101b0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80101b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 80101be:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80101c2:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80101c6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80101ca:	eec6 6a27 	vdiv.f32	s13, s12, s15
 80101ce:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80101d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80101d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80101da:	4b37      	ldr	r3, [pc, #220]	@ (80102b8 <kalmanCoreUpdateWithFlow+0x2b4>)
 80101dc:	edc3 7a00 	vstr	s15, [r3]
  measuredNY = flow->dpixely*FLOW_RESOLUTION;
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80101e6:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80102a8 <kalmanCoreUpdateWithFlow+0x2a4>
 80101ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101ee:	4b33      	ldr	r3, [pc, #204]	@ (80102bc <kalmanCoreUpdateWithFlow+0x2b8>)
 80101f0:	edc3 7a00 	vstr	s15, [r3]

  // derive measurement equation with respect to dy (and z?)
  hy[KC_STATE_Z] = (Npix * flow->dt / thetapix) * ((this->R[2][2] * dy_g) / (-z_g * z_g));
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	ed93 7a05 	vldr	s14, [r3, #20]
 80101fa:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80101fe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010202:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8010206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	edd3 6a15 	vldr	s13, [r3, #84]	@ 0x54
 8010210:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8010214:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8010218:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 801021c:	eef1 6a67 	vneg.f32	s13, s15
 8010220:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010224:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8010228:	eec6 7a26 	vdiv.f32	s15, s12, s13
 801022c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010230:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
  hy[KC_STATE_PY] = (Npix * flow->dt / thetapix) * (this->R[2][2] / z_g);
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	ed93 7a05 	vldr	s14, [r3, #20]
 801023a:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 801023e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010242:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8010246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8010250:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8010254:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8010258:	ee67 7a27 	vmul.f32	s15, s14, s15
 801025c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  // Second update
  kalmanCoreScalarUpdate(this, &Hy, (measuredNY-predictedNY), flow->stdDevY*FLOW_RESOLUTION);
 8010260:	4b16      	ldr	r3, [pc, #88]	@ (80102bc <kalmanCoreUpdateWithFlow+0x2b8>)
 8010262:	ed93 7a00 	vldr	s14, [r3]
 8010266:	4b14      	ldr	r3, [pc, #80]	@ (80102b8 <kalmanCoreUpdateWithFlow+0x2b4>)
 8010268:	edd3 7a00 	vldr	s15, [r3]
 801026c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010270:	68bb      	ldr	r3, [r7, #8]
 8010272:	edd3 7a04 	vldr	s15, [r3, #16]
 8010276:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80102a8 <kalmanCoreUpdateWithFlow+0x2a4>
 801027a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801027e:	f107 0314 	add.w	r3, r7, #20
 8010282:	eef0 0a67 	vmov.f32	s1, s15
 8010286:	eeb0 0a47 	vmov.f32	s0, s14
 801028a:	4619      	mov	r1, r3
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f7fc fbaf 	bl	800c9f0 <kalmanCoreScalarUpdate>
}
 8010292:	bf00      	nop
 8010294:	3788      	adds	r7, #136	@ 0x88
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	420c0000 	.word	0x420c0000
 80102a0:	3f377c46 	.word	0x3f377c46
 80102a4:	3c8efa35 	.word	0x3c8efa35
 80102a8:	3dcccccd 	.word	0x3dcccccd
 80102ac:	3dcccccd 	.word	0x3dcccccd
 80102b0:	2000a03c 	.word	0x2000a03c
 80102b4:	2000a044 	.word	0x2000a044
 80102b8:	2000a040 	.word	0x2000a040
 80102bc:	2000a048 	.word	0x2000a048

080102c0 <mkvec>:
//
// constructors
//

// construct a vector from 3 floats.
static inline struct vec mkvec(float x, float y, float z) {
 80102c0:	b480      	push	{r7}
 80102c2:	b08f      	sub	sp, #60	@ 0x3c
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	ed87 0a07 	vstr	s0, [r7, #28]
 80102ca:	edc7 0a06 	vstr	s1, [r7, #24]
 80102ce:	ed87 1a05 	vstr	s2, [r7, #20]
	struct vec v;
	v.x = x; v.y = y; v.z = z;
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	623b      	str	r3, [r7, #32]
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	62bb      	str	r3, [r7, #40]	@ 0x28
	return v;
 80102de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80102e2:	f107 0220 	add.w	r2, r7, #32
 80102e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80102e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80102ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80102f2:	ee06 1a90 	vmov	s13, r1
 80102f6:	ee07 2a10 	vmov	s14, r2
 80102fa:	ee07 3a90 	vmov	s15, r3
}
 80102fe:	eeb0 0a66 	vmov.f32	s0, s13
 8010302:	eef0 0a47 	vmov.f32	s1, s14
 8010306:	eeb0 1a67 	vmov.f32	s2, s15
 801030a:	373c      	adds	r7, #60	@ 0x3c
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <vscl>:
//
// operators
//

// multiply a vector by a scalar.
static inline struct vec vscl(float s, struct vec v) {
 8010314:	b580      	push	{r7, lr}
 8010316:	b08c      	sub	sp, #48	@ 0x30
 8010318:	af00      	add	r7, sp, #0
 801031a:	ed87 0a07 	vstr	s0, [r7, #28]
 801031e:	eef0 6a60 	vmov.f32	s13, s1
 8010322:	eeb0 7a41 	vmov.f32	s14, s2
 8010326:	eef0 7a61 	vmov.f32	s15, s3
 801032a:	edc7 6a04 	vstr	s13, [r7, #16]
 801032e:	ed87 7a05 	vstr	s14, [r7, #20]
 8010332:	edc7 7a06 	vstr	s15, [r7, #24]
	return mkvec(s * v.x , s * v.y, s * v.z);
 8010336:	ed97 7a04 	vldr	s14, [r7, #16]
 801033a:	edd7 7a07 	vldr	s15, [r7, #28]
 801033e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8010342:	ed97 7a05 	vldr	s14, [r7, #20]
 8010346:	edd7 7a07 	vldr	s15, [r7, #28]
 801034a:	ee27 6a27 	vmul.f32	s12, s14, s15
 801034e:	ed97 7a06 	vldr	s14, [r7, #24]
 8010352:	edd7 7a07 	vldr	s15, [r7, #28]
 8010356:	ee67 7a27 	vmul.f32	s15, s14, s15
 801035a:	eeb0 1a67 	vmov.f32	s2, s15
 801035e:	eef0 0a46 	vmov.f32	s1, s12
 8010362:	eeb0 0a66 	vmov.f32	s0, s13
 8010366:	f7ff ffab 	bl	80102c0 <mkvec>
 801036a:	eef0 6a40 	vmov.f32	s13, s0
 801036e:	eeb0 7a60 	vmov.f32	s14, s1
 8010372:	eef0 7a41 	vmov.f32	s15, s2
 8010376:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 801037a:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 801037e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8010382:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010384:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010388:	ee06 1a90 	vmov	s13, r1
 801038c:	ee07 2a10 	vmov	s14, r2
 8010390:	ee07 3a90 	vmov	s15, r3
}
 8010394:	eeb0 0a66 	vmov.f32	s0, s13
 8010398:	eef0 0a47 	vmov.f32	s1, s14
 801039c:	eeb0 1a67 	vmov.f32	s2, s15
 80103a0:	3730      	adds	r7, #48	@ 0x30
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}

080103a6 <mkquat>:
//
// constructors
//

// construct a quaternion from its x, y, z, w elements.
static inline struct quat mkquat(float x, float y, float z, float w) {
 80103a6:	b490      	push	{r4, r7}
 80103a8:	b090      	sub	sp, #64	@ 0x40
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	ed87 0a07 	vstr	s0, [r7, #28]
 80103b0:	edc7 0a06 	vstr	s1, [r7, #24]
 80103b4:	ed87 1a05 	vstr	s2, [r7, #20]
 80103b8:	edc7 1a04 	vstr	s3, [r7, #16]
	struct quat q;
	q.x = x; q.y = y; q.z = z; q.w = w;
 80103bc:	69fb      	ldr	r3, [r7, #28]
 80103be:	623b      	str	r3, [r7, #32]
 80103c0:	69bb      	ldr	r3, [r7, #24]
 80103c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	return q;
 80103cc:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 80103d0:	f107 0320 	add.w	r3, r7, #32
 80103d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80103d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80103da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80103dc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80103de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103e2:	ee06 0a10 	vmov	s12, r0
 80103e6:	ee06 1a90 	vmov	s13, r1
 80103ea:	ee07 2a10 	vmov	s14, r2
 80103ee:	ee07 3a90 	vmov	s15, r3
}
 80103f2:	eeb0 0a46 	vmov.f32	s0, s12
 80103f6:	eef0 0a66 	vmov.f32	s1, s13
 80103fa:	eeb0 1a47 	vmov.f32	s2, s14
 80103fe:	eef0 1a67 	vmov.f32	s3, s15
 8010402:	3740      	adds	r7, #64	@ 0x40
 8010404:	46bd      	mov	sp, r7
 8010406:	bc90      	pop	{r4, r7}
 8010408:	4770      	bx	lr

0801040a <quatimagpart>:
		angle -= 2.0f * M_PI_F;
	}
	return angle;
}
// vector containing the imaginary part of the quaternion, i.e. (x, y, z)
static inline struct vec quatimagpart(struct quat q) {
 801040a:	b580      	push	{r7, lr}
 801040c:	b08c      	sub	sp, #48	@ 0x30
 801040e:	af00      	add	r7, sp, #0
 8010410:	eeb0 6a40 	vmov.f32	s12, s0
 8010414:	eef0 6a60 	vmov.f32	s13, s1
 8010418:	eeb0 7a41 	vmov.f32	s14, s2
 801041c:	eef0 7a61 	vmov.f32	s15, s3
 8010420:	ed87 6a04 	vstr	s12, [r7, #16]
 8010424:	edc7 6a05 	vstr	s13, [r7, #20]
 8010428:	ed87 7a06 	vstr	s14, [r7, #24]
 801042c:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkvec(q.x, q.y, q.z);
 8010430:	edd7 7a04 	vldr	s15, [r7, #16]
 8010434:	ed97 7a05 	vldr	s14, [r7, #20]
 8010438:	edd7 6a06 	vldr	s13, [r7, #24]
 801043c:	eeb0 1a66 	vmov.f32	s2, s13
 8010440:	eef0 0a47 	vmov.f32	s1, s14
 8010444:	eeb0 0a67 	vmov.f32	s0, s15
 8010448:	f7ff ff3a 	bl	80102c0 <mkvec>
 801044c:	eef0 6a40 	vmov.f32	s13, s0
 8010450:	eeb0 7a60 	vmov.f32	s14, s1
 8010454:	eef0 7a41 	vmov.f32	s15, s2
 8010458:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 801045c:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8010460:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 8010464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010466:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046a:	ee06 1a90 	vmov	s13, r1
 801046e:	ee07 2a10 	vmov	s14, r2
 8010472:	ee07 3a90 	vmov	s15, r3
}
 8010476:	eeb0 0a66 	vmov.f32	s0, s13
 801047a:	eef0 0a47 	vmov.f32	s1, s14
 801047e:	eeb0 1a67 	vmov.f32	s2, s15
 8010482:	3730      	adds	r7, #48	@ 0x30
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <qqmul>:
		vscl(2.0f * q.w, vcross(qv, v))
	);
}
// multiply (compose) two quaternions
// such that qvrot(qqmul(q, p), v) == qvrot(q, qvrot(p, v)).
static inline struct quat qqmul(struct quat q, struct quat p) {
 8010488:	b580      	push	{r7, lr}
 801048a:	b094      	sub	sp, #80	@ 0x50
 801048c:	af00      	add	r7, sp, #0
 801048e:	eeb0 4a40 	vmov.f32	s8, s0
 8010492:	eef0 4a60 	vmov.f32	s9, s1
 8010496:	eeb0 5a41 	vmov.f32	s10, s2
 801049a:	eef0 5a61 	vmov.f32	s11, s3
 801049e:	eeb0 6a42 	vmov.f32	s12, s4
 80104a2:	eef0 6a62 	vmov.f32	s13, s5
 80104a6:	eeb0 7a43 	vmov.f32	s14, s6
 80104aa:	eef0 7a63 	vmov.f32	s15, s7
 80104ae:	ed87 4a08 	vstr	s8, [r7, #32]
 80104b2:	edc7 4a09 	vstr	s9, [r7, #36]	@ 0x24
 80104b6:	ed87 5a0a 	vstr	s10, [r7, #40]	@ 0x28
 80104ba:	edc7 5a0b 	vstr	s11, [r7, #44]	@ 0x2c
 80104be:	ed87 6a04 	vstr	s12, [r7, #16]
 80104c2:	edc7 6a05 	vstr	s13, [r7, #20]
 80104c6:	ed87 7a06 	vstr	s14, [r7, #24]
 80104ca:	edc7 7a07 	vstr	s15, [r7, #28]
	float x =  q.w*p.x + q.z*p.y - q.y*p.z + q.x*p.w;
 80104ce:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80104d2:	edd7 7a04 	vldr	s15, [r7, #16]
 80104d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80104da:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80104de:	edd7 7a05 	vldr	s15, [r7, #20]
 80104e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80104ea:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80104ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80104f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80104f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80104fa:	edd7 6a08 	vldr	s13, [r7, #32]
 80104fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8010502:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010506:	ee77 7a27 	vadd.f32	s15, s14, s15
 801050a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
	float y = -q.z*p.x + q.w*p.y + q.x*p.z + q.y*p.w;
 801050e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8010512:	eeb1 7a67 	vneg.f32	s14, s15
 8010516:	edd7 7a04 	vldr	s15, [r7, #16]
 801051a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801051e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8010522:	edd7 7a05 	vldr	s15, [r7, #20]
 8010526:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801052a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801052e:	edd7 6a08 	vldr	s13, [r7, #32]
 8010532:	edd7 7a06 	vldr	s15, [r7, #24]
 8010536:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801053a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801053e:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8010542:	edd7 7a07 	vldr	s15, [r7, #28]
 8010546:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801054a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801054e:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	float z =  q.y*p.x - q.x*p.y + q.w*p.z + q.z*p.w;
 8010552:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8010556:	edd7 7a04 	vldr	s15, [r7, #16]
 801055a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801055e:	edd7 6a08 	vldr	s13, [r7, #32]
 8010562:	edd7 7a05 	vldr	s15, [r7, #20]
 8010566:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801056a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801056e:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8010572:	edd7 7a06 	vldr	s15, [r7, #24]
 8010576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801057a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801057e:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8010582:	edd7 7a07 	vldr	s15, [r7, #28]
 8010586:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801058a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801058e:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	float w = -q.x*p.x - q.y*p.y - q.z*p.z + q.w*p.w;
 8010592:	edd7 7a08 	vldr	s15, [r7, #32]
 8010596:	eeb1 7a67 	vneg.f32	s14, s15
 801059a:	edd7 7a04 	vldr	s15, [r7, #16]
 801059e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105a2:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80105a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80105aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105b2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 80105b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80105ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80105c2:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 80105c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80105ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105d2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
	return mkquat(x, y, z, w);
 80105d6:	edd7 1a10 	vldr	s3, [r7, #64]	@ 0x40
 80105da:	ed97 1a11 	vldr	s2, [r7, #68]	@ 0x44
 80105de:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 80105e2:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 80105e6:	f7ff fede 	bl	80103a6 <mkquat>
 80105ea:	eeb0 6a40 	vmov.f32	s12, s0
 80105ee:	eef0 6a60 	vmov.f32	s13, s1
 80105f2:	eeb0 7a41 	vmov.f32	s14, s2
 80105f6:	eef0 7a61 	vmov.f32	s15, s3
 80105fa:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 80105fe:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8010602:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8010606:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
 801060a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801060c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801060e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010612:	ee06 0a10 	vmov	s12, r0
 8010616:	ee06 1a90 	vmov	s13, r1
 801061a:	ee07 2a10 	vmov	s14, r2
 801061e:	ee07 3a90 	vmov	s15, r3
}
 8010622:	eeb0 0a46 	vmov.f32	s0, s12
 8010626:	eef0 0a66 	vmov.f32	s1, s13
 801062a:	eeb0 1a47 	vmov.f32	s2, s14
 801062e:	eef0 1a67 	vmov.f32	s3, s15
 8010632:	3750      	adds	r7, #80	@ 0x50
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}

08010638 <qinv>:
// invert a quaternion.
static inline struct quat qinv(struct quat q) {
 8010638:	b580      	push	{r7, lr}
 801063a:	b08c      	sub	sp, #48	@ 0x30
 801063c:	af00      	add	r7, sp, #0
 801063e:	eeb0 6a40 	vmov.f32	s12, s0
 8010642:	eef0 6a60 	vmov.f32	s13, s1
 8010646:	eeb0 7a41 	vmov.f32	s14, s2
 801064a:	eef0 7a61 	vmov.f32	s15, s3
 801064e:	ed87 6a04 	vstr	s12, [r7, #16]
 8010652:	edc7 6a05 	vstr	s13, [r7, #20]
 8010656:	ed87 7a06 	vstr	s14, [r7, #24]
 801065a:	edc7 7a07 	vstr	s15, [r7, #28]
	return mkquat(-q.x, -q.y, -q.z, q.w);
 801065e:	edd7 7a04 	vldr	s15, [r7, #16]
 8010662:	eeb1 7a67 	vneg.f32	s14, s15
 8010666:	edd7 7a05 	vldr	s15, [r7, #20]
 801066a:	eef1 6a67 	vneg.f32	s13, s15
 801066e:	edd7 7a06 	vldr	s15, [r7, #24]
 8010672:	eef1 7a67 	vneg.f32	s15, s15
 8010676:	ed97 6a07 	vldr	s12, [r7, #28]
 801067a:	eef0 1a46 	vmov.f32	s3, s12
 801067e:	eeb0 1a67 	vmov.f32	s2, s15
 8010682:	eef0 0a66 	vmov.f32	s1, s13
 8010686:	eeb0 0a47 	vmov.f32	s0, s14
 801068a:	f7ff fe8c 	bl	80103a6 <mkquat>
 801068e:	eeb0 6a40 	vmov.f32	s12, s0
 8010692:	eef0 6a60 	vmov.f32	s13, s1
 8010696:	eeb0 7a41 	vmov.f32	s14, s2
 801069a:	eef0 7a61 	vmov.f32	s15, s3
 801069e:	ed87 6a08 	vstr	s12, [r7, #32]
 80106a2:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 80106a6:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 80106aa:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
 80106ae:	6a38      	ldr	r0, [r7, #32]
 80106b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80106b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80106b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b6:	ee06 0a10 	vmov	s12, r0
 80106ba:	ee06 1a90 	vmov	s13, r1
 80106be:	ee07 2a10 	vmov	s14, r2
 80106c2:	ee07 3a90 	vmov	s15, r3
}
 80106c6:	eeb0 0a46 	vmov.f32	s0, s12
 80106ca:	eef0 0a66 	vmov.f32	s1, s13
 80106ce:	eeb0 1a47 	vmov.f32	s2, s14
 80106d2:	eef0 1a67 	vmov.f32	s3, s15
 80106d6:	3730      	adds	r7, #48	@ 0x30
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}

080106dc <kalmanCoreUpdateWithPose>:

#include "mm_pose.h"
#include "math3d.h"

void kalmanCoreUpdateWithPose(kalmanCoreData_t* this, poseMeasurement_t *pose)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	ed2d 8b02 	vpush	{d8}
 80106e2:	b0a6      	sub	sp, #152	@ 0x98
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
 80106e8:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z, and orientation
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 80106ea:	2300      	movs	r3, #0
 80106ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80106f0:	e038      	b.n	8010764 <kalmanCoreUpdateWithPose+0x88>
    float h[KC_STATE_DIM] = {0};
 80106f2:	f107 0308 	add.w	r3, r7, #8
 80106f6:	2224      	movs	r2, #36	@ 0x24
 80106f8:	2100      	movs	r1, #0
 80106fa:	4618      	mov	r0, r3
 80106fc:	f005 fdfa 	bl	80162f4 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8010700:	2301      	movs	r3, #1
 8010702:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8010704:	2309      	movs	r3, #9
 8010706:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8010708:	f107 0308 	add.w	r3, r7, #8
 801070c:	63bb      	str	r3, [r7, #56]	@ 0x38
    h[KC_STATE_X+i] = 1;
 801070e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010712:	009b      	lsls	r3, r3, #2
 8010714:	3398      	adds	r3, #152	@ 0x98
 8010716:	443b      	add	r3, r7
 8010718:	3b90      	subs	r3, #144	@ 0x90
 801071a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 801071e:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, pose->pos[i] - this->S[KC_STATE_X+i], pose->stdDevPos);
 8010720:	683a      	ldr	r2, [r7, #0]
 8010722:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	4413      	add	r3, r2
 801072a:	ed93 7a00 	vldr	s14, [r3]
 801072e:	687a      	ldr	r2, [r7, #4]
 8010730:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	4413      	add	r3, r2
 8010738:	edd3 7a00 	vldr	s15, [r3]
 801073c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	ed93 7a07 	vldr	s14, [r3, #28]
 8010746:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801074a:	eef0 0a47 	vmov.f32	s1, s14
 801074e:	eeb0 0a67 	vmov.f32	s0, s15
 8010752:	4619      	mov	r1, r3
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f7fc f94b 	bl	800c9f0 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 801075a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801075e:	3301      	adds	r3, #1
 8010760:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010764:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8010768:	2b02      	cmp	r3, #2
 801076a:	ddc2      	ble.n	80106f2 <kalmanCoreUpdateWithPose+0x16>
  }

  // compute orientation error
  struct quat const q_ekf = mkquat(this->q[1], this->q[2], this->q[3], this->q[0]);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	ed93 6a09 	vldr	s12, [r3, #36]	@ 0x24
 8010784:	eef0 1a46 	vmov.f32	s3, s12
 8010788:	eeb0 1a66 	vmov.f32	s2, s13
 801078c:	eef0 0a47 	vmov.f32	s1, s14
 8010790:	eeb0 0a67 	vmov.f32	s0, s15
 8010794:	f7ff fe07 	bl	80103a6 <mkquat>
 8010798:	eeb0 6a40 	vmov.f32	s12, s0
 801079c:	eef0 6a60 	vmov.f32	s13, s1
 80107a0:	eeb0 7a41 	vmov.f32	s14, s2
 80107a4:	eef0 7a61 	vmov.f32	s15, s3
 80107a8:	ed87 6a1a 	vstr	s12, [r7, #104]	@ 0x68
 80107ac:	edc7 6a1b 	vstr	s13, [r7, #108]	@ 0x6c
 80107b0:	ed87 7a1c 	vstr	s14, [r7, #112]	@ 0x70
 80107b4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  struct quat const q_measured = mkquat(pose->quat.x, pose->quat.y, pose->quat.z, pose->quat.w);
 80107b8:	683b      	ldr	r3, [r7, #0]
 80107ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	ed93 7a04 	vldr	s14, [r3, #16]
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	edd3 6a05 	vldr	s13, [r3, #20]
 80107ca:	683b      	ldr	r3, [r7, #0]
 80107cc:	ed93 6a06 	vldr	s12, [r3, #24]
 80107d0:	eef0 1a46 	vmov.f32	s3, s12
 80107d4:	eeb0 1a66 	vmov.f32	s2, s13
 80107d8:	eef0 0a47 	vmov.f32	s1, s14
 80107dc:	eeb0 0a67 	vmov.f32	s0, s15
 80107e0:	f7ff fde1 	bl	80103a6 <mkquat>
 80107e4:	eeb0 6a40 	vmov.f32	s12, s0
 80107e8:	eef0 6a60 	vmov.f32	s13, s1
 80107ec:	eeb0 7a41 	vmov.f32	s14, s2
 80107f0:	eef0 7a61 	vmov.f32	s15, s3
 80107f4:	ed87 6a16 	vstr	s12, [r7, #88]	@ 0x58
 80107f8:	edc7 6a17 	vstr	s13, [r7, #92]	@ 0x5c
 80107fc:	ed87 7a18 	vstr	s14, [r7, #96]	@ 0x60
 8010800:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
  struct quat const q_residual = qqmul(qinv(q_ekf), q_measured);
 8010804:	ed97 6a1a 	vldr	s12, [r7, #104]	@ 0x68
 8010808:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 801080c:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8010810:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8010814:	eeb0 0a46 	vmov.f32	s0, s12
 8010818:	eef0 0a66 	vmov.f32	s1, s13
 801081c:	eeb0 1a47 	vmov.f32	s2, s14
 8010820:	eef0 1a67 	vmov.f32	s3, s15
 8010824:	f7ff ff08 	bl	8010638 <qinv>
 8010828:	eeb0 6a40 	vmov.f32	s12, s0
 801082c:	eef0 6a60 	vmov.f32	s13, s1
 8010830:	eeb0 7a41 	vmov.f32	s14, s2
 8010834:	eef0 7a61 	vmov.f32	s15, s3
 8010838:	ed87 6a1e 	vstr	s12, [r7, #120]	@ 0x78
 801083c:	edc7 6a1f 	vstr	s13, [r7, #124]	@ 0x7c
 8010840:	ed87 7a20 	vstr	s14, [r7, #128]	@ 0x80
 8010844:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
 8010848:	ed97 4a16 	vldr	s8, [r7, #88]	@ 0x58
 801084c:	edd7 4a17 	vldr	s9, [r7, #92]	@ 0x5c
 8010850:	ed97 5a18 	vldr	s10, [r7, #96]	@ 0x60
 8010854:	edd7 5a19 	vldr	s11, [r7, #100]	@ 0x64
 8010858:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 801085c:	edd7 6a1f 	vldr	s13, [r7, #124]	@ 0x7c
 8010860:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8010864:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8010868:	eeb0 2a44 	vmov.f32	s4, s8
 801086c:	eef0 2a64 	vmov.f32	s5, s9
 8010870:	eeb0 3a45 	vmov.f32	s6, s10
 8010874:	eef0 3a65 	vmov.f32	s7, s11
 8010878:	eeb0 0a46 	vmov.f32	s0, s12
 801087c:	eef0 0a66 	vmov.f32	s1, s13
 8010880:	eeb0 1a47 	vmov.f32	s2, s14
 8010884:	eef0 1a67 	vmov.f32	s3, s15
 8010888:	f7ff fdfe 	bl	8010488 <qqmul>
 801088c:	eeb0 6a40 	vmov.f32	s12, s0
 8010890:	eef0 6a60 	vmov.f32	s13, s1
 8010894:	eeb0 7a41 	vmov.f32	s14, s2
 8010898:	eef0 7a61 	vmov.f32	s15, s3
 801089c:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 80108a0:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 80108a4:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 80108a8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
  // small angle approximation, see eq. 141 in http://mars.cs.umn.edu/tr/reports/Trawny05b.pdf
  struct vec const err_quat = vscl(2.0f / q_residual.w, quatimagpart(q_residual));
 80108ac:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80108b0:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80108b4:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80108b8:	ed97 6a12 	vldr	s12, [r7, #72]	@ 0x48
 80108bc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80108c0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80108c4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80108c8:	eeb0 0a46 	vmov.f32	s0, s12
 80108cc:	eef0 0a66 	vmov.f32	s1, s13
 80108d0:	eeb0 1a47 	vmov.f32	s2, s14
 80108d4:	eef0 1a67 	vmov.f32	s3, s15
 80108d8:	f7ff fd97 	bl	801040a <quatimagpart>
 80108dc:	eef0 6a40 	vmov.f32	s13, s0
 80108e0:	eeb0 7a60 	vmov.f32	s14, s1
 80108e4:	eef0 7a41 	vmov.f32	s15, s2
 80108e8:	edc7 6a22 	vstr	s13, [r7, #136]	@ 0x88
 80108ec:	ed87 7a23 	vstr	s14, [r7, #140]	@ 0x8c
 80108f0:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
 80108f4:	edd7 6a22 	vldr	s13, [r7, #136]	@ 0x88
 80108f8:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 80108fc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8010900:	eef0 0a66 	vmov.f32	s1, s13
 8010904:	eeb0 1a47 	vmov.f32	s2, s14
 8010908:	eef0 1a67 	vmov.f32	s3, s15
 801090c:	eeb0 0a48 	vmov.f32	s0, s16
 8010910:	f7ff fd00 	bl	8010314 <vscl>
 8010914:	eef0 6a40 	vmov.f32	s13, s0
 8010918:	eeb0 7a60 	vmov.f32	s14, s1
 801091c:	eef0 7a41 	vmov.f32	s15, s2
 8010920:	edc7 6a0f 	vstr	s13, [r7, #60]	@ 0x3c
 8010924:	ed87 7a10 	vstr	s14, [r7, #64]	@ 0x40
 8010928:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44

  // do a scalar update for each state
  {
    float h[KC_STATE_DIM] = {0};
 801092c:	f107 0308 	add.w	r3, r7, #8
 8010930:	2224      	movs	r2, #36	@ 0x24
 8010932:	2100      	movs	r1, #0
 8010934:	4618      	mov	r0, r3
 8010936:	f005 fcdd 	bl	80162f4 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 801093a:	2301      	movs	r3, #1
 801093c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 801093e:	2309      	movs	r3, #9
 8010940:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8010942:	f107 0308 	add.w	r3, r7, #8
 8010946:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_D0] = 1;
 8010948:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 801094c:	623b      	str	r3, [r7, #32]
    kalmanCoreScalarUpdate(this, &H, err_quat.x, pose->stdDevQuat);
 801094e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	ed93 7a08 	vldr	s14, [r3, #32]
 8010958:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801095c:	eef0 0a47 	vmov.f32	s1, s14
 8010960:	eeb0 0a67 	vmov.f32	s0, s15
 8010964:	4619      	mov	r1, r3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f7fc f842 	bl	800c9f0 <kalmanCoreScalarUpdate>
    h[KC_STATE_D0] = 0;
 801096c:	f04f 0300 	mov.w	r3, #0
 8010970:	623b      	str	r3, [r7, #32]

    h[KC_STATE_D1] = 1;
 8010972:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010976:	627b      	str	r3, [r7, #36]	@ 0x24
    kalmanCoreScalarUpdate(this, &H, err_quat.y, pose->stdDevQuat);
 8010978:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	ed93 7a08 	vldr	s14, [r3, #32]
 8010982:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010986:	eef0 0a47 	vmov.f32	s1, s14
 801098a:	eeb0 0a67 	vmov.f32	s0, s15
 801098e:	4619      	mov	r1, r3
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f7fc f82d 	bl	800c9f0 <kalmanCoreScalarUpdate>
    h[KC_STATE_D1] = 0;
 8010996:	f04f 0300 	mov.w	r3, #0
 801099a:	627b      	str	r3, [r7, #36]	@ 0x24

    h[KC_STATE_D2] = 1;
 801099c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80109a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    kalmanCoreScalarUpdate(this, &H, err_quat.z, pose->stdDevQuat);
 80109a2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80109a6:	683b      	ldr	r3, [r7, #0]
 80109a8:	ed93 7a08 	vldr	s14, [r3, #32]
 80109ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80109b0:	eef0 0a47 	vmov.f32	s1, s14
 80109b4:	eeb0 0a67 	vmov.f32	s0, s15
 80109b8:	4619      	mov	r1, r3
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f7fc f818 	bl	800c9f0 <kalmanCoreScalarUpdate>
  }
}
 80109c0:	bf00      	nop
 80109c2:	3798      	adds	r7, #152	@ 0x98
 80109c4:	46bd      	mov	sp, r7
 80109c6:	ecbd 8b02 	vpop	{d8}
 80109ca:	bd80      	pop	{r7, pc}

080109cc <kalmanCoreUpdateWithPosition>:
 */

#include "mm_position.h"

void kalmanCoreUpdateWithPosition(kalmanCoreData_t* this, positionMeasurement_t *xyz)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b08e      	sub	sp, #56	@ 0x38
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
  // a direct measurement of states x, y, and z
  // do a scalar update for each state, since this should be faster than updating all together
  for (int i=0; i<3; i++) {
 80109d6:	2300      	movs	r3, #0
 80109d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80109da:	e033      	b.n	8010a44 <kalmanCoreUpdateWithPosition+0x78>
    float h[KC_STATE_DIM] = {0};
 80109dc:	f107 0308 	add.w	r3, r7, #8
 80109e0:	2224      	movs	r2, #36	@ 0x24
 80109e2:	2100      	movs	r1, #0
 80109e4:	4618      	mov	r0, r3
 80109e6:	f005 fc85 	bl	80162f4 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 80109ea:	2301      	movs	r3, #1
 80109ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80109ee:	2309      	movs	r3, #9
 80109f0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80109f2:	f107 0308 	add.w	r3, r7, #8
 80109f6:	633b      	str	r3, [r7, #48]	@ 0x30
    h[KC_STATE_X+i] = 1;
 80109f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109fa:	009b      	lsls	r3, r3, #2
 80109fc:	3338      	adds	r3, #56	@ 0x38
 80109fe:	443b      	add	r3, r7
 8010a00:	3b30      	subs	r3, #48	@ 0x30
 8010a02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8010a06:	601a      	str	r2, [r3, #0]
    kalmanCoreScalarUpdate(this, &H, xyz->pos[i] - this->S[KC_STATE_X+i], xyz->stdDev);
 8010a08:	683a      	ldr	r2, [r7, #0]
 8010a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a0c:	009b      	lsls	r3, r3, #2
 8010a0e:	4413      	add	r3, r2
 8010a10:	ed93 7a00 	vldr	s14, [r3]
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a18:	009b      	lsls	r3, r3, #2
 8010a1a:	4413      	add	r3, r2
 8010a1c:	edd3 7a00 	vldr	s15, [r3]
 8010a20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	ed93 7a03 	vldr	s14, [r3, #12]
 8010a2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010a2e:	eef0 0a47 	vmov.f32	s1, s14
 8010a32:	eeb0 0a67 	vmov.f32	s0, s15
 8010a36:	4619      	mov	r1, r3
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f7fb ffd9 	bl	800c9f0 <kalmanCoreScalarUpdate>
  for (int i=0; i<3; i++) {
 8010a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a40:	3301      	adds	r3, #1
 8010a42:	637b      	str	r3, [r7, #52]	@ 0x34
 8010a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	ddc8      	ble.n	80109dc <kalmanCoreUpdateWithPosition+0x10>
  }
}
 8010a4a:	bf00      	nop
 8010a4c:	bf00      	nop
 8010a4e:	3738      	adds	r7, #56	@ 0x38
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	0000      	movs	r0, r0
	...

08010a58 <kalmanCoreUpdateWithTof>:
 */

#include "mm_tof.h"

void kalmanCoreUpdateWithTof(kalmanCoreData_t* this, tofMeasurement_t *tof)
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	ed2d 8b02 	vpush	{d8}
 8010a5e:	b090      	sub	sp, #64	@ 0x40
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	6039      	str	r1, [r7, #0]
  // Updates the filter with a measured distance in the zb direction using the
  float h[KC_STATE_DIM] = {0};
 8010a66:	f107 0310 	add.w	r3, r7, #16
 8010a6a:	2224      	movs	r2, #36	@ 0x24
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f005 fc40 	bl	80162f4 <memset>
  arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8010a74:	2301      	movs	r3, #1
 8010a76:	813b      	strh	r3, [r7, #8]
 8010a78:	2309      	movs	r3, #9
 8010a7a:	817b      	strh	r3, [r7, #10]
 8010a7c:	f107 0310 	add.w	r3, r7, #16
 8010a80:	60fb      	str	r3, [r7, #12]

  // Only update the filter if the measurement is reliable (\hat{h} -> infty when R[2][2] -> 0)
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010a88:	eef0 7ae7 	vabs.f32	s15, s15
 8010a8c:	ee17 0a90 	vmov	r0, s15
 8010a90:	f7ef fd0c 	bl	80004ac <__aeabi_f2d>
 8010a94:	a331      	add	r3, pc, #196	@ (adr r3, 8010b5c <kalmanCoreUpdateWithTof+0x104>)
 8010a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a9a:	f7ef ffef 	bl	8000a7c <__aeabi_dcmpgt>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d100      	bne.n	8010aa6 <kalmanCoreUpdateWithTof+0x4e>
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below

    // Scalar update
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
  }
}
 8010aa4:	e050      	b.n	8010b48 <kalmanCoreUpdateWithTof+0xf0>
  if (fabs(this->R[2][2]) > 0.1 && this->R[2][2] > 0){
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010aac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ab4:	dc00      	bgt.n	8010ab8 <kalmanCoreUpdateWithTof+0x60>
}
 8010ab6:	e047      	b.n	8010b48 <kalmanCoreUpdateWithTof+0xf0>
    float angle = fabsf(acosf(this->R[2][2])) - DEG_TO_RAD * (15.0f / 2.0f);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8010abe:	eeb0 0a67 	vmov.f32	s0, s15
 8010ac2:	f005 fc6b 	bl	801639c <acosf>
 8010ac6:	eef0 7a40 	vmov.f32	s15, s0
 8010aca:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8010b58 <kalmanCoreUpdateWithTof+0x100>
 8010ace:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010ad2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    if (angle < 0.0f) {
 8010ad6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8010ada:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae2:	d502      	bpl.n	8010aea <kalmanCoreUpdateWithTof+0x92>
      angle = 0.0f;
 8010ae4:	f04f 0300 	mov.w	r3, #0
 8010ae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    float predictedDistance = this->S[KC_STATE_Z] / cosf(angle);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	ed93 8a02 	vldr	s16, [r3, #8]
 8010af0:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8010af4:	f005 fd86 	bl	8016604 <cosf>
 8010af8:	eeb0 7a40 	vmov.f32	s14, s0
 8010afc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8010b00:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float measuredDistance = tof->distance; // [m]
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	637b      	str	r3, [r7, #52]	@ 0x34
    h[KC_STATE_Z] = 1 / cosf(angle); // This just acts like a gain for the sensor model. Further updates are done in the scalar update function below
 8010b0a:	ed97 0a0f 	vldr	s0, [r7, #60]	@ 0x3c
 8010b0e:	f005 fd79 	bl	8016604 <cosf>
 8010b12:	eeb0 7a40 	vmov.f32	s14, s0
 8010b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010b1e:	edc7 7a06 	vstr	s15, [r7, #24]
    kalmanCoreScalarUpdate(this, &H, measuredDistance-predictedDistance, tof->stdDev);
 8010b22:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8010b26:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8010b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b34:	f107 0308 	add.w	r3, r7, #8
 8010b38:	eef0 0a47 	vmov.f32	s1, s14
 8010b3c:	eeb0 0a67 	vmov.f32	s0, s15
 8010b40:	4619      	mov	r1, r3
 8010b42:	6878      	ldr	r0, [r7, #4]
 8010b44:	f7fb ff54 	bl	800c9f0 <kalmanCoreScalarUpdate>
}
 8010b48:	bf00      	nop
 8010b4a:	3740      	adds	r7, #64	@ 0x40
 8010b4c:	46bd      	mov	sp, r7
 8010b4e:	ecbd 8b02 	vpop	{d8}
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	f3af 8000 	nop.w
 8010b58:	3e060a92 	.word	0x3e060a92
 8010b5c:	9999999a 	.word	0x9999999a
 8010b60:	3fb99999 	.word	0x3fb99999

08010b64 <kalmanCoreUpdateWithYawError>:
 */

#include "mm_yaw_error.h"

void kalmanCoreUpdateWithYawError(kalmanCoreData_t *this, yawErrorMeasurement_t *error)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b08e      	sub	sp, #56	@ 0x38
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
 8010b6c:	6039      	str	r1, [r7, #0]
    float h[KC_STATE_DIM] = {0};
 8010b6e:	f107 0314 	add.w	r3, r7, #20
 8010b72:	2224      	movs	r2, #36	@ 0x24
 8010b74:	2100      	movs	r1, #0
 8010b76:	4618      	mov	r0, r3
 8010b78:	f005 fbbc 	bl	80162f4 <memset>
    arm_matrix_instance_f32 H = {1, KC_STATE_DIM, h};
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	81bb      	strh	r3, [r7, #12]
 8010b80:	2309      	movs	r3, #9
 8010b82:	81fb      	strh	r3, [r7, #14]
 8010b84:	f107 0314 	add.w	r3, r7, #20
 8010b88:	613b      	str	r3, [r7, #16]

    h[KC_STATE_D2] = 1;
 8010b8a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010b8e:	637b      	str	r3, [r7, #52]	@ 0x34
    kalmanCoreScalarUpdate(this, &H, this->S[KC_STATE_D2] - error->yawError, error->stdDev);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	ed93 7a08 	vldr	s14, [r3, #32]
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	edd3 7a01 	vldr	s15, [r3, #4]
 8010b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	ed93 7a02 	vldr	s14, [r3, #8]
 8010ba6:	f107 030c 	add.w	r3, r7, #12
 8010baa:	eef0 0a47 	vmov.f32	s1, s14
 8010bae:	eeb0 0a67 	vmov.f32	s0, s15
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f7fb ff1b 	bl	800c9f0 <kalmanCoreScalarUpdate>
}
 8010bba:	bf00      	nop
 8010bbc:	3738      	adds	r7, #56	@ 0x38
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}

08010bc2 <platformInit>:
#include <string.h>
#include "platform.h"

static const platformConfig_t* active_config = 0;

int platformInit(void) {
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b084      	sub	sp, #16
 8010bc6:	af00      	add	r7, sp, #0
  int nrOfConfigs = 0;
 8010bc8:	2300      	movs	r3, #0
 8010bca:	607b      	str	r3, [r7, #4]
  const platformConfig_t* configs = platformGetListOfConfigurations(&nrOfConfigs);
 8010bcc:	1d3b      	adds	r3, r7, #4
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f000 f8a6 	bl	8010d20 <platformGetListOfConfigurations>
 8010bd4:	60f8      	str	r0, [r7, #12]

  int err = platformInitConfiguration(configs, nrOfConfigs);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	68f8      	ldr	r0, [r7, #12]
 8010bdc:	f000 f856 	bl	8010c8c <platformInitConfiguration>
 8010be0:	60b8      	str	r0, [r7, #8]
  if (err != 0)
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d001      	beq.n	8010bec <platformInit+0x2a>
  {
    // This firmware is not compatible, abort init
    return 1;
 8010be8:	2301      	movs	r3, #1
 8010bea:	e002      	b.n	8010bf2 <platformInit+0x30>
  }

  platformInitHardware();
 8010bec:	f000 f8a8 	bl	8010d40 <platformInitHardware>
  return 0;
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3710      	adds	r7, #16
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <platformParseDeviceTypeString>:

int platformParseDeviceTypeString(const char* deviceTypeString, char* deviceType) {
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b086      	sub	sp, #24
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
 8010c02:	6039      	str	r1, [r7, #0]
  if (deviceTypeString[0] != '0' || deviceTypeString[1] != ';') {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	2b30      	cmp	r3, #48	@ 0x30
 8010c0a:	d104      	bne.n	8010c16 <platformParseDeviceTypeString+0x1c>
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3301      	adds	r3, #1
 8010c10:	781b      	ldrb	r3, [r3, #0]
 8010c12:	2b3b      	cmp	r3, #59	@ 0x3b
 8010c14:	d001      	beq.n	8010c1a <platformParseDeviceTypeString+0x20>
    return 1;
 8010c16:	2301      	movs	r3, #1
 8010c18:	e034      	b.n	8010c84 <platformParseDeviceTypeString+0x8a>
  }

  const int start = 2;
 8010c1a:	2302      	movs	r3, #2
 8010c1c:	613b      	str	r3, [r7, #16]
  const int last = start + PLATFORM_DEVICE_TYPE_MAX_LEN - 1;
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	3304      	adds	r3, #4
 8010c22:	60fb      	str	r3, [r7, #12]
  int end = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	617b      	str	r3, [r7, #20]
  for (end = start; end <= last; end++) {
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	617b      	str	r3, [r7, #20]
 8010c2c:	e00e      	b.n	8010c4c <platformParseDeviceTypeString+0x52>
    if (deviceTypeString[end] == '\0' || deviceTypeString[end] == ';') {
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	4413      	add	r3, r2
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d00c      	beq.n	8010c54 <platformParseDeviceTypeString+0x5a>
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	4413      	add	r3, r2
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	2b3b      	cmp	r3, #59	@ 0x3b
 8010c44:	d006      	beq.n	8010c54 <platformParseDeviceTypeString+0x5a>
  for (end = start; end <= last; end++) {
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	3301      	adds	r3, #1
 8010c4a:	617b      	str	r3, [r7, #20]
 8010c4c:	697a      	ldr	r2, [r7, #20]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	ddec      	ble.n	8010c2e <platformParseDeviceTypeString+0x34>
      break;
    }
  }

  if (end > last) {
 8010c54:	697a      	ldr	r2, [r7, #20]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	dd01      	ble.n	8010c60 <platformParseDeviceTypeString+0x66>
    return 1;
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	e011      	b.n	8010c84 <platformParseDeviceTypeString+0x8a>
  }

  int length = end - start;
 8010c60:	697a      	ldr	r2, [r7, #20]
 8010c62:	693b      	ldr	r3, [r7, #16]
 8010c64:	1ad3      	subs	r3, r2, r3
 8010c66:	60bb      	str	r3, [r7, #8]
  memcpy(deviceType, &deviceTypeString[start], length);
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	68ba      	ldr	r2, [r7, #8]
 8010c70:	4619      	mov	r1, r3
 8010c72:	6838      	ldr	r0, [r7, #0]
 8010c74:	f005 fb84 	bl	8016380 <memcpy>
  deviceType[length] = '\0';
 8010c78:	68bb      	ldr	r3, [r7, #8]
 8010c7a:	683a      	ldr	r2, [r7, #0]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	2200      	movs	r2, #0
 8010c80:	701a      	strb	r2, [r3, #0]
  return 0;
 8010c82:	2300      	movs	r3, #0
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3718      	adds	r7, #24
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <platformInitConfiguration>:

int platformInitConfiguration(const platformConfig_t* configs, const int nrOfConfigs) {
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b090      	sub	sp, #64	@ 0x40
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	6039      	str	r1, [r7, #0]
#ifndef DEVICE_TYPE_STRING_FORCE
  char deviceTypeString[PLATFORM_DEVICE_TYPE_STRING_MAX_LEN];
  char deviceType[PLATFORM_DEVICE_TYPE_MAX_LEN];

  platformGetDeviceTypeString(deviceTypeString);
 8010c96:	f107 0314 	add.w	r3, r7, #20
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f000 f866 	bl	8010d6c <platformGetDeviceTypeString>
  platformParseDeviceTypeString(deviceTypeString, deviceType);
 8010ca0:	f107 020c 	add.w	r2, r7, #12
 8010ca4:	f107 0314 	add.w	r3, r7, #20
 8010ca8:	4611      	mov	r1, r2
 8010caa:	4618      	mov	r0, r3
 8010cac:	f7ff ffa5 	bl	8010bfa <platformParseDeviceTypeString>
  #define str(s) #s

  char* deviceType = xstr(DEVICE_TYPE_STRING_FORCE);
#endif

  for (int i = 0; i < nrOfConfigs; i++) {
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010cb4:	e01a      	b.n	8010cec <platformInitConfiguration+0x60>
    const platformConfig_t* config = &configs[i];
 8010cb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cb8:	4613      	mov	r3, r2
 8010cba:	00db      	lsls	r3, r3, #3
 8010cbc:	4413      	add	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	4413      	add	r3, r2
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (strcmp(config->deviceType, deviceType) == 0) {
 8010cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010cca:	f107 020c 	add.w	r2, r7, #12
 8010cce:	4611      	mov	r1, r2
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7ef fa7d 	bl	80001d0 <strcmp>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d104      	bne.n	8010ce6 <platformInitConfiguration+0x5a>
      active_config = config;
 8010cdc:	4a08      	ldr	r2, [pc, #32]	@ (8010d00 <platformInitConfiguration+0x74>)
 8010cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ce0:	6013      	str	r3, [r2, #0]
      return 0;
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	e007      	b.n	8010cf6 <platformInitConfiguration+0x6a>
  for (int i = 0; i < nrOfConfigs; i++) {
 8010ce6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ce8:	3301      	adds	r3, #1
 8010cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010cec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cee:	683b      	ldr	r3, [r7, #0]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	dbe0      	blt.n	8010cb6 <platformInitConfiguration+0x2a>
    }
  }

  return 1;
 8010cf4:	2301      	movs	r3, #1
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3740      	adds	r7, #64	@ 0x40
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	2000a04c 	.word	0x2000a04c

08010d04 <platformConfigGetSensorImplementation>:

const char* platformConfigGetDeviceTypeName() {
  return active_config->deviceTypeName;
}

SensorImplementation_t platformConfigGetSensorImplementation() {
 8010d04:	b480      	push	{r7}
 8010d06:	af00      	add	r7, sp, #0
  return active_config->sensorImplementation;
 8010d08:	4b04      	ldr	r3, [pc, #16]	@ (8010d1c <platformConfigGetSensorImplementation+0x18>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	46bd      	mov	sp, r7
 8010d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d18:	4770      	bx	lr
 8010d1a:	bf00      	nop
 8010d1c:	2000a04c 	.word	0x2000a04c

08010d20 <platformGetListOfConfigurations>:
//    .motorMap = motorMapCF21Brushless,
//  },
//#endif
};

const platformConfig_t* platformGetListOfConfigurations(int* nrOfConfigs) {
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  *nrOfConfigs = sizeof(configs) / sizeof(platformConfig_t);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2201      	movs	r2, #1
 8010d2c:	601a      	str	r2, [r3, #0]
  return configs;
 8010d2e:	4b03      	ldr	r3, [pc, #12]	@ (8010d3c <platformGetListOfConfigurations+0x1c>)
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	20000140 	.word	0x20000140

08010d40 <platformInitHardware>:

void platformInitHardware() {
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
  //Low level init: Clock and Interrupt controller
  nvicInit();
 8010d44:	f7f7 fd02 	bl	800874c <nvicInit>

  //EXTI interrupts
//  extiInit();
}
 8010d48:	bf00      	nop
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <getAddressOfOtpMemoryBlock>:

#define DEFAULT_PLATFORM_STRING "0;DG20"


#ifndef UNIT_TEST_MODE
static char* getAddressOfOtpMemoryBlock(int blockNr) {
 8010d4c:	b480      	push	{r7}
 8010d4e:	b083      	sub	sp, #12
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
  return (char*)(0x1fff7800 + blockNr * 0x20);
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8010d5a:	f5a3 6388 	sub.w	r3, r3, #1088	@ 0x440
 8010d5e:	015b      	lsls	r3, r3, #5
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	370c      	adds	r7, #12
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <platformGetDeviceTypeString>:
#endif




void platformGetDeviceTypeString(char* deviceTypeString) {
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
  char* block = 0;
 8010d74:	2300      	movs	r3, #0
 8010d76:	617b      	str	r3, [r7, #20]

  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8010d78:	2300      	movs	r3, #0
 8010d7a:	613b      	str	r3, [r7, #16]
 8010d7c:	e00d      	b.n	8010d9a <platformGetDeviceTypeString+0x2e>
    char* candidateBlock = getAddressOfOtpMemoryBlock(i);
 8010d7e:	6938      	ldr	r0, [r7, #16]
 8010d80:	f7ff ffe4 	bl	8010d4c <getAddressOfOtpMemoryBlock>
 8010d84:	60f8      	str	r0, [r7, #12]
    if (candidateBlock[0] != 0) {
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d002      	beq.n	8010d94 <platformGetDeviceTypeString+0x28>
      block = candidateBlock;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	617b      	str	r3, [r7, #20]
      break;
 8010d92:	e005      	b.n	8010da0 <platformGetDeviceTypeString+0x34>
  for (int i = 0; i < PLATFORM_INFO_OTP_NR_OF_BLOCKS; i++) {
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	3301      	adds	r3, #1
 8010d98:	613b      	str	r3, [r7, #16]
 8010d9a:	693b      	ldr	r3, [r7, #16]
 8010d9c:	2b0f      	cmp	r3, #15
 8010d9e:	ddee      	ble.n	8010d7e <platformGetDeviceTypeString+0x12>
    }
  }

  if (!block || ((unsigned char)block[0]) == 0xff) {
 8010da0:	697b      	ldr	r3, [r7, #20]
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	d003      	beq.n	8010dae <platformGetDeviceTypeString+0x42>
 8010da6:	697b      	ldr	r3, [r7, #20]
 8010da8:	781b      	ldrb	r3, [r3, #0]
 8010daa:	2bff      	cmp	r3, #255	@ 0xff
 8010dac:	d101      	bne.n	8010db2 <platformGetDeviceTypeString+0x46>
    block = DEFAULT_PLATFORM_STRING;
 8010dae:	4b07      	ldr	r3, [pc, #28]	@ (8010dcc <platformGetDeviceTypeString+0x60>)
 8010db0:	617b      	str	r3, [r7, #20]
  }

  strncpy(deviceTypeString, block, PLATFORM_INFO_OTP_BLOCK_LEN);
 8010db2:	2220      	movs	r2, #32
 8010db4:	6979      	ldr	r1, [r7, #20]
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f005 faa4 	bl	8016304 <strncpy>
  deviceTypeString[PLATFORM_INFO_OTP_BLOCK_LEN] = '\0';
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	3320      	adds	r3, #32
 8010dc0:	2200      	movs	r2, #0
 8010dc2:	701a      	strb	r2, [r3, #0]
}
 8010dc4:	bf00      	nop
 8010dc6:	3718      	adds	r7, #24
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	08019184 	.word	0x08019184

08010dd0 <assertFail>:

static enum snapshotType_e currentType = SnapshotTypeNone;


void assertFail(char *exp, char *file, int line)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b086      	sub	sp, #24
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	60f8      	str	r0, [r7, #12]
 8010dd8:	60b9      	str	r1, [r7, #8]
 8010dda:	607a      	str	r2, [r7, #4]
        __asm volatile
 8010ddc:	f04f 035f 	mov.w	r3, #95	@ 0x5f
 8010de0:	f383 8811 	msr	BASEPRI, r3
 8010de4:	f3bf 8f6f 	isb	sy
 8010de8:	f3bf 8f4f 	dsb	sy
 8010dec:	617b      	str	r3, [r7, #20]
    }
 8010dee:	bf00      	nop
  portDISABLE_INTERRUPTS();
  storeAssertFileData(file, line);
 8010df0:	6879      	ldr	r1, [r7, #4]
 8010df2:	68b8      	ldr	r0, [r7, #8]
 8010df4:	f000 f804 	bl	8010e00 <storeAssertFileData>
//  if(!(CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk))
//  {
//    // Only reset if debugger is not connected
//    NVIC_SystemReset();
//  }
}
 8010df8:	bf00      	nop
 8010dfa:	3718      	adds	r7, #24
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}

08010e00 <storeAssertFileData>:

void storeAssertFileData(const char *file, int line)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b083      	sub	sp, #12
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
  snapshot.magicNumber = MAGIC_ASSERT_INDICATOR;
 8010e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e38 <storeAssertFileData+0x38>)
 8010e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8010e3c <storeAssertFileData+0x3c>)
 8010e0e:	601a      	str	r2, [r3, #0]
  snapshot.type = SnapshotTypeFile;
 8010e10:	4b09      	ldr	r3, [pc, #36]	@ (8010e38 <storeAssertFileData+0x38>)
 8010e12:	2201      	movs	r2, #1
 8010e14:	711a      	strb	r2, [r3, #4]
  currentType = snapshot.type;
 8010e16:	4b08      	ldr	r3, [pc, #32]	@ (8010e38 <storeAssertFileData+0x38>)
 8010e18:	791a      	ldrb	r2, [r3, #4]
 8010e1a:	4b09      	ldr	r3, [pc, #36]	@ (8010e40 <storeAssertFileData+0x40>)
 8010e1c:	701a      	strb	r2, [r3, #0]
  snapshot.file.fileName = file;
 8010e1e:	4a06      	ldr	r2, [pc, #24]	@ (8010e38 <storeAssertFileData+0x38>)
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6093      	str	r3, [r2, #8]
  snapshot.file.line = line;
 8010e24:	4a04      	ldr	r2, [pc, #16]	@ (8010e38 <storeAssertFileData+0x38>)
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	60d3      	str	r3, [r2, #12]
}
 8010e2a:	bf00      	nop
 8010e2c:	370c      	adds	r7, #12
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e34:	4770      	bx	lr
 8010e36:	bf00      	nop
 8010e38:	200001d0 	.word	0x200001d0
 8010e3c:	2f8a001f 	.word	0x2f8a001f
 8010e40:	2000a050 	.word	0x2000a050

08010e44 <lpf2pInit>:

/**
 * 2-Pole low pass filter
 */
void lpf2pInit(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	60f8      	str	r0, [r7, #12]
 8010e4c:	ed87 0a02 	vstr	s0, [r7, #8]
 8010e50:	edc7 0a01 	vstr	s1, [r7, #4]
  if (lpfData == NULL || cutoff_freq <= 0.0f) {
 8010e54:	68fb      	ldr	r3, [r7, #12]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00e      	beq.n	8010e78 <lpf2pInit+0x34>
 8010e5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8010e5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e66:	d907      	bls.n	8010e78 <lpf2pInit+0x34>
    return;
  }

  lpf2pSetCutoffFreq(lpfData, sample_freq, cutoff_freq);
 8010e68:	edd7 0a01 	vldr	s1, [r7, #4]
 8010e6c:	ed97 0a02 	vldr	s0, [r7, #8]
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f000 f805 	bl	8010e80 <lpf2pSetCutoffFreq>
 8010e76:	e000      	b.n	8010e7a <lpf2pInit+0x36>
    return;
 8010e78:	bf00      	nop
}
 8010e7a:	3710      	adds	r7, #16
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}

08010e80 <lpf2pSetCutoffFreq>:

void lpf2pSetCutoffFreq(lpf2pData* lpfData, float sample_freq, float cutoff_freq)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b088      	sub	sp, #32
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	ed87 0a02 	vstr	s0, [r7, #8]
 8010e8c:	edc7 0a01 	vstr	s1, [r7, #4]
  float fr = sample_freq/cutoff_freq;
 8010e90:	edd7 6a02 	vldr	s13, [r7, #8]
 8010e94:	ed97 7a01 	vldr	s14, [r7, #4]
 8010e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010e9c:	edc7 7a07 	vstr	s15, [r7, #28]
  float ohm = tanf(M_PI_F/fr);
 8010ea0:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8010f74 <lpf2pSetCutoffFreq+0xf4>
 8010ea4:	edd7 7a07 	vldr	s15, [r7, #28]
 8010ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010eac:	eeb0 0a47 	vmov.f32	s0, s14
 8010eb0:	f005 fc3a 	bl	8016728 <tanf>
 8010eb4:	ed87 0a06 	vstr	s0, [r7, #24]
  float c = 1.0f+2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm;
 8010eb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ebc:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8010f78 <lpf2pSetCutoffFreq+0xf8>
 8010ec0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ec4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010ec8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8010ecc:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ed0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ed8:	edc7 7a05 	vstr	s15, [r7, #20]
  lpfData->b0 = ohm*ohm/c;
 8010edc:	edd7 7a06 	vldr	s15, [r7, #24]
 8010ee0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8010ee4:	ed97 7a05 	vldr	s14, [r7, #20]
 8010ee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	edc3 7a02 	vstr	s15, [r3, #8]
  lpfData->b1 = 2.0f*lpfData->b0;
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	edd3 7a02 	vldr	s15, [r3, #8]
 8010ef8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	edc3 7a03 	vstr	s15, [r3, #12]
  lpfData->b2 = lpfData->b0;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	689a      	ldr	r2, [r3, #8]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	611a      	str	r2, [r3, #16]
  lpfData->a1 = 2.0f*(ohm*ohm-1.0f)/c;
 8010f0a:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f0e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f1a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8010f1e:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	edc3 7a00 	vstr	s15, [r3]
  lpfData->a2 = (1.0f-2.0f*cosf(M_PI_F/4.0f)*ohm+ohm*ohm)/c;
 8010f2c:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f30:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8010f78 <lpf2pSetCutoffFreq+0xf8>
 8010f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010f3c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010f40:	edd7 7a06 	vldr	s15, [r7, #24]
 8010f44:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f48:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010f4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8010f50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	edc3 7a01 	vstr	s15, [r3, #4]
  lpfData->delay_element_1 = 0.0f;
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	f04f 0200 	mov.w	r2, #0
 8010f60:	615a      	str	r2, [r3, #20]
  lpfData->delay_element_2 = 0.0f;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	f04f 0200 	mov.w	r2, #0
 8010f68:	619a      	str	r2, [r3, #24]
}
 8010f6a:	bf00      	nop
 8010f6c:	3720      	adds	r7, #32
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	40490fdb 	.word	0x40490fdb
 8010f78:	3fb504f3 	.word	0x3fb504f3

08010f7c <lpf2pApply>:

float lpf2pApply(lpf2pData* lpfData, float sample)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	ed87 0a00 	vstr	s0, [r7]
  float delay_element_0 = sample - lpfData->delay_element_1 * lpfData->a1 - lpfData->delay_element_2 * lpfData->a2;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	ed93 7a05 	vldr	s14, [r3, #20]
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	edd3 7a00 	vldr	s15, [r3]
 8010f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010f98:	ed97 7a00 	vldr	s14, [r7]
 8010f9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	edd3 6a06 	vldr	s13, [r3, #24]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	edd3 7a01 	vldr	s15, [r3, #4]
 8010fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010fb4:	edc7 7a03 	vstr	s15, [r7, #12]
  if (!isfinite(delay_element_0)) {
 8010fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010fbc:	eef0 7ae7 	vabs.f32	s15, s15
 8010fc0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8011030 <lpf2pApply+0xb4>
 8010fc4:	eef4 7a47 	vcmp.f32	s15, s14
 8010fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fcc:	d901      	bls.n	8010fd2 <lpf2pApply+0x56>
    // don't allow bad values to propigate via the filter
    delay_element_0 = sample;
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	60fb      	str	r3, [r7, #12]
  }

  float output = delay_element_0 * lpfData->b0 + lpfData->delay_element_1 * lpfData->b1 + lpfData->delay_element_2 * lpfData->b2;
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	ed93 7a02 	vldr	s14, [r3, #8]
 8010fd8:	edd7 7a03 	vldr	s15, [r7, #12]
 8010fdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	edd3 6a05 	vldr	s13, [r3, #20]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8010fec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010ff0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	edd3 6a06 	vldr	s13, [r3, #24]
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	edd3 7a04 	vldr	s15, [r3, #16]
 8011000:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011004:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011008:	edc7 7a02 	vstr	s15, [r7, #8]

  lpfData->delay_element_2 = lpfData->delay_element_1;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	695a      	ldr	r2, [r3, #20]
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	619a      	str	r2, [r3, #24]
  lpfData->delay_element_1 = delay_element_0;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	68fa      	ldr	r2, [r7, #12]
 8011018:	615a      	str	r2, [r3, #20]
  return output;
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	ee07 3a90 	vmov	s15, r3
}
 8011020:	eeb0 0a67 	vmov.f32	s0, s15
 8011024:	3714      	adds	r7, #20
 8011026:	46bd      	mov	sp, r7
 8011028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102c:	4770      	bx	lr
 801102e:	bf00      	nop
 8011030:	7f7fffff 	.word	0x7f7fffff

08011034 <deadband>:
{
  return fminf(maxVal, fmaxf(minVal,value));
}

float deadband(float value, const float threshold)
{
 8011034:	b480      	push	{r7}
 8011036:	b083      	sub	sp, #12
 8011038:	af00      	add	r7, sp, #0
 801103a:	ed87 0a01 	vstr	s0, [r7, #4]
 801103e:	edc7 0a00 	vstr	s1, [r7]
  if (fabsf(value) < threshold)
 8011042:	edd7 7a01 	vldr	s15, [r7, #4]
 8011046:	eef0 7ae7 	vabs.f32	s15, s15
 801104a:	ed97 7a00 	vldr	s14, [r7]
 801104e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011056:	dd03      	ble.n	8011060 <deadband+0x2c>
  {
    value = 0;
 8011058:	f04f 0300 	mov.w	r3, #0
 801105c:	607b      	str	r3, [r7, #4]
 801105e:	e01e      	b.n	801109e <deadband+0x6a>
  }
  else if (value > 0)
 8011060:	edd7 7a01 	vldr	s15, [r7, #4]
 8011064:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801106c:	dd08      	ble.n	8011080 <deadband+0x4c>
  {
    value -= threshold;
 801106e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011072:	edd7 7a00 	vldr	s15, [r7]
 8011076:	ee77 7a67 	vsub.f32	s15, s14, s15
 801107a:	edc7 7a01 	vstr	s15, [r7, #4]
 801107e:	e00e      	b.n	801109e <deadband+0x6a>
  }
  else if (value < 0)
 8011080:	edd7 7a01 	vldr	s15, [r7, #4]
 8011084:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801108c:	d507      	bpl.n	801109e <deadband+0x6a>
  {
    value += threshold;
 801108e:	ed97 7a01 	vldr	s14, [r7, #4]
 8011092:	edd7 7a00 	vldr	s15, [r7]
 8011096:	ee77 7a27 	vadd.f32	s15, s14, s15
 801109a:	edc7 7a01 	vstr	s15, [r7, #4]
  }
  return value;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	ee07 3a90 	vmov	s15, r3
}
 80110a4:	eeb0 0a67 	vmov.f32	s0, s15
 80110a8:	370c      	adds	r7, #12
 80110aa:	46bd      	mov	sp, r7
 80110ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b0:	4770      	bx	lr

080110b2 <rateSupervisorInit>:
 * rateSupervisor.c - functionality to supervise the rate of modules
 */

#include "rateSupervisor.h"

void rateSupervisorInit(rateSupervisor_t* context, const uint32_t osTimeMs, const uint32_t evaluationIntervalMs, const uint32_t minCount, const uint32_t maxCount, const uint8_t skip) {
 80110b2:	b480      	push	{r7}
 80110b4:	b085      	sub	sp, #20
 80110b6:	af00      	add	r7, sp, #0
 80110b8:	60f8      	str	r0, [r7, #12]
 80110ba:	60b9      	str	r1, [r7, #8]
 80110bc:	607a      	str	r2, [r7, #4]
 80110be:	603b      	str	r3, [r7, #0]
    context->count = 0;
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2200      	movs	r2, #0
 80110c4:	601a      	str	r2, [r3, #0]
    context->evaluationIntervalMs = evaluationIntervalMs;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	687a      	ldr	r2, [r7, #4]
 80110ca:	611a      	str	r2, [r3, #16]
    context->expectedMin = minCount;
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	683a      	ldr	r2, [r7, #0]
 80110d0:	605a      	str	r2, [r3, #4]
    context->expectedMax = maxCount;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	69ba      	ldr	r2, [r7, #24]
 80110d6:	609a      	str	r2, [r3, #8]
    context->nextEvaluationTimeMs = osTimeMs + evaluationIntervalMs;
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	441a      	add	r2, r3
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	60da      	str	r2, [r3, #12]
    context->latestCount = 0;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	2200      	movs	r2, #0
 80110e6:	615a      	str	r2, [r3, #20]
    context->skip = skip;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	7f3a      	ldrb	r2, [r7, #28]
 80110ec:	761a      	strb	r2, [r3, #24]
}
 80110ee:	bf00      	nop
 80110f0:	3714      	adds	r7, #20
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr

080110fa <rateSupervisorValidate>:

bool rateSupervisorValidate(rateSupervisor_t* context, const uint32_t osTimeMs) {
 80110fa:	b480      	push	{r7}
 80110fc:	b085      	sub	sp, #20
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
 8011102:	6039      	str	r1, [r7, #0]
    bool result = true;
 8011104:	2301      	movs	r3, #1
 8011106:	73fb      	strb	r3, [r7, #15]

    context->count += 1;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	1c5a      	adds	r2, r3, #1
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	601a      	str	r2, [r3, #0]
    if (osTimeMs > context->nextEvaluationTimeMs) {
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	68db      	ldr	r3, [r3, #12]
 8011116:	683a      	ldr	r2, [r7, #0]
 8011118:	429a      	cmp	r2, r3
 801111a:	d927      	bls.n	801116c <rateSupervisorValidate+0x72>
        uint32_t actual = context->count;
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	60bb      	str	r3, [r7, #8]
        if (actual < context->expectedMin || actual > context->expectedMax) {
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	68ba      	ldr	r2, [r7, #8]
 8011128:	429a      	cmp	r2, r3
 801112a:	d304      	bcc.n	8011136 <rateSupervisorValidate+0x3c>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	68ba      	ldr	r2, [r7, #8]
 8011132:	429a      	cmp	r2, r3
 8011134:	d901      	bls.n	801113a <rateSupervisorValidate+0x40>
            result = false;
 8011136:	2300      	movs	r3, #0
 8011138:	73fb      	strb	r3, [r7, #15]
        }

        context->latestCount = context->count;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681a      	ldr	r2, [r3, #0]
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	615a      	str	r2, [r3, #20]
        context->count = 0;
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	2200      	movs	r2, #0
 8011146:	601a      	str	r2, [r3, #0]
        context->nextEvaluationTimeMs = osTimeMs + context->evaluationIntervalMs;
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	691a      	ldr	r2, [r3, #16]
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	441a      	add	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	60da      	str	r2, [r3, #12]

        if (context->skip > 0) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	7e1b      	ldrb	r3, [r3, #24]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d007      	beq.n	801116c <rateSupervisorValidate+0x72>
            result = true;
 801115c:	2301      	movs	r3, #1
 801115e:	73fb      	strb	r3, [r7, #15]
            context->skip -= 1;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	7e1b      	ldrb	r3, [r3, #24]
 8011164:	3b01      	subs	r3, #1
 8011166:	b2da      	uxtb	r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	761a      	strb	r2, [r3, #24]
        }
    }

    return result;
 801116c:	7bfb      	ldrb	r3, [r7, #15]
}
 801116e:	4618      	mov	r0, r3
 8011170:	3714      	adds	r7, #20
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 801117a:	b580      	push	{r7, lr}
 801117c:	b084      	sub	sp, #16
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
 8011182:	460b      	mov	r3, r1
 8011184:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011186:	2300      	movs	r3, #0
 8011188:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 801118a:	78fb      	ldrb	r3, [r7, #3]
 801118c:	461a      	mov	r2, r3
 801118e:	2101      	movs	r1, #1
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7f7 fd82 	bl	8008c9a <VL53L1_WrByte>
 8011196:	4603      	mov	r3, r0
 8011198:	73fb      	strb	r3, [r7, #15]
		DeviceAddress);

	LOG_FUNCTION_END(Status);
	return Status;
 801119a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}

080111a6 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 80111a6:	b580      	push	{r7, lr}
 80111a8:	b084      	sub	sp, #16
 80111aa:	af00      	add	r7, sp, #0
 80111ac:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80111ae:	2300      	movs	r3, #0
 80111b0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* 2V8 power mode selection codex 447463 */
#ifdef USE_I2C_2V8
	Status = VL53L1_RdByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG, &i);
 80111b2:	f107 030e 	add.w	r3, r7, #14
 80111b6:	461a      	mov	r2, r3
 80111b8:	212e      	movs	r1, #46	@ 0x2e
 80111ba:	6878      	ldr	r0, [r7, #4]
 80111bc:	f7f7 fd92 	bl	8008ce4 <VL53L1_RdByte>
 80111c0:	4603      	mov	r3, r0
 80111c2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L1_ERROR_NONE) {
 80111c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d10c      	bne.n	80111e6 <VL53L1_DataInit+0x40>
		i = (i & 0xfe) | 0x01;
 80111cc:	7bbb      	ldrb	r3, [r7, #14]
 80111ce:	f043 0301 	orr.w	r3, r3, #1
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	73bb      	strb	r3, [r7, #14]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
 80111d6:	7bbb      	ldrb	r3, [r7, #14]
 80111d8:	461a      	mov	r2, r3
 80111da:	212e      	movs	r1, #46	@ 0x2e
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f7f7 fd5c 	bl	8008c9a <VL53L1_WrByte>
 80111e2:	4603      	mov	r3, r0
 80111e4:	73fb      	strb	r3, [r7, #15]
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 80111e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d105      	bne.n	80111fa <VL53L1_DataInit+0x54>
		Status = VL53L1_data_init(Dev, 1);
 80111ee:	2101      	movs	r1, #1
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f000 fe77 	bl	8011ee4 <VL53L1_data_init>
 80111f6:	4603      	mov	r3, r0
 80111f8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 80111fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d107      	bne.n	8011212 <VL53L1_DataInit+0x6c>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2201      	movs	r2, #1
 8011206:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378
		PALDevDataSet(Dev, CurrentParameters.PresetMode,
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2208      	movs	r2, #8
 801120e:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8011212:	2300      	movs	r3, #0
 8011214:	73bb      	strb	r3, [r7, #14]
 8011216:	e012      	b.n	801123e <VL53L1_DataInit+0x98>
		if (Status == VL53L1_ERROR_NONE)
 8011218:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d112      	bne.n	8011246 <VL53L1_DataInit+0xa0>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 8011220:	7bbb      	ldrb	r3, [r7, #14]
 8011222:	2201      	movs	r2, #1
 8011224:	4619      	mov	r1, r3
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f000 fb04 	bl	8011834 <VL53L1_SetLimitCheckEnable>
 801122c:	4603      	mov	r3, r0
 801122e:	461a      	mov	r2, r3
 8011230:	7bfb      	ldrb	r3, [r7, #15]
 8011232:	4313      	orrs	r3, r2
 8011234:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8011236:	7bbb      	ldrb	r3, [r7, #14]
 8011238:	3301      	adds	r3, #1
 801123a:	b2db      	uxtb	r3, r3
 801123c:	73bb      	strb	r3, [r7, #14]
 801123e:	7bbb      	ldrb	r3, [r7, #14]
 8011240:	2b01      	cmp	r3, #1
 8011242:	d9e9      	bls.n	8011218 <VL53L1_DataInit+0x72>
 8011244:	e000      	b.n	8011248 <VL53L1_DataInit+0xa2>
		else
			break;
 8011246:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8011248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d107      	bne.n	8011260 <VL53L1_DataInit+0xba>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8011250:	f44f 1290 	mov.w	r2, #1179648	@ 0x120000
 8011254:	2100      	movs	r1, #0
 8011256:	6878      	ldr	r0, [r7, #4]
 8011258:	f000 fb4d 	bl	80118f6 <VL53L1_SetLimitCheckValue>
 801125c:	4603      	mov	r3, r0
 801125e:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 8011260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d107      	bne.n	8011278 <VL53L1_DataInit+0xd2>
		Status = VL53L1_SetLimitCheckValue(Dev,
 8011268:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 801126c:	2101      	movs	r1, #1
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 fb41 	bl	80118f6 <VL53L1_SetLimitCheckValue>
 8011274:	4603      	mov	r3, r0
 8011276:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8011278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801128c:	2300      	movs	r3, #0
 801128e:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	2203      	movs	r2, #3
 8011294:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8011298:	2320      	movs	r3, #32
 801129a:	73bb      	strb	r3, [r7, #14]
	PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7bba      	ldrb	r2, [r7, #14]
 80112a0:	709a      	strb	r2, [r3, #2]

	PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	2203      	movs	r2, #3
 80112a6:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	2203      	movs	r2, #3
 80112ae:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
			VL53L1_DISTANCEMODE_LONG);

	PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	2203      	movs	r2, #3
 80112b6:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 80112ba:	2108      	movs	r1, #8
 80112bc:	6878      	ldr	r0, [r7, #4]
 80112be:	f000 f8d8 	bl	8011472 <VL53L1_SetPresetMode>
 80112c2:	4603      	mov	r3, r0
 80112c4:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 80112c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112ca:	4618      	mov	r0, r3
 80112cc:	3710      	adds	r7, #16
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
	...

080112d4 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b087      	sub	sp, #28
 80112d8:	af00      	add	r7, sp, #0
 80112da:	4603      	mov	r3, r0
 80112dc:	603a      	str	r2, [r7, #0]
 80112de:	71fb      	strb	r3, [r7, #7]
 80112e0:	460b      	mov	r3, r1
 80112e2:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80112e4:	2300      	movs	r3, #0
 80112e6:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 80112e8:	4a2b      	ldr	r2, [pc, #172]	@ (8011398 <ComputeDevicePresetMode+0xc4>)
 80112ea:	f107 0310 	add.w	r3, r7, #16
 80112ee:	6812      	ldr	r2, [r2, #0]
 80112f0:	4611      	mov	r1, r2
 80112f2:	8019      	strh	r1, [r3, #0]
 80112f4:	3302      	adds	r3, #2
 80112f6:	0c12      	lsrs	r2, r2, #16
 80112f8:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 80112fa:	4a28      	ldr	r2, [pc, #160]	@ (801139c <ComputeDevicePresetMode+0xc8>)
 80112fc:	f107 030c 	add.w	r3, r7, #12
 8011300:	6812      	ldr	r2, [r2, #0]
 8011302:	4611      	mov	r1, r2
 8011304:	8019      	strh	r1, [r3, #0]
 8011306:	3302      	adds	r3, #2
 8011308:	0c12      	lsrs	r2, r2, #16
 801130a:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 801130c:	4a24      	ldr	r2, [pc, #144]	@ (80113a0 <ComputeDevicePresetMode+0xcc>)
 801130e:	f107 0308 	add.w	r3, r7, #8
 8011312:	6812      	ldr	r2, [r2, #0]
 8011314:	4611      	mov	r1, r2
 8011316:	8019      	strh	r1, [r3, #0]
 8011318:	3302      	adds	r3, #2
 801131a:	0c12      	lsrs	r2, r2, #16
 801131c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	2201      	movs	r2, #1
 8011322:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8011324:	79bb      	ldrb	r3, [r7, #6]
 8011326:	2b01      	cmp	r3, #1
 8011328:	d002      	beq.n	8011330 <ComputeDevicePresetMode+0x5c>
 801132a:	2b02      	cmp	r3, #2
 801132c:	d003      	beq.n	8011336 <ComputeDevicePresetMode+0x62>
 801132e:	e005      	b.n	801133c <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 8011330:	2300      	movs	r3, #0
 8011332:	75bb      	strb	r3, [r7, #22]
		break;
 8011334:	e004      	b.n	8011340 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 8011336:	2301      	movs	r3, #1
 8011338:	75bb      	strb	r3, [r7, #22]
		break;
 801133a:	e001      	b.n	8011340 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 801133c:	2302      	movs	r3, #2
 801133e:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 8011340:	79fb      	ldrb	r3, [r7, #7]
 8011342:	2b08      	cmp	r3, #8
 8011344:	d015      	beq.n	8011372 <ComputeDevicePresetMode+0x9e>
 8011346:	2b08      	cmp	r3, #8
 8011348:	dc1b      	bgt.n	8011382 <ComputeDevicePresetMode+0xae>
 801134a:	2b03      	cmp	r3, #3
 801134c:	d009      	beq.n	8011362 <ComputeDevicePresetMode+0x8e>
 801134e:	2b04      	cmp	r3, #4
 8011350:	d117      	bne.n	8011382 <ComputeDevicePresetMode+0xae>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 8011352:	7dbb      	ldrb	r3, [r7, #22]
 8011354:	3318      	adds	r3, #24
 8011356:	443b      	add	r3, r7
 8011358:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 801135c:	683b      	ldr	r3, [r7, #0]
 801135e:	701a      	strb	r2, [r3, #0]
		break;
 8011360:	e011      	b.n	8011386 <ComputeDevicePresetMode+0xb2>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 8011362:	7dbb      	ldrb	r3, [r7, #22]
 8011364:	3318      	adds	r3, #24
 8011366:	443b      	add	r3, r7
 8011368:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	701a      	strb	r2, [r3, #0]
		break;
 8011370:	e009      	b.n	8011386 <ComputeDevicePresetMode+0xb2>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 8011372:	7dbb      	ldrb	r3, [r7, #22]
 8011374:	3318      	adds	r3, #24
 8011376:	443b      	add	r3, r7
 8011378:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 801137c:	683b      	ldr	r3, [r7, #0]
 801137e:	701a      	strb	r2, [r3, #0]
		break;
 8011380:	e001      	b.n	8011386 <ComputeDevicePresetMode+0xb2>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8011382:	23f8      	movs	r3, #248	@ 0xf8
 8011384:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 8011386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801138a:	4618      	mov	r0, r3
 801138c:	371c      	adds	r7, #28
 801138e:	46bd      	mov	sp, r7
 8011390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011394:	4770      	bx	lr
 8011396:	bf00      	nop
 8011398:	080191b8 	.word	0x080191b8
 801139c:	080191bc 	.word	0x080191bc
 80113a0:	080191c0 	.word	0x080191c0

080113a4 <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 80113a4:	b5b0      	push	{r4, r5, r7, lr}
 80113a6:	b08e      	sub	sp, #56	@ 0x38
 80113a8:	af04      	add	r7, sp, #16
 80113aa:	60f8      	str	r0, [r7, #12]
 80113ac:	607b      	str	r3, [r7, #4]
 80113ae:	460b      	mov	r3, r1
 80113b0:	72fb      	strb	r3, [r7, #11]
 80113b2:	4613      	mov	r3, r2
 80113b4:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80113b6:	2300      	movs	r3, #0
 80113b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80113bc:	7afb      	ldrb	r3, [r7, #11]
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d002      	beq.n	80113c8 <SetPresetMode+0x24>
 80113c2:	7afb      	ldrb	r3, [r7, #11]
 80113c4:	2b08      	cmp	r3, #8
 80113c6:	d103      	bne.n	80113d0 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 80113c8:	2340      	movs	r3, #64	@ 0x40
 80113ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80113ce:	e002      	b.n	80113d6 <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80113d0:	2320      	movs	r3, #32
 80113d2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 80113d6:	f107 0225 	add.w	r2, r7, #37	@ 0x25
 80113da:	7ab9      	ldrb	r1, [r7, #10]
 80113dc:	7afb      	ldrb	r3, [r7, #11]
 80113de:	4618      	mov	r0, r3
 80113e0:	f7ff ff78 	bl	80112d4 <ComputeDevicePresetMode>
 80113e4:	4603      	mov	r3, r0
 80113e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 80113ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d112      	bne.n	8011418 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 80113f2:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 80113f6:	f107 001c 	add.w	r0, r7, #28
 80113fa:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80113fe:	f107 0314 	add.w	r3, r7, #20
 8011402:	9301      	str	r3, [sp, #4]
 8011404:	f107 0318 	add.w	r3, r7, #24
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	4603      	mov	r3, r0
 801140c:	68f8      	ldr	r0, [r7, #12]
 801140e:	f001 f801 	bl	8012414 <VL53L1_get_preset_mode_timing_cfg>
 8011412:	4603      	mov	r3, r0
 8011414:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8011418:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801141c:	2b00      	cmp	r3, #0
 801141e:	d112      	bne.n	8011446 <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8011420:	f897 0025 	ldrb.w	r0, [r7, #37]	@ 0x25
 8011424:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8011426:	69fd      	ldr	r5, [r7, #28]
 8011428:	69bb      	ldr	r3, [r7, #24]
 801142a:	697a      	ldr	r2, [r7, #20]
 801142c:	6879      	ldr	r1, [r7, #4]
 801142e:	9102      	str	r1, [sp, #8]
 8011430:	9201      	str	r2, [sp, #4]
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	462b      	mov	r3, r5
 8011436:	4622      	mov	r2, r4
 8011438:	4601      	mov	r1, r0
 801143a:	68f8      	ldr	r0, [r7, #12]
 801143c:	f001 f894 	bl	8012568 <VL53L1_set_preset_mode>
 8011440:	4603      	mov	r3, r0
 8011442:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 8011446:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801144a:	2b00      	cmp	r3, #0
 801144c:	d103      	bne.n	8011456 <SetPresetMode+0xb2>
		PALDevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8011454:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 8011456:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801145a:	2b00      	cmp	r3, #0
 801145c:	d103      	bne.n	8011466 <SetPresetMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	7afa      	ldrb	r2, [r7, #11]
 8011462:	f883 237c 	strb.w	r2, [r3, #892]	@ 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 8011466:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801146a:	4618      	mov	r0, r3
 801146c:	3728      	adds	r7, #40	@ 0x28
 801146e:	46bd      	mov	sp, r7
 8011470:	bdb0      	pop	{r4, r5, r7, pc}

08011472 <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 8011472:	b580      	push	{r7, lr}
 8011474:	b084      	sub	sp, #16
 8011476:	af00      	add	r7, sp, #0
 8011478:	6078      	str	r0, [r7, #4]
 801147a:	460b      	mov	r3, r1
 801147c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801147e:	2300      	movs	r3, #0
 8011480:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 8011482:	2303      	movs	r3, #3
 8011484:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 8011486:	7bba      	ldrb	r2, [r7, #14]
 8011488:	78f9      	ldrb	r1, [r7, #3]
 801148a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801148e:	6878      	ldr	r0, [r7, #4]
 8011490:	f7ff ff88 	bl	80113a4 <SetPresetMode>
 8011494:	4603      	mov	r3, r0
 8011496:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8011498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d11f      	bne.n	80114e0 <VL53L1_SetPresetMode+0x6e>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	7bba      	ldrb	r2, [r7, #14]
 80114a4:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				DistanceMode);

		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	7bba      	ldrb	r2, [r7, #14]
 80114ac:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 80114b0:	78fb      	ldrb	r3, [r7, #3]
 80114b2:	2b04      	cmp	r3, #4
 80114b4:	d005      	beq.n	80114c2 <VL53L1_SetPresetMode+0x50>
 80114b6:	78fb      	ldrb	r3, [r7, #3]
 80114b8:	2b03      	cmp	r3, #3
 80114ba:	d002      	beq.n	80114c2 <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 80114bc:	78fb      	ldrb	r3, [r7, #3]
 80114be:	2b08      	cmp	r3, #8
 80114c0:	d107      	bne.n	80114d2 <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80114c2:	f24a 0128 	movw	r1, #41000	@ 0xa028
 80114c6:	6878      	ldr	r0, [r7, #4]
 80114c8:	f000 f8a2 	bl	8011610 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80114cc:	4603      	mov	r3, r0
 80114ce:	73fb      	strb	r3, [r7, #15]
 80114d0:	e006      	b.n	80114e0 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 80114d2:	f248 2135 	movw	r1, #33333	@ 0x8235
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f000 f89a 	bl	8011610 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 80114dc:	4603      	mov	r3, r0
 80114de:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80114e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d106      	bne.n	80114f6 <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 80114e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	f000 f965 	bl	80117bc <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 80114f2:	4603      	mov	r3, r0
 80114f4:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80114f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}

08011502 <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 8011502:	b580      	push	{r7, lr}
 8011504:	b088      	sub	sp, #32
 8011506:	af00      	add	r7, sp, #0
 8011508:	6078      	str	r0, [r7, #4]
 801150a:	460b      	mov	r3, r1
 801150c:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801150e:	2300      	movs	r3, #0
 8011510:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8011512:	687b      	ldr	r3, [r7, #4]
 8011514:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 8011518:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 801151a:	78fb      	ldrb	r3, [r7, #3]
 801151c:	2b01      	cmp	r3, #1
 801151e:	d008      	beq.n	8011532 <VL53L1_SetDistanceMode+0x30>
 8011520:	78fb      	ldrb	r3, [r7, #3]
 8011522:	2b02      	cmp	r3, #2
 8011524:	d005      	beq.n	8011532 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 8011526:	78fb      	ldrb	r3, [r7, #3]
 8011528:	2b03      	cmp	r3, #3
 801152a:	d002      	beq.n	8011532 <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 801152c:	f06f 0303 	mvn.w	r3, #3
 8011530:	e069      	b.n	8011606 <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 8011532:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d10a      	bne.n	8011550 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 801153a:	78fb      	ldrb	r3, [r7, #3]
 801153c:	2b01      	cmp	r3, #1
 801153e:	d002      	beq.n	8011546 <VL53L1_SetDistanceMode+0x44>
 8011540:	78fb      	ldrb	r3, [r7, #3]
 8011542:	2b02      	cmp	r3, #2
 8011544:	d102      	bne.n	801154c <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 8011546:	78fb      	ldrb	r3, [r7, #3]
 8011548:	77bb      	strb	r3, [r7, #30]
 801154a:	e001      	b.n	8011550 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 801154c:	2303      	movs	r3, #3
 801154e:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 8011550:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d107      	bne.n	8011568 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 8011558:	f107 0308 	add.w	r3, r7, #8
 801155c:	4619      	mov	r1, r3
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f000 ff01 	bl	8012366 <VL53L1_get_user_zone>
 8011564:	4603      	mov	r3, r0
 8011566:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  PALDevDataGet(Dev,
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	695b      	ldr	r3, [r3, #20]
 801156c:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 801156e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d10a      	bne.n	801158c <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8011576:	f107 0314 	add.w	r3, r7, #20
 801157a:	f107 0210 	add.w	r2, r7, #16
 801157e:	f107 010c 	add.w	r1, r7, #12
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f000 fe2c 	bl	80121e0 <VL53L1_get_timeouts_us>
 8011588:	4603      	mov	r3, r0
 801158a:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 801158c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d107      	bne.n	80115a4 <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 8011594:	7fba      	ldrb	r2, [r7, #30]
 8011596:	7f79      	ldrb	r1, [r7, #29]
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7ff ff02 	bl	80113a4 <SetPresetMode>
 80115a0:	4603      	mov	r3, r0
 80115a2:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 80115a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d10b      	bne.n	80115c4 <VL53L1_SetDistanceMode+0xc2>
		PALDevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	7fba      	ldrb	r2, [r7, #30]
 80115b0:	f883 237e 	strb.w	r2, [r3, #894]	@ 0x37e
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	7fba      	ldrb	r2, [r7, #30]
 80115b8:	f883 237f 	strb.w	r2, [r3, #895]	@ 0x37f
				InternalDistanceMode);
		PALDevDataSet(Dev, CurrentParameters.DistanceMode,
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	78fa      	ldrb	r2, [r7, #3]
 80115c0:	f883 237d 	strb.w	r2, [r3, #893]	@ 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80115c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d10e      	bne.n	80115ea <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80115cc:	68f9      	ldr	r1, [r7, #12]
 80115ce:	693a      	ldr	r2, [r7, #16]
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	6878      	ldr	r0, [r7, #4]
 80115d4:	f000 fdcc 	bl	8012170 <VL53L1_set_timeouts_us>
 80115d8:	4603      	mov	r3, r0
 80115da:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80115dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d102      	bne.n	80115ea <VL53L1_SetDistanceMode+0xe8>
			PALDevDataSet(Dev, LLData.range_config_timeout_us,
 80115e4:	697a      	ldr	r2, [r7, #20]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 80115ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d107      	bne.n	8011602 <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 80115f2:	f107 0308 	add.w	r3, r7, #8
 80115f6:	4619      	mov	r1, r3
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 fe91 	bl	8012320 <VL53L1_set_user_zone>
 80115fe:	4603      	mov	r3, r0
 8011600:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8011602:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011606:	4618      	mov	r0, r3
 8011608:	3720      	adds	r7, #32
 801160a:	46bd      	mov	sp, r7
 801160c:	bd80      	pop	{r7, pc}
	...

08011610 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	b08e      	sub	sp, #56	@ 0x38
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 801161a:	2300      	movs	r3, #0
 801161c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8011620:	4b64      	ldr	r3, [pc, #400]	@ (80117b4 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8011622:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_LLDriverData_t   *pLLData;

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8011624:	683b      	ldr	r3, [r7, #0]
 8011626:	4a64      	ldr	r2, [pc, #400]	@ (80117b8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a8>)
 8011628:	4293      	cmp	r3, r2
 801162a:	d902      	bls.n	8011632 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801162c:	23fc      	movs	r3, #252	@ 0xfc
 801162e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	if (Status == VL53L1_ERROR_NONE) {
 8011632:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8011636:	2b00      	cmp	r3, #0
 8011638:	d109      	bne.n	801164e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 801163a:	f107 0317 	add.w	r3, r7, #23
 801163e:	461a      	mov	r2, r3
 8011640:	2105      	movs	r1, #5
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 f9e7 	bl	8011a16 <VL53L1_GetSequenceStepEnable>
 8011648:	4603      	mov	r3, r0
 801164a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 801164e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8011652:	2b00      	cmp	r3, #0
 8011654:	d109      	bne.n	801166a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8011656:	f107 0316 	add.w	r3, r7, #22
 801165a:	461a      	mov	r2, r3
 801165c:	2106      	movs	r1, #6
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f000 f9d9 	bl	8011a16 <VL53L1_GetSequenceStepEnable>
 8011664:	4603      	mov	r3, r0
 8011666:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 801166a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801166e:	2b00      	cmp	r3, #0
 8011670:	d10b      	bne.n	801168a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 8011672:	f107 0310 	add.w	r3, r7, #16
 8011676:	f107 020c 	add.w	r2, r7, #12
 801167a:	f107 0108 	add.w	r1, r7, #8
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f000 fdae 	bl	80121e0 <VL53L1_get_timeouts_us>
 8011684:	4603      	mov	r3, r0
 8011686:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 801168a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801168e:	2b00      	cmp	r3, #0
 8011690:	f040 8081 	bne.w	8011796 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
		PresetMode = PALDevDataGet(Dev, CurrentParameters.PresetMode);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	f893 337c 	ldrb.w	r3, [r3, #892]	@ 0x37c
 801169a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		TimingGuard = 0;
 801169e:	2300      	movs	r3, #0
 80116a0:	633b      	str	r3, [r7, #48]	@ 0x30
		divisor = 1;
 80116a2:	2301      	movs	r3, #1
 80116a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		switch (PresetMode) {
 80116a6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80116aa:	2b08      	cmp	r3, #8
 80116ac:	d026      	beq.n	80116fc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xec>
 80116ae:	2b08      	cmp	r3, #8
 80116b0:	dc41      	bgt.n	8011736 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
 80116b2:	2b03      	cmp	r3, #3
 80116b4:	d00f      	beq.n	80116d6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xc6>
 80116b6:	2b04      	cmp	r3, #4
 80116b8:	d13d      	bne.n	8011736 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x126>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80116ba:	7dfb      	ldrb	r3, [r7, #23]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d002      	beq.n	80116c6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
 80116c0:	7dbb      	ldrb	r3, [r7, #22]
 80116c2:	2b01      	cmp	r3, #1
 80116c4:	d103      	bne.n	80116ce <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
				TimingGuard = 5000;
 80116c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80116ca:	633b      	str	r3, [r7, #48]	@ 0x30
			else
				TimingGuard = 1000;
		break;
 80116cc:	e036      	b.n	801173c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>
				TimingGuard = 1000;
 80116ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80116d2:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 80116d4:	e032      	b.n	801173c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80116d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	627b      	str	r3, [r7, #36]	@ 0x24
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 80116dc:	7dfb      	ldrb	r3, [r7, #23]
 80116de:	2b01      	cmp	r3, #1
 80116e0:	d002      	beq.n	80116e8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
 80116e2:	7dbb      	ldrb	r3, [r7, #22]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d103      	bne.n	80116f0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe0>
				TimingGuard = 26600;
 80116e8:	f246 73e8 	movw	r3, #26600	@ 0x67e8
 80116ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80116ee:	e002      	b.n	80116f6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe6>
			else
				TimingGuard = 21600;
 80116f0:	f245 4360 	movw	r3, #21600	@ 0x5460
 80116f4:	633b      	str	r3, [r7, #48]	@ 0x30
			divisor = 2;
 80116f6:	2302      	movs	r3, #2
 80116f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 80116fa:	e01f      	b.n	801173c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 80116fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80116fe:	005b      	lsls	r3, r3, #1
 8011700:	627b      	str	r3, [r7, #36]	@ 0x24
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8011702:	23f5      	movs	r3, #245	@ 0xf5
 8011704:	62bb      	str	r3, [r7, #40]	@ 0x28
			pLLData =  VL53L1DevStructGetLLDriverHandle(Dev);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	61fb      	str	r3, [r7, #28]
			vhv_loops = pLLData->low_power_auto_data.vhv_loop_bound;
 801170a:	69fb      	ldr	r3, [r7, #28]
 801170c:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 8011710:	61bb      	str	r3, [r7, #24]
			if (vhv_loops > 0) {
 8011712:	69bb      	ldr	r3, [r7, #24]
 8011714:	2b00      	cmp	r3, #0
 8011716:	dd07      	ble.n	8011728 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x118>
				vhv += vhv_loops *
 8011718:	69bb      	ldr	r3, [r7, #24]
 801171a:	22f5      	movs	r2, #245	@ 0xf5
 801171c:	fb02 f303 	mul.w	r3, r2, r3
 8011720:	461a      	mov	r2, r3
 8011722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011724:	4413      	add	r3, r2
 8011726:	62bb      	str	r3, [r7, #40]	@ 0x28
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8011728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801172a:	f603 53dc 	addw	r3, r3, #3548	@ 0xddc
 801172e:	633b      	str	r3, [r7, #48]	@ 0x30
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8011730:	2302      	movs	r3, #2
 8011732:	62fb      	str	r3, [r7, #44]	@ 0x2c
		break;
 8011734:	e002      	b.n	801173c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x12c>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8011736:	23f8      	movs	r3, #248	@ 0xf8
 8011738:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011740:	429a      	cmp	r2, r3
 8011742:	d803      	bhi.n	801174c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x13c>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8011744:	23fc      	movs	r3, #252	@ 0xfc
 8011746:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801174a:	e003      	b.n	8011754 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x144>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 801174c:	683a      	ldr	r2, [r7, #0]
 801174e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011750:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8011752:	613b      	str	r3, [r7, #16]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8011754:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8011758:	2b00      	cmp	r3, #0
 801175a:	d11c      	bne.n	8011796 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011760:	429a      	cmp	r2, r3
 8011762:	d203      	bcs.n	801176c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x15c>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8011764:	23fc      	movs	r3, #252	@ 0xfc
 8011766:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 801176a:	e00d      	b.n	8011788 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x178>
			else {
				TimingBudget /= divisor;
 801176c:	693a      	ldr	r2, [r7, #16]
 801176e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011770:	fbb2 f3f3 	udiv	r3, r2, r3
 8011774:	613b      	str	r3, [r7, #16]
				Status = VL53L1_set_timeouts_us(
 8011776:	68b9      	ldr	r1, [r7, #8]
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	693b      	ldr	r3, [r7, #16]
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f000 fcf7 	bl	8012170 <VL53L1_set_timeouts_us>
 8011782:	4603      	mov	r3, r0
 8011784:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8011788:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801178c:	2b00      	cmp	r3, #0
 801178e:	d102      	bne.n	8011796 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x186>
				PALDevDataSet(Dev,
 8011790:	693a      	ldr	r2, [r7, #16]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8011796:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801179a:	2b00      	cmp	r3, #0
 801179c:	d103      	bne.n	80117a6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x196>
		PALDevDataSet(Dev,
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	683a      	ldr	r2, [r7, #0]
 80117a2:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80117a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80117aa:	4618      	mov	r0, r3
 80117ac:	3738      	adds	r7, #56	@ 0x38
 80117ae:	46bd      	mov	sp, r7
 80117b0:	bd80      	pop	{r7, pc}
 80117b2:	bf00      	nop
 80117b4:	00086470 	.word	0x00086470
 80117b8:	00989680 	.word	0x00989680

080117bc <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80117c6:	2300      	movs	r3, #0
 80117c8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 80117ca:	6839      	ldr	r1, [r7, #0]
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f000 fca6 	bl	801211e <VL53L1_set_inter_measurement_period_ms>
 80117d2:	4603      	mov	r3, r0
 80117d4:	73fb      	strb	r3, [r7, #15]
			InterMeasurementPeriodMilliSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80117d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3710      	adds	r7, #16
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b086      	sub	sp, #24
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	60f8      	str	r0, [r7, #12]
 80117ea:	460b      	mov	r3, r1
 80117ec:	607a      	str	r2, [r7, #4]
 80117ee:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80117f0:	2300      	movs	r3, #0
 80117f2:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 80117f4:	897b      	ldrh	r3, [r7, #10]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d002      	beq.n	8011800 <SetLimitValue+0x1e>
 80117fa:	2b01      	cmp	r3, #1
 80117fc:	d009      	beq.n	8011812 <SetLimitValue+0x30>
 80117fe:	e011      	b.n	8011824 <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	0b9b      	lsrs	r3, r3, #14
 8011804:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8011806:	8abb      	ldrh	r3, [r7, #20]
 8011808:	4619      	mov	r1, r3
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	f001 f838 	bl	8012880 <VL53L1_set_lite_sigma_threshold>
		break;
 8011810:	e00a      	b.n	8011828 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	0a5b      	lsrs	r3, r3, #9
 8011816:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8011818:	8abb      	ldrh	r3, [r7, #20]
 801181a:	4619      	mov	r1, r3
 801181c:	68f8      	ldr	r0, [r7, #12]
 801181e:	f001 f85b 	bl	80128d8 <VL53L1_set_lite_min_count_rate>
		break;
 8011822:	e001      	b.n	8011828 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8011824:	23fc      	movs	r3, #252	@ 0xfc
 8011826:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8011828:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801182c:	4618      	mov	r0, r3
 801182e:	3718      	adds	r7, #24
 8011830:	46bd      	mov	sp, r7
 8011832:	bd80      	pop	{r7, pc}

08011834 <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8011834:	b580      	push	{r7, lr}
 8011836:	b084      	sub	sp, #16
 8011838:	af00      	add	r7, sp, #0
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	460b      	mov	r3, r1
 801183e:	807b      	strh	r3, [r7, #2]
 8011840:	4613      	mov	r3, r2
 8011842:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011844:	2300      	movs	r3, #0
 8011846:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8011848:	2300      	movs	r3, #0
 801184a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 801184c:	887b      	ldrh	r3, [r7, #2]
 801184e:	2b01      	cmp	r3, #1
 8011850:	d902      	bls.n	8011858 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8011852:	23fc      	movs	r3, #252	@ 0xfc
 8011854:	73fb      	strb	r3, [r7, #15]
 8011856:	e014      	b.n	8011882 <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8011858:	787b      	ldrb	r3, [r7, #1]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d102      	bne.n	8011864 <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 801185e:	2300      	movs	r3, #0
 8011860:	60bb      	str	r3, [r7, #8]
 8011862:	e006      	b.n	8011872 <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8011864:	887b      	ldrh	r3, [r7, #2]
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	33e0      	adds	r3, #224	@ 0xe0
 801186a:	009b      	lsls	r3, r3, #2
 801186c:	4413      	add	r3, r2
 801186e:	689b      	ldr	r3, [r3, #8]
 8011870:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8011872:	887b      	ldrh	r3, [r7, #2]
 8011874:	68ba      	ldr	r2, [r7, #8]
 8011876:	4619      	mov	r1, r3
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f7ff ffb2 	bl	80117e2 <SetLimitValue>
 801187e:	4603      	mov	r3, r0
 8011880:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8011882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d10c      	bne.n	80118a4 <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801188a:	787b      	ldrb	r3, [r7, #1]
 801188c:	2b00      	cmp	r3, #0
 801188e:	bf14      	ite	ne
 8011890:	2301      	movne	r3, #1
 8011892:	2300      	moveq	r3, #0
 8011894:	b2da      	uxtb	r2, r3
 8011896:	887b      	ldrh	r3, [r7, #2]
 8011898:	4611      	mov	r1, r2
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	4413      	add	r3, r2
 801189e:	460a      	mov	r2, r1
 80118a0:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 80118a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3710      	adds	r7, #16
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b087      	sub	sp, #28
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	460b      	mov	r3, r1
 80118ba:	607a      	str	r2, [r7, #4]
 80118bc:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80118be:	2300      	movs	r3, #0
 80118c0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 80118c2:	897b      	ldrh	r3, [r7, #10]
 80118c4:	2b01      	cmp	r3, #1
 80118c6:	d905      	bls.n	80118d4 <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80118c8:	23fc      	movs	r3, #252	@ 0xfc
 80118ca:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	701a      	strb	r2, [r3, #0]
 80118d2:	e008      	b.n	80118e6 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80118d4:	897b      	ldrh	r3, [r7, #10]
 80118d6:	68fa      	ldr	r2, [r7, #12]
 80118d8:	4413      	add	r3, r2
 80118da:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 80118de:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	7dba      	ldrb	r2, [r7, #22]
 80118e4:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80118e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	371c      	adds	r7, #28
 80118ee:	46bd      	mov	sp, r7
 80118f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f4:	4770      	bx	lr

080118f6 <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b086      	sub	sp, #24
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	60f8      	str	r0, [r7, #12]
 80118fe:	460b      	mov	r3, r1
 8011900:	607a      	str	r2, [r7, #4]
 8011902:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011904:	2300      	movs	r3, #0
 8011906:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8011908:	897b      	ldrh	r3, [r7, #10]
 801190a:	2b01      	cmp	r3, #1
 801190c:	d902      	bls.n	8011914 <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 801190e:	23fc      	movs	r3, #252	@ 0xfc
 8011910:	75fb      	strb	r3, [r7, #23]
 8011912:	e023      	b.n	801195c <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8011914:	897b      	ldrh	r3, [r7, #10]
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	4413      	add	r3, r2
 801191a:	f893 3384 	ldrb.w	r3, [r3, #900]	@ 0x384
 801191e:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8011920:	7dbb      	ldrb	r3, [r7, #22]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d107      	bne.n	8011936 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8011926:	897b      	ldrh	r3, [r7, #10]
 8011928:	68fa      	ldr	r2, [r7, #12]
 801192a:	33e0      	adds	r3, #224	@ 0xe0
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	4413      	add	r3, r2
 8011930:	687a      	ldr	r2, [r7, #4]
 8011932:	609a      	str	r2, [r3, #8]
 8011934:	e012      	b.n	801195c <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 8011936:	897b      	ldrh	r3, [r7, #10]
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	4619      	mov	r1, r3
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7ff ff50 	bl	80117e2 <SetLimitValue>
 8011942:	4603      	mov	r3, r0
 8011944:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8011946:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d106      	bne.n	801195c <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 801194e:	897b      	ldrh	r3, [r7, #10]
 8011950:	68fa      	ldr	r2, [r7, #12]
 8011952:	33e0      	adds	r3, #224	@ 0xe0
 8011954:	009b      	lsls	r3, r3, #2
 8011956:	4413      	add	r3, r2
 8011958:	687a      	ldr	r2, [r7, #4]
 801195a:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801195c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011960:	4618      	mov	r0, r3
 8011962:	3718      	adds	r7, #24
 8011964:	46bd      	mov	sp, r7
 8011966:	bd80      	pop	{r7, pc}

08011968 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b088      	sub	sp, #32
 801196c:	af00      	add	r7, sp, #0
 801196e:	60f8      	str	r0, [r7, #12]
 8011970:	460b      	mov	r3, r1
 8011972:	607a      	str	r2, [r7, #4]
 8011974:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011976:	2300      	movs	r3, #0
 8011978:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 801197a:	897b      	ldrh	r3, [r7, #10]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d002      	beq.n	8011986 <VL53L1_GetLimitCheckValue+0x1e>
 8011980:	2b01      	cmp	r3, #1
 8011982:	d00c      	beq.n	801199e <VL53L1_GetLimitCheckValue+0x36>
 8011984:	e017      	b.n	80119b6 <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8011986:	f107 0314 	add.w	r3, r7, #20
 801198a:	4619      	mov	r1, r3
 801198c:	68f8      	ldr	r0, [r7, #12]
 801198e:	f000 ff61 	bl	8012854 <VL53L1_get_lite_sigma_threshold>
 8011992:	4603      	mov	r3, r0
 8011994:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8011996:	8abb      	ldrh	r3, [r7, #20]
 8011998:	039b      	lsls	r3, r3, #14
 801199a:	61bb      	str	r3, [r7, #24]
		break;
 801199c:	e00d      	b.n	80119ba <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 801199e:	f107 0316 	add.w	r3, r7, #22
 80119a2:	4619      	mov	r1, r3
 80119a4:	68f8      	ldr	r0, [r7, #12]
 80119a6:	f000 ff81 	bl	80128ac <VL53L1_get_lite_min_count_rate>
 80119aa:	4603      	mov	r3, r0
 80119ac:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 80119ae:	8afb      	ldrh	r3, [r7, #22]
 80119b0:	025b      	lsls	r3, r3, #9
 80119b2:	61bb      	str	r3, [r7, #24]
		break;
 80119b4:	e001      	b.n	80119ba <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 80119b6:	23fc      	movs	r3, #252	@ 0xfc
 80119b8:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 80119ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d123      	bne.n	8011a0a <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 80119c2:	69bb      	ldr	r3, [r7, #24]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d110      	bne.n	80119ea <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 80119c8:	897b      	ldrh	r3, [r7, #10]
 80119ca:	68fa      	ldr	r2, [r7, #12]
 80119cc:	33e0      	adds	r3, #224	@ 0xe0
 80119ce:	009b      	lsls	r3, r3, #2
 80119d0:	4413      	add	r3, r2
 80119d2:	689b      	ldr	r3, [r3, #8]
 80119d4:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	69ba      	ldr	r2, [r7, #24]
 80119da:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80119dc:	897b      	ldrh	r3, [r7, #10]
 80119de:	68fa      	ldr	r2, [r7, #12]
 80119e0:	4413      	add	r3, r2
 80119e2:	2200      	movs	r2, #0
 80119e4:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
 80119e8:	e00f      	b.n	8011a0a <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	69ba      	ldr	r2, [r7, #24]
 80119ee:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80119f0:	897b      	ldrh	r3, [r7, #10]
 80119f2:	68fa      	ldr	r2, [r7, #12]
 80119f4:	33e0      	adds	r3, #224	@ 0xe0
 80119f6:	009b      	lsls	r3, r3, #2
 80119f8:	4413      	add	r3, r2
 80119fa:	69ba      	ldr	r2, [r7, #24]
 80119fc:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 80119fe:	897b      	ldrh	r3, [r7, #10]
 8011a00:	68fa      	ldr	r2, [r7, #12]
 8011a02:	4413      	add	r3, r2
 8011a04:	2201      	movs	r2, #1
 8011a06:	f883 2384 	strb.w	r2, [r3, #900]	@ 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8011a0a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3720      	adds	r7, #32
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}

08011a16 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8011a16:	b580      	push	{r7, lr}
 8011a18:	b086      	sub	sp, #24
 8011a1a:	af00      	add	r7, sp, #0
 8011a1c:	60f8      	str	r0, [r7, #12]
 8011a1e:	460b      	mov	r3, r1
 8011a20:	607a      	str	r2, [r7, #4]
 8011a22:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011a24:	2300      	movs	r3, #0
 8011a26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8011a28:	7afb      	ldrb	r3, [r7, #11]
 8011a2a:	687a      	ldr	r2, [r7, #4]
 8011a2c:	4619      	mov	r1, r3
 8011a2e:	68f8      	ldr	r0, [r7, #12]
 8011a30:	f000 fc3f 	bl	80122b2 <VL53L1_get_sequence_config_bit>
 8011a34:	4603      	mov	r3, r0
 8011a36:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8011a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3718      	adds	r7, #24
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bd80      	pop	{r7, pc}

08011a44 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	73fb      	strb	r3, [r7, #15]
	uint8_t DeviceMeasurementMode;
	VL53L1_State CurrPalState;

	LOG_FUNCTION_START("");

	CurrPalState = PALDevDataGet(Dev, PalState);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f893 3378 	ldrb.w	r3, [r3, #888]	@ 0x378
 8011a56:	73bb      	strb	r3, [r7, #14]
	switch (CurrPalState) {
 8011a58:	7bbb      	ldrb	r3, [r7, #14]
 8011a5a:	2b63      	cmp	r3, #99	@ 0x63
 8011a5c:	dc12      	bgt.n	8011a84 <VL53L1_StartMeasurement+0x40>
 8011a5e:	2b62      	cmp	r3, #98	@ 0x62
 8011a60:	da0d      	bge.n	8011a7e <VL53L1_StartMeasurement+0x3a>
 8011a62:	2b05      	cmp	r3, #5
 8011a64:	dc0e      	bgt.n	8011a84 <VL53L1_StartMeasurement+0x40>
 8011a66:	2b04      	cmp	r3, #4
 8011a68:	da09      	bge.n	8011a7e <VL53L1_StartMeasurement+0x3a>
 8011a6a:	2b02      	cmp	r3, #2
 8011a6c:	dc02      	bgt.n	8011a74 <VL53L1_StartMeasurement+0x30>
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	da05      	bge.n	8011a7e <VL53L1_StartMeasurement+0x3a>
 8011a72:	e007      	b.n	8011a84 <VL53L1_StartMeasurement+0x40>
 8011a74:	2b03      	cmp	r3, #3
 8011a76:	d105      	bne.n	8011a84 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 8011a78:	2300      	movs	r3, #0
 8011a7a:	73fb      	strb	r3, [r7, #15]
		break;
 8011a7c:	e004      	b.n	8011a88 <VL53L1_StartMeasurement+0x44>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 8011a7e:	23f2      	movs	r3, #242	@ 0xf2
 8011a80:	73fb      	strb	r3, [r7, #15]
		break;
 8011a82:	e001      	b.n	8011a88 <VL53L1_StartMeasurement+0x44>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 8011a84:	23fd      	movs	r3, #253	@ 0xfd
 8011a86:	73fb      	strb	r3, [r7, #15]
	}

	DeviceMeasurementMode = PALDevDataGet(Dev, LLData.measurement_mode);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	789b      	ldrb	r3, [r3, #2]
 8011a8c:	737b      	strb	r3, [r7, #13]

	if (Status == VL53L1_ERROR_NONE)
 8011a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d107      	bne.n	8011aa6 <VL53L1_StartMeasurement+0x62>
		Status = VL53L1_init_and_start_range(
 8011a96:	7b7b      	ldrb	r3, [r7, #13]
 8011a98:	2206      	movs	r2, #6
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	6878      	ldr	r0, [r7, #4]
 8011a9e:	f000 ff51 	bl	8012944 <VL53L1_init_and_start_range>
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	73fb      	strb	r3, [r7, #15]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8011aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d103      	bne.n	8011ab6 <VL53L1_StartMeasurement+0x72>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	2204      	movs	r2, #4
 8011ab2:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8011ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <VL53L1_StopMeasurement>:

VL53L1_Error VL53L1_StopMeasurement(VL53L1_DEV Dev)
{
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b084      	sub	sp, #16
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011aca:	2300      	movs	r3, #0
 8011acc:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_stop_range(Dev);
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f001 f99a 	bl	8012e08 <VL53L1_stop_range>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	73fb      	strb	r3, [r7, #15]

	/* Set PAL State to Idle */
	if (Status == VL53L1_ERROR_NONE)
 8011ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d103      	bne.n	8011ae8 <VL53L1_StopMeasurement+0x26>
		PALDevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	2203      	movs	r2, #3
 8011ae4:	f883 2378 	strb.w	r2, [r3, #888]	@ 0x378

	LOG_FUNCTION_END(Status);
	return Status;
 8011ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3710      	adds	r7, #16
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <VL53L1_GetMeasurementDataReady>:
}


VL53L1_Error VL53L1_GetMeasurementDataReady(VL53L1_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
 8011afc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011afe:	2300      	movs	r3, #0
 8011b00:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_is_new_data_ready(Dev, pMeasurementDataReady);
 8011b02:	6839      	ldr	r1, [r7, #0]
 8011b04:	6878      	ldr	r0, [r7, #4]
 8011b06:	f004 f8d7 	bl	8015cb8 <VL53L1_is_new_data_ready>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8011b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
	...

08011b1c <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 8011b1c:	b480      	push	{r7}
 8011b1e:	b08d      	sub	sp, #52	@ 0x34
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	4603      	mov	r3, r0
 8011b24:	603a      	str	r2, [r7, #0]
 8011b26:	71fb      	strb	r3, [r7, #7]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 8011b2c:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8011b30:	84bb      	strh	r3, [r7, #36]	@ 0x24
	uint16_t SRAS = 30;
 8011b32:	231e      	movs	r3, #30
 8011b34:	847b      	strh	r3, [r7, #34]	@ 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 8011b36:	4b33      	ldr	r3, [pc, #204]	@ (8011c04 <ComputeRQL+0xe8>)
 8011b38:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 8011b3a:	4b33      	ldr	r3, [pc, #204]	@ (8011c08 <ComputeRQL+0xec>)
 8011b3c:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 8011b3e:	f641 139a 	movw	r3, #6554	@ 0x199a
 8011b42:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 8011b44:	79fb      	ldrb	r3, [r7, #7]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d103      	bne.n	8011b52 <ComputeRQL+0x36>
		returnvalue = 0;
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011b50:	e04f      	b.n	8011bf2 <ComputeRQL+0xd6>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 8011b52:	79bb      	ldrb	r3, [r7, #6]
 8011b54:	2b07      	cmp	r3, #7
 8011b56:	d103      	bne.n	8011b60 <ComputeRQL+0x44>
		returnvalue = 50;
 8011b58:	2332      	movs	r3, #50	@ 0x32
 8011b5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8011b5e:	e048      	b.n	8011bf2 <ComputeRQL+0xd6>
	else {
		if (presults_data->median_range_mm < SRL)
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b66:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	dd03      	ble.n	8011b76 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 8011b6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8011b70:	041b      	lsls	r3, r3, #16
 8011b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011b74:	e007      	b.n	8011b86 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	fb02 f303 	mul.w	r3, r2, r3
 8011b84:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8011b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d020      	beq.n	8011bce <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011b90:	461a      	mov	r2, r3
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	fb02 f303 	mul.w	r3, r2, r3
 8011b98:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 8011b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9c:	085b      	lsrs	r3, r3, #1
 8011b9e:	693a      	ldr	r2, [r7, #16]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8011ba4:	693a      	ldr	r2, [r7, #16]
 8011ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8011bac:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 8011bae:	693b      	ldr	r3, [r7, #16]
 8011bb0:	041b      	lsls	r3, r3, #16
 8011bb2:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8011bb4:	693a      	ldr	r2, [r7, #16]
 8011bb6:	69fb      	ldr	r3, [r7, #28]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d804      	bhi.n	8011bc6 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 8011bbc:	69fa      	ldr	r2, [r7, #28]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bc4:	e006      	b.n	8011bd4 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8011bc6:	f44f 1348 	mov.w	r3, #3276800	@ 0x320000
 8011bca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011bcc:	e002      	b.n	8011bd4 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 8011bce:	f44f 03c8 	mov.w	r3, #6553600	@ 0x640000
 8011bd2:	62bb      	str	r3, [r7, #40]	@ 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8011bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bd6:	0c1b      	lsrs	r3, r3, #16
 8011bd8:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 8011bda:	7bfb      	ldrb	r3, [r7, #15]
 8011bdc:	2b32      	cmp	r3, #50	@ 0x32
 8011bde:	d905      	bls.n	8011bec <ComputeRQL+0xd0>
 8011be0:	7bfb      	ldrb	r3, [r7, #15]
 8011be2:	2b64      	cmp	r3, #100	@ 0x64
 8011be4:	bf28      	it	cs
 8011be6:	2364      	movcs	r3, #100	@ 0x64
 8011be8:	b2db      	uxtb	r3, r3
 8011bea:	e000      	b.n	8011bee <ComputeRQL+0xd2>
 8011bec:	2332      	movs	r3, #50	@ 0x32
 8011bee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return returnvalue;
 8011bf2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3734      	adds	r7, #52	@ 0x34
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr
 8011c02:	bf00      	nop
 8011c04:	0075b333 	.word	0x0075b333
 8011c08:	0030cccd 	.word	0x0030cccd

08011c0c <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b085      	sub	sp, #20
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	4603      	mov	r3, r0
 8011c14:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 8011c16:	79fb      	ldrb	r3, [r7, #7]
 8011c18:	3b04      	subs	r3, #4
 8011c1a:	2b0f      	cmp	r3, #15
 8011c1c:	d83d      	bhi.n	8011c9a <ConvertStatusLite+0x8e>
 8011c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c24 <ConvertStatusLite+0x18>)
 8011c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c24:	08011c77 	.word	0x08011c77
 8011c28:	08011c71 	.word	0x08011c71
 8011c2c:	08011c7d 	.word	0x08011c7d
 8011c30:	08011c83 	.word	0x08011c83
 8011c34:	08011c8f 	.word	0x08011c8f
 8011c38:	08011c95 	.word	0x08011c95
 8011c3c:	08011c9b 	.word	0x08011c9b
 8011c40:	08011c9b 	.word	0x08011c9b
 8011c44:	08011c89 	.word	0x08011c89
 8011c48:	08011c9b 	.word	0x08011c9b
 8011c4c:	08011c9b 	.word	0x08011c9b
 8011c50:	08011c9b 	.word	0x08011c9b
 8011c54:	08011c9b 	.word	0x08011c9b
 8011c58:	08011c9b 	.word	0x08011c9b
 8011c5c:	08011c65 	.word	0x08011c65
 8011c60:	08011c6b 	.word	0x08011c6b
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 8011c64:	230a      	movs	r3, #10
 8011c66:	73fb      	strb	r3, [r7, #15]
		break;
 8011c68:	e019      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 8011c6a:	2306      	movs	r3, #6
 8011c6c:	73fb      	strb	r3, [r7, #15]
		break;
 8011c6e:	e016      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8011c70:	2304      	movs	r3, #4
 8011c72:	73fb      	strb	r3, [r7, #15]
		break;
 8011c74:	e013      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 8011c76:	2302      	movs	r3, #2
 8011c78:	73fb      	strb	r3, [r7, #15]
		break;
 8011c7a:	e010      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8011c7c:	2301      	movs	r3, #1
 8011c7e:	73fb      	strb	r3, [r7, #15]
		break;
 8011c80:	e00d      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8011c82:	2307      	movs	r3, #7
 8011c84:	73fb      	strb	r3, [r7, #15]
		break;
 8011c86:	e00a      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 8011c88:	2309      	movs	r3, #9
 8011c8a:	73fb      	strb	r3, [r7, #15]
		break;
 8011c8c:	e007      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8011c8e:	2303      	movs	r3, #3
 8011c90:	73fb      	strb	r3, [r7, #15]
		break;
 8011c92:	e004      	b.n	8011c9e <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8011c94:	2300      	movs	r3, #0
 8011c96:	73fb      	strb	r3, [r7, #15]
		break;
 8011c98:	e001      	b.n	8011c9e <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 8011c9a:	23ff      	movs	r3, #255	@ 0xff
 8011c9c:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8011c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca0:	4618      	mov	r0, r3
 8011ca2:	3714      	adds	r7, #20
 8011ca4:	46bd      	mov	sp, r7
 8011ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011caa:	4770      	bx	lr

08011cac <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b08c      	sub	sp, #48	@ 0x30
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	607b      	str	r3, [r7, #4]
 8011cb6:	460b      	mov	r3, r1
 8011cb8:	72fb      	strb	r3, [r7, #11]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011cbe:	2300      	movs	r3, #0
 8011cc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	685a      	ldr	r2, [r3, #4]
 8011cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cca:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8011cd2:	f003 031f 	and.w	r3, r3, #31
 8011cd6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 8011cda:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8011cde:	7afb      	ldrb	r3, [r7, #11]
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7ff ff1a 	bl	8011b1c <ComputeRQL>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	461a      	mov	r2, r3
 8011cec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cee:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011cf4:	025b      	lsls	r3, r3, #9
 8011cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 8011cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011cfc:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8011d02:	025b      	lsls	r3, r3, #9
 8011d04:	627b      	str	r3, [r7, #36]	@ 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 8011d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d0a:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 8011d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d12:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011d18:	025b      	lsls	r3, r3, #9
 8011d1a:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 8011d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d1e:	6a3a      	ldr	r2, [r7, #32]
 8011d20:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	@ 0x3c
 8011d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d2a:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 8011d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d2e:	2200      	movs	r2, #0
 8011d30:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 8011d32:	7abb      	ldrb	r3, [r7, #10]
 8011d34:	2b11      	cmp	r3, #17
 8011d36:	d009      	beq.n	8011d4c <SetSimpleData+0xa0>
 8011d38:	2b11      	cmp	r3, #17
 8011d3a:	dc0f      	bgt.n	8011d5c <SetSimpleData+0xb0>
 8011d3c:	2b03      	cmp	r3, #3
 8011d3e:	dc02      	bgt.n	8011d46 <SetSimpleData+0x9a>
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	dc03      	bgt.n	8011d4c <SetSimpleData+0xa0>
 8011d44:	e00a      	b.n	8011d5c <SetSimpleData+0xb0>
 8011d46:	2b0d      	cmp	r3, #13
 8011d48:	d004      	beq.n	8011d54 <SetSimpleData+0xa8>
 8011d4a:	e007      	b.n	8011d5c <SetSimpleData+0xb0>
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8011d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d4e:	2205      	movs	r2, #5
 8011d50:	76da      	strb	r2, [r3, #27]
		break;
 8011d52:	e006      	b.n	8011d62 <SetSimpleData+0xb6>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8011d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d56:	220d      	movs	r2, #13
 8011d58:	76da      	strb	r2, [r3, #27]
		break;
 8011d5a:	e002      	b.n	8011d62 <SetSimpleData+0xb6>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8011d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d5e:	2200      	movs	r2, #0
 8011d60:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 8011d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d64:	7edb      	ldrb	r3, [r3, #27]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d108      	bne.n	8011d7c <SetSimpleData+0xd0>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8011d6a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011d6e:	4618      	mov	r0, r3
 8011d70:	f7ff ff4c 	bl	8011c0c <ConvertStatusLite>
 8011d74:	4603      	mov	r3, r0
 8011d76:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8011d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d7a:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011d80:	025b      	lsls	r3, r3, #9
 8011d82:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6a3a      	ldr	r2, [r7, #32]
 8011d88:	f8c3 2390 	str.w	r2, [r3, #912]	@ 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8011d90:	025b      	lsls	r3, r3, #9
 8011d92:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	6a3a      	ldr	r2, [r7, #32]
 8011d98:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8011d9c:	f107 0314 	add.w	r3, r7, #20
 8011da0:	461a      	mov	r2, r3
 8011da2:	2100      	movs	r1, #0
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f7ff fddf 	bl	8011968 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8011daa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011dae:	2b06      	cmp	r3, #6
 8011db0:	bf0c      	ite	eq
 8011db2:	2301      	moveq	r3, #1
 8011db4:	2300      	movne	r3, #0
 8011db6:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8011db8:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8011dba:	f107 0319 	add.w	r3, r7, #25
 8011dbe:	461a      	mov	r2, r3
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7ff fd74 	bl	80118b0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8011dc8:	7e7b      	ldrb	r3, [r7, #25]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d104      	bne.n	8011dd8 <SetSimpleData+0x12c>
 8011dce:	7ffb      	ldrb	r3, [r7, #31]
 8011dd0:	2b01      	cmp	r3, #1
 8011dd2:	d101      	bne.n	8011dd8 <SetSimpleData+0x12c>
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e000      	b.n	8011dda <SetSimpleData+0x12e>
 8011dd8:	2300      	movs	r3, #0
 8011dda:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	7fba      	ldrb	r2, [r7, #30]
 8011de0:	f883 2386 	strb.w	r2, [r3, #902]	@ 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 8011de4:	f107 0314 	add.w	r3, r7, #20
 8011de8:	461a      	mov	r2, r3
 8011dea:	2101      	movs	r1, #1
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f7ff fdbb 	bl	8011968 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 8011df2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011df6:	2b04      	cmp	r3, #4
 8011df8:	bf0c      	ite	eq
 8011dfa:	2301      	moveq	r3, #1
 8011dfc:	2300      	movne	r3, #0
 8011dfe:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 8011e00:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 8011e02:	f107 0319 	add.w	r3, r7, #25
 8011e06:	461a      	mov	r2, r3
 8011e08:	2101      	movs	r1, #1
 8011e0a:	68f8      	ldr	r0, [r7, #12]
 8011e0c:	f7ff fd50 	bl	80118b0 <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 8011e10:	7e7b      	ldrb	r3, [r7, #25]
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d104      	bne.n	8011e20 <SetSimpleData+0x174>
 8011e16:	7f7b      	ldrb	r3, [r7, #29]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d101      	bne.n	8011e20 <SetSimpleData+0x174>
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e000      	b.n	8011e22 <SetSimpleData+0x176>
 8011e20:	2300      	movs	r3, #0
 8011e22:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	7fba      	ldrb	r2, [r7, #30]
 8011e28:	f883 2387 	strb.w	r2, [r3, #903]	@ 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 8011e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e2e:	8b1b      	ldrh	r3, [r3, #24]
 8011e30:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 8011e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e34:	7edb      	ldrb	r3, [r3, #27]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d110      	bne.n	8011e5c <SetSimpleData+0x1b0>
 8011e3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	da0c      	bge.n	8011e5c <SetSimpleData+0x1b0>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 8011e42:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8011e46:	4b08      	ldr	r3, [pc, #32]	@ (8011e68 <SetSimpleData+0x1bc>)
 8011e48:	685b      	ldr	r3, [r3, #4]
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	da03      	bge.n	8011e56 <SetSimpleData+0x1aa>
			pRangeData->RangeStatus =
 8011e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e50:	220e      	movs	r2, #14
 8011e52:	76da      	strb	r2, [r3, #27]
 8011e54:	e002      	b.n	8011e5c <SetSimpleData+0x1b0>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8011e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e58:	2200      	movs	r2, #0
 8011e5a:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8011e5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3730      	adds	r7, #48	@ 0x30
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}
 8011e68:	20000168 	.word	0x20000168

08011e6c <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b0a8      	sub	sp, #160	@ 0xa0
 8011e70:	af02      	add	r7, sp, #8
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8011e76:	2300      	movs	r3, #0
 8011e78:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8011e7c:	f107 0308 	add.w	r3, r7, #8
 8011e80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8011e84:	221c      	movs	r2, #28
 8011e86:	21ff      	movs	r1, #255	@ 0xff
 8011e88:	6838      	ldr	r0, [r7, #0]
 8011e8a:	f004 fa33 	bl	80162f4 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 8011e8e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8011e92:	2102      	movs	r1, #2
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f001 f8ad 	bl	8012ff4 <VL53L1_get_device_results>
 8011e9a:	4603      	mov	r3, r0
 8011e9c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 8011ea0:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d117      	bne.n	8011ed8 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8011ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011eac:	789a      	ldrb	r2, [r3, #2]
 8011eae:	683b      	ldr	r3, [r7, #0]
 8011eb0:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 8011eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011eb6:	3304      	adds	r3, #4
 8011eb8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
		Status = SetSimpleData(Dev, 1,
 8011ebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011ec0:	78da      	ldrb	r2, [r3, #3]
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011eca:	2101      	movs	r1, #1
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7ff feed 	bl	8011cac <SetSimpleData>
 8011ed2:	4603      	mov	r3, r0
 8011ed4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8011ed8:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
}
 8011edc:	4618      	mov	r0, r3
 8011ede:	3798      	adds	r7, #152	@ 0x98
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}

08011ee4 <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 8011ee4:	b5b0      	push	{r4, r5, r7, lr}
 8011ee6:	b088      	sub	sp, #32
 8011ee8:	af04      	add	r7, sp, #16
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	460b      	mov	r3, r1
 8011eee:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8011ef8:	2162      	movs	r1, #98	@ 0x62
 8011efa:	6878      	ldr	r0, [r7, #4]
 8011efc:	f001 fee9 	bl	8013cd2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2200      	movs	r2, #0
 8011f04:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	2201      	movs	r2, #1
 8011f0a:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	2201      	movs	r2, #1
 8011f16:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	2201      	movs	r2, #1
 8011f1c:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011f24:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8011f2c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8011f34:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	2264      	movs	r2, #100	@ 0x64
 8011f3a:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8011f42:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 8011f44:	68bb      	ldr	r3, [r7, #8]
 8011f46:	2200      	movs	r2, #0
 8011f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	f240 72db 	movw	r2, #2011	@ 0x7db
 8011f52:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f001 fea0 	bl	8013c9c <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8011f5c:	78fb      	ldrb	r3, [r7, #3]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d008      	beq.n	8011f74 <VL53L1_data_init+0x90>
 8011f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d104      	bne.n	8011f74 <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f857 	bl	801201e <VL53L1_read_p2p_data>
 8011f70:	4603      	mov	r3, r0
 8011f72:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	f503 7388 	add.w	r3, r3, #272	@ 0x110
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f001 f9d2 	bl	8013324 <VL53L1_init_refspadchar_config_struct>
 8011f80:	4603      	mov	r3, r0
 8011f82:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f001 f9ee 	bl	801336c <VL53L1_init_ssc_config_struct>
 8011f90:	4603      	mov	r3, r0
 8011f92:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 8011f94:	68bb      	ldr	r3, [r7, #8]
 8011f96:	f103 0242 	add.w	r2, r3, #66	@ 0x42
 8011f9a:	68bb      	ldr	r3, [r7, #8]
 8011f9c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	4610      	mov	r0, r2
 8011fa4:	f001 fa03 	bl	80133ae <VL53L1_init_xtalk_config_struct>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f001 fa5d 	bl	8013472 <VL53L1_init_offset_cal_config_struct>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8011fbc:	68bb      	ldr	r3, [r7, #8]
 8011fbe:	33a4      	adds	r3, #164	@ 0xa4
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	f001 fa7d 	bl	80134c0 <VL53L1_init_tuning_parm_storage_struct>
 8011fc6:	4603      	mov	r3, r0
 8011fc8:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8011fca:	2120      	movs	r1, #32
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f000 fc99 	bl	8012904 <VL53L1_set_vhv_loopbound>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 8011fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d116      	bne.n	801200c <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8011fde:	68bb      	ldr	r3, [r7, #8]
 8011fe0:	7858      	ldrb	r0, [r3, #1]
 8011fe2:	68bb      	ldr	r3, [r7, #8]
 8011fe4:	8b1c      	ldrh	r4, [r3, #24]
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	689d      	ldr	r5, [r3, #8]
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	68db      	ldr	r3, [r3, #12]
 8011fee:	68ba      	ldr	r2, [r7, #8]
 8011ff0:	6912      	ldr	r2, [r2, #16]
 8011ff2:	68b9      	ldr	r1, [r7, #8]
 8011ff4:	6949      	ldr	r1, [r1, #20]
 8011ff6:	9102      	str	r1, [sp, #8]
 8011ff8:	9201      	str	r2, [sp, #4]
 8011ffa:	9300      	str	r3, [sp, #0]
 8011ffc:	462b      	mov	r3, r5
 8011ffe:	4622      	mov	r2, r4
 8012000:	4601      	mov	r1, r0
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 fab0 	bl	8012568 <VL53L1_set_preset_mode>
 8012008:	4603      	mov	r3, r0
 801200a:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f002 fbaf 	bl	8014770 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 8012012:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012016:	4618      	mov	r0, r3
 8012018:	3710      	adds	r7, #16
 801201a:	46bd      	mov	sp, r7
 801201c:	bdb0      	pop	{r4, r5, r7, pc}

0801201e <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b084      	sub	sp, #16
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8012026:	2300      	movs	r3, #0
 8012028:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 801202e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d108      	bne.n	8012048 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 801203c:	4619      	mov	r1, r3
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f002 fdeb 	bl	8014c1a <VL53L1_get_static_nvm_managed>
 8012044:	4603      	mov	r3, r0
 8012046:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 8012048:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801204c:	2b00      	cmp	r3, #0
 801204e:	d107      	bne.n	8012060 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	3342      	adds	r3, #66	@ 0x42
 8012054:	4619      	mov	r1, r3
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f002 ff1d 	bl	8014e96 <VL53L1_get_customer_nvm_managed>
 801205c:	4603      	mov	r3, r0
 801205e:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 8012060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d115      	bne.n	8012094 <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 8012068:	68bb      	ldr	r3, [r7, #8]
 801206a:	f503 73fd 	add.w	r3, r3, #506	@ 0x1fa
 801206e:	4619      	mov	r1, r3
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f003 fdf6 	bl	8015c62 <VL53L1_get_nvm_copy_data>
 8012076:	4603      	mov	r3, r0
 8012078:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 801207a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d108      	bne.n	8012094 <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	f503 72fd 	add.w	r2, r3, #506	@ 0x1fa
 8012088:	68bb      	ldr	r3, [r7, #8]
 801208a:	33f0      	adds	r3, #240	@ 0xf0
 801208c:	4619      	mov	r1, r3
 801208e:	4610      	mov	r0, r2
 8012090:	f001 ff81 	bl	8013f96 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8012094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d109      	bne.n	80120b0 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	f503 732d 	add.w	r3, r3, #692	@ 0x2b4
 80120a2:	461a      	mov	r2, r3
 80120a4:	21de      	movs	r1, #222	@ 0xde
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7f6 fe46 	bl	8008d38 <VL53L1_RdWord>
 80120ac:	4603      	mov	r3, r0
 80120ae:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 80120b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80120ba:	d204      	bcs.n	80120c6 <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	f64b 42cc 	movw	r2, #48332	@ 0xbccc
 80120c2:	f8a3 215e 	strh.w	r2, [r3, #350]	@ 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 80120c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d107      	bne.n	80120de <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	339e      	adds	r3, #158	@ 0x9e
 80120d2:	4619      	mov	r1, r3
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f000 f968 	bl	80123aa <VL53L1_get_mode_mitigation_roi>
 80120da:	4603      	mov	r3, r0
 80120dc:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 80120de:	68bb      	ldr	r3, [r7, #8]
 80120e0:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d114      	bne.n	8012112 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 80120e8:	68bb      	ldr	r3, [r7, #8]
 80120ea:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d10f      	bne.n	8012112 <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	f893 309e 	ldrb.w	r3, [r3, #158]	@ 0x9e
 80120f8:	011b      	lsls	r3, r3, #4
 80120fa:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	f893 309f 	ldrb.w	r3, [r3, #159]	@ 0x9f
 8012108:	011b      	lsls	r3, r3, #4
 801210a:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8012112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012116:	4618      	mov	r0, r3
 8012118:	3710      	adds	r7, #16
 801211a:	46bd      	mov	sp, r7
 801211c:	bd80      	pop	{r7, pc}

0801211e <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 801211e:	b480      	push	{r7}
 8012120:	b085      	sub	sp, #20
 8012122:	af00      	add	r7, sp, #0
 8012124:	6078      	str	r0, [r7, #4]
 8012126:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012128:	2300      	movs	r3, #0
 801212a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8012130:	68bb      	ldr	r3, [r7, #8]
 8012132:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8012136:	2b00      	cmp	r3, #0
 8012138:	d101      	bne.n	801213e <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 801213a:	23f1      	movs	r3, #241	@ 0xf1
 801213c:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 801213e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012142:	2b00      	cmp	r3, #0
 8012144:	d10c      	bne.n	8012160 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	683a      	ldr	r2, [r7, #0]
 801214a:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	@ 0x2b4
 8012152:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8012160:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3714      	adds	r7, #20
 8012168:	46bd      	mov	sp, r7
 801216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801216e:	4770      	bx	lr

08012170 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b088      	sub	sp, #32
 8012174:	af02      	add	r7, sp, #8
 8012176:	60f8      	str	r0, [r7, #12]
 8012178:	60b9      	str	r1, [r7, #8]
 801217a:	607a      	str	r2, [r7, #4]
 801217c:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801217e:	2300      	movs	r3, #0
 8012180:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 801218c:	2b00      	cmp	r3, #0
 801218e:	d101      	bne.n	8012194 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012190:	23f1      	movs	r3, #241	@ 0xf1
 8012192:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8012194:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d11b      	bne.n	80121d4 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	68ba      	ldr	r2, [r7, #8]
 80121a0:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 80121a2:	693b      	ldr	r3, [r7, #16]
 80121a4:	687a      	ldr	r2, [r7, #4]
 80121a6:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	683a      	ldr	r2, [r7, #0]
 80121ac:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	f8b3 115e 	ldrh.w	r1, [r3, #350]	@ 0x15e
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80121ba:	693a      	ldr	r2, [r7, #16]
 80121bc:	f502 72ce 	add.w	r2, r2, #412	@ 0x19c
 80121c0:	9201      	str	r2, [sp, #4]
 80121c2:	9300      	str	r3, [sp, #0]
 80121c4:	460b      	mov	r3, r1
 80121c6:	683a      	ldr	r2, [r7, #0]
 80121c8:	6879      	ldr	r1, [r7, #4]
 80121ca:	68b8      	ldr	r0, [r7, #8]
 80121cc:	f002 fa02 	bl	80145d4 <VL53L1_calc_timeout_register_values>
 80121d0:	4603      	mov	r3, r0
 80121d2:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 80121d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121d8:	4618      	mov	r0, r3
 80121da:	3718      	adds	r7, #24
 80121dc:	46bd      	mov	sp, r7
 80121de:	bd80      	pop	{r7, pc}

080121e0 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b088      	sub	sp, #32
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
 80121ec:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80121ee:	2300      	movs	r3, #0
 80121f0:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 80121f6:	2300      	movs	r3, #0
 80121f8:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 80121fa:	2300      	movs	r3, #0
 80121fc:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 80121fe:	69bb      	ldr	r3, [r7, #24]
 8012200:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8012204:	2b00      	cmp	r3, #0
 8012206:	d101      	bne.n	801220c <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8012208:	23f1      	movs	r3, #241	@ 0xf1
 801220a:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 801220c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d148      	bne.n	80122a6 <VL53L1_get_timeouts_us+0xc6>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 801221a:	69bb      	ldr	r3, [r7, #24]
 801221c:	f893 31a2 	ldrb.w	r3, [r3, #418]	@ 0x1a2
 8012220:	4619      	mov	r1, r3
 8012222:	4610      	mov	r0, r2
 8012224:	f002 f87d 	bl	8014322 <VL53L1_calc_macro_period_us>
 8012228:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 801222a:	69bb      	ldr	r3, [r7, #24]
 801222c:	f893 318b 	ldrb.w	r3, [r3, #395]	@ 0x18b
			VL53L1_calc_timeout_us(
 8012230:	6979      	ldr	r1, [r7, #20]
 8012232:	4618      	mov	r0, r3
 8012234:	f002 f935 	bl	80144a2 <VL53L1_calc_timeout_us>
 8012238:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 801223e:	69bb      	ldr	r3, [r7, #24]
 8012240:	f893 319c 	ldrb.w	r3, [r3, #412]	@ 0x19c
		timeout_encoded =
 8012244:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8012246:	8a7b      	ldrh	r3, [r7, #18]
 8012248:	021b      	lsls	r3, r3, #8
 801224a:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 801224c:	69ba      	ldr	r2, [r7, #24]
 801224e:	f892 219d 	ldrb.w	r2, [r2, #413]	@ 0x19d
		timeout_encoded = (timeout_encoded << 8) +
 8012252:	4413      	add	r3, r2
 8012254:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8012256:	8a7b      	ldrh	r3, [r7, #18]
 8012258:	6979      	ldr	r1, [r7, #20]
 801225a:	4618      	mov	r0, r3
 801225c:	f002 f961 	bl	8014522 <VL53L1_calc_decoded_timeout_us>
 8012260:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8012266:	69bb      	ldr	r3, [r7, #24]
 8012268:	f893 31a0 	ldrb.w	r3, [r3, #416]	@ 0x1a0
		timeout_encoded =
 801226c:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 801226e:	8a7b      	ldrh	r3, [r7, #18]
 8012270:	021b      	lsls	r3, r3, #8
 8012272:	b29b      	uxth	r3, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8012274:	69ba      	ldr	r2, [r7, #24]
 8012276:	f892 21a1 	ldrb.w	r2, [r2, #417]	@ 0x1a1
		timeout_encoded = (timeout_encoded << 8) +
 801227a:	4413      	add	r3, r2
 801227c:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 801227e:	8a7b      	ldrh	r3, [r7, #18]
 8012280:	6979      	ldr	r1, [r7, #20]
 8012282:	4618      	mov	r0, r3
 8012284:	f002 f94d 	bl	8014522 <VL53L1_calc_decoded_timeout_us>
 8012288:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	681a      	ldr	r2, [r3, #0]
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	69bb      	ldr	r3, [r7, #24]
 801229c:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	69bb      	ldr	r3, [r7, #24]
 80122a4:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 80122a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3720      	adds	r7, #32
 80122ae:	46bd      	mov	sp, r7
 80122b0:	bd80      	pop	{r7, pc}

080122b2 <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 80122b2:	b480      	push	{r7}
 80122b4:	b087      	sub	sp, #28
 80122b6:	af00      	add	r7, sp, #0
 80122b8:	60f8      	str	r0, [r7, #12]
 80122ba:	460b      	mov	r3, r1
 80122bc:	607a      	str	r2, [r7, #4]
 80122be:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80122c0:	2300      	movs	r3, #0
 80122c2:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 80122c8:	2301      	movs	r3, #1
 80122ca:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 80122cc:	7afb      	ldrb	r3, [r7, #11]
 80122ce:	2b07      	cmp	r3, #7
 80122d0:	d81c      	bhi.n	801230c <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 80122d2:	7afb      	ldrb	r3, [r7, #11]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d004      	beq.n	80122e2 <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 80122d8:	7afb      	ldrb	r3, [r7, #11]
 80122da:	2201      	movs	r2, #1
 80122dc:	fa02 f303 	lsl.w	r3, r2, r3
 80122e0:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	f893 21c5 	ldrb.w	r2, [r3, #453]	@ 0x1c5
		*pvalue =
 80122e8:	7dbb      	ldrb	r3, [r7, #22]
 80122ea:	4013      	ands	r3, r2
 80122ec:	b2da      	uxtb	r2, r3
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 80122f2:	7afb      	ldrb	r3, [r7, #11]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d00b      	beq.n	8012310 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	461a      	mov	r2, r3
 80122fe:	7afb      	ldrb	r3, [r7, #11]
 8012300:	fa42 f303 	asr.w	r3, r2, r3
 8012304:	b2da      	uxtb	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	701a      	strb	r2, [r3, #0]
 801230a:	e001      	b.n	8012310 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 801230c:	23fc      	movs	r3, #252	@ 0xfc
 801230e:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8012310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012314:	4618      	mov	r0, r3
 8012316:	371c      	adds	r7, #28
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801232a:	2300      	movs	r3, #0
 801232c:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	7858      	ldrb	r0, [r3, #1]
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	7819      	ldrb	r1, [r3, #0]
 801233a:	68bb      	ldr	r3, [r7, #8]
 801233c:	f203 13c3 	addw	r3, r3, #451	@ 0x1c3
 8012340:	461a      	mov	r2, r3
 8012342:	f002 f9c0 	bl	80146c6 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	7898      	ldrb	r0, [r3, #2]
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	78d9      	ldrb	r1, [r3, #3]
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	f503 73e2 	add.w	r3, r3, #452	@ 0x1c4
 8012354:	461a      	mov	r2, r3
 8012356:	f002 f9f5 	bl	8014744 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 801235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3710      	adds	r7, #16
 8012362:	46bd      	mov	sp, r7
 8012364:	bd80      	pop	{r7, pc}

08012366 <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8012366:	b580      	push	{r7, lr}
 8012368:	b084      	sub	sp, #16
 801236a:	af00      	add	r7, sp, #0
 801236c:	6078      	str	r0, [r7, #4]
 801236e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012370:	2300      	movs	r3, #0
 8012372:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8012378:	68bb      	ldr	r3, [r7, #8]
 801237a:	f893 01c3 	ldrb.w	r0, [r3, #451]	@ 0x1c3
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	3301      	adds	r3, #1
 8012382:	683a      	ldr	r2, [r7, #0]
 8012384:	4619      	mov	r1, r3
 8012386:	f002 fb64 	bl	8014a52 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 801238a:	68bb      	ldr	r3, [r7, #8]
 801238c:	f893 01c4 	ldrb.w	r0, [r3, #452]	@ 0x1c4
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	1c99      	adds	r1, r3, #2
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	3303      	adds	r3, #3
 8012398:	461a      	mov	r2, r3
 801239a:	f002 f9bb 	bl	8014714 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 801239e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80123a2:	4618      	mov	r0, r3
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}

080123aa <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 80123aa:	b580      	push	{r7, lr}
 80123ac:	b086      	sub	sp, #24
 80123ae:	af00      	add	r7, sp, #0
 80123b0:	6078      	str	r0, [r7, #4]
 80123b2:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80123b4:	2300      	movs	r3, #0
 80123b6:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 80123bc:	2300      	movs	r3, #0
 80123be:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 80123c0:	2300      	movs	r3, #0
 80123c2:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 80123c4:	2300      	movs	r3, #0
 80123c6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 80123c8:	693b      	ldr	r3, [r7, #16]
 80123ca:	f893 322a 	ldrb.w	r3, [r3, #554]	@ 0x22a
 80123ce:	f107 020e 	add.w	r2, r7, #14
 80123d2:	f107 010d 	add.w	r1, r7, #13
 80123d6:	4618      	mov	r0, r3
 80123d8:	f002 fb3b 	bl	8014a52 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 80123dc:	7bba      	ldrb	r2, [r7, #14]
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 80123e2:	7b7a      	ldrb	r2, [r7, #13]
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	f893 322b 	ldrb.w	r3, [r3, #555]	@ 0x22b
 80123ee:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 80123f0:	7bfb      	ldrb	r3, [r7, #15]
 80123f2:	091b      	lsrs	r3, r3, #4
 80123f4:	b2da      	uxtb	r2, r3
 80123f6:	683b      	ldr	r3, [r7, #0]
 80123f8:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 80123fa:	7bfb      	ldrb	r3, [r7, #15]
 80123fc:	f003 030f 	and.w	r3, r3, #15
 8012400:	b2da      	uxtb	r2, r3
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8012406:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801240a:	4618      	mov	r0, r3
 801240c:	3718      	adds	r7, #24
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
	...

08012414 <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8012414:	b480      	push	{r7}
 8012416:	b087      	sub	sp, #28
 8012418:	af00      	add	r7, sp, #0
 801241a:	60f8      	str	r0, [r7, #12]
 801241c:	607a      	str	r2, [r7, #4]
 801241e:	603b      	str	r3, [r7, #0]
 8012420:	460b      	mov	r3, r1
 8012422:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012424:	2300      	movs	r3, #0
 8012426:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 801242c:	7afb      	ldrb	r3, [r7, #11]
 801242e:	3b01      	subs	r3, #1
 8012430:	2b25      	cmp	r3, #37	@ 0x25
 8012432:	f200 808e 	bhi.w	8012552 <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8012436:	a201      	add	r2, pc, #4	@ (adr r2, 801243c <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8012438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801243c:	080124d5 	.word	0x080124d5
 8012440:	080124d5 	.word	0x080124d5
 8012444:	080124d5 	.word	0x080124d5
 8012448:	080124d5 	.word	0x080124d5
 801244c:	080124d5 	.word	0x080124d5
 8012450:	080124ff 	.word	0x080124ff
 8012454:	080124ff 	.word	0x080124ff
 8012458:	080124ff 	.word	0x080124ff
 801245c:	08012553 	.word	0x08012553
 8012460:	08012553 	.word	0x08012553
 8012464:	08012553 	.word	0x08012553
 8012468:	08012553 	.word	0x08012553
 801246c:	08012553 	.word	0x08012553
 8012470:	08012553 	.word	0x08012553
 8012474:	08012553 	.word	0x08012553
 8012478:	08012553 	.word	0x08012553
 801247c:	080124d5 	.word	0x080124d5
 8012480:	080124ff 	.word	0x080124ff
 8012484:	08012553 	.word	0x08012553
 8012488:	08012553 	.word	0x08012553
 801248c:	08012553 	.word	0x08012553
 8012490:	08012553 	.word	0x08012553
 8012494:	08012553 	.word	0x08012553
 8012498:	08012553 	.word	0x08012553
 801249c:	08012553 	.word	0x08012553
 80124a0:	08012553 	.word	0x08012553
 80124a4:	08012553 	.word	0x08012553
 80124a8:	08012553 	.word	0x08012553
 80124ac:	08012553 	.word	0x08012553
 80124b0:	08012553 	.word	0x08012553
 80124b4:	08012553 	.word	0x08012553
 80124b8:	08012553 	.word	0x08012553
 80124bc:	08012553 	.word	0x08012553
 80124c0:	08012553 	.word	0x08012553
 80124c4:	08012553 	.word	0x08012553
 80124c8:	08012529 	.word	0x08012529
 80124cc:	08012529 	.word	0x08012529
 80124d0:	08012529 	.word	0x08012529
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 80124d4:	693b      	ldr	r3, [r7, #16]
 80124d6:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	@ 0xca
		*pdss_config__target_total_rate_mcps =
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
		*pphasecal_config_timeout_us =
 80124e4:	683b      	ldr	r3, [r7, #0]
 80124e6:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 80124e8:	693b      	ldr	r3, [r7, #16]
 80124ea:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
		*pmm_config_timeout_us =
 80124ee:	6a3b      	ldr	r3, [r7, #32]
 80124f0:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 80124f2:	693b      	ldr	r3, [r7, #16]
 80124f4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
		*prange_config_timeout_us =
 80124f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124fa:	601a      	str	r2, [r3, #0]
	break;
 80124fc:	e02c      	b.n	8012558 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 80124fe:	693b      	ldr	r3, [r7, #16]
 8012500:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8012508:	693b      	ldr	r3, [r7, #16]
 801250a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
		*pmm_config_timeout_us =
 8012518:	6a3b      	ldr	r3, [r7, #32]
 801251a:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 801251c:	693b      	ldr	r3, [r7, #16]
 801251e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
		*prange_config_timeout_us =
 8012522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012524:	601a      	str	r2, [r3, #0]
	break;
 8012526:	e017      	b.n	8012558 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	@ 0xcc
		*pdss_config__target_total_rate_mcps =
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
		*pphasecal_config_timeout_us =
 8012538:	683b      	ldr	r3, [r7, #0]
 801253a:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
		*pmm_config_timeout_us =
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	f8d3 20ec 	ldr.w	r2, [r3, #236]	@ 0xec
		*prange_config_timeout_us =
 801254c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254e:	601a      	str	r2, [r3, #0]
	break;
 8012550:	e002      	b.n	8012558 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8012552:	23fc      	movs	r3, #252	@ 0xfc
 8012554:	75fb      	strb	r3, [r7, #23]
		break;
 8012556:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8012558:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801255c:	4618      	mov	r0, r3
 801255e:	371c      	adds	r7, #28
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b092      	sub	sp, #72	@ 0x48
 801256c:	af04      	add	r7, sp, #16
 801256e:	60f8      	str	r0, [r7, #12]
 8012570:	607b      	str	r3, [r7, #4]
 8012572:	460b      	mov	r3, r1
 8012574:	72fb      	strb	r3, [r7, #11]
 8012576:	4613      	mov	r3, r2
 8012578:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801257a:	2300      	movs	r3, #0
 801257c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	VL53L1_LLDriverData_t *pdev =
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	633b      	str	r3, [r7, #48]	@ 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8012584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012586:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801258a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 801258c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801258e:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 8012592:	62bb      	str	r3, [r7, #40]	@ 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8012594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012596:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 801259a:	627b      	str	r3, [r7, #36]	@ 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 801259c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801259e:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80125a2:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80125a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125a6:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80125aa:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 80125ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ae:	33a4      	adds	r3, #164	@ 0xa4
 80125b0:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 80125b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b4:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80125b8:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 80125ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125bc:	7afa      	ldrb	r2, [r7, #11]
 80125be:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 80125c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80125c4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 80125c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80125ca:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 80125cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80125d0:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 80125d2:	2103      	movs	r1, #3
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f001 fb7c 	bl	8013cd2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 80125da:	7afb      	ldrb	r3, [r7, #11]
 80125dc:	3b01      	subs	r3, #1
 80125de:	2b25      	cmp	r3, #37	@ 0x25
 80125e0:	f200 810c 	bhi.w	80127fc <VL53L1_set_preset_mode+0x294>
 80125e4:	a201      	add	r2, pc, #4	@ (adr r2, 80125ec <VL53L1_set_preset_mode+0x84>)
 80125e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ea:	bf00      	nop
 80125ec:	08012685 	.word	0x08012685
 80125f0:	080126a1 	.word	0x080126a1
 80125f4:	080126bd 	.word	0x080126bd
 80125f8:	080126d9 	.word	0x080126d9
 80125fc:	080126f5 	.word	0x080126f5
 8012600:	08012711 	.word	0x08012711
 8012604:	0801272d 	.word	0x0801272d
 8012608:	08012749 	.word	0x08012749
 801260c:	080127fd 	.word	0x080127fd
 8012610:	080127fd 	.word	0x080127fd
 8012614:	080127fd 	.word	0x080127fd
 8012618:	080127fd 	.word	0x080127fd
 801261c:	080127fd 	.word	0x080127fd
 8012620:	080127fd 	.word	0x080127fd
 8012624:	080127fd 	.word	0x080127fd
 8012628:	080127fd 	.word	0x080127fd
 801262c:	08012765 	.word	0x08012765
 8012630:	08012781 	.word	0x08012781
 8012634:	080127fd 	.word	0x080127fd
 8012638:	080127fd 	.word	0x080127fd
 801263c:	080127fd 	.word	0x080127fd
 8012640:	080127fd 	.word	0x080127fd
 8012644:	080127fd 	.word	0x080127fd
 8012648:	080127fd 	.word	0x080127fd
 801264c:	080127fd 	.word	0x080127fd
 8012650:	080127fd 	.word	0x080127fd
 8012654:	080127fd 	.word	0x080127fd
 8012658:	080127fd 	.word	0x080127fd
 801265c:	080127fd 	.word	0x080127fd
 8012660:	080127fd 	.word	0x080127fd
 8012664:	080127fd 	.word	0x080127fd
 8012668:	080127fd 	.word	0x080127fd
 801266c:	080127fd 	.word	0x080127fd
 8012670:	080127fd 	.word	0x080127fd
 8012674:	080127fd 	.word	0x080127fd
 8012678:	0801279d 	.word	0x0801279d
 801267c:	080127bd 	.word	0x080127bd
 8012680:	080127dd 	.word	0x080127dd

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 8012684:	69bb      	ldr	r3, [r7, #24]
 8012686:	9301      	str	r3, [sp, #4]
 8012688:	69fb      	ldr	r3, [r7, #28]
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	6a3b      	ldr	r3, [r7, #32]
 801268e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012692:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012694:	f000 ffa0 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 8012698:	4603      	mov	r3, r0
 801269a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801269e:	e0b1      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 80126a0:	69bb      	ldr	r3, [r7, #24]
 80126a2:	9301      	str	r3, [sp, #4]
 80126a4:	69fb      	ldr	r3, [r7, #28]
 80126a6:	9300      	str	r3, [sp, #0]
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80126ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126b0:	f001 f8b0 	bl	8013814 <VL53L1_preset_mode_standard_ranging_short_range>
 80126b4:	4603      	mov	r3, r0
 80126b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80126ba:	e0a3      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	9301      	str	r3, [sp, #4]
 80126c0:	69fb      	ldr	r3, [r7, #28]
 80126c2:	9300      	str	r3, [sp, #0]
 80126c4:	6a3b      	ldr	r3, [r7, #32]
 80126c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80126ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126cc:	f001 f8e3 	bl	8013896 <VL53L1_preset_mode_standard_ranging_long_range>
 80126d0:	4603      	mov	r3, r0
 80126d2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80126d6:	e095      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	9301      	str	r3, [sp, #4]
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	9300      	str	r3, [sp, #0]
 80126e0:	6a3b      	ldr	r3, [r7, #32]
 80126e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80126e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80126e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126e8:	f001 f916 	bl	8013918 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80126ec:	4603      	mov	r3, r0
 80126ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80126f2:	e087      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80126f4:	69bb      	ldr	r3, [r7, #24]
 80126f6:	9301      	str	r3, [sp, #4]
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	9300      	str	r3, [sp, #0]
 80126fc:	6a3b      	ldr	r3, [r7, #32]
 80126fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012702:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012704:	f001 f92d 	bl	8013962 <VL53L1_preset_mode_standard_ranging_mm2_cal>
 8012708:	4603      	mov	r3, r0
 801270a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801270e:	e079      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	9301      	str	r3, [sp, #4]
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	9300      	str	r3, [sp, #0]
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801271c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801271e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012720:	f001 f944 	bl	80139ac <VL53L1_preset_mode_timed_ranging>
 8012724:	4603      	mov	r3, r0
 8012726:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801272a:	e06b      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 801272c:	69bb      	ldr	r3, [r7, #24]
 801272e:	9301      	str	r3, [sp, #4]
 8012730:	69fb      	ldr	r3, [r7, #28]
 8012732:	9300      	str	r3, [sp, #0]
 8012734:	6a3b      	ldr	r3, [r7, #32]
 8012736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012738:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801273a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801273c:	f001 f970 	bl	8013a20 <VL53L1_preset_mode_timed_ranging_short_range>
 8012740:	4603      	mov	r3, r0
 8012742:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8012746:	e05d      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8012748:	69bb      	ldr	r3, [r7, #24]
 801274a:	9301      	str	r3, [sp, #4]
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	9300      	str	r3, [sp, #0]
 8012750:	6a3b      	ldr	r3, [r7, #32]
 8012752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012758:	f001 f99c 	bl	8013a94 <VL53L1_preset_mode_timed_ranging_long_range>
 801275c:	4603      	mov	r3, r0
 801275e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8012762:	e04f      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 8012764:	69bb      	ldr	r3, [r7, #24]
 8012766:	9301      	str	r3, [sp, #4]
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	9300      	str	r3, [sp, #0]
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012772:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012774:	f001 fa70 	bl	8013c58 <VL53L1_preset_mode_olt>
 8012778:	4603      	mov	r3, r0
 801277a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801277e:	e041      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8012780:	69bb      	ldr	r3, [r7, #24]
 8012782:	9301      	str	r3, [sp, #4]
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	9300      	str	r3, [sp, #0]
 8012788:	6a3b      	ldr	r3, [r7, #32]
 801278a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801278c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801278e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012790:	f001 fa2c 	bl	8013bec <VL53L1_preset_mode_singleshot_ranging>
 8012794:	4603      	mov	r3, r0
 8012796:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 801279a:	e033      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	9302      	str	r3, [sp, #8]
 80127a0:	69bb      	ldr	r3, [r7, #24]
 80127a2:	9301      	str	r3, [sp, #4]
 80127a4:	69fb      	ldr	r3, [r7, #28]
 80127a6:	9300      	str	r3, [sp, #0]
 80127a8:	6a3b      	ldr	r3, [r7, #32]
 80127aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127b0:	f001 f9d0 	bl	8013b54 <VL53L1_preset_mode_low_power_auto_short_ranging>
 80127b4:	4603      	mov	r3, r0
 80127b6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80127ba:	e023      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 80127bc:	697b      	ldr	r3, [r7, #20]
 80127be:	9302      	str	r3, [sp, #8]
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	9301      	str	r3, [sp, #4]
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	9300      	str	r3, [sp, #0]
 80127c8:	6a3b      	ldr	r3, [r7, #32]
 80127ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127d0:	f001 f99a 	bl	8013b08 <VL53L1_preset_mode_low_power_auto_ranging>
 80127d4:	4603      	mov	r3, r0
 80127d6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80127da:	e013      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80127dc:	697b      	ldr	r3, [r7, #20]
 80127de:	9302      	str	r3, [sp, #8]
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	9301      	str	r3, [sp, #4]
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	9300      	str	r3, [sp, #0]
 80127e8:	6a3b      	ldr	r3, [r7, #32]
 80127ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80127ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80127ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127f0:	f001 f9d6 	bl	8013ba0 <VL53L1_preset_mode_low_power_auto_long_ranging>
 80127f4:	4603      	mov	r3, r0
 80127f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80127fa:	e003      	b.n	8012804 <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80127fc:	23fc      	movs	r3, #252	@ 0xfc
 80127fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		break;
 8012802:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 8012804:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012808:	2b00      	cmp	r3, #0
 801280a:	d105      	bne.n	8012818 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 801280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801280e:	893a      	ldrh	r2, [r7, #8]
 8012810:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 8012812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012814:	893a      	ldrh	r2, [r7, #8]
 8012816:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 8012818:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 801281c:	2b00      	cmp	r3, #0
 801281e:	d108      	bne.n	8012832 <VL53L1_set_preset_mode+0x2ca>
		status =
			VL53L1_set_timeouts_us(
 8012820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012822:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012824:	6879      	ldr	r1, [r7, #4]
 8012826:	68f8      	ldr	r0, [r7, #12]
 8012828:	f7ff fca2 	bl	8012170 <VL53L1_set_timeouts_us>
 801282c:	4603      	mov	r3, r0
 801282e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 8012832:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8012836:	2b00      	cmp	r3, #0
 8012838:	d106      	bne.n	8012848 <VL53L1_set_preset_mode+0x2e0>
		status =
			VL53L1_set_inter_measurement_period_ms(
 801283a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f7ff fc6e 	bl	801211e <VL53L1_set_inter_measurement_period_ms>
 8012842:	4603      	mov	r3, r0
 8012844:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8012848:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801284c:	4618      	mov	r0, r3
 801284e:	3738      	adds	r7, #56	@ 0x38
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}

08012854 <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 8012854:	b480      	push	{r7}
 8012856:	b085      	sub	sp, #20
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
 801285c:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801285e:	2300      	movs	r3, #0
 8012860:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 8012866:	68bb      	ldr	r3, [r7, #8]
 8012868:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	@ 0x1a6
	*plite_sigma =
 801286c:	683b      	ldr	r3, [r7, #0]
 801286e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8012870:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8012874:	4618      	mov	r0, r3
 8012876:	3714      	adds	r7, #20
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr

08012880 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	460b      	mov	r3, r1
 801288a:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801288c:	2300      	movs	r3, #0
 801288e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 8012894:	68bb      	ldr	r3, [r7, #8]
 8012896:	887a      	ldrh	r2, [r7, #2]
 8012898:	f8a3 21a6 	strh.w	r2, [r3, #422]	@ 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 801289c:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3714      	adds	r7, #20
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr

080128ac <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 80128ac:	b480      	push	{r7}
 80128ae:	b085      	sub	sp, #20
 80128b0:	af00      	add	r7, sp, #0
 80128b2:	6078      	str	r0, [r7, #4]
 80128b4:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80128b6:	2300      	movs	r3, #0
 80128b8:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 80128be:	68bb      	ldr	r3, [r7, #8]
 80128c0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
	*plite_mincountrate =
 80128c4:	683b      	ldr	r3, [r7, #0]
 80128c6:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 80128c8:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80128cc:	4618      	mov	r0, r3
 80128ce:	3714      	adds	r7, #20
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr

080128d8 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80128d8:	b480      	push	{r7}
 80128da:	b085      	sub	sp, #20
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
 80128e0:	460b      	mov	r3, r1
 80128e2:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80128e4:	2300      	movs	r3, #0
 80128e6:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80128ec:	68bb      	ldr	r3, [r7, #8]
 80128ee:	887a      	ldrh	r2, [r7, #2]
 80128f0:	f8a3 21a8 	strh.w	r2, [r3, #424]	@ 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80128f4:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3714      	adds	r7, #20
 80128fc:	46bd      	mov	sp, r7
 80128fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012902:	4770      	bx	lr

08012904 <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	460b      	mov	r3, r1
 801290e:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8012910:	2300      	movs	r3, #0
 8012912:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 801291e:	f003 0303 	and.w	r3, r3, #3
 8012922:	b2da      	uxtb	r2, r3
 8012924:	78fb      	ldrb	r3, [r7, #3]
 8012926:	009b      	lsls	r3, r3, #2
 8012928:	b2db      	uxtb	r3, r3
 801292a:	4413      	add	r3, r2
 801292c:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 801292e:	68bb      	ldr	r3, [r7, #8]
 8012930:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
			(vhv_loopbound * 4);

	LOG_FUNCTION_END(status);

	return status;
 8012934:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8012938:	4618      	mov	r0, r3
 801293a:	3714      	adds	r7, #20
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr

08012944 <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b0d0      	sub	sp, #320	@ 0x140
 8012948:	af00      	add	r7, sp, #0
 801294a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801294e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012952:	6018      	str	r0, [r3, #0]
 8012954:	4608      	mov	r0, r1
 8012956:	4611      	mov	r1, r2
 8012958:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801295c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8012960:	4602      	mov	r2, r0
 8012962:	701a      	strb	r2, [r3, #0]
 8012964:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012968:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 801296c:	460a      	mov	r2, r1
 801296e:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012970:	2300      	movs	r3, #0
 8012972:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012976:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801297a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8012984:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012988:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 801298c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8012990:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012994:	3342      	adds	r3, #66	@ 0x42
 8012996:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 801299a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801299e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80129a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 80129a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80129aa:	f503 73c2 	add.w	r3, r3, #388	@ 0x184
 80129ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 80129b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80129b6:	f503 73ce 	add.w	r3, r3, #412	@ 0x19c
 80129ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 80129be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80129c2:	f503 73da 	add.w	r3, r3, #436	@ 0x1b4
 80129c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 80129ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80129ce:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80129d2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 80129d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80129da:	332c      	adds	r3, #44	@ 0x2c
 80129dc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 80129e0:	f107 030c 	add.w	r3, r7, #12
 80129e4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	uint16_t i                          = 0;
 80129e8:	2300      	movs	r3, #0
 80129ea:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
	uint16_t i2c_index                  = 0;
 80129ee:	2300      	movs	r3, #0
 80129f0:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 80129f4:	2300      	movs	r3, #0
 80129f6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80129fa:	2300      	movs	r3, #0
 80129fc:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 8012a00:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a04:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8012a08:	f2a2 123d 	subw	r2, r2, #317	@ 0x13d
 8012a0c:	7812      	ldrb	r2, [r2, #0]
 8012a0e:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 8012a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a14:	791b      	ldrb	r3, [r3, #4]
 8012a16:	b25b      	sxtb	r3, r3
 8012a18:	f003 030f 	and.w	r3, r3, #15
 8012a1c:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8012a1e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012a22:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8012a26:	f993 3000 	ldrsb.w	r3, [r3]
 8012a2a:	4313      	orrs	r3, r2
 8012a2c:	b25b      	sxtb	r3, r3
 8012a2e:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 8012a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012a34:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 8012a36:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a3a:	f8b3 2142 	ldrh.w	r2, [r3, #322]	@ 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 8012a3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a42:	f8a3 217c 	strh.w	r2, [r3, #380]	@ 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 8012a46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a4a:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 8012a4e:	2bff      	cmp	r3, #255	@ 0xff
 8012a50:	d104      	bne.n	8012a5c <VL53L1_init_and_start_range+0x118>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 8012a52:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a56:	2200      	movs	r2, #0
 8012a58:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8012a5c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a60:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d139      	bne.n	8012adc <VL53L1_init_and_start_range+0x198>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8012a68:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a6c:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d133      	bne.n	8012adc <VL53L1_init_and_start_range+0x198>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8012a74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a78:	f893 2186 	ldrb.w	r2, [r3, #390]	@ 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8012a7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a80:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8012a84:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a88:	2220      	movs	r2, #32
 8012a8a:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8012a8e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012a92:	f893 31c5 	ldrb.w	r3, [r3, #453]	@ 0x1c5
 8012a96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d10c      	bne.n	8012ab8 <VL53L1_init_and_start_range+0x174>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8012a9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012aa2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	@ 0x58
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8012aae:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012ab2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
 8012ab6:	e004      	b.n	8012ac2 <VL53L1_init_and_start_range+0x17e>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 8012ab8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012abc:	2200      	movs	r2, #0
 8012abe:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8012ac2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012ac6:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012aca:	781b      	ldrb	r3, [r3, #0]
 8012acc:	2b04      	cmp	r3, #4
 8012ace:	d805      	bhi.n	8012adc <VL53L1_init_and_start_range+0x198>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 8012ad0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012ad4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012ad8:	2205      	movs	r2, #5
 8012ada:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8012adc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012ae0:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	d113      	bne.n	8012b10 <VL53L1_init_and_start_range+0x1cc>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8012ae8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012aec:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d10d      	bne.n	8012b10 <VL53L1_init_and_start_range+0x1cc>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 8012af4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012af8:	f893 22e7 	ldrb.w	r2, [r3, #743]	@ 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8012afc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8012b00:	f883 2186 	strb.w	r2, [r3, #390]	@ 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 8012b04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012b08:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012b0c:	2206      	movs	r2, #6
 8012b0e:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 8012b10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012b14:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012b18:	781b      	ldrb	r3, [r3, #0]
 8012b1a:	3b01      	subs	r3, #1
 8012b1c:	2b05      	cmp	r3, #5
 8012b1e:	d827      	bhi.n	8012b70 <VL53L1_init_and_start_range+0x22c>
 8012b20:	a201      	add	r2, pc, #4	@ (adr r2, 8012b28 <VL53L1_init_and_start_range+0x1e4>)
 8012b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b26:	bf00      	nop
 8012b28:	08012b69 	.word	0x08012b69
 8012b2c:	08012b61 	.word	0x08012b61
 8012b30:	08012b59 	.word	0x08012b59
 8012b34:	08012b51 	.word	0x08012b51
 8012b38:	08012b49 	.word	0x08012b49
 8012b3c:	08012b41 	.word	0x08012b41
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 8012b40:	2301      	movs	r3, #1
 8012b42:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b46:	e017      	b.n	8012b78 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 8012b48:	230d      	movs	r3, #13
 8012b4a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b4e:	e013      	b.n	8012b78 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 8012b50:	2324      	movs	r3, #36	@ 0x24
 8012b52:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b56:	e00f      	b.n	8012b78 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 8012b58:	2344      	movs	r3, #68	@ 0x44
 8012b5a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b5e:	e00b      	b.n	8012b78 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 8012b60:	235a      	movs	r3, #90	@ 0x5a
 8012b62:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b66:	e007      	b.n	8012b78 <VL53L1_init_and_start_range+0x234>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 8012b68:	2371      	movs	r3, #113	@ 0x71
 8012b6a:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b6e:	e003      	b.n	8012b78 <VL53L1_init_and_start_range+0x234>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 8012b70:	2383      	movs	r3, #131	@ 0x83
 8012b72:	f8a7 3134 	strh.w	r3, [r7, #308]	@ 0x134
		break;
 8012b76:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8012b78:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012b7c:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
 8012b80:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8012b84:	f107 030c 	add.w	r3, r7, #12
 8012b88:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8012b8c:	2300      	movs	r3, #0
 8012b8e:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8012b92:	e00b      	b.n	8012bac <VL53L1_init_and_start_range+0x268>
		*pbuffer++ = 0;
 8012b94:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	f8c7 2138 	str.w	r2, [r7, #312]	@ 0x138
 8012b9e:	2200      	movs	r2, #0
 8012ba0:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8012ba2:	f8b7 3136 	ldrh.w	r3, [r7, #310]	@ 0x136
 8012ba6:	3301      	adds	r3, #1
 8012ba8:	f8a7 3136 	strh.w	r3, [r7, #310]	@ 0x136
 8012bac:	f8b7 2136 	ldrh.w	r2, [r7, #310]	@ 0x136
 8012bb0:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d3ed      	bcc.n	8012b94 <VL53L1_init_and_start_range+0x250>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8012bb8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012bbc:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012bc0:	781b      	ldrb	r3, [r3, #0]
 8012bc2:	2b05      	cmp	r3, #5
 8012bc4:	d917      	bls.n	8012bf6 <VL53L1_init_and_start_range+0x2b2>
 8012bc6:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d113      	bne.n	8012bf6 <VL53L1_init_and_start_range+0x2b2>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8012bce:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012bd2:	f1c3 0301 	rsb	r3, r3, #1
 8012bd6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012bda:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8012bde:	f107 020c 	add.w	r2, r7, #12
 8012be2:	4413      	add	r3, r2
 8012be4:	461a      	mov	r2, r3
 8012be6:	210b      	movs	r1, #11
 8012be8:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8012bec:	f001 ff60 	bl	8014ab0 <VL53L1_i2c_encode_static_nvm_managed>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 8012bf6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012bfa:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	2b04      	cmp	r3, #4
 8012c02:	d917      	bls.n	8012c34 <VL53L1_init_and_start_range+0x2f0>
 8012c04:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d113      	bne.n	8012c34 <VL53L1_init_and_start_range+0x2f0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8012c0c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012c10:	f1c3 030d 	rsb	r3, r3, #13
 8012c14:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012c18:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 8012c1c:	f107 020c 	add.w	r2, r7, #12
 8012c20:	4413      	add	r3, r2
 8012c22:	461a      	mov	r2, r3
 8012c24:	2117      	movs	r1, #23
 8012c26:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8012c2a:	f002 f81d 	bl	8014c68 <VL53L1_i2c_encode_customer_nvm_managed>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 8012c34:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012c38:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	d917      	bls.n	8012c72 <VL53L1_init_and_start_range+0x32e>
 8012c42:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d113      	bne.n	8012c72 <VL53L1_init_and_start_range+0x32e>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8012c4a:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012c4e:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8012c52:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012c56:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_static_config(
 8012c5a:	f107 020c 	add.w	r2, r7, #12
 8012c5e:	4413      	add	r3, r2
 8012c60:	461a      	mov	r2, r3
 8012c62:	2120      	movs	r1, #32
 8012c64:	f8d7 0124 	ldr.w	r0, [r7, #292]	@ 0x124
 8012c68:	f002 f93c 	bl	8014ee4 <VL53L1_i2c_encode_static_config>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 8012c72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012c76:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012c7a:	781b      	ldrb	r3, [r3, #0]
 8012c7c:	2b02      	cmp	r3, #2
 8012c7e:	d917      	bls.n	8012cb0 <VL53L1_init_and_start_range+0x36c>
 8012c80:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d113      	bne.n	8012cb0 <VL53L1_init_and_start_range+0x36c>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8012c88:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012c8c:	f1c3 0344 	rsb	r3, r3, #68	@ 0x44
 8012c90:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012c94:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_general_config(
 8012c98:	f107 020c 	add.w	r2, r7, #12
 8012c9c:	4413      	add	r3, r2
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	2116      	movs	r1, #22
 8012ca2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 8012ca6:	f002 fa00 	bl	80150aa <VL53L1_i2c_encode_general_config>
 8012caa:	4603      	mov	r3, r0
 8012cac:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8012cb0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012cb4:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012cb8:	781b      	ldrb	r3, [r3, #0]
 8012cba:	2b01      	cmp	r3, #1
 8012cbc:	d917      	bls.n	8012cee <VL53L1_init_and_start_range+0x3aa>
 8012cbe:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d113      	bne.n	8012cee <VL53L1_init_and_start_range+0x3aa>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8012cc6:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012cca:	f1c3 035a 	rsb	r3, r3, #90	@ 0x5a
 8012cce:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012cd2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_timing_config(
 8012cd6:	f107 020c 	add.w	r2, r7, #12
 8012cda:	4413      	add	r3, r2
 8012cdc:	461a      	mov	r2, r3
 8012cde:	2117      	movs	r1, #23
 8012ce0:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8012ce4:	f002 fa65 	bl	80151b2 <VL53L1_i2c_encode_timing_config>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 8012cee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012cf2:	f5a3 739f 	sub.w	r3, r3, #318	@ 0x13e
 8012cf6:	781b      	ldrb	r3, [r3, #0]
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d036      	beq.n	8012d6a <VL53L1_init_and_start_range+0x426>
 8012cfc:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d132      	bne.n	8012d6a <VL53L1_init_and_start_range+0x426>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8012d04:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012d08:	f1c3 0371 	rsb	r3, r3, #113	@ 0x71
 8012d0c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8012d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8012d14:	791b      	ldrb	r3, [r3, #4]
 8012d16:	f003 0320 	and.w	r3, r3, #32
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d017      	beq.n	8012d4e <VL53L1_init_and_start_range+0x40a>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8012d1e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012d22:	789b      	ldrb	r3, [r3, #2]
 8012d24:	f043 0301 	orr.w	r3, r3, #1
 8012d28:	b2da      	uxtb	r2, r3
 8012d2a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012d2e:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8012d30:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012d34:	789b      	ldrb	r3, [r3, #2]
 8012d36:	f043 0301 	orr.w	r3, r3, #1
 8012d3a:	b2da      	uxtb	r2, r3
 8012d3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012d40:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 8012d42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8012d46:	789a      	ldrb	r2, [r3, #2]
 8012d48:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012d4c:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012d4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_dynamic_config(
 8012d52:	f107 020c 	add.w	r2, r7, #12
 8012d56:	4413      	add	r3, r2
 8012d58:	461a      	mov	r2, r3
 8012d5a:	2112      	movs	r1, #18
 8012d5c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8012d60:	f002 faa9 	bl	80152b6 <VL53L1_i2c_encode_dynamic_config>
 8012d64:	4603      	mov	r3, r0
 8012d66:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 8012d6a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d113      	bne.n	8012d9a <VL53L1_init_and_start_range+0x456>

		i2c_buffer_offset_bytes = \
 8012d72:	f8b7 3134 	ldrh.w	r3, [r7, #308]	@ 0x134
 8012d76:	f1c3 0383 	rsb	r3, r3, #131	@ 0x83
 8012d7a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8012d7e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
			VL53L1_i2c_encode_system_control(
 8012d82:	f107 020c 	add.w	r2, r7, #12
 8012d86:	4413      	add	r3, r2
 8012d88:	461a      	mov	r2, r3
 8012d8a:	2105      	movs	r1, #5
 8012d8c:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 8012d90:	f002 fb16 	bl	80153c0 <VL53L1_i2c_encode_system_control>
 8012d94:	4603      	mov	r3, r0
 8012d96:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8012d9a:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d10f      	bne.n	8012dc2 <VL53L1_init_and_start_range+0x47e>
		status =
			VL53L1_WriteMulti(
 8012da2:	f8b7 310c 	ldrh.w	r3, [r7, #268]	@ 0x10c
 8012da6:	f107 020c 	add.w	r2, r7, #12
 8012daa:	f8b7 1134 	ldrh.w	r1, [r7, #308]	@ 0x134
 8012dae:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8012db2:	f5a0 709e 	sub.w	r0, r0, #316	@ 0x13c
 8012db6:	6800      	ldr	r0, [r0, #0]
 8012db8:	f7f5 ff23 	bl	8008c02 <VL53L1_WriteMulti>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8012dc2:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d109      	bne.n	8012dde <VL53L1_init_and_start_range+0x49a>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 8012dca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012dce:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012dd2:	6818      	ldr	r0, [r3, #0]
 8012dd4:	f000 ffa6 	bl	8013d24 <VL53L1_update_ll_driver_rd_state>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	if (status == VL53L1_ERROR_NONE)
 8012dde:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d109      	bne.n	8012dfa <VL53L1_init_and_start_range+0x4b6>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8012de6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8012dea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8012dee:	6818      	ldr	r0, [r3, #0]
 8012df0:	f001 f86b 	bl	8013eca <VL53L1_update_ll_driver_cfg_state>
 8012df4:	4603      	mov	r3, r0
 8012df6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8012dfa:	f997 313f 	ldrsb.w	r3, [r7, #319]	@ 0x13f
}
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e10:	2300      	movs	r3, #0
 8012e12:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8012e1e:	b25b      	sxtb	r3, r3
 8012e20:	f003 030f 	and.w	r3, r3, #15
 8012e24:	b25b      	sxtb	r3, r3
 8012e26:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012e2a:	b25b      	sxtb	r3, r3
 8012e2c:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 8012e34:	68bb      	ldr	r3, [r7, #8]
 8012e36:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f002 fafa 	bl	8015436 <VL53L1_set_system_control>
 8012e42:	4603      	mov	r3, r0
 8012e44:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8012e4c:	f003 030f 	and.w	r3, r3, #15
 8012e50:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8012e52:	68bb      	ldr	r3, [r7, #8]
 8012e54:	f883 21cc 	strb.w	r2, [r3, #460]	@ 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 8012e58:	2103      	movs	r1, #3
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f000 ff39 	bl	8013cd2 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8012e66:	2b01      	cmp	r3, #1
 8012e68:	d102      	bne.n	8012e70 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f001 fcb4 	bl	80147d8 <VL53L1_low_power_auto_data_stop_range>

	return status;
 8012e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3710      	adds	r7, #16
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b0c8      	sub	sp, #288	@ 0x120
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012e86:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8012e8a:	6018      	str	r0, [r3, #0]
 8012e8c:	460a      	mov	r2, r1
 8012e8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012e92:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8012e96:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8012e98:	2300      	movs	r3, #0
 8012e9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8012e9e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012ea2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 8012eac:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012eb0:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8012eb4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 8012eb8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012ebc:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8012ec0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 8012ec4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8012ec8:	f503 732b 	add.w	r3, r3, #684	@ 0x2ac
 8012ecc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8012ed0:	2388      	movs	r3, #136	@ 0x88
 8012ed2:	f8a7 310a 	strh.w	r3, [r7, #266]	@ 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 8012ed6:	2300      	movs	r3, #0
 8012ed8:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8012edc:	2300      	movs	r3, #0
 8012ede:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8012ee2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012ee6:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	2b01      	cmp	r3, #1
 8012eee:	d008      	beq.n	8012f02 <VL53L1_get_measurement_results+0x86>
 8012ef0:	2b02      	cmp	r3, #2
 8012ef2:	d10d      	bne.n	8012f10 <VL53L1_get_measurement_results+0x94>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8012ef4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8012ef8:	f5c3 7387 	rsb	r3, r3, #270	@ 0x10e
 8012efc:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8012f00:	e00a      	b.n	8012f18 <VL53L1_get_measurement_results+0x9c>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8012f02:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8012f06:	f1c3 03d5 	rsb	r3, r3, #213	@ 0xd5
 8012f0a:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8012f0e:	e003      	b.n	8012f18 <VL53L1_get_measurement_results+0x9c>
	default:
		i2c_buffer_size_bytes =
 8012f10:	232c      	movs	r3, #44	@ 0x2c
 8012f12:	f8a7 311c 	strh.w	r3, [r7, #284]	@ 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8012f16:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8012f18:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d10f      	bne.n	8012f40 <VL53L1_get_measurement_results+0xc4>
		status =
			VL53L1_ReadMulti(
 8012f20:	f8b7 311c 	ldrh.w	r3, [r7, #284]	@ 0x11c
 8012f24:	f107 0208 	add.w	r2, r7, #8
 8012f28:	f8b7 110a 	ldrh.w	r1, [r7, #266]	@ 0x10a
 8012f2c:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 8012f30:	f5a0 708e 	sub.w	r0, r0, #284	@ 0x11c
 8012f34:	6800      	ldr	r0, [r0, #0]
 8012f36:	f7f5 fe8a 	bl	8008c4e <VL53L1_ReadMulti>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 8012f40:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012f44:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8012f48:	781b      	ldrb	r3, [r3, #0]
 8012f4a:	2b01      	cmp	r3, #1
 8012f4c:	d917      	bls.n	8012f7e <VL53L1_get_measurement_results+0x102>
 8012f4e:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d113      	bne.n	8012f7e <VL53L1_get_measurement_results+0x102>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8012f56:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8012f5a:	f1c3 03d6 	rsb	r3, r3, #214	@ 0xd6
 8012f5e:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8012f62:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_debug_results(
 8012f66:	f107 0208 	add.w	r2, r7, #8
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8012f70:	4619      	mov	r1, r3
 8012f72:	2038      	movs	r0, #56	@ 0x38
 8012f74:	f002 fbdd 	bl	8015732 <VL53L1_i2c_decode_debug_results>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 8012f7e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8012f82:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 8012f86:	781b      	ldrb	r3, [r3, #0]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d017      	beq.n	8012fbc <VL53L1_get_measurement_results+0x140>
 8012f8c:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d113      	bne.n	8012fbc <VL53L1_get_measurement_results+0x140>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 8012f94:	f8b7 310a 	ldrh.w	r3, [r7, #266]	@ 0x10a
 8012f98:	f1c3 03b4 	rsb	r3, r3, #180	@ 0xb4
 8012f9c:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8012fa0:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_core_results(
 8012fa4:	f107 0208 	add.w	r2, r7, #8
 8012fa8:	4413      	add	r3, r2
 8012faa:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8012fae:	4619      	mov	r1, r3
 8012fb0:	2021      	movs	r0, #33	@ 0x21
 8012fb2:	f002 fb5d 	bl	8015670 <VL53L1_i2c_decode_core_results>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 8012fbc:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d110      	bne.n	8012fe6 <VL53L1_get_measurement_results+0x16a>

		i2c_buffer_offset_bytes = 0;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	f8a7 3108 	strh.w	r3, [r7, #264]	@ 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8012fca:	f8b7 3108 	ldrh.w	r3, [r7, #264]	@ 0x108
			VL53L1_i2c_decode_system_results(
 8012fce:	f107 0208 	add.w	r2, r7, #8
 8012fd2:	4413      	add	r3, r2
 8012fd4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8012fd8:	4619      	mov	r1, r3
 8012fda:	202c      	movs	r0, #44	@ 0x2c
 8012fdc:	f002 fa52 	bl	8015484 <VL53L1_i2c_decode_system_results>
 8012fe0:	4603      	mov	r3, r0
 8012fe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8012fe6:	f997 311f 	ldrsb.w	r3, [r7, #287]	@ 0x11f
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}

08012ff4 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b088      	sub	sp, #32
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	460b      	mov	r3, r1
 8012ffe:	607a      	str	r2, [r7, #4]
 8013000:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8013002:	2300      	movs	r3, #0
 8013004:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8013010:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8013016:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d106      	bne.n	801302c <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 801301e:	7afb      	ldrb	r3, [r7, #11]
 8013020:	4619      	mov	r1, r3
 8013022:	68f8      	ldr	r0, [r7, #12]
 8013024:	f7ff ff2a 	bl	8012e7c <VL53L1_get_measurement_results>
 8013028:	4603      	mov	r3, r0
 801302a:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 801302c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d10c      	bne.n	801304e <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8013034:	69bb      	ldr	r3, [r7, #24]
 8013036:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 801303a:	4618      	mov	r0, r3
 801303c:	69bb      	ldr	r3, [r7, #24]
 801303e:	f503 71e7 	add.w	r1, r3, #462	@ 0x1ce
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	f503 7222 	add.w	r2, r3, #648	@ 0x288
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	f000 f851 	bl	80130f0 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 801304e:	69bb      	ldr	r3, [r7, #24]
 8013050:	f893 32e5 	ldrb.w	r3, [r3, #741]	@ 0x2e5
 8013054:	2b01      	cmp	r3, #1
 8013056:	d12d      	bne.n	80130b4 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8013058:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d10e      	bne.n	801307e <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8013066:	2b00      	cmp	r3, #0
 8013068:	d109      	bne.n	801307e <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 801306a:	68f8      	ldr	r0, [r7, #12]
 801306c:	f001 fc0e 	bl	801488c <VL53L1_low_power_auto_setup_manual_calibration>
 8013070:	4603      	mov	r3, r0
 8013072:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 8013074:	69bb      	ldr	r3, [r7, #24]
 8013076:	2201      	movs	r2, #1
 8013078:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
 801307c:	e00c      	b.n	8013098 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 801307e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d108      	bne.n	8013098 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 801308c:	2b01      	cmp	r3, #1
 801308e:	d103      	bne.n	8013098 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 8013090:	69bb      	ldr	r3, [r7, #24]
 8013092:	2202      	movs	r2, #2
 8013094:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	f893 32e6 	ldrb.w	r3, [r3, #742]	@ 0x2e6
 801309e:	2bff      	cmp	r3, #255	@ 0xff
 80130a0:	d008      	beq.n	80130b4 <VL53L1_get_device_results+0xc0>
 80130a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d104      	bne.n	80130b4 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 80130aa:	68f8      	ldr	r0, [r7, #12]
 80130ac:	f001 fc33 	bl	8014916 <VL53L1_low_power_auto_update_DSS>
 80130b0:	4603      	mov	r3, r0
 80130b2:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80130ba:	693b      	ldr	r3, [r7, #16]
 80130bc:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80130be:	69bb      	ldr	r3, [r7, #24]
 80130c0:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 80130c8:	2284      	movs	r2, #132	@ 0x84
 80130ca:	6939      	ldr	r1, [r7, #16]
 80130cc:	6878      	ldr	r0, [r7, #4]
 80130ce:	f003 f957 	bl	8016380 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 80130d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d104      	bne.n	80130e4 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f000 feaa 	bl	8013e34 <VL53L1_check_ll_driver_rd_state>
 80130e0:	4603      	mov	r3, r0
 80130e2:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 80130e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80130e8:	4618      	mov	r0, r3
 80130ea:	3720      	adds	r7, #32
 80130ec:	46bd      	mov	sp, r7
 80130ee:	bd80      	pop	{r7, pc}

080130f0 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 80130f0:	b480      	push	{r7}
 80130f2:	b089      	sub	sp, #36	@ 0x24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	60f8      	str	r0, [r7, #12]
 80130f8:	60b9      	str	r1, [r7, #8]
 80130fa:	607a      	str	r2, [r7, #4]
 80130fc:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 80130fe:	2300      	movs	r3, #0
 8013100:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8013102:	2300      	movs	r3, #0
 8013104:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8013106:	2300      	movs	r3, #0
 8013108:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	78da      	ldrb	r2, [r3, #3]
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	3304      	adds	r3, #4
 8013116:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8013118:	2300      	movs	r3, #0
 801311a:	77fb      	strb	r3, [r7, #31]
 801311c:	e0d0      	b.n	80132c0 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	7ffa      	ldrb	r2, [r7, #31]
 8013122:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8013124:	69bb      	ldr	r3, [r7, #24]
 8013126:	2200      	movs	r2, #0
 8013128:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 801312a:	68bb      	ldr	r3, [r7, #8]
 801312c:	78db      	ldrb	r3, [r3, #3]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d10a      	bne.n	8013148 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	785b      	ldrb	r3, [r3, #1]
 8013136:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 801313a:	2b09      	cmp	r3, #9
 801313c:	d104      	bne.n	8013148 <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	2213      	movs	r2, #19
 8013142:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8013146:	e007      	b.n	8013158 <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	785b      	ldrb	r3, [r3, #1]
 801314c:	f003 031f 	and.w	r3, r3, #31
 8013150:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8013152:	69bb      	ldr	r3, [r7, #24]
 8013154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
		}

		switch (i) {
 8013158:	7ffb      	ldrb	r3, [r7, #31]
 801315a:	2b00      	cmp	r3, #0
 801315c:	d002      	beq.n	8013164 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 801315e:	2b01      	cmp	r3, #1
 8013160:	d05d      	beq.n	801321e <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8013162:	e0a7      	b.n	80132b4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	789b      	ldrb	r3, [r3, #2]
 8013168:	2b07      	cmp	r3, #7
 801316a:	d104      	bne.n	8013176 <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	821a      	strh	r2, [r3, #16]
 8013174:	e00c      	b.n	8013190 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	789b      	ldrb	r3, [r3, #2]
 801317a:	2b08      	cmp	r3, #8
 801317c:	d104      	bne.n	8013188 <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	821a      	strh	r2, [r3, #16]
 8013186:	e003      	b.n	8013190 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8013194:	69bb      	ldr	r3, [r7, #24]
 8013196:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	85da      	strh	r2, [r3, #46]	@ 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 80131a0:	68bb      	ldr	r3, [r7, #8]
 80131a2:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	895b      	ldrh	r3, [r3, #10]
 80131ac:	015b      	lsls	r3, r3, #5
 80131ae:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80131b6:	d302      	bcc.n	80131be <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 80131b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80131bc:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 80131be:	697b      	ldr	r3, [r7, #20]
 80131c0:	b29a      	uxth	r2, r3
 80131c2:	69bb      	ldr	r3, [r7, #24]
 80131c4:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 80131c6:	68bb      	ldr	r3, [r7, #8]
 80131c8:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 80131d2:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	68fa      	ldr	r2, [r7, #12]
 80131d8:	fb02 f303 	mul.w	r3, r2, r3
 80131dc:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 80131de:	693b      	ldr	r3, [r7, #16]
 80131e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80131e4:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 80131e6:	693b      	ldr	r3, [r7, #16]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	da01      	bge.n	80131f0 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 80131ec:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 80131f0:	12db      	asrs	r3, r3, #11
 80131f2:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	b21a      	sxth	r2, r3
 80131f8:	69bb      	ldr	r3, [r7, #24]
 80131fa:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8013200:	69bb      	ldr	r3, [r7, #24]
 8013202:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8013208:	69bb      	ldr	r3, [r7, #24]
 801320a:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8013210:	69bb      	ldr	r3, [r7, #24]
 8013212:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	621a      	str	r2, [r3, #32]

			break;
 801321c:	e04a      	b.n	80132b4 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8013226:	68bb      	ldr	r3, [r7, #8]
 8013228:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 801322a:	69bb      	ldr	r3, [r7, #24]
 801322c:	859a      	strh	r2, [r3, #44]	@ 0x2c
			pdata->avg_signal_count_rate_mcps =
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013234:	85da      	strh	r2, [r3, #46]	@ 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8013236:	68bb      	ldr	r3, [r7, #8]
 8013238:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	861a      	strh	r2, [r3, #48]	@ 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	8bdb      	ldrh	r3, [r3, #30]
 8013242:	015b      	lsls	r3, r3, #5
 8013244:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801324c:	d302      	bcc.n	8013254 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 801324e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013252:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	b29a      	uxth	r2, r3
 8013258:	69bb      	ldr	r3, [r7, #24]
 801325a:	871a      	strh	r2, [r3, #56]	@ 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8013260:	69bb      	ldr	r3, [r7, #24]
 8013262:	875a      	strh	r2, [r3, #58]	@ 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
			range_mm =
 8013268:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	68fa      	ldr	r2, [r7, #12]
 801326e:	fb02 f303 	mul.w	r3, r2, r3
 8013272:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8013274:	693b      	ldr	r3, [r7, #16]
 8013276:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 801327a:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	2b00      	cmp	r3, #0
 8013280:	da01      	bge.n	8013286 <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8013282:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8013286:	12db      	asrs	r3, r3, #11
 8013288:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	b21a      	sxth	r2, r3
 801328e:	69bb      	ldr	r3, [r7, #24]
 8013290:	879a      	strh	r2, [r3, #60]	@ 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8013296:	69bb      	ldr	r3, [r7, #24]
 8013298:	625a      	str	r2, [r3, #36]	@ 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	629a      	str	r2, [r3, #40]	@ 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 80132ae:	69bb      	ldr	r3, [r7, #24]
 80132b0:	621a      	str	r2, [r3, #32]

			break;
 80132b2:	bf00      	nop
		}

		pdata++;
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	3340      	adds	r3, #64	@ 0x40
 80132b8:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 80132ba:	7ffb      	ldrb	r3, [r7, #31]
 80132bc:	3301      	adds	r3, #1
 80132be:	77fb      	strb	r3, [r7, #31]
 80132c0:	7ffb      	ldrb	r3, [r7, #31]
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	f67f af2b 	bls.w	801311e <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 80132c8:	683b      	ldr	r3, [r7, #0]
 80132ca:	2200      	movs	r2, #0
 80132cc:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 80132ce:	68bb      	ldr	r3, [r7, #8]
 80132d0:	785b      	ldrb	r3, [r3, #1]
 80132d2:	f003 031f 	and.w	r3, r3, #31
 80132d6:	2b11      	cmp	r3, #17
 80132d8:	bf8c      	ite	hi
 80132da:	2201      	movhi	r2, #1
 80132dc:	2200      	movls	r2, #0
 80132de:	b2d2      	uxtb	r2, r2
 80132e0:	2a00      	cmp	r2, #0
 80132e2:	d117      	bne.n	8013314 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
 80132e4:	4a0e      	ldr	r2, [pc, #56]	@ (8013320 <VL53L1_copy_sys_and_core_results_to_range_results+0x230>)
 80132e6:	fa22 f303 	lsr.w	r3, r2, r3
 80132ea:	f003 0301 	and.w	r3, r3, #1
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	bf14      	ite	ne
 80132f2:	2301      	movne	r3, #1
 80132f4:	2300      	moveq	r3, #0
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d00b      	beq.n	8013314 <VL53L1_copy_sys_and_core_results_to_range_results+0x224>
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	785b      	ldrb	r3, [r3, #1]
 8013300:	f003 031f 	and.w	r3, r3, #31
 8013304:	b2da      	uxtb	r2, r3
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	2200      	movs	r2, #0
 801330e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	break;
 8013312:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8013314:	bf00      	nop
 8013316:	3724      	adds	r7, #36	@ 0x24
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr
 8013320:	0002200e 	.word	0x0002200e

08013324 <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 8013324:	b480      	push	{r7}
 8013326:	b085      	sub	sp, #20
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801332c:	2300      	movs	r3, #0
 801332e:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2208      	movs	r2, #8
 8013334:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	220b      	movs	r2, #11
 801333a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013342:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 801334a:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8013352:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 801335a:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 801335c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013360:	4618      	mov	r0, r3
 8013362:	3714      	adds	r7, #20
 8013364:	46bd      	mov	sp, r7
 8013366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801336a:	4770      	bx	lr

0801336c <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 801336c:	b480      	push	{r7}
 801336e:	b085      	sub	sp, #20
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013374:	2300      	movs	r3, #0
 8013376:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2200      	movs	r2, #0
 801337c:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2212      	movs	r2, #18
 8013382:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	220f      	movs	r2, #15
 8013388:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	2202      	movs	r2, #2
 801338e:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f648 42a0 	movw	r2, #36000	@ 0x8ca0
 8013396:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	220c      	movs	r2, #12
 801339c:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 801339e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3714      	adds	r7, #20
 80133a6:	46bd      	mov	sp, r7
 80133a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ac:	4770      	bx	lr

080133ae <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b084      	sub	sp, #16
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80133b8:	2300      	movs	r3, #0
 80133ba:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	895b      	ldrh	r3, [r3, #10]
 80133c0:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	895b      	ldrh	r3, [r3, #10]
 80133de:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2200      	movs	r2, #0
 80133fc:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80133fe:	683b      	ldr	r3, [r7, #0]
 8013400:	2240      	movs	r2, #64	@ 0x40
 8013402:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d10d      	bne.n	8013428 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d108      	bne.n	8013428 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d103      	bne.n	8013428 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	2200      	movs	r2, #0
 8013424:	741a      	strb	r2, [r3, #16]
 8013426:	e002      	b.n	801342e <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	2201      	movs	r2, #1
 801342c:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 801342e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d114      	bne.n	8013460 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 8013436:	683b      	ldr	r3, [r7, #0]
 8013438:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 801343a:	2b01      	cmp	r3, #1
 801343c:	d110      	bne.n	8013460 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	6818      	ldr	r0, [r3, #0]
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	7d1b      	ldrb	r3, [r3, #20]
 8013452:	f000 ff95 	bl	8014380 <VL53L1_calc_range_ignore_threshold>
 8013456:	4603      	mov	r3, r0
 8013458:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	82da      	strh	r2, [r3, #22]
 801345e:	e002      	b.n	8013466 <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	2200      	movs	r2, #0
 8013464:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 8013466:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3710      	adds	r7, #16
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 8013472:	b480      	push	{r7}
 8013474:	b085      	sub	sp, #20
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 801347a:	2300      	movs	r3, #0
 801347c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8013484:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801348c:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8013494:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 801349c:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	2208      	movs	r2, #8
 80134a2:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	2228      	movs	r2, #40	@ 0x28
 80134a8:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	2209      	movs	r2, #9
 80134ae:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 80134b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80134b4:	4618      	mov	r0, r3
 80134b6:	3714      	adds	r7, #20
 80134b8:	46bd      	mov	sp, r7
 80134ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134be:	4770      	bx	lr

080134c0 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 80134c0:	b480      	push	{r7}
 80134c2:	b085      	sub	sp, #20
 80134c4:	af00      	add	r7, sp, #0
 80134c6:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80134c8:	2300      	movs	r3, #0
 80134ca:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f248 0203 	movw	r2, #32771	@ 0x8003
 80134d2:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f248 0201 	movw	r2, #32769	@ 0x8001
 80134da:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	f248 0241 	movw	r2, #32833	@ 0x8041
 80134e2:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	220e      	movs	r2, #14
 80134e8:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	220a      	movs	r2, #10
 80134ee:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	2206      	movs	r2, #6
 80134f4:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	220e      	movs	r2, #14
 80134fa:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	220a      	movs	r2, #10
 8013500:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2206      	movs	r2, #6
 8013506:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	2202      	movs	r2, #2
 801350c:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2221      	movs	r2, #33	@ 0x21
 8013512:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2200      	movs	r2, #0
 8013518:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2200      	movs	r2, #0
 801351e:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	223c      	movs	r2, #60	@ 0x3c
 8013524:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	223c      	movs	r2, #60	@ 0x3c
 801352a:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8013532:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2280      	movs	r2, #128	@ 0x80
 8013538:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2280      	movs	r2, #128	@ 0x80
 801353e:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	22c0      	movs	r2, #192	@ 0xc0
 8013544:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2208      	movs	r2, #8
 801354a:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2210      	movs	r2, #16
 8013550:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2201      	movs	r2, #1
 8013556:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2202      	movs	r2, #2
 801355e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2201      	movs	r2, #1
 8013566:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2202      	movs	r2, #2
 801356e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2200      	movs	r2, #0
 8013576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8013580:	84da      	strh	r2, [r3, #38]	@ 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 8013588:	851a      	strh	r2, [r3, #40]	@ 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f248 0230 	movw	r2, #32816	@ 0x8030
 8013590:	62da      	str	r2, [r3, #44]	@ 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013598:	631a      	str	r2, [r3, #48]	@ 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80135a0:	635a      	str	r2, [r3, #52]	@ 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80135a8:	639a      	str	r2, [r3, #56]	@ 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	f24f 6218 	movw	r2, #63000	@ 0xf618
 80135b0:	641a      	str	r2, [r3, #64]	@ 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 80135b8:	645a      	str	r2, [r3, #68]	@ 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2201      	movs	r2, #1
 80135be:	63da      	str	r2, [r3, #60]	@ 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80135c6:	649a      	str	r2, [r3, #72]	@ 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 80135c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80135cc:	4618      	mov	r0, r3
 80135ce:	3714      	adds	r7, #20
 80135d0:	46bd      	mov	sp, r7
 80135d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d6:	4770      	bx	lr

080135d8 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80135d8:	b480      	push	{r7}
 80135da:	b087      	sub	sp, #28
 80135dc:	af00      	add	r7, sp, #0
 80135de:	60f8      	str	r0, [r7, #12]
 80135e0:	60b9      	str	r1, [r7, #8]
 80135e2:	607a      	str	r2, [r7, #4]
 80135e4:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80135e6:	2300      	movs	r3, #0
 80135e8:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	f44f 6220 	mov.w	r2, #2560	@ 0xa00
 80135f0:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	2200      	movs	r2, #0
 80135f6:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	2200      	movs	r2, #0
 80135fc:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	2200      	movs	r2, #0
 8013602:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2200      	movs	r2, #0
 8013608:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	2200      	movs	r2, #0
 801360e:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2200      	movs	r2, #0
 8013614:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	2200      	movs	r2, #0
 801361a:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2200      	movs	r2, #0
 8013620:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2200      	movs	r2, #0
 8013626:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	2200      	movs	r2, #0
 801362c:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	2211      	movs	r2, #17
 8013632:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	2202      	movs	r2, #2
 8013638:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 801363a:	68fb      	ldr	r3, [r7, #12]
 801363c:	2200      	movs	r2, #0
 801363e:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	2202      	movs	r2, #2
 8013644:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	2208      	movs	r2, #8
 801364a:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2200      	movs	r2, #0
 8013650:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 8013652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013654:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 801365a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801365c:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 8013662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013664:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2201      	movs	r2, #1
 8013670:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	2200      	movs	r2, #0
 8013676:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2200      	movs	r2, #0
 801367c:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	2200      	movs	r2, #0
 8013682:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	22ff      	movs	r2, #255	@ 0xff
 8013688:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 801368a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801368c:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 8013692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013694:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2200      	movs	r2, #0
 801369e:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	2200      	movs	r2, #0
 80136a4:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	2200      	movs	r2, #0
 80136aa:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 80136ac:	68bb      	ldr	r3, [r7, #8]
 80136ae:	2200      	movs	r2, #0
 80136b0:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	2200      	movs	r2, #0
 80136b6:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	2220      	movs	r2, #32
 80136bc:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 80136be:	68bb      	ldr	r3, [r7, #8]
 80136c0:	220b      	movs	r2, #11
 80136c2:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 80136c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c6:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 80136c8:	68bb      	ldr	r3, [r7, #8]
 80136ca:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	2202      	movs	r2, #2
 80136d0:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	220d      	movs	r2, #13
 80136d6:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 80136d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136da:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 80136dc:	68bb      	ldr	r3, [r7, #8]
 80136de:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	2200      	movs	r2, #0
 80136e4:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	2201      	movs	r2, #1
 80136ea:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	2200      	movs	r2, #0
 80136f0:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	2200      	movs	r2, #0
 80136f6:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	f44f 420c 	mov.w	r2, #35840	@ 0x8c00
 80136fe:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 8013700:	68bb      	ldr	r3, [r7, #8]
 8013702:	2200      	movs	r2, #0
 8013704:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 8013706:	68bb      	ldr	r3, [r7, #8]
 8013708:	2238      	movs	r2, #56	@ 0x38
 801370a:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 801370c:	68bb      	ldr	r3, [r7, #8]
 801370e:	22ff      	movs	r2, #255	@ 0xff
 8013710:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	2201      	movs	r2, #1
 8013716:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2200      	movs	r2, #0
 801371c:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	221a      	movs	r2, #26
 8013722:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	2200      	movs	r2, #0
 8013728:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	2220      	movs	r2, #32
 801372e:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2201      	movs	r2, #1
 8013734:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	22cc      	movs	r2, #204	@ 0xcc
 801373a:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	220b      	movs	r2, #11
 8013740:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2201      	movs	r2, #1
 8013746:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	22f5      	movs	r2, #245	@ 0xf5
 801374c:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2209      	movs	r2, #9
 8013752:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8013754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013756:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 801375c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801375e:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2208      	movs	r2, #8
 8013768:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	2278      	movs	r2, #120	@ 0x78
 801376e:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2200      	movs	r2, #0
 8013774:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2200      	movs	r2, #0
 801377a:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	2201      	movs	r2, #1
 8013780:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2200      	movs	r2, #0
 8013786:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	2200      	movs	r2, #0
 801378c:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 801378e:	683b      	ldr	r3, [r7, #0]
 8013790:	2200      	movs	r2, #0
 8013792:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8013794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013796:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
	pdynamic->system__seed_config =
 801379a:	683b      	ldr	r3, [r7, #0]
 801379c:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	220b      	movs	r2, #11
 80137a2:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 80137a4:	683b      	ldr	r3, [r7, #0]
 80137a6:	2209      	movs	r2, #9
 80137a8:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 80137aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137ac:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 80137b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b4:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 80137b6:	683b      	ldr	r3, [r7, #0]
 80137b8:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	2201      	movs	r2, #1
 80137be:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 80137c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c2:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
	pdynamic->sd_config__first_order_select =
 80137c6:	683b      	ldr	r3, [r7, #0]
 80137c8:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 80137ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137cc:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
	pdynamic->sd_config__quantifier         =
 80137d0:	683b      	ldr	r3, [r7, #0]
 80137d2:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	22c7      	movs	r2, #199	@ 0xc7
 80137d8:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 80137da:	683b      	ldr	r3, [r7, #0]
 80137dc:	22ff      	movs	r2, #255	@ 0xff
 80137de:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 80137e0:	683b      	ldr	r3, [r7, #0]
 80137e2:	22db      	movs	r2, #219	@ 0xdb
 80137e4:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 80137e6:	683b      	ldr	r3, [r7, #0]
 80137e8:	2202      	movs	r2, #2
 80137ea:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 80137ec:	6a3b      	ldr	r3, [r7, #32]
 80137ee:	2200      	movs	r2, #0
 80137f0:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 80137f2:	6a3b      	ldr	r3, [r7, #32]
 80137f4:	2201      	movs	r2, #1
 80137f6:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 80137f8:	6a3b      	ldr	r3, [r7, #32]
 80137fa:	2201      	movs	r2, #1
 80137fc:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80137fe:	6a3b      	ldr	r3, [r7, #32]
 8013800:	2221      	movs	r2, #33	@ 0x21
 8013802:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 8013804:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013808:	4618      	mov	r0, r3
 801380a:	371c      	adds	r7, #28
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr

08013814 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b088      	sub	sp, #32
 8013818:	af02      	add	r7, sp, #8
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	607a      	str	r2, [r7, #4]
 8013820:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013822:	2300      	movs	r3, #0
 8013824:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8013826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013828:	9301      	str	r3, [sp, #4]
 801382a:	6a3b      	ldr	r3, [r7, #32]
 801382c:	9300      	str	r3, [sp, #0]
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	687a      	ldr	r2, [r7, #4]
 8013832:	68b9      	ldr	r1, [r7, #8]
 8013834:	68f8      	ldr	r0, [r7, #12]
 8013836:	f7ff fecf 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 801383a:	4603      	mov	r3, r0
 801383c:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801383e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d121      	bne.n	801388a <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2207      	movs	r2, #7
 801384a:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2205      	movs	r2, #5
 8013850:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 8013852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013854:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 801385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801385c:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2208      	movs	r2, #8
 8013866:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	2238      	movs	r2, #56	@ 0x38
 801386c:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 801386e:	683b      	ldr	r3, [r7, #0]
 8013870:	2207      	movs	r2, #7
 8013872:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	2205      	movs	r2, #5
 8013878:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 801387a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801387c:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 801387e:	683b      	ldr	r3, [r7, #0]
 8013880:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 8013882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013884:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8013886:	683b      	ldr	r3, [r7, #0]
 8013888:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 801388a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801388e:	4618      	mov	r0, r3
 8013890:	3718      	adds	r7, #24
 8013892:	46bd      	mov	sp, r7
 8013894:	bd80      	pop	{r7, pc}

08013896 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013896:	b580      	push	{r7, lr}
 8013898:	b088      	sub	sp, #32
 801389a:	af02      	add	r7, sp, #8
 801389c:	60f8      	str	r0, [r7, #12]
 801389e:	60b9      	str	r1, [r7, #8]
 80138a0:	607a      	str	r2, [r7, #4]
 80138a2:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80138a4:	2300      	movs	r3, #0
 80138a6:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80138a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138aa:	9301      	str	r3, [sp, #4]
 80138ac:	6a3b      	ldr	r3, [r7, #32]
 80138ae:	9300      	str	r3, [sp, #0]
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	687a      	ldr	r2, [r7, #4]
 80138b4:	68b9      	ldr	r1, [r7, #8]
 80138b6:	68f8      	ldr	r0, [r7, #12]
 80138b8:	f7ff fe8e 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 80138bc:	4603      	mov	r3, r0
 80138be:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80138c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d121      	bne.n	801390c <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	220f      	movs	r2, #15
 80138cc:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	220d      	movs	r2, #13
 80138d2:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 80138d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138d6:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 80138dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138de:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	2208      	movs	r2, #8
 80138e8:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	22b8      	movs	r2, #184	@ 0xb8
 80138ee:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	220f      	movs	r2, #15
 80138f4:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	220d      	movs	r2, #13
 80138fa:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80138fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80138fe:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 8013904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013906:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 801390c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013910:	4618      	mov	r0, r3
 8013912:	3718      	adds	r7, #24
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}

08013918 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b088      	sub	sp, #32
 801391c:	af02      	add	r7, sp, #8
 801391e:	60f8      	str	r0, [r7, #12]
 8013920:	60b9      	str	r1, [r7, #8]
 8013922:	607a      	str	r2, [r7, #4]
 8013924:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013926:	2300      	movs	r3, #0
 8013928:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 801392a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801392c:	9301      	str	r3, [sp, #4]
 801392e:	6a3b      	ldr	r3, [r7, #32]
 8013930:	9300      	str	r3, [sp, #0]
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	687a      	ldr	r2, [r7, #4]
 8013936:	68b9      	ldr	r1, [r7, #8]
 8013938:	68f8      	ldr	r0, [r7, #12]
 801393a:	f7ff fe4d 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 801393e:	4603      	mov	r3, r0
 8013940:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8013942:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d105      	bne.n	8013956 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	2202      	movs	r2, #2
 801394e:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	223b      	movs	r2, #59	@ 0x3b
 8013954:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8013956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801395a:	4618      	mov	r0, r3
 801395c:	3718      	adds	r7, #24
 801395e:	46bd      	mov	sp, r7
 8013960:	bd80      	pop	{r7, pc}

08013962 <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013962:	b580      	push	{r7, lr}
 8013964:	b088      	sub	sp, #32
 8013966:	af02      	add	r7, sp, #8
 8013968:	60f8      	str	r0, [r7, #12]
 801396a:	60b9      	str	r1, [r7, #8]
 801396c:	607a      	str	r2, [r7, #4]
 801396e:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013970:	2300      	movs	r3, #0
 8013972:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8013974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013976:	9301      	str	r3, [sp, #4]
 8013978:	6a3b      	ldr	r3, [r7, #32]
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	68b9      	ldr	r1, [r7, #8]
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f7ff fe28 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 8013988:	4603      	mov	r3, r0
 801398a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 801398c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d105      	bne.n	80139a0 <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2202      	movs	r2, #2
 8013998:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	225b      	movs	r2, #91	@ 0x5b
 801399e:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 80139a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80139a4:	4618      	mov	r0, r3
 80139a6:	3718      	adds	r7, #24
 80139a8:	46bd      	mov	sp, r7
 80139aa:	bd80      	pop	{r7, pc}

080139ac <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b088      	sub	sp, #32
 80139b0:	af02      	add	r7, sp, #8
 80139b2:	60f8      	str	r0, [r7, #12]
 80139b4:	60b9      	str	r1, [r7, #8]
 80139b6:	607a      	str	r2, [r7, #4]
 80139b8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80139ba:	2300      	movs	r3, #0
 80139bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 80139be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139c0:	9301      	str	r3, [sp, #4]
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	9300      	str	r3, [sp, #0]
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	68b9      	ldr	r1, [r7, #8]
 80139cc:	68f8      	ldr	r0, [r7, #12]
 80139ce:	f7ff fe03 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 80139d2:	4603      	mov	r3, r0
 80139d4:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80139d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d11a      	bne.n	8013a14 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	2200      	movs	r2, #0
 80139e2:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	22b1      	movs	r2, #177	@ 0xb1
 80139ee:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2200      	movs	r2, #0
 80139f4:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	22d4      	movs	r2, #212	@ 0xd4
 80139fa:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8013a02:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8013a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a06:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8013a0e:	6a3b      	ldr	r3, [r7, #32]
 8013a10:	2240      	movs	r2, #64	@ 0x40
 8013a12:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8013a14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3718      	adds	r7, #24
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013a20:	b580      	push	{r7, lr}
 8013a22:	b088      	sub	sp, #32
 8013a24:	af02      	add	r7, sp, #8
 8013a26:	60f8      	str	r0, [r7, #12]
 8013a28:	60b9      	str	r1, [r7, #8]
 8013a2a:	607a      	str	r2, [r7, #4]
 8013a2c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 8013a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a34:	9301      	str	r3, [sp, #4]
 8013a36:	6a3b      	ldr	r3, [r7, #32]
 8013a38:	9300      	str	r3, [sp, #0]
 8013a3a:	683b      	ldr	r3, [r7, #0]
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	68b9      	ldr	r1, [r7, #8]
 8013a40:	68f8      	ldr	r0, [r7, #12]
 8013a42:	f7ff fee7 	bl	8013814 <VL53L1_preset_mode_standard_ranging_short_range>
 8013a46:	4603      	mov	r3, r0
 8013a48:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8013a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d11a      	bne.n	8013a88 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	2200      	movs	r2, #0
 8013a56:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	2201      	movs	r2, #1
 8013a5c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	2284      	movs	r2, #132	@ 0x84
 8013a62:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2201      	movs	r2, #1
 8013a68:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	22b1      	movs	r2, #177	@ 0xb1
 8013a6e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8013a76:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8013a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a7a:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8013a82:	6a3b      	ldr	r3, [r7, #32]
 8013a84:	2240      	movs	r2, #64	@ 0x40
 8013a86:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8013a88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	3718      	adds	r7, #24
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}

08013a94 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b088      	sub	sp, #32
 8013a98:	af02      	add	r7, sp, #8
 8013a9a:	60f8      	str	r0, [r7, #12]
 8013a9c:	60b9      	str	r1, [r7, #8]
 8013a9e:	607a      	str	r2, [r7, #4]
 8013aa0:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8013aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aa8:	9301      	str	r3, [sp, #4]
 8013aaa:	6a3b      	ldr	r3, [r7, #32]
 8013aac:	9300      	str	r3, [sp, #0]
 8013aae:	683b      	ldr	r3, [r7, #0]
 8013ab0:	687a      	ldr	r2, [r7, #4]
 8013ab2:	68b9      	ldr	r1, [r7, #8]
 8013ab4:	68f8      	ldr	r0, [r7, #12]
 8013ab6:	f7ff feee 	bl	8013896 <VL53L1_preset_mode_standard_ranging_long_range>
 8013aba:	4603      	mov	r3, r0
 8013abc:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8013abe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d11a      	bne.n	8013afc <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8013ac6:	683b      	ldr	r3, [r7, #0]
 8013ac8:	2200      	movs	r2, #0
 8013aca:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	2200      	movs	r2, #0
 8013ad0:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	2297      	movs	r2, #151	@ 0x97
 8013ad6:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	2200      	movs	r2, #0
 8013adc:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	22b1      	movs	r2, #177	@ 0xb1
 8013ae2:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8013aea:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8013aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aee:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8013af2:	683b      	ldr	r3, [r7, #0]
 8013af4:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 8013af6:	6a3b      	ldr	r3, [r7, #32]
 8013af8:	2240      	movs	r2, #64	@ 0x40
 8013afa:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8013afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	3718      	adds	r7, #24
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8013b08:	b580      	push	{r7, lr}
 8013b0a:	b088      	sub	sp, #32
 8013b0c:	af02      	add	r7, sp, #8
 8013b0e:	60f8      	str	r0, [r7, #12]
 8013b10:	60b9      	str	r1, [r7, #8]
 8013b12:	607a      	str	r2, [r7, #4]
 8013b14:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013b16:	2300      	movs	r3, #0
 8013b18:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 8013b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1c:	9301      	str	r3, [sp, #4]
 8013b1e:	6a3b      	ldr	r3, [r7, #32]
 8013b20:	9300      	str	r3, [sp, #0]
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	68b9      	ldr	r1, [r7, #8]
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f7ff ff3f 	bl	80139ac <VL53L1_preset_mode_timed_ranging>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8013b32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d106      	bne.n	8013b48 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8013b3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b3c:	6839      	ldr	r1, [r7, #0]
 8013b3e:	68b8      	ldr	r0, [r7, #8]
 8013b40:	f000 fe84 	bl	801484c <VL53L1_config_low_power_auto_mode>
 8013b44:	4603      	mov	r3, r0
 8013b46:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8013b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3718      	adds	r7, #24
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b088      	sub	sp, #32
 8013b58:	af02      	add	r7, sp, #8
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	607a      	str	r2, [r7, #4]
 8013b60:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013b62:	2300      	movs	r3, #0
 8013b64:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8013b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b68:	9301      	str	r3, [sp, #4]
 8013b6a:	6a3b      	ldr	r3, [r7, #32]
 8013b6c:	9300      	str	r3, [sp, #0]
 8013b6e:	683b      	ldr	r3, [r7, #0]
 8013b70:	687a      	ldr	r2, [r7, #4]
 8013b72:	68b9      	ldr	r1, [r7, #8]
 8013b74:	68f8      	ldr	r0, [r7, #12]
 8013b76:	f7ff ff53 	bl	8013a20 <VL53L1_preset_mode_timed_ranging_short_range>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8013b7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d106      	bne.n	8013b94 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8013b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b88:	6839      	ldr	r1, [r7, #0]
 8013b8a:	68b8      	ldr	r0, [r7, #8]
 8013b8c:	f000 fe5e 	bl	801484c <VL53L1_config_low_power_auto_mode>
 8013b90:	4603      	mov	r3, r0
 8013b92:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8013b94:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}

08013ba0 <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8013ba0:	b580      	push	{r7, lr}
 8013ba2:	b088      	sub	sp, #32
 8013ba4:	af02      	add	r7, sp, #8
 8013ba6:	60f8      	str	r0, [r7, #12]
 8013ba8:	60b9      	str	r1, [r7, #8]
 8013baa:	607a      	str	r2, [r7, #4]
 8013bac:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8013bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013bb4:	9301      	str	r3, [sp, #4]
 8013bb6:	6a3b      	ldr	r3, [r7, #32]
 8013bb8:	9300      	str	r3, [sp, #0]
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	68b9      	ldr	r1, [r7, #8]
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f7ff ff67 	bl	8013a94 <VL53L1_preset_mode_timed_ranging_long_range>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8013bca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d106      	bne.n	8013be0 <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8013bd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013bd4:	6839      	ldr	r1, [r7, #0]
 8013bd6:	68b8      	ldr	r0, [r7, #8]
 8013bd8:	f000 fe38 	bl	801484c <VL53L1_config_low_power_auto_mode>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8013be0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3718      	adds	r7, #24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b088      	sub	sp, #32
 8013bf0:	af02      	add	r7, sp, #8
 8013bf2:	60f8      	str	r0, [r7, #12]
 8013bf4:	60b9      	str	r1, [r7, #8]
 8013bf6:	607a      	str	r2, [r7, #4]
 8013bf8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8013bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c00:	9301      	str	r3, [sp, #4]
 8013c02:	6a3b      	ldr	r3, [r7, #32]
 8013c04:	9300      	str	r3, [sp, #0]
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	687a      	ldr	r2, [r7, #4]
 8013c0a:	68b9      	ldr	r1, [r7, #8]
 8013c0c:	68f8      	ldr	r0, [r7, #12]
 8013c0e:	f7ff fce3 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 8013c12:	4603      	mov	r3, r0
 8013c14:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8013c16:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d116      	bne.n	8013c4c <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	2200      	movs	r2, #0
 8013c22:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	2200      	movs	r2, #0
 8013c28:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	22b1      	movs	r2, #177	@ 0xb1
 8013c2e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2200      	movs	r2, #0
 8013c34:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	22d4      	movs	r2, #212	@ 0xd4
 8013c3a:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8013c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c3e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
		pdynamic->system__seed_config =
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8013c46:	6a3b      	ldr	r3, [r7, #32]
 8013c48:	2210      	movs	r2, #16
 8013c4a:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8013c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}

08013c58 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b088      	sub	sp, #32
 8013c5c:	af02      	add	r7, sp, #8
 8013c5e:	60f8      	str	r0, [r7, #12]
 8013c60:	60b9      	str	r1, [r7, #8]
 8013c62:	607a      	str	r2, [r7, #4]
 8013c64:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8013c66:	2300      	movs	r3, #0
 8013c68:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8013c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c6c:	9301      	str	r3, [sp, #4]
 8013c6e:	6a3b      	ldr	r3, [r7, #32]
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	687a      	ldr	r2, [r7, #4]
 8013c76:	68b9      	ldr	r1, [r7, #8]
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f7ff fcad 	bl	80135d8 <VL53L1_preset_mode_standard_ranging>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8013c82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d102      	bne.n	8013c90 <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8013c8a:	6a3b      	ldr	r3, [r7, #32]
 8013c8c:	2201      	movs	r2, #1
 8013c8e:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8013c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	3718      	adds	r7, #24
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	bd80      	pop	{r7, pc}

08013c9c <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8013c9c:	b480      	push	{r7}
 8013c9e:	b085      	sub	sp, #20
 8013ca0:	af00      	add	r7, sp, #0
 8013ca2:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	2201      	movs	r2, #1
 8013cac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2202      	movs	r2, #2
 8013cb4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	2209      	movs	r2, #9
 8013cbc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8013cc0:	68fb      	ldr	r3, [r7, #12]
 8013cc2:	224b      	movs	r2, #75	@ 0x4b
 8013cc4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8013cc6:	bf00      	nop
 8013cc8:	3714      	adds	r7, #20
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd0:	4770      	bx	lr

08013cd2 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8013cd2:	b480      	push	{r7}
 8013cd4:	b085      	sub	sp, #20
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	6078      	str	r0, [r7, #4]
 8013cda:	460b      	mov	r3, r1
 8013cdc:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	332c      	adds	r3, #44	@ 0x2c
 8013ce6:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	78fa      	ldrb	r2, [r7, #3]
 8013cec:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	78fa      	ldrb	r2, [r7, #3]
 8013d04:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	2200      	movs	r2, #0
 8013d0a:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	2202      	movs	r2, #2
 8013d10:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8013d12:	68bb      	ldr	r3, [r7, #8]
 8013d14:	2200      	movs	r2, #0
 8013d16:	71da      	strb	r2, [r3, #7]

}
 8013d18:	bf00      	nop
 8013d1a:	3714      	adds	r7, #20
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr

08013d24 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8013d24:	b480      	push	{r7}
 8013d26:	b087      	sub	sp, #28
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	332c      	adds	r3, #44	@ 0x2c
 8013d38:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8013d40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10c      	bne.n	8013d62 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	2203      	movs	r2, #3
 8013d4c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8013d4e:	68fb      	ldr	r3, [r7, #12]
 8013d50:	2200      	movs	r2, #0
 8013d52:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	2202      	movs	r2, #2
 8013d58:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	71da      	strb	r2, [r3, #7]
 8013d60:	e060      	b.n	8013e24 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	795b      	ldrb	r3, [r3, #5]
 8013d66:	2bff      	cmp	r3, #255	@ 0xff
 8013d68:	d103      	bne.n	8013d72 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	2280      	movs	r2, #128	@ 0x80
 8013d6e:	715a      	strb	r2, [r3, #5]
 8013d70:	e005      	b.n	8013d7e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	795b      	ldrb	r3, [r3, #5]
 8013d76:	3301      	adds	r3, #1
 8013d78:	b2da      	uxtb	r2, r3
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	799b      	ldrb	r3, [r3, #6]
 8013d82:	f083 0302 	eor.w	r3, r3, #2
 8013d86:	b2da      	uxtb	r2, r3
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	791b      	ldrb	r3, [r3, #4]
 8013d90:	3b03      	subs	r3, #3
 8013d92:	2b05      	cmp	r3, #5
 8013d94:	d839      	bhi.n	8013e0a <VL53L1_update_ll_driver_rd_state+0xe6>
 8013d96:	a201      	add	r2, pc, #4	@ (adr r2, 8013d9c <VL53L1_update_ll_driver_rd_state+0x78>)
 8013d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d9c:	08013db5 	.word	0x08013db5
 8013da0:	08013e0b 	.word	0x08013e0b
 8013da4:	08013e0b 	.word	0x08013e0b
 8013da8:	08013ddf 	.word	0x08013ddf
 8013dac:	08013ded 	.word	0x08013ded
 8013db0:	08013df5 	.word	0x08013df5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8013db4:	693b      	ldr	r3, [r7, #16]
 8013db6:	f893 31c6 	ldrb.w	r3, [r3, #454]	@ 0x1c6
 8013dba:	f003 0302 	and.w	r3, r3, #2
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	dd03      	ble.n	8013dca <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	2206      	movs	r2, #6
 8013dc6:	711a      	strb	r2, [r3, #4]
 8013dc8:	e002      	b.n	8013dd0 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	2208      	movs	r2, #8
 8013dce:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	71da      	strb	r2, [r3, #7]

		break;
 8013ddc:	e022      	b.n	8013e24 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	2200      	movs	r2, #0
 8013de2:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	2208      	movs	r2, #8
 8013de8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8013dea:	e01b      	b.n	8013e24 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2208      	movs	r2, #8
 8013df0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8013df2:	e017      	b.n	8013e24 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	79db      	ldrb	r3, [r3, #7]
 8013df8:	f083 0301 	eor.w	r3, r3, #1
 8013dfc:	b2da      	uxtb	r2, r3
 8013dfe:	68fb      	ldr	r3, [r7, #12]
 8013e00:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	2208      	movs	r2, #8
 8013e06:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8013e08:	e00c      	b.n	8013e24 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2203      	movs	r2, #3
 8013e0e:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	2200      	movs	r2, #0
 8013e14:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2202      	movs	r2, #2
 8013e1a:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	71da      	strb	r2, [r3, #7]

		break;
 8013e22:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8013e24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	371c      	adds	r7, #28
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e32:	4770      	bx	lr

08013e34 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8013e34:	b480      	push	{r7}
 8013e36:	b089      	sub	sp, #36	@ 0x24
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8013e3c:	2300      	movs	r3, #0
 8013e3e:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	332c      	adds	r3, #44	@ 0x2c
 8013e48:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8013e4a:	69bb      	ldr	r3, [r7, #24]
 8013e4c:	f503 73e7 	add.w	r3, r3, #462	@ 0x1ce
 8013e50:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8013e56:	2300      	movs	r3, #0
 8013e58:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8013e5e:	693b      	ldr	r3, [r7, #16]
 8013e60:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8013e62:	f003 031f 	and.w	r3, r3, #31
 8013e66:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	78db      	ldrb	r3, [r3, #3]
 8013e6c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8013e72:	111b      	asrs	r3, r3, #4
 8013e74:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8013e76:	f003 0302 	and.w	r3, r3, #2
 8013e7a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8013e7c:	69bb      	ldr	r3, [r7, #24]
 8013e7e:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8013e82:	f003 0320 	and.w	r3, r3, #32
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d017      	beq.n	8013eba <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8013e8a:	697b      	ldr	r3, [r7, #20]
 8013e8c:	791b      	ldrb	r3, [r3, #4]
 8013e8e:	2b06      	cmp	r3, #6
 8013e90:	d105      	bne.n	8013e9e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8013e92:	7bfb      	ldrb	r3, [r7, #15]
 8013e94:	2b12      	cmp	r3, #18
 8013e96:	d010      	beq.n	8013eba <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8013e98:	23ef      	movs	r3, #239	@ 0xef
 8013e9a:	77fb      	strb	r3, [r7, #31]
 8013e9c:	e00d      	b.n	8013eba <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8013e9e:	697b      	ldr	r3, [r7, #20]
 8013ea0:	795b      	ldrb	r3, [r3, #5]
 8013ea2:	7bba      	ldrb	r2, [r7, #14]
 8013ea4:	429a      	cmp	r2, r3
 8013ea6:	d001      	beq.n	8013eac <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8013ea8:	23ee      	movs	r3, #238	@ 0xee
 8013eaa:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8013eac:	697b      	ldr	r3, [r7, #20]
 8013eae:	799b      	ldrb	r3, [r3, #6]
 8013eb0:	7b7a      	ldrb	r2, [r7, #13]
 8013eb2:	429a      	cmp	r2, r3
 8013eb4:	d001      	beq.n	8013eba <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8013eb6:	23ed      	movs	r3, #237	@ 0xed
 8013eb8:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8013eba:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	3724      	adds	r7, #36	@ 0x24
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec8:	4770      	bx	lr

08013eca <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8013eca:	b480      	push	{r7}
 8013ecc:	b087      	sub	sp, #28
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	332c      	adds	r3, #44	@ 0x2c
 8013ede:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8013ee0:	693b      	ldr	r3, [r7, #16]
 8013ee2:	f893 31cc 	ldrb.w	r3, [r3, #460]	@ 0x1cc
 8013ee6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d10c      	bne.n	8013f08 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	2203      	movs	r2, #3
 8013ef2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	2200      	movs	r2, #0
 8013ef8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	2202      	movs	r2, #2
 8013efe:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8013f00:	68fb      	ldr	r3, [r7, #12]
 8013f02:	2200      	movs	r2, #0
 8013f04:	70da      	strb	r2, [r3, #3]
 8013f06:	e03e      	b.n	8013f86 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8013f08:	68fb      	ldr	r3, [r7, #12]
 8013f0a:	785b      	ldrb	r3, [r3, #1]
 8013f0c:	2bff      	cmp	r3, #255	@ 0xff
 8013f0e:	d103      	bne.n	8013f18 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2280      	movs	r2, #128	@ 0x80
 8013f14:	705a      	strb	r2, [r3, #1]
 8013f16:	e005      	b.n	8013f24 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	785b      	ldrb	r3, [r3, #1]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	b2da      	uxtb	r2, r3
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	789b      	ldrb	r3, [r3, #2]
 8013f28:	f083 0302 	eor.w	r3, r3, #2
 8013f2c:	b2da      	uxtb	r2, r3
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8013f32:	68fb      	ldr	r3, [r7, #12]
 8013f34:	781b      	ldrb	r3, [r3, #0]
 8013f36:	2b03      	cmp	r3, #3
 8013f38:	d002      	beq.n	8013f40 <VL53L1_update_ll_driver_cfg_state+0x76>
 8013f3a:	2b04      	cmp	r3, #4
 8013f3c:	d00e      	beq.n	8013f5c <VL53L1_update_ll_driver_cfg_state+0x92>
 8013f3e:	e015      	b.n	8013f6c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8013f40:	68fb      	ldr	r3, [r7, #12]
 8013f42:	78db      	ldrb	r3, [r3, #3]
 8013f44:	f083 0301 	eor.w	r3, r3, #1
 8013f48:	b2da      	uxtb	r2, r3
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	2201      	movs	r2, #1
 8013f52:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2204      	movs	r2, #4
 8013f58:	701a      	strb	r2, [r3, #0]
		break;
 8013f5a:	e014      	b.n	8013f86 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	78db      	ldrb	r3, [r3, #3]
 8013f60:	f083 0301 	eor.w	r3, r3, #1
 8013f64:	b2da      	uxtb	r2, r3
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	70da      	strb	r2, [r3, #3]

		break;
 8013f6a:	e00c      	b.n	8013f86 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8013f6c:	68fb      	ldr	r3, [r7, #12]
 8013f6e:	2203      	movs	r2, #3
 8013f70:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	2200      	movs	r2, #0
 8013f76:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	2202      	movs	r2, #2
 8013f7c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2200      	movs	r2, #0
 8013f82:	70da      	strb	r2, [r3, #3]

		break;
 8013f84:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8013f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	371c      	adds	r7, #28
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f94:	4770      	bx	lr

08013f96 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8013f96:	b480      	push	{r7}
 8013f98:	b083      	sub	sp, #12
 8013f9a:	af00      	add	r7, sp, #0
 8013f9c:	6078      	str	r0, [r7, #4]
 8013f9e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	7c1a      	ldrb	r2, [r3, #16]
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	3301      	adds	r3, #1
 8013fac:	687a      	ldr	r2, [r7, #4]
 8013fae:	7c52      	ldrb	r2, [r2, #17]
 8013fb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	3302      	adds	r3, #2
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	7c92      	ldrb	r2, [r2, #18]
 8013fba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8013fbc:	683b      	ldr	r3, [r7, #0]
 8013fbe:	3303      	adds	r3, #3
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	7cd2      	ldrb	r2, [r2, #19]
 8013fc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	3304      	adds	r3, #4
 8013fca:	687a      	ldr	r2, [r7, #4]
 8013fcc:	7d12      	ldrb	r2, [r2, #20]
 8013fce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8013fd0:	683b      	ldr	r3, [r7, #0]
 8013fd2:	3305      	adds	r3, #5
 8013fd4:	687a      	ldr	r2, [r7, #4]
 8013fd6:	7d52      	ldrb	r2, [r2, #21]
 8013fd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8013fda:	683b      	ldr	r3, [r7, #0]
 8013fdc:	3306      	adds	r3, #6
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	7d92      	ldrb	r2, [r2, #22]
 8013fe2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	3307      	adds	r3, #7
 8013fe8:	687a      	ldr	r2, [r7, #4]
 8013fea:	7dd2      	ldrb	r2, [r2, #23]
 8013fec:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	3308      	adds	r3, #8
 8013ff2:	687a      	ldr	r2, [r7, #4]
 8013ff4:	7e12      	ldrb	r2, [r2, #24]
 8013ff6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	3309      	adds	r3, #9
 8013ffc:	687a      	ldr	r2, [r7, #4]
 8013ffe:	7e52      	ldrb	r2, [r2, #25]
 8014000:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	330a      	adds	r3, #10
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	7e92      	ldrb	r2, [r2, #26]
 801400a:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	330b      	adds	r3, #11
 8014010:	687a      	ldr	r2, [r7, #4]
 8014012:	7ed2      	ldrb	r2, [r2, #27]
 8014014:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8014016:	683b      	ldr	r3, [r7, #0]
 8014018:	330c      	adds	r3, #12
 801401a:	687a      	ldr	r2, [r7, #4]
 801401c:	7f12      	ldrb	r2, [r2, #28]
 801401e:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	330d      	adds	r3, #13
 8014024:	687a      	ldr	r2, [r7, #4]
 8014026:	7f52      	ldrb	r2, [r2, #29]
 8014028:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 801402a:	683b      	ldr	r3, [r7, #0]
 801402c:	330e      	adds	r3, #14
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	7f92      	ldrb	r2, [r2, #30]
 8014032:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	330f      	adds	r3, #15
 8014038:	687a      	ldr	r2, [r7, #4]
 801403a:	7fd2      	ldrb	r2, [r2, #31]
 801403c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	3310      	adds	r3, #16
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014048:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	3311      	adds	r3, #17
 801404e:	687a      	ldr	r2, [r7, #4]
 8014050:	f892 2021 	ldrb.w	r2, [r2, #33]	@ 0x21
 8014054:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	3312      	adds	r3, #18
 801405a:	687a      	ldr	r2, [r7, #4]
 801405c:	f892 2022 	ldrb.w	r2, [r2, #34]	@ 0x22
 8014060:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	3313      	adds	r3, #19
 8014066:	687a      	ldr	r2, [r7, #4]
 8014068:	f892 2023 	ldrb.w	r2, [r2, #35]	@ 0x23
 801406c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	3314      	adds	r3, #20
 8014072:	687a      	ldr	r2, [r7, #4]
 8014074:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8014078:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 801407a:	683b      	ldr	r3, [r7, #0]
 801407c:	3315      	adds	r3, #21
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	f892 2025 	ldrb.w	r2, [r2, #37]	@ 0x25
 8014084:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8014086:	683b      	ldr	r3, [r7, #0]
 8014088:	3316      	adds	r3, #22
 801408a:	687a      	ldr	r2, [r7, #4]
 801408c:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8014090:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8014092:	683b      	ldr	r3, [r7, #0]
 8014094:	3317      	adds	r3, #23
 8014096:	687a      	ldr	r2, [r7, #4]
 8014098:	f892 2027 	ldrb.w	r2, [r2, #39]	@ 0x27
 801409c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 801409e:	683b      	ldr	r3, [r7, #0]
 80140a0:	3318      	adds	r3, #24
 80140a2:	687a      	ldr	r2, [r7, #4]
 80140a4:	f892 2028 	ldrb.w	r2, [r2, #40]	@ 0x28
 80140a8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 80140aa:	683b      	ldr	r3, [r7, #0]
 80140ac:	3319      	adds	r3, #25
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	f892 2029 	ldrb.w	r2, [r2, #41]	@ 0x29
 80140b4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	331a      	adds	r3, #26
 80140ba:	687a      	ldr	r2, [r7, #4]
 80140bc:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 80140c0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	331b      	adds	r3, #27
 80140c6:	687a      	ldr	r2, [r7, #4]
 80140c8:	f892 202b 	ldrb.w	r2, [r2, #43]	@ 0x2b
 80140cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	331c      	adds	r3, #28
 80140d2:	687a      	ldr	r2, [r7, #4]
 80140d4:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 80140d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	331d      	adds	r3, #29
 80140de:	687a      	ldr	r2, [r7, #4]
 80140e0:	f892 202d 	ldrb.w	r2, [r2, #45]	@ 0x2d
 80140e4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	331e      	adds	r3, #30
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	f892 202e 	ldrb.w	r2, [r2, #46]	@ 0x2e
 80140f0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 80140f2:	683b      	ldr	r3, [r7, #0]
 80140f4:	331f      	adds	r3, #31
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	f892 202f 	ldrb.w	r2, [r2, #47]	@ 0x2f
 80140fc:	701a      	strb	r2, [r3, #0]
}
 80140fe:	bf00      	nop
 8014100:	370c      	adds	r7, #12
 8014102:	46bd      	mov	sp, r7
 8014104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014108:	4770      	bx	lr

0801410a <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 801410a:	b480      	push	{r7}
 801410c:	b085      	sub	sp, #20
 801410e:	af00      	add	r7, sp, #0
 8014110:	4603      	mov	r3, r0
 8014112:	603a      	str	r2, [r7, #0]
 8014114:	80fb      	strh	r3, [r7, #6]
 8014116:	460b      	mov	r3, r1
 8014118:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 801411a:	2300      	movs	r3, #0
 801411c:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 801411e:	2300      	movs	r3, #0
 8014120:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8014122:	88fb      	ldrh	r3, [r7, #6]
 8014124:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8014126:	2300      	movs	r3, #0
 8014128:	81fb      	strh	r3, [r7, #14]
 801412a:	e00e      	b.n	801414a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 801412c:	88ba      	ldrh	r2, [r7, #4]
 801412e:	89fb      	ldrh	r3, [r7, #14]
 8014130:	1ad3      	subs	r3, r2, r3
 8014132:	3b01      	subs	r3, #1
 8014134:	683a      	ldr	r2, [r7, #0]
 8014136:	4413      	add	r3, r2
 8014138:	89ba      	ldrh	r2, [r7, #12]
 801413a:	b2d2      	uxtb	r2, r2
 801413c:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 801413e:	89bb      	ldrh	r3, [r7, #12]
 8014140:	0a1b      	lsrs	r3, r3, #8
 8014142:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8014144:	89fb      	ldrh	r3, [r7, #14]
 8014146:	3301      	adds	r3, #1
 8014148:	81fb      	strh	r3, [r7, #14]
 801414a:	89fa      	ldrh	r2, [r7, #14]
 801414c:	88bb      	ldrh	r3, [r7, #4]
 801414e:	429a      	cmp	r2, r3
 8014150:	d3ec      	bcc.n	801412c <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8014152:	bf00      	nop
 8014154:	bf00      	nop
 8014156:	3714      	adds	r7, #20
 8014158:	46bd      	mov	sp, r7
 801415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801415e:	4770      	bx	lr

08014160 <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8014160:	b480      	push	{r7}
 8014162:	b085      	sub	sp, #20
 8014164:	af00      	add	r7, sp, #0
 8014166:	4603      	mov	r3, r0
 8014168:	6039      	str	r1, [r7, #0]
 801416a:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 801416c:	2300      	movs	r3, #0
 801416e:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 8014170:	e00a      	b.n	8014188 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8014172:	89fb      	ldrh	r3, [r7, #14]
 8014174:	021b      	lsls	r3, r3, #8
 8014176:	b21a      	sxth	r2, r3
 8014178:	683b      	ldr	r3, [r7, #0]
 801417a:	1c59      	adds	r1, r3, #1
 801417c:	6039      	str	r1, [r7, #0]
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	b21b      	sxth	r3, r3
 8014182:	4313      	orrs	r3, r2
 8014184:	b21b      	sxth	r3, r3
 8014186:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8014188:	88fb      	ldrh	r3, [r7, #6]
 801418a:	1e5a      	subs	r2, r3, #1
 801418c:	80fa      	strh	r2, [r7, #6]
 801418e:	2b00      	cmp	r3, #0
 8014190:	d1ef      	bne.n	8014172 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8014192:	89fb      	ldrh	r3, [r7, #14]
}
 8014194:	4618      	mov	r0, r3
 8014196:	3714      	adds	r7, #20
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80141a0:	b480      	push	{r7}
 80141a2:	b085      	sub	sp, #20
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	4603      	mov	r3, r0
 80141a8:	603a      	str	r2, [r7, #0]
 80141aa:	80fb      	strh	r3, [r7, #6]
 80141ac:	460b      	mov	r3, r1
 80141ae:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 80141b0:	2300      	movs	r3, #0
 80141b2:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 80141b4:	2300      	movs	r3, #0
 80141b6:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 80141b8:	88fb      	ldrh	r3, [r7, #6]
 80141ba:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 80141bc:	2300      	movs	r3, #0
 80141be:	81fb      	strh	r3, [r7, #14]
 80141c0:	e00f      	b.n	80141e2 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 80141c2:	88ba      	ldrh	r2, [r7, #4]
 80141c4:	89fb      	ldrh	r3, [r7, #14]
 80141c6:	1ad3      	subs	r3, r2, r3
 80141c8:	3b01      	subs	r3, #1
 80141ca:	683a      	ldr	r2, [r7, #0]
 80141cc:	4413      	add	r3, r2
 80141ce:	89ba      	ldrh	r2, [r7, #12]
 80141d0:	b2d2      	uxtb	r2, r2
 80141d2:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 80141d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80141d8:	121b      	asrs	r3, r3, #8
 80141da:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 80141dc:	89fb      	ldrh	r3, [r7, #14]
 80141de:	3301      	adds	r3, #1
 80141e0:	81fb      	strh	r3, [r7, #14]
 80141e2:	89fa      	ldrh	r2, [r7, #14]
 80141e4:	88bb      	ldrh	r3, [r7, #4]
 80141e6:	429a      	cmp	r2, r3
 80141e8:	d3eb      	bcc.n	80141c2 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80141ea:	bf00      	nop
 80141ec:	bf00      	nop
 80141ee:	3714      	adds	r7, #20
 80141f0:	46bd      	mov	sp, r7
 80141f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141f6:	4770      	bx	lr

080141f8 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80141f8:	b480      	push	{r7}
 80141fa:	b085      	sub	sp, #20
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	6039      	str	r1, [r7, #0]
 8014202:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 8014204:	2300      	movs	r3, #0
 8014206:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 8014208:	683b      	ldr	r3, [r7, #0]
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	b25b      	sxtb	r3, r3
 801420e:	2b00      	cmp	r3, #0
 8014210:	da0e      	bge.n	8014230 <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 8014212:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014216:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 8014218:	e00a      	b.n	8014230 <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 801421a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801421e:	021b      	lsls	r3, r3, #8
 8014220:	b21a      	sxth	r2, r3
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	1c59      	adds	r1, r3, #1
 8014226:	6039      	str	r1, [r7, #0]
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	b21b      	sxth	r3, r3
 801422c:	4313      	orrs	r3, r2
 801422e:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8014230:	88fb      	ldrh	r3, [r7, #6]
 8014232:	1e5a      	subs	r2, r3, #1
 8014234:	80fa      	strh	r2, [r7, #6]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d1ef      	bne.n	801421a <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 801423a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3714      	adds	r7, #20
 8014242:	46bd      	mov	sp, r7
 8014244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014248:	4770      	bx	lr

0801424a <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 801424a:	b480      	push	{r7}
 801424c:	b087      	sub	sp, #28
 801424e:	af00      	add	r7, sp, #0
 8014250:	60f8      	str	r0, [r7, #12]
 8014252:	460b      	mov	r3, r1
 8014254:	607a      	str	r2, [r7, #4]
 8014256:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8014258:	2300      	movs	r3, #0
 801425a:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8014264:	2300      	movs	r3, #0
 8014266:	82fb      	strh	r3, [r7, #22]
 8014268:	e00e      	b.n	8014288 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 801426a:	897a      	ldrh	r2, [r7, #10]
 801426c:	8afb      	ldrh	r3, [r7, #22]
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	3b01      	subs	r3, #1
 8014272:	687a      	ldr	r2, [r7, #4]
 8014274:	4413      	add	r3, r2
 8014276:	693a      	ldr	r2, [r7, #16]
 8014278:	b2d2      	uxtb	r2, r2
 801427a:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	0a1b      	lsrs	r3, r3, #8
 8014280:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 8014282:	8afb      	ldrh	r3, [r7, #22]
 8014284:	3301      	adds	r3, #1
 8014286:	82fb      	strh	r3, [r7, #22]
 8014288:	8afa      	ldrh	r2, [r7, #22]
 801428a:	897b      	ldrh	r3, [r7, #10]
 801428c:	429a      	cmp	r2, r3
 801428e:	d3ec      	bcc.n	801426a <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 8014290:	bf00      	nop
 8014292:	bf00      	nop
 8014294:	371c      	adds	r7, #28
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr

0801429e <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 801429e:	b480      	push	{r7}
 80142a0:	b085      	sub	sp, #20
 80142a2:	af00      	add	r7, sp, #0
 80142a4:	4603      	mov	r3, r0
 80142a6:	6039      	str	r1, [r7, #0]
 80142a8:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 80142aa:	2300      	movs	r3, #0
 80142ac:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 80142ae:	e007      	b.n	80142c0 <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	021a      	lsls	r2, r3, #8
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	1c59      	adds	r1, r3, #1
 80142b8:	6039      	str	r1, [r7, #0]
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	4313      	orrs	r3, r2
 80142be:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80142c0:	88fb      	ldrh	r3, [r7, #6]
 80142c2:	1e5a      	subs	r2, r3, #1
 80142c4:	80fa      	strh	r2, [r7, #6]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d1f2      	bne.n	80142b0 <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 80142ca:	68fb      	ldr	r3, [r7, #12]
}
 80142cc:	4618      	mov	r0, r3
 80142ce:	3714      	adds	r7, #20
 80142d0:	46bd      	mov	sp, r7
 80142d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d6:	4770      	bx	lr

080142d8 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80142d8:	b480      	push	{r7}
 80142da:	b085      	sub	sp, #20
 80142dc:	af00      	add	r7, sp, #0
 80142de:	4603      	mov	r3, r0
 80142e0:	6039      	str	r1, [r7, #0]
 80142e2:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 80142e4:	2300      	movs	r3, #0
 80142e6:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80142e8:	683b      	ldr	r3, [r7, #0]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	b25b      	sxtb	r3, r3
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	da0b      	bge.n	801430a <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80142f2:	f04f 33ff 	mov.w	r3, #4294967295
 80142f6:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80142f8:	e007      	b.n	801430a <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	021a      	lsls	r2, r3, #8
 80142fe:	683b      	ldr	r3, [r7, #0]
 8014300:	1c59      	adds	r1, r3, #1
 8014302:	6039      	str	r1, [r7, #0]
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	4313      	orrs	r3, r2
 8014308:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 801430a:	88fb      	ldrh	r3, [r7, #6]
 801430c:	1e5a      	subs	r2, r3, #1
 801430e:	80fa      	strh	r2, [r7, #6]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d1f2      	bne.n	80142fa <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 8014314:	68fb      	ldr	r3, [r7, #12]
}
 8014316:	4618      	mov	r0, r3
 8014318:	3714      	adds	r7, #20
 801431a:	46bd      	mov	sp, r7
 801431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014320:	4770      	bx	lr

08014322 <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 8014322:	b580      	push	{r7, lr}
 8014324:	b086      	sub	sp, #24
 8014326:	af00      	add	r7, sp, #0
 8014328:	4603      	mov	r3, r0
 801432a:	460a      	mov	r2, r1
 801432c:	80fb      	strh	r3, [r7, #6]
 801432e:	4613      	mov	r3, r2
 8014330:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 8014332:	2300      	movs	r3, #0
 8014334:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 8014336:	2300      	movs	r3, #0
 8014338:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 801433a:	2300      	movs	r3, #0
 801433c:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 801433e:	88fb      	ldrh	r3, [r7, #6]
 8014340:	4618      	mov	r0, r3
 8014342:	f000 fb5f 	bl	8014a04 <VL53L1_calc_pll_period_us>
 8014346:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8014348:	797b      	ldrb	r3, [r7, #5]
 801434a:	4618      	mov	r0, r3
 801434c:	f000 fb6e 	bl	8014a2c <VL53L1_decode_vcsel_period>
 8014350:	4603      	mov	r3, r0
 8014352:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 8014354:	697a      	ldr	r2, [r7, #20]
 8014356:	4613      	mov	r3, r2
 8014358:	00db      	lsls	r3, r3, #3
 801435a:	4413      	add	r3, r2
 801435c:	021b      	lsls	r3, r3, #8
 801435e:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	099b      	lsrs	r3, r3, #6
 8014364:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8014366:	7cfa      	ldrb	r2, [r7, #19]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	fb02 f303 	mul.w	r3, r2, r3
 801436e:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	099b      	lsrs	r3, r3, #6
 8014374:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8014376:	68fb      	ldr	r3, [r7, #12]
}
 8014378:	4618      	mov	r0, r3
 801437a:	3718      	adds	r7, #24
 801437c:	46bd      	mov	sp, r7
 801437e:	bd80      	pop	{r7, pc}

08014380 <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 8014380:	b480      	push	{r7}
 8014382:	b089      	sub	sp, #36	@ 0x24
 8014384:	af00      	add	r7, sp, #0
 8014386:	60f8      	str	r0, [r7, #12]
 8014388:	4608      	mov	r0, r1
 801438a:	4611      	mov	r1, r2
 801438c:	461a      	mov	r2, r3
 801438e:	4603      	mov	r3, r0
 8014390:	817b      	strh	r3, [r7, #10]
 8014392:	460b      	mov	r3, r1
 8014394:	813b      	strh	r3, [r7, #8]
 8014396:	4613      	mov	r3, r2
 8014398:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 801439a:	2300      	movs	r3, #0
 801439c:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 801439e:	2300      	movs	r3, #0
 80143a0:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 80143a2:	2300      	movs	r3, #0
 80143a4:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 80143a6:	2300      	movs	r3, #0
 80143a8:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 80143aa:	2300      	movs	r3, #0
 80143ac:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 80143ae:	68fb      	ldr	r3, [r7, #12]
 80143b0:	011b      	lsls	r3, r3, #4
 80143b2:	4a23      	ldr	r2, [pc, #140]	@ (8014440 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80143b4:	fb82 1203 	smull	r1, r2, r2, r3
 80143b8:	1192      	asrs	r2, r2, #6
 80143ba:	17db      	asrs	r3, r3, #31
 80143bc:	1ad3      	subs	r3, r2, r3
 80143be:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 80143c0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	da03      	bge.n	80143d0 <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 80143c8:	897b      	ldrh	r3, [r7, #10]
 80143ca:	425b      	negs	r3, r3
 80143cc:	b29b      	uxth	r3, r3
 80143ce:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 80143d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	da03      	bge.n	80143e0 <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 80143d8:	893b      	ldrh	r3, [r7, #8]
 80143da:	425b      	negs	r3, r3
 80143dc:	b29b      	uxth	r3, r3
 80143de:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 80143e0:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80143e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80143e8:	4413      	add	r3, r2
 80143ea:	015b      	lsls	r3, r3, #5
 80143ec:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	4a13      	ldr	r2, [pc, #76]	@ (8014440 <VL53L1_calc_range_ignore_threshold+0xc0>)
 80143f2:	fb82 1203 	smull	r1, r2, r2, r3
 80143f6:	1192      	asrs	r2, r2, #6
 80143f8:	17db      	asrs	r3, r3, #31
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80143fe:	697a      	ldr	r2, [r7, #20]
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	4413      	add	r3, r2
 8014404:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 8014406:	79fa      	ldrb	r2, [r7, #7]
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	fb02 f303 	mul.w	r3, r2, r3
 801440e:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 8014410:	697b      	ldr	r3, [r7, #20]
 8014412:	3310      	adds	r3, #16
 8014414:	2b00      	cmp	r3, #0
 8014416:	da00      	bge.n	801441a <VL53L1_calc_range_ignore_threshold+0x9a>
 8014418:	331f      	adds	r3, #31
 801441a:	115b      	asrs	r3, r3, #5
 801441c:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014424:	db03      	blt.n	801442e <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 8014426:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801442a:	83fb      	strh	r3, [r7, #30]
 801442c:	e001      	b.n	8014432 <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 801442e:	697b      	ldr	r3, [r7, #20]
 8014430:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 8014432:	8bfb      	ldrh	r3, [r7, #30]
}
 8014434:	4618      	mov	r0, r3
 8014436:	3724      	adds	r7, #36	@ 0x24
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	10624dd3 	.word	0x10624dd3

08014444 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
 801444c:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 801444e:	2300      	movs	r3, #0
 8014450:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	031a      	lsls	r2, r3, #12
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	085b      	lsrs	r3, r3, #1
 801445a:	441a      	add	r2, r3
	timeout_mclks   =
 801445c:	683b      	ldr	r3, [r7, #0]
 801445e:	fbb2 f3f3 	udiv	r3, r2, r3
 8014462:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8014464:	68fb      	ldr	r3, [r7, #12]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3714      	adds	r7, #20
 801446a:	46bd      	mov	sp, r7
 801446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014470:	4770      	bx	lr

08014472 <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8014472:	b580      	push	{r7, lr}
 8014474:	b084      	sub	sp, #16
 8014476:	af00      	add	r7, sp, #0
 8014478:	6078      	str	r0, [r7, #4]
 801447a:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 801447c:	2300      	movs	r3, #0
 801447e:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 8014480:	2300      	movs	r3, #0
 8014482:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);
 8014484:	6839      	ldr	r1, [r7, #0]
 8014486:	6878      	ldr	r0, [r7, #4]
 8014488:	f7ff ffdc 	bl	8014444 <VL53L1_calc_timeout_mclks>
 801448c:	60f8      	str	r0, [r7, #12]

	timeout_encoded =
		VL53L1_encode_timeout(timeout_mclks);
 801448e:	68f8      	ldr	r0, [r7, #12]
 8014490:	f000 f860 	bl	8014554 <VL53L1_encode_timeout>
 8014494:	4603      	mov	r3, r0
 8014496:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8014498:	897b      	ldrh	r3, [r7, #10]
}
 801449a:	4618      	mov	r0, r3
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 80144a2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80144a6:	b087      	sub	sp, #28
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	6078      	str	r0, [r7, #4]
 80144ac:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 80144ae:	2100      	movs	r1, #0
 80144b0:	6179      	str	r1, [r7, #20]
	uint64_t tmp            = 0;
 80144b2:	f04f 0000 	mov.w	r0, #0
 80144b6:	f04f 0100 	mov.w	r1, #0
 80144ba:	e9c7 0102 	strd	r0, r1, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 80144be:	6879      	ldr	r1, [r7, #4]
 80144c0:	2000      	movs	r0, #0
 80144c2:	4688      	mov	r8, r1
 80144c4:	4681      	mov	r9, r0
 80144c6:	6839      	ldr	r1, [r7, #0]
 80144c8:	2000      	movs	r0, #0
 80144ca:	460c      	mov	r4, r1
 80144cc:	4605      	mov	r5, r0
 80144ce:	fb04 f009 	mul.w	r0, r4, r9
 80144d2:	fb08 f105 	mul.w	r1, r8, r5
 80144d6:	4401      	add	r1, r0
 80144d8:	fba8 2304 	umull	r2, r3, r8, r4
 80144dc:	4419      	add	r1, r3
 80144de:	460b      	mov	r3, r1
 80144e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80144e4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	tmp += 0x00800;
 80144e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80144ec:	f512 6a00 	adds.w	sl, r2, #2048	@ 0x800
 80144f0:	f143 0b00 	adc.w	fp, r3, #0
 80144f4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
	tmp  = tmp >> 12;
 80144f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80144fc:	f04f 0200 	mov.w	r2, #0
 8014500:	f04f 0300 	mov.w	r3, #0
 8014504:	0b02      	lsrs	r2, r0, #12
 8014506:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 801450a:	0b0b      	lsrs	r3, r1, #12
 801450c:	e9c7 2302 	strd	r2, r3, [r7, #8]

	timeout_us = (uint32_t)tmp;
 8014510:	68bb      	ldr	r3, [r7, #8]
 8014512:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 8014514:	697b      	ldr	r3, [r7, #20]
}
 8014516:	4618      	mov	r0, r3
 8014518:	371c      	adds	r7, #28
 801451a:	46bd      	mov	sp, r7
 801451c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8014520:	4770      	bx	lr

08014522 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 8014522:	b580      	push	{r7, lr}
 8014524:	b084      	sub	sp, #16
 8014526:	af00      	add	r7, sp, #0
 8014528:	4603      	mov	r3, r0
 801452a:	6039      	str	r1, [r7, #0]
 801452c:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 801452e:	2300      	movs	r3, #0
 8014530:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 8014532:	2300      	movs	r3, #0
 8014534:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
		VL53L1_decode_timeout(timeout_encoded);
 8014536:	88fb      	ldrh	r3, [r7, #6]
 8014538:	4618      	mov	r0, r3
 801453a:	f000 f835 	bl	80145a8 <VL53L1_decode_timeout>
 801453e:	60f8      	str	r0, [r7, #12]

	timeout_us    =
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);
 8014540:	6839      	ldr	r1, [r7, #0]
 8014542:	68f8      	ldr	r0, [r7, #12]
 8014544:	f7ff ffad 	bl	80144a2 <VL53L1_calc_timeout_us>
 8014548:	60b8      	str	r0, [r7, #8]

	LOG_FUNCTION_END(0);

	return timeout_us;
 801454a:	68bb      	ldr	r3, [r7, #8]
}
 801454c:	4618      	mov	r0, r3
 801454e:	3710      	adds	r7, #16
 8014550:	46bd      	mov	sp, r7
 8014552:	bd80      	pop	{r7, pc}

08014554 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8014554:	b480      	push	{r7}
 8014556:	b087      	sub	sp, #28
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 801455c:	2300      	movs	r3, #0
 801455e:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8014560:	2300      	movs	r3, #0
 8014562:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8014564:	2300      	movs	r3, #0
 8014566:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d015      	beq.n	801459a <VL53L1_encode_timeout+0x46>
		ls_byte = timeout_mclks - 1;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	3b01      	subs	r3, #1
 8014572:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8014574:	e005      	b.n	8014582 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8014576:	693b      	ldr	r3, [r7, #16]
 8014578:	085b      	lsrs	r3, r3, #1
 801457a:	613b      	str	r3, [r7, #16]
			ms_byte++;
 801457c:	89fb      	ldrh	r3, [r7, #14]
 801457e:	3301      	adds	r3, #1
 8014580:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8014582:	693b      	ldr	r3, [r7, #16]
 8014584:	2bff      	cmp	r3, #255	@ 0xff
 8014586:	d8f6      	bhi.n	8014576 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8014588:	89fb      	ldrh	r3, [r7, #14]
 801458a:	021b      	lsls	r3, r3, #8
 801458c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 801458e:	693b      	ldr	r3, [r7, #16]
 8014590:	b29b      	uxth	r3, r3
 8014592:	b2db      	uxtb	r3, r3
 8014594:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8014596:	4413      	add	r3, r2
 8014598:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 801459a:	8afb      	ldrh	r3, [r7, #22]
}
 801459c:	4618      	mov	r0, r3
 801459e:	371c      	adds	r7, #28
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 80145a8:	b480      	push	{r7}
 80145aa:	b085      	sub	sp, #20
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	4603      	mov	r3, r0
 80145b0:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 80145b2:	2300      	movs	r3, #0
 80145b4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80145b6:	88fb      	ldrh	r3, [r7, #6]
 80145b8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80145ba:	88fa      	ldrh	r2, [r7, #6]
 80145bc:	0a12      	lsrs	r2, r2, #8
 80145be:	b292      	uxth	r2, r2
 80145c0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80145c2:	3301      	adds	r3, #1
 80145c4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80145c6:	68fb      	ldr	r3, [r7, #12]
}
 80145c8:	4618      	mov	r0, r3
 80145ca:	3714      	adds	r7, #20
 80145cc:	46bd      	mov	sp, r7
 80145ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d2:	4770      	bx	lr

080145d4 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af00      	add	r7, sp, #0
 80145da:	60f8      	str	r0, [r7, #12]
 80145dc:	60b9      	str	r1, [r7, #8]
 80145de:	607a      	str	r2, [r7, #4]
 80145e0:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80145e2:	2300      	movs	r3, #0
 80145e4:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 80145e6:	2300      	movs	r3, #0
 80145e8:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 80145ea:	2300      	movs	r3, #0
 80145ec:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80145ee:	2300      	movs	r3, #0
 80145f0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80145f2:	887b      	ldrh	r3, [r7, #2]
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d102      	bne.n	80145fe <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80145f8:	23f1      	movs	r3, #241	@ 0xf1
 80145fa:	77fb      	strb	r3, [r7, #31]
 80145fc:	e05d      	b.n	80146ba <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80145fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014600:	799a      	ldrb	r2, [r3, #6]
 8014602:	887b      	ldrh	r3, [r7, #2]
 8014604:	4611      	mov	r1, r2
 8014606:	4618      	mov	r0, r3
 8014608:	f7ff fe8b 	bl	8014322 <VL53L1_calc_macro_period_us>
 801460c:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
			VL53L1_calc_timeout_mclks(
 801460e:	6979      	ldr	r1, [r7, #20]
 8014610:	68f8      	ldr	r0, [r7, #12]
 8014612:	f7ff ff17 	bl	8014444 <VL53L1_calc_timeout_mclks>
 8014616:	61b8      	str	r0, [r7, #24]
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 8014618:	69bb      	ldr	r3, [r7, #24]
 801461a:	2bff      	cmp	r3, #255	@ 0xff
 801461c:	d901      	bls.n	8014622 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 801461e:	23ff      	movs	r3, #255	@ 0xff
 8014620:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 8014626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014628:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 801462a:	6979      	ldr	r1, [r7, #20]
 801462c:	68b8      	ldr	r0, [r7, #8]
 801462e:	f7ff ff20 	bl	8014472 <VL53L1_calc_encoded_timeout>
 8014632:	4603      	mov	r3, r0
 8014634:	827b      	strh	r3, [r7, #18]
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8014636:	8a7b      	ldrh	r3, [r7, #18]
 8014638:	0a1b      	lsrs	r3, r3, #8
 801463a:	b29b      	uxth	r3, r3
 801463c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 801463e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014640:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8014642:	8a7b      	ldrh	r3, [r7, #18]
 8014644:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 8014646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014648:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
			VL53L1_calc_encoded_timeout(
 801464a:	6979      	ldr	r1, [r7, #20]
 801464c:	6878      	ldr	r0, [r7, #4]
 801464e:	f7ff ff10 	bl	8014472 <VL53L1_calc_encoded_timeout>
 8014652:	4603      	mov	r3, r0
 8014654:	827b      	strh	r3, [r7, #18]
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8014656:	8a7b      	ldrh	r3, [r7, #18]
 8014658:	0a1b      	lsrs	r3, r3, #8
 801465a:	b29b      	uxth	r3, r3
 801465c:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 801465e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014660:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8014662:	8a7b      	ldrh	r3, [r7, #18]
 8014664:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8014666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014668:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 801466a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801466c:	7a5a      	ldrb	r2, [r3, #9]
 801466e:	887b      	ldrh	r3, [r7, #2]
 8014670:	4611      	mov	r1, r2
 8014672:	4618      	mov	r0, r3
 8014674:	f7ff fe55 	bl	8014322 <VL53L1_calc_macro_period_us>
 8014678:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
				VL53L1_calc_encoded_timeout(
 801467a:	6979      	ldr	r1, [r7, #20]
 801467c:	68b8      	ldr	r0, [r7, #8]
 801467e:	f7ff fef8 	bl	8014472 <VL53L1_calc_encoded_timeout>
 8014682:	4603      	mov	r3, r0
 8014684:	827b      	strh	r3, [r7, #18]
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8014686:	8a7b      	ldrh	r3, [r7, #18]
 8014688:	0a1b      	lsrs	r3, r3, #8
 801468a:	b29b      	uxth	r3, r3
 801468c:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 801468e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014690:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8014692:	8a7b      	ldrh	r3, [r7, #18]
 8014694:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8014696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014698:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 801469a:	6979      	ldr	r1, [r7, #20]
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f7ff fee8 	bl	8014472 <VL53L1_calc_encoded_timeout>
 80146a2:	4603      	mov	r3, r0
 80146a4:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80146a6:	8a7b      	ldrh	r3, [r7, #18]
 80146a8:	0a1b      	lsrs	r3, r3, #8
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 80146ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80146b2:	8a7b      	ldrh	r3, [r7, #18]
 80146b4:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 80146b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b8:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 80146ba:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 80146be:	4618      	mov	r0, r3
 80146c0:	3720      	adds	r7, #32
 80146c2:	46bd      	mov	sp, r7
 80146c4:	bd80      	pop	{r7, pc}

080146c6 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 80146c6:	b480      	push	{r7}
 80146c8:	b083      	sub	sp, #12
 80146ca:	af00      	add	r7, sp, #0
 80146cc:	4603      	mov	r3, r0
 80146ce:	603a      	str	r2, [r7, #0]
 80146d0:	71fb      	strb	r3, [r7, #7]
 80146d2:	460b      	mov	r3, r1
 80146d4:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 80146d6:	79fb      	ldrb	r3, [r7, #7]
 80146d8:	2b07      	cmp	r3, #7
 80146da:	d90a      	bls.n	80146f2 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 80146dc:	79bb      	ldrb	r3, [r7, #6]
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	b2da      	uxtb	r2, r3
 80146e2:	79fb      	ldrb	r3, [r7, #7]
 80146e4:	1ad3      	subs	r3, r2, r3
 80146e6:	b2db      	uxtb	r3, r3
 80146e8:	3b71      	subs	r3, #113	@ 0x71
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	683b      	ldr	r3, [r7, #0]
 80146ee:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80146f0:	e00a      	b.n	8014708 <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80146f2:	79bb      	ldrb	r3, [r7, #6]
 80146f4:	f1c3 030f 	rsb	r3, r3, #15
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	00db      	lsls	r3, r3, #3
 80146fc:	b2da      	uxtb	r2, r3
 80146fe:	79fb      	ldrb	r3, [r7, #7]
 8014700:	4413      	add	r3, r2
 8014702:	b2da      	uxtb	r2, r3
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	701a      	strb	r2, [r3, #0]
}
 8014708:	bf00      	nop
 801470a:	370c      	adds	r7, #12
 801470c:	46bd      	mov	sp, r7
 801470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014712:	4770      	bx	lr

08014714 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 8014714:	b480      	push	{r7}
 8014716:	b085      	sub	sp, #20
 8014718:	af00      	add	r7, sp, #0
 801471a:	4603      	mov	r3, r0
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	607a      	str	r2, [r7, #4]
 8014720:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 8014722:	7bfb      	ldrb	r3, [r7, #15]
 8014724:	091b      	lsrs	r3, r3, #4
 8014726:	b2da      	uxtb	r2, r3
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 801472c:	7bfb      	ldrb	r3, [r7, #15]
 801472e:	f003 030f 	and.w	r3, r3, #15
 8014732:	b2da      	uxtb	r2, r3
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	701a      	strb	r2, [r3, #0]

}
 8014738:	bf00      	nop
 801473a:	3714      	adds	r7, #20
 801473c:	46bd      	mov	sp, r7
 801473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014742:	4770      	bx	lr

08014744 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 8014744:	b480      	push	{r7}
 8014746:	b083      	sub	sp, #12
 8014748:	af00      	add	r7, sp, #0
 801474a:	4603      	mov	r3, r0
 801474c:	603a      	str	r2, [r7, #0]
 801474e:	71fb      	strb	r3, [r7, #7]
 8014750:	460b      	mov	r3, r1
 8014752:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8014754:	79bb      	ldrb	r3, [r7, #6]
 8014756:	011b      	lsls	r3, r3, #4
 8014758:	b2da      	uxtb	r2, r3
 801475a:	79fb      	ldrb	r3, [r7, #7]
 801475c:	4413      	add	r3, r2
 801475e:	b2da      	uxtb	r2, r3
 8014760:	683b      	ldr	r3, [r7, #0]
 8014762:	701a      	strb	r2, [r3, #0]

}
 8014764:	bf00      	nop
 8014766:	370c      	adds	r7, #12
 8014768:	46bd      	mov	sp, r7
 801476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476e:	4770      	bx	lr

08014770 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 8014770:	b480      	push	{r7}
 8014772:	b085      	sub	sp, #20
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014778:	2300      	movs	r3, #0
 801477a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	2203      	movs	r2, #3
 8014784:	f883 22e4 	strb.w	r2, [r3, #740]	@ 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	2200      	movs	r2, #0
 801478c:	f883 22e5 	strb.w	r2, [r3, #741]	@ 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 8014790:	68bb      	ldr	r3, [r7, #8]
 8014792:	2200      	movs	r2, #0
 8014794:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 8014798:	68bb      	ldr	r3, [r7, #8]
 801479a:	2200      	movs	r2, #0
 801479c:	f883 22e7 	strb.w	r2, [r3, #743]	@ 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	2200      	movs	r2, #0
 80147ac:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	2200      	movs	r2, #0
 80147b4:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80147b8:	68bb      	ldr	r3, [r7, #8]
 80147ba:	2200      	movs	r2, #0
 80147bc:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 80147c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3714      	adds	r7, #20
 80147d0:	46bd      	mov	sp, r7
 80147d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d6:	4770      	bx	lr

080147d8 <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 80147d8:	b480      	push	{r7}
 80147da:	b085      	sub	sp, #20
 80147dc:	af00      	add	r7, sp, #0
 80147de:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80147e0:	2300      	movs	r3, #0
 80147e2:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 80147e8:	68bb      	ldr	r3, [r7, #8]
 80147ea:	22ff      	movs	r2, #255	@ 0xff
 80147ec:	f883 22e6 	strb.w	r2, [r3, #742]	@ 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80147f0:	68bb      	ldr	r3, [r7, #8]
 80147f2:	2200      	movs	r2, #0
 80147f4:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	2200      	movs	r2, #0
 80147fc:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	2200      	movs	r2, #0
 8014804:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 8014808:	68bb      	ldr	r3, [r7, #8]
 801480a:	f893 32e8 	ldrb.w	r3, [r3, #744]	@ 0x2e8
 801480e:	2b00      	cmp	r3, #0
 8014810:	d005      	beq.n	801481e <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	f893 22e8 	ldrb.w	r2, [r3, #744]	@ 0x2e8
		pdev->stat_nvm.vhv_config__init =
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	f893 32e9 	ldrb.w	r3, [r3, #745]	@ 0x2e9
 8014824:	2b00      	cmp	r3, #0
 8014826:	d005      	beq.n	8014834 <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	f893 22e9 	ldrb.w	r2, [r3, #745]	@ 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 8014834:	68bb      	ldr	r3, [r7, #8]
 8014836:	2200      	movs	r2, #0
 8014838:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d

	LOG_FUNCTION_END(status);

	return status;
 801483c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014840:	4618      	mov	r0, r3
 8014842:	3714      	adds	r7, #20
 8014844:	46bd      	mov	sp, r7
 8014846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484a:	4770      	bx	lr

0801484c <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 801484c:	b480      	push	{r7}
 801484e:	b087      	sub	sp, #28
 8014850:	af00      	add	r7, sp, #0
 8014852:	60f8      	str	r0, [r7, #12]
 8014854:	60b9      	str	r1, [r7, #8]
 8014856:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014858:	2300      	movs	r3, #0
 801485a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	2201      	movs	r2, #1
 8014860:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2200      	movs	r2, #0
 8014866:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	228b      	movs	r2, #139	@ 0x8b
 801486c:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f44f 4248 	mov.w	r2, #51200	@ 0xc800
 8014874:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	2202      	movs	r2, #2
 801487a:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 801487c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014880:	4618      	mov	r0, r3
 8014882:	371c      	adds	r7, #28
 8014884:	46bd      	mov	sp, r7
 8014886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801488a:	4770      	bx	lr

0801488c <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 801488c:	b480      	push	{r7}
 801488e:	b085      	sub	sp, #20
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014898:	2300      	movs	r3, #0
 801489a:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	f893 2163 	ldrb.w	r2, [r3, #355]	@ 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f883 22e8 	strb.w	r2, [r3, #744]	@ 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f893 2160 	ldrb.w	r2, [r3, #352]	@ 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	f883 22e9 	strb.w	r2, [r3, #745]	@ 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	f893 3163 	ldrb.w	r3, [r3, #355]	@ 0x163
 80148ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80148be:	b2da      	uxtb	r2, r3
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f893 3160 	ldrb.w	r3, [r3, #352]	@ 0x160
 80148cc:	f003 0303 	and.w	r3, r3, #3
 80148d0:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	f893 32e4 	ldrb.w	r3, [r3, #740]	@ 0x2e4
 80148d8:	009b      	lsls	r3, r3, #2
 80148da:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80148dc:	4413      	add	r3, r2
 80148de:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f883 2160 	strb.w	r2, [r3, #352]	@ 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 80148e6:	68fb      	ldr	r3, [r7, #12]
 80148e8:	2201      	movs	r2, #1
 80148ea:	f883 218d 	strb.w	r2, [r3, #397]	@ 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	f893 22ae 	ldrb.w	r2, [r3, #686]	@ 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	f883 22ea 	strb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	f893 22ea 	ldrb.w	r2, [r3, #746]	@ 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	f883 2187 	strb.w	r2, [r3, #391]	@ 0x187

	LOG_FUNCTION_END(status);

	return status;
 8014906:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801490a:	4618      	mov	r0, r3
 801490c:	3714      	adds	r7, #20
 801490e:	46bd      	mov	sp, r7
 8014910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014914:	4770      	bx	lr

08014916 <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 8014916:	b480      	push	{r7}
 8014918:	b087      	sub	sp, #28
 801491a:	af00      	add	r7, sp, #0
 801491c:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8014922:	2300      	movs	r3, #0
 8014924:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f8b3 31de 	ldrh.w	r3, [r3, #478]	@ 0x1de
 801492c:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	@ 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 8014934:	4413      	add	r3, r2
 8014936:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801493e:	d302      	bcc.n	8014946 <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8014940:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014944:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	041b      	lsls	r3, r3, #16
 801494a:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8014952:	2b00      	cmp	r3, #0
 8014954:	d102      	bne.n	801495c <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8014956:	23f1      	movs	r3, #241	@ 0xf1
 8014958:	75fb      	strb	r3, [r7, #23]
 801495a:	e035      	b.n	80149c8 <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	@ 0x1d2
 8014962:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	fbb3 f3f2 	udiv	r3, r3, r2
 801496a:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	693a      	ldr	r2, [r7, #16]
 8014970:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 801497a:	041b      	lsls	r3, r3, #16
 801497c:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8014984:	2b00      	cmp	r3, #0
 8014986:	d102      	bne.n	801498e <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8014988:	23f1      	movs	r3, #241	@ 0xf1
 801498a:	75fb      	strb	r3, [r7, #23]
 801498c:	e01c      	b.n	80149c8 <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 801498e:	68fb      	ldr	r3, [r7, #12]
 8014990:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
			utemp32a = utemp32a /
 8014994:	693a      	ldr	r2, [r7, #16]
 8014996:	fbb2 f3f3 	udiv	r3, r2, r3
 801499a:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80149a2:	d302      	bcc.n	80149aa <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 80149a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80149a8:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 80149b4:	68fb      	ldr	r3, [r7, #12]
 80149b6:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2202      	movs	r2, #2
 80149c4:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 80149c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80149cc:	f113 0f0f 	cmn.w	r3, #15
 80149d0:	d110      	bne.n	80149f4 <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80149d8:	f8a3 22f0 	strh.w	r2, [r3, #752]	@ 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	@ 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2202      	movs	r2, #2
 80149ec:	f883 218e 	strb.w	r2, [r3, #398]	@ 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 80149f0:	2300      	movs	r3, #0
 80149f2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 80149f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	371c      	adds	r7, #28
 80149fc:	46bd      	mov	sp, r7
 80149fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a02:	4770      	bx	lr

08014a04 <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8014a04:	b480      	push	{r7}
 8014a06:	b085      	sub	sp, #20
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8014a12:	88fb      	ldrh	r3, [r7, #6]
 8014a14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8014a18:	fb92 f3f3 	sdiv	r3, r2, r3
 8014a1c:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8014a1e:	68fb      	ldr	r3, [r7, #12]
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3714      	adds	r7, #20
 8014a24:	46bd      	mov	sp, r7
 8014a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a2a:	4770      	bx	lr

08014a2c <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8014a2c:	b480      	push	{r7}
 8014a2e:	b085      	sub	sp, #20
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	4603      	mov	r3, r0
 8014a34:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8014a36:	2300      	movs	r3, #0
 8014a38:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8014a3a:	79fb      	ldrb	r3, [r7, #7]
 8014a3c:	3301      	adds	r3, #1
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	005b      	lsls	r3, r3, #1
 8014a42:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8014a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3714      	adds	r7, #20
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a50:	4770      	bx	lr

08014a52 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8014a52:	b480      	push	{r7}
 8014a54:	b085      	sub	sp, #20
 8014a56:	af00      	add	r7, sp, #0
 8014a58:	4603      	mov	r3, r0
 8014a5a:	60b9      	str	r1, [r7, #8]
 8014a5c:	607a      	str	r2, [r7, #4]
 8014a5e:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8014a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	da10      	bge.n	8014a8a <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8014a68:	7bfb      	ldrb	r3, [r7, #15]
 8014a6a:	43db      	mvns	r3, r3
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	f003 0307 	and.w	r3, r3, #7
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	3308      	adds	r3, #8
 8014a76:	b2da      	uxtb	r2, r3
 8014a78:	68bb      	ldr	r3, [r7, #8]
 8014a7a:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8014a7c:	7bfb      	ldrb	r3, [r7, #15]
 8014a7e:	3b80      	subs	r3, #128	@ 0x80
 8014a80:	10db      	asrs	r3, r3, #3
 8014a82:	b2da      	uxtb	r2, r3
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8014a88:	e00c      	b.n	8014aa4 <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8014a8a:	7bfb      	ldrb	r3, [r7, #15]
 8014a8c:	f003 0307 	and.w	r3, r3, #7
 8014a90:	b2da      	uxtb	r2, r3
 8014a92:	68bb      	ldr	r3, [r7, #8]
 8014a94:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8014a96:	7bfb      	ldrb	r3, [r7, #15]
 8014a98:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8014a9c:	10db      	asrs	r3, r3, #3
 8014a9e:	b2da      	uxtb	r2, r3
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	701a      	strb	r2, [r3, #0]
}
 8014aa4:	bf00      	nop
 8014aa6:	3714      	adds	r7, #20
 8014aa8:	46bd      	mov	sp, r7
 8014aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aae:	4770      	bx	lr

08014ab0 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b086      	sub	sp, #24
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	60f8      	str	r0, [r7, #12]
 8014ab8:	460b      	mov	r3, r1
 8014aba:	607a      	str	r2, [r7, #4]
 8014abc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8014ac2:	897b      	ldrh	r3, [r7, #10]
 8014ac4:	2b0a      	cmp	r3, #10
 8014ac6:	d802      	bhi.n	8014ace <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014ac8:	f06f 0309 	mvn.w	r3, #9
 8014acc:	e047      	b.n	8014b5e <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	781b      	ldrb	r3, [r3, #0]
 8014ad2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014ad6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8014ae4:	f002 020f 	and.w	r2, r2, #15
 8014ae8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8014aea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8014af4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014af8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014afa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8014b04:	f002 0203 	and.w	r2, r2, #3
 8014b08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014b0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8014b14:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014b18:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014b1a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	88d8      	ldrh	r0, [r3, #6]
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	3305      	adds	r3, #5
 8014b24:	461a      	mov	r2, r3
 8014b26:	2102      	movs	r1, #2
 8014b28:	f7ff faef 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8014b34:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8014b3a:	68fa      	ldr	r2, [r7, #12]
 8014b3c:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8014b3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->vhv_config__offset & 0x3F;
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8014b48:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014b4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8014b4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8014b58:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8014b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3718      	adds	r7, #24
 8014b62:	46bd      	mov	sp, r7
 8014b64:	bd80      	pop	{r7, pc}

08014b66 <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014b66:	b580      	push	{r7, lr}
 8014b68:	b086      	sub	sp, #24
 8014b6a:	af00      	add	r7, sp, #0
 8014b6c:	4603      	mov	r3, r0
 8014b6e:	60b9      	str	r1, [r7, #8]
 8014b70:	607a      	str	r2, [r7, #4]
 8014b72:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014b74:	2300      	movs	r3, #0
 8014b76:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8014b78:	89fb      	ldrh	r3, [r7, #14]
 8014b7a:	2b0a      	cmp	r3, #10
 8014b7c:	d802      	bhi.n	8014b84 <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014b7e:	f06f 0309 	mvn.w	r3, #9
 8014b82:	e046      	b.n	8014c12 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	781b      	ldrb	r3, [r3, #0]
 8014b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014b8c:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	3301      	adds	r3, #1
 8014b96:	781b      	ldrb	r3, [r3, #0]
 8014b98:	f003 030f 	and.w	r3, r3, #15
 8014b9c:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	3302      	adds	r3, #2
 8014ba6:	781b      	ldrb	r3, [r3, #0]
 8014ba8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014bac:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	3303      	adds	r3, #3
 8014bb6:	781b      	ldrb	r3, [r3, #0]
 8014bb8:	f003 0303 	and.w	r3, r3, #3
 8014bbc:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	3304      	adds	r3, #4
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8014bcc:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8014bd2:	68bb      	ldr	r3, [r7, #8]
 8014bd4:	3305      	adds	r3, #5
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	2002      	movs	r0, #2
 8014bda:	f7ff fac1 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8014bde:	4603      	mov	r3, r0
 8014be0:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	79da      	ldrb	r2, [r3, #7]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8014bee:	68bb      	ldr	r3, [r7, #8]
 8014bf0:	7a1a      	ldrb	r2, [r3, #8]
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	3309      	adds	r3, #9
 8014bfa:	781b      	ldrb	r3, [r3, #0]
 8014bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014c00:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8014c06:	68bb      	ldr	r3, [r7, #8]
 8014c08:	7a9a      	ldrb	r2, [r3, #10]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8014c0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c12:	4618      	mov	r0, r3
 8014c14:	3718      	adds	r7, #24
 8014c16:	46bd      	mov	sp, r7
 8014c18:	bd80      	pop	{r7, pc}

08014c1a <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8014c1a:	b580      	push	{r7, lr}
 8014c1c:	b086      	sub	sp, #24
 8014c1e:	af00      	add	r7, sp, #0
 8014c20:	6078      	str	r0, [r7, #4]
 8014c22:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014c24:	2300      	movs	r3, #0
 8014c26:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8014c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d108      	bne.n	8014c42 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014c30:	f107 020c 	add.w	r2, r7, #12
 8014c34:	230b      	movs	r3, #11
 8014c36:	2101      	movs	r1, #1
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7f4 f808 	bl	8008c4e <VL53L1_ReadMulti>
 8014c3e:	4603      	mov	r3, r0
 8014c40:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014c42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d108      	bne.n	8014c5c <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8014c4a:	f107 030c 	add.w	r3, r7, #12
 8014c4e:	683a      	ldr	r2, [r7, #0]
 8014c50:	4619      	mov	r1, r3
 8014c52:	200b      	movs	r0, #11
 8014c54:	f7ff ff87 	bl	8014b66 <VL53L1_i2c_decode_static_nvm_managed>
 8014c58:	4603      	mov	r3, r0
 8014c5a:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014c5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c60:	4618      	mov	r0, r3
 8014c62:	3718      	adds	r7, #24
 8014c64:	46bd      	mov	sp, r7
 8014c66:	bd80      	pop	{r7, pc}

08014c68 <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b086      	sub	sp, #24
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	60f8      	str	r0, [r7, #12]
 8014c70:	460b      	mov	r3, r1
 8014c72:	607a      	str	r2, [r7, #4]
 8014c74:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014c76:	2300      	movs	r3, #0
 8014c78:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8014c7a:	897b      	ldrh	r3, [r7, #10]
 8014c7c:	2b16      	cmp	r3, #22
 8014c7e:	d802      	bhi.n	8014c86 <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014c80:	f06f 0309 	mvn.w	r3, #9
 8014c84:	e076      	b.n	8014d74 <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8014c92:	68fa      	ldr	r2, [r7, #12]
 8014c94:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8014c96:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8014c9c:	68fa      	ldr	r2, [r7, #12]
 8014c9e:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8014ca0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8014ca6:	68fa      	ldr	r2, [r7, #12]
 8014ca8:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8014caa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8014cb0:	68fa      	ldr	r2, [r7, #12]
 8014cb2:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8014cb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8014cbe:	f002 020f 	and.w	r2, r2, #15
 8014cc2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014cc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8014cca:	68fa      	ldr	r2, [r7, #12]
 8014ccc:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8014cce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8014cd8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8014cdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014cde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->ref_spad_man__ref_location & 0x3;
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8014ce8:	f002 0203 	and.w	r2, r2, #3
 8014cec:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014cee:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	8958      	ldrh	r0, [r3, #10]
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	3309      	adds	r3, #9
 8014cf8:	461a      	mov	r2, r3
 8014cfa:	2102      	movs	r1, #2
 8014cfc:	f7ff fa05 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	330b      	adds	r3, #11
 8014d0a:	461a      	mov	r2, r3
 8014d0c:	2102      	movs	r1, #2
 8014d0e:	f7ff fa47 	bl	80141a0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	330d      	adds	r3, #13
 8014d1c:	461a      	mov	r2, r3
 8014d1e:	2102      	movs	r1, #2
 8014d20:	f7ff fa3e 	bl	80141a0 <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	8a18      	ldrh	r0, [r3, #16]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	330f      	adds	r3, #15
 8014d2c:	461a      	mov	r2, r3
 8014d2e:	2102      	movs	r1, #2
 8014d30:	f7ff f9eb 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8014d3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d3e:	b218      	sxth	r0, r3
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	3311      	adds	r3, #17
 8014d44:	461a      	mov	r2, r3
 8014d46:	2102      	movs	r1, #2
 8014d48:	f7ff fa2a 	bl	80141a0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	3313      	adds	r3, #19
 8014d56:	461a      	mov	r2, r3
 8014d58:	2102      	movs	r1, #2
 8014d5a:	f7ff fa21 	bl	80141a0 <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	3315      	adds	r3, #21
 8014d68:	461a      	mov	r2, r3
 8014d6a:	2102      	movs	r1, #2
 8014d6c:	f7ff fa18 	bl	80141a0 <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8014d70:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d74:	4618      	mov	r0, r3
 8014d76:	3718      	adds	r7, #24
 8014d78:	46bd      	mov	sp, r7
 8014d7a:	bd80      	pop	{r7, pc}

08014d7c <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b086      	sub	sp, #24
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	4603      	mov	r3, r0
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	607a      	str	r2, [r7, #4]
 8014d88:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8014d8e:	89fb      	ldrh	r3, [r7, #14]
 8014d90:	2b16      	cmp	r3, #22
 8014d92:	d802      	bhi.n	8014d9a <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014d94:	f06f 0309 	mvn.w	r3, #9
 8014d98:	e079      	b.n	8014e8e <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8014d9a:	68bb      	ldr	r3, [r7, #8]
 8014d9c:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8014da2:	68bb      	ldr	r3, [r7, #8]
 8014da4:	785a      	ldrb	r2, [r3, #1]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	789a      	ldrb	r2, [r3, #2]
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8014db2:	68bb      	ldr	r3, [r7, #8]
 8014db4:	78da      	ldrb	r2, [r3, #3]
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	791a      	ldrb	r2, [r3, #4]
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	3305      	adds	r3, #5
 8014dc6:	781b      	ldrb	r3, [r3, #0]
 8014dc8:	f003 030f 	and.w	r3, r3, #15
 8014dcc:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	799a      	ldrb	r2, [r3, #6]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	3307      	adds	r3, #7
 8014dde:	781b      	ldrb	r3, [r3, #0]
 8014de0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014de4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	3308      	adds	r3, #8
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	f003 0303 	and.w	r3, r3, #3
 8014df4:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	3309      	adds	r3, #9
 8014dfe:	4619      	mov	r1, r3
 8014e00:	2002      	movs	r0, #2
 8014e02:	f7ff f9ad 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8014e06:	4603      	mov	r3, r0
 8014e08:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	330b      	adds	r3, #11
 8014e12:	4619      	mov	r1, r3
 8014e14:	2002      	movs	r0, #2
 8014e16:	f7ff f9ef 	bl	80141f8 <VL53L1_i2c_decode_int16_t>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	330d      	adds	r3, #13
 8014e26:	4619      	mov	r1, r3
 8014e28:	2002      	movs	r0, #2
 8014e2a:	f7ff f9e5 	bl	80141f8 <VL53L1_i2c_decode_int16_t>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8014e36:	68bb      	ldr	r3, [r7, #8]
 8014e38:	330f      	adds	r3, #15
 8014e3a:	4619      	mov	r1, r3
 8014e3c:	2002      	movs	r0, #2
 8014e3e:	f7ff f98f 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8014e42:	4603      	mov	r3, r0
 8014e44:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	3311      	adds	r3, #17
 8014e4e:	4619      	mov	r1, r3
 8014e50:	2002      	movs	r0, #2
 8014e52:	f7ff f9d1 	bl	80141f8 <VL53L1_i2c_decode_int16_t>
 8014e56:	4603      	mov	r3, r0
 8014e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014e5c:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8014e62:	68bb      	ldr	r3, [r7, #8]
 8014e64:	3313      	adds	r3, #19
 8014e66:	4619      	mov	r1, r3
 8014e68:	2002      	movs	r0, #2
 8014e6a:	f7ff f9c5 	bl	80141f8 <VL53L1_i2c_decode_int16_t>
 8014e6e:	4603      	mov	r3, r0
 8014e70:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8014e76:	68bb      	ldr	r3, [r7, #8]
 8014e78:	3315      	adds	r3, #21
 8014e7a:	4619      	mov	r1, r3
 8014e7c:	2002      	movs	r0, #2
 8014e7e:	f7ff f9bb 	bl	80141f8 <VL53L1_i2c_decode_int16_t>
 8014e82:	4603      	mov	r3, r0
 8014e84:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8014e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	3718      	adds	r7, #24
 8014e92:	46bd      	mov	sp, r7
 8014e94:	bd80      	pop	{r7, pc}

08014e96 <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8014e96:	b580      	push	{r7, lr}
 8014e98:	b088      	sub	sp, #32
 8014e9a:	af00      	add	r7, sp, #0
 8014e9c:	6078      	str	r0, [r7, #4]
 8014e9e:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8014ea4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d108      	bne.n	8014ebe <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8014eac:	f107 0208 	add.w	r2, r7, #8
 8014eb0:	2317      	movs	r3, #23
 8014eb2:	210d      	movs	r1, #13
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f7f3 feca 	bl	8008c4e <VL53L1_ReadMulti>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8014ebe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d108      	bne.n	8014ed8 <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8014ec6:	f107 0308 	add.w	r3, r7, #8
 8014eca:	683a      	ldr	r2, [r7, #0]
 8014ecc:	4619      	mov	r1, r3
 8014ece:	2017      	movs	r0, #23
 8014ed0:	f7ff ff54 	bl	8014d7c <VL53L1_i2c_decode_customer_nvm_managed>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8014ed8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3720      	adds	r7, #32
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}

08014ee4 <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	b086      	sub	sp, #24
 8014ee8:	af00      	add	r7, sp, #0
 8014eea:	60f8      	str	r0, [r7, #12]
 8014eec:	460b      	mov	r3, r1
 8014eee:	607a      	str	r2, [r7, #4]
 8014ef0:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8014ef6:	897b      	ldrh	r3, [r7, #10]
 8014ef8:	2b1f      	cmp	r3, #31
 8014efa:	d802      	bhi.n	8014f02 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8014efc:	f06f 0309 	mvn.w	r3, #9
 8014f00:	e0cf      	b.n	80150a2 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	881b      	ldrh	r3, [r3, #0]
 8014f06:	687a      	ldr	r2, [r7, #4]
 8014f08:	2102      	movs	r1, #2
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7ff f8fd 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
		pdata->debug__ctrl & 0x1;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8014f18:	f002 0201 	and.w	r2, r2, #1
 8014f1c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8014f1e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->test_mode__ctrl & 0xF;
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8014f28:	f002 020f 	and.w	r2, r2, #15
 8014f2c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8014f2e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->clk_gating__ctrl & 0xF;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8014f38:	f002 020f 	and.w	r2, r2, #15
 8014f3c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8014f3e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
		pdata->nvm_bist__ctrl & 0x1F;
 8014f40:	68fb      	ldr	r3, [r7, #12]
 8014f42:	795a      	ldrb	r2, [r3, #5]
	*(pbuffer +   5) =
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8014f48:	f002 021f 	and.w	r2, r2, #31
 8014f4c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8014f4e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8014f58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014f5c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8014f5e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->nvm_bist__start_address & 0x7F;
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8014f68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014f6c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8014f6e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
		pdata->host_if__status & 0x1;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	7a1a      	ldrb	r2, [r3, #8]
	*(pbuffer +   8) =
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8014f78:	f002 0201 	and.w	r2, r2, #1
 8014f7c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8014f7e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8014f88:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  10) =
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8014f92:	f002 0201 	and.w	r2, r2, #1
 8014f96:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8014f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->gpio_hv_pad__ctrl & 0x3;
 8014f9a:	68fb      	ldr	r3, [r7, #12]
 8014f9c:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  11) =
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8014fa2:	f002 0203 	and.w	r2, r2, #3
 8014fa6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8014fa8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  12) =
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8014fb2:	f002 021f 	and.w	r2, r2, #31
 8014fb6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8014fb8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->gpio__tio_hv_status & 0x3;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  13) =
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8014fc2:	f002 0203 	and.w	r2, r2, #3
 8014fc6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8014fc8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
		pdata->gpio__fio_hv_status & 0x3;
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  14) =
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8014fd2:	f002 0203 	and.w	r2, r2, #3
 8014fd6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 8014fd8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	7bda      	ldrb	r2, [r3, #15]
	*(pbuffer +  15) =
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8014fe2:	f002 0207 	and.w	r2, r2, #7
 8014fe6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 8014fe8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	7c1a      	ldrb	r2, [r3, #16]
	*(pbuffer +  16) =
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8014ff2:	f002 021f 	and.w	r2, r2, #31
 8014ff6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 8014ff8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	7c5a      	ldrb	r2, [r3, #17]
	*(pbuffer +  17) =
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8015002:	f002 0201 	and.w	r2, r2, #1
 8015006:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 8015008:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 801500e:	68fa      	ldr	r2, [r7, #12]
 8015010:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8015012:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 8015018:	68fa      	ldr	r2, [r7, #12]
 801501a:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 801501c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8015022:	68fa      	ldr	r2, [r7, #12]
 8015024:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 8015026:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 801502c:	68fa      	ldr	r2, [r7, #12]
 801502e:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8015030:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 8015036:	68fa      	ldr	r2, [r7, #12]
 8015038:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 801503a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8015040:	68fa      	ldr	r2, [r7, #12]
 8015042:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 8015044:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	8b18      	ldrh	r0, [r3, #24]
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	3318      	adds	r3, #24
 801504e:	461a      	mov	r2, r3
 8015050:	2102      	movs	r1, #2
 8015052:	f7ff f85a 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 801505a:	68fa      	ldr	r2, [r7, #12]
 801505c:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 801505e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 8015064:	68fa      	ldr	r2, [r7, #12]
 8015066:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 8015068:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
		pdata->algo__consistency_check__tolerance & 0xF;
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	7f1a      	ldrb	r2, [r3, #28]
	*(pbuffer +  28) =
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 8015072:	f002 020f 	and.w	r2, r2, #15
 8015076:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 8015078:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 8015082:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
		pdata->sd_config__reset_stages_msb & 0xF;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	7f9a      	ldrb	r2, [r3, #30]
	*(pbuffer +  30) =
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 801508c:	f002 020f 	and.w	r2, r2, #15
 8015090:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 8015092:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 8015098:	68fa      	ldr	r2, [r7, #12]
 801509a:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 801509c:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 801509e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150a2:	4618      	mov	r0, r3
 80150a4:	3718      	adds	r7, #24
 80150a6:	46bd      	mov	sp, r7
 80150a8:	bd80      	pop	{r7, pc}

080150aa <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80150aa:	b580      	push	{r7, lr}
 80150ac:	b086      	sub	sp, #24
 80150ae:	af00      	add	r7, sp, #0
 80150b0:	60f8      	str	r0, [r7, #12]
 80150b2:	460b      	mov	r3, r1
 80150b4:	607a      	str	r2, [r7, #4]
 80150b6:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80150b8:	2300      	movs	r3, #0
 80150ba:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 80150bc:	897b      	ldrh	r3, [r7, #10]
 80150be:	2b15      	cmp	r3, #21
 80150c0:	d802      	bhi.n	80150c8 <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80150c2:	f06f 0309 	mvn.w	r3, #9
 80150c6:	e070      	b.n	80151aa <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 80150d4:	68fa      	ldr	r2, [r7, #12]
 80150d6:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80150d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 80150de:	68fa      	ldr	r2, [r7, #12]
 80150e0:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 80150e2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->cal_config__vcsel_start & 0x7F;
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 80150ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80150f0:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 80150f2:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 80150f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80150fc:	b298      	uxth	r0, r3
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	3304      	adds	r3, #4
 8015102:	461a      	mov	r2, r3
 8015104:	2102      	movs	r1, #2
 8015106:	f7ff f800 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
		pdata->global_config__vcsel_width & 0x7F;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8015112:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8015116:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015118:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 801511e:	68fa      	ldr	r2, [r7, #12]
 8015120:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8015122:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 8015128:	68fa      	ldr	r2, [r7, #12]
 801512a:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 801512c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->phasecal_config__override & 0x1;
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8015136:	f002 0201 	and.w	r2, r2, #1
 801513a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 801513c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->dss_config__roi_mode_control & 0x7;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +  11) =
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8015146:	f002 0207 	and.w	r2, r2, #7
 801514a:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 801514c:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	8998      	ldrh	r0, [r3, #12]
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	330c      	adds	r3, #12
 8015156:	461a      	mov	r2, r3
 8015158:	2102      	movs	r1, #2
 801515a:	f7fe ffd6 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	89d8      	ldrh	r0, [r3, #14]
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	330e      	adds	r3, #14
 8015166:	461a      	mov	r2, r3
 8015168:	2102      	movs	r1, #2
 801516a:	f7fe ffce 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	8a18      	ldrh	r0, [r3, #16]
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	3310      	adds	r3, #16
 8015176:	461a      	mov	r2, r3
 8015178:	2102      	movs	r1, #2
 801517a:	f7fe ffc6 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 8015182:	68fa      	ldr	r2, [r7, #12]
 8015184:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8015186:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 801518c:	68fa      	ldr	r2, [r7, #12]
 801518e:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8015190:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 801519a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80151a0:	68fa      	ldr	r2, [r7, #12]
 80151a2:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80151a4:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80151a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80151aa:	4618      	mov	r0, r3
 80151ac:	3718      	adds	r7, #24
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}

080151b2 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80151b2:	b580      	push	{r7, lr}
 80151b4:	b086      	sub	sp, #24
 80151b6:	af00      	add	r7, sp, #0
 80151b8:	60f8      	str	r0, [r7, #12]
 80151ba:	460b      	mov	r3, r1
 80151bc:	607a      	str	r2, [r7, #4]
 80151be:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80151c0:	2300      	movs	r3, #0
 80151c2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 80151c4:	897b      	ldrh	r3, [r7, #10]
 80151c6:	2b16      	cmp	r3, #22
 80151c8:	d802      	bhi.n	80151d0 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80151ca:	f06f 0309 	mvn.w	r3, #9
 80151ce:	e06e      	b.n	80152ae <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	f003 030f 	and.w	r3, r3, #15
 80151d8:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 80151e6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 80151f0:	f002 020f 	and.w	r2, r2, #15
 80151f4:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 80151f6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 80151fc:	68fa      	ldr	r2, [r7, #12]
 80151fe:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8015200:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	791a      	ldrb	r2, [r3, #4]
	*(pbuffer +   4) =
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 801520a:	f002 020f 	and.w	r2, r2, #15
 801520e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8015210:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 8015216:	68fa      	ldr	r2, [r7, #12]
 8015218:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 801521a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->range_config__vcsel_period_a & 0x3F;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   6) =
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8015224:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8015228:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 801522a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   7) =
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8015234:	f002 020f 	and.w	r2, r2, #15
 8015238:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 801523a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8015240:	68fa      	ldr	r2, [r7, #12]
 8015242:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8015244:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->range_config__vcsel_period_b & 0x3F;
 8015246:	68fb      	ldr	r3, [r7, #12]
 8015248:	7a5a      	ldrb	r2, [r3, #9]
	*(pbuffer +   9) =
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 801524e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8015252:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8015254:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	8958      	ldrh	r0, [r3, #10]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	330a      	adds	r3, #10
 801525e:	461a      	mov	r2, r3
 8015260:	2102      	movs	r1, #2
 8015262:	f7fe ff52 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	8998      	ldrh	r0, [r3, #12]
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	330c      	adds	r3, #12
 801526e:	461a      	mov	r2, r3
 8015270:	2102      	movs	r1, #2
 8015272:	f7fe ff4a 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 801527a:	68fa      	ldr	r2, [r7, #12]
 801527c:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 801527e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 8015284:	68fa      	ldr	r2, [r7, #12]
 8015286:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 8015288:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	6918      	ldr	r0, [r3, #16]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	3312      	adds	r3, #18
 8015292:	461a      	mov	r2, r3
 8015294:	2104      	movs	r1, #4
 8015296:	f7fe ffd8 	bl	801424a <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
		pdata->system__fractional_enable & 0x1;
 801529a:	68fb      	ldr	r3, [r7, #12]
 801529c:	7d1a      	ldrb	r2, [r3, #20]
	*(pbuffer +  22) =
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80152a2:	f002 0201 	and.w	r2, r2, #1
 80152a6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80152a8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80152aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	3718      	adds	r7, #24
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}

080152b6 <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80152b6:	b580      	push	{r7, lr}
 80152b8:	b086      	sub	sp, #24
 80152ba:	af00      	add	r7, sp, #0
 80152bc:	60f8      	str	r0, [r7, #12]
 80152be:	460b      	mov	r3, r1
 80152c0:	607a      	str	r2, [r7, #4]
 80152c2:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80152c4:	2300      	movs	r3, #0
 80152c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 80152c8:	897b      	ldrh	r3, [r7, #10]
 80152ca:	2b11      	cmp	r3, #17
 80152cc:	d802      	bhi.n	80152d4 <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80152ce:	f06f 0309 	mvn.w	r3, #9
 80152d2:	e071      	b.n	80153b8 <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 80152d4:	68fb      	ldr	r3, [r7, #12]
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	f003 0303 	and.w	r3, r3, #3
 80152dc:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	8858      	ldrh	r0, [r3, #2]
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	3301      	adds	r3, #1
 80152ea:	461a      	mov	r2, r3
 80152ec:	2102      	movs	r1, #2
 80152ee:	f7fe ff0c 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	8898      	ldrh	r0, [r3, #4]
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	3303      	adds	r3, #3
 80152fa:	461a      	mov	r2, r3
 80152fc:	2102      	movs	r1, #2
 80152fe:	f7fe ff04 	bl	801410a <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	799a      	ldrb	r2, [r3, #6]
	*(pbuffer +   5) =
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 801530a:	f002 0201 	and.w	r2, r2, #1
 801530e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8015310:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
		pdata->system__seed_config & 0x7;
 8015312:	68fb      	ldr	r3, [r7, #12]
 8015314:	79da      	ldrb	r2, [r3, #7]
	*(pbuffer +   6) =
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 801531a:	f002 0207 	and.w	r2, r2, #7
 801531e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8015320:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 8015326:	68fa      	ldr	r2, [r7, #12]
 8015328:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 801532a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8015330:	68fa      	ldr	r2, [r7, #12]
 8015332:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8015334:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8015336:	68fb      	ldr	r3, [r7, #12]
 8015338:	7a9a      	ldrb	r2, [r3, #10]
	*(pbuffer +   9) =
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 801533e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8015342:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8015344:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8015346:	68fb      	ldr	r3, [r7, #12]
 8015348:	7ada      	ldrb	r2, [r3, #11]
	*(pbuffer +  10) =
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 801534e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8015352:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8015354:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
		pdata->system__grouped_parameter_hold_1 & 0x3;
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	7b1a      	ldrb	r2, [r3, #12]
	*(pbuffer +  11) =
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 801535e:	f002 0203 	and.w	r2, r2, #3
 8015362:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8015364:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
		pdata->sd_config__first_order_select & 0x3;
 8015366:	68fb      	ldr	r3, [r7, #12]
 8015368:	7b5a      	ldrb	r2, [r3, #13]
	*(pbuffer +  12) =
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 801536e:	f002 0203 	and.w	r2, r2, #3
 8015372:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8015374:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
		pdata->sd_config__quantifier & 0xF;
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	7b9a      	ldrb	r2, [r3, #14]
	*(pbuffer +  13) =
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 801537e:	f002 020f 	and.w	r2, r2, #15
 8015382:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 8015384:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 801538a:	68fa      	ldr	r2, [r7, #12]
 801538c:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 801538e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 8015394:	68fa      	ldr	r2, [r7, #12]
 8015396:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 8015398:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 801539e:	68fa      	ldr	r2, [r7, #12]
 80153a0:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80153a2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
		pdata->system__grouped_parameter_hold & 0x3;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	7c9a      	ldrb	r2, [r3, #18]
	*(pbuffer +  17) =
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80153ac:	f002 0203 	and.w	r2, r2, #3
 80153b0:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80153b2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80153b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153b8:	4618      	mov	r0, r3
 80153ba:	3718      	adds	r7, #24
 80153bc:	46bd      	mov	sp, r7
 80153be:	bd80      	pop	{r7, pc}

080153c0 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80153c0:	b480      	push	{r7}
 80153c2:	b087      	sub	sp, #28
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	60f8      	str	r0, [r7, #12]
 80153c8:	460b      	mov	r3, r1
 80153ca:	607a      	str	r2, [r7, #4]
 80153cc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80153ce:	2300      	movs	r3, #0
 80153d0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 80153d2:	897b      	ldrh	r3, [r7, #10]
 80153d4:	2b04      	cmp	r3, #4
 80153d6:	d802      	bhi.n	80153de <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80153d8:	f06f 0309 	mvn.w	r3, #9
 80153dc:	e025      	b.n	801542a <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	f003 0301 	and.w	r3, r3, #1
 80153e6:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
		pdata->system__stream_count_ctrl & 0x1;
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	785a      	ldrb	r2, [r3, #1]
	*(pbuffer +   1) =
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 80153f4:	f002 0201 	and.w	r2, r2, #1
 80153f8:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 80153fa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
		pdata->firmware__enable & 0x1;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	789a      	ldrb	r2, [r3, #2]
	*(pbuffer +   2) =
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8015404:	f002 0201 	and.w	r2, r2, #1
 8015408:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 801540a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
		pdata->system__interrupt_clear & 0x3;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	78da      	ldrb	r2, [r3, #3]
	*(pbuffer +   3) =
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8015414:	f002 0203 	and.w	r2, r2, #3
 8015418:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 801541a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8015420:	68fa      	ldr	r2, [r7, #12]
 8015422:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8015424:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8015426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801542a:	4618      	mov	r0, r3
 801542c:	371c      	adds	r7, #28
 801542e:	46bd      	mov	sp, r7
 8015430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015434:	4770      	bx	lr

08015436 <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b084      	sub	sp, #16
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
 801543e:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015440:	2300      	movs	r3, #0
 8015442:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8015444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d108      	bne.n	801545e <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 801544c:	f107 0308 	add.w	r3, r7, #8
 8015450:	461a      	mov	r2, r3
 8015452:	2105      	movs	r1, #5
 8015454:	6838      	ldr	r0, [r7, #0]
 8015456:	f7ff ffb3 	bl	80153c0 <VL53L1_i2c_encode_system_control>
 801545a:	4603      	mov	r3, r0
 801545c:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 801545e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d108      	bne.n	8015478 <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 8015466:	f107 0208 	add.w	r2, r7, #8
 801546a:	2305      	movs	r3, #5
 801546c:	2183      	movs	r1, #131	@ 0x83
 801546e:	6878      	ldr	r0, [r7, #4]
 8015470:	f7f3 fbc7 	bl	8008c02 <VL53L1_WriteMulti>
 8015474:	4603      	mov	r3, r0
 8015476:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 8015478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801547c:	4618      	mov	r0, r3
 801547e:	3710      	adds	r7, #16
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b086      	sub	sp, #24
 8015488:	af00      	add	r7, sp, #0
 801548a:	4603      	mov	r3, r0
 801548c:	60b9      	str	r1, [r7, #8]
 801548e:	607a      	str	r2, [r7, #4]
 8015490:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015492:	2300      	movs	r3, #0
 8015494:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 8015496:	89fb      	ldrh	r3, [r7, #14]
 8015498:	2b2b      	cmp	r3, #43	@ 0x2b
 801549a:	d802      	bhi.n	80154a2 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801549c:	f06f 0309 	mvn.w	r3, #9
 80154a0:	e0e2      	b.n	8015668 <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80154aa:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	785a      	ldrb	r2, [r3, #1]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	3302      	adds	r3, #2
 80154bc:	781b      	ldrb	r3, [r3, #0]
 80154be:	f003 030f 	and.w	r3, r3, #15
 80154c2:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 80154c8:	68bb      	ldr	r3, [r7, #8]
 80154ca:	78da      	ldrb	r2, [r3, #3]
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	3304      	adds	r3, #4
 80154d4:	4619      	mov	r1, r3
 80154d6:	2002      	movs	r0, #2
 80154d8:	f7fe fe42 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80154dc:	4603      	mov	r3, r0
 80154de:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 80154e4:	68bb      	ldr	r3, [r7, #8]
 80154e6:	3306      	adds	r3, #6
 80154e8:	4619      	mov	r1, r3
 80154ea:	2002      	movs	r0, #2
 80154ec:	f7fe fe38 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80154f0:	4603      	mov	r3, r0
 80154f2:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 80154f8:	68bb      	ldr	r3, [r7, #8]
 80154fa:	3308      	adds	r3, #8
 80154fc:	4619      	mov	r1, r3
 80154fe:	2002      	movs	r0, #2
 8015500:	f7fe fe2e 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015504:	4603      	mov	r3, r0
 8015506:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 801550c:	68bb      	ldr	r3, [r7, #8]
 801550e:	330a      	adds	r3, #10
 8015510:	4619      	mov	r1, r3
 8015512:	2002      	movs	r0, #2
 8015514:	f7fe fe24 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015518:	4603      	mov	r3, r0
 801551a:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8015520:	68bb      	ldr	r3, [r7, #8]
 8015522:	330c      	adds	r3, #12
 8015524:	4619      	mov	r1, r3
 8015526:	2002      	movs	r0, #2
 8015528:	f7fe fe1a 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 801552c:	4603      	mov	r3, r0
 801552e:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	330e      	adds	r3, #14
 8015538:	4619      	mov	r1, r3
 801553a:	2002      	movs	r0, #2
 801553c:	f7fe fe10 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015540:	4603      	mov	r3, r0
 8015542:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	3310      	adds	r3, #16
 801554c:	4619      	mov	r1, r3
 801554e:	2002      	movs	r0, #2
 8015550:	f7fe fe06 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015554:	4603      	mov	r3, r0
 8015556:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	3312      	adds	r3, #18
 8015560:	4619      	mov	r1, r3
 8015562:	2002      	movs	r0, #2
 8015564:	f7fe fdfc 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015568:	4603      	mov	r3, r0
 801556a:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 8015570:	68bb      	ldr	r3, [r7, #8]
 8015572:	3314      	adds	r3, #20
 8015574:	4619      	mov	r1, r3
 8015576:	2002      	movs	r0, #2
 8015578:	f7fe fdf2 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 801557c:	4603      	mov	r3, r0
 801557e:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	3316      	adds	r3, #22
 8015588:	4619      	mov	r1, r3
 801558a:	2002      	movs	r0, #2
 801558c:	f7fe fde8 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015590:	4603      	mov	r3, r0
 8015592:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8015598:	68bb      	ldr	r3, [r7, #8]
 801559a:	3318      	adds	r3, #24
 801559c:	4619      	mov	r1, r3
 801559e:	2002      	movs	r0, #2
 80155a0:	f7fe fdde 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80155a4:	4603      	mov	r3, r0
 80155a6:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	331a      	adds	r3, #26
 80155b0:	4619      	mov	r1, r3
 80155b2:	2002      	movs	r0, #2
 80155b4:	f7fe fdd4 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80155b8:	4603      	mov	r3, r0
 80155ba:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 80155c0:	68bb      	ldr	r3, [r7, #8]
 80155c2:	331c      	adds	r3, #28
 80155c4:	4619      	mov	r1, r3
 80155c6:	2002      	movs	r0, #2
 80155c8:	f7fe fdca 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80155cc:	4603      	mov	r3, r0
 80155ce:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	331e      	adds	r3, #30
 80155d8:	4619      	mov	r1, r3
 80155da:	2002      	movs	r0, #2
 80155dc:	f7fe fdc0 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80155e0:	4603      	mov	r3, r0
 80155e2:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 80155e8:	68bb      	ldr	r3, [r7, #8]
 80155ea:	3320      	adds	r3, #32
 80155ec:	4619      	mov	r1, r3
 80155ee:	2002      	movs	r0, #2
 80155f0:	f7fe fdb6 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80155f4:	4603      	mov	r3, r0
 80155f6:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 80155fc:	68bb      	ldr	r3, [r7, #8]
 80155fe:	3322      	adds	r3, #34	@ 0x22
 8015600:	4619      	mov	r1, r3
 8015602:	2002      	movs	r0, #2
 8015604:	f7fe fdac 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015608:	4603      	mov	r3, r0
 801560a:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	845a      	strh	r2, [r3, #34]	@ 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8015610:	68bb      	ldr	r3, [r7, #8]
 8015612:	3324      	adds	r3, #36	@ 0x24
 8015614:	4619      	mov	r1, r3
 8015616:	2002      	movs	r0, #2
 8015618:	f7fe fda2 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 801561c:	4603      	mov	r3, r0
 801561e:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	849a      	strh	r2, [r3, #36]	@ 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	3326      	adds	r3, #38	@ 0x26
 8015628:	4619      	mov	r1, r3
 801562a:	2002      	movs	r0, #2
 801562c:	f7fe fd98 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015630:	4603      	mov	r3, r0
 8015632:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	84da      	strh	r2, [r3, #38]	@ 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	3328      	adds	r3, #40	@ 0x28
 801563c:	4619      	mov	r1, r3
 801563e:	2002      	movs	r0, #2
 8015640:	f7fe fd8e 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015644:	4603      	mov	r3, r0
 8015646:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	851a      	strh	r2, [r3, #40]	@ 0x28
	pdata->result__spare_3_sd1 =
 801564c:	68bb      	ldr	r3, [r7, #8]
 801564e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 8015664:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015668:	4618      	mov	r0, r3
 801566a:	3718      	adds	r7, #24
 801566c:	46bd      	mov	sp, r7
 801566e:	bd80      	pop	{r7, pc}

08015670 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b086      	sub	sp, #24
 8015674:	af00      	add	r7, sp, #0
 8015676:	4603      	mov	r3, r0
 8015678:	60b9      	str	r1, [r7, #8]
 801567a:	607a      	str	r2, [r7, #4]
 801567c:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 801567e:	2300      	movs	r3, #0
 8015680:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 8015682:	89fb      	ldrh	r3, [r7, #14]
 8015684:	2b20      	cmp	r3, #32
 8015686:	d802      	bhi.n	801568e <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015688:	f06f 0309 	mvn.w	r3, #9
 801568c:	e04d      	b.n	801572a <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 801568e:	68b9      	ldr	r1, [r7, #8]
 8015690:	2004      	movs	r0, #4
 8015692:	f7fe fe04 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 8015696:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	3304      	adds	r3, #4
 80156a0:	4619      	mov	r1, r3
 80156a2:	2004      	movs	r0, #4
 80156a4:	f7fe fdfb 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 80156a8:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80156ae:	68bb      	ldr	r3, [r7, #8]
 80156b0:	3308      	adds	r3, #8
 80156b2:	4619      	mov	r1, r3
 80156b4:	2004      	movs	r0, #4
 80156b6:	f7fe fe0f 	bl	80142d8 <VL53L1_i2c_decode_int32_t>
 80156ba:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 80156c0:	68bb      	ldr	r3, [r7, #8]
 80156c2:	330c      	adds	r3, #12
 80156c4:	4619      	mov	r1, r3
 80156c6:	2004      	movs	r0, #4
 80156c8:	f7fe fde9 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 80156cc:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	3310      	adds	r3, #16
 80156d6:	4619      	mov	r1, r3
 80156d8:	2004      	movs	r0, #4
 80156da:	f7fe fde0 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 80156de:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	3314      	adds	r3, #20
 80156e8:	4619      	mov	r1, r3
 80156ea:	2004      	movs	r0, #4
 80156ec:	f7fe fdd7 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 80156f0:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 80156f6:	68bb      	ldr	r3, [r7, #8]
 80156f8:	3318      	adds	r3, #24
 80156fa:	4619      	mov	r1, r3
 80156fc:	2004      	movs	r0, #4
 80156fe:	f7fe fdeb 	bl	80142d8 <VL53L1_i2c_decode_int32_t>
 8015702:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	331c      	adds	r3, #28
 801570c:	4619      	mov	r1, r3
 801570e:	2004      	movs	r0, #4
 8015710:	f7fe fdc5 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 8015714:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 8015726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3718      	adds	r7, #24
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}

08015732 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8015732:	b580      	push	{r7, lr}
 8015734:	b086      	sub	sp, #24
 8015736:	af00      	add	r7, sp, #0
 8015738:	4603      	mov	r3, r0
 801573a:	60b9      	str	r1, [r7, #8]
 801573c:	607a      	str	r2, [r7, #4]
 801573e:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015740:	2300      	movs	r3, #0
 8015742:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 8015744:	89fb      	ldrh	r3, [r7, #14]
 8015746:	2b37      	cmp	r3, #55	@ 0x37
 8015748:	d802      	bhi.n	8015750 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 801574a:	f06f 0309 	mvn.w	r3, #9
 801574e:	e15e      	b.n	8015a0e <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8015750:	68b9      	ldr	r1, [r7, #8]
 8015752:	2002      	movs	r0, #2
 8015754:	f7fe fd04 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015758:	4603      	mov	r3, r0
 801575a:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	3302      	adds	r3, #2
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801576a:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 8015770:	68bb      	ldr	r3, [r7, #8]
 8015772:	3303      	adds	r3, #3
 8015774:	781b      	ldrb	r3, [r3, #0]
 8015776:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801577a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	3304      	adds	r3, #4
 8015784:	781b      	ldrb	r3, [r3, #0]
 8015786:	f003 0303 	and.w	r3, r3, #3
 801578a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 8015790:	68bb      	ldr	r3, [r7, #8]
 8015792:	3305      	adds	r3, #5
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	f003 0301 	and.w	r3, r3, #1
 801579a:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	3306      	adds	r3, #6
 80157a4:	781b      	ldrb	r3, [r3, #0]
 80157a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80157aa:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80157b0:	68bb      	ldr	r3, [r7, #8]
 80157b2:	3307      	adds	r3, #7
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80157ba:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	3308      	adds	r3, #8
 80157c4:	4619      	mov	r1, r3
 80157c6:	2002      	movs	r0, #2
 80157c8:	f7fe fcca 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 80157cc:	4603      	mov	r3, r0
 80157ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80157d2:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	330a      	adds	r3, #10
 80157dc:	781b      	ldrb	r3, [r3, #0]
 80157de:	f003 0303 	and.w	r3, r3, #3
 80157e2:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	330b      	adds	r3, #11
 80157ec:	781b      	ldrb	r3, [r3, #0]
 80157ee:	f003 0303 	and.w	r3, r3, #3
 80157f2:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 80157f8:	68bb      	ldr	r3, [r7, #8]
 80157fa:	330c      	adds	r3, #12
 80157fc:	781b      	ldrb	r3, [r3, #0]
 80157fe:	f003 030f 	and.w	r3, r3, #15
 8015802:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	330d      	adds	r3, #13
 801580c:	781b      	ldrb	r3, [r3, #0]
 801580e:	f003 0307 	and.w	r3, r3, #7
 8015812:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	330e      	adds	r3, #14
 801581c:	781b      	ldrb	r3, [r3, #0]
 801581e:	f003 0301 	and.w	r3, r3, #1
 8015822:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	330f      	adds	r3, #15
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	f003 0303 	and.w	r3, r3, #3
 8015832:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	7c1a      	ldrb	r2, [r3, #16]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8015840:	68bb      	ldr	r3, [r7, #8]
 8015842:	7c5a      	ldrb	r2, [r3, #17]
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	3312      	adds	r3, #18
 801584c:	4619      	mov	r1, r3
 801584e:	2002      	movs	r0, #2
 8015850:	f7fe fc86 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015854:	4603      	mov	r3, r0
 8015856:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801585a:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	3316      	adds	r3, #22
 8015864:	4619      	mov	r1, r3
 8015866:	2002      	movs	r0, #2
 8015868:	f7fe fc7a 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 801586c:	4603      	mov	r3, r0
 801586e:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	3318      	adds	r3, #24
 8015878:	4619      	mov	r1, r3
 801587a:	2002      	movs	r0, #2
 801587c:	f7fe fc70 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015880:	4603      	mov	r3, r0
 8015882:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 8015888:	68bb      	ldr	r3, [r7, #8]
 801588a:	331a      	adds	r3, #26
 801588c:	781b      	ldrb	r3, [r3, #0]
 801588e:	f003 0301 	and.w	r3, r3, #1
 8015892:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 8015898:	68bb      	ldr	r3, [r7, #8]
 801589a:	331b      	adds	r3, #27
 801589c:	781b      	ldrb	r3, [r3, #0]
 801589e:	f003 0307 	and.w	r3, r3, #7
 80158a2:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	7f1a      	ldrb	r2, [r3, #28]
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	7f5a      	ldrb	r2, [r3, #29]
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	331e      	adds	r3, #30
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80158c2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	331f      	adds	r3, #31
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80158d2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	3320      	adds	r3, #32
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	f003 0303 	and.w	r3, r3, #3
 80158e2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	3321      	adds	r3, #33	@ 0x21
 80158ec:	781b      	ldrb	r3, [r3, #0]
 80158ee:	f003 030f 	and.w	r3, r3, #15
 80158f2:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 80158f8:	68bb      	ldr	r3, [r7, #8]
 80158fa:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 8015904:	68bb      	ldr	r3, [r7, #8]
 8015906:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8015910:	68bb      	ldr	r3, [r7, #8]
 8015912:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	3325      	adds	r3, #37	@ 0x25
 8015920:	781b      	ldrb	r3, [r3, #0]
 8015922:	f003 0301 	and.w	r3, r3, #1
 8015926:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 801592e:	68bb      	ldr	r3, [r7, #8]
 8015930:	3326      	adds	r3, #38	@ 0x26
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	f003 0303 	and.w	r3, r3, #3
 8015938:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	3327      	adds	r3, #39	@ 0x27
 8015944:	781b      	ldrb	r3, [r3, #0]
 8015946:	f003 031f 	and.w	r3, r3, #31
 801594a:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	3328      	adds	r3, #40	@ 0x28
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	f003 031f 	and.w	r3, r3, #31
 801595c:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 8015964:	68bb      	ldr	r3, [r7, #8]
 8015966:	3329      	adds	r3, #41	@ 0x29
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	f003 031f 	and.w	r3, r3, #31
 801596e:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 8015976:	68bb      	ldr	r3, [r7, #8]
 8015978:	332a      	adds	r3, #42	@ 0x2a
 801597a:	781b      	ldrb	r3, [r3, #0]
 801597c:	f003 0301 	and.w	r3, r3, #1
 8015980:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	332b      	adds	r3, #43	@ 0x2b
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	f003 0301 	and.w	r3, r3, #1
 8015992:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 801599a:	68bb      	ldr	r3, [r7, #8]
 801599c:	332c      	adds	r3, #44	@ 0x2c
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	f003 0303 	and.w	r3, r3, #3
 80159a4:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	332d      	adds	r3, #45	@ 0x2d
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80159b6:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	332e      	adds	r3, #46	@ 0x2e
 80159c2:	4619      	mov	r1, r3
 80159c4:	2004      	movs	r0, #4
 80159c6:	f7fe fc6a 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 80159ca:	4603      	mov	r3, r0
 80159cc:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 80159d4:	68bb      	ldr	r3, [r7, #8]
 80159d6:	3332      	adds	r3, #50	@ 0x32
 80159d8:	4619      	mov	r1, r3
 80159da:	2004      	movs	r0, #4
 80159dc:	f7fe fc5f 	bl	801429e <VL53L1_i2c_decode_uint32_t>
 80159e0:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	631a      	str	r2, [r3, #48]	@ 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 80159e6:	68bb      	ldr	r3, [r7, #8]
 80159e8:	3336      	adds	r3, #54	@ 0x36
 80159ea:	781b      	ldrb	r3, [r3, #0]
 80159ec:	f003 0301 	and.w	r3, r3, #1
 80159f0:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	3337      	adds	r3, #55	@ 0x37
 80159fc:	781b      	ldrb	r3, [r3, #0]
 80159fe:	f003 0301 	and.w	r3, r3, #1
 8015a02:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	LOG_FUNCTION_END(status);

	return status;
 8015a0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015a0e:	4618      	mov	r0, r3
 8015a10:	3718      	adds	r7, #24
 8015a12:	46bd      	mov	sp, r7
 8015a14:	bd80      	pop	{r7, pc}

08015a16 <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015a16:	b580      	push	{r7, lr}
 8015a18:	b086      	sub	sp, #24
 8015a1a:	af00      	add	r7, sp, #0
 8015a1c:	4603      	mov	r3, r0
 8015a1e:	60b9      	str	r1, [r7, #8]
 8015a20:	607a      	str	r2, [r7, #4]
 8015a22:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015a24:	2300      	movs	r3, #0
 8015a26:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8015a28:	89fb      	ldrh	r3, [r7, #14]
 8015a2a:	2b30      	cmp	r3, #48	@ 0x30
 8015a2c:	d802      	bhi.n	8015a34 <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8015a2e:	f06f 0309 	mvn.w	r3, #9
 8015a32:	e112      	b.n	8015c5a <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8015a34:	68bb      	ldr	r3, [r7, #8]
 8015a36:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	785a      	ldrb	r2, [r3, #1]
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8015a44:	68bb      	ldr	r3, [r7, #8]
 8015a46:	789a      	ldrb	r2, [r3, #2]
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8015a4c:	68bb      	ldr	r3, [r7, #8]
 8015a4e:	3303      	adds	r3, #3
 8015a50:	4619      	mov	r1, r3
 8015a52:	2002      	movs	r0, #2
 8015a54:	f7fe fb84 	bl	8014160 <VL53L1_i2c_decode_uint16_t>
 8015a58:	4603      	mov	r3, r0
 8015a5a:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	3305      	adds	r3, #5
 8015a64:	781b      	ldrb	r3, [r3, #0]
 8015a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015a6a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	3306      	adds	r3, #6
 8015a74:	781b      	ldrb	r3, [r3, #0]
 8015a76:	f003 0307 	and.w	r3, r3, #7
 8015a7a:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8015a80:	68bb      	ldr	r3, [r7, #8]
 8015a82:	3307      	adds	r3, #7
 8015a84:	781b      	ldrb	r3, [r3, #0]
 8015a86:	f003 0307 	and.w	r3, r3, #7
 8015a8a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8015a90:	68bb      	ldr	r3, [r7, #8]
 8015a92:	3308      	adds	r3, #8
 8015a94:	781b      	ldrb	r3, [r3, #0]
 8015a96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015a9a:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	3309      	adds	r3, #9
 8015aa4:	781b      	ldrb	r3, [r3, #0]
 8015aa6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015aaa:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	330a      	adds	r3, #10
 8015ab4:	781b      	ldrb	r3, [r3, #0]
 8015ab6:	f003 0301 	and.w	r3, r3, #1
 8015aba:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	330b      	adds	r3, #11
 8015ac4:	781b      	ldrb	r3, [r3, #0]
 8015ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8015aca:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8015ad0:	68bb      	ldr	r3, [r7, #8]
 8015ad2:	330c      	adds	r3, #12
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	f003 0301 	and.w	r3, r3, #1
 8015ada:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	330d      	adds	r3, #13
 8015ae4:	781b      	ldrb	r3, [r3, #0]
 8015ae6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015aea:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	330e      	adds	r3, #14
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8015afa:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	7bda      	ldrb	r2, [r3, #15]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	7c1a      	ldrb	r2, [r3, #16]
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8015b10:	68bb      	ldr	r3, [r7, #8]
 8015b12:	7c5a      	ldrb	r2, [r3, #17]
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8015b18:	68bb      	ldr	r3, [r7, #8]
 8015b1a:	7c9a      	ldrb	r2, [r3, #18]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	7cda      	ldrb	r2, [r3, #19]
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	7d1a      	ldrb	r2, [r3, #20]
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8015b30:	68bb      	ldr	r3, [r7, #8]
 8015b32:	7d5a      	ldrb	r2, [r3, #21]
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	7d9a      	ldrb	r2, [r3, #22]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	7dda      	ldrb	r2, [r3, #23]
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	7e1a      	ldrb	r2, [r3, #24]
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	7e5a      	ldrb	r2, [r3, #25]
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	7e9a      	ldrb	r2, [r3, #26]
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	7eda      	ldrb	r2, [r3, #27]
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8015b68:	68bb      	ldr	r3, [r7, #8]
 8015b6a:	7f1a      	ldrb	r2, [r3, #28]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8015b70:	68bb      	ldr	r3, [r7, #8]
 8015b72:	7f5a      	ldrb	r2, [r3, #29]
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	7f9a      	ldrb	r2, [r3, #30]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	7fda      	ldrb	r2, [r3, #31]
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8015b8a:	68bb      	ldr	r3, [r7, #8]
 8015b8c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8015b96:	68bb      	ldr	r3, [r7, #8]
 8015b98:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8015ba2:	68bb      	ldr	r3, [r7, #8]
 8015ba4:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8015bae:	68bb      	ldr	r3, [r7, #8]
 8015bb0:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8015bba:	68bb      	ldr	r3, [r7, #8]
 8015bbc:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8015bc6:	68bb      	ldr	r3, [r7, #8]
 8015bc8:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8015bd2:	68bb      	ldr	r3, [r7, #8]
 8015bd4:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8015bf6:	68bb      	ldr	r3, [r7, #8]
 8015bf8:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8015c02:	68bb      	ldr	r3, [r7, #8]
 8015c04:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8015c1a:	68bb      	ldr	r3, [r7, #8]
 8015c1c:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8015c26:	68bb      	ldr	r3, [r7, #8]
 8015c28:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8015c32:	68bb      	ldr	r3, [r7, #8]
 8015c34:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8015c3e:	68bb      	ldr	r3, [r7, #8]
 8015c40:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8015c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	3718      	adds	r7, #24
 8015c5e:	46bd      	mov	sp, r7
 8015c60:	bd80      	pop	{r7, pc}

08015c62 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8015c62:	b580      	push	{r7, lr}
 8015c64:	b090      	sub	sp, #64	@ 0x40
 8015c66:	af00      	add	r7, sp, #0
 8015c68:	6078      	str	r0, [r7, #4]
 8015c6a:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8015c72:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d10a      	bne.n	8015c90 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8015c7a:	f107 020c 	add.w	r2, r7, #12
 8015c7e:	2331      	movs	r3, #49	@ 0x31
 8015c80:	f240 110f 	movw	r1, #271	@ 0x10f
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f7f2 ffe2 	bl	8008c4e <VL53L1_ReadMulti>
 8015c8a:	4603      	mov	r3, r0
 8015c8c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8015c90:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d109      	bne.n	8015cac <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8015c98:	f107 030c 	add.w	r3, r7, #12
 8015c9c:	683a      	ldr	r2, [r7, #0]
 8015c9e:	4619      	mov	r1, r3
 8015ca0:	2031      	movs	r0, #49	@ 0x31
 8015ca2:	f7ff feb8 	bl	8015a16 <VL53L1_i2c_decode_nvm_copy_data>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8015cac:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	3740      	adds	r7, #64	@ 0x40
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}

08015cb8 <VL53L1_is_new_data_ready>:


VL53L1_Error VL53L1_is_new_data_ready(
	VL53L1_DEV     Dev,
	uint8_t       *pready)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b086      	sub	sp, #24
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
	 * Determines if new range data is ready by reading bit 0 of
	 * VL53L1_GPIO__TIO_HV_STATUS to determine the current state
	 * of output interrupt pin
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	75bb      	strb	r3, [r7, #22]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	613b      	str	r3, [r7, #16]

	uint8_t  gpio__mux_active_high_hv = 0;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	73fb      	strb	r3, [r7, #15]
	uint8_t  gpio__tio_hv_status      = 0;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	73bb      	strb	r3, [r7, #14]
	uint8_t  interrupt_ready          = 0;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	gpio__mux_active_high_hv =
			pdev->stat_cfg.gpio_hv_mux__ctrl &
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	f893 3170 	ldrb.w	r3, [r3, #368]	@ 0x170
	gpio__mux_active_high_hv =
 8015cdc:	f003 0310 	and.w	r3, r3, #16
 8015ce0:	73fb      	strb	r3, [r7, #15]
			VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_MASK;

	if (gpio__mux_active_high_hv == VL53L1_DEVICEINTERRUPTLEVEL_ACTIVE_HIGH)
 8015ce2:	7bfb      	ldrb	r3, [r7, #15]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d102      	bne.n	8015cee <VL53L1_is_new_data_ready+0x36>
		interrupt_ready = 0x01;
 8015ce8:	2301      	movs	r3, #1
 8015cea:	75fb      	strb	r3, [r7, #23]
 8015cec:	e001      	b.n	8015cf2 <VL53L1_is_new_data_ready+0x3a>
	else
		interrupt_ready = 0x00;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	75fb      	strb	r3, [r7, #23]

	/* read current range interrupt state */

	status = VL53L1_RdByte(
 8015cf2:	f107 030e 	add.w	r3, r7, #14
 8015cf6:	461a      	mov	r2, r3
 8015cf8:	2131      	movs	r1, #49	@ 0x31
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f7f2 fff2 	bl	8008ce4 <VL53L1_RdByte>
 8015d00:	4603      	mov	r3, r0
 8015d02:	75bb      	strb	r3, [r7, #22]
					VL53L1_GPIO__TIO_HV_STATUS,
					&gpio__tio_hv_status);

	/* set *pready = 1 if new range data ready complete zero otherwise */

	if ((gpio__tio_hv_status & 0x01) == interrupt_ready)
 8015d04:	7bbb      	ldrb	r3, [r7, #14]
 8015d06:	f003 0201 	and.w	r2, r3, #1
 8015d0a:	7dfb      	ldrb	r3, [r7, #23]
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d103      	bne.n	8015d18 <VL53L1_is_new_data_ready+0x60>
		*pready = 0x01;
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	2201      	movs	r2, #1
 8015d14:	701a      	strb	r2, [r3, #0]
 8015d16:	e002      	b.n	8015d1e <VL53L1_is_new_data_ready+0x66>
	else
		*pready = 0x00;
 8015d18:	683b      	ldr	r3, [r7, #0]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8015d1e:	f997 3016 	ldrsb.w	r3, [r7, #22]
}
 8015d22:	4618      	mov	r0, r3
 8015d24:	3718      	adds	r7, #24
 8015d26:	46bd      	mov	sp, r7
 8015d28:	bd80      	pop	{r7, pc}
	...

08015d2c <arm_mat_trans_f32>:
 8015d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d30:	8802      	ldrh	r2, [r0, #0]
 8015d32:	884b      	ldrh	r3, [r1, #2]
 8015d34:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8015d38:	684f      	ldr	r7, [r1, #4]
 8015d3a:	8840      	ldrh	r0, [r0, #2]
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	b083      	sub	sp, #12
 8015d40:	d14c      	bne.n	8015ddc <arm_mat_trans_f32+0xb0>
 8015d42:	f8b1 e000 	ldrh.w	lr, [r1]
 8015d46:	4586      	cmp	lr, r0
 8015d48:	d148      	bne.n	8015ddc <arm_mat_trans_f32+0xb0>
 8015d4a:	ea4f 089e 	mov.w	r8, lr, lsr #2
 8015d4e:	009c      	lsls	r4, r3, #2
 8015d50:	f00e 0e03 	and.w	lr, lr, #3
 8015d54:	fb08 f904 	mul.w	r9, r8, r4
 8015d58:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8015d5c:	011d      	lsls	r5, r3, #4
 8015d5e:	00db      	lsls	r3, r3, #3
 8015d60:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8015d64:	eb07 0a04 	add.w	sl, r7, r4
 8015d68:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8015d6c:	9201      	str	r2, [sp, #4]
 8015d6e:	9300      	str	r3, [sp, #0]
 8015d70:	463b      	mov	r3, r7
 8015d72:	f1b8 0f00 	cmp.w	r8, #0
 8015d76:	d01d      	beq.n	8015db4 <arm_mat_trans_f32+0x88>
 8015d78:	9900      	ldr	r1, [sp, #0]
 8015d7a:	f10c 0210 	add.w	r2, ip, #16
 8015d7e:	4439      	add	r1, r7
 8015d80:	4640      	mov	r0, r8
 8015d82:	f852 6c10 	ldr.w	r6, [r2, #-16]
 8015d86:	601e      	str	r6, [r3, #0]
 8015d88:	ed52 7a03 	vldr	s15, [r2, #-12]
 8015d8c:	191e      	adds	r6, r3, r4
 8015d8e:	edc6 7a00 	vstr	s15, [r6]
 8015d92:	f852 6c08 	ldr.w	r6, [r2, #-8]
 8015d96:	600e      	str	r6, [r1, #0]
 8015d98:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015d9c:	190e      	adds	r6, r1, r4
 8015d9e:	3801      	subs	r0, #1
 8015da0:	442b      	add	r3, r5
 8015da2:	f102 0210 	add.w	r2, r2, #16
 8015da6:	edc6 7a00 	vstr	s15, [r6]
 8015daa:	4429      	add	r1, r5
 8015dac:	d1e9      	bne.n	8015d82 <arm_mat_trans_f32+0x56>
 8015dae:	44dc      	add	ip, fp
 8015db0:	eb09 0307 	add.w	r3, r9, r7
 8015db4:	f1be 0f00 	cmp.w	lr, #0
 8015db8:	d009      	beq.n	8015dce <arm_mat_trans_f32+0xa2>
 8015dba:	4672      	mov	r2, lr
 8015dbc:	4661      	mov	r1, ip
 8015dbe:	f851 0b04 	ldr.w	r0, [r1], #4
 8015dc2:	6018      	str	r0, [r3, #0]
 8015dc4:	3a01      	subs	r2, #1
 8015dc6:	4423      	add	r3, r4
 8015dc8:	d1f9      	bne.n	8015dbe <arm_mat_trans_f32+0x92>
 8015dca:	9b01      	ldr	r3, [sp, #4]
 8015dcc:	449c      	add	ip, r3
 8015dce:	3704      	adds	r7, #4
 8015dd0:	4557      	cmp	r7, sl
 8015dd2:	d1cd      	bne.n	8015d70 <arm_mat_trans_f32+0x44>
 8015dd4:	2000      	movs	r0, #0
 8015dd6:	b003      	add	sp, #12
 8015dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ddc:	f06f 0002 	mvn.w	r0, #2
 8015de0:	e7f9      	b.n	8015dd6 <arm_mat_trans_f32+0xaa>
 8015de2:	bf00      	nop

08015de4 <arm_mat_scale_f32>:
 8015de4:	b470      	push	{r4, r5, r6}
 8015de6:	e9d1 3500 	ldrd	r3, r5, [r1]
 8015dea:	6802      	ldr	r2, [r0, #0]
 8015dec:	6846      	ldr	r6, [r0, #4]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d147      	bne.n	8015e82 <arm_mat_scale_f32+0x9e>
 8015df2:	8803      	ldrh	r3, [r0, #0]
 8015df4:	8840      	ldrh	r0, [r0, #2]
 8015df6:	fb00 f003 	mul.w	r0, r0, r3
 8015dfa:	0884      	lsrs	r4, r0, #2
 8015dfc:	d025      	beq.n	8015e4a <arm_mat_scale_f32+0x66>
 8015dfe:	f106 0210 	add.w	r2, r6, #16
 8015e02:	f105 0310 	add.w	r3, r5, #16
 8015e06:	4621      	mov	r1, r4
 8015e08:	ed52 7a04 	vldr	s15, [r2, #-16]
 8015e0c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e10:	3901      	subs	r1, #1
 8015e12:	ed43 7a04 	vstr	s15, [r3, #-16]
 8015e16:	ed52 7a03 	vldr	s15, [r2, #-12]
 8015e1a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e1e:	f102 0210 	add.w	r2, r2, #16
 8015e22:	ed43 7a03 	vstr	s15, [r3, #-12]
 8015e26:	ed52 7a06 	vldr	s15, [r2, #-24]	@ 0xffffffe8
 8015e2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e2e:	f103 0310 	add.w	r3, r3, #16
 8015e32:	ed43 7a06 	vstr	s15, [r3, #-24]	@ 0xffffffe8
 8015e36:	ed52 7a05 	vldr	s15, [r2, #-20]	@ 0xffffffec
 8015e3a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e3e:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8015e42:	d1e1      	bne.n	8015e08 <arm_mat_scale_f32+0x24>
 8015e44:	0124      	lsls	r4, r4, #4
 8015e46:	4426      	add	r6, r4
 8015e48:	4425      	add	r5, r4
 8015e4a:	f010 0003 	ands.w	r0, r0, #3
 8015e4e:	d015      	beq.n	8015e7c <arm_mat_scale_f32+0x98>
 8015e50:	edd6 7a00 	vldr	s15, [r6]
 8015e54:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e58:	3801      	subs	r0, #1
 8015e5a:	edc5 7a00 	vstr	s15, [r5]
 8015e5e:	d00d      	beq.n	8015e7c <arm_mat_scale_f32+0x98>
 8015e60:	edd6 7a01 	vldr	s15, [r6, #4]
 8015e64:	ee67 7a80 	vmul.f32	s15, s15, s0
 8015e68:	2801      	cmp	r0, #1
 8015e6a:	edc5 7a01 	vstr	s15, [r5, #4]
 8015e6e:	d005      	beq.n	8015e7c <arm_mat_scale_f32+0x98>
 8015e70:	edd6 7a02 	vldr	s15, [r6, #8]
 8015e74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015e78:	ed85 0a02 	vstr	s0, [r5, #8]
 8015e7c:	2000      	movs	r0, #0
 8015e7e:	bc70      	pop	{r4, r5, r6}
 8015e80:	4770      	bx	lr
 8015e82:	f06f 0002 	mvn.w	r0, #2
 8015e86:	e7fa      	b.n	8015e7e <arm_mat_scale_f32+0x9a>

08015e88 <arm_mat_mult_f32>:
 8015e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e8c:	8845      	ldrh	r5, [r0, #2]
 8015e8e:	880b      	ldrh	r3, [r1, #0]
 8015e90:	8806      	ldrh	r6, [r0, #0]
 8015e92:	6847      	ldr	r7, [r0, #4]
 8015e94:	6854      	ldr	r4, [r2, #4]
 8015e96:	6848      	ldr	r0, [r1, #4]
 8015e98:	b08b      	sub	sp, #44	@ 0x2c
 8015e9a:	42ab      	cmp	r3, r5
 8015e9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8015e9e:	9604      	str	r6, [sp, #16]
 8015ea0:	8849      	ldrh	r1, [r1, #2]
 8015ea2:	f040 808a 	bne.w	8015fba <arm_mat_mult_f32+0x132>
 8015ea6:	8815      	ldrh	r5, [r2, #0]
 8015ea8:	42b5      	cmp	r5, r6
 8015eaa:	f040 8086 	bne.w	8015fba <arm_mat_mult_f32+0x132>
 8015eae:	8852      	ldrh	r2, [r2, #2]
 8015eb0:	428a      	cmp	r2, r1
 8015eb2:	f040 8082 	bne.w	8015fba <arm_mat_mult_f32+0x132>
 8015eb6:	ea4f 0893 	mov.w	r8, r3, lsr #2
 8015eba:	1d01      	adds	r1, r0, #4
 8015ebc:	0116      	lsls	r6, r2, #4
 8015ebe:	9108      	str	r1, [sp, #32]
 8015ec0:	eb07 1108 	add.w	r1, r7, r8, lsl #4
 8015ec4:	ebc2 7c82 	rsb	ip, r2, r2, lsl #30
 8015ec8:	9101      	str	r1, [sp, #4]
 8015eca:	fb06 f108 	mul.w	r1, r6, r8
 8015ece:	0095      	lsls	r5, r2, #2
 8015ed0:	9103      	str	r1, [sp, #12]
 8015ed2:	00d2      	lsls	r2, r2, #3
 8015ed4:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8015ed8:	f003 0903 	and.w	r9, r3, #3
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	f107 0b10 	add.w	fp, r7, #16
 8015ee2:	eb04 0a05 	add.w	sl, r4, r5
 8015ee6:	9107      	str	r1, [sp, #28]
 8015ee8:	9202      	str	r2, [sp, #8]
 8015eea:	9306      	str	r3, [sp, #24]
 8015eec:	f1ab 0310 	sub.w	r3, fp, #16
 8015ef0:	9305      	str	r3, [sp, #20]
 8015ef2:	9b07      	ldr	r3, [sp, #28]
 8015ef4:	f8dd e020 	ldr.w	lr, [sp, #32]
 8015ef8:	eb03 0c0a 	add.w	ip, r3, sl
 8015efc:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8015fc4 <arm_mat_mult_f32+0x13c>
 8015f00:	f1b8 0f00 	cmp.w	r8, #0
 8015f04:	d053      	beq.n	8015fae <arm_mat_mult_f32+0x126>
 8015f06:	9b02      	ldr	r3, [sp, #8]
 8015f08:	4644      	mov	r4, r8
 8015f0a:	18c1      	adds	r1, r0, r3
 8015f0c:	4602      	mov	r2, r0
 8015f0e:	465b      	mov	r3, fp
 8015f10:	ed92 6a00 	vldr	s12, [r2]
 8015f14:	ed13 7a04 	vldr	s14, [r3, #-16]
 8015f18:	ed53 4a03 	vldr	s9, [r3, #-12]
 8015f1c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8015f20:	ed91 5a00 	vldr	s10, [r1]
 8015f24:	ed53 5a01 	vldr	s11, [r3, #-4]
 8015f28:	1957      	adds	r7, r2, r5
 8015f2a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8015f2e:	ed97 6a00 	vldr	s12, [r7]
 8015f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015f36:	ee26 6a24 	vmul.f32	s12, s12, s9
 8015f3a:	194f      	adds	r7, r1, r5
 8015f3c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8015f40:	ee26 7a85 	vmul.f32	s14, s13, s10
 8015f44:	edd7 7a00 	vldr	s15, [r7]
 8015f48:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015f4c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015f50:	3c01      	subs	r4, #1
 8015f52:	4432      	add	r2, r6
 8015f54:	4431      	add	r1, r6
 8015f56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f5a:	f103 0310 	add.w	r3, r3, #16
 8015f5e:	d1d7      	bne.n	8015f10 <arm_mat_mult_f32+0x88>
 8015f60:	9b03      	ldr	r3, [sp, #12]
 8015f62:	9a01      	ldr	r2, [sp, #4]
 8015f64:	4418      	add	r0, r3
 8015f66:	f1b9 0f00 	cmp.w	r9, #0
 8015f6a:	d00b      	beq.n	8015f84 <arm_mat_mult_f32+0xfc>
 8015f6c:	464b      	mov	r3, r9
 8015f6e:	edd0 6a00 	vldr	s13, [r0]
 8015f72:	ecb2 7a01 	vldmia	r2!, {s14}
 8015f76:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015f7a:	3b01      	subs	r3, #1
 8015f7c:	4428      	add	r0, r5
 8015f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8015f82:	d1f4      	bne.n	8015f6e <arm_mat_mult_f32+0xe6>
 8015f84:	ecec 7a01 	vstmia	ip!, {s15}
 8015f88:	45d4      	cmp	ip, sl
 8015f8a:	4670      	mov	r0, lr
 8015f8c:	f10e 0e04 	add.w	lr, lr, #4
 8015f90:	d1b4      	bne.n	8015efc <arm_mat_mult_f32+0x74>
 8015f92:	9a01      	ldr	r2, [sp, #4]
 8015f94:	9b06      	ldr	r3, [sp, #24]
 8015f96:	4611      	mov	r1, r2
 8015f98:	4419      	add	r1, r3
 8015f9a:	449b      	add	fp, r3
 8015f9c:	9b04      	ldr	r3, [sp, #16]
 8015f9e:	9101      	str	r1, [sp, #4]
 8015fa0:	3b01      	subs	r3, #1
 8015fa2:	44aa      	add	sl, r5
 8015fa4:	9304      	str	r3, [sp, #16]
 8015fa6:	d004      	beq.n	8015fb2 <arm_mat_mult_f32+0x12a>
 8015fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015faa:	6858      	ldr	r0, [r3, #4]
 8015fac:	e79e      	b.n	8015eec <arm_mat_mult_f32+0x64>
 8015fae:	9a05      	ldr	r2, [sp, #20]
 8015fb0:	e7d9      	b.n	8015f66 <arm_mat_mult_f32+0xde>
 8015fb2:	4618      	mov	r0, r3
 8015fb4:	b00b      	add	sp, #44	@ 0x2c
 8015fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fba:	f06f 0002 	mvn.w	r0, #2
 8015fbe:	b00b      	add	sp, #44	@ 0x2c
 8015fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fc4:	00000000 	.word	0x00000000

08015fc8 <arm_mat_inverse_f32>:
 8015fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fcc:	8843      	ldrh	r3, [r0, #2]
 8015fce:	8804      	ldrh	r4, [r0, #0]
 8015fd0:	684e      	ldr	r6, [r1, #4]
 8015fd2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8015fd6:	b087      	sub	sp, #28
 8015fd8:	429c      	cmp	r4, r3
 8015fda:	9301      	str	r3, [sp, #4]
 8015fdc:	9603      	str	r6, [sp, #12]
 8015fde:	f040 80ea 	bne.w	80161b6 <arm_mat_inverse_f32+0x1ee>
 8015fe2:	880a      	ldrh	r2, [r1, #0]
 8015fe4:	884b      	ldrh	r3, [r1, #2]
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	f040 80e5 	bne.w	80161b6 <arm_mat_inverse_f32+0x1ee>
 8015fec:	429c      	cmp	r4, r3
 8015fee:	f040 80e2 	bne.w	80161b6 <arm_mat_inverse_f32+0x1ee>
 8015ff2:	9005      	str	r0, [sp, #20]
 8015ff4:	b30c      	cbz	r4, 801603a <arm_mat_inverse_f32+0x72>
 8015ff6:	f04f 5b7e 	mov.w	fp, #1065353216	@ 0x3f800000
 8015ffa:	1e67      	subs	r7, r4, #1
 8015ffc:	f846 bb04 	str.w	fp, [r6], #4
 8016000:	d01b      	beq.n	801603a <arm_mat_inverse_f32+0x72>
 8016002:	f04f 0801 	mov.w	r8, #1
 8016006:	00ba      	lsls	r2, r7, #2
 8016008:	eb06 0a02 	add.w	sl, r6, r2
 801600c:	ea4f 0588 	mov.w	r5, r8, lsl #2
 8016010:	4630      	mov	r0, r6
 8016012:	2100      	movs	r1, #0
 8016014:	f000 f96e 	bl	80162f4 <memset>
 8016018:	eb0a 0605 	add.w	r6, sl, r5
 801601c:	462a      	mov	r2, r5
 801601e:	2100      	movs	r1, #0
 8016020:	4650      	mov	r0, sl
 8016022:	f1b8 0f00 	cmp.w	r8, #0
 8016026:	f000 80cb 	beq.w	80161c0 <arm_mat_inverse_f32+0x1f8>
 801602a:	f000 f963 	bl	80162f4 <memset>
 801602e:	3f01      	subs	r7, #1
 8016030:	f108 0801 	add.w	r8, r8, #1
 8016034:	f846 bb04 	str.w	fp, [r6], #4
 8016038:	d1e5      	bne.n	8016006 <arm_mat_inverse_f32+0x3e>
 801603a:	9b01      	ldr	r3, [sp, #4]
 801603c:	2b00      	cmp	r3, #0
 801603e:	f000 80b5 	beq.w	80161ac <arm_mat_inverse_f32+0x1e4>
 8016042:	009d      	lsls	r5, r3, #2
 8016044:	eb09 0205 	add.w	r2, r9, r5
 8016048:	46cc      	mov	ip, r9
 801604a:	9202      	str	r2, [sp, #8]
 801604c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8016050:	1d2a      	adds	r2, r5, #4
 8016052:	9204      	str	r2, [sp, #16]
 8016054:	462f      	mov	r7, r5
 8016056:	469e      	mov	lr, r3
 8016058:	2600      	movs	r6, #0
 801605a:	9b02      	ldr	r3, [sp, #8]
 801605c:	eddc 6a00 	vldr	s13, [ip]
 8016060:	42b4      	cmp	r4, r6
 8016062:	eba3 0b07 	sub.w	fp, r3, r7
 8016066:	f000 80a1 	beq.w	80161ac <arm_mat_inverse_f32+0x1e4>
 801606a:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80161d0 <arm_mat_inverse_f32+0x208>
 801606e:	4632      	mov	r2, r6
 8016070:	4663      	mov	r3, ip
 8016072:	e00b      	b.n	801608c <arm_mat_inverse_f32+0xc4>
 8016074:	eef4 7a47 	vcmp.f32	s15, s14
 8016078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801607c:	f102 0201 	add.w	r2, r2, #1
 8016080:	bfc8      	it	gt
 8016082:	eeb0 7a67 	vmovgt.f32	s14, s15
 8016086:	42a2      	cmp	r2, r4
 8016088:	442b      	add	r3, r5
 801608a:	d014      	beq.n	80160b6 <arm_mat_inverse_f32+0xee>
 801608c:	edd3 7a00 	vldr	s15, [r3]
 8016090:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016098:	eeb1 6a67 	vneg.f32	s12, s15
 801609c:	dcea      	bgt.n	8016074 <arm_mat_inverse_f32+0xac>
 801609e:	eeb4 6a47 	vcmp.f32	s12, s14
 80160a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a6:	f102 0201 	add.w	r2, r2, #1
 80160aa:	bfc8      	it	gt
 80160ac:	eeb0 7a46 	vmovgt.f32	s14, s12
 80160b0:	42a2      	cmp	r2, r4
 80160b2:	442b      	add	r3, r5
 80160b4:	d1ea      	bne.n	801608c <arm_mat_inverse_f32+0xc4>
 80160b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80160ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160be:	d075      	beq.n	80161ac <arm_mat_inverse_f32+0x1e4>
 80160c0:	eef5 6a40 	vcmp.f32	s13, #0.0
 80160c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160c8:	d070      	beq.n	80161ac <arm_mat_inverse_f32+0x1e4>
 80160ca:	4672      	mov	r2, lr
 80160cc:	4663      	mov	r3, ip
 80160ce:	ed93 7a00 	vldr	s14, [r3]
 80160d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80160d6:	3a01      	subs	r2, #1
 80160d8:	ece3 7a01 	vstmia	r3!, {s15}
 80160dc:	d1f7      	bne.n	80160ce <arm_mat_inverse_f32+0x106>
 80160de:	9901      	ldr	r1, [sp, #4]
 80160e0:	464b      	mov	r3, r9
 80160e2:	ed93 7a00 	vldr	s14, [r3]
 80160e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80160ea:	3901      	subs	r1, #1
 80160ec:	ece3 7a01 	vstmia	r3!, {s15}
 80160f0:	d1f7      	bne.n	80160e2 <arm_mat_inverse_f32+0x11a>
 80160f2:	9803      	ldr	r0, [sp, #12]
 80160f4:	ea4f 0886 	mov.w	r8, r6, lsl #2
 80160f8:	42b1      	cmp	r1, r6
 80160fa:	d039      	beq.n	8016170 <arm_mat_inverse_f32+0x1a8>
 80160fc:	eddb 6a00 	vldr	s13, [fp]
 8016100:	465a      	mov	r2, fp
 8016102:	4673      	mov	r3, lr
 8016104:	46e2      	mov	sl, ip
 8016106:	ecba 7a01 	vldmia	sl!, {s14}
 801610a:	edd2 7a00 	vldr	s15, [r2]
 801610e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016112:	3b01      	subs	r3, #1
 8016114:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016118:	ece2 7a01 	vstmia	r2!, {s15}
 801611c:	d1f3      	bne.n	8016106 <arm_mat_inverse_f32+0x13e>
 801611e:	9b01      	ldr	r3, [sp, #4]
 8016120:	44bb      	add	fp, r7
 8016122:	4602      	mov	r2, r0
 8016124:	46ca      	mov	sl, r9
 8016126:	ecba 7a01 	vldmia	sl!, {s14}
 801612a:	edd2 7a00 	vldr	s15, [r2]
 801612e:	ee26 7a87 	vmul.f32	s14, s13, s14
 8016132:	3b01      	subs	r3, #1
 8016134:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016138:	ece2 7a01 	vstmia	r2!, {s15}
 801613c:	d1f3      	bne.n	8016126 <arm_mat_inverse_f32+0x15e>
 801613e:	4428      	add	r0, r5
 8016140:	3101      	adds	r1, #1
 8016142:	428c      	cmp	r4, r1
 8016144:	44c3      	add	fp, r8
 8016146:	d1d7      	bne.n	80160f8 <arm_mat_inverse_f32+0x130>
 8016148:	9b04      	ldr	r3, [sp, #16]
 801614a:	f1be 0e01 	subs.w	lr, lr, #1
 801614e:	f106 0601 	add.w	r6, r6, #1
 8016152:	449c      	add	ip, r3
 8016154:	f1a7 0704 	sub.w	r7, r7, #4
 8016158:	44a9      	add	r9, r5
 801615a:	f47f af7e 	bne.w	801605a <arm_mat_inverse_f32+0x92>
 801615e:	eef5 6a40 	vcmp.f32	s13, #0.0
 8016162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016166:	d006      	beq.n	8016176 <arm_mat_inverse_f32+0x1ae>
 8016168:	2000      	movs	r0, #0
 801616a:	b007      	add	sp, #28
 801616c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016170:	44bb      	add	fp, r7
 8016172:	4428      	add	r0, r5
 8016174:	e7e4      	b.n	8016140 <arm_mat_inverse_f32+0x178>
 8016176:	9b05      	ldr	r3, [sp, #20]
 8016178:	9a01      	ldr	r2, [sp, #4]
 801617a:	685b      	ldr	r3, [r3, #4]
 801617c:	edd3 7a00 	vldr	s15, [r3]
 8016180:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016184:	fb02 f204 	mul.w	r2, r2, r4
 8016188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801618c:	4614      	mov	r4, r2
 801618e:	bf08      	it	eq
 8016190:	3304      	addeq	r3, #4
 8016192:	d007      	beq.n	80161a4 <arm_mat_inverse_f32+0x1dc>
 8016194:	e7e8      	b.n	8016168 <arm_mat_inverse_f32+0x1a0>
 8016196:	ecf3 7a01 	vldmia	r3!, {s15}
 801619a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801619e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161a2:	d1e1      	bne.n	8016168 <arm_mat_inverse_f32+0x1a0>
 80161a4:	f10e 0e01 	add.w	lr, lr, #1
 80161a8:	4574      	cmp	r4, lr
 80161aa:	d1f4      	bne.n	8016196 <arm_mat_inverse_f32+0x1ce>
 80161ac:	f06f 0004 	mvn.w	r0, #4
 80161b0:	b007      	add	sp, #28
 80161b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161b6:	f06f 0002 	mvn.w	r0, #2
 80161ba:	b007      	add	sp, #28
 80161bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161c0:	4656      	mov	r6, sl
 80161c2:	3f01      	subs	r7, #1
 80161c4:	f846 bb04 	str.w	fp, [r6], #4
 80161c8:	f47f af1b 	bne.w	8016002 <arm_mat_inverse_f32+0x3a>
 80161cc:	e735      	b.n	801603a <arm_mat_inverse_f32+0x72>
 80161ce:	bf00      	nop
 80161d0:	00000000 	.word	0x00000000

080161d4 <arm_sin_f32>:
 80161d4:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8016254 <arm_sin_f32+0x80>
 80161d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80161dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80161e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80161e4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80161e8:	d504      	bpl.n	80161f4 <arm_sin_f32+0x20>
 80161ea:	ee17 3a90 	vmov	r3, s15
 80161ee:	3b01      	subs	r3, #1
 80161f0:	ee07 3a90 	vmov	s15, r3
 80161f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80161f8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8016258 <arm_sin_f32+0x84>
 80161fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016200:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016204:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8016208:	ee17 3a90 	vmov	r3, s15
 801620c:	b29b      	uxth	r3, r3
 801620e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016212:	d21a      	bcs.n	801624a <arm_sin_f32+0x76>
 8016214:	ee07 3a90 	vmov	s15, r3
 8016218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801621c:	1c59      	adds	r1, r3, #1
 801621e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016222:	4a0e      	ldr	r2, [pc, #56]	@ (801625c <arm_sin_f32+0x88>)
 8016224:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8016228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801622c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8016230:	ed93 7a00 	vldr	s14, [r3]
 8016234:	edd2 6a00 	vldr	s13, [r2]
 8016238:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801623c:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016244:	ee37 0a80 	vadd.f32	s0, s15, s0
 8016248:	4770      	bx	lr
 801624a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801624e:	2101      	movs	r1, #1
 8016250:	2300      	movs	r3, #0
 8016252:	e7e6      	b.n	8016222 <arm_sin_f32+0x4e>
 8016254:	3e22f983 	.word	0x3e22f983
 8016258:	44000000 	.word	0x44000000
 801625c:	08019218 	.word	0x08019218

08016260 <arm_cos_f32>:
 8016260:	eddf 7a21 	vldr	s15, [pc, #132]	@ 80162e8 <arm_cos_f32+0x88>
 8016264:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016268:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801626c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8016270:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016278:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801627c:	d504      	bpl.n	8016288 <arm_cos_f32+0x28>
 801627e:	ee17 3a90 	vmov	r3, s15
 8016282:	3b01      	subs	r3, #1
 8016284:	ee07 3a90 	vmov	s15, r3
 8016288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801628c:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80162ec <arm_cos_f32+0x8c>
 8016290:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016294:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016298:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801629c:	ee17 3a90 	vmov	r3, s15
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80162a6:	d21a      	bcs.n	80162de <arm_cos_f32+0x7e>
 80162a8:	ee07 3a90 	vmov	s15, r3
 80162ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80162b0:	1c59      	adds	r1, r3, #1
 80162b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80162b6:	4a0e      	ldr	r2, [pc, #56]	@ (80162f0 <arm_cos_f32+0x90>)
 80162b8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80162bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80162c0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80162c4:	ed93 7a00 	vldr	s14, [r3]
 80162c8:	edd2 6a00 	vldr	s13, [r2]
 80162cc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80162d0:	ee20 0a26 	vmul.f32	s0, s0, s13
 80162d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80162d8:	ee37 0a80 	vadd.f32	s0, s15, s0
 80162dc:	4770      	bx	lr
 80162de:	ee30 0a47 	vsub.f32	s0, s0, s14
 80162e2:	2101      	movs	r1, #1
 80162e4:	2300      	movs	r3, #0
 80162e6:	e7e6      	b.n	80162b6 <arm_cos_f32+0x56>
 80162e8:	3e22f983 	.word	0x3e22f983
 80162ec:	44000000 	.word	0x44000000
 80162f0:	08019218 	.word	0x08019218

080162f4 <memset>:
 80162f4:	4402      	add	r2, r0
 80162f6:	4603      	mov	r3, r0
 80162f8:	4293      	cmp	r3, r2
 80162fa:	d100      	bne.n	80162fe <memset+0xa>
 80162fc:	4770      	bx	lr
 80162fe:	f803 1b01 	strb.w	r1, [r3], #1
 8016302:	e7f9      	b.n	80162f8 <memset+0x4>

08016304 <strncpy>:
 8016304:	b510      	push	{r4, lr}
 8016306:	3901      	subs	r1, #1
 8016308:	4603      	mov	r3, r0
 801630a:	b132      	cbz	r2, 801631a <strncpy+0x16>
 801630c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016310:	f803 4b01 	strb.w	r4, [r3], #1
 8016314:	3a01      	subs	r2, #1
 8016316:	2c00      	cmp	r4, #0
 8016318:	d1f7      	bne.n	801630a <strncpy+0x6>
 801631a:	441a      	add	r2, r3
 801631c:	2100      	movs	r1, #0
 801631e:	4293      	cmp	r3, r2
 8016320:	d100      	bne.n	8016324 <strncpy+0x20>
 8016322:	bd10      	pop	{r4, pc}
 8016324:	f803 1b01 	strb.w	r1, [r3], #1
 8016328:	e7f9      	b.n	801631e <strncpy+0x1a>
	...

0801632c <__errno>:
 801632c:	4b01      	ldr	r3, [pc, #4]	@ (8016334 <__errno+0x8>)
 801632e:	6818      	ldr	r0, [r3, #0]
 8016330:	4770      	bx	lr
 8016332:	bf00      	nop
 8016334:	20000180 	.word	0x20000180

08016338 <__libc_init_array>:
 8016338:	b570      	push	{r4, r5, r6, lr}
 801633a:	4d0d      	ldr	r5, [pc, #52]	@ (8016370 <__libc_init_array+0x38>)
 801633c:	4c0d      	ldr	r4, [pc, #52]	@ (8016374 <__libc_init_array+0x3c>)
 801633e:	1b64      	subs	r4, r4, r5
 8016340:	10a4      	asrs	r4, r4, #2
 8016342:	2600      	movs	r6, #0
 8016344:	42a6      	cmp	r6, r4
 8016346:	d109      	bne.n	801635c <__libc_init_array+0x24>
 8016348:	4d0b      	ldr	r5, [pc, #44]	@ (8016378 <__libc_init_array+0x40>)
 801634a:	4c0c      	ldr	r4, [pc, #48]	@ (801637c <__libc_init_array+0x44>)
 801634c:	f002 f800 	bl	8018350 <_init>
 8016350:	1b64      	subs	r4, r4, r5
 8016352:	10a4      	asrs	r4, r4, #2
 8016354:	2600      	movs	r6, #0
 8016356:	42a6      	cmp	r6, r4
 8016358:	d105      	bne.n	8016366 <__libc_init_array+0x2e>
 801635a:	bd70      	pop	{r4, r5, r6, pc}
 801635c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016360:	4798      	blx	r3
 8016362:	3601      	adds	r6, #1
 8016364:	e7ee      	b.n	8016344 <__libc_init_array+0xc>
 8016366:	f855 3b04 	ldr.w	r3, [r5], #4
 801636a:	4798      	blx	r3
 801636c:	3601      	adds	r6, #1
 801636e:	e7f2      	b.n	8016356 <__libc_init_array+0x1e>
 8016370:	08019e60 	.word	0x08019e60
 8016374:	08019e60 	.word	0x08019e60
 8016378:	08019e60 	.word	0x08019e60
 801637c:	08019e64 	.word	0x08019e64

08016380 <memcpy>:
 8016380:	440a      	add	r2, r1
 8016382:	4291      	cmp	r1, r2
 8016384:	f100 33ff 	add.w	r3, r0, #4294967295
 8016388:	d100      	bne.n	801638c <memcpy+0xc>
 801638a:	4770      	bx	lr
 801638c:	b510      	push	{r4, lr}
 801638e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016392:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016396:	4291      	cmp	r1, r2
 8016398:	d1f9      	bne.n	801638e <memcpy+0xe>
 801639a:	bd10      	pop	{r4, pc}

0801639c <acosf>:
 801639c:	b508      	push	{r3, lr}
 801639e:	ed2d 8b02 	vpush	{d8}
 80163a2:	eeb0 8a40 	vmov.f32	s16, s0
 80163a6:	f000 fb7f 	bl	8016aa8 <__ieee754_acosf>
 80163aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80163ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b2:	eef0 8a40 	vmov.f32	s17, s0
 80163b6:	d615      	bvs.n	80163e4 <acosf+0x48>
 80163b8:	eeb0 0a48 	vmov.f32	s0, s16
 80163bc:	f000 f966 	bl	801668c <fabsf>
 80163c0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80163c4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80163c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163cc:	dd0a      	ble.n	80163e4 <acosf+0x48>
 80163ce:	f7ff ffad 	bl	801632c <__errno>
 80163d2:	ecbd 8b02 	vpop	{d8}
 80163d6:	2321      	movs	r3, #33	@ 0x21
 80163d8:	6003      	str	r3, [r0, #0]
 80163da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80163de:	4804      	ldr	r0, [pc, #16]	@ (80163f0 <acosf+0x54>)
 80163e0:	f000 b9d8 	b.w	8016794 <nanf>
 80163e4:	eeb0 0a68 	vmov.f32	s0, s17
 80163e8:	ecbd 8b02 	vpop	{d8}
 80163ec:	bd08      	pop	{r3, pc}
 80163ee:	bf00      	nop
 80163f0:	08019a1c 	.word	0x08019a1c

080163f4 <asinf>:
 80163f4:	b508      	push	{r3, lr}
 80163f6:	ed2d 8b02 	vpush	{d8}
 80163fa:	eeb0 8a40 	vmov.f32	s16, s0
 80163fe:	f000 fc4b 	bl	8016c98 <__ieee754_asinf>
 8016402:	eeb4 8a48 	vcmp.f32	s16, s16
 8016406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801640a:	eef0 8a40 	vmov.f32	s17, s0
 801640e:	d615      	bvs.n	801643c <asinf+0x48>
 8016410:	eeb0 0a48 	vmov.f32	s0, s16
 8016414:	f000 f93a 	bl	801668c <fabsf>
 8016418:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801641c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016424:	dd0a      	ble.n	801643c <asinf+0x48>
 8016426:	f7ff ff81 	bl	801632c <__errno>
 801642a:	ecbd 8b02 	vpop	{d8}
 801642e:	2321      	movs	r3, #33	@ 0x21
 8016430:	6003      	str	r3, [r0, #0]
 8016432:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016436:	4804      	ldr	r0, [pc, #16]	@ (8016448 <asinf+0x54>)
 8016438:	f000 b9ac 	b.w	8016794 <nanf>
 801643c:	eeb0 0a68 	vmov.f32	s0, s17
 8016440:	ecbd 8b02 	vpop	{d8}
 8016444:	bd08      	pop	{r3, pc}
 8016446:	bf00      	nop
 8016448:	08019a1c 	.word	0x08019a1c

0801644c <atan2f>:
 801644c:	f000 bd0a 	b.w	8016e64 <__ieee754_atan2f>

08016450 <expf>:
 8016450:	b508      	push	{r3, lr}
 8016452:	ed2d 8b02 	vpush	{d8}
 8016456:	eef0 8a40 	vmov.f32	s17, s0
 801645a:	f000 fda3 	bl	8016fa4 <__ieee754_expf>
 801645e:	eeb0 8a40 	vmov.f32	s16, s0
 8016462:	eeb0 0a68 	vmov.f32	s0, s17
 8016466:	f000 f98b 	bl	8016780 <finitef>
 801646a:	b160      	cbz	r0, 8016486 <expf+0x36>
 801646c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80164ac <expf+0x5c>
 8016470:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016478:	dd0a      	ble.n	8016490 <expf+0x40>
 801647a:	f7ff ff57 	bl	801632c <__errno>
 801647e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80164b0 <expf+0x60>
 8016482:	2322      	movs	r3, #34	@ 0x22
 8016484:	6003      	str	r3, [r0, #0]
 8016486:	eeb0 0a48 	vmov.f32	s0, s16
 801648a:	ecbd 8b02 	vpop	{d8}
 801648e:	bd08      	pop	{r3, pc}
 8016490:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80164b4 <expf+0x64>
 8016494:	eef4 8ae7 	vcmpe.f32	s17, s15
 8016498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801649c:	d5f3      	bpl.n	8016486 <expf+0x36>
 801649e:	f7ff ff45 	bl	801632c <__errno>
 80164a2:	2322      	movs	r3, #34	@ 0x22
 80164a4:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80164b8 <expf+0x68>
 80164a8:	6003      	str	r3, [r0, #0]
 80164aa:	e7ec      	b.n	8016486 <expf+0x36>
 80164ac:	42b17217 	.word	0x42b17217
 80164b0:	7f800000 	.word	0x7f800000
 80164b4:	c2cff1b5 	.word	0xc2cff1b5
 80164b8:	00000000 	.word	0x00000000

080164bc <logf>:
 80164bc:	b508      	push	{r3, lr}
 80164be:	ed2d 8b02 	vpush	{d8}
 80164c2:	eeb0 8a40 	vmov.f32	s16, s0
 80164c6:	f000 fe3b 	bl	8017140 <__ieee754_logf>
 80164ca:	eeb4 8a48 	vcmp.f32	s16, s16
 80164ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164d2:	d60f      	bvs.n	80164f4 <logf+0x38>
 80164d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80164d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164dc:	dc0a      	bgt.n	80164f4 <logf+0x38>
 80164de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80164e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80164e6:	d108      	bne.n	80164fa <logf+0x3e>
 80164e8:	f7ff ff20 	bl	801632c <__errno>
 80164ec:	2322      	movs	r3, #34	@ 0x22
 80164ee:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8016510 <logf+0x54>
 80164f2:	6003      	str	r3, [r0, #0]
 80164f4:	ecbd 8b02 	vpop	{d8}
 80164f8:	bd08      	pop	{r3, pc}
 80164fa:	f7ff ff17 	bl	801632c <__errno>
 80164fe:	ecbd 8b02 	vpop	{d8}
 8016502:	2321      	movs	r3, #33	@ 0x21
 8016504:	6003      	str	r3, [r0, #0]
 8016506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801650a:	4802      	ldr	r0, [pc, #8]	@ (8016514 <logf+0x58>)
 801650c:	f000 b942 	b.w	8016794 <nanf>
 8016510:	ff800000 	.word	0xff800000
 8016514:	08019a1c 	.word	0x08019a1c

08016518 <powf>:
 8016518:	b508      	push	{r3, lr}
 801651a:	ed2d 8b04 	vpush	{d8-d9}
 801651e:	eeb0 8a60 	vmov.f32	s16, s1
 8016522:	eeb0 9a40 	vmov.f32	s18, s0
 8016526:	f000 fefd 	bl	8017324 <__ieee754_powf>
 801652a:	eeb4 8a48 	vcmp.f32	s16, s16
 801652e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016532:	eef0 8a40 	vmov.f32	s17, s0
 8016536:	d63e      	bvs.n	80165b6 <powf+0x9e>
 8016538:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801653c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016540:	d112      	bne.n	8016568 <powf+0x50>
 8016542:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801654a:	d039      	beq.n	80165c0 <powf+0xa8>
 801654c:	eeb0 0a48 	vmov.f32	s0, s16
 8016550:	f000 f916 	bl	8016780 <finitef>
 8016554:	b378      	cbz	r0, 80165b6 <powf+0x9e>
 8016556:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801655a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801655e:	d52a      	bpl.n	80165b6 <powf+0x9e>
 8016560:	f7ff fee4 	bl	801632c <__errno>
 8016564:	2322      	movs	r3, #34	@ 0x22
 8016566:	e014      	b.n	8016592 <powf+0x7a>
 8016568:	f000 f90a 	bl	8016780 <finitef>
 801656c:	b998      	cbnz	r0, 8016596 <powf+0x7e>
 801656e:	eeb0 0a49 	vmov.f32	s0, s18
 8016572:	f000 f905 	bl	8016780 <finitef>
 8016576:	b170      	cbz	r0, 8016596 <powf+0x7e>
 8016578:	eeb0 0a48 	vmov.f32	s0, s16
 801657c:	f000 f900 	bl	8016780 <finitef>
 8016580:	b148      	cbz	r0, 8016596 <powf+0x7e>
 8016582:	eef4 8a68 	vcmp.f32	s17, s17
 8016586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801658a:	d7e9      	bvc.n	8016560 <powf+0x48>
 801658c:	f7ff fece 	bl	801632c <__errno>
 8016590:	2321      	movs	r3, #33	@ 0x21
 8016592:	6003      	str	r3, [r0, #0]
 8016594:	e00f      	b.n	80165b6 <powf+0x9e>
 8016596:	eef5 8a40 	vcmp.f32	s17, #0.0
 801659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801659e:	d10a      	bne.n	80165b6 <powf+0x9e>
 80165a0:	eeb0 0a49 	vmov.f32	s0, s18
 80165a4:	f000 f8ec 	bl	8016780 <finitef>
 80165a8:	b128      	cbz	r0, 80165b6 <powf+0x9e>
 80165aa:	eeb0 0a48 	vmov.f32	s0, s16
 80165ae:	f000 f8e7 	bl	8016780 <finitef>
 80165b2:	2800      	cmp	r0, #0
 80165b4:	d1d4      	bne.n	8016560 <powf+0x48>
 80165b6:	eeb0 0a68 	vmov.f32	s0, s17
 80165ba:	ecbd 8b04 	vpop	{d8-d9}
 80165be:	bd08      	pop	{r3, pc}
 80165c0:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80165c4:	e7f7      	b.n	80165b6 <powf+0x9e>
	...

080165c8 <sqrtf>:
 80165c8:	b508      	push	{r3, lr}
 80165ca:	ed2d 8b02 	vpush	{d8}
 80165ce:	eeb0 8a40 	vmov.f32	s16, s0
 80165d2:	f000 f8e5 	bl	80167a0 <__ieee754_sqrtf>
 80165d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80165da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165de:	d60c      	bvs.n	80165fa <sqrtf+0x32>
 80165e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8016600 <sqrtf+0x38>
 80165e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80165e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ec:	d505      	bpl.n	80165fa <sqrtf+0x32>
 80165ee:	f7ff fe9d 	bl	801632c <__errno>
 80165f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80165f6:	2321      	movs	r3, #33	@ 0x21
 80165f8:	6003      	str	r3, [r0, #0]
 80165fa:	ecbd 8b02 	vpop	{d8}
 80165fe:	bd08      	pop	{r3, pc}
 8016600:	00000000 	.word	0x00000000

08016604 <cosf>:
 8016604:	ee10 3a10 	vmov	r3, s0
 8016608:	b507      	push	{r0, r1, r2, lr}
 801660a:	4a1e      	ldr	r2, [pc, #120]	@ (8016684 <cosf+0x80>)
 801660c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016610:	4293      	cmp	r3, r2
 8016612:	d806      	bhi.n	8016622 <cosf+0x1e>
 8016614:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8016688 <cosf+0x84>
 8016618:	b003      	add	sp, #12
 801661a:	f85d eb04 	ldr.w	lr, [sp], #4
 801661e:	f000 b8c3 	b.w	80167a8 <__kernel_cosf>
 8016622:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016626:	d304      	bcc.n	8016632 <cosf+0x2e>
 8016628:	ee30 0a40 	vsub.f32	s0, s0, s0
 801662c:	b003      	add	sp, #12
 801662e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016632:	4668      	mov	r0, sp
 8016634:	f001 f946 	bl	80178c4 <__ieee754_rem_pio2f>
 8016638:	f000 0003 	and.w	r0, r0, #3
 801663c:	2801      	cmp	r0, #1
 801663e:	d009      	beq.n	8016654 <cosf+0x50>
 8016640:	2802      	cmp	r0, #2
 8016642:	d010      	beq.n	8016666 <cosf+0x62>
 8016644:	b9b0      	cbnz	r0, 8016674 <cosf+0x70>
 8016646:	eddd 0a01 	vldr	s1, [sp, #4]
 801664a:	ed9d 0a00 	vldr	s0, [sp]
 801664e:	f000 f8ab 	bl	80167a8 <__kernel_cosf>
 8016652:	e7eb      	b.n	801662c <cosf+0x28>
 8016654:	eddd 0a01 	vldr	s1, [sp, #4]
 8016658:	ed9d 0a00 	vldr	s0, [sp]
 801665c:	f000 f8fc 	bl	8016858 <__kernel_sinf>
 8016660:	eeb1 0a40 	vneg.f32	s0, s0
 8016664:	e7e2      	b.n	801662c <cosf+0x28>
 8016666:	eddd 0a01 	vldr	s1, [sp, #4]
 801666a:	ed9d 0a00 	vldr	s0, [sp]
 801666e:	f000 f89b 	bl	80167a8 <__kernel_cosf>
 8016672:	e7f5      	b.n	8016660 <cosf+0x5c>
 8016674:	eddd 0a01 	vldr	s1, [sp, #4]
 8016678:	ed9d 0a00 	vldr	s0, [sp]
 801667c:	2001      	movs	r0, #1
 801667e:	f000 f8eb 	bl	8016858 <__kernel_sinf>
 8016682:	e7d3      	b.n	801662c <cosf+0x28>
 8016684:	3f490fd8 	.word	0x3f490fd8
 8016688:	00000000 	.word	0x00000000

0801668c <fabsf>:
 801668c:	ee10 3a10 	vmov	r3, s0
 8016690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016694:	ee00 3a10 	vmov	s0, r3
 8016698:	4770      	bx	lr
	...

0801669c <sinf>:
 801669c:	ee10 3a10 	vmov	r3, s0
 80166a0:	b507      	push	{r0, r1, r2, lr}
 80166a2:	4a1f      	ldr	r2, [pc, #124]	@ (8016720 <sinf+0x84>)
 80166a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80166a8:	4293      	cmp	r3, r2
 80166aa:	d807      	bhi.n	80166bc <sinf+0x20>
 80166ac:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8016724 <sinf+0x88>
 80166b0:	2000      	movs	r0, #0
 80166b2:	b003      	add	sp, #12
 80166b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80166b8:	f000 b8ce 	b.w	8016858 <__kernel_sinf>
 80166bc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80166c0:	d304      	bcc.n	80166cc <sinf+0x30>
 80166c2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80166c6:	b003      	add	sp, #12
 80166c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80166cc:	4668      	mov	r0, sp
 80166ce:	f001 f8f9 	bl	80178c4 <__ieee754_rem_pio2f>
 80166d2:	f000 0003 	and.w	r0, r0, #3
 80166d6:	2801      	cmp	r0, #1
 80166d8:	d00a      	beq.n	80166f0 <sinf+0x54>
 80166da:	2802      	cmp	r0, #2
 80166dc:	d00f      	beq.n	80166fe <sinf+0x62>
 80166de:	b9c0      	cbnz	r0, 8016712 <sinf+0x76>
 80166e0:	eddd 0a01 	vldr	s1, [sp, #4]
 80166e4:	ed9d 0a00 	vldr	s0, [sp]
 80166e8:	2001      	movs	r0, #1
 80166ea:	f000 f8b5 	bl	8016858 <__kernel_sinf>
 80166ee:	e7ea      	b.n	80166c6 <sinf+0x2a>
 80166f0:	eddd 0a01 	vldr	s1, [sp, #4]
 80166f4:	ed9d 0a00 	vldr	s0, [sp]
 80166f8:	f000 f856 	bl	80167a8 <__kernel_cosf>
 80166fc:	e7e3      	b.n	80166c6 <sinf+0x2a>
 80166fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8016702:	ed9d 0a00 	vldr	s0, [sp]
 8016706:	2001      	movs	r0, #1
 8016708:	f000 f8a6 	bl	8016858 <__kernel_sinf>
 801670c:	eeb1 0a40 	vneg.f32	s0, s0
 8016710:	e7d9      	b.n	80166c6 <sinf+0x2a>
 8016712:	eddd 0a01 	vldr	s1, [sp, #4]
 8016716:	ed9d 0a00 	vldr	s0, [sp]
 801671a:	f000 f845 	bl	80167a8 <__kernel_cosf>
 801671e:	e7f5      	b.n	801670c <sinf+0x70>
 8016720:	3f490fd8 	.word	0x3f490fd8
 8016724:	00000000 	.word	0x00000000

08016728 <tanf>:
 8016728:	ee10 3a10 	vmov	r3, s0
 801672c:	b507      	push	{r0, r1, r2, lr}
 801672e:	4a12      	ldr	r2, [pc, #72]	@ (8016778 <tanf+0x50>)
 8016730:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016734:	4293      	cmp	r3, r2
 8016736:	d807      	bhi.n	8016748 <tanf+0x20>
 8016738:	eddf 0a10 	vldr	s1, [pc, #64]	@ 801677c <tanf+0x54>
 801673c:	2001      	movs	r0, #1
 801673e:	b003      	add	sp, #12
 8016740:	f85d eb04 	ldr.w	lr, [sp], #4
 8016744:	f000 b8d0 	b.w	80168e8 <__kernel_tanf>
 8016748:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 801674c:	d304      	bcc.n	8016758 <tanf+0x30>
 801674e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8016752:	b003      	add	sp, #12
 8016754:	f85d fb04 	ldr.w	pc, [sp], #4
 8016758:	4668      	mov	r0, sp
 801675a:	f001 f8b3 	bl	80178c4 <__ieee754_rem_pio2f>
 801675e:	0040      	lsls	r0, r0, #1
 8016760:	f000 0002 	and.w	r0, r0, #2
 8016764:	eddd 0a01 	vldr	s1, [sp, #4]
 8016768:	ed9d 0a00 	vldr	s0, [sp]
 801676c:	f1c0 0001 	rsb	r0, r0, #1
 8016770:	f000 f8ba 	bl	80168e8 <__kernel_tanf>
 8016774:	e7ed      	b.n	8016752 <tanf+0x2a>
 8016776:	bf00      	nop
 8016778:	3f490fda 	.word	0x3f490fda
 801677c:	00000000 	.word	0x00000000

08016780 <finitef>:
 8016780:	ee10 3a10 	vmov	r3, s0
 8016784:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8016788:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 801678c:	bfac      	ite	ge
 801678e:	2000      	movge	r0, #0
 8016790:	2001      	movlt	r0, #1
 8016792:	4770      	bx	lr

08016794 <nanf>:
 8016794:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801679c <nanf+0x8>
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop
 801679c:	7fc00000 	.word	0x7fc00000

080167a0 <__ieee754_sqrtf>:
 80167a0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80167a4:	4770      	bx	lr
	...

080167a8 <__kernel_cosf>:
 80167a8:	ee10 3a10 	vmov	r3, s0
 80167ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80167b0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80167b4:	eef0 6a40 	vmov.f32	s13, s0
 80167b8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80167bc:	d204      	bcs.n	80167c8 <__kernel_cosf+0x20>
 80167be:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80167c2:	ee17 2a90 	vmov	r2, s15
 80167c6:	b342      	cbz	r2, 801681a <__kernel_cosf+0x72>
 80167c8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80167cc:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8016838 <__kernel_cosf+0x90>
 80167d0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 801683c <__kernel_cosf+0x94>
 80167d4:	4a1a      	ldr	r2, [pc, #104]	@ (8016840 <__kernel_cosf+0x98>)
 80167d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80167da:	4293      	cmp	r3, r2
 80167dc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8016844 <__kernel_cosf+0x9c>
 80167e0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80167e4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8016848 <__kernel_cosf+0xa0>
 80167e8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80167ec:	eddf 7a17 	vldr	s15, [pc, #92]	@ 801684c <__kernel_cosf+0xa4>
 80167f0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80167f4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8016850 <__kernel_cosf+0xa8>
 80167f8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80167fc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8016800:	ee26 6a07 	vmul.f32	s12, s12, s14
 8016804:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016808:	eee7 0a06 	vfma.f32	s1, s14, s12
 801680c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016810:	d804      	bhi.n	801681c <__kernel_cosf+0x74>
 8016812:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016816:	ee30 0a67 	vsub.f32	s0, s0, s15
 801681a:	4770      	bx	lr
 801681c:	4a0d      	ldr	r2, [pc, #52]	@ (8016854 <__kernel_cosf+0xac>)
 801681e:	4293      	cmp	r3, r2
 8016820:	bf9a      	itte	ls
 8016822:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8016826:	ee07 3a10 	vmovls	s14, r3
 801682a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 801682e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016832:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016836:	e7ec      	b.n	8016812 <__kernel_cosf+0x6a>
 8016838:	ad47d74e 	.word	0xad47d74e
 801683c:	310f74f6 	.word	0x310f74f6
 8016840:	3e999999 	.word	0x3e999999
 8016844:	b493f27c 	.word	0xb493f27c
 8016848:	37d00d01 	.word	0x37d00d01
 801684c:	bab60b61 	.word	0xbab60b61
 8016850:	3d2aaaab 	.word	0x3d2aaaab
 8016854:	3f480000 	.word	0x3f480000

08016858 <__kernel_sinf>:
 8016858:	ee10 3a10 	vmov	r3, s0
 801685c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8016860:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8016864:	d204      	bcs.n	8016870 <__kernel_sinf+0x18>
 8016866:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801686a:	ee17 3a90 	vmov	r3, s15
 801686e:	b35b      	cbz	r3, 80168c8 <__kernel_sinf+0x70>
 8016870:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016874:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80168cc <__kernel_sinf+0x74>
 8016878:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80168d0 <__kernel_sinf+0x78>
 801687c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8016880:	eddf 7a14 	vldr	s15, [pc, #80]	@ 80168d4 <__kernel_sinf+0x7c>
 8016884:	eee6 7a07 	vfma.f32	s15, s12, s14
 8016888:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 80168d8 <__kernel_sinf+0x80>
 801688c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8016890:	eddf 7a12 	vldr	s15, [pc, #72]	@ 80168dc <__kernel_sinf+0x84>
 8016894:	ee60 6a07 	vmul.f32	s13, s0, s14
 8016898:	eee6 7a07 	vfma.f32	s15, s12, s14
 801689c:	b930      	cbnz	r0, 80168ac <__kernel_sinf+0x54>
 801689e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80168e0 <__kernel_sinf+0x88>
 80168a2:	eea7 6a27 	vfma.f32	s12, s14, s15
 80168a6:	eea6 0a26 	vfma.f32	s0, s12, s13
 80168aa:	4770      	bx	lr
 80168ac:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80168b0:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80168b4:	eee0 7a86 	vfma.f32	s15, s1, s12
 80168b8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80168bc:	eddf 7a09 	vldr	s15, [pc, #36]	@ 80168e4 <__kernel_sinf+0x8c>
 80168c0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80168c4:	ee30 0a60 	vsub.f32	s0, s0, s1
 80168c8:	4770      	bx	lr
 80168ca:	bf00      	nop
 80168cc:	2f2ec9d3 	.word	0x2f2ec9d3
 80168d0:	b2d72f34 	.word	0xb2d72f34
 80168d4:	3638ef1b 	.word	0x3638ef1b
 80168d8:	b9500d01 	.word	0xb9500d01
 80168dc:	3c088889 	.word	0x3c088889
 80168e0:	be2aaaab 	.word	0xbe2aaaab
 80168e4:	3e2aaaab 	.word	0x3e2aaaab

080168e8 <__kernel_tanf>:
 80168e8:	b508      	push	{r3, lr}
 80168ea:	ee10 3a10 	vmov	r3, s0
 80168ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80168f2:	f1b2 5f46 	cmp.w	r2, #830472192	@ 0x31800000
 80168f6:	eef0 7a40 	vmov.f32	s15, s0
 80168fa:	d217      	bcs.n	801692c <__kernel_tanf+0x44>
 80168fc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8016900:	ee17 1a10 	vmov	r1, s14
 8016904:	bb41      	cbnz	r1, 8016958 <__kernel_tanf+0x70>
 8016906:	1c43      	adds	r3, r0, #1
 8016908:	4313      	orrs	r3, r2
 801690a:	d108      	bne.n	801691e <__kernel_tanf+0x36>
 801690c:	f7ff febe 	bl	801668c <fabsf>
 8016910:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016914:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016918:	eeb0 0a67 	vmov.f32	s0, s15
 801691c:	bd08      	pop	{r3, pc}
 801691e:	2801      	cmp	r0, #1
 8016920:	d0fa      	beq.n	8016918 <__kernel_tanf+0x30>
 8016922:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8016926:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801692a:	e7f5      	b.n	8016918 <__kernel_tanf+0x30>
 801692c:	494c      	ldr	r1, [pc, #304]	@ (8016a60 <__kernel_tanf+0x178>)
 801692e:	428a      	cmp	r2, r1
 8016930:	d312      	bcc.n	8016958 <__kernel_tanf+0x70>
 8016932:	2b00      	cmp	r3, #0
 8016934:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8016a64 <__kernel_tanf+0x17c>
 8016938:	bfb8      	it	lt
 801693a:	eef1 7a40 	vneglt.f32	s15, s0
 801693e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016942:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8016a68 <__kernel_tanf+0x180>
 8016946:	bfb8      	it	lt
 8016948:	eef1 0a60 	vneglt.f32	s1, s1
 801694c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8016950:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8016a6c <__kernel_tanf+0x184>
 8016954:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016958:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801695c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8016a70 <__kernel_tanf+0x188>
 8016960:	ed9f 6a44 	vldr	s12, [pc, #272]	@ 8016a74 <__kernel_tanf+0x18c>
 8016964:	ed9f 5a44 	vldr	s10, [pc, #272]	@ 8016a78 <__kernel_tanf+0x190>
 8016968:	493d      	ldr	r1, [pc, #244]	@ (8016a60 <__kernel_tanf+0x178>)
 801696a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801696e:	428a      	cmp	r2, r1
 8016970:	eea7 6a25 	vfma.f32	s12, s14, s11
 8016974:	eddf 5a41 	vldr	s11, [pc, #260]	@ 8016a7c <__kernel_tanf+0x194>
 8016978:	eee6 5a07 	vfma.f32	s11, s12, s14
 801697c:	ed9f 6a40 	vldr	s12, [pc, #256]	@ 8016a80 <__kernel_tanf+0x198>
 8016980:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016984:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8016a84 <__kernel_tanf+0x19c>
 8016988:	eee6 5a07 	vfma.f32	s11, s12, s14
 801698c:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 8016a88 <__kernel_tanf+0x1a0>
 8016990:	eea5 6a87 	vfma.f32	s12, s11, s14
 8016994:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 8016a8c <__kernel_tanf+0x1a4>
 8016998:	eee7 5a05 	vfma.f32	s11, s14, s10
 801699c:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8016a90 <__kernel_tanf+0x1a8>
 80169a0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80169a4:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8016a94 <__kernel_tanf+0x1ac>
 80169a8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80169ac:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8016a98 <__kernel_tanf+0x1b0>
 80169b0:	eea5 5a87 	vfma.f32	s10, s11, s14
 80169b4:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8016a9c <__kernel_tanf+0x1b4>
 80169b8:	eee5 5a07 	vfma.f32	s11, s10, s14
 80169bc:	eeb0 7a46 	vmov.f32	s14, s12
 80169c0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80169c4:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80169c8:	eeb0 6a60 	vmov.f32	s12, s1
 80169cc:	eea7 6a05 	vfma.f32	s12, s14, s10
 80169d0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8016aa0 <__kernel_tanf+0x1b8>
 80169d4:	eee6 0a26 	vfma.f32	s1, s12, s13
 80169d8:	eee5 0a07 	vfma.f32	s1, s10, s14
 80169dc:	ee37 6aa0 	vadd.f32	s12, s15, s1
 80169e0:	d31d      	bcc.n	8016a1e <__kernel_tanf+0x136>
 80169e2:	ee07 0a10 	vmov	s14, r0
 80169e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80169ea:	ee26 5a06 	vmul.f32	s10, s12, s12
 80169ee:	ee36 6a07 	vadd.f32	s12, s12, s14
 80169f2:	179b      	asrs	r3, r3, #30
 80169f4:	eec5 5a06 	vdiv.f32	s11, s10, s12
 80169f8:	f003 0302 	and.w	r3, r3, #2
 80169fc:	f1c3 0301 	rsb	r3, r3, #1
 8016a00:	ee06 3a90 	vmov	s13, r3
 8016a04:	ee35 6ae0 	vsub.f32	s12, s11, s1
 8016a08:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016a0c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016a10:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8016a14:	eea7 7ac6 	vfms.f32	s14, s15, s12
 8016a18:	ee66 7a87 	vmul.f32	s15, s13, s14
 8016a1c:	e77c      	b.n	8016918 <__kernel_tanf+0x30>
 8016a1e:	2801      	cmp	r0, #1
 8016a20:	d01b      	beq.n	8016a5a <__kernel_tanf+0x172>
 8016a22:	4b20      	ldr	r3, [pc, #128]	@ (8016aa4 <__kernel_tanf+0x1bc>)
 8016a24:	ee16 2a10 	vmov	r2, s12
 8016a28:	401a      	ands	r2, r3
 8016a2a:	ee05 2a90 	vmov	s11, r2
 8016a2e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8016a32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016a36:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8016a3a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8016a3e:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8016a42:	ee16 2a90 	vmov	r2, s13
 8016a46:	4013      	ands	r3, r2
 8016a48:	ee07 3a90 	vmov	s15, r3
 8016a4c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016a50:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8016a54:	eee7 7a26 	vfma.f32	s15, s14, s13
 8016a58:	e75e      	b.n	8016918 <__kernel_tanf+0x30>
 8016a5a:	eef0 7a46 	vmov.f32	s15, s12
 8016a5e:	e75b      	b.n	8016918 <__kernel_tanf+0x30>
 8016a60:	3f2ca140 	.word	0x3f2ca140
 8016a64:	3f490fda 	.word	0x3f490fda
 8016a68:	33222168 	.word	0x33222168
 8016a6c:	00000000 	.word	0x00000000
 8016a70:	b79bae5f 	.word	0xb79bae5f
 8016a74:	38a3f445 	.word	0x38a3f445
 8016a78:	37d95384 	.word	0x37d95384
 8016a7c:	3a1a26c8 	.word	0x3a1a26c8
 8016a80:	3b6b6916 	.word	0x3b6b6916
 8016a84:	3cb327a4 	.word	0x3cb327a4
 8016a88:	3e088889 	.word	0x3e088889
 8016a8c:	3895c07a 	.word	0x3895c07a
 8016a90:	398137b9 	.word	0x398137b9
 8016a94:	3abede48 	.word	0x3abede48
 8016a98:	3c11371f 	.word	0x3c11371f
 8016a9c:	3d5d0dd1 	.word	0x3d5d0dd1
 8016aa0:	3eaaaaab 	.word	0x3eaaaaab
 8016aa4:	fffff000 	.word	0xfffff000

08016aa8 <__ieee754_acosf>:
 8016aa8:	b508      	push	{r3, lr}
 8016aaa:	ee10 3a10 	vmov	r3, s0
 8016aae:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8016ab2:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8016ab6:	ed2d 8b0c 	vpush	{d8-d13}
 8016aba:	d10a      	bne.n	8016ad2 <__ieee754_acosf+0x2a>
 8016abc:	ed9f 0a65 	vldr	s0, [pc, #404]	@ 8016c54 <__ieee754_acosf+0x1ac>
 8016ac0:	eddf 7a65 	vldr	s15, [pc, #404]	@ 8016c58 <__ieee754_acosf+0x1b0>
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	bfc8      	it	gt
 8016ac8:	eeb0 0a67 	vmovgt.f32	s0, s15
 8016acc:	ecbd 8b0c 	vpop	{d8-d13}
 8016ad0:	bd08      	pop	{r3, pc}
 8016ad2:	d904      	bls.n	8016ade <__ieee754_acosf+0x36>
 8016ad4:	ee30 8a40 	vsub.f32	s16, s0, s0
 8016ad8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8016adc:	e7f6      	b.n	8016acc <__ieee754_acosf+0x24>
 8016ade:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8016ae2:	d23c      	bcs.n	8016b5e <__ieee754_acosf+0xb6>
 8016ae4:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8016ae8:	f240 80b1 	bls.w	8016c4e <__ieee754_acosf+0x1a6>
 8016aec:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016af0:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 8016c5c <__ieee754_acosf+0x1b4>
 8016af4:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8016c60 <__ieee754_acosf+0x1b8>
 8016af8:	ed9f 6a5a 	vldr	s12, [pc, #360]	@ 8016c64 <__ieee754_acosf+0x1bc>
 8016afc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016b00:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8016c68 <__ieee754_acosf+0x1c0>
 8016b04:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016b08:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8016c6c <__ieee754_acosf+0x1c4>
 8016b0c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016b10:	eddf 6a57 	vldr	s13, [pc, #348]	@ 8016c70 <__ieee754_acosf+0x1c8>
 8016b14:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016b18:	ed9f 7a56 	vldr	s14, [pc, #344]	@ 8016c74 <__ieee754_acosf+0x1cc>
 8016b1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016b20:	eddf 6a55 	vldr	s13, [pc, #340]	@ 8016c78 <__ieee754_acosf+0x1d0>
 8016b24:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8016b28:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8016c7c <__ieee754_acosf+0x1d4>
 8016b2c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016b30:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8016c80 <__ieee754_acosf+0x1d8>
 8016b34:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016b38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016b3c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016b44:	eddf 7a4f 	vldr	s15, [pc, #316]	@ 8016c84 <__ieee754_acosf+0x1dc>
 8016b48:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8016b4c:	eee0 7a46 	vfms.f32	s15, s0, s12
 8016b50:	ee70 7a67 	vsub.f32	s15, s0, s15
 8016b54:	ed9f 0a4c 	vldr	s0, [pc, #304]	@ 8016c88 <__ieee754_acosf+0x1e0>
 8016b58:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016b5c:	e7b6      	b.n	8016acc <__ieee754_acosf+0x24>
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	eddf da3e 	vldr	s27, [pc, #248]	@ 8016c5c <__ieee754_acosf+0x1b4>
 8016b64:	eddf ca3e 	vldr	s25, [pc, #248]	@ 8016c60 <__ieee754_acosf+0x1b8>
 8016b68:	ed9f ca3f 	vldr	s24, [pc, #252]	@ 8016c68 <__ieee754_acosf+0x1c0>
 8016b6c:	eddf ba3f 	vldr	s23, [pc, #252]	@ 8016c6c <__ieee754_acosf+0x1c4>
 8016b70:	ed9f ba3f 	vldr	s22, [pc, #252]	@ 8016c70 <__ieee754_acosf+0x1c8>
 8016b74:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8016c74 <__ieee754_acosf+0x1cc>
 8016b78:	ed9f da3f 	vldr	s26, [pc, #252]	@ 8016c78 <__ieee754_acosf+0x1d0>
 8016b7c:	eddf aa39 	vldr	s21, [pc, #228]	@ 8016c64 <__ieee754_acosf+0x1bc>
 8016b80:	ed9f aa3e 	vldr	s20, [pc, #248]	@ 8016c7c <__ieee754_acosf+0x1d4>
 8016b84:	eddf 9a3e 	vldr	s19, [pc, #248]	@ 8016c80 <__ieee754_acosf+0x1d8>
 8016b88:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8016b8c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016b90:	da28      	bge.n	8016be4 <__ieee754_acosf+0x13c>
 8016b92:	ee30 8a09 	vadd.f32	s16, s0, s18
 8016b96:	ee28 0a27 	vmul.f32	s0, s16, s15
 8016b9a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8016b9e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8016ba2:	eeac ca80 	vfma.f32	s24, s25, s0
 8016ba6:	eeaa aa80 	vfma.f32	s20, s21, s0
 8016baa:	eeec ba00 	vfma.f32	s23, s24, s0
 8016bae:	eeea 9a00 	vfma.f32	s19, s20, s0
 8016bb2:	eeab ba80 	vfma.f32	s22, s23, s0
 8016bb6:	eea9 9a80 	vfma.f32	s18, s19, s0
 8016bba:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8016bbe:	ee68 8a80 	vmul.f32	s17, s17, s0
 8016bc2:	f7ff fded 	bl	80167a0 <__ieee754_sqrtf>
 8016bc6:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8016bca:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8016c8c <__ieee754_acosf+0x1e4>
 8016bce:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016bd2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8016bd6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8016bda:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8016c90 <__ieee754_acosf+0x1e8>
 8016bde:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8016be2:	e773      	b.n	8016acc <__ieee754_acosf+0x24>
 8016be4:	ee39 8a40 	vsub.f32	s16, s18, s0
 8016be8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016bec:	eeb0 0a48 	vmov.f32	s0, s16
 8016bf0:	f7ff fdd6 	bl	80167a0 <__ieee754_sqrtf>
 8016bf4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8016bf8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8016bfc:	eeac ca88 	vfma.f32	s24, s25, s16
 8016c00:	eeaa aa88 	vfma.f32	s20, s21, s16
 8016c04:	eeec ba08 	vfma.f32	s23, s24, s16
 8016c08:	ee10 3a10 	vmov	r3, s0
 8016c0c:	eeab ba88 	vfma.f32	s22, s23, s16
 8016c10:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8016c14:	f023 030f 	bic.w	r3, r3, #15
 8016c18:	eeea 9a08 	vfma.f32	s19, s20, s16
 8016c1c:	ee07 3a90 	vmov	s15, r3
 8016c20:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8016c24:	eeb0 6a48 	vmov.f32	s12, s16
 8016c28:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8016c2c:	eea9 9a88 	vfma.f32	s18, s19, s16
 8016c30:	ee70 6a27 	vadd.f32	s13, s0, s15
 8016c34:	ee68 8a88 	vmul.f32	s17, s17, s16
 8016c38:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8016c3c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8016c40:	eea0 7a26 	vfma.f32	s14, s0, s13
 8016c44:	ee37 0a87 	vadd.f32	s0, s15, s14
 8016c48:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016c4c:	e73e      	b.n	8016acc <__ieee754_acosf+0x24>
 8016c4e:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8016c94 <__ieee754_acosf+0x1ec>
 8016c52:	e73b      	b.n	8016acc <__ieee754_acosf+0x24>
 8016c54:	40490fdb 	.word	0x40490fdb
 8016c58:	00000000 	.word	0x00000000
 8016c5c:	3811ef08 	.word	0x3811ef08
 8016c60:	3a4f7f04 	.word	0x3a4f7f04
 8016c64:	bf303361 	.word	0xbf303361
 8016c68:	bd241146 	.word	0xbd241146
 8016c6c:	3e4e0aa8 	.word	0x3e4e0aa8
 8016c70:	bea6b090 	.word	0xbea6b090
 8016c74:	3e2aaaab 	.word	0x3e2aaaab
 8016c78:	3d9dc62e 	.word	0x3d9dc62e
 8016c7c:	4001572d 	.word	0x4001572d
 8016c80:	c019d139 	.word	0xc019d139
 8016c84:	33a22168 	.word	0x33a22168
 8016c88:	3fc90fda 	.word	0x3fc90fda
 8016c8c:	b3a22168 	.word	0xb3a22168
 8016c90:	40490fda 	.word	0x40490fda
 8016c94:	3fc90fdb 	.word	0x3fc90fdb

08016c98 <__ieee754_asinf>:
 8016c98:	b538      	push	{r3, r4, r5, lr}
 8016c9a:	ee10 5a10 	vmov	r5, s0
 8016c9e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8016ca2:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8016ca6:	ed2d 8b04 	vpush	{d8-d9}
 8016caa:	d10c      	bne.n	8016cc6 <__ieee754_asinf+0x2e>
 8016cac:	eddf 7a5d 	vldr	s15, [pc, #372]	@ 8016e24 <__ieee754_asinf+0x18c>
 8016cb0:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8016e28 <__ieee754_asinf+0x190>
 8016cb4:	ee60 7a27 	vmul.f32	s15, s0, s15
 8016cb8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8016cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8016cc0:	ecbd 8b04 	vpop	{d8-d9}
 8016cc4:	bd38      	pop	{r3, r4, r5, pc}
 8016cc6:	d904      	bls.n	8016cd2 <__ieee754_asinf+0x3a>
 8016cc8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8016ccc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8016cd0:	e7f6      	b.n	8016cc0 <__ieee754_asinf+0x28>
 8016cd2:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8016cd6:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8016cda:	d20b      	bcs.n	8016cf4 <__ieee754_asinf+0x5c>
 8016cdc:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8016ce0:	d252      	bcs.n	8016d88 <__ieee754_asinf+0xf0>
 8016ce2:	eddf 7a52 	vldr	s15, [pc, #328]	@ 8016e2c <__ieee754_asinf+0x194>
 8016ce6:	ee70 7a27 	vadd.f32	s15, s0, s15
 8016cea:	eef4 7ae8 	vcmpe.f32	s15, s17
 8016cee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cf2:	dce5      	bgt.n	8016cc0 <__ieee754_asinf+0x28>
 8016cf4:	f7ff fcca 	bl	801668c <fabsf>
 8016cf8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8016cfc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8016d00:	ee28 8a27 	vmul.f32	s16, s16, s15
 8016d04:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8016e30 <__ieee754_asinf+0x198>
 8016d08:	eddf 7a4a 	vldr	s15, [pc, #296]	@ 8016e34 <__ieee754_asinf+0x19c>
 8016d0c:	ed9f 9a4a 	vldr	s18, [pc, #296]	@ 8016e38 <__ieee754_asinf+0x1a0>
 8016d10:	eea8 7a27 	vfma.f32	s14, s16, s15
 8016d14:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8016e3c <__ieee754_asinf+0x1a4>
 8016d18:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016d1c:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8016e40 <__ieee754_asinf+0x1a8>
 8016d20:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016d24:	eddf 7a47 	vldr	s15, [pc, #284]	@ 8016e44 <__ieee754_asinf+0x1ac>
 8016d28:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016d2c:	ed9f 7a46 	vldr	s14, [pc, #280]	@ 8016e48 <__ieee754_asinf+0x1b0>
 8016d30:	eea7 9a88 	vfma.f32	s18, s15, s16
 8016d34:	eddf 7a45 	vldr	s15, [pc, #276]	@ 8016e4c <__ieee754_asinf+0x1b4>
 8016d38:	eee8 7a07 	vfma.f32	s15, s16, s14
 8016d3c:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8016e50 <__ieee754_asinf+0x1b8>
 8016d40:	eea7 7a88 	vfma.f32	s14, s15, s16
 8016d44:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8016e54 <__ieee754_asinf+0x1bc>
 8016d48:	eee7 7a08 	vfma.f32	s15, s14, s16
 8016d4c:	eeb0 0a48 	vmov.f32	s0, s16
 8016d50:	eee7 8a88 	vfma.f32	s17, s15, s16
 8016d54:	f7ff fd24 	bl	80167a0 <__ieee754_sqrtf>
 8016d58:	4b3f      	ldr	r3, [pc, #252]	@ (8016e58 <__ieee754_asinf+0x1c0>)
 8016d5a:	ee29 9a08 	vmul.f32	s18, s18, s16
 8016d5e:	429c      	cmp	r4, r3
 8016d60:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8016d64:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8016d68:	d93d      	bls.n	8016de6 <__ieee754_asinf+0x14e>
 8016d6a:	eea0 0a06 	vfma.f32	s0, s0, s12
 8016d6e:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8016e5c <__ieee754_asinf+0x1c4>
 8016d72:	eee0 7a26 	vfma.f32	s15, s0, s13
 8016d76:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8016e28 <__ieee754_asinf+0x190>
 8016d7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016d7e:	2d00      	cmp	r5, #0
 8016d80:	bfd8      	it	le
 8016d82:	eeb1 0a40 	vnegle.f32	s0, s0
 8016d86:	e79b      	b.n	8016cc0 <__ieee754_asinf+0x28>
 8016d88:	ee60 7a00 	vmul.f32	s15, s0, s0
 8016d8c:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8016e34 <__ieee754_asinf+0x19c>
 8016d90:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8016e30 <__ieee754_asinf+0x198>
 8016d94:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8016e48 <__ieee754_asinf+0x1b0>
 8016d98:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8016d9c:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8016e3c <__ieee754_asinf+0x1a4>
 8016da0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016da4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8016e40 <__ieee754_asinf+0x1a8>
 8016da8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016dac:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8016e44 <__ieee754_asinf+0x1ac>
 8016db0:	eee7 6a27 	vfma.f32	s13, s14, s15
 8016db4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8016e38 <__ieee754_asinf+0x1a0>
 8016db8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8016dbc:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8016e4c <__ieee754_asinf+0x1b4>
 8016dc0:	eee7 6a86 	vfma.f32	s13, s15, s12
 8016dc4:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 8016e50 <__ieee754_asinf+0x1b8>
 8016dc8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8016dcc:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8016e54 <__ieee754_asinf+0x1bc>
 8016dd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016dd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016dd8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8016ddc:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8016de0:	eea0 0a27 	vfma.f32	s0, s0, s15
 8016de4:	e76c      	b.n	8016cc0 <__ieee754_asinf+0x28>
 8016de6:	ee10 3a10 	vmov	r3, s0
 8016dea:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8016dee:	f023 030f 	bic.w	r3, r3, #15
 8016df2:	ee07 3a10 	vmov	s14, r3
 8016df6:	eea7 8a47 	vfms.f32	s16, s14, s14
 8016dfa:	ee70 5a00 	vadd.f32	s11, s0, s0
 8016dfe:	ee30 0a07 	vadd.f32	s0, s0, s14
 8016e02:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8016e24 <__ieee754_asinf+0x18c>
 8016e06:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8016e0a:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8016e60 <__ieee754_asinf+0x1c8>
 8016e0e:	eee5 7a66 	vfms.f32	s15, s10, s13
 8016e12:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8016e16:	eeb0 6a40 	vmov.f32	s12, s0
 8016e1a:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016e1e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016e22:	e7aa      	b.n	8016d7a <__ieee754_asinf+0xe2>
 8016e24:	b33bbd2e 	.word	0xb33bbd2e
 8016e28:	3fc90fdb 	.word	0x3fc90fdb
 8016e2c:	7149f2ca 	.word	0x7149f2ca
 8016e30:	3a4f7f04 	.word	0x3a4f7f04
 8016e34:	3811ef08 	.word	0x3811ef08
 8016e38:	3e2aaaab 	.word	0x3e2aaaab
 8016e3c:	bd241146 	.word	0xbd241146
 8016e40:	3e4e0aa8 	.word	0x3e4e0aa8
 8016e44:	bea6b090 	.word	0xbea6b090
 8016e48:	3d9dc62e 	.word	0x3d9dc62e
 8016e4c:	bf303361 	.word	0xbf303361
 8016e50:	4001572d 	.word	0x4001572d
 8016e54:	c019d139 	.word	0xc019d139
 8016e58:	3f799999 	.word	0x3f799999
 8016e5c:	333bbd2e 	.word	0x333bbd2e
 8016e60:	3f490fdb 	.word	0x3f490fdb

08016e64 <__ieee754_atan2f>:
 8016e64:	ee10 2a90 	vmov	r2, s1
 8016e68:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8016e6c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016e70:	b510      	push	{r4, lr}
 8016e72:	eef0 7a40 	vmov.f32	s15, s0
 8016e76:	d806      	bhi.n	8016e86 <__ieee754_atan2f+0x22>
 8016e78:	ee10 0a10 	vmov	r0, s0
 8016e7c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8016e80:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016e84:	d904      	bls.n	8016e90 <__ieee754_atan2f+0x2c>
 8016e86:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8016e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8016e8e:	bd10      	pop	{r4, pc}
 8016e90:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8016e94:	d103      	bne.n	8016e9e <__ieee754_atan2f+0x3a>
 8016e96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e9a:	f000 be43 	b.w	8017b24 <atanf>
 8016e9e:	1794      	asrs	r4, r2, #30
 8016ea0:	f004 0402 	and.w	r4, r4, #2
 8016ea4:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8016ea8:	b943      	cbnz	r3, 8016ebc <__ieee754_atan2f+0x58>
 8016eaa:	2c02      	cmp	r4, #2
 8016eac:	d05e      	beq.n	8016f6c <__ieee754_atan2f+0x108>
 8016eae:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8016f80 <__ieee754_atan2f+0x11c>
 8016eb2:	2c03      	cmp	r4, #3
 8016eb4:	bf08      	it	eq
 8016eb6:	eef0 7a47 	vmoveq.f32	s15, s14
 8016eba:	e7e6      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016ebc:	b941      	cbnz	r1, 8016ed0 <__ieee754_atan2f+0x6c>
 8016ebe:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8016f84 <__ieee754_atan2f+0x120>
 8016ec2:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8016f88 <__ieee754_atan2f+0x124>
 8016ec6:	2800      	cmp	r0, #0
 8016ec8:	bfb8      	it	lt
 8016eca:	eef0 7a47 	vmovlt.f32	s15, s14
 8016ece:	e7dc      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016ed0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8016ed4:	d110      	bne.n	8016ef8 <__ieee754_atan2f+0x94>
 8016ed6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016eda:	f104 34ff 	add.w	r4, r4, #4294967295
 8016ede:	d107      	bne.n	8016ef0 <__ieee754_atan2f+0x8c>
 8016ee0:	2c02      	cmp	r4, #2
 8016ee2:	d846      	bhi.n	8016f72 <__ieee754_atan2f+0x10e>
 8016ee4:	4b29      	ldr	r3, [pc, #164]	@ (8016f8c <__ieee754_atan2f+0x128>)
 8016ee6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8016eea:	edd3 7a00 	vldr	s15, [r3]
 8016eee:	e7cc      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016ef0:	2c02      	cmp	r4, #2
 8016ef2:	d841      	bhi.n	8016f78 <__ieee754_atan2f+0x114>
 8016ef4:	4b26      	ldr	r3, [pc, #152]	@ (8016f90 <__ieee754_atan2f+0x12c>)
 8016ef6:	e7f6      	b.n	8016ee6 <__ieee754_atan2f+0x82>
 8016ef8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016efc:	d0df      	beq.n	8016ebe <__ieee754_atan2f+0x5a>
 8016efe:	1a5b      	subs	r3, r3, r1
 8016f00:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8016f04:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8016f08:	da1a      	bge.n	8016f40 <__ieee754_atan2f+0xdc>
 8016f0a:	2a00      	cmp	r2, #0
 8016f0c:	da01      	bge.n	8016f12 <__ieee754_atan2f+0xae>
 8016f0e:	313c      	adds	r1, #60	@ 0x3c
 8016f10:	db19      	blt.n	8016f46 <__ieee754_atan2f+0xe2>
 8016f12:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8016f16:	f7ff fbb9 	bl	801668c <fabsf>
 8016f1a:	f000 fe03 	bl	8017b24 <atanf>
 8016f1e:	eef0 7a40 	vmov.f32	s15, s0
 8016f22:	2c01      	cmp	r4, #1
 8016f24:	d012      	beq.n	8016f4c <__ieee754_atan2f+0xe8>
 8016f26:	2c02      	cmp	r4, #2
 8016f28:	d017      	beq.n	8016f5a <__ieee754_atan2f+0xf6>
 8016f2a:	2c00      	cmp	r4, #0
 8016f2c:	d0ad      	beq.n	8016e8a <__ieee754_atan2f+0x26>
 8016f2e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8016f94 <__ieee754_atan2f+0x130>
 8016f32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f36:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8016f98 <__ieee754_atan2f+0x134>
 8016f3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016f3e:	e7a4      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016f40:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8016f84 <__ieee754_atan2f+0x120>
 8016f44:	e7ed      	b.n	8016f22 <__ieee754_atan2f+0xbe>
 8016f46:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8016f9c <__ieee754_atan2f+0x138>
 8016f4a:	e7ea      	b.n	8016f22 <__ieee754_atan2f+0xbe>
 8016f4c:	ee17 3a90 	vmov	r3, s15
 8016f50:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8016f54:	ee07 3a90 	vmov	s15, r3
 8016f58:	e797      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016f5a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8016f94 <__ieee754_atan2f+0x130>
 8016f5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016f62:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8016f98 <__ieee754_atan2f+0x134>
 8016f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016f6a:	e78e      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016f6c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8016f98 <__ieee754_atan2f+0x134>
 8016f70:	e78b      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016f72:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8016fa0 <__ieee754_atan2f+0x13c>
 8016f76:	e788      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016f78:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8016f9c <__ieee754_atan2f+0x138>
 8016f7c:	e785      	b.n	8016e8a <__ieee754_atan2f+0x26>
 8016f7e:	bf00      	nop
 8016f80:	c0490fdb 	.word	0xc0490fdb
 8016f84:	3fc90fdb 	.word	0x3fc90fdb
 8016f88:	bfc90fdb 	.word	0xbfc90fdb
 8016f8c:	08019a2c 	.word	0x08019a2c
 8016f90:	08019a20 	.word	0x08019a20
 8016f94:	33bbbd2e 	.word	0x33bbbd2e
 8016f98:	40490fdb 	.word	0x40490fdb
 8016f9c:	00000000 	.word	0x00000000
 8016fa0:	3f490fdb 	.word	0x3f490fdb

08016fa4 <__ieee754_expf>:
 8016fa4:	ee10 2a10 	vmov	r2, s0
 8016fa8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8016fac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8016fb0:	d902      	bls.n	8016fb8 <__ieee754_expf+0x14>
 8016fb2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016fb6:	4770      	bx	lr
 8016fb8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8016fbc:	d106      	bne.n	8016fcc <__ieee754_expf+0x28>
 8016fbe:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80170f8 <__ieee754_expf+0x154>
 8016fc2:	2900      	cmp	r1, #0
 8016fc4:	bf18      	it	ne
 8016fc6:	eeb0 0a67 	vmovne.f32	s0, s15
 8016fca:	4770      	bx	lr
 8016fcc:	484b      	ldr	r0, [pc, #300]	@ (80170fc <__ieee754_expf+0x158>)
 8016fce:	4282      	cmp	r2, r0
 8016fd0:	dd02      	ble.n	8016fd8 <__ieee754_expf+0x34>
 8016fd2:	2000      	movs	r0, #0
 8016fd4:	f000 bf00 	b.w	8017dd8 <__math_oflowf>
 8016fd8:	2a00      	cmp	r2, #0
 8016fda:	da05      	bge.n	8016fe8 <__ieee754_expf+0x44>
 8016fdc:	4a48      	ldr	r2, [pc, #288]	@ (8017100 <__ieee754_expf+0x15c>)
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	d902      	bls.n	8016fe8 <__ieee754_expf+0x44>
 8016fe2:	2000      	movs	r0, #0
 8016fe4:	f000 bef2 	b.w	8017dcc <__math_uflowf>
 8016fe8:	4a46      	ldr	r2, [pc, #280]	@ (8017104 <__ieee754_expf+0x160>)
 8016fea:	4293      	cmp	r3, r2
 8016fec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8016ff0:	d952      	bls.n	8017098 <__ieee754_expf+0xf4>
 8016ff2:	4a45      	ldr	r2, [pc, #276]	@ (8017108 <__ieee754_expf+0x164>)
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8016ffa:	d834      	bhi.n	8017066 <__ieee754_expf+0xc2>
 8016ffc:	4b43      	ldr	r3, [pc, #268]	@ (801710c <__ieee754_expf+0x168>)
 8016ffe:	4413      	add	r3, r2
 8017000:	ed93 7a00 	vldr	s14, [r3]
 8017004:	4b42      	ldr	r3, [pc, #264]	@ (8017110 <__ieee754_expf+0x16c>)
 8017006:	4413      	add	r3, r2
 8017008:	ee30 7a47 	vsub.f32	s14, s0, s14
 801700c:	f1c1 0201 	rsb	r2, r1, #1
 8017010:	edd3 7a00 	vldr	s15, [r3]
 8017014:	1a52      	subs	r2, r2, r1
 8017016:	ee37 0a67 	vsub.f32	s0, s14, s15
 801701a:	ee20 6a00 	vmul.f32	s12, s0, s0
 801701e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8017114 <__ieee754_expf+0x170>
 8017022:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8017118 <__ieee754_expf+0x174>
 8017026:	eee6 6a05 	vfma.f32	s13, s12, s10
 801702a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 801711c <__ieee754_expf+0x178>
 801702e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8017032:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8017120 <__ieee754_expf+0x17c>
 8017036:	eee5 6a06 	vfma.f32	s13, s10, s12
 801703a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8017124 <__ieee754_expf+0x180>
 801703e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8017042:	eef0 6a40 	vmov.f32	s13, s0
 8017046:	eee5 6a46 	vfms.f32	s13, s10, s12
 801704a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 801704e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8017052:	bb92      	cbnz	r2, 80170ba <__ieee754_expf+0x116>
 8017054:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8017058:	eec5 7a26 	vdiv.f32	s15, s10, s13
 801705c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8017060:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8017064:	4770      	bx	lr
 8017066:	4b30      	ldr	r3, [pc, #192]	@ (8017128 <__ieee754_expf+0x184>)
 8017068:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 801712c <__ieee754_expf+0x188>
 801706c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8017130 <__ieee754_expf+0x18c>
 8017070:	4413      	add	r3, r2
 8017072:	edd3 7a00 	vldr	s15, [r3]
 8017076:	eee0 7a07 	vfma.f32	s15, s0, s14
 801707a:	eeb0 7a40 	vmov.f32	s14, s0
 801707e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017082:	ee17 2a90 	vmov	r2, s15
 8017086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801708a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801708e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8017134 <__ieee754_expf+0x190>
 8017092:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017096:	e7be      	b.n	8017016 <__ieee754_expf+0x72>
 8017098:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 801709c:	d20b      	bcs.n	80170b6 <__ieee754_expf+0x112>
 801709e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8017138 <__ieee754_expf+0x194>
 80170a2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80170a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80170aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170ae:	dd02      	ble.n	80170b6 <__ieee754_expf+0x112>
 80170b0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80170b4:	4770      	bx	lr
 80170b6:	2200      	movs	r2, #0
 80170b8:	e7af      	b.n	801701a <__ieee754_expf+0x76>
 80170ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 80170be:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80170c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80170c6:	bfb8      	it	lt
 80170c8:	3264      	addlt	r2, #100	@ 0x64
 80170ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80170ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80170d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80170d6:	ee17 3a90 	vmov	r3, s15
 80170da:	bfab      	itete	ge
 80170dc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80170e0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80170e4:	ee00 3a10 	vmovge	s0, r3
 80170e8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 801713c <__ieee754_expf+0x198>
 80170ec:	bfbc      	itt	lt
 80170ee:	ee00 3a10 	vmovlt	s0, r3
 80170f2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80170f6:	4770      	bx	lr
 80170f8:	00000000 	.word	0x00000000
 80170fc:	42b17217 	.word	0x42b17217
 8017100:	42cff1b5 	.word	0x42cff1b5
 8017104:	3eb17218 	.word	0x3eb17218
 8017108:	3f851591 	.word	0x3f851591
 801710c:	08019a40 	.word	0x08019a40
 8017110:	08019a38 	.word	0x08019a38
 8017114:	3331bb4c 	.word	0x3331bb4c
 8017118:	b5ddea0e 	.word	0xb5ddea0e
 801711c:	388ab355 	.word	0x388ab355
 8017120:	bb360b61 	.word	0xbb360b61
 8017124:	3e2aaaab 	.word	0x3e2aaaab
 8017128:	08019a48 	.word	0x08019a48
 801712c:	3fb8aa3b 	.word	0x3fb8aa3b
 8017130:	3f317180 	.word	0x3f317180
 8017134:	3717f7d1 	.word	0x3717f7d1
 8017138:	7149f2ca 	.word	0x7149f2ca
 801713c:	0d800000 	.word	0x0d800000

08017140 <__ieee754_logf>:
 8017140:	ee10 3a10 	vmov	r3, s0
 8017144:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8017148:	d106      	bne.n	8017158 <__ieee754_logf+0x18>
 801714a:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 80172e4 <__ieee754_logf+0x1a4>
 801714e:	eddf 7a66 	vldr	s15, [pc, #408]	@ 80172e8 <__ieee754_logf+0x1a8>
 8017152:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017156:	4770      	bx	lr
 8017158:	2b00      	cmp	r3, #0
 801715a:	461a      	mov	r2, r3
 801715c:	da02      	bge.n	8017164 <__ieee754_logf+0x24>
 801715e:	ee30 7a40 	vsub.f32	s14, s0, s0
 8017162:	e7f4      	b.n	801714e <__ieee754_logf+0xe>
 8017164:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017168:	db02      	blt.n	8017170 <__ieee754_logf+0x30>
 801716a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801716e:	4770      	bx	lr
 8017170:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017174:	bfb8      	it	lt
 8017176:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 80172ec <__ieee754_logf+0x1ac>
 801717a:	485d      	ldr	r0, [pc, #372]	@ (80172f0 <__ieee754_logf+0x1b0>)
 801717c:	bfbe      	ittt	lt
 801717e:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8017182:	f06f 0118 	mvnlt.w	r1, #24
 8017186:	ee17 2a90 	vmovlt	r2, s15
 801718a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 801718e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8017192:	4410      	add	r0, r2
 8017194:	bfa8      	it	ge
 8017196:	2100      	movge	r1, #0
 8017198:	3b7f      	subs	r3, #127	@ 0x7f
 801719a:	440b      	add	r3, r1
 801719c:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 80171a0:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 80171a4:	4311      	orrs	r1, r2
 80171a6:	ee00 1a10 	vmov	s0, r1
 80171aa:	4952      	ldr	r1, [pc, #328]	@ (80172f4 <__ieee754_logf+0x1b4>)
 80171ac:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 80171b0:	f102 000f 	add.w	r0, r2, #15
 80171b4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80171b8:	4001      	ands	r1, r0
 80171ba:	ee30 0a67 	vsub.f32	s0, s0, s15
 80171be:	bb89      	cbnz	r1, 8017224 <__ieee754_logf+0xe4>
 80171c0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80171c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c8:	d10f      	bne.n	80171ea <__ieee754_logf+0xaa>
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	f000 8087 	beq.w	80172de <__ieee754_logf+0x19e>
 80171d0:	ee07 3a90 	vmov	s15, r3
 80171d4:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 80172f8 <__ieee754_logf+0x1b8>
 80171d8:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80172fc <__ieee754_logf+0x1bc>
 80171dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80171e0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80171e4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80171e8:	4770      	bx	lr
 80171ea:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8017300 <__ieee754_logf+0x1c0>
 80171ee:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80171f2:	eee0 7a66 	vfms.f32	s15, s0, s13
 80171f6:	ee20 7a00 	vmul.f32	s14, s0, s0
 80171fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80171fe:	b913      	cbnz	r3, 8017206 <__ieee754_logf+0xc6>
 8017200:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017204:	4770      	bx	lr
 8017206:	ee07 3a90 	vmov	s15, r3
 801720a:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 80172f8 <__ieee754_logf+0x1b8>
 801720e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017212:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8017216:	ee37 0a40 	vsub.f32	s0, s14, s0
 801721a:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80172fc <__ieee754_logf+0x1bc>
 801721e:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8017222:	4770      	bx	lr
 8017224:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017228:	ee70 7a27 	vadd.f32	s15, s0, s15
 801722c:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017304 <__ieee754_logf+0x1c4>
 8017230:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8017308 <__ieee754_logf+0x1c8>
 8017234:	4935      	ldr	r1, [pc, #212]	@ (801730c <__ieee754_logf+0x1cc>)
 8017236:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801723a:	4411      	add	r1, r2
 801723c:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8017240:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8017244:	430a      	orrs	r2, r1
 8017246:	2a00      	cmp	r2, #0
 8017248:	ee07 3a90 	vmov	s15, r3
 801724c:	ee26 5a06 	vmul.f32	s10, s12, s12
 8017250:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017254:	ee25 7a05 	vmul.f32	s14, s10, s10
 8017258:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8017310 <__ieee754_logf+0x1d0>
 801725c:	eee7 7a25 	vfma.f32	s15, s14, s11
 8017260:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8017314 <__ieee754_logf+0x1d4>
 8017264:	eee7 5a87 	vfma.f32	s11, s15, s14
 8017268:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8017318 <__ieee754_logf+0x1d8>
 801726c:	eee7 7a24 	vfma.f32	s15, s14, s9
 8017270:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 801731c <__ieee754_logf+0x1dc>
 8017274:	eee7 4a87 	vfma.f32	s9, s15, s14
 8017278:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8017320 <__ieee754_logf+0x1e0>
 801727c:	eee4 7a87 	vfma.f32	s15, s9, s14
 8017280:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017284:	eee5 7a87 	vfma.f32	s15, s11, s14
 8017288:	dd1a      	ble.n	80172c0 <__ieee754_logf+0x180>
 801728a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 801728e:	ee20 7a07 	vmul.f32	s14, s0, s14
 8017292:	ee27 7a00 	vmul.f32	s14, s14, s0
 8017296:	ee77 7a87 	vadd.f32	s15, s15, s14
 801729a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801729e:	b913      	cbnz	r3, 80172a6 <__ieee754_logf+0x166>
 80172a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80172a4:	e7ac      	b.n	8017200 <__ieee754_logf+0xc0>
 80172a6:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 80172f8 <__ieee754_logf+0x1b8>
 80172aa:	eee6 7a86 	vfma.f32	s15, s13, s12
 80172ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80172b2:	ee37 0a40 	vsub.f32	s0, s14, s0
 80172b6:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80172fc <__ieee754_logf+0x1bc>
 80172ba:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 80172be:	4770      	bx	lr
 80172c0:	ee70 7a67 	vsub.f32	s15, s0, s15
 80172c4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80172c8:	b913      	cbnz	r3, 80172d0 <__ieee754_logf+0x190>
 80172ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 80172ce:	4770      	bx	lr
 80172d0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80172f8 <__ieee754_logf+0x1b8>
 80172d4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80172d8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80172dc:	e7eb      	b.n	80172b6 <__ieee754_logf+0x176>
 80172de:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 80172e8 <__ieee754_logf+0x1a8>
 80172e2:	4770      	bx	lr
 80172e4:	cc000000 	.word	0xcc000000
 80172e8:	00000000 	.word	0x00000000
 80172ec:	4c000000 	.word	0x4c000000
 80172f0:	004afb20 	.word	0x004afb20
 80172f4:	007ffff0 	.word	0x007ffff0
 80172f8:	3717f7d1 	.word	0x3717f7d1
 80172fc:	3f317180 	.word	0x3f317180
 8017300:	3eaaaaab 	.word	0x3eaaaaab
 8017304:	3e1cd04f 	.word	0x3e1cd04f
 8017308:	3e178897 	.word	0x3e178897
 801730c:	ffcf5c30 	.word	0xffcf5c30
 8017310:	3e638e29 	.word	0x3e638e29
 8017314:	3ecccccd 	.word	0x3ecccccd
 8017318:	3e3a3325 	.word	0x3e3a3325
 801731c:	3e924925 	.word	0x3e924925
 8017320:	3f2aaaab 	.word	0x3f2aaaab

08017324 <__ieee754_powf>:
 8017324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017328:	ee10 4a90 	vmov	r4, s1
 801732c:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8017330:	ed2d 8b02 	vpush	{d8}
 8017334:	ee10 6a10 	vmov	r6, s0
 8017338:	eeb0 8a40 	vmov.f32	s16, s0
 801733c:	eef0 8a60 	vmov.f32	s17, s1
 8017340:	d10c      	bne.n	801735c <__ieee754_powf+0x38>
 8017342:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8017346:	0076      	lsls	r6, r6, #1
 8017348:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 801734c:	f240 829c 	bls.w	8017888 <__ieee754_powf+0x564>
 8017350:	ee38 0a28 	vadd.f32	s0, s16, s17
 8017354:	ecbd 8b02 	vpop	{d8}
 8017358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801735c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8017360:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8017364:	d802      	bhi.n	801736c <__ieee754_powf+0x48>
 8017366:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801736a:	d908      	bls.n	801737e <__ieee754_powf+0x5a>
 801736c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8017370:	d1ee      	bne.n	8017350 <__ieee754_powf+0x2c>
 8017372:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8017376:	0064      	lsls	r4, r4, #1
 8017378:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801737c:	e7e6      	b.n	801734c <__ieee754_powf+0x28>
 801737e:	2e00      	cmp	r6, #0
 8017380:	da1e      	bge.n	80173c0 <__ieee754_powf+0x9c>
 8017382:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8017386:	d22b      	bcs.n	80173e0 <__ieee754_powf+0xbc>
 8017388:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 801738c:	d332      	bcc.n	80173f4 <__ieee754_powf+0xd0>
 801738e:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8017392:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8017396:	fa49 f503 	asr.w	r5, r9, r3
 801739a:	fa05 f303 	lsl.w	r3, r5, r3
 801739e:	454b      	cmp	r3, r9
 80173a0:	d126      	bne.n	80173f0 <__ieee754_powf+0xcc>
 80173a2:	f005 0501 	and.w	r5, r5, #1
 80173a6:	f1c5 0502 	rsb	r5, r5, #2
 80173aa:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80173ae:	d122      	bne.n	80173f6 <__ieee754_powf+0xd2>
 80173b0:	2c00      	cmp	r4, #0
 80173b2:	f280 826f 	bge.w	8017894 <__ieee754_powf+0x570>
 80173b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80173ba:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80173be:	e7c9      	b.n	8017354 <__ieee754_powf+0x30>
 80173c0:	2500      	movs	r5, #0
 80173c2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80173c6:	d1f0      	bne.n	80173aa <__ieee754_powf+0x86>
 80173c8:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80173cc:	f000 825c 	beq.w	8017888 <__ieee754_powf+0x564>
 80173d0:	d908      	bls.n	80173e4 <__ieee754_powf+0xc0>
 80173d2:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 8017734 <__ieee754_powf+0x410>
 80173d6:	2c00      	cmp	r4, #0
 80173d8:	bfa8      	it	ge
 80173da:	eeb0 0a68 	vmovge.f32	s0, s17
 80173de:	e7b9      	b.n	8017354 <__ieee754_powf+0x30>
 80173e0:	2502      	movs	r5, #2
 80173e2:	e7ee      	b.n	80173c2 <__ieee754_powf+0x9e>
 80173e4:	2c00      	cmp	r4, #0
 80173e6:	f280 8252 	bge.w	801788e <__ieee754_powf+0x56a>
 80173ea:	eeb1 0a68 	vneg.f32	s0, s17
 80173ee:	e7b1      	b.n	8017354 <__ieee754_powf+0x30>
 80173f0:	2500      	movs	r5, #0
 80173f2:	e7da      	b.n	80173aa <__ieee754_powf+0x86>
 80173f4:	2500      	movs	r5, #0
 80173f6:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 80173fa:	d102      	bne.n	8017402 <__ieee754_powf+0xde>
 80173fc:	ee28 0a08 	vmul.f32	s0, s16, s16
 8017400:	e7a8      	b.n	8017354 <__ieee754_powf+0x30>
 8017402:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8017406:	d109      	bne.n	801741c <__ieee754_powf+0xf8>
 8017408:	2e00      	cmp	r6, #0
 801740a:	db07      	blt.n	801741c <__ieee754_powf+0xf8>
 801740c:	eeb0 0a48 	vmov.f32	s0, s16
 8017410:	ecbd 8b02 	vpop	{d8}
 8017414:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017418:	f7ff b9c2 	b.w	80167a0 <__ieee754_sqrtf>
 801741c:	eeb0 0a48 	vmov.f32	s0, s16
 8017420:	f7ff f934 	bl	801668c <fabsf>
 8017424:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8017428:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801742c:	4647      	mov	r7, r8
 801742e:	d002      	beq.n	8017436 <__ieee754_powf+0x112>
 8017430:	f1b8 0f00 	cmp.w	r8, #0
 8017434:	d117      	bne.n	8017466 <__ieee754_powf+0x142>
 8017436:	2c00      	cmp	r4, #0
 8017438:	bfbc      	itt	lt
 801743a:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801743e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8017442:	2e00      	cmp	r6, #0
 8017444:	da86      	bge.n	8017354 <__ieee754_powf+0x30>
 8017446:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801744a:	ea58 0805 	orrs.w	r8, r8, r5
 801744e:	d104      	bne.n	801745a <__ieee754_powf+0x136>
 8017450:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017454:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017458:	e77c      	b.n	8017354 <__ieee754_powf+0x30>
 801745a:	2d01      	cmp	r5, #1
 801745c:	f47f af7a 	bne.w	8017354 <__ieee754_powf+0x30>
 8017460:	eeb1 0a40 	vneg.f32	s0, s0
 8017464:	e776      	b.n	8017354 <__ieee754_powf+0x30>
 8017466:	0ff0      	lsrs	r0, r6, #31
 8017468:	3801      	subs	r0, #1
 801746a:	ea55 0300 	orrs.w	r3, r5, r0
 801746e:	d104      	bne.n	801747a <__ieee754_powf+0x156>
 8017470:	ee38 8a48 	vsub.f32	s16, s16, s16
 8017474:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8017478:	e76c      	b.n	8017354 <__ieee754_powf+0x30>
 801747a:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801747e:	d973      	bls.n	8017568 <__ieee754_powf+0x244>
 8017480:	4bad      	ldr	r3, [pc, #692]	@ (8017738 <__ieee754_powf+0x414>)
 8017482:	4598      	cmp	r8, r3
 8017484:	d808      	bhi.n	8017498 <__ieee754_powf+0x174>
 8017486:	2c00      	cmp	r4, #0
 8017488:	da0b      	bge.n	80174a2 <__ieee754_powf+0x17e>
 801748a:	2000      	movs	r0, #0
 801748c:	ecbd 8b02 	vpop	{d8}
 8017490:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017494:	f000 bca0 	b.w	8017dd8 <__math_oflowf>
 8017498:	4ba8      	ldr	r3, [pc, #672]	@ (801773c <__ieee754_powf+0x418>)
 801749a:	4598      	cmp	r8, r3
 801749c:	d908      	bls.n	80174b0 <__ieee754_powf+0x18c>
 801749e:	2c00      	cmp	r4, #0
 80174a0:	dcf3      	bgt.n	801748a <__ieee754_powf+0x166>
 80174a2:	2000      	movs	r0, #0
 80174a4:	ecbd 8b02 	vpop	{d8}
 80174a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174ac:	f000 bc8e 	b.w	8017dcc <__math_uflowf>
 80174b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80174b4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80174b8:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 8017740 <__ieee754_powf+0x41c>
 80174bc:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80174c0:	eee0 6a67 	vfms.f32	s13, s0, s15
 80174c4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80174c8:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80174cc:	ee20 7a00 	vmul.f32	s14, s0, s0
 80174d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80174d4:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 8017744 <__ieee754_powf+0x420>
 80174d8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80174dc:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 8017748 <__ieee754_powf+0x424>
 80174e0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80174e4:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 801774c <__ieee754_powf+0x428>
 80174e8:	eef0 6a67 	vmov.f32	s13, s15
 80174ec:	eee0 6a07 	vfma.f32	s13, s0, s14
 80174f0:	ee16 3a90 	vmov	r3, s13
 80174f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80174f8:	f023 030f 	bic.w	r3, r3, #15
 80174fc:	ee06 3a90 	vmov	s13, r3
 8017500:	eee0 6a47 	vfms.f32	s13, s0, s14
 8017504:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017508:	3d01      	subs	r5, #1
 801750a:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 801750e:	4305      	orrs	r5, r0
 8017510:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017514:	f024 040f 	bic.w	r4, r4, #15
 8017518:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 801751c:	bf18      	it	ne
 801751e:	eeb0 8a47 	vmovne.f32	s16, s14
 8017522:	ee07 4a10 	vmov	s14, r4
 8017526:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801752a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801752e:	ee07 3a90 	vmov	s15, r3
 8017532:	eee7 0a27 	vfma.f32	s1, s14, s15
 8017536:	ee07 4a10 	vmov	s14, r4
 801753a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801753e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8017542:	ee17 1a10 	vmov	r1, s14
 8017546:	2900      	cmp	r1, #0
 8017548:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801754c:	f340 80dd 	ble.w	801770a <__ieee754_powf+0x3e6>
 8017550:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8017554:	f240 80ca 	bls.w	80176ec <__ieee754_powf+0x3c8>
 8017558:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801755c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017560:	bf4c      	ite	mi
 8017562:	2001      	movmi	r0, #1
 8017564:	2000      	movpl	r0, #0
 8017566:	e791      	b.n	801748c <__ieee754_powf+0x168>
 8017568:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801756c:	bf01      	itttt	eq
 801756e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8017750 <__ieee754_powf+0x42c>
 8017572:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8017576:	f06f 0317 	mvneq.w	r3, #23
 801757a:	ee17 7a90 	vmoveq	r7, s15
 801757e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8017582:	bf18      	it	ne
 8017584:	2300      	movne	r3, #0
 8017586:	3a7f      	subs	r2, #127	@ 0x7f
 8017588:	441a      	add	r2, r3
 801758a:	4b72      	ldr	r3, [pc, #456]	@ (8017754 <__ieee754_powf+0x430>)
 801758c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8017590:	429f      	cmp	r7, r3
 8017592:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8017596:	dd06      	ble.n	80175a6 <__ieee754_powf+0x282>
 8017598:	4b6f      	ldr	r3, [pc, #444]	@ (8017758 <__ieee754_powf+0x434>)
 801759a:	429f      	cmp	r7, r3
 801759c:	f340 80a4 	ble.w	80176e8 <__ieee754_powf+0x3c4>
 80175a0:	3201      	adds	r2, #1
 80175a2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80175a6:	2600      	movs	r6, #0
 80175a8:	4b6c      	ldr	r3, [pc, #432]	@ (801775c <__ieee754_powf+0x438>)
 80175aa:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80175ae:	ee07 1a10 	vmov	s14, r1
 80175b2:	edd3 5a00 	vldr	s11, [r3]
 80175b6:	4b6a      	ldr	r3, [pc, #424]	@ (8017760 <__ieee754_powf+0x43c>)
 80175b8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80175bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80175c0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80175c4:	1049      	asrs	r1, r1, #1
 80175c6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80175ca:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80175ce:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80175d2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80175d6:	ee07 1a90 	vmov	s15, r1
 80175da:	ee26 5a24 	vmul.f32	s10, s12, s9
 80175de:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80175e2:	ee15 7a10 	vmov	r7, s10
 80175e6:	401f      	ands	r7, r3
 80175e8:	ee06 7a90 	vmov	s13, r7
 80175ec:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80175f0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80175f4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80175f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80175fc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8017764 <__ieee754_powf+0x440>
 8017600:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8017768 <__ieee754_powf+0x444>
 8017604:	eee7 5a87 	vfma.f32	s11, s15, s14
 8017608:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801776c <__ieee754_powf+0x448>
 801760c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017610:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8017740 <__ieee754_powf+0x41c>
 8017614:	eee7 5a27 	vfma.f32	s11, s14, s15
 8017618:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8017770 <__ieee754_powf+0x44c>
 801761c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8017620:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8017774 <__ieee754_powf+0x450>
 8017624:	ee26 6a24 	vmul.f32	s12, s12, s9
 8017628:	eee7 5a27 	vfma.f32	s11, s14, s15
 801762c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8017630:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8017634:	ee27 7a06 	vmul.f32	s14, s14, s12
 8017638:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801763c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8017640:	eef0 5a67 	vmov.f32	s11, s15
 8017644:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8017648:	ee75 5a87 	vadd.f32	s11, s11, s14
 801764c:	ee15 1a90 	vmov	r1, s11
 8017650:	4019      	ands	r1, r3
 8017652:	ee05 1a90 	vmov	s11, r1
 8017656:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801765a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801765e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8017662:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017666:	eee6 7a25 	vfma.f32	s15, s12, s11
 801766a:	eeb0 6a67 	vmov.f32	s12, s15
 801766e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017672:	ee16 1a10 	vmov	r1, s12
 8017676:	4019      	ands	r1, r3
 8017678:	ee06 1a10 	vmov	s12, r1
 801767c:	eeb0 7a46 	vmov.f32	s14, s12
 8017680:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8017684:	493c      	ldr	r1, [pc, #240]	@ (8017778 <__ieee754_powf+0x454>)
 8017686:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801768a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801768e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801777c <__ieee754_powf+0x458>
 8017692:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8017780 <__ieee754_powf+0x45c>
 8017696:	ee67 7a87 	vmul.f32	s15, s15, s14
 801769a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8017784 <__ieee754_powf+0x460>
 801769e:	eee6 7a07 	vfma.f32	s15, s12, s14
 80176a2:	ed91 7a00 	vldr	s14, [r1]
 80176a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80176aa:	ee07 2a10 	vmov	s14, r2
 80176ae:	eef0 6a67 	vmov.f32	s13, s15
 80176b2:	4a35      	ldr	r2, [pc, #212]	@ (8017788 <__ieee754_powf+0x464>)
 80176b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80176b8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80176bc:	ed92 5a00 	vldr	s10, [r2]
 80176c0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80176c4:	ee76 6a85 	vadd.f32	s13, s13, s10
 80176c8:	ee76 6a87 	vadd.f32	s13, s13, s14
 80176cc:	ee16 2a90 	vmov	r2, s13
 80176d0:	4013      	ands	r3, r2
 80176d2:	ee06 3a90 	vmov	s13, r3
 80176d6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80176da:	ee37 7a45 	vsub.f32	s14, s14, s10
 80176de:	eea6 7a65 	vfms.f32	s14, s12, s11
 80176e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80176e6:	e70f      	b.n	8017508 <__ieee754_powf+0x1e4>
 80176e8:	2601      	movs	r6, #1
 80176ea:	e75d      	b.n	80175a8 <__ieee754_powf+0x284>
 80176ec:	d152      	bne.n	8017794 <__ieee754_powf+0x470>
 80176ee:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801778c <__ieee754_powf+0x468>
 80176f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80176f6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80176fa:	eef4 6ac7 	vcmpe.f32	s13, s14
 80176fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017702:	f73f af29 	bgt.w	8017558 <__ieee754_powf+0x234>
 8017706:	2386      	movs	r3, #134	@ 0x86
 8017708:	e048      	b.n	801779c <__ieee754_powf+0x478>
 801770a:	4a21      	ldr	r2, [pc, #132]	@ (8017790 <__ieee754_powf+0x46c>)
 801770c:	4293      	cmp	r3, r2
 801770e:	d907      	bls.n	8017720 <__ieee754_powf+0x3fc>
 8017710:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017718:	bf4c      	ite	mi
 801771a:	2001      	movmi	r0, #1
 801771c:	2000      	movpl	r0, #0
 801771e:	e6c1      	b.n	80174a4 <__ieee754_powf+0x180>
 8017720:	d138      	bne.n	8017794 <__ieee754_powf+0x470>
 8017722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017726:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801772a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801772e:	dbea      	blt.n	8017706 <__ieee754_powf+0x3e2>
 8017730:	e7ee      	b.n	8017710 <__ieee754_powf+0x3ec>
 8017732:	bf00      	nop
 8017734:	00000000 	.word	0x00000000
 8017738:	3f7ffff3 	.word	0x3f7ffff3
 801773c:	3f800007 	.word	0x3f800007
 8017740:	3eaaaaab 	.word	0x3eaaaaab
 8017744:	3fb8aa3b 	.word	0x3fb8aa3b
 8017748:	36eca570 	.word	0x36eca570
 801774c:	3fb8aa00 	.word	0x3fb8aa00
 8017750:	4b800000 	.word	0x4b800000
 8017754:	001cc471 	.word	0x001cc471
 8017758:	005db3d6 	.word	0x005db3d6
 801775c:	08019a60 	.word	0x08019a60
 8017760:	fffff000 	.word	0xfffff000
 8017764:	3e6c3255 	.word	0x3e6c3255
 8017768:	3e53f142 	.word	0x3e53f142
 801776c:	3e8ba305 	.word	0x3e8ba305
 8017770:	3edb6db7 	.word	0x3edb6db7
 8017774:	3f19999a 	.word	0x3f19999a
 8017778:	08019a50 	.word	0x08019a50
 801777c:	3f76384f 	.word	0x3f76384f
 8017780:	3f763800 	.word	0x3f763800
 8017784:	369dc3a0 	.word	0x369dc3a0
 8017788:	08019a58 	.word	0x08019a58
 801778c:	3338aa3c 	.word	0x3338aa3c
 8017790:	43160000 	.word	0x43160000
 8017794:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8017798:	d971      	bls.n	801787e <__ieee754_powf+0x55a>
 801779a:	15db      	asrs	r3, r3, #23
 801779c:	3b7e      	subs	r3, #126	@ 0x7e
 801779e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80177a2:	4118      	asrs	r0, r3
 80177a4:	4408      	add	r0, r1
 80177a6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80177aa:	4a3c      	ldr	r2, [pc, #240]	@ (801789c <__ieee754_powf+0x578>)
 80177ac:	3b7f      	subs	r3, #127	@ 0x7f
 80177ae:	411a      	asrs	r2, r3
 80177b0:	4002      	ands	r2, r0
 80177b2:	ee07 2a10 	vmov	s14, r2
 80177b6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80177ba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80177be:	f1c3 0317 	rsb	r3, r3, #23
 80177c2:	4118      	asrs	r0, r3
 80177c4:	2900      	cmp	r1, #0
 80177c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80177ca:	bfb8      	it	lt
 80177cc:	4240      	neglt	r0, r0
 80177ce:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80177d2:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80178a0 <__ieee754_powf+0x57c>
 80177d6:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 80178a4 <__ieee754_powf+0x580>
 80177da:	ee17 3a10 	vmov	r3, s14
 80177de:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80177e2:	f023 030f 	bic.w	r3, r3, #15
 80177e6:	ee07 3a10 	vmov	s14, r3
 80177ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80177ee:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80177f2:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80177f6:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 80178a8 <__ieee754_powf+0x584>
 80177fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80177fe:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8017802:	eef0 6a67 	vmov.f32	s13, s15
 8017806:	eee7 6a06 	vfma.f32	s13, s14, s12
 801780a:	eef0 5a66 	vmov.f32	s11, s13
 801780e:	eee7 5a46 	vfms.f32	s11, s14, s12
 8017812:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017816:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801781a:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 80178ac <__ieee754_powf+0x588>
 801781e:	eddf 5a24 	vldr	s11, [pc, #144]	@ 80178b0 <__ieee754_powf+0x58c>
 8017822:	eea7 6a25 	vfma.f32	s12, s14, s11
 8017826:	eddf 5a23 	vldr	s11, [pc, #140]	@ 80178b4 <__ieee754_powf+0x590>
 801782a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801782e:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 80178b8 <__ieee754_powf+0x594>
 8017832:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017836:	eddf 5a21 	vldr	s11, [pc, #132]	@ 80178bc <__ieee754_powf+0x598>
 801783a:	eee6 5a07 	vfma.f32	s11, s12, s14
 801783e:	eeb0 6a66 	vmov.f32	s12, s13
 8017842:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8017846:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801784a:	ee66 5a86 	vmul.f32	s11, s13, s12
 801784e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8017852:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8017856:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801785a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801785e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017862:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017866:	ee10 3a10 	vmov	r3, s0
 801786a:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801786e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017872:	da06      	bge.n	8017882 <__ieee754_powf+0x55e>
 8017874:	f000 fa2a 	bl	8017ccc <scalbnf>
 8017878:	ee20 0a08 	vmul.f32	s0, s0, s16
 801787c:	e56a      	b.n	8017354 <__ieee754_powf+0x30>
 801787e:	2000      	movs	r0, #0
 8017880:	e7a5      	b.n	80177ce <__ieee754_powf+0x4aa>
 8017882:	ee00 3a10 	vmov	s0, r3
 8017886:	e7f7      	b.n	8017878 <__ieee754_powf+0x554>
 8017888:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801788c:	e562      	b.n	8017354 <__ieee754_powf+0x30>
 801788e:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80178c0 <__ieee754_powf+0x59c>
 8017892:	e55f      	b.n	8017354 <__ieee754_powf+0x30>
 8017894:	eeb0 0a48 	vmov.f32	s0, s16
 8017898:	e55c      	b.n	8017354 <__ieee754_powf+0x30>
 801789a:	bf00      	nop
 801789c:	ff800000 	.word	0xff800000
 80178a0:	3f317218 	.word	0x3f317218
 80178a4:	3f317200 	.word	0x3f317200
 80178a8:	35bfbe8c 	.word	0x35bfbe8c
 80178ac:	b5ddea0e 	.word	0xb5ddea0e
 80178b0:	3331bb4c 	.word	0x3331bb4c
 80178b4:	388ab355 	.word	0x388ab355
 80178b8:	bb360b61 	.word	0xbb360b61
 80178bc:	3e2aaaab 	.word	0x3e2aaaab
 80178c0:	00000000 	.word	0x00000000

080178c4 <__ieee754_rem_pio2f>:
 80178c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80178c6:	ee10 6a10 	vmov	r6, s0
 80178ca:	4b88      	ldr	r3, [pc, #544]	@ (8017aec <__ieee754_rem_pio2f+0x228>)
 80178cc:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80178d0:	429d      	cmp	r5, r3
 80178d2:	b087      	sub	sp, #28
 80178d4:	4604      	mov	r4, r0
 80178d6:	d805      	bhi.n	80178e4 <__ieee754_rem_pio2f+0x20>
 80178d8:	2300      	movs	r3, #0
 80178da:	ed80 0a00 	vstr	s0, [r0]
 80178de:	6043      	str	r3, [r0, #4]
 80178e0:	2000      	movs	r0, #0
 80178e2:	e022      	b.n	801792a <__ieee754_rem_pio2f+0x66>
 80178e4:	4b82      	ldr	r3, [pc, #520]	@ (8017af0 <__ieee754_rem_pio2f+0x22c>)
 80178e6:	429d      	cmp	r5, r3
 80178e8:	d83a      	bhi.n	8017960 <__ieee754_rem_pio2f+0x9c>
 80178ea:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80178ee:	2e00      	cmp	r6, #0
 80178f0:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8017af4 <__ieee754_rem_pio2f+0x230>
 80178f4:	4a80      	ldr	r2, [pc, #512]	@ (8017af8 <__ieee754_rem_pio2f+0x234>)
 80178f6:	f023 030f 	bic.w	r3, r3, #15
 80178fa:	dd18      	ble.n	801792e <__ieee754_rem_pio2f+0x6a>
 80178fc:	4293      	cmp	r3, r2
 80178fe:	ee70 7a47 	vsub.f32	s15, s0, s14
 8017902:	bf09      	itett	eq
 8017904:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8017afc <__ieee754_rem_pio2f+0x238>
 8017908:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8017b00 <__ieee754_rem_pio2f+0x23c>
 801790c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8017b04 <__ieee754_rem_pio2f+0x240>
 8017910:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8017914:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8017918:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801791c:	ed80 7a00 	vstr	s14, [r0]
 8017920:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8017924:	edc0 7a01 	vstr	s15, [r0, #4]
 8017928:	2001      	movs	r0, #1
 801792a:	b007      	add	sp, #28
 801792c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801792e:	4293      	cmp	r3, r2
 8017930:	ee70 7a07 	vadd.f32	s15, s0, s14
 8017934:	bf09      	itett	eq
 8017936:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8017afc <__ieee754_rem_pio2f+0x238>
 801793a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8017b00 <__ieee754_rem_pio2f+0x23c>
 801793e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8017b04 <__ieee754_rem_pio2f+0x240>
 8017942:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8017946:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801794a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801794e:	ed80 7a00 	vstr	s14, [r0]
 8017952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8017956:	edc0 7a01 	vstr	s15, [r0, #4]
 801795a:	f04f 30ff 	mov.w	r0, #4294967295
 801795e:	e7e4      	b.n	801792a <__ieee754_rem_pio2f+0x66>
 8017960:	4b69      	ldr	r3, [pc, #420]	@ (8017b08 <__ieee754_rem_pio2f+0x244>)
 8017962:	429d      	cmp	r5, r3
 8017964:	d873      	bhi.n	8017a4e <__ieee754_rem_pio2f+0x18a>
 8017966:	f7fe fe91 	bl	801668c <fabsf>
 801796a:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8017b0c <__ieee754_rem_pio2f+0x248>
 801796e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017972:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801797a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801797e:	ee17 0a90 	vmov	r0, s15
 8017982:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8017af4 <__ieee754_rem_pio2f+0x230>
 8017986:	eea7 0a67 	vfms.f32	s0, s14, s15
 801798a:	281f      	cmp	r0, #31
 801798c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8017b00 <__ieee754_rem_pio2f+0x23c>
 8017990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017994:	eeb1 6a47 	vneg.f32	s12, s14
 8017998:	ee70 6a67 	vsub.f32	s13, s0, s15
 801799c:	ee16 1a90 	vmov	r1, s13
 80179a0:	dc09      	bgt.n	80179b6 <__ieee754_rem_pio2f+0xf2>
 80179a2:	4a5b      	ldr	r2, [pc, #364]	@ (8017b10 <__ieee754_rem_pio2f+0x24c>)
 80179a4:	1e47      	subs	r7, r0, #1
 80179a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80179aa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80179ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d107      	bne.n	80179c6 <__ieee754_rem_pio2f+0x102>
 80179b6:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80179ba:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80179be:	2a08      	cmp	r2, #8
 80179c0:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80179c4:	dc14      	bgt.n	80179f0 <__ieee754_rem_pio2f+0x12c>
 80179c6:	6021      	str	r1, [r4, #0]
 80179c8:	ed94 7a00 	vldr	s14, [r4]
 80179cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80179d0:	2e00      	cmp	r6, #0
 80179d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80179d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80179da:	daa6      	bge.n	801792a <__ieee754_rem_pio2f+0x66>
 80179dc:	eeb1 7a47 	vneg.f32	s14, s14
 80179e0:	eeb1 0a40 	vneg.f32	s0, s0
 80179e4:	ed84 7a00 	vstr	s14, [r4]
 80179e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80179ec:	4240      	negs	r0, r0
 80179ee:	e79c      	b.n	801792a <__ieee754_rem_pio2f+0x66>
 80179f0:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8017afc <__ieee754_rem_pio2f+0x238>
 80179f4:	eef0 6a40 	vmov.f32	s13, s0
 80179f8:	eee6 6a25 	vfma.f32	s13, s12, s11
 80179fc:	ee70 7a66 	vsub.f32	s15, s0, s13
 8017a00:	eee6 7a25 	vfma.f32	s15, s12, s11
 8017a04:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8017b04 <__ieee754_rem_pio2f+0x240>
 8017a08:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8017a0c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8017a10:	ee15 2a90 	vmov	r2, s11
 8017a14:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8017a18:	1a5b      	subs	r3, r3, r1
 8017a1a:	2b19      	cmp	r3, #25
 8017a1c:	dc04      	bgt.n	8017a28 <__ieee754_rem_pio2f+0x164>
 8017a1e:	edc4 5a00 	vstr	s11, [r4]
 8017a22:	eeb0 0a66 	vmov.f32	s0, s13
 8017a26:	e7cf      	b.n	80179c8 <__ieee754_rem_pio2f+0x104>
 8017a28:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8017b14 <__ieee754_rem_pio2f+0x250>
 8017a2c:	eeb0 0a66 	vmov.f32	s0, s13
 8017a30:	eea6 0a25 	vfma.f32	s0, s12, s11
 8017a34:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8017a38:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8017b18 <__ieee754_rem_pio2f+0x254>
 8017a3c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8017a40:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8017a44:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017a48:	ed84 7a00 	vstr	s14, [r4]
 8017a4c:	e7bc      	b.n	80179c8 <__ieee754_rem_pio2f+0x104>
 8017a4e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8017a52:	d306      	bcc.n	8017a62 <__ieee754_rem_pio2f+0x19e>
 8017a54:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017a58:	edc0 7a01 	vstr	s15, [r0, #4]
 8017a5c:	edc0 7a00 	vstr	s15, [r0]
 8017a60:	e73e      	b.n	80178e0 <__ieee754_rem_pio2f+0x1c>
 8017a62:	15ea      	asrs	r2, r5, #23
 8017a64:	3a86      	subs	r2, #134	@ 0x86
 8017a66:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8017a6a:	ee07 3a90 	vmov	s15, r3
 8017a6e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017a72:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8017b1c <__ieee754_rem_pio2f+0x258>
 8017a76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017a7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a7e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8017a82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017a86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8017a8a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017a8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a92:	ed8d 7a04 	vstr	s14, [sp, #16]
 8017a96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017a9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017aa2:	edcd 7a05 	vstr	s15, [sp, #20]
 8017aa6:	d11e      	bne.n	8017ae6 <__ieee754_rem_pio2f+0x222>
 8017aa8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8017aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ab0:	bf0c      	ite	eq
 8017ab2:	2301      	moveq	r3, #1
 8017ab4:	2302      	movne	r3, #2
 8017ab6:	491a      	ldr	r1, [pc, #104]	@ (8017b20 <__ieee754_rem_pio2f+0x25c>)
 8017ab8:	9101      	str	r1, [sp, #4]
 8017aba:	2102      	movs	r1, #2
 8017abc:	9100      	str	r1, [sp, #0]
 8017abe:	a803      	add	r0, sp, #12
 8017ac0:	4621      	mov	r1, r4
 8017ac2:	f000 f98f 	bl	8017de4 <__kernel_rem_pio2f>
 8017ac6:	2e00      	cmp	r6, #0
 8017ac8:	f6bf af2f 	bge.w	801792a <__ieee754_rem_pio2f+0x66>
 8017acc:	edd4 7a00 	vldr	s15, [r4]
 8017ad0:	eef1 7a67 	vneg.f32	s15, s15
 8017ad4:	edc4 7a00 	vstr	s15, [r4]
 8017ad8:	edd4 7a01 	vldr	s15, [r4, #4]
 8017adc:	eef1 7a67 	vneg.f32	s15, s15
 8017ae0:	edc4 7a01 	vstr	s15, [r4, #4]
 8017ae4:	e782      	b.n	80179ec <__ieee754_rem_pio2f+0x128>
 8017ae6:	2303      	movs	r3, #3
 8017ae8:	e7e5      	b.n	8017ab6 <__ieee754_rem_pio2f+0x1f2>
 8017aea:	bf00      	nop
 8017aec:	3f490fd8 	.word	0x3f490fd8
 8017af0:	4016cbe3 	.word	0x4016cbe3
 8017af4:	3fc90f80 	.word	0x3fc90f80
 8017af8:	3fc90fd0 	.word	0x3fc90fd0
 8017afc:	37354400 	.word	0x37354400
 8017b00:	37354443 	.word	0x37354443
 8017b04:	2e85a308 	.word	0x2e85a308
 8017b08:	43490f80 	.word	0x43490f80
 8017b0c:	3f22f984 	.word	0x3f22f984
 8017b10:	08019a68 	.word	0x08019a68
 8017b14:	2e85a300 	.word	0x2e85a300
 8017b18:	248d3132 	.word	0x248d3132
 8017b1c:	43800000 	.word	0x43800000
 8017b20:	08019ae8 	.word	0x08019ae8

08017b24 <atanf>:
 8017b24:	b538      	push	{r3, r4, r5, lr}
 8017b26:	ee10 5a10 	vmov	r5, s0
 8017b2a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8017b2e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8017b32:	eef0 7a40 	vmov.f32	s15, s0
 8017b36:	d310      	bcc.n	8017b5a <atanf+0x36>
 8017b38:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8017b3c:	d904      	bls.n	8017b48 <atanf+0x24>
 8017b3e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017b42:	eeb0 0a67 	vmov.f32	s0, s15
 8017b46:	bd38      	pop	{r3, r4, r5, pc}
 8017b48:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017c80 <atanf+0x15c>
 8017b4c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017c84 <atanf+0x160>
 8017b50:	2d00      	cmp	r5, #0
 8017b52:	bfc8      	it	gt
 8017b54:	eef0 7a47 	vmovgt.f32	s15, s14
 8017b58:	e7f3      	b.n	8017b42 <atanf+0x1e>
 8017b5a:	4b4b      	ldr	r3, [pc, #300]	@ (8017c88 <atanf+0x164>)
 8017b5c:	429c      	cmp	r4, r3
 8017b5e:	d810      	bhi.n	8017b82 <atanf+0x5e>
 8017b60:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017b64:	d20a      	bcs.n	8017b7c <atanf+0x58>
 8017b66:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017c8c <atanf+0x168>
 8017b6a:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b72:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b7a:	dce2      	bgt.n	8017b42 <atanf+0x1e>
 8017b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8017b80:	e013      	b.n	8017baa <atanf+0x86>
 8017b82:	f7fe fd83 	bl	801668c <fabsf>
 8017b86:	4b42      	ldr	r3, [pc, #264]	@ (8017c90 <atanf+0x16c>)
 8017b88:	429c      	cmp	r4, r3
 8017b8a:	d84f      	bhi.n	8017c2c <atanf+0x108>
 8017b8c:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8017b90:	429c      	cmp	r4, r3
 8017b92:	d841      	bhi.n	8017c18 <atanf+0xf4>
 8017b94:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017b98:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017b9c:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017ba6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017baa:	1c5a      	adds	r2, r3, #1
 8017bac:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017bb0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017c94 <atanf+0x170>
 8017bb4:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017c98 <atanf+0x174>
 8017bb8:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8017c9c <atanf+0x178>
 8017bbc:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017bc0:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017bc4:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8017ca0 <atanf+0x17c>
 8017bc8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017bcc:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017ca4 <atanf+0x180>
 8017bd0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017bd4:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017ca8 <atanf+0x184>
 8017bd8:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017bdc:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017cac <atanf+0x188>
 8017be0:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017be4:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017cb0 <atanf+0x18c>
 8017be8:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017bec:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8017cb4 <atanf+0x190>
 8017bf0:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017bf4:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8017cb8 <atanf+0x194>
 8017bf8:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017bfc:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8017cbc <atanf+0x198>
 8017c00:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017c04:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017c08:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017c10:	d121      	bne.n	8017c56 <atanf+0x132>
 8017c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c16:	e794      	b.n	8017b42 <atanf+0x1e>
 8017c18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017c1c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017c20:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017c24:	2301      	movs	r3, #1
 8017c26:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017c2a:	e7be      	b.n	8017baa <atanf+0x86>
 8017c2c:	4b24      	ldr	r3, [pc, #144]	@ (8017cc0 <atanf+0x19c>)
 8017c2e:	429c      	cmp	r4, r3
 8017c30:	d80b      	bhi.n	8017c4a <atanf+0x126>
 8017c32:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017c36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017c3a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017c3e:	2302      	movs	r3, #2
 8017c40:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017c48:	e7af      	b.n	8017baa <atanf+0x86>
 8017c4a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017c4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017c52:	2303      	movs	r3, #3
 8017c54:	e7a9      	b.n	8017baa <atanf+0x86>
 8017c56:	4a1b      	ldr	r2, [pc, #108]	@ (8017cc4 <atanf+0x1a0>)
 8017c58:	491b      	ldr	r1, [pc, #108]	@ (8017cc8 <atanf+0x1a4>)
 8017c5a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017c5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017c62:	edd3 6a00 	vldr	s13, [r3]
 8017c66:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017c6a:	2d00      	cmp	r5, #0
 8017c6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017c70:	edd2 7a00 	vldr	s15, [r2]
 8017c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c78:	bfb8      	it	lt
 8017c7a:	eef1 7a67 	vneglt.f32	s15, s15
 8017c7e:	e760      	b.n	8017b42 <atanf+0x1e>
 8017c80:	bfc90fdb 	.word	0xbfc90fdb
 8017c84:	3fc90fdb 	.word	0x3fc90fdb
 8017c88:	3edfffff 	.word	0x3edfffff
 8017c8c:	7149f2ca 	.word	0x7149f2ca
 8017c90:	3f97ffff 	.word	0x3f97ffff
 8017c94:	3c8569d7 	.word	0x3c8569d7
 8017c98:	3d4bda59 	.word	0x3d4bda59
 8017c9c:	bd6ef16b 	.word	0xbd6ef16b
 8017ca0:	3d886b35 	.word	0x3d886b35
 8017ca4:	3dba2e6e 	.word	0x3dba2e6e
 8017ca8:	3e124925 	.word	0x3e124925
 8017cac:	3eaaaaab 	.word	0x3eaaaaab
 8017cb0:	bd15a221 	.word	0xbd15a221
 8017cb4:	bd9d8795 	.word	0xbd9d8795
 8017cb8:	bde38e38 	.word	0xbde38e38
 8017cbc:	be4ccccd 	.word	0xbe4ccccd
 8017cc0:	401bffff 	.word	0x401bffff
 8017cc4:	08019e10 	.word	0x08019e10
 8017cc8:	08019e00 	.word	0x08019e00

08017ccc <scalbnf>:
 8017ccc:	ee10 3a10 	vmov	r3, s0
 8017cd0:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8017cd4:	d02b      	beq.n	8017d2e <scalbnf+0x62>
 8017cd6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8017cda:	d302      	bcc.n	8017ce2 <scalbnf+0x16>
 8017cdc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017ce0:	4770      	bx	lr
 8017ce2:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8017ce6:	d123      	bne.n	8017d30 <scalbnf+0x64>
 8017ce8:	4b24      	ldr	r3, [pc, #144]	@ (8017d7c <scalbnf+0xb0>)
 8017cea:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8017d80 <scalbnf+0xb4>
 8017cee:	4298      	cmp	r0, r3
 8017cf0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017cf4:	db17      	blt.n	8017d26 <scalbnf+0x5a>
 8017cf6:	ee10 3a10 	vmov	r3, s0
 8017cfa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8017cfe:	3a19      	subs	r2, #25
 8017d00:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8017d04:	4288      	cmp	r0, r1
 8017d06:	dd15      	ble.n	8017d34 <scalbnf+0x68>
 8017d08:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8017d84 <scalbnf+0xb8>
 8017d0c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8017d88 <scalbnf+0xbc>
 8017d10:	ee10 3a10 	vmov	r3, s0
 8017d14:	eeb0 7a67 	vmov.f32	s14, s15
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	bfb8      	it	lt
 8017d1c:	eef0 7a66 	vmovlt.f32	s15, s13
 8017d20:	ee27 0a87 	vmul.f32	s0, s15, s14
 8017d24:	4770      	bx	lr
 8017d26:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017d8c <scalbnf+0xc0>
 8017d2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017d2e:	4770      	bx	lr
 8017d30:	0dd2      	lsrs	r2, r2, #23
 8017d32:	e7e5      	b.n	8017d00 <scalbnf+0x34>
 8017d34:	4410      	add	r0, r2
 8017d36:	28fe      	cmp	r0, #254	@ 0xfe
 8017d38:	dce6      	bgt.n	8017d08 <scalbnf+0x3c>
 8017d3a:	2800      	cmp	r0, #0
 8017d3c:	dd06      	ble.n	8017d4c <scalbnf+0x80>
 8017d3e:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017d42:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017d46:	ee00 3a10 	vmov	s0, r3
 8017d4a:	4770      	bx	lr
 8017d4c:	f110 0f16 	cmn.w	r0, #22
 8017d50:	da09      	bge.n	8017d66 <scalbnf+0x9a>
 8017d52:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8017d8c <scalbnf+0xc0>
 8017d56:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8017d90 <scalbnf+0xc4>
 8017d5a:	ee10 3a10 	vmov	r3, s0
 8017d5e:	eeb0 7a67 	vmov.f32	s14, s15
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	e7d9      	b.n	8017d1a <scalbnf+0x4e>
 8017d66:	3019      	adds	r0, #25
 8017d68:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017d6c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8017d70:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8017d94 <scalbnf+0xc8>
 8017d74:	ee07 3a90 	vmov	s15, r3
 8017d78:	e7d7      	b.n	8017d2a <scalbnf+0x5e>
 8017d7a:	bf00      	nop
 8017d7c:	ffff3cb0 	.word	0xffff3cb0
 8017d80:	4c000000 	.word	0x4c000000
 8017d84:	7149f2ca 	.word	0x7149f2ca
 8017d88:	f149f2ca 	.word	0xf149f2ca
 8017d8c:	0da24260 	.word	0x0da24260
 8017d90:	8da24260 	.word	0x8da24260
 8017d94:	33000000 	.word	0x33000000

08017d98 <with_errnof>:
 8017d98:	b510      	push	{r4, lr}
 8017d9a:	ed2d 8b02 	vpush	{d8}
 8017d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8017da2:	4604      	mov	r4, r0
 8017da4:	f7fe fac2 	bl	801632c <__errno>
 8017da8:	eeb0 0a48 	vmov.f32	s0, s16
 8017dac:	ecbd 8b02 	vpop	{d8}
 8017db0:	6004      	str	r4, [r0, #0]
 8017db2:	bd10      	pop	{r4, pc}

08017db4 <xflowf>:
 8017db4:	b130      	cbz	r0, 8017dc4 <xflowf+0x10>
 8017db6:	eef1 7a40 	vneg.f32	s15, s0
 8017dba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8017dbe:	2022      	movs	r0, #34	@ 0x22
 8017dc0:	f7ff bfea 	b.w	8017d98 <with_errnof>
 8017dc4:	eef0 7a40 	vmov.f32	s15, s0
 8017dc8:	e7f7      	b.n	8017dba <xflowf+0x6>
	...

08017dcc <__math_uflowf>:
 8017dcc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017dd4 <__math_uflowf+0x8>
 8017dd0:	f7ff bff0 	b.w	8017db4 <xflowf>
 8017dd4:	10000000 	.word	0x10000000

08017dd8 <__math_oflowf>:
 8017dd8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017de0 <__math_oflowf+0x8>
 8017ddc:	f7ff bfea 	b.w	8017db4 <xflowf>
 8017de0:	70000000 	.word	0x70000000

08017de4 <__kernel_rem_pio2f>:
 8017de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017de8:	ed2d 8b04 	vpush	{d8-d9}
 8017dec:	b0d9      	sub	sp, #356	@ 0x164
 8017dee:	4690      	mov	r8, r2
 8017df0:	9001      	str	r0, [sp, #4]
 8017df2:	4ab9      	ldr	r2, [pc, #740]	@ (80180d8 <__kernel_rem_pio2f+0x2f4>)
 8017df4:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8017df6:	f118 0f04 	cmn.w	r8, #4
 8017dfa:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8017dfe:	460f      	mov	r7, r1
 8017e00:	f103 3bff 	add.w	fp, r3, #4294967295
 8017e04:	db27      	blt.n	8017e56 <__kernel_rem_pio2f+0x72>
 8017e06:	f1b8 0203 	subs.w	r2, r8, #3
 8017e0a:	bf48      	it	mi
 8017e0c:	f108 0204 	addmi.w	r2, r8, #4
 8017e10:	10d2      	asrs	r2, r2, #3
 8017e12:	1c55      	adds	r5, r2, #1
 8017e14:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017e16:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 8017e1a:	00e8      	lsls	r0, r5, #3
 8017e1c:	eba2 060b 	sub.w	r6, r2, fp
 8017e20:	9002      	str	r0, [sp, #8]
 8017e22:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8017e26:	eb0a 0c0b 	add.w	ip, sl, fp
 8017e2a:	ac1c      	add	r4, sp, #112	@ 0x70
 8017e2c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8017e30:	2000      	movs	r0, #0
 8017e32:	4560      	cmp	r0, ip
 8017e34:	dd11      	ble.n	8017e5a <__kernel_rem_pio2f+0x76>
 8017e36:	a91c      	add	r1, sp, #112	@ 0x70
 8017e38:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8017e3c:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8017e40:	f04f 0c00 	mov.w	ip, #0
 8017e44:	45d4      	cmp	ip, sl
 8017e46:	dc27      	bgt.n	8017e98 <__kernel_rem_pio2f+0xb4>
 8017e48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8017e4c:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 8017e50:	4606      	mov	r6, r0
 8017e52:	2400      	movs	r4, #0
 8017e54:	e016      	b.n	8017e84 <__kernel_rem_pio2f+0xa0>
 8017e56:	2200      	movs	r2, #0
 8017e58:	e7db      	b.n	8017e12 <__kernel_rem_pio2f+0x2e>
 8017e5a:	42c6      	cmn	r6, r0
 8017e5c:	bf5d      	ittte	pl
 8017e5e:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8017e62:	ee07 1a90 	vmovpl	s15, r1
 8017e66:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8017e6a:	eef0 7a47 	vmovmi.f32	s15, s14
 8017e6e:	ece4 7a01 	vstmia	r4!, {s15}
 8017e72:	3001      	adds	r0, #1
 8017e74:	e7dd      	b.n	8017e32 <__kernel_rem_pio2f+0x4e>
 8017e76:	ecfe 6a01 	vldmia	lr!, {s13}
 8017e7a:	ed96 7a00 	vldr	s14, [r6]
 8017e7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8017e82:	3401      	adds	r4, #1
 8017e84:	455c      	cmp	r4, fp
 8017e86:	f1a6 0604 	sub.w	r6, r6, #4
 8017e8a:	ddf4      	ble.n	8017e76 <__kernel_rem_pio2f+0x92>
 8017e8c:	ece9 7a01 	vstmia	r9!, {s15}
 8017e90:	f10c 0c01 	add.w	ip, ip, #1
 8017e94:	3004      	adds	r0, #4
 8017e96:	e7d5      	b.n	8017e44 <__kernel_rem_pio2f+0x60>
 8017e98:	a908      	add	r1, sp, #32
 8017e9a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017e9e:	9104      	str	r1, [sp, #16]
 8017ea0:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8017ea2:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80180e4 <__kernel_rem_pio2f+0x300>
 8017ea6:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80180e0 <__kernel_rem_pio2f+0x2fc>
 8017eaa:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017eae:	9203      	str	r2, [sp, #12]
 8017eb0:	4654      	mov	r4, sl
 8017eb2:	00a2      	lsls	r2, r4, #2
 8017eb4:	9205      	str	r2, [sp, #20]
 8017eb6:	aa58      	add	r2, sp, #352	@ 0x160
 8017eb8:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8017ebc:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8017ec0:	a944      	add	r1, sp, #272	@ 0x110
 8017ec2:	aa08      	add	r2, sp, #32
 8017ec4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8017ec8:	4694      	mov	ip, r2
 8017eca:	4626      	mov	r6, r4
 8017ecc:	2e00      	cmp	r6, #0
 8017ece:	f1a0 0004 	sub.w	r0, r0, #4
 8017ed2:	dc4c      	bgt.n	8017f6e <__kernel_rem_pio2f+0x18a>
 8017ed4:	4628      	mov	r0, r5
 8017ed6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017eda:	f7ff fef7 	bl	8017ccc <scalbnf>
 8017ede:	eeb0 8a40 	vmov.f32	s16, s0
 8017ee2:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8017ee6:	ee28 0a00 	vmul.f32	s0, s16, s0
 8017eea:	f000 f9ed 	bl	80182c8 <floorf>
 8017eee:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8017ef2:	eea0 8a67 	vfms.f32	s16, s0, s15
 8017ef6:	2d00      	cmp	r5, #0
 8017ef8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017efc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8017f00:	ee17 9a90 	vmov	r9, s15
 8017f04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f08:	ee38 8a67 	vsub.f32	s16, s16, s15
 8017f0c:	dd41      	ble.n	8017f92 <__kernel_rem_pio2f+0x1ae>
 8017f0e:	f104 3cff 	add.w	ip, r4, #4294967295
 8017f12:	a908      	add	r1, sp, #32
 8017f14:	f1c5 0e08 	rsb	lr, r5, #8
 8017f18:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8017f1c:	fa46 f00e 	asr.w	r0, r6, lr
 8017f20:	4481      	add	r9, r0
 8017f22:	fa00 f00e 	lsl.w	r0, r0, lr
 8017f26:	1a36      	subs	r6, r6, r0
 8017f28:	f1c5 0007 	rsb	r0, r5, #7
 8017f2c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8017f30:	4106      	asrs	r6, r0
 8017f32:	2e00      	cmp	r6, #0
 8017f34:	dd3c      	ble.n	8017fb0 <__kernel_rem_pio2f+0x1cc>
 8017f36:	f04f 0e00 	mov.w	lr, #0
 8017f3a:	f109 0901 	add.w	r9, r9, #1
 8017f3e:	4670      	mov	r0, lr
 8017f40:	4574      	cmp	r4, lr
 8017f42:	dc68      	bgt.n	8018016 <__kernel_rem_pio2f+0x232>
 8017f44:	2d00      	cmp	r5, #0
 8017f46:	dd03      	ble.n	8017f50 <__kernel_rem_pio2f+0x16c>
 8017f48:	2d01      	cmp	r5, #1
 8017f4a:	d074      	beq.n	8018036 <__kernel_rem_pio2f+0x252>
 8017f4c:	2d02      	cmp	r5, #2
 8017f4e:	d07d      	beq.n	801804c <__kernel_rem_pio2f+0x268>
 8017f50:	2e02      	cmp	r6, #2
 8017f52:	d12d      	bne.n	8017fb0 <__kernel_rem_pio2f+0x1cc>
 8017f54:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017f58:	ee30 8a48 	vsub.f32	s16, s0, s16
 8017f5c:	b340      	cbz	r0, 8017fb0 <__kernel_rem_pio2f+0x1cc>
 8017f5e:	4628      	mov	r0, r5
 8017f60:	9306      	str	r3, [sp, #24]
 8017f62:	f7ff feb3 	bl	8017ccc <scalbnf>
 8017f66:	9b06      	ldr	r3, [sp, #24]
 8017f68:	ee38 8a40 	vsub.f32	s16, s16, s0
 8017f6c:	e020      	b.n	8017fb0 <__kernel_rem_pio2f+0x1cc>
 8017f6e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8017f72:	3e01      	subs	r6, #1
 8017f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8017f78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f7c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8017f80:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8017f84:	ecac 0a01 	vstmia	ip!, {s0}
 8017f88:	ed90 0a00 	vldr	s0, [r0]
 8017f8c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8017f90:	e79c      	b.n	8017ecc <__kernel_rem_pio2f+0xe8>
 8017f92:	d105      	bne.n	8017fa0 <__kernel_rem_pio2f+0x1bc>
 8017f94:	1e60      	subs	r0, r4, #1
 8017f96:	a908      	add	r1, sp, #32
 8017f98:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8017f9c:	11f6      	asrs	r6, r6, #7
 8017f9e:	e7c8      	b.n	8017f32 <__kernel_rem_pio2f+0x14e>
 8017fa0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017fa4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8017fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fac:	da31      	bge.n	8018012 <__kernel_rem_pio2f+0x22e>
 8017fae:	2600      	movs	r6, #0
 8017fb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fb8:	f040 8098 	bne.w	80180ec <__kernel_rem_pio2f+0x308>
 8017fbc:	1e60      	subs	r0, r4, #1
 8017fbe:	2200      	movs	r2, #0
 8017fc0:	4550      	cmp	r0, sl
 8017fc2:	da4b      	bge.n	801805c <__kernel_rem_pio2f+0x278>
 8017fc4:	2a00      	cmp	r2, #0
 8017fc6:	d065      	beq.n	8018094 <__kernel_rem_pio2f+0x2b0>
 8017fc8:	3c01      	subs	r4, #1
 8017fca:	ab08      	add	r3, sp, #32
 8017fcc:	3d08      	subs	r5, #8
 8017fce:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d0f8      	beq.n	8017fc8 <__kernel_rem_pio2f+0x1e4>
 8017fd6:	4628      	mov	r0, r5
 8017fd8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017fdc:	f7ff fe76 	bl	8017ccc <scalbnf>
 8017fe0:	1c63      	adds	r3, r4, #1
 8017fe2:	aa44      	add	r2, sp, #272	@ 0x110
 8017fe4:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80180e4 <__kernel_rem_pio2f+0x300>
 8017fe8:	0099      	lsls	r1, r3, #2
 8017fea:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017fee:	4623      	mov	r3, r4
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	f280 80a9 	bge.w	8018148 <__kernel_rem_pio2f+0x364>
 8017ff6:	4623      	mov	r3, r4
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	f2c0 80c7 	blt.w	801818c <__kernel_rem_pio2f+0x3a8>
 8017ffe:	aa44      	add	r2, sp, #272	@ 0x110
 8018000:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018004:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80180dc <__kernel_rem_pio2f+0x2f8>
 8018008:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 801800c:	2000      	movs	r0, #0
 801800e:	1ae2      	subs	r2, r4, r3
 8018010:	e0b1      	b.n	8018176 <__kernel_rem_pio2f+0x392>
 8018012:	2602      	movs	r6, #2
 8018014:	e78f      	b.n	8017f36 <__kernel_rem_pio2f+0x152>
 8018016:	f852 1b04 	ldr.w	r1, [r2], #4
 801801a:	b948      	cbnz	r0, 8018030 <__kernel_rem_pio2f+0x24c>
 801801c:	b121      	cbz	r1, 8018028 <__kernel_rem_pio2f+0x244>
 801801e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8018022:	f842 1c04 	str.w	r1, [r2, #-4]
 8018026:	2101      	movs	r1, #1
 8018028:	f10e 0e01 	add.w	lr, lr, #1
 801802c:	4608      	mov	r0, r1
 801802e:	e787      	b.n	8017f40 <__kernel_rem_pio2f+0x15c>
 8018030:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018034:	e7f5      	b.n	8018022 <__kernel_rem_pio2f+0x23e>
 8018036:	f104 3cff 	add.w	ip, r4, #4294967295
 801803a:	aa08      	add	r2, sp, #32
 801803c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018040:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018044:	a908      	add	r1, sp, #32
 8018046:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801804a:	e781      	b.n	8017f50 <__kernel_rem_pio2f+0x16c>
 801804c:	f104 3cff 	add.w	ip, r4, #4294967295
 8018050:	aa08      	add	r2, sp, #32
 8018052:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018056:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801805a:	e7f3      	b.n	8018044 <__kernel_rem_pio2f+0x260>
 801805c:	a908      	add	r1, sp, #32
 801805e:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018062:	3801      	subs	r0, #1
 8018064:	430a      	orrs	r2, r1
 8018066:	e7ab      	b.n	8017fc0 <__kernel_rem_pio2f+0x1dc>
 8018068:	3201      	adds	r2, #1
 801806a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801806e:	2e00      	cmp	r6, #0
 8018070:	d0fa      	beq.n	8018068 <__kernel_rem_pio2f+0x284>
 8018072:	9905      	ldr	r1, [sp, #20]
 8018074:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8018078:	eb0d 0001 	add.w	r0, sp, r1
 801807c:	18e6      	adds	r6, r4, r3
 801807e:	a91c      	add	r1, sp, #112	@ 0x70
 8018080:	f104 0c01 	add.w	ip, r4, #1
 8018084:	384c      	subs	r0, #76	@ 0x4c
 8018086:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801808a:	4422      	add	r2, r4
 801808c:	4562      	cmp	r2, ip
 801808e:	da04      	bge.n	801809a <__kernel_rem_pio2f+0x2b6>
 8018090:	4614      	mov	r4, r2
 8018092:	e70e      	b.n	8017eb2 <__kernel_rem_pio2f+0xce>
 8018094:	9804      	ldr	r0, [sp, #16]
 8018096:	2201      	movs	r2, #1
 8018098:	e7e7      	b.n	801806a <__kernel_rem_pio2f+0x286>
 801809a:	9903      	ldr	r1, [sp, #12]
 801809c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80180a0:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80180a4:	9105      	str	r1, [sp, #20]
 80180a6:	ee07 1a90 	vmov	s15, r1
 80180aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180ae:	2400      	movs	r4, #0
 80180b0:	ece6 7a01 	vstmia	r6!, {s15}
 80180b4:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 80180b8:	46b1      	mov	r9, r6
 80180ba:	455c      	cmp	r4, fp
 80180bc:	dd04      	ble.n	80180c8 <__kernel_rem_pio2f+0x2e4>
 80180be:	ece0 7a01 	vstmia	r0!, {s15}
 80180c2:	f10c 0c01 	add.w	ip, ip, #1
 80180c6:	e7e1      	b.n	801808c <__kernel_rem_pio2f+0x2a8>
 80180c8:	ecfe 6a01 	vldmia	lr!, {s13}
 80180cc:	ed39 7a01 	vldmdb	r9!, {s14}
 80180d0:	3401      	adds	r4, #1
 80180d2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80180d6:	e7f0      	b.n	80180ba <__kernel_rem_pio2f+0x2d6>
 80180d8:	08019e4c 	.word	0x08019e4c
 80180dc:	08019e20 	.word	0x08019e20
 80180e0:	43800000 	.word	0x43800000
 80180e4:	3b800000 	.word	0x3b800000
 80180e8:	00000000 	.word	0x00000000
 80180ec:	9b02      	ldr	r3, [sp, #8]
 80180ee:	eeb0 0a48 	vmov.f32	s0, s16
 80180f2:	eba3 0008 	sub.w	r0, r3, r8
 80180f6:	f7ff fde9 	bl	8017ccc <scalbnf>
 80180fa:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80180e0 <__kernel_rem_pio2f+0x2fc>
 80180fe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018106:	db19      	blt.n	801813c <__kernel_rem_pio2f+0x358>
 8018108:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80180e4 <__kernel_rem_pio2f+0x300>
 801810c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018110:	aa08      	add	r2, sp, #32
 8018112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018116:	3508      	adds	r5, #8
 8018118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801811c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018124:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018128:	ee10 3a10 	vmov	r3, s0
 801812c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018130:	ee17 3a90 	vmov	r3, s15
 8018134:	3401      	adds	r4, #1
 8018136:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801813a:	e74c      	b.n	8017fd6 <__kernel_rem_pio2f+0x1f2>
 801813c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018140:	aa08      	add	r2, sp, #32
 8018142:	ee10 3a10 	vmov	r3, s0
 8018146:	e7f6      	b.n	8018136 <__kernel_rem_pio2f+0x352>
 8018148:	a808      	add	r0, sp, #32
 801814a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801814e:	9001      	str	r0, [sp, #4]
 8018150:	ee07 0a90 	vmov	s15, r0
 8018154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018158:	3b01      	subs	r3, #1
 801815a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801815e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018162:	ed62 7a01 	vstmdb	r2!, {s15}
 8018166:	e743      	b.n	8017ff0 <__kernel_rem_pio2f+0x20c>
 8018168:	ecfc 6a01 	vldmia	ip!, {s13}
 801816c:	ecb5 7a01 	vldmia	r5!, {s14}
 8018170:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018174:	3001      	adds	r0, #1
 8018176:	4550      	cmp	r0, sl
 8018178:	dc01      	bgt.n	801817e <__kernel_rem_pio2f+0x39a>
 801817a:	4282      	cmp	r2, r0
 801817c:	daf4      	bge.n	8018168 <__kernel_rem_pio2f+0x384>
 801817e:	a858      	add	r0, sp, #352	@ 0x160
 8018180:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018184:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8018188:	3b01      	subs	r3, #1
 801818a:	e735      	b.n	8017ff8 <__kernel_rem_pio2f+0x214>
 801818c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801818e:	2b02      	cmp	r3, #2
 8018190:	dc09      	bgt.n	80181a6 <__kernel_rem_pio2f+0x3c2>
 8018192:	2b00      	cmp	r3, #0
 8018194:	dc2b      	bgt.n	80181ee <__kernel_rem_pio2f+0x40a>
 8018196:	d044      	beq.n	8018222 <__kernel_rem_pio2f+0x43e>
 8018198:	f009 0007 	and.w	r0, r9, #7
 801819c:	b059      	add	sp, #356	@ 0x164
 801819e:	ecbd 8b04 	vpop	{d8-d9}
 80181a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181a6:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80181a8:	2b03      	cmp	r3, #3
 80181aa:	d1f5      	bne.n	8018198 <__kernel_rem_pio2f+0x3b4>
 80181ac:	aa30      	add	r2, sp, #192	@ 0xc0
 80181ae:	1f0b      	subs	r3, r1, #4
 80181b0:	4413      	add	r3, r2
 80181b2:	461a      	mov	r2, r3
 80181b4:	4620      	mov	r0, r4
 80181b6:	2800      	cmp	r0, #0
 80181b8:	f1a2 0204 	sub.w	r2, r2, #4
 80181bc:	dc52      	bgt.n	8018264 <__kernel_rem_pio2f+0x480>
 80181be:	4622      	mov	r2, r4
 80181c0:	2a01      	cmp	r2, #1
 80181c2:	f1a3 0304 	sub.w	r3, r3, #4
 80181c6:	dc5d      	bgt.n	8018284 <__kernel_rem_pio2f+0x4a0>
 80181c8:	ab30      	add	r3, sp, #192	@ 0xc0
 80181ca:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 80181ce:	440b      	add	r3, r1
 80181d0:	2c01      	cmp	r4, #1
 80181d2:	dc67      	bgt.n	80182a4 <__kernel_rem_pio2f+0x4c0>
 80181d4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80181d8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80181dc:	2e00      	cmp	r6, #0
 80181de:	d167      	bne.n	80182b0 <__kernel_rem_pio2f+0x4cc>
 80181e0:	edc7 6a00 	vstr	s13, [r7]
 80181e4:	ed87 7a01 	vstr	s14, [r7, #4]
 80181e8:	edc7 7a02 	vstr	s15, [r7, #8]
 80181ec:	e7d4      	b.n	8018198 <__kernel_rem_pio2f+0x3b4>
 80181ee:	ab30      	add	r3, sp, #192	@ 0xc0
 80181f0:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 80181f4:	440b      	add	r3, r1
 80181f6:	4622      	mov	r2, r4
 80181f8:	2a00      	cmp	r2, #0
 80181fa:	da24      	bge.n	8018246 <__kernel_rem_pio2f+0x462>
 80181fc:	b34e      	cbz	r6, 8018252 <__kernel_rem_pio2f+0x46e>
 80181fe:	eef1 7a47 	vneg.f32	s15, s14
 8018202:	edc7 7a00 	vstr	s15, [r7]
 8018206:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801820a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801820e:	aa31      	add	r2, sp, #196	@ 0xc4
 8018210:	2301      	movs	r3, #1
 8018212:	429c      	cmp	r4, r3
 8018214:	da20      	bge.n	8018258 <__kernel_rem_pio2f+0x474>
 8018216:	b10e      	cbz	r6, 801821c <__kernel_rem_pio2f+0x438>
 8018218:	eef1 7a67 	vneg.f32	s15, s15
 801821c:	edc7 7a01 	vstr	s15, [r7, #4]
 8018220:	e7ba      	b.n	8018198 <__kernel_rem_pio2f+0x3b4>
 8018222:	ab30      	add	r3, sp, #192	@ 0xc0
 8018224:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80180e8 <__kernel_rem_pio2f+0x304>
 8018228:	440b      	add	r3, r1
 801822a:	2c00      	cmp	r4, #0
 801822c:	da05      	bge.n	801823a <__kernel_rem_pio2f+0x456>
 801822e:	b10e      	cbz	r6, 8018234 <__kernel_rem_pio2f+0x450>
 8018230:	eef1 7a67 	vneg.f32	s15, s15
 8018234:	edc7 7a00 	vstr	s15, [r7]
 8018238:	e7ae      	b.n	8018198 <__kernel_rem_pio2f+0x3b4>
 801823a:	ed33 7a01 	vldmdb	r3!, {s14}
 801823e:	3c01      	subs	r4, #1
 8018240:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018244:	e7f1      	b.n	801822a <__kernel_rem_pio2f+0x446>
 8018246:	ed73 7a01 	vldmdb	r3!, {s15}
 801824a:	3a01      	subs	r2, #1
 801824c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018250:	e7d2      	b.n	80181f8 <__kernel_rem_pio2f+0x414>
 8018252:	eef0 7a47 	vmov.f32	s15, s14
 8018256:	e7d4      	b.n	8018202 <__kernel_rem_pio2f+0x41e>
 8018258:	ecb2 7a01 	vldmia	r2!, {s14}
 801825c:	3301      	adds	r3, #1
 801825e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018262:	e7d6      	b.n	8018212 <__kernel_rem_pio2f+0x42e>
 8018264:	edd2 7a00 	vldr	s15, [r2]
 8018268:	edd2 6a01 	vldr	s13, [r2, #4]
 801826c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018270:	3801      	subs	r0, #1
 8018272:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018276:	ed82 7a00 	vstr	s14, [r2]
 801827a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801827e:	edc2 7a01 	vstr	s15, [r2, #4]
 8018282:	e798      	b.n	80181b6 <__kernel_rem_pio2f+0x3d2>
 8018284:	edd3 7a00 	vldr	s15, [r3]
 8018288:	edd3 6a01 	vldr	s13, [r3, #4]
 801828c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018290:	3a01      	subs	r2, #1
 8018292:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018296:	ed83 7a00 	vstr	s14, [r3]
 801829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801829e:	edc3 7a01 	vstr	s15, [r3, #4]
 80182a2:	e78d      	b.n	80181c0 <__kernel_rem_pio2f+0x3dc>
 80182a4:	ed33 7a01 	vldmdb	r3!, {s14}
 80182a8:	3c01      	subs	r4, #1
 80182aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80182ae:	e78f      	b.n	80181d0 <__kernel_rem_pio2f+0x3ec>
 80182b0:	eef1 6a66 	vneg.f32	s13, s13
 80182b4:	eeb1 7a47 	vneg.f32	s14, s14
 80182b8:	edc7 6a00 	vstr	s13, [r7]
 80182bc:	ed87 7a01 	vstr	s14, [r7, #4]
 80182c0:	eef1 7a67 	vneg.f32	s15, s15
 80182c4:	e790      	b.n	80181e8 <__kernel_rem_pio2f+0x404>
 80182c6:	bf00      	nop

080182c8 <floorf>:
 80182c8:	ee10 3a10 	vmov	r3, s0
 80182cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80182d0:	3a7f      	subs	r2, #127	@ 0x7f
 80182d2:	2a16      	cmp	r2, #22
 80182d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80182d8:	dc2b      	bgt.n	8018332 <floorf+0x6a>
 80182da:	2a00      	cmp	r2, #0
 80182dc:	da12      	bge.n	8018304 <floorf+0x3c>
 80182de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018344 <floorf+0x7c>
 80182e2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80182e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80182ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ee:	dd06      	ble.n	80182fe <floorf+0x36>
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	da24      	bge.n	801833e <floorf+0x76>
 80182f4:	2900      	cmp	r1, #0
 80182f6:	4b14      	ldr	r3, [pc, #80]	@ (8018348 <floorf+0x80>)
 80182f8:	bf08      	it	eq
 80182fa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80182fe:	ee00 3a10 	vmov	s0, r3
 8018302:	4770      	bx	lr
 8018304:	4911      	ldr	r1, [pc, #68]	@ (801834c <floorf+0x84>)
 8018306:	4111      	asrs	r1, r2
 8018308:	420b      	tst	r3, r1
 801830a:	d0fa      	beq.n	8018302 <floorf+0x3a>
 801830c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8018344 <floorf+0x7c>
 8018310:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018314:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801831c:	ddef      	ble.n	80182fe <floorf+0x36>
 801831e:	2b00      	cmp	r3, #0
 8018320:	bfbe      	ittt	lt
 8018322:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8018326:	fa40 f202 	asrlt.w	r2, r0, r2
 801832a:	189b      	addlt	r3, r3, r2
 801832c:	ea23 0301 	bic.w	r3, r3, r1
 8018330:	e7e5      	b.n	80182fe <floorf+0x36>
 8018332:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018336:	d3e4      	bcc.n	8018302 <floorf+0x3a>
 8018338:	ee30 0a00 	vadd.f32	s0, s0, s0
 801833c:	4770      	bx	lr
 801833e:	2300      	movs	r3, #0
 8018340:	e7dd      	b.n	80182fe <floorf+0x36>
 8018342:	bf00      	nop
 8018344:	7149f2ca 	.word	0x7149f2ca
 8018348:	bf800000 	.word	0xbf800000
 801834c:	007fffff 	.word	0x007fffff

08018350 <_init>:
 8018350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018352:	bf00      	nop
 8018354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018356:	bc08      	pop	{r3}
 8018358:	469e      	mov	lr, r3
 801835a:	4770      	bx	lr

0801835c <_fini>:
 801835c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801835e:	bf00      	nop
 8018360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018362:	bc08      	pop	{r3}
 8018364:	469e      	mov	lr, r3
 8018366:	4770      	bx	lr
